uint64_t specialized SettingsAffinityScorer.score(input:environment:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  int v11;
  void (*v12)(void **, uint64_t);
  void *v13;
  unint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v25;

  v3 = type metadata accessor for USOParse();
  v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Parse();
  v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  v10 = (void **)((char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  Input.parse.getter();
  v11 = (*(uint64_t (**)(void **, uint64_t))(v8 + 88))(v10, v7);
  if (v11 == *MEMORY[0x1E4FA1F18])
  {
    v12 = *(void (**)(void **, uint64_t))(v8 + 96);
    v8 += 96;
    v12(v10, v7);
    v13 = *v10;
    v14 = dispatch thunk of PommesResponse.experiences.getter();
    v7 = v14;
    if (v14 >> 62)
    {
      if (_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_4;
      }
    }
    else if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_4:
      if ((v7 & 0xC000000000000001) != 0)
      {
        v15 = (id)MEMORY[0x1BA9E3990](0, v7);
LABEL_7:
        v16 = v15;
        swift_bridgeObjectRelease();

        type metadata accessor for DeviceExpertExperience();
        v17 = swift_dynamicCastClass();

        if (v17) {
          return 3;
        }
        else {
          return 2;
        }
      }
      if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        v15 = *(id *)(v7 + 32);
        goto LABEL_7;
      }
      __break(1u);
      goto LABEL_24;
    }
    swift_bridgeObjectRelease();

    return 2;
  }
  if (v11 != *MEMORY[0x1E4FA1F48])
  {
    if (one-time initialization token for executor == -1)
    {
LABEL_15:
      v20 = type metadata accessor for Logger();
      __swift_project_value_buffer(v20, (uint64_t)static Logger.executor);
      v21 = Logger.logObject.getter();
      v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v23 = 0;
        _os_log_impl(&dword_1B9C64000, v21, v22, "SettingsAffinityScorer Got unexpected parse", v23, 2u);
        MEMORY[0x1BA9E48C0](v23, -1, -1);
      }

      (*(void (**)(void **, uint64_t))(v8 + 8))(v10, v7);
      return 2;
    }
LABEL_24:
    swift_once();
    goto LABEL_15;
  }
  (*(void (**)(void **, uint64_t))(v8 + 96))(v10, v7);
  (*(void (**)(char *, void **, uint64_t))(v4 + 32))(v6, v10, v3);
  v19 = specialized SettingsAffinityScorer.scoreForEnvironmentOrAtmosphereIdentifiers(parse:environment:)();
  if (v19 == 5) {
    v19 = specialized SettingsAffinityScorer.scoreForSupportedIdentifierMatches(parse:environment:)((uint64_t)v6, a2);
  }
  v18 = v19;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v18;
}

uint64_t protocol witness for AffinityScoring.score(input:environment:) in conformance SystemCommandsAffinityScorer(uint64_t a1)
{
  return specialized SystemCommandsAffinityScorer.score(input:environment:)(a1, *v1, v1[1]);
}

uint64_t specialized SystemCommandsAffinityScorer.isIdentifierMatchLock(on:)()
{
  uint64_t v35 = type metadata accessor for Google_Protobuf_StringValue();
  uint64_t v0 = *(void *)(v35 - 8);
  MEMORY[0x1F4188790](v35);
  v2 = (char *)v32 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  v9 = (char *)v32 - v8;
  uint64_t v10 = Siri_Nlu_External_UsoGraph.identifiers.getter();
  uint64_t v11 = *(void *)(v10 + 16);
  if (!v11)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v13 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
  uint64_t v12 = v4 + 16;
  v36 = v13;
  unint64_t v14 = v10 + ((*(unsigned __int8 *)(v12 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 64));
  v15 = (void (**)(char *, uint64_t))(v12 - 8);
  uint64_t v33 = *(void *)(v12 + 56);
  v34 = (void (**)(char *, uint64_t))(v0 + 8);
  v32[1] = v10;
  swift_bridgeObjectRetain();
  uint64_t v16 = v12;
  while (1)
  {
    uint64_t v19 = v16;
    v36(v9, v14, v3);
    Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
    uint64_t v20 = Google_Protobuf_StringValue.value.getter();
    uint64_t v22 = v21;
    (*v34)(v2, v35);
    if (v20 == 0x74416D6574737973 && v22 == 0xEF65747562697274)
    {
      swift_bridgeObjectRelease();
      v36(v7, (unint64_t)v9, v3);
    }
    else
    {
      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v36(v7, (unint64_t)v9, v3);
      if ((v23 & 1) == 0)
      {
        v25 = *v15;
        (*v15)(v7, v3);
        v25(v9, v3);
        goto LABEL_4;
      }
    }
    if (Siri_Nlu_External_UsoEntityIdentifier.value.getter() == 1801678700 && v24 == 0xE400000000000000) {
      break;
    }
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v18 = *v15;
    (*v15)(v7, v3);
    v18(v9, v3);
    if (v17) {
      goto LABEL_15;
    }
LABEL_4:
    v14 += v33;
    --v11;
    uint64_t v16 = v19;
    if (!v11)
    {
      swift_bridgeObjectRelease_n();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  v27 = *v15;
  (*v15)(v7, v3);
  v27(v9, v3);
LABEL_15:
  swift_bridgeObjectRelease_n();
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  __swift_project_value_buffer(v28, (uint64_t)static Logger.executor);
  v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v31 = 0;
    _os_log_impl(&dword_1B9C64000, v29, v30, "SystemCommandsAffinityScorer | Found lock identifier", v31, 2u);
    MEMORY[0x1BA9E48C0](v31, -1, -1);
  }

  return 1;
}

uint64_t protocol witness for AffinityScoring.score(input:environment:) in conformance CarCommandsAffinityScorer(uint64_t a1, uint64_t a2)
{
  return CarCommandsAffinityScorer.score(input:environment:)(a1, a2, *(NSObject **)v2, *(void *)(v2 + 8));
}

uint64_t CarCommandsAffinityScorer.score(input:environment:)(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4)
{
  uint64_t v144 = a4;
  v141 = a3;
  uint64_t v128 = a2;
  uint64_t v4 = type metadata accessor for Parse.DirectInvocation();
  uint64_t v139 = *(void *)(v4 - 8);
  uint64_t v140 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  v138 = (char *)&v126 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  v142 = (char *)&v126 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NonTerminalIntentNode?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v126 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for NLIntent();
  uint64_t v143 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  v13 = ((char *)&v126 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v127 = type metadata accessor for CarCommandsAffinityScoringData();
  MEMORY[0x1F4188790](v127);
  v129 = (char *)&v126 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v132 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  char v17 = (char *)&v126 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1F4188790](v18 - 8);
  v131 = (char *)&v126 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v133 = v20;
  uint64_t v134 = v21;
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v24 = (char *)&v126 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  v130 = (char *)&v126 - v25;
  uint64_t v26 = type metadata accessor for USOParse();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v136 = v26;
  uint64_t v137 = v27;
  MEMORY[0x1F4188790](v26);
  v135 = (char *)&v126 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for Parse();
  uint64_t v30 = *(void *)(v29 - 8);
  MEMORY[0x1F4188790](v29);
  v32 = (char *)&v126 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  int v33 = (*(uint64_t (**)(char *, uint64_t))(v30 + 88))(v32, v29);
  if (v33 != *MEMORY[0x1E4FA1F00])
  {
    if (v33 == *MEMORY[0x1E4FA1F38])
    {
      (*(void (**)(char *, uint64_t))(v30 + 96))(v32, v29);
      uint64_t v40 = v139;
      uint64_t v39 = v140;
      v41 = v142;
      (*(void (**)(char *, char *, uint64_t))(v139 + 32))(v142, v32, v140);
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v42 = type metadata accessor for Logger();
      __swift_project_value_buffer(v42, (uint64_t)static Logger.executor);
      v43 = v138;
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v138, v41, v39);
      v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v44, v45))
      {
        v46 = (uint8_t *)swift_slowAlloc();
        v47 = swift_slowAlloc();
        v145 = v47;
        *(_DWORD *)v46 = 136315138;
        uint64_t v48 = Parse.DirectInvocation.identifier.getter();
        v147[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, (uint64_t *)&v145);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v50 = *(void (**)(char *, uint64_t))(v40 + 8);
        v50(v43, v39);
        _os_log_impl(&dword_1B9C64000, v44, v45, "CarCommandsAffinityScorer received a direct invocation: %s", v46, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v47, -1, -1);
        MEMORY[0x1BA9E48C0](v46, -1, -1);

        v50(v142, v39);
      }
      else
      {

        v67 = *(void (**)(char *, uint64_t))(v40 + 8);
        v67(v43, v39);
        v67(v41, v39);
      }
      return 2;
    }
    if (v33 != *MEMORY[0x1E4FA1F48])
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v83 = type metadata accessor for Logger();
      __swift_project_value_buffer(v83, (uint64_t)static Logger.executor);
      v84 = Logger.logObject.getter();
      os_log_type_t v85 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v84, v85))
      {
        v86 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v86 = 0;
        _os_log_impl(&dword_1B9C64000, v84, v85, "CarCommandsAffinityScorer got an unexpected parse. Returning score: .unsupported", v86, 2u);
        MEMORY[0x1BA9E48C0](v86, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v29);
      return 0;
    }
    (*(void (**)(char *, uint64_t))(v30 + 96))(v32, v29);
    (*(void (**)(char *, char *, uint64_t))(v137 + 32))(v135, v32, v136);
    uint64_t v55 = USOParse.userParse.getter();
    uint64_t v56 = MEMORY[0x1BA9DE000](v55);
    uint64_t v57 = v15;
    uint64_t v58 = v56;
    (*(void (**)(char *, uint64_t))(v132 + 8))(v17, v57);
    uint64_t v59 = *(void *)(v58 + 16);
    if (v59)
    {
      v60 = *(void (**)(char *, unint64_t, uint64_t))(v134 + 16);
      unint64_t v61 = v58 + ((*(unsigned __int8 *)(v134 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v134 + 80));
      v62 = (void (**)(char *, uint64_t))(v134 + 8);
      uint64_t v63 = *(void *)(v134 + 72);
      swift_bridgeObjectRetain();
      uint64_t v64 = v133;
      while (1)
      {
        v60(v24, v61, v64);
        if (Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter()) {
          break;
        }
        (*v62)(v24, v64);
        v61 += v63;
        if (!--v59)
        {
          swift_bridgeObjectRelease();
          uint64_t v65 = 1;
          uint64_t v66 = v134;
          goto LABEL_38;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v66 = v134;
      uint64_t v87 = (uint64_t)v131;
      (*(void (**)(char *, char *, uint64_t))(v134 + 32))(v131, v24, v64);
      uint64_t v65 = 0;
    }
    else
    {
      uint64_t v65 = 1;
      uint64_t v64 = v133;
      uint64_t v66 = v134;
LABEL_38:
      uint64_t v87 = (uint64_t)v131;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 56))(v87, v65, 1, v64);
    swift_bridgeObjectRelease();
    int v88 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v87, 1, v64);
    uint64_t v89 = v144;
    if (v88 == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v87, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v90 = type metadata accessor for Logger();
      __swift_project_value_buffer(v90, (uint64_t)static Logger.executor);
      v91 = Logger.logObject.getter();
      os_log_type_t v92 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v91, v92))
      {
        v93 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v93 = 0;
        _os_log_impl(&dword_1B9C64000, v91, v92, "CarCommandsAffinityScorer could not extract UserDialogAct. Returning score: .unsupported", v93, 2u);
        MEMORY[0x1BA9E48C0](v93, -1, -1);
      }

      goto LABEL_53;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v66 + 32))(v130, v87, v64);
    unint64_t v94 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
    unint64_t v99 = v94;
    if (v94 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v125 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v100 = (uint64_t)v129;
      if (v125) {
        goto LABEL_57;
      }
    }
    else
    {
      uint64_t v100 = (uint64_t)v129;
      if (*(void *)((v94 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_57:
        if ((v99 & 0xC000000000000001) != 0)
        {
          uint64_t v101 = MEMORY[0x1BA9E3990](0, v99);
        }
        else
        {
          if (!*(void *)((v99 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_92;
          }
          uint64_t v101 = *(void *)(v99 + 32);
          swift_retain();
        }
        swift_bridgeObjectRelease();
        swift_retain();
        *(unsigned char *)uint64_t v100 = UsoTask.namesNodeAttachmentInfo()();
        *(void *)(v100 + 8) = v102;
        char v103 = UsoTask.settingSpanInfo()(v100 + *(int *)(v127 + 28));
        swift_release();
        *(unsigned char *)(v100 + 16) = v103 & 1;
        v104 = v141;
        if (CarCommandsAffinityScorer.hasOverrideMatch(on:with:in:)(v101, v100, v128, v141, v89))
        {
          if (one-time initialization token for executor == -1)
          {
LABEL_62:
            uint64_t v105 = type metadata accessor for Logger();
            __swift_project_value_buffer(v105, (uint64_t)static Logger.executor);
            v106 = Logger.logObject.getter();
            os_log_type_t v107 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v106, v107))
            {
              v108 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v108 = 0;
              _os_log_impl(&dword_1B9C64000, v106, v107, "CarCommandsAffinityScorer found a match with very high probability of belonging to CarCommmands. Returning score: .override.", v108, 2u);
              MEMORY[0x1BA9E48C0](v108, -1, -1);
            }
            swift_release();

            outlined destroy of CarCommandsAffinityScoringData(v100);
            (*(void (**)(char *, uint64_t))(v66 + 8))(v130, v133);
            (*(void (**)(char *, uint64_t))(v137 + 8))(v135, v136);
            return 4;
          }
LABEL_92:
          swift_once();
          goto LABEL_62;
        }
        if (specialized CarCommandsAffinityScorer.hasHighProbabilityMatch(on:with:in:)((unsigned __int8 *)v100, (uint64_t)v104, v89))
        {
          if (one-time initialization token for executor != -1) {
            swift_once();
          }
          uint64_t v109 = type metadata accessor for Logger();
          __swift_project_value_buffer(v109, (uint64_t)static Logger.executor);
          v110 = Logger.logObject.getter();
          os_log_type_t v111 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v110, v111))
          {
            v112 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v112 = 0;
            _os_log_impl(&dword_1B9C64000, v110, v111, "CarCommandsAffinityScorer found a match with high probability of belonging to CarCommands. Returning score: .high.", v112, 2u);
            MEMORY[0x1BA9E48C0](v112, -1, -1);
          }
          swift_release();

          outlined destroy of CarCommandsAffinityScoringData(v100);
          (*(void (**)(char *, uint64_t))(v66 + 8))(v130, v133);
          (*(void (**)(char *, uint64_t))(v137 + 8))(v135, v136);
          return 3;
        }
        if (specialized CarCommandsAffinityScorer.hasMediumProbabilityMatch(on:with:)((unsigned __int8 *)v100, (uint64_t)v104, v89))
        {
          if (one-time initialization token for executor != -1) {
            swift_once();
          }
          uint64_t v113 = type metadata accessor for Logger();
          __swift_project_value_buffer(v113, (uint64_t)static Logger.executor);
          v114 = Logger.logObject.getter();
          os_log_type_t v115 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v114, v115))
          {
            v116 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v116 = 0;
            _os_log_impl(&dword_1B9C64000, v114, v115, "CarCommandsAffinityScorer found a match with medium probability of belonging to CarCommands. Returning score: .default.", v116, 2u);
            MEMORY[0x1BA9E48C0](v116, -1, -1);
          }
          swift_release();

          outlined destroy of CarCommandsAffinityScoringData(v100);
          (*(void (**)(char *, uint64_t))(v66 + 8))(v130, v133);
          (*(void (**)(char *, uint64_t))(v137 + 8))(v135, v136);
          return 2;
        }
        if (specialized CarCommandsAffinityScorer.hasLowProbabilityMatch(on:)((unsigned __int8 *)v100))
        {
          if (one-time initialization token for executor != -1) {
            swift_once();
          }
          uint64_t v117 = type metadata accessor for Logger();
          __swift_project_value_buffer(v117, (uint64_t)static Logger.executor);
          v118 = Logger.logObject.getter();
          os_log_type_t v119 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v118, v119))
          {
            v120 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v120 = 0;
            _os_log_impl(&dword_1B9C64000, v118, v119, "CarCommandsAffinityScorer found a match with low probability of belonging to CarCommands. Returning score: .low.", v120, 2u);
            MEMORY[0x1BA9E48C0](v120, -1, -1);
          }
          swift_release();

          outlined destroy of CarCommandsAffinityScoringData(v100);
          (*(void (**)(char *, uint64_t))(v66 + 8))(v130, v133);
          (*(void (**)(char *, uint64_t))(v137 + 8))(v135, v136);
          return 1;
        }
        if (one-time initialization token for executor != -1) {
          swift_once();
        }
        uint64_t v121 = type metadata accessor for Logger();
        __swift_project_value_buffer(v121, (uint64_t)static Logger.executor);
        v122 = Logger.logObject.getter();
        os_log_type_t v123 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v122, v123))
        {
          v124 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v124 = 0;
          _os_log_impl(&dword_1B9C64000, v122, v123, "CarCommandsAffinityScorer found no CarCommands identifiers. Returning score: .unsupported", v124, 2u);
          MEMORY[0x1BA9E48C0](v124, -1, -1);
        }
        swift_release();

        outlined destroy of CarCommandsAffinityScoringData(v100);
LABEL_52:
        (*(void (**)(char *, uint64_t))(v66 + 8))(v130, v133);
LABEL_53:
        (*(void (**)(char *, uint64_t))(v137 + 8))(v135, v136);
        return 0;
      }
    }
    swift_bridgeObjectRelease();
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v95 = type metadata accessor for Logger();
    __swift_project_value_buffer(v95, (uint64_t)static Logger.executor);
    v96 = Logger.logObject.getter();
    os_log_type_t v97 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v96, v97))
    {
      v98 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v98 = 0;
      _os_log_impl(&dword_1B9C64000, v96, v97, "CarCommandsAffinityScorer could not extract UsoTask. Returning score: .unsupported", v98, 2u);
      MEMORY[0x1BA9E48C0](v98, -1, -1);
    }

    goto LABEL_52;
  }
  (*(void (**)(char *, uint64_t))(v30 + 96))(v32, v29);
  uint64_t v34 = v143;
  (*(void (**)(NSObject *, char *, uint64_t))(v143 + 32))(v13, v32, v11);
  NLIntent.domainNode.getter();
  uint64_t v35 = type metadata accessor for NonTerminalIntentNode();
  uint64_t v36 = *(void *)(v35 - 8);
  v37 = v13;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v10, 1, v35) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, &demangling cache variable for type metadata for NonTerminalIntentNode?);
    uint64_t v38 = v144;
LABEL_26:
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v76 = type metadata accessor for Logger();
    __swift_project_value_buffer(v76, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain_n();
    v77 = Logger.logObject.getter();
    os_log_type_t v78 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v77, v78))
    {
      v142 = (char *)v11;
      v79 = (uint8_t *)swift_slowAlloc();
      uint64_t v80 = swift_slowAlloc();
      uint64_t v146 = v38;
      v147[0] = v80;
      *(_DWORD *)v79 = 136315138;
      v145 = v141;
      swift_bridgeObjectRetain();
      uint64_t v81 = String.init<A>(describing:)();
      v141 = v37;
      v145 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, v147);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v77, v78, "%s received an NLv3 parse that does not contain a carCommands domain node. Returning score: .unsupported.", v79, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v80, -1, -1);
      MEMORY[0x1BA9E48C0](v79, -1, -1);

      (*(void (**)(NSObject *, char *))(v34 + 8))(v141, v142);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      (*(void (**)(NSObject *, uint64_t))(v34 + 8))(v37, v11);
    }
    return 0;
  }
  uint64_t v52 = NonTerminalIntentNode.ontologyNodeName.getter();
  uint64_t v54 = v53;
  (*(void (**)(char *, uint64_t))(v36 + 8))(v10, v35);
  uint64_t v38 = v144;
  if (v52 == 0x616D6D6F43726163 && v54 == 0xEB0000000073646ELL)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v68 & 1) == 0) {
      goto LABEL_26;
    }
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v69 = type metadata accessor for Logger();
  __swift_project_value_buffer(v69, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain_n();
  v70 = Logger.logObject.getter();
  os_log_type_t v71 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v70, v71))
  {
    v142 = (char *)v11;
    v72 = (uint8_t *)swift_slowAlloc();
    uint64_t v73 = swift_slowAlloc();
    uint64_t v146 = v38;
    v147[0] = v73;
    *(_DWORD *)v72 = 136315138;
    v145 = v141;
    swift_bridgeObjectRetain();
    uint64_t v74 = String.init<A>(describing:)();
    v141 = v37;
    v145 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v75, v147);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v70, v71, "%s received an NLv3 parse with a carCommands domain node. Returning score: .override.", v72, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v73, -1, -1);
    MEMORY[0x1BA9E48C0](v72, -1, -1);

    (*(void (**)(NSObject *, char *))(v34 + 8))(v141, v142);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    (*(void (**)(NSObject *, uint64_t))(v34 + 8))(v37, v11);
  }
  return 4;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (!v2) {
    return v3;
  }
  uint64_t v13 = MEMORY[0x1E4FBC860];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (unint64_t i = 0; i != v2; ++i)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for AFServiceDeviceContext);
        swift_dynamicCast();
        uint64_t v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
          uint64_t v3 = v13;
        }
        unint64_t v7 = *(void *)(v3 + 16);
        unint64_t v6 = *(void *)(v3 + 24);
        if (v7 >= v6 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
          uint64_t v3 = v13;
        }
        *(void *)(v3 + 16) = v7 + 1;
        outlined init with take of Any(v12, (_OWORD *)(v3 + 32 * v7 + 32));
      }
    }
    else
    {
      uint64_t v8 = (id *)(a1 + 32);
      type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for AFServiceDeviceContext);
      do
      {
        id v9 = *v8;
        swift_dynamicCast();
        uint64_t v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
          uint64_t v3 = v13;
        }
        unint64_t v11 = *(void *)(v3 + 16);
        unint64_t v10 = *(void *)(v3 + 24);
        if (v11 >= v10 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
          uint64_t v3 = v13;
        }
        *(void *)(v3 + 16) = v11 + 1;
        outlined init with take of Any(v12, (_OWORD *)(v3 + 32 * v11 + 32));
        ++v8;
        --v2;
      }
      while (v2);
    }
    return v3;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t i;
  unint64_t v6;
  unint64_t v7;
  id *v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  _OWORD v12[2];
  uint64_t v13;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (!v2) {
    return v3;
  }
  uint64_t v13 = MEMORY[0x1E4FBC860];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (unint64_t i = 0; i != v2; ++i)
      {
        MEMORY[0x1BA9E3990](i, a1);
        type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
        swift_dynamicCast();
        uint64_t v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
          uint64_t v3 = v13;
        }
        unint64_t v7 = *(void *)(v3 + 16);
        unint64_t v6 = *(void *)(v3 + 24);
        if (v7 >= v6 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
          uint64_t v3 = v13;
        }
        *(void *)(v3 + 16) = v7 + 1;
        outlined init with take of Any(v12, (_OWORD *)(v3 + 32 * v7 + 32));
      }
    }
    else
    {
      uint64_t v8 = (id *)(a1 + 32);
      type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
      do
      {
        id v9 = *v8;
        swift_dynamicCast();
        uint64_t v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
          uint64_t v3 = v13;
        }
        unint64_t v11 = *(void *)(v3 + 16);
        unint64_t v10 = *(void *)(v3 + 24);
        if (v11 >= v10 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
          uint64_t v3 = v13;
        }
        *(void *)(v3 + 16) = v11 + 1;
        outlined init with take of Any(v12, (_OWORD *)(v3 + 32 * v11 + 32));
        ++v8;
        --v2;
      }
      while (v2);
    }
    return v3;
  }
  __break(1u);
  return result;
}

uint64_t specialized PhoneAffinityScorer.score(input:environment:)(uint64_t a1, uint64_t a2)
{
  uint64_t v72 = a2;
  uint64_t v2 = type metadata accessor for USOParse();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  os_log_type_t v71 = &v69[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for Parse();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  id v9 = &v69[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v7);
  unint64_t v11 = &v69[-v10];
  Input.parse.getter();
  char v12 = Parse.hasCancelled.getter();
  uint64_t v13 = *(void (**)(unsigned char *, uint64_t))(v6 + 8);
  v13(v11, v5);
  if (v12)
  {
    if (one-time initialization token for forceEnabled != -1) {
      swift_once();
    }
    uint64_t v14 = (unsigned __int8 *)(static PhoneFeatureFlags.forceEnabled + 16);
    uint64_t v15 = (os_unfair_lock_s *)(static PhoneFeatureFlags.forceEnabled + 20);
    os_unfair_lock_lock((os_unfair_lock_t)(static PhoneFeatureFlags.forceEnabled + 20));
    partial apply for closure #1 in PhoneFeatureFlags.isEnabled.getter(v14, &v73);
    os_unfair_lock_unlock(v15);
    int v16 = v73;
    SiriEnvironment.callState.getter();
    LOBYTE(v14) = dispatch thunk of CallStateEnvironmentProvider.callState.getter();
    swift_release();
    if ((v14 & 7) != 0)
    {
      SiriEnvironment.callState.getter();
      int v17 = dispatch thunk of CallStateEnvironmentProvider.isDropInCall.getter();
      swift_release();
    }
    else
    {
      int v17 = 0;
    }
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static Logger.executor);
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = swift_slowAlloc();
      *(_DWORD *)uint64_t v40 = 67109376;
      int v73 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v40 + 8) = 1024;
      int v73 = v17 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v38, v39, "PhoneAffinityScorer received UserCancelled. cancelCallBellEnabled=%{BOOL}d, dropInCallIsActive=%{BOOL}d", (uint8_t *)v40, 0xEu);
      MEMORY[0x1BA9E48C0](v40, -1, -1);
    }

    if ((v16 & v17) != 1) {
      return 0;
    }
    v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v43 = 0;
      _os_log_impl(&dword_1B9C64000, v41, v42, "PhoneAffinityScorer detected an ongoing drop in call and feature is enabled, overriding score.", v43, 2u);
      MEMORY[0x1BA9E48C0](v43, -1, -1);
    }

    return 4;
  }
  Input.parse.getter();
  if ((*(unsigned int (**)(unsigned char *, uint64_t))(v6 + 88))(v9, v5) != *MEMORY[0x1E4FA1F48])
  {
    v13(v9, v5);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.executor);
    int v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = 2;
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl(&dword_1B9C64000, v33, v34, "PhoneAffinityScorer received unexpected parse.", v36, 2u);
      MEMORY[0x1BA9E48C0](v36, -1, -1);

      return v35;
    }

    return 2;
  }
  (*(void (**)(unsigned char *, uint64_t))(v6 + 96))(v9, v5);
  uint64_t v18 = v3;
  uint64_t v19 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v3 + 32);
  uint64_t v20 = v71;
  uint64_t v21 = v2;
  v19(v71, v9, v2);
  if (!specialized static AffinityScorerUtils.getTask(_:)())
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    __swift_project_value_buffer(v44, (uint64_t)static Logger.executor);
    os_log_type_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v47 = 0;
      _os_log_impl(&dword_1B9C64000, v45, v46, "PhoneAffinityScorer Could not extract usoTask from parse.", v47, 2u);
      MEMORY[0x1BA9E48C0](v47, -1, -1);
    }

LABEL_46:
    (*(void (**)(unsigned char *, uint64_t))(v18 + 8))(v20, v21);
    return 2;
  }
  __int16 v22 = UsoTask.parseResult.getter();
  int v23 = v22;
  if ((v22 & 0x100) != 0)
  {
    switch((char)v22)
    {
      case 1:
        SiriEnvironment.callState.getter();
        char v60 = dispatch thunk of CallStateEnvironmentProvider.callState.getter();
        swift_release();
        if (one-time initialization token for executor != -1) {
          swift_once();
        }
        unint64_t v61 = v60 & 4;
        uint64_t v62 = type metadata accessor for Logger();
        __swift_project_value_buffer(v62, (uint64_t)static Logger.executor);
        uint64_t v63 = Logger.logObject.getter();
        os_log_type_t v64 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v63, v64))
        {
          uint64_t v65 = v2;
          uint64_t v66 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v66 = 67109120;
          uint64_t v21 = v65;
          int v73 = v61 >> 2;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_1B9C64000, v63, v64, "PhoneAffinityScorer callIsRinging=%{BOOL}d", v66, 8u);
          MEMORY[0x1BA9E48C0](v66, -1, -1);
        }

        swift_release();
        (*(void (**)(unsigned char *, uint64_t))(v18 + 8))(v20, v21);
        if (v61) {
          return 4;
        }
        else {
          return 1;
        }
      case 2:
        SiriEnvironment.callState.getter();
        char v67 = dispatch thunk of CallStateEnvironmentProvider.callState.getter();
        swift_release();
        if ((v67 & 1) == 0)
        {
          (*(void (**)(unsigned char *, uint64_t))(v18 + 8))(v20, v2);
          swift_release();
          return 1;
        }
        if (one-time initialization token for executor != -1) {
          swift_once();
        }
        uint64_t v68 = type metadata accessor for Logger();
        __swift_project_value_buffer(v68, (uint64_t)static Logger.executor);
        uint64_t v53 = Logger.logObject.getter();
        os_log_type_t v54 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v53, v54)) {
          goto LABEL_70;
        }
        uint64_t v55 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v55 = 0;
        uint64_t v56 = "PhoneAffinityScorer UsoTask_update_common_Communication on an active call";
        break;
      default:
        if (one-time initialization token for executor != -1) {
          swift_once();
        }
        uint64_t v48 = type metadata accessor for Logger();
        __swift_project_value_buffer(v48, (uint64_t)static Logger.executor);
        unint64_t v49 = Logger.logObject.getter();
        os_log_type_t v50 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v49, v50))
        {
          v51 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v51 = 0;
          MEMORY[0x1BA9E48C0](v51, -1, -1);
        }

        swift_release();
        goto LABEL_46;
    }
    goto LABEL_69;
  }
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  uint64_t v24 = (unsigned __int8 *)(static InCallFeatureFlags.forceEnabled + 16);
  uint64_t v25 = (os_unfair_lock_s *)(static InCallFeatureFlags.forceEnabled + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(static InCallFeatureFlags.forceEnabled + 20));
  partial apply for closure #1 in InCallFeatureFlags.isEnabled.getter(v24, &v73);
  os_unfair_lock_unlock(v25);
  int v70 = v73;
  SiriEnvironment.callState.getter();
  char v26 = dispatch thunk of CallStateEnvironmentProvider.callState.getter();
  swift_release();
  uint64_t v27 = v26 & 7;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  __swift_project_value_buffer(v28, (uint64_t)static Logger.executor);
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v72 = v21;
    uint64_t v31 = swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 67109376;
    int v73 = v70;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v31 + 8) = 1024;
    int v73 = v27 != 0;
    uint64_t v20 = v71;
    uint64_t v21 = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v29, v30, "PhoneAffinityScorer SIC enabled=%{BOOL}d, callIsActive=%{BOOL}d", (uint8_t *)v31, 0xEu);
    MEMORY[0x1BA9E48C0](v31, -1, -1);
  }

  if (!v27)
  {
    if (!v70 || (v23 & 8) == 0) {
      goto LABEL_53;
    }
    goto LABEL_51;
  }
  if ((v23 & 9) != 1 && v23 && v70)
  {
LABEL_51:
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v53, v54))
    {
LABEL_70:

      swift_release();
      (*(void (**)(unsigned char *, uint64_t))(v18 + 8))(v20, v21);
      return 4;
    }
    uint64_t v55 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v55 = 0;
    uint64_t v56 = "PhoneAffinityScorer returning .override.";
LABEL_69:
    _os_log_impl(&dword_1B9C64000, v53, v54, v56, v55, 2u);
    MEMORY[0x1BA9E48C0](v55, -1, -1);
    goto LABEL_70;
  }
LABEL_53:
  uint64_t v57 = Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v57, v58))
  {
    uint64_t v59 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v59 = 0;
    _os_log_impl(&dword_1B9C64000, v57, v58, "PhoneAffinityScorer returning .unsupported.", v59, 2u);
    MEMORY[0x1BA9E48C0](v59, -1, -1);
  }

  swift_release();
  (*(void (**)(unsigned char *, uint64_t))(v18 + 8))(v20, v21);
  return 0;
}

unint64_t lazy protocol witness table accessor for type PhoneFeatureFlags and conformance PhoneFeatureFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneFeatureFlags and conformance PhoneFeatureFlags;
  if (!lazy protocol witness table cache variable for type PhoneFeatureFlags and conformance PhoneFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneFeatureFlags and conformance PhoneFeatureFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneFeatureFlags and conformance PhoneFeatureFlags;
  if (!lazy protocol witness table cache variable for type PhoneFeatureFlags and conformance PhoneFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneFeatureFlags and conformance PhoneFeatureFlags);
  }
  return result;
}

uint64_t specialized static AlarmAffinityScorer.isCreateAlarmTaskWithRelativeOffset(task:)()
{
  static UsoTask_CodegenConverter.convert(task:)();
  outlined init with copy of Any?((uint64_t)v5, (uint64_t)v3);
  if (!v4)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v3, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_5:
    outlined init with copy of Any?((uint64_t)v5, (uint64_t)v3);
    if (v4)
    {
      type metadata accessor for UsoTask_noVerb_common_Alarm();
      if (swift_dynamicCast())
      {
        swift_retain();
        dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
        goto LABEL_8;
      }
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v3, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 0;
  }
  type metadata accessor for UsoTask_create_common_Alarm();
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_5;
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_Target.target.getter();
LABEL_8:
  swift_release();
  if (v3[0] && (uint64_t v0 = dispatch thunk of UsoEntity_common_Alarm.endDateTime.getter(), swift_release(), v0))
  {
    uint64_t v1 = dispatch thunk of UsoEntity_common_DateTime.offsetValue.getter();
    swift_release();
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v1)
    {
      swift_release();
      return 1;
    }
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Any?);
    swift_release();
  }
  return 0;
}

Swift::Void __swiftcall ConversationService.ExecutionTaskContext.clear()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1B9C64000, v3, v4, "[ConversationService]: Clearing ExecutionTaskContext", v5, 2u);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }

  uint64_t v6 = MEMORY[0x1E4FBC860];
  *(void *)(v1 + 16) = MEMORY[0x1E4FBC860];
  swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = v6;

  swift_bridgeObjectRelease();
}

uint64_t specialized static ServerFallbackCapableRequestProcessor.getDelegatedUDA(rcState:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1F4188790](v2 - 8);
  os_log_type_t v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  id v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  char v12 = (char *)&v34 - v11;
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)&v34 - v14;
  (*(void (**)(uint64_t))(*(void *)a1 + 688))(v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
  {
    uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v32(v15, v4, v5);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_DelegatedUserDialogAct>);
    unint64_t v33 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_1BA04FD90;
    v32((char *)(v18 + v33), v15, v5);
    return v18;
  }
  uint64_t v16 = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 304))(v16);
  uint64_t v18 = MEMORY[0x1E4FBC860];
  if (!v17) {
    return v18;
  }
  unint64_t v19 = specialized Sequence.compactMap<A>(_:)(v17);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v42 = v18;
  uint64_t v39 = *(void *)(v19 + 16);
  if (!v39)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    return v18;
  }
  unint64_t v21 = 0;
  uint64_t v40 = (uint64_t (**)(char *, char *, uint64_t))(v6 + 32);
  v41 = v9;
  uint64_t v37 = "com.apple.search";
  uint64_t v38 = v6 + 16;
  os_log_type_t v34 = (uint64_t (**)(char *, uint64_t))(v6 + 8);
  unint64_t v35 = 0x80000001BA06A940;
  uint64_t v36 = v5;
  while (v21 < *(void *)(v19 + 16))
  {
    unint64_t v22 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v23 = *(void *)(v6 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v12, v19 + v22 + v23 * v21, v5);
    if (Siri_Nlu_External_DelegatedUserDialogAct.externalParserID.getter() == 0xD000000000000013 && v24 == v35)
    {
      swift_bridgeObjectRelease();
LABEL_12:
      unint64_t v26 = v19;
      uint64_t v27 = *v40;
      (*v40)(v41, v12, v5);
      uint64_t v28 = v42;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v28 + 16) + 1, 1);
        uint64_t v28 = v42;
      }
      unint64_t v30 = *(void *)(v28 + 16);
      unint64_t v29 = *(void *)(v28 + 24);
      if (v30 >= v29 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
        uint64_t v28 = v42;
      }
      *(void *)(v28 + 16) = v30 + 1;
      unint64_t v31 = v28 + v22 + v30 * v23;
      uint64_t v5 = v36;
      uint64_t result = v27((char *)v31, v41, v36);
      uint64_t v42 = v28;
      unint64_t v19 = v26;
      goto LABEL_6;
    }
    char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v25) {
      goto LABEL_12;
    }
    uint64_t result = (*v34)(v12, v5);
LABEL_6:
    if (v39 == ++v21)
    {
      uint64_t v18 = v42;
      goto LABEL_19;
    }
  }
  __break(1u);
  return result;
}

uint64_t ResultCandidateState.fallbackParse.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationBridge.rraasClient.getter(&OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_fallbackParse, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?, a1);
}

uint64_t key path getter for Collection.first : [Siri_Nlu_External_UserDialogAct]@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 16);
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v6 = *(void *)(v5 - 8);
  if (v4)
  {
    uint64_t v10 = *(void *)(v5 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v10 + 16))(a2, v3 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)), v5);
    uint64_t v6 = v10;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 1;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);

  return v8(a2, v7, 1, v5);
}

void ConversationRequestAwareBridgeBase.handleCandidateRequestMessageInternal(_:)(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v85 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790]();
  uint64_t v7 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a1 >> 61)
  {
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
      uint64_t v8 = (void *)(a1 & 0x1FFFFFFFFFFFFFFFLL);
      a1 &= 0x1FFFFFFFFFFFFFFFuLL;
      break;
    default:
      uint64_t v8 = (void *)(a1 & 0x1FFFFFFFFFFFFFFFLL);
      break;
  }
  id v9 = *(uint64_t (**)(void))(v4 + 376);
  id v10 = v8;
  uint64_t v11 = v9();
  if (!v11) {
    goto LABEL_10;
  }
  uint64_t v12 = v11;
  uint64_t v13 = v10;
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v14 = *(void *)(v11 + 72);
  swift_bridgeObjectRetain();
  if (v15 == RequestMessageBase.requestId.getter() && v14 == v16)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_16;
  }
  char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v18)
  {
LABEL_16:
    (*(void (**)(unint64_t, uint64_t))(*v1 + 496))(a1, v12);

    swift_release();
    return;
  }
  swift_release();
  id v10 = v13;
LABEL_10:
  uint64_t v19 = RequestMessageBase.requestId.getter();
  uint64_t v21 = v20;
  uint64_t v22 = (*(uint64_t (**)(void))(*v1 + 400))();
  *(void *)&long long v87 = v19;
  *((void *)&v87 + 1) = v21;
  uint64_t v23 = *(void *)(v4 + 320);
  MEMORY[0x1BA9E2D40](v86, &v87, v22, MEMORY[0x1E4FBB1A0], v23, MEMORY[0x1E4FBB1B0]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v24 = v86[0];
  if (v86[0])
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.conversationBridge);
    id v26 = v10;
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      unint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      *(void *)&long long v87 = v30;
      id v84 = v10;
      *(_DWORD *)unint64_t v29 = 136315138;
      uint64_t v85 = (uint64_t)(v29 + 4);
      swift_getObjectType();
      uint64_t v31 = _typeName(_:qualified:)();
      v86[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, (uint64_t *)&v87);
      id v10 = v84;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v27, v28, "Posting %s to existing candidate request processor, as the current request processor is for a different turn.", v29, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v30, -1, -1);
      MEMORY[0x1BA9E48C0](v29, -1, -1);
    }
    else
    {
    }
    goto LABEL_36;
  }
  type metadata accessor for StartCandidateRequestMessage();
  if (swift_dynamicCastClass())
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    uint64_t v34 = __swift_project_value_buffer(v33, (uint64_t)static Logger.conversationBridge);
    id v84 = v10;
    id v35 = v10;
    uint64_t v82 = v34;
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.debug.getter();
    int v38 = v37;
    BOOL v39 = os_log_type_enabled(v36, v37);
    uint64_t v83 = v23;
    if (v39)
    {
      uint64_t v40 = swift_slowAlloc();
      id v81 = (id)swift_slowAlloc();
      *(void *)&long long v87 = v81;
      *(_DWORD *)uint64_t v40 = 136315394;
      int v80 = v38;
      swift_getObjectType();
      uint64_t v41 = _typeName(_:qualified:)();
      v86[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, (uint64_t *)&v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v40 + 12) = 2080;
      uint64_t v43 = RequestMessageBase.requestId.getter();
      v86[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, (uint64_t *)&v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v36, (os_log_type_t)v80, "Creating candidate request processor to handle %s<requestId=%s>, as we have not received a StartTurn for this request yet.", (uint8_t *)v40, 0x16u);
      id v45 = v81;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v45, -1, -1);
      MEMORY[0x1BA9E48C0](v40, -1, -1);
    }
    else
    {
    }
    v86[0] = a1;
    type metadata accessor for RequestMessageBase();
    id v54 = v35;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RootRequestAware);
    if (swift_dynamicCast())
    {
      __swift_project_boxed_opaque_existential_1(&v87, *((uint64_t *)&v88 + 1));
      uint64_t v55 = dispatch thunk of RootRequestAware.rootRequestId.getter();
      uint64_t v57 = v56;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v87);
    }
    else
    {
      uint64_t v89 = 0;
      long long v87 = 0u;
      long long v88 = 0u;
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v87, &demangling cache variable for type metadata for RootRequestAware?);
      uint64_t v55 = RequestMessageBase.requestId.getter();
      uint64_t v57 = v58;
    }
    id v59 = v54;
    uint64_t v60 = MessageBase.assistantId.getter();
    uint64_t v62 = v61;

    id v63 = v59;
    SessionMessageBase.sessionId.getter();
    id v81 = v63;

    uint64_t v64 = RequestMessageBase.requestId.getter();
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(*v2 + 472))(v60, v62, v7, v64, v65, v55, v57);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v85 + 8))(v7, v5);
    if (v24)
    {
      swift_retain();
      uint64_t v66 = RequestMessageBase.requestId.getter();
      v86[1] = v67;
      v86[2] = v24;
      v86[0] = v66;
      uint64_t v68 = *(uint64_t (**)(long long *))(*v2 + 416);
      swift_retain();
      uint64_t v69 = (void (*)(long long *, void))v68(&v87);
      type metadata accessor for Dictionary();
      Dictionary.subscript.setter();
      v69(&v87, 0);
      swift_release();
      id v10 = v84;
LABEL_36:
      (*(void (**)(unint64_t, uint64_t))(*v2 + 496))(a1, v24);
      swift_release();

      return;
    }
    id v70 = v81;
    os_log_type_t v71 = Logger.logObject.getter();
    os_log_type_t v72 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v71, v72))
    {
      uint64_t v73 = swift_slowAlloc();
      uint64_t v74 = (void *)swift_slowAlloc();
      uint64_t v85 = swift_slowAlloc();
      *(void *)&long long v87 = v85;
      *(_DWORD *)uint64_t v73 = 136315394;
      uint64_t v75 = RequestMessageBase.requestId.getter();
      v86[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v76, (uint64_t *)&v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v73 + 12) = 2112;
      v86[0] = a1;
      id v77 = v70;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v74 = a1;

      _os_log_impl(&dword_1B9C64000, v71, v72, "Error creating candidate request processor for requestId: %s. Dropping %@.", (uint8_t *)v73, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v74, -1, -1);
      uint64_t v78 = v85;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v78, -1, -1);
      MEMORY[0x1BA9E48C0](v73, -1, -1);
    }
    else
    {
    }
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    __swift_project_value_buffer(v46, (uint64_t)static Logger.conversationBridge);
    id v47 = v10;
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      os_log_type_t v50 = (uint8_t *)swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      *(void *)&long long v87 = v51;
      *(_DWORD *)os_log_type_t v50 = 136315138;
      uint64_t v52 = RequestMessageBase.requestId.getter();
      v86[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, (uint64_t *)&v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v48, v49, "Receiving candidate message with unknown requestId %s. We should have received a StartCandidateRequestMessage first. Ignoring.", v50, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v51, -1, -1);
      MEMORY[0x1BA9E48C0](v50, -1, -1);
    }
    else
    {
    }
  }
}

void ServerFallbackCapableRequestProcessor.handleExecuteNLOnServerMessage(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for MessageSource();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void **)&v1[OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_executeNLOnServerMessage];
  *(void *)&v2[OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_executeNLOnServerMessage] = a1;
  id v9 = a1;

  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
  id v12 = v9;
  uint64_t v72 = v11;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  int v15 = v14;
  BOOL v16 = os_log_type_enabled(v13, v14);
  uint64_t v71 = (uint64_t)v12;
  if (v16)
  {
    uint64_t v17 = swift_slowAlloc();
    id v70 = v2;
    uint64_t v18 = v17;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v67 = v4;
    uint64_t v20 = (void *)v19;
    uint64_t v69 = swift_slowAlloc();
    uint64_t v74 = (uint64_t)v12;
    v75[0] = v69;
    *(_DWORD *)uint64_t v18 = 138412546;
    int v68 = v15;
    id v21 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v20 = a1;

    *(_WORD *)(v18 + 12) = 2080;
    MessageBase.source.getter();
    uint64_t v22 = MessageSource.rawValue.getter();
    unint64_t v24 = v23;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v67);
    uint64_t v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v13, (os_log_type_t)v68, "ExecutionBridge received message: %@ from: %s", (uint8_t *)v18, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v20, -1, -1);
    uint64_t v25 = v69;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v25, -1, -1);
    uint64_t v26 = v18;
    uint64_t v2 = v70;
    MEMORY[0x1BA9E48C0](v26, -1, -1);
  }
  else
  {
  }
  uint64_t v27 = (*(uint64_t (**)(void))(*(void *)v2 + 592))();
  if (!v27)
  {
    BOOL v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v41 = 0;
      _os_log_impl(&dword_1B9C64000, v39, v40, "Received ExecuteNLOnServer while we are not in a turn. Ignoring.", v41, 2u);
      MEMORY[0x1BA9E48C0](v41, -1, -1);
    }
    goto LABEL_13;
  }
  uint64_t v28 = v27;
  uint64_t v29 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
  unint64_t v31 = v30;
  unint64_t v32 = (unint64_t *)(v28 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
  swift_beginAccess();
  unint64_t v33 = *v32;
  uint64_t v34 = (void *)v32[1];
  outlined copy of ConversationRequestProcessorTurnState.SpeechState(*v32, v34);
  unint64_t v35 = ConversationRequestProcessorTurnState.SpeechState.getRcState(rcId:)(v29, v31, v33, v34);
  outlined consume of ConversationRequestProcessorTurnState.SpeechState(v33, v34);
  if (!v35)
  {
    unint64_t v43 = *v32;
    unint64_t v42 = (void *)v32[1];
    outlined copy of ConversationRequestProcessorTurnState.SpeechState(v43, v42);
    unint64_t v35 = ConversationRequestProcessorTurnState.SpeechState.getRcState(rcId:)(v29, v31, v43, v42);
    outlined consume of ConversationRequestProcessorTurnState.SpeechState(v43, v42);
    if (v35)
    {
      swift_retain();
      goto LABEL_16;
    }
    swift_bridgeObjectRetain();
    BOOL v39 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v39, v63))
    {

      swift_bridgeObjectRelease_n();
      goto LABEL_32;
    }
    uint64_t v64 = (uint8_t *)swift_slowAlloc();
    uint64_t v65 = swift_slowAlloc();
    uint64_t v74 = v65;
    *(_DWORD *)uint64_t v64 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v39, v63, "Received ExecuteNLOnServer before RC state is created for RC ID: %s .. this may happen if no ASR or text input message was received before this message is received from the message bus.", v64, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v65, -1, -1);
    MEMORY[0x1BA9E48C0](v64, -1, -1);
    swift_release();
LABEL_13:

    return;
  }
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v36, v37))
  {
    int v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v38 = 0;
    _os_log_impl(&dword_1B9C64000, v36, v37, "TRPState is present, running ENOS in Medoc path", v38, 2u);
    MEMORY[0x1BA9E48C0](v38, -1, -1);
  }

LABEL_16:
  unint64_t v44 = *(uint64_t (**)(uint64_t))(*(void *)v35 + 400);
  uint64_t v45 = swift_retain();
  char v46 = v44(v45);
  if (ResultCandidateProcessingStatus.rawValue.getter(v46) == 0x64656C65636E6163 && v47 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v49 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_retain_n();
      os_log_type_t v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v50, v51))
      {
        uint64_t v52 = (uint8_t *)swift_slowAlloc();
        uint64_t v72 = swift_slowAlloc();
        uint64_t v74 = v72;
        *(_DWORD *)uint64_t v52 = 136315138;
        id v70 = v52 + 4;
        unint64_t v53 = *(uint64_t (**)(uint64_t))(*(void *)v35 + 800);
        uint64_t v54 = swift_retain();
        uint64_t v55 = v53(v54);
        unint64_t v57 = v56;
        swift_release();
        uint64_t v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v57, &v74);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v50, v51, "Received ExecuteNLOnServer when RC state: %s", v52, 0xCu);
        uint64_t v58 = v72;
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v58, -1, -1);
        MEMORY[0x1BA9E48C0](v52, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      ServerFallbackCapableRequestProcessor.attemptServerFallback(executeNLOnServer:rcState:)(v71, v35);
      goto LABEL_31;
    }
  }
  swift_bridgeObjectRetain();
  id v59 = Logger.logObject.getter();
  os_log_type_t v60 = static os_log_type_t.info.getter();
  if (!os_log_type_enabled(v59, v60))
  {

    swift_bridgeObjectRelease_n();
LABEL_31:
    swift_release();
    swift_release();
    goto LABEL_32;
  }
  uint64_t v61 = (uint8_t *)swift_slowAlloc();
  uint64_t v62 = swift_slowAlloc();
  uint64_t v74 = v62;
  *(_DWORD *)uint64_t v61 = 136315138;
  swift_bridgeObjectRetain();
  uint64_t v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, &v74);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  _os_log_impl(&dword_1B9C64000, v59, v60, "RC ID:%s has already been canceled. Not handling ExecuteNLOnServerMessage any further.", v61, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1BA9E48C0](v62, -1, -1);
  MEMORY[0x1BA9E48C0](v61, -1, -1);
  swift_release();
  swift_release();

LABEL_32:
  swift_release();
}

void ServerFallbackCapableRequestProcessor.attemptServerFallback(executeNLOnServer:rcState:)(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for TTResponseMessage.MitigationDecision();
  uint64_t v87 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  id v84 = &v80[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (TTResponseMessage.MitigationDecision?, TTResponseMessage.MitigationDecision?));
  MEMORY[0x1F4188790](v7);
  id v9 = &v80[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  v86 = &v80[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  int v15 = &v80[-v14];
  MEMORY[0x1F4188790](v13);
  os_log_t v90 = (os_log_t)&v80[-v16];
  uint64_t v17 = type metadata accessor for InputOrigin();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  id v21 = &v80[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v22 = (*(uint64_t (**)(uint64_t))(*v2 + 592))(v19);
  if (v22)
  {
    uint64_t v82 = v5;
    uint64_t v83 = (void *)a1;
    uint64_t v89 = v2;
    uint64_t v88 = v22;
    (*(void (**)(unsigned char *, void, uint64_t))(v18 + 104))(v21, *MEMORY[0x1E4FA2390], v17);
    _s16SiriMessageTypes11RequestTypeOACSYAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type InputOrigin and conformance InputOrigin, MEMORY[0x1E4FA23A0]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v85 = a2 & 0xFFFFFFFFFFFFLL | 0x6AE1000000000000;
    if (v91[0] == v92 && v91[1] == v93)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v23 = (*(uint64_t (**)(unsigned char *, uint64_t))(v18 + 8))(v21, v17);
      uint64_t v24 = (uint64_t)v9;
    }
    else
    {
      char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v23 = (*(uint64_t (**)(unsigned char *, uint64_t))(v18 + 8))(v21, v17);
      uint64_t v24 = (uint64_t)v9;
      if ((v29 & 1) == 0)
      {
        uint64_t v36 = v89;
        goto LABEL_35;
      }
    }
    if (((*(uint64_t (**)(uint64_t))(*(void *)a2 + 472))(v23) & 1) == 0)
    {
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v37 = type metadata accessor for Logger();
      __swift_project_value_buffer(v37, (uint64_t)static Logger.conversationBridge);
      swift_retain();
      int v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v38, v39))
      {
        os_log_type_t v40 = (uint8_t *)swift_slowAlloc();
        uint64_t v41 = swift_slowAlloc();
        v91[0] = v41;
        *(_DWORD *)os_log_type_t v40 = 136315138;
        uint64_t v42 = *(void *)(a2 + 16);
        unint64_t v43 = *(void *)(a2 + 24);
        swift_bridgeObjectRetain();
        uint64_t v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v38, v39, "Server fallback gated for RC %s in FF request until endpointer signal is available", v40, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v41, -1, -1);
        MEMORY[0x1BA9E48C0](v40, -1, -1);
      }
      else
      {

        swift_release();
      }
      char v46 = v89;
      uint64_t v47 = v83;
      (*(void (**)(uint64_t))(*(void *)a2 + 408))(11);
      uint64_t v48 = *(uint64_t (**)(uint64_t *))(*v46 + 1544);
      id v49 = v47;
      os_log_type_t v50 = (void (*)(uint64_t *, void))v48(v91);
      uint64_t v52 = v51;
      MEMORY[0x1BA9E3030]();
      if (*(void *)((*v52 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v52 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v50(v91, 0);
      goto LABEL_49;
    }
    os_log_t v30 = v90;
    (*(void (**)(void))(*(void *)a2 + 544))();
    uint64_t v31 = v87;
    uint64_t v32 = v82;
    (*(void (**)(unsigned char *, void, uint64_t))(v87 + 104))(v15, *MEMORY[0x1E4FA2080], v82);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v31 + 56))(v15, 0, 1, v32);
    uint64_t v33 = v24 + *(int *)(v7 + 48);
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v30, v24, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v15, v33, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
    uint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 48);
    if (v34(v24, 1, v32) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v15, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v30, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      int v35 = v34(v33, 1, v32);
      uint64_t v36 = v89;
      if (v35 == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v24, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
LABEL_30:
        if (one-time initialization token for conversationBridge != -1) {
          swift_once();
        }
        uint64_t v55 = type metadata accessor for Logger();
        __swift_project_value_buffer(v55, (uint64_t)static Logger.conversationBridge);
        unint64_t v56 = Logger.logObject.getter();
        os_log_type_t v57 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v56, v57))
        {
          uint64_t v58 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v58 = 0;
          _os_log_impl(&dword_1B9C64000, v56, v57, "SDSD decision was 'mitigated', not sending ENOS command to server. Setting rcState to serverFallbackFinished and sending CommitResultCandidateId", v58, 2u);
          MEMORY[0x1BA9E48C0](v58, -1, -1);
        }

        (*(void (**)(uint64_t))(*(void *)a2 + 408))(12);
        specialized static ConversationRequestProcessor.postMitigationMessage(mitigated:assistantId:sessionId:requestId:messagePublisher:)(1, v36[12], v36[13], (uint64_t)v36 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId, v36[8], v36[9], v36 + 3);
        (*(void (**)(unint64_t, void))(*v36 + 1128))(a2, 0);
        goto LABEL_49;
      }
    }
    else
    {
      unint64_t v44 = v86;
      outlined init with copy of ReferenceResolutionClientProtocol?(v24, (uint64_t)v86, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      int v45 = v34(v33, 1, v32);
      uint64_t v36 = v89;
      if (v45 != 1)
      {
        unint64_t v53 = v84;
        (*(void (**)(unsigned char *, uint64_t, uint64_t))(v31 + 32))(v84, v33, v32);
        _s16SiriMessageTypes11RequestTypeOACSYAAWlTm_0(&lazy protocol witness table cache variable for type TTResponseMessage.MitigationDecision and conformance TTResponseMessage.MitigationDecision, MEMORY[0x1E4FA2088]);
        int v81 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v54 = *(void (**)(unsigned char *, uint64_t))(v31 + 8);
        v54(v53, v32);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v15, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v90, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
        v54(v44, v32);
        outlined destroy of ReferenceResolutionClientProtocol?(v24, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
        if (v81) {
          goto LABEL_30;
        }
LABEL_35:
        id v59 = (*(void *)a2 + 408);
        isa = v59->isa;
        uint64_t v61 = v59;
        ((void (*)(uint64_t))v59->isa)(10);
        (*(void (**)(uint64_t))(*(void *)a2 + 648))(1);
        uint64_t v62 = ServerFallbackCapableRequestProcessor.makePreExecutionRules(_:)((void *)a2);
        uint64_t v63 = (*(uint64_t (**)(void))(**(void **)((char *)v36
                                                 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_decisionMaker)
                                   + 88))();
        (*(void (**)(void))(*(void *)a2 + 504))(BYTE1(v63));
        uint64_t v64 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 528))(v63);
        uint64_t v65 = *(uint64_t (**)(void))(*(void *)a2 + 496);
        uint64_t v66 = ((uint64_t (*)(uint64_t))v65)(v64);
        if ((*(uint64_t (**)(uint64_t))(*v36 + 1584))(v66))
        {
          os_log_t v90 = v61;
          if (one-time initialization token for conversationBridge != -1) {
            swift_once();
          }
          uint64_t v67 = type metadata accessor for Logger();
          __swift_project_value_buffer(v67, (uint64_t)static Logger.conversationBridge);
          swift_retain_n();
          int v68 = Logger.logObject.getter();
          os_log_type_t v69 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v68, v69))
          {
            id v70 = (uint8_t *)swift_slowAlloc();
            uint64_t v71 = swift_slowAlloc();
            v91[0] = v71;
            v86 = isa;
            uint64_t v87 = v62;
            *(_DWORD *)id v70 = 136315138;
            char v72 = v65();
            unint64_t v73 = PreExecutionDecision.rawValue.getter(v72);
            uint64_t v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v74, v91);
            isa = v86;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1B9C64000, v68, v69, "Stopping server fallback because of preExecutionDecision %s", v70, 0xCu);
            swift_arrayDestroy();
            uint64_t v75 = v71;
            uint64_t v36 = v89;
            MEMORY[0x1BA9E48C0](v75, -1, -1);
            MEMORY[0x1BA9E48C0](v70, -1, -1);
          }
          else
          {

            swift_release_n();
          }
          uint64_t v78 = ((uint64_t (*)(uint64_t))isa)(12);
          if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 472))(v78)) {
            (*(void (**)(unint64_t, void))(*v36 + 1128))(a2, 0);
          }
          goto LABEL_48;
        }
        char v76 = (*(uint64_t (**)(void))(*(void *)a2 + 400))();
        if (ResultCandidateProcessingStatus.rawValue.getter(v76) == 0xD000000000000018 && v77 == 0x80000001BA0611A0)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v79 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v79 & 1) == 0)
          {
LABEL_48:
            swift_release();
LABEL_49:
            swift_release();
            return;
          }
        }
        ServerFallbackCapableRequestProcessor.sendExecuteNLOnServerCommand(executeNLOnServer:rcState:turn:)((uint64_t)v83, (void *)a2, v88);
        goto LABEL_48;
      }
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v15, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v90, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      (*(void (**)(unsigned char *, uint64_t))(v31 + 8))(v44, v32);
    }
    outlined destroy of ReferenceResolutionClientProtocol?(v24, (uint64_t *)&demangling cache variable for type metadata for (TTResponseMessage.MitigationDecision?, TTResponseMessage.MitigationDecision?));
    goto LABEL_35;
  }
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.conversationBridge);
  os_log_t v90 = (os_log_t)Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v90, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v27 = 0;
    _os_log_impl(&dword_1B9C64000, v90, v26, "Received ExecuteNLOnServer while we are not in a turn. Ignoring.", v27, 2u);
    MEMORY[0x1BA9E48C0](v27, -1, -1);
  }
  os_log_t v28 = v90;
}

uint64_t ResultCandidateState.serverFallback.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_serverFallback);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t ServerFallbackCapableRequestProcessor.makePreExecutionRules(_:)(void *a1)
{
  if ((*(unsigned __int8 (**)(void))(*(void *)v1 + 1504))() == 2)
  {
    uint64_t v3 = specialized static HALUtils.isUserOnPhoneCall(_:_:)(*(void **)(v1 + 16), *(void *)(v1 + 64), *(void *)(v1 + 72));
    (*(void (**)(uint64_t))(*(void *)v1 + 1512))(v3);
  }
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  swift_retain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    uint64_t v31 = v29;
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v8 = *(uint64_t (**)(uint64_t))(*a1 + 800);
    uint64_t v9 = swift_retain();
    uint64_t v10 = v8(v9);
    unint64_t v12 = v11;
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v5, v6, "Constructing PreExecutionRules for RC: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v29, -1, -1);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  uint64_t v13 = (uint64_t (**)(void))(*a1 + 472);
  uint64_t v14 = *v13;
  if ((*v13)()) {
    uint64_t v15 = ServerFallbackCapableRequestProcessor.makePreExecutionRulesAfterRCSelection(_:)((uint64_t)a1);
  }
  else {
    uint64_t v15 = specialized ServerFallbackCapableRequestProcessor.makePreExecutionRulesBeforeRCSelection(_:)();
  }
  uint64_t v16 = v15;
  swift_retain_n();
  swift_retain_n();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    uint64_t v31 = v30;
    *(_DWORD *)uint64_t v19 = 136315650;
    uint64_t v20 = a1[2];
    unint64_t v21 = a1[3];
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v22 = swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 1024;
    ((void (*)(uint64_t))v14)(v22);
    swift_release();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v19 + 18) = 2080;
    uint64_t v23 = *(void *)(v16 + 16);
    swift_bridgeObjectRetain();
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExecutionRule);
    uint64_t v25 = MEMORY[0x1BA9E3080](v23, v24);
    unint64_t v27 = v26;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v17, v18, "[ServerFallback] Built following rules for [RC ID=%s, selected=%{BOOL}d] : %s", (uint8_t *)v19, 0x1Cu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v30, -1, -1);
    MEMORY[0x1BA9E48C0](v19, -1, -1);
  }
  else
  {

    swift_release_n();
    swift_release_n();
  }
  return v16;
}

uint64_t ServerFallbackCapableRequestProcessor.isUserOnActivePhoneCall.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0
                         + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_isUserOnActivePhoneCall);
  swift_beginAccess();
  return *v1;
}

uint64_t specialized static HALUtils.isUserOnPhoneCall(_:_:)(void *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v32 = a3;
  uint64_t v5 = type metadata accessor for OSSignpostID();
  uint64_t v30 = *(void *)(v5 - 8);
  uint64_t v31 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v29 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchTime();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  unint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v28 - v12;
  uint64_t v14 = swift_allocObject();
  *(unsigned char *)(v14 + 16) = 2;
  dispatch_semaphore_t v15 = dispatch_semaphore_create(0);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v14;
  *(void *)(v16 + 24) = v15;
  swift_retain();
  uint64_t v17 = v15;
  specialized static HALUtils.isUserOnPhoneCall(_:_:completion:)(a1, a2, v32, (uint64_t)partial apply for closure #1 in static HALUtils.isUserOnPhoneCall(_:_:), v16);
  swift_release();
  static DispatchTime.now()();
  if (one-time initialization token for phoneCallStateQueryTimeoutInMillis != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for DispatchTimeInterval();
  uint64_t v19 = __swift_project_value_buffer(v18, (uint64_t)static HALUtils.phoneCallStateQueryTimeoutInMillis);
  MEMORY[0x1BA9E2C20](v11, v19);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v8 + 8);
  v20(v11, v7);
  MEMORY[0x1BA9E3580](v13);
  v20(v13, v7);
  if (static DispatchTimeoutResult.== infix(_:_:)())
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.conversationBridge);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl(&dword_1B9C64000, v22, v23, "Timed out fetching phoneCallState.", v24, 2u);
      MEMORY[0x1BA9E48C0](v24, -1, -1);
    }

    static os_signpost_type_t.event.getter();
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v25 = v29;
    static OSSignpostID.exclusive.getter();
    uint64_t v26 = 2;
    os_signpost(_:dso:log:name:signpostID:)();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v25, v31);
    swift_release();
  }
  else
  {

    swift_beginAccess();
    uint64_t v26 = *(unsigned __int8 *)(v14 + 16);
    swift_release();
  }
  return v26;
}

uint64_t specialized static HALUtils.isUserOnPhoneCall(_:_:completion:)(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v39 = a4;
  uint64_t v40 = a5;
  uint64_t v41 = a2;
  uint64_t v42 = type metadata accessor for OSSignpostID();
  uint64_t v7 = *(void *)(v42 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = MEMORY[0x1F4188790](v42);
  int v38 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  unint64_t v11 = (char *)&v37 - v10;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  id v12 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    Swift::Int v37 = (Swift::Int)a1;
    uint64_t v18 = v17;
    aBlock[0] = v17;
    *(_DWORD *)uint64_t v16 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, a3, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v14, v15, "Fetching isUserOnPhoneCall status for requestId: %s", v16, 0xCu);
    swift_arrayDestroy();
    uint64_t v19 = v18;
    a1 = (void *)v37;
    MEMORY[0x1BA9E48C0](v19, -1, -1);
    MEMORY[0x1BA9E48C0](v16, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if (objc_msgSend(a1, sel_respondsToSelector_, sel_fetchContextsForKeys_forRequestID_includesNearbyDevices_completion_))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1BA04FD90;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v21;
    swift_unknownObjectRetain();
    Swift::Int v37 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
    swift_setDeallocating();
    swift_arrayDestroy();
    uint64_t v22 = v38;
    os_log_type_t v23 = a1;
    uint64_t v24 = v42;
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v38, v11, v42);
    unint64_t v25 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    unint64_t v26 = (v8 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v27 = (v26 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v28 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v28 + v25, v22, v24);
    uint64_t v29 = (void *)(v28 + v26);
    uint64_t v31 = v40;
    uint64_t v30 = v41;
    void *v29 = v41;
    v29[1] = a3;
    unint64_t v32 = (void *)(v28 + v27);
    void *v32 = v39;
    v32[1] = v31;
    swift_bridgeObjectRetain();
    swift_retain();
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    uint64_t v34 = (void *)MEMORY[0x1BA9E2DD0](v30, a3);
    aBlock[4] = (uint64_t)partial apply for closure #1 in static HALUtils.isUserOnPhoneCall(_:_:completion:);
    aBlock[5] = v28;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed [AFServiceDeviceContext]?) -> ();
    aBlock[3] = (uint64_t)&block_descriptor_15;
    int v35 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v23, sel_fetchContextsForKeys_forRequestID_includesNearbyDevices_completion_, isa, v34, 0, v35);
    _Block_release(v35);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v11, v42);
}

uint64_t partial apply for closure #1 in static HALUtils.isUserOnPhoneCall(_:_:completion:)(unint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OSSignpostID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v1 + v5);
  unint64_t v7 = *(void *)(v1 + v5 + 8);
  uint64_t v8 = *(uint64_t (**)(BOOL))(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8));

  return closure #1 in static HALUtils.isUserOnPhoneCall(_:_:completion:)(a1, v1 + v4, v6, v7, v8);
}

uint64_t closure #1 in static HALUtils.isUserOnPhoneCall(_:_:completion:)(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(BOOL))
{
  if (!a1) {
    goto LABEL_17;
  }
  uint64_t v9 = a1 & 0xFFFFFFFFFFFFFF8;
  if (!(a1 >> 62))
  {
    uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v10) {
      goto LABEL_4;
    }
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result)
  {
LABEL_16:
    swift_bridgeObjectRelease();
LABEL_17:
    long long v29 = 0u;
    long long v30 = 0u;
    goto LABEL_18;
  }
LABEL_4:
  if ((a1 & 0xC000000000000001) != 0)
  {
    id v12 = (id)MEMORY[0x1BA9E3990](0, a1);
  }
  else
  {
    if (!*(void *)(v9 + 16))
    {
      __break(1u);
      return result;
    }
    id v12 = *(id *)(a1 + 32);
  }
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  id v14 = objc_msgSend(v13, sel_serializedContextByKey);

  if (!v14) {
    goto LABEL_17;
  }
  uint64_t v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v15 + 16) && (unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17), (v19 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v15 + 56) + 32 * v18, (uint64_t)&v29);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*((void *)&v30 + 1))
    {
      outlined init with take of Any(&v29, v31);
      id v20 = objc_allocWithZone(MEMORY[0x1E4F4E410]);
      __swift_project_boxed_opaque_existential_1(v31, v32);
      id v21 = objc_msgSend(v20, sel_initWithSerializedBackingStore_, _bridgeAnythingToObjectiveC<A>(_:)());
      swift_unknownObjectRelease();
      if (objc_msgSend(v21, sel_callState))
      {
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v31);

        BOOL v33 = 1;
      }
      else
      {
        unsigned __int8 v22 = objc_msgSend(v21, sel_callState);

        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v31);
        BOOL v33 = (v22 & 2) != 0;
      }
      goto LABEL_19;
    }
  }
  else
  {
    long long v29 = 0u;
    long long v30 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
LABEL_18:
  outlined destroy of Any?((uint64_t)&v29);
  BOOL v33 = 0;
LABEL_19:
  static os_signpost_type_t.end.getter();
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  os_signpost(_:dso:log:name:signpostID:)();
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.conversationBridge);
  BOOL v24 = v33;
  swift_bridgeObjectRetain_n();
  unint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    v31[0] = v28;
    *(_DWORD *)uint64_t v27 = 67109378;
    LODWORD(v29) = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v27 + 8) = 2080;
    swift_bridgeObjectRetain();
    *(void *)&long long v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v25, v26, "Retrieved isUserOnPhoneCall status: %{BOOL}d for requestId: %s", (uint8_t *)v27, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v28, -1, -1);
    MEMORY[0x1BA9E48C0](v27, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_beginAccess();
  return a5(v33);
}

Swift::Int partial apply for closure #1 in static HALUtils.isUserOnPhoneCall(_:_:)(char a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_beginAccess();
  *(unsigned char *)(v3 + 16) = a1;
  return OS_dispatch_semaphore.signal()();
}

uint64_t ServerFallbackCapableRequestProcessor.isUserOnActivePhoneCall.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_isUserOnActivePhoneCall);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t ServerFallbackCapableRequestProcessor.makePreExecutionRulesAfterRCSelection(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SiriInCallFeatureFlag();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  unint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v44 = (void *)MEMORY[0x1E4FBC860];
  char v12 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 1504))(v9);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v11, *MEMORY[0x1E4F9FD60], v7);
  char v13 = SiriInCallFeatureFlag.isEnabled.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  uint64_t v14 = type metadata accessor for HangUpRule();
  uint64_t v15 = (unsigned char *)swift_allocObject();
  v15[16] = 0;
  v15[17] = v12;
  v15[18] = v13 & 1;
  swift_beginAccess();
  uint64_t v16 = v44;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
  }
  unint64_t v18 = v16[2];
  unint64_t v17 = v16[3];
  if (v18 >= v17 >> 1) {
    uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v16);
  }
  uint64_t v42 = v14;
  uint64_t v43 = &protocol witness table for HangUpRule;
  *(void *)&long long v41 = v15;
  v16[2] = v18 + 1;
  outlined init with take of ReferenceResolutionClientProtocol(&v41, (uint64_t)&v16[5 * v18 + 4]);
  unint64_t v44 = v16;
  swift_endAccess();
  uint64_t v19 = *(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_networkAvailabilityProvider);
  uint64_t v20 = *(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_coreTelephonyServiceProvider);
  id v21 = *(void **)(v2 + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_executeNLOnServerMessage);
  if (v21)
  {
    swift_retain();
    id v22 = v21;
    swift_retain();
    ExecuteNLOnServerMessageBase.fallbackReason.getter();

    uint64_t v23 = type metadata accessor for ServerFallbackReason();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v6, 0, 1, v23);
  }
  else
  {
    uint64_t v24 = type metadata accessor for ServerFallbackReason();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v6, 1, 1, v24);
    swift_retain();
    swift_retain();
  }
  id v25 = objc_msgSend(self, sel_processInfo);
  uint64_t v26 = type metadata accessor for OfflineServerFallbackRule();
  uint64_t v27 = swift_allocObject();
  uint64_t v28 = (void *)(v27 + OBJC_IVAR____TtC14SiriKitRuntime25OfflineServerFallbackRule_processInfo);
  v28[3] = type metadata accessor for NSProcessInfo();
  v28[4] = &protocol witness table for NSProcessInfo;
  *uint64_t v28 = v25;
  *(unsigned char *)(v27 + 16) = 5;
  *(void *)(v27 + 24) = v19;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v6, v27 + OBJC_IVAR____TtC14SiriKitRuntime25OfflineServerFallbackRule_fallbackReason, &demangling cache variable for type metadata for ServerFallbackReason?);
  *(void *)(v27 + 32) = v20;
  swift_beginAccess();
  long long v29 = v44;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    long long v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
  }
  unint64_t v31 = v29[2];
  unint64_t v30 = v29[3];
  if (v31 >= v30 >> 1) {
    long long v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v30 > 1), v31 + 1, 1, v29);
  }
  uint64_t v42 = v26;
  uint64_t v43 = &protocol witness table for OfflineServerFallbackRule;
  *(void *)&long long v41 = v27;
  v29[2] = v31 + 1;
  outlined init with take of ReferenceResolutionClientProtocol(&v41, (uint64_t)&v29[5 * v31 + 4]);
  unint64_t v44 = v29;
  uint64_t v32 = swift_endAccess();
  char v33 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 616))(v32);
  uint64_t v34 = type metadata accessor for ServerFTMRule();
  uint64_t v35 = swift_allocObject();
  *(unsigned char *)(v35 + 16) = 3;
  *(unsigned char *)(v35 + 17) = v33 & 1;
  swift_beginAccess();
  uint64_t v36 = v44;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36[2] + 1, 1, v36);
  }
  unint64_t v38 = v36[2];
  unint64_t v37 = v36[3];
  if (v38 >= v37 >> 1) {
    uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v37 > 1), v38 + 1, 1, v36);
  }
  uint64_t v42 = v34;
  uint64_t v43 = &protocol witness table for ServerFTMRule;
  *(void *)&long long v41 = v35;
  v36[2] = v38 + 1;
  outlined init with take of ReferenceResolutionClientProtocol(&v41, (uint64_t)&v36[5 * v38 + 4]);
  swift_endAccess();
  type metadata accessor for CompositePreExecutionRules();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v36;
  return result;
}

uint64_t type metadata accessor for CompositePreExecutionRules.Builder()
{
  return self;
}

uint64_t type metadata accessor for HangUpRule()
{
  return self;
}

uint64_t type metadata accessor for OfflineServerFallbackRule()
{
  uint64_t result = type metadata singleton initialization cache for OfflineServerFallbackRule;
  if (!type metadata singleton initialization cache for OfflineServerFallbackRule) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t type metadata accessor for NSProcessInfo()
{
  unint64_t result = lazy cache variable for type metadata for NSProcessInfo;
  if (!lazy cache variable for type metadata for NSProcessInfo)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSProcessInfo);
  }
  return result;
}

uint64_t ResultCandidateState.overrideFTMAsPerServer.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_overrideFTMAsPerServer);
  swift_beginAccess();
  return *v1;
}

uint64_t type metadata accessor for ServerFTMRule()
{
  return self;
}

uint64_t type metadata accessor for CompositePreExecutionRules()
{
  return self;
}

uint64_t PreExecutionDecisionMaker.evaluate(rules:)(uint64_t a1)
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1B9C64000, v3, v4, "Evaluating Pre-Execution Decision..", v5, 2u);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }

  char v6 = 12;
  unsigned __int8 v26 = 12;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8)
  {
    unsigned __int8 v13 = 7;
    goto LABEL_14;
  }
  uint64_t v9 = v7 + 32;
  swift_bridgeObjectRetain();
  while (2)
  {
    outlined init with copy of ReferenceResolutionClientProtocol(v9, (uint64_t)v23);
    uint64_t v10 = v24;
    uint64_t v11 = v25;
    __swift_project_boxed_opaque_existential_1(v23, v24);
    char v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 16))(v10, v11);
    switch(v6)
    {
      case 12:
        swift_bridgeObjectRelease();
        goto LABEL_9;
      default:
        char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v12)
        {
LABEL_9:
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
          v9 += 40;
          if (!--v8)
          {
            swift_bridgeObjectRelease();
            unsigned __int8 v13 = 7;
            char v6 = 12;
            goto LABEL_14;
          }
          continue;
        }
        swift_bridgeObjectRelease();
        unsigned __int8 v26 = v6;
        uint64_t v14 = v24;
        uint64_t v15 = v25;
        __swift_project_boxed_opaque_existential_1(v23, v24);
        unsigned __int8 v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v14, v15);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
LABEL_14:
        uint64_t v16 = Logger.logObject.getter();
        os_log_type_t v17 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v16, v17))
        {
          unint64_t v18 = (uint8_t *)swift_slowAlloc();
          uint64_t v19 = swift_slowAlloc();
          v23[0] = v19;
          *(_DWORD *)unint64_t v18 = 136315138;
          unint64_t v20 = PreExecutionDecision.rawValue.getter(v6);
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v23);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B9C64000, v16, v17, "Pre-Execution Decision was evaluated as: %s", v18, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v19, -1, -1);
          MEMORY[0x1BA9E48C0](v18, -1, -1);
        }

        swift_beginAccess();
        return v13 | (v26 << 8);
    }
  }
}

uint64_t protocol witness for PreExecutionRule.evaluate() in conformance HangUpRule()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

SiriKitRuntime::PreExecutionDecision __swiftcall HangUpRule.evaluate()()
{
  if (*(unsigned char *)(v0 + 18)) {
    return 12;
  }
  int v2 = *(unsigned __int8 *)(v0 + 17);
  if (v2 == 2)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationBridge);
    os_log_type_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      char v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v6 = 0;
      _os_log_impl(&dword_1B9C64000, v4, v5, "PhoneCallState is nil for HangUpRule. This should never happen! Failing request for privacy reasons.", v6, 2u);
      MEMORY[0x1BA9E48C0](v6, -1, -1);
    }

    return 10;
  }
  else if (v2)
  {
    return 0;
  }
  else
  {
    return 12;
  }
}

uint64_t protocol witness for PreExecutionRule.evaluate() in conformance OfflineServerFallbackRule()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

SiriKitRuntime::PreExecutionDecision __swiftcall OfflineServerFallbackRule.evaluate()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (dispatch thunk of NetworkAvailability.isAvailable.getter()) {
    return 12;
  }
  if ((*(uint64_t (**)(void))(*(void *)v0 + 136))())
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.conversationBridge);
    swift_retain_n();
    char v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v24 = v9;
      *(_DWORD *)uint64_t v8 = 136315138;
      outlined init with copy of ServerFallbackReason?(v0 + OBJC_IVAR____TtC14SiriKitRuntime25OfflineServerFallbackRule_fallbackReason, (uint64_t)v3);
      uint64_t v10 = type metadata accessor for ServerFallbackReason();
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v3, 1, v10) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v3, &demangling cache variable for type metadata for ServerFallbackReason?);
        unint64_t v12 = 0x80000001BA06A980;
        unint64_t v13 = 0xD000000000000026;
      }
      else
      {
        unint64_t v13 = ServerFallbackReason.rawValue.getter();
        unint64_t v12 = v22;
        (*(void (**)(char *, uint64_t))(v11 + 8))(v3, v10);
      }
      uint64_t v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v12, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v6, v7, "Device is offline and attempting to fallback to the server because of an error: %s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v9, -1, -1);
      MEMORY[0x1BA9E48C0](v8, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    return 6;
  }
  else
  {
    char v14 = dispatch thunk of NetworkAvailability.isInAirplaneMode.getter();
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.conversationBridge);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      unint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)unint64_t v18 = 136315138;
      uint64_t v24 = v19;
      if (v14) {
        uint64_t v20 = 0x64656C62616E65;
      }
      else {
        uint64_t v20 = 0x64656C6261736964;
      }
      if (v14) {
        unint64_t v21 = 0xE700000000000000;
      }
      else {
        unint64_t v21 = 0xE800000000000000;
      }
      uint64_t v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v16, v17, "Device is offline with airplane mode %s. Rejecting server fallback.", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v19, -1, -1);
      MEMORY[0x1BA9E48C0](v18, -1, -1);
    }

    if (v14) {
      return 5;
    }
    else {
      return 4;
    }
  }
}

uint64_t protocol witness for PreExecutionRule.evaluate() in conformance ServerFTMRule()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

SiriKitRuntime::PreExecutionDecision __swiftcall ServerFTMRule.evaluate()()
{
  if (*(unsigned char *)(v0 + 17)) {
    return 3;
  }
  else {
    return 12;
  }
}

Swift::Bool __swiftcall ServerFallbackCapableRequestProcessor.shouldNotProceedWithServerFallback(preExecutionDecision:)(SiriKitRuntime::PreExecutionDecision preExecutionDecision)
{
  if (PreExecutionDecision.rawValue.getter(preExecutionDecision) == 0xD000000000000017 && v2 == 0x80000001BA060B40) {
    goto LABEL_3;
  }
  char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v3) {
    return 1;
  }
  if (PreExecutionDecision.rawValue.getter(preExecutionDecision) == 0xD000000000000024 && v5 == 0x80000001BA060BE0) {
    goto LABEL_3;
  }
  char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v6) {
    return 1;
  }
  if (PreExecutionDecision.rawValue.getter(preExecutionDecision) == 0xD000000000000024 && v7 == 0x80000001BA060C10) {
    goto LABEL_3;
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v8) {
    return 1;
  }
  if (PreExecutionDecision.rawValue.getter(preExecutionDecision) == 0xD000000000000024 && v9 == 0x80000001BA060C40) {
    goto LABEL_3;
  }
  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v10) {
    return 1;
  }
  if (PreExecutionDecision.rawValue.getter(preExecutionDecision) == 0xD000000000000015 && v11 == 0x80000001BA060CF0)
  {
LABEL_3:
    swift_bridgeObjectRelease();
    return 1;
  }
  char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

id ServerFallbackCapableRequestProcessor.sendExecuteNLOnServerCommand(executeNLOnServer:rcState:turn:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for ServerFallbackReason();
  uint64_t v48 = *(void *)(v8 - 8);
  uint64_t v49 = v8;
  MEMORY[0x1F4188790](v8);
  char v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v11 - 8);
  unint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v52 = *(void *)(v14 - 8);
  uint64_t v53 = v14;
  MEMORY[0x1F4188790](v14);
  os_log_type_t v51 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for RequestType();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (void (**)(char *, uint64_t))((char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  LODWORD(v18) = *(unsigned __int8 *)(v4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isMUXEnabled);
  uint64_t v20 = a3 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
  unint64_t v21 = (void (**)(void (**)(char *, uint64_t), uint64_t, uint64_t))(v17 + 16);
  uint64_t v47 = a1;
  if (v18 == 1)
  {
    swift_beginAccess();
    (*v21)(v19, v20, v16);
    id v50 = ExecuteNLOnServerMessage.toSARDMUXExecuteNLOnServer(rcState:requestType:refId:)(a2, v19, *(void (***)(char *, uint64_t, uint64_t))(v4 + 80), *(void *)(v4 + 88));
  }
  else
  {
    swift_beginAccess();
    (*v21)(v19, v20, v16);
    unint64_t v22 = v10;
    uint64_t v24 = *(void *)(v4 + 80);
    uint64_t v23 = *(void *)(v4 + 88);
    id v50 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96910]), sel_init);
    aBlock[0] = v50;
    uint64_t v25 = v24;
    char v10 = v22;
    specialized ExecuteNLOnServerMessage.populateExecuteNLOnServer<A>(executeNLOnServer:rcState:requestType:refId:)(aBlock, a2, v19, v25, v23);
  }
  (*(void (**)(void, uint64_t))(v17 + 8))(v19, v16);
  unsigned __int8 v26 = v51;
  UUID.init()();
  uint64_t v27 = v52;
  uint64_t v28 = v53;
  (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v13, v26, v53);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v13, 0, 1, v28);
  (*(void (**)(char *))(*a2 + 816))(v13);
  uint64_t v29 = *(void *)(v4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_instrumentationUtil);
  id result = objc_msgSend(v50, sel_refId);
  if (result)
  {
    unint64_t v31 = result;
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v34 = v33;

    uint64_t v36 = a2[2];
    uint64_t v35 = a2[3];
    ExecuteNLOnServerMessageBase.fallbackReason.getter();
    unint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, char *))(*(void *)v29 + 200);
    uint64_t v46 = v35;
    uint64_t v47 = v36;
    v37(v32, v34, v36, v35, v26, v10);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v10, v49);
    unint64_t v38 = *(void **)(v4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_requestDispatcherServiceHelper);
    aBlock[4] = closure #1 in ServerFallbackCapableRequestProcessor.sendExecuteNLOnServerCommand(executeNLOnServer:rcState:turn:);
    aBlock[5] = 0;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
    aBlock[3] = &block_descriptor_22;
    uint64_t v39 = _Block_copy(aBlock);
    id v40 = v50;
    objc_msgSend(v38, sel_handleCommand_completion_, v40, v39);
    _Block_release(v39);

    if (((*(uint64_t (**)(void))(*a2 + 472))() & 1) != 0
      && ((*(uint64_t (**)(void))(*(void *)v4 + 456))() & 1) == 0)
    {
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v41 = type metadata accessor for Logger();
      __swift_project_value_buffer(v41, (uint64_t)static Logger.conversationBridge);
      uint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v42, v43))
      {
        unint64_t v44 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v44 = 0;
        _os_log_impl(&dword_1B9C64000, v42, v43, "Sending ResultCandidateSelected with ExecuteNLOnServer itself", v44, 2u);
        MEMORY[0x1BA9E48C0](v44, -1, -1);
      }

      (*(void (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)v4 + 1280))(v47, v46, 1, 0, 0);
    }

    return (id)(*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v51, v53);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ResultCandidateState.serverFallbackContextId.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_loggingMetadata;
  swift_beginAccess();
  outlined assign with copy of ReferenceResolutionClientProtocol?(a1, v3, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_endAccess();
  return outlined destroy of ReferenceResolutionClientProtocol?(a1, (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

void ConversationBridgeInstrumentationUtil.logServerFallbackInitiated(requestId:resultCandidateId:contextId:fallbackReason:)(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4, uint64_t a5, void *a6)
{
  uint64_t v7 = v6;
  uint64_t v71 = a5;
  uint64_t v13 = type metadata accessor for ServerFallbackReason();
  uint64_t v74 = *(void *)(v13 - 8);
  uint64_t v75 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v72 = v14;
  unint64_t v73 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = type metadata accessor for InsightRequestSummaryLogger();
  MEMORY[0x1F4188790](v67);
  uint64_t v76 = (uint64_t)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v69 = *(void *)(v19 - 8);
  uint64_t v70 = v19;
  uint64_t v20 = *(void *)(v69 + 64);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  int v68 = (char *)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v61 - v22;
  uint64_t v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0E80]), sel_init);
  if (!v24)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Logger.conversationBridge);
    uint64_t v78 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v78, v37))
    {
      unint64_t v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v38 = 0;
      _os_log_impl(&dword_1B9C64000, v78, v37, "Failed to create ORCHSchemaORCHServerFallbackInitiated event", v38, 2u);
      MEMORY[0x1BA9E48C0](v38, -1, -1);
    }
    goto LABEL_19;
  }
  uint64_t v25 = (uint64_t (*)(void *))*((void *)*v7 + 34);
  uint64_t v77 = a4;
  uint64_t v78 = v24;
  id v65 = a6;
  uint64_t v26 = v25(a6);
  [v78 setFallbackReason:v26];
  id v27 = specialized InstrumentationUtil.buildWrapperEventMessage(_:_:logResourceUtilization:)(a1, a2, a3, (uint64_t)v77, 1);
  if (!v27)
  {
LABEL_19:
    uint64_t v42 = v78;
    goto LABEL_20;
  }
  id v66 = v27;
  id v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0E70]), sel_init);
  if (v28)
  {
    uint64_t v29 = v28;
    uint64_t v62 = a1;
    uint64_t v63 = a2;
    id v30 = objc_allocWithZone(MEMORY[0x1E4FA1370]);
    uint64_t v64 = a3;
    uint64_t v31 = v71;
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    id v33 = objc_msgSend(v30, sel_initWithNSUUID_, isa);

    objc_msgSend(v29, sel_setContextId_, v33);
    objc_msgSend(v29, sel_setStartedOrChanged_, v78);
    UUID.init(uuidString:)();
    uint64_t v35 = v69;
    uint64_t v34 = v70;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v18, 1, v70) == 1)
    {
      outlined destroy of UUID?((uint64_t)v18);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v23, v18, v34);
      uint64_t v43 = v34;
      id v44 = objc_allocWithZone(MEMORY[0x1E4FA1370]);
      Class v45 = UUID._bridgeToObjectiveC()().super.isa;
      id v46 = objc_msgSend(v44, sel_initWithNSUUID_, v45);

      objc_msgSend(v29, sel_setTrpId_, v46);
      uint64_t v34 = v43;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v23, v43);
    }
    id v47 = v65;
    id v48 = v66;
    objc_msgSend(v66, sel_setServerFallbackContext_, v29);
    objc_msgSend(v7[2], sel_emitMessage_, v48);
    id v65 = v29;
    if (one-time initialization token for insightRequestSummaryLogger != -1) {
      swift_once();
    }
    uint64_t v49 = __swift_project_value_buffer(v67, (uint64_t)static Logger.insightRequestSummaryLogger);
    outlined init with copy of InsightRequestSummaryLogger(v49, v76);
    id v50 = v68;
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v68, v31, v34);
    os_log_type_t v51 = v73;
    uint64_t v52 = v74;
    uint64_t v53 = v75;
    (*(void (**)(char *, id, uint64_t))(v74 + 16))(v73, v47, v75);
    unint64_t v54 = (*(unsigned __int8 *)(v35 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
    unint64_t v55 = (v20 + *(unsigned __int8 *)(v52 + 80) + v54) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
    unint64_t v56 = (char *)swift_allocObject();
    uint64_t v57 = v63;
    *((void *)v56 + 2) = v62;
    *((void *)v56 + 3) = v57;
    uint64_t v58 = v34;
    id v59 = v77;
    *((void *)v56 + 4) = v64;
    *((void *)v56 + 5) = v59;
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(&v56[v54], v50, v58);
    (*(void (**)(char *, char *, uint64_t))(v52 + 32))(&v56[v55], v51, v53);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v60 = v76;
    InsightRequestSummaryLogger.emitDebug(_:)(partial apply for implicit closure #1 in ConversationBridgeInstrumentationUtil.logServerFallbackInitiated(requestId:resultCandidateId:contextId:fallbackReason:), (uint64_t)v56);

    swift_release();
    outlined destroy of InsightRequestSummaryLogger(v60);
    return;
  }
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v39 = type metadata accessor for Logger();
  __swift_project_value_buffer(v39, (uint64_t)static Logger.conversationBridge);
  uint64_t v77 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v77, v40))
  {

    goto LABEL_19;
  }
  uint64_t v41 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v41 = 0;
  _os_log_impl(&dword_1B9C64000, v77, v40, "Failed to create ORCHSchemaORCHServerFallbackContext event", v41, 2u);
  MEMORY[0x1BA9E48C0](v41, -1, -1);

  uint64_t v42 = v77;
LABEL_20:
}

uint64_t ConversationBridgeInstrumentationUtil.mapServerFallbackReasonToLoggingReason(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ServerFallbackReason();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  int v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == *MEMORY[0x1E4FA25D8]) {
    return 5;
  }
  if (v6 == *MEMORY[0x1E4FA25E0]) {
    return 4;
  }
  if (v6 == *MEMORY[0x1E4FA25C8]) {
    return 2;
  }
  if (v6 == *MEMORY[0x1E4FA25F0]) {
    return 3;
  }
  if (v6 == *MEMORY[0x1E4FA25D0]) {
    return 1;
  }
  if (v6 == *MEMORY[0x1E4FA25E8]) {
    return 6;
  }
  if (v6 != *MEMORY[0x1E4FA25F8]) {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return 0;
}

uint64_t outlined init with copy of InsightRequestSummaryLogger(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InsightRequestSummaryLogger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t initializeWithCopy for InsightRequestSummaryLogger(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t InsightRequestSummaryLogger.emitDebug(_:)(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2, v5);
  swift_retain_n();
  uint64_t v9 = Logger.logObject.getter();
  int v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, (os_log_type_t)v10))
  {
    int v44 = v10;
    os_log_t v46 = v9;
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v43 = v12;
    Class v45 = v11;
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v50 = 123;
    unint64_t v51 = 0xE100000000000000;
    uint64_t v52 = v12;
    uint64_t v13 = a1();
    int64_t v14 = *(void *)(v13 + 16);
    if (v14)
    {
      v39[2] = a2;
      os_log_type_t v40 = v8;
      uint64_t v41 = v6;
      uint64_t v42 = v5;
      uint64_t v49 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
      uint64_t v15 = v49;
      v39[1] = v13;
      uint64_t v16 = (void **)(v13 + 56);
      do
      {
        uint64_t v18 = (uint64_t)*(v16 - 3);
        uint64_t v17 = *(v16 - 2);
        uint64_t v19 = (uint64_t)*(v16 - 1);
        uint64_t v20 = *v16;
        uint64_t v47 = 34;
        unint64_t v48 = 0xE100000000000000;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v21._countAndFlagsBits = v18;
        v21._object = v17;
        String.append(_:)(v21);
        v22._countAndFlagsBits = 2243106;
        v22._object = (void *)0xE300000000000000;
        String.append(_:)(v22);
        v23._countAndFlagsBits = v19;
        v23._object = v20;
        String.append(_:)(v23);
        v24._countAndFlagsBits = 34;
        v24._object = (void *)0xE100000000000000;
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v25 = v47;
        unint64_t v26 = v48;
        uint64_t v49 = v15;
        unint64_t v28 = *(void *)(v15 + 16);
        unint64_t v27 = *(void *)(v15 + 24);
        if (v28 >= v27 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
          uint64_t v15 = v49;
        }
        v16 += 4;
        *(void *)(v15 + 16) = v28 + 1;
        unint64_t v29 = v15 + 16 * v28;
        *(void *)(v29 + 32) = v25;
        *(void *)(v29 + 40) = v26;
        --v14;
      }
      while (v14);
      swift_bridgeObjectRelease();
      uint64_t v6 = v41;
      uint64_t v5 = v42;
      uint64_t v8 = v40;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v15 = MEMORY[0x1E4FBC860];
    }
    id v30 = v45;
    uint64_t v47 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v31 = BidirectionalCollection<>.joined(separator:)();
    id v33 = v32;
    swift_bridgeObjectRelease();
    v34._countAndFlagsBits = v31;
    v34._object = v33;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._countAndFlagsBits = 125;
    v35._object = (void *)0xE100000000000000;
    String.append(_:)(v35);
    uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    os_log_t v36 = v46;
    _os_log_impl(&dword_1B9C64000, v46, (os_log_type_t)v44, "%s", v30, 0xCu);
    uint64_t v37 = v43;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v37, -1, -1);
    MEMORY[0x1BA9E48C0](v30, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t partial apply for implicit closure #1 in ConversationBridgeInstrumentationUtil.logServerFallbackInitiated(requestId:resultCandidateId:contextId:fallbackReason:)()
{
  type metadata accessor for UUID();
  type metadata accessor for ServerFallbackReason();
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];

  return implicit closure #1 in ConversationBridgeInstrumentationUtil.logServerFallbackInitiated(requestId:resultCandidateId:contextId:fallbackReason:)(v1, v2, v3, v4);
}

uint64_t implicit closure #1 in ConversationBridgeInstrumentationUtil.logServerFallbackInitiated(requestId:resultCandidateId:contextId:fallbackReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(InsightRequestSummaryKey, String)>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1BA050750;
  *(void *)(v8 + 32) = 0x614E656764697262;
  *(void *)(v8 + 40) = 0xEA0000000000656DLL;
  *(void *)(v8 + 48) = 0xD000000000000012;
  *(void *)(v8 + 56) = 0x80000001BA064FF0;
  *(void *)(v8 + 64) = 0xD000000000000012;
  *(void *)(v8 + 72) = 0x80000001BA065010;
  *(void *)(v8 + 80) = 0xD00000000000001ALL;
  *(void *)(v8 + 88) = 0x80000001BA061350;
  *(void *)(v8 + 96) = 0x4974736575716572;
  *(void *)(v8 + 104) = 0xE900000000000064;
  *(void *)(v8 + 112) = a1;
  *(void *)(v8 + 120) = a2;
  *(void *)(v8 + 128) = 0xD000000000000011;
  *(void *)(v8 + 136) = 0x80000001BA0607B0;
  *(void *)(v8 + 144) = a3;
  *(void *)(v8 + 152) = a4;
  *(void *)(v8 + 160) = 0xD000000000000017;
  *(void *)(v8 + 168) = 0x80000001BA065030;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(void *)(v8 + 176) = UUID.uuidString.getter();
  *(void *)(v8 + 184) = v9;
  *(void *)(v8 + 192) = 0xD000000000000014;
  *(void *)(v8 + 200) = 0x80000001BA060770;
  *(void *)(v8 + 208) = ServerFallbackReason.rawValue.getter();
  *(void *)(v8 + 216) = v10;
  return v8;
}

uint64_t outlined destroy of InsightRequestSummaryLogger(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for InsightRequestSummaryLogger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for InsightRequestSummaryLogger(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t HangUpRule.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t OfflineServerFallbackRule.__deallocating_deinit()
{
  swift_release();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime25OfflineServerFallbackRule_fallbackReason, &demangling cache variable for type metadata for ServerFallbackReason?);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC14SiriKitRuntime25OfflineServerFallbackRule_processInfo);

  return swift_deallocClassInstance();
}

uint64_t ServerFTMRule.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void outlined consume of CandidateRequestMessage?(uint64_t a1)
{
  if ((~a1 & 0xF000000000000007) != 0) {
}
  }

void closure #1 in ServerFallbackCapableRequestProcessor.sendExecuteNLOnServerCommand(executeNLOnServer:rcState:turn:)(uint64_t a1, void *a2)
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationBridge);
  id v4 = a2;
  id v5 = a2;
  oslog = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v13 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    if (a2)
    {
      swift_getErrorValue();
      uint64_t v9 = Error.localizedDescription.getter();
      unint64_t v11 = v10;
    }
    else
    {
      unint64_t v11 = 0xE400000000000000;
      uint64_t v9 = 1701736302;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, oslog, v6, "Sent ExecuteNLOnServer command to server, error:%s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v8, -1, -1);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }
  else
  {
  }
}

uint64_t protocol witness for Bridge.handle(_:executionContextInfo:reply:) in conformance ConversationBridgeSPI()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t ConversationBridgeSPI.handle(_:executionContextInfo:reply:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(v4 + 16);
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  id v10 = objc_msgSend(a1, sel_aceId);
  if (v10)
  {
    unint64_t v11 = v10;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  v12._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = v4;
  v13[3] = a1;
  v13[4] = a2;
  v13[5] = a3;
  v13[6] = a4;
  int64_t v14 = *(void (**)(unint64_t, unint64_t, void *, void *))(*(void *)v9 + 208);
  swift_retain();
  id v15 = a1;
  id v16 = a2;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed SAAceCommand?, @guaranteed Error?) -> ())?(a3);
  v14(0xD00000000000001ALL, 0x80000001BA064840, &async function pointer to partial apply for closure #1 in ConversationBridgeSPI.handle(_:executionContextInfo:reply:), v13);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t partial apply for closure #1 in ConversationBridgeSPI.handle(_:executionContextInfo:reply:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  void *v7 = v1;
  v7[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ConversationBridgeSPI.handle(_:executionContextInfo:reply:)(v2, v3, v4, v5, v6);
}

uint64_t closure #1 in ConversationBridgeSPI.handle(_:executionContextInfo:reply:)()
{
  (*(void (**)(void, void))(**(void **)(v0[5] + 24) + 272))(v0[6], v0[7]);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t closure #1 in ConversationBridgeSPI.handle(_:executionContextInfo:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[8] = a4;
  v5[9] = a5;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v6 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #1 in ConversationBridgeSPI.handle(_:executionContextInfo:reply:), v6, 0);
}

uint64_t ConversationMessageDispatchingBridgeBase.handle(_:executionContextInfo:reply:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  id v10 = objc_msgSend(a1, sel_groupIdentifier);
  if (!v10)
  {
    id v38 = a1;
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v79 = a4;
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      uint64_t v75 = swift_slowAlloc();
      uint64_t v85 = v75;
      *(_DWORD *)uint64_t v41 = 136315138;
      uint64_t v42 = a3;
      id v43 = objc_msgSend(v38, sel_debugDescription);
      uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v46 = v45;

      a3 = v42;
      uint64_t v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v46, &v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      a4 = v79;
      swift_bridgeObjectRelease();
      uint64_t v47 = "Commnad %s don't have group identifier, failed command";
LABEL_13:
      _os_log_impl(&dword_1B9C64000, v39, v40, v47, v41, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v75, -1, -1);
      MEMORY[0x1BA9E48C0](v41, -1, -1);
LABEL_15:

      return (*(uint64_t (**)(id, uint64_t, uint64_t, uint64_t))(*v5 + 304))(v38, a2, a3, a4);
    }
LABEL_14:

    goto LABEL_15;
  }
  unint64_t v11 = v10;
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  uint64_t v15 = (*(uint64_t (**)(void))(*v5 + 200))();
  uint64_t v85 = v12;
  uint64_t v86 = v14;
  uint64_t v16 = type metadata accessor for ConversationMessageDispatchingBridgeBase.CommandHandlerBase();
  uint64_t v17 = MEMORY[0x1E4FBB1A0];
  uint64_t v18 = MEMORY[0x1E4FBB1B0];
  uint64_t v19 = type metadata accessor for Dictionary();
  MEMORY[0x1BA9E2D40](&v87, &v85, v15, v17, v19, v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v20 = v87;
  if (!v87)
  {
    uint64_t v84 = a2;
    id v48 = a1;
    swift_retain_n();
    id v49 = v48;
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = swift_slowAlloc();
      uint64_t v74 = swift_slowAlloc();
      uint64_t v85 = v74;
      *(_DWORD *)uint64_t v52 = 136315394;
      uint64_t v76 = a3;
      uint64_t v80 = a4;
      uint64_t v53 = v5[2];
      unint64_t v54 = v5[3];
      swift_bridgeObjectRetain();
      uint64_t v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, &v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v52 + 12) = 2080;
      id v55 = objc_msgSend(v49, sel_debugDescription);
      uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v58 = v57;

      a3 = v76;
      uint64_t v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v58, &v85);
      a4 = v80;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      id v59 = "%s was not able to handle: %s, group is not register. Falling back to super.handle()";
LABEL_18:
      _os_log_impl(&dword_1B9C64000, v50, v51, v59, (uint8_t *)v52, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v74, -1, -1);
      MEMORY[0x1BA9E48C0](v52, -1, -1);
LABEL_20:

      return (*(uint64_t (**)(id, uint64_t, uint64_t, uint64_t))(*v5 + 304))(v49, v84, a3, a4);
    }
LABEL_19:

    swift_release_n();
    goto LABEL_20;
  }
  id v21 = objc_msgSend(a1, sel_encodedClassName);
  if (!v21)
  {
    swift_bridgeObjectRelease();
    id v38 = a1;
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v81 = a4;
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      uint64_t v75 = swift_slowAlloc();
      uint64_t v85 = v75;
      *(_DWORD *)uint64_t v41 = 136315138;
      uint64_t v60 = a3;
      id v61 = objc_msgSend(v38, sel_debugDescription);
      uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v64 = v63;

      a3 = v60;
      uint64_t v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v64, &v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      a4 = v81;
      swift_bridgeObjectRelease();
      uint64_t v47 = "Commnad %s don't have encodedClassName, failed command";
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  Swift::String v22 = v21;
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;

  uint64_t v85 = v23;
  uint64_t v86 = v25;
  MEMORY[0x1BA9E2D40](&v87, &v85, v20, MEMORY[0x1E4FBB1A0], v16, MEMORY[0x1E4FBB1B0]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v26 = v87;
  if (!v87)
  {
    uint64_t v84 = a2;
    id v66 = a1;
    swift_retain_n();
    id v49 = v66;
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = swift_slowAlloc();
      uint64_t v74 = swift_slowAlloc();
      uint64_t v85 = v74;
      *(_DWORD *)uint64_t v52 = 136315394;
      uint64_t v77 = a3;
      uint64_t v82 = a4;
      uint64_t v67 = v5[2];
      unint64_t v68 = v5[3];
      swift_bridgeObjectRetain();
      uint64_t v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, &v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v52 + 12) = 2080;
      id v69 = objc_msgSend(v49, sel_debugDescription);
      uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v72 = v71;

      a3 = v77;
      uint64_t v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v72, &v85);
      a4 = v82;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      id v59 = "%s was not able to handle: %s, command is not register. Falling back to super.handle()";
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  id v27 = a1;
  unint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v78 = a4;
    id v30 = (uint8_t *)swift_slowAlloc();
    uint64_t v83 = swift_slowAlloc();
    uint64_t v85 = v83;
    *(_DWORD *)id v30 = 136315138;
    unint64_t v73 = v28;
    uint64_t v31 = a2;
    uint64_t v32 = a3;
    id v33 = objc_msgSend(v27, sel_debugDescription);
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v36 = v35;

    a3 = v32;
    a2 = v31;
    uint64_t v37 = v34;
    a4 = v78;
    uint64_t v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v36, &v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v73, v29, "dispatch commnad %s to the handle method", v30, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v83, -1, -1);
    MEMORY[0x1BA9E48C0](v30, -1, -1);
  }
  else
  {
  }
  (*(void (**)(void *, id, uint64_t, uint64_t, uint64_t))(*(void *)v26 + 88))(v5, v27, a2, a3, a4);
  return swift_release();
}

uint64_t ConversationMessageDispatchingBridgeBase.commandsDispatcher.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for ConversationMessageDispatchingBridgeBase.CommandHandlerBase()
{
  return __swift_instantiateGenericMetadata();
}

void ConversationMessageDispatchingBridgeBase.CommandHandler.handle(_:_:executionContextInfo:reply:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v37 = a1;
  swift_unknownObjectRetain();
  if (swift_dynamicCast())
  {
    uint64_t v10 = swift_dynamicCastUnknownClass();
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = *(uint64_t (**)())(v5 + 16);
      id v13 = a2;
      uint64_t v14 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v12();
      v14(v11, a3, a4, a5);
      swift_unknownObjectRelease();

      swift_release();
    }
    else
    {
      id v23 = a2;
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = swift_slowAlloc();
        uint64_t v36 = swift_slowAlloc();
        uint64_t v37 = v36;
        *(_DWORD *)uint64_t v26 = 136315650;
        id v27 = objc_msgSend(v23, sel_aceId);
        if (v27)
        {
          unint64_t v28 = v27;
          uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v31 = v30;
        }
        else
        {
          unint64_t v31 = 0xE800000000000000;
          uint64_t v29 = 0x6449656361206F6ELL;
        }
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v26 + 12) = 2080;
        swift_getObjectType();
        uint64_t v32 = _typeName(_:qualified:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v26 + 22) = 2080;
        uint64_t v34 = _typeName(_:qualified:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v24, v25, "Input command %s of type %s is not of type %s", (uint8_t *)v26, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v36, -1, -1);
        MEMORY[0x1BA9E48C0](v26, -1, -1);
      }
      else
      {
      }
      swift_unknownObjectRelease();
    }
  }
  else
  {
    swift_unknownObjectRetain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      uint64_t v37 = v18;
      *(_DWORD *)uint64_t v17 = 136315394;
      swift_getObjectType();
      uint64_t v19 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 12) = 2080;
      uint64_t v21 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v15, v16, "Handler invoking object is of type %s and not of type %s", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v18, -1, -1);
      MEMORY[0x1BA9E48C0](v17, -1, -1);
    }
    else
    {
      swift_unknownObjectRelease_n();
    }
  }
}

void ConversationBridge.handleSiriKitPluginSignal(_:_:_:)(void *a1, uint64_t a2, void (*a3)(id, id), uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v58 = a4;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v55 = *(void *)(v8 - 8);
  uint64_t v56 = v8;
  MEMORY[0x1F4188790](v8);
  unint64_t v54 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
  id v12 = a1;
  uint64_t v57 = v11;
  id v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  BOOL v15 = os_log_type_enabled(v13, v14);
  id v59 = a3;
  if (v15)
  {
    uint64_t v16 = 0x3E6C696E3CLL;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v60 = v18;
    *(_DWORD *)uint64_t v17 = 136315394;
    id v19 = objc_msgSend(v12, sel_bundleIdentifier);
    if (v19)
    {
      unint64_t v20 = v19;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v23 = v22;
    }
    else
    {
      unint64_t v23 = 0xE500000000000000;
      uint64_t v21 = 0x3E6C696E3CLL;
    }
    uint64_t v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    id v24 = objc_msgSend(v12, sel_refId);
    if (v24)
    {
      os_log_type_t v25 = v24;
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v27 = v26;
    }
    else
    {
      unint64_t v27 = 0xE500000000000000;
    }
    uint64_t v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v27, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v13, v14, "SiriKitPluginSignal received with bundleIdentifier: %s and refId: %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v18, -1, -1);
    MEMORY[0x1BA9E48C0](v17, -1, -1);

    a3 = v59;
  }
  else
  {
  }
  objc_msgSend(v12, sel_copy, v54);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAIntentGroupSiriKitPluginSignal);
  if (swift_dynamicCast())
  {
    unint64_t v28 = (void *)v64;
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v5 + 752))(&v60);
    uint64_t v29 = v62;
    uint64_t v30 = v63;
    __swift_project_boxed_opaque_existential_1(&v60, v62);
    uint64_t v31 = (*(uint64_t (**)(void))(*(void *)v5 + 776))();
    (*(void (**)(void *, uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v30 + 72))(v28, v31, &protocol witness table for NonRequestExecutionBridgeDelegate, v29, v30);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v60);
    uint64_t v32 = v12;
    unint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v33, v34))
    {
      unint64_t v35 = (uint8_t *)swift_slowAlloc();
      uint64_t v36 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v35 = 138412290;
      uint64_t v60 = (uint64_t)v32;
      uint64_t v37 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v36 = v32;

      _os_log_impl(&dword_1B9C64000, v33, v34, "Successfully sent: %@", v35, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v36, -1, -1);
      MEMORY[0x1BA9E48C0](v35, -1, -1);
    }
    else
    {

      unint64_t v33 = v32;
    }

    id v43 = v59;
    if (v59)
    {
      id v44 = objc_allocWithZone(MEMORY[0x1E4F965B8]);
      swift_retain();
      id v45 = objc_msgSend(v44, sel_init);
      unint64_t v46 = v54;
      UUID.init()();
      uint64_t v47 = UUID.uuidString.getter();
      uint64_t v49 = v48;
      (*(void (**)(char *, uint64_t))(v55 + 8))(v46, v56);
      uint64_t v50 = (void *)MEMORY[0x1BA9E2DD0](v47, v49);
      swift_bridgeObjectRelease();
      objc_msgSend(v45, sel_setAceId_, v50);

      id v51 = v45;
      id v52 = [v32 aceId];
      objc_msgSend(v51, sel_setRefId_, v52);

      id v53 = v51;
      v43(v51, 0);

      _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe((uint64_t)v43);
    }
  }
  else
  {
    uint64_t v60 = 0;
    unint64_t v61 = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    uint64_t v60 = 0x6F6E20646C756F43;
    unint64_t v61 = 0xEF2079706F632074;
    id v38 = objc_msgSend(v12, sel_debugDescription);
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v41 = v40;

    v42._countAndFlagsBits = v39;
    v42._object = v41;
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    specialized static ConversationBridgeUtils.replyCommandFailed(forCommand:errorCode:reason:replyHandler:)(v12, -1, v60, v61, a3, v58);
    swift_bridgeObjectRelease();
  }
}

uint64_t ConversationBridge.nonRequestBridgePublisher.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = direct field offset for ConversationBridge.$__lazy_storage_$_nonRequestBridgePublisher;
  if (*(void *)((char *)v0 + direct field offset for ConversationBridge.$__lazy_storage_$_nonRequestBridgePublisher))
  {
    uint64_t v5 = *(void *)((char *)v0 + direct field offset for ConversationBridge.$__lazy_storage_$_nonRequestBridgePublisher);
  }
  else
  {
    uint64_t v6 = *(void *)((char *)v0 + direct field offset for ConversationBridge.executionOutputSubmitter);
    uint64_t v7 = *(void (**)(uint64_t))(*v0 + 944);
    uint64_t v8 = swift_retain();
    v7(v8);
    uint64_t v9 = v0[9];
    type metadata accessor for NonRequestExecutionBridgeDelegate(0);
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v6;
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v3, v5 + OBJC_IVAR____TtC14SiriKitRuntime33NonRequestExecutionBridgeDelegate_userId, (uint64_t *)&demangling cache variable for type metadata for UserID?);
    *(void *)(v5 + OBJC_IVAR____TtC14SiriKitRuntime33NonRequestExecutionBridgeDelegate_serviceHelper) = v9;
    *(void *)((char *)v0 + v4) = v5;
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v5;
}

uint64_t protocol witness for ConversationRuntimeClientProtocol.sendSiriKitPluginSignal(_:withBridgeDelegate:) in conformance ConversationRuntimeClient()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 208))();
}

uint64_t ConversationRuntimeClient.sendSiriKitPluginSignal(_:withBridgeDelegate:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = v3[3];
  uint64_t v8 = v3[4];
  uint64_t v9 = v3[5];
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = v7;
  v10[3] = v8;
  v10[4] = v9;
  v10[5] = a1;
  v10[6] = a2;
  v10[7] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  id v11 = a1;
  swift_unknownObjectRetain();
  uint64_t v12 = StaticString.description.getter();
  uint64_t v14 = v13;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v7;
  *(void *)(v15 + 24) = v8;
  *(void *)(v15 + 32) = v9;
  *(void *)(v15 + 40) = "bridge(didReceiveSiriKitPluginSignal:from:)";
  *(void *)(v15 + 48) = 43;
  *(unsigned char *)(v15 + 56) = 2;
  *(void *)(v15 + 64) = &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveSiriKitPluginSignal:from:);
  *(void *)(v15 + 72) = v10;
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v8 + 208);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v16(v12, v14, &closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:)partial apply, v15);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveSiriKitPluginSignal:from:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in ConversationServiceSerialFacade.bridge(didReceiveSiriKitPluginSignal:from:)(v2, v3, v4, v5);
}

uint64_t closure #1 in ConversationServiceSerialFacade.bridge(didReceiveSiriKitPluginSignal:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized ConversationService.bridge(didReceiveSiriKitPluginSignal:from:)
                                       + async function pointer to specialized ConversationService.bridge(didReceiveSiriKitPluginSignal:from:));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v6;
  *uint64_t v6 = v4;
  v6[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime25PluginLookupByIntentTopic_p_Tg5TQ0_;
  return v8(a4);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime25PluginLookupByIntentTopic_p_Tg5TQ0_()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t specialized ConversationService.bridge(didReceiveSiriKitPluginSignal:from:)()
{
  if (*(void *)(v0 + 80))
  {
    outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 56), v0 + 16);
    uint64_t v1 = *(void *)(v0 + 40);
    uint64_t v2 = *(void *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v1);
    id v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 + 24) + **(int **)(v2 + 24));
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 216) = v3;
    *uint64_t v3 = v0;
    v3[1] = specialized ConversationService.bridge(didReceiveSiriKitPluginSignal:from:);
    uint64_t v5 = *(void *)(v0 + 192);
    uint64_t v4 = *(void *)(v0 + 200);
    return v11(v5, v4, v1, v2);
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 56, &demangling cache variable for type metadata for ConversationHandler?);
    uint64_t v8 = *(void *)(v0 + 160);
    uint64_t v7 = *(void *)(v0 + 168);
    uint64_t v9 = *(void *)(v0 + 152);
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 176);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4188298](specialized ConversationService.bridge(didReceiveSiriKitPluginSignal:from:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 176);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4188298](specialized ConversationService.bridge(didReceiveSiriKitPluginSignal:from:), v1, 0);
}

{
  void *v0;
  id *v1;
  void *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  __objc2_class **v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  id v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t (*v38)(void);
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;

  uint64_t v41 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = (id *)(v0 + 17);
  uint64_t v2 = (void *)v0[17];
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v4 = v2;
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.info.getter();
  uint64_t v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = (void *)v0[17];
  uint64_t v9 = &off_1E61F1000;
  if (v7)
  {
    uint64_t v10 = swift_slowAlloc();
    id v11 = swift_slowAlloc();
    os_log_type_t v40 = v11;
    *(_DWORD *)uint64_t v10 = 136315394;
    uint64_t v12 = objc_msgSend(v8, sel_bundleIdentifier);
    uint64_t v39 = v11;
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v16 = v15;
    }
    else
    {
      uint64_t v16 = 0xE500000000000000;
      uint64_t v14 = 0x3E6C696E3CLL;
    }
    uint64_t v17 = *v1;
    v0[15] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v10 + 12) = 2080;
    uint64_t v9 = &off_1E61F1000;
    uint64_t v18 = objc_msgSend(v17, sel_refId);
    if (v18)
    {
      id v19 = v18;
      unint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v22 = v21;
    }
    else
    {
      unint64_t v22 = 0xE500000000000000;
      unint64_t v20 = 0x3E6C696E3CLL;
    }
    unint64_t v23 = *v1;
    v0[16] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, v5, v6, "SiriKitPluginSignal received with bundleIdentifier=%s and refId=%s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v39, -1, -1);
    MEMORY[0x1BA9E48C0](v10, -1, -1);
  }
  else
  {
  }
  id v24 = objc_msgSend(*v1, sel_bundleIdentifier, v39);
  if (v24)
  {
    os_log_type_t v25 = v24;
    unint64_t v26 = (void *)v0[17];
    unint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v29 = v28;

    v0[23] = v29;
    uint64_t v30 = [v26 (SEL)v9[172]];
    if (v30)
    {
      uint64_t v31 = v30;
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      os_log_type_t v34 = v33;

      v0[24] = v32;
      v0[25] = v34;
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      unint64_t v35 = (id)static Log.executor;
      OSSignpostID.init(log:)();
      static os_signpost_type_t.begin.getter();
      os_signpost(_:dso:log:name:signpostID:)();
      uint64_t v36 = (void *)swift_task_alloc();
      v0[26] = v36;
      *uint64_t v36 = v0;
      v36[1] = specialized ConversationService.bridge(didReceiveSiriKitPluginSignal:from:);
      return ConversationHandlerLocator.handler(id:)((uint64_t)(v0 + 7), v27, v29);
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
  }
  swift_task_dealloc();
  id v38 = (uint64_t (*)(void))v0[1];
  return v38();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
  uint64_t v2 = v0[20];
  uint64_t v1 = v0[21];
  uint64_t v3 = v0[19];
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t specialized ConversationService.bridge(didReceiveSiriKitPluginSignal:from:)(uint64_t a1)
{
  v2[17] = a1;
  v2[18] = v1;
  uint64_t v3 = type metadata accessor for OSSignpostID();
  v2[19] = v3;
  v2[20] = *(void *)(v3 - 8);
  v2[21] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v4 = static MessageBusActor.shared;
  v2[22] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](specialized ConversationService.bridge(didReceiveSiriKitPluginSignal:from:), v4, 0);
}

uint64_t protocol witness for ConversationHandler.warmup(refId:) in conformance RemoteFlowPluginBundleConversationHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return RemoteFlowPluginBundleConversationHandler.warmup(refId:)(a1, a2);
}

uint64_t RemoteFlowPluginBundleConversationHandler.warmup(refId:)()
{
  uint64_t v14 = v0;
  uint64_t v1 = v0[12];
  if (v1)
  {
    return MEMORY[0x1F4188298](RemoteFlowPluginBundleConversationHandler.warmup(refId:), v1, 0);
  }
  else
  {
    swift_release();
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
    swift_retain();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    BOOL v5 = os_log_type_enabled(v3, v4);
    uint64_t v6 = v0[8];
    if (v5)
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      uint64_t v13 = v8;
      *(_DWORD *)uint64_t v7 = 136315138;
      uint64_t v10 = *(void *)(v6 + 16);
      unint64_t v9 = *(void *)(v6 + 24);
      swift_bridgeObjectRetain();
      v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v9, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      _os_log_impl(&dword_1B9C64000, v3, v4, "Error warming up %s: Could not connect to remote conversation", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v8, -1, -1);
      MEMORY[0x1BA9E48C0](v7, -1, -1);
    }
    else
    {
      swift_release();
    }

    swift_task_dealloc();
    id v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

{
  uint64_t v0;

  return MEMORY[0x1F4188298](RemoteFlowPluginBundleConversationHandler.warmup(refId:), *(void *)(v0 + 80), 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v3;
  *uint64_t v3 = v0;
  v3[1] = RemoteFlowPluginBundleConversationHandler.warmup(refId:);
  os_log_type_t v4 = *(void *)(v0 + 72);
  return RemoteFlowPluginBundleConversationHandler.getRemoteConversationClient(rcId:hypothesisId:)(0, 0, v4);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t (*v12)(void *, void *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[12];
  uint64_t v3 = v0[6];
  uint64_t v2 = v0[7];
  os_log_type_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  BOOL v5 = v1 + 16;
  uint64_t v6 = v1[19];
  uint64_t v7 = v1[20];
  __swift_project_boxed_opaque_existential_1(v5, v6);
  uint64_t v8 = swift_allocObject();
  v0[13] = v8;
  *(void *)(v8 + 16) = v3;
  *(void *)(v8 + 24) = v2;
  uint64_t v12 = (uint64_t (*)(void *, void *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 16)
                                                                                     + **(int **)(v7 + 16));
  swift_bridgeObjectRetain();
  unint64_t v9 = (void *)swift_task_alloc();
  v0[14] = v9;
  NSObject *v9 = v0;
  v9[1] = RemoteFlowPluginBundleConversationHandler.warmup(refId:);
  uint64_t v10 = MEMORY[0x1E4FBC848] + 8;
  return v12(v0 + 15, &async function pointer to partial apply for closure #1 in RemoteConversationClient.warmup(refId:), v8, v10, v6, v7);
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {

    swift_release();
    uint64_t v3 = *(void *)(v2 + 96);
    os_log_type_t v4 = RemoteFlowPluginBundleConversationHandler.warmup(refId:);
  }
  else
  {
    swift_release();
    uint64_t v3 = *(void *)(v2 + 96);
    os_log_type_t v4 = RemoteFlowPluginBundleConversationHandler.warmup(refId:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  void *v13;
  uint64_t v14;

  uint64_t v13 = v0;
  swift_release();
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  swift_retain();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.error.getter();
  os_log_type_t v4 = os_log_type_enabled(v2, v3);
  BOOL v5 = v0[8];
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v12 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    unint64_t v9 = *(void *)(v5 + 16);
    uint64_t v8 = *(void *)(v5 + 24);
    swift_bridgeObjectRetain();
    v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v8, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl(&dword_1B9C64000, v2, v3, "Error warming up %s: Could not connect to remote conversation", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v7, -1, -1);
    MEMORY[0x1BA9E48C0](v6, -1, -1);
  }
  else
  {
    swift_release();
  }

  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t RemoteFlowPluginBundleConversationHandler.warmup(refId:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(*v2 + 96) = a1;
  swift_task_dealloc();
  uint64_t v4 = *(void *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 72);
  if (v1)
  {

    outlined destroy of UUID?(v5);
    uint64_t v6 = RemoteFlowPluginBundleConversationHandler.warmup(refId:);
  }
  else
  {
    outlined destroy of UUID?(v5);
    uint64_t v6 = RemoteFlowPluginBundleConversationHandler.warmup(refId:);
  }
  return MEMORY[0x1F4188298](v6, v4, 0);
}

uint64_t RemoteFlowPluginBundleConversationHandler.warmup(refId:)(uint64_t a1, uint64_t a2)
{
  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v3[9] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v4 = static MessageBusActor.shared;
  v3[10] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](RemoteFlowPluginBundleConversationHandler.warmup(refId:), v4, 0);
}

uint64_t RemoteConversationClient.warmup(refId:)()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = v0[3];
  uint64_t v2 = (void *)v0[4];
  uint64_t v3 = v0[2];
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v5 = v2 + 16;
  uint64_t v6 = v2[19];
  uint64_t v7 = v2[20];
  __swift_project_boxed_opaque_existential_1(v5, v6);
  uint64_t v8 = swift_allocObject();
  v0[5] = v8;
  *(void *)(v8 + 16) = v3;
  *(void *)(v8 + 24) = v1;
  uint64_t v12 = (uint64_t (*)(void *, void *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 16)
                                                                                     + **(int **)(v7 + 16));
  swift_bridgeObjectRetain();
  unint64_t v9 = (void *)swift_task_alloc();
  v0[6] = v9;
  void *v9 = v0;
  v9[1] = specialized FlowExtensionConversationHandler.warmup(refId:);
  uint64_t v10 = MEMORY[0x1E4FBC848] + 8;
  return v12(v0 + 7, &async function pointer to partial apply for closure #1 in RemoteConversationClient.warmup(refId:), v8, v10, v6, v7);
}

uint64_t AceServiceInvokerImpl.prepareForAudioHandoffFailed()()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(void *)(v1 + 16) = v0;
  return MEMORY[0x1F4188298](AceServiceInvokerImpl.prepareForAudioHandoffFailed(), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  void *v1 = v0;
  v1[1] = AceServiceInvokerImpl.prepareForAudioHandoffFailed();
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = MEMORY[0x1E4FBC848] + 8;
  return MEMORY[0x1F41880D8](v1, 0, 0, 0xD00000000000001ELL, 0x80000001BA061E00, partial apply for closure #1 in AceServiceInvokerImpl.prepareForAudioHandoffFailed(), v2, v3);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x1F4188298](AceServiceInvokerImpl.prepareForAudioHandoffFailed(), 0, 0);
}

uint64_t RemoteConversationClient.warmup(refId:)(uint64_t a1, uint64_t a2)
{
  void v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return MEMORY[0x1F4188298](RemoteConversationClient.warmup(refId:), v2, 0);
}

uint64_t specialized FlowExtensionConversationHandler.warmup(refId:)()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 32);
  if (v0)
  {

    swift_release();
    uint64_t v4 = closure #1 in closure #1 in ConversationService.bridge(didReceiveClearContext:from:);
  }
  else
  {
    swift_release();
    uint64_t v4 = AceServiceInvokerImpl.prepareForAudioHandoffFailed();
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t (*v12)(void *, void *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = v0[3];
  uint64_t v2 = (void *)v0[4];
  uint64_t v3 = v0[2];
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v5 = v2 + 16;
  uint64_t v6 = v2[19];
  uint64_t v7 = v2[20];
  __swift_project_boxed_opaque_existential_1(v5, v6);
  uint64_t v8 = swift_allocObject();
  v0[5] = v8;
  *(void *)(v8 + 16) = v3;
  *(void *)(v8 + 24) = v1;
  uint64_t v12 = (uint64_t (*)(void *, void *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 16)
                                                                                     + **(int **)(v7 + 16));
  swift_bridgeObjectRetain();
  unint64_t v9 = (void *)swift_task_alloc();
  v0[6] = v9;
  void *v9 = v0;
  v9[1] = specialized FlowExtensionConversationHandler.warmup(refId:);
  uint64_t v10 = MEMORY[0x1E4FBC848] + 8;
  return v12(v0 + 7, &async function pointer to partial apply for closure #1 in RemoteConversationClient.warmup(refId:), v8, v10, v6, v7);
}

uint64_t partial apply for closure #1 in RemoteConversationClient.warmup(refId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v10;
  *uint64_t v10 = v4;
  v10[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in RemoteConversationClient.warmup(refId:)(a1, a2, a3, v9, v8);
}

uint64_t closure #1 in RemoteConversationClient.warmup(refId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationClient.warmup(refId:), 0, 0);
}

uint64_t ConversationBridge.handleFlowOutputCandidate(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))(*(void *)v7 + 488);
  uint64_t v13 = type metadata accessor for OS_dispatch_queue(0, a5);

  return v15(a1, a2, a3, a4, a7, 0, v13);
}

uint64_t ConversationBridge.handleFlowOutputCandidate(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ConversationBridge.handleFlowOutputCandidate(_:_:_:)(a1, a2, a3, a4, &lazy cache variable for type metadata for SARDFlowOutputCandidate, 0x1E4F96918, (uint64_t)_s14SiriKitRuntime37ServerFallbackCapableRequestProcessorCSo23SARDFlowOutputCandidateCSo22AFCommandExecutionInfoCSo13SABaseCommandCSgs5Error_pSgIeghgg_SgIegggg_Iggo_ACxAgMRlzCRi_zRi0_zlyAEIsegggg_Ieggo_TR04_s14ab40Runtime18ConversationBridgeC25handleFlowj32CandidateyySo08SARDFlowhI0C_So22lmn6CySo13op6CSg_s5q47_pSgtYbcSgtFyAF_AhNtAA15MessageBusActorCYccAA37defgH5Ccfu_Tf3npf_n);
}

uint64_t ConversationRequestAwareBridgeBase.dispatchCommandToProcessor<A>(_:executionContextInfo:reply:handler:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t result = (*(uint64_t (**)(void))(*v4 + 480))();
  if ((result & 1) == 0)
  {
    swift_retain_n();
    id v11 = a1;
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      os_log_type_t type = v13;
      uint64_t v14 = swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      uint64_t v24 = v22;
      *(_DWORD *)uint64_t v14 = 136315394;
      uint64_t v16 = v5[2];
      unint64_t v15 = v5[3];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v15, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2080;
      id v17 = objc_msgSend(v11, sel_debugDescription);
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      log = v12;
      unint64_t v20 = v19;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, log, type, "%s bridge was not able to handle: %s.", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v22, -1, -1);
      MEMORY[0x1BA9E48C0](v14, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    return (*(uint64_t (**)(id, uint64_t, uint64_t, uint64_t))(*v5 + 304))(v11, a2, a3, a4);
  }
  return result;
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in ConversationBridge.handleFlowOutputCandidate(_:_:_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1592))();
}

void ServerFallbackCapableRequestProcessor.handleAceFlowOutputCandidate(_:executionContextInfo:reply:)(void *a1, void *a2, void (*a3)(id, id), uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v159 = a4;
  v160 = a3;
  id v151 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v7 - 8);
  v156 = (char *)v142 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  v149 = (char *)v142 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  v155 = (char *)v142 - v13;
  uint64_t v14 = type metadata accessor for RequestType();
  uint64_t v153 = *(void *)(v14 - 8);
  uint64_t v154 = v14;
  MEMORY[0x1F4188790](v14);
  v152 = (char *)v142 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = __swift_project_value_buffer(v16, (uint64_t)static Logger.conversationBridge);
  id v18 = a1;
  unint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  BOOL v21 = os_log_type_enabled(v19, v20);
  uint64_t v157 = v10;
  uint64_t v158 = v9;
  if (v21)
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    unint64_t v23 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 138412290;
    v165[0] = (uint64_t)v18;
    id v24 = v18;
    uint64_t v150 = v17;
    os_log_type_t v25 = v5;
    id v26 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v23 = v18;

    uint64_t v5 = v25;
    uint64_t v17 = v150;
    _os_log_impl(&dword_1B9C64000, v19, v20, "Received %@", v22, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v23, -1, -1);
    MEMORY[0x1BA9E48C0](v22, -1, -1);
  }
  else
  {
  }
  if (*((unsigned char *)v5 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isMUXEnabled) == 1)
  {
    MEMORY[0x1F4188790](v27);
    v142[-2] = v5;
    v142[-1] = v18;
    id v28 = objc_allocWithZone((Class)type metadata accessor for MUXFlowOutputCandidateMessage());
    uint64_t v29 = MUXFlowOutputCandidateMessage.init(build:)();
    if (v29)
    {
      uint64_t v30 = v29;
      __swift_project_boxed_opaque_existential_1(v5 + 3, v5[6]);
      dispatch thunk of MessagePublishing.postMessage(_:)();
    }
    else
    {
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v32 = 0;
        _os_log_impl(&dword_1B9C64000, v30, v31, "Could not create MUXFlowOutputCandidateMessage.", v32, 2u);
        MEMORY[0x1BA9E48C0](v32, -1, -1);
      }
    }
  }
  id v33 = objc_msgSend(v18, sel_resultCandidateId);
  if (v33)
  {
    os_log_type_t v34 = v33;
    uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v37 = v36;

    uint64_t v38 = (*(uint64_t (**)(void))(*v5 + 592))();
    if (v38)
    {
      uint64_t v39 = v38;
      uint64_t v148 = v35;
      v145 = v5;
      swift_retain_n();
      os_log_type_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.debug.getter();
      BOOL v42 = os_log_type_enabled(v40, v41);
      v147 = v18;
      uint64_t v146 = v37;
      if (v42)
      {
        id v43 = (uint8_t *)swift_slowAlloc();
        uint64_t v44 = swift_slowAlloc();
        uint64_t v144 = v44;
        uint64_t v143 = v43;
        *(_DWORD *)id v43 = 136315138;
        v165[0] = v44;
        v142[1] = v43 + 4;
        uint64_t v45 = v39 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
        swift_beginAccess();
        uint64_t v46 = v17;
        uint64_t v47 = v152;
        uint64_t v48 = v153;
        uint64_t v49 = v45;
        uint64_t v50 = v154;
        (*(void (**)(char *, uint64_t, uint64_t))(v153 + 16))(v152, v49, v154);
        uint64_t v51 = RequestType.rawValue.getter();
        unint64_t v53 = v52;
        (*(void (**)(char *, uint64_t))(v48 + 8))(v47, v50);
        uint64_t v17 = v46;
        v163 = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v53, v165);
        uint64_t v37 = v146;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        unint64_t v54 = v143;
        _os_log_impl(&dword_1B9C64000, v40, v41, "RequestType = %s", v143, 0xCu);
        uint64_t v55 = v144;
        swift_arrayDestroy();
        id v18 = v147;
        MEMORY[0x1BA9E48C0](v55, -1, -1);
        MEMORY[0x1BA9E48C0](v54, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      uint64_t v63 = v157;
      uint64_t v64 = v158;
      uint64_t v154 = v39;
      id v65 = (unint64_t *)(v39
                               + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
      swift_beginAccess();
      unint64_t v67 = *v65;
      id v66 = (void *)v65[1];
      outlined copy of ConversationRequestProcessorTurnState.SpeechState(v67, v66);
      uint64_t v68 = v148;
      uint64_t v69 = ConversationRequestProcessorTurnState.SpeechState.getRcState(rcId:)(v148, (uint64_t)v37, v67, v66);
      outlined consume of ConversationRequestProcessorTurnState.SpeechState(v67, v66);
      if (v69)
      {
        uint64_t v70 = (uint64_t)v156;
        (*(void (**)(void))(*(void *)v69 + 808))();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v70, 1, v64) == 1)
        {
          outlined destroy of ReferenceResolutionClientProtocol?(v70, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          unint64_t v71 = Logger.logObject.getter();
          os_log_type_t v72 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v71, v72))
          {
            unint64_t v73 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)unint64_t v73 = 0;
            _os_log_impl(&dword_1B9C64000, v71, v72, "Skipping logging of ServerFallback response in SELF as contextId is missing", v73, 2u);
            MEMORY[0x1BA9E48C0](v73, -1, -1);
          }

LABEL_37:
          os_log_type_t v97 = (uint64_t (**)(void))(*(void *)v69 + 400);
          v98 = *v97;
          char v99 = (*v97)();
          if (ResultCandidateProcessingStatus.rawValue.getter(v99) == 0x64656C65636E6163
            && v100 == 0xE800000000000000)
          {
            swift_bridgeObjectRelease();
            unint64_t v101 = (unint64_t)v146;
          }
          else
          {
            char v102 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            unint64_t v101 = (unint64_t)v146;
            if ((v102 & 1) == 0)
            {
              uint64_t v108 = v64;
              swift_bridgeObjectRelease();
              swift_retain_n();
              uint64_t v109 = Logger.logObject.getter();
              os_log_type_t v110 = static os_log_type_t.debug.getter();
              BOOL v111 = os_log_type_enabled(v109, v110);
              uint64_t v150 = v17;
              if (v111)
              {
                v112 = (uint8_t *)swift_slowAlloc();
                v156 = (char *)swift_slowAlloc();
                v163 = v156;
                *(_DWORD *)v112 = 136315138;
                v155 = (char *)(v112 + 4);
                uint64_t v113 = *(uint64_t (**)(uint64_t))(*(void *)v69 + 800);
                uint64_t v114 = swift_retain();
                uint64_t v115 = v113(v114);
                unint64_t v117 = v116;
                swift_release();
                uint64_t v162 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v115, v117, (uint64_t *)&v163);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release_n();
                uint64_t v108 = v158;
                swift_bridgeObjectRelease();
                _os_log_impl(&dword_1B9C64000, v109, v110, "Received FlowOutputCandidate when RC state: %s", v112, 0xCu);
                v118 = v156;
                swift_arrayDestroy();
                MEMORY[0x1BA9E48C0](v118, -1, -1);
                MEMORY[0x1BA9E48C0](v112, -1, -1);
              }
              else
              {

                uint64_t v119 = swift_release_n();
              }
              v120 = v160;
              char v121 = ((uint64_t (*)(uint64_t))v98)(v119);
              if (ResultCandidateProcessingStatus.rawValue.getter(v121) == 0xD000000000000018
                && v122 == 0x80000001BA0611A0)
              {
                swift_bridgeObjectRelease();
                os_log_type_t v123 = v147;
              }
              else
              {
                char v124 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                os_log_type_t v123 = v147;
                if ((v124 & 1) == 0)
                {
                  uint64_t v139 = Logger.logObject.getter();
                  os_log_type_t v140 = static os_log_type_t.error.getter();
                  if (os_log_type_enabled(v139, v140))
                  {
                    v141 = (uint8_t *)swift_slowAlloc();
                    *(_WORD *)v141 = 0;
                    _os_log_impl(&dword_1B9C64000, v139, v140, "FlowOutputCandidate received for an RC with unexpected state", v141, 2u);
                    MEMORY[0x1BA9E48C0](v141, -1, -1);
                  }

                  specialized static ConversationBridgeUtils.replyCommandFailed(forCommand:errorCode:reason:replyHandler:)(v123, -1, 0xD000000000000013, 0x80000001BA06D5E0, v120, v159);
                  goto LABEL_45;
                }
              }
              id v125 = objc_msgSend(v123, sel_payload);
              if (v125)
              {
                uint64_t v126 = v125;
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
                uint64_t v127 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
              }
              else
              {
                uint64_t v127 = 0;
              }
              (*(void (**)(uint64_t))(*(void *)v69 + 432))(v127);
              (*(void (**)(id))(*(void *)v69 + 456))(objc_msgSend(v123, sel_serverContextUpdateCandidate));
              (*(void (**)(id))(*(void *)v69 + 624))(objc_msgSend(v123, sel_shouldNotMitigateAsFalseTrigger));
              uint64_t v128 = (*(uint64_t (**)(uint64_t))(*(void *)v69 + 408))(12);
              if ((*(uint64_t (**)(uint64_t))(*(void *)v69 + 472))(v128)) {
                (*(void (**)(uint64_t, void))(*v145 + 1128))(v69, 0);
              }
              if (v120)
              {
                id v129 = objc_allocWithZone(MEMORY[0x1E4F965B8]);
                swift_retain();
                id v130 = objc_msgSend(v129, sel_init);
                v131 = v149;
                UUID.init()();
                uint64_t v132 = UUID.uuidString.getter();
                uint64_t v134 = v133;
                (*(void (**)(char *, uint64_t))(v157 + 8))(v131, v108);
                v135 = (void *)MEMORY[0x1BA9E2DD0](v132, v134);
                swift_bridgeObjectRelease();
                objc_msgSend(v130, sel_setAceId_, v135);

                id v136 = v130;
                id v137 = objc_msgSend(v123, sel_aceId);
                objc_msgSend(v136, sel_setRefId_, v137);

                id v138 = v136;
                v120(v136, 0);

                _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe((uint64_t)v120);
              }
LABEL_45:
              swift_release();
              swift_release();
              return;
            }
          }
          swift_bridgeObjectRetain();
          char v103 = Logger.logObject.getter();
          unint64_t v104 = v101;
          os_log_type_t v105 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v103, v105))
          {
            v106 = (uint8_t *)swift_slowAlloc();
            uint64_t v107 = swift_slowAlloc();
            v163 = (char *)v107;
            *(_DWORD *)v106 = 136315138;
            swift_bridgeObjectRetain();
            uint64_t v162 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v148, v104, (uint64_t *)&v163);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1B9C64000, v103, v105, "RC ID:%s has already been canceled. Not handling FlowOutputCandidate any further.", v106, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1BA9E48C0](v107, -1, -1);
            MEMORY[0x1BA9E48C0](v106, -1, -1);
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          specialized static ConversationBridgeUtils.replyCommandIgnored(forCommand:errorCode:reason:replyHandler:)(v147, -1, 0xD000000000000014, 0x80000001BA06D600, v160);
          goto LABEL_45;
        }
        (*(void (**)(char *, uint64_t, uint64_t))(v63 + 32))(v155, v70, v64);
        uint64_t v83 = *(void *)((char *)v145
                        + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_instrumentationUtil);
        id v84 = objc_msgSend(v151, sel_requestID);
        if (v84)
        {
          uint64_t v85 = v84;
          uint64_t v86 = v17;
          uint64_t v87 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v89 = v88;

          id v90 = objc_msgSend(v18, sel_resultCandidateId);
          if (v90)
          {
            v91 = v90;
            uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v94 = v93;
          }
          else
          {
            uint64_t v92 = 0;
            uint64_t v94 = 0;
          }
          uint64_t v95 = v87;
          v96 = v155;
          (*(void (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t))(*(void *)v83 + 208))(v95, v89, v155, v92, v94);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v64 = v158;
          (*(void (**)(char *, uint64_t))(v63 + 8))(v96, v158);
          uint64_t v17 = v86;
          goto LABEL_37;
        }
        __break(1u);
      }
      else
      {
        v163 = 0;
        unint64_t v164 = 0xE000000000000000;
        _StringGuts.grow(_:)(97);
        v74._countAndFlagsBits = 0xD000000000000043;
        v74._object = (void *)0x80000001BA06D570;
        String.append(_:)(v74);
        v75._countAndFlagsBits = v68;
        v75._object = v37;
        String.append(_:)(v75);
        swift_bridgeObjectRelease();
        v76._countAndFlagsBits = 0xD00000000000001CLL;
        v76._object = (void *)0x80000001BA06D5C0;
        String.append(_:)(v76);
        uint64_t v78 = (uint64_t)v163;
        unint64_t v77 = v164;
        swift_bridgeObjectRetain_n();
        uint64_t v79 = Logger.logObject.getter();
        os_log_type_t v80 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v79, v80))
        {
          uint64_t v81 = (uint8_t *)swift_slowAlloc();
          uint64_t v82 = swift_slowAlloc();
          v163 = (char *)v82;
          *(_DWORD *)uint64_t v81 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v162 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v77, (uint64_t *)&v163);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B9C64000, v79, v80, "%s", v81, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v82, -1, -1);
          MEMORY[0x1BA9E48C0](v81, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        specialized static ConversationBridgeUtils.replyCommandFailed(forCommand:errorCode:reason:replyHandler:)(v18, -1, v78, v77, v160, v159);
        swift_release();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v60 = Logger.logObject.getter();
      os_log_type_t v61 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v60, v61))
      {
        uint64_t v62 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v62 = 0;
        _os_log_impl(&dword_1B9C64000, v60, v61, "Received FlowOutputCandidate while not in a turn. Ignoring.", v62, 2u);
        MEMORY[0x1BA9E48C0](v62, -1, -1);
      }
    }
  }
  else
  {
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = (uint8_t *)swift_slowAlloc();
      uint64_t v59 = swift_slowAlloc();
      v165[0] = v59;
      *(_DWORD *)uint64_t v58 = 136315138;
      uint64_t v161 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ELL, 0x80000001BA06D540, v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v56, v57, "%s", v58, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v59, -1, -1);
      MEMORY[0x1BA9E48C0](v58, -1, -1);
    }

    specialized static ConversationBridgeUtils.replyCommandFailed(forCommand:errorCode:reason:replyHandler:)(v18, -1, 0xD00000000000002ELL, 0x80000001BA06D540, v160, v159);
  }
}

uint64_t ResultCandidateState.serverFallbackContextId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_loggingMetadata;
  swift_beginAccess();
  return outlined init with copy of ReferenceResolutionClientProtocol?(v3, a1, (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

void ConversationBridgeInstrumentationUtil.logServerFallbackResponseReceived(requestId:contextId:rcId:)(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v63 = a3;
  uint64_t v61 = type metadata accessor for InsightRequestSummaryLogger();
  MEMORY[0x1F4188790](v61);
  uint64_t v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v62 = *(void **)(v14 - 8);
  uint64_t v15 = v62[8];
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v60 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  id v18 = (char *)&v53 - v17;
  unint64_t v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0E88]), sel_init);
  if (!v19)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.conversationBridge);
    uint64_t v64 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v64, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl(&dword_1B9C64000, v64, v34, "Failed to create ORCHSchemaORCHServerFallbackResponseReceived event", v35, 2u);
      MEMORY[0x1BA9E48C0](v35, -1, -1);
    }
    goto LABEL_20;
  }
  uint64_t v64 = v19;
  [v19 setExists:1];
  uint64_t v58 = a1;
  id v20 = specialized InstrumentationUtil.buildWrapperEventMessage(_:_:logResourceUtilization:)(a1, a2, a4, a5, 1);
  if (!v20)
  {
LABEL_20:
    uint64_t v39 = v64;
    goto LABEL_21;
  }
  BOOL v21 = v20;
  uint64_t v57 = v14;
  id v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0E70]), sel_init);
  if (v22)
  {
    unint64_t v23 = v22;
    id v24 = objc_allocWithZone(MEMORY[0x1E4FA1370]);
    uint64_t v55 = a2;
    uint64_t v56 = a4;
    unint64_t v54 = v10;
    os_log_type_t v25 = v21;
    id v26 = v24;
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    id v28 = objc_msgSend(v26, sel_initWithNSUUID_, isa);

    objc_msgSend(v23, sel_setContextId_, v28);
    uint64_t v29 = v25;
    uint64_t v30 = v56;
    os_log_type_t v31 = v62;
    if (a5)
    {
      UUID.init(uuidString:)();
      uint64_t v32 = v57;
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v31[6])(v13, 1, v57) == 1)
      {
        outlined destroy of UUID?((uint64_t)v13);
      }
      else
      {
        ((void (*)(char *, char *, uint64_t))v31[4])(v18, v13, v32);
        id v40 = objc_allocWithZone(MEMORY[0x1E4FA1370]);
        Class v41 = UUID._bridgeToObjectiveC()().super.isa;
        id v42 = objc_msgSend(v40, sel_initWithNSUUID_, v41);

        os_log_type_t v31 = v62;
        objc_msgSend(v23, sel_setTrpId_, v42);

        ((void (*)(char *, uint64_t))v31[1])(v18, v32);
      }
    }
    uint64_t v43 = v30;
    objc_msgSend(v23, sel_setEnded_, v64);
    objc_msgSend(v29, sel_setServerFallbackContext_, v23);
    objc_msgSend(*(id *)(v59 + 16), sel_emitMessage_, v29);
    uint64_t v44 = v23;
    uint64_t v62 = v29;
    if (one-time initialization token for insightRequestSummaryLogger != -1) {
      swift_once();
    }
    uint64_t v45 = __swift_project_value_buffer(v61, (uint64_t)static Logger.insightRequestSummaryLogger);
    uint64_t v46 = (uint64_t)v54;
    outlined init with copy of InsightRequestSummaryLogger(v45, (uint64_t)v54);
    uint64_t v47 = v60;
    uint64_t v48 = v57;
    ((void (*)(char *, NSObject *, uint64_t))v31[2])(v60, v63, v57);
    uint64_t v49 = v31;
    unint64_t v50 = (*((unsigned __int8 *)v31 + 80) + 48) & ~(unint64_t)*((unsigned __int8 *)v31 + 80);
    uint64_t v51 = (char *)swift_allocObject();
    uint64_t v52 = v55;
    *((void *)v51 + 2) = v58;
    *((void *)v51 + 3) = v52;
    *((void *)v51 + 4) = v43;
    *((void *)v51 + 5) = a5;
    ((void (*)(char *, char *, uint64_t))v49[4])(&v51[v50], v47, v48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    InsightRequestSummaryLogger.emitDebug(_:)(partial apply for implicit closure #1 in ConversationBridgeInstrumentationUtil.logServerFallbackResponseReceived(requestId:contextId:rcId:), (uint64_t)v51);

    swift_release();
    outlined destroy of InsightRequestSummaryLogger(v46);
    return;
  }
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v36 = type metadata accessor for Logger();
  __swift_project_value_buffer(v36, (uint64_t)static Logger.conversationBridge);
  uint64_t v63 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v63, v37))
  {

    goto LABEL_20;
  }
  uint64_t v38 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v38 = 0;
  _os_log_impl(&dword_1B9C64000, v63, v37, "Failed to create ORCHSchemaORCHServerFallbackContext event", v38, 2u);
  MEMORY[0x1BA9E48C0](v38, -1, -1);

  uint64_t v39 = v63;
LABEL_21:
}

uint64_t partial apply for implicit closure #1 in ConversationBridgeInstrumentationUtil.logServerFallbackResponseReceived(requestId:contextId:rcId:)()
{
  type metadata accessor for UUID();
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  unint64_t v4 = v0[5];

  return implicit closure #1 in ConversationBridgeInstrumentationUtil.logServerFallbackResponseReceived(requestId:contextId:rcId:)(v1, v2, v3, v4);
}

uint64_t implicit closure #1 in ConversationBridgeInstrumentationUtil.logServerFallbackResponseReceived(requestId:contextId:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(InsightRequestSummaryKey, String)>);
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = v8;
  *(_OWORD *)(v8 + 16) = xmmword_1BA052AC0;
  *(void *)(v8 + 32) = 0x614E656764697262;
  *(void *)(v8 + 40) = 0xEA0000000000656DLL;
  *(void *)(v8 + 48) = 0xD000000000000012;
  *(void *)(v8 + 56) = 0x80000001BA064FF0;
  *(void *)(v8 + 64) = 0xD000000000000012;
  *(void *)(v8 + 72) = 0x80000001BA065010;
  *(void *)(v8 + 80) = 0xD000000000000021;
  *(void *)(v8 + 88) = 0x80000001BA061370;
  *(void *)(v8 + 96) = 0x4974736575716572;
  *(void *)(v8 + 104) = 0xE900000000000064;
  *(void *)(v8 + 112) = a1;
  *(void *)(v8 + 120) = a2;
  *(void *)(v8 + 128) = 0xD000000000000011;
  *(void *)(v8 + 136) = 0x80000001BA0607B0;
  if (a4) {
    uint64_t v10 = a3;
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = 0xE000000000000000;
  if (a4) {
    unint64_t v11 = a4;
  }
  *(void *)(v8 + 144) = v10;
  *(void *)(v8 + 152) = v11;
  *(void *)(v8 + 160) = 0xD000000000000017;
  *(void *)(v8 + 168) = 0x80000001BA065030;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(void *)(v9 + 176) = UUID.uuidString.getter();
  *(void *)(v9 + 184) = v12;
  return v9;
}

uint64_t ResultCandidateState.flowOutputList.setter(uint64_t a1)
{
  return ResultCandidateState.nlUserParses.setter(a1, &OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_flowOutputList, MEMORY[0x1E4FBC898]);
}

void ResultCandidateState.serverContextUpdateCandidate.setter(void *a1)
{
  uint64_t v3 = (void **)(v1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_serverContextUpdateCandidate);
  swift_beginAccess();
  unint64_t v4 = *v3;
  *uint64_t v3 = a1;
}

uint64_t ResultCandidateState.overrideFTMAsPerServer.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_overrideFTMAsPerServer);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

unint64_t ServerFallbackCapableRequestProcessor.submitAllFlowOutput(rcState:turn:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationBridge);
  swift_retain();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    unint64_t v19 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    uint64_t v12 = a1[2];
    unint64_t v11 = a1[3];
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v11, (uint64_t *)&v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v7, v8, "Submitting all flowOutputs received from server for RC ID: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v10, -1, -1);
    MEMORY[0x1BA9E48C0](v9, -1, -1);
  }
  else
  {

    uint64_t v13 = swift_release();
  }
  unint64_t result = (*(uint64_t (**)(uint64_t))(*a1 + 424))(v13);
  if (result)
  {
    unint64_t v15 = result;
    if (result >> 62)
    {
      swift_bridgeObjectRetain();
      unint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v16 = result;
      if (result) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v16 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
      unint64_t result = swift_bridgeObjectRetain();
      if (v16)
      {
LABEL_9:
        if (v16 < 1)
        {
          __break(1u);
          return result;
        }
        uint64_t v17 = 0;
        do
        {
          if ((v15 & 0xC000000000000001) != 0)
          {
            id v18 = (void *)MEMORY[0x1BA9E3990](v17, v15);
          }
          else
          {
            id v18 = *(void **)(v15 + 8 * v17 + 32);
            swift_unknownObjectRetain();
          }
          ++v17;
          unint64_t v19 = v18;
          closure #1 in ServerFallbackCapableRequestProcessor.submitAllFlowOutput(rcState:turn:)(&v19, v3, a2, (uint64_t)a1);
          swift_unknownObjectRelease();
        }
        while (v16 != v17);
      }
    }
    return swift_bridgeObjectRelease_n();
  }
  return result;
}

uint64_t ResultCandidateState.flowOutputList.getter()
{
  return RequestContextData.Builder.bargeInModes.getter();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)(unint64_t a1, unint64_t a2)
{
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for AFServiceDeviceContext);
  if (a2 >> 62)
  {
    uint64_t v4 = _CocoaArrayWrapper.subscript.getter();
    self;
    if (swift_dynamicCastObjCClass()) {
      return v4;
    }
LABEL_10:
    _StringGuts.grow(_:)(85);
    unint64_t v6 = 0xD000000000000046;
    unint64_t v5 = 0x80000001BA06DAA0;
    goto LABEL_11;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a1)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v4 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 8 * a1 + 0x20);
  swift_unknownObjectRetain();
  self;
  if (swift_dynamicCastObjCClass()) {
    return v4;
  }
  _StringGuts.grow(_:)(82);
  unint64_t v5 = 0x80000001BA06DA50;
  unint64_t v6 = 0xD000000000000043;
LABEL_11:
  String.append(_:)(*(Swift::String *)&v6);
  v8._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x756F662074756220;
  v9._object = (void *)0xEB0000000020646ELL;
  String.append(_:)(v9);
  swift_getObjectType();
  swift_unknownObjectRelease();
  v10._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in ServerFallbackCapableRequestProcessor.submitAllFlowOutput(rcState:turn:)(void **a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v81 = a4;
  uint64_t v94 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v88 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for SelectedUserAttributes();
  uint64_t v82 = *(void *)(v84 - 8);
  MEMORY[0x1F4188790](v84);
  unint64_t v73 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SelectedUserAttributes?);
  MEMORY[0x1F4188790](v9 - 8);
  unint64_t v77 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UserID();
  uint64_t v85 = *(void *)(v11 - 8);
  uint64_t v86 = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v83 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for RequestType();
  uint64_t v90 = *(void *)(v78 - 8);
  MEMORY[0x1F4188790](v78);
  uint64_t v89 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for RequestSummary.ExecutionSource();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  id v18 = (char *)&v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  id v20 = (char *)&v72 - v19;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  uint64_t v22 = MEMORY[0x1F4188790](v21 - 8);
  id v24 = (char *)&v72 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  id v26 = (char *)&v72 - v25;
  uint64_t v27 = *a1;
  id v28 = (void *)MEMORY[0x1BA9E2DD0](a2[10], a2[11]);
  objc_msgSend(v27, sel_setRefId_, v28);

  self;
  uint64_t v29 = (void *)swift_dynamicCastObjCClass();
  uint64_t v87 = v27;
  if (v29) {
    swift_unknownObjectRetain();
  }
  Swift::String v75 = a2;
  uint64_t v30 = a2[8];
  uint64_t v31 = a2[9];
  uint64_t v32 = type metadata accessor for FlowOutputMessage.InAppResponse();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v26, 1, 1, v32);
  (*(void (**)(char *, void, uint64_t))(v15 + 104))(v20, *MEMORY[0x1E4FA24B8], v14);
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v20, v14);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v26, (uint64_t)v24, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  objc_allocWithZone((Class)type metadata accessor for ExecutionOutput());
  swift_bridgeObjectRetain();
  uint64_t v79 = v31;
  uint64_t v80 = v30;
  Swift::String v76 = (char *)specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:executionSource:inAppResponse:)(v29, 0, 0, 0, 0, 0, 0, 0, 0, 0, v30, v31, (uint64_t)v18, (uint64_t)v24);

  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v26, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
  uint64_t v33 = v94;
  uint64_t v34 = v94 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
  swift_beginAccess();
  uint64_t v35 = v78;
  (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v89, v34, v78);
  uint64_t v36 = (void **)(v33 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo);
  swift_beginAccess();
  os_log_type_t v37 = *v36;
  uint64_t v38 = v81;
  uint64_t v39 = v85;
  id v40 = *(void (**)(char *))(v85 + 16);
  Class v41 = v83;
  uint64_t v74 = v81 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_userId;
  uint64_t v42 = v86;
  v40(v83);
  uint64_t v43 = *(void (**)(id))(*(void *)v38 + 760);
  id v44 = v37;
  uint64_t v45 = (uint64_t)v77;
  v43(v44);
  uint64_t v46 = v82;
  uint64_t v47 = v84;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v45, 1, v84))
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v45, &demangling cache variable for type metadata for SelectedUserAttributes?);
    char v48 = 0;
  }
  else
  {
    uint64_t v49 = v45;
    unint64_t v50 = v73;
    (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v73, v49, v47);
    outlined destroy of ReferenceResolutionClientProtocol?(v49, &demangling cache variable for type metadata for SelectedUserAttributes?);
    char v48 = SelectedUserAttributes.meetsUserSessionThreshold.getter();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v50, v47);
  }
  uint64_t v51 = v75;
  type metadata accessor for ConversationContextUpdateMetadata();
  uint64_t v52 = swift_allocObject();
  *(unsigned char *)(v52 + 16) = 1;
  (*(void (**)(uint64_t, char *, uint64_t))(v90 + 32))(v52 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_requestType, v89, v35);
  *(void *)(v52 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_flowPluginInfo) = v37;
  (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v52 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_currentUserId, v41, v42);
  *(unsigned char *)(v52 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_emptyServerContext) = 0;
  *(unsigned char *)(v52 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_meetsUserSessionThreshold) = v48 & 1;
  uint64_t v53 = v76;
  unint64_t v54 = *(void **)&v76[OBJC_IVAR___SKRExecutionOutput_command];
  uint64_t v55 = *(void (**)(void *))(**(void **)((char *)v51
                                                    + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_recentDialogTracker)
                                      + 256);
  id v56 = v54;
  v55(v54);

  uint64_t v57 = *(void *)((char *)v51 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionOutputSubmitter);
  uint64_t v86 = (uint64_t)v51 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextUpdater;
  uint64_t v58 = v51[12];
  uint64_t v89 = (char *)v51[13];
  uint64_t v90 = v58;
  uint64_t v59 = (uint64_t)v51 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  uint64_t v60 = type metadata accessor for UUID();
  uint64_t v61 = *(void *)(v60 - 8);
  uint64_t v62 = (uint64_t)v88;
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v88, v59, v60);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v61 + 56))(v62, 0, 1, v60);
  uint64_t v63 = (void *)swift_allocObject();
  uint64_t v64 = v94;
  v63[2] = v51;
  v63[3] = v64;
  v63[4] = v53;
  id v65 = *(void (**)(id, uint64_t, uint64_t, void, void, uint64_t, void))(*(void *)v57 + 296);
  swift_retain();
  uint64_t v66 = v86;
  swift_retain();
  swift_retain();
  id v67 = v53;
  v65(v67, v80, v79, 0, 0, v66, 0);
  swift_release();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v62, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  self;
  uint64_t v68 = swift_dynamicCastObjCClass();
  if (v68)
  {
    uint64_t v69 = (void *)v68;
    outlined init with copy of ReferenceResolutionClientProtocol?(v66, (uint64_t)v91, &demangling cache variable for type metadata for ContextUpdating?);
    if (v92)
    {
      uint64_t v70 = v93;
      __swift_project_boxed_opaque_existential_1(v91, v92);
      swift_unknownObjectRetain();
      specialized static ResponseTextExtractionUtil.extractResponseText(fromAddViews:)(v69);
      (*(void (**)(void))(v70 + 32))();
      swift_bridgeObjectRelease();

      swift_unknownObjectRelease();
      swift_release();
      return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v91);
    }
    else
    {

      swift_release();
      return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v91, &demangling cache variable for type metadata for ContextUpdating?);
    }
  }
  else
  {

    return swift_release();
  }
}

void *ResultCandidateState.serverContextUpdateCandidate.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_serverContextUpdateCandidate);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

uint64_t protocol witness for ContextUpdating.applyServerContextUpdateCandidate(_:metadata:) in conformance MultiUserContextUpdater()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 248))();
}

void MultiUserContextUpdater.applyServerContextUpdateCandidate(_:metadata:)(uint64_t a1, uint64_t a2)
{
  v10[2] = a1;
  v10[3] = a2;
  (*(void (**)(void, uint64_t, uint64_t (*)(uint64_t), void *))(*(void *)v2 + 280))(0, a2 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_currentUserId, partial apply for closure #1 in MultiUserContextUpdater.applyServerContextUpdateCandidate(_:metadata:), v10);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v11 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v8 = Dictionary.debugDescription.getter();
    v10[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v4, v5, "Done applying ServerContextUpdateCandidate to all ContextUpdater instances with error: %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v7, -1, -1);
    MEMORY[0x1BA9E48C0](v6, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t partial apply for closure #1 in MultiUserContextUpdater.applyServerContextUpdateCandidate(_:metadata:)(uint64_t a1)
{
  return closure #1 in MultiUserContextUpdater.applyServerContextUpdateCandidate(_:metadata:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t closure #1 in MultiUserContextUpdater.applyServerContextUpdateCandidate(_:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v6);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.conversationBridge);
  swift_retain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v16 = a3;
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    uint64_t v17 = v11;
    *(_DWORD *)uint64_t v10 = 136315138;
    (*(void (**)(void))(*(void *)a1 + 360))();
    uint64_t v12 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v8, v9, "Applying ServerContextUpdateCandidate to ContextUpdater with userId: %s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v11, -1, -1);
    uint64_t v14 = v10;
    a3 = v16;
    MEMORY[0x1BA9E48C0](v14, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 424))(a2, a3);
}

void ContextUpdater.applyServerContextUpdateCandidate(_:metadata:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext();
  uint64_t v135 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  v131 = (char *)&v125 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = type metadata accessor for PommesContext.Source();
  uint64_t v126 = *(void *)(v128 - 8);
  MEMORY[0x1F4188790](v128);
  uint64_t v127 = (uint64_t *)((char *)&v125 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v134 = (char *)&v125 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v138 = (uint64_t)&v125 - v12;
  uint64_t v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (promptContext: Com_Apple_Siri_Product_Proto_PromptContext?, error: Error?));
  uint64_t v13 = MEMORY[0x1F4188790](v136);
  uint64_t v129 = (uint64_t)&v125 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v125 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v137 = (uint64_t)&v125 - v18;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  uint64_t v20 = __swift_project_value_buffer(v19, (uint64_t)static Logger.conversationBridge);
  id v21 = a1;
  uint64_t v139 = v20;
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  BOOL v24 = os_log_type_enabled(v22, v23);
  uint64_t v133 = a2;
  uint64_t v130 = v6;
  if (v24)
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    uint64_t v140 = v26;
    *(_DWORD *)uint64_t v25 = 136315138;
    id v27 = objc_msgSend(v21, sel_resultCandidateId);
    if (v27)
    {
      id v28 = v27;
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v31 = v30;
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v31 = 0;
    }
    v141[0] = v29;
    v141[1] = v31;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    uint64_t v32 = String.init<A>(describing:)();
    v141[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v22, v23, "Received ServerContextUpdateCandidate for RC ID: %s", v25, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v26, -1, -1);
    MEMORY[0x1BA9E48C0](v25, -1, -1);
  }
  else
  {
  }
  id v34 = objc_msgSend(v21, sel_nlContextUpdatePayload);
  if (v34)
  {
    uint64_t v35 = v34;
    uint64_t v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v38 = v37;
  }
  else
  {
    uint64_t v36 = 0;
    unint64_t v38 = 0xF000000000000000;
  }
  uint64_t v40 = v136;
  uint64_t v39 = v137;
  uint64_t v41 = *(int *)(v136 + 48);
  uint64_t v42 = (void *)ContextUpdater.applyPromptContextProtoData(_:)(v137, v36, v38);
  outlined consume of Data?(v36, v38);
  *(void *)(v39 + v41) = v42;
  uint64_t v43 = *(int *)(v40 + 48);
  outlined init with copy of ReferenceResolutionClientProtocol?(v39, (uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
  *(void *)&v17[v43] = v42;
  if (v42)
  {
    id v44 = v42;
    id v45 = v42;
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
    id v46 = v42;
    id v47 = v42;
    char v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      unint64_t v50 = (uint8_t *)swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      v141[0] = v51;
      *(_DWORD *)unint64_t v50 = 136315138;
      swift_getErrorValue();
      uint64_t v52 = Error.localizedDescription.getter();
      uint64_t v140 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, v141);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B9C64000, v48, v49, "Error while applying PromptContextData: %s", v50, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v51, -1, -1);
      MEMORY[0x1BA9E48C0](v50, -1, -1);
    }
    else
    {
    }
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
  }
  id v54 = objc_msgSend(v21, sel_mappedDomainEntities);
  if (v54)
  {
    uint64_t v55 = v54;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAMappedDomainEntity);
    unint64_t v56 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v57 = ContextUpdater.applyMappedDomainEntities(_:)(v56);
    swift_bridgeObjectRelease();
    uint64_t v132 = v3;
    if (v57)
    {
      id v58 = v57;
      id v59 = v57;
      uint64_t v60 = Logger.logObject.getter();
      os_log_type_t v61 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v60, v61))
      {
        uint64_t v62 = (uint8_t *)swift_slowAlloc();
        uint64_t v63 = swift_slowAlloc();
        v141[0] = v63;
        *(_DWORD *)uint64_t v62 = 136315138;
        swift_getErrorValue();
        uint64_t v64 = Error.localizedDescription.getter();
        uint64_t v140 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, v141);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1B9C64000, v60, v61, "Applied MappedDomainEntities with error: %s", v62, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v63, -1, -1);
        MEMORY[0x1BA9E48C0](v62, -1, -1);
      }
      else
      {
      }
    }
    id v66 = v21;
    id v67 = Logger.logObject.getter();
    os_log_type_t v68 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v67, v68))
    {
      uint64_t v69 = swift_slowAlloc();
      uint64_t v70 = swift_slowAlloc();
      v141[0] = v70;
      *(_DWORD *)uint64_t v69 = 136315394;
      id v71 = objc_msgSend(v66, sel_pegasusConversationContext);
      if (v71)
      {
        uint64_t v72 = v71;
        uint64_t v73 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v75 = v74;

        uint64_t v76 = 0;
        switch(v75 >> 62)
        {
          case 1uLL:
            LODWORD(v76) = HIDWORD(v73) - v73;
            if (!__OFSUB__(HIDWORD(v73), v73))
            {
              uint64_t v76 = (int)v76;
              goto LABEL_31;
            }
            __break(1u);
            goto LABEL_63;
          case 2uLL:
            uint64_t v80 = *(void *)(v73 + 16);
            uint64_t v79 = *(void *)(v73 + 24);
            BOOL v81 = __OFSUB__(v79, v80);
            uint64_t v76 = v79 - v80;
            if (!v81) {
              goto LABEL_31;
            }
LABEL_63:
            __break(1u);
LABEL_64:
            __break(1u);
LABEL_65:
            __break(1u);
            goto LABEL_66;
          case 3uLL:
            goto LABEL_31;
          default:
            uint64_t v76 = BYTE6(v75);
LABEL_31:
            uint64_t v140 = v76;
            uint64_t v78 = dispatch thunk of CustomStringConvertible.description.getter();
            unint64_t v77 = v82;
            outlined consume of Data._Representation(v73, v75);
            goto LABEL_32;
        }
      }
      unint64_t v77 = 0xE300000000000000;
      uint64_t v78 = 7104878;
LABEL_32:
      uint64_t v140 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v77, v141);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v69 + 12) = 2080;
      id v83 = objc_msgSend(v66, sel_nlContextUpdatePayload);
      uint64_t v125 = v70;
      if (v83)
      {
        uint64_t v84 = v83;
        uint64_t v85 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v87 = v86;

        uint64_t v88 = 0;
        switch(v87 >> 62)
        {
          case 1uLL:
            LODWORD(v88) = HIDWORD(v85) - v85;
            if (__OFSUB__(HIDWORD(v85), v85)) {
              goto LABEL_64;
            }
            uint64_t v88 = (int)v88;
            break;
          case 2uLL:
            uint64_t v92 = *(void *)(v85 + 16);
            uint64_t v91 = *(void *)(v85 + 24);
            BOOL v81 = __OFSUB__(v91, v92);
            uint64_t v88 = v91 - v92;
            if (v81) {
              goto LABEL_65;
            }
            break;
          case 3uLL:
            break;
          default:
            uint64_t v88 = BYTE6(v87);
            break;
        }
        uint64_t v140 = v88;
        uint64_t v90 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v89 = v93;
        outlined consume of Data._Representation(v85, v87);
      }
      else
      {
        unint64_t v89 = 0xE300000000000000;
        uint64_t v90 = 7104878;
      }
      uint64_t v140 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v89, v141);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v67, v68, "Considering context from server update\n    Pegasus bytes: %s\n    Prompt context bytes: %s", (uint8_t *)v69, 0x16u);
      uint64_t v94 = v125;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v94, -1, -1);
      MEMORY[0x1BA9E48C0](v69, -1, -1);
    }
    else
    {
    }
    uint64_t v95 = type metadata accessor for PommesContext();
    uint64_t v96 = *(void *)(v95 - 8);
    os_log_type_t v97 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v96 + 56);
    v97(v138, 1, 1, v95);
    id v98 = objc_msgSend(v66, sel_pegasusConversationContext);
    uint64_t v99 = (uint64_t)v134;
    if (v98)
    {
      uint64_t v100 = v98;
      uint64_t v101 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v103 = v102;

      switch(v103 >> 62)
      {
        case 1uLL:
          if ((int)v101 != v101 >> 32) {
            goto LABEL_44;
          }
          goto LABEL_50;
        case 2uLL:
          if (*(void *)(v101 + 16) == *(void *)(v101 + 24)) {
            goto LABEL_50;
          }
          goto LABEL_44;
        case 3uLL:
          goto LABEL_50;
        default:
          if ((v103 & 0xFF000000000000) == 0)
          {
LABEL_50:
            outlined consume of Data._Representation(v101, v103);
            goto LABEL_51;
          }
LABEL_44:

          unint64_t v104 = Logger.logObject.getter();
          os_log_type_t v105 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v104, v105))
          {
            v106 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v106 = 0;
            _os_log_impl(&dword_1B9C64000, v104, v105, "Creating POMMES context with Pegasus conversation context bytes!", v106, 2u);
            MEMORY[0x1BA9E48C0](v106, -1, -1);
          }

          uint64_t v107 = v127;
          *uint64_t v127 = v101;
          v107[1] = v103;
          (*(void (**)(uint64_t *, void, uint64_t))(v126 + 104))(v107, *MEMORY[0x1E4F9FEC8], v128);
          PommesContext.init(source:domain:listenAfterSpeaking:)();
          v97(v99, 0, 1, v95);
          outlined assign with take of (Input, AnyFlow, SiriEnvironment)(v99, v138, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
          break;
      }
    }
    else
    {
LABEL_51:
      uint64_t v108 = *(int *)(v136 + 48);
      uint64_t v109 = v129;
      outlined init with copy of ReferenceResolutionClientProtocol?(v137, v129, (uint64_t *)&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);

      *(void *)(v109 + v108) = v42;
      uint64_t v110 = v135;
      uint64_t v111 = v130;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v135 + 48))(v109, 1, v130) != 1)
      {
        uint64_t v117 = v111;
        (*(void (**)(char *, uint64_t, uint64_t))(v110 + 32))(v131, v109, v111);
        v118 = Logger.logObject.getter();
        os_log_type_t v119 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v118, v119))
        {
          v120 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v120 = 0;
          _os_log_impl(&dword_1B9C64000, v118, v119, "Creating POMMES context with prompt context!", v120, 2u);
          MEMORY[0x1BA9E48C0](v120, -1, -1);
        }

        (*(void (**)(uint64_t *, void, uint64_t))(v126 + 104))(v127, *MEMORY[0x1E4F9FED0], v128);
        PommesContext.init(source:domain:listenAfterSpeaking:)();
        v97(v99, 0, 1, v95);
        uint64_t v121 = v138;
        outlined assign with take of (Input, AnyFlow, SiriEnvironment)(v99, v138, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
        int v122 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v96 + 48))(v121, 1, v95);
        uint64_t v116 = v133;
        if (!v122) {
          PommesContext.update(with:)();
        }
        (*(void (**)(char *, uint64_t))(v135 + 8))(v131, v117);
        uint64_t v115 = v132;
        goto LABEL_61;
      }
      outlined destroy of ReferenceResolutionClientProtocol?(v109, (uint64_t *)&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
      v112 = Logger.logObject.getter();
      os_log_type_t v113 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v112, v113))
      {
        uint64_t v114 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v114 = 0;
        _os_log_impl(&dword_1B9C64000, v112, v113, "No Pegasus bytes or prompt context. Not creating any POMMES context.", v114, 2u);
        MEMORY[0x1BA9E48C0](v114, -1, -1);
      }
    }
    uint64_t v115 = v132;
    uint64_t v116 = v133;
LABEL_61:
    uint64_t v123 = v138;
    outlined init with copy of ReferenceResolutionClientProtocol?(v138, v99, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
    ContextUpdater.applyPommesContext(_:)(v99);
    outlined destroy of ReferenceResolutionClientProtocol?(v99, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
    swift_beginAccess();
    char v124 = *(void **)(v115 + 256);
    *(void *)(v115 + 256) = 0;

    ContextUpdater.flushSessionStateUpdates(metadata:)(v116);
    outlined destroy of ReferenceResolutionClientProtocol?(v137, &demangling cache variable for type metadata for (promptContext: Com_Apple_Siri_Product_Proto_PromptContext?, error: Error?));
    outlined destroy of ReferenceResolutionClientProtocol?(v123, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
    return;
  }
LABEL_66:

  __break(1u);
}

id ContextUpdater.applyMappedDomainEntities(_:)(unint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRFilter?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for GroupIdentifier?);
  MEMORY[0x1F4188790](v5 - 8);
  unint64_t v75 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for RREntity();
  uint64_t v76 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  unint64_t v87 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  unint64_t v86 = (char *)&v65 - v10;
  uint64_t v11 = type metadata accessor for UUID();
  unint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1) {
LABEL_25:
  }
    swift_once();
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v16 = __swift_project_value_buffer(v15, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  unint64_t v78 = a1;
  id v67 = v4;
  uint64_t v68 = v16;
  if (v19)
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    uint64_t v85 = v11;
    uint64_t v22 = v21;
    v90[0] = v21;
    *(_DWORD *)uint64_t v20 = 136315138;
    uint64_t v84 = v20 + 4;
    uint64_t v23 = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAMappedDomainEntity);
    swift_bridgeObjectRetain();
    uint64_t v24 = MEMORY[0x1BA9E3080](v78, v23);
    unint64_t v26 = v25;
    swift_bridgeObjectRelease();
    uint64_t v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, v90);
    a1 = v78;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v17, v18, "Received MappedDomainEntities=%s", v20, 0xCu);
    swift_arrayDestroy();
    uint64_t v27 = v22;
    uint64_t v11 = v85;
    MEMORY[0x1BA9E48C0](v27, -1, -1);
    MEMORY[0x1BA9E48C0](v20, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  UUID.init()();
  uint64_t v74 = UUID.uuidString.getter();
  uint64_t v77 = v28;
  uint64_t v29 = *(void (**)(char *, uint64_t))(v12 + 8);
  v12 += 8;
  v29(v14, v11);
  unint64_t v91 = MEMORY[0x1E4FBC860];
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = (char *)_CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_7;
    }
LABEL_27:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v52, v53))
    {
      id v54 = (uint8_t *)swift_slowAlloc();
      uint64_t v55 = swift_slowAlloc();
      v90[0] = v55;
      *(_DWORD *)id v54 = 136315138;
      swift_beginAccess();
      uint64_t v56 = swift_bridgeObjectRetain();
      uint64_t v57 = MEMORY[0x1BA9E3080](v56, v7);
      unint64_t v59 = v58;
      swift_bridgeObjectRelease();
      uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v59, v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v52, v53, "#ContextUpdater: Created RRaaS entities=%s from MappedDomainEntities", v54, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v55, -1, -1);
      MEMORY[0x1BA9E48C0](v54, -1, -1);
    }

    swift_beginAccess();
    unint64_t v60 = v91;
    if (*(void *)(v91 + 16))
    {
      __swift_project_boxed_opaque_existential_1((void *)(v66 + 56), *(void *)(v66 + 80));
      uint64_t v61 = type metadata accessor for RRFilter();
      uint64_t v62 = (uint64_t)v67;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v67, 1, 1, v61);
      uint64_t v63 = swift_allocObject();
      swift_weakInit();
      uint64_t v64 = swift_allocObject();
      *(void *)(v64 + 16) = v63;
      *(void *)(v64 + 24) = v60;
      swift_bridgeObjectRetain_n();
      swift_retain();
      dispatch thunk of ReferenceResolutionClientProtocol.siriMentioned(entities:configuration:completion:)();
      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?(v62, &demangling cache variable for type metadata for RRFilter?);
      swift_bridgeObjectRelease();
      swift_release();
    }
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v4 = *(char **)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v4) {
    goto LABEL_27;
  }
LABEL_7:
  unint64_t v79 = a1 & 0xC000000000000001;
  id v71 = (void (**)(char *, char *, uint64_t))(v76 + 16);
  uint64_t v70 = v76 + 32;
  uint64_t v69 = v76 + 8;
  uint64_t v11 = 4;
  uint64_t v73 = v7;
  uint64_t v72 = v4;
  while (1)
  {
    if (v79) {
      uint64_t v30 = (char *)MEMORY[0x1BA9E3990](v11 - 4, a1);
    }
    else {
      uint64_t v30 = (char *)*(id *)(a1 + 8 * v11);
    }
    uint64_t v14 = v30;
    uint64_t v31 = (char *)(v11 - 3);
    if (__OFADD__(v11 - 4, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    id v32 = objc_msgSend(v30, sel_usoGraphPayload);
    if (v32) {
      break;
    }

LABEL_9:
    ++v11;
    if (v31 == v4) {
      goto LABEL_27;
    }
  }
  unint64_t v33 = v32;
  uint64_t v34 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v36 = v35;

  if (!specialized ContextUpdater.convertPayloadToUsoEntity(payload:)(v34, v36))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type ConversationOutputError and conformance ConversationOutputError();
    uint64_t v50 = swift_allocError();
    unsigned char *v51 = 9;
    outlined consume of Data._Representation(v34, v36);

    swift_bridgeObjectRelease();
    return (id)v50;
  }
  uint64_t v85 = v11 - 4;
  id result = objc_msgSend(v14, sel_identifier);
  if (!result) {
    goto LABEL_34;
  }
  unint64_t v38 = result;
  uint64_t v81 = v34;
  uint64_t v82 = v11 - 3;
  uint64_t v84 = (uint8_t *)v36;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v83 = v14;
  id result = objc_msgSend(v14, sel_appBundleId);
  if (result)
  {
    uint64_t v39 = result;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v80 = v40;

    uint64_t v41 = type metadata accessor for GroupIdentifier();
    uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56);
    uint64_t v43 = v75;
    v42(v75, 1, 1, v41);
    swift_retain();
    id v44 = v86;
    RREntity.init(id:appBundleId:usoEntity:dataType:data:group:)();
    swift_bridgeObjectRetain();
    GroupIdentifier.init(id:seq:)();
    v42(v43, 0, 1, v41);
    RREntity.group.setter();
    uint64_t v7 = v73;
    (*v71)(v87, v44, v73);
    unint64_t v45 = v91;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v45 + 16) + 1, 1, v45);
    }
    a1 = v78;
    id v46 = v83;
    unint64_t v47 = (unint64_t)v84;
    unint64_t v12 = *(void *)(v45 + 16);
    unint64_t v48 = *(void *)(v45 + 24);
    if (v12 >= v48 >> 1) {
      unint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v12 + 1, 1, v45);
    }
    *(void *)(v45 + 16) = v12 + 1;
    uint64_t v49 = v76;
    (*(void (**)(unint64_t, char *, uint64_t))(v76 + 32))(v45+ ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80))+ *(void *)(v49 + 72) * v12, v87, v7);

    outlined consume of Data._Representation(v81, v47);
    swift_release();
    unint64_t v91 = v45;
    (*(void (**)(char *, uint64_t))(v49 + 8))(v86, v7);
    uint64_t v4 = v72;
    uint64_t v31 = (char *)v82;
    goto LABEL_9;
  }
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t ServerFallbackCapableRequestProcessor.requestHandledOnServer.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_requestHandledOnServer);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t ConversationBridge.handleRunSiriKitExecutor(_:_:_:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return ConversationBridge.doHandleAceRunSiriKitExecutor(command:executionContext:plannerInvocationId:reply:)(a1, a2, 0, 0, a3, a4);
}

uint64_t type metadata accessor for RunSiriKitExecutorProcessor()
{
  uint64_t result = type metadata singleton initialization cache for RunSiriKitExecutorProcessor;
  if (!type metadata singleton initialization cache for RunSiriKitExecutorProcessor) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for RunSiriKitExecutorProcessorExecutionDelegate()
{
  return self;
}

uint64_t _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t ServerFallbackCapableRequestProcessor.runSiriKitExecutorProcessor.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1
                + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_runSiriKitExecutorProcessor);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_release();
}

uint64_t RunSiriKitExecutorProcessor.makeRequestContextData()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Restrictions?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseMode?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (void *)v0[2];
  id v9 = objc_msgSend(v8, sel_inputOrigin);
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.conversationBridge);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_1B9C64000, v15, v16, "Warning: RSKE command has no inputOrigin, defaulting to that of the last request", v17, 2u);
      MEMORY[0x1BA9E48C0](v17, -1, -1);
    }

    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v18;
  }
  id v19 = objc_msgSend(v8, sel_mode);
  if (v19)
  {
    uint64_t v20 = v19;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  ResponseMode.init(aceValue:)();
  uint64_t v21 = type metadata accessor for ResponseMode();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v7, 1, v21) == 1)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.conversationBridge);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      unint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v25 = 0;
      _os_log_impl(&dword_1B9C64000, v23, v24, "Note: RSKE command has no mode, using nil (SKE will get it from turn context)", v25, 2u);
      MEMORY[0x1BA9E48C0](v25, -1, -1);
    }
  }
  type metadata accessor for RequestContextData.Builder(0);
  swift_allocObject();
  uint64_t v26 = *(void *)RequestContextData.Builder.init()();
  uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 1040))(v11, v13);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v28 = (*(uint64_t (**)(char *))(*(void *)v27 + 1064))(v7);
  swift_release();
  uint64_t v29 = (*(uint64_t (**)(id))(*(void *)v28 + 1072))(objc_msgSend(v8, sel_eyesFree));
  swift_release();
  uint64_t v30 = (*(uint64_t (**)(id))(*(void *)v29 + 1080))(objc_msgSend(v8, sel_directAction));
  swift_release();
  uint64_t v31 = (*(uint64_t (**)(id))(*(void *)v30 + 1088))(objc_msgSend(v8, sel_voiceTriggerEnabled));
  swift_release();
  uint64_t v32 = (*(uint64_t (**)(id))(*(void *)v31 + 1096))(objc_msgSend(v8, sel_textToSpeechEnabled));
  swift_release();
  unint64_t v33 = (void *)v1[3];
  id v34 = objc_msgSend(v33, sel_originPeerInfo);
  uint64_t v35 = (*(uint64_t (**)(void))(*(void *)v32 + 1104))();
  swift_release();

  id v36 = objc_msgSend(v33, sel_endpointInfo);
  uint64_t v37 = (*(uint64_t (**)(void))(*(void *)v35 + 1112))();
  swift_release();

  id v38 = objc_msgSend(v33, sel_instanceInfo);
  uint64_t v39 = (*(uint64_t (**)(void))(*(void *)v37 + 1120))();
  swift_release();

  uint64_t v40 = (*(uint64_t (**)(void))(*(void *)v39 + 1128))(MEMORY[0x1E4FBC860]);
  swift_release();
  id v41 = objc_msgSend(v33, sel_deviceRestrictions);
  if (v41)
  {
    uint64_t v42 = v41;
    static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  Restrictions.init(aceValue:)();
  uint64_t v43 = type metadata accessor for Restrictions();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v4, 0, 1, v43);
  uint64_t v44 = (*(uint64_t (**)(char *))(*(void *)v40 + 1144))(v4);
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, &demangling cache variable for type metadata for Restrictions?);
  id v45 = objc_msgSend(v33, sel_currentHomeInfo);
  uint64_t v46 = (*(uint64_t (**)(void))(*(void *)v44 + 1152))();
  swift_release();

  if (v1[20])
  {
    uint64_t v47 = v1[19];
    unint64_t v48 = v1[20];
  }
  else
  {
    id v49 = objc_msgSend(v8, sel_remoteExecution);
    if (v49
      && (uint64_t v50 = v49,
          id v51 = objc_msgSend(v49, sel_executionDeviceAssistantId),
          v50,
          v51))
    {
      uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v48 = v52;
    }
    else
    {
      uint64_t v47 = 0;
      unint64_t v48 = 0xE000000000000000;
    }
  }
  os_log_type_t v53 = *(uint64_t (**)(uint64_t, unint64_t))(*(void *)v46 + 1160);
  swift_bridgeObjectRetain();
  uint64_t v54 = v53(v47, v48);
  swift_bridgeObjectRelease();
  uint64_t v55 = swift_release();
  uint64_t v56 = (*(uint64_t (**)(uint64_t))(*(void *)v54 + 1280))(v55);
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, &demangling cache variable for type metadata for ResponseMode?);
  return v56;
}

void RunSiriKitExecutorProcessor.handle(sendStartExecutionTurn:overrideRequestContextData:)(int a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v117 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v115 = (char *)&v114 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  id v9 = (char *)&v114 - v8;
  uint64_t v10 = (void *)type metadata accessor for UserID();
  v120 = (void *)*(v10 - 1);
  id v121 = v10;
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  os_log_type_t v119 = (char *)&v114 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v116 = (char *)&v114 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v14 - 8);
  os_log_type_t v16 = (char *)&v114 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = __swift_project_value_buffer(v17, (uint64_t)static Logger.conversationBridge);
  swift_retain_n();
  id v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    LODWORD(v118) = a1;
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    v123[0] = v22;
    *(_DWORD *)uint64_t v21 = 136315138;
    uint64_t v23 = 0x65746F6D6572;
    if (*(unsigned char *)(v3 + 168) != 1) {
      uint64_t v23 = 0x726576726573;
    }
    if (*(unsigned char *)(v3 + 168)) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = 0x6C61636F6CLL;
    }
    if (*(unsigned char *)(v3 + 168)) {
      unint64_t v25 = 0xE600000000000000;
    }
    else {
      unint64_t v25 = 0xE500000000000000;
    }
    uint64_t v126 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v123);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v19, v20, "Handling RSKE from source: %s", v21, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v22, -1, -1);
    MEMORY[0x1BA9E48C0](v21, -1, -1);

    if ((v118 & 1) == 0) {
      goto LABEL_25;
    }
  }
  else
  {

    swift_release_n();
    if ((a1 & 1) == 0) {
      goto LABEL_25;
    }
  }
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v28 = 0;
    _os_log_impl(&dword_1B9C64000, v26, v27, "Sending StartExecutionTurn to Execution before RSKE", v28, 2u);
    MEMORY[0x1BA9E48C0](v28, -1, -1);
  }

  uint64_t v29 = *(void *)(v3 + 144);
  if (v29)
  {
    uint64_t v118 = (uint64_t)v9;
    uint64_t v30 = *(void *)(v3 + 136);
    uint64_t v31 = v29;
LABEL_21:
    uint64_t v35 = *(void (**)(uint64_t, uint64_t))(*(void *)v3 + 512);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v35(v30, v31);
    swift_bridgeObjectRelease();
    outlined init with copy of ReferenceResolutionClientProtocol?(v3 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_sessionId, (uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    started = (objc_class *)type metadata accessor for StartExecutionTurn();
    uint64_t v37 = objc_allocWithZone(started);
    id v38 = (uint64_t *)&v37[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_executionRequestId];
    *id v38 = v30;
    v38[1] = v31;
    uint64_t v39 = &v37[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_rootRequestId];
    *uint64_t v39 = 0;
    v39[1] = 0;
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v16, (uint64_t)&v37[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_sessionId], (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v37[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_isTapToEdit] = 0;
    v37[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_isMUXEnabled] = 0;
    v122.receiver = v37;
    v122.super_class = started;
    id v40 = objc_msgSendSuper2(&v122, sel_init);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v41 = *(void *)(v3 + 80);
    uint64_t v42 = *(void *)(v3 + 88);
    __swift_project_boxed_opaque_existential_1((void *)(v3 + 56), v41);
    (*(void (**)(id, void, _UNKNOWN **, uint64_t, uint64_t))(v42 + 8))(v40, *(void *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_rskeProcessorExecutionDelegate), &protocol witness table for RunSiriKitExecutorProcessorExecutionDelegate, v41, v42);
    uint64_t v43 = v40;
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      uint64_t v114 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v46 = 138412290;
      v123[0] = (uint64_t)v43;
      uint64_t v47 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      unint64_t v48 = v114;
      void *v114 = v43;

      _os_log_impl(&dword_1B9C64000, v44, v45, "Successfully sent: %@", v46, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v48, -1, -1);
      MEMORY[0x1BA9E48C0](v46, -1, -1);
    }
    else
    {

      uint64_t v44 = v43;
    }
    id v9 = (char *)v118;

LABEL_25:
    swift_retain_n();
    id v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v49, v50))
    {
      id v51 = (uint8_t *)swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      uint64_t v118 = (uint64_t)v9;
      *(_DWORD *)id v51 = 136315138;
      v123[0] = v52;
      uint64_t v114 = v51 + 4;
      id v53 = objc_msgSend(*(id *)(v3 + 16), sel_debugDescription, v51 + 4);
      uint64_t v54 = v3;
      uint64_t v55 = v18;
      uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v58 = v57;

      uint64_t v59 = v56;
      uint64_t v18 = v55;
      uint64_t v3 = v54;
      uint64_t v126 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v58, v123);
      id v9 = (char *)v118;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v49, v50, "Handling %s", v51, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v52, -1, -1);
      MEMORY[0x1BA9E48C0](v51, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    unint64_t v60 = v120;
    id v61 = v121;
    uint64_t v62 = v119;
    uint64_t v63 = *(void **)(v3 + 16);
    objc_msgSend(v63, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for SAIntentGroupRunSiriKitExecutor();
    if (swift_dynamicCast())
    {
      uint64_t v64 = (void *)v126;
      if ((*(uint64_t (**)(uint64_t))(*(void *)v3 + 480))(v126))
      {
        uint64_t v65 = Logger.logObject.getter();
        os_log_type_t v66 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v65, v66))
        {
          id v67 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v67 = 0;
          _os_log_impl(&dword_1B9C64000, v65, v66, "🫨 Gesture invocation detected, ignoring RSKE", v67, 2u);
          MEMORY[0x1BA9E48C0](v67, -1, -1);
        }
      }
      else
      {
        id v121 = v64;
        uint64_t v68 = *(void **)(v3 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_muxContextMessage);
        if (v68)
        {
          outlined init with copy of ReferenceResolutionClientProtocol?(v3 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_previousUserId, (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for UserID?);
          uint64_t v69 = (unsigned int (*)(char *, uint64_t, id))v60[6];
          if (v69(v9, 1, v61) == 1)
          {
            uint64_t v70 = v68;
            outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for UserID?);
            id v71 = objc_msgSend(v121, sel_parse);
            if (v71
              && (uint64_t v72 = v71,
                  id v73 = objc_msgSend(v71, sel_directInvocation),
                  v72,
                  v73))
            {

              uint64_t v74 = *(void *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_userSessionState);
              unint64_t v75 = *(void *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_userSessionState + 8);
              uint64_t v76 = MUXContextMessage.userIdToHomeMember.getter();
              os_log_type_t v119 = v70;
              uint64_t v77 = v115;
              UserSessionState.getActiveUserSharedUserId(fromHomeMemberInfoDict:)(v76, v74, v75, v115);
              swift_bridgeObjectRelease();
              if (v69(v77, 1, v61) == 1)
              {

                outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v77, (uint64_t *)&demangling cache variable for type metadata for UserID?);
              }
              else
              {
                uint64_t v110 = v119;
                outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v77, (uint64_t *)&demangling cache variable for type metadata for UserID?);
                uint64_t v111 = Logger.logObject.getter();
                os_log_type_t v112 = static os_log_type_t.debug.getter();
                if (os_log_type_enabled(v111, v112))
                {
                  os_log_type_t v113 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)os_log_type_t v113 = 0;
                  _os_log_impl(&dword_1B9C64000, v111, v112, "Assigning active user for RSKE DirectInvocation", v113, 2u);
                  MEMORY[0x1BA9E48C0](v113, -1, -1);
                }
              }
            }
            else
            {
            }
          }
          else
          {
            unint64_t v78 = v9;
            unint64_t v79 = v116;
            ((void (*)(char *, char *, id))v60[4])(v116, v78, v61);
            ((void (*)(char *, char *, id))v60[2])(v62, v79, v61);
            os_log_type_t v119 = v68;
            uint64_t v80 = (char *)Logger.logObject.getter();
            os_log_type_t v81 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled((os_log_t)v80, v81))
            {
              uint64_t v82 = swift_slowAlloc();
              uint64_t v118 = v18;
              id v83 = (uint8_t *)v82;
              uint64_t v84 = swift_slowAlloc();
              uint64_t v115 = v80;
              uint64_t v85 = v60;
              unint64_t v86 = v62;
              uint64_t v87 = v84;
              v123[0] = v84;
              *(_DWORD *)id v83 = 136315138;
              uint64_t v114 = v83 + 4;
              lazy protocol witness table accessor for type UserID and conformance UserID((unint64_t *)&lazy protocol witness table cache variable for type UserID and conformance UserID, MEMORY[0x1E4FA26E0]);
              uint64_t v88 = dispatch thunk of CustomStringConvertible.description.getter();
              uint64_t v126 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v88, v89, v123);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              uint64_t v90 = (void (*)(char *, id))v85[1];
              v90(v86, v61);
              unint64_t v91 = v115;
              _os_log_impl(&dword_1B9C64000, (os_log_t)v115, v81, "User found within the session :%s", v83, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x1BA9E48C0](v87, -1, -1);
              MEMORY[0x1BA9E48C0](v83, -1, -1);
            }
            else
            {
              uint64_t v90 = (void (*)(char *, id))v60[1];
              v90(v62, v61);
            }
            v90(v116, v61);
          }
        }
        (*(void (**)(void, void))(*(void *)v3 + 512))(*(void *)(v3 + 136), *(void *)(v3 + 144));
        outlined init with copy of ReferenceResolutionClientProtocol(v3 + 56, (uint64_t)v123);
        uint64_t v95 = v124;
        uint64_t v96 = v125;
        __swift_project_boxed_opaque_existential_1(v123, v124);
        os_log_type_t v97 = v117;
        v120 = v63;
        if (v117)
        {
          id v98 = v117;
        }
        else
        {
          uint64_t v99 = (*(uint64_t (**)(void))(*(void *)v3 + 608))();
          os_log_type_t v97 = v117;
          id v98 = (void *)v99;
        }
        uint64_t v100 = *(void *)(v3
                         + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_rskeProcessorExecutionDelegate);
        uint64_t v101 = *(void (**)(id, void *, uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v96 + 64);
        id v102 = v97;
        id v103 = v121;
        v101(v121, v98, v100, &protocol witness table for RunSiriKitExecutorProcessorExecutionDelegate, v95, v96);

        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v123);
        swift_retain_n();
        unint64_t v104 = Logger.logObject.getter();
        os_log_type_t v105 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v104, v105))
        {
          v106 = (uint8_t *)swift_slowAlloc();
          uint64_t v107 = (void *)swift_slowAlloc();
          *(_DWORD *)v106 = 138412290;
          id v108 = v120;
          v123[0] = (uint64_t)v120;
          uint64_t v109 = v120;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v107 = v108;
          swift_release_n();
          _os_log_impl(&dword_1B9C64000, v104, v105, "Successfully sent: %@", v106, 0xCu);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v107, -1, -1);
          MEMORY[0x1BA9E48C0](v106, -1, -1);
        }
        else
        {

          swift_release_n();
        }
      }
    }
    else
    {
      specialized static ConversationBridgeUtils.replyCommandFailed(forCommand:errorCode:reason:replyHandler:)(v63, -1, 0xD000000000000013, 0x80000001BA06CC50, *(void (**)(id, id))(v3 + 32), *(void *)(v3 + 40));
    }
    return;
  }
  id v32 = objc_msgSend(*(id *)(v3 + 24), sel_requestID);
  if (v32)
  {
    unint64_t v33 = v32;
    uint64_t v118 = (uint64_t)v9;
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v31 = v34;

    goto LABEL_21;
  }
  uint64_t v92 = Logger.logObject.getter();
  os_log_type_t v93 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v92, v93))
  {
    uint64_t v94 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v94 = 0;
    _os_log_impl(&dword_1B9C64000, v92, v93, "The requestId is missing", v94, 2u);
    MEMORY[0x1BA9E48C0](v94, -1, -1);
  }
}

unint64_t type metadata accessor for SAIntentGroupRunSiriKitExecutor()
{
  unint64_t result = lazy cache variable for type metadata for SAIntentGroupRunSiriKitExecutor;
  if (!lazy cache variable for type metadata for SAIntentGroupRunSiriKitExecutor)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupRunSiriKitExecutor);
  }
  return result;
}

Swift::Void __swiftcall RunSiriKitExecutorProcessor.logStartOfExecutionForRSKE(requestId:)(Swift::String_optional requestId)
{
  uint64_t v2 = v1;
  object = requestId.value._object;
  uint64_t countAndFlagsBits = requestId.value._countAndFlagsBits;
  if (((*(uint64_t (**)(void))(*(void *)v1 + 376))() & 1) == 0)
  {
    if (object)
    {
      uint64_t v5 = *(void *)(v1 + 184);
      uint64_t v6 = *(unsigned __int8 *)(v1 + 168);
      uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v1 + 400))();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t, void *, uint64_t, uint64_t, _BYTE))(*(void *)v5 + 136))(1, v6, 8, countAndFlagsBits, object, countAndFlagsBits, object, v7, v8, 0);
      swift_bridgeObjectRelease();
    }
    else
    {
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationBridge);
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl(&dword_1B9C64000, v10, v11, "RequestId is missing while handling RSKE request and logging to SELF", v12, 2u);
        MEMORY[0x1BA9E48C0](v12, -1, -1);
      }
    }
    uint64_t v13 = *(void (**)(uint64_t))(*(void *)v2 + 384);
    v13(1);
  }
}

uint64_t RunSiriKitExecutorProcessor.loggedStartOfCall.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_loggedStartOfCall);
  swift_beginAccess();
  return *v1;
}

uint64_t RunSiriKitExecutorProcessor.resultCandidateId.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_resultCandidateId);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t ConversationBridgeInstrumentationUtil.mapRSKESourceToLogRSKESource(_:)(char a1)
{
  return dword_1BA052B54[a1];
}

uint64_t RunSiriKitExecutorProcessor.loggedStartOfCall.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_loggedStartOfCall);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t protocol witness for ConversationRuntimeClientProtocol.sendRunSiriKitExecutor(_:withRequestContextData:withBridgeDelegate:) in conformance ConversationRuntimeClient()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200))();
}

uint64_t ConversationRuntimeClient.sendRunSiriKitExecutor(_:withRequestContextData:withBridgeDelegate:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v12 = *(void *)(v4 + 24);
  uint64_t v11 = *(void *)(v4 + 32);
  uint64_t v13 = *(void *)(v5 + 40);
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = v12;
  v14[3] = v11;
  v14[4] = v13;
  v14[5] = a1;
  v14[6] = a2;
  v14[7] = a3;
  v14[8] = a4;
  swift_retain();
  swift_retain();
  swift_retain();
  id v15 = a1;
  id v16 = a2;
  swift_unknownObjectRetain();
  uint64_t v17 = StaticString.description.getter();
  uint64_t v19 = v18;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v12;
  *(void *)(v20 + 24) = v11;
  *(void *)(v20 + 32) = v13;
  *(void *)(v20 + 40) = "bridge(didReceiveRSKE:withRequestContextData:from:)";
  *(void *)(v20 + 48) = 51;
  *(unsigned char *)(v20 + 56) = 2;
  *(void *)(v20 + 64) = &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveRSKE:withRequestContextData:from:);
  *(void *)(v20 + 72) = v14;
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v11 + 208);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v21(v17, v19, &closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:)partial apply, v20);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #1 in ServerFallbackCapableRequestProcessor.submitAllFlowOutput(rcState:turn:)(uint64_t a1, void *a2)
{
  return closure #1 in closure #1 in ServerFallbackCapableRequestProcessor.submitAllFlowOutput(rcState:turn:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32));
}

uint64_t closure #1 in closure #1 in ServerFallbackCapableRequestProcessor.submitAllFlowOutput(rcState:turn:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a3 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_asyncWork);
  uint64_t v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v11, 1, 1, v13);
  swift_retain();
  swift_retain();
  id v14 = a2;
  uint64_t v15 = one-time initialization token for shared;
  id v16 = a5;
  if (v15 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v17 = static MessageBusActor.shared;
  uint64_t v18 = _s16SiriMessageTypes11RequestTypeOACSYAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
  uint64_t v19 = (void *)swift_allocObject();
  v19[2] = v17;
  v19[3] = v18;
  v19[4] = a3;
  v19[5] = a4;
  v19[6] = a2;
  v19[7] = v16;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v11, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #1 in ServerFallbackCapableRequestProcessor.submitAllFlowOutput(rcState:turn:), (uint64_t)v19);
  (*(void (**)(void))(*(void *)v12 + 120))();
  return swift_release();
}

uint64_t partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveRSKE:withRequestContextData:from:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = v0[7];
  uint64_t v8 = v0[8];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v9;
  void *v9 = v1;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ConversationServiceSerialFacade.bridge(didReceiveRSKE:withRequestContextData:from:)(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t closure #1 in ConversationServiceSerialFacade.bridge(didReceiveRSKE:withRequestContextData:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v12;
  *uint64_t v12 = v7;
  v12[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(a4, a5, a6, a7);
}

uint64_t ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[28] = a4;
  v5[29] = v4;
  v5[26] = a2;
  v5[27] = a3;
  v5[25] = a1;
  uint64_t v6 = type metadata accessor for RequestSummary.ExecutionSource();
  v5[30] = v6;
  v5[31] = *(void *)(v6 - 8);
  unsigned char v5[32] = swift_task_alloc();
  v5[33] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  v5[34] = swift_task_alloc();
  v5[35] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for SiriKitEventPayload();
  v5[36] = v7;
  v5[37] = *(void *)(v7 - 8);
  v5[38] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v5[39] = swift_task_alloc();
  v5[40] = type metadata accessor for DecisionEngineResponse();
  v5[41] = swift_task_alloc();
  v5[42] = swift_task_alloc();
  type metadata accessor for ExecutionLocation();
  v5[43] = swift_task_alloc();
  v5[44] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLRoutingDecisionMessage.GenAIFallbackSuppressReason?);
  v5[45] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Parse();
  v5[46] = v8;
  v5[47] = *(void *)(v8 - 8);
  v5[48] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for TimeoutError();
  v5[49] = v9;
  v5[50] = *(void *)(v9 - 8);
  v5[51] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for OSSignpostID();
  v5[52] = v10;
  v5[53] = *(void *)(v10 - 8);
  v5[54] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Input();
  v5[55] = v11;
  v5[56] = *(void *)(v11 - 8);
  v5[57] = swift_task_alloc();
  v5[58] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for UUID();
  v5[59] = v12;
  v5[60] = *(void *)(v12 - 8);
  v5[61] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestPositionInSession?);
  v5[62] = swift_task_alloc();
  v5[63] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v5[64] = swift_task_alloc();
  v5[65] = swift_task_alloc();
  v5[66] = swift_task_alloc();
  v5[67] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v13 = static MessageBusActor.shared;
  v5[68] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:), v13, 0);
}

uint64_t ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 512);
  *(void *)(*v1 + 800) = v0;
  swift_task_dealloc();
  outlined destroy of ReferenceResolutionClientProtocol?(v3, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_release();
  swift_release();
  uint64_t v4 = *(void *)(v2 + 544);
  if (v0) {
    uint64_t v5 = ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:);
  }
  else {
    uint64_t v5 = ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:);
  }
  return MEMORY[0x1F4188298](v5, v4, 0);
}

{
  void *v0;
  void *v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  void *v6;
  uint8_t *v7;
  uint8_t *v8;
  void *v9;
  id v10;
  id v11;
  os_log_type_t v12;
  BOOL v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t DynamicType;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;

  uint64_t v1 = (void *)v0[79];
  v0[17] = v1;
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    (*(void (**)(void, void))(v0[50] + 8))(v0[51], v0[49]);
    uint64_t v3 = Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.error.getter();
    uint64_t v5 = os_log_type_enabled(v3, v4);
    uint64_t v6 = (void *)v0[79];
    if (v5)
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_1B9C64000, v3, v4, "bridge.fetchSpeechInfo timed out, current request will have a nil speechPackage", v7, 2u);
      uint64_t v8 = v7;
LABEL_6:
      MEMORY[0x1BA9E48C0](v8, -1, -1);

      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v9 = (void *)v0[79];
    uint64_t v10 = v9;
    uint64_t v11 = v9;
    uint64_t v3 = Logger.logObject.getter();
    uint64_t v12 = static os_log_type_t.error.getter();
    uint64_t v13 = os_log_type_enabled(v3, v12);
    uint64_t v6 = (void *)v0[79];
    if (v13)
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      uint64_t v31 = v15;
      *(_DWORD *)uint64_t v14 = 136446210;
      swift_getErrorValue();
      DynamicType = swift_getDynamicType();
      uint64_t v17 = v0[13];
      v0[14] = DynamicType;
      v0[15] = v17;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error.Type);
      uint64_t v18 = String.init<A>(describing:)();
      v0[18] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B9C64000, v3, v12, "bridge.fetchSpeechInfo got an unknown error %{public}s, current request will have a nil speechPackage", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v15, -1, -1);
      uint64_t v8 = v14;
      goto LABEL_6;
    }
  }
LABEL_9:
  v0[80] = 0;
  uint64_t v20 = v0[25];
  uint64_t v21 = (void *)swift_task_alloc();
  v0[81] = v21;
  *uint64_t v21 = v0;
  v21[1] = ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:);
  uint64_t v22 = v0[76];
  uint64_t v23 = v0[75];
  uint64_t v24 = v0[74];
  unint64_t v25 = v0[73];
  uint64_t v26 = v0[72];
  os_log_type_t v27 = v0[71];
  uint64_t v28 = v0[67];
  return ConversationService.setupNewTurn(executionRequestId:rootRequestId:sessionId:contextData:runSiriKitExecutor:scopedRRData:bridge:)(v25, v24, v27, v26, v28, v23, v20, v22);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  char *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  void *v69;
  Swift::String_optional v70;
  uint64_t v71;
  void (*v72)(void *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  os_log_type_t v85;
  NSObject *log;
  os_log_t loga;
  unint64_t v88;
  os_log_type_t v89;
  os_log_t v90;
  NSObject *v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t (*v99)(uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  uint64_t v101 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 504);
  uint64_t v2 = *(void *)(v0 + 232);
  uint64_t v3 = type metadata accessor for Logger();
  *(void *)(v0 + 552) = __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  *(void *)(v0 + 560) = type metadata accessor for ConversationSELFHelper();
  static ConversationSELFHelper.shared.getter();
  dispatch thunk of ConversationSELFHelper.emitExecutionPrepareTimeBegin(rcId:)();
  swift_release();
  uint64_t v4 = type metadata accessor for RequestPositionInSession();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v6(v1, 1, 1, v4);
  swift_beginAccess();
  uint64_t v7 = *(unsigned __int8 *)(v2 + 120);
  if (v7 >> 6)
  {
    uint64_t v8 = *(char **)(v2 + 112);
    uint64_t v96 = v8;
    os_log_type_t v97 = v3;
    if (v7 >> 6 == 1)
    {
      uint64_t v9 = *(void *)(v0 + 536);
      uint64_t v11 = *(void *)(v0 + 496);
      uint64_t v10 = *(void *)(v0 + 504);
      uint64_t v92 = v7;
      uint64_t v12 = v8;
      outlined destroy of ReferenceResolutionClientProtocol?(v10, &demangling cache variable for type metadata for RequestPositionInSession?);
      uint64_t v88 = *(void *)&v12[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_executionRequestId + 8];
      uint64_t v90 = *(os_log_t *)&v12[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_executionRequestId];
      uint64_t v13 = *(void *)&v12[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_rootRequestId + 8];
      uint64_t v94 = *(void *)&v12[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_rootRequestId];
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)&v12[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_sessionId], v9, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v14 = (unsigned int *)MEMORY[0x1E4F9FD48];
      if (v92) {
        uint64_t v14 = (unsigned int *)MEMORY[0x1E4F9FD38];
      }
      (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v11, *v14, v4);
      v6(v11, 0, 1, v4);
      uint64_t v15 = v11;
      id v16 = v13;
      uint64_t v17 = (void *)v88;
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v15, v10, &demangling cache variable for type metadata for RequestPositionInSession?);
      uint64_t v18 = one-time initialization token for conversationBridge;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v18 != -1) {
        swift_once();
      }
      uint64_t v19 = *(void *)(v0 + 536);
      uint64_t v20 = *(void *)(v0 + 528);
      __swift_project_value_buffer(v97, (uint64_t)static Logger.conversationBridge);
      outlined init with copy of ReferenceResolutionClientProtocol?(v19, v20, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v21 = Logger.logObject.getter();
      uint64_t v22 = static os_log_type_t.debug.getter();
      uint64_t v23 = os_log_type_enabled(v21, v22);
      uint64_t v24 = *(void *)(v0 + 528);
      if (v23)
      {
        uint64_t v85 = v22;
        log = v21;
        unint64_t v25 = *(void *)(v0 + 480);
        uint64_t v82 = *(void *)(v0 + 472);
        uint64_t v26 = swift_slowAlloc();
        id v83 = swift_slowAlloc();
        uint64_t v100 = v83;
        *(_DWORD *)uint64_t v26 = 136315650;
        if (v16) {
          os_log_type_t v27 = v94;
        }
        else {
          os_log_type_t v27 = 7104878;
        }
        uint64_t v28 = 0xE300000000000000;
        os_log_type_t v81 = v24;
        uint64_t v29 = v16;
        if (!v16) {
          id v16 = 0xE300000000000000;
        }
        swift_bridgeObjectRetain();
        *(void *)(v0 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v16, &v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        id v16 = v29;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v26 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v30 = (uint64_t)v90;
        *(void *)(v0 + 184) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v90, v88, &v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v26 + 22) = 2080;
        uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v81, 1, v82);
        id v32 = 7104878;
        if (!v31)
        {
          uint64_t v34 = *(void *)(v0 + 480);
          unint64_t v33 = *(void *)(v0 + 488);
          uint64_t v35 = *(void *)(v0 + 472);
          (*(void (**)(uint64_t, void, uint64_t))(v34 + 16))(v33, *(void *)(v0 + 528), v35);
          id v32 = UUID.uuidString.getter();
          uint64_t v28 = v36;
          (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
        }
        uint64_t v37 = *(void *)(v0 + 528);
        *(void *)(v0 + 192) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v28, &v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of ReferenceResolutionClientProtocol?(v37, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        _os_log_impl(&dword_1B9C64000, log, v85, "ConversationService bridge - state - awaitingRequestContextData rootrequestId - %s and startTurnRequestId - %s and sessionId - %s", (uint8_t *)v26, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v83, -1, -1);
        MEMORY[0x1BA9E48C0](v26, -1, -1);

        outlined consume of ConversationService.State(v96, v92);
        id v38 = v94;
      }
      else
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        outlined destroy of ReferenceResolutionClientProtocol?(v24, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        outlined consume of ConversationService.State(v96, v92);

        uint64_t v30 = (uint64_t)v90;
        id v38 = v94;
      }
    }
    else
    {
      uint64_t v42 = *(void *)(v0 + 536);
      uint64_t v43 = &v8[OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData];
      uint64_t v30 = *(void *)&v8[OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData];
      uint64_t v17 = *(void **)&v8[OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData + 8];
      id v38 = *(void *)&v8[OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData + 16];
      id v16 = *(void *)&v8[OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData + 24];
      uint64_t v44 = v8;
      os_log_type_t v45 = type metadata accessor for RemoteConversationTurnData(0);
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)&v43[*(int *)(v45 + 24)], v42, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      outlined copy of ConversationService.State(v44, v7);
      uint64_t v46 = one-time initialization token for conversationBridge;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v46 != -1) {
        swift_once();
      }
      uint64_t v47 = *(void *)(v0 + 536);
      unint64_t v48 = *(void *)(v0 + 520);
      __swift_project_value_buffer(v97, (uint64_t)static Logger.conversationBridge);
      outlined init with copy of ReferenceResolutionClientProtocol?(v47, v48, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      id v49 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.debug.getter();
      id v51 = os_log_type_enabled(v49, v50);
      uint64_t v52 = *(void *)(v0 + 520);
      if (v51)
      {
        unint64_t v89 = v50;
        unint64_t v91 = v49;
        os_log_type_t v93 = v7;
        id v53 = *(void *)(v0 + 480);
        uint64_t v84 = *(void *)(v0 + 472);
        uint64_t v54 = swift_slowAlloc();
        loga = (os_log_t)swift_slowAlloc();
        uint64_t v100 = (uint64_t)loga;
        *(_DWORD *)uint64_t v54 = 136315650;
        uint64_t v95 = v38;
        if (v16) {
          uint64_t v55 = v38;
        }
        else {
          uint64_t v55 = 7104878;
        }
        uint64_t v56 = v30;
        id v98 = 0xE300000000000000;
        if (v16) {
          unint64_t v57 = v16;
        }
        else {
          unint64_t v57 = 0xE300000000000000;
        }
        swift_bridgeObjectRetain();
        *(void *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v57, &v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v30 = v56;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v54 + 12) = 2080;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, (unint64_t)v17, &v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v54 + 22) = 2080;
        unint64_t v58 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v52, 1, v84);
        uint64_t v59 = 7104878;
        if (!v58)
        {
          id v61 = *(void *)(v0 + 480);
          unint64_t v60 = *(void *)(v0 + 488);
          uint64_t v62 = *(void *)(v0 + 472);
          (*(void (**)(uint64_t, void, uint64_t))(v61 + 16))(v60, *(void *)(v0 + 520), v62);
          uint64_t v59 = UUID.uuidString.getter();
          id v98 = v63;
          (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v62);
        }
        uint64_t v64 = *(void *)(v0 + 520);
        *(void *)(v0 + 168) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v98, &v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of ReferenceResolutionClientProtocol?(v64, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        _os_log_impl(&dword_1B9C64000, v91, v89, "ConversationService bridge - state - turnStarted with rootrequestId - %s and startTurnRequestId - %s and sessionId - %s", (uint8_t *)v54, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](loga, -1, -1);
        MEMORY[0x1BA9E48C0](v54, -1, -1);

        outlined consume of ConversationService.State(v96, v93);
        id v38 = v95;
      }
      else
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        outlined destroy of ReferenceResolutionClientProtocol?(v52, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        outlined consume of ConversationService.State(v96, v7);
      }
    }
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 480) + 56))(*(void *)(v0 + 536), 1, 1, *(void *)(v0 + 472));
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationBridge);
    uint64_t v39 = Logger.logObject.getter();
    id v40 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v41 = 0;
      _os_log_impl(&dword_1B9C64000, v39, v40, "ConversationService bridge - state - idle state - rootRequestId - nil and startTurnRequestId - nil", v41, 2u);
      MEMORY[0x1BA9E48C0](v41, -1, -1);
    }

    id v38 = 0;
    id v16 = 0;
    uint64_t v30 = 0;
    uint64_t v17 = 0;
  }
  *(void *)(v0 + 576) = v16;
  *(void *)(v0 + 568) = v38;
  uint64_t v65 = *(void *)(v0 + 504);
  os_log_type_t v66 = *(void *)(v0 + 464);
  id v67 = *(void *)(v0 + 232);
  uint64_t v69 = *(void **)(v0 + 200);
  uint64_t v68 = *(char **)(v0 + 208);
  v70.value._uint64_t countAndFlagsBits = v30;
  v70.value._object = v17;
  *(Swift::String *)(v0 + 584) = SAIntentGroupRunSiriKitExecutor.executionRequestId(previousExecutionRequestId:)(v70);
  swift_bridgeObjectRelease();
  id v71 = ConversationService.combineTurnDataContext(rske:positionInSession:incomingRequestContextData:)(v69, v65, v68);
  *(void *)(v0 + 600) = v71;
  ConversationService.markBusy(doing:)();
  uint64_t v72 = *(void (**)(void *, uint64_t))(**(void **)(v67 + 200) + 128);
  swift_retain();
  v72(&async function pointer to partial apply for closure #1 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:), v67);
  swift_release();
  *(void *)(v0 + 608) = static SiriKitExecutorRunUtils.getInputAndRRData(from:requestContextData:)(v66, v69, v71);
  *(void *)(v0 + 616) = v73;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v74 = type metadata accessor for OSSignposter();
  unint64_t v75 = __swift_project_value_buffer(v74, (uint64_t)static Signposter.executor);
  swift_unknownObjectRetain();
  static OSSignpostID.exclusive.getter();
  uint64_t v99 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized OSSignposter.withIntervalSignpostAsync<A>(_:id:around:)
                                                                                           + async function pointer to specialized OSSignposter.withIntervalSignpostAsync<A>(_:id:around:));
  uint64_t v76 = (void *)swift_task_alloc();
  *(void *)(v0 + 624) = v76;
  *uint64_t v76 = v0;
  v76[1] = ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:);
  uint64_t v77 = *(void *)(v0 + 432);
  unint64_t v78 = *(void *)(v0 + 216);
  unint64_t v79 = *(void *)(v0 + 224);
  return v99((uint64_t)"FetchSpeechInfo", 15, 2, v77, v75, v78, v79);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = (void *)v0[90];
  uint64_t v2 = (void *)v0[80];
  uint64_t v3 = v0[42];
  outlined consume of Data?(v0[76], v0[77]);
  swift_release();

  swift_release();
  swift_release();

  outlined destroy of DecisionEngineResponse(v3, (uint64_t (*)(void))type metadata accessor for DecisionEngineResponse);
  uint64_t v4 = (void *)v0[75];
  uint64_t v5 = v0[67];
  uint64_t v6 = v0[63];
  uint64_t v7 = v0[29];
  (*(void (**)(void, void))(v0[56] + 8))(v0[58], v0[55]);
  $defer #1 () in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(v7, (uint64_t)&unk_1F137B7D8, (uint64_t)&unk_1F137B800, (uint64_t)&closure #1 in ConversationService.markNotBusyAsync()partial apply);

  outlined destroy of ReferenceResolutionClientProtocol?(v6, &demangling cache variable for type metadata for RequestPositionInSession?);
  outlined destroy of ReferenceResolutionClientProtocol?(v5, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 744) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 544);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:);
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 544);
    swift_bridgeObjectRelease();
    uint64_t v4 = ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:);
    uint64_t v5 = v6;
  }
  return MEMORY[0x1F4188298](v4, v5, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t (*v11)(void);
  void *v12;
  long long v13;
  uint64_t v14;

  (*(void (**)(void, void))(*(void *)(v0 + 448) + 8))(*(void *)(v0 + 456), *(void *)(v0 + 440));
  uint64_t v1 = *(void *)(v0 + 752);
  uint64_t v12 = *(void **)(v0 + 720);
  uint64_t v2 = *(void *)(v0 + 656);
  uint64_t v3 = *(void *)(v0 + 512);
  uint64_t v4 = *(void *)(v0 + 472);
  uint64_t v5 = *(void *)(v0 + 480);
  uint64_t v6 = *(void *)(v0 + 232);
  uint64_t v13 = *(_OWORD *)(v0 + 216);
  static ConversationSELFHelper.shared.getter();
  dispatch thunk of ConversationSELFHelper.emitExecutionPrepareTimeEnd(rcId:)();
  swift_release();
  *(void *)(v0 + 776) = static ConversationSELFHelper.shared.getter();
  Input.identifier.getter();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v3, 0, 1, v4);
  uint64_t v7 = swift_allocObject();
  *(void *)(v0 + 784) = v7;
  *(void *)(v7 + 16) = v6;
  *(void *)(v7 + 24) = v1;
  *(void *)(v7 + 32) = v12;
  *(void *)(v7 + 40) = v2;
  *(_OWORD *)(v7 + 48) = v13;
  uint64_t v11 = (uint64_t (*)(void))((int)*MEMORY[0x1E4FA1E00] + MEMORY[0x1E4FA1E00]);
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v8 = v12;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 792) = v9;
  void *v9 = v0;
  v9[1] = ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:);
  return v11();
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  uint64_t v1 = (void *)v0[90];
  uint64_t v2 = (void *)v0[80];
  outlined consume of Data?(v0[76], v0[77]);
  swift_release();

  swift_release();
  swift_release();

  uint64_t v3 = (void *)v0[75];
  uint64_t v4 = v0[67];
  uint64_t v5 = v0[63];
  uint64_t v6 = v0[58];
  uint64_t v8 = v0[55];
  uint64_t v7 = v0[56];
  uint64_t v9 = v0[29];
  outlined destroy of DecisionEngineResponse(v0[42], (uint64_t (*)(void))type metadata accessor for DecisionEngineResponse);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  $defer #1 () in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(v9, (uint64_t)&unk_1F137B7D8, (uint64_t)&unk_1F137B800, (uint64_t)&closure #1 in ConversationService.markNotBusyAsync()partial apply);

  outlined destroy of ReferenceResolutionClientProtocol?(v5, &demangling cache variable for type metadata for RequestPositionInSession?);
  outlined destroy of ReferenceResolutionClientProtocol?(v4, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t ObjectType;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t (*v45)(void);
  void *v46;
  void *v47;
  long long v48;
  uint64_t v49;

  uint64_t v1 = *(uint64_t **)(v0 + 336);
  uint64_t v2 = *v1;
  *(void *)(v0 + 752) = *v1;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 232);
    swift_retain();
    swift_bridgeObjectRelease();
    uint64_t v4 = *(void *)(v3 + 104);
    if ((v4 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v5 = __CocoaSet.count.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v5 = *(void *)(v4 + 16);
    }
    outlined init with copy of DecisionEngineResponse(*(void *)(v0 + 336), *(void *)(v0 + 328), (uint64_t (*)(void))type metadata accessor for DecisionEngineResponse);
    unint64_t v25 = *(void *)(v0 + 328);
    if (!v5)
    {
      outlined destroy of DecisionEngineResponse(v25, (uint64_t (*)(void))type metadata accessor for DecisionEngineResponse);
      goto LABEL_13;
    }
    uint64_t v26 = *(unsigned char *)(v25 + 8);
    outlined destroy of DecisionEngineResponse(v25, (uint64_t (*)(void))type metadata accessor for DecisionEngineResponse);
    if (v26)
    {
LABEL_13:
      uint64_t v30 = *(void *)(v0 + 752);
      uint64_t v46 = *(void **)(v0 + 720);
      uint64_t v31 = *(void *)(v0 + 656);
      id v32 = *(void *)(v0 + 512);
      unint64_t v33 = *(void *)(v0 + 472);
      uint64_t v34 = *(void *)(v0 + 480);
      uint64_t v35 = *(void *)(v0 + 232);
      unint64_t v48 = *(_OWORD *)(v0 + 216);
      static ConversationSELFHelper.shared.getter();
      dispatch thunk of ConversationSELFHelper.emitExecutionPrepareTimeEnd(rcId:)();
      swift_release();
      *(void *)(v0 + 776) = static ConversationSELFHelper.shared.getter();
      Input.identifier.getter();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v32, 0, 1, v33);
      id v36 = swift_allocObject();
      *(void *)(v0 + 784) = v36;
      *(void *)(v36 + 16) = v35;
      *(void *)(v36 + 24) = v30;
      *(void *)(v36 + 32) = v46;
      *(void *)(v36 + 40) = v31;
      *(_OWORD *)(v36 + 48) = v48;
      os_log_type_t v45 = (uint64_t (*)(void))((int)*MEMORY[0x1E4FA1E00] + MEMORY[0x1E4FA1E00]);
      swift_retain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_retain();
      uint64_t v37 = v46;
      id v38 = (void *)swift_task_alloc();
      *(void *)(v0 + 792) = v38;
      *id v38 = v0;
      v38[1] = ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:);
      return v45();
    }
    os_log_type_t v27 = *(void *)(v0 + 440);
    uint64_t v28 = *(void *)(v0 + 448);
    uint64_t v29 = *(void *)(v0 + 312);
    outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 336) + *(int *)(*(void *)(v0 + 320) + 24), v29, &demangling cache variable for type metadata for Input?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v29, 1, v27) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 312), &demangling cache variable for type metadata for Input?);
      goto LABEL_13;
    }
    (*(void (**)(void, void, void))(*(void *)(v0 + 448) + 32))(*(void *)(v0 + 456), *(void *)(v0 + 312), *(void *)(v0 + 440));
    return MEMORY[0x1F4188298](ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:), 0, 0);
  }
  else
  {
    uint64_t v44 = *(void **)(v0 + 720);
    uint64_t v47 = *(void **)(v0 + 640);
    uint64_t v42 = *(void *)(v0 + 608);
    uint64_t v43 = *(void *)(v0 + 616);
    uint64_t v39 = *(void *)(v0 + 584);
    id v40 = *(void *)(v0 + 592);
    uint64_t v7 = *(void *)(v0 + 272);
    uint64_t v6 = *(void *)(v0 + 280);
    uint64_t v8 = *(void *)(v0 + 256);
    uint64_t v9 = *(void *)(v0 + 264);
    uint64_t v11 = *(void *)(v0 + 240);
    uint64_t v10 = *(void *)(v0 + 248);
    uint64_t v12 = *(void *)(v0 + 224);
    swift_release();
    ObjectType = swift_getObjectType();
    uint64_t v13 = type metadata accessor for FlowOutputMessage.InAppResponse();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v6, 1, 1, v13);
    (*(void (**)(uint64_t, void, uint64_t))(v10 + 104))(v9, *MEMORY[0x1E4FA24B8], v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v8, v9, v11);
    outlined init with copy of ReferenceResolutionClientProtocol?(v6, v7, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
    uint64_t v14 = objc_allocWithZone((Class)type metadata accessor for ExecutionOutput());
    uint64_t v15 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:executionSource:inAppResponse:)(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v39, v40, v8, v7);
    outlined destroy of ReferenceResolutionClientProtocol?(v6, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    (*(void (**)(id, unint64_t, unint64_t, uint64_t, uint64_t))(v12 + 32))(v15, 0xD00000000000001DLL, 0x80000001BA066AB0, ObjectType, v12);
    outlined consume of Data?(v42, v43);

    swift_release();
    id v16 = *(void **)(v0 + 600);
    uint64_t v17 = *(void *)(v0 + 536);
    uint64_t v18 = *(void *)(v0 + 504);
    uint64_t v19 = *(void *)(v0 + 464);
    uint64_t v21 = *(void *)(v0 + 440);
    uint64_t v20 = *(void *)(v0 + 448);
    uint64_t v22 = *(void *)(v0 + 232);
    outlined destroy of DecisionEngineResponse(*(void *)(v0 + 336), (uint64_t (*)(void))type metadata accessor for DecisionEngineResponse);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    $defer #1 () in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(v22, (uint64_t)&unk_1F137B7D8, (uint64_t)&unk_1F137B800, (uint64_t)&closure #1 in ConversationService.markNotBusyAsync()partial apply);

    outlined destroy of ReferenceResolutionClientProtocol?(v18, &demangling cache variable for type metadata for RequestPositionInSession?);
    outlined destroy of ReferenceResolutionClientProtocol?(v17, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
    return v23();
  }
}

{
  uint64_t *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, unint64_t);
  uint64_t v10;

  uint64_t v1 = (void *)*v0;
  uint64_t v2 = *(void *)(*v0 + 656);
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v4 = OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_eventSender;
  v1[88] = OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_eventSender;
  uint64_t v5 = v2 + v4;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))((char *)&async function pointer to specialized static SiriKitMetricsUtils.emitSessionStarted(input:eventSender:resultCandidateId:)
                                                                           + async function pointer to specialized static SiriKitMetricsUtils.emitSessionStarted(input:eventSender:resultCandidateId:));
  uint64_t v6 = (void *)swift_task_alloc();
  v1[89] = v6;
  *uint64_t v6 = v3;
  v6[1] = ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:);
  uint64_t v7 = v1[58];
  return v9(v7, v5, 12589, 0xE200000000000000);
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = (void *)v0[90];
  uint64_t v2 = (void *)v0[80];
  outlined consume of Data?(v0[76], v0[77]);
  swift_release();
  swift_release();

  uint64_t v3 = (void *)v0[75];
  uint64_t v4 = v0[67];
  uint64_t v5 = v0[63];
  uint64_t v6 = v0[29];
  (*(void (**)(void, void))(v0[56] + 8))(v0[58], v0[55]);
  $defer #1 () in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(v6, (uint64_t)&unk_1F137B7D8, (uint64_t)&unk_1F137B800, (uint64_t)&closure #1 in ConversationService.markNotBusyAsync()partial apply);

  outlined destroy of ReferenceResolutionClientProtocol?(v5, &demangling cache variable for type metadata for RequestPositionInSession?);
  outlined destroy of ReferenceResolutionClientProtocol?(v4, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  unsigned __int8 v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = v0[29];
  uint64_t v2 = *(void **)(v1 + 112);
  *(void *)(v1 + 112) = v0[82];
  uint64_t v3 = *(unsigned char *)(v1 + 120);
  *(unsigned char *)(v1 + 120) = 0x80;
  swift_retain();
  outlined consume of ConversationService.State(v2, v3);
  Input.parse.getter();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[84] = v4;
  *uint64_t v4 = v0;
  v4[1] = ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:);
  uint64_t v5 = v0[82];
  uint64_t v6 = v0[48];
  return specialized ConversationService.updateRequestHandlingExecutionSystem(activeTurn:rcId:parse:)(v5, 12589, 0xE200000000000000, v6);
}

{
  uint64_t *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void *v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v1 = (void *)*v0;
  uint64_t v2 = *(void *)(*v0 + 384);
  uint64_t v3 = *(void *)(*v0 + 376);
  uint64_t v4 = *(void *)(*v0 + 368);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v1[85] = v6;
  v1[86] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v2, v4);
  uint64_t v7 = (void *)swift_task_alloc();
  v1[87] = v7;
  char *v7 = v5;
  v7[1] = ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:);
  uint64_t v8 = v1[82];
  return specialized ConversationService.maybeSubmitRequestHandlingUpdate(activeTurn:rcId:bridge:)(v8, 12589, 0xE200000000000000);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 544);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:), v1, 0);
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;

  uint64_t v2 = v0[37];
  uint64_t v1 = (uint64_t *)v0[38];
  uint64_t v3 = v0[36];
  uint64_t v4 = (void *)(v0[82] + v0[88]);
  uint64_t v5 = v4[3];
  uint64_t v6 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v5);
  type metadata accessor for SiriKitEvent();
  uint64_t *v1 = specialized static SiriKitMetricsUtils.extractIntentTypeName(input:)();
  v1[1] = v7;
  (*(void (**)(uint64_t *, void, uint64_t))(v2 + 104))(v1, *MEMORY[0x1E4FA1908], v3);
  uint64_t v8 = SiriKitEvent.__allocating_init(_:builder:)();
  v0[95] = v8;
  uint64_t v9 = (void *)swift_task_alloc();
  v0[96] = v9;
  void *v9 = v0;
  v9[1] = ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:);
  return MEMORY[0x1F4151BE0](v8, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 544);
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:), v1, 0);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = (void *)v0[80];
  outlined consume of Data?(v0[76], v0[77]);
  swift_release();

  uint64_t v2 = (void *)v0[75];
  uint64_t v3 = v0[67];
  uint64_t v4 = v0[63];
  uint64_t v5 = v0[29];
  (*(void (**)(void, void))(v0[56] + 8))(v0[58], v0[55]);
  $defer #1 () in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(v5, (uint64_t)&unk_1F137B7D8, (uint64_t)&unk_1F137B800, (uint64_t)&closure #1 in ConversationService.markNotBusyAsync()partial apply);

  outlined destroy of ReferenceResolutionClientProtocol?(v4, &demangling cache variable for type metadata for RequestPositionInSession?);
  outlined destroy of ReferenceResolutionClientProtocol?(v3, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[79] = v1;
  swift_task_dealloc();
  swift_unknownObjectRelease();
  if (v1)
  {
    uint64_t v5 = v4[68];
    (*(void (**)(void, void))(v4[53] + 8))(v4[54], v4[52]);
    return MEMORY[0x1F4188298](ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:), v5, 0);
  }
  else
  {
    (*(void (**)(void, void))(v4[53] + 8))(v4[54], v4[52]);
    v4[80] = a1;
    uint64_t v6 = v4[25];
    uint64_t v7 = (void *)swift_task_alloc();
    v4[81] = v7;
    void *v7 = v4;
    v7[1] = ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:);
    uint64_t v8 = v4[76];
    uint64_t v9 = v4[75];
    uint64_t v10 = v4[74];
    uint64_t v11 = v4[72];
    uint64_t v12 = v4[71];
    uint64_t v13 = v4[67];
    uint64_t v14 = v4[73];
    return ConversationService.setupNewTurn(executionRequestId:rootRequestId:sessionId:contextData:runSiriKitExecutor:scopedRRData:bridge:)(v14, v10, v12, v11, v13, v9, v6, v8);
  }
}

{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v3 = (void *)*v2;
  v3[82] = a1;
  v3[83] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[68];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:);
    uint64_t v6 = v4;
  }
  else
  {
    uint64_t v7 = v3[68];
    swift_bridgeObjectRelease();
    uint64_t v5 = ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:);
    uint64_t v6 = v7;
  }
  return MEMORY[0x1F4188298](v5, v6, 0);
}

Swift::String __swiftcall SAIntentGroupRunSiriKitExecutor.executionRequestId(previousExecutionRequestId:)(Swift::String_optional previousExecutionRequestId)
{
  object = previousExecutionRequestId.value._object;
  uint64_t countAndFlagsBits = previousExecutionRequestId.value._countAndFlagsBits;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = objc_msgSend(v1, sel_refId);
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    object = v10;
  }
  else if (object)
  {
    uint64_t v11 = one-time initialization token for executor;
    swift_bridgeObjectRetain();
    if (v11 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.executor);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_1B9C64000, v13, v14, "[Conversation] RSKE has no refId: Falling back on previous executionRequestId", v15, 2u);
      MEMORY[0x1BA9E48C0](v15, -1, -1);
    }
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.executor);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl(&dword_1B9C64000, v17, v18, "[Conversation] RSKE has no refId: Will generate new executionRequestId", v19, 2u);
      MEMORY[0x1BA9E48C0](v19, -1, -1);
    }

    UUID.init()();
    uint64_t countAndFlagsBits = UUID.uuidString.getter();
    object = v20;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  uint64_t v21 = countAndFlagsBits;
  uint64_t v22 = object;
  result._object = v22;
  result._uint64_t countAndFlagsBits = v21;
  return result;
}

uint64_t ConversationService.combineTurnDataContext(rske:positionInSession:incomingRequestContextData:)(void *a1, uint64_t a2, char *a3)
{
  uint64_t v4 = v3;
  uint64_t v64 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestPositionInSession?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v62 = &v58[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = &v58[-v11];
  MEMORY[0x1F4188790](v10);
  os_log_type_t v14 = &v58[-v13];
  uint64_t v15 = type metadata accessor for RequestPositionInSession();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  id v61 = &v58[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v17);
  unint64_t v60 = &v58[-v19];
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseMode?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v23 = &v58[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v24 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *(void *)a3) + 0x170);
  uint64_t v63 = a3;
  uint64_t v25 = v24(v21);
  swift_beginAccess();
  int v26 = *(unsigned __int8 *)(v4 + 120);
  if ((v26 & 0xC0) == 0x80)
  {
    os_log_type_t v27 = *(char **)(v4 + 112);
    swift_retain();
    id v28 = objc_msgSend(a1, sel_mode);
    if (v28)
    {
    }
    else
    {
      uint64_t v29 = v27;
      int v59 = v26;
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      __swift_project_value_buffer(v30, (uint64_t)static Logger.executor);
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v31, v32))
      {
        unint64_t v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v33 = 0;
        _os_log_impl(&dword_1B9C64000, v31, v32, "Fallback to ResponseMode in RequestContextData when rske mode is nil", v33, 2u);
        MEMORY[0x1BA9E48C0](v33, -1, -1);
      }

      uint64_t v34 = v29;
      uint64_t v35 = &v29[OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData];
      uint64_t v36 = *(void *)&v35[*(int *)(type metadata accessor for RemoteConversationTurnData(0) + 28)]
          + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_responseMode;
      uint64_t v37 = type metadata accessor for ResponseMode();
      uint64_t v38 = *(void *)(v37 - 8);
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v38 + 16))(v23, v36, v37);
      uint64_t v39 = v37;
      os_log_type_t v27 = v34;
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v38 + 56))(v23, 0, 1, v39);
      (*(void (**)(unsigned char *))(*(void *)v25 + 1064))(v23);
      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v23, &demangling cache variable for type metadata for ResponseMode?);
      int v26 = v59;
    }
    if (*(_DWORD *)&v63[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_voiceAudioSessionId])
    {
      outlined consume of ConversationService.State(v27, v26);
    }
    else
    {
      int v59 = v26;
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v40 = type metadata accessor for Logger();
      __swift_project_value_buffer(v40, (uint64_t)static Logger.executor);
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = v27;
        uint64_t v44 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v44 = 0;
        _os_log_impl(&dword_1B9C64000, v41, v42, "Fallback to voiceAudioSessionId in RequestContextData when incoming session is unset", v44, 2u);
        os_log_type_t v45 = v44;
        os_log_type_t v27 = v43;
        MEMORY[0x1BA9E48C0](v45, -1, -1);
      }

      uint64_t v46 = &v27[OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData];
      uint64_t v47 = *(unsigned int *)(*(void *)&v46[*(int *)(type metadata accessor for RemoteConversationTurnData(0) + 28)]
                            + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_voiceAudioSessionId);
      unint64_t v48 = *(void (**)(uint64_t))(*(void *)v25 + 1216);
      char v65 = 0;
      v48(v47);
      outlined consume of ConversationService.State(v27, v59);
      swift_release();
    }
  }
  outlined init with copy of ReferenceResolutionClientProtocol?(v64, (uint64_t)v14, &demangling cache variable for type metadata for RequestPositionInSession?);
  id v49 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v16 + 48);
  if (v49(v14, 1, v15) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for RequestPositionInSession?);
    os_log_type_t v50 = *(void (**)(unsigned char *, char *, uint64_t))(v16 + 16);
    v50(v12, &v63[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_positionInSession], v15);
    id v51 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v16 + 56);
    v51(v12, 0, 1, v15);
    (*(void (**)(unsigned char *))(*(void *)v25 + 1248))(v12);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, &demangling cache variable for type metadata for RequestPositionInSession?);
  }
  else
  {
    uint64_t v52 = v60;
    (*(void (**)(char *, unsigned char *, uint64_t))(v16 + 32))(v60, v14, v15);
    os_log_type_t v50 = *(void (**)(unsigned char *, char *, uint64_t))(v16 + 16);
    v50(v12, v52, v15);
    id v51 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v16 + 56);
    v51(v12, 0, 1, v15);
    (*(void (**)(unsigned char *))(*(void *)v25 + 1248))(v12);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, &demangling cache variable for type metadata for RequestPositionInSession?);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v52, v15);
  }
  id v53 = v62;
  outlined init with copy of ReferenceResolutionClientProtocol?(v64, (uint64_t)v62, &demangling cache variable for type metadata for RequestPositionInSession?);
  if (v49(v53, 1, v15) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v53, &demangling cache variable for type metadata for RequestPositionInSession?);
    v50(v12, &v63[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_positionInSession], v15);
    v51(v12, 0, 1, v15);
    (*(void (**)(unsigned char *))(*(void *)v25 + 1248))(v12);
    swift_release();
    uint64_t v54 = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, &demangling cache variable for type metadata for RequestPositionInSession?);
  }
  else
  {
    uint64_t v55 = v61;
    (*(void (**)(char *, unsigned char *, uint64_t))(v16 + 32))(v61, v53, v15);
    v50(v12, v55, v15);
    v51(v12, 0, 1, v15);
    (*(void (**)(unsigned char *))(*(void *)v25 + 1248))(v12);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, &demangling cache variable for type metadata for RequestPositionInSession?);
    uint64_t v54 = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v55, v15);
  }
  uint64_t v56 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 1280))(v54);
  swift_release();
  return v56;
}

uint64_t ConcurrentTaskPool.add(work:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = a1;
  v9[5] = a2;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in ConcurrentTaskPool.add(work:), (uint64_t)v9);
  (*(void (**)(void))(*(void *)v2 + 120))();
  return swift_release();
}

id static SiriKitExecutorRunUtils.getInputAndRRData(from:requestContextData:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v46 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitConfirmationState?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for Parse();
  uint64_t v8 = *(void *)(v45 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v45);
  uint64_t v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v45 - v12;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ExecuteOnRemotePayload?);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for ExecuteOnRemotePayload();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (SAIntentGroupRunSiriKitExecutor.hasExecuteOnRemotePayload.getter())
  {
    SAIntentGroupRunSiriKitExecutor.executeOnRemotePayload()();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v16, v17);
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v40 = type metadata accessor for Logger();
      __swift_project_value_buffer(v40, (uint64_t)static Logger.executor);
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = (uint8_t *)swift_slowAlloc();
        uint64_t v44 = swift_slowAlloc();
        v48[0] = v44;
        *(_DWORD *)uint64_t v43 = 136315138;
        v47[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002BLL, 0x80000001BA06E9D0, v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1B9C64000, v41, v42, "%s: Found ExecuteOnRemote payload from remote device in RunSiriKitExecutor command, using that as Input", v43, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v44, -1, -1);
        MEMORY[0x1BA9E48C0](v43, -1, -1);
      }

      ExecuteOnRemotePayload.input.getter();
      uint64_t v39 = ExecuteOnRemotePayload.rrData.getter();
      (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
      return (id)v39;
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, &demangling cache variable for type metadata for ExecuteOnRemotePayload?);
  }
  id result = objc_msgSend(a2, sel_parse, v45, v46);
  if (result)
  {
    uint64_t v22 = result;
    uint64_t v23 = *(void **)(a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_peerInfo);
    uint64_t v24 = type metadata accessor for PeerInfoProvider();
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = v23;
    v48[3] = v24;
    v48[4] = _s14SiriKitRuntime16PeerInfoProviderCAC0aB4Flow0dE9ProvidingAAWlTm_1(&lazy protocol witness table cache variable for type PeerInfoProvider and conformance PeerInfoProvider, (void (*)(uint64_t))type metadata accessor for PeerInfoProvider);
    v48[0] = v25;
    int v26 = *(void **)(a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_endpointInfo);
    uint64_t v27 = type metadata accessor for EndpointInfoProvider();
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = v26;
    v47[3] = v27;
    v47[4] = _s14SiriKitRuntime16PeerInfoProviderCAC0aB4Flow0dE9ProvidingAAWlTm_1(&lazy protocol witness table cache variable for type EndpointInfoProvider and conformance EndpointInfoProvider, (void (*)(uint64_t))type metadata accessor for EndpointInfoProvider);
    v47[0] = v28;
    id v29 = v26;
    id v30 = v23;
    id v31 = objc_msgSend(a2, sel_confirmationState);
    if (!v31)
    {
      uint64_t v33 = type metadata accessor for SiriKitConfirmationState();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v7, 1, 1, v33);
      goto LABEL_9;
    }

    id result = objc_msgSend(a2, sel_confirmationState);
    if (result)
    {
      os_log_type_t v32 = result;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      SiriKitConfirmationState.init(rawValue:)();
LABEL_9:
      id v34 = objc_msgSend(a2, sel_parameterMetadata);
      if (v34)
      {
        uint64_t v35 = v34;
        type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAIntentGroupSiriKitParameterMetadata);
        unint64_t v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {
        unint64_t v36 = 0;
      }
      id v37 = objc_msgSend(a2, sel_appSelectionState);
      static SiriKitExecutorRunUtils.makeParse(aceParse:peerInfo:endpointInfo:confirmationState:aceParameterMetadata:appSelectionState:)(v22, v48, v47, (uint64_t)v7, v36, v37, (uint64_t)v13);

      swift_bridgeObjectRelease();
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, &demangling cache variable for type metadata for SiriKitConfirmationState?);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v47);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v48);
      specialized static SiriKitExecutorRunUtils.makeAlternatives(from:)(a2);
      uint64_t v38 = v45;
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v45);
      Input.init(parse:alternatives:)();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v38);
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  void *v2 = v1;
  v2[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  v2[2] = v0;
  return MEMORY[0x1F4188298](closure #1 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:), 0, 0);
}

uint64_t type metadata accessor for PeerInfoProvider()
{
  return self;
}

uint64_t type metadata accessor for EndpointInfoProvider()
{
  return self;
}

uint64_t static SiriKitExecutorRunUtils.makeParse(aceParse:peerInfo:endpointInfo:confirmationState:aceParameterMetadata:appSelectionState:)@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  id v154 = a6;
  uint64_t v155 = a4;
  unint64_t v160 = a5;
  v152 = a2;
  uint64_t v153 = a3;
  uint64_t v144 = type metadata accessor for Parse.PegasusResult();
  uint64_t v143 = *(void *)(v144 - 8);
  MEMORY[0x1F4188790](v144);
  v142 = (char *)v136 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1F4188790](v11 - 8);
  v136[1] = (char *)v136 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v139 = (objc_class *)((char *)v136 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v141 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  uint64_t v140 = *(void *)(v141 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v141);
  uint64_t v137 = (char *)v136 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v138 = (char *)v136 - v17;
  uint64_t v18 = type metadata accessor for String.Encoding();
  uint64_t v145 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)v136 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitConfirmationState?);
  uint64_t v22 = MEMORY[0x1F4188790](v21 - 8);
  uint64_t v146 = (uint64_t)v136 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)v136 - v24;
  uint64_t v26 = type metadata accessor for SiriKitConfirmationState();
  uint64_t v150 = *(void *)(v26 - 8);
  uint64_t v151 = v26;
  uint64_t v27 = MEMORY[0x1F4188790](v26);
  v149 = (char *)v136 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  id v30 = (char *)v136 - v29;
  uint64_t v158 = type metadata accessor for AppResolutionStateProvider();
  uint64_t v156 = *(void *)(v158 - 8);
  uint64_t v31 = MEMORY[0x1F4188790](v158);
  uint64_t v148 = (char *)v136 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v31);
  unint64_t v34 = (unint64_t)v136 - v33;
  uint64_t v159 = type metadata accessor for NLIntent();
  uint64_t v157 = *(void *)(v159 - 8);
  uint64_t v35 = MEMORY[0x1F4188790](v159);
  v147 = (char *)v136 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v35);
  uint64_t v38 = (char *)v136 - v37;
  uint64_t v162 = a1;
  id v39 = objc_msgSend(a1, sel_type);
  if (!v39) {
    goto LABEL_73;
  }
  uint64_t v40 = v39;
  uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v42;

  uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Class isa = v44;
  if (!v7)
  {
LABEL_74:
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();
    unint64_t v34 = (unint64_t)v162;
    goto LABEL_75;
  }
  uint64_t v161 = a7;
  if (v43 != v41 || v7 != v44)
  {
    char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v46) {
      goto LABEL_7;
    }
    uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Class isa = v55;
    if (v54 == v41 && v7 == v55)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v56 & 1) == 0)
      {
        uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v25 = v78;
        if (v77 == v41 && v7 == (objc_class *)v78)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v79 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v79 & 1) == 0)
          {
            if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v41 && v7 == v101)
            {
              swift_bridgeObjectRelease();
              unint64_t v34 = (unint64_t)v162;
            }
            else
            {
              char v102 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              unint64_t v34 = (unint64_t)v162;
              if ((v102 & 1) == 0)
              {
                if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v41 && v7 == v110)
                {
                  swift_bridgeObjectRelease();
                }
                else
                {
                  char v115 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  if ((v115 & 1) == 0)
                  {
                    if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v41 && v7 == v128)
                    {
                      swift_bridgeObjectRelease_n();
                    }
                    else
                    {
                      char v129 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if ((v129 & 1) == 0)
                      {
LABEL_75:
                        *(void *)&long long v164 = 0;
                        *((void *)&v164 + 1) = 0xE000000000000000;
                        _StringGuts.grow(_:)(22);
                        swift_bridgeObjectRelease();
                        *(void *)&long long v164 = 0xD000000000000014;
                        *((void *)&v164 + 1) = 0x80000001BA06EA50;
                        id v132 = objc_msgSend((id)v34, sel_type);
                        if (v132)
                        {
                          uint64_t v133 = v132;
                          unint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                          uint64_t v25 = v134;
                        }
                        else
                        {
                          uint64_t v25 = (char *)0xE500000000000000;
                          unint64_t v34 = 0x3E4C494E3CLL;
                        }
                        v135._uint64_t countAndFlagsBits = v34;
                        v135._object = v25;
                        String.append(_:)(v135);
                        swift_bridgeObjectRelease();
                        specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(v164, *((unint64_t *)&v164 + 1), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/SiriKitExecutorRunUtils.swift", 98, 2, 144);
                        __break(1u);
LABEL_79:

                        goto LABEL_80;
                      }
                    }
                    uint64_t v48 = *MEMORY[0x1E4FA1F58];
                    uint64_t v130 = type metadata accessor for Parse();
                    os_log_type_t v50 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v130 - 8) + 104);
                    uint64_t v51 = v130;
                    uint64_t v52 = v161;
                    goto LABEL_8;
                  }
                }
                swift_bridgeObjectRelease();
                id v116 = objc_msgSend((id)v34, sel_pegasusResults);
                if (v116)
                {
                  uint64_t v117 = v116;
                  id v118 = objc_msgSend(v116, sel_data);

                  Class isa = (Class)v141;
                  uint64_t v7 = v139;
                  if (v118)
                  {
                    uint64_t v119 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
                    unint64_t v121 = v120;

                    uint64_t v166 = 0;
                    long long v164 = 0u;
                    long long v165 = 0u;
                    outlined copy of Data._Representation(v119, v121);
                    BinaryDecodingOptions.init()();
                    _s14SiriKitRuntime16PeerInfoProviderCAC0aB4Flow0dE9ProvidingAAWlTm_1(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse, MEMORY[0x1E4F88740]);
                    Message.init(serializedData:extensions:partial:options:)();
                    uint64_t v122 = v140;
                    (*(void (**)(objc_class *, void, uint64_t, Class))(v140 + 56))(v7, 0, 1, isa);
                    uint64_t v123 = v138;
                    (*(void (**)(char *, objc_class *, Class))(v122 + 32))(v138, v7, isa);
                    (*(void (**)(char *, char *, Class))(v122 + 16))(v137, v123, isa);
                    uint64_t v124 = v142;
                    Parse.PegasusResult.init(pegasusResponse:)();
                    outlined consume of Data._Representation(v119, v121);
                    (*(void (**)(char *, Class))(v122 + 8))(v123, isa);
                    uint64_t v125 = v161;
                    (*(void (**)(uint64_t, char *, uint64_t))(v143 + 32))(v161, v124, v144);
                    uint64_t v126 = *MEMORY[0x1E4FA1F10];
                    uint64_t v127 = type metadata accessor for Parse();
                    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v127 - 8) + 104))(v125, v126, v127);
                  }
                  goto LABEL_87;
                }
                goto LABEL_72;
              }
            }
            swift_bridgeObjectRelease();
            id v103 = (char *)objc_msgSend((id)v34, sel_directInvocation);
            if (!v103)
            {
LABEL_86:
              specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD00000000000004ELL, 0x80000001BA06EB40, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/SiriKitExecutorRunUtils.swift", 98, 2, 116);
              __break(1u);
LABEL_87:
              specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000023, 0x80000001BA06EAE0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/SiriKitExecutorRunUtils.swift", 98, 2, 131);
              __break(1u);

              (*(void (**)(objc_class *, uint64_t, uint64_t, Class))(v140 + 56))(v7, 1, 1, isa);
              outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse?);
              uint64_t result = specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD00000000000002BLL, 0x80000001BA06EB10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/SiriKitExecutorRunUtils.swift", 98, 2, 135);
              __break(1u);
              return result;
            }
            uint64_t v25 = v103;
            Class isa = (Class)&selRef_scrollProtocol;
            id v104 = objc_msgSend(v103, sel_invocationIdentifier);
            if (!v104)
            {
LABEL_85:

              goto LABEL_86;
            }

            id v105 = objc_msgSend(v25, sel_data);
            if (v105)
            {
              v106 = v105;
              uint64_t v107 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v109 = v108;

              if (v109 >> 60 != 15)
              {
                *(void *)&long long v164 = v107;
                *((void *)&v164 + 1) = v109;
                closure #1 in static SiriKitExecutorRunUtils.makeParse(aceParse:peerInfo:endpointInfo:confirmationState:aceParameterMetadata:appSelectionState:)(&v163);
                outlined consume of Data?(v107, v109);
              }
            }
            id v111 = objc_msgSend(v25, sel_invocationIdentifier);
            if (v111)
            {
              os_log_type_t v112 = v111;
              static String._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v113 = v161;
              Parse.DirectInvocation.init(identifier:userData:)();

              uint64_t v48 = *MEMORY[0x1E4FA1F38];
              uint64_t v114 = type metadata accessor for Parse();
              os_log_type_t v50 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v114 - 8) + 104);
              uint64_t v51 = v114;
              uint64_t v52 = v113;
              goto LABEL_8;
            }
LABEL_71:
            __break(1u);
LABEL_72:
            __break(1u);
LABEL_73:
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            Class isa = v131;
            goto LABEL_74;
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v80 = v162;
        id v81 = objc_msgSend(v162, sel_jsonIntent);
        if (!v81)
        {
LABEL_83:
          specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000033, 0x80000001BA06EB90, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/SiriKitExecutorRunUtils.swift", 98, 2, 97);
          __break(1u);
LABEL_84:
          specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD00000000000002FLL, 0x80000001BA06EBD0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/SiriKitExecutorRunUtils.swift", 98, 2, 102);
          __break(1u);
          goto LABEL_85;
        }
        unint64_t v34 = (unint64_t)v81;
        uint64_t v25 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v82 = (objc_class *)objc_msgSend(v80, sel_jsonIntentTypeName);
        if (v82)
        {
          uint64_t v7 = v82;
          static String.Encoding.utf8.getter();
          uint64_t v25 = (char *)String.data(using:allowLossyConversion:)();
          unint64_t v34 = v83;
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v145 + 8))(v20, v18);
          if (v34 >> 60 == 15)
          {
            Class isa = 0;
          }
          else
          {
            outlined copy of Data._Representation((uint64_t)v25, v34);
            Class isa = Data._bridgeToObjectiveC()().super.isa;
            outlined consume of Data?((uint64_t)v25, v34);
          }
          uint64_t v84 = v162;
          unint64_t v86 = v149;
          uint64_t v85 = v150;
          uint64_t v87 = v148;
          uint64_t v88 = v147;
          id v89 = (id)INIntentCreate();

          if (v89)
          {
            specialized static SiriKitExecutorRunUtils.addIntentMetadata(intent:peerInfo:endpointInfo:)(v89, v152, v153);
            static SiriKitExecutorRunUtils.makeNLv3Parse(parse:)(v84);
            id v90 = v154;
            AppResolutionStateProvider.init(appSelectionState:)();
            uint64_t v91 = v146;
            outlined init with copy of ReferenceResolutionClientProtocol?(v155, v146, &demangling cache variable for type metadata for SiriKitConfirmationState?);
            uint64_t v92 = v151;
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48))(v91, 1, v151) == 1)
            {
              (*(void (**)(char *, void, uint64_t))(v85 + 104))(v86, *MEMORY[0x1E4FA1A28], v92);
              outlined destroy of ReferenceResolutionClientProtocol?(v91, &demangling cache variable for type metadata for SiriKitConfirmationState?);
            }
            else
            {
              (*(void (**)(char *, uint64_t, uint64_t))(v85 + 32))(v86, v91, v92);
            }
            if (v160) {
              unint64_t v93 = v160;
            }
            else {
              unint64_t v93 = MEMORY[0x1E4FBC860];
            }
            swift_bridgeObjectRetain();
            specialized static SiriKitExecutorRunUtils.makeSiriKitParameterMetadata(aceParameterMetadata:)(v93);
            swift_bridgeObjectRelease();
            uint64_t v94 = v158;
            *((void *)&v165 + 1) = v158;
            uint64_t v166 = MEMORY[0x1E4F9F9E0];
            boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v164);
            uint64_t v96 = v156;
            (*(void (**)(uint64_t *, char *, uint64_t))(v156 + 16))(boxed_opaque_existential_0, v87, v94);
            type metadata accessor for Parse.ServerConversion();
            swift_allocObject();
            uint64_t v97 = Parse.ServerConversion.init(siriKitIntent:confirmationState:parameterMetadata:appResolutionStateProviding:)();
            outlined consume of Data?((uint64_t)v25, v34);
            (*(void (**)(char *, uint64_t))(v96 + 8))(v87, v94);
            uint64_t v98 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion))
                         + 48);
            uint64_t v76 = v161;
            (*(void (**)(uint64_t, char *, uint64_t))(v157 + 32))(v161, v88, v159);
            *(void *)(v76 + v98) = v97;
            goto LABEL_44;
          }
          goto LABEL_84;
        }
LABEL_82:
        swift_bridgeObjectRelease();
        goto LABEL_83;
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v57 = v162;
    id v58 = objc_msgSend(v162, sel_siriKitIntent);
    if (v58)
    {
      int v59 = v58;
      uint64_t v7 = (objc_class *)objc_msgSend(v58, sel_typeName);

      if (!v7)
      {
LABEL_80:
        specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000020, 0x80000001BA06EC00, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/SiriKitExecutorRunUtils.swift", 98, 2, 77);
        __break(1u);
LABEL_81:
        specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000024, 0x80000001BA06EC30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/SiriKitExecutorRunUtils.swift", 98, 2, 81);
        __break(1u);
        goto LABEL_82;
      }
      id v60 = objc_msgSend(v57, sel_siriKitIntent);
      if (v60)
      {
        id v61 = v60;
        id v62 = objc_msgSend(v60, sel_data);

        if (v62)
        {
          uint64_t v63 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          Class isa = v64;

          Class v65 = Data._bridgeToObjectiveC()().super.isa;
          id v66 = (id)INIntentCreate();

          if (v66)
          {
            specialized static SiriKitExecutorRunUtils.addIntentMetadata(intent:peerInfo:endpointInfo:)(v66, v152, v153);
            static SiriKitExecutorRunUtils.makeNLv3Parse(parse:)(v57);
            id v67 = v154;
            AppResolutionStateProvider.init(appSelectionState:)();
            outlined init with copy of ReferenceResolutionClientProtocol?(v155, (uint64_t)v25, &demangling cache variable for type metadata for SiriKitConfirmationState?);
            uint64_t v69 = v150;
            uint64_t v68 = v151;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v150 + 48))(v25, 1, v151) == 1)
            {
              (*(void (**)(char *, void, uint64_t))(v69 + 104))(v30, *MEMORY[0x1E4FA1A28], v68);
              outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v25, &demangling cache variable for type metadata for SiriKitConfirmationState?);
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v30, v25, v68);
            }
            if (v160) {
              unint64_t v70 = v160;
            }
            else {
              unint64_t v70 = MEMORY[0x1E4FBC860];
            }
            swift_bridgeObjectRetain();
            specialized static SiriKitExecutorRunUtils.makeSiriKitParameterMetadata(aceParameterMetadata:)(v70);
            swift_bridgeObjectRelease();
            uint64_t v71 = v158;
            *((void *)&v165 + 1) = v158;
            uint64_t v166 = MEMORY[0x1E4F9F9E0];
            uint64_t v72 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v164);
            uint64_t v73 = v156;
            (*(void (**)(uint64_t *, unint64_t, uint64_t))(v156 + 16))(v72, v34, v71);
            type metadata accessor for Parse.ServerConversion();
            swift_allocObject();
            uint64_t v74 = Parse.ServerConversion.init(siriKitIntent:confirmationState:parameterMetadata:appResolutionStateProviding:)();
            outlined consume of Data._Representation(v63, (unint64_t)isa);
            (*(void (**)(unint64_t, uint64_t))(v73 + 8))(v34, v71);
            uint64_t v75 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion))
                         + 48);
            uint64_t v76 = v161;
            (*(void (**)(uint64_t, char *, uint64_t))(v157 + 32))(v161, v38, v159);
            *(void *)(v76 + v75) = v74;
LABEL_44:
            uint64_t v99 = *MEMORY[0x1E4FA1F40];
            uint64_t v100 = type metadata accessor for Parse();
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v100 - 8) + 104))(v76, v99, v100);
          }
          goto LABEL_81;
        }
        goto LABEL_79;
      }
    }
    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_71;
  }
  swift_bridgeObjectRelease();
LABEL_7:
  swift_bridgeObjectRelease();
  uint64_t v47 = v161;
  static SiriKitExecutorRunUtils.makeNLv3Parse(parse:)(v162);
  uint64_t v48 = *MEMORY[0x1E4FA1F00];
  uint64_t v49 = type metadata accessor for Parse();
  os_log_type_t v50 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 104);
  uint64_t v51 = v49;
  uint64_t v52 = v47;
LABEL_8:

  return v50(v52, v48, v51);
}

uint64_t static SiriKitExecutorRunUtils.makeNLv3Parse(parse:)(void *a1)
{
  id v2 = objc_msgSend(a1, sel_nlv3Parse);
  if (v2)
  {
    uint64_t v3 = v2;
    id v4 = objc_msgSend(v2, sel_data);

    if (v4)
    {
      uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v7 = v6;

      outlined copy of Data._Representation(v5, v7);
      NLIntent.init(protobufData:)();
      return outlined consume of Data._Representation(v5, v7);
    }
    goto LABEL_8;
  }
  __break(1u);
  id v9 = objc_msgSend(a1, sel_nlv3Parse);
  if (!v9)
  {
    __break(1u);
LABEL_8:
    id v9 = (id)specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD00000000000001FLL, 0x80000001BA06ECB0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/SiriKitExecutorRunUtils.swift", 98, 2, 232);
    __break(1u);
  }
  uint64_t v10 = v9;
  id v11 = objc_msgSend(v9, sel_debugString);

  if (v11)
  {
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v14 = v13;
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v14 = 0;
  }
  _StringGuts.grow(_:)(48);
  v15._uint64_t countAndFlagsBits = 0xD000000000000023;
  v15._object = (void *)0x80000001BA06ECD0;
  String.append(_:)(v15);
  if (v14) {
    uint64_t v16 = v12;
  }
  else {
    uint64_t v16 = 0;
  }
  if (v14) {
    unint64_t v17 = v14;
  }
  else {
    unint64_t v17 = 0xE000000000000000;
  }
  unint64_t v18 = v17;
  String.append(_:)(*(Swift::String *)&v16);
  swift_bridgeObjectRelease();
  v19._uint64_t countAndFlagsBits = 0x3A726F727265202CLL;
  v19._object = (void *)0xE900000000000020;
  String.append(_:)(v19);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  _print_unlocked<A, B>(_:_:)();
  uint64_t result = specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0, 0xE000000000000000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/SiriKitExecutorRunUtils.swift", 98, 2, 238);
  __break(1u);
  return result;
}

uint64_t EndpointInfoProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t PeerInfoProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void specialized static SiriKitExecutorRunUtils.makeAlternatives(from:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLIntent?);
  MEMORY[0x1F4188790](v2 - 8);
  id v4 = (char *)v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NLIntent();
  unint64_t v74 = *(void *)(v5 - 8);
  uint64_t v75 = v5;
  MEMORY[0x1F4188790](v5);
  unint64_t v7 = (char *)v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v76 = (char *)v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Parse();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  unint64_t v78 = (char *)v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  Swift::String v15 = (char *)v63 - v14;
  id v16 = objc_msgSend(a1, sel_parse);
  if (!v16) {
    goto LABEL_22;
  }
  unint64_t v17 = v16;
  id v18 = objc_msgSend(v16, sel_type);

  if (!v18) {
    goto LABEL_22;
  }
  uint64_t v69 = v15;
  uint64_t v70 = v11;
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;

  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!v21)
  {
LABEL_23:
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
LABEL_24:
    swift_bridgeObjectRelease();
    return;
  }
  if (v22 == v19 && v21 == v23) {
    goto LABEL_12;
  }
  char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v24) {
    goto LABEL_13;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v19 && v21 == v25) {
    goto LABEL_12;
  }
  char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v26)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v19 && v21 == v27)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  char v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v62 & 1) == 0) {
    return;
  }
LABEL_14:
  id v28 = objc_msgSend(a1, sel_parse);
  if (!v28) {
    return;
  }
  uint64_t v29 = v28;
  id v30 = objc_msgSend(v28, sel_nlv3ParseWithAlternatives);

  if (!v30) {
    return;
  }
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAIntentGroupProtobufMessage);
  unint64_t v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v32 = v31 >> 62;
  if (v31 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v33) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v33 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v33) {
      goto LABEL_24;
    }
  }
  if (v33 < 1)
  {
    __break(1u);
    goto LABEL_57;
  }
  if (v32)
  {
    swift_bridgeObjectRetain();
    uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v35 < 1)
    {
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
      return;
    }
    swift_bridgeObjectRetain();
    uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v34 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v34)
    {
      __break(1u);
LABEL_22:
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      goto LABEL_23;
    }
  }
  if (v34 < v33)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  if ((v31 & 0xC000000000000001) != 0 && v33 != 1)
  {
    Swift::Int v36 = 1;
    do
    {
      Swift::Int v37 = v36 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v36);
      Swift::Int v36 = v37;
    }
    while (v33 != v37);
  }
  id v67 = v7;
  uint64_t v77 = v10;
  if (v32)
  {
    swift_bridgeObjectRetain();
    uint64_t v38 = _CocoaArrayWrapper.subscript.getter();
    uint64_t v39 = v41;
    uint64_t v40 = v42;
    unint64_t v44 = v43;
    swift_bridgeObjectRelease_n();
    uint64_t v33 = v44 >> 1;
  }
  else
  {
    uint64_t v38 = v31 & 0xFFFFFFFFFFFFFF8;
    uint64_t v39 = (v31 & 0xFFFFFFFFFFFFFF8) + 32;
    uint64_t v40 = 1;
  }
  uint64_t v45 = (uint64_t)v76;
  uint64_t v46 = v33 - v40;
  if (v33 == v40)
  {
    swift_unknownObjectRelease();
    return;
  }
  if (v33 <= v40) {
    goto LABEL_59;
  }
  uint64_t v68 = (void (**)(char *, void, uint64_t, uint64_t))(v74 + 56);
  uint64_t v73 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 56);
  id v66 = (void (**)(char *, char *, uint64_t))(v74 + 32);
  unsigned int v65 = *MEMORY[0x1E4FA1F00];
  v63[1] = v38;
  uint64_t v64 = (void (**)(uint64_t, void, uint64_t))(v70 + 104);
  uint64_t v71 = (void (**)(char *, uint64_t, uint64_t))(v70 + 32);
  uint64_t v72 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48);
  swift_unknownObjectRetain();
  unint64_t v47 = MEMORY[0x1E4FBC860];
  uint64_t v48 = (id *)(v39 + 8 * v40);
  do
  {
    id v49 = *v48;
    id v50 = objc_msgSend(v49, sel_data);
    if (v50)
    {
      uint64_t v51 = v50;
      unint64_t v74 = v47;
      uint64_t v52 = v75;
      static Data._unconditionallyBridgeFromObjectiveC(_:)();

      NLIntent.init(protobufData:)();
      (*v68)(v4, 0, 1, v52);
      id v53 = v67;
      uint64_t v54 = *v66;
      (*v66)(v67, v4, v52);
      uint64_t v45 = (uint64_t)v76;
      v54(v76, v53, v52);
      (*v64)(v45, v65, v77);
      uint64_t v55 = 0;
      unint64_t v47 = v74;
    }
    else
    {
      uint64_t v55 = 1;
    }
    uint64_t v56 = v55;
    uint64_t v57 = v77;
    (*v73)(v45, v56, 1, v77);

    if ((*v72)(v45, 1, v57) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v45, &demangling cache variable for type metadata for Parse?);
    }
    else
    {
      id v58 = *v71;
      int v59 = v69;
      (*v71)(v69, v45, v57);
      v58(v78, (uint64_t)v59, v57);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v47 + 16) + 1, 1, v47);
      }
      unint64_t v61 = *(void *)(v47 + 16);
      unint64_t v60 = *(void *)(v47 + 24);
      if (v61 >= v60 >> 1) {
        unint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v60 > 1, v61 + 1, 1, v47);
      }
      *(void *)(v47 + 16) = v61 + 1;
      v58((char *)(v47+ ((*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80))+ *(void *)(v70 + 72) * v61), (uint64_t)v78, v77);
    }
    ++v48;
    --v46;
  }
  while (v46);
  swift_unknownObjectRelease_n();
}

uint64_t specialized OSSignposter.withIntervalSignpostAsync<A>(_:id:around:)()
{
  $defer #1 <A>() in OSSignposter.withIntervalSignpostAsync<A>(_:id:around:)(*(void *)(v0 + 80), *(const char **)(v0 + 56), *(void *)(v0 + 64), *(unsigned char *)(v0 + 168));
  swift_release();
  uint64_t v1 = *(void *)(v0 + 48);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

{
  uint64_t v1;

  swift_release();
  swift_release();
  return MEMORY[0x1F4188298](specialized OSSignposter.withIntervalSignpostAsync<A>(_:id:around:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v6;

  uint64_t v1 = swift_allocObject();
  *(void *)(v0 + 144) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 88);
  swift_unknownObjectRetain();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AFSpeechPackage?);
  void *v2 = v0;
  v2[1] = specialized OSSignposter.withIntervalSignpostAsync<A>(_:id:around:);
  v4.n128_u64[0] = 0x3FB999999999999ALL;
  return MEMORY[0x1F415AC08](v0 + 48, &async function pointer to partial apply for closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:), v1, v3, v4);
}

{
  uint64_t v0;
  NSObject *v1;
  os_signpost_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, void, uint64_t);
  uint8_t *v12;
  os_signpost_id_t v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v1 = OSSignposter.logHandle.getter();
  uint64_t v2 = static os_signpost_type_t.begin.getter();
  uint64_t v3 = OS_os_log.signpostsEnabled.getter();
  if ((v3 & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t v6 = *(const char **)(v0 + 56);
  if (*(unsigned char *)(v0 + 168))
  {
    if ((unint64_t)v6 >> 32)
    {
      __break(1u);
    }
    else
    {
      if (v6 >> 11 == 27)
      {
LABEL_18:
        __break(1u);
        return MEMORY[0x1F4188298](v3, v4, v5);
      }
      if (v6 >> 16 <= 0x10)
      {
        uint64_t v6 = (const char *)(v0 + 40);
        goto LABEL_10;
      }
    }
    __break(1u);
    goto LABEL_18;
  }
  if (v6)
  {
LABEL_10:
    uint64_t v9 = *(void *)(v0 + 112);
    uint64_t v8 = *(void *)(v0 + 120);
    uint64_t v10 = *(void *)(v0 + 104);
    uint64_t v11 = *(void (**)(uint64_t, void, uint64_t))(v9 + 16);
    v11(v8, *(void *)(v0 + 72), v10);
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    uint64_t v13 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_1B9C64000, v1, v2, v13, v6, "", v12, 2u);
    MEMORY[0x1BA9E48C0](v12, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    v11(*(void *)(v0 + 120), *(void *)(v0 + 72), *(void *)(v0 + 104));
    goto LABEL_11;
  }
  __break(1u);
LABEL_5:
  unint64_t v7 = *(void *)(v0 + 112);

  (*(void (**)(void, void, void))(v7 + 16))(*(void *)(v0 + 120), *(void *)(v0 + 72), *(void *)(v0 + 104));
LABEL_11:
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  *(void *)(v0 + 128) = OSSignpostIntervalState.init(id:isOpen:)();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v14 = static MessageBusActor.shared;
  *(void *)(v0 + 136) = static MessageBusActor.shared;
  swift_retain();
  uint64_t v3 = (uint64_t)specialized OSSignposter.withIntervalSignpostAsync<A>(_:id:around:);
  uint64_t v4 = v14;
  uint64_t v5 = 0;
  return MEMORY[0x1F4188298](v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 160) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 136);
    uint64_t v4 = specialized OSSignposter.withIntervalSignpostAsync<A>(_:id:around:);
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 136);
    swift_release();
    uint64_t v4 = specialized OSSignposter.withIntervalSignpostAsync<A>(_:id:around:);
    uint64_t v3 = v5;
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  $defer #1 <A>() in OSSignposter.withIntervalSignpostAsync<A>(_:id:around:)(*(void *)(v0 + 80), *(const char **)(v0 + 56), *(void *)(v0 + 64), *(unsigned char *)(v0 + 168));
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v1;

  swift_release();
  return MEMORY[0x1F4188298](specialized OSSignposter.withIntervalSignpostAsync<A>(_:id:around:), 0, 0);
}

uint64_t specialized OSSignposter.withIntervalSignpostAsync<A>(_:id:around:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 88) = a6;
  *(void *)(v7 + 96) = a7;
  *(void *)(v7 + 72) = a4;
  *(void *)(v7 + 80) = a5;
  *(unsigned char *)(v7 + 168) = a3;
  *(void *)(v7 + 56) = a1;
  *(void *)(v7 + 64) = a2;
  uint64_t v8 = type metadata accessor for OSSignpostID();
  *(void *)(v7 + 104) = v8;
  *(void *)(v7 + 112) = *(void *)(v8 - 8);
  *(void *)(v7 + 120) = swift_task_alloc();
  return MEMORY[0x1F4188298](specialized OSSignposter.withIntervalSignpostAsync<A>(_:id:around:), 0, 0);
}

uint64_t partial apply for closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(a1, v5, v4);
}

uint64_t closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = one-time initialization token for shared;
  swift_unknownObjectRetain();
  if (v3 != -1) {
    swift_once();
  }
  uint64_t v4 = *(void *)(v0 + 64);
  long long v14 = *(_OWORD *)(v0 + 48);
  swift_beginAccess();
  uint64_t v5 = static MessageBusActor.shared;
  uint64_t v7 = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, v6, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v5;
  *(void *)(v8 + 24) = v7;
  *(_OWORD *)(v8 + 32) = v14;
  swift_retain();
  uint64_t v9 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCSo15AFSpeechPackageCSg_Tgm5(v4, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:), v8);
  *(void *)(v0 + 72) = v9;
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AFSpeechPackage?);
  *uint64_t v10 = v0;
  v10[1] = closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:);
  uint64_t v12 = *(void *)(v0 + 40);
  return MEMORY[0x1F4187DC0](v12, v9, v11);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:), 0, 0);
}

uint64_t closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v3[8] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:), 0, 0);
}

uint64_t RunSiriKitExecutorProcessorExecutionDelegate.fetchSpeechInfo(reply:)(uint64_t (*a1)(void), uint64_t a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(uint64_t (*)(void), uint64_t))(*(void *)Strong + 584))(a1, a2);
    return swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationBridge);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_1B9C64000, v7, v8, "RunSiriKitExecutorProcessor already released, ignoring fetchSpeechInfo", v9, 2u);
      MEMORY[0x1BA9E48C0](v9, -1, -1);
    }

    return a1(0);
  }
}

void RunSiriKitExecutorProcessor.fetchSpeechInfo(reply:)(void (*a1)(void))
{
  id v3 = objc_msgSend(*(id *)(v1 + 24), sel_speechInfo);
  a1();
}

uint64_t $defer #1 <A>() in OSSignposter.withIntervalSignpostAsync<A>(_:id:around:)(uint64_t a1, const char *a2, uint64_t a3, char a4)
{
  char v26 = a2;
  uint64_t v5 = type metadata accessor for OSSignpostError();
  uint64_t v25 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = &v23[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for OSSignpostID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = &v23[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v10);
  long long v14 = &v23[-v13];
  uint64_t v15 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  int v24 = static os_signpost_type_t.end.getter();
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  if ((a4 & 1) == 0)
  {
    unint64_t v17 = v26;
    if (!v26)
    {
      __break(1u);
LABEL_5:

      return (*(uint64_t (**)(unsigned char *, uint64_t))(v9 + 8))(v14, v8);
    }
    goto LABEL_10;
  }
  if ((unint64_t)v26 >> 32)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v26 >> 11 == 27)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  if (v26 >> 16 > 0x10)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  unint64_t v17 = &v27;
LABEL_10:
  swift_retain();
  checkForErrorAndConsumeState(state:)();
  swift_release();
  uint64_t v18 = v25;
  if ((*(unsigned int (**)(unsigned char *, uint64_t))(v25 + 88))(v7, v5) == *MEMORY[0x1E4FBD340])
  {
    uint64_t v19 = "[Error] Interval already ended";
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t))(v18 + 8))(v7, v5);
    uint64_t v19 = "";
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v9 + 16))(v12, v14, v8);
  uint64_t v20 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v20 = 0;
  os_signpost_id_t v21 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl(&dword_1B9C64000, v15, (os_signpost_type_t)v24, v21, v17, v19, v20, 2u);
  MEMORY[0x1BA9E48C0](v20, -1, -1);

  uint64_t v22 = *(void (**)(unsigned char *, uint64_t))(v9 + 8);
  v22(v14, v8);
  return ((uint64_t (*)(unsigned char *, uint64_t))v22)(v12, v8);
}

uint64_t static SiriKitExecutorRunUtils.interactionTypeFrom(aceValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InteractionType?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  InteractionType.init(aceValue:)();
  uint64_t v9 = type metadata accessor for InteractionType();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v8, v9);
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for InteractionType?);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  static os_log_type_t.error.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1BA04FD90;
  *(void *)(v11 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v11 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v11 + 32) = a1;
  *(void *)(v11 + 40) = a2;
  swift_bridgeObjectRetain();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(v10 + 104))(a3, *MEMORY[0x1E4FA5248], v9);
}

uint64_t static SiriKitExecutorRunUtils.bargeInContextFrom(command:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = objc_msgSend(a1, sel_dictionary);
  if (v3
    && (uint64_t v4 = v3,
        uint64_t v8 = v3,
        closure #1 in static SiriKitExecutorRunUtils.bargeInContextFrom(command:)(&v8, &v9),
        v4,
        v9))
  {
    closure #2 in static SiriKitExecutorRunUtils.bargeInContextFrom(command:)(&v9, a2);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = type metadata accessor for BargeInContext();
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
    return v7(a2, 1, 1, v6);
  }
}

uint64_t closure #1 in static SiriKitExecutorRunUtils.bargeInContextFrom(command:)@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  id v3 = *a1;
  strcpy((char *)v6, "bargeInState");
  BYTE13(v6[0]) = 0;
  HIWORD(v6[0]) = -5120;
  id v4 = objc_msgSend(v3, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(), v6[0]);
  swift_unknownObjectRelease();
  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v6, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!v8)
  {
    uint64_t result = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_8;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : Any]);
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0) {
LABEL_8:
  }
    *a2 = 0;
  return result;
}

uint64_t closure #2 in static SiriKitExecutorRunUtils.bargeInContextFrom(command:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for BargeInMode();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v39 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  Swift::Int v37 = (char *)v34 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v15 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  unint64_t v17 = (char *)v34 - v16;
  uint64_t v18 = *a1;
  uint64_t v19 = *(void *)(*a1 + 16);
  uint64_t v38 = v7;
  uint64_t v36 = v8;
  if (v19
    && (unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(0x4D6E496567726162, 0xEC0000007365646FLL), (v21 & 1) != 0)
    && (outlined init with copy of Any(*(void *)(v18 + 56) + 32 * v20, (uint64_t)v40),
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]),
        swift_dynamicCast()))
  {
    uint64_t v22 = (uint64_t)v41;
  }
  else
  {
    uint64_t v22 = MEMORY[0x1E4FBC860];
  }
  uint64_t v23 = type metadata accessor for DateInterval();
  int v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56);
  v24(v17, 1, 1, v23);
  if (!*(void *)(v18 + 16)) {
    goto LABEL_18;
  }
  unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001DLL, 0x80000001BA06EE20);
  if ((v26 & 1) == 0) {
    goto LABEL_18;
  }
  outlined init with copy of Any(*(void *)(v18 + 56) + 32 * v25, (uint64_t)v40);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_18;
  }
  if (!*(void *)(v18 + 16)) {
    goto LABEL_18;
  }
  uint64_t v35 = v41;
  unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001ELL, 0x80000001BA06EE40);
  if ((v28 & 1) == 0) {
    goto LABEL_18;
  }
  outlined init with copy of Any(*(void *)(v18 + 56) + 32 * v27, (uint64_t)v40);
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0 || !v35 || !v41) {
    goto LABEL_18;
  }
  unint64_t v30 = v35 - v41;
  if (__OFSUB__(v35, v41))
  {
    __break(1u);
  }
  else if ((v30 & 0x8000000000000000) == 0 || !__OFSUB__(0, v30))
  {
    Date.init()();
    Date.addingTimeInterval(_:)();
    uint64_t v31 = v36;
    unint64_t v32 = *(char **)(v36 + 8);
    v34[1] = v36 + 8;
    uint64_t v35 = v32;
    ((void (*)(char *, uint64_t))v32)(v39, v38);
    (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v39, v37, v38);
    DateInterval.init(start:duration:)();
    ((void (*)(char *, uint64_t))v35)(v37, v38);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
    v24(v15, 0, 1, v23);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v15, (uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
LABEL_18:
    static BargeInMode.from(aceModes:)(v22, (uint64_t)v6);
    swift_bridgeObjectRelease();
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v17, (uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
    BargeInContext.init(mode:approximatePreviousTTSInterval:)();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
    uint64_t v33 = type metadata accessor for BargeInContext();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(a2, 0, 1, v33);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ProxiedRequestContext(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for ProxiedRequestContext);
}

uint64_t RunSiriKitExecutorProcessorExecutionDelegate.fetchContexts(for:includesNearByDevices:completion:)(uint64_t a1, char a2, uint64_t (*a3)(void), uint64_t a4)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    id v10 = objc_msgSend(*(id *)(Strong + 24), sel_requestID);
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v13;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v14 = 0;
    }
    static ServiceBridgeDelegate.fetchContextsDefault(for:includesNearByDevices:requestId:serviceHelper:completion:)(a1, a2 & 1, v12, v14, *(void **)(v4 + 24), (uint64_t)a3, a4);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain_n();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      uint64_t v24 = v19;
      *(_DWORD *)uint64_t v18 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v20 = Set.description.getter();
      unint64_t v22 = v21;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v16, v17, "RunSiriKitExecutorProcessor already released, ignoring fetchContexts of %s", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v19, -1, -1);
      MEMORY[0x1BA9E48C0](v18, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return a3(0);
  }
}

Swift::Void __swiftcall ProxiedRequestContext.encode(with:)(NSCoder with)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v69 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = type metadata accessor for DateInterval();
  uint64_t v6 = *(void *)(v71 - 8);
  MEMORY[0x1F4188790](v71);
  uint64_t v64 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for BargeInMode();
  uint64_t v67 = *(void *)(v8 - 8);
  uint64_t v68 = v8;
  MEMORY[0x1F4188790](v8);
  id v66 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BargeInContext?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for BargeInContext();
  uint64_t v72 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceId + 8))
  {
    uint64_t v16 = (void *)MEMORY[0x1BA9E2DD0](*(void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceId));
    os_log_type_t v17 = (void *)MEMORY[0x1BA9E2DD0](0x6449656361, 0xE500000000000000);
    [(objc_class *)with.super.isa encodeObject:v16 forKey:v17];
  }
  if (*(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_refId + 8))
  {
    uint64_t v18 = (void *)MEMORY[0x1BA9E2DD0](*(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_refId));
    uint64_t v19 = (void *)MEMORY[0x1BA9E2DD0](0x6449666572, 0xE500000000000000);
    [(objc_class *)with.super.isa encodeObject:v18 forKey:v19];
  }
  uint64_t v20 = InteractionType.rawValue.getter();
  unint64_t v21 = (void *)MEMORY[0x1BA9E2DD0](v20);
  swift_bridgeObjectRelease();
  unint64_t v22 = (void *)MEMORY[0x1BA9E2DD0](0x7463617265746E69, 0xEF657079546E6F69);
  [(objc_class *)with.super.isa encodeObject:v21 forKey:v22];

  uint64_t v23 = InputOrigin.rawValue.getter();
  uint64_t v24 = (void *)MEMORY[0x1BA9E2DD0](v23);
  swift_bridgeObjectRelease();
  unint64_t v25 = (void *)MEMORY[0x1BA9E2DD0](0x69724F7475706E69, 0xEB000000006E6967);
  [(objc_class *)with.super.isa encodeObject:v24 forKey:v25];

  char v26 = *(void **)(v2 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceMeCard);
  if (v26)
  {
    id v27 = v26;
    char v28 = (void *)MEMORY[0x1BA9E2DD0](0x726143654D656361, 0xE900000000000064);
    [(objc_class *)with.super.isa encodeObject:v27 forKey:v28];
  }
  unsigned int v65 = v15;
  uint64_t v70 = v6;
  if (*(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_sessionHandoffContinuityId + 8))
  {
    uint64_t v29 = (void *)MEMORY[0x1BA9E2DD0](*(void *)(v2
                                                + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_sessionHandoffContinuityId));
    unint64_t v30 = (void *)MEMORY[0x1BA9E2DD0](0xD00000000000001ALL, 0x80000001BA060F80);
    [(objc_class *)with.super.isa encodeObject:v29 forKey:v30];
  }
  uint64_t v31 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isMultiUserEnabled);
  unint64_t v32 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000012, 0x80000001BA060FA0);
  uint64_t v33 = &off_1E61F1000;
  [(objc_class *)with.super.isa encodeBool:v31 forKey:v32];

  uint64_t v34 = *(unsigned __int8 *)(v2
                           + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_requiresConditionalMultiUserGrounding);
  uint64_t v35 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000025, 0x80000001BA060FC0);
  [(objc_class *)with.super.isa encodeBool:v34 forKey:v35];

  uint64_t v36 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isEyesFree);
  Swift::Int v37 = (void *)MEMORY[0x1BA9E2DD0](0x7246736579457369, 0xEA00000000006565);
  [(objc_class *)with.super.isa encodeBool:v36 forKey:v37];

  uint64_t v38 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isVoiceTriggerEnabled);
  uint64_t v39 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000015, 0x80000001BA060FF0);
  [(objc_class *)with.super.isa encodeBool:v38 forKey:v39];

  uint64_t v40 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isTextToSpeechEnabled);
  uint64_t v41 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000015, 0x80000001BA061010);
  [(objc_class *)with.super.isa encodeBool:v40 forKey:v41];

  uint64_t v42 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isDirectAction);
  unint64_t v43 = (void *)MEMORY[0x1BA9E2DD0](0x7463657269447369, 0xEE006E6F69746341);
  [(objc_class *)with.super.isa encodeBool:v42 forKey:v43];

  unint64_t v44 = (void *)MEMORY[0x1BA9E2DD0](*(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_interactionId), *(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_interactionId + 8));
  uint64_t v45 = (void *)MEMORY[0x1BA9E2DD0](0x7463617265746E69, 0xED000064496E6F69);
  objc_msgSend(with.super.isa, (SEL)&selRef_setUserIdentityClassification_ + 5, v44, v45);

  outlined init with copy of ReferenceResolutionClientProtocol?(v2 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_bargeInContext, (uint64_t)v12, &demangling cache variable for type metadata for BargeInContext?);
  uint64_t v46 = v72;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v12, 1, v13) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, &demangling cache variable for type metadata for BargeInContext?);
  }
  else
  {
    unint64_t v47 = v65;
    (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v65, v12, v13);
    uint64_t v48 = v66;
    BargeInContext.mode.getter();
    uint64_t v49 = BargeInMode.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v67 + 8))(v48, v68);
    id v50 = (void *)MEMORY[0x1BA9E2DD0](0x4D6E496567726162, 0xEB0000000065646FLL);
    [(objc_class *)with.super.isa encodeInteger:v49 forKey:v50];

    uint64_t v51 = (uint64_t)v69;
    BargeInContext.approximatePreviousTTSInterval.getter();
    uint64_t v53 = v70;
    uint64_t v52 = v71;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48))(v51, 1, v71) == 1)
    {
      (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v13);
      outlined destroy of ReferenceResolutionClientProtocol?(v51, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
      uint64_t v33 = &off_1E61F1000;
    }
    else
    {
      uint64_t v54 = *(void (**)(char *, uint64_t, uint64_t))(v53 + 32);
      uint64_t v68 = v13;
      uint64_t v55 = v64;
      v54(v64, v51, v52);
      Class isa = DateInterval._bridgeToObjectiveC()().super.isa;
      uint64_t v57 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000012, 0x80000001BA061050);
      [(objc_class *)with.super.isa encodeObject:isa forKey:v57];

      (*(void (**)(char *, uint64_t))(v53 + 8))(v55, v52);
      uint64_t v33 = &off_1E61F1000;
      (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v68);
    }
  }
  id v58 = *(void **)(v2 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceRemoteExecution);
  if (v58)
  {
    id v59 = v58;
    unint64_t v60 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000012, 0x80000001BA061070);
    objc_msgSend(with.super.isa, (SEL)v33[225], v59, v60);
  }
  unint64_t v61 = (void *)MEMORY[0x1BA9E2DD0](*(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_resultCandidateId), *(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_resultCandidateId + 8));
  char v62 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000011, 0x80000001BA0607B0);
  objc_msgSend(with.super.isa, (SEL)v33[225], v61, v62);
}

uint64_t specialized static RunLocation.convert(aceRunLocation:)(uint64_t a1, void *a2)
{
  if (!a2)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    static os_log_type_t.info.getter();
    os_log(_:dso:log:type:_:)();
    return 0;
  }
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = a1;
  v4._object = a2;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of RunLocation.init(rawValue:), v4);
  if (!v5)
  {
    uint64_t v6 = 0;
    goto LABEL_9;
  }
  if (v5 != 1)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1BA04FD90;
    *(void *)(v8 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v8 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v8 + 32) = a1;
    *(void *)(v8 + 40) = a2;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v6 = 1;
LABEL_9:
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  static os_log_type_t.info.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1BA04FD90;
  *(void *)(v7 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v7 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v7 + 32) = a1;
  *(void *)(v7 + 40) = a2;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  return v6;
}

void InvocationStateImpl.init(proxiedRequestContext:localRequestContextData:executionRequestId:)(unsigned char *a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v43 = a3;
  unint64_t v44 = a4;
  uint64_t v41 = a5;
  uint64_t v42 = a1;
  uint64_t v6 = type metadata accessor for ResponseMode();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = &v36[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomeInfo?);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = &v36[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = type metadata accessor for Restrictions();
  MEMORY[0x1F4188790](v19);
  unint64_t v21 = &v36[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v23 = *(void (**)(void))(v22 + 16);
  uint64_t v39 = v21;
  v23();
  uint64_t v24 = *(void **)&a2[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_originatingHome];
  uint64_t v40 = v18;
  if (v24)
  {
    id v25 = v24;
    AFHomeInfo.asInternalHomeInfo.getter();

    uint64_t v26 = type metadata accessor for HomeInfo();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v18, 0, 1, v26);
  }
  else
  {
    uint64_t v27 = type metadata accessor for HomeInfo();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v18, 1, 1, v27);
  }
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)&a2[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_audioSource], (uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)&a2[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_audioDestination], (uint64_t)v12, &demangling cache variable for type metadata for AudioDestination?);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 16))(v9, &a2[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_responseMode], v6);
  uint64_t v28 = *(void *)&a2[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_voiceTriggerEventInfo];
  int v37 = *(_DWORD *)&a2[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_voiceAudioSessionId];
  uint64_t v38 = v15;
  unsigned __int8 v29 = a2[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isRecognizeMyVoiceEnabled];
  unsigned __int8 v30 = a2[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isSystemApertureEnabled];
  unsigned __int8 v31 = a2[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isLiveActivitiesSupported];
  uint64_t v33 = *(void *)&a2[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_currentDeviceAssistantId];
  uint64_t v32 = *(void *)&a2[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_currentDeviceAssistantId + 8];
  uint64_t v34 = (uint64_t)v9;
  unsigned __int8 v35 = a2[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isInAmbient];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  InvocationStateImpl.init(proxiedRequestContext:restrictions:executionRequestId:originatingHome:audioSource:audioDestination:responseMode:currentDeviceAssistantId:voiceTriggerEventInfo:voiceAudioSessionId:isRMVEnabled:isSystemApertureEnabled:isLiveActivitiesSupported:isInAmbient:)(v42, (uint64_t)v39, v43, v44, (uint64_t)v40, (uint64_t)v38, (uint64_t)v12, v34, v41, v33, v32, v28, v37, v29, v30, v31, v35);
}

uint64_t ProxiedRequestContext.multiUserState.getter@<X0>(uint64_t a1@<X8>)
{
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isMultiUserEnabled) == 1)
  {
    uint64_t v3 = v1;
    Swift::String v4 = *(void **)(v1 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceRemoteExecution);
    if (v4)
    {
      id v5 = objc_msgSend(v4, sel_executionDeviceAssistantId);
      if (v5)
      {
        uint64_t v6 = v5;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
    }
    id v12 = *(id *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceMeCard);
    if (v12) {
      id v12 = SAPerson.contact.getter();
    }
    type metadata accessor for DefaultMeCardProxy();
    *(void *)(swift_allocObject() + 16) = v12;
    lazy protocol witness table accessor for type DefaultMeCardProxy and conformance DefaultMeCardProxy();
    MultiUserContext.init(requiresUserGrounding:meCardProxy:handoffTargetDeviceID:)();
    uint64_t v13 = type metadata accessor for MultiUserContext();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
    uint64_t v9 = v13;
    uint64_t v10 = a1;
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v7 = type metadata accessor for MultiUserContext();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = a1;
    uint64_t v11 = 1;
  }

  return v8(v10, v11, 1, v9);
}

uint64_t specialized static SiriKitMetricsUtils.emitSessionStarted(input:eventSender:resultCandidateId:)()
{
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](specialized static SiriKitMetricsUtils.emitSessionStarted(input:eventSender:resultCandidateId:), 0, 0);
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v2 = v0[7];
  uint64_t v1 = (uint64_t *)v0[8];
  uint64_t v3 = v0[5];
  uint64_t v13 = v0[6];
  Swift::String v4 = (void *)v0[3];
  id v5 = v0[4];
  uint64_t v6 = specialized static SiriKitMetricsUtils.extractIntentTypeName(input:)();
  uint64_t v8 = v7;
  v0[9] = v6;
  v0[10] = v7;
  uint64_t v9 = v4[3];
  uint64_t v14 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v9);
  type metadata accessor for SiriKitEvent();
  void *v1 = v6;
  v1[1] = v8;
  v1[2] = v5;
  v1[3] = v3;
  (*(void (**)(uint64_t *, void, uint64_t))(v2 + 104))(v1, *MEMORY[0x1E4FA1930], v13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v10 = SiriKitEvent.__allocating_init(_:builder:)();
  v0[11] = v10;
  uint64_t v11 = (void *)swift_task_alloc();
  v0[12] = v11;
  *uint64_t v11 = v0;
  v11[1] = specialized static SiriKitMetricsUtils.emitSessionStarted(input:eventSender:resultCandidateId:);
  return MEMORY[0x1F4151BE0](v10, v9, v14);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = v0[9];
  uint64_t v1 = (void *)v0[10];
  type metadata accessor for CoreAnalyticsService();
  static CoreAnalyticsService.instance.getter();
  v3._uint64_t countAndFlagsBits = v2;
  v3._object = v1;
  CoreAnalyticsService.sendHandleRequestEvent(intentTypeName:)(v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  Swift::String v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t specialized static SiriKitMetricsUtils.emitSessionStarted(input:eventSender:resultCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for SiriKitEventPayload();
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  return MEMORY[0x1F4188298](specialized static SiriKitMetricsUtils.emitSessionStarted(input:eventSender:resultCandidateId:), 0, 0);
}

void RunSiriKitExecutorProcessorExecutionDelegate.submit(executionOutput:completion:)(void *a1, void (*a2)(void, void *), uint64_t a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(void *, void (*)(void, void *), uint64_t))(*(void *)Strong + 520))(a1, a2, a3);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.conversationBridge);
    uint64_t v8 = a1;
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v17 = v12;
      *(_DWORD *)uint64_t v11 = 136315138;
      uint64_t v14 = *(void *)&v8[OBJC_IVAR___SKRExecutionOutput_executionRequestId];
      unint64_t v13 = *(void *)&v8[OBJC_IVAR___SKRExecutionOutput_executionRequestId + 8];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v13, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v9, v10, "RunSiriKitExecutorProcessor already released, ignoring sumbit of %s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v12, -1, -1);
      MEMORY[0x1BA9E48C0](v11, -1, -1);
    }
    else
    {
    }
    lazy protocol witness table accessor for type ConversationOutputError and conformance ConversationOutputError();
    uint64_t v15 = (void *)swift_allocError();
    *uint64_t v16 = 0;
    a2(0, v15);
  }
}

void RunSiriKitExecutorProcessor.submit(executionOutput:completion:)(void *a1, void (*a2)(void, void), uint64_t a3)
{
  Swift::String v4 = v3;
  uint64_t v8 = type metadata accessor for RequestType();
  Class v111 = *(Class *)(v8 - 8);
  uint64_t v112 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v110 = &v97[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  uint64_t v10 = MEMORY[0x1F4188790](v107);
  v106 = &v97[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  unint64_t v108 = &v97[-v13];
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = &v97[-v14];
  uint64_t v16 = type metadata accessor for UserID();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  id v105 = &v97[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  unint64_t v109 = &v97[-v21];
  MEMORY[0x1F4188790](v20);
  uint64_t v114 = &v97[-v22];
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  uint64_t v24 = __swift_project_value_buffer(v23, (uint64_t)static Logger.conversationBridge);
  id v25 = a1;
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  int v28 = v27;
  uint64_t v117 = v26;
  BOOL v29 = os_log_type_enabled(v26, v27);
  char v115 = v25;
  uint64_t v116 = v17;
  uint64_t v113 = (uint64_t)v15;
  if (v29)
  {
    LODWORD(v104) = v28;
    unsigned __int8 v30 = (uint8_t *)swift_slowAlloc();
    uint64_t v103 = swift_slowAlloc();
    v120[0] = v103;
    char v102 = v30;
    *(_DWORD *)unsigned __int8 v30 = 136315138;
    uint64_t v101 = v30 + 4;
    unsigned __int8 v31 = a2;
    uint64_t v32 = v24;
    uint64_t v33 = a3;
    uint64_t v34 = v4;
    uint64_t v35 = v16;
    id v36 = objc_msgSend(v25, sel_debugDescription);
    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v39 = v38;

    uint64_t v16 = v35;
    Swift::String v4 = v34;
    a3 = v33;
    uint64_t v24 = v32;
    a2 = v31;
    *(void *)&long long v118 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, v120);
    uint64_t v17 = v116;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    uint64_t v40 = v117;
    uint64_t v41 = v102;
    _os_log_impl(&dword_1B9C64000, v117, (os_log_type_t)v104, "<<<--- %s", v102, 0xCu);
    uint64_t v42 = v103;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v42, -1, -1);
    MEMORY[0x1BA9E48C0](v41, -1, -1);
  }
  else
  {
  }
  char v43 = (*((uint64_t (**)(void))v4->isa + 53))();
  unint64_t v44 = Logger.logObject.getter();
  if ((v43 & 1) == 0)
  {
    os_log_type_t v49 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v44, v49))
    {
      uint64_t v50 = v24;
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v51 = 0;
      _os_log_impl(&dword_1B9C64000, v44, v49, "Handling submit() from Execution kicked off by RSKE", v51, 2u);
      uint64_t v52 = v51;
      uint64_t v24 = v50;
      MEMORY[0x1BA9E48C0](v52, -1, -1);
    }

    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)&v4[12], (uint64_t)v120, &demangling cache variable for type metadata for ContextUpdating?);
    uint64_t v53 = v121;
    uint64_t v54 = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v120, &demangling cache variable for type metadata for ContextUpdating?);
    uint64_t v99 = v16;
    uint64_t v100 = v24;
    uint64_t v117 = v4 + 12;
    if (v53)
    {
      uint64_t v55 = v113;
      (*((void (**)(uint64_t))v4->isa + 38))(v54);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v55, 1, v16) != 1)
      {
        id v104 = a2;
        uint64_t v57 = *(uint8_t **)(v17 + 32);
        ((void (*)(unsigned char *, uint64_t, uint64_t))v57)(v114, v55, v16);
        unsigned int isa_low = LOBYTE(v4[21].isa);
        uint64_t v103 = v17 + 32;
        char v102 = v57;
        if (isa_low > 1) {
          int v98 = 1;
        }
        else {
          int v98 = _stringCompareWithSmolCheck(_:_:expecting:)();
        }
        swift_bridgeObjectRelease();
        id v59 = v110;
        Class v60 = v111;
        uint64_t v61 = v112;
        uint64_t v62 = (*((uint64_t (**)(unsigned char *, unsigned char *, uint64_t))v111 + 2))(v110, (unsigned char *)v4 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_requestType, v112);
        uint64_t v113 = (*((uint64_t (**)(uint64_t))v4->isa + 56))(v62);
        uint64_t v63 = v109;
        uint64_t v64 = v114;
        uint64_t v65 = (*(uint64_t (**)(unsigned char *, unsigned char *, uint64_t))(v17 + 16))(v109, v114, v16);
        LODWORD(v101) = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v115) + 0xB0))(v65);
        char v66 = (*((uint64_t (**)(void))v4->isa + 41))();
        (*(void (**)(unsigned char *, uint64_t))(v17 + 8))(v64, v16);
        type metadata accessor for ConversationContextUpdateMetadata();
        uint64_t v56 = swift_allocObject();
        *(unsigned char *)(v56 + 16) = v98 & 1;
        (*((void (**)(uint64_t, unsigned char *, uint64_t))v60 + 4))(v56 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_requestType, v59, v61);
        *(void *)(v56 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_flowPluginInfo) = v113;
        ((void (*)(uint64_t, unsigned char *, uint64_t))v102)(v56 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_currentUserId, v63, v16);
        *(unsigned char *)(v56 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_emptyServerContext) = v101 & 1;
        *(unsigned char *)(v56 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_meetsUserSessionThreshold) = v66 & 1;
        a2 = v104;
LABEL_20:
        Class isa = v4[6].isa;
        uint64_t v68 = (uint64_t)v4[17].isa;
        uint64_t v112 = (uint64_t)v4[18].isa;
        uint64_t v113 = v68;
        uint64_t v114 = v4[3].isa;
        Class v69 = v4[19].isa;
        uint64_t v110 = v4[20].isa;
        Class v111 = v69;
        unint64_t v109 = (char *)v4 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_sessionId;
        uint64_t v70 = *(uint64_t *)((char *)&v4->isa
                         + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_plannerInvocationId);
        uint64_t v71 = *(uint64_t *)((char *)&v4[1].isa
                         + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_plannerInvocationId);
        uint64_t v72 = (void *)swift_allocObject();
        uint64_t v73 = v115;
        v72[2] = v4;
        v72[3] = v73;
        v72[4] = a2;
        v72[5] = a3;
        unint64_t v74 = *(void (**)(char *, uint64_t, uint64_t, void, void, NSObject *, unsigned char *, uint64_t, Class, unsigned char *, unsigned char *, uint64_t, uint64_t, uint64_t (*)(void *, void *), void *))(*(void *)isa + 296);
        uint64_t v75 = v73;
        swift_retain();
        swift_retain();
        uint64_t v96 = v71;
        uint64_t v76 = v117;
        v74(v75, v113, v112, 0, 0, v117, v114, v56, v111, v110, v109, v70, v96, partial apply for closure #1 in RunSiriKitExecutorProcessor.submit(executionOutput:completion:), v72);
        swift_release();
        uint64_t v77 = v56;
        if (LOBYTE(v4[21].isa))
        {
          if (LOBYTE(v4[21].isa) != 1)
          {
            swift_bridgeObjectRelease();
            uint64_t v78 = v116;
LABEL_27:
            uint64_t v80 = *(void **)&v75[OBJC_IVAR___SKRExecutionOutput_command];
            if (v80)
            {
              self;
              uint64_t v81 = swift_dynamicCastObjCClass();
              if (v81)
              {
                uint64_t v82 = (void *)v81;
                outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v76, (uint64_t)&v118, &demangling cache variable for type metadata for ContextUpdating?);
                if (v119)
                {
                  outlined init with take of ReferenceResolutionClientProtocol(&v118, (uint64_t)v120);
                  unint64_t v83 = (void (*)(void))*((void *)v4->isa + 38);
                  id v84 = v80;
                  uint64_t v85 = (uint64_t)v108;
                  v83();
                  uint64_t v86 = v99;
                  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48))(v85, 1, v99) != 1)
                  {
                    uint64_t v94 = v105;
                    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v78 + 32))(v105, v85, v86);
                    uint64_t v95 = v122;
                    __swift_project_boxed_opaque_existential_1(v120, v121);
                    specialized static ResponseTextExtractionUtil.extractResponseText(fromAddViews:)(v82);
                    (*(void (**)(void))(v95 + 32))();

                    swift_bridgeObjectRelease();
                    swift_release();
                    (*(void (**)(unsigned char *, uint64_t))(v78 + 8))(v94, v86);
                    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v120);
                    return;
                  }
                  outlined destroy of ReferenceResolutionClientProtocol?(v85, (uint64_t *)&demangling cache variable for type metadata for UserID?);
                  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v120);
                }
                else
                {
                  id v87 = v80;
                  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v118, &demangling cache variable for type metadata for ContextUpdating?);
                }
                swift_retain_n();
                uint64_t v88 = Logger.logObject.getter();
                os_log_type_t v89 = static os_log_type_t.debug.getter();
                if (os_log_type_enabled(v88, v89))
                {
                  id v90 = (uint8_t *)swift_slowAlloc();
                  uint64_t v91 = swift_slowAlloc();
                  v120[0] = v91;
                  *(_DWORD *)id v90 = 136315138;
                  uint64_t v117 = v77;
                  (*((void (**)(void))v4->isa + 38))();
                  uint64_t v92 = String.init<A>(describing:)();
                  *(void *)&long long v118 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, v93, v120);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_release_n();
                  swift_bridgeObjectRelease();
                  _os_log_impl(&dword_1B9C64000, v88, v89, "Not updating response text because ContextUpdater is nil or userId = %s", v90, 0xCu);
                  swift_arrayDestroy();
                  MEMORY[0x1BA9E48C0](v91, -1, -1);
                  MEMORY[0x1BA9E48C0](v90, -1, -1);
                }
                else
                {

                  swift_release_n();
                }
              }
            }
LABEL_37:
            swift_release();
            return;
          }
          uint64_t v78 = v116;
        }
        else
        {
          uint64_t v78 = v116;
        }
        char v79 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v79 & 1) == 0) {
          goto LABEL_37;
        }
        goto LABEL_27;
      }
      outlined destroy of ReferenceResolutionClientProtocol?(v55, (uint64_t *)&demangling cache variable for type metadata for UserID?);
    }
    uint64_t v56 = 0;
    goto LABEL_20;
  }
  os_log_type_t v45 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v44, v45))
  {
    uint64_t v46 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v46 = 0;
    _os_log_impl(&dword_1B9C64000, v44, v45, "Ignoring submit because request already finished", v46, 2u);
    MEMORY[0x1BA9E48C0](v46, -1, -1);
  }

  lazy protocol witness table accessor for type ConversationOutputError and conformance ConversationOutputError();
  unint64_t v47 = (void *)swift_allocError();
  *uint64_t v48 = 1;
  a2(0, v47);
}

uint64_t RunSiriKitExecutorProcessor.requestFinished.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_requestFinished);
  swift_beginAccess();
  return *v1;
}

uint64_t RunSiriKitExecutorProcessor.userId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_userId;
  swift_beginAccess();
  return outlined init with copy of ReferenceResolutionClientProtocol?(v3, a1, (uint64_t *)&demangling cache variable for type metadata for UserID?);
}

void *RunSiriKitExecutorProcessor.flowPluginInfo.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_flowPluginInfo);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

uint64_t protocol witness for DecisionMaking.findBestConversationForUnambiguousInput(_:speechData:activeConversations:turnData:bridge:) in conformance DecisionEngine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v15;
  *uint64_t v15 = v7;
  v15[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return DecisionEngine.findBestConversationForUnambiguousInput(_:speechData:activeConversations:turnData:bridge:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t DecisionEngine.findBestConversationForUnambiguousInput(_:speechData:activeConversations:turnData:bridge:)()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[8];
  swift_release();
  uint64_t v3 = type metadata accessor for DecisionEngineResponse();
  uint64_t v4 = v1 + *(int *)(v3 + 24);
  uint64_t v5 = type metadata accessor for Input();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, v2, v5);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  uint64_t v7 = v0[27];
  uint64_t v8 = (uint64_t *)v0[11];
  uint64_t v9 = v0[7];
  *(void *)uint64_t v9 = v7;
  *(unsigned char *)(v9 + 8) = 0;
  DecisionEngineCurareDonator.donateDecisionEngineResponse(decisionEngineResponse:requestId:rcId:)((uint64_t *)v9, *v8, v8[1], 12589, 0xE200000000000000);
  type metadata accessor for ConversationSELFHelper();
  static ConversationSELFHelper.shared.getter();
  if (v7) {
    swift_bridgeObjectRetain();
  }
  uint64_t v10 = v0[16];
  uint64_t v11 = v0[7] + *(int *)(v3 + 24);
  outlined init with copy of ReferenceResolutionClientProtocol?(v11, v10, &demangling cache variable for type metadata for Input?);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  int v13 = v12(v10, 1, v5);
  uint64_t v15 = v0[16];
  uint64_t v14 = v0[17];
  if (v13 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v0[16], &demangling cache variable for type metadata for Input?);
    uint64_t v16 = type metadata accessor for Siri_Nlu_External_UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v14, 1, 1, v16);
  }
  else
  {
    Input.parseHypothesisId.getter(v0[17]);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v15, v5);
  }
  uint64_t v17 = v0[15];
  outlined init with copy of ReferenceResolutionClientProtocol?(v11, v17, &demangling cache variable for type metadata for Input?);
  int v18 = v12(v17, 1, v5);
  uint64_t v19 = v0[15];
  if (v18 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v0[15], &demangling cache variable for type metadata for Input?);
  }
  else
  {
    Input.inputOrAlternativesInterpretableAsUniversalAction.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v19, v5);
  }
  uint64_t v20 = v0[19];
  uint64_t v21 = v0[17];
  dispatch thunk of ConversationSELFHelper.emitDecisionEngineDecision(flowHandlerId:parseHypothesisId:isInterpretableAsUniversalAction:isExistingFlowSelected:)();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v21, &demangling cache variable for type metadata for Siri_Nlu_External_UUID?);
  outlined destroy of RemoteConversationTurnData(v20, type metadata accessor for ConversationHelperInput);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = (uint64_t (*)(void))v0[1];
  return v22();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  long long v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  unsigned __int8 v30 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1B9C64000, v2, v3, "[DecisionEngine] Finding conversation for unambiguous input", v4, 2u);
    MEMORY[0x1BA9E48C0](v4, -1, -1);
  }
  uint64_t v5 = *(void *)(v0 + 168);
  uint64_t v6 = *(void *)(v0 + 88);

  _s14SiriKitRuntime26RemoteConversationTurnDataVWOcTm_0(v6, v5, type metadata accessor for RemoteConversationTurnData);
  uint64_t v7 = Logger.logObject.getter();
  uint64_t v8 = static os_log_type_t.debug.getter();
  uint64_t v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = *(void *)(v0 + 168);
  if (v9)
  {
    uint64_t v11 = *(void *)(v0 + 160);
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    int v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315138;
    BOOL v29 = v13;
    uint64_t v14 = *(void **)(*(void *)(v10 + *(int *)(v11 + 28))
                   + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_conjunctionInfo);
    *(void *)(v0 + 40) = v14;
    uint64_t v15 = v14;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RequestConjunctionInfo?);
    uint64_t v16 = String.init<A>(describing:)();
    *(void *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of RemoteConversationTurnData(v10, type metadata accessor for RemoteConversationTurnData);
    _os_log_impl(&dword_1B9C64000, v7, v8, "ConjunctionInfo: %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v13, -1, -1);
    MEMORY[0x1BA9E48C0](v12, -1, -1);
  }
  else
  {
    outlined destroy of RemoteConversationTurnData(*(void *)(v0 + 168), type metadata accessor for RemoteConversationTurnData);
  }

  int v18 = *(void *)(v0 + 144);
  uint64_t v19 = *(void **)(v0 + 152);
  uint64_t v20 = *(void *)(v0 + 112);
  uint64_t v21 = *(void **)(v0 + 72);
  int v28 = *(_OWORD *)(v0 + 96);
  _s14SiriKitRuntime26RemoteConversationTurnDataVWOcTm_0(*(void *)(v0 + 88), (uint64_t)v19 + *(int *)(v18 + 20), type metadata accessor for RemoteConversationTurnData);
  *uint64_t v19 = v21;
  *(_OWORD *)((char *)v19 + *(int *)(v18 + 24)) = v28;
  *(void *)(v0 + 184) = *(void *)(v20 + 32);
  uint64_t v22 = v21;
  swift_unknownObjectRetain();
  uint64_t v23 = (void *)swift_task_alloc();
  *(void *)(v0 + 192) = v23;
  *uint64_t v23 = v0;
  v23[1] = DecisionEngine.findBestConversationForUnambiguousInput(_:speechData:activeConversations:turnData:bridge:);
  uint64_t v24 = *(void *)(v0 + 152);
  id v25 = *(void *)(v0 + 80);
  uint64_t v26 = *(void *)(v0 + 64);
  return ConversationHelper.selectActiveConversation(input:activeConversations:conversationHelperInput:)(v26, v25, v24);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(void);
  uint64_t v27;

  if (v0[25])
  {
    uint64_t v1 = v0[7];
    uint64_t v2 = v0[8];
    swift_release();
    uint64_t v3 = type metadata accessor for DecisionEngineResponse();
    uint64_t v4 = v1 + *(int *)(v3 + 24);
    uint64_t v5 = type metadata accessor for Input();
    uint64_t v6 = *(void *)(v5 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, v2, v5);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
    uint64_t v7 = v0[25];
    uint64_t v8 = (uint64_t *)v0[11];
    uint64_t v9 = v0[7];
    *(void *)uint64_t v9 = v7;
    *(unsigned char *)(v9 + 8) = 1;
    DecisionEngineCurareDonator.donateDecisionEngineResponse(decisionEngineResponse:requestId:rcId:)((uint64_t *)v9, *v8, v8[1], 12589, 0xE200000000000000);
    type metadata accessor for ConversationSELFHelper();
    static ConversationSELFHelper.shared.getter();
    if (v7) {
      swift_bridgeObjectRetain();
    }
    uint64_t v14 = v0[16];
    uint64_t v15 = v0[7] + *(int *)(v3 + 24);
    outlined init with copy of ReferenceResolutionClientProtocol?(v15, v14, &demangling cache variable for type metadata for Input?);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    uint64_t v17 = v16(v14, 1, v5);
    uint64_t v19 = v0[16];
    int v18 = v0[17];
    if (v17 == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v0[16], &demangling cache variable for type metadata for Input?);
      uint64_t v20 = type metadata accessor for Siri_Nlu_External_UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v18, 1, 1, v20);
    }
    else
    {
      Input.parseHypothesisId.getter(v0[17]);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v19, v5);
    }
    uint64_t v21 = v0[15];
    outlined init with copy of ReferenceResolutionClientProtocol?(v15, v21, &demangling cache variable for type metadata for Input?);
    uint64_t v22 = v16(v21, 1, v5);
    uint64_t v23 = v0[15];
    if (v22 == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v0[15], &demangling cache variable for type metadata for Input?);
    }
    else
    {
      Input.inputOrAlternativesInterpretableAsUniversalAction.getter();
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v23, v5);
    }
    uint64_t v24 = v0[19];
    id v25 = v0[17];
    dispatch thunk of ConversationSELFHelper.emitDecisionEngineDecision(flowHandlerId:parseHypothesisId:isInterpretableAsUniversalAction:isExistingFlowSelected:)();
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v25, &demangling cache variable for type metadata for Siri_Nlu_External_UUID?);
    outlined destroy of RemoteConversationTurnData(v24, type metadata accessor for ConversationHelperInput);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = (uint64_t (*)(void))v0[1];
    return v26();
  }
  else
  {
    uint64_t v10 = (void *)swift_task_alloc();
    v0[26] = v10;
    *uint64_t v10 = v0;
    v10[1] = DecisionEngine.findBestConversationForUnambiguousInput(_:speechData:activeConversations:turnData:bridge:);
    uint64_t v11 = v0[19];
    uint64_t v12 = v0[8];
    return ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:)(v12, v11, 0, 0);
  }
}

uint64_t DecisionEngine.findBestConversationForUnambiguousInput(_:speechData:activeConversations:turnData:bridge:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[13] = a7;
  v8[14] = v7;
  v8[11] = a5;
  v8[12] = a6;
  v8[9] = a3;
  v8[10] = a4;
  v8[7] = a1;
  v8[8] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v8[15] = swift_task_alloc();
  v8[16] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UUID?);
  v8[17] = swift_task_alloc();
  v8[18] = type metadata accessor for ConversationHelperInput(0);
  v8[19] = swift_task_alloc();
  v8[20] = type metadata accessor for RemoteConversationTurnData(0);
  v8[21] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v9 = static MessageBusActor.shared;
  v8[22] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](DecisionEngine.findBestConversationForUnambiguousInput(_:speechData:activeConversations:turnData:bridge:), v9, 0);
}

uint64_t DecisionEngine.findBestConversationForUnambiguousInput(_:speechData:activeConversations:turnData:bridge:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 176);
  *(void *)(*(void *)v1 + 200) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](DecisionEngine.findBestConversationForUnambiguousInput(_:speechData:activeConversations:turnData:bridge:), v2, 0);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v2 = *(void *)(*(void *)v1 + 176);
  *(void *)(*(void *)v1 + 216) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](DecisionEngine.findBestConversationForUnambiguousInput(_:speechData:activeConversations:turnData:bridge:), v2, 0);
}

uint64_t partial apply for closure #1 in RunSiriKitExecutorProcessor.submit(executionOutput:completion:)(void *a1, void *a2)
{
  return closure #1 in RunSiriKitExecutorProcessor.submit(executionOutput:completion:)(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t closure #1 in RunSiriKitExecutorProcessor.submit(executionOutput:completion:)(void *a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v25 = a5;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v11 - 8);
  int v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(a3 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_asyncWork);
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v13, 1, 1, v15);
  swift_retain();
  id v16 = a2;
  uint64_t v17 = one-time initialization token for shared;
  id v18 = a4;
  swift_retain();
  id v19 = a1;
  if (v17 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v20 = static MessageBusActor.shared;
  uint64_t v21 = lazy protocol witness table accessor for type UserID and conformance UserID((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
  uint64_t v22 = (void *)swift_allocObject();
  v22[2] = v20;
  v22[3] = v21;
  v22[4] = a3;
  v22[5] = a2;
  uint64_t v23 = v25;
  v22[6] = v18;
  v22[7] = v23;
  v22[8] = a6;
  v22[9] = a1;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v13, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in RunSiriKitExecutorProcessor.submit(executionOutput:completion:), (uint64_t)v22);
  (*(void (**)(void))(*(void *)v14 + 120))();
  return swift_release();
}

uint64_t RunSiriKitExecutorProcessor.outputCounter.getter()
{
  uint64_t v1 = (unsigned int *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_outputCounter);
  swift_beginAccess();
  return *v1;
}

uint64_t (*RunSiriKitExecutorProcessor.outputCounter.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t partial apply for closure #3 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #3 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t closure #3 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = a5 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData;
  int v13 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v13;
  void *v13 = v7;
  v13[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:)(a3, 1, a4, v12, a6, a7, 0);
}

void RunSiriKitExecutorProcessorExecutionDelegate.flowPluginWillExecute(flowPluginInfo:)(void *a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(void *))(*(void *)Strong + 592))(a1);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationBridge);
    id v4 = a1;
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 138412290;
      id v9 = v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v8 = v4;

      _os_log_impl(&dword_1B9C64000, v5, v6, "RunSiriKitExecutorProcessor already released, ignoring flowPluginWillExecute of %@", v7, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v8, -1, -1);
      MEMORY[0x1BA9E48C0](v7, -1, -1);
    }
    else
    {
    }
  }
}

void RunSiriKitExecutorProcessor.flowPluginWillExecute(flowPluginInfo:)(void *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  id v5 = a1;
  os_log_type_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    id v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    id v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v9 = v5;

    _os_log_impl(&dword_1B9C64000, v6, v7, "Received FlowPluginInfo: %@", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v9, -1, -1);
    MEMORY[0x1BA9E48C0](v8, -1, -1);
  }
  else
  {
  }
  uint64_t v11 = (void **)(v2 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_flowPluginInfo);
  swift_beginAccess();
  uint64_t v12 = *v11;
  *uint64_t v11 = v5;
  v5;

  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_isMuxEnabled) == 1)
  {
    MEMORY[0x1F4188790](v13);
    id v14 = objc_allocWithZone((Class)type metadata accessor for FlowPluginInfoMessage());
    uint64_t v15 = FlowPluginInfoMessage.init(build:)();
    if (v15)
    {
      id v16 = v15;
      __swift_project_boxed_opaque_existential_1((void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_messagePublisher), *(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_messagePublisher + 24));
      dispatch thunk of MessagePublishing.postMessage(_:)();
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v17, v18))
      {
        id v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v19 = 0;
        _os_log_impl(&dword_1B9C64000, v17, v18, "Posted FlowPluginInfo message to the bus", v19, 2u);
        MEMORY[0x1BA9E48C0](v19, -1, -1);
      }
      else
      {

        uint64_t v17 = v16;
      }
    }
    else
    {
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v20))
      {
        uint64_t v21 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v21 = 0;
        _os_log_impl(&dword_1B9C64000, v17, v20, "Could not init FlowPluginInfoMessage", v21, 2u);
        MEMORY[0x1BA9E48C0](v21, -1, -1);
      }
    }
  }
}

void protocol witness for ServiceBridgeDelegate.closeServerRequest(forExecutionRequestId:) in conformance RunSiriKitExecutorProcessorExecutionDelegate()
{
}

void *specialized static ResponseTextExtractionUtil.extractResponseText(fromAddViews:)(void *a1)
{
  id v2 = objc_msgSend(a1, sel_dialogPhase);
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;

    os_log_type_t v7 = (void *)MEMORY[0x1BA9E2DD0](v4, v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    os_log_type_t v7 = 0;
  }
  id v8 = objc_msgSend(self, sel_dialogPhaseForAceDialogPhase_, v7);

  if (!v8) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  id v9 = objc_msgSend(a1, sel_views);
  if (!v9)
  {

    return (void *)MEMORY[0x1E4FBC860];
  }
  id v10 = v9;
  type metadata accessor for SAAceView();
  uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if ((objc_msgSend(v8, sel_isSummaryDialogPhase) & 1) == 0
    && (objc_msgSend(v8, sel_isConfirmationDialogPhase) & 1) == 0
    && !objc_msgSend(v8, sel_isCompletionDialogPhase))
  {

    swift_bridgeObjectRelease();
    return (void *)MEMORY[0x1E4FBC860];
  }
  if ((unint64_t)v11 >> 62)
  {
    if (v11 < 0) {
      id v10 = (void *)v11;
    }
    else {
      id v10 = (void *)(v11 & 0xFFFFFFFFFFFFFF8);
    }
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v42 = v8;
    if (v12) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v42 = v8;
    if (v12)
    {
LABEL_11:
      if (v12 >= 1)
      {
        uint64_t v13 = 0;
        id v10 = (void *)MEMORY[0x1E4FBC860];
        while (1)
        {
          if ((v11 & 0xC000000000000001) != 0) {
            id v14 = (id)MEMORY[0x1BA9E3990](v13, v11);
          }
          else {
            id v14 = *(id *)(v11 + 8 * v13 + 32);
          }
          uint64_t v15 = v14;
          id v16 = objc_msgSend(v14, sel_speakableText);
          if (v16)
          {
            uint64_t v17 = v16;
            uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v20 = v19;
          }
          else
          {
            uint64_t v18 = 0;
            unint64_t v20 = 0xE000000000000000;
          }
          swift_bridgeObjectRelease();
          uint64_t v21 = HIBYTE(v20) & 0xF;
          if ((v20 & 0x2000000000000000) == 0) {
            uint64_t v21 = v18 & 0xFFFFFFFFFFFFLL;
          }
          if (v21)
          {
            id v22 = objc_msgSend(v15, sel_speakableText);
            if (v22) {
              goto LABEL_25;
            }
          }
          else
          {
            id v29 = objc_msgSend(v15, sel_dialog);
            if (v29)
            {
              unsigned __int8 v30 = v29;
              id v31 = objc_msgSend(v29, sel_content);

              if (v31)
              {
                id v22 = objc_msgSend(v31, sel_text);

                if (v22)
                {
LABEL_25:
                  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  uint64_t v25 = v24;

                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    id v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
                  }
                  unint64_t v27 = v10[2];
                  unint64_t v26 = v10[3];
                  if (v27 >= v26 >> 1) {
                    id v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v10);
                  }
                  v10[2] = v27 + 1;
                  int v28 = &v10[2 * v27];
                  v28[4] = v23;
                  v28[5] = v25;
                  goto LABEL_14;
                }
              }
            }
          }

LABEL_14:
          if (v12 == ++v13) {
            goto LABEL_41;
          }
        }
      }
      __break(1u);
      goto LABEL_51;
    }
  }
  id v10 = (void *)MEMORY[0x1E4FBC860];
LABEL_41:
  swift_bridgeObjectRelease_n();
  if (!v10[2])
  {
    swift_bridgeObjectRelease();

    return (void *)MEMORY[0x1E4FBC860];
  }
  if (one-time initialization token for conversationBridge != -1) {
LABEL_51:
  }
    swift_once();
  uint64_t v32 = type metadata accessor for Logger();
  __swift_project_value_buffer(v32, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    uint64_t v43 = v36;
    *(_DWORD *)uint64_t v35 = 136315138;
    uint64_t v37 = swift_bridgeObjectRetain();
    uint64_t v38 = MEMORY[0x1BA9E3080](v37, MEMORY[0x1E4FBB1A0]);
    unint64_t v40 = v39;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v40, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v33, v34, "Found SAUIAddViews response text: %s", v35, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v36, -1, -1);
    MEMORY[0x1BA9E48C0](v35, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }

  return v10;
}

unint64_t type metadata accessor for SAAceView()
{
  unint64_t result = lazy cache variable for type metadata for SAAceView;
  if (!lazy cache variable for type metadata for SAAceView)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
  }
  return result;
}

uint64_t protocol witness for ContextUpdating.applyResponseText(_:scope:userId:) in conformance MultiUserContextUpdater()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 264))();
}

void MultiUserContextUpdater.applyResponseText(_:scope:userId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v11[2] = a1;
  (*(void (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t), void *))(*(void *)v3 + 280))(a2, a3, partial apply for closure #1 in MultiUserContextUpdater.applyResponseText(_:scope:userId:), v11);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v12 = v8;
    *(_DWORD *)os_log_type_t v7 = 136315138;
    uint64_t v9 = Dictionary.debugDescription.getter();
    v11[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v5, v6, "Applied response text with error: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v8, -1, -1);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t lazy protocol witness table accessor for type UserID and conformance UserID(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UserID and conformance UserID()
{
  unint64_t result = lazy protocol witness table cache variable for type UserID and conformance UserID;
  if (!lazy protocol witness table cache variable for type UserID and conformance UserID)
  {
    type metadata accessor for UserID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UserID and conformance UserID);
  }
  return result;
}

uint64_t (*MultiUserContextUpdater.userIdToContextUpdater.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t partial apply for closure #1 in MultiUserContextUpdater.applyResponseText(_:scope:userId:)(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 488))(*(void *)(v1 + 16));
}

Swift::Void __swiftcall ContextUpdater.applyResponseText(_:)(Swift::OpaquePointer a1)
{
  uint64_t v3 = type metadata accessor for ConversationSessionKey();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  os_log_type_t v6 = (char *)&v26[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v26[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v13 = (char *)&v26[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*((void *)a1._rawValue + 2))
  {
    (*(void (**)(uint64_t))(*(void *)v1 + 360))(v11);
    uint64_t v14 = type metadata accessor for UserID();
    int v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for UserID?);
    if (v15 == 1)
    {
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v16 = type metadata accessor for Logger();
      __swift_project_value_buffer(v16, (uint64_t)static Logger.conversationBridge);
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        unint64_t v19 = (uint8_t *)swift_slowAlloc();
        uint64_t v20 = swift_slowAlloc();
        v26[0] = v20;
        *(_DWORD *)unint64_t v19 = 136315138;
        uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000015, 0x80000001BA063FA0, v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1B9C64000, v17, v18, "Cannot use this instance of SingleUserContextUpdater to call %s since userId is nil", v19, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v20, -1, -1);
        MEMORY[0x1BA9E48C0](v19, -1, -1);
      }
    }
    else
    {
      swift_beginAccess();
      uint64_t v21 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v21);
      swift_endAccess();
      (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4FA2640], v3);
      ContextUpdater.valueFromSessionState(forKey:)(v26);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      if (v27)
      {
        uint64_t v22 = type metadata accessor for Siri_Nlu_External_LegacyNLContext();
        int v23 = swift_dynamicCast();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v9, v23 ^ 1u, 1, v22);
      }
      else
      {
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for Any?);
        uint64_t v24 = type metadata accessor for Siri_Nlu_External_LegacyNLContext();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v9, 1, 1, v24);
      }
      ContextUpdater.flushResponseText(legacyNLContext:)((uint64_t)v9);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
    }
  }
}

void ContextUpdater.valueFromSessionState(forKey:)(_OWORD *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UserID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*v1 + 360))(v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for UserID?);
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.conversationBridge);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_1B9C64000, v12, v13, "UserId is nil. Cannot get value from SessionState. Returning nil", v14, 2u);
      MEMORY[0x1BA9E48C0](v14, -1, -1);
    }

    *a1 = 0u;
    a1[1] = 0u;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v5, v6);
    __swift_project_boxed_opaque_existential_1(v1 + 2, v1[5]);
    dispatch thunk of ConversationSessionState.value(forKey:userId:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

void ContextUpdater.flushResponseText(legacyNLContext:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Google_Protobuf_StringValue();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ConversationSessionKey();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v38 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Siri_Nlu_External_LegacyNLContext();
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = v15;
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v11, 1, v12) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.conversationBridge);
    os_log_type_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl(&dword_1B9C64000, v18, v19, "No LegacyNLContext to apply responseText to", v20, 2u);
      MEMORY[0x1BA9E48C0](v20, -1, -1);
    }
  }
  else
  {
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    uint64_t v37 = v14;
    v21(v14, v11, v12);
    uint64_t v22 = v39;
    swift_beginAccess();
    uint64_t v23 = *(void *)(v22 + 240);
    int64_t v24 = *(void *)(v23 + 16);
    uint64_t v25 = MEMORY[0x1E4FBC860];
    if (v24)
    {
      uint64_t v34 = v16;
      uint64_t v35 = v7;
      uint64_t v36 = v6;
      v40[0] = MEMORY[0x1E4FBC860];
      uint64_t v26 = v23;
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24, 0);
      uint64_t v25 = v40[0];
      uint64_t v33 = v26;
      uint64_t v27 = v26 + 40;
      do
      {
        swift_bridgeObjectRetain();
        String.toProtobufStringValue()();
        swift_bridgeObjectRelease();
        v40[0] = v25;
        unint64_t v29 = *(void *)(v25 + 16);
        unint64_t v28 = *(void *)(v25 + 24);
        if (v29 >= v28 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
          uint64_t v25 = v40[0];
        }
        v27 += 16;
        *(void *)(v25 + 16) = v29 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v25+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v29, v5, v2);
        --v24;
      }
      while (v24);
      swift_bridgeObjectRelease();
      uint64_t v7 = v35;
      uint64_t v6 = v36;
      uint64_t v16 = v34;
    }
    unsigned __int8 v30 = v37;
    MEMORY[0x1BA9DE250](v25);
    v40[3] = v12;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v40);
    (*(void (**)(uint64_t *, char *, uint64_t))(v16 + 16))(boxed_opaque_existential_0, v30, v12);
    uint64_t v32 = v38;
    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v38, *MEMORY[0x1E4FA2640], v6);
    ContextUpdater.updateSessionState(withValue:forKey:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v32, v6);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v30, v12);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v40, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
}

void RunSiriKitExecutorProcessorExecutionDelegate.close(withExecutionOutput:needsUserInput:)(void *a1, char a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(void *, void))(*(void *)Strong + 544))(a1, a2 & 1);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.conversationBridge);
    uint64_t v6 = a1;
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v13 = v10;
      *(_DWORD *)uint64_t v9 = 136315138;
      uint64_t v11 = *(void *)&v6[OBJC_IVAR___SKRExecutionOutput_executionRequestId];
      unint64_t v12 = *(void *)&v6[OBJC_IVAR___SKRExecutionOutput_executionRequestId + 8];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v7, v8, "RunSiriKitExecutorProcessor already released, ignoring close of %s", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v10, -1, -1);
      MEMORY[0x1BA9E48C0](v9, -1, -1);
    }
    else
    {
    }
  }
}

void RunSiriKitExecutorProcessor.close(withExecutionOutput:needsUserInput:)(void *a1, char a2)
{
  uint64_t v3 = v2;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationBridge);
  id v7 = a1;
  os_log_type_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    char v19 = a2;
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v20 = v18;
    *(_DWORD *)uint64_t v10 = 136315138;
    id v11 = objc_msgSend(v7, sel_debugDescription);
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v14 = v13;

    a2 = v19;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v8, v9, "<<<--- %s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v18, -1, -1);
    MEMORY[0x1BA9E48C0](v10, -1, -1);
  }
  else
  {
  }
  if ((*(uint64_t (**)(void))(*(void *)v3 + 424))())
  {
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_1B9C64000, v15, v16, "Ignoring close() because request already finished", v17, 2u);
      MEMORY[0x1BA9E48C0](v17, -1, -1);
    }
  }
  else
  {
    RunSiriKitExecutorProcessor.synchronizedClose(executionOutput:errorString:needsUserInput:)(v7, 0, 0, a2 & 1);
  }
}

uint64_t RunSiriKitExecutorProcessor.synchronizedClose(executionOutput:errorString:needsUserInput:)(void *a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v5 = v4;
  LODWORD(v64) = a4;
  uint64_t v68 = a1;
  uint64_t v8 = type metadata accessor for RequestType();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v63 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v11 - 8);
  unint64_t v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UserID();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v62 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v65 = (char *)&v57 - v18;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v66 = (uint64_t)v13;
  uint64_t v67 = a2;
  if (v22)
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v60 = v9;
    int64_t v24 = (uint8_t *)v23;
    uint64_t v25 = swift_slowAlloc();
    uint64_t v61 = v8;
    uint64_t v58 = v25;
    v70[0] = v25;
    uint64_t v59 = v14;
    *(_DWORD *)int64_t v24 = 136315138;
    if (a3) {
      uint64_t v26 = a2;
    }
    else {
      uint64_t v26 = 7104878;
    }
    if (a3) {
      unint64_t v27 = a3;
    }
    else {
      unint64_t v27 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v70);
    uint64_t v14 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v20, v21, "Handling close() from Execution kicked off by RSKE, errorString=%s", v24, 0xCu);
    uint64_t v28 = v58;
    swift_arrayDestroy();
    uint64_t v8 = v61;
    MEMORY[0x1BA9E48C0](v28, -1, -1);
    unint64_t v29 = v24;
    uint64_t v9 = v60;
    MEMORY[0x1BA9E48C0](v29, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  unsigned __int8 v30 = *(void **)(v5 + 16);
  if (a3) {
    specialized static ConversationBridgeUtils.replyCommandFailed(forCommand:errorCode:reason:replyHandler:)(v30, -1, v67, a3, *(void (**)(id, id))(v5 + 32), *(void *)(v5 + 40));
  }
  else {
    specialized static RunSiriKitExecutorProcessor.replyRunSiriKitExecutorCompleted(forCommand:needsUserInput:needsServerExecution:replyHandler:)(v30, v64 & 1, 0, *(void *)(v5 + 32), *(void *)(v5 + 40));
  }
  outlined init with copy of ReferenceResolutionClientProtocol?(v5 + 96, (uint64_t)v70, &demangling cache variable for type metadata for ContextUpdating?);
  uint64_t v31 = v70[3];
  uint64_t v32 = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v70, &demangling cache variable for type metadata for ContextUpdating?);
  uint64_t v67 = v5 + 96;
  if (v31)
  {
    uint64_t v33 = v66;
    (*(void (**)(uint64_t))(*(void *)v5 + 304))(v32);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v33, 1, v14) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v33, (uint64_t *)&demangling cache variable for type metadata for UserID?);
      uint64_t v31 = 0;
    }
    else
    {
      uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 32);
      v34(v65, v33, v14);
      unsigned int v35 = *(unsigned __int8 *)(v5 + 168);
      uint64_t v64 = (void (*)(uint64_t, char *, uint64_t))v34;
      uint64_t v36 = v14;
      if (v35 > 1) {
        LODWORD(v66) = 1;
      }
      else {
        LODWORD(v66) = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      swift_bridgeObjectRelease();
      uint64_t v37 = v63;
      uint64_t v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v63, v5 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_requestType, v8);
      uint64_t v61 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 448))(v38);
      uint64_t v39 = *(uint64_t (**)(char *, char *, uint64_t))(v15 + 16);
      uint64_t v40 = v15;
      uint64_t v41 = v62;
      uint64_t v42 = v65;
      uint64_t v43 = v39(v62, v65, v36);
      char v44 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 328))(v43);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v36);
      type metadata accessor for ConversationContextUpdateMetadata();
      uint64_t v31 = swift_allocObject();
      *(unsigned char *)(v31 + 16) = v66 & 1;
      (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v31 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_requestType, v37, v8);
      *(void *)(v31 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_flowPluginInfo) = v61;
      v64(v31 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_currentUserId, v41, v36);
      *(unsigned char *)(v31 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_emptyServerContext) = 0;
      *(unsigned char *)(v31 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_meetsUserSessionThreshold) = v44 & 1;
    }
  }
  uint64_t v45 = *(void *)(v5 + 48);
  uint64_t v46 = *(char **)(v5 + 136);
  uint64_t v64 = *(void (**)(uint64_t, char *, uint64_t))(v5 + 144);
  uint64_t v65 = v46;
  uint64_t v66 = *(void *)(v5 + 24);
  unint64_t v47 = *(char **)(v5 + 152);
  uint64_t v62 = *(char **)(v5 + 160);
  uint64_t v63 = v47;
  uint64_t v48 = v5 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_sessionId;
  uint64_t v50 = *(void *)(v5 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_plannerInvocationId);
  uint64_t v49 = *(void *)(v5 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_plannerInvocationId + 8);
  uint64_t v51 = swift_allocObject();
  uint64_t v52 = v68;
  *(void *)(v51 + 16) = v5;
  *(void *)(v51 + 24) = v52;
  uint64_t v53 = *(void (**)(id, char *, void (*)(void, void, void), void, void, uint64_t, uint64_t, uint64_t, char *, char *, uint64_t, uint64_t, uint64_t, void (*)(uint64_t, void *), uint64_t))(*(void *)v45 + 296);
  swift_retain();
  id v54 = v52;
  v53(v54, v65, (void (*)(void, void, void))v64, 0, 0, v67, v66, v31, v63, v62, v48, v50, v49, partial apply for closure #1 in RunSiriKitExecutorProcessor.synchronizedClose(executionOutput:errorString:needsUserInput:), v51);
  uint64_t v55 = swift_release();
  (*(void (**)(uint64_t))(*(void *)v5 + 616))(v55);
  swift_release();
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 432))(1);
}

void specialized static RunSiriKitExecutorProcessor.replyRunSiriKitExecutorCompleted(forCommand:needsUserInput:needsServerExecution:replyHandler:)(void *a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  v47[1] = a5;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.conversationBridge);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    v47[0] = v10;
    uint64_t v17 = a1;
    char v18 = a2;
    char v19 = a3;
    uint64_t v20 = a4;
    os_log_type_t v21 = v16;
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl(&dword_1B9C64000, v14, v15, "Sending RSKECompleted as response to RSKE", v16, 2u);
    BOOL v22 = v21;
    a4 = v20;
    a3 = v19;
    a2 = v18;
    a1 = v17;
    uint64_t v10 = v47[0];
    MEMORY[0x1BA9E48C0](v22, -1, -1);
  }

  if (a4)
  {
    v47[0] = a4;
    id v23 = objc_allocWithZone(MEMORY[0x1E4F96730]);
    swift_retain();
    id v24 = objc_msgSend(v23, sel_init);
    UUID.init()();
    uint64_t v25 = UUID.uuidString.getter();
    uint64_t v27 = v26;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    uint64_t v28 = (void *)MEMORY[0x1BA9E2DD0](v25, v27);
    swift_bridgeObjectRelease();
    objc_msgSend(v24, sel_setAceId_, v28);

    id v29 = v24;
    id v30 = objc_msgSend(a1, sel_aceId);
    objc_msgSend(v29, sel_setRefId_, v30);

    objc_msgSend(v29, sel_setNeedsUserInput_, a2 & 1);
    objc_msgSend(v29, sel_setNeedsServerExecution_, a3 & 1);
    id v31 = objc_msgSend(v29, sel_dictionary);
    if (v31)
    {
      uint64_t v32 = v31;
      unint64_t v49 = 0;
      static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();

      if (v49 <= 1) {
        uint64_t v33 = 1;
      }
      else {
        uint64_t v33 = v49;
      }
    }
    else
    {
      uint64_t v33 = 0;
    }
    outlined copy of [AnyHashable : Any]??(v33);
    outlined copy of [AnyHashable : Any]??(v33);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      unint64_t v49 = v37;
      *(_DWORD *)uint64_t v36 = 136315138;
      if (v33 == 1)
      {
        unint64_t v38 = 0xE300000000000000;
        uint64_t v39 = 7104878;
      }
      else
      {
        uint64_t v48 = v33;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]?);
        uint64_t v39 = Optional.debugDescription.getter();
        unint64_t v38 = v40;
      }
      uint64_t v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v38, (uint64_t *)&v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of [AnyHashable : Any]??(v33);
      outlined consume of [AnyHashable : Any]??(v33);
      _os_log_impl(&dword_1B9C64000, v34, v35, "Sending RSKECompleted: %s", v36, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v37, -1, -1);
      MEMORY[0x1BA9E48C0](v36, -1, -1);
    }
    else
    {
      outlined consume of [AnyHashable : Any]??(v33);
      outlined consume of [AnyHashable : Any]??(v33);
    }

    if (v33 == 1)
    {
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
      id v41 = objc_allocWithZone(MEMORY[0x1E4F96648]);
    }
    else
    {
      id v41 = objc_allocWithZone(MEMORY[0x1E4F96648]);
      if (!v33)
      {
        v42.super.Class isa = 0;
        goto LABEL_21;
      }
    }
    v42.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
LABEL_21:
    id v43 = objc_msgSend(v41, sel_initWithDictionary_, v42.super.isa);

    id v44 = v43;
    id v45 = v43;
    uint64_t v46 = v47[0];
    ((void (*)(id, void))v47[0])(v45, 0);

    _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe(v46);
  }
}

Swift::Void __swiftcall RunSiriKitExecutorProcessor.safelyCloseContextUpdater()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_asyncWork);
  uint64_t v6 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v4, 1, 1, v6);
  uint64_t v7 = one-time initialization token for shared;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v8 = static MessageBusActor.shared;
  uint64_t v9 = lazy protocol witness table accessor for type UserID and conformance UserID((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = v8;
  v10[3] = v9;
  v10[4] = v1;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #1 in RunSiriKitExecutorProcessor.safelyCloseContextUpdater(), (uint64_t)v10);
  (*(void (**)(void))(*(void *)v5 + 120))();
  swift_release();
}

uint64_t RunSiriKitExecutorProcessor.requestFinished.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_requestFinished);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

void partial apply for closure #1 in RunSiriKitExecutorProcessor.synchronizedClose(executionOutput:errorString:needsUserInput:)(uint64_t a1, void *a2)
{
  closure #1 in RunSiriKitExecutorProcessor.synchronizedClose(executionOutput:errorString:needsUserInput:)(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24));
}

void closure #1 in RunSiriKitExecutorProcessor.synchronizedClose(executionOutput:errorString:needsUserInput:)(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a3 + 144);
  if (v10)
  {
    uint64_t v11 = *(void *)(a3 + 136);
    uint64_t v12 = *(void *)(a3 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_asyncWork);
    uint64_t v13 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v9, 1, 1, v13);
    swift_bridgeObjectRetain();
    swift_retain();
    id v14 = a2;
    uint64_t v15 = one-time initialization token for shared;
    id v16 = a4;
    if (v15 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v17 = static MessageBusActor.shared;
    uint64_t v18 = lazy protocol witness table accessor for type UserID and conformance UserID((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
    char v19 = (void *)swift_allocObject();
    v19[2] = v17;
    v19[3] = v18;
    v19[4] = a3;
    v19[5] = a2;
    v19[6] = v11;
    v19[7] = v10;
    v19[8] = v16;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in RunSiriKitExecutorProcessor.synchronizedClose(executionOutput:errorString:needsUserInput:), (uint64_t)v19);
    (*(void (**)(void))(*(void *)v12 + 120))();
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.conversationBridge);
    os_log_t v24 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v21))
    {
      BOOL v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v22 = 0;
      _os_log_impl(&dword_1B9C64000, v24, v21, "Failed to find requestId for logging selg message", v22, 2u);
      MEMORY[0x1BA9E48C0](v22, -1, -1);
    }
    os_log_t v23 = v24;
  }
}

uint64_t ContextUpdater.domainHints.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RunSiriKitExecutorProcessor.__deallocating_deinit()
{
  RunSiriKitExecutorProcessor.deinit();

  return swift_deallocClassInstance();
}

uint64_t RunSiriKitExecutorProcessor.deinit()
{
  _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe(*(void *)(v0 + 32));
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 96, &demangling cache variable for type metadata for ContextUpdating?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_requestType;
  uint64_t v2 = type metadata accessor for RequestType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_sessionId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_messagePublisher);
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_previousUserId, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  outlined consume of UserSessionState(*(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_userSessionState), *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_userSessionState + 8));

  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_userId, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  return v0;
}

uint64_t RunSiriKitExecutorProcessorExecutionDelegate.__deallocating_deinit()
{
  swift_weakDestroy();
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:)()
{
  uint64_t v100 = v0;
  uint64_t v1 = *(void *)(v0 + 568);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 576) = v2;
  if (!v2)
  {
    *(void *)(v0 + 168) = 0;
    *(_OWORD *)(v0 + 136) = 0u;
    *(_OWORD *)(v0 + 152) = 0u;
LABEL_16:
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 136, &demangling cache variable for type metadata for ConversationHandler?);
    uint64_t v75 = Logger.logObject.getter();
    os_log_type_t v76 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v75, v76))
    {
      uint64_t v77 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v77 = 0;
      _os_log_impl(&dword_1B9C64000, v75, v76, "[ConversationHelper] No conversation handler found for input, returning nil", v77, 2u);
      MEMORY[0x1BA9E48C0](v77, -1, -1);
    }
    uint64_t v79 = *(void *)(v0 + 496);
    uint64_t v78 = *(void *)(v0 + 504);
    uint64_t v80 = *(void *)(v0 + 488);

LABEL_19:
    (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v78, v80);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v81 = *(uint64_t (**)(void))(v0 + 8);
    return v81(0);
  }
  uint64_t v4 = *(void *)(v0 + 464);
  uint64_t v3 = *(void *)(v0 + 472);
  uint64_t v5 = *(void *)(v0 + 448);
  uint64_t v6 = *(void *)(v0 + 360);
  int v7 = *(_DWORD *)(*(void *)(v0 + 368) + 80);
  *(_DWORD *)(v0 + 632) = v7;
  outlined init with copy of ReferenceResolutionClientProtocol?(v1 + ((v7 + 32) & ~(unint64_t)v7), v5, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
  uint64_t v8 = v5 + *(int *)(v6 + 48);
  outlined init with copy of ReferenceResolutionClientProtocol(v8 + 8, v0 + 136);
  outlined destroy of RemoteConversationOrReformedInput(v8, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(void *)(v0 + 584) = v9;
  *(void *)(v0 + 592) = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v9(v5, v4);
  if (!*(void *)(v0 + 160)) {
    goto LABEL_16;
  }
  uint64_t v97 = (void *)(v0 + 56);
  uint64_t v88 = (void *)(v0 + 96);
  os_log_type_t v89 = (void *)(v0 + 176);
  uint64_t v10 = *(void *)(v0 + 360);
  uint64_t v11 = *(void *)(v0 + 368);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 136, &demangling cache variable for type metadata for ConversationHandler?);
  uint64_t v12 = 0;
  *(_DWORD *)(v0 + 636) = *(_DWORD *)(v10 + 48);
  *(void *)(v0 + 600) = *(void *)(v11 + 72);
  uint64_t v13 = &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler);
  while (1)
  {
    *(void *)(v0 + 608) = v12;
    uint64_t v17 = *(void *)(v0 + 464);
    uint64_t v18 = *(void *)(v0 + 472);
    uint64_t v20 = *(void *)(v0 + 432);
    uint64_t v19 = *(void *)(v0 + 440);
    uint64_t v21 = *(void *)(v0 + 360);
    int v22 = *(unsigned __int8 *)(v0 + 640);
    uint64_t v23 = v19 + *(int *)(v0 + 636);
    os_log_t v24 = v13;
    outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 568)+ ((*(unsigned __int8 *)(v0 + 632) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 632))+ *(void *)(v0 + 600) * v12, v19, v13);
    uint64_t v25 = v20 + *(int *)(v21 + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v20, v19, v17);
    outlined init with take of RemoteConversationOrReformedInput(v23, v25, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
    int v98 = *(void (**)(void))(v18 + 16);
    if (v22 != 1) {
      break;
    }
    uint64_t v26 = *(void *)(v0 + 424) + *(int *)(*(void *)(v0 + 360) + 48);
    v98();
    uint64_t v27 = v25;
    outlined init with copy of RemoteConversationOrReformedInput(v25, v26, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
    outlined init with copy of ReferenceResolutionClientProtocol(v26 + 8, (uint64_t)v97);
    outlined destroy of RemoteConversationOrReformedInput(v26, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
    uint64_t v28 = *(void *)(v0 + 80);
    uint64_t v29 = *(void *)(v0 + 88);
    __swift_project_boxed_opaque_existential_1(v97, v28);
    uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 16))(v28, v29);
    uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v0 + 584);
    uint64_t v33 = *(void *)(v0 + 464);
    uint64_t v34 = *(void *)(v0 + 424);
    if (v30 == 0xD000000000000021 && v31 == 0x80000001BA062AF0)
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v97);
      v32(v34, v33);
      uint64_t v25 = v27;
    }
    else
    {
      char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v97);
      v32(v34, v33);
      uint64_t v25 = v27;
      if ((v35 & 1) == 0) {
        break;
      }
    }
    uint64_t v37 = *(void *)(v0 + 408);
    uint64_t v36 = *(void *)(v0 + 416);
    uint64_t v38 = v36 + *(int *)(*(void *)(v0 + 360) + 48);
    ((void (*)(uint64_t, void, void))v98)(v36, *(void *)(v0 + 432), *(void *)(v0 + 464));
    outlined init with copy of RemoteConversationOrReformedInput(v25, v38, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
    uint64_t v39 = v37;
    unint64_t v40 = v24;
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v36, v39, v24);
    id v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v91 = *(void (**)(uint64_t, uint64_t))(v0 + 584);
      uint64_t v43 = *(void *)(v0 + 464);
      uint64_t v93 = *(void *)(v0 + 432);
      uint64_t v44 = *(void *)(v0 + 400);
      uint64_t v45 = *(void *)(v0 + 408);
      uint64_t v46 = *(void *)(v0 + 360);
      uint64_t v47 = swift_slowAlloc();
      uint64_t v92 = swift_slowAlloc();
      uint64_t v99 = v92;
      *(_DWORD *)uint64_t v47 = 136315138;
      uint64_t v48 = *(int *)(v46 + 48);
      uint64_t v49 = v44 + v48;
      uint64_t v90 = v45;
      uint64_t v50 = v45 + v48;
      ((void (*)(uint64_t, uint64_t, uint64_t))v98)(v44, v45, v43);
      outlined init with copy of RemoteConversationOrReformedInput(v50, v49, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      outlined init with copy of ReferenceResolutionClientProtocol(v49 + 8, (uint64_t)v89);
      outlined destroy of RemoteConversationOrReformedInput(v49, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      uint64_t v51 = *(void *)(v0 + 200);
      uint64_t v52 = *(void *)(v0 + 208);
      __swift_project_boxed_opaque_existential_1(v89, v51);
      uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 16))(v51, v52);
      unint64_t v55 = v54;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v89);
      v91(v44, v43);
      *(void *)(v47 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v55, &v99);
      swift_bridgeObjectRelease();
      outlined destroy of ReferenceResolutionClientProtocol?(v90, v40);
      _os_log_impl(&dword_1B9C64000, v41, v42, "[ConversationHelper] Skipping %s as we should not fall back to it.", (uint8_t *)v47, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v92, -1, -1);
      MEMORY[0x1BA9E48C0](v47, -1, -1);

      uint64_t v16 = v93;
    }
    else
    {
      uint64_t v14 = *(void *)(v0 + 432);
      uint64_t v15 = *(void *)(v0 + 408);

      outlined destroy of ReferenceResolutionClientProtocol?(v15, v40);
      uint64_t v16 = v14;
    }
    outlined destroy of ReferenceResolutionClientProtocol?(v16, v40);
    uint64_t v13 = v40;
    uint64_t v12 = *(void *)(v0 + 608) + 1;
    if (v12 == *(void *)(v0 + 576))
    {
      uint64_t v78 = *(void *)(v0 + 504);
      uint64_t v80 = *(void *)(v0 + 488);
      uint64_t v79 = *(void *)(v0 + 496);
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
  }
  uint64_t v57 = *(void *)(v0 + 384);
  uint64_t v56 = *(void *)(v0 + 392);
  uint64_t v58 = v56 + *(int *)(*(void *)(v0 + 360) + 48);
  ((void (*)(uint64_t, void, void))v98)(v56, *(void *)(v0 + 432), *(void *)(v0 + 464));
  outlined init with copy of RemoteConversationOrReformedInput(v25, v58, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v56, v57, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
  uint64_t v59 = Logger.logObject.getter();
  os_log_type_t v60 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v59, v60))
  {
    uint64_t v95 = *(void (**)(uint64_t, uint64_t))(v0 + 584);
    uint64_t v61 = *(void *)(v0 + 464);
    uint64_t v62 = *(void *)(v0 + 400);
    uint64_t v63 = *(void *)(v0 + 384);
    uint64_t v64 = *(void *)(v0 + 360);
    uint64_t v65 = swift_slowAlloc();
    uint64_t v96 = swift_slowAlloc();
    uint64_t v99 = v96;
    *(_DWORD *)uint64_t v65 = 136315138;
    uint64_t v66 = *(int *)(v64 + 48);
    uint64_t v67 = v62 + v66;
    uint64_t v68 = v63;
    uint64_t v94 = v63;
    uint64_t v69 = v63 + v66;
    ((void (*)(uint64_t, uint64_t, uint64_t))v98)(v62, v68, v61);
    outlined init with copy of RemoteConversationOrReformedInput(v69, v67, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
    outlined init with copy of ReferenceResolutionClientProtocol(v67 + 8, (uint64_t)v88);
    outlined destroy of RemoteConversationOrReformedInput(v67, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
    uint64_t v71 = *(void *)(v0 + 120);
    uint64_t v70 = *(void *)(v0 + 128);
    __swift_project_boxed_opaque_existential_1(v88, v71);
    uint64_t v72 = (*(uint64_t (**)(uint64_t, uint64_t))(v70 + 16))(v71, v70);
    unint64_t v74 = v73;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v88);
    v95(v62, v61);
    *(void *)(v65 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v74, &v99);
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v94, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
    _os_log_impl(&dword_1B9C64000, v59, v60, "[ConversationHelper] Trying handler: %s", (uint8_t *)v65, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v96, -1, -1);
    MEMORY[0x1BA9E48C0](v65, -1, -1);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 384), &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
  }

  uint64_t v83 = *(void *)(v0 + 376) + *(int *)(*(void *)(v0 + 360) + 48);
  v98();
  outlined init with copy of RemoteConversationOrReformedInput(v25, v83, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
  outlined init with copy of ReferenceResolutionClientProtocol(v83 + 8, v0 + 16);
  outlined destroy of RemoteConversationOrReformedInput(v83, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
  id v84 = (void *)swift_task_alloc();
  *(void *)(v0 + 616) = v84;
  void *v84 = v0;
  v84[1] = ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:);
  uint64_t v85 = *(void *)(v0 + 504);
  uint64_t v86 = *(void *)(v0 + 344);
  uint64_t v87 = *(void *)(v0 + 280);
  return ConversationHelper.loadConversationAndAccept(handler:input:conversationHelperInput:)(v86, v0 + 16, v85, v87);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(void);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  void (*v47)(void);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  NSObject *v62;
  os_log_type_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(void);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  void *v92;
  os_log_type_t type;
  void (*v94)(uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t, uint64_t);
  uint64_t v99;
  os_log_type_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;

  uint64_t v103 = v0;
  uint64_t v1 = *(void **)(v0 + 624);
  (*(void (**)(void, void))(v0 + 584))(*(void *)(v0 + 376), *(void *)(v0 + 464));
  uint64_t v2 = v1;
  uint64_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void **)(v0 + 624);
    int v7 = *(void *)(v0 + 432);
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    char v102 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    *(void *)(v0 + 256) = v6;
    uint64_t v10 = v6;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v11 = String.init<A>(describing:)();
    *(void *)(v8 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v102);
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, v4, v5, "[ConversationHelper] Error during loadConversationAndAccept: %s. Will try the next handler", (uint8_t *)v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v9, -1, -1);
    MEMORY[0x1BA9E48C0](v8, -1, -1);

    uint64_t v13 = v7;
  }
  else
  {
    uint64_t v14 = *(void **)(v0 + 624);
    uint64_t v15 = *(void *)(v0 + 432);

    uint64_t v13 = v15;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(v13, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
  uint64_t v16 = *(void *)(v0 + 608) + 1;
  if (v16 == *(void *)(v0 + 576))
  {
LABEL_5:
    uint64_t v17 = *(void *)(v0 + 504);
    uint64_t v18 = *(void *)(v0 + 488);
    uint64_t v19 = *(void *)(v0 + 496);
    swift_release();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
    return v20(0);
  }
  else
  {
    uint64_t v91 = v0 + 16;
    uint64_t v101 = (void *)(v0 + 56);
    uint64_t v90 = (void *)(v0 + 96);
    uint64_t v92 = (void *)(v0 + 176);
    int v22 = &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler);
    while (1)
    {
      *(void *)(v0 + 608) = v16;
      uint64_t v38 = *(void *)(v0 + 464);
      uint64_t v39 = *(void *)(v0 + 472);
      id v41 = *(void *)(v0 + 432);
      unint64_t v40 = *(void *)(v0 + 440);
      os_log_type_t v42 = *(void *)(v0 + 360);
      uint64_t v43 = *(unsigned __int8 *)(v0 + 640);
      uint64_t v44 = v40 + *(int *)(v0 + 636);
      uint64_t v45 = v22;
      outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 568)+ ((*(unsigned __int8 *)(v0 + 632) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 632))+ *(void *)(v0 + 600) * v16, v40, v22);
      uint64_t v46 = v41 + *(int *)(v42 + 48);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 32))(v41, v40, v38);
      outlined init with take of RemoteConversationOrReformedInput(v44, v46, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      uint64_t v47 = *(void (**)(void))(v39 + 16);
      if (v43 != 1) {
        break;
      }
      uint64_t v48 = *(void *)(v0 + 424) + *(int *)(*(void *)(v0 + 360) + 48);
      v47();
      outlined init with copy of RemoteConversationOrReformedInput(v46, v48, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      outlined init with copy of ReferenceResolutionClientProtocol(v48 + 8, (uint64_t)v101);
      outlined destroy of RemoteConversationOrReformedInput(v48, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      uint64_t v49 = *(void *)(v0 + 80);
      uint64_t v50 = *(void *)(v0 + 88);
      __swift_project_boxed_opaque_existential_1(v101, v49);
      uint64_t v51 = (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 16))(v49, v50);
      uint64_t v53 = *(void (**)(uint64_t, uint64_t))(v0 + 584);
      unint64_t v54 = *(void *)(v0 + 464);
      unint64_t v55 = *(void *)(v0 + 424);
      if (v51 == 0xD000000000000021 && v52 == 0x80000001BA062AF0)
      {
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v101);
        v53(v55, v54);
      }
      else
      {
        uint64_t v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v101);
        v53(v55, v54);
        if ((v56 & 1) == 0) {
          break;
        }
      }
      uint64_t v58 = *(void *)(v0 + 408);
      uint64_t v57 = *(void *)(v0 + 416);
      uint64_t v59 = v57 + *(int *)(*(void *)(v0 + 360) + 48);
      ((void (*)(uint64_t, void, void))v47)(v57, *(void *)(v0 + 432), *(void *)(v0 + 464));
      outlined init with copy of RemoteConversationOrReformedInput(v46, v59, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      os_log_type_t v60 = v58;
      uint64_t v61 = v45;
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v57, v60, v45);
      uint64_t v62 = Logger.logObject.getter();
      uint64_t v63 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v62, v63))
      {
        uint64_t v94 = *(void (**)(uint64_t, uint64_t))(v0 + 584);
        uint64_t v23 = *(void *)(v0 + 464);
        uint64_t v97 = *(void *)(v0 + 432);
        os_log_t v24 = *(void *)(v0 + 400);
        uint64_t v25 = *(void *)(v0 + 408);
        os_log_type_t type = v63;
        uint64_t v26 = *(void *)(v0 + 360);
        uint64_t v27 = v47;
        uint64_t v28 = swift_slowAlloc();
        uint64_t v96 = swift_slowAlloc();
        char v102 = v96;
        *(_DWORD *)uint64_t v28 = 136315138;
        uint64_t v29 = *(int *)(v26 + 48);
        uint64_t v30 = v24 + v29;
        uint64_t v31 = v25 + v29;
        ((void (*)(uint64_t, uint64_t, uint64_t))v27)(v24, v25, v23);
        outlined init with copy of RemoteConversationOrReformedInput(v31, v30, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
        outlined init with copy of ReferenceResolutionClientProtocol(v30 + 8, (uint64_t)v92);
        outlined destroy of RemoteConversationOrReformedInput(v30, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
        uint64_t v32 = *(void *)(v0 + 200);
        uint64_t v33 = *(void *)(v0 + 208);
        __swift_project_boxed_opaque_existential_1(v92, v32);
        uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 16))(v32, v33);
        uint64_t v36 = v35;
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v92);
        v94(v24, v23);
        *(void *)(v28 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v36, &v102);
        swift_bridgeObjectRelease();
        outlined destroy of ReferenceResolutionClientProtocol?(v25, v61);
        _os_log_impl(&dword_1B9C64000, v62, type, "[ConversationHelper] Skipping %s as we should not fall back to it.", (uint8_t *)v28, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v96, -1, -1);
        MEMORY[0x1BA9E48C0](v28, -1, -1);

        uint64_t v37 = v97;
      }
      else
      {
        uint64_t v64 = *(void *)(v0 + 432);
        uint64_t v65 = *(void *)(v0 + 408);

        outlined destroy of ReferenceResolutionClientProtocol?(v65, v45);
        uint64_t v37 = v64;
      }
      outlined destroy of ReferenceResolutionClientProtocol?(v37, v61);
      int v22 = v61;
      uint64_t v16 = *(void *)(v0 + 608) + 1;
      if (v16 == *(void *)(v0 + 576)) {
        goto LABEL_5;
      }
    }
    uint64_t v67 = *(void *)(v0 + 384);
    uint64_t v66 = *(void *)(v0 + 392);
    uint64_t v68 = v66 + *(int *)(*(void *)(v0 + 360) + 48);
    ((void (*)(uint64_t, void, void))v47)(v66, *(void *)(v0 + 432), *(void *)(v0 + 464));
    outlined init with copy of RemoteConversationOrReformedInput(v46, v68, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v66, v67, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
    uint64_t v69 = Logger.logObject.getter();
    uint64_t v70 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v69, v70))
    {
      int v98 = *(void (**)(uint64_t, uint64_t))(v0 + 584);
      uint64_t v71 = *(void *)(v0 + 464);
      uint64_t v72 = *(void *)(v0 + 400);
      unint64_t v73 = *(void *)(v0 + 384);
      uint64_t v100 = v70;
      unint64_t v74 = *(void *)(v0 + 360);
      uint64_t v95 = swift_slowAlloc();
      uint64_t v99 = swift_slowAlloc();
      char v102 = v99;
      *(_DWORD *)uint64_t v95 = 136315138;
      uint64_t v75 = *(int *)(v74 + 48);
      os_log_type_t v76 = v72 + v75;
      uint64_t v77 = v47;
      uint64_t v78 = v73 + v75;
      ((void (*)(uint64_t, uint64_t, uint64_t))v77)(v72, v73, v71);
      outlined init with copy of RemoteConversationOrReformedInput(v78, v76, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      outlined init with copy of ReferenceResolutionClientProtocol(v76 + 8, (uint64_t)v90);
      outlined destroy of RemoteConversationOrReformedInput(v76, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      uint64_t v80 = *(void *)(v0 + 120);
      uint64_t v79 = *(void *)(v0 + 128);
      __swift_project_boxed_opaque_existential_1(v90, v80);
      uint64_t v81 = v80;
      uint64_t v47 = v77;
      uint64_t v82 = (*(uint64_t (**)(uint64_t, uint64_t))(v79 + 16))(v81, v79);
      id v84 = v83;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v90);
      v98(v72, v71);
      *(void *)(v95 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v82, v84, &v102);
      swift_bridgeObjectRelease();
      outlined destroy of ReferenceResolutionClientProtocol?(v73, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
      _os_log_impl(&dword_1B9C64000, v69, v100, "[ConversationHelper] Trying handler: %s", (uint8_t *)v95, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v99, -1, -1);
      MEMORY[0x1BA9E48C0](v95, -1, -1);
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 384), &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
    }

    uint64_t v85 = *(void *)(v0 + 376) + *(int *)(*(void *)(v0 + 360) + 48);
    v47();
    outlined init with copy of RemoteConversationOrReformedInput(v46, v85, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
    outlined init with copy of ReferenceResolutionClientProtocol(v85 + 8, v91);
    outlined destroy of RemoteConversationOrReformedInput(v85, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
    uint64_t v86 = (void *)swift_task_alloc();
    *(void *)(v0 + 616) = v86;
    char *v86 = v0;
    v86[1] = ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:);
    uint64_t v87 = *(void *)(v0 + 504);
    uint64_t v88 = *(void *)(v0 + 344);
    os_log_type_t v89 = *(void *)(v0 + 280);
    return ConversationHelper.loadConversationAndAccept(handler:input:conversationHelperInput:)(v88, v91, v87, v89);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t (*v64)(uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(uint64_t, uint64_t);
  uint64_t v106;
  void *v107;
  void (*v108)(void);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;

  uint64_t v110 = v0;
  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 352);
  uint64_t v3 = *(void *)(v0 + 336);
  uint64_t v4 = *(void *)(v0 + 304);
  uint64_t v5 = *(void *)(v0 + 312);
  outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 432), &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v1, v2, &demangling cache variable for type metadata for RemoteConversationOrReformedInput?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v2, v3, &demangling cache variable for type metadata for RemoteConversationOrReformedInput?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 336), &demangling cache variable for type metadata for RemoteConversationOrReformedInput?);
    uint64_t v6 = *(void *)(v0 + 608) + 1;
    if (v6 == *(void *)(v0 + 576))
    {
LABEL_3:
      int v7 = *(void *)(v0 + 504);
      uint64_t v8 = *(void *)(v0 + 488);
      uint64_t v9 = *(void *)(v0 + 496);
      swift_release();
      swift_bridgeObjectRelease();
LABEL_9:
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
      uint64_t v100 = 0;
LABEL_21:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v64 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v64(v100);
    }
    uint64_t v107 = (void *)(v0 + 56);
    uint64_t v97 = (void *)(v0 + 96);
    int v98 = (void *)(v0 + 176);
    uint64_t v20 = &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler);
    while (1)
    {
      *(void *)(v0 + 608) = v6;
      char v35 = *(void *)(v0 + 464);
      uint64_t v36 = *(void *)(v0 + 472);
      uint64_t v38 = *(void *)(v0 + 432);
      uint64_t v37 = *(void *)(v0 + 440);
      uint64_t v39 = *(void *)(v0 + 360);
      unint64_t v40 = *(unsigned __int8 *)(v0 + 640);
      id v41 = v37 + *(int *)(v0 + 636);
      os_log_type_t v42 = v20;
      outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 568)+ ((*(unsigned __int8 *)(v0 + 632) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 632))+ *(void *)(v0 + 600) * v6, v37, v20);
      uint64_t v43 = v38 + *(int *)(v39 + 48);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32))(v38, v37, v35);
      outlined init with take of RemoteConversationOrReformedInput(v41, v43, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      unint64_t v108 = *(void (**)(void))(v36 + 16);
      if (v40 != 1) {
        break;
      }
      uint64_t v44 = *(void *)(v0 + 424) + *(int *)(*(void *)(v0 + 360) + 48);
      v108();
      uint64_t v45 = v43;
      outlined init with copy of RemoteConversationOrReformedInput(v43, v44, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      outlined init with copy of ReferenceResolutionClientProtocol(v44 + 8, (uint64_t)v107);
      outlined destroy of RemoteConversationOrReformedInput(v44, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      uint64_t v46 = *(void *)(v0 + 80);
      uint64_t v47 = *(void *)(v0 + 88);
      __swift_project_boxed_opaque_existential_1(v107, v46);
      uint64_t v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 16))(v46, v47);
      uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v0 + 584);
      uint64_t v51 = *(void *)(v0 + 464);
      uint64_t v52 = *(void *)(v0 + 424);
      if (v48 == 0xD000000000000021 && v49 == 0x80000001BA062AF0)
      {
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v107);
        v50(v52, v51);
        uint64_t v43 = v45;
      }
      else
      {
        uint64_t v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v107);
        v50(v52, v51);
        uint64_t v43 = v45;
        if ((v53 & 1) == 0) {
          break;
        }
      }
      unint64_t v55 = *(void *)(v0 + 408);
      unint64_t v54 = *(void *)(v0 + 416);
      uint64_t v56 = v54 + *(int *)(*(void *)(v0 + 360) + 48);
      ((void (*)(uint64_t, void, void))v108)(v54, *(void *)(v0 + 432), *(void *)(v0 + 464));
      outlined init with copy of RemoteConversationOrReformedInput(v43, v56, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      uint64_t v57 = v55;
      uint64_t v58 = v42;
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v54, v57, v42);
      uint64_t v59 = Logger.logObject.getter();
      os_log_type_t v60 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v59, v60))
      {
        uint64_t v101 = *(void (**)(uint64_t, uint64_t))(v0 + 584);
        uint64_t v21 = *(void *)(v0 + 464);
        uint64_t v103 = *(void *)(v0 + 432);
        int v22 = *(void *)(v0 + 400);
        uint64_t v23 = *(void *)(v0 + 408);
        os_log_t v24 = *(void *)(v0 + 360);
        uint64_t v25 = swift_slowAlloc();
        char v102 = swift_slowAlloc();
        unint64_t v109 = v102;
        *(_DWORD *)uint64_t v25 = 136315138;
        uint64_t v26 = *(int *)(v24 + 48);
        uint64_t v27 = v22 + v26;
        uint64_t v99 = v23;
        uint64_t v28 = v23 + v26;
        ((void (*)(uint64_t, uint64_t, uint64_t))v108)(v22, v23, v21);
        outlined init with copy of RemoteConversationOrReformedInput(v28, v27, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
        outlined init with copy of ReferenceResolutionClientProtocol(v27 + 8, (uint64_t)v98);
        outlined destroy of RemoteConversationOrReformedInput(v27, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
        uint64_t v29 = *(void *)(v0 + 200);
        uint64_t v30 = *(void *)(v0 + 208);
        __swift_project_boxed_opaque_existential_1(v98, v29);
        uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 16))(v29, v30);
        uint64_t v33 = v32;
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v98);
        v101(v22, v21);
        *(void *)(v25 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v33, &v109);
        swift_bridgeObjectRelease();
        outlined destroy of ReferenceResolutionClientProtocol?(v99, v58);
        _os_log_impl(&dword_1B9C64000, v59, v60, "[ConversationHelper] Skipping %s as we should not fall back to it.", (uint8_t *)v25, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v102, -1, -1);
        MEMORY[0x1BA9E48C0](v25, -1, -1);

        uint64_t v34 = v103;
      }
      else
      {
        uint64_t v61 = *(void *)(v0 + 432);
        uint64_t v62 = *(void *)(v0 + 408);

        outlined destroy of ReferenceResolutionClientProtocol?(v62, v58);
        uint64_t v34 = v61;
      }
      outlined destroy of ReferenceResolutionClientProtocol?(v34, v58);
      uint64_t v20 = v58;
      uint64_t v6 = *(void *)(v0 + 608) + 1;
      if (v6 == *(void *)(v0 + 576)) {
        goto LABEL_3;
      }
    }
    uint64_t v67 = *(void *)(v0 + 384);
    uint64_t v66 = *(void *)(v0 + 392);
    uint64_t v68 = v66 + *(int *)(*(void *)(v0 + 360) + 48);
    ((void (*)(uint64_t, void, void))v108)(v66, *(void *)(v0 + 432), *(void *)(v0 + 464));
    outlined init with copy of RemoteConversationOrReformedInput(v43, v68, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v66, v67, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
    uint64_t v69 = Logger.logObject.getter();
    uint64_t v70 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v69, v70))
    {
      id v105 = *(void (**)(uint64_t, uint64_t))(v0 + 584);
      uint64_t v71 = *(void *)(v0 + 464);
      uint64_t v72 = *(void *)(v0 + 400);
      unint64_t v73 = *(void *)(v0 + 384);
      unint64_t v74 = *(void *)(v0 + 360);
      uint64_t v75 = swift_slowAlloc();
      v106 = swift_slowAlloc();
      unint64_t v109 = v106;
      *(_DWORD *)uint64_t v75 = 136315138;
      os_log_type_t v76 = *(int *)(v74 + 48);
      uint64_t v77 = v72 + v76;
      uint64_t v78 = v73;
      id v104 = v73;
      uint64_t v79 = v73 + v76;
      ((void (*)(uint64_t, uint64_t, uint64_t))v108)(v72, v78, v71);
      outlined init with copy of RemoteConversationOrReformedInput(v79, v77, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      outlined init with copy of ReferenceResolutionClientProtocol(v77 + 8, (uint64_t)v97);
      outlined destroy of RemoteConversationOrReformedInput(v77, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      uint64_t v81 = *(void *)(v0 + 120);
      uint64_t v80 = *(void *)(v0 + 128);
      __swift_project_boxed_opaque_existential_1(v97, v81);
      uint64_t v82 = (*(uint64_t (**)(uint64_t, uint64_t))(v80 + 16))(v81, v80);
      id v84 = v83;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v97);
      v105(v72, v71);
      *(void *)(v75 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v82, v84, &v109);
      swift_bridgeObjectRelease();
      outlined destroy of ReferenceResolutionClientProtocol?(v104, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
      _os_log_impl(&dword_1B9C64000, v69, v70, "[ConversationHelper] Trying handler: %s", (uint8_t *)v75, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v106, -1, -1);
      MEMORY[0x1BA9E48C0](v75, -1, -1);
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 384), &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
    }

    uint64_t v92 = *(void *)(v0 + 376) + *(int *)(*(void *)(v0 + 360) + 48);
    v108();
    outlined init with copy of RemoteConversationOrReformedInput(v43, v92, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
    outlined init with copy of ReferenceResolutionClientProtocol(v92 + 8, v0 + 16);
    outlined destroy of RemoteConversationOrReformedInput(v92, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
    uint64_t v93 = (void *)swift_task_alloc();
    *(void *)(v0 + 616) = v93;
    uint8_t *v93 = v0;
    v93[1] = ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:);
    uint64_t v94 = *(void *)(v0 + 504);
    uint64_t v95 = *(void *)(v0 + 344);
    uint64_t v96 = *(void *)(v0 + 280);
    return ConversationHelper.loadConversationAndAccept(handler:input:conversationHelperInput:)(v95, v0 + 16, v94, v96);
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 496);
    uint64_t v10 = *(void *)(v0 + 504);
    uint64_t v12 = *(void *)(v0 + 488);
    uint64_t v14 = *(void *)(v0 + 328);
    uint64_t v13 = *(void *)(v0 + 336);
    uint64_t v15 = *(void *)(v0 + 320);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    outlined init with take of RemoteConversationOrReformedInput(v13, v14, type metadata accessor for RemoteConversationOrReformedInput);
    outlined init with take of RemoteConversationOrReformedInput(v14, v15, type metadata accessor for RemoteConversationOrReformedInput);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v63 = *(uint64_t **)(v0 + 320);
      swift_release();
      uint64_t v100 = *v63;
      goto LABEL_21;
    }
    uint64_t v16 = *(void *)(v0 + 536);
    (*(void (**)(void, void, void))(*(void *)(v0 + 496) + 32))(*(void *)(v0 + 504), *(void *)(v0 + 320), *(void *)(v0 + 488));
    if (v16 == 4)
    {
      swift_release();
      uint64_t v17 = Logger.logObject.getter();
      uint64_t v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v19 = 134217984;
        *(void *)(v0 + 264) = 5;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1B9C64000, v17, v18, "Too many reformations encountered when finding a handler for input. (Max count = %ld).", v19, 0xCu);
        MEMORY[0x1BA9E48C0](v19, -1, -1);
      }
      uint64_t v9 = *(void *)(v0 + 496);
      int v7 = *(void *)(v0 + 504);
      uint64_t v8 = *(void *)(v0 + 488);

      goto LABEL_9;
    }
    *(void *)(v0 + 536) = v16 + 1;
    uint64_t v85 = *(void *)(v0 + 480);
    uint64_t v86 = *(void *)(v0 + 456);
    uint64_t v87 = MEMORY[0x1E4FBC860];
    *(void *)(v0 + 240) = MEMORY[0x1E4FBC868];
    *(void *)(v0 + 248) = v87;
    UUID.init()();
    Input.parse.getter();
    uint64_t v88 = type metadata accessor for Parse();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56))(v86, 0, 1, v88);
    specialized SimpleOrderedDictionary.subscript.setter(v86, v85);
    uint64_t v90 = *(void *)(v0 + 240);
    os_log_type_t v89 = *(void *)(v0 + 248);
    *(void *)(v0 + 544) = v90;
    *(void *)(v0 + 552) = v89;
    uint64_t v91 = (void *)swift_task_alloc();
    *(void *)(v0 + 560) = v91;
    char *v91 = v0;
    v91[1] = ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:);
    return ConversationHandlerLocator.allHandlers(for:)(v90, v89);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v8;

  uint64_t v2 = *v1;
  uint64_t v3 = *v1 + 16;
  *(void *)(*v1 + 624) = v0;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 512);
    uint64_t v5 = ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:);
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 512);
    (*(void (**)(void, void))(v2 + 584))(*(void *)(v2 + 376), *(void *)(v2 + 464));
    uint64_t v5 = ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:);
    uint64_t v4 = v6;
  }
  return MEMORY[0x1F4188298](v5, v4, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void);
  uint64_t v22;

  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v2 = v0[62];
  uint64_t v1 = v0[63];
  uint64_t v3 = v0[61];
  uint64_t v4 = v0[36];
  uint64_t v5 = v0[34];
  uint64_t v6 = type metadata accessor for Logger();
  v0[65] = __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v5, v3);
  if (v4 > 4)
  {
    swift_release();
    uint64_t v15 = Logger.logObject.getter();
    uint64_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 134217984;
      v0[33] = 5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v15, v16, "Too many reformations encountered when finding a handler for input. (Max count = %ld).", v17, 0xCu);
      MEMORY[0x1BA9E48C0](v17, -1, -1);
    }
    uint64_t v19 = v0[62];
    uint64_t v18 = v0[63];
    uint64_t v20 = v0[61];

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = (uint64_t (*)(void))v0[1];
    return v21(0);
  }
  else
  {
    int v7 = v0[36];
    v0[66] = *(void *)(v0[37] + 16);
    v0[67] = v7;
    uint64_t v8 = v0[60];
    uint64_t v9 = v0[57];
    v0[30] = MEMORY[0x1E4FBC868];
    v0[31] = MEMORY[0x1E4FBC860];
    UUID.init()();
    Input.parse.getter();
    uint64_t v10 = type metadata accessor for Parse();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 0, 1, v10);
    specialized SimpleOrderedDictionary.subscript.setter(v9, v8);
    uint64_t v11 = v0[30];
    v0[68] = v11;
    uint64_t v12 = v0[31];
    v0[69] = v12;
    uint64_t v13 = (void *)swift_task_alloc();
    v0[70] = v13;
    uint64_t *v13 = v0;
    v13[1] = ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:);
    return ConversationHandlerLocator.allHandlers(for:)(v11, v12);
  }
}

uint64_t ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(unsigned char *)(v5 + 640) = a4;
  *(void *)(v5 + 288) = a3;
  *(void *)(v5 + 296) = v4;
  *(void *)(v5 + 272) = a1;
  *(void *)(v5 + 280) = a2;
  uint64_t v6 = type metadata accessor for RemoteConversationOrReformedInput(0);
  *(void *)(v5 + 304) = v6;
  *(void *)(v5 + 312) = *(void *)(v6 - 8);
  *(void *)(v5 + 320) = swift_task_alloc();
  *(void *)(v5 + 328) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RemoteConversationOrReformedInput?);
  *(void *)(v5 + 336) = swift_task_alloc();
  *(void *)(v5 + 344) = swift_task_alloc();
  *(void *)(v5 + 352) = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
  *(void *)(v5 + 360) = v7;
  *(void *)(v5 + 368) = *(void *)(v7 - 8);
  *(void *)(v5 + 376) = swift_task_alloc();
  *(void *)(v5 + 384) = swift_task_alloc();
  *(void *)(v5 + 392) = swift_task_alloc();
  *(void *)(v5 + 400) = swift_task_alloc();
  *(void *)(v5 + 408) = swift_task_alloc();
  *(void *)(v5 + 416) = swift_task_alloc();
  *(void *)(v5 + 424) = swift_task_alloc();
  *(void *)(v5 + 432) = swift_task_alloc();
  *(void *)(v5 + 440) = swift_task_alloc();
  *(void *)(v5 + 448) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse?);
  *(void *)(v5 + 456) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for UUID();
  *(void *)(v5 + 464) = v8;
  *(void *)(v5 + 472) = *(void *)(v8 - 8);
  *(void *)(v5 + 480) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Input();
  *(void *)(v5 + 488) = v9;
  *(void *)(v5 + 496) = *(void *)(v9 - 8);
  *(void *)(v5 + 504) = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v10 = static MessageBusActor.shared;
  *(void *)(v5 + 512) = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:), v10, 0);
}

uint64_t ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 512);
  *(void *)(*(void *)v1 + 568) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4188298](ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:), v2, 0);
}

uint64_t specialized AmbiguityService.getAlternatives<A>(nlParses:)(uint64_t a1)
{
  uint64_t v43 = type metadata accessor for Siri_Nlu_External_Parser();
  uint64_t v2 = *(void *)(v43 - 8);
  MEMORY[0x1F4188790](v43);
  os_log_type_t v42 = (char *)v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  MEMORY[0x1F4188790](v4 - 8);
  id v41 = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v6 = *(void *)(v39 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v39);
  unint64_t v40 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v30 - v9;
  uint64_t v11 = type metadata accessor for Parse();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v15 = *(void *)(a1 + 16);
  uint64_t v16 = MEMORY[0x1E4FBC860];
  if (v15)
  {
    uint64_t v44 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15, 0);
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
    uint64_t v17 = v6 + 16;
    uint64_t v19 = (char *)(a1 + ((*(unsigned __int8 *)(v17 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 64)));
    uint64_t v35 = *(void *)(v17 + 56);
    uint64_t v36 = v18;
    uint64_t v34 = (void (**)(char *, uint64_t))(v2 + 8);
    unsigned int v33 = *MEMORY[0x1E4FA1F48];
    uint64_t v31 = (void (**)(char *, uint64_t))(v17 - 8);
    uint64_t v32 = (void (**)(char *, void, uint64_t))(v12 + 104);
    v30[1] = v12 + 32;
    uint64_t v37 = v12;
    uint64_t v38 = v17;
    uint64_t v20 = v40;
    do
    {
      uint64_t v21 = v39;
      int v22 = v36;
      v36(v10, v19, v39);
      v22(v20, v10, v21);
      uint64_t v23 = v42;
      Siri_Nlu_External_UserParse.parser.getter();
      os_log_t v24 = v41;
      Siri_Nlu_External_Parser.parserID.getter();
      (*v34)(v23, v43);
      uint64_t v25 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 0, 1, v25);
      USOParse.init(userParse:parserIdentifier:appBundleId:)();
      (*v32)(v14, v33, v11);
      (*v31)(v10, v21);
      uint64_t v16 = v44;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v16 + 16) + 1, 1);
        uint64_t v16 = v44;
      }
      unint64_t v27 = *(void *)(v16 + 16);
      unint64_t v26 = *(void *)(v16 + 24);
      uint64_t v28 = v37;
      if (v27 >= v26 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
        uint64_t v16 = v44;
      }
      *(void *)(v16 + 16) = v27 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v28 + 32))(v16+ ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))+ *(void *)(v28 + 72) * v27, v14, v11);
      uint64_t v44 = v16;
      v19 += v35;
      --v15;
    }
    while (v15);
  }
  return v16;
}

uint64_t specialized AmbiguityService.getAlternatives<A>(nlParses:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v37 = a1;
  uint64_t v36 = type metadata accessor for Siri_Nlu_External_Parser();
  uint64_t v5 = *(void *)(v36 - 8);
  MEMORY[0x1F4188790](v36);
  uint64_t v35 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v34 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  int64_t v15 = (char *)v28 - v14;
  uint64_t v39 = type metadata accessor for Parse();
  uint64_t v16 = *(void *)(v39 - 8);
  uint64_t result = MEMORY[0x1F4188790](v39);
  uint64_t v19 = (char *)v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v38 = a3 >> 1;
  uint64_t v20 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v21 = MEMORY[0x1E4FBC860];
  if (!v20) {
    return v21;
  }
  uint64_t v40 = MEMORY[0x1E4FBC860];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20 & ~(v20 >> 63), 0);
  if ((v20 & 0x8000000000000000) == 0)
  {
    uint64_t v31 = (void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v32 = v11 + 16;
    unsigned int v30 = *MEMORY[0x1E4FA1F48];
    v28[1] = v11 + 8;
    uint64_t v29 = (void (**)(char *, void, uint64_t))(v16 + 104);
    v28[0] = v16 + 32;
    uint64_t v22 = v38;
    if (a2 > v38) {
      uint64_t v22 = a2;
    }
    uint64_t v33 = v22;
    while (v33 != a2)
    {
      uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
      v23(v15, v37 + *(void *)(v11 + 72) * a2, v10);
      v23(v34, (uint64_t)v15, v10);
      os_log_t v24 = v35;
      Siri_Nlu_External_UserParse.parser.getter();
      Siri_Nlu_External_Parser.parserID.getter();
      (*v31)(v24, v36);
      uint64_t v25 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v9, 0, 1, v25);
      USOParse.init(userParse:parserIdentifier:appBundleId:)();
      (*v29)(v19, v30, v39);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
      uint64_t v21 = v40;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v21 + 16) + 1, 1);
        uint64_t v21 = v40;
      }
      unint64_t v27 = *(void *)(v21 + 16);
      unint64_t v26 = *(void *)(v21 + 24);
      if (v27 >= v26 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
        uint64_t v21 = v40;
      }
      *(void *)(v21 + 16) = v27 + 1;
      uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v16 + 32))(v21+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(void *)(v16 + 72) * v27, v19, v39);
      uint64_t v40 = v21;
      if (v38 == ++a2) {
        return v21;
      }
    }
    __break(1u);
    goto LABEL_15;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t specialized SiriAudioAffinityScorer.score(input:environment:)()
{
  uint64_t v0 = type metadata accessor for Parse();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for USOParse();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v1 + 88))(v3, v0) == *MEMORY[0x1E4FA1F48])
  {
    (*(void (**)(char *, uint64_t))(v1 + 96))(v3, v0);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
    if (!specialized static AffinityScorerUtils.getTask(_:)())
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      __swift_project_value_buffer(v20, (uint64_t)static Logger.executor);
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v23 = 0;
        _os_log_impl(&dword_1B9C64000, v21, v22, "SiriAudioAffinityScorer Could not extract usoTask from parse", v23, 2u);
        MEMORY[0x1BA9E48C0](v23, -1, -1);
      }

      goto LABEL_23;
    }
    if (UsoTask.verbString.getter() == 0x656D75736572 && v8 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v10 & 1) == 0)
      {
        if (one-time initialization token for executor != -1) {
          swift_once();
        }
        uint64_t v11 = type metadata accessor for Logger();
        __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
        uint64_t v12 = Logger.logObject.getter();
        os_log_type_t v13 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v12, v13))
        {
          uint64_t v14 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v14 = 0;
          _os_log_impl(&dword_1B9C64000, v12, v13, "SiriAudioAffinityScorer Not a resume task. Returning .default affinity", v14, 2u);
          MEMORY[0x1BA9E48C0](v14, -1, -1);
        }

        swift_release();
LABEL_23:
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        return 2;
      }
    }
    if (specialized static SiriAudioAffinityScorer.isResumeApp(usoTask:)())
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      __swift_project_value_buffer(v25, (uint64_t)static Logger.executor);
      unint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v28 = 0;
        _os_log_impl(&dword_1B9C64000, v26, v27, "SiriAudioAffinityScorer This is a resume+app request. Returning high affinity", v28, 2u);
        MEMORY[0x1BA9E48C0](v28, -1, -1);
      }

      swift_release();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      return 3;
    }
    else
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v29 = type metadata accessor for Logger();
      __swift_project_value_buffer(v29, (uint64_t)static Logger.executor);
      unsigned int v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v32 = 0;
        _os_log_impl(&dword_1B9C64000, v30, v31, "SiriAudioAffinityScorer UsoTask task is resume, but not resume app. Returning low affinity not to interfere with playback controls", v32, 2u);
        MEMORY[0x1BA9E48C0](v32, -1, -1);
      }

      swift_release();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      return 1;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v16, v17))
    {

      return 2;
    }
    uint64_t v18 = 2;
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl(&dword_1B9C64000, v16, v17, "SiriAudioAffinityScorer Got unexpected parse", v19, 2u);
    MEMORY[0x1BA9E48C0](v19, -1, -1);
  }
  return v18;
}

uint64_t ServiceBridgeDelegateXPCWrapper.prepareForAudioHandoff(completion:)(uint64_t a1, uint64_t a2)
{
  return ServiceBridgeDelegateXPCWrapper.prepareForAudioHandoff(completion:)(a1, a2, (uint64_t)&unk_1F1382E88, (uint64_t)&async function pointer to partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.prepareForAudioHandoff(completion:));
}

uint64_t protocol witness for ServiceBridgeDelegate.prepareForAudioHandoff(completion:) in conformance ConversationBridgeProcessorDelegate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t, void, _UNKNOWN **))
{
  return a5(v5[3], a1, a2, *v5, &protocol witness table for ConversationBridgeProcessorDelegate);
}

uint64_t protocol witness for ServiceBridgeDelegate.prepareForAudioHandoff(completion:) in conformance ConversationBridgeProcessorDelegate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for ServiceBridgeDelegate.prepareForAudioHandoff(completion:) in conformance ConversationBridgeProcessorDelegate(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t, void, _UNKNOWN **))static ServiceBridgeDelegate.prepareForAudioHandoffDefault(_:completion:));
}

void static ServiceBridgeDelegate.prepareForAudioHandoffDefault(_:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  v5[4] = a2;
  v5[5] = a3;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1107296256;
  v5[2] = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
  v5[3] = &block_descriptor_3_0;
  uint64_t v4 = _Block_copy(v5);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_prepareForAudioHandoffWithCompletion_, v4);
  _Block_release(v4);
}

uint64_t specialized UsoTask.vocFilter(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UsoIdentifier.NluComponent();
  uint64_t v49 = *(void *)(v2 - 8);
  uint64_t v50 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v46 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoIdentifier.NluComponent?, UsoIdentifier.NluComponent?));
  MEMORY[0x1F4188790](v48);
  uint64_t v51 = (uint64_t)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v47 = (uint64_t)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v53 = (uint64_t)&v44 - v9;
  MEMORY[0x1F4188790](v8);
  uint64_t v52 = (uint64_t)&v44 - v10;
  uint64_t v11 = type metadata accessor for UsoIdentifier();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for IdentifierAppBundle();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v44 - v20;
  UsoIdentifier.appBundleSemantic.getter();
  (*(void (**)(char *, void, uint64_t))(v16 + 104))(v19, *MEMORY[0x1E4FA3020], v15);
  char v22 = MEMORY[0x1BA9DE8E0](v21, v19);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v16 + 8);
  v23(v19, v15);
  os_log_t v24 = v21;
  uint64_t v25 = v14;
  v23(v24, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  if ((v22 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
LABEL_9:
    char v35 = 0;
    return v35 & 1;
  }
  uint64_t v45 = v11;
  uint64_t v26 = v52;
  UsoIdentifier.sourceComponent.getter();
  uint64_t v28 = v49;
  uint64_t v27 = v50;
  uint64_t v29 = v53;
  (*(void (**)(uint64_t, void, uint64_t))(v49 + 104))(v53, *MEMORY[0x1E4FA2CC8], v50);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v28 + 56))(v29, 0, 1, v27);
  uint64_t v30 = v51;
  uint64_t v31 = v51 + *(int *)(v48 + 48);
  uint64_t v32 = (uint64_t)v25;
  outlined init with copy of ReferenceResolutionClientProtocol?(v26, v51, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  outlined init with copy of ReferenceResolutionClientProtocol?(v29, v31, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
  uint64_t v34 = v30;
  if (v33(v30, 1, v27) != 1)
  {
    uint64_t v48 = v32;
    uint64_t v36 = v30;
    uint64_t v37 = v47;
    outlined init with copy of ReferenceResolutionClientProtocol?(v36, v47, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    int v38 = v33(v31, 1, v27);
    uint64_t v39 = v45;
    uint64_t v40 = v53;
    if (v38 != 1)
    {
      os_log_type_t v42 = v46;
      (*(void (**)(char *, uint64_t, uint64_t))(v28 + 32))(v46, v31, v27);
      lazy protocol witness table accessor for type UsoEntity_common_ReferenceType.DefinedValues and conformance UsoEntity_common_ReferenceType.DefinedValues((unint64_t *)&lazy protocol witness table cache variable for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent, MEMORY[0x1E4FA2CD8]);
      char v35 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v43 = *(void (**)(char *, uint64_t))(v28 + 8);
      v43(v42, v27);
      outlined destroy of ReferenceResolutionClientProtocol?(v40, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      outlined destroy of ReferenceResolutionClientProtocol?(v52, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v48, v39);
      v43((char *)v37, v27);
      outlined destroy of ReferenceResolutionClientProtocol?(v51, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      return v35 & 1;
    }
    outlined destroy of ReferenceResolutionClientProtocol?(v53, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    outlined destroy of ReferenceResolutionClientProtocol?(v52, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v48, v39);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v37, v27);
    goto LABEL_8;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(v53, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  uint64_t v34 = v30;
  outlined destroy of ReferenceResolutionClientProtocol?(v26, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v32, v45);
  if (v33(v31, 1, v27) != 1)
  {
LABEL_8:
    outlined destroy of ReferenceResolutionClientProtocol?(v34, &demangling cache variable for type metadata for (UsoIdentifier.NluComponent?, UsoIdentifier.NluComponent?));
    goto LABEL_9;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(v30, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  char v35 = 1;
  return v35 & 1;
}

uint64_t lazy protocol witness table accessor for type UsoEntity_common_ReferenceType.DefinedValues and conformance UsoEntity_common_ReferenceType.DefinedValues(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized UsoTask.generalVolumeFilter(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UsoIdentifier();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v4);
  uint64_t v9 = (char *)&v32 - v8;
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v12 = (char *)&v32 - v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v32 - v13;
  char v15 = specialized UsoTask.vocFilter(_:)(a1);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v16(v14, a1, v2);
  if (v15)
  {
    uint64_t v17 = UsoIdentifier.namespace.getter();
    char v19 = v18;
    if (!v18)
    {
      v16(v12, (uint64_t)v14, v2);
      goto LABEL_15;
    }
    if (v17 == 0xD000000000000010 && v18 == 0x80000001BA05EF30)
    {
      swift_bridgeObjectRelease();
      v16(v12, (uint64_t)v14, v2);
    }
    else
    {
      char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v16(v12, (uint64_t)v14, v2);
      char v19 = 0;
      if ((v21 & 1) == 0) {
        goto LABEL_15;
      }
    }
    if (UsoIdentifier.value.getter() == 0x656D756C6F76 && v22 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
      char v19 = 1;
    }
    else
    {
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
    }
LABEL_15:
    os_log_t v24 = *(void (**)(char *, uint64_t))(v3 + 8);
    v24(v12, v2);
    v16(v9, (uint64_t)v14, v2);
    if (v19)
    {
      v24(v9, v2);
      v24(v14, v2);
      char v20 = 1;
      return v20 & 1;
    }
    uint64_t v25 = UsoIdentifier.namespace.getter();
    char v20 = v26;
    if (v26)
    {
      if (v25 == 0x746553656E6F6870 && v26 == 0xEC000000676E6974)
      {
        swift_bridgeObjectRelease();
        v16(v6, (uint64_t)v9, v2);
      }
      else
      {
        char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v16(v6, (uint64_t)v9, v2);
        char v20 = 0;
        if ((v28 & 1) == 0) {
          goto LABEL_32;
        }
      }
      if (UsoIdentifier.value.getter() == 0x5F6C6172656E6567 && v29 == 0xEE00656D756C6F76)
      {
        swift_bridgeObjectRelease();
        char v20 = 1;
      }
      else
      {
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
      }
      goto LABEL_32;
    }
    v16(v6, (uint64_t)v9, v2);
LABEL_32:
    v24(v6, v2);
    v24(v9, v2);
    v24(v14, v2);
    return v20 & 1;
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v14, v2);
  char v20 = 0;
  return v20 & 1;
}

uint64_t specialized UsoTask.siriVolumeFilter(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UsoIdentifier();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v19 - v7;
  char v9 = specialized UsoTask.vocFilter(_:)(a1);
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v10(v8, a1, v2);
  if ((v9 & 1) != 0 && (uint64_t v11 = UsoIdentifier.namespace.getter(), v12))
  {
    if (v11 == 0xD000000000000010 && v12 == 0x80000001BA05EF30)
    {
      uint64_t v13 = *(void (**)(char *, uint64_t))(v3 + 8);
      v13(v8, v2);
      swift_bridgeObjectRelease();
      v10(v6, a1, v2);
    }
    else
    {
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v13 = *(void (**)(char *, uint64_t))(v3 + 8);
      v13(v8, v2);
      swift_bridgeObjectRelease();
      v10(v6, a1, v2);
      char v14 = 0;
      if ((v16 & 1) == 0) {
        goto LABEL_7;
      }
    }
    if (UsoIdentifier.value.getter() == 0x6563696F76 && v17 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
      char v14 = 1;
    }
    else
    {
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v13 = *(void (**)(char *, uint64_t))(v3 + 8);
    v13(v8, v2);
    v10(v6, a1, v2);
    char v14 = 0;
  }
LABEL_7:
  v13(v6, v2);
  return v14 & 1;
}

uint64_t specialized UsoTask.mediaVolumeFilter(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UsoIdentifier();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v19 - v7;
  char v9 = specialized UsoTask.vocFilter(_:)(a1);
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v10(v8, a1, v2);
  if ((v9 & 1) != 0 && (uint64_t v11 = UsoIdentifier.namespace.getter(), v12))
  {
    if (v11 == 0xD000000000000010 && v12 == 0x80000001BA05EF30)
    {
      uint64_t v13 = *(void (**)(char *, uint64_t))(v3 + 8);
      v13(v8, v2);
      swift_bridgeObjectRelease();
      v10(v6, a1, v2);
    }
    else
    {
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v13 = *(void (**)(char *, uint64_t))(v3 + 8);
      v13(v8, v2);
      swift_bridgeObjectRelease();
      v10(v6, a1, v2);
      char v14 = 0;
      if ((v16 & 1) == 0) {
        goto LABEL_7;
      }
    }
    if (UsoIdentifier.value.getter() == 0x707954616964656DLL && v17 == 0xE900000000000065)
    {
      swift_bridgeObjectRelease();
      char v14 = 1;
    }
    else
    {
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v13 = *(void (**)(char *, uint64_t))(v3 + 8);
    v13(v8, v2);
    v10(v6, a1, v2);
    char v14 = 0;
  }
LABEL_7:
  v13(v6, v2);
  return v14 & 1;
}

uint64_t specialized UsoTask.callVolumeFilter(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UsoIdentifier();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v20 - v7;
  char v9 = specialized UsoTask.vocFilter(_:)(a1);
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v10(v8, a1, v2);
  if ((v9 & 1) == 0 || (uint64_t v11 = UsoIdentifier.namespace.getter(), !v12))
  {
    char v15 = *(void (**)(char *, uint64_t))(v3 + 8);
    v15(v8, v2);
    v10(v6, a1, v2);
    char v16 = 0;
    goto LABEL_10;
  }
  if (v11 == 0x746553656E6F6870 && v12 == 0xEC000000676E6974)
  {
    char v15 = *(void (**)(char *, uint64_t))(v3 + 8);
    v15(v8, v2);
    swift_bridgeObjectRelease();
    v10(v6, a1, v2);
  }
  else
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    char v15 = *(void (**)(char *, uint64_t))(v3 + 8);
    v15(v8, v2);
    swift_bridgeObjectRelease();
    v10(v6, a1, v2);
    char v16 = 0;
    if ((v14 & 1) == 0) {
      goto LABEL_10;
    }
  }
  if (UsoIdentifier.value.getter() == 0x6C6F765F6C6C6163 && v18 == 0xEB00000000656D75)
  {
    swift_bridgeObjectRelease();
    char v16 = 1;
  }
  else
  {
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
LABEL_10:
  v15(v6, v2);
  return v16 & 1;
}

uint64_t specialized UsoTask.supportedBooleanNamespaceValuesFilter(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UsoIdentifier();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v21 - v7;
  char v9 = specialized UsoTask.vocFilter(_:)(a1);
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v10(v8, a1, v2);
  if ((v9 & 1) != 0 && (uint64_t v11 = UsoIdentifier.namespace.getter(), v12))
  {
    if (v11 == 0x747465536C6F6F62 && v12 == 0xEF656D614E676E69)
    {
      char v15 = *(void (**)(char *, uint64_t))(v3 + 8);
      v15(v8, v2);
      swift_bridgeObjectRelease();
      v10(v6, a1, v2);
    }
    else
    {
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      char v15 = *(void (**)(char *, uint64_t))(v3 + 8);
      v15(v8, v2);
      swift_bridgeObjectRelease();
      v10(v6, a1, v2);
      char v16 = 0;
      if ((v14 & 1) == 0) {
        goto LABEL_14;
      }
    }
    if (one-time initialization token for kSupportedBooleanNamespaceValues != -1) {
      swift_once();
    }
    uint64_t v17 = static UsoTask.kSupportedBooleanNamespaceValues;
    uint64_t v18 = UsoIdentifier.value.getter();
    char v16 = specialized Set.contains(_:)(v18, v19, v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    char v15 = *(void (**)(char *, uint64_t))(v3 + 8);
    v15(v8, v2);
    v10(v6, a1, v2);
    char v16 = 0;
  }
LABEL_14:
  v15(v6, v2);
  return v16 & 1;
}

unint64_t lazy protocol witness table accessor for type ConversationOutputError and conformance ConversationOutputError()
{
  unint64_t result = lazy protocol witness table cache variable for type ConversationOutputError and conformance ConversationOutputError;
  if (!lazy protocol witness table cache variable for type ConversationOutputError and conformance ConversationOutputError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationOutputError and conformance ConversationOutputError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ConversationOutputError and conformance ConversationOutputError;
  if (!lazy protocol witness table cache variable for type ConversationOutputError and conformance ConversationOutputError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationOutputError and conformance ConversationOutputError);
  }
  return result;
}

uint64_t protocol witness for Error._domain.getter in conformance SerialSubmissionError()
{
  return MEMORY[0x1F4185E10]();
}

uint64_t protocol witness for Error._code.getter in conformance SerialSubmissionError()
{
  return MEMORY[0x1F4185E08]();
}

uint64_t protocol witness for Error._userInfo.getter in conformance SerialSubmissionError()
{
  return MEMORY[0x1F4185E18]();
}

uint64_t specialized InformationAffinityScorer.score(input:environment:)()
{
  uint64_t v0 = type metadata accessor for PommesSearchReason();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x1F4188790](v0);
  uint64_t v4 = (char *)v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)v34 - v5;
  uint64_t v7 = type metadata accessor for Parse();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (void **)((char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  Input.parse.getter();
  if ((*(unsigned int (**)(void **, uint64_t))(v8 + 88))(v10, v7) != *MEMORY[0x1E4FA1F18])
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
    char v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      char v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v16 = 0;
      _os_log_impl(&dword_1B9C64000, v14, v15, "Got unexpected parse", v16, 2u);
      MEMORY[0x1BA9E48C0](v16, -1, -1);
    }

    (*(void (**)(void **, uint64_t))(v8 + 8))(v10, v7);
    return 2;
  }
  (*(void (**)(void **, uint64_t))(v8 + 96))(v10, v7);
  uint64_t v11 = *v10;
  dispatch thunk of PommesResponse.searchReason.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, *MEMORY[0x1E4F9FE90], v0);
  lazy protocol witness table accessor for type PommesSearchReason and conformance PommesSearchReason();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v34[2] == v34[0] && v34[3] == v34[1])
  {
    swift_bridgeObjectRelease_n();
    uint64_t v12 = *(void (**)(char *, uint64_t))(v1 + 8);
    v12(v4, v0);
    v12(v6, v0);
LABEL_12:
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.executor);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl(&dword_1B9C64000, v21, v22, "Detected fallback pommes response", v23, 2u);
      MEMORY[0x1BA9E48C0](v23, -1, -1);
    }

    return 4;
  }
  char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v1 + 8);
  v19(v4, v0);
  v19(v6, v0);
  if (v18) {
    goto LABEL_12;
  }
  dispatch thunk of PommesResponse.primaryQueryConfidence()();
  if (v25 > 0.5)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.executor);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v17 = 2;
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl(&dword_1B9C64000, v27, v28, "Detected high confidence pommes response", v29, 2u);
      MEMORY[0x1BA9E48C0](v29, -1, -1);

      return v17;
    }

    return 2;
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  __swift_project_value_buffer(v30, (uint64_t)static Logger.executor);
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v33 = 0;
    _os_log_impl(&dword_1B9C64000, v31, v32, "Detected low confidence pommes response", v33, 2u);
    MEMORY[0x1BA9E48C0](v33, -1, -1);
  }

  return 0;
}

uint64_t static AceMetricsLogger.logAnalytics(command:)(void *a1)
{
  swift_getObjectType();

  return specialized static AceMetricsLogger.logAnalytics(command:)(a1);
}

uint64_t default argument 1 of static Log.begin(_:enableTelemetry:)()
{
  return 0;
}

uint64_t static AceMetricsLogger.logRemoteAnalytics(service:command:)(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = __swift_project_boxed_opaque_existential_1(a1, v3);
  uint64_t ObjectType = swift_getObjectType();

  return specialized static AceMetricsLogger.logRemoteAnalytics(service:command:)((uint64_t)v5, a2, v3, ObjectType, v4);
}

uint64_t default argument 4 of AceServiceInvokerImpl.init(bridge:executionRequestId:rootRequestId:requestContextData:invokedByPeerToPeerEORR:rrClient:)()
{
  return 0;
}

uint64_t default argument 5 of ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:executionRequestId:executionSource:inAppResponse:)@<X0>(uint64_t a1@<X8>)
{
  return default argument 5 of ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:executionRequestId:executionSource:inAppResponse:)(MEMORY[0x1E4FA24B8], MEMORY[0x1E4FA24D0], a1);
}

uint64_t default argument 1 of static CombiningAffinityScorer.max(children:requireAll:)()
{
  return 0;
}

uint64_t default argument 1 of static CombiningAffinityScorer.min(children:requireAll:)()
{
  return 0;
}

uint64_t default argument 1 of static CombiningAffinityScorer.sum(children:requireAll:)()
{
  return 0;
}

uint64_t default argument 0 of AffinityScorerManager.DefaultAffinityScorer.init(score:)()
{
  return 2;
}

uint64_t default argument 5 of AnnounceExecutionOverride.init(activeTasks:executedTasks:topNlParse:isTriggerlessFollowup:isMitigated:isMedocSupported:)()
{
  return 0;
}

uint64_t default argument 0 of ConditionalIntentMetadataStore.init(mapIsPersistedConditionalIntent:)()
{
  return MEMORY[0x1E4FBC868];
}

uint64_t default argument 0 of IntentStatesStore.init(conditionalIntentsStates:)()
{
  return MEMORY[0x1E4FBC868];
}

uint64_t default argument 1 of AppShortcutExpansionContextBuilder.init(metadataProvider:appShortcutStateProvider:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for AppShortcutStateProvider();
  uint64_t result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for AppShortcutStateProvider;
  *a1 = result;
  return result;
}

uint64_t default argument 2 of static CachedPluginCatalog.load(cacheUrl:sharedFlowPluginServiceClient:ignoreOSVersion:)()
{
  return 0;
}

void default argument 1 of CamBridgeImpl.init(forceSupported:camProvider:caarProvider:trialExperimentManager:)(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = &type metadata for RealCamProvider;
  *(void *)(a1 + 32) = &protocol witness table for RealCamProvider;
}

id default argument 0 of TrialExperimentationAssetManager.init(trialClient:)()
{
  id v0 = objc_msgSend(self, sel_clientWithIdentifier_, 125);

  return v0;
}

id default argument 6 of Conversation.init(initialFlow:taskService:pluginId:taskObserver:jetsamTransactionTimeout:rootEnvironment:serverFallbackDisablingUtils:)@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ServerFallbackDisablingUtils();
  uint64_t v3 = (void *)swift_allocObject();
  id result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
  v3[2] = result;
  void v3[3] = closure #1 in default argument 5 of ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:);
  v3[4] = 0;
  a1[3] = v2;
  a1[4] = &protocol witness table for ServerFallbackDisablingUtils;
  *a1 = v3;
  return result;
}

uint64_t default argument 1 of JetsamHelper.init(name:queue:timeout:)()
{
  return static OS_dispatch_queue.main.getter();
}

uint64_t default argument 0 of FlowAgent.execute(timeout:)@<X0>(void *a1@<X8>)
{
  *a1 = 300;
  uint64_t v2 = *MEMORY[0x1E4FBCAE8];
  uint64_t v3 = type metadata accessor for DispatchTimeInterval();
  uint64_t v4 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t default argument 9 of ConversationBridge.init(name:messagePublisher:serviceHelper:conversationSessionsManaging:conversationClient:rrClient:correctionsPlatformClient:networkAvailabilityProvider:coreTelephonyServiceProvider:recentDialogTracker:featureChecker:)()
{
  return RecentDialogTracker.init(timeProvider:)((uint64_t)closure #1 in RecentDialogTracker.init(), 0);
}

uint64_t default argument 6 of ConversationBridgeInstrumentationUtil.logExecutionRequestStarted(executionForRSKE:source:preExecutionType:rootRequestId:requestId:resultCandidateId:triggerlessFollowupHandledLocally:)()
{
  return 0;
}

uint64_t default argument 2 of InstrumentationUtil.buildWrapperEventMessage(_:_:logResourceUtilization:)()
{
  return 0;
}

uint64_t default argument 1 of InstrumentationUtil.buildWrapperEventMessage(_:logResourceUtilization:)()
{
  return 0;
}

uint64_t default argument 1 of ConversationBridgeInstrumentationUtil.mapPreExecutionRuleTypeToLogRuleType(_:_:)()
{
  return 0;
}

uint64_t default argument 2 of ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:)()
{
  return 0;
}

uint64_t default argument 3 of ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:)()
{
  return 0;
}

uint64_t default argument 5 of static ConversationMUXUtils.voiceIdentificationSignal(withRefId:requestType:isPersonalRequest:isServerFallback:voiceIdClassification:voiceIdOverridden:selectedUserId:)()
{
  return 0;
}

unsigned char *default argument 4 of ConversationOutputSubmitter.init(requestDispatcherServiceHelper:isMUXEnabled:muxContextMessage:messagePublisher:featureChecker:)@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for FeatureChecker();
  swift_allocObject();
  id result = FeatureChecker.init()();
  a1[3] = v2;
  a1[4] = &protocol witness table for FeatureChecker;
  *a1 = result;
  return result;
}

uint64_t default argument 7 of ConversationOutputSubmitter.sendFlowCommand(_:requestId:requestIdOverride:executionContextMatchingInfo:assistantId:sessionId:currentUserId:meetsUserSessionThreshold:completion:)()
{
  return 0;
}

uint64_t default argument 21 of ConversationRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:)()
{
  return 0;
}

id default argument 2 of SelfReflectionAgent.init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)()
{
  id v0 = objc_msgSend(self, sel_sharedPreferences);

  return v0;
}

uint64_t default argument 3 of SelfReflectionAgent.init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)()
{
  return AFDeviceSupportsSAE();
}

id default argument 3 of CamBridgeImpl.init(forceSupported:camProvider:caarProvider:trialExperimentManager:)@<X0>(uint64_t *a1@<X8>)
{
  id v2 = objc_msgSend(self, sel_clientWithIdentifier_, 125);
  uint64_t v3 = type metadata accessor for TrialExperimentationAssetManager();
  uint64_t v4 = swift_allocObject();
  id result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = result;
  a1[3] = v3;
  a1[4] = (uint64_t)&protocol witness table for TrialExperimentationAssetManager;
  *a1 = v4;
  return result;
}

uint64_t default argument 5 of SelfReflectionAgent.init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)()
{
  return default argument 5 of SelfReflectionAgent.init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)(&one-time initialization token for instance);
}

uint64_t default argument 6 of SelfReflectionAgent.init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)()
{
  return 0;
}

uint64_t default argument 22 of ConversationRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:contextUpdater:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:)()
{
  return 0;
}

uint64_t default argument 0 of static ConversationSearchResult.unsupported(exclude:)()
{
  return 1;
}

uint64_t default argument 0 of ConversationService.ExecutionTaskContext.init(forceTimeout:)()
{
  return 60000000000;
}

id default argument 0 of AppShortcutExpansionContextBuilder.init(metadataProvider:appShortcutStateProvider:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for LinkMetadataProvider();
  uint64_t v3 = swift_allocObject();
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F72CE0]), sel_init);
  *(void *)(v3 + 16) = result;
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for LinkMetadataProvider;
  *a1 = v3;
  return result;
}

void default argument 1 of LinkExpansionContextBuilder.init(metadataProvider:viewActionsProvider:)(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = &type metadata for LinkViewActionProvider;
  *(void *)(a1 + 32) = &protocol witness table for LinkViewActionProvider;
}

uint64_t default argument 6 of DecisionEngine.init(conversationHandlerLocator:rrClient:correctionsClient:linkExpansionContextBuilder:preFlowBlockingWork:camBridge:curareDonator:)()
{
  return default argument 5 of SelfReflectionAgent.init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)(&one-time initialization token for instance);
}

uint64_t default argument 5 of SelfReflectionAgent.init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t default argument 4 of Conversation.init(initialFlow:taskService:pluginId:taskObserver:jetsamTransactionTimeout:rootEnvironment:serverFallbackDisablingUtils:)@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultTimeout != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static JetsamHelper.defaultTimeout);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t default argument 2 of static Log.begin(_:_:enableTelemetry:)()
{
  return 0;
}

uint64_t default argument 8 of ExecutionContextUpdate.init(provideContextCommand:nativeFlowContextCommand:nluSystemDialogActs:nluActiveTasks:nluCompletedTasks:undoDirectInvocation:rrEntities:pommesContext:contextUpdateScope:restoreSessionForRequestId:)@<X0>(uint64_t a1@<X8>)
{
  return default argument 5 of ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:executionRequestId:executionSource:inAppResponse:)(MEMORY[0x1E4FA1C98], MEMORY[0x1E4FA1CA8], a1);
}

uint64_t default argument 7 of EncoreConversation.init<A>(initialFlow:pluginId:pluginInfo:taskService:taskObserver:snippetManager:rootEnvironment:correctionsEngine:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for CorrectionsUndoManager();
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 40) = 0u;
  *(void *)(v3 + 56) = 0;
  *(_OWORD *)(v3 + 24) = 0u;
  *(void *)(v3 + 16) = MEMORY[0x1E4FBC860];
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  swift_beginAccess();
  outlined assign with take of CorrectingFlow?((uint64_t)v5, v3 + 24);
  swift_endAccess();
  a1[3] = v2;
  uint64_t result = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type CorrectionsUndoManager and conformance CorrectionsUndoManager, (void (*)(uint64_t))type metadata accessor for CorrectionsUndoManager);
  a1[4] = result;
  *a1 = v3;
  return result;
}

uint64_t default argument 3 of static ExecutionContextUpdate.convertFromFlowContextUpdate(_:nluActiveTasks:nluCompletedTasks:populateLegacyProvideContext:)()
{
  return 0;
}

uint64_t default argument 7 of ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:executionSource:inAppResponse:)@<X0>(uint64_t a1@<X8>)
{
  return default argument 5 of ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:executionRequestId:executionSource:inAppResponse:)(MEMORY[0x1E4FA24B8], MEMORY[0x1E4FA24D0], a1);
}

uint64_t default argument 5 of ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:executionRequestId:executionSource:inAppResponse:)@<X0>(unsigned int *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a2(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104);

  return v6(a3, v4, v5);
}

uint64_t default argument 0 of ExecutionOverrideContext.init(activeTasks:executedTasks:isTriggerlessFollowup:isMitigated:endpointMode:isMedocSupported:conversationUserInput:)()
{
  return MEMORY[0x1E4FBC860];
}

uint64_t default argument 1 of ExecutionOverrideContext.init(activeTasks:executedTasks:isTriggerlessFollowup:isMitigated:endpointMode:isMedocSupported:conversationUserInput:)()
{
  return MEMORY[0x1E4FBC860];
}

uint64_t default argument 2 of ExecutionOverrideContext.init(activeTasks:executedTasks:isTriggerlessFollowup:isMitigated:endpointMode:isMedocSupported:conversationUserInput:)()
{
  return 0;
}

uint64_t default argument 3 of ExecutionOverrideContext.init(activeTasks:executedTasks:isTriggerlessFollowup:isMitigated:endpointMode:isMedocSupported:conversationUserInput:)()
{
  return 0;
}

uint64_t default argument 4 of ExecutionOverrideContext.init(activeTasks:executedTasks:isTriggerlessFollowup:isMitigated:endpointMode:isMedocSupported:conversationUserInput:)()
{
  return 0;
}

uint64_t default argument 5 of ExecutionOverrideContext.init(activeTasks:executedTasks:isTriggerlessFollowup:isMitigated:endpointMode:isMedocSupported:conversationUserInput:)()
{
  return 0;
}

uint64_t default argument 5 of RemoteConversationService.init(flowPlugin:pluginId:flowPluginBundle:siriKitRuntime:turnDataProvider:snippetManager:overrideRRClient:)()
{
  return static SnippetManager.sharedInstance.getter();
}

uint64_t default argument 1 of HangUpRule.init(isUserOnActivePhoneCall:isActiveCallFallbackAllowed:)()
{
  uint64_t v0 = type metadata accessor for SiriInCallFeatureFlag();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E4F9FD60], v0);
  char v4 = SiriInCallFeatureFlag.isEnabled.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4 & 1;
}

uint64_t (*default argument 0 of OrderedForest.debugDescription(printer:)(uint64_t a1))(uint64_t a1)
{
  *(void *)(swift_allocObject() + 16) = a1;
  return partial apply for closure #1 in default argument 0 of OrderedForest.debugDescription(printer:);
}

unint64_t default argument 6 of PreExecutionDialogHandler.submitDialog(requestId:rcId:catId:userId:meetsUserSessionThreshold:shouldSpeak:parameters:catSource:completion:)()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
}

uint64_t default argument 1 of RemoteConversationSpeechData.init(rcId:asrOnDevice:userSpecificInfoForRecognizedUser:userSpecificInfoForUserMeetingSessionThreshold:speechPackage:utterance:responseLanguageVariant:requestLanguageVariant:genAIFallbackSuppressReason:asrLocation:nlLocation:)()
{
  return 1;
}

void default argument 0 of SiriKitBiomeDonator.init(_:backgroundTaskPriority:)(void *a1@<X8>)
{
  id v2 = objc_msgSend(self, sel_siriExecutionStream);
  id v3 = objc_msgSend(v2, sel_source);

  a1[3] = &type metadata for DefaultBiomeSource;
  a1[4] = &protocol witness table for DefaultBiomeSource;
  *a1 = v3;
}

uint64_t default argument 3 of static SiriKitExecutorRunUtils.makeParse(aceParse:peerInfo:endpointInfo:confirmationState:aceParameterMetadata:appSelectionState:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x1E4FA1A28];
  uint64_t v3 = type metadata accessor for SiriKitConfirmationState();
  uint64_t v6 = *(void *)(v3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104))(a1, v2, v3);
  char v4 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56);

  return v4(a1, 0, 1, v3);
}

uint64_t default argument 1 of StringProtocol.index<A>(of:options:)()
{
  return 0;
}

uint64_t default argument 8 of SiriKitRuntimeState.makeNewTurn(requestContextData:executionRequestId:rootRequestId:sessionId:invocationState:conversationLoggingId:bridge:scopedRRData:invokedByPeerToPeerEORR:)()
{
  return 0;
}

uint64_t default argument 5 of TaskData.init(taskId:taskType:stepType:statusReason:activities:attribute:)()
{
  return 0;
}

uint64_t default argument 0 of TaskLoggingService.init(biomeDonator:curareDonator:selfEmitter:tier1LinkIdSupplier:derivedIdentifierSupplier:appInformationSupplier:sensitivityManager:featureChecker:)@<X0>(uint64_t *a1@<X8>)
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  uint64_t v2 = static SiriKitBiomeDonator.instance;
  a1[3] = type metadata accessor for SiriKitBiomeDonator();
  a1[4] = (uint64_t)&protocol witness table for SiriKitBiomeDonator;
  *a1 = v2;

  return swift_retain();
}

uint64_t default argument 1 of TaskLoggingService.init(biomeDonator:curareDonator:selfEmitter:tier1LinkIdSupplier:derivedIdentifierSupplier:appInformationSupplier:sensitivityManager:featureChecker:)@<X0>(uint64_t *a1@<X8>)
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  uint64_t v2 = static SiriKitCurareDonator.instance;
  a1[3] = type metadata accessor for SiriKitCurareDonator();
  a1[4] = (uint64_t)&protocol witness table for SiriKitCurareDonator;
  *a1 = v2;

  return swift_retain();
}

id default argument 6 of TaskLoggingService.init(biomeDonator:curareDonator:selfEmitter:tier1LinkIdSupplier:derivedIdentifierSupplier:appInformationSupplier:sensitivityManager:featureChecker:)()
{
  id v0 = objc_msgSend(self, sel_shared);

  return v0;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance LNSystemProtocolIdentifier(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance LNSystemProtocolIdentifier(a1, a2, MEMORY[0x1E4FBB198]);
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance LNSystemProtocolIdentifier(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance LNSystemProtocolIdentifier(a1, a2, MEMORY[0x1E4F27EB8]);
}

void *protocol witness for OptionSet.init(rawValue:) in conformance AFCallState@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LNSystemProtocolIdentifier()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LNSystemProtocolIdentifier()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance LNSystemProtocolIdentifier(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance LNSystemProtocolIdentifier(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance LNSystemProtocolIdentifier(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance LNSystemProtocolIdentifier@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = MEMORY[0x1BA9E2DD0](v2);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

void protocol witness for SetAlgebra.init() in conformance AFCallState(void *a1@<X8>)
{
  *a1 = 0;
}

void *protocol witness for SetAlgebra.union(_:) in conformance AFCallState@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *protocol witness for SetAlgebra.intersection(_:) in conformance AFCallState@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance AFCallState@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance AFCallState(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *protocol witness for SetAlgebra.remove(_:) in conformance AFCallState@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *protocol witness for SetAlgebra.update(with:) in conformance AFCallState@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *protocol witness for SetAlgebra.formUnion(_:) in conformance AFCallState(void *result)
{
  *v1 |= *result;
  return result;
}

void *protocol witness for SetAlgebra.formIntersection(_:) in conformance AFCallState(void *result)
{
  *v1 &= *result;
  return result;
}

void *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance AFCallState(void *result)
{
  *v1 ^= *result;
  return result;
}

void *protocol witness for SetAlgebra.subtracting(_:) in conformance AFCallState@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance AFCallState(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance AFCallState(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance AFCallState(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance AFCallState()
{
  return *v0 == 0;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance AFCallState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F4184B08](a1, a4, a2, a5, a3);
}

void *protocol witness for SetAlgebra.subtract(_:) in conformance AFCallState(void *result)
{
  *v1 &= ~*result;
  return result;
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance AFCallState@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AFCallState(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LNSystemProtocolIdentifier()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AFCallState(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance AFCallState@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance LNSystemProtocolIdentifier@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance LNSystemProtocolIdentifier(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier, type metadata accessor for LNSystemProtocolIdentifier);
  uint64_t v3 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier, type metadata accessor for LNSystemProtocolIdentifier);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance LNSystemProtocolIdentifier@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = MEMORY[0x1BA9E2DD0](*a1, a1[1]);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance LNActionTypeSpecificMetadataKey(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type LNActionTypeSpecificMetadataKey and conformance LNActionTypeSpecificMetadataKey, type metadata accessor for LNActionTypeSpecificMetadataKey);
  uint64_t v3 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type LNActionTypeSpecificMetadataKey and conformance LNActionTypeSpecificMetadataKey, type metadata accessor for LNActionTypeSpecificMetadataKey);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t specialized static AceMetricsLogger.logRemoteAnalytics(service:command:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v38[1] = a5;
  uint64_t v7 = type metadata accessor for OSSignpostID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v9);
  char v14 = (char *)v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a3);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  id v15 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.instrumentation);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl(&dword_1B9C64000, v17, v18, "Logging Analytics to remote device", v19, 2u);
    MEMORY[0x1BA9E48C0](v19, -1, -1);
  }

  self;
  uint64_t v20 = swift_dynamicCastObjCClass();
  if (v20)
  {
    uint64_t v21 = (void *)v20;
    swift_unknownObjectRetain();
    uint64_t v22 = specialized static ViewMetricsLogger.getSparseAddViews(addViews:)(v21);
  }
  else
  {
    self;
    uint64_t v23 = swift_dynamicCastObjCClass();
    if (!v23) {
      goto LABEL_15;
    }
    os_log_t v24 = (void *)v23;
    swift_unknownObjectRetain();
    uint64_t v22 = (uint64_t)specialized static SayMetricsLogger.getSparseCommand(command:)(v24);
  }
  double v25 = (void *)v22;
  v38[0] = v8;
  swift_unknownObjectRelease();
  unint64_t v26 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  unint64_t v43 = v26;
  id v27 = objc_msgSend(v25, sel_dictionary);
  if (v27)
  {
    id v28 = v27;
    uint64_t v29 = v7;
    uint64_t v42 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableDictionary);
    *(void *)&long long v41 = v28;
    outlined init with take of Any(&v41, v40);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v39 = v26;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v40, 0x6C46746E65696C43, 0xEE0077656956776FLL, isUniquelyReferenced_nonNull_native);
    unint64_t v43 = v39;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v29 = v7;
    specialized Dictionary._Variant.removeValue(forKey:)(0x6C46746E65696C43, 0xEE0077656956776FLL, &v41);
    outlined destroy of Any?((uint64_t)&v41);
  }
  uint64_t v31 = specialized static AceMetricsLogger.makeJSONFromDictionary(dictionary:)();
  uint64_t v33 = v32;
  swift_bridgeObjectRelease();
  id v34 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F967A8]), sel_init);
  char v35 = (void *)MEMORY[0x1BA9E2DD0](0x52524F454E4B53, 0xE700000000000000);
  objc_msgSend(v34, sel_setEventName_, v35);

  uint64_t v36 = (void *)MEMORY[0x1BA9E2DD0](v31, v33);
  swift_bridgeObjectRelease();
  objc_msgSend(v34, sel_setEventValue_, v36);

  AceServiceInvokerAsync.submitAndForget(_:)();
  uint64_t v7 = v29;
  uint64_t v8 = v38[0];
LABEL_15:
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, a3);
}

uint64_t specialized static AceMetricsLogger.logAnalytics(command:)(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  char v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OSSignpostID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  id v10 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  self;
  uint64_t v11 = swift_dynamicCastObjCClass();
  if (v11)
  {
    uint64_t v12 = (void *)v11;
    swift_unknownObjectRetain();
    specialized static ViewMetricsLogger.logAnalytics(view:)(v12);
LABEL_13:
    swift_unknownObjectRelease();
LABEL_14:
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  self;
  uint64_t v13 = swift_dynamicCastObjCClass();
  if (v13)
  {
    char v14 = (void *)v13;
    swift_unknownObjectRetain();
    specialized static SayMetricsLogger.logAnalytics(command:)(v14);
    goto LABEL_13;
  }
  self;
  uint64_t v15 = swift_dynamicCastObjCClass();
  if (v15)
  {
    uint64_t v16 = (void *)v15;
    swift_unknownObjectRetain();
    specialized static DialogMetricsLogger.logAnalytics(dialog:)(v16);
    goto LABEL_13;
  }
  self;
  uint64_t v17 = swift_dynamicCastObjCClass();
  if (v17)
  {
    os_log_type_t v18 = (void *)v17;
    swift_unknownObjectRetain();
    specialized static LaunchAppMetricsLogger.logAnalytics(launchApp:)(v18);
    goto LABEL_13;
  }
  self;
  uint64_t v19 = swift_dynamicCastObjCClass();
  if (v19)
  {
    uint64_t v20 = (void *)v19;
    swift_unknownObjectRetain();
    specialized static LaunchAppMetricsLogger.logAnalytics(launchApp:)(v20);
    goto LABEL_13;
  }
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v22 = __swift_project_value_buffer(v2, (uint64_t)static Logger.instrumentation);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v22, v2);
  swift_unknownObjectRetain_n();
  uint64_t v23 = Logger.logObject.getter();
  int v24 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v23, (os_log_type_t)v24))
  {

    swift_unknownObjectRelease_n();
    goto LABEL_21;
  }
  int v39 = v24;
  os_log_t v40 = v23;
  double v25 = (_DWORD *)swift_slowAlloc();
  uint64_t v38 = swift_slowAlloc();
  uint64_t v42 = v38;
  *double v25 = 136315138;
  id v26 = objc_msgSend(a1, sel_encodedClassName);
  if (v26)
  {
    id v27 = v26;
    uint64_t v37 = v25 + 1;
    uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v36 = (uint8_t *)v25;
    unint64_t v29 = v28;

    uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v29, &v42);
    uint64_t v31 = v36;
    uint64_t v41 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    os_log_t v32 = v40;
    uint64_t v33 = v31;
    _os_log_impl(&dword_1B9C64000, v40, (os_log_type_t)v39, "Command unsupported for Grading data logging. You need to add logging support for command: %s", v31, 0xCu);
    uint64_t v34 = v38;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v34, -1, -1);
    MEMORY[0x1BA9E48C0](v33, -1, -1);

LABEL_21:
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    goto LABEL_14;
  }
  uint64_t result = swift_unknownObjectRelease();
  __break(1u);
  return result;
}

uint64_t outlined assign with take of CorrectingFlow?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CorrectingFlow?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B9D42FD8()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in default argument 0 of OrderedForest.debugDescription(printer:)(uint64_t a1)
{
  return closure #1 in default argument 0 of OrderedForest.debugDescription(printer:)(a1);
}

ValueMetadata *type metadata accessor for AceMetricsLogger()
{
  return &type metadata for AceMetricsLogger;
}

void type metadata accessor for AFAnalyticsEventType(uint64_t a1)
{
}

void type metadata accessor for AFEndpointMode(uint64_t a1)
{
}

void type metadata accessor for SISchemaDeviceSensitivityState(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

uint64_t specialized static AceMetricsLogger.makeJSONFromDictionary(dictionary:)()
{
  void v30[2] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v0 = type metadata accessor for String.Encoding();
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v1 = self;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v30[0] = 0;
  id v3 = objc_msgSend(v1, sel_dataWithJSONObject_options_error_, isa, 0, v30);

  id v4 = v30[0];
  if (!v3)
  {
    uint64_t v11 = v4;
    uint64_t v12 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.instrumentation);
    swift_bridgeObjectRetain_n();
    char v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = (void *)swift_slowAlloc();
      v30[0] = v17;
      *(_DWORD *)uint64_t v16 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v18 = Dictionary.description.getter();
      unint64_t v20 = v19;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, (uint64_t *)v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v14, v15, "Could not serialize as JSON : %s", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v17, -1, -1);
      MEMORY[0x1BA9E48C0](v16, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  char v5 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  v30[0] = v5;
  v30[1] = v7;
  static String.Encoding.utf8.getter();
  lazy protocol witness table accessor for type Data and conformance Data();
  uint64_t v8 = String.init<A>(bytes:encoding:)();
  if (!v9)
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.instrumentation);
    swift_bridgeObjectRetain_n();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      int v24 = (uint8_t *)swift_slowAlloc();
      double v25 = (void *)swift_slowAlloc();
      v30[0] = v25;
      *(_DWORD *)int v24 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v26 = Dictionary.description.getter();
      unint64_t v28 = v27;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, (uint64_t *)v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v22, v23, "Could not convert JSON data to a string : %s", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v25, -1, -1);
      MEMORY[0x1BA9E48C0](v24, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    outlined consume of Data._Representation((uint64_t)v5, (unint64_t)v7);
    return 0;
  }
  uint64_t v10 = v8;
  outlined consume of Data._Representation((uint64_t)v5, (unint64_t)v7);
  return v10;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

void type metadata accessor for LNActionTypeSpecificMetadataKey(uint64_t a1)
{
}

void type metadata accessor for LNSystemProtocolIdentifier(uint64_t a1)
{
}

void type metadata accessor for SMTTCUState(uint64_t a1)
{
}

void type metadata accessor for AFCallState(uint64_t a1)
{
}

void type metadata accessor for AFAnalyticsEventType(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t base witness table accessor for Equatable in AFCallState()
{
  return lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type AFCallState and conformance AFCallState, type metadata accessor for AFCallState);
}

uint64_t lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in AFCallState()
{
  return lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type AFCallState and conformance AFCallState, type metadata accessor for AFCallState);
}

uint64_t base witness table accessor for RawRepresentable in AFCallState()
{
  return lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type AFCallState and conformance AFCallState, type metadata accessor for AFCallState);
}

uint64_t base witness table accessor for SetAlgebra in AFCallState()
{
  return lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type AFCallState and conformance AFCallState, type metadata accessor for AFCallState);
}

uint64_t base witness table accessor for RawRepresentable in LNSystemProtocolIdentifier()
{
  return lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier, type metadata accessor for LNSystemProtocolIdentifier);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in LNSystemProtocolIdentifier()
{
  return lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier, type metadata accessor for LNSystemProtocolIdentifier);
}

uint64_t base witness table accessor for RawRepresentable in LNActionTypeSpecificMetadataKey()
{
  return lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type LNActionTypeSpecificMetadataKey and conformance LNActionTypeSpecificMetadataKey, type metadata accessor for LNActionTypeSpecificMetadataKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in LNActionTypeSpecificMetadataKey()
{
  return lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type LNActionTypeSpecificMetadataKey and conformance LNActionTypeSpecificMetadataKey, type metadata accessor for LNActionTypeSpecificMetadataKey);
}

uint64_t base witness table accessor for Equatable in LNActionTypeSpecificMetadataKey()
{
  return lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type LNActionTypeSpecificMetadataKey and conformance LNActionTypeSpecificMetadataKey, type metadata accessor for LNActionTypeSpecificMetadataKey);
}

uint64_t base witness table accessor for Equatable in LNSystemProtocolIdentifier()
{
  return lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier, type metadata accessor for LNSystemProtocolIdentifier);
}

void Node.children.setter()
{
}

uint64_t AceServiceInvokerImpl.bridge.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t AceServiceInvokerImpl.runLocation.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

id AceServiceInvokerImpl.requestContextData.getter()
{
  return *(id *)(v0 + 32);
}

uint64_t AceServiceInvokerImpl.executionRequestId.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AceServiceInvokerImpl.rootRequestId.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AceServiceInvokerImpl.invocationDeviceAssistantId.getter()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AceServiceInvokerImpl.executionDeviceAssistantId.getter()
{
  uint64_t v1 = *(void *)(v0 + 88);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AceServiceInvokerImpl.invokedByPeerToPeerEORR.getter()
{
  return *(unsigned __int8 *)(v0 + 104);
}

uint64_t AceServiceInvokerImpl.rrClient.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 112, a1);
}

uint64_t AceServiceInvokerImpl.isInvalidated.getter()
{
  return swift_retain();
}

uint64_t one-time initialization function for userFacingResponseCommandList()
{
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSSet);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1BA04F9C0;
  uint64_t v1 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SAUIAddViews);
  *(void *)(v0 + 56) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAUIAddViews.Type);
  *(void *)(v0 + 32) = v1;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAUIAddDialogs);
  *(void *)(v0 + 88) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAUIAddDialogs.Type);
  *(void *)(v0 + 64) = v2;
  uint64_t result = MEMORY[0x1BA9E3630](v0);
  static AceServiceInvokerImpl.userFacingResponseCommandList = result;
  return result;
}

uint64_t AceServiceInvokerImpl.__allocating_init(bridge:executionRequestId:rootRequestId:requestContextData:runLocation:invocationDeviceAssistantId:executionDeviceAssistantId:invokedByPeerToPeerEORR:rrClient:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, char a7, uint64_t a8, long long a9, uint64_t a10, char a11, uint64_t a12)
{
  char v17 = a7 & 1;
  uint64_t v18 = swift_allocObject();
  AceServiceInvokerImpl.init(bridge:executionRequestId:rootRequestId:requestContextData:runLocation:invocationDeviceAssistantId:executionDeviceAssistantId:invokedByPeerToPeerEORR:rrClient:)(a1, a2, a3, a4, a5, a6, v17, a8, a9, a10, a11, a12);
  return v18;
}

uint64_t AceServiceInvokerImpl.init(bridge:executionRequestId:rootRequestId:requestContextData:runLocation:invocationDeviceAssistantId:executionDeviceAssistantId:invokedByPeerToPeerEORR:rrClient:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, char a7, uint64_t a8, long long a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13 = v12;
  char v19 = a7 & 1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<Bool, os_unfair_lock_s>);
  uint64_t v20 = swift_allocObject();
  *(_DWORD *)(v20 + 20) = 0;
  *(unsigned char *)(v20 + 16) = 0;
  *(void *)(v13 + 152) = v20;
  type metadata accessor for SubmissionTaskRegistry();
  uint64_t v21 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<Set<Task<SABaseCommand?, Error>>, os_unfair_lock_s>);
  uint64_t v22 = swift_allocObject();
  *(_DWORD *)(v22 + 24) = 0;
  *(void *)(v22 + 16) = MEMORY[0x1E4FBC870];
  *(void *)(v21 + 16) = v22;
  *(void *)(v13 + 160) = v21;
  uint64_t v23 = swift_allocObject();
  *(_DWORD *)(v23 + 20) = 0;
  *(unsigned char *)(v23 + 16) = 0;
  *(void *)(v13 + 168) = v23;
  *(void *)(v13 + 16) = a1;
  *(void *)(v13 + 48) = a3;
  *(void *)(v13 + 56) = a4;
  *(void *)(v13 + 32) = a6;
  *(void *)(v13 + 40) = a2;
  *(unsigned char *)(v13 + 24) = v19;
  *(void *)(v13 + 64) = a5;
  *(void *)(v13 + 72) = a8;
  *(_OWORD *)(v13 + 80) = a9;
  *(void *)(v13 + 96) = a10;
  *(unsigned char *)(v13 + 104) = a11;
  outlined init with copy of ReferenceResolutionClientProtocol?(a12, (uint64_t)&v30, &demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  if (v31)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(a12, &demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
    outlined init with take of ReferenceResolutionClientProtocol(&v30, (uint64_t)&v32);
  }
  else
  {
    swift_unknownObjectRetain();
    id v24 = a6;
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v30, &demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
    uint64_t v25 = type metadata accessor for ReferenceResolutionClient();
    uint64_t v26 = ReferenceResolutionClient.__allocating_init()();
    uint64_t v33 = v25;
    uint64_t v34 = MEMORY[0x1E4FA1F98];
    swift_unknownObjectRelease();

    *(void *)&long long v32 = v26;
    outlined destroy of ReferenceResolutionClientProtocol?(a12, &demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  }
  outlined init with take of ReferenceResolutionClientProtocol(&v32, v13 + 112);
  return v13;
}

uint64_t AceServiceInvokerImpl.__allocating_init(bridge:executionRequestId:rootRequestId:requestContextData:invokedByPeerToPeerEORR:rrClient:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, char a7, uint64_t a8)
{
  outlined init with copy of ReferenceResolutionClientProtocol?(a8, (uint64_t)v18, &demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  uint64_t v16 = swift_allocObject();
  AceServiceInvokerImpl.init(bridge:executionRequestId:rootRequestId:requestContextData:runLocation:invocationDeviceAssistantId:executionDeviceAssistantId:invokedByPeerToPeerEORR:rrClient:)(a1, a2, a3, a4, a5, a6, 0, 0, 0, 0, a7, (uint64_t)v18);
  outlined destroy of ReferenceResolutionClientProtocol?(a8, &demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  return v16;
}

Swift::Void __swiftcall AceServiceInvokerImpl.cancelPendingCommands()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0 + 160) + 16);
  uint64_t v2 = (uint64_t *)&v1[4];
  id v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  closure #1 in SubmissionTaskRegistry.cancelAll()(v2, &v9);
  os_unfair_lock_unlock(v3);
  uint64_t v4 = v9;
  if (one-time initialization token for ace != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.ace);
  oslog = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 134217984;
    uint64_t v9 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, oslog, v6, "Completing pending completions. pending completion count: %ld", v7, 0xCu);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }
  else
  {
  }
}

Swift::Void __swiftcall AceServiceInvokerImpl.invalidate()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 152);
  uint64_t v2 = v1 + 4;
  id v3 = v1 + 5;
  os_unfair_lock_lock(v1 + 5);
  closure #1 in AceServiceInvokerImpl.invalidate()(v2);
  os_unfair_lock_unlock(v3);

  AceServiceInvokerImpl.cancelPendingCommands()();
}

unsigned char *closure #1 in AceServiceInvokerImpl.invalidate()(unsigned char *result)
{
  *uint64_t result = 1;
  return result;
}

Swift::Bool __swiftcall AceServiceInvokerImpl.isAvailable()()
{
  return 1;
}

id AceServiceInvokerImpl.peerInfo()@<X0>(uint64_t *a1@<X8>)
{
  id v6 = *(id *)(*(void *)(v1 + 32) + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_peerInfo);
  uint64_t v3 = type metadata accessor for PeerInfoProvider();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v6;
  a1[3] = v3;
  a1[4] = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type PeerInfoProvider and conformance PeerInfoProvider, 255, (void (*)(uint64_t))type metadata accessor for PeerInfoProvider);
  *a1 = v4;

  return v6;
}

id AceServiceInvokerImpl.endpointInfo()@<X0>(uint64_t *a1@<X8>)
{
  id v6 = *(id *)(*(void *)(v1 + 32) + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_endpointInfo);
  uint64_t v3 = type metadata accessor for EndpointInfoProvider();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v6;
  a1[3] = v3;
  a1[4] = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type EndpointInfoProvider and conformance EndpointInfoProvider, 255, (void (*)(uint64_t))type metadata accessor for EndpointInfoProvider);
  *a1 = v4;

  return v6;
}

void AceServiceInvokerImpl.prepareForAudioHandoff(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v2 + 16);
  v5[4] = a1;
  v5[5] = a2;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1107296256;
  _OWORD v5[2] = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
  v5[3] = &block_descriptor_2;
  uint64_t v4 = _Block_copy(v5);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_prepareForAudioHandoffWithCompletion_, v4);
  _Block_release(v4);
}

void AceServiceInvokerImpl.prepareForAudioHandoffFailed(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v2 + 16);
  v5[4] = a1;
  v5[5] = a2;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1107296256;
  _OWORD v5[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v5[3] = &block_descriptor_3;
  uint64_t v4 = _Block_copy(v5);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_prepareForAudioHandoffFailedWithCompletion_, v4);
  _Block_release(v4);
}

uint64_t AceServiceInvokerImpl.submitAndForget(_:)(NSObject *a1)
{
  uint64_t v2 = type metadata accessor for RequestSummary.ExecutionSource();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FA24B8], v2);
  AceServiceInvokerImpl.submitAndForget(_:setRefId:executionSource:)(a1, 1, (uint64_t)v5);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Void __swiftcall AceServiceInvokerImpl.submitAndForget(_:)(Swift::OpaquePointer a1)
{
  uint64_t v2 = type metadata accessor for RequestSummary.ExecutionSource();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!((unint64_t)a1._rawValue >> 62))
  {
    uint64_t v6 = *(void *)(((unint64_t)a1._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6) {
      goto LABEL_3;
    }
LABEL_11:
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  if (!v6) {
    goto LABEL_11;
  }
LABEL_3:
  if (v6 >= 1)
  {
    uint64_t v16 = v6;
    uint64_t v7 = 0;
    rawValue = (id *)a1._rawValue;
    unint64_t v9 = (unint64_t)a1._rawValue & 0xC000000000000001;
    uint64_t v10 = *MEMORY[0x1E4FA24B8];
    uint64_t v11 = (void (**)(char *, uint64_t, uint64_t))(v3 + 104);
    uint64_t v12 = (void (**)(char *, uint64_t))(v3 + 8);
    do
    {
      if (v9) {
        uint64_t v13 = MEMORY[0x1BA9E3990](v7, rawValue);
      }
      else {
        uint64_t v13 = rawValue[v7 + 4];
      }
      char v14 = v13;
      ++v7;
      (*v11)(v5, v10, v2);
      AceServiceInvokerImpl.submitAndForget(_:setRefId:executionSource:)(v14, 1, (uint64_t)v5);
      (*v12)(v5, v2);
    }
    while (v16 != v7);
LABEL_13:
    swift_bridgeObjectRelease();
    return;
  }
  __break(1u);
}

uint64_t AceServiceInvokerImpl.submitAndForgetWithoutRefId(_:)(NSObject *a1)
{
  uint64_t v2 = type metadata accessor for RequestSummary.ExecutionSource();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FA24B8], v2);
  AceServiceInvokerImpl.submitAndForget(_:setRefId:executionSource:)(a1, 0, (uint64_t)v5);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void AceServiceInvokerImpl.submitAndForget(_:setRefId:executionSource:)(NSObject *a1, char a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v47 = a1;
  uint64_t v48 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  unint64_t v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v46 - v10;
  uint64_t v12 = type metadata accessor for RequestSummary.ExecutionSource();
  os_log_t v49 = *(os_log_t *)(v12 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  char v17 = (char *)&v46 - v16;
  uint64_t v18 = *(os_unfair_lock_s **)(v3 + 152);
  char v19 = v18 + 4;
  uint64_t v20 = v18 + 5;
  os_unfair_lock_lock(v18 + 5);
  closure #1 in AceServiceInvokerImpl.submitInAppResponse(executionSource:inAppResponse:)(v19, aBlock);
  os_unfair_lock_unlock(v20);
  if (aBlock[0])
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.executor);
    os_log_t v49 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v49, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl(&dword_1B9C64000, v49, v22, "Attempting to submitAndForget a command on an invalidated AceServiceInvoker. Ignoring.", v23, 2u);
      MEMORY[0x1BA9E48C0](v23, -1, -1);
    }
    os_log_t v24 = v49;
  }
  else
  {
    if (a2) {
      uint64_t v25 = (void *)MEMORY[0x1E4FBC860];
    }
    else {
      uint64_t v25 = &outlined read-only object #0 of AceServiceInvokerImpl.submitAndForget(_:setRefId:executionSource:);
    }
    uint64_t v26 = AceServiceInvokerImpl.preparedCommand(_:options:)(v47, (uint64_t)v25);
    swift_bridgeObjectRelease();
    AceServiceInvokerImpl.closeServerRequestIfRequired(givenCommand:)();
    uint64_t isa = (uint64_t)v4[6].isa;
    Class v46 = v4[5].isa;
    uint64_t v47 = v4;
    os_log_t v28 = v49;
    Class v29 = v49[2].isa;
    ((void (*)(char *, uint64_t, uint64_t))v29)(v17, v48, v12);
    uint64_t v30 = type metadata accessor for FlowOutputMessage.InAppResponse();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v11, 1, 1, v30);
    ((void (*)(char *, char *, uint64_t))v29)(v15, v17, v12);
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v11, (uint64_t)v9, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
    id v31 = objc_allocWithZone((Class)type metadata accessor for ExecutionOutput());
    long long v32 = v26;
    swift_bridgeObjectRetain();
    uint64_t v33 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:executionSource:inAppResponse:)(v26, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)v46, isa, (uint64_t)v15, (uint64_t)v9);

    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v11, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
    ((void (*)(char *, uint64_t))v28[1].isa)(v17, v12);
    if (one-time initialization token for ace != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static Logger.ace);
    uint64_t v35 = v32;
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v36, v37))
    {
      os_log_t v49 = v33;
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      aBlock[0] = v39;
      *(_DWORD *)uint64_t v38 = 136315138;
      id v40 = [v35 description];
      uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v43 = v42;

      uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v43, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v33 = v49;
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B9C64000, v36, v37, "Submitting command via submitAndForget: %s", v38, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v39, -1, -1);
      MEMORY[0x1BA9E48C0](v38, -1, -1);
    }
    else
    {
    }
    Class v44 = v47[2].isa;
    aBlock[4] = (uint64_t)closure #2 in AceServiceInvokerImpl.submitAndForget(_:setRefId:executionSource:);
    aBlock[5] = 0;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
    aBlock[3] = (uint64_t)&block_descriptor_293;
    uint64_t v45 = _Block_copy(aBlock);
    [(objc_class *)v44 submitWithExecutionOutput:v33 completion:v45];
    _Block_release(v45);
  }
}

void closure #2 in AceServiceInvokerImpl.submitAndForget(_:setRefId:executionSource:)(void *a1, void *a2)
{
}

void AceServiceInvokerImpl.submitInAppResponse(executionSource:inAppResponse:)(NSObject *a1, uint64_t a2)
{
  uint64_t v3 = (void *)v2;
  os_log_t v55 = a1;
  uint64_t v5 = type metadata accessor for FlowOutputMessage.InAppResponse();
  uint64_t v6 = *(NSObject **)(v5 - 8);
  uint64_t v58 = v5;
  os_log_t v59 = v6;
  MEMORY[0x1F4188790](v5);
  uint64_t v57 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v56 = (uint64_t)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v50 - v11;
  uint64_t v13 = type metadata accessor for RequestSummary.ExecutionSource();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  char v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  char v19 = (char *)&v50 - v18;
  uint64_t v20 = *(os_unfair_lock_s **)(v2 + 152);
  uint64_t v21 = v20 + 4;
  os_log_type_t v22 = v20 + 5;
  os_unfair_lock_lock(v20 + 5);
  closure #1 in AceServiceInvokerImpl.submitInAppResponse(executionSource:inAppResponse:)(v21, aBlock);
  os_unfair_lock_unlock(v22);
  if (aBlock[0])
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.executor);
    os_log_t v59 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v59, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl(&dword_1B9C64000, v59, v24, "Attempting to submit inAppResponse on an invalidated AceServiceInvoker. Ignoring.", v25, 2u);
      MEMORY[0x1BA9E48C0](v25, -1, -1);
    }
    os_log_t v26 = v59;
  }
  else
  {
    unint64_t v27 = (os_unfair_lock_s *)v3[21];
    os_log_t v28 = v27 + 4;
    Class v29 = v27 + 5;
    os_unfair_lock_lock(v27 + 5);
    partial apply for closure #1 in AceServiceInvokerImpl.closeServerRequest()(v28);
    os_unfair_lock_unlock(v29);
    uint64_t v30 = v3[6];
    uint64_t v51 = v3[5];
    unint64_t v54 = v3;
    id v31 = *(void (**)(char *, os_log_t, uint64_t))(v14 + 16);
    v31(v19, v55, v13);
    os_log_t v32 = v59;
    Class isa = v59[2].isa;
    uint64_t v34 = a2;
    uint64_t v52 = a2;
    uint64_t v53 = (void (*)(char *, uint64_t, uint64_t))isa;
    uint64_t v35 = v58;
    os_log_t v55 = v59 + 2;
    ((void (*)(char *, uint64_t, uint64_t))isa)(v12, v34, v58);
    ((void (*)(char *, void, uint64_t, uint64_t))v32[7].isa)(v12, 0, 1, v35);
    v31(v17, (os_log_t)v19, v13);
    uint64_t v36 = v56;
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v12, v56, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
    id v37 = objc_allocWithZone((Class)type metadata accessor for ExecutionOutput());
    swift_bridgeObjectRetain();
    id v38 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:executionSource:inAppResponse:)(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v51, v30, (uint64_t)v17, v36);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
    if (one-time initialization token for ace != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    __swift_project_value_buffer(v39, (uint64_t)static Logger.ace);
    id v40 = v57;
    uint64_t v41 = v58;
    v53(v57, v52, v58);
    unint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v42, v43))
    {
      Class v44 = (uint8_t *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      aBlock[0] = v45;
      *(_DWORD *)Class v44 = 136315138;
      uint64_t v46 = FlowOutputMessage.InAppResponse.bundleId.getter();
      uint64_t v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v59[1].isa)(v40, v41);
      _os_log_impl(&dword_1B9C64000, v42, v43, "Submitting inAppResponse with bundleId: %s", v44, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v45, -1, -1);
      MEMORY[0x1BA9E48C0](v44, -1, -1);
    }
    else
    {
      ((void (*)(char *, uint64_t))v59[1].isa)(v40, v41);
    }

    uint64_t v48 = (void *)v54[2];
    aBlock[4] = (uint64_t)closure #2 in AceServiceInvokerImpl.submitInAppResponse(executionSource:inAppResponse:);
    aBlock[5] = 0;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
    aBlock[3] = (uint64_t)&block_descriptor_6;
    os_log_t v49 = _Block_copy(aBlock);
    objc_msgSend(v48, sel_submitWithExecutionOutput_completion_, v38, v49);
    _Block_release(v49);
  }
}

void closure #2 in AceServiceInvokerImpl.submitInAppResponse(executionSource:inAppResponse:)(void *a1, void *a2)
{
}

void closure #2 in AceServiceInvokerImpl.submitAndForget(_:setRefId:executionSource:)(void *a1, id a2, const char *a3, const char *a4)
{
  if (a2)
  {
    id v6 = a2;
    if (one-time initialization token for ace != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.ace);
    id v8 = a2;
    id v9 = a2;
    oslog = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v25 = v12;
      *(_DWORD *)uint64_t v11 = 136315138;
      swift_getErrorValue();
      uint64_t v13 = Error.localizedDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B9C64000, oslog, v10, a3, v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v12, -1, -1);
      MEMORY[0x1BA9E48C0](v11, -1, -1);

      return;
    }
  }
  else
  {
    if (one-time initialization token for ace != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.ace);
    oslog = a1;
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v25 = v21;
      *(_DWORD *)uint64_t v20 = 136315138;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?.Type);
      uint64_t v22 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v18, v19, a4, v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v21, -1, -1);
      MEMORY[0x1BA9E48C0](v20, -1, -1);

      return;
    }
  }
}

uint64_t AceServiceInvokerImpl.submitAndForget(_:setRefId:executionSource:)(unint64_t a1, char a2, uint64_t a3)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v6 = result;
    if (!result) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v6) {
      goto LABEL_10;
    }
  }
  if (v6 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v8 = 0;
  char v9 = a2 & 1;
  do
  {
    if ((a1 & 0xC000000000000001) != 0) {
      os_log_type_t v10 = MEMORY[0x1BA9E3990](v8, a1);
    }
    else {
      os_log_type_t v10 = *(id *)(a1 + 8 * v8 + 32);
    }
    uint64_t v11 = v10;
    ++v8;
    AceServiceInvokerImpl.submitAndForget(_:setRefId:executionSource:)(v10, v9, a3);
  }
  while (v6 != v8);
LABEL_10:

  return swift_bridgeObjectRelease();
}

uint64_t AceServiceInvokerImpl.submit<A>(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AceServiceInvokerImpl.submit<A>(_:completion:)(a1, a2, a3, a4, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))AceServiceInvokerImpl._submitPrep<A>(_:setRefId:responseType:), (uint64_t)&unk_1F1376D20, (uint64_t)&async function pointer to partial apply for closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:));
}

uint64_t AceServiceInvokerImpl._submitPrep<A>(_:setRefId:responseType:)(NSObject *a1, char a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for RequestSummary.ExecutionSource();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  os_log_type_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2) {
    uint64_t v11 = (void *)MEMORY[0x1E4FBC860];
  }
  else {
    uint64_t v11 = &outlined read-only object #0 of AceServiceInvokerImpl._submitPrep<A>(_:setRefId:responseType:);
  }
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E4FA24B8], v7);
  uint64_t v12 = AceServiceInvokerImpl.createSubmissionTask<A>(for:options:executionSource:expectingResponseOfType:)(a1, (uint64_t)v11, (uint64_t)v10, a3);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v13 = *(os_unfair_lock_s **)(*(void *)(v3 + 160) + 16);
  unint64_t v14 = (uint64_t *)&v13[4];
  uint64_t v15 = v13 + 6;
  os_unfair_lock_lock(v13 + 6);
  partial apply for closure #1 in SubmissionTaskRegistry.register(_:)(v14, &v18);
  os_unfair_lock_unlock(v15);
  swift_release();
  return v12;
}

uint64_t closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  type metadata accessor for SubmitCommandError();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type SubmitCommandError and conformance SubmitCommandError, 255, MEMORY[0x1E4FA1D30]);
  uint64_t v9 = type metadata accessor for Result();
  v8[7] = v9;
  v8[8] = *(void *)(v9 - 8);
  v8[9] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:), 0, 0);
}

uint64_t closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:)()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 80) = v2;
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:);
  uint64_t v5 = *(void *)(v0 + 72);
  return Result<>.init(catching:)(v5, (int *)&async function pointer to partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:));
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:), 0, 0);
}

uint64_t closure #1 in closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a1;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v7;
  void *v7 = v4;
  v7[1] = closure #1 in closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:);
  return AceServiceInvokerImpl._submitExecute<A>(_:)(a3, a4);
}

uint64_t closure #1 in closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 32) = a1;
    return MEMORY[0x1F4188298](closure #1 in closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:), 0, 0);
  }
}

uint64_t AceServiceInvokerImpl._submitExecute<A>(_:)(uint64_t a1, uint64_t a2)
{
  v3[5] = a1;
  v3[6] = v2;
  uint64_t v6 = (void *)swift_task_alloc();
  v3[7] = v6;
  *uint64_t v6 = v3;
  v6[1] = AceServiceInvokerImpl._submitExecute<A>(_:);
  return specialized AceServiceInvokerImpl.getResponse<A>(from:)(a1, a2);
}

uint64_t AceServiceInvokerImpl._submitExecute<A>(_:)(uint64_t a1)
{
  long long v3 = (void *)*v2;
  v3[2] = v2;
  void v3[3] = a1;
  v3[4] = v1;
  v3[8] = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = AceServiceInvokerImpl._submitExecute<A>(_:);
  }
  else {
    uint64_t v4 = AceServiceInvokerImpl._submitExecute<A>(_:);
  }
  return MEMORY[0x1F4188298](v4, 0, 0);
}

void AceServiceInvokerImpl._submitExecute<A>(_:)()
{
  uint64_t v6 = v0;
  uint64_t v1 = v0[8];
  uint64_t v2 = (os_unfair_lock_s *)(*(void *)(*(void *)(v0[6] + 160) + 16) + 24);
  os_unfair_lock_lock(v2);
  closure #1 in SubmissionTaskRegistry.unregister(_:)partial apply(&v5);
  if (v1)
  {
    os_unfair_lock_unlock(v2);
  }
  else
  {
    uint64_t v3 = v0[3];
    os_unfair_lock_unlock(v2);
    swift_release();
    uint64_t v4 = (void (*)(uint64_t))v0[1];
    v4(v3);
  }
}

uint64_t AceServiceInvokerImpl._submitExecute<A>(_:)()
{
  uint64_t v5 = v0;
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(*(void *)(*(void *)(v0 + 48) + 160) + 16) + 24);
  os_unfair_lock_lock(v1);
  closure #1 in SubmissionTaskRegistry.unregister(_:)partial apply(&v4);
  os_unfair_lock_unlock(v1);
  swift_release();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t Result<>.init(catching:)(uint64_t a1, int *a2)
{
  v2[6] = a1;
  type metadata accessor for SubmitCommandError();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type SubmitCommandError and conformance SubmitCommandError, 255, MEMORY[0x1E4FA1D30]);
  uint64_t v4 = type metadata accessor for Result();
  v2[7] = v4;
  v2[8] = *(void *)(v4 - 8);
  v2[9] = swift_task_alloc();
  uint64_t v5 = swift_task_alloc();
  v2[10] = v5;
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v6 = (void *)swift_task_alloc();
  v2[11] = v6;
  *uint64_t v6 = v2;
  v6[1] = Result<>.init(catching:);
  return v8(v5);
}

uint64_t Result<>.init(catching:)()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = Result<>.init(catching:);
  }
  else {
    uint64_t v2 = Result<>.init(catching:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = v0[10];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[6];
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v4, v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

{
  void *v0;
  void *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = (void *)v0[12];
  uint64_t v3 = v0[8];
  uint64_t v2 = (uint64_t *)v0[9];
  uint64_t v5 = v0[6];
  uint64_t v4 = v0[7];
  swift_getErrorValue();
  Error.asSubmitCommandError.getter(v0[3], v0[4], v2);

  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v3 + 32))(v5, v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5Tm(a1, a2, a3);
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC14SiriKitRuntime20LinkExpansionContextV07SessionI0C_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  type metadata accessor for LinkExpansionContext.SessionContext();
  return swift_task_create();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC14SiriKitRuntime25PluginLookupByIntentTopic_p_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC14SiriKitRuntime25PluginLookupByIntentTopic_p_Tgm5Tm(a1, a2, a3, (uint64_t)&unk_1F1377018, (uint64_t *)&demangling cache variable for type metadata for PluginLookupByIntentTopic);
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCSb_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5Tm(a1, a2, a3);
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC14SiriKitRuntime23InterruptibleTaskResultOyytG_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC14SiriKitRuntime25PluginLookupByIntentTopic_p_Tgm5Tm(a1, a2, a3, (uint64_t)&unk_1F1376FF0, (uint64_t *)&demangling cache variable for type metadata for InterruptibleTaskResult<()>);
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC14SiriKitRuntime25PluginLookupByIntentTopic_p_Tgm5Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  __swift_instantiateConcreteTypeFromMangledName(a5);
  return swift_task_create();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCSo15AFSpeechPackageCSg_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC14SiriKitRuntime25PluginLookupByIntentTopic_p_Tgm5Tm(a1, a2, a3, (uint64_t)&unk_1F1376FC8, (uint64_t *)&demangling cache variable for type metadata for AFSpeechPackage?);
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC14SiriKitRuntime23InterruptibleTaskResultOyAG18RemoteConversation_pSgG_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC14SiriKitRuntime25PluginLookupByIntentTopic_p_Tgm5Tm(a1, a2, a3, (uint64_t)&unk_1F1376FA0, &demangling cache variable for type metadata for InterruptibleTaskResult<RemoteConversation?>);
}

uint64_t AceServiceInvokerImpl.submitWithoutRefId<A>(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AceServiceInvokerImpl.submit<A>(_:completion:)(a1, a2, a3, a4, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))AceServiceInvokerImpl._submitPrep<A>(_:setRefId:responseType:), (uint64_t)&unk_1F1376D48, (uint64_t)&async function pointer to partial apply for closure #1 in AceServiceInvokerImpl.submitWithoutRefId<A>(_:completion:));
}

uint64_t closure #1 in AceServiceInvokerImpl.submitWithoutRefId<A>(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  type metadata accessor for SubmitCommandError();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type SubmitCommandError and conformance SubmitCommandError, 255, MEMORY[0x1E4FA1D30]);
  uint64_t v9 = type metadata accessor for Result();
  v8[7] = v9;
  v8[8] = *(void *)(v9 - 8);
  v8[9] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in AceServiceInvokerImpl.submitWithoutRefId<A>(_:completion:), 0, 0);
}

uint64_t closure #1 in AceServiceInvokerImpl.submitWithoutRefId<A>(_:completion:)()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 80) = v2;
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:);
  uint64_t v5 = *(void *)(v0 + 72);
  return Result<>.init(catching:)(v5, (int *)&async function pointer to partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.submitWithoutRefId<A>(_:completion:));
}

uint64_t AceServiceInvokerImpl.submit<A>(_:setRefId:)(uint64_t a1, char a2, uint64_t a3)
{
  *(void *)(v4 + 24) = a3;
  *(void *)(v4 + 32) = v3;
  *(unsigned char *)(v4 + 72) = a2;
  *(void *)(v4 + 16) = a1;
  return MEMORY[0x1F4188298](AceServiceInvokerImpl.submit<A>(_:setRefId:), 0, 0);
}

uint64_t AceServiceInvokerImpl.submit<A>(_:setRefId:)()
{
  uint64_t v1 = AceServiceInvokerImpl._submitPrep<A>(_:setRefId:responseType:)(*(NSObject **)(v0 + 16), *(unsigned char *)(v0 + 72), *(void *)(v0 + 24));
  *(void *)(v0 + 40) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  void *v2 = v0;
  v2[1] = AceServiceInvokerImpl.submit<A>(_:setRefId:);
  uint64_t v3 = *(void *)(v0 + 24);
  return AceServiceInvokerImpl._submitExecute<A>(_:)(v1, v3);
}

uint64_t AceServiceInvokerImpl.submit<A>(_:setRefId:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 56) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = AceServiceInvokerImpl.submit<A>(_:setRefId:);
  }
  else
  {
    *(void *)(v4 + 64) = a1;
    uint64_t v5 = AceServiceInvokerImpl.submit<A>(_:setRefId:);
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

uint64_t AceServiceInvokerImpl.publish(dialogEngineOutput:executionSource:)(uint64_t a1, uint64_t a2)
{
  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  v3[18] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for RequestSummary.ExecutionSource();
  v3[19] = v4;
  v3[20] = *(void *)(v4 - 8);
  v3[21] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingText?);
  v3[22] = swift_task_alloc();
  v3[23] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for TemplatingText();
  v3[24] = v5;
  v3[25] = *(void *)(v5 - 8);
  v3[26] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for TemplatingSection();
  v3[27] = v6;
  v3[28] = *(void *)(v6 - 8);
  v3[29] = swift_task_alloc();
  v3[30] = swift_task_alloc();
  v3[31] = swift_task_alloc();
  v3[32] = swift_task_alloc();
  v3[33] = swift_task_alloc();
  v3[34] = swift_task_alloc();
  v3[35] = swift_task_alloc();
  v3[36] = swift_task_alloc();
  v3[37] = swift_task_alloc();
  v3[38] = swift_task_alloc();
  v3[39] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for TemplatingResult();
  v3[40] = v7;
  v3[41] = *(void *)(v7 - 8);
  v3[42] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DialogEngineOutput();
  v3[43] = v8;
  v3[44] = *(void *)(v8 - 8);
  v3[45] = swift_task_alloc();
  v3[46] = swift_task_alloc();
  return MEMORY[0x1F4188298](AceServiceInvokerImpl.publish(dialogEngineOutput:executionSource:), 0, 0);
}

uint64_t AceServiceInvokerImpl.publish(dialogEngineOutput:executionSource:)()
{
  v370 = v0;
  uint64_t v3 = v0;
  uint64_t v4 = v0[46];
  uint64_t v5 = v0[44];
  uint64_t v6 = v3[43];
  uint64_t v7 = *(void (**)(uint64_t, void, uint64_t))(v5 + 16);
  v7(v4, v3[15], v6);
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 88))(v4, v6);
  v368 = v3;
  if (v8 == *MEMORY[0x1E4FA1CB0])
  {
    uint64_t v9 = v3[46];
    uint64_t v11 = v3[41];
    uint64_t v10 = v3[42];
    uint64_t v12 = v3[40];
    (*(void (**)(uint64_t, void))(v3[44] + 96))(v9, v3[43]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v10, v9, v12);
    uint64_t v13 = TemplatingResult.sections.getter();
    unint64_t v14 = MEMORY[0x1E4FBC860];
    unint64_t v369 = MEMORY[0x1E4FBC860];
    id v15 = *(id *)(v13 + 16);
    if (v15)
    {
      unint64_t v16 = 0;
      uint64_t v17 = v3[28];
      id v355 = *(id *)(v13 + 16);
      v361 = (void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32);
      while (v16 < *(void *)(v13 + 16))
      {
        unint64_t v2 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
        unint64_t v1 = *(void *)(v17 + 72);
        (*(void (**)(void, unint64_t, void))(v17 + 16))(v3[39], v13 + v2 + v1 * v16, v3[27]);
        char v18 = TemplatingSection.spokenOnly.getter();
        uint64_t v19 = v3[39];
        if (v18)
        {
          uint64_t v20 = v3[38];
          uint64_t v21 = v3[27];
          uint64_t v22 = *v361;
          (*v361)(v20, v19, v21);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v14 + 16) + 1, 1);
            unint64_t v14 = v369;
          }
          unint64_t v24 = *(void *)(v14 + 16);
          unint64_t v23 = *(void *)(v14 + 24);
          if (v24 >= v23 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
            unint64_t v14 = v369;
          }
          uint64_t v25 = v368[38];
          uint64_t v26 = v368[27];
          *(void *)(v14 + 16) = v24 + 1;
          v22(v14 + v2 + v24 * v1, v25, v26);
          uint64_t v3 = v368;
          unint64_t v369 = v14;
          id v15 = v355;
        }
        else
        {
          (*(void (**)(void, void))(v17 + 8))(v3[39], v3[27]);
        }
        if (v15 == (id)++v16) {
          goto LABEL_25;
        }
      }
      __break(1u);
    }
    else
    {
LABEL_25:
      swift_bridgeObjectRelease();
      int64_t v40 = *(void *)(v14 + 16);
      if (v40)
      {
        uint64_t v41 = v3[28];
        unint64_t v42 = v14;
        uint64_t v43 = v3[25];
        unint64_t v369 = MEMORY[0x1E4FBC860];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40, 0);
        Class v44 = *(void (**)(uint64_t, unint64_t, uint64_t))(v41 + 16);
        v41 += 16;
        v356 = v44;
        unint64_t v45 = v42 + ((*(unsigned __int8 *)(v41 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 64));
        v347 = (void (**)(uint64_t, uint64_t))(v43 + 8);
        uint64_t v351 = *(void *)(v41 + 56);
        v345 = (void (**)(uint64_t, uint64_t))(v41 - 8);
        unint64_t v46 = v369;
        do
        {
          uint64_t v47 = v3[37];
          uint64_t v48 = v3[26];
          uint64_t v49 = v3[27];
          uint64_t v50 = v3[24];
          v356(v47, v45, v49);
          TemplatingSection.content.getter();
          uint64_t v51 = TemplatingText.text.getter();
          uint64_t v53 = v52;
          (*v347)(v48, v50);
          (*v345)(v47, v49);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v46 + 16) + 1, 1);
            unint64_t v46 = v369;
          }
          unint64_t v55 = *(void *)(v46 + 16);
          unint64_t v54 = *(void *)(v46 + 24);
          if (v55 >= v54 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v54 > 1, v55 + 1, 1);
            unint64_t v46 = v369;
          }
          *(void *)(v46 + 16) = v55 + 1;
          unint64_t v56 = v46 + 16 * v55;
          *(void *)(v56 + 32) = v51;
          *(void *)(v56 + 40) = v53;
          v45 += v351;
          --v40;
          uint64_t v3 = v368;
        }
        while (v40);
        swift_release();
      }
      else
      {
        swift_release();
        unint64_t v46 = MEMORY[0x1E4FBC860];
      }
      unint64_t v16 = v3[42];
      v3[11] = v46;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
      uint64_t v66 = BidirectionalCollection<>.joined(separator:)();
      v342 = v67;
      uint64_t v343 = v66;
      swift_bridgeObjectRelease();
      uint64_t v68 = TemplatingResult.sections.getter();
      unint64_t v369 = MEMORY[0x1E4FBC860];
      unint64_t v2 = *(void *)(v68 + 16);
      if (!v2)
      {
        unint64_t v70 = MEMORY[0x1E4FBC860];
LABEL_55:
        swift_bridgeObjectRelease();
        int64_t v83 = *(void *)(v70 + 16);
        if (v83)
        {
          uint64_t v84 = v3[28];
          uint64_t v85 = v3[25];
          unint64_t v369 = MEMORY[0x1E4FBC860];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v83, 0);
          uint64_t v86 = *(void (**)(uint64_t, unint64_t, uint64_t))(v84 + 16);
          v84 += 16;
          unint64_t v87 = v70 + ((*(unsigned __int8 *)(v84 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 64));
          uint64_t v352 = *(void *)(v84 + 56);
          v358 = v86;
          v348 = (void (**)(uint64_t, uint64_t))(v85 + 8);
          v346 = (void (**)(uint64_t, uint64_t))(v84 - 8);
          do
          {
            unint64_t v88 = v70;
            uint64_t v89 = v3[37];
            uint64_t v91 = v3[26];
            uint64_t v90 = v3[27];
            uint64_t v92 = v3[24];
            v358(v89, v87, v90);
            TemplatingSection.content.getter();
            uint64_t v93 = TemplatingText.text.getter();
            uint64_t v95 = v94;
            (*v348)(v91, v92);
            (*v346)(v89, v90);
            unint64_t v96 = v369;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v369 + 16) + 1, 1);
              unint64_t v96 = v369;
            }
            unint64_t v98 = *(void *)(v96 + 16);
            unint64_t v97 = *(void *)(v96 + 24);
            unint64_t v2 = v98 + 1;
            unint64_t v70 = v88;
            if (v98 >= v97 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v97 > 1, v98 + 1, 1);
              unint64_t v96 = v369;
            }
            *(void *)(v96 + 16) = v2;
            unint64_t v99 = v96 + 16 * v98;
            *(void *)(v99 + 32) = v93;
            *(void *)(v99 + 40) = v95;
            v87 += v352;
            --v83;
            uint64_t v3 = v368;
          }
          while (v83);
          swift_release();
          unint64_t v16 = MEMORY[0x1E4FBC860];
        }
        else
        {
          swift_release();
          unint64_t v96 = MEMORY[0x1E4FBC860];
          unint64_t v16 = MEMORY[0x1E4FBC860];
        }
        v3[12] = v96;
        v345 = (void (**)(uint64_t, uint64_t))BidirectionalCollection<>.joined(separator:)();
        uint64_t v341 = v100;
        swift_bridgeObjectRelease();
        uint64_t v101 = TemplatingResult.sections.getter();
        unint64_t v369 = v16;
        id v102 = *(id *)(v101 + 16);
        if (!v102)
        {
          unint64_t v104 = v16;
LABEL_76:
          swift_bridgeObjectRelease();
          int64_t v114 = *(void *)(v104 + 16);
          if (v114)
          {
            uint64_t v115 = v3[28];
            uint64_t v116 = v3[25];
            unint64_t v369 = MEMORY[0x1E4FBC860];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v114, 0);
            uint64_t v117 = *(void (**)(void, unint64_t, void))(v115 + 16);
            v115 += 16;
            v359 = v117;
            unint64_t v118 = v104
                 + ((*(unsigned __int8 *)(v115 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v115 + 64));
            uint64_t v119 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v116 + 48);
            v349 = (void (**)(uint64_t, uint64_t))(v116 + 8);
            uint64_t v353 = *(void *)(v115 + 56);
            unint64_t v120 = (void (**)(void, void))(v115 - 8);
            do
            {
              uint64_t v121 = v368[23];
              uint64_t v122 = v368[24];
              v359(v368[32], v118, v368[27]);
              TemplatingSection.redactedContent.getter();
              if ((*v119)(v121, 1, v122) == 1)
              {
                outlined destroy of ReferenceResolutionClientProtocol?(v368[23], &demangling cache variable for type metadata for TemplatingText?);
                unint64_t v2 = 0;
                unint64_t v123 = 0xE000000000000000;
              }
              else
              {
                uint64_t v124 = v368[23];
                uint64_t v125 = v368[24];
                unint64_t v2 = TemplatingText.text.getter();
                unint64_t v123 = v126;
                (*v349)(v124, v125);
              }
              (*v120)(v368[32], v368[27]);
              unint64_t v127 = v369;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v369 + 16) + 1, 1);
                unint64_t v127 = v369;
              }
              unint64_t v129 = *(void *)(v127 + 16);
              unint64_t v128 = *(void *)(v127 + 24);
              if (v129 >= v128 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v128 > 1, v129 + 1, 1);
                unint64_t v127 = v369;
              }
              *(void *)(v127 + 16) = v129 + 1;
              unint64_t v130 = v127 + 16 * v129;
              *(void *)(v130 + 32) = v2;
              *(void *)(v130 + 40) = v123;
              v118 += v353;
              --v114;
            }
            while (v114);
            swift_release();
            unint64_t v131 = MEMORY[0x1E4FBC860];
          }
          else
          {
            swift_release();
            unint64_t v127 = MEMORY[0x1E4FBC860];
            unint64_t v131 = MEMORY[0x1E4FBC860];
          }
          unint64_t v16 = (unint64_t)v368;
          v368[13] = v127;
          uint64_t v132 = BidirectionalCollection<>.joined(separator:)();
          v339 = v133;
          uint64_t v340 = v132;
          swift_bridgeObjectRelease();
          uint64_t v134 = TemplatingResult.sections.getter();
          unint64_t v369 = v131;
          uint64_t v135 = *(void *)(v134 + 16);
          if (!v135)
          {
LABEL_99:
            swift_bridgeObjectRelease();
            int64_t v144 = *(void *)(v131 + 16);
            if (v144)
            {
              uint64_t v145 = v368[28];
              uint64_t v146 = v368[25];
              unint64_t v369 = MEMORY[0x1E4FBC860];
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v144, 0);
              v147 = *(void (**)(void, unint64_t, void))(v145 + 16);
              v145 += 16;
              v360 = v147;
              unint64_t v148 = v131
                   + ((*(unsigned __int8 *)(v145 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v145 + 64));
              v149 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v146 + 48);
              v350 = (void (**)(uint64_t, uint64_t))(v146 + 8);
              uint64_t v354 = *(void *)(v145 + 56);
              uint64_t v150 = (void (**)(void, void))(v145 - 8);
              do
              {
                uint64_t v151 = v368[24];
                uint64_t v152 = v368[22];
                v360(v368[29], v148, v368[27]);
                TemplatingSection.redactedContent.getter();
                if ((*v149)(v152, 1, v151) == 1)
                {
                  outlined destroy of ReferenceResolutionClientProtocol?(v368[22], &demangling cache variable for type metadata for TemplatingText?);
                  uint64_t v153 = 0;
                  unint64_t v154 = 0xE000000000000000;
                }
                else
                {
                  uint64_t v155 = v368[24];
                  uint64_t v156 = v368[22];
                  uint64_t v153 = TemplatingText.text.getter();
                  unint64_t v154 = v157;
                  (*v350)(v156, v155);
                }
                (*v150)(v368[29], v368[27]);
                unint64_t v158 = v369;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v369 + 16) + 1, 1);
                  unint64_t v158 = v369;
                }
                unint64_t v160 = *(void *)(v158 + 16);
                unint64_t v159 = *(void *)(v158 + 24);
                if (v160 >= v159 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v159 > 1, v160 + 1, 1);
                  unint64_t v158 = v369;
                }
                *(void *)(v158 + 16) = v160 + 1;
                unint64_t v161 = v158 + 16 * v160;
                *(void *)(v161 + 32) = v153;
                *(void *)(v161 + 40) = v154;
                v148 += v354;
                --v144;
              }
              while (v144);
              swift_release();
            }
            else
            {
              swift_release();
              unint64_t v158 = MEMORY[0x1E4FBC860];
            }
            uint64_t v163 = v368[41];
            uint64_t v162 = v368[42];
            uint64_t v164 = v368[40];
            v368[14] = v158;
            long long v165 = (void *)BidirectionalCollection<>.joined(separator:)();
            uint64_t v167 = v166;
            uint64_t v3 = v368;
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, uint64_t))(v163 + 8))(v162, v164);
            goto LABEL_254;
          }
          unint64_t v136 = 0;
          unint64_t v1 = v368[28];
          uint64_t v3 = (void *)(v1 + 16);
          id v355 = (id)(v1 + 16);
          v364 = (void (**)(unint64_t, uint64_t, uint64_t))(v1 + 32);
          while (v136 < *(void *)(v134 + 16))
          {
            unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
            unint64_t v16 = *(void *)(v1 + 72);
            (*(void (**)(void, unint64_t, void))(v1 + 16))(v368[31], v134 + v2 + v16 * v136, v368[27]);
            if (TemplatingSection.spokenOnly.getter())
            {
              (*(void (**)(void, void))(v1 + 8))(v368[31], v368[27]);
            }
            else
            {
              uint64_t v137 = v135;
              uint64_t v138 = *v364;
              (*v364)(v368[30], v368[31], v368[27]);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v131 + 16) + 1, 1);
                unint64_t v131 = v369;
              }
              unint64_t v140 = *(void *)(v131 + 16);
              unint64_t v139 = *(void *)(v131 + 24);
              unint64_t v141 = v131;
              if (v140 >= v139 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v139 > 1, v140 + 1, 1);
                unint64_t v141 = v369;
              }
              uint64_t v142 = v368[30];
              uint64_t v143 = v368[27];
              *(void *)(v141 + 16) = v140 + 1;
              v138(v141 + v2 + v140 * v16, v142, v143);
              unint64_t v369 = v141;
              unint64_t v131 = v141;
              uint64_t v135 = v137;
              uint64_t v3 = (void *)(v1 + 16);
            }
            if (v135 == ++v136) {
              goto LABEL_99;
            }
          }
          goto LABEL_124;
        }
        unint64_t v103 = 0;
        unint64_t v1 = v3[28];
        v363 = (void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32);
        unint64_t v104 = MEMORY[0x1E4FBC860];
        id v355 = *(id *)(v101 + 16);
        while (v103 < *(void *)(v101 + 16))
        {
          unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
          unint64_t v16 = *(void *)(v1 + 72);
          (*(void (**)(void, unint64_t, void))(v1 + 16))(v3[34], v101 + v2 + v16 * v103, v3[27]);
          char v105 = TemplatingSection.spokenOnly.getter();
          uint64_t v106 = v3[34];
          if (v105)
          {
            uint64_t v107 = v3[33];
            uint64_t v108 = v3[27];
            unint64_t v109 = *v363;
            (*v363)(v107, v106, v108);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v104 + 16) + 1, 1);
              unint64_t v104 = v369;
            }
            unint64_t v111 = *(void *)(v104 + 16);
            unint64_t v110 = *(void *)(v104 + 24);
            if (v111 >= v110 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v110 > 1, v111 + 1, 1);
              unint64_t v104 = v369;
            }
            uint64_t v112 = v368[33];
            uint64_t v113 = v368[27];
            *(void *)(v104 + 16) = v111 + 1;
            v109(v104 + v2 + v111 * v16, v112, v113);
            uint64_t v3 = v368;
            unint64_t v369 = v104;
            id v102 = v355;
          }
          else
          {
            (*(void (**)(void, void))(v1 + 8))(v3[34], v3[27]);
          }
          if (v102 == (id)++v103) {
            goto LABEL_76;
          }
        }
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
        goto LABEL_125;
      }
      unint64_t v69 = 0;
      unint64_t v1 = v3[28];
      v362 = (void (**)(unint64_t, uint64_t, uint64_t))(v1 + 32);
      unint64_t v70 = MEMORY[0x1E4FBC860];
      id v355 = (id)(v1 + 16);
      while (v69 < *(void *)(v68 + 16))
      {
        uint64_t v71 = v3[36];
        uint64_t v72 = v3[27];
        unint64_t v16 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
        unint64_t v73 = v3;
        uint64_t v74 = *(void *)(v1 + 72);
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v1 + 16))(v71, v68 + v16 + v74 * v69, v72);
        if (TemplatingSection.spokenOnly.getter())
        {
          (*(void (**)(void, void))(v1 + 8))(v73[36], v73[27]);
          uint64_t v3 = v73;
        }
        else
        {
          unint64_t v75 = v2;
          os_log_type_t v76 = *v362;
          (*v362)(v73[35], v73[36], v73[27]);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v70 + 16) + 1, 1);
            unint64_t v70 = v369;
          }
          unint64_t v78 = *(void *)(v70 + 16);
          unint64_t v77 = *(void *)(v70 + 24);
          unint64_t v79 = v70;
          if (v78 >= v77 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v77 > 1, v78 + 1, 1);
            unint64_t v79 = v369;
          }
          uint64_t v80 = v368[35];
          uint64_t v81 = v368[27];
          *(void *)(v79 + 16) = v78 + 1;
          unint64_t v82 = v79 + v16 + v78 * v74;
          uint64_t v3 = v368;
          v76(v82, v80, v81);
          unint64_t v369 = v79;
          unint64_t v70 = v79;
          unint64_t v2 = v75;
        }
        if (v2 == ++v69) {
          goto LABEL_55;
        }
      }
    }
    __break(1u);
    goto LABEL_123;
  }
  if (v8 == *MEMORY[0x1E4FA1CC0])
  {
    unint64_t v27 = (id *)v3[46];
    (*(void (**)(id *, void))(v3[44] + 96))(v27, v3[43]);
    id v355 = *v27;
    id v28 = objc_msgSend(*v27, sel_dialog);
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for PatternExecutionDialog);
    unint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!(v16 >> 62))
    {
      uint64_t v29 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v29)
      {
LABEL_126:
        swift_bridgeObjectRelease();
        unint64_t v31 = MEMORY[0x1E4FBC860];
        goto LABEL_127;
      }
LABEL_16:
      unint64_t v369 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29 & ~(v29 >> 63), 0);
      if (v29 < 0)
      {
        __break(1u);
        goto LABEL_176;
      }
      uint64_t v30 = 0;
      unint64_t v31 = v369;
      do
      {
        if ((v16 & 0xC000000000000001) != 0) {
          id v32 = (id)MEMORY[0x1BA9E3990](v30, v16);
        }
        else {
          id v32 = *(id *)(v16 + 8 * v30 + 32);
        }
        uint64_t v33 = v32;
        id v34 = objc_msgSend(v32, sel_unfilteredFullSpeak);
        uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v2 = v36;

        unint64_t v369 = v31;
        unint64_t v38 = *(void *)(v31 + 16);
        unint64_t v37 = *(void *)(v31 + 24);
        if (v38 >= v37 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
          unint64_t v31 = v369;
        }
        ++v30;
        *(void *)(v31 + 16) = v38 + 1;
        unint64_t v39 = v31 + 16 * v38;
        *(void *)(v39 + 32) = v35;
        *(void *)(v39 + 40) = v2;
      }
      while (v29 != v30);
      swift_bridgeObjectRelease();
      uint64_t v3 = v368;
LABEL_127:
      v3[7] = v31;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      unint64_t v1 = lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
      uint64_t v187 = BidirectionalCollection<>.joined(separator:)();
      v342 = v188;
      uint64_t v343 = v187;
      swift_bridgeObjectRelease();
      id v189 = objc_msgSend(v355, sel_dialog);
      unint64_t v190 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v344 = v1;
      if (v190 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v191 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v191)
        {
LABEL_129:
          unint64_t v369 = MEMORY[0x1E4FBC860];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v191 & ~(v191 >> 63), 0);
          if ((v191 & 0x8000000000000000) == 0)
          {
            unint64_t v2 = 0;
            unint64_t v192 = v369;
            do
            {
              if ((v190 & 0xC000000000000001) != 0) {
                id v193 = (id)MEMORY[0x1BA9E3990](v2, v190);
              }
              else {
                id v193 = *(id *)(v190 + 8 * v2 + 32);
              }
              v194 = v193;
              id v195 = objc_msgSend(v193, sel_unfilteredFullPrint);
              uint64_t v196 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v198 = v197;

              unint64_t v369 = v192;
              unint64_t v200 = *(void *)(v192 + 16);
              unint64_t v199 = *(void *)(v192 + 24);
              if (v200 >= v199 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v199 > 1, v200 + 1, 1);
                unint64_t v192 = v369;
              }
              ++v2;
              *(void *)(v192 + 16) = v200 + 1;
              unint64_t v201 = v192 + 16 * v200;
              *(void *)(v201 + 32) = v196;
              *(void *)(v201 + 40) = v198;
            }
            while (v191 != v2);
            swift_bridgeObjectRelease();
            uint64_t v3 = v368;
            unint64_t v1 = v344;
LABEL_140:
            v3[8] = v192;
            v345 = (void (**)(uint64_t, uint64_t))BidirectionalCollection<>.joined(separator:)();
            uint64_t v341 = v202;
            swift_bridgeObjectRelease();
            id v203 = objc_msgSend(v355, sel_dialog);
            unint64_t v204 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            if (v204 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v205 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v205)
              {
LABEL_142:
                unint64_t v369 = MEMORY[0x1E4FBC860];
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v205 & ~(v205 >> 63), 0);
                if ((v205 & 0x8000000000000000) == 0)
                {
                  uint64_t v206 = 0;
                  unint64_t v207 = v369;
                  unint64_t v365 = v204 & 0xC000000000000001;
                  unint64_t v208 = v204;
                  uint64_t v209 = v205;
                  do
                  {
                    if (v365) {
                      id v210 = (id)MEMORY[0x1BA9E3990](v206, v204);
                    }
                    else {
                      id v210 = *(id *)(v204 + 8 * v206 + 32);
                    }
                    v211 = v210;
                    id v212 = objc_msgSend(v210, sel_redactedFullSpeak);
                    uint64_t v213 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    unint64_t v215 = v214;

                    swift_bridgeObjectRelease();
                    uint64_t v216 = HIBYTE(v215) & 0xF;
                    if ((v215 & 0x2000000000000000) == 0) {
                      uint64_t v216 = v213 & 0xFFFFFFFFFFFFLL;
                    }
                    BOOL v217 = v216 == 0;
                    v218 = &selRef_redactedSupportingSpeak;
                    if (!v217) {
                      v218 = &selRef_redactedFullSpeak;
                    }
                    id v219 = [v211 *v218];
                    uint64_t v220 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    uint64_t v222 = v221;

                    unint64_t v369 = v207;
                    unint64_t v224 = *(void *)(v207 + 16);
                    unint64_t v223 = *(void *)(v207 + 24);
                    if (v224 >= v223 >> 1)
                    {
                      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v223 > 1, v224 + 1, 1);
                      unint64_t v207 = v369;
                    }
                    ++v206;
                    *(void *)(v207 + 16) = v224 + 1;
                    unint64_t v225 = v207 + 16 * v224;
                    *(void *)(v225 + 32) = v220;
                    *(void *)(v225 + 40) = v222;
                    unint64_t v204 = v208;
                  }
                  while (v209 != v206);
                  swift_bridgeObjectRelease();
                  uint64_t v3 = v368;
                  unint64_t v1 = v344;
LABEL_157:
                  v3[9] = v207;
                  uint64_t v226 = BidirectionalCollection<>.joined(separator:)();
                  v228 = v227;
                  swift_bridgeObjectRelease();
                  id v229 = objc_msgSend(v355, sel_dialog);
                  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

                  v339 = v228;
                  uint64_t v340 = v226;
                  if (v2 >> 62)
                  {
                    swift_bridgeObjectRetain();
                    uint64_t v230 = _CocoaArrayWrapper.endIndex.getter();
                    swift_bridgeObjectRelease();
                    if (v230)
                    {
LABEL_159:
                      unint64_t v369 = MEMORY[0x1E4FBC860];
                      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v230 & ~(v230 >> 63), 0);
                      uint64_t v366 = v230;
                      if ((v230 & 0x8000000000000000) == 0)
                      {
                        uint64_t v231 = 0;
                        unint64_t v232 = v369;
                        unint64_t v233 = v2;
                        unint64_t v234 = v2 & 0xC000000000000001;
                        do
                        {
                          if (v234) {
                            id v235 = (id)MEMORY[0x1BA9E3990](v231, v233);
                          }
                          else {
                            id v235 = *(id *)(v233 + 8 * v231 + 32);
                          }
                          v236 = v235;
                          id v237 = objc_msgSend(v235, sel_redactedFullPrint);
                          uint64_t v238 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                          unint64_t v240 = v239;

                          swift_bridgeObjectRelease();
                          uint64_t v241 = HIBYTE(v240) & 0xF;
                          if ((v240 & 0x2000000000000000) == 0) {
                            uint64_t v241 = v238 & 0xFFFFFFFFFFFFLL;
                          }
                          BOOL v217 = v241 == 0;
                          v242 = &selRef_redactedSupportingPrint;
                          if (!v217) {
                            v242 = &selRef_redactedFullPrint;
                          }
                          id v243 = [v236 *v242];
                          uint64_t v244 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                          uint64_t v246 = v245;

                          unint64_t v369 = v232;
                          unint64_t v248 = *(void *)(v232 + 16);
                          unint64_t v247 = *(void *)(v232 + 24);
                          if (v248 >= v247 >> 1)
                          {
                            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v247 > 1, v248 + 1, 1);
                            unint64_t v232 = v369;
                          }
                          ++v231;
                          *(void *)(v232 + 16) = v248 + 1;
                          unint64_t v249 = v232 + 16 * v248;
                          *(void *)(v249 + 32) = v244;
                          *(void *)(v249 + 40) = v246;
                        }
                        while (v366 != v231);
                        swift_bridgeObjectRelease();
                        uint64_t v3 = v368;
                        goto LABEL_174;
                      }
                      goto LABEL_178;
                    }
                  }
                  else
                  {
                    uint64_t v230 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
                    if (v230) {
                      goto LABEL_159;
                    }
                  }
                  swift_bridgeObjectRelease();
                  unint64_t v232 = MEMORY[0x1E4FBC860];
LABEL_174:
                  v3[10] = v232;
                  long long v165 = (void *)BidirectionalCollection<>.joined(separator:)();
                  uint64_t v167 = v250;

LABEL_253:
                  swift_bridgeObjectRelease();
LABEL_254:
                  uint64_t v331 = v3[21];
                  uint64_t v332 = v3[18];
                  uint64_t v333 = v3[17];
                  uint64_t v335 = *(void *)(v333 + 40);
                  uint64_t v334 = *(void *)(v333 + 48);
                  (*(void (**)(uint64_t, void, void))(v3[20] + 16))(v331, v3[16], v3[19]);
                  uint64_t v336 = type metadata accessor for FlowOutputMessage.InAppResponse();
                  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v336 - 8) + 56))(v332, 1, 1, v336);
                  objc_allocWithZone((Class)type metadata accessor for ExecutionOutput());
                  swift_bridgeObjectRetain();
                  id v337 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:executionSource:inAppResponse:)(0, 0, (uint64_t)v345, v341, v343, v342, v165, v167, v340, v339, v335, v334, v331, v332);
                  v3[47] = v337;
                  v338 = (void *)swift_task_alloc();
                  v3[48] = v338;
                  void *v338 = v3;
                  v338[1] = AceServiceInvokerImpl.publish(dialogEngineOutput:executionSource:);
                  return AceServiceInvokerImpl.publish(executionOutput:)((uint64_t)v337);
                }
LABEL_177:
                __break(1u);
LABEL_178:
                __break(1u);
                goto LABEL_179;
              }
            }
            else
            {
              uint64_t v205 = *(void *)((v204 & 0xFFFFFFFFFFFFFF8) + 0x10);
              if (v205) {
                goto LABEL_142;
              }
            }
            swift_bridgeObjectRelease();
            unint64_t v207 = MEMORY[0x1E4FBC860];
            goto LABEL_157;
          }
LABEL_176:
          __break(1u);
          goto LABEL_177;
        }
      }
      else
      {
        uint64_t v191 = *(void *)((v190 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v191) {
          goto LABEL_129;
        }
      }
      swift_bridgeObjectRelease();
      unint64_t v192 = MEMORY[0x1E4FBC860];
      goto LABEL_140;
    }
LABEL_125:
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v29) {
      goto LABEL_126;
    }
    goto LABEL_16;
  }
  if (v8 == *MEMORY[0x1E4FA1CB8])
  {
    v345 = (void (**)(uint64_t, uint64_t))(v3 + 3);
    uint64_t v57 = (unint64_t *)v3[46];
    (*(void (**)(unint64_t *, void))(v3[44] + 96))(v57, v3[43]);
    unint64_t v1 = *v57;
    unint64_t v2 = MEMORY[0x1E4FBC860];
    unint64_t v369 = MEMORY[0x1E4FBC860];
    if (!(v1 >> 62))
    {
      uint64_t v58 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      unint64_t v357 = v1;
      if (!v58)
      {
LABEL_180:
        swift_bridgeObjectRelease();
        unint64_t v185 = MEMORY[0x1E4FBC860];
        goto LABEL_181;
      }
LABEL_36:
      if (v58 < 1)
      {
        __break(1u);
        goto LABEL_258;
      }
      uint64_t v60 = 0;
      unint64_t v61 = v1 & 0xC000000000000001;
      do
      {
        if (v61) {
          id v62 = (id)MEMORY[0x1BA9E3990](v60, v357);
        }
        else {
          id v62 = *(id *)(v357 + 8 * v60 + 32);
        }
        uint64_t v63 = v62;
        ++v60;
        id v64 = objc_msgSend(v62, sel_dialog);
        type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for DialogElement);
        unint64_t v65 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        specialized Array.append<A>(contentsOf:)(v65);
      }
      while (v58 != v60);
      unint64_t v1 = v357;
      swift_bridgeObjectRelease();
      unint64_t v185 = v369;
LABEL_181:
      uint64_t v367 = v58;
      if (v185 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v251 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v251)
        {
LABEL_183:
          unint64_t v369 = v2;
          uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v251 & ~(v251 >> 63), 0);
          if ((v251 & 0x8000000000000000) == 0)
          {
            uint64_t v252 = 0;
            unint64_t v253 = v369;
            do
            {
              id v254 = *(id *)(v185 + 8 * v252 + 32);
              id v255 = objc_msgSend(v254, sel_unfilteredFullSpeak);
              uint64_t v256 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v258 = v257;

              unint64_t v369 = v253;
              unint64_t v260 = *(void *)(v253 + 16);
              unint64_t v259 = *(void *)(v253 + 24);
              if (v260 >= v259 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v259 > 1, v260 + 1, 1);
                unint64_t v253 = v369;
              }
              ++v252;
              *(void *)(v253 + 16) = v260 + 1;
              unint64_t v261 = v253 + 16 * v260;
              *(void *)(v261 + 32) = v256;
              *(void *)(v261 + 40) = v258;
            }
            while (v251 != v252);
            swift_bridgeObjectRelease();
            uint64_t v58 = v367;
            uint64_t v3 = v368;
            unint64_t v2 = MEMORY[0x1E4FBC860];
            unint64_t v1 = v357;
            goto LABEL_191;
          }
LABEL_258:
          __break(1u);
          goto LABEL_259;
        }
      }
      else
      {
        uint64_t v251 = *(void *)((v185 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v251) {
          goto LABEL_183;
        }
      }
      swift_bridgeObjectRelease();
      unint64_t v253 = MEMORY[0x1E4FBC860];
LABEL_191:
      *v345 = (void (*)(uint64_t, uint64_t))v253;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
      uint64_t v262 = BidirectionalCollection<>.joined(separator:)();
      v342 = v263;
      uint64_t v343 = v262;
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v369 = v2;
      if (!v58)
      {
        unint64_t v269 = v2;
        if (!(v2 >> 62)) {
          goto LABEL_199;
        }
        goto LABEL_207;
      }
      if (v58 >= 1)
      {
        swift_bridgeObjectRetain();
        uint64_t v264 = 0;
        do
        {
          if ((v1 & 0xC000000000000001) != 0) {
            id v265 = (id)MEMORY[0x1BA9E3990](v264, v1);
          }
          else {
            id v265 = *(id *)(v1 + 8 * v264 + 32);
          }
          v266 = v265;
          ++v264;
          id v267 = objc_msgSend(v265, sel_dialog);
          type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for DialogElement);
          unint64_t v268 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          specialized Array.append<A>(contentsOf:)(v268);
        }
        while (v367 != v264);
        swift_bridgeObjectRelease();
        unint64_t v269 = v369;
        if (!(v369 >> 62))
        {
LABEL_199:
          uint64_t v270 = *(void *)((v269 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v270) {
            goto LABEL_200;
          }
          goto LABEL_208;
        }
LABEL_207:
        swift_bridgeObjectRetain();
        uint64_t v270 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v270)
        {
LABEL_200:
          unint64_t v369 = v2;
          uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v270 & ~(v270 >> 63), 0);
          if ((v270 & 0x8000000000000000) == 0)
          {
            uint64_t v271 = 0;
            unint64_t v272 = v369;
            do
            {
              id v273 = *(id *)(v269 + 8 * v271 + 32);
              id v274 = objc_msgSend(v273, sel_unfilteredFullPrint);
              uint64_t v275 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v277 = v276;

              unint64_t v369 = v272;
              unint64_t v279 = *(void *)(v272 + 16);
              unint64_t v278 = *(void *)(v272 + 24);
              if (v279 >= v278 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v278 > 1, v279 + 1, 1);
                unint64_t v272 = v369;
              }
              ++v271;
              *(void *)(v272 + 16) = v279 + 1;
              unint64_t v280 = v272 + 16 * v279;
              *(void *)(v280 + 32) = v275;
              *(void *)(v280 + 40) = v277;
            }
            while (v270 != v271);
            swift_bridgeObjectRelease();
            uint64_t v3 = v368;
            unint64_t v2 = MEMORY[0x1E4FBC860];
            unint64_t v1 = v357;
            goto LABEL_209;
          }
LABEL_260:
          __break(1u);
          goto LABEL_261;
        }
LABEL_208:
        swift_bridgeObjectRelease();
        unint64_t v272 = MEMORY[0x1E4FBC860];
LABEL_209:
        v3[4] = v272;
        v345 = (void (**)(uint64_t, uint64_t))BidirectionalCollection<>.joined(separator:)();
        uint64_t v341 = v281;
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v369 = v2;
        if (!v367)
        {
          unint64_t v287 = v2;
          if (!(v2 >> 62)) {
            goto LABEL_217;
          }
          goto LABEL_229;
        }
        if (v367 >= 1)
        {
          swift_bridgeObjectRetain();
          uint64_t v282 = 0;
          do
          {
            if ((v1 & 0xC000000000000001) != 0) {
              id v283 = (id)MEMORY[0x1BA9E3990](v282, v1);
            }
            else {
              id v283 = *(id *)(v1 + 8 * v282 + 32);
            }
            v284 = v283;
            ++v282;
            id v285 = objc_msgSend(v283, sel_dialog);
            type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for DialogElement);
            unint64_t v286 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            specialized Array.append<A>(contentsOf:)(v286);
          }
          while (v367 != v282);
          swift_bridgeObjectRelease();
          unint64_t v287 = v369;
          if (!(v369 >> 62))
          {
LABEL_217:
            uint64_t v288 = *(void *)((v287 & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (v288) {
              goto LABEL_218;
            }
            goto LABEL_230;
          }
LABEL_229:
          swift_bridgeObjectRetain();
          uint64_t v288 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v288)
          {
LABEL_218:
            unint64_t v369 = v2;
            uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v288 & ~(v288 >> 63), 0);
            if ((v288 & 0x8000000000000000) == 0)
            {
              uint64_t v289 = 0;
              unint64_t v290 = v369;
              do
              {
                id v291 = *(id *)(v287 + 8 * v289 + 32);
                id v292 = objc_msgSend(v291, sel_unfilteredRedactedFullSpeak);
                uint64_t v293 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v295 = v294;

                swift_bridgeObjectRelease();
                uint64_t v296 = HIBYTE(v295) & 0xF;
                if ((v295 & 0x2000000000000000) == 0) {
                  uint64_t v296 = v293 & 0xFFFFFFFFFFFFLL;
                }
                BOOL v217 = v296 == 0;
                v297 = &selRef_redactedSupportingSpeak;
                if (!v217) {
                  v297 = &selRef_unfilteredRedactedFullSpeak;
                }
                id v298 = [v291 *v297];
                uint64_t v299 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v301 = v300;

                unint64_t v369 = v290;
                unint64_t v303 = *(void *)(v290 + 16);
                unint64_t v302 = *(void *)(v290 + 24);
                if (v303 >= v302 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v302 > 1, v303 + 1, 1);
                  unint64_t v290 = v369;
                }
                ++v289;
                *(void *)(v290 + 16) = v303 + 1;
                unint64_t v304 = v290 + 16 * v303;
                *(void *)(v304 + 32) = v299;
                *(void *)(v304 + 40) = v301;
              }
              while (v288 != v289);
              swift_bridgeObjectRelease();
              uint64_t v3 = v368;
              unint64_t v2 = MEMORY[0x1E4FBC860];
LABEL_231:
              v3[5] = v290;
              uint64_t v305 = BidirectionalCollection<>.joined(separator:)();
              v339 = v306;
              swift_bridgeObjectRelease();
              unint64_t v369 = v2;
              uint64_t v340 = v305;
              if (v367)
              {
                swift_bridgeObjectRetain();
                uint64_t v307 = 0;
                do
                {
                  if ((v357 & 0xC000000000000001) != 0) {
                    id v308 = (id)MEMORY[0x1BA9E3990](v307, v357);
                  }
                  else {
                    id v308 = *(id *)(v357 + 8 * v307 + 32);
                  }
                  v309 = v308;
                  ++v307;
                  id v310 = objc_msgSend(v308, sel_dialog);
                  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for DialogElement);
                  unint64_t v311 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

                  specialized Array.append<A>(contentsOf:)(v311);
                }
                while (v367 != v307);
                swift_bridgeObjectRelease_n();
                unint64_t v312 = v369;
                if (!(v369 >> 62))
                {
LABEL_238:
                  uint64_t v313 = *(void *)((v312 & 0xFFFFFFFFFFFFFF8) + 0x10);
                  if (v313) {
                    goto LABEL_239;
                  }
                  goto LABEL_251;
                }
              }
              else
              {
                swift_bridgeObjectRelease();
                unint64_t v312 = MEMORY[0x1E4FBC860];
                if (!(MEMORY[0x1E4FBC860] >> 62)) {
                  goto LABEL_238;
                }
              }
              swift_bridgeObjectRetain();
              uint64_t v313 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v313)
              {
LABEL_239:
                unint64_t v369 = v2;
                uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v313 & ~(v313 >> 63), 0);
                if ((v313 & 0x8000000000000000) == 0)
                {
                  uint64_t v314 = 0;
                  unint64_t v315 = v369;
                  do
                  {
                    id v316 = *(id *)(v312 + 8 * v314 + 32);
                    id v317 = objc_msgSend(v316, sel_unfilteredRedactedFullPrint);
                    uint64_t v318 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    unint64_t v320 = v319;

                    swift_bridgeObjectRelease();
                    uint64_t v321 = HIBYTE(v320) & 0xF;
                    if ((v320 & 0x2000000000000000) == 0) {
                      uint64_t v321 = v318 & 0xFFFFFFFFFFFFLL;
                    }
                    BOOL v217 = v321 == 0;
                    v322 = &selRef_redactedSupportingPrint;
                    if (!v217) {
                      v322 = &selRef_unfilteredRedactedFullPrint;
                    }
                    id v323 = [v316 *v322];
                    uint64_t v324 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    uint64_t v326 = v325;

                    unint64_t v369 = v315;
                    unint64_t v328 = *(void *)(v315 + 16);
                    unint64_t v327 = *(void *)(v315 + 24);
                    if (v328 >= v327 >> 1)
                    {
                      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v327 > 1, v328 + 1, 1);
                      unint64_t v315 = v369;
                    }
                    ++v314;
                    *(void *)(v315 + 16) = v328 + 1;
                    unint64_t v329 = v315 + 16 * v328;
                    *(void *)(v329 + 32) = v324;
                    *(void *)(v329 + 40) = v326;
                  }
                  while (v313 != v314);
                  swift_bridgeObjectRelease();
                  uint64_t v3 = v368;
                  goto LABEL_252;
                }
LABEL_263:
                __break(1u);
                return result;
              }
LABEL_251:
              swift_bridgeObjectRelease();
              unint64_t v315 = MEMORY[0x1E4FBC860];
LABEL_252:
              v3[6] = v315;
              long long v165 = (void *)BidirectionalCollection<>.joined(separator:)();
              uint64_t v167 = v330;
              goto LABEL_253;
            }
LABEL_262:
            __break(1u);
            __break(1u);
            goto LABEL_263;
          }
LABEL_230:
          swift_bridgeObjectRelease();
          unint64_t v290 = MEMORY[0x1E4FBC860];
          goto LABEL_231;
        }
LABEL_261:
        __break(1u);
        goto LABEL_262;
      }
LABEL_259:
      __break(1u);
      goto LABEL_260;
    }
LABEL_179:
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v58 = result;
    unint64_t v357 = v1;
    if (!result) {
      goto LABEL_180;
    }
    goto LABEL_36;
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v168 = v3[45];
  uint64_t v169 = v3[43];
  uint64_t v170 = v3[15];
  uint64_t v171 = type metadata accessor for Logger();
  __swift_project_value_buffer(v171, (uint64_t)static Logger.executor);
  v7(v168, v170, v169);
  v172 = Logger.logObject.getter();
  os_log_type_t v173 = static os_log_type_t.error.getter();
  BOOL v174 = os_log_type_enabled(v172, v173);
  uint64_t v176 = v3[44];
  uint64_t v175 = v3[45];
  uint64_t v177 = v3[43];
  if (v174)
  {
    v178 = v3 + 2;
    v179 = (uint8_t *)swift_slowAlloc();
    uint64_t v180 = swift_slowAlloc();
    unint64_t v369 = v180;
    *(_DWORD *)v179 = 136315138;
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type DialogEngineOutput and conformance DialogEngineOutput, 255, MEMORY[0x1E4FA1CC8]);
    uint64_t v181 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t *v178 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v181, v182, (uint64_t *)&v369);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v183 = *(void (**)(uint64_t, uint64_t))(v176 + 8);
    v183(v175, v177);
    _os_log_impl(&dword_1B9C64000, v172, v173, "Publish called with an unexpected dialogEngineOutput: %s. Ignoring publish attempt", v179, 0xCu);
    swift_arrayDestroy();
    uint64_t v184 = v180;
    uint64_t v3 = v368;
    MEMORY[0x1BA9E48C0](v184, -1, -1);
    MEMORY[0x1BA9E48C0](v179, -1, -1);
  }
  else
  {
    v183 = *(void (**)(uint64_t, uint64_t))(v176 + 8);
    v183(v3[45], v3[43]);
  }

  v183(v3[46], v3[43]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v186 = (uint64_t (*)(void))v3[1];
  return v186();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 392) = v0;
  swift_task_dealloc();
  if (v0) {
    unint64_t v2 = AceServiceInvokerImpl.publish(dialogEngineOutput:executionSource:);
  }
  else {
    unint64_t v2 = AceServiceInvokerImpl.publish(dialogEngineOutput:executionSource:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t AceServiceInvokerImpl.publish(executionOutput:)(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v2[5] = swift_task_alloc();
  return MEMORY[0x1F4188298](AceServiceInvokerImpl.publish(executionOutput:), 0, 0);
}

uint64_t AceServiceInvokerImpl.publish(executionOutput:)()
{
  unint64_t v31 = v0;
  uint64_t v1 = *(os_unfair_lock_s **)(v0[4] + 152);
  unint64_t v2 = v1 + 4;
  uint64_t v3 = v1 + 5;
  os_unfair_lock_lock(v1 + 5);
  closure #1 in AceServiceInvokerImpl.submitInAppResponse(executionSource:inAppResponse:)(v2, v30);
  os_unfair_lock_unlock(v3);
  if (v30[0])
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_1B9C64000, v5, v6, "Attempting to submit a context update on an invalidated AceServiceInvoker. Throwing BargeInError", v7, 2u);
      MEMORY[0x1BA9E48C0](v7, -1, -1);
    }

    type metadata accessor for BargeInError();
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type BargeInError and conformance BargeInError, 255, MEMORY[0x1E4FA1B48]);
    swift_allocError();
    BargeInError.init(rawError:)();
    swift_willThrow();
    swift_task_dealloc();
    int v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
  else
  {
    uint64_t v10 = v0[5];
    uint64_t v11 = (void *)v0[3];
    uint64_t v12 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v10, 1, 1, v12);
    uint64_t v13 = one-time initialization token for shared;
    swift_retain();
    id v14 = v11;
    if (v13 != -1) {
      swift_once();
    }
    uint64_t v16 = v0[4];
    uint64_t v15 = v0[5];
    uint64_t v17 = v0[3];
    uint64_t v18 = static ConversationActor.shared;
    uint64_t v19 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, 255, (void (*)(uint64_t))type metadata accessor for ConversationActor);
    uint64_t v20 = (void *)swift_allocObject();
    v20[2] = v18;
    v20[3] = v19;
    v20[4] = v16;
    v20[5] = v17;
    swift_retain();
    uint64_t v21 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCSo13SABaseCommandCSg_Tgm5Tm(v15, (uint64_t)&async function pointer to partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:), (uint64_t)v20, &demangling cache variable for type metadata for SABaseCommand?);
    v0[6] = v21;
    uint64_t v22 = *(void *)(v16 + 160);
    v0[7] = v22;
    unint64_t v23 = *(os_unfair_lock_s **)(v22 + 16);
    unint64_t v24 = (uint64_t *)&v23[4];
    uint64_t v25 = v23 + 6;
    os_unfair_lock_lock(v23 + 6);
    partial apply for closure #1 in SubmissionTaskRegistry.register(_:)(v24, v30);
    os_unfair_lock_unlock(v25);
    swift_release();
    uint64_t v26 = (void *)swift_task_alloc();
    v0[8] = v26;
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    *uint64_t v26 = v0;
    v26[1] = AceServiceInvokerImpl.publish(executionOutput:);
    uint64_t v29 = MEMORY[0x1E4FBC0F0];
    return MEMORY[0x1F4187D90](v0 + 2, v21, v27, v28, v29);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;

  unint64_t v2 = *v1;
  *(void *)(*v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = AceServiceInvokerImpl.publish(executionOutput:);
  }
  else
  {

    uint64_t v3 = AceServiceInvokerImpl.publish(executionOutput:);
  }
  return MEMORY[0x1F4188298](v3, 0, 0);
}

{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = v0;
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(*(void *)(v0 + 56) + 16) + 24);
  os_unfair_lock_lock(v1);
  partial apply for closure #1 in SubmissionTaskRegistry.unregister(_:)(&v4);
  os_unfair_lock_unlock(v1);
  swift_release();
  swift_release();
  swift_task_dealloc();
  unint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

void AceServiceInvokerImpl.publish(executionOutput:)()
{
  uint64_t v5 = v0;
  uint64_t v1 = v0[9];
  unint64_t v2 = (os_unfair_lock_s *)(*(void *)(v0[7] + 16) + 24);
  os_unfair_lock_lock(v2);
  closure #1 in SubmissionTaskRegistry.unregister(_:)partial apply(&v4);
  if (v1)
  {
    os_unfair_lock_unlock(v2);
  }
  else
  {
    os_unfair_lock_unlock(v2);
    swift_release();
    swift_release();
    swift_task_dealloc();
    uint64_t v3 = (void (*)(void))v0[1];
    v3();
  }
}

uint64_t AceServiceInvokerImpl.publish(nlContext:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for RequestSummary.ExecutionSource();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  v2[7] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  v2[8] = swift_task_alloc();
  v2[9] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v2[10] = swift_task_alloc();
  return MEMORY[0x1F4188298](AceServiceInvokerImpl.publish(nlContext:), 0, 0);
}

uint64_t AceServiceInvokerImpl.publish(nlContext:)()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = type metadata accessor for NLContextUpdate();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, v2, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v1, 0, 1, v4);
  if (*(unsigned char *)(v3 + 24) == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) == 0)
    {
      LOBYTE(v8) = 0;
      uint64_t v7 = v0[3];
      goto LABEL_7;
    }
  }
  uint64_t v7 = v0[3];
  uint64_t v8 = *(void *)(v7 + 80);
  if (v8) {
    LOBYTE(v8) = *(unsigned char *)(v7 + 104) ^ 1;
  }
LABEL_7:
  uint64_t v9 = v0[9];
  uint64_t v10 = v0[10];
  uint64_t v12 = v0[7];
  uint64_t v11 = v0[8];
  uint64_t v13 = v0[5];
  uint64_t v14 = v0[6];
  uint64_t v15 = v0[4];
  id v16 = specialized static ExecutionContextUpdate.convertFromFlowContextUpdate(_:nluActiveTasks:nluCompletedTasks:populateLegacyProvideContext:)(v10, 0, 0, v8 & 1);
  v0[11] = v16;
  outlined destroy of ReferenceResolutionClientProtocol?(v10, &demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v17 = *(void *)(v7 + 48);
  uint64_t v24 = *(void *)(v7 + 40);
  uint64_t v18 = type metadata accessor for FlowOutputMessage.InAppResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v9, 1, 1, v18);
  (*(void (**)(uint64_t, void, uint64_t))(v13 + 104))(v12, *MEMORY[0x1E4FA24B8], v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v14, v12, v15);
  outlined init with copy of ReferenceResolutionClientProtocol?(v9, v11, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  id v19 = objc_allocWithZone((Class)type metadata accessor for ExecutionOutput());
  swift_bridgeObjectRetain();
  id v20 = v16;
  id v21 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:executionSource:inAppResponse:)(0, v16, 0, 0, 0, 0, 0, 0, 0, 0, v24, v17, v14, v11);
  v0[12] = v21;

  outlined destroy of ReferenceResolutionClientProtocol?(v9, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v15);
  uint64_t v22 = (void *)swift_task_alloc();
  v0[13] = v22;
  *uint64_t v22 = v0;
  v22[1] = AceServiceInvokerImpl.publish(nlContext:);
  return AceServiceInvokerImpl.publish(executionOutput:)((uint64_t)v21);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = AceServiceInvokerImpl.publish(nlContext:);
  }
  else {
    uint64_t v2 = AceServiceInvokerImpl.publish(nlContext:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 88);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 88);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t AceServiceInvokerImpl.needsLegacyProvideContextForInvocationDevice.getter()
{
  if (*(unsigned char *)(v0 + 24) == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v1 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    LOBYTE(v2) = 0;
    if ((v1 & 1) == 0) {
      return v2 & 1;
    }
  }
  uint64_t v2 = *(void *)(v0 + 80);
  if (v2) {
    LOBYTE(v2) = *(unsigned char *)(v0 + 104) ^ 1;
  }
  return v2 & 1;
}

uint64_t AceServiceInvokerImpl.publish(executionContextUpdate:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for RequestSummary.ExecutionSource();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  v2[7] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  v2[8] = swift_task_alloc();
  v2[9] = swift_task_alloc();
  return MEMORY[0x1F4188298](AceServiceInvokerImpl.publish(executionContextUpdate:), 0, 0);
}

uint64_t AceServiceInvokerImpl.publish(executionContextUpdate:)()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v5 = v0[4];
  uint64_t v6 = v0[5];
  uint64_t v8 = (void *)v0[2];
  uint64_t v7 = v0[3];
  uint64_t v9 = *(void *)(v7 + 48);
  uint64_t v17 = *(void *)(v7 + 40);
  uint64_t v10 = type metadata accessor for FlowOutputMessage.InAppResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v1, 1, 1, v10);
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v4, *MEMORY[0x1E4FA24B8], v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v4, v5);
  uint64_t v11 = v2;
  outlined init with copy of ReferenceResolutionClientProtocol?(v1, v2, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  id v12 = objc_allocWithZone((Class)type metadata accessor for ExecutionOutput());
  swift_bridgeObjectRetain();
  id v13 = v8;
  id v14 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:executionSource:inAppResponse:)(0, v8, 0, 0, 0, 0, 0, 0, 0, 0, v17, v9, v3, v11);
  v0[10] = v14;

  outlined destroy of ReferenceResolutionClientProtocol?(v1, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  uint64_t v15 = (void *)swift_task_alloc();
  v0[11] = v15;
  *uint64_t v15 = v0;
  v15[1] = AceServiceInvokerImpl.publish(executionContextUpdate:);
  return AceServiceInvokerImpl.publish(executionOutput:)((uint64_t)v14);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = AceServiceInvokerImpl.publish(executionContextUpdate:);
  }
  else {
    uint64_t v2 = AceServiceInvokerImpl.publish(executionContextUpdate:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #2 in AceServiceInvokerImpl.publish(executionOutput:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[19] = a4;
  v5[20] = a5;
  v5[18] = a1;
  uint64_t v6 = type metadata accessor for CancellationError();
  v5[21] = v6;
  v5[22] = *(void *)(v6 - 8);
  v5[23] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v7 = static ConversationActor.shared;
  v5[24] = static ConversationActor.shared;
  return MEMORY[0x1F4188298](closure #2 in AceServiceInvokerImpl.publish(executionOutput:), v7, 0);
}

uint64_t closure #2 in AceServiceInvokerImpl.publish(executionOutput:)()
{
  uint64_t v81 = v0;
  v80[1] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(*(void *)(v0 + 152) + 24) == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v1 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v1 & 1) == 0)
    {
LABEL_27:
      uint64_t v60 = *(void *)(v0 + 152);
      unint64_t v61 = *(void **)(v0 + 160);
      uint64_t v62 = swift_allocObject();
      *(void *)(v0 + 320) = v62;
      *(void *)(v62 + 16) = v60;
      *(void *)(v62 + 24) = v61;
      uint64_t v63 = async function pointer to specialized withCancellableContinuation<A>(body:);
      swift_retain();
      id v64 = v61;
      unint64_t v65 = (void *)swift_task_alloc();
      *(void *)(v0 + 328) = v65;
      *unint64_t v65 = v0;
      v65[1] = closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
      return ((uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized withCancellableContinuation<A>(body:)
                                                       + v63))((uint64_t)partial apply for closure #1 in closure #2 in AceServiceInvokerImpl.publish(executionOutput:), v62);
    }
  }
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v2 + 72);
  *(void *)(v0 + 200) = v3;
  uint64_t v4 = *(void *)(v2 + 80);
  *(void *)(v0 + 208) = v4;
  if (!v4) {
    goto LABEL_27;
  }
  uint64_t v5 = *(char **)(*(void *)(v0 + 160) + OBJC_IVAR___SKRExecutionOutput_contextUpdate);
  *(void *)(v0 + 216) = v5;
  if (!v5) {
    goto LABEL_27;
  }
  uint64_t v6 = *(void **)&v5[OBJC_IVAR___SKRExecutionContextUpdate_provideContextCommand];
  *(void *)(v0 + 224) = v6;
  if (v6)
  {
    uint64_t v7 = one-time initialization token for executor;
    uint64_t v8 = v5;
    id v9 = v6;
    if (v7 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    *(void *)(v0 + 232) = __swift_project_value_buffer(v10, (uint64_t)static Logger.executor);
    swift_retain_n();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      id v78 = v9;
      id v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      v80[0] = v14;
      *(_DWORD *)id v13 = 136315138;
      *(void *)(v0 + 16) = v3;
      *(void *)(v0 + 24) = v4;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
      uint64_t v15 = String.init<A>(describing:)();
      *(void *)(v0 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B9C64000, v11, v12, "Sending legacy SACFProvideContext to invocation device ID=%s, since this is a server request", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v14, -1, -1);
      uint64_t v17 = v13;
      id v9 = v78;
      MEMORY[0x1BA9E48C0](v17, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    *(void *)(v0 + 96) = *(void *)(v0 + 152);
    unint64_t v31 = (void *)swift_task_alloc();
    *(void *)(v0 + 240) = v31;
    uint64_t v32 = type metadata accessor for AceServiceInvokerImpl();
    uint64_t v33 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SABaseCommand);
    uint64_t v35 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type AceServiceInvokerImpl and conformance AceServiceInvokerImpl, v34, (void (*)(uint64_t))type metadata accessor for AceServiceInvokerImpl);
    void *v31 = v0;
    v31[1] = closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
    uint64_t v36 = v35;
    id v37 = v9;
    uint64_t v38 = v32;
    uint64_t v39 = v33;
    goto LABEL_18;
  }
  char v18 = *(unsigned char *)(v2 + 104);
  id v19 = v5;
  if ((v18 & 1) == 0)
  {
    int64_t v40 = v19;
    if (*(void *)&v19[OBJC_IVAR___SKRExecutionContextUpdate_rrEntities])
    {
      uint64_t v41 = swift_bridgeObjectRetain();
      AceServiceInvokerImpl.donateEntitiesLocallyIfNeeded(_:)(v41);

      swift_bridgeObjectRelease();
    }
    else
    {
    }
    goto LABEL_27;
  }
  uint64_t v20 = v0 + 80;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  *(void *)(v0 + 264) = __swift_project_value_buffer(v21, (uint64_t)static Logger.executor);
  swift_retain_n();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v25 = *(void *)(v0 + 200);
    uint64_t v24 = *(void *)(v0 + 208);
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    uint64_t v79 = v21;
    uint64_t v27 = swift_slowAlloc();
    v80[0] = v27;
    *(_DWORD *)uint64_t v26 = 136315138;
    *(void *)(v0 + 32) = v25;
    *(void *)(v0 + 40) = v24;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    uint64_t v28 = String.init<A>(describing:)();
    *(void *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v20 = v0 + 80;
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B9C64000, v22, v23, "Sending RemoteExecutionContextUpdate to invocation device ID=%s", v26, 0xCu);
    swift_arrayDestroy();
    uint64_t v30 = v27;
    uint64_t v21 = v79;
    MEMORY[0x1BA9E48C0](v30, -1, -1);
    MEMORY[0x1BA9E48C0](v26, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  uint64_t v42 = *(void *)(v0 + 216);
  uint64_t v43 = self;
  *(void *)(v0 + 80) = 0;
  id v44 = objc_msgSend(v43, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v42, 1, v20);
  id v45 = *(id *)(v0 + 80);
  if (v44)
  {
    uint64_t v47 = *(void *)(v0 + 200);
    uint64_t v46 = *(void *)(v0 + 208);
    uint64_t v48 = *(void *)(v0 + 152);
    uint64_t v49 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v51 = v50;

    *(void *)(v0 + 272) = v49;
    *(void *)(v0 + 280) = v51;
    id v52 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96930]), sel_init);
    *(void *)(v0 + 288) = v52;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v52, sel_setExecutionContextUpdate_, isa);

    unint64_t v54 = (void *)MEMORY[0x1BA9E2DD0](v47, v46);
    objc_msgSend(v52, sel_setRemoteDeviceAssistantId_, v54);

    AceServiceInvokerImpl.addMissingCommandIds(_:setRefId:)(v52, 1);
    *(void *)(v0 + 48) = v48;
    unint64_t v55 = (void *)swift_task_alloc();
    *(void *)(v0 + 296) = v55;
    uint64_t v56 = type metadata accessor for AceServiceInvokerImpl();
    uint64_t v57 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SABaseCommand);
    uint64_t v59 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type AceServiceInvokerImpl and conformance AceServiceInvokerImpl, v58, (void (*)(uint64_t))type metadata accessor for AceServiceInvokerImpl);
    *unint64_t v55 = v0;
    v55[1] = closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
    uint64_t v36 = v59;
    id v37 = v52;
    uint64_t v38 = v56;
    uint64_t v39 = v57;
LABEL_18:
    return MEMORY[0x1F4152588](v37, v38, v39, v36);
  }
  uint64_t v66 = v45;
  uint64_t v67 = *(void **)(v0 + 216);
  uint64_t v68 = (void *)_convertNSErrorToError(_:)();

  swift_willThrow();
  *(void *)(v0 + 128) = v68;
  id v69 = v68;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {

    if (one-time initialization token for ace != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v21, (uint64_t)static Logger.ace);
    unint64_t v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v70, v71))
    {
      uint64_t v72 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v72 = 0;
      _os_log_impl(&dword_1B9C64000, v70, v71, "AceServiceInvokerImpl: context publishing response failed because user barged in. Will throw BargeInError.", v72, 2u);
      MEMORY[0x1BA9E48C0](v72, -1, -1);
    }
    uint64_t v74 = *(void *)(v0 + 176);
    uint64_t v73 = *(void *)(v0 + 184);
    uint64_t v75 = *(void *)(v0 + 168);

    type metadata accessor for BargeInError();
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type BargeInError and conformance BargeInError, 255, MEMORY[0x1E4FA1B48]);
    swift_allocError();
    BargeInError.init(rawError:)();
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v73, v75);
  }
  else
  {

    swift_willThrow();
  }
  swift_task_dealloc();
  os_log_type_t v76 = *(uint64_t (**)(void))(v0 + 8);
  return v76();
}

{
  uint64_t v0;
  id *v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  void *v5;
  uint8_t *v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  id *v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint8_t *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  Class isa;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  id v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(void);
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67[2];
  uint64_t v68;
  uint64_t v69;

  uint64_t v68 = v0;
  v67[1] = *MEMORY[0x1E4F143B8];
  char v1 = (id *)(v0 + 128);
  uint64_t v2 = *(id *)(v0 + 248);
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void **)(v0 + 248);
    unint64_t v65 = *(void **)(v0 + 224);
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    id v64 = swift_slowAlloc();
    v67[0] = v64;
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v7 = v5;
    uint64_t v8 = objc_msgSend(v7, sel_description);
    id v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    char v1 = (id *)(v0 + 128);
    *(void *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, v3, v4, "Got response from SACFProvideContext: %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v64, -1, -1);
    MEMORY[0x1BA9E48C0](v6, -1, -1);
  }
  else
  {
    os_log_type_t v12 = *(void **)(v0 + 248);
    id v13 = *(void **)(v0 + 224);
  }
  if (*(unsigned char *)(*(void *)(v0 + 152) + 104) == 1)
  {
    uint64_t v14 = v0 + 80;
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    *(void *)(v0 + 264) = __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
    swift_retain_n();
    unint64_t v16 = Logger.logObject.getter();
    uint64_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v66 = v15;
      char v18 = v1;
      uint64_t v20 = *(void *)(v0 + 200);
      id v19 = *(void *)(v0 + 208);
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      v67[0] = v22;
      *(_DWORD *)uint64_t v21 = 136315138;
      *(void *)(v0 + 32) = v20;
      *(void *)(v0 + 40) = v19;
      char v1 = v18;
      uint64_t v15 = v66;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
      os_log_type_t v23 = String.init<A>(describing:)();
      *(void *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B9C64000, v16, v17, "Sending RemoteExecutionContextUpdate to invocation device ID=%s", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v22, -1, -1);
      uint64_t v25 = v21;
      uint64_t v14 = v0 + 80;
      MEMORY[0x1BA9E48C0](v25, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    uint64_t v28 = *(void *)(v0 + 216);
    unint64_t v29 = self;
    *(void *)(v0 + 80) = 0;
    uint64_t v30 = objc_msgSend(v29, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v28, 1, v14);
    unint64_t v31 = *(id *)(v0 + 80);
    if (v30)
    {
      uint64_t v33 = *(void *)(v0 + 200);
      uint64_t v32 = *(void *)(v0 + 208);
      uint64_t v34 = *(void *)(v0 + 152);
      uint64_t v35 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      id v37 = v36;

      *(void *)(v0 + 272) = v35;
      *(void *)(v0 + 280) = v37;
      uint64_t v38 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96930]), sel_init);
      *(void *)(v0 + 288) = v38;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v38, sel_setExecutionContextUpdate_, isa);

      int64_t v40 = (void *)MEMORY[0x1BA9E2DD0](v33, v32);
      objc_msgSend(v38, sel_setRemoteDeviceAssistantId_, v40);

      AceServiceInvokerImpl.addMissingCommandIds(_:setRefId:)(v38, 1);
      *(void *)(v0 + 48) = v34;
      uint64_t v41 = (void *)swift_task_alloc();
      *(void *)(v0 + 296) = v41;
      uint64_t v42 = type metadata accessor for AceServiceInvokerImpl();
      uint64_t v43 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SABaseCommand);
      id v45 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type AceServiceInvokerImpl and conformance AceServiceInvokerImpl, v44, (void (*)(uint64_t))type metadata accessor for AceServiceInvokerImpl);
      char *v41 = v0;
      v41[1] = closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
      return MEMORY[0x1F4152588](v38, v42, v43, v45);
    }
    else
    {
      id v52 = v31;
      uint64_t v53 = *(void **)(v0 + 216);
      unint64_t v54 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      *(void *)(v0 + 128) = v54;
      unint64_t v55 = v54;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      if (swift_dynamicCast())
      {

        if (one-time initialization token for ace != -1) {
          swift_once();
        }
        __swift_project_value_buffer(v15, (uint64_t)static Logger.ace);
        uint64_t v56 = Logger.logObject.getter();
        uint64_t v57 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v56, v57))
        {
          uint64_t v58 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v58 = 0;
          _os_log_impl(&dword_1B9C64000, v56, v57, "AceServiceInvokerImpl: context publishing response failed because user barged in. Will throw BargeInError.", v58, 2u);
          MEMORY[0x1BA9E48C0](v58, -1, -1);
        }
        uint64_t v60 = *(void *)(v0 + 176);
        uint64_t v59 = *(void *)(v0 + 184);
        unint64_t v61 = *(void *)(v0 + 168);

        type metadata accessor for BargeInError();
        lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type BargeInError and conformance BargeInError, 255, MEMORY[0x1E4FA1B48]);
        swift_allocError();
        BargeInError.init(rawError:)();
        swift_willThrow();
        (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v59, v61);
      }
      else
      {

        swift_willThrow();
      }
      swift_task_dealloc();
      uint64_t v62 = *(uint64_t (**)(void))(v0 + 8);
      return v62();
    }
  }
  else
  {
    uint64_t v26 = *(char **)(v0 + 216);
    if (*(void *)&v26[OBJC_IVAR___SKRExecutionContextUpdate_rrEntities])
    {
      uint64_t v27 = swift_bridgeObjectRetain();
      AceServiceInvokerImpl.donateEntitiesLocallyIfNeeded(_:)(v27);

      swift_bridgeObjectRelease();
    }
    else
    {
    }
    uint64_t v46 = *(void *)(v0 + 152);
    uint64_t v47 = *(void **)(v0 + 160);
    uint64_t v48 = swift_allocObject();
    *(void *)(v0 + 320) = v48;
    *(void *)(v48 + 16) = v46;
    *(void *)(v48 + 24) = v47;
    uint64_t v49 = async function pointer to specialized withCancellableContinuation<A>(body:);
    swift_retain();
    uint64_t v50 = v47;
    uint64_t v51 = (void *)swift_task_alloc();
    *(void *)(v0 + 328) = v51;
    uint8_t *v51 = v0;
    v51[1] = closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
    return ((uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized withCancellableContinuation<A>(body:)
                                                     + v49))((uint64_t)partial apply for closure #1 in closure #2 in AceServiceInvokerImpl.publish(executionOutput:), v48);
  }
}

{
  uint64_t v0;
  id v1;
  NSObject *v2;
  os_log_type_t v3;
  void *v4;
  uint8_t *v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28[2];
  uint64_t v29;
  uint64_t v30;

  unint64_t v29 = v0;
  v28[1] = *MEMORY[0x1E4F143B8];
  char v1 = *(id *)(v0 + 304);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void **)(v0 + 304);
    uint64_t v25 = *(void *)(v0 + 280);
    uint64_t v26 = *(void **)(v0 + 288);
    uint64_t v24 = *(void *)(v0 + 272);
    uint64_t v27 = *(void **)(v0 + 216);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    v28[0] = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v7 = v4;
    uint64_t v8 = objc_msgSend(v7, sel_description);
    id v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    *(void *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, v2, v3, "Got response from RemoteExecutionContextUpdate: %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v6, -1, -1);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
    outlined consume of Data._Representation(v24, v25);
  }
  else
  {
    os_log_type_t v12 = *(void **)(v0 + 304);
    id v13 = *(void *)(v0 + 280);
    uint64_t v14 = *(void **)(v0 + 288);
    uint64_t v15 = *(void *)(v0 + 272);
    unint64_t v16 = *(void **)(v0 + 216);

    outlined consume of Data._Representation(v15, v13);
  }
  uint64_t v17 = *(void *)(v0 + 152);
  char v18 = *(void **)(v0 + 160);
  id v19 = swift_allocObject();
  *(void *)(v0 + 320) = v19;
  *(void *)(v19 + 16) = v17;
  *(void *)(v19 + 24) = v18;
  uint64_t v20 = async function pointer to specialized withCancellableContinuation<A>(body:);
  swift_retain();
  uint64_t v21 = v18;
  uint64_t v22 = (void *)swift_task_alloc();
  *(void *)(v0 + 328) = v22;
  *uint64_t v22 = v0;
  v22[1] = closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized withCancellableContinuation<A>(body:)
                                                   + v20))((uint64_t)partial apply for closure #1 in closure #2 in AceServiceInvokerImpl.publish(executionOutput:), v19);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  void *v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v34;
  void *v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  Class isa;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  id v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(void);
  uint64_t v63;
  uint64_t v64[2];
  uint64_t v65;
  uint64_t v66;

  unint64_t v65 = v0;
  v64[1] = *MEMORY[0x1E4F143B8];
  char v1 = *(void **)(v0 + 256);
  uint64_t v2 = v1;
  uint64_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void **)(v0 + 256);
    uint64_t v7 = *(void **)(v0 + 224);
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    id v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    v64[0] = v9;
    *(void *)(v0 + 104) = v6;
    uint64_t v10 = v6;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v11 = String.init<A>(describing:)();
    *(void *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, v4, v5, "Error sending SACFProvideContext: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v9, -1, -1);
    MEMORY[0x1BA9E48C0](v8, -1, -1);
  }
  else
  {
    id v13 = *(void **)(v0 + 256);
  }
  if (*(unsigned char *)(*(void *)(v0 + 152) + 104) == 1)
  {
    uint64_t v14 = v0 + 80;
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    *(void *)(v0 + 264) = __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
    swift_retain_n();
    unint64_t v16 = Logger.logObject.getter();
    uint64_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      id v19 = *(void *)(v0 + 200);
      char v18 = *(void *)(v0 + 208);
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v63 = v15;
      uint64_t v21 = swift_slowAlloc();
      v64[0] = v21;
      *(_DWORD *)uint64_t v20 = 136315138;
      *(void *)(v0 + 32) = v19;
      *(void *)(v0 + 40) = v18;
      uint64_t v14 = v0 + 80;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
      uint64_t v22 = String.init<A>(describing:)();
      *(void *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v16, v17, "Sending RemoteExecutionContextUpdate to invocation device ID=%s", v20, 0xCu);
      swift_arrayDestroy();
      uint64_t v24 = v21;
      uint64_t v15 = v63;
      MEMORY[0x1BA9E48C0](v24, -1, -1);
      MEMORY[0x1BA9E48C0](v20, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    uint64_t v34 = *(void *)(v0 + 216);
    uint64_t v35 = self;
    *(void *)(v0 + 80) = 0;
    uint64_t v36 = objc_msgSend(v35, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v34, 1, v14);
    id v37 = *(id *)(v0 + 80);
    if (v36)
    {
      uint64_t v39 = *(void *)(v0 + 200);
      uint64_t v38 = *(void *)(v0 + 208);
      int64_t v40 = *(void *)(v0 + 152);
      uint64_t v41 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v43 = v42;

      *(void *)(v0 + 272) = v41;
      *(void *)(v0 + 280) = v43;
      id v44 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96930]), sel_init);
      *(void *)(v0 + 288) = v44;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v44, sel_setExecutionContextUpdate_, isa);

      uint64_t v46 = (void *)MEMORY[0x1BA9E2DD0](v39, v38);
      objc_msgSend(v44, sel_setRemoteDeviceAssistantId_, v46);

      AceServiceInvokerImpl.addMissingCommandIds(_:setRefId:)(v44, 1);
      *(void *)(v0 + 48) = v40;
      uint64_t v47 = (void *)swift_task_alloc();
      *(void *)(v0 + 296) = v47;
      uint64_t v48 = type metadata accessor for AceServiceInvokerImpl();
      uint64_t v49 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SABaseCommand);
      uint64_t v51 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type AceServiceInvokerImpl and conformance AceServiceInvokerImpl, v50, (void (*)(uint64_t))type metadata accessor for AceServiceInvokerImpl);
      NSObject *v47 = v0;
      v47[1] = closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
      return MEMORY[0x1F4152588](v44, v48, v49, v51);
    }
    else
    {
      id v52 = v37;
      uint64_t v53 = *(void **)(v0 + 216);
      unint64_t v54 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      *(void *)(v0 + 128) = v54;
      unint64_t v55 = v54;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      if (swift_dynamicCast())
      {

        if (one-time initialization token for ace != -1) {
          swift_once();
        }
        __swift_project_value_buffer(v15, (uint64_t)static Logger.ace);
        uint64_t v56 = Logger.logObject.getter();
        uint64_t v57 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v56, v57))
        {
          uint64_t v58 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v58 = 0;
          _os_log_impl(&dword_1B9C64000, v56, v57, "AceServiceInvokerImpl: context publishing response failed because user barged in. Will throw BargeInError.", v58, 2u);
          MEMORY[0x1BA9E48C0](v58, -1, -1);
        }
        uint64_t v60 = *(void *)(v0 + 176);
        uint64_t v59 = *(void *)(v0 + 184);
        unint64_t v61 = *(void *)(v0 + 168);

        type metadata accessor for BargeInError();
        lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type BargeInError and conformance BargeInError, 255, MEMORY[0x1E4FA1B48]);
        swift_allocError();
        BargeInError.init(rawError:)();
        swift_willThrow();
        (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v59, v61);
      }
      else
      {

        swift_willThrow();
      }
      swift_task_dealloc();
      uint64_t v62 = *(uint64_t (**)(void))(v0 + 8);
      return v62();
    }
  }
  else
  {
    uint64_t v25 = *(char **)(v0 + 216);
    if (*(void *)&v25[OBJC_IVAR___SKRExecutionContextUpdate_rrEntities])
    {
      uint64_t v26 = swift_bridgeObjectRetain();
      AceServiceInvokerImpl.donateEntitiesLocallyIfNeeded(_:)(v26);
      swift_bridgeObjectRelease();
    }

    uint64_t v27 = *(void *)(v0 + 152);
    uint64_t v28 = *(void **)(v0 + 160);
    unint64_t v29 = swift_allocObject();
    *(void *)(v0 + 320) = v29;
    *(void *)(v29 + 16) = v27;
    *(void *)(v29 + 24) = v28;
    uint64_t v30 = async function pointer to specialized withCancellableContinuation<A>(body:);
    swift_retain();
    unint64_t v31 = v28;
    uint64_t v32 = (void *)swift_task_alloc();
    *(void *)(v0 + 328) = v32;
    NSObject *v32 = v0;
    v32[1] = closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
    return ((uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized withCancellableContinuation<A>(body:)
                                                     + v30))((uint64_t)partial apply for closure #1 in closure #2 in AceServiceInvokerImpl.publish(executionOutput:), v29);
  }
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  unint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27[2];
  uint64_t v28;
  uint64_t v29;

  uint64_t v28 = v0;
  v27[1] = *MEMORY[0x1E4F143B8];
  char v1 = *(void **)(v0 + 312);
  uint64_t v2 = v1;
  uint64_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void **)(v0 + 312);
    uint64_t v7 = *(void *)(v0 + 272);
    uint64_t v24 = *(void *)(v0 + 280);
    uint64_t v25 = *(void **)(v0 + 288);
    uint64_t v26 = *(void **)(v0 + 216);
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    id v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    v27[0] = v9;
    *(void *)(v0 + 56) = v6;
    uint64_t v10 = v6;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v11 = String.init<A>(describing:)();
    *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, v4, v5, "Error sending RemoteExecutionContextUpdate: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v9, -1, -1);
    MEMORY[0x1BA9E48C0](v8, -1, -1);
    outlined consume of Data._Representation(v7, v24);
  }
  else
  {
    id v13 = *(void **)(v0 + 312);
    uint64_t v14 = *(void *)(v0 + 280);
    uint64_t v15 = *(void **)(v0 + 288);
    unint64_t v16 = *(void *)(v0 + 272);

    outlined consume of Data._Representation(v16, v14);
  }
  uint64_t v17 = *(void *)(v0 + 152);
  char v18 = *(void **)(v0 + 160);
  id v19 = swift_allocObject();
  *(void *)(v0 + 320) = v19;
  *(void *)(v19 + 16) = v17;
  *(void *)(v19 + 24) = v18;
  uint64_t v20 = async function pointer to specialized withCancellableContinuation<A>(body:);
  swift_retain();
  uint64_t v21 = v18;
  uint64_t v22 = (void *)swift_task_alloc();
  *(void *)(v0 + 328) = v22;
  *uint64_t v22 = v0;
  v22[1] = closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized withCancellableContinuation<A>(body:)
                                                   + v20))((uint64_t)partial apply for closure #1 in closure #2 in AceServiceInvokerImpl.publish(executionOutput:), v19);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  swift_release();
  char v1 = *(void **)(v0 + 336);
  *(void *)(v0 + 128) = v1;
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {

    if (one-time initialization token for ace != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.ace);
    uint64_t v4 = Logger.logObject.getter();
    uint64_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_1B9C64000, v4, v5, "AceServiceInvokerImpl: context publishing response failed because user barged in. Will throw BargeInError.", v6, 2u);
      MEMORY[0x1BA9E48C0](v6, -1, -1);
    }
    uint64_t v8 = *(void *)(v0 + 176);
    uint64_t v7 = *(void *)(v0 + 184);
    id v9 = *(void *)(v0 + 168);

    type metadata accessor for BargeInError();
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type BargeInError and conformance BargeInError, 255, MEMORY[0x1E4FA1B48]);
    swift_allocError();
    BargeInError.init(rawError:)();
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }
  else
  {

    swift_willThrow();
  }
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t closure #2 in AceServiceInvokerImpl.publish(executionOutput:)(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[31] = a1;
  v3[32] = v1;
  swift_task_dealloc();
  uint64_t v4 = v3[24];
  if (v1) {
    uint64_t v5 = closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  }
  else {
    uint64_t v5 = closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  }
  return MEMORY[0x1F4188298](v5, v4, 0);
}

{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v3 = (void *)*v2;
  v3[38] = a1;
  v3[39] = v1;
  swift_task_dealloc();
  uint64_t v4 = v3[24];
  if (v1) {
    uint64_t v5 = closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  }
  else {
    uint64_t v5 = closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  }
  return MEMORY[0x1F4188298](v5, v4, 0);
}

{
  uint64_t v1;
  void *v2;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v4 = (void *)*v2;
  v4[42] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[24];
    return MEMORY[0x1F4188298](closure #2 in AceServiceInvokerImpl.publish(executionOutput:), v5, 0);
  }
  else
  {
    uint64_t v6 = (void *)v4[18];
    swift_release();
    *uint64_t v6 = a1;
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v4[1];
    return v7();
  }
}

BOOL AceServiceInvokerImpl.isExecutingOnBehalfOfInvocationDevice.getter()
{
  if (*(unsigned char *)(v0 + 24) == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v1 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    BOOL result = 0;
    if ((v1 & 1) == 0) {
      return result;
    }
  }
  return *(void *)(v0 + 80) != 0;
}

uint64_t AceServiceInvokerImpl.donateEntitiesLocallyIfNeeded(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRFilter?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v1 + 24) == 1)
  {
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v8 & 1) == 0) {
      return result;
    }
  }
  if (*(void *)(v1 + 80))
  {
    if ((*(unsigned char *)(v1 + 104) & 1) == 0)
    {
      uint64_t v9 = *(void *)(a1 + 16);
      if (v9)
      {
        if (one-time initialization token for ace != -1) {
          swift_once();
        }
        uint64_t v10 = type metadata accessor for Logger();
        __swift_project_value_buffer(v10, (uint64_t)static Logger.ace);
        swift_bridgeObjectRetain();
        uint64_t v11 = Logger.logObject.getter();
        os_log_type_t v12 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v11, v12))
        {
          id v13 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)id v13 = 134349056;
          v15[1] = v9;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B9C64000, v11, v12, "Begin donating %{public}ld reference resolution entities to local device", v13, 0xCu);
          MEMORY[0x1BA9E48C0](v13, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease();
        }
        __swift_project_boxed_opaque_existential_1((void *)(v2 + 112), *(void *)(v2 + 136));
        uint64_t v14 = type metadata accessor for RRFilter();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v6, 1, 1, v14);
        dispatch thunk of ReferenceResolutionClientProtocol.siriMentioned(entities:configuration:completion:)();
        return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for RRFilter?);
      }
    }
  }
  return result;
}

void closure #1 in closure #2 in AceServiceInvokerImpl.publish(executionOutput:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void **)(a2 + 16);
  v6[4] = partial apply for closure #1 in closure #1 in closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  v6[5] = a1;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 1107296256;
  _OWORD v6[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
  v6[3] = &block_descriptor_269_0;
  uint64_t v5 = _Block_copy(v6);
  swift_retain();
  swift_release();
  objc_msgSend(v4, sel_submitWithExecutionOutput_completion_, a3, v5);
  _Block_release(v5);
}

void closure #1 in closure #1 in closure #2 in AceServiceInvokerImpl.publish(executionOutput:)(void *a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v6, 1, 1, v14);
    id v15 = a1;
    specialized ManagedContinuation.updateState(continuation:result:)((uint64_t)v6, (char *)a1, 0);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>?);

    return;
  }
  uint64_t v7 = (void *)_convertErrorToNSError(_:)();
  id v8 = objc_msgSend(v7, sel_domain);
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  if (v9 == 0x55747865746E6F43 && v11 == 0xEE00726574616470)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0) {
      goto LABEL_18;
    }
  }
  id v16 = objc_msgSend(v7, sel_userInfo);
  uint64_t v17 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v18 = *(void *)(v17 + 16);
  swift_bridgeObjectRelease();
  if (v18 != 1) {
    goto LABEL_18;
  }
  id v19 = objc_msgSend(v7, sel_userInfo);
  uint64_t v20 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v20 + 16))
  {

    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000017, 0x80000001BA0620D0);
  char v22 = v21;
  swift_bridgeObjectRelease();
  if ((v22 & 1) == 0)
  {
LABEL_18:

LABEL_19:
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v6, 1, 1, v29);
    id v30 = a2;
    specialized ManagedContinuation.updateState(continuation:result:)((uint64_t)v6, (char *)a2, 1u);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>?);

    return;
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.executor);
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl(&dword_1B9C64000, v24, v25, "Ignored errorApplyingRREntities as we don't want to issue an error dialog just because entities didn't donate to SRR successfully.", v26, 2u);
    MEMORY[0x1BA9E48C0](v26, -1, -1);
  }

  uint64_t v27 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F965B0]), sel_init);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v6, 1, 1, v28);
  specialized ManagedContinuation.updateState(continuation:result:)((uint64_t)v6, v27, 0);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>?);
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime18RemoteConversation_p_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCSo13SABaseCommandCSg_Tgm5Tm(a1, a2, a3, &demangling cache variable for type metadata for RemoteConversation);
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCSo13SABaseCommandCSg_Tgm5Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = type metadata accessor for TaskPriority();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(a1, 1, v7) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  __swift_instantiateConcreteTypeFromMangledName(a4);
  return swift_task_create();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime24RemoteConversationClientCSg_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCSo13SABaseCommandCSg_Tgm5Tm(a1, a2, a3, &demangling cache variable for type metadata for RemoteConversationClient?);
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime28ConversationParaphraseResultO_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime28ConversationParaphraseResultO_Tgm5Tm(a1, a2, a3, (void (*)(void))type metadata accessor for ConversationParaphraseResult);
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime4NodeCyAF9FlowAgentCGSg_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCSo13SABaseCommandCSg_Tgm5Tm(a1, a2, a3, (uint64_t *)&demangling cache variable for type metadata for Node<FlowAgent>?);
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime24ConversationCommitResultO_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime28ConversationParaphraseResultO_Tgm5Tm(a1, a2, a3, (void (*)(void))type metadata accessor for ConversationCommitResult);
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime28ConversationParaphraseResultO_Tgm5Tm(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v7 = type metadata accessor for TaskPriority();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(a1, 1, v7) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  a4(0);
  return swift_task_create();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC11SiriKitFlow15ExecuteResponseV_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime28ConversationParaphraseResultO_Tgm5Tm(a1, a2, a3, MEMORY[0x1E4FA1BF8]);
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime19ConversationServiceC11EagerResultO_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime28ConversationParaphraseResultO_Tgm5Tm(a1, a2, a3, (void (*)(void))type metadata accessor for ConversationService.EagerResult);
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC11SiriKitFlow15PrepareResponseV_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime28ConversationParaphraseResultO_Tgm5Tm(a1, a2, a3, MEMORY[0x1E4FA1C00]);
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

void closure #1 in AceServiceInvokerImpl.donateEntitiesLocallyIfNeeded(_:)(void *a1, char a2)
{
  if (a2)
  {
    id v6 = a1;
    if (one-time initialization token for ace != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.ace);
    id v8 = a1;
    id v9 = a1;
    oslog = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v16 = v12;
      *(_DWORD *)uint64_t v11 = 136446210;
      swift_getErrorValue();
      uint64_t v13 = Error.localizedDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of Result<(), Error>(a1, 1);
      outlined consume of Result<(), Error>(a1, 1);
      _os_log_impl(&dword_1B9C64000, oslog, v10, "Error donating reference resolution entities to local device: %{public}s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v12, -1, -1);
      MEMORY[0x1BA9E48C0](v11, -1, -1);

      outlined consume of Result<(), Error>(a1, 1);
      return;
    }
    outlined consume of Result<(), Error>(a1, 1);
    outlined consume of Result<(), Error>(a1, 1);
  }
  else
  {
    if (one-time initialization token for ace != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.ace);
    oslog = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_1B9C64000, oslog, v3, "Completed donating reference resolution entities to local device", v4, 2u);
      MEMORY[0x1BA9E48C0](v4, -1, -1);
    }
  }
}

uint64_t AceServiceInvokerImpl.createSubmissionTask<A>(for:options:executionSource:expectingResponseOfType:)(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = a3;
  uint64_t v7 = type metadata accessor for RequestSummary.ExecutionSource();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = AceServiceInvokerImpl.preparedCommand(_:options:)(a1, a2);
  id v14 = SABaseCommand.forcedBargeInResult<A>(forExpectedResponseType:)(a4);
  LOBYTE(a4) = v15;
  uint64_t v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v12, 1, 1, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v21, v7);
  unint64_t v17 = (*(unsigned __int8 *)(v8 + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = 0;
  *(void *)(v18 + 24) = 0;
  *(void *)(v18 + 32) = v20;
  *(void *)(v18 + 40) = v13;
  *(void *)(v18 + 48) = v14;
  *(unsigned char *)(v18 + 56) = a4 & 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v18 + v17, (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  swift_retain();
  return _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCSo13SABaseCommandCSg_Tgm5Tm((uint64_t)v12, (uint64_t)&async function pointer to partial apply for closure #1 in AceServiceInvokerImpl.createSubmissionTask<A>(for:options:executionSource:expectingResponseOfType:), v18, &demangling cache variable for type metadata for SABaseCommand?);
}

uint64_t AceServiceInvokerImpl.submitToCompanion<A>(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AceServiceInvokerImpl.submit<A>(_:completion:)(a1, a2, a3, a4, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))AceServiceInvokerImpl._submitToCompanionPrep<A>(_:setRefId:responseType:), (uint64_t)&unk_1F1376D98, (uint64_t)&async function pointer to partial apply for closure #1 in AceServiceInvokerImpl.submitToCompanion<A>(_:completion:));
}

uint64_t AceServiceInvokerImpl._submitToCompanionPrep<A>(_:setRefId:responseType:)(void *a1, char a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for RequestSummary.ExecutionSource();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2) {
    uint64_t v11 = (void *)MEMORY[0x1E4FBC860];
  }
  else {
    uint64_t v11 = &outlined read-only object #0 of AceServiceInvokerImpl._submitToCompanionPrep<A>(_:setRefId:responseType:);
  }
  uint64_t v12 = specialized AceServiceInvokerImpl.wrapCommandForExecution(_:assistantId:)(a1, 0, 0xE000000000000000);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E4FA24B8], v7);
  uint64_t v13 = AceServiceInvokerImpl.createSubmissionTask<A>(for:options:executionSource:expectingResponseOfType:)(v12, (uint64_t)v11, (uint64_t)v10, a3);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  id v14 = *(os_unfair_lock_s **)(*(void *)(v3 + 160) + 16);
  char v15 = (uint64_t *)&v14[4];
  uint64_t v16 = v14 + 6;
  os_unfair_lock_lock(v14 + 6);
  partial apply for closure #1 in SubmissionTaskRegistry.register(_:)(v15, &v19);
  os_unfair_lock_unlock(v16);

  swift_release();
  return v13;
}

uint64_t closure #1 in AceServiceInvokerImpl.submitToCompanion<A>(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  type metadata accessor for SubmitCommandError();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type SubmitCommandError and conformance SubmitCommandError, 255, MEMORY[0x1E4FA1D30]);
  uint64_t v9 = type metadata accessor for Result();
  v8[7] = v9;
  v8[8] = *(void *)(v9 - 8);
  v8[9] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in AceServiceInvokerImpl.submitToCompanion<A>(_:completion:), 0, 0);
}

uint64_t closure #1 in AceServiceInvokerImpl.submitToCompanion<A>(_:completion:)()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 80) = v2;
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:);
  uint64_t v5 = *(void *)(v0 + 72);
  return Result<>.init(catching:)(v5, (int *)&async function pointer to partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.submitToCompanion<A>(_:completion:));
}

uint64_t closure #1 in closure #1 in AceServiceInvokerImpl.submitToCompanion<A>(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a1;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v7;
  void *v7 = v4;
  v7[1] = closure #1 in closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:);
  return AceServiceInvokerImpl._submitToCompanionExecute<A>(_:)(a3, a4);
}

uint64_t AceServiceInvokerImpl._submitToCompanionExecute<A>(_:)(uint64_t a1, uint64_t a2)
{
  void v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v5 = (void *)swift_task_alloc();
  v3[5] = v5;
  *uint64_t v5 = v3;
  v5[1] = AceServiceInvokerImpl._submitToCompanionExecute<A>(_:);
  return specialized AceServiceInvokerImpl.getResponse<A>(from:)(a1);
}

uint64_t AceServiceInvokerImpl._submitToCompanionExecute<A>(_:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 48) = a1;
  *(void *)(v3 + 56) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = AceServiceInvokerImpl._submitToCompanionExecute<A>(_:);
  }
  else {
    uint64_t v4 = AceServiceInvokerImpl._submitToCompanionExecute<A>(_:);
  }
  return MEMORY[0x1F4188298](v4, 0, 0);
}

void AceServiceInvokerImpl._submitToCompanionExecute<A>(_:)()
{
  uint64_t v10 = v0;
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = interpretEORResponse<A>(_:)(objc_msgSend(*(id *)(v0 + 48), sel_result));
  uint64_t v3 = v1;
  uint64_t v4 = *(void **)(v0 + 48);
  uint64_t v5 = *(void *)(v0 + 32);
  swift_unknownObjectRelease();

  uint64_t v6 = (os_unfair_lock_s *)(*(void *)(*(void *)(v5 + 160) + 16) + 24);
  if (v3)
  {
    os_unfair_lock_lock(v6);
    closure #1 in SubmissionTaskRegistry.unregister(_:)partial apply(v9);
    os_unfair_lock_unlock(v6);
    swift_release();
    uint64_t v7 = *(void (**)(void))(v0 + 8);
    v7();
  }
  else
  {
    os_unfair_lock_lock(v6);
    closure #1 in SubmissionTaskRegistry.unregister(_:)partial apply(v9);
    os_unfair_lock_unlock(v6);
    swift_release();
    uint64_t v8 = *(void (**)(uint64_t))(v0 + 8);
    v8(v2);
  }
}

uint64_t AceServiceInvokerImpl._submitToCompanionExecute<A>(_:)()
{
  uint64_t v5 = v0;
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(*(void *)(*(void *)(v0 + 32) + 160) + 16) + 24);
  os_unfair_lock_lock(v1);
  closure #1 in SubmissionTaskRegistry.unregister(_:)partial apply(&v4);
  os_unfair_lock_unlock(v1);
  swift_release();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t AceServiceInvokerImpl.submitToCompanionWithoutRefId<A>(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AceServiceInvokerImpl.submit<A>(_:completion:)(a1, a2, a3, a4, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))AceServiceInvokerImpl._submitToCompanionPrep<A>(_:setRefId:responseType:), (uint64_t)&unk_1F1376DC0, (uint64_t)&async function pointer to partial apply for closure #1 in AceServiceInvokerImpl.submitToCompanionWithoutRefId<A>(_:completion:));
}

uint64_t AceServiceInvokerImpl.submit<A>(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a7, uint64_t a8)
{
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = a6(a1, a5, a4, a4);
  uint64_t v20 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v18, 1, 1, v20);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = 0;
  v21[3] = 0;
  v21[4] = a4;
  v21[5] = a2;
  v21[6] = a3;
  v21[7] = v8;
  v21[8] = v19;
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5Tm((uint64_t)v18, a8, (uint64_t)v21);
  return swift_release();
}

uint64_t closure #1 in AceServiceInvokerImpl.submitToCompanionWithoutRefId<A>(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  type metadata accessor for SubmitCommandError();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type SubmitCommandError and conformance SubmitCommandError, 255, MEMORY[0x1E4FA1D30]);
  uint64_t v9 = type metadata accessor for Result();
  v8[7] = v9;
  v8[8] = *(void *)(v9 - 8);
  v8[9] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in AceServiceInvokerImpl.submitToCompanionWithoutRefId<A>(_:completion:), 0, 0);
}

uint64_t closure #1 in AceServiceInvokerImpl.submitToCompanionWithoutRefId<A>(_:completion:)()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 80) = v2;
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:);
  uint64_t v5 = *(void *)(v0 + 72);
  return Result<>.init(catching:)(v5, (int *)&async function pointer to partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.submitToCompanionWithoutRefId<A>(_:completion:));
}

uint64_t AceServiceInvokerImpl.submitToCompanion<A>(_:setRefId:)(uint64_t a1, char a2, uint64_t a3)
{
  *(void *)(v4 + 24) = a3;
  *(void *)(v4 + 32) = v3;
  *(unsigned char *)(v4 + 72) = a2;
  *(void *)(v4 + 16) = a1;
  return MEMORY[0x1F4188298](AceServiceInvokerImpl.submitToCompanion<A>(_:setRefId:), 0, 0);
}

uint64_t AceServiceInvokerImpl.submitToCompanion<A>(_:setRefId:)()
{
  uint64_t v1 = AceServiceInvokerImpl._submitToCompanionPrep<A>(_:setRefId:responseType:)(*(void **)(v0 + 16), *(unsigned char *)(v0 + 72), *(void *)(v0 + 24));
  *(void *)(v0 + 40) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  void *v2 = v0;
  v2[1] = AceServiceInvokerImpl.submitToCompanion<A>(_:setRefId:);
  uint64_t v3 = *(void *)(v0 + 24);
  return AceServiceInvokerImpl._submitToCompanionExecute<A>(_:)(v1, v3);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 64);
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t AceServiceInvokerImpl.submitToCompanion<A>(_:setRefId:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 56) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = AceServiceInvokerImpl.submitToCompanion<A>(_:setRefId:);
  }
  else
  {
    *(void *)(v4 + 64) = a1;
    uint64_t v5 = AceServiceInvokerImpl.submitToCompanion<A>(_:setRefId:);
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

uint64_t interpretEORResponse<A>(_:)(void *a1)
{
  if (!a1)
  {
    uint64_t v3 = 0;
    goto LABEL_5;
  }
  self;
  uint64_t v2 = swift_dynamicCastObjCClass();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
LABEL_5:
    swift_unknownObjectRetain();
    uint64_t v4 = (uint64_t)interpretResponse<A>(_:)(v3);
    swift_unknownObjectRelease();
    return v4;
  }
  id v5 = objc_msgSend(a1, sel_encodedClassName);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v9 = v8;
  }
  else
  {
    unint64_t v9 = 0xE300000000000000;
    uint64_t v7 = 7104878;
  }
  if (one-time initialization token for ace != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.ace);
  swift_bridgeObjectRetain();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    uint64_t v19 = v14;
    *(_DWORD *)uint64_t v13 = 136315394;
    swift_getMetatypeMetadata();
    uint64_t v15 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v11, v12, "submitToRemote unable to parse typed response. Expected '%s' : received '%s'", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v14, -1, -1);
    MEMORY[0x1BA9E48C0](v13, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  type metadata accessor for CommandFailure();
  swift_allocObject();
  uint64_t v4 = CommandFailure.init(errorCode:reason:)();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type CommandFailure and conformance CommandFailure, 255, MEMORY[0x1E4FA1BC0]);
  swift_allocError();
  *uint64_t v17 = v4;
  swift_willThrow();
  return v4;
}

uint64_t AceServiceInvokerImpl.submitToRemote<A>(_:_:completion:)(NSObject *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = AceServiceInvokerImpl._submitToRemotePrep<A>(_:_:setRefId:responseType:)(a1, a2, a3, 1, a6, a6);
  uint64_t v17 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v15, 1, 1, v17);
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = a6;
  v18[5] = a4;
  v18[6] = a5;
  v18[7] = v6;
  v18[8] = v16;
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5Tm((uint64_t)v15, (uint64_t)&async function pointer to partial apply for closure #1 in AceServiceInvokerImpl.submitToRemote<A>(_:_:completion:), (uint64_t)v18);
  return swift_release();
}

uint64_t AceServiceInvokerImpl._submitToRemotePrep<A>(_:_:setRefId:responseType:)(NSObject *a1, uint64_t a2, unint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v41 = a5;
  uint64_t v42 = a6;
  int64_t v40 = a1;
  uint64_t v11 = type metadata accessor for RequestSummary.ExecutionSource();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (void *)MEMORY[0x1E4FBC860];
  if (a4) {
    uint64_t v16 = (void *)MEMORY[0x1E4FBC860];
  }
  else {
    uint64_t v16 = &outlined read-only object #0 of AceServiceInvokerImpl._submitToRemotePrep<A>(_:_:setRefId:responseType:);
  }
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    if (a4) {
      id v37 = v15;
    }
    else {
      id v37 = &outlined read-only object #0 of AceServiceInvokerImpl._submitToRemotePrep<A>(_:_:setRefId:responseType:);
    }
    uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37[2] + 1, 1, v16);
  }
  unint64_t v18 = v16[2];
  unint64_t v17 = v16[3];
  if (v18 >= v17 >> 1) {
    uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v16);
  }
  v16[2] = v18 + 1;
  uint64_t v19 = &v16[2 * v18];
  v19[4] = a2;
  v19[5] = a3;
  uint64_t v46 = v16;
  if (one-time initialization token for ace != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.ace);
  swift_bridgeObjectRetain_n();
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v38 = v11;
    uint64_t v24 = v23;
    uint64_t v25 = swift_slowAlloc();
    v45[0] = v25;
    *(_DWORD *)uint64_t v24 = 136315394;
    uint64_t v39 = v7;
    swift_bridgeObjectRetain();
    uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v24 + 12) = 2080;
    swift_beginAccess();
    uint64_t v26 = swift_bridgeObjectRetain();
    uint64_t v27 = MEMORY[0x1BA9E3080](v26, &type metadata for AceServiceInvokerImpl.AceSubmitOptions);
    unint64_t v29 = v28;
    swift_bridgeObjectRelease();
    uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, v45);
    uint64_t v7 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v21, v22, "submitToRemote(targetAssistantId:%s, options:%s", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v25, -1, -1);
    uint64_t v30 = v24;
    uint64_t v11 = v38;
    MEMORY[0x1BA9E48C0](v30, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  swift_beginAccess();
  uint64_t v31 = (uint64_t)v46;
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, *MEMORY[0x1E4FA24B8], v11);
  swift_bridgeObjectRetain();
  uint64_t v32 = AceServiceInvokerImpl.createSubmissionTask<A>(for:options:executionSource:expectingResponseOfType:)(v40, v31, (uint64_t)v14, v41);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v33 = *(os_unfair_lock_s **)(*(void *)(v7 + 160) + 16);
  uint64_t v34 = (uint64_t *)&v33[4];
  uint64_t v35 = v33 + 6;
  os_unfair_lock_lock(v33 + 6);
  partial apply for closure #1 in SubmissionTaskRegistry.register(_:)(v34, &v44);
  os_unfair_lock_unlock(v35);
  swift_release();
  swift_bridgeObjectRelease();
  return v32;
}

uint64_t closure #1 in AceServiceInvokerImpl.submitToRemote<A>(_:_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  type metadata accessor for SubmitCommandError();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type SubmitCommandError and conformance SubmitCommandError, 255, MEMORY[0x1E4FA1D30]);
  uint64_t v9 = type metadata accessor for Result();
  v8[7] = v9;
  v8[8] = *(void *)(v9 - 8);
  v8[9] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in AceServiceInvokerImpl.submitToRemote<A>(_:_:completion:), 0, 0);
}

uint64_t closure #1 in AceServiceInvokerImpl.submitToRemote<A>(_:_:completion:)()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 80) = v2;
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in AceServiceInvokerImpl.submitToRemote<A>(_:_:completion:);
  uint64_t v5 = *(void *)(v0 + 72);
  return Result<>.init(catching:)(v5, (int *)&async function pointer to partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.submitToRemote<A>(_:_:completion:));
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in AceServiceInvokerImpl.submitToRemote<A>(_:_:completion:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v1 = *(void *)(v0 + 72);
  long long v3 = *(void *)(v0 + 56);
  (*(void (**)(uint64_t))(v0 + 16))(v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t closure #1 in closure #1 in AceServiceInvokerImpl.submitToRemote<A>(_:_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a1;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v7;
  void *v7 = v4;
  v7[1] = closure #1 in closure #1 in AceServiceInvokerImpl.submitToRemote<A>(_:_:completion:);
  return AceServiceInvokerImpl._submitToCompanionExecute<A>(_:)(a3, a4);
}

uint64_t closure #1 in closure #1 in AceServiceInvokerImpl.submitToRemote<A>(_:_:completion:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 32) = a1;
    return MEMORY[0x1F4188298](closure #1 in closure #1 in AceServiceInvokerImpl.submitToRemote<A>(_:_:completion:), 0, 0);
  }
}

uint64_t closure #1 in closure #1 in AceServiceInvokerImpl.submitToRemote<A>(_:_:completion:)()
{
  **(void **)(v0 + 16) = *(void *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AceServiceInvokerImpl.submitToRemote<A>(_:_:setRefId:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  *(void *)(v6 + 40) = a5;
  *(void *)(v6 + 48) = v5;
  *(unsigned char *)(v6 + 88) = a4;
  *(void *)(v6 + 24) = a2;
  *(void *)(v6 + 32) = a3;
  *(void *)(v6 + 16) = a1;
  return MEMORY[0x1F4188298](AceServiceInvokerImpl.submitToRemote<A>(_:_:setRefId:), 0, 0);
}

uint64_t AceServiceInvokerImpl.submitToRemote<A>(_:_:setRefId:)()
{
  uint64_t v1 = AceServiceInvokerImpl._submitToRemotePrep<A>(_:_:setRefId:responseType:)(*(NSObject **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 88), *(void *)(v0 + 40), *(void *)(v0 + 40));
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v2;
  void *v2 = v0;
  v2[1] = AceServiceInvokerImpl.submitToRemote<A>(_:_:setRefId:);
  uint64_t v3 = *(void *)(v0 + 40);
  return AceServiceInvokerImpl._submitToCompanionExecute<A>(_:)(v1, v3);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 80);
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t AceServiceInvokerImpl.submitToRemote<A>(_:_:setRefId:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 72) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = AceServiceInvokerImpl.submitToRemote<A>(_:_:setRefId:);
  }
  else
  {
    *(void *)(v4 + 80) = a1;
    uint64_t v5 = AceServiceInvokerImpl.submitToRemote<A>(_:_:setRefId:);
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

uint64_t AceServiceInvokerImpl.submitAllSerial(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v31 = a2;
  uint64_t v32 = a3;
  uint64_t v30 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for RequestSummary.ExecutionSource();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v27 - v13;
  (*(void (**)(char *, void, uint64_t))(v9 + 104))((char *)&v27 - v13, *MEMORY[0x1E4FA24B8], v8);
  uint64_t v15 = type metadata accessor for TaskPriority();
  uint64_t v16 = *(void *)(v15 - 8);
  unint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  uint64_t v29 = v16 + 56;
  v28(v7, 1, 1, v15);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
  unint64_t v17 = (*(unsigned __int8 *)(v9 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v18 = (char *)swift_allocObject();
  *((void *)v18 + 2) = 0;
  *((void *)v18 + 3) = 0;
  uint64_t v19 = MEMORY[0x1E4FBC860];
  *((void *)v18 + 4) = v30;
  *((void *)v18 + 5) = v4;
  *((void *)v18 + 6) = v19;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v18[v17], v12, v8);
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v20 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCSo13SABaseCommandCSg_Tgm5Tm((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:executionSource:), (uint64_t)v18, &demangling cache variable for type metadata for SABaseCommand?);
  uint64_t v21 = *(os_unfair_lock_s **)(*(void *)(v4 + 160) + 16);
  os_log_type_t v22 = (uint64_t *)&v21[4];
  uint64_t v23 = v21 + 6;
  os_unfair_lock_lock(v21 + 6);
  partial apply for closure #1 in SubmissionTaskRegistry.register(_:)(v22, &v33);
  os_unfair_lock_unlock(v23);
  swift_release();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  v28(v7, 1, 1, v15);
  uint64_t v24 = (void *)swift_allocObject();
  v24[2] = 0;
  v24[3] = 0;
  v24[4] = v4;
  v24[5] = v20;
  uint64_t v25 = v32;
  v24[6] = v31;
  v24[7] = v25;
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5Tm((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in AceServiceInvokerImpl.submitAllSerial(_:_:), (uint64_t)v24);
  return swift_release();
}

uint64_t AceServiceInvokerImpl._submitAllSerialPrep(_:setRefId:executionSource:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for RequestSummary.ExecutionSource();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2) {
    uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
  }
  else {
    uint64_t v13 = &outlined read-only object #0 of AceServiceInvokerImpl._submitAllSerialPrep(_:setRefId:executionSource:);
  }
  uint64_t v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v12, 1, 1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v7);
  unint64_t v15 = (*(unsigned __int8 *)(v8 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v16 = (char *)swift_allocObject();
  *((void *)v16 + 2) = 0;
  *((void *)v16 + 3) = 0;
  *((void *)v16 + 4) = a1;
  *((void *)v16 + 5) = v3;
  *((void *)v16 + 6) = v13;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v16[v15], (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v17 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCSo13SABaseCommandCSg_Tgm5Tm((uint64_t)v12, (uint64_t)&closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:executionSource:)partial apply, (uint64_t)v16, &demangling cache variable for type metadata for SABaseCommand?);
  unint64_t v18 = *(os_unfair_lock_s **)(*(void *)(v3 + 160) + 16);
  uint64_t v19 = (uint64_t *)&v18[4];
  uint64_t v20 = v18 + 6;
  os_unfair_lock_lock(v18 + 6);
  partial apply for closure #1 in SubmissionTaskRegistry.register(_:)(v19, &v23);
  os_unfair_lock_unlock(v20);
  swift_release();
  return v17;
}

uint64_t closure #1 in AceServiceInvokerImpl.submitAllSerial(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[6] = a6;
  v7[7] = a7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SubmitCommandError?);
  v7[8] = swift_task_alloc();
  uint64_t v9 = (void *)swift_task_alloc();
  v7[9] = v9;
  void *v9 = v7;
  v9[1] = closure #1 in AceServiceInvokerImpl.submitAllSerial(_:_:);
  return AceServiceInvokerImpl._submitAllSerialExecute(_:)(a5);
}

uint64_t closure #1 in AceServiceInvokerImpl.submitAllSerial(_:_:)()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in AceServiceInvokerImpl.submitAllSerial(_:_:);
  }
  else {
    uint64_t v2 = closure #1 in AceServiceInvokerImpl.submitAllSerial(_:_:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[8];
  uint64_t v2 = (void (*)(uint64_t))v0[6];
  uint64_t v3 = type metadata accessor for SubmitCommandError();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v1, 1, 1, v3);
  v2(v1);
  outlined destroy of ReferenceResolutionClientProtocol?(v1, &demangling cache variable for type metadata for SubmitCommandError?);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  void *v0;
  void *v1;
  uint64_t *v2;
  void (*v3)(uint64_t *);
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = (void *)v0[10];
  uint64_t v2 = (uint64_t *)v0[8];
  uint64_t v3 = (void (*)(uint64_t *))v0[6];
  swift_getErrorValue();
  Error.asSubmitCommandError.getter(v0[3], v0[4], v2);
  uint64_t v4 = type metadata accessor for SubmitCommandError();
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v2, 0, 1, v4);
  v3(v2);

  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v2, &demangling cache variable for type metadata for SubmitCommandError?);
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t AceServiceInvokerImpl._submitAllSerialExecute(_:)(uint64_t a1)
{
  v2[11] = a1;
  v2[12] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[13] = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  v2[14] = v6;
  *uint64_t v4 = v2;
  v4[1] = AceServiceInvokerImpl._submitAllSerialExecute(_:);
  uint64_t v7 = MEMORY[0x1E4FBC0F0];
  return MEMORY[0x1F4187D90](v2 + 7, a1, v5, v6, v7);
}

uint64_t AceServiceInvokerImpl._submitAllSerialExecute(_:)()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = AceServiceInvokerImpl._submitAllSerialExecute(_:);
  }
  else
  {

    uint64_t v3 = AceServiceInvokerImpl._submitAllSerialExecute(_:);
  }
  return MEMORY[0x1F4188298](v3, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  NSObject *v4;
  void *v5;
  NSObject *v6;
  os_unfair_lock_s *v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  void *v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  uint64_t (*v22)(void);
  uint64_t v24[2];
  uint64_t v25;
  uint64_t v26;

  uint64_t v25 = v0;
  uint64_t v1 = *(void **)(v0 + 120);
  *(void *)(v0 + 64) = v1;
  uint64_t v2 = v1;
  if (swift_dynamicCast())
  {
    uint64_t v3 = *(void *)(v0 + 96);

    uint64_t v5 = *(void **)(v0 + 40);
    uint64_t v4 = *(NSObject **)(v0 + 48);
    specialized static AceServiceInvokerImpl.genericErrorLogger(originalCommand:error:)(v5, v4);
    uint64_t v6 = v4;
    swift_willThrow();

    uint64_t v7 = (os_unfair_lock_s *)(*(void *)(*(void *)(v3 + 160) + 16) + 24);
    os_unfair_lock_lock(v7);
    closure #1 in SubmissionTaskRegistry.unregister(_:)partial apply(v24);
    os_unfair_lock_unlock(v7);
  }
  else
  {

    if (one-time initialization token for ace != -1) {
      swift_once();
    }
    uint64_t v8 = *(void **)(v0 + 120);
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.ace);
    uint64_t v10 = v8;
    uint64_t v11 = v8;
    uint64_t v12 = Logger.logObject.getter();
    uint64_t v13 = static os_log_type_t.error.getter();
    uint64_t v14 = os_log_type_enabled(v12, v13);
    unint64_t v15 = *(void **)(v0 + 120);
    if (v14)
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      v24[0] = v17;
      *(_DWORD *)uint64_t v16 = 136315138;
      swift_getErrorValue();
      unint64_t v18 = Error.localizedDescription.getter();
      *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v17, -1, -1);
      MEMORY[0x1BA9E48C0](v16, -1, -1);
    }
    else
    {
    }
    uint64_t v20 = *(void *)(v0 + 96);
    swift_willThrow();
    uint64_t v21 = (os_unfair_lock_s *)(*(void *)(*(void *)(v20 + 160) + 16) + 24);
    os_unfair_lock_lock(v21);
    closure #1 in SubmissionTaskRegistry.unregister(_:)partial apply(v24);
    os_unfair_lock_unlock(v21);
  }
  swift_release();
  uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
  return v22();
}

void AceServiceInvokerImpl._submitAllSerialExecute(_:)()
{
  uint64_t v10 = v0;
  if (one-time initialization token for ace != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.ace);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1B9C64000, v2, v3, "AceServiceInvoker successfully submitted all commands serially", v4, 2u);
    MEMORY[0x1BA9E48C0](v4, -1, -1);
  }
  uint64_t v5 = v0[15];
  uint64_t v6 = v0[12];

  uint64_t v7 = (os_unfair_lock_s *)(*(void *)(*(void *)(v6 + 160) + 16) + 24);
  os_unfair_lock_lock(v7);
  closure #1 in SubmissionTaskRegistry.unregister(_:)partial apply(&v9);
  os_unfair_lock_unlock(v7);
  if (!v5)
  {
    swift_release();
    uint64_t v8 = (void (*)(void))v0[1];
    v8();
  }
}

uint64_t Error.asSubmitCommandError.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v31 = a2;
  uint64_t v32 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SubmitCommandError?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v7);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  unint64_t v15 = (char *)&v29 - v14;
  uint64_t v16 = type metadata accessor for SubmitCommandError();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = v10;
  uint64_t v30 = v4;
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v20(v15, v4, a1);
  int v21 = swift_dynamicCast();
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  if (v21)
  {
    v22(v9, 0, 1, v16);
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v23(v19, v9, v16);
    return ((uint64_t (*)(uint64_t *, char *, uint64_t))v23)(v32, v19, v16);
  }
  else
  {
    uint64_t v25 = v32;
    v22(v9, 1, 1, v16);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, &demangling cache variable for type metadata for SubmitCommandError?);
    v20(v13, v30, a1);
    uint64_t v26 = _getErrorEmbeddedNSError<A>(_:)();
    if (v26)
    {
      uint64_t v27 = v26;
      (*(void (**)(char *, uint64_t))(v29 + 8))(v13, a1);
    }
    else
    {
      uint64_t v27 = swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v28, v13, a1);
    }
    *uint64_t v25 = v27;
    return (*(uint64_t (**)(uint64_t *, void, uint64_t))(v17 + 104))(v25, *MEMORY[0x1E4FA1D10], v16);
  }
}

uint64_t AceServiceInvokerImpl.submitAllSerialWithoutRefId(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for RequestSummary.ExecutionSource();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E4FA24B8], v10);
  uint64_t v14 = AceServiceInvokerImpl._submitAllSerialPrep(_:setRefId:executionSource:)(a1, 0, (uint64_t)v13);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v9, 1, 1, v15);
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = v3;
  v16[5] = v14;
  v16[6] = a2;
  v16[7] = a3;
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5Tm((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in AceServiceInvokerImpl.submitAllSerialWithoutRefId(_:_:), (uint64_t)v16);
  return swift_release();
}

uint64_t closure #1 in AceServiceInvokerImpl.submitAllSerialWithoutRefId(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[6] = a6;
  v7[7] = a7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SubmitCommandError?);
  v7[8] = swift_task_alloc();
  uint64_t v9 = (void *)swift_task_alloc();
  v7[9] = v9;
  void *v9 = v7;
  v9[1] = closure #1 in AceServiceInvokerImpl.submitAllSerialWithoutRefId(_:_:);
  return AceServiceInvokerImpl._submitAllSerialExecute(_:)(a5);
}

uint64_t closure #1 in AceServiceInvokerImpl.submitAllSerialWithoutRefId(_:_:)()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in AceServiceInvokerImpl.submitAllSerialWithoutRefId(_:_:);
  }
  else {
    uint64_t v2 = closure #1 in AceServiceInvokerImpl.submitAllSerialWithoutRefId(_:_:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t AceServiceInvokerImpl.submitAllSerial(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v42 = a6;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v39 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for RequestSummary.ExecutionSource();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  uint64_t v16 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v40 = a5;
  if ((a4 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_3:
    uint64_t v20 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4);
    goto LABEL_10;
  }
  id v37 = (void (*)(char *, uint64_t, uint64_t, uint64_t))a2;
  uint64_t v38 = v13;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v21 = swift_dynamicCastClass();
  if (!v21)
  {
    swift_unknownObjectRelease();
    uint64_t v21 = MEMORY[0x1E4FBC860];
  }
  uint64_t v22 = *(void *)(v21 + 16);
  swift_release();
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v22 != (a4 >> 1) - a3)
  {
LABEL_12:
    swift_unknownObjectRelease();
    a2 = (uint64_t)v37;
    uint64_t v13 = v38;
    goto LABEL_3;
  }
  uint64_t v20 = swift_dynamicCastClass();
  uint64_t v13 = v38;
  if (!v20)
  {
    swift_unknownObjectRelease();
    uint64_t v20 = MEMORY[0x1E4FBC860];
  }
LABEL_10:
  swift_unknownObjectRelease();
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v19, *MEMORY[0x1E4FA24B8], v13);
  uint64_t v23 = v13;
  uint64_t v24 = type metadata accessor for TaskPriority();
  uint64_t v25 = *(void *)(v24 - 8);
  id v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
  uint64_t v38 = v25 + 56;
  uint64_t v26 = (uint64_t)v39;
  v37(v39, 1, 1, v24);
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v19, v23);
  unint64_t v27 = (*(unsigned __int8 *)(v14 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v28 = (char *)swift_allocObject();
  *((void *)v28 + 2) = 0;
  *((void *)v28 + 3) = 0;
  uint64_t v29 = v41;
  *((void *)v28 + 4) = v20;
  *((void *)v28 + 5) = v29;
  *((void *)v28 + 6) = MEMORY[0x1E4FBC860];
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v28[v27], v17, v23);
  swift_retain();
  swift_retain();
  uint64_t v30 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCSo13SABaseCommandCSg_Tgm5Tm(v26, (uint64_t)&closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:executionSource:)partial apply, (uint64_t)v28, &demangling cache variable for type metadata for SABaseCommand?);
  uint64_t v31 = *(os_unfair_lock_s **)(*(void *)(v29 + 160) + 16);
  uint64_t v32 = (uint64_t *)&v31[4];
  uint64_t v33 = v31 + 6;
  os_unfair_lock_lock(v31 + 6);
  partial apply for closure #1 in SubmissionTaskRegistry.register(_:)(v32, &v43);
  os_unfair_lock_unlock(v33);
  swift_release();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v23);
  v37((char *)v26, 1, 1, v24);
  uint64_t v34 = (void *)swift_allocObject();
  void v34[2] = 0;
  v34[3] = 0;
  void v34[4] = v29;
  v34[5] = v30;
  uint64_t v35 = v42;
  v34[6] = v40;
  v34[7] = v35;
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5Tm(v26, (uint64_t)&closure #1 in AceServiceInvokerImpl.submitAllSerial(_:_:)partial apply, (uint64_t)v34);
  swift_release();
  return swift_release();
}

uint64_t AceServiceInvokerImpl.submitAllSerialWithoutRefId(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v29 = a5;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for RequestSummary.ExecutionSource();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a4 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_3:
    uint64_t v19 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4);
    goto LABEL_10;
  }
  uint64_t v27 = a2;
  uint64_t v28 = a6;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v20 = swift_dynamicCastClass();
  if (!v20)
  {
    swift_unknownObjectRelease();
    uint64_t v20 = MEMORY[0x1E4FBC860];
  }
  uint64_t v21 = *(void *)(v20 + 16);
  swift_release();
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v21 != (a4 >> 1) - a3)
  {
LABEL_12:
    swift_unknownObjectRelease();
    a2 = v27;
    a6 = v28;
    goto LABEL_3;
  }
  uint64_t v19 = swift_dynamicCastClass();
  a6 = v28;
  if (!v19)
  {
    swift_unknownObjectRelease();
    uint64_t v19 = MEMORY[0x1E4FBC860];
  }
LABEL_10:
  swift_unknownObjectRelease();
  (*(void (**)(char *, void, uint64_t))(v16 + 104))(v18, *MEMORY[0x1E4FA24B8], v15);
  uint64_t v22 = AceServiceInvokerImpl._submitAllSerialPrep(_:setRefId:executionSource:)(v19, 0, (uint64_t)v18);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  uint64_t v23 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v14, 1, 1, v23);
  uint64_t v24 = (void *)swift_allocObject();
  v24[2] = 0;
  v24[3] = 0;
  v24[4] = v6;
  v24[5] = v22;
  v24[6] = v29;
  v24[7] = a6;
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5Tm((uint64_t)v14, (uint64_t)&closure #1 in AceServiceInvokerImpl.submitAllSerialWithoutRefId(_:_:)partial apply, (uint64_t)v24);
  swift_release();
  return swift_release();
}

uint64_t AceServiceInvokerImpl.submitAllSerial(_:setRefId:)(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 80) = a2;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = type metadata accessor for RequestSummary.ExecutionSource();
  *(void *)(v3 + 32) = v4;
  *(void *)(v3 + 40) = *(void *)(v4 - 8);
  *(void *)(v3 + 48) = swift_task_alloc();
  return MEMORY[0x1F4188298](AceServiceInvokerImpl.submitAllSerial(_:setRefId:), 0, 0);
}

uint64_t AceServiceInvokerImpl.submitAllSerial(_:setRefId:)()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 32);
  char v4 = *(unsigned char *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 16);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, *MEMORY[0x1E4FA24B8], v3);
  uint64_t v6 = AceServiceInvokerImpl._submitAllSerialPrep(_:setRefId:executionSource:)(v5, v4, v1);
  *(void *)(v0 + 56) = v6;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v7;
  void *v7 = v0;
  v7[1] = AceServiceInvokerImpl.submitAllSerial(_:setRefId:);
  return AceServiceInvokerImpl._submitAllSerialExecute(_:)(v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = AceServiceInvokerImpl.submitAllSerial(_:setRefId:);
  }
  else {
    uint64_t v2 = AceServiceInvokerImpl.submitAllSerial(_:setRefId:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t AceServiceInvokerImpl.submitAllSerial(_:setRefId:executionSource:)(uint64_t a1, char a2, uint64_t a3)
{
  *(void *)(v4 + 24) = a3;
  *(void *)(v4 + 32) = v3;
  *(unsigned char *)(v4 + 64) = a2;
  *(void *)(v4 + 16) = a1;
  return MEMORY[0x1F4188298](AceServiceInvokerImpl.submitAllSerial(_:setRefId:executionSource:), 0, 0);
}

uint64_t AceServiceInvokerImpl.submitAllSerial(_:setRefId:executionSource:)()
{
  uint64_t v1 = AceServiceInvokerImpl._submitAllSerialPrep(_:setRefId:executionSource:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 64), *(void *)(v0 + 24));
  *(void *)(v0 + 40) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  void *v2 = v0;
  v2[1] = AceServiceInvokerImpl.submitAllSerial(_:setRefId:executionSource:);
  return AceServiceInvokerImpl._submitAllSerialExecute(_:)(v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = AceServiceInvokerImpl.submitToCompanion<A>(_:setRefId:);
  }
  else {
    uint64_t v2 = AceServiceInvokerImpl.submitAllSerial(_:setRefId:executionSource:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void closure #1 in AceServiceInvokerImpl.closeServerRequest()(unsigned char *a1, void *a2)
{
  if (*a1)
  {
    if (one-time initialization token for ace != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.ace);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_1B9C64000, v3, v4, "Request is already closed.", v5, 2u);
      MEMORY[0x1BA9E48C0](v5, -1, -1);
    }
  }
  else
  {
    if (one-time initialization token for ace != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.ace);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_1B9C64000, v9, v10, "Closing server request.", v11, 2u);
      MEMORY[0x1BA9E48C0](v11, -1, -1);
    }

    uint64_t v12 = (void *)a2[2];
    uint64_t v13 = (void *)MEMORY[0x1BA9E2DD0](a2[5], a2[6]);
    objc_msgSend(v12, sel_closeServerRequestForExecutionRequestId_, v13);

    *a1 = 1;
  }
}

Swift::String_optional __swiftcall AceServiceInvokerImpl.currentStartRequestId()()
{
  if (v0[8])
  {
    uint64_t v1 = v0[7];
    uint64_t v2 = (void *)v0[8];
  }
  else
  {
    uint64_t v1 = v0[5];
    uint64_t v2 = (void *)v0[6];
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = v1;
  os_log_type_t v4 = v2;
  result.value._object = v4;
  result.value._uint64_t countAndFlagsBits = v3;
  return result;
}

uint64_t AceServiceInvokerImpl.prepareForAudioHandoff()()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x1F4188298](AceServiceInvokerImpl.prepareForAudioHandoff(), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  uint64_t *v1 = v0;
  v1[1] = AceServiceInvokerImpl.prepareForAudioHandoff();
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = MEMORY[0x1E4FBB390];
  return MEMORY[0x1F41880D8](v0 + 32, 0, 0, 0xD000000000000018, 0x80000001BA061DE0, partial apply for closure #1 in AceServiceInvokerImpl.prepareForAudioHandoff(), v2, v3);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x1F4188298](AceServiceInvokerImpl.prepareForAudioHandoff(), 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))(*(unsigned __int8 *)(v0 + 32));
}

void closure #1 in AceServiceInvokerImpl.prepareForAudioHandoff()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Never>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = *(void **)(a2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.prepareForAudioHandoff();
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
  aBlock[3] = &block_descriptor_184;
  os_log_type_t v10 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v7, sel_prepareForAudioHandoffWithCompletion_, v10);
  _Block_release(v10);
}

void closure #1 in AceServiceInvokerImpl.prepareForAudioHandoffFailed()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = *(void **)(a2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.prepareForAudioHandoffFailed();
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_178;
  os_log_type_t v10 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v7, sel_prepareForAudioHandoffFailedWithCompletion_, v10);
  _Block_release(v10);
}

uint64_t AceServiceInvokerImpl.recentDialogs()()
{
  *(void *)(v1 + 24) = v0;
  return MEMORY[0x1F4188298](AceServiceInvokerImpl.recentDialogs(), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [RecentDialog]);
  uint64_t *v1 = v0;
  v1[1] = AceServiceInvokerImpl.recentDialogs();
  uint64_t v3 = *(void *)(v0 + 24);
  return MEMORY[0x1F41880D8](v0 + 16, 0, 0, 0x6944746E65636572, 0xEF292873676F6C61, partial apply for closure #1 in AceServiceInvokerImpl.recentDialogs(), v3, v2);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x1F4188298](AceServiceInvokerImpl.recentDialogs(), 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

void closure #1 in AceServiceInvokerImpl.recentDialogs()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[RecentDialog], Never>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = *(void **)(a2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.recentDialogs();
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed [RecentDialog]) -> ();
  aBlock[3] = &block_descriptor_172;
  os_log_type_t v10 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v7, sel_fetchRecentDialogsWithReply_, v10);
  _Block_release(v10);
}

uint64_t closure #1 in closure #1 in AceServiceInvokerImpl.recentDialogs()()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t AceServiceInvokerImpl.submitExternalActivationRequest(withRequestInfo:)(uint64_t a1)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = v1;
  return MEMORY[0x1F4188298](AceServiceInvokerImpl.submitExternalActivationRequest(withRequestInfo:), 0, 0);
}

uint64_t AceServiceInvokerImpl.submitExternalActivationRequest(withRequestInfo:)()
{
  uint64_t v1 = (int8x16_t *)swift_task_alloc();
  v0[3].i64[0] = (uint64_t)v1;
  v1[1] = vextq_s8(v0[2], v0[2], 8uLL);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[3].i64[1] = (uint64_t)v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Bool, Error?));
  void *v2 = v0;
  v2[1] = AceServiceInvokerImpl.submitExternalActivationRequest(withRequestInfo:);
  return MEMORY[0x1F41880D8](&v0[1], 0, 0, 0xD000000000000031, 0x80000001BA061E20, partial apply for closure #1 in AceServiceInvokerImpl.submitExternalActivationRequest(withRequestInfo:), v1, v3);
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x1F4188298](AceServiceInvokerImpl.submitExternalActivationRequest(withRequestInfo:), 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void, void))(v0 + 8))(*(unsigned __int8 *)(v0 + 16), *(void *)(v0 + 24));
}

void closure #1 in AceServiceInvokerImpl.submitExternalActivationRequest(withRequestInfo:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(Bool, Error?), Never>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = *(void **)(a2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.postToMessageBus(message:);
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_166;
  uint64_t v12 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v9, sel_submitExternalActivationRequestWithRequestInfo_completion_, a3, v12);
  _Block_release(v12);
}

uint64_t AceServiceInvokerImpl.postToMessageBus(message:)(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for MessageXPCTransporter();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  return MEMORY[0x1F4188298](AceServiceInvokerImpl.postToMessageBus(message:), 0, 0);
}

uint64_t AceServiceInvokerImpl.postToMessageBus(message:)()
{
  uint64_t v1 = (void *)v0[4];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  v0[9] = PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  dispatch thunk of MessageXPCTransportable.toMessageXPCTransporter()();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type MessageXPCTransporter and conformance MessageXPCTransporter, 255, MEMORY[0x1E4FA22D0]);
  uint64_t v2 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  v0[10] = v2;
  v0[11] = v3;
  uint64_t v4 = v3;
  (*(void (**)(void, void))(v0[7] + 8))(v0[8], v0[6]);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_1B9C64000, v6, v7, "Passing message to conversation bridge over XPC ", v8, 2u);
    MEMORY[0x1BA9E48C0](v8, -1, -1);
  }
  uint64_t v9 = v0[5];

  unint64_t v10 = (void *)swift_task_alloc();
  v0[12] = v10;
  v10[2] = v9;
  v10[3] = v2;
  v10[4] = v4;
  uint64_t v11 = (void *)swift_task_alloc();
  v0[13] = v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Bool, Error?));
  *uint64_t v11 = v0;
  v11[1] = AceServiceInvokerImpl.postToMessageBus(message:);
  return MEMORY[0x1F41880D8](v0 + 2, 0, 0, 0xD00000000000001ALL, 0x80000001BA061E60, partial apply for closure #1 in AceServiceInvokerImpl.postToMessageBus(message:), v10, v12);
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x1F4188298](AceServiceInvokerImpl.postToMessageBus(message:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v5;

  outlined consume of Data._Representation(*(void *)(v0 + 80), *(void *)(v0 + 88));
  swift_release();
  uint64_t v1 = *(unsigned __int8 *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v3(v1, v2);
}

void closure #1 in AceServiceInvokerImpl.postToMessageBus(message:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(Bool, Error?), Never>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v4);
  os_log_type_t v7 = *(void **)(a2 + 16);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.postToMessageBus(message:);
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_160;
  uint64_t v11 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v7, sel_postToMessageBusWithMessage_completion_, isa, v11);
  _Block_release(v11);
}

uint64_t closure #1 in closure #1 in AceServiceInvokerImpl.submitExternalActivationRequest(withRequestInfo:)(int a1, id a2)
{
  id v2 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(Bool, Error?), Never>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t closure #1 in AceServiceInvokerImpl.createSubmissionTask<A>(for:options:executionSource:expectingResponseOfType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  *(void *)(v8 + 16) = a1;
  char v12 = a7 & 1;
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v8 + 24) = v13;
  void *v13 = v8;
  v13[1] = closure #1 in closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:);
  return AceServiceInvokerImpl.performSubmit(_:bargeInResult:executionSource:)(a5, a6, v12, a8);
}

uint64_t AceServiceInvokerImpl.performSubmit(_:bargeInResult:executionSource:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  *(void *)(v5 + 88) = a4;
  *(void *)(v5 + 96) = v4;
  *(unsigned char *)(v5 + 25) = a3;
  *(void *)(v5 + 72) = a1;
  *(void *)(v5 + 80) = a2;
  uint64_t v6 = type metadata accessor for CancellationError();
  *(void *)(v5 + 104) = v6;
  *(void *)(v5 + 112) = *(void *)(v6 - 8);
  *(void *)(v5 + 120) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for RequestSummary.ExecutionSource();
  *(void *)(v5 + 128) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v5 + 136) = v8;
  *(void *)(v5 + 144) = *(void *)(v8 + 64);
  *(void *)(v5 + 152) = swift_task_alloc();
  return MEMORY[0x1F4188298](AceServiceInvokerImpl.performSubmit(_:bargeInResult:executionSource:), 0, 0);
}

uint64_t AceServiceInvokerImpl.performSubmit(_:bargeInResult:executionSource:)()
{
  uint64_t v31 = v0;
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0 + 96) + 152);
  id v2 = v1 + 4;
  uint64_t v3 = v1 + 5;
  os_unfair_lock_lock(v1 + 5);
  closure #1 in AceServiceInvokerImpl.performSubmit(_:bargeInResult:executionSource:)(v2, v30);
  os_unfair_lock_unlock(v3);
  if (v30[0])
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_1B9C64000, v5, v6, "Attempting to submit a command on an invalidated AceServiceInvoker. Skipping straight to barge-in response.", v7, 2u);
      MEMORY[0x1BA9E48C0](v7, -1, -1);
    }
    char v8 = *(unsigned char *)(v0 + 25);

    unint64_t v9 = *(void **)(v0 + 80);
    if (v8)
    {
      *(void *)(v0 + 64) = v9;
      id v27 = v9;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      swift_willThrowTypedImpl();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
      return v28();
    }
    else
    {
      id v10 = v9;
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v11 = *(uint64_t (**)(void *))(v0 + 8);
      return v11(v9);
    }
  }
  else
  {
    uint64_t v13 = *(void *)(v0 + 144);
    uint64_t v14 = *(void *)(v0 + 152);
    uint64_t v15 = *(void *)(v0 + 128);
    uint64_t v16 = *(void *)(v0 + 136);
    uint64_t v17 = *(void *)(v0 + 96);
    uint64_t v18 = *(void **)(v0 + 72);
    uint64_t v29 = *(void **)(v0 + 80);
    char v19 = *(unsigned char *)(v0 + 25) & 1;
    (*(void (**)(uint64_t, void, uint64_t))(v16 + 16))(v14, *(void *)(v0 + 88), v15);
    unint64_t v20 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    unint64_t v21 = (v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v22 = swift_allocObject();
    *(void *)(v0 + 160) = v22;
    *(void *)(v22 + 16) = v18;
    *(void *)(v22 + 24) = v17;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v16 + 32))(v22 + v20, v14, v15);
    unint64_t v23 = v22 + v21;
    *(void *)unint64_t v23 = v29;
    *(unsigned char *)(v23 + 8) = v19;
    outlined copy of Result<SABaseCommand?, Error>(v29);
    id v24 = v18;
    swift_retain();
    uint64_t v25 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v25;
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
    *uint64_t v25 = v0;
    v25[1] = AceServiceInvokerImpl.performSubmit(_:bargeInResult:executionSource:);
    return MEMORY[0x1F415AED8](v0 + 32, partial apply for closure #2 in AceServiceInvokerImpl.performSubmit(_:bargeInResult:executionSource:), v22, v26);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 176) = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = AceServiceInvokerImpl.performSubmit(_:bargeInResult:executionSource:);
  }
  else
  {
    swift_release();
    id v2 = AceServiceInvokerImpl.performSubmit(_:bargeInResult:executionSource:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 32);
  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  char v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void (*v18)(uint64_t, uint64_t);
  id v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  id v23;
  uint64_t (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  uint64_t v26 = v0;
  uint64_t v1 = *(void **)(v0 + 176);
  swift_release();
  *(void *)(v0 + 40) = v1;
  id v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {

    if (one-time initialization token for ace != -1) {
      swift_once();
    }
    uint64_t v3 = *(void **)(v0 + 80);
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.ace);
    outlined copy of Result<SABaseCommand?, Error>(v3);
    outlined copy of Result<SABaseCommand?, Error>(v3);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    uint64_t v7 = os_log_type_enabled(v5, v6);
    char v8 = *(void **)(v0 + 80);
    if (v7)
    {
      unint64_t v9 = *(unsigned char *)(v0 + 25) & 1;
      id v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v11 = v25;
      *(_DWORD *)id v10 = 136315138;
      *(void *)(v0 + 16) = v8;
      *(unsigned char *)(v0 + 24) = v9;
      outlined copy of Result<SABaseCommand?, Error>(v8);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<SABaseCommand?, Error>);
      char v12 = String.init<A>(describing:)();
      *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of Result<SABaseCommand?, Error>(v8);
      outlined consume of Result<SABaseCommand?, Error>(v8);
      _os_log_impl(&dword_1B9C64000, v5, v6, "AceServiceInvokerImpl: submission response was simulated because user barged in. Simulated result: %s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v11, -1, -1);
      MEMORY[0x1BA9E48C0](v10, -1, -1);
    }
    else
    {
      outlined consume of Result<SABaseCommand?, Error>(*(id *)(v0 + 80));
      outlined consume of Result<SABaseCommand?, Error>(v8);
    }

    uint64_t v15 = *(void *)(v0 + 112);
    uint64_t v14 = *(void *)(v0 + 120);
    uint64_t v16 = *(void *)(v0 + 104);
    uint64_t v17 = *(void **)(v0 + 80);
    if ((*(unsigned char *)(v0 + 25) & 1) == 0)
    {
      uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
      char v19 = v17;
      v18(v14, v16);

      unint64_t v20 = *(void *)(v0 + 80);
      swift_task_dealloc();
      swift_task_dealloc();
      unint64_t v21 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v21(v20);
    }
    *(void *)(v0 + 48) = v17;
    unint64_t v23 = v17;
    swift_willThrowTypedImpl();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  }
  else
  {
  }
  swift_task_dealloc();
  swift_task_dealloc();
  id v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

uint64_t closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:executionSource:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  return MEMORY[0x1F4188298](closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:executionSource:), 0, 0);
}

uint64_t closure #1 in closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:executionSource:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[14] = a5;
  v6[15] = a6;
  v6[12] = a3;
  v6[13] = a4;
  v6[10] = a1;
  v6[11] = a2;
  uint64_t v7 = type metadata accessor for RequestSummary.ExecutionSource();
  v6[16] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[17] = v8;
  v6[18] = *(void *)(v8 + 64);
  v6[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v6[20] = swift_task_alloc();
  v6[21] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:executionSource:), 0, 0);
}

uint64_t closure #1 in closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:executionSource:)()
{
  unint64_t v1 = *(void *)(v0 + 96);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
    *(void *)(v0 + 176) = v26;
    if (v26) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    *(void *)(v0 + 176) = v2;
    if (v2)
    {
LABEL_3:
      uint64_t v3 = *(void *)(v0 + 96);
      *(void *)(v0 + 184) = 0;
      if ((v3 & 0xC000000000000001) != 0) {
        id v4 = (id)MEMORY[0x1BA9E3990](0);
      }
      else {
        id v4 = *(id *)(v3 + 32);
      }
      uint64_t v5 = v4;
      *(void *)(v0 + 192) = v4;
      *(void *)(v0 + 200) = 1;
      uint64_t v6 = *(void *)(v0 + 168);
      uint64_t v7 = *(void *)(v0 + 152);
      uint64_t v29 = v6;
      uint64_t v31 = *(void *)(v0 + 160);
      uint64_t v9 = *(void *)(v0 + 128);
      uint64_t v8 = *(void *)(v0 + 136);
      uint64_t v11 = *(void *)(v0 + 112);
      uint64_t v10 = *(void *)(v0 + 120);
      uint64_t v30 = *(void *)(v0 + 104);
      uint64_t v12 = type metadata accessor for TaskPriority();
      uint64_t v13 = *(void *)(v12 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v6, 1, 1, v12);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v10, v9);
      unint64_t v14 = (*(unsigned __int8 *)(v8 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v15 = (char *)swift_allocObject();
      *((void *)v15 + 2) = 0;
      *((void *)v15 + 3) = 0;
      *((void *)v15 + 4) = v30;
      *((void *)v15 + 5) = v5;
      *((void *)v15 + 6) = v11;
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(&v15[v14], v7, v9);
      outlined init with copy of ReferenceResolutionClientProtocol?(v29, v31, &demangling cache variable for type metadata for TaskPriority?);
      LODWORD(v8) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v31, 1, v12);
      swift_retain();
      id v16 = v5;
      swift_bridgeObjectRetain();
      uint64_t v17 = *(void *)(v0 + 160);
      if (v8 == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 160), &demangling cache variable for type metadata for TaskPriority?);
      }
      else
      {
        TaskPriority.rawValue.getter();
        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v17, v12);
      }
      if (*((void *)v15 + 2))
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v18 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v20 = v19;
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v18 = 0;
        uint64_t v20 = 0;
      }
      uint64_t v21 = **(void **)(v0 + 88);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
      uint64_t v22 = v20 | v18;
      if (v20 | v18)
      {
        uint64_t v22 = v0 + 16;
        *(void *)(v0 + 16) = 0;
        *(void *)(v0 + 24) = 0;
        *(void *)(v0 + 32) = v18;
        *(void *)(v0 + 40) = v20;
      }
      uint64_t v23 = *(void *)(v0 + 168);
      *(void *)(v0 + 48) = 1;
      *(void *)(v0 + 56) = v22;
      *(void *)(v0 + 64) = v21;
      swift_task_create();
      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?(v23, &demangling cache variable for type metadata for TaskPriority?);
      id v24 = (void *)swift_task_alloc();
      *(void *)(v0 + 208) = v24;
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThrowingTaskGroup<SABaseCommand?, Error>);
      *id v24 = v0;
      v24[1] = closure #1 in closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:executionSource:);
      return MEMORY[0x1F4187E30](v0 + 72, 0, 0, v25);
    }
  }
  swift_bridgeObjectRelease();
  **(void **)(v0 + 80) = 0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v27 = *(uint64_t (**)(void))(v0 + 8);
  return v27();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 216) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = closure #1 in closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:executionSource:);
  }
  else
  {
    uint64_t v2 = closure #1 in closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:executionSource:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t (*v18)(void);
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  unint64_t v1 = *(void **)(v0 + 72);
  if (v1 == (void *)1) {
    goto LABEL_34;
  }
  if (!v1) {
    goto LABEL_12;
  }
  self;
  uint64_t v2 = swift_dynamicCastObjCClass();
  if (v2)
  {
    uint64_t v3 = objc_msgSend(self, sel_aceObjectWithGenericCommand_, v2);
    if (v3)
    {
      id v4 = v3;
      self;
      uint64_t v5 = swift_dynamicCastObjCClass();
      if (v5)
      {
        uint64_t v6 = (id)v5;
        goto LABEL_8;
      }
    }
LABEL_12:
    uint64_t v21 = *(void **)(v0 + 184);
    uint64_t v20 = *(void **)(v0 + 192);
    uint64_t v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96568]), sel_init);

    goto LABEL_13;
  }
  uint64_t v7 = v1;
  uint64_t v6 = v1;
LABEL_8:
  self;
  uint64_t v8 = swift_dynamicCastObjCClass();
  if (!v8)
  {
    uint64_t v19 = *(void **)(v0 + 184);

LABEL_13:
    outlined consume of SABaseCommand??(v1);
    uint64_t v22 = *(void *)(v0 + 200);
    if (v22 == *(void *)(v0 + 176))
    {
      swift_bridgeObjectRelease();
      **(void **)(v0 + 80) = v6;
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_15;
    }
    *(void *)(v0 + 184) = v6;
    id v24 = *(void *)(v0 + 96);
    if ((v24 & 0xC000000000000001) != 0) {
      uint64_t v25 = (id)MEMORY[0x1BA9E3990](v22);
    }
    else {
      uint64_t v25 = *(id *)(v24 + 8 * v22 + 32);
    }
    *(void *)(v0 + 192) = v25;
    *(void *)(v0 + 200) = v22 + 1;
    if (!__OFADD__(v22, 1))
    {
      uint64_t v26 = *(void *)(v0 + 168);
      id v27 = *(void *)(v0 + 152);
      uint64_t v53 = *(void *)(v0 + 160);
      uint64_t v28 = *(void *)(v0 + 128);
      uint64_t v29 = *(void *)(v0 + 136);
      uint64_t v31 = *(void *)(v0 + 112);
      uint64_t v30 = *(void *)(v0 + 120);
      uint64_t v51 = v26;
      id v52 = *(void *)(v0 + 104);
      uint64_t v32 = v25;
      uint64_t v33 = type metadata accessor for TaskPriority();
      uint64_t v34 = *(void *)(v33 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56))(v26, 1, 1, v33);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v27, v30, v28);
      uint64_t v35 = (*(unsigned __int8 *)(v29 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
      uint64_t v36 = (char *)swift_allocObject();
      *((void *)v36 + 2) = 0;
      *((void *)v36 + 3) = 0;
      *((void *)v36 + 4) = v52;
      *((void *)v36 + 5) = v32;
      *((void *)v36 + 6) = v31;
      (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))(&v36[v35], v27, v28);
      id v37 = v33;
      outlined init with copy of ReferenceResolutionClientProtocol?(v51, v53, &demangling cache variable for type metadata for TaskPriority?);
      LODWORD(v33) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v53, 1, v33);
      swift_retain();
      uint64_t v38 = v32;
      swift_bridgeObjectRetain();
      uint64_t v39 = *(void *)(v0 + 160);
      if (v33 == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 160), &demangling cache variable for type metadata for TaskPriority?);
      }
      else
      {
        TaskPriority.rawValue.getter();
        (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v39, v37);
      }
      if (*((void *)v36 + 2))
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v40 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v42 = v41;
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v40 = 0;
        uint64_t v42 = 0;
      }
      uint64_t v43 = **(void **)(v0 + 88);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
      uint64_t v44 = v42 | v40;
      if (v42 | v40)
      {
        uint64_t v44 = v0 + 16;
        *(void *)(v0 + 16) = 0;
        *(void *)(v0 + 24) = 0;
        *(void *)(v0 + 32) = v40;
        *(void *)(v0 + 40) = v42;
      }
      id v45 = *(void *)(v0 + 168);
      *(void *)(v0 + 48) = 1;
      *(void *)(v0 + 56) = v44;
      *(void *)(v0 + 64) = v43;
      swift_task_create();
      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?(v45, &demangling cache variable for type metadata for TaskPriority?);
      uint64_t v46 = (void *)swift_task_alloc();
      *(void *)(v0 + 208) = v46;
      uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThrowingTaskGroup<SABaseCommand?, Error>);
      void *v46 = v0;
      v46[1] = closure #1 in closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:executionSource:);
      uint64_t v48 = v0 + 72;
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      return MEMORY[0x1F4187E30](v48, v49, v50, v47);
    }
    __break(1u);
LABEL_34:

    __break(1u);
    return MEMORY[0x1F4187E30](v48, v49, v50, v47);
  }
  uint64_t v9 = v8;
  uint64_t v10 = type metadata accessor for SubmitCommandError();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type SubmitCommandError and conformance SubmitCommandError, 255, MEMORY[0x1E4FA1D30]);
  uint64_t v11 = (void *)swift_allocError();
  *uint64_t v12 = v9;
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v10 - 8) + 104))(v12, *MEMORY[0x1E4FA1D20], v10);
  swift_willThrow();
  swift_bridgeObjectRelease();
  outlined consume of SABaseCommand??(v1);
  unint64_t v14 = *(void **)(v0 + 184);
  uint64_t v13 = *(void **)(v0 + 192);
  lazy protocol witness table accessor for type SerialSubmissionError and conformance SerialSubmissionError();
  swift_allocError();
  *uint64_t v15 = v13;
  v15[1] = v11;
  id v16 = v13;
  uint64_t v17 = v11;
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
LABEL_15:
  return v18();
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  unint64_t v1 = (void *)v0[27];
  uint64_t v3 = (void *)v0[23];
  uint64_t v2 = (void *)v0[24];
  lazy protocol witness table accessor for type SerialSubmissionError and conformance SerialSubmissionError();
  swift_allocError();
  *id v4 = v2;
  v4[1] = v1;
  uint64_t v5 = v2;
  uint64_t v6 = v1;
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t closure #1 in closure #1 in closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:executionSource:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:executionSource:), 0, 0);
}

uint64_t closure #1 in closure #1 in closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:executionSource:)()
{
  unint64_t v1 = AceServiceInvokerImpl.preparedCommand(_:options:)(*(NSObject **)(v0 + 32), *(void *)(v0 + 40));
  *(void *)(v0 + 56) = v1;
  self;
  if (swift_dynamicCastObjCClass()
    || (self, swift_dynamicCastObjCClass())
    || (self, swift_dynamicCastObjCClass())
    || (self, swift_dynamicCastObjCClass()))
  {
    id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96568]), sel_init);
    char v3 = 0;
  }
  else
  {
    type metadata accessor for BargeInError();
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type BargeInError and conformance BargeInError, 255, MEMORY[0x1E4FA1B48]);
    id v2 = (id)swift_allocError();
    BargeInError.init(rawError:)();
    char v3 = 1;
  }
  *(unsigned char *)(v0 + 96) = v3;
  *(void *)(v0 + 64) = v2;
  id v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v4;
  *id v4 = v0;
  v4[1] = closure #1 in closure #1 in closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:executionSource:);
  uint64_t v5 = *(void *)(v0 + 48);
  return AceServiceInvokerImpl.performSubmit(_:bargeInResult:executionSource:)((uint64_t)v1, (uint64_t)v2, v3, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  unint64_t v1 = *(void *)(v0 + 88);
  id v2 = *(void **)(v0 + 56);
  char v3 = *(void **)(v0 + 16);
  outlined consume of Result<SABaseCommand?, Error>(*(id *)(v0 + 64));

  *char v3 = v1;
  id v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  unint64_t v1 = *(void **)(v0 + 56);
  outlined consume of Result<SABaseCommand?, Error>(*(id *)(v0 + 64));

  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t closure #1 in closure #1 in closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:executionSource:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 80) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = closure #1 in closure #1 in closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:executionSource:);
  }
  else
  {
    *(void *)(v4 + 88) = a1;
    uint64_t v5 = closure #1 in closure #1 in closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:executionSource:);
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

id specialized interpretResponse<A>(_:)(void *a1)
{
  if (!a1) {
    goto LABEL_6;
  }
  self;
  uint64_t v2 = swift_dynamicCastObjCClass();
  if (v2)
  {
    id v3 = objc_msgSend(self, sel_aceObjectWithGenericCommand_, v2);
    if (!v3)
    {
LABEL_6:
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAExecuteOnRemoteResponse);
      return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
    }
    uint64_t v4 = v3;
    self;
    id v5 = (id)swift_dynamicCastObjCClass();
    if (!v5)
    {

      goto LABEL_6;
    }
  }
  else
  {
    id v5 = a1;
  }
  self;
  uint64_t v7 = swift_dynamicCastObjCClass();
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = type metadata accessor for SubmitCommandError();
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type SubmitCommandError and conformance SubmitCommandError, 255, MEMORY[0x1E4FA1D30]);
    swift_allocError();
    *uint64_t v10 = v8;
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v9 - 8) + 104))(v10, *MEMORY[0x1E4FA1D20], v9);
    return (id)swift_willThrow();
  }
  self;
  id result = (id)swift_dynamicCastObjCClass();
  if (!result)
  {
    uint64_t v11 = type metadata accessor for SubmitCommandError();
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type SubmitCommandError and conformance SubmitCommandError, 255, MEMORY[0x1E4FA1D30]);
    swift_allocError();
    *uint64_t v12 = v5;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v11 - 8) + 104))(v12, *MEMORY[0x1E4FA1D28], v11);
    return (id)swift_willThrow();
  }
  return result;
}

id interpretResponse<A>(_:)(void *a1)
{
  if (!a1) {
    return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  }
  self;
  uint64_t v2 = swift_dynamicCastObjCClass();
  if (v2)
  {
    id v3 = objc_msgSend(self, sel_aceObjectWithGenericCommand_, v2);
    if (!v3) {
      return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
    }
    uint64_t v4 = v3;
    self;
    id v5 = (id)swift_dynamicCastObjCClass();
    if (!v5)
    {

      return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
    }
  }
  else
  {
    id v5 = a1;
  }
  self;
  uint64_t v7 = swift_dynamicCastObjCClass();
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = type metadata accessor for SubmitCommandError();
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type SubmitCommandError and conformance SubmitCommandError, 255, MEMORY[0x1E4FA1D30]);
    swift_allocError();
    uint64_t v11 = v10;
    *uint64_t v10 = v8;
    uint64_t v12 = (unsigned int *)MEMORY[0x1E4FA1D20];
LABEL_10:
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v9 - 8) + 104))(v11, *v12, v9);
    return (id)swift_willThrow();
  }
  id result = (id)swift_dynamicCastUnknownClass();
  if (!result)
  {
    uint64_t v9 = type metadata accessor for SubmitCommandError();
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type SubmitCommandError and conformance SubmitCommandError, 255, MEMORY[0x1E4FA1D30]);
    swift_allocError();
    uint64_t v11 = v13;
    uint64_t *v13 = (uint64_t)v5;
    uint64_t v12 = (unsigned int *)MEMORY[0x1E4FA1D28];
    goto LABEL_10;
  }
  return result;
}

unsigned char *closure #1 in AceServiceInvokerImpl.performSubmit(_:bargeInResult:executionSource:)@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void closure #2 in AceServiceInvokerImpl.performSubmit(_:bargeInResult:executionSource:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, int a6)
{
  int v59 = a6;
  uint64_t v57 = a5;
  uint64_t v60 = a1;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v56 = (uint64_t)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v58 = (char *)&v50 - v12;
  uint64_t v55 = type metadata accessor for RequestSummary.ExecutionSource();
  uint64_t v13 = *(void *)(v55 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v55);
  unint64_t v54 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v53 = (char *)&v50 - v16;
  if (one-time initialization token for ace != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.ace);
  id v61 = a2;
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v51 = a4;
    uint64_t v21 = (uint8_t *)v20;
    uint64_t v22 = swift_slowAlloc();
    aBlock[0] = v22;
    *(_DWORD *)uint64_t v21 = 136315138;
    id v23 = v61;
    id v24 = objc_msgSend(v61, sel_description, v21 + 4);
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v52 = a3;
    unint64_t v27 = v26;

    uint64_t v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a3 = v52;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v18, v19, "Submitting command: %s", v21, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v22, -1, -1);
    uint64_t v28 = v21;
    a4 = v51;
    MEMORY[0x1BA9E48C0](v28, -1, -1);
  }
  else
  {

    id v29 = v61;
  }
  uint64_t v30 = a3;
  uint64_t v31 = *(void *)(a3 + 40);
  uint64_t v51 = *(void *)(a3 + 48);
  uint64_t v52 = v31;
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v33 = v53;
  uint64_t v34 = v55;
  v32(v53, a4, v55);
  uint64_t v35 = type metadata accessor for FlowOutputMessage.InAppResponse();
  uint64_t v36 = (uint64_t)v58;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v58, 1, 1, v35);
  uint64_t v37 = (uint64_t)v54;
  v32(v54, (uint64_t)v33, v34);
  uint64_t v38 = v56;
  outlined init with copy of ReferenceResolutionClientProtocol?(v36, v56, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  id v39 = objc_allocWithZone((Class)type metadata accessor for ExecutionOutput());
  id v40 = v61;
  id v41 = v61;
  uint64_t v42 = swift_bridgeObjectRetain();
  id v43 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:executionSource:inAppResponse:)(v40, 0, 0, 0, 0, 0, 0, 0, 0, 0, v52, v42, v37, v38);

  outlined destroy of ReferenceResolutionClientProtocol?(v36, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v33, v34);
  AceServiceInvokerImpl.closeServerRequestIfRequired(givenCommand:)();
  uint64_t v44 = *(void **)(v30 + 16);
  uint64_t v45 = swift_allocObject();
  uint64_t v46 = v60;
  *(void *)(v45 + 16) = v41;
  *(void *)(v45 + 24) = v46;
  uint64_t v47 = v57;
  *(void *)(v45 + 32) = v57;
  *(unsigned char *)(v45 + 40) = v59 & 1;
  aBlock[4] = (uint64_t)partial apply for closure #1 in closure #2 in AceServiceInvokerImpl.performSubmit(_:bargeInResult:executionSource:);
  aBlock[5] = v45;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_213;
  uint64_t v48 = _Block_copy(aBlock);
  id v49 = v41;
  swift_retain();
  outlined copy of Result<SABaseCommand?, Error>(v47);
  swift_release();
  objc_msgSend(v44, sel_submitWithExecutionOutput_completion_, v43, v48);
  _Block_release(v48);
}

void closure #1 in closure #2 in AceServiceInvokerImpl.performSubmit(_:bargeInResult:executionSource:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  self;
  if (swift_dynamicCastObjCClass()
    || (self, swift_dynamicCastObjCClass())
    || (self, swift_dynamicCastObjCClass())
    || (self, swift_dynamicCastObjCClass()))
  {
    if (a2)
    {
      id v10 = a2;
      if (one-time initialization token for ace != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      __swift_project_value_buffer(v11, (uint64_t)static Logger.ace);
      id v12 = a2;
      id v13 = a2;
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        uint64_t v17 = swift_slowAlloc();
        uint64_t v31 = v17;
        *(_DWORD *)uint64_t v16 = 136315138;
        id v18 = a2;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
        uint64_t v19 = String.init<A>(describing:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1B9C64000, v14, v15, "AceServiceInvokerImpl: ignoring command submission error due to barge-in override logic: %s", v16, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v17, -1, -1);
        MEMORY[0x1BA9E48C0](v16, -1, -1);
      }
      else
      {
      }
      uint64_t v31 = a5;
      char v32 = a6 & 1;
      ManagedContinuation.resume(with:)();

      return;
    }
    if (a1)
    {
      self;
      if (swift_dynamicCastObjCClass())
      {
        if (one-time initialization token for ace != -1) {
          swift_once();
        }
        uint64_t v21 = type metadata accessor for Logger();
        __swift_project_value_buffer(v21, (uint64_t)static Logger.ace);
        id v22 = a1;
        id v23 = Logger.logObject.getter();
        os_log_type_t v24 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v23, v24))
        {
          uint64_t v25 = (uint8_t *)swift_slowAlloc();
          uint64_t v26 = swift_slowAlloc();
          uint64_t v31 = v26;
          *(_DWORD *)uint64_t v25 = 136315138;
          id v27 = v22;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
          uint64_t v28 = String.init<A>(describing:)();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v31);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B9C64000, v23, v24, "AceServiceInvokerImpl: ignoring SACommandFailed due to barge-in override logic: %s", v25, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v26, -1, -1);
          MEMORY[0x1BA9E48C0](v25, -1, -1);
        }
        else
        {
        }
        uint64_t v31 = a5;
        char v32 = a6 & 1;
        ManagedContinuation.resume(with:)();
        return;
      }
    }
LABEL_24:
    ManagedContinuation.resume(returning:)();
    return;
  }
  if (!a2) {
    goto LABEL_24;
  }
  id v30 = a2;
  ManagedContinuation.resume(throwing:)();
}

unint64_t AceServiceInvokerImpl.AceSubmitOptions.description.getter(uint64_t a1, void *a2)
{
  unint64_t v2 = 0xD00000000000001CLL;
  if (a2)
  {
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    v5._uint64_t countAndFlagsBits = a1;
    v5._object = a2;
    String.append(_:)(v5);
    v6._uint64_t countAndFlagsBits = 10537;
    v6._object = (void *)0xE200000000000000;
    String.append(_:)(v6);
    return 0xD00000000000002ALL;
  }
  return v2;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance AceServiceInvokerImpl.AceSubmitOptions()
{
  return AceServiceInvokerImpl.AceSubmitOptions.description.getter(*(void *)v0, *(void **)(v0 + 8));
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AceServiceInvokerImpl.AceSubmitOptions(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8)) {
    return *(void *)(a2 + 8) != 0;
  }
  else {
    return *(void *)(a2 + 8) == 0;
  }
}

id closure #2 in AceServiceInvokerImpl.addMissingComponentIds(_:setRefId:)@<X0>(void **a1@<X0>, int a2@<W1>, void *a3@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v53 = a5;
  unint64_t v54 = a4;
  id v52 = a3;
  int v55 = a2;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = *a1;
  id v13 = objc_msgSend(v12, sel_aceId);
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v17 = v16;

    swift_bridgeObjectRelease();
    uint64_t v18 = HIBYTE(v17) & 0xF;
    if ((v17 & 0x2000000000000000) == 0) {
      uint64_t v18 = v15 & 0xFFFFFFFFFFFFLL;
    }
    if (v18)
    {
LABEL_9:
      if ((v55 & 1) == 0) {
        goto LABEL_17;
      }
      goto LABEL_12;
    }
  }
  UUID.init()();
  uint64_t v19 = UUID.uuidString.getter();
  uint64_t v21 = v20;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  id v22 = (void *)MEMORY[0x1BA9E2DD0](v19, v21);
  swift_bridgeObjectRelease();
  objc_msgSend(v12, sel_setAceId_, v22);

  if (one-time initialization token for ace != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.ace);
  id v24 = v12;
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v51 = a6;
    id v27 = (uint8_t *)swift_slowAlloc();
    uint64_t v50 = swift_slowAlloc();
    uint64_t v57 = v50;
    *(_DWORD *)id v27 = 136315138;
    v48[1] = v27 + 4;
    id v49 = v27;
    id v28 = objc_msgSend(v24, sel_description);
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v31 = v30;

    uint64_t v32 = v29;
    a6 = v51;
    uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v31, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    uint64_t v33 = v49;
    _os_log_impl(&dword_1B9C64000, v25, v26, "Set missing aceId to: %s", v49, 0xCu);
    uint64_t v34 = v50;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v34, -1, -1);
    MEMORY[0x1BA9E48C0](v33, -1, -1);

    goto LABEL_9;
  }

  if ((v55 & 1) == 0) {
    goto LABEL_17;
  }
LABEL_12:
  id v35 = objc_msgSend(v12, sel_refId);
  if (!v35) {
    goto LABEL_16;
  }
  uint64_t v36 = v35;
  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v38 = a6;
  unint64_t v40 = v39;

  swift_bridgeObjectRelease();
  uint64_t v41 = HIBYTE(v40) & 0xF;
  BOOL v42 = (v40 & 0x2000000000000000) == 0;
  a6 = v38;
  if (v42) {
    uint64_t v41 = v37 & 0xFFFFFFFFFFFFLL;
  }
  if (!v41)
  {
LABEL_16:
    id v43 = objc_msgSend(v52, sel_refId);
    objc_msgSend(v12, sel_setRefId_, v43);
  }
LABEL_17:
  id v44 = objc_msgSend(v12, sel_dialog);
  if (v44)
  {
    id v45 = v44;
    uint64_t v46 = (void *)v54();
  }
  else
  {
    uint64_t v46 = 0;
  }
  objc_msgSend(v12, sel_setDialog_, v46);

  *a6 = v12;
  return v12;
}

uint64_t protocol witness for AceServiceInvoker.submit<A>(_:completion:) in conformance AceServiceInvokerImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AceServiceInvokerImpl.submit<A>(_:completion:)(a1, a2, a3, a4);
}

uint64_t protocol witness for AceServiceInvoker.submitWithoutRefId<A>(_:completion:) in conformance AceServiceInvokerImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AceServiceInvokerImpl.submitWithoutRefId<A>(_:completion:)(a1, a2, a3, a4);
}

uint64_t protocol witness for AceServiceInvoker.submitToCompanion<A>(_:completion:) in conformance AceServiceInvokerImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AceServiceInvokerImpl.submitToCompanion<A>(_:completion:)(a1, a2, a3, a4);
}

uint64_t protocol witness for AceServiceInvoker.submitToCompanionWithoutRefId<A>(_:completion:) in conformance AceServiceInvokerImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AceServiceInvokerImpl.submitToCompanionWithoutRefId<A>(_:completion:)(a1, a2, a3, a4);
}

uint64_t protocol witness for AceServiceInvoker.submitToRemote<A>(_:_:completion:) in conformance AceServiceInvokerImpl(NSObject *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return AceServiceInvokerImpl.submitToRemote<A>(_:_:completion:)(a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for AceServiceInvoker.submitAndForget(_:) in conformance AceServiceInvokerImpl(NSObject *a1)
{
  uint64_t v2 = type metadata accessor for RequestSummary.ExecutionSource();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  Swift::String v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FA24B8], v2);
  AceServiceInvokerImpl.submitAndForget(_:setRefId:executionSource:)(a1, 1, (uint64_t)v5);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void protocol witness for AceServiceInvoker.submitAndForget(_:) in conformance AceServiceInvokerImpl(Swift::OpaquePointer a1)
{
}

uint64_t protocol witness for AceServiceInvoker.submitAndForgetWithoutRefId(_:) in conformance AceServiceInvokerImpl(NSObject *a1)
{
  uint64_t v2 = type metadata accessor for RequestSummary.ExecutionSource();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  Swift::String v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FA24B8], v2);
  AceServiceInvokerImpl.submitAndForget(_:setRefId:executionSource:)(a1, 0, (uint64_t)v5);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t protocol witness for AceServiceInvoker.submitAllSerial(_:_:) in conformance AceServiceInvokerImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AceServiceInvokerImpl.submitAllSerial(_:_:)(a1, a2, a3);
}

uint64_t protocol witness for AceServiceInvoker.submitAllSerialWithoutRefId(_:_:) in conformance AceServiceInvokerImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for RequestSummary.ExecutionSource();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  id v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *v3;
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E4FA24B8], v10);
  uint64_t v15 = AceServiceInvokerImpl._submitAllSerialPrep(_:setRefId:executionSource:)(a1, 0, (uint64_t)v13);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v9, 1, 1, v16);
  unint64_t v17 = (void *)swift_allocObject();
  v17[2] = 0;
  v17[3] = 0;
  v17[4] = v14;
  v17[5] = v15;
  v17[6] = a2;
  v17[7] = a3;
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5Tm((uint64_t)v9, (uint64_t)&closure #1 in AceServiceInvokerImpl.submitAllSerialWithoutRefId(_:_:)partial apply, (uint64_t)v17);
  return swift_release();
}

uint64_t protocol witness for AceServiceInvoker.submitAllSerial(_:_:) in conformance AceServiceInvokerImpl(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  return AceServiceInvokerImpl.submitAllSerial(_:_:)(a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for AceServiceInvoker.submitAllSerialWithoutRefId(_:_:) in conformance AceServiceInvokerImpl(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v26 = a5;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v11 - 8);
  id v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for RequestSummary.ExecutionSource();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  unint64_t v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *v6;
  uint64_t v19 = swift_unknownObjectRetain();
  uint64_t v20 = specialized Array.init<A>(_:)(v19, a2, a3, a4);
  swift_unknownObjectRelease();
  (*(void (**)(char *, void, uint64_t))(v15 + 104))(v17, *MEMORY[0x1E4FA24B8], v14);
  uint64_t v21 = AceServiceInvokerImpl._submitAllSerialPrep(_:setRefId:executionSource:)(v20, 0, (uint64_t)v17);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  uint64_t v22 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v13, 1, 1, v22);
  uint64_t v23 = (void *)swift_allocObject();
  v23[2] = 0;
  uint64_t v23[3] = 0;
  unsigned char v23[4] = v18;
  v23[5] = v21;
  v23[6] = v26;
  v23[7] = a6;
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5Tm((uint64_t)v13, (uint64_t)&closure #1 in AceServiceInvokerImpl.submitAllSerialWithoutRefId(_:_:)partial apply, (uint64_t)v23);
  swift_bridgeObjectRelease();
  return swift_release();
}

void protocol witness for AceServiceInvoker.prepareForAudioHandoff(completion:) in conformance AceServiceInvokerImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(*(void *)v2 + 16);
  v5[4] = a1;
  v5[5] = a2;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1107296256;
  _OWORD v5[2] = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
  v5[3] = &block_descriptor_115;
  uint64_t v4 = _Block_copy(v5);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_prepareForAudioHandoffWithCompletion_, v4);
  _Block_release(v4);
}

void protocol witness for AceServiceInvoker.prepareForAudioHandoffFailed(completion:) in conformance AceServiceInvokerImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(*(void *)v2 + 16);
  v5[4] = a1;
  v5[5] = a2;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1107296256;
  _OWORD v5[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v5[3] = &block_descriptor_112;
  uint64_t v4 = _Block_copy(v5);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_prepareForAudioHandoffFailedWithCompletion_, v4);
  _Block_release(v4);
}

void protocol witness for AceServiceInvoker.clearCompletionForNextRequest() in conformance AceServiceInvokerImpl()
{
}

BOOL protocol witness for AceServiceInvoker.isExecutingOnBehalfOfInvocationDevice.getter in conformance AceServiceInvokerImpl()
{
  return AceServiceInvokerImpl.isExecutingOnBehalfOfInvocationDevice.getter();
}

uint64_t protocol witness for AceServiceInvokerAsync.submit<A>(_:setRefId:) in conformance AceServiceInvokerImpl(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v8 = *v3;
  uint64_t v9 = swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *(void *)uint64_t v9 = v4;
  *(void *)(v9 + 24) = a3;
  *(void *)(v9 + 32) = v8;
  *(unsigned char *)(v9 + 72) = a2;
  *(void *)(v9 + 8) = protocol witness for AceServiceInvokerAsync.submit<A>(_:setRefId:) in conformance AceServiceInvokerImpl;
  *(void *)(v9 + 16) = a1;
  return MEMORY[0x1F4188298](AceServiceInvokerImpl.submit<A>(_:setRefId:), 0, 0);
}

uint64_t protocol witness for AceServiceInvokerAsync.submitToCompanion<A>(_:setRefId:) in conformance AceServiceInvokerImpl(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v8 = *v3;
  uint64_t v9 = swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *(void *)uint64_t v9 = v4;
  *(void *)(v9 + 24) = a3;
  *(void *)(v9 + 32) = v8;
  *(unsigned char *)(v9 + 72) = a2;
  *(void *)(v9 + 8) = protocol witness for AceServiceInvokerAsync.submit<A>(_:setRefId:) in conformance AceServiceInvokerImpl;
  *(void *)(v9 + 16) = a1;
  return MEMORY[0x1F4188298](AceServiceInvokerImpl.submitToCompanion<A>(_:setRefId:), 0, 0);
}

uint64_t protocol witness for AceServiceInvokerAsync.submitToRemote<A>(_:_:setRefId:) in conformance AceServiceInvokerImpl(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v12 = *v5;
  uint64_t v13 = swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *(void *)uint64_t v13 = v6;
  *(void *)(v13 + 40) = a5;
  *(void *)(v13 + 48) = v12;
  *(unsigned char *)(v13 + 88) = a4;
  *(void *)(v13 + 24) = a2;
  *(void *)(v13 + 32) = a3;
  *(void *)(v13 + 8) = protocol witness for AceServiceInvokerAsync.submitToRemote<A>(_:_:setRefId:) in conformance AceServiceInvokerImpl;
  *(void *)(v13 + 16) = a1;
  return MEMORY[0x1F4188298](AceServiceInvokerImpl.submitToRemote<A>(_:_:setRefId:), 0, 0);
}

uint64_t protocol witness for AceServiceInvokerAsync.submitToRemote<A>(_:_:setRefId:) in conformance AceServiceInvokerImpl(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  Swift::String v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

uint64_t protocol witness for AceServiceInvokerAsync.submitAllSerial(_:setRefId:) in conformance AceServiceInvokerImpl(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 80) = a2;
  *(void *)(v3 + 16) = a1;
  uint64_t v4 = type metadata accessor for RequestSummary.ExecutionSource();
  *(void *)(v3 + 24) = v4;
  *(void *)(v3 + 32) = *(void *)(v4 - 8);
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = *v2;
  *(void *)(v3 + 40) = v5;
  *(void *)(v3 + 48) = v6;
  return MEMORY[0x1F4188298](protocol witness for AceServiceInvokerAsync.submitAllSerial(_:setRefId:) in conformance AceServiceInvokerImpl, 0, 0);
}

uint64_t protocol witness for AceServiceInvokerAsync.submitAllSerial(_:setRefId:) in conformance AceServiceInvokerImpl()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  char v4 = *(unsigned char *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 16);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v1, *MEMORY[0x1E4FA24B8], v2);
  uint64_t v6 = AceServiceInvokerImpl._submitAllSerialPrep(_:setRefId:executionSource:)(v5, v4, v1);
  *(void *)(v0 + 56) = v6;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v7;
  void *v7 = v0;
  v7[1] = protocol witness for AceServiceInvokerAsync.submitAllSerial(_:setRefId:) in conformance AceServiceInvokerImpl;
  return AceServiceInvokerImpl._submitAllSerialExecute(_:)(v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = protocol witness for AceServiceInvokerAsync.submitAllSerial(_:setRefId:) in conformance AceServiceInvokerImpl;
  }
  else {
    uint64_t v2 = protocol witness for AceServiceInvokerAsync.submitAllSerial(_:setRefId:) in conformance AceServiceInvokerImpl;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t protocol witness for AceServiceInvokerAsync.submitAllSerial(_:setRefId:executionSource:) in conformance AceServiceInvokerImpl(uint64_t a1, char a2, uint64_t a3)
{
  *(unsigned char *)(v4 + 64) = a2;
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a3;
  *(void *)(v4 + 32) = *v3;
  return MEMORY[0x1F4188298](AceServiceInvokerImpl.submitAllSerial(_:setRefId:executionSource:), 0, 0);
}

uint64_t protocol witness for AceServiceInvokerAsync.submitAndForget(_:setRefId:executionSource:) in conformance AceServiceInvokerImpl(unint64_t a1, char a2, uint64_t a3)
{
  return AceServiceInvokerImpl.submitAndForget(_:setRefId:executionSource:)(a1, a2, a3);
}

void protocol witness for AceServiceInvokerAsync.submitInAppResponse(executionSource:inAppResponse:) in conformance AceServiceInvokerImpl(NSObject *a1, uint64_t a2)
{
}

uint64_t protocol witness for AceServiceInvoker.currentStartRequestId() in conformance AceServiceInvokerImpl()
{
  uint64_t v1 = *v0;
  if (*(void *)(*v0 + 64))
  {
    uint64_t v2 = *(void *)(v1 + 56);
  }
  else
  {
    uint64_t v2 = *(void *)(v1 + 40);
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  return v2;
}

id protocol witness for AceServiceInvoker.peerInfo() in conformance AceServiceInvokerImpl@<X0>(uint64_t *a1@<X8>)
{
  id v6 = *(id *)(*(void *)(*(void *)v1 + 32) + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_peerInfo);
  uint64_t v3 = type metadata accessor for PeerInfoProvider();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v6;
  a1[3] = v3;
  a1[4] = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type PeerInfoProvider and conformance PeerInfoProvider, 255, (void (*)(uint64_t))type metadata accessor for PeerInfoProvider);
  *a1 = v4;

  return v6;
}

id protocol witness for AceServiceInvoker.endpointInfo() in conformance AceServiceInvokerImpl@<X0>(uint64_t *a1@<X8>)
{
  id v6 = *(id *)(*(void *)(*(void *)v1 + 32) + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_endpointInfo);
  uint64_t v3 = type metadata accessor for EndpointInfoProvider();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v6;
  a1[3] = v3;
  a1[4] = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type EndpointInfoProvider and conformance EndpointInfoProvider, 255, (void (*)(uint64_t))type metadata accessor for EndpointInfoProvider);
  *a1 = v4;

  return v6;
}

uint64_t protocol witness for AceServiceInvokerAsync.prepareForAudioHandoff() in conformance AceServiceInvokerImpl()
{
  *(void *)(v1 + 16) = *v0;
  return MEMORY[0x1F4188298](AceServiceInvokerImpl.prepareForAudioHandoff(), 0, 0);
}

uint64_t protocol witness for AceServiceInvokerAsync.prepareForAudioHandoffFailed() in conformance AceServiceInvokerImpl()
{
  *(void *)(v1 + 16) = *v0;
  return MEMORY[0x1F4188298](AceServiceInvokerImpl.prepareForAudioHandoffFailed(), 0, 0);
}

uint64_t protocol witness for AceServiceInvokerAsync.recentDialogs() in conformance AceServiceInvokerImpl()
{
  *(void *)(v1 + 24) = *v0;
  return MEMORY[0x1F4188298](AceServiceInvokerImpl.recentDialogs(), 0, 0);
}

uint64_t protocol witness for AceServiceInvokerAsync.submitExternalActivationRequest(withRequestInfo:) in conformance AceServiceInvokerImpl(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = v3;
  return MEMORY[0x1F4188298](protocol witness for AceServiceInvokerAsync.submitExternalActivationRequest(withRequestInfo:) in conformance AceServiceInvokerImpl, 0, 0);
}

uint64_t protocol witness for AceServiceInvokerAsync.submitExternalActivationRequest(withRequestInfo:) in conformance AceServiceInvokerImpl()
{
  uint64_t v1 = (int8x16_t *)swift_task_alloc();
  v0[3].i64[0] = (uint64_t)v1;
  v1[1] = vextq_s8(v0[2], v0[2], 8uLL);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[3].i64[1] = (uint64_t)v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Bool, Error?));
  void *v2 = v0;
  v2[1] = AceServiceInvokerImpl.submitExternalActivationRequest(withRequestInfo:);
  return MEMORY[0x1F41880D8](&v0[1], 0, 0, 0xD000000000000031, 0x80000001BA061E20, closure #1 in AceServiceInvokerImpl.submitExternalActivationRequest(withRequestInfo:)partial apply, v1, v3);
}

uint64_t protocol witness for AceServiceInvokerAsync.postToMessageBus(message:) in conformance AceServiceInvokerImpl(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = protocol witness for AceServiceInvokerAsync.postToMessageBus(message:) in conformance AceServiceInvokerImpl;
  return AceServiceInvokerImpl.postToMessageBus(message:)(a1);
}

uint64_t protocol witness for AceServiceInvokerAsync.postToMessageBus(message:) in conformance AceServiceInvokerImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *v2;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  return v5(a1, a2);
}

uint64_t protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return AceServiceInvokerImpl.publish(nlContext:)(a1);
}

uint64_t protocol witness for FlowContextPublishing.publish(dialogEngineOutput:executionSource:) in conformance AceServiceInvokerImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return AceServiceInvokerImpl.publish(dialogEngineOutput:executionSource:)(a1, a2);
}

uint64_t protocol witness for FlowContextPublishing.isAvailable() in conformance AceServiceInvokerImpl()
{
  return 1;
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance SerialSubmissionError()
{
  return MEMORY[0x1F4185E00]();
}

uint64_t closure #1 in SubmissionTaskRegistry.register(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *a1;
  *a1 = 0x8000000000000000;
  uint64_t v7 = specialized _NativeSet.update(with:isUnique:)(a2, isUniquelyReferenced_nonNull_native);
  *a1 = v9;
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v7;
  return result;
}

uint64_t closure #1 in SubmissionTaskRegistry.cancelAll()@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v19 = *(void *)(*a1 + 16);
  uint64_t v3 = *a1 + 56;
  uint64_t v4 = 1 << *(unsigned char *)(*a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(v2 + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n();
  int64_t v9 = 0;
  for (i = MEMORY[0x1E4FBC0F0]; ; uint64_t result = MEMORY[0x1BA9E3300](v13, v14, v15, i))
  {
    if (v6)
    {
      unint64_t v11 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v12 = v11 | (v9 << 6);
      goto LABEL_5;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v16 >= v7) {
      goto LABEL_25;
    }
    unint64_t v17 = *(void *)(v3 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v7) {
        goto LABEL_25;
      }
      unint64_t v17 = *(void *)(v3 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v7) {
          goto LABEL_25;
        }
        unint64_t v17 = *(void *)(v3 + 8 * v9);
        if (!v17)
        {
          int64_t v9 = v16 + 3;
          if (v16 + 3 >= v7) {
            goto LABEL_25;
          }
          unint64_t v17 = *(void *)(v3 + 8 * v9);
          if (!v17)
          {
            int64_t v9 = v16 + 4;
            if (v16 + 4 >= v7) {
              goto LABEL_25;
            }
            unint64_t v17 = *(void *)(v3 + 8 * v9);
            if (!v17) {
              break;
            }
          }
        }
      }
    }
LABEL_24:
    unint64_t v6 = (v17 - 1) & v17;
    unint64_t v12 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_5:
    uint64_t v13 = *(void *)(*(void *)(v2 + 48) + 8 * v12);
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  }
  int64_t v18 = v16 + 5;
  if (v18 >= v7)
  {
LABEL_25:
    swift_release();
    uint64_t result = swift_bridgeObjectRelease_n();
    *a1 = MEMORY[0x1E4FBC870];
    *a2 = v19;
    return result;
  }
  unint64_t v17 = *(void *)(v3 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v7) {
      goto LABEL_25;
    }
    unint64_t v17 = *(void *)(v3 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_24;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v1 = v4;
  uint64_t v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_27;
  }
  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain();
    unint64_t v4 = MEMORY[0x1BA9E39A0](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    unint64_t *v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = specialized Array._copyContents(initializing:)(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (unint64_t *)type metadata accessor for RemoteFlowPluginPackage, &lazy protocol witness table cache variable for type [RemoteFlowPluginPackage] and conformance [A], &demangling cache variable for type metadata for [RemoteFlowPluginPackage], (uint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, MEMORY[0x1E4FA3828], &lazy protocol witness table cache variable for type [UsoEntity] and conformance [A], &demangling cache variable for type metadata for [UsoEntity], (uint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
}

{
  uint64_t v1;
  unint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  unint64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    uint64_t v15 = v4 + v2;
  }
  else {
    uint64_t v15 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v10 = (unint64_t)&v3[5 * v9 + 4];
  if (a1 + 32 < v10 + 40 * v8 && v10 < a1 + 32 + 40 * v8) {
    goto LABEL_24;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConversationHandler);
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), MEMORY[0x1E4FA2CF0]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), MEMORY[0x1E4FA2CA0]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &demangling cache variable for type metadata for ExecutionOverride);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &demangling cache variable for type metadata for PreExecutionRule);
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  unint64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    uint64_t v14 = v4 + v2;
  }
  else {
    uint64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  uint64_t v12 = __OFADD__(v11, v2);
  BOOL v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), MEMORY[0x1E4FA1F68]);
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  unint64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    uint64_t v14 = v4 + v2;
  }
  else {
    uint64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = (unint64_t)&v3[4 * v8 + 4];
  if (a1 + 32 < v9 + 32 * v2 && v9 < a1 + 32 + 32 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  uint64_t v12 = __OFADD__(v11, v2);
  BOOL v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  unint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int64_t v16;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  unint64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native)
  {
    uint64_t v8 = v3[3] >> 1;
    if (v8 >= v5)
    {
      uint64_t v9 = *(void *)(a1 + 16);
      if (v9) {
        goto LABEL_5;
      }
LABEL_18:
      if (!v2) {
        goto LABEL_19;
      }
      goto LABEL_21;
    }
  }
  if (v4 <= v5) {
    int64_t v16 = v4 + v2;
  }
  else {
    int64_t v16 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v16, 1, v3);
  uint64_t v8 = v3[3] >> 1;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v10 = v3[2];
  if (v8 - v10 < (uint64_t)v9)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v11 = (unint64_t)&v3[3 * v10 + 4];
  if (a1 + 32 < v11 + 24 * v9 && v11 < a1 + 32 + 24 * v9) {
    goto LABEL_24;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (appBundleId: String, userData: [String : Any]));
  swift_arrayInitWithCopy();
  if (v9 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  BOOL v13 = v3[2];
  uint64_t v14 = __OFADD__(v13, v9);
  uint64_t v15 = v13 + v9;
  if (!v14)
  {
    v3[2] = v15;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v6 + v4 <= *(void *)(v5 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
  uint64_t v5 = a2();
  if (!*(void *)(a1 + 16))
  {
LABEL_15:
    if (!v4) {
      goto LABEL_16;
    }
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v10 = *(void *)(v5 + 16);
  uint64_t v11 = (*(void *)(v5 + 24) >> 1) - v10;
  uint64_t v12 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a3) - 8);
  uint64_t v13 = *(void *)(v12 + 72);
  if (v11 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v14 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v15 = v5 + v14 + v13 * v10;
  unint64_t v16 = a1 + v14;
  uint64_t v17 = v13 * v4;
  unint64_t v18 = v15 + v17;
  unint64_t v19 = v16 + v17;
  if (v16 < v18 && v15 < v19) {
    goto LABEL_21;
  }
  swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v3 = v5;
    return result;
  }
  uint64_t v21 = *(void *)(v5 + 16);
  BOOL v22 = __OFADD__(v21, v4);
  uint64_t v23 = v21 + v4;
  if (!v22)
  {
    *(void *)(v5 + 16) = v23;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t result;

  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v6 + v4 <= *(void *)(v5 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
  uint64_t v5 = a2();
  if (!*(void *)(a1 + 16))
  {
LABEL_15:
    if (!v4) {
      goto LABEL_16;
    }
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v10 = *(void *)(v5 + 16);
  if ((*(void *)(v5 + 24) >> 1) - v10 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v11 = v5 + 40 * v10 + 32;
  if (a1 + 32 < v11 + 40 * v4 && v11 < a1 + 32 + 40 * v4) {
    goto LABEL_21;
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v3 = v5;
    return result;
  }
  uint64_t v13 = *(void *)(v5 + 16);
  unint64_t v14 = __OFADD__(v13, v4);
  unint64_t v15 = v13 + v4;
  if (!v14)
  {
    *(void *)(v5 + 16) = v15;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v12 = *v5;
  if (*v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v14 = v13 + v11;
    if (!__OFADD__(v13, v11)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v14 = v13 + v11;
  if (__OFADD__(v13, v11)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v12 = *v5;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v5 = v12;
  uint64_t v13 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v12 & 0x8000000000000000) == 0
    && (v12 & 0x4000000000000000) == 0)
  {
    uint64_t v16 = v12 & 0xFFFFFFFFFFFFFF8;
    if (v14 <= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v13 = 1;
  }
  uint64_t v23 = v11;
  uint64_t v11 = (uint64_t)a2;
  a2 = a3;
  a3 = (unint64_t *)a4;
  a4 = a5;
  if (v12 >> 62) {
    goto LABEL_27;
  }
  uint64_t v17 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v17 <= v14) {
      uint64_t v17 = v14;
    }
    swift_bridgeObjectRetain();
    unint64_t v12 = MEMORY[0x1BA9E39A0](v13, v17, 1, v12);
    swift_bridgeObjectRelease();
    *uint64_t v5 = v12;
    uint64_t v16 = v12 & 0xFFFFFFFFFFFFFF8;
    a5 = a4;
    a4 = (uint64_t *)a3;
    a3 = a2;
    a2 = (unint64_t *)v11;
    uint64_t v11 = v23;
LABEL_15:
    uint64_t result = specialized Array._copyContents(initializing:)(v16 + 8 * *(void *)(v16 + 16) + 32, (*(void *)(v16 + 24) >> 1) - *(void *)(v16 + 16), a1, (void (*)(void))a2, a3, a4, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))a5);
    if (v19 >= v11) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v19 >= 1)
  {
    uint64_t v20 = *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v21 = __OFADD__(v20, v19);
    uint64_t v22 = v20 + v19;
    if (v21)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) = v22;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v6 + v4 <= *(void *)(v5 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
  uint64_t v5 = a2();
  if (!*(void *)(a1 + 16))
  {
LABEL_15:
    if (!v4) {
      goto LABEL_16;
    }
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v10 = *(void *)(v5 + 16);
  uint64_t v11 = (*(void *)(v5 + 24) >> 1) - v10;
  uint64_t v12 = *(void *)(a3(0) - 8);
  uint64_t v13 = *(void *)(v12 + 72);
  if (v11 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v14 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v15 = v5 + v14 + v13 * v10;
  unint64_t v16 = a1 + v14;
  uint64_t v17 = v13 * v4;
  unint64_t v18 = v15 + v17;
  unint64_t v19 = v16 + v17;
  if (v16 < v18 && v15 < v19) {
    goto LABEL_21;
  }
  swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v3 = v5;
    return result;
  }
  uint64_t v21 = *(void *)(v5 + 16);
  BOOL v22 = __OFADD__(v21, v4);
  uint64_t v23 = v21 + v4;
  if (!v22)
  {
    *(void *)(v5 + 16) = v23;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    unint64_t v16 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  BOOL v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  id v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.update(with:isUnique:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  Task.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  uint64_t v9 = v5 + 56;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
    goto LABEL_8;
  }
  swift_retain();
  char v10 = static Task.== infix(_:_:)();
  swift_release();
  if (v10)
  {
    uint64_t v11 = 0;
    char v12 = 1;
    goto LABEL_10;
  }
  uint64_t v13 = ~v7;
  unint64_t v8 = (v8 + 1) & v13;
  if ((*(void *)(v9 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    while (1)
    {
      swift_retain();
      char v12 = static Task.== infix(_:_:)();
      swift_release();
      if (v12) {
        break;
      }
      unint64_t v8 = (v8 + 1) & v13;
      if (((*(void *)(v9 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_9;
      }
    }
    uint64_t v11 = 0;
  }
  else
  {
LABEL_8:
    char v12 = 0;
LABEL_9:
    uint64_t v11 = 1;
  }
LABEL_10:
  uint64_t v14 = *(void *)(v5 + 16);
  uint64_t v15 = v14 + v11;
  if (__OFADD__(v14, v11))
  {
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v16 = *(void *)(v5 + 24);
  if (v16 >= v15 && (a2 & 1) != 0)
  {
    if ((v12 & 1) == 0) {
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  if (a2)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v16 >= v15)
    {
      specialized _NativeSet.copy()();
      if ((v12 & 1) == 0)
      {
LABEL_29:
        uint64_t v25 = *v3;
        *(void *)(*v3 + 8 * (v8 >> 6) + 56) |= 1 << v8;
        *(void *)(*(void *)(v25 + 48) + 8 * v8) = a1;
        uint64_t v26 = *(void *)(v25 + 16);
        BOOL v27 = __OFADD__(v26, 1);
        uint64_t v28 = v26 + 1;
        if (!v27)
        {
          uint64_t result = 0;
          *(void *)(v25 + 16) = v28;
          return result;
        }
        goto LABEL_33;
      }
LABEL_27:
      uint64_t v23 = *(void *)(*v3 + 48);
      uint64_t result = *(void *)(v23 + 8 * v8);
      *(void *)(v23 + 8 * v8) = a1;
      return result;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v29 = v2;
  uint64_t v17 = *v2;
  Hasher.init(_seed:)();
  Task.hash(into:)();
  Swift::Int v18 = Hasher._finalize()();
  uint64_t v19 = -1 << *(unsigned char *)(v17 + 32);
  unint64_t v8 = v18 & ~v19;
  if (((*(void *)(v17 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
    goto LABEL_28;
  }
  swift_retain();
  char v20 = static Task.== infix(_:_:)();
  swift_release();
  if ((v20 & 1) == 0)
  {
    uint64_t v21 = ~v19;
    while (1)
    {
      unint64_t v8 = (v8 + 1) & v21;
      if (((*(void *)(v17 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        break;
      }
      swift_retain();
      char v22 = static Task.== infix(_:_:)();
      swift_release();
      if (v22) {
        goto LABEL_26;
      }
    }
LABEL_28:
    uint64_t v3 = v29;
    if ((v12 & 1) == 0) {
      goto LABEL_29;
    }
    goto LABEL_34;
  }
LABEL_26:
  uint64_t v3 = v29;
  if (v12) {
    goto LABEL_27;
  }
LABEL_34:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Task<SABaseCommand?, Error>);
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    _OWORD v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (void *)v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    char v20 = *(void **)(*(void *)(a4 + 56) + 8 * v16);
    *uint64_t v11 = v20;
    if (v13 == v10)
    {
      id v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    uint64_t result = v20;
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  uint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    uint64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    uint64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  uint64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    uint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    int64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(void *)(*(void *)(a4 + 48) + 8 * v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  uint64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10) {
    goto LABEL_30;
  }
  int64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    uint64_t v7 = 0;
    uint64_t v8 = v13;
    goto LABEL_34;
  }
  int64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    uint64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    uint64_t v7 = (v14 - 1) & v14;
    int64_t v12 = v16 + (v13 << 6);
    uint64_t v8 = v13;
    goto LABEL_8;
  }
  unint64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  int64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    uint64_t v13 = v15;
    goto LABEL_19;
  }
  uint64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    uint64_t v7 = 0;
    uint64_t v8 = v13 + 2;
    goto LABEL_34;
  }
  int64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  unint64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    uint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  int64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    uint64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v10)
    {
      uint64_t v7 = 0;
      uint64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    int64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    _OWORD v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    char v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  uint64_t v21;

  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    _OWORD v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    char v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t (*v6)();

  uint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

void (*specialized Array.subscript.read(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)MEMORY[0x1BA9E3990](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

void Array.subscript.readspecialized (id *a1)
{
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = MEMORY[0x1BA9E3990](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    *uint64_t v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = MEMORY[0x1BA9E3990](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    *uint64_t v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

uint64_t Array.subscript.readspecialized ()
{
  return swift_release();
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [DialogElement] and conformance [A], &demangling cache variable for type metadata for [DialogElement]);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DialogElement]);
          int64_t v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for DialogElement);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static AceMetricsLogger.logRemoteAnalytics(service:command:)(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for OSSignpostID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = a1;
  uint64_t v8 = one-time initialization token for executor;
  swift_retain();
  if (v8 != -1) {
    swift_once();
  }
  id v9 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.instrumentation);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_1B9C64000, v11, v12, "Logging Analytics to remote device", v13, 2u);
    MEMORY[0x1BA9E48C0](v13, -1, -1);
  }

  self;
  uint64_t v14 = swift_dynamicCastObjCClass();
  if (v14)
  {
    unint64_t v15 = (void *)v14;
    id v16 = a2;
    uint64_t v17 = specialized static ViewMetricsLogger.getSparseAddViews(addViews:)(v15);
  }
  else
  {
    self;
    uint64_t v18 = swift_dynamicCastObjCClass();
    if (!v18) {
      goto LABEL_15;
    }
    int64_t v19 = (void *)v18;
    id v20 = a2;
    uint64_t v17 = (uint64_t)specialized static SayMetricsLogger.getSparseCommand(command:)(v19);
  }
  uint64_t v21 = (void *)v17;

  unint64_t v22 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  unint64_t v39 = v22;
  id v23 = objc_msgSend(v21, sel_dictionary);
  if (v23)
  {
    id v24 = v23;
    uint64_t v38 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableDictionary);
    *(void *)&long long v37 = v24;
    outlined init with take of Any(&v37, v36);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v35 = v22;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v36, 0x6C46746E65696C43, 0xEE0077656956776FLL, isUniquelyReferenced_nonNull_native);
    unint64_t v39 = v35;
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized Dictionary._Variant.removeValue(forKey:)(0x6C46746E65696C43, 0xEE0077656956776FLL, &v37);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v37, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  uint64_t v26 = specialized static AceMetricsLogger.makeJSONFromDictionary(dictionary:)();
  uint64_t v28 = v27;
  swift_bridgeObjectRelease();
  id v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F967A8]), sel_init);
  unint64_t v30 = (void *)MEMORY[0x1BA9E2DD0](0x52524F454E4B53, 0xE700000000000000);
  objc_msgSend(v29, sel_setEventName_, v30);

  unint64_t v31 = (void *)MEMORY[0x1BA9E2DD0](v26, v28);
  swift_bridgeObjectRelease();
  objc_msgSend(v29, sel_setEventValue_, v31);

  type metadata accessor for AceServiceInvokerImpl();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type AceServiceInvokerImpl and conformance AceServiceInvokerImpl, v32, (void (*)(uint64_t))type metadata accessor for AceServiceInvokerImpl);
  AceServiceInvokerAsync.submitAndForget(_:)();

LABEL_15:
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return swift_release();
}

void specialized static AceMetricsLogger.logAnalytics(command:)(os_log_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OSSignpostID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  id v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  id v10 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  self;
  uint64_t v11 = swift_dynamicCastObjCClass();
  if (v11)
  {
    os_log_type_t v12 = (void *)v11;
    uint64_t v13 = a1;
    specialized static ViewMetricsLogger.logAnalytics(view:)(v12);
LABEL_13:

LABEL_14:
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return;
  }
  self;
  uint64_t v14 = swift_dynamicCastObjCClass();
  if (v14)
  {
    unint64_t v15 = (void *)v14;
    uint64_t v13 = a1;
    specialized static SayMetricsLogger.logAnalytics(command:)(v15);
    goto LABEL_13;
  }
  self;
  uint64_t v16 = swift_dynamicCastObjCClass();
  if (v16)
  {
    uint64_t v17 = (void *)v16;
    uint64_t v13 = a1;
    specialized static DialogMetricsLogger.logAnalytics(dialog:)(v17);
    goto LABEL_13;
  }
  self;
  uint64_t v18 = swift_dynamicCastObjCClass();
  if (v18)
  {
    int64_t v19 = (void *)v18;
    uint64_t v13 = a1;
    specialized static LaunchAppMetricsLogger.logAnalytics(launchApp:)(v19);
    goto LABEL_13;
  }
  self;
  uint64_t v20 = swift_dynamicCastObjCClass();
  if (v20)
  {
    uint64_t v21 = (void *)v20;
    uint64_t v13 = a1;
    specialized static LaunchAppMetricsLogger.logAnalytics(launchApp:)(v21);
    goto LABEL_13;
  }
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v22 = __swift_project_value_buffer(v2, (uint64_t)static Logger.instrumentation);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v22, v2);
  swift_unknownObjectRetain_n();
  id v23 = Logger.logObject.getter();
  int v24 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v23, (os_log_type_t)v24))
  {

    goto LABEL_21;
  }
  int v38 = v24;
  os_log_t v39 = v23;
  uint64_t v25 = (_DWORD *)swift_slowAlloc();
  uint64_t v37 = swift_slowAlloc();
  uint64_t v41 = v37;
  *uint64_t v25 = 136315138;
  id v26 = [a1 encodedClassName];
  if (v26)
  {
    uint64_t v27 = v26;
    uint64_t v36 = v25 + 1;
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v35 = (uint8_t *)v25;
    unint64_t v29 = v28;

    uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v29, &v41);
    unint64_t v31 = v35;
    uint64_t v40 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    a1 = v39;
    uint64_t v32 = v31;
    _os_log_impl(&dword_1B9C64000, v39, (os_log_type_t)v38, "Command unsupported for Grading data logging. You need to add logging support for command: %s", v31, 0xCu);
    uint64_t v33 = v37;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v33, -1, -1);
    MEMORY[0x1BA9E48C0](v32, -1, -1);
LABEL_21:

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    goto LABEL_14;
  }

  __break(1u);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime20LinkExpansionContextV07SessionI0C_TG5(uint64_t a1, int *a2)
{
  *(void *)(v2 + 24) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 32) = v3;
  *uint64_t v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime20LinkExpansionContextV07SessionI0C_TG5TQ0_;
  return v5(v2 + 16);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime20LinkExpansionContextV07SessionI0C_TG5TQ0_()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void **)(*v0 + 24);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  void *v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSb_TG5(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v3;
  *uint64_t v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSb_TG5TQ0_;
  return v5(v2 + 32);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSb_TG5TQ0_()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(unsigned char **)(*v0 + 16);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  unsigned char *v2 = *(unsigned char *)(v1 + 32);
  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime23InterruptibleTaskResultOyytG_TG5(uint64_t a1, int *a2)
{
  *(void *)(v2 + 32) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 40) = v3;
  *uint64_t v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime23InterruptibleTaskResultOyytG_TG5TQ0_;
  return v5(v2 + 16);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime23InterruptibleTaskResultOyytG_TG5TQ0_()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 32);
  uint64_t v3 = *v0;
  swift_task_dealloc();
  char v4 = *(unsigned char *)(v1 + 24);
  *(void *)uint64_t v2 = *(void *)(v1 + 16);
  *(unsigned char *)(v2 + 8) = v4;
  uint64_t v5 = *(uint64_t (**)(void))(v3 + 8);
  return v5();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSo15AFSpeechPackageCSg_TG5(uint64_t a1, int *a2)
{
  *(void *)(v2 + 24) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 32) = v3;
  *uint64_t v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSo15AFSpeechPackageCSg_TG5TQ0_;
  return v5(v2 + 16);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime23InterruptibleTaskResultOyAE18RemoteConversation_pSgG_TG5(uint64_t a1, int *a2)
{
  *(void *)(v2 + 40) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 48) = v3;
  *uint64_t v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime23InterruptibleTaskResultOyAE18RemoteConversation_pSgG_TG5TQ0_;
  return v5(v2 + 16);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime23InterruptibleTaskResultOyAE18RemoteConversation_pSgG_TG5TQ0_()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 40);
  uint64_t v6 = *v0;
  swift_task_dealloc();
  char v3 = *(unsigned char *)(v1 + 32);
  *(_OWORD *)uint64_t v2 = *(_OWORD *)(v1 + 16);
  *(unsigned char *)(v2 + 16) = v3;
  char v4 = *(uint64_t (**)(void))(v6 + 8);
  return v4();
}

void specialized static AceServiceInvokerImpl.genericErrorLogger(originalCommand:error:)(void *a1, NSObject *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SubmitCommandError?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v127 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (void *)type metadata accessor for SubmitCommandError();
  uint64_t v8 = *(v7 - 1);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (void **)((char *)&v127 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v127 - v12;
  os_log_t v134 = a2;
  uint64_t v14 = a2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  int v15 = swift_dynamicCast();
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, void *))(v8 + 56);
  if (v15)
  {
    v16(v6, 0, 1, v7);
    (*(void (**)(char *, char *, void *))(v8 + 32))(v13, v6, v7);
    (*(void (**)(void **, char *, void *))(v8 + 16))(v11, v13, v7);
    int v17 = (*(uint64_t (**)(void **, void *))(v8 + 88))(v11, v7);
    if (v17 == *MEMORY[0x1E4FA1D10])
    {
      (*(void (**)(void **, void *))(v8 + 96))(v11, v7);
      uint64_t v18 = *v11;
      if (one-time initialization token for ace != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)static Logger.ace);
      id v20 = v18;
      id v21 = a1;
      id v22 = v18;
      id v23 = v21;
      int v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.error.getter();
      int v26 = v25;
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v27 = swift_slowAlloc();
        uint64_t v131 = swift_slowAlloc();
        os_log_t v134 = (os_log_t)v131;
        *(_DWORD *)uint64_t v27 = 136315394;
        swift_getErrorValue();
        LODWORD(v130) = v26;
        uint64_t v28 = Error.localizedDescription.getter();
        uint64_t v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, (uint64_t *)&v134);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        *(_WORD *)(v27 + 12) = 2080;
        id v30 = objc_msgSend(v23, sel_description);
        uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v132 = v13;
        uint64_t v32 = v31;
        id v129 = v7;
        uint64_t v33 = v8;
        unint64_t v35 = v34;

        uint64_t v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v35, (uint64_t *)&v134);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v24, (os_log_type_t)v130, "Received an error <%s> for command <%s>", (uint8_t *)v27, 0x16u);
        uint64_t v36 = v131;
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v36, -1, -1);
        MEMORY[0x1BA9E48C0](v27, -1, -1);

        (*(void (**)(char *, id))(v33 + 8))(v132, v129);
        return;
      }

      goto LABEL_47;
    }
    if (v17 == *MEMORY[0x1E4FA1D20])
    {
      (*(void (**)(void **, void *))(v8 + 96))(v11, v7);
      id v52 = *v11;
      if (one-time initialization token for ace != -1) {
        swift_once();
      }
      uint64_t v53 = type metadata accessor for Logger();
      __swift_project_value_buffer(v53, (uint64_t)static Logger.ace);
      id v54 = v52;
      id v55 = a1;
      id v56 = v54;
      id v57 = v55;
      id v58 = v56;
      int v59 = Logger.logObject.getter();
      int v60 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v59, (os_log_type_t)v60))
      {
        uint64_t v131 = v8;
        uint64_t v132 = v13;
        uint64_t v61 = swift_slowAlloc();
        uint64_t v127 = swift_slowAlloc();
        os_log_t v134 = (os_log_t)v127;
        *(_DWORD *)uint64_t v61 = 136316418;
        id v62 = objc_msgSend(v58, sel_aceId);
        int v128 = v60;
        if (v62)
        {
          uint64_t v63 = v62;
          uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v66 = v65;
        }
        else
        {
          unint64_t v66 = 0xE500000000000000;
          uint64_t v64 = 0x3E6C696E3CLL;
        }
        uint64_t v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v66, (uint64_t *)&v134);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v61 + 12) = 2080;
        id v107 = objc_msgSend(v58, sel_refId);
        if (v107)
        {
          uint64_t v108 = v107;
          uint64_t v109 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v111 = v110;
        }
        else
        {
          unint64_t v111 = 0xE500000000000000;
          uint64_t v109 = 0x3E6C696E3CLL;
        }
        uint64_t v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v109, v111, (uint64_t *)&v134);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v61 + 22) = 2048;
        id v112 = objc_msgSend(v58, sel_errorCode);

        uint64_t v133 = (uint64_t)v112;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        *(_WORD *)(v61 + 32) = 2080;
        id v113 = objc_msgSend(v58, sel_reason);
        id v129 = v57;
        os_log_t v130 = v59;
        if (v113)
        {
          int64_t v114 = v113;
          uint64_t v115 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v117 = v116;
        }
        else
        {
          unint64_t v117 = 0xE500000000000000;
          uint64_t v115 = 0x3E6C696E3CLL;
        }
        uint64_t v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v115, v117, (uint64_t *)&v134);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v61 + 42) = 2080;
        id v118 = objc_msgSend(v58, sel_description);
        uint64_t v119 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v121 = v120;

        uint64_t v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v119, v121, (uint64_t *)&v134);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v61 + 52) = 2080;
        id v122 = v129;
        id v123 = objc_msgSend(v129, sel_description);
        uint64_t v124 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v126 = v125;

        uint64_t v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v124, v126, (uint64_t *)&v134);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        uint64_t v72 = v130;
        _os_log_impl(&dword_1B9C64000, v130, (os_log_type_t)v128, "Received SACommandFailed: aceId=%s refId=%s errorCode=%ld, reason='%s', description='%s' for command <%s>", (uint8_t *)v61, 0x3Eu);
        os_log_t v84 = (os_log_t)v127;
        goto LABEL_43;
      }

LABEL_47:
      (*(void (**)(char *, void *))(v8 + 8))(v13, v7);
      return;
    }
    if (v17 == *MEMORY[0x1E4FA1D28])
    {
      (*(void (**)(void **, void *))(v8 + 96))(v11, v7);
      uint64_t v67 = *v11;
      if (one-time initialization token for ace != -1) {
        swift_once();
      }
      uint64_t v68 = type metadata accessor for Logger();
      __swift_project_value_buffer(v68, (uint64_t)static Logger.ace);
      id v69 = a1;
      id v70 = v67;
      id v71 = v69;
      id v58 = v70;
      uint64_t v72 = Logger.logObject.getter();
      os_log_type_t v73 = static os_log_type_t.error.getter();
      int v74 = v73;
      if (os_log_type_enabled(v72, v73))
      {
        uint64_t v61 = swift_slowAlloc();
        os_log_t v130 = (os_log_t)swift_slowAlloc();
        os_log_t v134 = v130;
        *(_DWORD *)uint64_t v61 = 136315394;
        LODWORD(v129) = v74;
        id v75 = objc_msgSend(v58, sel_description);
        uint64_t v132 = v13;
        id v76 = v75;
        uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v131 = v8;
        unint64_t v79 = v78;

        uint64_t v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v79, (uint64_t *)&v134);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v61 + 12) = 2080;
        id v80 = objc_msgSend(v71, sel_description);
        uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v83 = v82;

        uint64_t v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v83, (uint64_t *)&v134);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v72, (os_log_type_t)v129, "Received unexpected command response type: %s for command <%s>", (uint8_t *)v61, 0x16u);
        os_log_t v84 = v130;
LABEL_43:
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v84, -1, -1);
        MEMORY[0x1BA9E48C0](v61, -1, -1);

        goto LABEL_44;
      }

      goto LABEL_46;
    }
    if (v17 == *MEMORY[0x1E4FA1D18])
    {
      if (one-time initialization token for ace != -1) {
        swift_once();
      }
      uint64_t v85 = type metadata accessor for Logger();
      __swift_project_value_buffer(v85, (uint64_t)static Logger.ace);
      id v86 = a1;
      uint64_t v72 = Logger.logObject.getter();
      os_log_type_t v87 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v72, v87))
      {
        uint64_t v131 = v8;
        uint64_t v88 = swift_slowAlloc();
        uint64_t v89 = swift_slowAlloc();
        os_log_t v134 = (os_log_t)v89;
        *(_DWORD *)uint64_t v88 = 136315138;
        os_log_t v130 = (os_log_t)(v88 + 4);
        id v90 = objc_msgSend(v86, sel_description);
        uint64_t v132 = v13;
        id v91 = v90;
        uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v94 = v93;

        uint64_t v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, v94, (uint64_t *)&v134);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v72, v87, "Received unexpected nil response for command <%s>", (uint8_t *)v88, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v89, -1, -1);
        MEMORY[0x1BA9E48C0](v88, -1, -1);
LABEL_44:

        (*(void (**)(char *, void *))(v131 + 8))(v132, v7);
        return;
      }

LABEL_46:
      goto LABEL_47;
    }
    if (one-time initialization token for ace != -1) {
      swift_once();
    }
    uint64_t v95 = type metadata accessor for Logger();
    __swift_project_value_buffer(v95, (uint64_t)static Logger.ace);
    id v96 = a1;
    unint64_t v97 = Logger.logObject.getter();
    os_log_type_t v98 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v97, v98))
    {
      uint64_t v131 = v8;
      unint64_t v99 = (uint8_t *)swift_slowAlloc();
      os_log_t v130 = (os_log_t)swift_slowAlloc();
      os_log_t v134 = v130;
      *(_DWORD *)unint64_t v99 = 136315138;
      id v129 = v99 + 4;
      id v100 = objc_msgSend(v96, sel_description);
      uint64_t v101 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v132 = v13;
      uint64_t v102 = v101;
      unint64_t v104 = v103;

      uint64_t v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v102, v104, (uint64_t *)&v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v97, v98, "AceServiceInvokerImpl genericErrorLogger unknown case for command <%s>", v99, 0xCu);
      os_log_t v105 = v130;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v105, -1, -1);
      MEMORY[0x1BA9E48C0](v99, -1, -1);

      uint64_t v106 = *(void (**)(char *, void *))(v131 + 8);
      v106(v132, v7);
    }
    else
    {

      uint64_t v106 = *(void (**)(char *, void *))(v8 + 8);
      v106(v13, v7);
    }
    v106((char *)v11, v7);
  }
  else
  {
    v16(v6, 1, 1, v7);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for SubmitCommandError?);
    if (one-time initialization token for ace != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static Logger.ace);
    int v38 = a2;
    id v39 = a1;
    uint64_t v40 = a2;
    id v41 = v39;
    BOOL v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      os_log_t v134 = (os_log_t)v45;
      *(_DWORD *)uint64_t v44 = 136315394;
      swift_getErrorValue();
      uint64_t v46 = Error.localizedDescription.getter();
      uint64_t v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, (uint64_t *)&v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v44 + 12) = 2080;
      id v48 = objc_msgSend(v41, sel_description);
      uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v51 = v50;

      uint64_t v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v51, (uint64_t *)&v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v42, v43, "Received an error <%s> for command <%s>", (uint8_t *)v44, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v45, -1, -1);
      MEMORY[0x1BA9E48C0](v44, -1, -1);
    }
    else
    {
    }
  }
}

void partial apply for closure #1 in AceServiceInvokerImpl.closeServerRequest()(unsigned char *a1)
{
  closure #1 in AceServiceInvokerImpl.closeServerRequest()(a1, v1);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8SADialogCG_AGs5NeverOTg50140_s14SiriKitRuntime21AceServiceInvokerImplC22addMissingComponentIds33_6F702868F5EE7637FC7805F00DECC893LL_8setRefIdySo13SABaseCommandC_SbtFSo8D7CAJcfU_SbSo13SABaseCommandCTf1cn_nTf4nng_n(unint64_t a1, int a2, void *a3)
{
  uint64_t v4 = v3;
  id v34 = a3;
  int v37 = a2;
  uint64_t v35 = type metadata accessor for UUID();
  uint64_t v6 = *(void (***)(char *, uint64_t))(v35 - 8);
  MEMORY[0x1F4188790](v35);
  uint64_t v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62) {
    goto LABEL_26;
  }
  uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t result = MEMORY[0x1E4FBC860];
    if (!v9) {
      return result;
    }
    uint64_t v38 = MEMORY[0x1E4FBC860];
    uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v9 < 0)
    {
      __break(1u);
      return result;
    }
    v33[1] = v4;
    uint64_t v11 = 0;
    unint64_t v12 = a1 & 0xC000000000000001;
    uint64_t v13 = v6 + 1;
    unint64_t v36 = a1;
    while (v9 != v11)
    {
      if (v12) {
        int v15 = (void (**)(char *, uint64_t))MEMORY[0x1BA9E3990](v11, a1);
      }
      else {
        int v15 = (void (**)(char *, uint64_t))*(id *)(a1 + 8 * v11 + 32);
      }
      uint64_t v6 = v15;
      id v16 = objc_msgSend(v15, sel_aceId);
      if (!v16) {
        goto LABEL_16;
      }
      int v17 = v16;
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v20 = v19;

      swift_bridgeObjectRelease();
      uint64_t v21 = HIBYTE(v20) & 0xF;
      BOOL v22 = (v20 & 0x2000000000000000) == 0;
      a1 = v36;
      if (v22) {
        uint64_t v21 = v18 & 0xFFFFFFFFFFFFLL;
      }
      if (!v21)
      {
LABEL_16:
        UUID.init()();
        uint64_t v23 = UUID.uuidString.getter();
        uint64_t v25 = v24;
        (*v13)(v8, v35);
        int v26 = (void *)MEMORY[0x1BA9E2DD0](v23, v25);
        swift_bridgeObjectRelease();
        objc_msgSend(v6, sel_setAceId_, v26);
      }
      if (v37)
      {
        id v27 = objc_msgSend(v6, sel_refId);
        if (!v27) {
          goto LABEL_6;
        }
        uint64_t v28 = v27;
        uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v31 = v30;

        swift_bridgeObjectRelease();
        uint64_t v32 = HIBYTE(v31) & 0xF;
        BOOL v22 = (v31 & 0x2000000000000000) == 0;
        a1 = v36;
        if (v22) {
          uint64_t v32 = v29 & 0xFFFFFFFFFFFFLL;
        }
        if (!v32)
        {
LABEL_6:
          id v14 = objc_msgSend(v34, sel_refId);
          objc_msgSend(v6, sel_setRefId_, v14);
        }
      }
      ++v11;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v4 = *(void *)(v38 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v9 == v11) {
        return v38;
      }
    }
    __break(1u);
LABEL_26:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
}

uint64_t specialized AceServiceInvokerImpl.serializeCommandAsPList(_:)(void *a1)
{
  v17[1] = *(id *)MEMORY[0x1E4F143B8];
  id v1 = objc_msgSend(a1, sel_dictionary);
  if (!v1)
  {
    if (one-time initialization token for ace != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.ace);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_1B9C64000, v7, v8, "AceServiceInvoker failed to serialize command to dictionary", v9, 2u);
      MEMORY[0x1BA9E48C0](v9, -1, -1);
    }

    return 0;
  }
  uint64_t v2 = v1;
  v17[0] = 0;
  id v3 = objc_msgSend(self, sel_dataWithPropertyList_format_options_error_, v1, 200, 0, v17);
  id v4 = v17[0];
  if (!v3)
  {
    uint64_t v10 = v4;
    uint64_t v11 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for ace != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.ace);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      int v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v15 = 0;
      _os_log_impl(&dword_1B9C64000, v13, v14, "AceServiceInvoker failed to serialize command to pList", v15, 2u);
      MEMORY[0x1BA9E48C0](v15, -1, -1);
    }

    return 0;
  }
  uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

id specialized AceServiceInvokerImpl.wrapCommandForExecution(_:assistantId:)(void *a1, uint64_t a2, unint64_t a3)
{
  if (a3)
  {
    if (one-time initialization token for ace != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    uint64_t v6 = __swift_project_value_buffer(v5, (uint64_t)static Logger.ace);
    id v7 = a1;
    swift_bridgeObjectRetain_n();
    id v8 = v7;
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v46 = v6;
      uint64_t v11 = swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v49 = v12;
      *(_DWORD *)uint64_t v11 = 136315650;
      swift_bridgeObjectRetain();
      id v48 = (id)a2;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v11 + 12) = 2080;
      id v13 = objc_msgSend(v8, sel_refId);
      if (v13)
      {
        os_log_type_t v14 = v13;
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v17 = v16;
      }
      else
      {
        unint64_t v17 = 0xE500000000000000;
        uint64_t v15 = 0x3E4C494E3CLL;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 22) = 2080;
      id v23 = objc_msgSend(v8, sel_aceId);
      if (v23)
      {
        uint64_t v24 = v23;
        uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v27 = v26;
      }
      else
      {
        unint64_t v27 = 0xE500000000000000;
        uint64_t v25 = 0x3E4C494E3CLL;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v9, v10, "AceServiceInvoker wrapping command for remote execution with assistantID: '%s', refID: '%s', aceID: '%s'", (uint8_t *)v11, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v12, -1, -1);
      MEMORY[0x1BA9E48C0](v11, -1, -1);

      a2 = (uint64_t)v48;
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    id v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96638]), sel_init);
    uint64_t v29 = specialized AceServiceInvokerImpl.serializeCommandAsPList(_:)(v8);
    unint64_t v31 = v30;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v29, v31);
    objc_msgSend(v28, sel_setSerializedCommand_, isa);

    id v33 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96960]), sel_init);
    uint64_t v34 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v34 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (v34)
    {
      uint64_t v35 = (void *)MEMORY[0x1BA9E2DD0](a2, a3);
      objc_msgSend(v33, sel_setAssistantId_, v35);
    }
    objc_msgSend(v33, sel_setSiriEnabled_, 1, v46);
    objc_msgSend(v28, sel_setRemoteDevice_, v33);
    type metadata accessor for SiriEnvironment();
    if (static SiriEnvironment.forCurrentTask.getter())
    {
      unint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v38 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v38 = 0;
        _os_log_impl(&dword_1B9C64000, v36, v37, "CurrentTask has value for shouldFallbacktoAWDL", v38, 2u);
        MEMORY[0x1BA9E48C0](v38, -1, -1);
      }

      SiriEnvironment.aceServiceContext.getter();
      char v39 = dispatch thunk of AceServiceContextProvider.shouldFallbacktoAWDL.getter();
      swift_release();
      swift_release();
    }
    else
    {
      uint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v40, v41))
      {
        BOOL v42 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)BOOL v42 = 0;
        _os_log_impl(&dword_1B9C64000, v40, v41, "Setting shouldFallbacktoAWDL to true since currentTask is nil", v42, 2u);
        MEMORY[0x1BA9E48C0](v42, -1, -1);
      }

      char v39 = 1;
    }
    os_log_type_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v45 = 67109120;
      LODWORD(v49) = v39 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v43, v44, "AceServiceInvoker setting shouldFallbackOnAWDL: %{BOOL}d", v45, 8u);
      MEMORY[0x1BA9E48C0](v45, -1, -1);
    }

    objc_msgSend(v28, sel_setShouldFallbackOnAWDL_, v39 & 1);
    return v28;
  }
  else
  {
    if (one-time initialization token for ace != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.ace);
    unint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl(&dword_1B9C64000, v19, v20, "AceServiceInvoker wrapping command for remote execution skipped because of null assistantID", v21, 2u);
      MEMORY[0x1BA9E48C0](v21, -1, -1);
    }

    return a1;
  }
}

uint64_t partial apply for closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:)(a1, v4, v5, v7, v8, v9, v10, v6);
}

uint64_t partial apply for closure #1 in AceServiceInvokerImpl.submitWithoutRefId<A>(_:completion:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in AceServiceInvokerImpl.submitWithoutRefId<A>(_:completion:)(a1, v4, v5, v7, v8, v9, v10, v6);
}

uint64_t sub_1B9D5F09C()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #2 in AceServiceInvokerImpl.publish(executionOutput:)(a1, v4, v5, v7, v6);
}

uint64_t partial apply for closure #1 in SubmissionTaskRegistry.register(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in SubmissionTaskRegistry.register(_:)(a1, v2, a2);
}

uint64_t partial apply for closure #1 in SubmissionTaskRegistry.unregister(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized Set._Variant.remove(_:)();
  *a1 = result;
  return result;
}

uint64_t specialized AceServiceInvokerImpl.getResponse<A>(from:)(uint64_t a1, uint64_t a2)
{
  v2[6] = a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[7] = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
  v2[8] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  *uint64_t v4 = v2;
  v4[1] = specialized AceServiceInvokerImpl.getResponse<A>(from:);
  uint64_t v7 = MEMORY[0x1E4FBC0F0];
  return MEMORY[0x1F4187D90](v2 + 2, a1, v5, v6, v7);
}

uint64_t specialized AceServiceInvokerImpl.getResponse<A>(from:)()
{
  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized AceServiceInvokerImpl.getResponse<A>(from:);
  }
  else {
    uint64_t v2 = specialized AceServiceInvokerImpl.getResponse<A>(from:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  unint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  id v13;
  uint64_t (*v14)(void);
  NSObject *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  void *v20;
  NSObject *v21;
  NSObject *v22;
  uint64_t (*v23);
  void *v24;
  NSObject *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;

  unint64_t v27 = v0;
  uint64_t v1 = (void *)v0[2];
  if (one-time initialization token for ace != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.ace);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.debug.getter();
  uint64_t v25 = v3;
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v24 = v1;
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    unint64_t v26 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    v0[4] = v24;
    uint64_t v8 = v3;
    uint64_t v9 = String.init<A>(describing:)();
    v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, v4, v5, "AceServiceInvokerImpl received a response from command handling: %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v7, -1, -1);
    uint64_t v11 = v6;
    uint64_t v1 = v24;
    MEMORY[0x1BA9E48C0](v11, -1, -1);
  }
  else
  {
  }
  uint64_t v12 = v0[9];
  uint64_t v13 = interpretResponse<A>(_:)(v1);
  if (v12)
  {

    os_log_type_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
  else
  {
    unint64_t v16 = v13;
    unint64_t v17 = Logger.logObject.getter();
    uint64_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      unint64_t v19 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v20 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v19 = 138412290;
      v0[3] = v16;
      uint64_t v21 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v20 = v16;

      _os_log_impl(&dword_1B9C64000, v17, v18, "Type-interpreted response: %@", v19, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v20, -1, -1);
      MEMORY[0x1BA9E48C0](v19, -1, -1);
      BOOL v22 = v25;
    }
    else
    {

      BOOL v22 = v16;
      unint64_t v17 = v25;
    }

    id v23 = (uint64_t (*))v0[1];
    return v23(v16);
  }
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized AceServiceInvokerImpl.getResponse<A>(from:);
  }
  else {
    uint64_t v2 = specialized AceServiceInvokerImpl.getResponse<A>(from:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  unint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  id v13;
  uint64_t (*v14)(void);
  NSObject *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  void *v20;
  NSObject *v21;
  NSObject *v22;
  uint64_t (*v23);
  void *v24;
  NSObject *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;

  unint64_t v27 = v0;
  uint64_t v1 = (void *)v0[2];
  if (one-time initialization token for ace != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.ace);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.debug.getter();
  uint64_t v25 = v3;
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v24 = v1;
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    unint64_t v26 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    v0[4] = v24;
    uint64_t v8 = v3;
    uint64_t v9 = String.init<A>(describing:)();
    v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, v4, v5, "AceServiceInvokerImpl received a response from command handling: %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v7, -1, -1);
    uint64_t v11 = v6;
    uint64_t v1 = v24;
    MEMORY[0x1BA9E48C0](v11, -1, -1);
  }
  else
  {
  }
  uint64_t v12 = v0[8];
  uint64_t v13 = specialized interpretResponse<A>(_:)(v1);
  if (v12)
  {

    os_log_type_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
  else
  {
    unint64_t v16 = v13;
    unint64_t v17 = Logger.logObject.getter();
    uint64_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      unint64_t v19 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v20 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v19 = 138412290;
      v0[3] = v16;
      uint64_t v21 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v20 = v16;

      _os_log_impl(&dword_1B9C64000, v17, v18, "Type-interpreted response: %@", v19, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v20, -1, -1);
      MEMORY[0x1BA9E48C0](v19, -1, -1);
      BOOL v22 = v25;
    }
    else
    {

      BOOL v22 = v16;
      unint64_t v17 = v25;
    }

    id v23 = (uint64_t (*))v0[1];
    return v23(v16);
  }
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t partial apply for closure #1 in AceServiceInvokerImpl.submitToCompanion<A>(_:completion:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in AceServiceInvokerImpl.submitToCompanion<A>(_:completion:)(a1, v4, v5, v7, v8, v9, v10, v6);
}

uint64_t partial apply for closure #1 in AceServiceInvokerImpl.submitToCompanionWithoutRefId<A>(_:completion:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in AceServiceInvokerImpl.submitToCompanionWithoutRefId<A>(_:completion:)(a1, v4, v5, v7, v8, v9, v10, v6);
}

uint64_t objectdestroyTm_0()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t partial apply for closure #1 in AceServiceInvokerImpl.submitToRemote<A>(_:_:completion:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in AceServiceInvokerImpl.submitToRemote<A>(_:_:completion:)(a1, v4, v5, v7, v8, v9, v10, v6);
}

uint64_t partial apply for closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:executionSource:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for RequestSummary.ExecutionSource() - 8);
  uint64_t v5 = *(void *)(v1 + 48);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v7 = swift_task_alloc();
  long long v8 = *(_OWORD *)(v1 + 32);
  *(void *)(v2 + 16) = v7;
  *(void *)uint64_t v7 = v2;
  *(void *)(v7 + 8) = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  *(void *)(v7 + 40) = v5;
  *(void *)(v7 + 48) = v6;
  *(_OWORD *)(v7 + 24) = v8;
  *(void *)(v7 + 16) = a1;
  return MEMORY[0x1F4188298](closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:executionSource:), 0, 0);
}

uint64_t partial apply for closure #1 in AceServiceInvokerImpl.submitAllSerial(_:_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in AceServiceInvokerImpl.submitAllSerial(_:_:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t partial apply for closure #1 in AceServiceInvokerImpl.submitAllSerialWithoutRefId(_:_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in AceServiceInvokerImpl.submitAllSerialWithoutRefId(_:_:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t specialized AceServiceInvokerImpl.getResponse<A>(from:)(uint64_t a1)
{
  id v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 48) = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
  *(void *)(v1 + 56) = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  *id v3 = v1;
  v3[1] = specialized AceServiceInvokerImpl.getResponse<A>(from:);
  uint64_t v6 = MEMORY[0x1E4FBC0F0];
  return MEMORY[0x1F4187D90](v1 + 16, a1, v4, v5, v6);
}

uint64_t specialized Array.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a4 & 1) == 0)
  {
LABEL_2:
    return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4);
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v9 = swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    uint64_t v9 = MEMORY[0x1E4FBC860];
  }
  uint64_t v10 = *(void *)(v9 + 16);
  swift_release();
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v10 != (a4 >> 1) - a3)
  {
LABEL_13:
    swift_unknownObjectRelease();
    goto LABEL_2;
  }
  uint64_t result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

void partial apply for closure #1 in AceServiceInvokerImpl.prepareForAudioHandoff()(uint64_t a1)
{
  closure #1 in AceServiceInvokerImpl.prepareForAudioHandoff()(a1, v1);
}

void partial apply for closure #1 in AceServiceInvokerImpl.prepareForAudioHandoffFailed()(uint64_t a1)
{
  closure #1 in AceServiceInvokerImpl.prepareForAudioHandoffFailed()(a1, v1);
}

void partial apply for closure #1 in AceServiceInvokerImpl.recentDialogs()(uint64_t a1)
{
  closure #1 in AceServiceInvokerImpl.recentDialogs()(a1, v1);
}

void partial apply for closure #1 in AceServiceInvokerImpl.submitExternalActivationRequest(withRequestInfo:)(uint64_t a1)
{
  closure #1 in AceServiceInvokerImpl.submitExternalActivationRequest(withRequestInfo:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void partial apply for closure #1 in AceServiceInvokerImpl.postToMessageBus(message:)(uint64_t a1)
{
  closure #1 in AceServiceInvokerImpl.postToMessageBus(message:)(a1, *(void *)(v1 + 16));
}

uint64_t method lookup function for AceServiceInvokerImpl(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AceServiceInvokerImpl);
}

uint64_t dispatch thunk of AceServiceInvokerImpl.__allocating_init(bridge:executionRequestId:rootRequestId:requestContextData:runLocation:invocationDeviceAssistantId:executionDeviceAssistantId:invokedByPeerToPeerEORR:rrClient:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(v7 + 176))(a1, a2, a3, a4, a5, a6, a7 & 1);
}

uint64_t objectdestroy_49Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t sub_1B9D60498()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime23InterruptibleTaskResultOyAE18RemoteConversation_pSgG_TG5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime23InterruptibleTaskResultOyAE18RemoteConversation_pSgG_TG5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime23InterruptibleTaskResultOyAE18RemoteConversation_pSgG_TG5Tu);
  return v6(a1, v4);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSo15AFSpeechPackageCSg_TG5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSo15AFSpeechPackageCSg_TG5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSo15AFSpeechPackageCSg_TG5Tu);
  return v6(a1, v4);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime23InterruptibleTaskResultOyytG_TG5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime23InterruptibleTaskResultOyytG_TG5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime23InterruptibleTaskResultOyytG_TG5Tu);
  return v6(a1, v4);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime25PluginLookupByIntentTopic_p_Tg5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime25PluginLookupByIntentTopic_p_Tg5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime25PluginLookupByIntentTopic_p_Tg5Tu);
  return v6(a1, v4);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSb_TG5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSb_TG5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSb_TG5Tu);
  return v6(a1, v4);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime20LinkExpansionContextV07SessionI0C_TG5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime20LinkExpansionContextV07SessionI0C_TG5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime20LinkExpansionContextV07SessionI0C_TG5Tu);
  return v6(a1, v4);
}

uint64_t sub_1B9D60920()
{
  return objectdestroy_156Tm(&demangling cache variable for type metadata for CheckedContinuation<(Bool, Error?), Never>);
}

uint64_t sub_1B9D60930()
{
  return objectdestroy_156Tm(&demangling cache variable for type metadata for CheckedContinuation<(Bool, Error?), Never>);
}

uint64_t partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.postToMessageBus(message:)(int a1, void *a2)
{
  return closure #1 in closure #1 in AceServiceInvokerImpl.submitExternalActivationRequest(withRequestInfo:)(a1, a2);
}

uint64_t sub_1B9D609B4()
{
  return objectdestroy_156Tm(&demangling cache variable for type metadata for CheckedContinuation<[RecentDialog], Never>);
}

uint64_t partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.recentDialogs()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[RecentDialog], Never>);

  return closure #1 in closure #1 in AceServiceInvokerImpl.recentDialogs()();
}

uint64_t sub_1B9D60A34()
{
  return objectdestroy_156Tm(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
}

uint64_t partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.prepareForAudioHandoffFailed()()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_1B9D60AA8()
{
  return objectdestroy_156Tm(&demangling cache variable for type metadata for CheckedContinuation<Bool, Never>);
}

uint64_t objectdestroy_156Tm(uint64_t *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);

  return MEMORY[0x1F4186498](v1, v6, v7);
}

uint64_t partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:executionSource:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v9 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v10;
  *uint64_t v10 = v3;
  v10[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:executionSource:)(a1, a2, v6, v7, v9, v8);
}

uint64_t sub_1B9D60C08()
{
  uint64_t v1 = type metadata accessor for RequestSummary.ExecutionSource();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:executionSource:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for RequestSummary.ExecutionSource() - 8);
  uint64_t v5 = *(void *)(v1 + 48);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v7 = swift_task_alloc();
  long long v8 = *(_OWORD *)(v1 + 32);
  *(void *)(v2 + 16) = v7;
  *(void *)uint64_t v7 = v2;
  *(void *)(v7 + 8) = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  *(void *)(v7 + 40) = v5;
  *(void *)(v7 + 48) = v6;
  *(_OWORD *)(v7 + 24) = v8;
  *(void *)(v7 + 16) = a1;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:executionSource:), 0, 0);
}

unint64_t lazy protocol witness table accessor for type SerialSubmissionError and conformance SerialSubmissionError()
{
  unint64_t result = lazy protocol witness table cache variable for type SerialSubmissionError and conformance SerialSubmissionError;
  if (!lazy protocol witness table cache variable for type SerialSubmissionError and conformance SerialSubmissionError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SerialSubmissionError and conformance SerialSubmissionError);
  }
  return result;
}

void outlined consume of SABaseCommand??(id a1)
{
  if (a1 != (id)1) {
}
  }

void outlined consume of Result<SABaseCommand?, Error>(id a1)
{
}

uint64_t sub_1B9D60E5C()
{
  uint64_t v1 = type metadata accessor for RequestSummary.ExecutionSource();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  outlined consume of Result<SABaseCommand?, Error>(*(id *)(v0 + v6));

  return MEMORY[0x1F4186498](v0, v6 + 9, v5);
}

void partial apply for closure #2 in AceServiceInvokerImpl.performSubmit(_:bargeInResult:executionSource:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for RequestSummary.ExecutionSource() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void **)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + v4;
  uint64_t v8 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = *(void **)v8;
  int v10 = *(unsigned __int8 *)(v8 + 8);

  closure #2 in AceServiceInvokerImpl.performSubmit(_:bargeInResult:executionSource:)(a1, v5, v6, v7, v9, v10);
}

id outlined copy of Result<SABaseCommand?, Error>(id a1)
{
  return a1;
}

uint64_t sub_1B9D61008()
{
  swift_release();
  outlined consume of Result<SABaseCommand?, Error>(*(id *)(v0 + 32));

  return MEMORY[0x1F4186498](v0, 41, 7);
}

void partial apply for closure #1 in closure #2 in AceServiceInvokerImpl.performSubmit(_:bargeInResult:executionSource:)(void *a1, void *a2)
{
  closure #1 in closure #2 in AceServiceInvokerImpl.performSubmit(_:bargeInResult:executionSource:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(unsigned char *)(v2 + 40));
}

uint64_t sub_1B9D61064()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

id partial apply for closure #1 in AceServiceInvokerImpl.addMissingComponentIds(_:setRefId:)(void *a1)
{
  uint64_t v2 = specialized closure #1 in AceServiceInvokerImpl.addMissingComponentIds(_:setRefId:)(a1, *(unsigned char *)(v1 + 16), *(void **)(v1 + 24));

  return v2;
}

void *specialized closure #1 in AceServiceInvokerImpl.addMissingComponentIds(_:setRefId:)(void *a1, char a2, void *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = objc_msgSend(a1, sel_aceId);
  if (!v10) {
    goto LABEL_5;
  }
  uint64_t v11 = v10;
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v14 = v13;

  swift_bridgeObjectRelease();
  uint64_t v15 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0) {
    uint64_t v15 = v12 & 0xFFFFFFFFFFFFLL;
  }
  if (!v15)
  {
LABEL_5:
    UUID.init()();
    uint64_t v16 = UUID.uuidString.getter();
    uint64_t v18 = v17;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    unint64_t v19 = (void *)MEMORY[0x1BA9E2DD0](v16, v18);
    swift_bridgeObjectRelease();
    objc_msgSend(a1, sel_setAceId_, v19);
  }
  if (a2)
  {
    id v20 = objc_msgSend(a1, sel_refId);
    if (!v20) {
      goto LABEL_11;
    }
    uint64_t v21 = v20;
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v24 = v23;

    swift_bridgeObjectRelease();
    uint64_t v25 = HIBYTE(v24) & 0xF;
    if ((v24 & 0x2000000000000000) == 0) {
      uint64_t v25 = v22 & 0xFFFFFFFFFFFFLL;
    }
    if (!v25)
    {
LABEL_11:
      id v26 = objc_msgSend(a3, sel_refId);
      objc_msgSend(a1, sel_setRefId_, v26);
    }
  }
  return a1;
}

uint64_t objectdestroy_44Tm()
{
  uint64_t v1 = type metadata accessor for RequestSummary.ExecutionSource();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.submitToRemote<A>(_:_:completion:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in AceServiceInvokerImpl.submitToRemote<A>(_:_:completion:)(a1, v5, v6, v4);
}

uint64_t sub_1B9D6145C()
{
  uint64_t v1 = type metadata accessor for RequestSummary.ExecutionSource();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 57) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();

  outlined consume of Result<SABaseCommand?, Error>(*(id *)(v0 + 48));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #1 in AceServiceInvokerImpl.createSubmissionTask<A>(for:options:executionSource:expectingResponseOfType:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for RequestSummary.ExecutionSource() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = *(void *)(v1 + 32);
  uint64_t v8 = *(void *)(v1 + 40);
  uint64_t v9 = *(void *)(v1 + 48);
  char v10 = *(unsigned char *)(v1 + 56);
  uint64_t v11 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *uint64_t v12 = v2;
  v12[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in AceServiceInvokerImpl.createSubmissionTask<A>(for:options:executionSource:expectingResponseOfType:)(a1, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.submitToCompanionWithoutRefId<A>(_:completion:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in closure #1 in AceServiceInvokerImpl.submitToCompanion<A>(_:completion:)(a1, v5, v6, v4);
}

uint64_t partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.submitToCompanion<A>(_:completion:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in closure #1 in AceServiceInvokerImpl.submitToCompanion<A>(_:completion:)(a1, v5, v6, v4);
}

uint64_t sub_1B9D617C4()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #1 in closure #2 in AceServiceInvokerImpl.publish(executionOutput:)(uint64_t a1)
{
  closure #1 in closure #2 in AceServiceInvokerImpl.publish(executionOutput:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void partial apply for closure #1 in closure #1 in closure #2 in AceServiceInvokerImpl.publish(executionOutput:)(void *a1, void *a2)
{
}

uint64_t lazy protocol witness table accessor for type [String] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.submitWithoutRefId<A>(_:completion:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:)(a1, v5, v6, v4);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu);
  return v6(a1, v4);
}

uint64_t partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:)(a1, v5, v6, v4);
}

void *initializeBufferWithCopyOfBuffer for AceServiceInvokerImpl.AceSubmitOptions(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AceServiceInvokerImpl.AceSubmitOptions(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for AceServiceInvokerImpl.AceSubmitOptions(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AceServiceInvokerImpl.AceSubmitOptions(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AceServiceInvokerImpl.AceSubmitOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t getEnumTag for AceServiceInvokerImpl.AceSubmitOptions(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for AceServiceInvokerImpl.AceSubmitOptions(void *result, int a2)
{
  if (a2 < 0)
  {
    *uint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for AceServiceInvokerImpl.AceSubmitOptions()
{
  return &type metadata for AceServiceInvokerImpl.AceSubmitOptions;
}

void *initializeBufferWithCopyOfBuffer for SerialSubmissionError(void *a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  id v5 = v3;
  id v6 = v4;
  a1[1] = v4;
  return a1;
}

void destroy for SerialSubmissionError(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
}

uint64_t assignWithCopy for SerialSubmissionError(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void **)(a2 + 8);
  id v8 = v7;
  uint64_t v9 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;

  return a1;
}

uint64_t assignWithTake for SerialSubmissionError(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for SerialSubmissionError(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SerialSubmissionError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for SerialSubmissionError()
{
  return &unk_1F13774C0;
}

unsigned char *closure #1 in AceServiceInvokerImpl.submitInAppResponse(executionSource:inAppResponse:)@<X0>(unsigned char *a1@<X0>, unsigned char *a2@<X8>)
{
  return closure #1 in AceServiceInvokerImpl.performSubmit(_:bargeInResult:executionSource:)(a1, a2);
}

uint64_t closure #1 in SubmissionTaskRegistry.unregister(_:)partial apply@<X0>(uint64_t *a1@<X8>)
{
  return partial apply for closure #1 in SubmissionTaskRegistry.unregister(_:)(a1);
}

uint64_t SiriXActionCandidate.init(fromCamActionCandidate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SiriXActionCandidate?);
  MEMORY[0x1F4188790](v4 - 8);
  id v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CamParse();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SiriXParse?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for SiriXParse();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  ActionCandidate.parse.getter();
  SiriXParse.init(fromCamParse:)(v9, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    uint64_t v17 = type metadata accessor for ActionCandidate();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(a1, v17);
    uint64_t v18 = (uint64_t *)&demangling cache variable for type metadata for SiriXParse?;
    uint64_t v19 = (uint64_t)v12;
LABEL_5:
    outlined destroy of ReferenceResolutionClientProtocol?(v19, v18);
    uint64_t v24 = type metadata accessor for SiriXActionCandidate();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(a2, 1, 1, v24);
  }
  uint64_t v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
  MEMORY[0x1F4188790](v20);
  *(&v26 - 2) = a1;
  *(&v26 - 1) = (uint64_t)v16;
  SiriXActionCandidate.init(build:)();
  uint64_t v21 = type metadata accessor for ActionCandidate();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(a1, v21);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  uint64_t v22 = type metadata accessor for SiriXActionCandidate();
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v6, 1, v22))
  {
    uint64_t v18 = (uint64_t *)&demangling cache variable for type metadata for SiriXActionCandidate?;
    uint64_t v19 = (uint64_t)v6;
    goto LABEL_5;
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(a2, v6, v22);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v23 + 56))(a2, 0, 1, v22);
}

uint64_t SiriXParse.init(fromCamParse:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v75 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriXUSOParse?);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  id v70 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  id v71 = (char *)&v65 - v6;
  uint64_t v7 = type metadata accessor for SiriXUSOParse();
  uint64_t v68 = *(void *)(v7 - 8);
  uint64_t v69 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CamUSOParse();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v65 - v15;
  uint64_t v17 = type metadata accessor for CamParse();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  unint64_t v66 = (char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v67 = (char *)&v65 - v22;
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v65 - v23;
  uint64_t v25 = type metadata accessor for SiriXParse();
  uint64_t v73 = *(void *)(v25 - 8);
  uint64_t v74 = v25;
  MEMORY[0x1F4188790](v25);
  uint64_t v72 = (uint8_t *)&v65 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  id v76 = a1;
  uint64_t v28 = a1;
  uint64_t v29 = v27;
  v27(v24, (uint64_t)v28, v17);
  int v30 = (*(uint64_t (**)(char *, uint64_t))(v18 + 88))(v24, v17);
  if (v30 == *MEMORY[0x1E4F9FA48])
  {
    unint64_t v66 = v9;
    (*(void (**)(char *, uint64_t))(v18 + 96))(v24, v17);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v24, v10);
    unint64_t v31 = *(uint64_t (**)(char *, char *, uint64_t))(v11 + 16);
    uint64_t v67 = v16;
    uint64_t v32 = v31(v14, v16, v10);
    MEMORY[0x1F4188790](v32);
    *(&v65 - 2) = (uint64_t)v14;
    uint64_t v33 = (uint64_t)v70;
    SiriXUSOParse.init(build:)();
    uint64_t v34 = *(void (**)(char *, uint64_t))(v11 + 8);
    v34(v14, v10);
    uint64_t v35 = v68;
    uint64_t v36 = v69;
    os_log_type_t v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
    if (v37(v33, 1, v69))
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v33, &demangling cache variable for type metadata for SiriXUSOParse?);
      uint64_t v38 = 1;
      uint64_t v39 = (uint64_t)v71;
    }
    else
    {
      uint64_t v46 = v33;
      uint64_t v39 = (uint64_t)v71;
      (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v71, v46, v36);
      uint64_t v38 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56))(v39, v38, 1, v36);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v76, v17);
    v34(v67, v10);
    if (v37(v39, 1, v36) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v39, &demangling cache variable for type metadata for SiriXUSOParse?);
LABEL_20:
      uint64_t v49 = 1;
      uint64_t v44 = v74;
      uint64_t v43 = v75;
      uint64_t v45 = v73;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 56))(v43, v49, 1, v44);
    }
    unint64_t v47 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 32);
    id v48 = v66;
    v47(v66, v39, v36);
    uint64_t v40 = v72;
    v47((char *)v72, (uint64_t)v48, v36);
    os_log_type_t v41 = (unsigned int *)MEMORY[0x1E4FA22A8];
    goto LABEL_12;
  }
  if (v30 == *MEMORY[0x1E4F9FA40])
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v76, v17);
    (*(void (**)(char *, uint64_t))(v18 + 96))(v24, v17);
    uint64_t v40 = v72;
    *(void *)uint64_t v72 = *(void *)v24;
    os_log_type_t v41 = (unsigned int *)MEMORY[0x1E4FA22A0];
LABEL_12:
    uint64_t v44 = v74;
    uint64_t v43 = v75;
    uint64_t v45 = v73;
    goto LABEL_13;
  }
  BOOL v42 = v76;
  if (v30 != *MEMORY[0x1E4F9FA50])
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v50 = type metadata accessor for Logger();
    __swift_project_value_buffer(v50, (uint64_t)static Logger.executor);
    unint64_t v51 = v67;
    v29(v67, (uint64_t)v42, v17);
    id v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.error.getter();
    int v54 = v53;
    id v55 = (void (*)(char *, char *, uint64_t))v29;
    uint64_t v56 = v17;
    if (os_log_type_enabled(v52, v53))
    {
      id v57 = (uint8_t *)swift_slowAlloc();
      uint64_t v58 = swift_slowAlloc();
      uint64_t v78 = v58;
      uint64_t v72 = v57;
      *(_DWORD *)id v57 = 136315138;
      id v70 = (char *)(v57 + 4);
      LODWORD(v71) = v54;
      v55(v66, v51, v56);
      uint64_t v59 = String.init<A>(describing:)();
      uint64_t v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, &v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v61 = *(void (**)(char *, uint64_t))(v18 + 8);
      v61(v51, v56);
      id v62 = v72;
      _os_log_impl(&dword_1B9C64000, v52, (os_log_type_t)v71, "Unknown CamParse type: %s", v72, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v58, -1, -1);
      MEMORY[0x1BA9E48C0](v62, -1, -1);

      uint64_t v63 = v76;
    }
    else
    {

      uint64_t v61 = *(void (**)(char *, uint64_t))(v18 + 8);
      v61(v51, v56);
      uint64_t v63 = v42;
    }
    v61(v63, v56);
    v61(v24, v56);
    goto LABEL_20;
  }
  (*(void (**)(char *, uint64_t))(v18 + 8))(v76, v17);
  os_log_type_t v41 = (unsigned int *)MEMORY[0x1E4FA22B0];
  uint64_t v44 = v74;
  uint64_t v43 = v75;
  uint64_t v40 = v72;
  uint64_t v45 = v73;
LABEL_13:
  (*(void (**)(uint8_t *, void, uint64_t))(v45 + 104))(v40, *v41, v44);
  (*(void (**)(uint64_t, uint8_t *, uint64_t))(v45 + 32))(v43, v40, v44);
  uint64_t v49 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 56))(v43, v49, 1, v44);
}

uint64_t closure #1 in SiriXActionCandidate.init(fromCamActionCandidate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SiriXParse?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  ActionCandidate.flowHandlerId.getter();
  SiriXActionCandidate.Builder.flowHandlerId.setter();
  uint64_t v10 = type metadata accessor for SiriXParse();
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v9, a3, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  SiriXActionCandidate.Builder.parse.setter();
  ActionCandidate.affinityScore.getter();
  SiriXActionCandidate.Builder.affinityScore.setter();
  ActionCandidate.loggingId.getter();
  uint64_t v12 = type metadata accessor for UUID();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v6, 0, 1, v12);
  return SiriXActionCandidate.Builder.loggingId.setter();
}

uint64_t partial apply for closure #1 in SiriXActionCandidate.init(fromCamActionCandidate:)(uint64_t a1)
{
  return closure #1 in SiriXActionCandidate.init(fromCamActionCandidate:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t SiriXUSOParse.init(fromCamUsoParse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriXUSOParse?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = a1;
  SiriXUSOParse.init(build:)();
  uint64_t v7 = type metadata accessor for CamUSOParse();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a1, v7);
  uint64_t v8 = type metadata accessor for SiriXUSOParse();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8))
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for SiriXUSOParse?);
    uint64_t v10 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v9 + 32))(a2, v6, v8);
    uint64_t v10 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2, v10, 1, v8);
}

uint64_t closure #1 in SiriXUSOParse.init(fromCamUsoParse:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  CamUSOParse.userParse.getter();
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_UserParse();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 0, 1, v4);
  SiriXUSOParse.Builder.userParse.setter();
  CamUSOParse.parserIdentifier.getter();
  SiriXUSOParse.Builder.parserIdentifier.setter();
  CamUSOParse.appBundleId.getter();
  SiriXUSOParse.Builder.appBundleId.setter();
  CamUSOParse.groupIndex.getter();
  return SiriXUSOParse.Builder.groupIndex.setter();
}

uint64_t partial apply for closure #1 in SiriXUSOParse.init(fromCamUsoParse:)()
{
  return closure #1 in SiriXUSOParse.init(fromCamUsoParse:)();
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(v6, (uint64_t)&v15, (uint64_t *)&demangling cache variable for type metadata for (String, Any));
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  void v22[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, Int));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, Int>);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = *(int *)(v2 + 48);
  char v10 = v6 + 64;
  uint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  BOOL v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (UUID, Int));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if (v15) {
      break;
    }
    uint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    long long v17 = v7[6];
    uint64_t v18 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(void *)(v7[7] + 8 * v16) = *(void *)&v5[v9];
    uint64_t v19 = v7[2];
    uint64_t v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (DateTime.DateTimeRange.DefinedDateTimeRange, DateTime), &demangling cache variable for type metadata for _DictionaryStorage<DateTime.DateTimeRange.DefinedDateTimeRange, DateTime>, (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:), MEMORY[0x1E4F9FE18]);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  void v25[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StringKeyedValue));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (void *)((char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, StringKeyedValue>);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = (uint64_t)v5 + *(int *)(v2 + 48);
  char v10 = v6 + 64;
  uint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  uint64_t v12 = a1 + v11;
  BOOL v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (String, StringKeyedValue));
    uint64_t v14 = *v5;
    uint64_t v15 = v5[1];
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*v5, v15);
    if (v17) {
      break;
    }
    uint64_t v18 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v19 = (uint64_t *)(v7[6] + 16 * result);
    *uint64_t v19 = v14;
    v19[1] = v15;
    uint64_t v20 = v7[7];
    uint64_t v21 = type metadata accessor for StringKeyedValue();
    unint64_t result = outlined init with take of StringKeyedValue(v9, v20 + *(void *)(*(void *)(v21 - 8) + 72) * v18, (uint64_t (*)(void))type metadata accessor for StringKeyedValue);
    uint64_t v22 = v7[2];
    uint64_t v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_11;
    }
    v7[2] = v24;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (UUID, [UUID]), &demangling cache variable for type metadata for _DictionaryStorage<UUID, [UUID]>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
}

{
  void *v2;
  uint64_t v3;
  unsigned char *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Bool>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unsigned char *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    *char v10 = v5;
    v10[1] = v6;
    *(unsigned char *)(v2[7] + result) = v7;
    uint64_t v11 = v2[2];
    uint64_t v12 = __OFADD__(v11, 1);
    BOOL v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 24;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  void v22[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ConversationSessionKey, Sendable));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ConversationSessionKey, Sendable>);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = &v5[*(int *)(v2 + 48)];
  char v10 = v6 + 64;
  uint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  BOOL v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (ConversationSessionKey, Sendable));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if (v15) {
      break;
    }
    uint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    long long v17 = v7[6];
    uint64_t v18 = type metadata accessor for ConversationSessionKey();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    unint64_t result = (unint64_t)outlined init with take of Any(v9, (_OWORD *)(v7[7] + 32 * v16));
    uint64_t v19 = v7[2];
    uint64_t v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    BOOL v13 = v2[2];
    uint64_t v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, SASRecognition>);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  void v22[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, ()));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, @MessageBusActor (_:_:)>);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = *(int *)(v2 + 48);
  char v10 = v6 + 64;
  uint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  BOOL v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (UUID, ()));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if (v15) {
      break;
    }
    uint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    long long v17 = v7[6];
    uint64_t v18 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(_OWORD *)(v7[7] + 16 * v16) = *(_OWORD *)&v5[v9];
    uint64_t v19 = v7[2];
    uint64_t v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (UserID, ContextUpdater), (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UserID, ContextUpdater>, (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:), MEMORY[0x1E4FA26E0]);
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ConversationMessageDispatchingBridgeBase<ConversationBridge>.MessageHandlerBase>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    *char v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    uint64_t v12 = __OFADD__(v11, 1);
    BOOL v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, [String : ConversationMessageDispatchingBridgeBase<ConversationBridge>.CommandHandlerBase]>);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  void v22[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ConversationSessionKey, Any?));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ConversationSessionKey, Any?>);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = (uint64_t)&v5[*(int *)(v2 + 48)];
  char v10 = v6 + 64;
  uint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  BOOL v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (ConversationSessionKey, Any?));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if (v15) {
      break;
    }
    uint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    long long v17 = v7[6];
    uint64_t v18 = type metadata accessor for ConversationSessionKey();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    unint64_t result = outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v9, v7[7] + 32 * v16, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v19 = v7[2];
    uint64_t v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  long long v10;
  long long v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  long long v17;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(v6, (uint64_t)v15, &demangling cache variable for type metadata for (AnyHashable, Any));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    char v10 = v15[0];
    uint64_t v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (UserID, AFSpeechPackage), &demangling cache variable for type metadata for _DictionaryStorage<UserID, AFSpeechPackage>, (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:), MEMORY[0x1E4FA26E0]);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, NSNumber>);
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, SMTTCUState>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    *char v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    uint64_t v12 = __OFADD__(v11, 1);
    BOOL v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  void v24[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, ActionCandidate));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, ActionCandidate>);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = &v5[*(int *)(v2 + 48)];
  char v10 = v6 + 64;
  uint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  uint64_t v12 = a1 + v11;
  BOOL v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (UUID, ActionCandidate));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if (v15) {
      break;
    }
    uint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    long long v17 = v7[6];
    uint64_t v18 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    uint64_t v19 = v7[7];
    uint64_t v20 = type metadata accessor for ActionCandidate();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v19 + *(void *)(*(void *)(v20 - 8) + 72) * v16, v9, v20);
    uint64_t v21 = v7[2];
    uint64_t v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_11;
    }
    v7[2] = v23;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AnyEncodable>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    BOOL v13 = v2[2];
    uint64_t v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v2[2] = v15;
    v4 += 4;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [LNSystemProtocol : [LinkActionMetadata]]>);
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<LNSystemProtocol, [LinkActionMetadata]>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    uint64_t v6 = (id)*(v4 - 1);
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    char v10 = v2[2];
    uint64_t v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  long long v13;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (_:)>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (_OWORD *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    BOOL v13 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = (uint64_t *)(v2[6] + 16 * result);
    char *v9 = v5;
    v9[1] = v6;
    *(_OWORD *)(v2[7] + 16 * result) = v13;
    char v10 = v2[2];
    uint64_t v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, Set<String>>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, SAPerson>);
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v11 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v10 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v11 = (void *)v10;
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v11;
  }
  uint64_t v13 = *(int *)(v6 + 48);
  uint64_t v14 = v10 + 64;
  unint64_t v15 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v26[1] = a1;
  uint64_t v16 = a1 + v15;
  uint64_t v17 = *(void *)(v7 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(v16, (uint64_t)v9, a2);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9);
    if (v19) {
      break;
    }
    unint64_t v20 = result;
    *(void *)(v14 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v21 = v11[6];
    uint64_t v22 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v21 + *(void *)(*(void *)(v22 - 8) + 72) * v20, v9, v22);
    *(void *)(v11[7] + 8 * v20) = *(void *)&v9[v13];
    uint64_t v23 = v11[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24) {
      goto LABEL_11;
    }
    v11[2] = v25;
    v16 += v17;
    if (!--v12)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(char *), uint64_t (*a5)(void))
{
  uint64_t v29 = a5;
  int v30 = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v12 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v13 = (void *)v12;
  uint64_t v14 = *(void *)(a1 + 16);
  if (!v14)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v13;
  }
  uint64_t v15 = *(int *)(v8 + 48);
  uint64_t v16 = v12 + 64;
  unint64_t v17 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v28[1] = a1;
  uint64_t v18 = a1 + v17;
  uint64_t v19 = *(void *)(v9 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(v18, (uint64_t)v11, a2);
    unint64_t result = v30(v11);
    if (v21) {
      break;
    }
    unint64_t v22 = result;
    *(void *)(v16 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v23 = v13[6];
    uint64_t v24 = v29(0);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v23 + *(void *)(*(void *)(v24 - 8) + 72) * v22, v11, v24);
    *(void *)(v13[7] + 8 * v22) = *(void *)&v11[v15];
    uint64_t v25 = v13[2];
    BOOL v26 = __OFADD__(v25, 1);
    uint64_t v27 = v25 + 1;
    if (v26) {
      goto LABEL_11;
    }
    v13[2] = v27;
    v18 += v19;
    if (!--v14)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v6 = *(v5 - 2);
    uint64_t v7 = *(v5 - 1);
    uint64_t v8 = *v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if (v10) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v6;
    v11[1] = v7;
    *(void *)(v3[7] + 8 * result) = v8;
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v6 = (uint64_t)*(v5 - 2);
    uint64_t v7 = (uint64_t)*(v5 - 1);
    uint64_t v8 = *v5;
    swift_bridgeObjectRetain();
    uint64_t v9 = v8;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if (v11) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v12 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v12 = v6;
    v12[1] = v7;
    *(void *)(v3[7] + 8 * result) = v9;
    BOOL v13 = v3[2];
    uint64_t v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v3[2] = v15;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay14SiriKitRuntime28GeneralizedAppShortcutTargetVG_0dE4Flow8USOParseVs5NeverOTg5(void (*a1)(void *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v20 = a1;
  uint64_t v21 = a2;
  uint64_t v19 = type metadata accessor for USOParse();
  uint64_t v6 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = MEMORY[0x1E4FBC860];
  if (v9)
  {
    uint64_t v25 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
    uint64_t v10 = v25;
    v18[1] = v6 + 32;
    for (unint64_t i = (unsigned char *)(a3 + 52); ; i += 24)
    {
      uint64_t v12 = *(void *)(i - 12);
      int v13 = *((_DWORD *)i - 1);
      char v14 = *i;
      v22[0] = *(void *)(i - 20);
      v22[1] = v12;
      int v23 = v13;
      char v24 = v14;
      swift_bridgeObjectRetain();
      v20(v22);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      swift_bridgeObjectRelease();
      uint64_t v25 = v10;
      unint64_t v16 = *(void *)(v10 + 16);
      unint64_t v15 = *(void *)(v10 + 24);
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        uint64_t v10 = v25;
      }
      *(void *)(v10 + 16) = v16 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v16, v8, v19);
      if (!--v9) {
        return v10;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v10;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay14SiriKitRuntime26ConversationHandlerLocatorC06ScoredH0VG_10Foundation4UUIDV4uuid_AJ06scoredH0ts5NeverOTg5(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6 - 8);
  int64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = MEMORY[0x1E4FBC860];
  if (v10)
  {
    uint64_t v21 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    uint64_t v11 = v21;
    uint64_t v12 = *(void *)(type metadata accessor for ConversationHandlerLocator.ScoredHandler() - 8);
    uint64_t v13 = a3 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    uint64_t v18 = *(void *)(v12 + 72);
    while (1)
    {
      v19(v13);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v21 = v11;
      unint64_t v15 = *(void *)(v11 + 16);
      unint64_t v14 = *(void *)(v11 + 24);
      if (v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        uint64_t v11 = v21;
      }
      *(void *)(v11 + 16) = v15 + 1;
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v9, v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v15, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
      v13 += v18;
      if (!--v10) {
        return v11;
      }
    }
    swift_release();
  }
  return v11;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4UUIDV4uuid_7SiriCam15ActionCandidateV06actionJ0tG_ALs5NeverOTg504_s14g12KitRuntime15i77GeneratorC08generateD10Candidates4from02rrG019appShortcutProviderSay0A3Cam0D9j29VGAA21ConversationUserInputC_W177A28ReferenceResolutionDataModel11RRCandidateVG0aB4Flow03AppK9Providing_ptYaFAJ10Foundation4UUIDV4uuid_AJ06actionN0t_tcfu2_33_40673c41111a6ef0d8501a99c5a3b4d4AvW_AjXtAJTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
  uint64_t v3 = *(void *)(v44 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v44);
  uint64_t v43 = (char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  BOOL v42 = (char *)v32 - v6;
  uint64_t v7 = type metadata accessor for ActionCandidate();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  int64_t v10 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = MEMORY[0x1E4FBC860];
  if (v11)
  {
    v32[1] = v1;
    uint64_t v49 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v39 = *(void *)(v3 + 72);
    uint64_t v38 = type metadata accessor for UUID();
    uint64_t v14 = *(void *)(v38 - 8);
    unint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    uint64_t v36 = v14 + 16;
    os_log_type_t v37 = v15;
    uint64_t v34 = (void (**)(char *, char *, uint64_t))(v14 + 32);
    uint64_t v35 = v8 + 16;
    unint64_t v16 = (void (**)(char *, char *, uint64_t))(v8 + 32);
    uint64_t v40 = v10;
    uint64_t v41 = v8;
    uint64_t v33 = (void (**)(char *, char *, uint64_t))(v8 + 32);
    uint64_t v17 = (void (**)(char *, char *, uint64_t))(v8 + 16);
    do
    {
      uint64_t v47 = v13;
      int64_t v48 = v11;
      uint64_t v18 = v44;
      uint64_t v19 = *(int *)(v44 + 48);
      uint64_t v20 = v42;
      uint64_t v21 = &v42[v19];
      uint64_t v46 = (void (*)(char *, char *, uint64_t))(v13 + v19);
      uint64_t v22 = v13;
      uint64_t v23 = v38;
      v37(v42, v22, v38);
      uint64_t v45 = *v17;
      v45(v21, (char *)v46, v7);
      uint64_t v24 = *(int *)(v18 + 48);
      uint64_t v25 = (uint64_t)v43;
      BOOL v26 = &v43[v24];
      (*v34)(v43, v20, v23);
      uint64_t v46 = *v16;
      v46(v26, v21, v7);
      v45(v10, v26, v7);
      outlined destroy of ReferenceResolutionClientProtocol?(v25, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
      uint64_t v12 = v49;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v12 + 16) + 1, 1);
        uint64_t v12 = v49;
      }
      unint64_t v28 = *(void *)(v12 + 16);
      unint64_t v27 = *(void *)(v12 + 24);
      uint64_t v29 = v47;
      unint64_t v16 = v33;
      if (v28 >= v27 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
        uint64_t v12 = v49;
      }
      *(void *)(v12 + 16) = v28 + 1;
      unint64_t v30 = v12
          + ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))
          + *(void *)(v41 + 72) * v28;
      int64_t v10 = v40;
      v46((char *)v30, v40, v7);
      uint64_t v49 = v12;
      uint64_t v13 = v29 + v39;
      int64_t v11 = v48 - 1;
    }
    while (v48 != 1);
  }
  return v12;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS11appBundleId_SDySSypG8userDatatG_14SiriKitRuntime09ParseUserH10AttachmentVs5NeverOTg5(void (*a1)(void *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v6 = type metadata accessor for ParseUserDataAttachment();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = MEMORY[0x1E4FBC860];
  if (v10)
  {
    uint64_t v22 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    uint64_t v11 = v22;
    for (unint64_t i = (uint64_t *)(a3 + 48); ; i += 3)
    {
      uint64_t v13 = *(i - 1);
      uint64_t v14 = *i;
      v21[0] = *(i - 2);
      v21[1] = v13;
      v21[2] = v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v19(v21);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v22 = v11;
      unint64_t v16 = *(void *)(v11 + 16);
      unint64_t v15 = *(void *)(v11 + 24);
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        uint64_t v11 = v22;
      }
      *(void *)(v11 + 16) = v16 + 1;
      outlined init with take of StringKeyedValue((uint64_t)v9, v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v16, (uint64_t (*)(void))type metadata accessor for ParseUserDataAttachment);
      if (!--v10) {
        return v11;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v11;
}

uint64_t specialized Sequence.contains(where:)(uint64_t (*a1)(char *), char a2, uint64_t a3)
{
  uint64_t v32 = a1;
  uint64_t v6 = type metadata accessor for AppShortcutGeneralizedInvocation();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  int64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  unint64_t v31 = (char *)&v27 - v11;
  uint64_t v12 = *(void *)(a3 + 56);
  uint64_t v27 = a3 + 56;
  uint64_t v13 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  uint64_t v30 = v7 + 16;
  int64_t v28 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v29 = v7 + 32;
  unint64_t v16 = (void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v33 = a3;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v18 = 0;
  while (1)
  {
    if (v15)
    {
      unint64_t v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v20 = v19 | (v18 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v18++, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v18 >= v28) {
      goto LABEL_27;
    }
    unint64_t v22 = *(void *)(v27 + 8 * v18);
    if (!v22) {
      break;
    }
LABEL_18:
    unint64_t v15 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v18 << 6);
LABEL_19:
    uint64_t v24 = v31;
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v31, *(void *)(v33 + 48) + *(void *)(v7 + 72) * v20, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v24, v6);
    char v25 = v32(v10);
    if (v3)
    {
      (*v16)(v10, v6);
      swift_release();
      return a2 & 1;
    }
    char v26 = v25;
    uint64_t result = ((uint64_t (*)(char *, uint64_t))*v16)(v10, v6);
    if (v26)
    {
      a2 = 1;
      goto LABEL_28;
    }
  }
  int64_t v23 = v18 + 1;
  if (v18 + 1 >= v28) {
    goto LABEL_27;
  }
  unint64_t v22 = *(void *)(v27 + 8 * v23);
  if (v22) {
    goto LABEL_17;
  }
  int64_t v23 = v18 + 2;
  if (v18 + 2 >= v28) {
    goto LABEL_27;
  }
  unint64_t v22 = *(void *)(v27 + 8 * v23);
  if (v22) {
    goto LABEL_17;
  }
  int64_t v23 = v18 + 3;
  if (v18 + 3 >= v28) {
    goto LABEL_27;
  }
  unint64_t v22 = *(void *)(v27 + 8 * v23);
  if (v22) {
    goto LABEL_17;
  }
  int64_t v23 = v18 + 4;
  if (v18 + 4 >= v28)
  {
LABEL_27:
    a2 = 0;
LABEL_28:
    swift_release();
    return a2 & 1;
  }
  unint64_t v22 = *(void *)(v27 + 8 * v23);
  if (v22)
  {
LABEL_17:
    int64_t v18 = v23;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v18 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v18 >= v28) {
      goto LABEL_27;
    }
    unint64_t v22 = *(void *)(v27 + 8 * v18);
    ++v23;
    if (v22) {
      goto LABEL_18;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t ParseUserDataAttachment.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t ParseUserDataAttachment.parse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ParseUserDataAttachment() + 20);
  uint64_t v4 = type metadata accessor for Parse();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t type metadata accessor for ParseUserDataAttachment()
{
  uint64_t result = type metadata singleton initialization cache for ParseUserDataAttachment;
  if (!type metadata singleton initialization cache for ParseUserDataAttachment) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t ParseUserDataAttachment.userData.getter()
{
  type metadata accessor for ParseUserDataAttachment();

  return swift_bridgeObjectRetain();
}

uint64_t ParseUserDataAttachment.init(parse:userData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  UUID.init()();
  uint64_t v6 = type metadata accessor for ParseUserDataAttachment();
  uint64_t v7 = a3 + *(int *)(v6 + 20);
  uint64_t v8 = type metadata accessor for Parse();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7, a1, v8);
  *(void *)(a3 + *(int *)(v6 + 24)) = a2;
  return result;
}

uint64_t ActionGenerator.conversationHandlerLocator.getter()
{
  return swift_retain();
}

void *ActionGenerator.dummySnlcFlowHandlerId.unsafeMutableAddressor()
{
  return &static ActionGenerator.dummySnlcFlowHandlerId;
}

unint64_t static ActionGenerator.dummySnlcFlowHandlerId.getter()
{
  return 0xD000000000000013;
}

void *ActionGenerator.kIsEnabledAppShortcutKey.unsafeMutableAddressor()
{
  return &static ActionGenerator.kIsEnabledAppShortcutKey;
}

unint64_t static ActionGenerator.kIsEnabledAppShortcutKey.getter()
{
  return 0xD000000000000014;
}

const char *ActionGenerator.kNLRouterUserDataKey.unsafeMutableAddressor()
{
  return "nlRouter";
}

uint64_t static ActionGenerator.kNLRouterUserDataKey.getter()
{
  return 0x726574756F526C6ELL;
}

void *ActionGenerator.__allocating_init(conversationHandlerLocator:linkExpansionContextBuilder:appShortcutExpansionContextBuilder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (void *)swift_allocObject();
  result[3] = a3;
  result[4] = a1;
  result[2] = a2;
  return result;
}

void *ActionGenerator.init(conversationHandlerLocator:linkExpansionContextBuilder:appShortcutExpansionContextBuilder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v3[3] = a3;
  v3[4] = a1;
  v3[2] = a2;
  return v3;
}

Swift::Void __swiftcall ActionGenerator.newSessionStarted()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0) + 46;
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v5 = static SiriKitFlowFeatureFlagDefinitions.forceEnabled;
  if (*(void *)(static SiriKitFlowFeatureFlagDefinitions.forceEnabled + 16)
    && (uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(), (v7 & 1) != 0))
  {
    if (*(unsigned char *)(*(void *)(v5 + 56) + v6) != 1) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v27 = &type metadata for SiriKitFlowFeatureFlagDefinitions;
    unint64_t v28 = lazy protocol witness table accessor for type SiriKitFlowFeatureFlagDefinitions and conformance SiriKitFlowFeatureFlagDefinitions();
    char v8 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v26);
    if ((v8 & 1) == 0) {
      goto LABEL_11;
    }
  }
  uint64_t v9 = *(void *)(v1 + 16);
  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v4, 1, 1, v10);
  uint64_t v11 = one-time initialization token for shared;
  swift_retain();
  if (v11 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v12 = static MessageBusActor.shared;
  uint64_t v13 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = v12;
  v14[3] = v13;
  v14[4] = v9;
  swift_retain();
  *(void *)(v9 + 104) = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC14SiriKitRuntime20LinkExpansionContextV07SessionI0C_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #1 in LinkExpansionContextBuilder.newSessionStarted(), (uint64_t)v14);
  swift_release();
LABEL_11:
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v15 = static LinkFeature.forceEnabled;
  if (*(void *)(static LinkFeature.forceEnabled + 16)
    && (uint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(), (v17 & 1) != 0))
  {
    if (*(unsigned char *)(*(void *)(v15 + 56) + v16) != 1) {
      return;
    }
  }
  else
  {
    uint64_t v27 = &type metadata for LinkFeature;
    unint64_t v28 = lazy protocol witness table accessor for type LinkFeature and conformance LinkFeature();
    char v18 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v26);
    if ((v18 & 1) == 0) {
      return;
    }
  }
  uint64_t v19 = *(void *)(v1 + 24);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.executor);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    int64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int64_t v23 = 0;
    _os_log_impl(&dword_1B9C64000, v21, v22, "[AppShortcutExpansionContext] New session started", v23, 2u);
    MEMORY[0x1BA9E48C0](v23, -1, -1);
  }

  type metadata accessor for ConditionalIntentMetadataStore();
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = MEMORY[0x1E4FBC868];
  swift_beginAccess();
  *(void *)(v19 + 16) = v24;
  swift_release();
}

Swift::Void __swiftcall ActionGenerator.newTurnStarted()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v2 = static SiriKitFlowFeatureFlagDefinitions.forceEnabled;
  if (*(void *)(static SiriKitFlowFeatureFlagDefinitions.forceEnabled + 16)
    && (uint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(), (v4 & 1) != 0))
  {
    if (*(unsigned char *)(*(void *)(v2 + 56) + v3) != 1) {
      goto LABEL_13;
    }
  }
  else
  {
    os_log_type_t v22 = &type metadata for SiriKitFlowFeatureFlagDefinitions;
    unint64_t v23 = lazy protocol witness table accessor for type SiriKitFlowFeatureFlagDefinitions and conformance SiriKitFlowFeatureFlagDefinitions();
    char v5 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v21);
    if ((v5 & 1) == 0) {
      goto LABEL_13;
    }
  }
  uint64_t v6 = *(void *)(v1 + 16);
  if (one-time initialization token for kLogger != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)kLogger);
  char v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl(&dword_1B9C64000, v8, v9, "[LinkExpansionContext] New turn started", v10, 2u);
    MEMORY[0x1BA9E48C0](v10, -1, -1);
  }

  swift_beginAccess();
  *(void *)(v6 + 16) = 0;
  swift_release();
LABEL_13:
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v11 = static LinkFeature.forceEnabled;
  if (*(void *)(static LinkFeature.forceEnabled + 16)
    && (uint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(), (v13 & 1) != 0))
  {
    if (*(unsigned char *)(*(void *)(v11 + 56) + v12) != 1) {
      return;
    }
  }
  else
  {
    os_log_type_t v22 = &type metadata for LinkFeature;
    unint64_t v23 = lazy protocol witness table accessor for type LinkFeature and conformance LinkFeature();
    char v14 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v21);
    if ((v14 & 1) == 0) {
      return;
    }
  }
  uint64_t v15 = *(void **)(v1 + 24);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.executor);
  char v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl(&dword_1B9C64000, v17, v18, "[AppShortcutExpansionContext] New turn started", v19, 2u);
    MEMORY[0x1BA9E48C0](v19, -1, -1);
  }

  swift_beginAccess();
  uint64_t v20 = v15[3];
  v15[4] = 0;
  v15[5] = 0;
  v15[3] = 0;
  outlined consume of AppShortcutExpansionContext?(v20);
}

uint64_t ActionGenerator.getAppShortcutExpansionContext(rrCandidates:nlParses:)(uint64_t a1, uint64_t a2)
{
  v3[14] = a2;
  v3[15] = v2;
  v3[13] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  v3[16] = swift_task_alloc();
  return MEMORY[0x1F4188298](ActionGenerator.getAppShortcutExpansionContext(rrCandidates:nlParses:), 0, 0);
}

uint64_t ActionGenerator.getAppShortcutExpansionContext(rrCandidates:nlParses:)()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    char v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v4 = 0;
    _os_log_impl(&dword_1B9C64000, v2, v3, "[ActionGenerator] Beginning building the AppShortcutExpansionContext", v4, 2u);
    MEMORY[0x1BA9E48C0](v4, -1, -1);
  }
  uint64_t v5 = v0[14];

  uint64_t v6 = *(void *)(v5 + 16);
  if (!v6)
  {
    uint64_t v12 = (void *)MEMORY[0x1E4FBC860];
LABEL_41:
    v0[17] = v12;
    v0[18] = *(void *)(v0[15] + 24);
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v34 = static MessageBusActor.shared;
    v0[19] = static MessageBusActor.shared;
    swift_retain();
    return MEMORY[0x1F4188298](ActionGenerator.getAppShortcutExpansionContext(rrCandidates:nlParses:), v34, 0);
  }
  uint64_t v7 = v0[14];
  uint64_t v8 = *(void *)(type metadata accessor for Siri_Nlu_External_UserParse() - 8);
  uint64_t v9 = v7 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  uint64_t v10 = *(void *)(v8 + 72);
  uint64_t v11 = swift_bridgeObjectRetain();
  uint64_t v12 = (void *)MEMORY[0x1E4FBC860];
  while (1)
  {
    uint64_t v13 = MEMORY[0x1BA9DE000](v11);
    uint64_t v14 = *(void *)(v13 + 16);
    uint64_t v15 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
    uint64_t v16 = *(void *)(v15 - 8);
    if (v14)
    {
      (*(void (**)(void, unint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v0[16], v13+ ((*(unsigned __int8 *)(*(void *)(v15 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v15 - 8) + 80)), v15);
      uint64_t v17 = 0;
    }
    else
    {
      uint64_t v17 = 1;
    }
    uint64_t v18 = v0[16];
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v18, v17, 1, v15);
    swift_bridgeObjectRelease();
    int v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v18, 1, v15);
    uint64_t v20 = v0[16];
    if (v19 == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v0[16], &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    }
    else
    {
      unint64_t v21 = Siri_Nlu_External_UserDialogAct.toUsoTask()();
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v20, v15);
      if (v21)
      {
        swift_retain();
        static UsoTask_CodegenConverter.convert(task:)();
        swift_release();
        if (v0[5])
        {
          type metadata accessor for UsoTask_run_common_VoiceCommand();
          if (swift_dynamicCast())
          {
            uint64_t v22 = UsoTask_run_common_VoiceCommand.appShortcuts.getter();
            swift_release();
            swift_release();
            goto LABEL_21;
          }
          swift_release();
        }
        else
        {
          swift_release();
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)(v0 + 2), (uint64_t *)&demangling cache variable for type metadata for Any?);
        }
      }
    }
    uint64_t v22 = MEMORY[0x1E4FBC860];
LABEL_21:
    uint64_t v23 = *(void *)(v22 + 16);
    int64_t v24 = v12[2];
    int64_t v25 = v24 + v23;
    if (__OFADD__(v24, v23)) {
      break;
    }
    char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v25 <= v12[3] >> 1)
    {
      if (*(void *)(v22 + 16)) {
        goto LABEL_30;
      }
    }
    else
    {
      if (v24 <= v25) {
        int64_t v27 = v24 + v23;
      }
      else {
        int64_t v27 = v24;
      }
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v27, 1, v12, &demangling cache variable for type metadata for _ContiguousArrayStorage<AppShortcutTarget>);
      if (*(void *)(v22 + 16))
      {
LABEL_30:
        uint64_t v28 = v12[2];
        if ((v12[3] >> 1) - v28 < v23) {
          goto LABEL_48;
        }
        unint64_t v29 = (unint64_t)&v12[5 * v28 + 4];
        if (v22 + 32 < v29 + 40 * v23 && v29 < v22 + 32 + 40 * v23) {
          return _fatalErrorMessage(_:_:file:line:flags:)();
        }
        swift_arrayInitWithCopy();
        if (v23)
        {
          uint64_t v31 = v12[2];
          BOOL v32 = __OFADD__(v31, v23);
          uint64_t v33 = v31 + v23;
          if (v32) {
            goto LABEL_49;
          }
          _OWORD v12[2] = v33;
        }
        goto LABEL_8;
      }
    }
    if (v23) {
      goto LABEL_47;
    }
LABEL_8:
    uint64_t v11 = swift_bridgeObjectRelease();
    v9 += v10;
    if (!--v6)
    {
      swift_bridgeObjectRelease();
      goto LABEL_41;
    }
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  uint64_t v1 = v0[18];
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 24);
  if (v2)
  {
    uint64_t v5 = v1 + 32;
    char v4 = *(void *)(v1 + 32);
    os_log_type_t v3 = *(void *)(v5 + 8);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_release();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
    return v6(v2, v4, v3);
  }
  else
  {
    uint64_t v8 = (void *)swift_task_alloc();
    v0[20] = v8;
    *uint64_t v8 = v0;
    v8[1] = ActionGenerator.getAppShortcutExpansionContext(rrCandidates:nlParses:);
    uint64_t v9 = v0[17];
    uint64_t v10 = v0[13];
    return AppShortcutExpansionContextBuilder.collectTurnContext(rrCandidates:appShortcutTargets:)(v10, v9);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  uint64_t v1 = v0[22];
  uint64_t v2 = v0[23];
  os_log_type_t v3 = v0[21];
  char v4 = (void *)v0[18];
  swift_release();
  uint64_t v5 = v4[3];
  v4[3] = v3;
  v4[4] = v1;
  v4[5] = v2;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  outlined consume of AppShortcutExpansionContext?(v5);
  swift_bridgeObjectRelease();
  uint64_t v6 = v0[22];
  uint64_t v7 = v0[23];
  uint64_t v8 = v0[21];
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  return v9(v8, v6, v7);
}

uint64_t ActionGenerator.getAppShortcutExpansionContext(rrCandidates:nlParses:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4 = *(void **)v3;
  uint64_t v5 = *(void *)(*(void *)v3 + 152);
  v4[21] = a1;
  v4[22] = a2;
  v4[23] = a3;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](ActionGenerator.getAppShortcutExpansionContext(rrCandidates:nlParses:), v5, 0);
}

unint64_t specialized Sequence.compactMap<A>(_:)(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v36 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for USOParse?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for USOParse();
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v35 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  BOOL v32 = (char *)v29 - v13;
  uint64_t v14 = *(void *)(a3 + 16);
  if (!v14) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v30 = v12;
  uint64_t v33 = (void (**)(char *))(v12 + 32);
  uint64_t v34 = (unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  v29[1] = a3;
  uint64_t v15 = (char *)(a3 + 69);
  unint64_t v41 = MEMORY[0x1E4FBC860];
  uint64_t v31 = a1;
  do
  {
    uint64_t v16 = v9;
    uint64_t v17 = *(void *)(v15 - 29);
    uint64_t v18 = *(void *)(v15 - 13);
    char v19 = *v15;
    char v20 = *(v15 - 1);
    int v21 = *(_DWORD *)(v15 - 5);
    uint64_t v22 = *(void *)(v15 - 21);
    v37[0] = *(void *)(v15 - 37);
    v37[1] = v17;
    v37[2] = v22;
    v37[3] = v18;
    int v38 = v21;
    char v39 = v20;
    char v40 = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a1(v37);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v41;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = v16;
    if ((*v34)(v8, 1, v16) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for USOParse?);
    }
    else
    {
      uint64_t v23 = v32;
      int64_t v24 = *v33;
      (*v33)(v32);
      ((void (*)(char *, char *, uint64_t))v24)(v35, v23, v16);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v41 + 16) + 1, 1, v41, &demangling cache variable for type metadata for _ContiguousArrayStorage<USOParse>, MEMORY[0x1E4FA1F80], MEMORY[0x1E4FA1F80]);
      }
      unint64_t v26 = *(void *)(v41 + 16);
      unint64_t v25 = *(void *)(v41 + 24);
      if (v26 >= v25 >> 1) {
        unint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1, v41, &demangling cache variable for type metadata for _ContiguousArrayStorage<USOParse>, MEMORY[0x1E4FA1F80], MEMORY[0x1E4FA1F80]);
      }
      unint64_t v27 = v41;
      *(void *)(v41 + 16) = v26 + 1;
      uint64_t v9 = v16;
      ((void (*)(unint64_t, char *, uint64_t))v24)(v27+ ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))+ *(void *)(v30 + 72) * v26, v35, v16);
      a1 = v31;
    }
    v15 += 40;
    --v14;
  }
  while (v14);
  swift_bridgeObjectRelease();
  return v41;
}

BOOL closure #3 in ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v67 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
  uint64_t v6 = MEMORY[0x1F4188790](v5);
  id v62 = (char *)v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  id v70 = (char *)v58 - v9;
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v59 = (char *)v58 - v11;
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)v58 - v13;
  uint64_t v66 = v12;
  uint64_t v15 = *(int *)(v12 + 48);
  uint64_t v16 = (char *)v58 + v15 - v13;
  uint64_t v17 = a1 + v15;
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v18 - 8);
  char v20 = *(void (**)(char *))(v19 + 16);
  uint64_t v61 = a1;
  uint64_t v72 = v18;
  uint64_t v64 = v20;
  uint64_t v65 = v19 + 16;
  ((void (*)(char *, uint64_t))v20)(v14, a1);
  uint64_t v21 = type metadata accessor for ActionCandidate();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  uint64_t v60 = v17;
  uint64_t v71 = v22 + 16;
  uint64_t v63 = v23;
  v23(v16, v17, v21);
  uint64_t v24 = *a3;
  if (!*(void *)(*a3 + 16)
    || (unint64_t v25 = a3, v26 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v14), (v27 & 1) == 0))
  {
    uint64_t v45 = v16;
    uint64_t v30 = *(char **)(v22 + 8);
    ((void (*)(char *, uint64_t))v30)(v45, v21);
    char v40 = *(void (**)(char *, uint64_t))(v19 + 8);
    uint64_t v43 = (v19 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v40(v14, v72);
    goto LABEL_11;
  }
  uint64_t v28 = *(char **)(v22 + 8);
  v58[0] = *(void *)(*(void *)(v24 + 56) + 8 * v26);
  v58[1] = (v22 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  unint64_t v29 = v16;
  uint64_t v30 = v28;
  ((void (*)(char *, uint64_t))v28)(v29, v21);
  uint64_t v31 = *(void (**)(char *, uint64_t))(v19 + 8);
  uint64_t v68 = (v19 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v69 = v31;
  v31(v14, v72);
  uint64_t v32 = *(int *)(v66 + 48);
  uint64_t v33 = (uint64_t)v59;
  uint64_t v34 = &v59[v32];
  uint64_t v35 = v67 + v32;
  v64(v59);
  v63(v34, v35, v21);
  uint64_t v36 = *v25;
  if (!*(void *)(*v25 + 16) || (unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v33), (v38 & 1) == 0))
  {
    ((void (*)(char *, uint64_t))v30)(v34, v21);
    char v40 = v69;
    v69((char *)v33, v72);
    uint64_t v43 = v68;
    goto LABEL_11;
  }
  uint64_t v39 = *(void *)(*(void *)(v36 + 56) + 8 * v37);
  ((void (*)(char *, uint64_t))v30)(v34, v21);
  char v40 = v69;
  v69((char *)v33, v72);
  BOOL v41 = v58[0] == v39;
  BOOL v42 = v58[0] < v39;
  uint64_t v43 = v68;
  if (v41)
  {
LABEL_11:
    uint64_t v68 = v43;
    uint64_t v69 = v40;
    uint64_t v46 = v66;
    uint64_t v47 = &v70[*(int *)(v66 + 48)];
    uint64_t v48 = v72;
    uint64_t v59 = v30;
    uint64_t v49 = v64;
    ((void (*)(void))v64)();
    uint64_t v50 = v63;
    v63(v47, v60, v21);
    uint64_t v61 = ActionCandidate.affinityScore.getter();
    ((void (*)(char *, uint64_t))v30)(v47, v21);
    uint64_t v51 = *(int *)(v46 + 48);
    id v52 = v62;
    os_log_type_t v53 = &v62[v51];
    uint64_t v54 = v67 + v51;
    v49(v62);
    v50(v53, v54, v21);
    uint64_t v55 = ActionCandidate.affinityScore.getter();
    ((void (*)(char *, uint64_t))v59)(v53, v21);
    BOOL v44 = v55 < v61;
    uint64_t v56 = v69;
    v69(v52, v48);
    v56(v70, v48);
    return v44;
  }
  return v42;
}

uint64_t closure #3 in ActionGenerator.dedupeAppShortcuts(parses:)(uint64_t a1, uint64_t a2)
{
  uint64_t v44 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AppShortcutInvocation?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v45 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for AppShortcutExactInvocation();
  uint64_t v48 = *(void *)(v43 - 8);
  MEMORY[0x1F4188790](v43);
  uint64_t v47 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v46 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v50 = *(void *)(v8 - 8);
  uint64_t v51 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v42 - v16;
  uint64_t v18 = type metadata accessor for Siri_Nlu_External_Parser();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = a1;
  Siri_Nlu_External_UserParse.parser.getter();
  Siri_Nlu_External_Parser.parserID.getter();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v15, *MEMORY[0x1E4FA2778], v11);
  lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, MEMORY[0x1E4FA27B0]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v22 = v53;
  uint64_t v23 = v52;
  uint64_t v24 = *(void (**)(char *, uint64_t))(v12 + 8);
  v24(v15, v11);
  uint64_t v25 = ((uint64_t (*)(char *, uint64_t))v24)(v17, v11);
  if (v22 != v23) {
    goto LABEL_10;
  }
  uint64_t v26 = (uint64_t)v46;
  char v27 = v47;
  uint64_t v28 = v48;
  uint64_t v29 = MEMORY[0x1BA9DE000](v25);
  if (*(void *)(v29 + 16))
  {
    uint64_t v30 = v50;
    uint64_t v31 = v51;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v50 + 16))(v26, v29 + ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80)), v51);
    uint64_t v32 = 0;
  }
  else
  {
    uint64_t v32 = 1;
    uint64_t v30 = v50;
    uint64_t v31 = v51;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v26, v32, 1, v31);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v26, 1, v31) == 1)
  {
    uint64_t v33 = &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?;
LABEL_9:
    outlined destroy of ReferenceResolutionClientProtocol?(v26, v33);
LABEL_10:
    char v37 = 1;
    return v37 & 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 32))(v10, v26, v31);
  LOBYTE(v53) = 1;
  uint64_t v26 = (uint64_t)v45;
  Siri_Nlu_External_UserDialogAct.extractAppShortcutInvocation(groupIndex:)();
  uint64_t v34 = v30;
  uint64_t v35 = type metadata accessor for AppShortcutInvocation();
  uint64_t v36 = *(void *)(v35 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v26, 1, v35) == 1)
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v10, v31);
    uint64_t v33 = (uint64_t *)&demangling cache variable for type metadata for AppShortcutInvocation?;
    goto LABEL_9;
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v36 + 88))(v26, v35) == *MEMORY[0x1E4FA1DD8])
  {
    (*(void (**)(uint64_t, uint64_t))(v36 + 96))(v26, v35);
    uint64_t v39 = v43;
    uint64_t v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 32))(v27, v26, v43);
    MEMORY[0x1F4188790](v40);
    *(&v42 - 2) = (uint64_t)v27;
    char v41 = specialized Sequence.contains(where:)((uint64_t (*)(char *))partial apply for closure #1 in closure #3 in ActionGenerator.dedupeAppShortcuts(parses:), (char)(&v42 - 4), v44);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v10, v51);
    char v37 = v41 ^ 1;
    (*(void (**)(char *, uint64_t))(v28 + 8))(v27, v39);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v50 + 8))(v10, v51);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v26, v35);
    char v37 = 1;
  }
  return v37 & 1;
}

uint64_t closure #1 in closure #3 in ActionGenerator.dedupeAppShortcuts(parses:)()
{
  uint64_t v0 = AppShortcutGeneralizedInvocation.extractedActionIdentifier.getter();
  if (v1)
  {
    uint64_t v2 = v0;
    uint64_t v3 = v1;
    uint64_t v4 = AppShortcutGeneralizedInvocation.bundleId.getter();
    uint64_t v6 = v5;
    if (v4 == AppShortcutExactInvocation.bundleId.getter() && v6 == v7) {
      char v8 = 1;
    }
    else {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v2 == AppShortcutExactInvocation.actionIdentifier.getter() && v3 == v10) {
      char v11 = 1;
    }
    else {
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v9 = v8 & v11;
  }
  else
  {
    char v9 = 0;
  }
  return v9 & 1;
}

uint64_t ActionGenerator.deinit()
{
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t ActionGenerator.__deallocating_deinit()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = _swift_stdlib_malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  void v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, void (*a6)(void, int64_t, void *, void *))
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  int64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v10 = a2;
    }
LABEL_8:
    int64_t v11 = a4[2];
    if (v10 <= v11) {
      int64_t v12 = a4[2];
    }
    else {
      int64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = _swift_stdlib_malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 25;
      }
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 3);
      uint64_t v16 = v13 + 4;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v16 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[v11 + 4]) {
          memmove(v16, a4 + 4, 8 * v11);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    a6(0, v11, v16, a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t specialized getContiguousArrayStorageType<A>(for:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RequestMessageBase.Type);
  if (swift_isClassType()) {
    uint64_t v1 = v0;
  }
  else {
    uint64_t v1 = 0;
  }
  if (v1) {
    uint64_t v2 = &demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>;
  }
  else {
    uint64_t v2 = (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestMessageBase.Type>;
  }

  return __swift_instantiateConcreteTypeFromMangledName(v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  int64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    size_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v19);
    return outlined init with take of Any(a1, v19);
  }
LABEL_13:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(char a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  int64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= result && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      *(unsigned char *)(v18[7] + v12) = a1 & 1;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  uint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1 & 1, v18);

  return swift_bridgeObjectRetain();
}

{
  void *v4;
  void **v5;
  void *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  void *v18;
  char v19;
  uint64_t vars8;

  uint64_t v5 = (void **)v4;
  int64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= result && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      *(unsigned char *)(v18[7] + v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  uint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  char v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *v3;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = *(void *)(v20 + 56);
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return specialized _NativeDictionary._insert(at:key:value:)(v14, v11, a1, v20);
}

{
  void *v3;
  void **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  void *v20;
  char v21;
  uint64_t v22;

  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  char v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      *(void *)(v20[7] + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
}

{
  void *v3;
  void **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t vars8;

  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  char v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
    uint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v18 & 1) == (v29 & 1))
    {
      unint64_t v14 = v28;
      uint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7];
  char v22 = type metadata accessor for Parse();
  unint64_t v23 = *(void *)(v22 - 8);
  char v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 40);
  uint64_t v25 = v22;
  uint64_t v26 = v21 + *(void *)(v23 + 72) * v14;

  return v24(v26, a1, v25);
}

{
  void *v3;
  void **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UserID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  char v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_release();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), &demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment), (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), &demangling cache variable for type metadata for (Input, AnyFlow, SiriEnvironment), (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    char v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
      return outlined assign with take of (Input, AnyFlow, SiriEnvironment)(a1, v19 + *(void *)(*(void *)(v20 - 8) + 72) * v12, (uint64_t *)&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v23 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v22;
  char v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t vars8;

  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    char v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = (void *)(*(void *)(v18 + 56) + 16 * v12);
      uint64_t result = swift_release();
      *uint64_t v19 = a1;
      v19[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  uint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  char v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), MEMORY[0x1E4FA2880], (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  void *v4;
  void **v5;
  void *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t vars8;

  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    char v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_release();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  uint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  char v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), MEMORY[0x1E4FA1EE0], (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  void *v4;
  void **v5;
  void *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t vars8;

  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    char v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  uint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  char v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t vars8;

  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    char v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = (void *)(*(void *)(v18 + 56) + 16 * v12);
      uint64_t result = swift_release();
      *uint64_t v19 = a1;
      v19[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  uint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  char v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = *(void *)(v18 + 56);

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_15:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v12 = v20;
  uint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);

  swift_bridgeObjectRetain();
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CodingUserInfoKey();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  char v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
    unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      unint64_t v14 = v23;
      unint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return (_OWORD *)specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, (uint64_t)a1, v20);
    }
LABEL_15:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  char v21 = (_OWORD *)(v20[7] + 32 * v14);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v21);

  return outlined init with take of Any(a1, v21);
}

{
  void *v3;
  void **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void *v20;
  _OWORD *v21;
  _OWORD *result;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t vars8;

  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for ConversationSessionKey();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  char v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
    unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      unint64_t v14 = v23;
      unint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return (_OWORD *)specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, (uint64_t)a1, v20);
    }
LABEL_15:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  char v21 = (_OWORD *)(v20[7] + 32 * v14);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v21);

  return outlined init with take of Any(a1, v21);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = (void **)v5;
  unint64_t v12 = (void *)*v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a5 & 1) != 0)
  {
LABEL_7:
    unint64_t v20 = *v6;
    if (v18)
    {
LABEL_8:
      char v21 = (uint64_t *)(v20[7] + 16 * v14);
      uint64_t result = swift_bridgeObjectRelease();
      *char v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  unint64_t v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v14, a3, a4, a1, a2, v20);

  return swift_bridgeObjectRetain();
}

{
  void *v5;
  void **v6;
  void *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void *v20;
  uint64_t *v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t vars8;

  uint64_t v6 = (void **)v5;
  unint64_t v12 = (void *)*v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a5 & 1) != 0)
  {
LABEL_7:
    unint64_t v20 = *v6;
    if (v18)
    {
LABEL_8:
      char v21 = (uint64_t *)(v20[7] + 16 * v14);
      uint64_t result = swift_release();
      *char v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  unint64_t v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v14, a3, a4, a1, a2, v20);

  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void), void (*a7)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10 = v7;
  uint64_t v15 = *v7;
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v18 = *(void *)(v15 + 16);
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v21 = v16;
  uint64_t v22 = *(void *)(v15 + 24);
  if (v22 >= v20 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v23 = *v10;
    if (v21)
    {
LABEL_8:
      uint64_t v24 = *(void *)(v23 + 56);
      uint64_t result = swift_release();
      *(void *)(v24 + 8 * v17) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v22 >= v20 && (a4 & 1) == 0)
  {
    a5();
    goto LABEL_7;
  }
  a6();
  unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v21 & 1) != (v27 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v17 = v26;
  uint64_t v23 = *v10;
  if (v21) {
    goto LABEL_8;
  }
LABEL_11:
  a7(v17, a2, a3, a1, v23);

  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void), uint64_t (*a7)(void), void (*a8)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  char v11 = v8;
  uint64_t v16 = *v8;
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v19 = *(void *)(v16 + 16);
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v22 = v17;
  uint64_t v23 = *(void *)(v16 + 24);
  if (v23 < v21 || (a4 & 1) == 0)
  {
    if (v23 >= v21 && (a4 & 1) == 0)
    {
      a5();
      goto LABEL_7;
    }
    a6();
    unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v22 & 1) == (v33 & 1))
    {
      unint64_t v18 = v32;
      uint64_t v24 = *v11;
      if (v22) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v24 = *v11;
  if (v22)
  {
LABEL_8:
    uint64_t v25 = *(void *)(v24 + 56);
    uint64_t v26 = a7(0);
    uint64_t v27 = *(void *)(v26 - 8);
    uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 40);
    uint64_t v29 = v26;
    uint64_t v30 = v25 + *(void *)(v27 + 72) * v18;
    return v28(v30, a1, v29);
  }
LABEL_13:
  a8(v18, a2, a3, a1, v24);

  return swift_bridgeObjectRetain();
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      unint64_t result = swift_unknownObjectRelease();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      unint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(long long *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      unint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7] + 40 * v12;
    __swift_destroy_boxed_opaque_existential_1Tm(v19);
    return outlined init with take of ReferenceResolutionClientProtocol(a1, v19);
  }
LABEL_13:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void), uint64_t *a6, uint64_t (*a7)(unint64_t, char *, uint64_t, uint64_t))
{
  unint64_t v32 = a6;
  char v33 = a7;
  uint64_t v31 = a5;
  char v9 = v7;
  uint64_t v34 = a1;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *v7;
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v19 = *(void *)(v16 + 16);
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v22 = v17;
  uint64_t v23 = *(void *)(v16 + 24);
  if (v23 >= v21 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v24 = *v9;
    if (v22)
    {
LABEL_8:
      uint64_t v25 = *(void *)(v24 + 56);
      uint64_t v26 = v32;
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(v32);
      return outlined assign with take of (Input, AnyFlow, SiriEnvironment)(v34, v25 + *(void *)(*(void *)(v27 - 8) + 72) * v18, v26);
    }
    goto LABEL_11;
  }
  if (v23 >= v21 && (a3 & 1) == 0)
  {
    a4();
    goto LABEL_7;
  }
  v31();
  unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v22 & 1) != (v30 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v18 = v29;
  uint64_t v24 = *v9;
  if (v22) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, v12);
  return v33(v18, v15, v34, v24);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      unint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7] + 80 * v12;
    return outlined assign with take of FlowPluginAndBundle((uint64_t)a1, v19);
  }
LABEL_13:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t *a5)
{
  uint64_t v6 = v5;
  uint64_t v162 = a5;
  uint64_t v167 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
  uint64_t v11 = MEMORY[0x1F4188790](v167);
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  v149 = (char *)&v143 - v13;
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  char v16 = (char *)&v143 - v15;
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  uint64_t v19 = (char *)&v143 - v18;
  uint64_t v20 = MEMORY[0x1F4188790](v17);
  char v22 = (char *)&v143 - v21;
  uint64_t v23 = MEMORY[0x1F4188790](v20);
  uint64_t v155 = (char *)&v143 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  long long v165 = (char *)&v143 - v26;
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  unint64_t v148 = (char *)&v143 - v28;
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v31 = (char *)&v143 - v30;
  MEMORY[0x1F4188790](v29);
  uint64_t v156 = (void (*)(char *, uint64_t, uint64_t))((char *)&v143 - v33);
  uint64_t v35 = *(void *)(v34 + 72);
  if (!v35)
  {
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  if (a2 - a1 == 0x8000000000000000 && v35 == -1) {
    goto LABEL_86;
  }
  int64_t v36 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v35 == -1) {
    goto LABEL_87;
  }
  uint64_t v37 = (uint64_t)(a2 - a1) / v35;
  unint64_t v170 = a1;
  unint64_t v169 = a4;
  uint64_t v38 = v36 / v35;
  uint64_t v143 = v6;
  if (v37 >= v36 / v35)
  {
    if (v38 < 0) {
      goto LABEL_88;
    }
    uint64_t v41 = v38 * v35;
    unint64_t v148 = v32;
    if (a4 < a2 || a2 + v41 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a2)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v89 = a4 + v41;
    unint64_t v168 = a4 + v41;
    unint64_t v170 = a2;
    if (v41 < 1 || a1 >= a2)
    {
LABEL_84:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v170, &v169, (uint64_t *)&v168);
      return 1;
    }
    uint64_t v91 = -v35;
    unint64_t v145 = a4;
    unint64_t v147 = a1;
    uint64_t v150 = (char *)v91;
    unint64_t v151 = (unint64_t)v16;
    int64_t v144 = v19;
    while (1)
    {
      unint64_t v164 = a3;
      outlined init with copy of ReferenceResolutionClientProtocol?(v89 + v91, (uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
      unint64_t v166 = a2;
      unint64_t v152 = a2 + v91;
      outlined init with copy of ReferenceResolutionClientProtocol?(a2 + v91, (uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
      uint64_t v92 = *(int *)(v167 + 48);
      uint64_t v93 = (uint64_t)v149;
      unint64_t v94 = &v149[v92];
      uint64_t v95 = &v19[v92];
      uint64_t v96 = type metadata accessor for UUID();
      uint64_t v97 = *(void *)(v96 - 8);
      uint64_t v98 = (uint64_t)v19;
      unint64_t v158 = *(void (**)(uint64_t, char *, uint64_t))(v97 + 16);
      v158(v93, v19, v96);
      uint64_t v99 = type metadata accessor for ActionCandidate();
      uint64_t v100 = *(void *)(v99 - 8);
      uint64_t v101 = *(void (**)(char *, uint64_t, uint64_t))(v100 + 16);
      uint64_t v153 = (uint64_t)v95;
      uint64_t v156 = v101;
      unint64_t v157 = (void (*)(char *, char *, uint64_t))(v100 + 16);
      v101(v94, (uint64_t)v95, v99);
      uint64_t v102 = *v162;
      if (*(void *)(*v162 + 16) && (unint64_t v103 = specialized __RawDictionaryStorage.find<A>(_:)(v93), (v104 & 1) != 0))
      {
        uint64_t v163 = *(void *)(*(void *)(v102 + 56) + 8 * v103);
        os_log_t v105 = *(void (**)(char *, uint64_t))(v100 + 8);
        uint64_t v154 = (v100 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        unint64_t v161 = v105;
        v105(v94, v99);
        uint64_t v106 = *(void (**)(uint64_t, uint64_t))(v97 + 8);
        uint64_t v159 = (v97 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        unint64_t v160 = v106;
        v106(v93, v96);
        uint64_t v107 = *(int *)(v167 + 48);
        uint64_t v108 = (uint64_t)v148;
        uint64_t v109 = &v148[v107];
        uint64_t v110 = v151 + v107;
        ((void (*)(char *))v158)(v148);
        v156(v109, v110, v99);
        uint64_t v111 = *v162;
        if (*(void *)(*v162 + 16) && (unint64_t v112 = specialized __RawDictionaryStorage.find<A>(_:)(v108), (v113 & 1) != 0))
        {
          uint64_t v114 = *(void *)(*(void *)(v111 + 56) + 8 * v112);
          uint64_t v115 = v109;
          unint64_t v116 = v161;
          v161(v115, v99);
          unint64_t v117 = v160;
          v160(v108, v96);
          BOOL v68 = v163 == v114;
          BOOL v118 = v163 < v114;
          uint64_t v119 = v159;
          if (!v68)
          {
            BOOL v120 = v118;
            unint64_t v121 = v166;
            unint64_t v122 = v147;
            char v16 = (char *)v151;
            goto LABEL_69;
          }
        }
        else
        {
          unint64_t v125 = v109;
          unint64_t v116 = v161;
          v161(v125, v99);
          unint64_t v117 = v160;
          v160(v108, v96);
          uint64_t v119 = v159;
        }
      }
      else
      {
        id v123 = *(void (**)(char *, uint64_t))(v100 + 8);
        uint64_t v154 = (v100 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        uint64_t v124 = v94;
        unint64_t v116 = v123;
        v123(v124, v99);
        unint64_t v117 = *(void (**)(uint64_t, uint64_t))(v97 + 8);
        uint64_t v119 = (v97 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        v117(v93, v96);
      }
      uint64_t v159 = v119;
      unint64_t v160 = v117;
      uint64_t v126 = v167;
      uint64_t v127 = &v165[*(int *)(v167 + 48)];
      unint64_t v161 = v116;
      uint64_t v163 = v96;
      int v128 = (void (*)(char *, unint64_t, uint64_t))v158;
      ((void (*)(void))v158)();
      id v129 = v156;
      v156(v127, v153, v99);
      uint64_t v153 = ActionCandidate.affinityScore.getter();
      v116(v127, v99);
      uint64_t v130 = *(int *)(v126 + 48);
      uint64_t v131 = v155;
      uint64_t v132 = &v155[v130];
      char v16 = (char *)v151;
      uint64_t v133 = v151 + v130;
      v128(v155, v151, v163);
      v129(v132, v133, v99);
      uint64_t v98 = (uint64_t)v144;
      uint64_t v134 = ActionCandidate.affinityScore.getter();
      v161(v132, v99);
      BOOL v120 = v134 < v153;
      uint64_t v135 = v163;
      unint64_t v136 = (void (*)(char *, uint64_t))v160;
      v160((uint64_t)v131, v163);
      v136(v165, v135);
      unint64_t v121 = v166;
      unint64_t v122 = v147;
LABEL_69:
      unint64_t v137 = v164;
      uint64_t v91 = (uint64_t)v150;
      unint64_t v138 = (unint64_t)&v150[v164];
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
      outlined destroy of ReferenceResolutionClientProtocol?(v98, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
      uint64_t v19 = (char *)v98;
      if (v120)
      {
        if (v137 < v121 || v138 >= v121)
        {
          unint64_t v140 = v152;
          swift_arrayInitWithTakeFrontToBack();
          unint64_t v139 = v145;
        }
        else
        {
          BOOL v68 = v137 == v121;
          unint64_t v139 = v145;
          unint64_t v140 = v152;
          if (!v68) {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        v170 += v91;
      }
      else
      {
        unint64_t v141 = v168;
        v168 += v91;
        if (v137 < v141 || v138 >= v141)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v137 != v141)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        unint64_t v140 = v121;
        unint64_t v139 = v145;
      }
      unint64_t v89 = v168;
      if (v168 > v139)
      {
        a2 = v140;
        a3 = v137 + v91;
        if (v140 > v122) {
          continue;
        }
      }
      goto LABEL_84;
    }
  }
  if ((v37 & 0x8000000000000000) == 0)
  {
    uint64_t v39 = v37 * v35;
    v149 = v22;
    uint64_t v40 = (uint64_t)v156;
    if (a4 < a1 || a1 + v39 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v151 = a4 + v39;
    unint64_t v168 = a4 + v39;
    if (v39 >= 1 && a2 < a3)
    {
      unint64_t v164 = a3;
      uint64_t v146 = v35;
      uint64_t v150 = v31;
      while (1)
      {
        unint64_t v166 = a2;
        outlined init with copy of ReferenceResolutionClientProtocol?(a2, v40, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
        outlined init with copy of ReferenceResolutionClientProtocol?(a4, (uint64_t)v31, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
        uint64_t v43 = *(int *)(v167 + 48);
        uint64_t v44 = (uint64_t)v148;
        uint64_t v45 = &v148[v43];
        uint64_t v46 = v40 + v43;
        uint64_t v47 = type metadata accessor for UUID();
        uint64_t v48 = *(void *)(v47 - 8);
        unint64_t v158 = *(void (**)(uint64_t, char *, uint64_t))(v48 + 16);
        v158(v44, (char *)v40, v47);
        uint64_t v49 = type metadata accessor for ActionCandidate();
        uint64_t v50 = *(void *)(v49 - 8);
        uint64_t v51 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
        uint64_t v153 = v46;
        unint64_t v157 = v51;
        v51(v45, (char *)v46, v49);
        uint64_t v52 = *v162;
        uint64_t v53 = *(void *)(*v162 + 16);
        unint64_t v152 = v50 + 16;
        if (v53 && (unint64_t v54 = specialized __RawDictionaryStorage.find<A>(_:)(v44), (v55 & 1) != 0))
        {
          uint64_t v163 = *(void *)(*(void *)(v52 + 56) + 8 * v54);
          uint64_t v56 = *(void (**)(char *, uint64_t))(v50 + 8);
          uint64_t v154 = (v50 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
          unint64_t v161 = v56;
          v56(v45, v49);
          id v57 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
          uint64_t v159 = (v48 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
          unint64_t v160 = v57;
          v57(v44, v47);
          uint64_t v58 = *(int *)(v167 + 48);
          uint64_t v59 = (uint64_t)v149;
          uint64_t v60 = &v149[v58];
          uint64_t v61 = &v150[v58];
          ((void (*)(char *))v158)(v149);
          v157(v60, v61, v49);
          uint64_t v62 = *v162;
          if (*(void *)(*v162 + 16) && (unint64_t v63 = specialized __RawDictionaryStorage.find<A>(_:)(v59), (v64 & 1) != 0))
          {
            uint64_t v65 = *(void *)(*(void *)(v62 + 56) + 8 * v63);
            uint64_t v66 = v161;
            v161(v60, v49);
            uint64_t v67 = v160;
            v160(v59, v47);
            BOOL v68 = v163 == v65;
            BOOL v69 = v163 < v65;
            uint64_t v70 = v159;
            if (!v68)
            {
              BOOL v71 = v69;
              unint64_t v72 = v166;
              uint64_t v73 = v146;
              uint64_t v31 = v150;
              uint64_t v40 = (uint64_t)v156;
              goto LABEL_35;
            }
          }
          else
          {
            uint64_t v66 = v161;
            v161(v60, v49);
            uint64_t v67 = v160;
            v160(v59, v47);
            uint64_t v70 = v159;
          }
        }
        else
        {
          uint64_t v66 = *(void (**)(char *, uint64_t))(v50 + 8);
          uint64_t v154 = (v50 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
          v66(v45, v49);
          uint64_t v67 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
          uint64_t v70 = (v48 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
          v67(v44, v47);
        }
        uint64_t v159 = v70;
        unint64_t v160 = v67;
        uint64_t v74 = v167;
        uint64_t v75 = &v165[*(int *)(v167 + 48)];
        uint64_t v163 = v47;
        id v76 = (void (*)(char *, char *, uint64_t))v158;
        ((void (*)(void))v158)();
        unint64_t v161 = v66;
        uint64_t v77 = v157;
        v157(v75, (char *)v153, v49);
        uint64_t v153 = ActionCandidate.affinityScore.getter();
        v66(v75, v49);
        uint64_t v78 = *(int *)(v74 + 48);
        unint64_t v79 = v155;
        id v80 = &v155[v78];
        uint64_t v31 = v150;
        uint64_t v81 = &v150[v78];
        v76(v155, v150, v163);
        v77(v80, v81, v49);
        uint64_t v40 = (uint64_t)v156;
        uint64_t v82 = ActionCandidate.affinityScore.getter();
        v161(v80, v49);
        BOOL v71 = v82 < v153;
        uint64_t v83 = v163;
        os_log_t v84 = (void (*)(char *, uint64_t))v160;
        v160((uint64_t)v79, v163);
        v84(v165, v83);
        unint64_t v72 = v166;
        uint64_t v73 = v146;
LABEL_35:
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v31, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
        outlined destroy of ReferenceResolutionClientProtocol?(v40, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
        unint64_t v85 = v170;
        if (v71)
        {
          unint64_t v86 = v72 + v73;
          if (v170 < v72 || v170 >= v86)
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v87 = v164;
          }
          else
          {
            unint64_t v87 = v164;
            if (v170 == v72) {
              unint64_t v85 = v72;
            }
            else {
              swift_arrayInitWithTakeBackToFront();
            }
          }
        }
        else
        {
          unint64_t v88 = v169 + v73;
          if (v170 < v169 || v170 >= v88)
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v87 = v164;
          }
          else
          {
            unint64_t v87 = v164;
            if (v170 != v169) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          unint64_t v169 = v88;
          unint64_t v86 = v72;
        }
        unint64_t v170 = v85 + v73;
        a4 = v169;
        if (v169 < v151)
        {
          a2 = v86;
          if (v86 < v87) {
            continue;
          }
        }
        goto LABEL_84;
      }
    }
    goto LABEL_84;
  }
LABEL_88:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (appBundleId: String, userData: [String : Any]));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Task<(), Never>);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v5 = *(void *)(v25 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v25);
  uint64_t v30 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x1F4188790](v6);
  unint64_t v10 = (char *)&v21 - v9;
  uint64_t v11 = MEMORY[0x1E4FBC860];
  uint64_t v31 = MEMORY[0x1E4FBC860];
  uint64_t v29 = *(void *)(a1 + 16);
  if (v29)
  {
    unint64_t v12 = 0;
    uint64_t v23 = a1;
    uint64_t v24 = (void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v27 = (void (**)(char *, char *, uint64_t))(v5 + 32);
    uint64_t v28 = v5 + 16;
    uint64_t v22 = a2;
    uint64_t v11 = v25;
    while (v12 < *(void *)(a1 + 16))
    {
      unint64_t v13 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      uint64_t v14 = *(void *)(v5 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v10, a1 + v13 + v14 * v12, v11);
      char v15 = closure #3 in ActionGenerator.dedupeAppShortcuts(parses:)((uint64_t)v10, a2);
      if (v2)
      {
        (*v24)(v10, v11);
        swift_bridgeObjectRelease();
        swift_release();
        return v11;
      }
      if (v15)
      {
        uint64_t v26 = *v27;
        v26(v30, v10, v11);
        uint64_t v16 = v31;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v16 + 16) + 1, 1);
          uint64_t v16 = v31;
        }
        unint64_t v18 = *(void *)(v16 + 16);
        unint64_t v17 = *(void *)(v16 + 24);
        if (v18 >= v17 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
          uint64_t v16 = v31;
        }
        *(void *)(v16 + 16) = v18 + 1;
        unint64_t v19 = v16 + v13 + v18 * v14;
        uint64_t v20 = v25;
        uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(v19, v30, v25);
        uint64_t v31 = v16;
        uint64_t v11 = v20;
        a2 = v22;
        a1 = v23;
      }
      else
      {
        uint64_t result = ((uint64_t (*)(char *, uint64_t))*v24)(v10, v11);
      }
      if (v29 == ++v12)
      {
        uint64_t v11 = v31;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return v11;
  }
  return result;
}

uint64_t sub_1B9D6C42C()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

unint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, void (*a2)(char *, char *, uint64_t, uint64_t))
{
  uint64_t v20 = a2;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
  uint64_t v4 = *(void *)(v19 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v19);
  uint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)v16 - v8;
  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10) {
    return MEMORY[0x1E4FBC860];
  }
  v16[2] = v2;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
  uint64_t v11 = a1
      + ((*(unsigned __int8 *)(*(void *)(v18 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v18 - 8) + 80));
  uint64_t v17 = *(void *)(*(void *)(v18 - 8) + 72);
  v16[1] = a1;
  swift_bridgeObjectRetain();
  unint64_t v12 = MEMORY[0x1E4FBC860];
  do
  {
    v20(v9, &v9[*(int *)(v19 + 48)], v11, v11 + *(int *)(v18 + 48));
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v9, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v12 + 16) + 1, 1, v12, &demangling cache variable for type metadata for _ContiguousArrayStorage<(uuid: UUID, actionCandidate: ActionCandidate)>, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
    }
    unint64_t v14 = *(void *)(v12 + 16);
    unint64_t v13 = *(void *)(v12 + 24);
    if (v14 >= v13 >> 1) {
      unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1, v12, &demangling cache variable for type metadata for _ContiguousArrayStorage<(uuid: UUID, actionCandidate: ActionCandidate)>, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
    }
    *(void *)(v12 + 16) = v14 + 1;
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v7, v12+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v14, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
    v11 += v17;
    --v10;
  }
  while (v10);
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t partial apply for closure #1 in AppShortcutParseExpansion.expandExactMatchParses(nlParse:appShortcutTargets:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in AppShortcutParseExpansion.expandExactMatchParses(nlParse:appShortcutTargets:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in AppShortcutParseExpansion.expand(nlParse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in AppShortcutParseExpansion.expand(nlParse:)(a1, *(void *)(v2 + 16), a2);
}

uint64_t *initializeBufferWithCopyOfBuffer for ParseUserDataAttachment(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Parse();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ParseUserDataAttachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for Parse();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ParseUserDataAttachment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Parse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ParseUserDataAttachment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Parse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ParseUserDataAttachment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Parse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for ParseUserDataAttachment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Parse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ParseUserDataAttachment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B9D6CE68);
}

uint64_t sub_1B9D6CE68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for Parse();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  int v15 = v14 - 1;
  if (v15 < 0) {
    int v15 = -1;
  }
  return (v15 + 1);
}

uint64_t storeEnumTagSinglePayload for ParseUserDataAttachment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B9D6CF9C);
}

uint64_t sub_1B9D6CF9C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for Parse();
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 24)) = a2;
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata completion function for ParseUserDataAttachment()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Parse();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for ActionGenerator()
{
  return self;
}

uint64_t method lookup function for ActionGenerator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ActionGenerator);
}

uint64_t dispatch thunk of ActionGenerator.__allocating_init(conversationHandlerLocator:linkExpansionContextBuilder:appShortcutExpansionContextBuilder:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a5) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = a4 + 40 * a1 + 32;
    uint64_t v7 = a3 + 40 * v5;
    if (v6 >= v7 || v6 + 40 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = a4 + 16 * a1 + 32;
    uint64_t v7 = a3 + 16 * v5;
    if (v6 >= v7 || v6 + 16 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + a1 + 32);
    uint64_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    uint64_t v6 = 8 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined assign with take of FlowPluginAndBundle(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t type metadata accessor for LNSystemProtocol()
{
  unint64_t result = lazy cache variable for type metadata for LNSystemProtocol;
  if (!lazy cache variable for type metadata for LNSystemProtocol)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
  }
  return result;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  return a1;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type AmbiguityFeatureFlags and conformance AmbiguityFeatureFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type AmbiguityFeatureFlags and conformance AmbiguityFeatureFlags;
  if (!lazy protocol witness table cache variable for type AmbiguityFeatureFlags and conformance AmbiguityFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AmbiguityFeatureFlags and conformance AmbiguityFeatureFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AmbiguityFeatureFlags and conformance AmbiguityFeatureFlags;
  if (!lazy protocol witness table cache variable for type AmbiguityFeatureFlags and conformance AmbiguityFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AmbiguityFeatureFlags and conformance AmbiguityFeatureFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AmbiguityFeatureFlags and conformance AmbiguityFeatureFlags;
  if (!lazy protocol witness table cache variable for type AmbiguityFeatureFlags and conformance AmbiguityFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AmbiguityFeatureFlags and conformance AmbiguityFeatureFlags);
  }
  return result;
}

uint64_t outlined assign with take of (Input, AnyFlow, SiriEnvironment)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of StringKeyedValue(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in closure #3 in ActionGenerator.dedupeAppShortcuts(parses:)()
{
  return closure #1 in closure #3 in ActionGenerator.dedupeAppShortcuts(parses:)() & 1;
}

uint64_t _ss6ResultOsRi_zrlE3getxyq_YKF@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (swift_getEnumCaseMultiPayload() != 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 32))(a3, v3);
  }
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(a1 + 24) - 8) + 32))(a2, v3, *(void *)(a1 + 24));
  return swift_willThrowTypedImpl();
}

uint64_t logAction<A>(label:_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(void **, unsigned char *, uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v79 = a6;
  uint64_t v6 = a5;
  uint64_t v72 = a3;
  uint64_t v73 = a4;
  uint64_t v74 = a1;
  uint64_t v8 = *(void *)(a5 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  BOOL v68 = &v66[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  unint64_t v13 = &v66[-v12];
  MEMORY[0x1F4188790](v11);
  int v15 = &v66[-v14];
  uint64_t v80 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Error);
  uint64_t v16 = type metadata accessor for Result();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  id v76 = (void **)&v66[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v22 = (void **)&v66[-v21];
  MEMORY[0x1F4188790](v20);
  uint64_t v81 = &v66[-v23];
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  BOOL v69 = v13;
  uint64_t v70 = v8;
  uint64_t v75 = v15;
  uint64_t v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain_n();
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  BOOL v27 = os_log_type_enabled(v25, v26);
  uint64_t v77 = v17;
  uint64_t v78 = v16;
  if (v27)
  {
    uint64_t v28 = swift_slowAlloc();
    uint64_t v71 = v6;
    uint64_t v29 = (uint8_t *)v28;
    uint64_t v30 = swift_slowAlloc();
    uint64_t v83 = v30;
    *(_DWORD *)uint64_t v29 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v82 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, a2, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    unint64_t v31 = a2;
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v25, v26, "==>> %s", v29, 0xCu);
    swift_arrayDestroy();
    uint64_t v32 = v30;
    uint64_t v17 = v77;
    MEMORY[0x1BA9E48C0](v32, -1, -1);
    uint64_t v33 = v29;
    uint64_t v6 = v71;
    uint64_t v16 = v78;
    MEMORY[0x1BA9E48C0](v33, -1, -1);
  }
  else
  {

    unint64_t v31 = a2;
    uint64_t v34 = swift_bridgeObjectRelease_n();
  }
  MEMORY[0x1F4188790](v34);
  uint64_t v35 = v72;
  *(void *)&v66[-32] = v6;
  *(void *)&v66[-24] = v35;
  *(void *)&v66[-16] = v73;
  int64_t v36 = v81;
  _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC((void (*)(unsigned char *))partial apply for closure #1 in logAction<A>(label:_:), (uint64_t)v81);
  uint64_t v73 = *(void (**)(void **, unsigned char *, uint64_t))(v17 + 16);
  v73(v22, v36, v16);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v37 = *v22;
    swift_bridgeObjectRetain();
    id v38 = v37;
    swift_bridgeObjectRetain();
    id v39 = v37;
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v40, v41))
    {
      unint64_t v42 = v31;
      uint64_t v43 = swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      uint64_t v83 = v44;
      *(_DWORD *)uint64_t v43 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v82 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v42, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v43 + 12) = 2080;
      uint64_t v82 = (uint64_t)v37;
      id v45 = v37;
      uint64_t v46 = String.init<A>(describing:)();
      uint64_t v82 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, &v83);
      uint64_t v16 = v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      int64_t v36 = v81;
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B9C64000, v40, v41, "<<== %s threw %s", (uint8_t *)v43, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v44, -1, -1);
      MEMORY[0x1BA9E48C0](v43, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    uint64_t v80 = v17 + 16;
    uint64_t v48 = v70;
    uint64_t v49 = v75;
    (*(void (**)(unsigned char *, void **, uint64_t))(v70 + 32))(v75, v22, v6);
    uint64_t v50 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v48 + 16);
    uint64_t v51 = v69;
    v50(v69, v49, v6);
    unint64_t v52 = v31;
    swift_bridgeObjectRetain_n();
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.debug.getter();
    int v55 = v54;
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v56 = swift_slowAlloc();
      int v67 = v55;
      uint64_t v57 = v56;
      uint64_t v72 = swift_slowAlloc();
      uint64_t v83 = v72;
      *(_DWORD *)uint64_t v57 = 136315394;
      uint64_t v71 = v6;
      swift_bridgeObjectRetain();
      uint64_t v82 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v52, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v57 + 12) = 2080;
      uint64_t v58 = v50;
      uint64_t v59 = v71;
      v58(v68, v51, v71);
      uint64_t v60 = String.init<A>(describing:)();
      uint64_t v82 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, &v83);
      uint64_t v16 = v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v62 = *(void (**)(unsigned char *, uint64_t))(v48 + 8);
      v62(v51, v59);
      _os_log_impl(&dword_1B9C64000, v53, (os_log_type_t)v67, "<<== %s -> %s", (uint8_t *)v57, 0x16u);
      uint64_t v63 = v72;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v63, -1, -1);
      MEMORY[0x1BA9E48C0](v57, -1, -1);

      v62(v75, v59);
    }
    else
    {

      char v64 = *(void (**)(unsigned char *, uint64_t))(v48 + 8);
      v64(v51, v6);
      swift_bridgeObjectRelease_n();
      v64(v75, v6);
    }
    uint64_t v17 = v77;
    int64_t v36 = v81;
  }
  v73(v76, v36, v16);
  _ss6ResultOsRi_zrlE3getxyq_YKF(v16, (uint64_t)&v83, v79);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v17 + 8))(v36, v16);
}

unint64_t AffinityScorer.debugDescription.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = 0;
  unint64_t v15 = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  unint64_t v14 = 0xD000000000000013;
  unint64_t v15 = 0x80000001BA0624F0;
  (*(void (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  uint64_t v8 = UUID.uuidString.getter();
  uint64_t v10 = v9;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v11._uint64_t countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 41;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  return v14;
}

uint64_t FixedAffinityScorer.id.getter@<X0>(uint64_t a1@<X8>)
{
  return FixedAffinityScorer.id.getter(&OBJC_IVAR____TtC14SiriKitRuntime19FixedAffinityScorer_id, a1);
}

uint64_t FixedAffinityScorer.score.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime19FixedAffinityScorer_score);
}

uint64_t FixedAffinityScorer.__allocating_init(score:)(uint64_t a1, char a2)
{
  uint64_t v4 = swift_allocObject();
  UUID.init()();
  uint64_t v5 = v4 + OBJC_IVAR____TtC14SiriKitRuntime19FixedAffinityScorer_score;
  *(void *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 8) = a2 & 1;
  return v4;
}

uint64_t FixedAffinityScorer.init(score:)(uint64_t a1, char a2)
{
  UUID.init()();
  uint64_t v5 = v2 + OBJC_IVAR____TtC14SiriKitRuntime19FixedAffinityScorer_score;
  *(void *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 8) = a2 & 1;
  return v2;
}

uint64_t FixedAffinityScorer.score(for:loopCheck:)()
{
  return *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime19FixedAffinityScorer_score);
}

uint64_t FixedAffinityScorer.deinit()
{
  return FixedAffinityScorer.deinit(&OBJC_IVAR____TtC14SiriKitRuntime19FixedAffinityScorer_id);
}

uint64_t FixedAffinityScorer.__deallocating_deinit()
{
  return FixedAffinityScorer.__deallocating_deinit(&OBJC_IVAR____TtC14SiriKitRuntime19FixedAffinityScorer_id);
}

uint64_t protocol witness for AffinityScorer.id.getter in conformance FixedAffinityScorer@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for AffinityScorer.id.getter in conformance FixedAffinityScorer(&OBJC_IVAR____TtC14SiriKitRuntime19FixedAffinityScorer_id, a1);
}

uint64_t protocol witness for AffinityScorer.score(for:loopCheck:) in conformance FixedAffinityScorer()
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v0 + 104))();
  if (v1) {
    return v3;
  }
  return result;
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FixedAffinityScorer(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return AffinityScorer.debugDescription.getter(a1, WitnessTable);
}

uint64_t CachingAffinityScorer.id.getter@<X0>(uint64_t a1@<X8>)
{
  return FixedAffinityScorer.id.getter(&OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_id, a1);
}

uint64_t FixedAffinityScorer.id.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *a1;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t CachingAffinityScorer.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  UUID.init()();
  uint64_t v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_scoreState;
  *(void *)uint64_t v1 = 0;
  *(_WORD *)(v1 + 8) = 256;
  return v0;
}

uint64_t CachingAffinityScorer.init()()
{
  UUID.init()();
  uint64_t v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_scoreState;
  *(void *)uint64_t v1 = 0;
  *(_WORD *)(v1 + 8) = 256;
  return v0;
}

uint64_t CachingAffinityScorer.score(for:loopCheck:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  Swift::String v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  unint64_t v13 = (char *)v19 - v12;
  unint64_t v14 = (_WORD *)(v4 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_scoreState);
  if ((*(unsigned char *)(v4 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_scoreState + 9) & 1) == 0) {
    return *(void *)v14;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v4 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_id, v7);
  char v15 = specialized Set._Variant.insert(_:)((uint64_t)v13, v11);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  if (v15)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 136))(a1, a2);
    if (!v3)
    {
      *(void *)unint64_t v14 = result;
      v14[4] = v17 & 1;
    }
  }
  else
  {
    lazy protocol witness table accessor for type AffinityScoreError and conformance AffinityScoreError();
    swift_allocError();
    *(void *)uint64_t v18 = 0;
    *(unsigned char *)(v18 + 8) = 1;
    return swift_willThrow();
  }
  return result;
}

uint64_t CachingAffinityScorer.computeScore(for:loopCheck:)()
{
  lazy protocol witness table accessor for type AffinityScoreError and conformance AffinityScoreError();
  swift_allocError();
  *(void *)uint64_t v0 = 1;
  *(unsigned char *)(v0 + 8) = 1;
  return swift_willThrow();
}

uint64_t CachingAffinityScorer.deinit()
{
  return FixedAffinityScorer.deinit(&OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_id);
}

uint64_t FixedAffinityScorer.deinit(void *a1)
{
  uint64_t v2 = v1 + *a1;
  uint64_t v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  return v1;
}

uint64_t CachingAffinityScorer.__deallocating_deinit()
{
  return FixedAffinityScorer.__deallocating_deinit(&OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_id);
}

uint64_t FixedAffinityScorer.__deallocating_deinit(void *a1)
{
  uint64_t v2 = v1 + *a1;
  uint64_t v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);

  return swift_deallocClassInstance();
}

uint64_t protocol witness for AffinityScorer.id.getter in conformance CachingAffinityScorer@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for AffinityScorer.id.getter in conformance FixedAffinityScorer(&OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_id, a1);
}

uint64_t protocol witness for AffinityScorer.score(for:loopCheck:) in conformance CachingAffinityScorer()
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v0 + 128))();
  if (v1) {
    return v3;
  }
  return result;
}

uint64_t protocol witness for AffinityScorer.id.getter in conformance FixedAffinityScorer@<X0>(void *a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4 = *v2 + *a1;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CachingAffinityScorer(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return AffinityScorer.debugDescription.getter(a1, WitnessTable);
}

uint64_t CombiningAffinityScorer.__allocating_init(children:reducer:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_children) = a1;
  uint64_t v7 = (void *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_reducer);
  void *v7 = a2;
  v7[1] = a3;
  UUID.init()();
  uint64_t v8 = v6 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_scoreState;
  *(void *)uint64_t v8 = 0;
  *(_WORD *)(v8 + 8) = 256;
  return v6;
}

uint64_t CombiningAffinityScorer.init(children:reducer:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_children) = a1;
  uint64_t v4 = (void *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_reducer);
  *uint64_t v4 = a2;
  v4[1] = a3;
  swift_retain();
  UUID.init()();
  uint64_t v5 = v3 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_scoreState;
  *(void *)uint64_t v5 = 0;
  *(_WORD *)(v5 + 8) = 256;
  swift_release();
  return v3;
}

uint64_t CombiningAffinityScorer.computeScore(for:loopCheck:)()
{
  _StringGuts.grow(_:)(26);
  swift_retain();
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = UUID.uuidString.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  swift_release();
  v3._uint64_t countAndFlagsBits = 0xD000000000000015;
  v3._object = (void *)0x80000001BA062510;
  String.append(_:)(v3);
  type metadata accessor for Input();
  lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type Input and conformance Input, MEMORY[0x1E4FA1EE0]);
  v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 41;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  uint64_t v6 = specialized logAction<A>(label:_:)(0xD000000000000013, 0x80000001BA0624F0, (void (*)(void *__return_ptr, void))partial apply for closure #1 in CombiningAffinityScorer.computeScore(for:loopCheck:));
  swift_bridgeObjectRelease();
  if (v0) {
    return v7;
  }
  else {
    return v6;
  }
}

uint64_t closure #1 in CombiningAffinityScorer.computeScore(for:loopCheck:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *(void *)(result + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_children);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v15 = a4;
    uint64_t v7 = (void *)(v5 + 32);
    uint64_t v16 = *(uint64_t (**)(uint64_t, void, uint64_t, void))(result
                                                                     + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_reducer);
    swift_bridgeObjectRetain();
    uint64_t v8 = 0;
    char v9 = 1;
    while (1)
    {
      uint64_t v10 = v7[3];
      uint64_t v11 = v7[4];
      __swift_project_boxed_opaque_existential_1(v7, v10);
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 32))(a2, a3, v10, v11);
      if (v4) {
        return swift_bridgeObjectRelease();
      }
      uint64_t v8 = v16(v8, v9 & 1, v12, v13 & 1);
      char v9 = v14 & 1;
      v7 += 5;
      if (!--v6)
      {
        uint64_t result = swift_bridgeObjectRelease();
        a4 = v15;
        goto LABEL_7;
      }
    }
  }
  else
  {
    uint64_t v8 = 0;
    char v9 = 1;
LABEL_7:
    *(void *)a4 = v8;
    *(unsigned char *)(a4 + 8) = v9;
  }
  return result;
}

uint64_t static CombiningAffinityScorer.max(children:requireAll:)(uint64_t a1, char a2)
{
  uint64_t v4 = swift_allocObject();
  *(unsigned char *)(v4 + 16) = 1;
  uint64_t v5 = swift_allocObject();
  *(unsigned char *)(v5 + 16) = 0;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v4;
  *(unsigned char *)(v6 + 24) = a2;
  *(void *)(v6 + 32) = v5;
  type metadata accessor for CombiningAffinityScorer(0);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_children) = a1;
  uint64_t v8 = (uint64_t (**)(uint64_t, char, uint64_t, char))(v7
                                                             + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_reducer);
  *uint64_t v8 = partial apply for closure #1 in static CombiningAffinityScorer.max(children:requireAll:);
  v8[1] = (uint64_t (*)(uint64_t, char, uint64_t, char))v6;
  swift_bridgeObjectRetain();
  UUID.init()();
  uint64_t v9 = v7 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_scoreState;
  *(void *)uint64_t v9 = 0;
  *(_WORD *)(v9 + 8) = 256;
  return v7;
}

uint64_t closure #1 in static CombiningAffinityScorer.max(children:requireAll:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7)
{
  swift_beginAccess();
  int v14 = *(unsigned __int8 *)(a5 + 16);
  swift_beginAccess();
  *(unsigned char *)(a5 + 16) = 0;
  if (a4)
  {
    if (a6)
    {
      swift_beginAccess();
      if ((*(unsigned char *)(a7 + 16) & 1) == 0)
      {
        swift_beginAccess();
        *(unsigned char *)(a7 + 16) = 1;
      }
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)static Logger.executor);
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v20 = 0;
        _os_log_impl(&dword_1B9C64000, v18, v19, "CombiningAffinityScorer with requireAll got nil value, returning nil", v20, 2u);
        MEMORY[0x1BA9E48C0](v20, -1, -1);
      }

      return 0;
    }
  }
  else
  {
    if (a1 <= a3) {
      uint64_t v15 = a3;
    }
    else {
      uint64_t v15 = a1;
    }
    if (v14) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = 0;
    }
    if (a2) {
      return v16;
    }
    else {
      return v15;
    }
  }
  return a1;
}

uint64_t static CombiningAffinityScorer.min(children:requireAll:)(uint64_t a1, char a2)
{
  uint64_t v4 = swift_allocObject();
  *(unsigned char *)(v4 + 16) = 1;
  uint64_t v5 = swift_allocObject();
  *(unsigned char *)(v5 + 16) = 0;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v4;
  *(unsigned char *)(v6 + 24) = a2;
  *(void *)(v6 + 32) = v5;
  type metadata accessor for CombiningAffinityScorer(0);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_children) = a1;
  uint64_t v8 = (uint64_t (**)(uint64_t, char, uint64_t, char))(v7
                                                             + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_reducer);
  *uint64_t v8 = partial apply for closure #1 in static CombiningAffinityScorer.min(children:requireAll:);
  v8[1] = (uint64_t (*)(uint64_t, char, uint64_t, char))v6;
  swift_bridgeObjectRetain();
  UUID.init()();
  uint64_t v9 = v7 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_scoreState;
  *(void *)uint64_t v9 = 0;
  *(_WORD *)(v9 + 8) = 256;
  return v7;
}

uint64_t closure #1 in static CombiningAffinityScorer.min(children:requireAll:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7)
{
  swift_beginAccess();
  int v14 = *(unsigned __int8 *)(a5 + 16);
  swift_beginAccess();
  *(unsigned char *)(a5 + 16) = 0;
  if (a4)
  {
    if (a6)
    {
      swift_beginAccess();
      if ((*(unsigned char *)(a7 + 16) & 1) == 0)
      {
        swift_beginAccess();
        *(unsigned char *)(a7 + 16) = 1;
      }
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)static Logger.executor);
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v20 = 0;
        _os_log_impl(&dword_1B9C64000, v18, v19, "CombiningAffinityScorer with requireAll got nil value, returning nil", v20, 2u);
        MEMORY[0x1BA9E48C0](v20, -1, -1);
      }

      return 0;
    }
  }
  else
  {
    if (a1 >= a3) {
      uint64_t v15 = a3;
    }
    else {
      uint64_t v15 = a1;
    }
    if (v14) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = 0;
    }
    if (a2) {
      return v16;
    }
    else {
      return v15;
    }
  }
  return a1;
}

uint64_t static CombiningAffinityScorer.sum(children:requireAll:)(uint64_t a1, char a2)
{
  uint64_t v4 = swift_allocObject();
  *(unsigned char *)(v4 + 16) = 1;
  uint64_t v5 = swift_allocObject();
  *(unsigned char *)(v5 + 16) = 0;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v4;
  *(unsigned char *)(v6 + 24) = a2;
  *(void *)(v6 + 32) = v5;
  type metadata accessor for CombiningAffinityScorer(0);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_children) = a1;
  uint64_t v8 = (uint64_t (**)(uint64_t, char, uint64_t, char))(v7
                                                             + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_reducer);
  *uint64_t v8 = partial apply for closure #1 in static CombiningAffinityScorer.sum(children:requireAll:);
  v8[1] = (uint64_t (*)(uint64_t, char, uint64_t, char))v6;
  swift_bridgeObjectRetain();
  UUID.init()();
  uint64_t v9 = v7 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_scoreState;
  *(void *)uint64_t v9 = 0;
  *(_WORD *)(v9 + 8) = 256;
  return v7;
}

uint64_t closure #1 in static CombiningAffinityScorer.sum(children:requireAll:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, unsigned __int8 a6, uint64_t a7)
{
  swift_beginAccess();
  unsigned __int8 v14 = *(unsigned char *)(a5 + 16);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(a5 + 16) = 0;
  if (a4)
  {
    if (a6)
    {
      swift_beginAccess();
      if ((*(unsigned char *)(a7 + 16) & 1) == 0)
      {
        swift_beginAccess();
        *(unsigned char *)(a7 + 16) = 1;
      }
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v16 = type metadata accessor for Logger();
      __swift_project_value_buffer(v16, (uint64_t)static Logger.executor);
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v17, v18))
      {
        os_log_type_t v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v19 = 0;
        _os_log_impl(&dword_1B9C64000, v17, v18, "CombiningAffinityScorer with requireAll got nil value, returning nil", v19, 2u);
        MEMORY[0x1BA9E48C0](v19, -1, -1);
      }

      return 0;
    }
    return a1;
  }
  if (a2)
  {
    if ((a6 ^ 1 | v14)) {
      return a3;
    }
    else {
      return 0;
    }
  }
  BOOL v20 = __OFADD__(a1, a3);
  a1 += a3;
  if (!v20) {
    return a1;
  }
  __break(1u);
  return result;
}

uint64_t static CombiningAffinityScorer.first(children:)(uint64_t a1)
{
  type metadata accessor for CombiningAffinityScorer(0);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_children) = a1;
  Swift::String v3 = (uint64_t (**)(uint64_t, char, uint64_t))(v2
                                                       + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_reducer);
  *Swift::String v3 = closure #1 in static CombiningAffinityScorer.first(children:);
  v3[1] = 0;
  swift_bridgeObjectRetain();
  UUID.init()();
  uint64_t v4 = v2 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_scoreState;
  *(void *)uint64_t v4 = 0;
  *(_WORD *)(v4 + 8) = 256;
  return v2;
}

uint64_t closure #1 in static CombiningAffinityScorer.first(children:)(uint64_t a1, char a2, uint64_t a3)
{
  if (a2) {
    return a3;
  }
  return result;
}

uint64_t static CombiningAffinityScorer.last(children:)(uint64_t a1)
{
  type metadata accessor for CombiningAffinityScorer(0);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_children) = a1;
  Swift::String v3 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, char))(v2
                                                                + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_reducer);
  *Swift::String v3 = closure #1 in static CombiningAffinityScorer.last(children:);
  v3[1] = 0;
  swift_bridgeObjectRetain();
  UUID.init()();
  uint64_t v4 = v2 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_scoreState;
  *(void *)uint64_t v4 = 0;
  *(_WORD *)(v4 + 8) = 256;
  return v2;
}

uint64_t closure #1 in static CombiningAffinityScorer.last(children:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0) {
    return a3;
  }
  return result;
}

uint64_t static CombiningAffinityScorer.invert(child:fallbackValue:)(uint64_t a1, uint64_t a2, char a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AffinityScorer>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1BA04FD90;
  outlined init with copy of ReferenceResolutionClientProtocol(a1, v6 + 32);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(unsigned char *)(v7 + 24) = a3 & 1;
  type metadata accessor for CombiningAffinityScorer(0);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_children) = v6;
  uint64_t v9 = (void *)(v8 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_reducer);
  void *v9 = partial apply for closure #1 in static CombiningAffinityScorer.invert(child:fallbackValue:);
  v9[1] = v7;
  UUID.init()();
  uint64_t v10 = v8 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_scoreState;
  *(void *)uint64_t v10 = 0;
  *(_WORD *)(v10 + 8) = 256;
  return v8;
}

void CombiningAffinityScorer.__allocating_init()()
{
}

void CombiningAffinityScorer.init()()
{
}

uint64_t CombiningAffinityScorer.__ivar_destroyer()
{
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t CombiningAffinityScorer.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_id;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t CombiningAffinityScorer.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_id;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t ComparingAffinityScorer.score.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_score);
}

uint64_t ComparingAffinityScorer.comparison.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_comparison);
}

uint64_t ComparingAffinityScorer.first.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_first, a1);
}

uint64_t ComparingAffinityScorer.second.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_second, a1, &demangling cache variable for type metadata for AffinityValueFetcher?);
}

uint64_t ComparingAffinityScorer.__allocating_init(score:comparison:_:_:)(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = v10 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_score;
  *(void *)uint64_t v11 = a1;
  *(unsigned char *)(v11 + 8) = a2 & 1;
  *(unsigned char *)(v10 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_comparison) = a3;
  outlined init with copy of ReferenceResolutionClientProtocol(a4, v10 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_first);
  outlined init with copy of ReferenceResolutionClientProtocol?(a5, v10 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_second, &demangling cache variable for type metadata for AffinityValueFetcher?);
  UUID.init()();
  uint64_t v12 = v10 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_scoreState;
  *(void *)uint64_t v12 = 0;
  *(_WORD *)(v12 + 8) = 256;
  outlined destroy of ReferenceResolutionClientProtocol?(a5, &demangling cache variable for type metadata for AffinityValueFetcher?);
  __swift_destroy_boxed_opaque_existential_1Tm(a4);
  return v10;
}

uint64_t ComparingAffinityScorer.init(score:comparison:_:_:)(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = v5 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_score;
  *(void *)uint64_t v8 = a1;
  *(unsigned char *)(v8 + 8) = a2 & 1;
  *(unsigned char *)(v5 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_comparison) = a3;
  outlined init with copy of ReferenceResolutionClientProtocol(a4, v5 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_first);
  outlined init with copy of ReferenceResolutionClientProtocol?(a5, v5 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_second, &demangling cache variable for type metadata for AffinityValueFetcher?);
  UUID.init()();
  uint64_t v9 = v5 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_scoreState;
  *(void *)uint64_t v9 = 0;
  *(_WORD *)(v9 + 8) = 256;
  outlined destroy of ReferenceResolutionClientProtocol?(a5, &demangling cache variable for type metadata for AffinityValueFetcher?);
  __swift_destroy_boxed_opaque_existential_1Tm(a4);
  return v5;
}

uint64_t ComparingAffinityScorer.computeScore(for:loopCheck:)(uint64_t a1)
{
  uint64_t result = AffinityValueComparison.evaluate(input:_:_:)(a1, (void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_first), v1 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_second, *(unsigned char *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_comparison));
  if (!v2)
  {
    if (result) {
      return *(void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_score);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t AffinityValueComparison.evaluate(input:_:_:)(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v5 = closure #1 in AffinityValueComparison.evaluate(input:_:_:);
  switch(a4)
  {
    case 1:
      uint64_t v9 = closure #2 in AffinityValueComparison.evaluate(input:_:_:);
      goto LABEL_7;
    case 2:
      uint64_t v9 = closure #3 in AffinityValueComparison.evaluate(input:_:_:);
      goto LABEL_7;
    case 3:
      uint64_t v9 = closure #4 in AffinityValueComparison.evaluate(input:_:_:);
      goto LABEL_7;
    case 4:
      uint64_t v9 = (BOOL (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #5 in AffinityValueComparison.evaluate(input:_:_:);
      goto LABEL_7;
    case 5:
      uint64_t v9 = (BOOL (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #6 in AffinityValueComparison.evaluate(input:_:_:);
LABEL_7:
      uint64_t v5 = v9;
      goto LABEL_8;
    case 6:
      uint64_t v21 = a2[3];
      uint64_t v22 = a2[4];
      __swift_project_boxed_opaque_existential_1(a2, v21);
      uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 8))(a1, v21, v22);
      if (!v4)
      {
        if (v24) {
          uint64_t v25 = v23 & 0xFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v25 = 0;
        }
        if (v24) {
          unint64_t v26 = v24;
        }
        else {
          unint64_t v26 = 0xE000000000000000;
        }
        swift_bridgeObjectRelease();
        uint64_t v27 = HIBYTE(v26) & 0xF;
        if ((v26 & 0x2000000000000000) == 0) {
          uint64_t v27 = v25;
        }
        LOBYTE(a1) = v27 != 0;
      }
      return a1 & 1;
    case 7:
      uint64_t v28 = a2[3];
      uint64_t v29 = a2[4];
      __swift_project_boxed_opaque_existential_1(a2, v28);
      uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 8))(a1, v28, v29);
      if (!v4)
      {
        if (v31) {
          uint64_t v33 = v30 & 0xFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v33 = 0;
        }
        if (v31) {
          unint64_t v34 = v31;
        }
        else {
          unint64_t v34 = 0xE000000000000000;
        }
        swift_bridgeObjectRelease();
        uint64_t v35 = HIBYTE(v34) & 0xF;
        if ((v34 & 0x2000000000000000) == 0) {
          uint64_t v35 = v33;
        }
        LOBYTE(a1) = v35 == 0;
      }
      return a1 & 1;
    default:
LABEL_8:
      outlined init with copy of ReferenceResolutionClientProtocol?(a3, (uint64_t)&v54, &demangling cache variable for type metadata for AffinityValueFetcher?);
      if (v55)
      {
        outlined init with take of ReferenceResolutionClientProtocol(&v54, (uint64_t)v56);
        uint64_t v10 = a2[3];
        uint64_t v11 = a2[4];
        __swift_project_boxed_opaque_existential_1(a2, v10);
        uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 8))(a1, v10, v11);
        if (v4)
        {
LABEL_12:
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v56);
          return a1 & 1;
        }
        unint64_t v14 = v13;
        if (v13)
        {
          uint64_t v15 = v12;
          uint64_t v16 = v57;
          uint64_t v17 = v58;
          __swift_project_boxed_opaque_existential_1(v56, v57);
          uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 8))(a1, v16, v17);
          unint64_t v36 = v19;
          if (v19)
          {
            uint64_t v37 = v18;
            BOOL v38 = v5(v15, v14, v18, v19);
            LOBYTE(a1) = v38;
            if (one-time initialization token for executor != -1) {
              swift_once();
            }
            uint64_t v46 = type metadata accessor for Logger();
            __swift_project_value_buffer(v46, (uint64_t)static Logger.executor);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            unint64_t v47 = Logger.logObject.getter();
            os_log_type_t v48 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v47, v48))
            {
              os_log_type_t v53 = v48;
              uint64_t v49 = swift_slowAlloc();
              uint64_t v52 = swift_slowAlloc();
              *(void *)&long long v54 = v52;
              *(_DWORD *)uint64_t v49 = 136315906;
              swift_bridgeObjectRetain();
              uint64_t v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v14, (uint64_t *)&v54);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v49 + 12) = 2080;
              unint64_t v50 = 0xE100000000000000;
              uint64_t v51 = 60;
              switch(a4)
              {
                case 1:
                  uint64_t v51 = 62;
                  break;
                case 2:
                  unint64_t v50 = 0xE200000000000000;
                  uint64_t v51 = 15676;
                  break;
                case 3:
                  unint64_t v50 = 0xE200000000000000;
                  uint64_t v51 = 15678;
                  break;
                case 4:
                  unint64_t v50 = 0xE200000000000000;
                  uint64_t v51 = 15677;
                  break;
                case 5:
                  unint64_t v50 = 0xE200000000000000;
                  uint64_t v51 = 15649;
                  break;
                default:
                  break;
              }
              uint64_t v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v50, (uint64_t *)&v54);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              *(_WORD *)(v49 + 22) = 2080;
              swift_bridgeObjectRetain();
              uint64_t v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v36, (uint64_t *)&v54);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v49 + 32) = 1024;
              LODWORD(v59) = a1 & 1;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              _os_log_impl(&dword_1B9C64000, v47, v53, "AffinityValueComparison: %s %s %s -> %{BOOL}d", (uint8_t *)v49, 0x26u);
              swift_arrayDestroy();
              MEMORY[0x1BA9E48C0](v52, -1, -1);
              MEMORY[0x1BA9E48C0](v49, -1, -1);
            }
            else
            {

              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
            }
            goto LABEL_12;
          }
          swift_bridgeObjectRelease();
        }
        if (one-time initialization token for executor != -1) {
          swift_once();
        }
        uint64_t v39 = type metadata accessor for Logger();
        __swift_project_value_buffer(v39, (uint64_t)static Logger.executor);
        uint64_t v40 = Logger.logObject.getter();
        os_log_type_t v41 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v40, v41))
        {
          unint64_t v42 = (uint8_t *)swift_slowAlloc();
          uint64_t v43 = swift_slowAlloc();
          *(void *)&long long v54 = v43;
          *(_DWORD *)unint64_t v42 = 136315138;
          unint64_t v44 = 0xE100000000000000;
          uint64_t v45 = 60;
          switch(a4)
          {
            case 1:
              uint64_t v45 = 62;
              break;
            case 2:
              unint64_t v44 = 0xE200000000000000;
              uint64_t v45 = 15676;
              break;
            case 3:
              unint64_t v44 = 0xE200000000000000;
              uint64_t v45 = 15678;
              break;
            case 4:
              unint64_t v44 = 0xE200000000000000;
              uint64_t v45 = 15677;
              break;
            case 5:
              unint64_t v44 = 0xE200000000000000;
              uint64_t v45 = 15649;
              break;
            default:
              break;
          }
          uint64_t v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v44, (uint64_t *)&v54);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B9C64000, v40, v41, "AffinityValueComparison: op=%s, at least one arg was nil; returning false",
            v42,
            0xCu);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v43, -1, -1);
          MEMORY[0x1BA9E48C0](v42, -1, -1);
        }

        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v56);
        LOBYTE(a1) = 0;
      }
      else
      {
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v54, &demangling cache variable for type metadata for AffinityValueFetcher?);
        lazy protocol witness table accessor for type AffinityScoreError and conformance AffinityScoreError();
        swift_allocError();
        *(void *)uint64_t v20 = 2;
        *(unsigned char *)(v20 + 8) = 1;
        swift_willThrow();
      }
      return a1 & 1;
  }
}

uint64_t ComparingAffinityScorer.debugDescription.getter()
{
  uint64_t v14 = 0;
  unint64_t v15 = 0xE000000000000000;
  _StringGuts.grow(_:)(69);
  uint64_t v16 = 0;
  unint64_t v17 = 0xE000000000000000;
  v1._object = (void *)0x80000001BA062560;
  v1._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v1);
  char v2 = *(unsigned char *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_score + 8);
  uint64_t v14 = *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_score);
  LOBYTE(v15) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
  v3._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 0x7261706D6F63202CLL;
  v4._object = (void *)0xED00003D6E6F7369;
  String.append(_:)(v4);
  unint64_t v5 = 0xE100000000000000;
  uint64_t v6 = 60;
  switch(*(unsigned char *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_comparison))
  {
    case 1:
      uint64_t v6 = 62;
      break;
    case 2:
      unint64_t v5 = 0xE200000000000000;
      uint64_t v6 = 15676;
      break;
    case 3:
      unint64_t v5 = 0xE200000000000000;
      uint64_t v6 = 15678;
      break;
    case 4:
      unint64_t v5 = 0xE200000000000000;
      uint64_t v6 = 15677;
      break;
    case 5:
      unint64_t v5 = 0xE200000000000000;
      uint64_t v6 = 15649;
      break;
    case 6:
      uint64_t v6 = 42;
      break;
    case 7:
      uint64_t v6 = 33;
      break;
    default:
      break;
  }
  unint64_t v7 = v5;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 0x3D7473726966202CLL;
  v8._object = (void *)0xE800000000000000;
  String.append(_:)(v8);
  outlined init with copy of ReferenceResolutionClientProtocol(v0 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_first, (uint64_t)&v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AffinityValueFetcher);
  v9._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 0x646E6F636573202CLL;
  v10._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v10);
  outlined init with copy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_second, (uint64_t)&v14, &demangling cache variable for type metadata for AffinityValueFetcher?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AffinityValueFetcher?);
  v11._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 41;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  return v16;
}

uint64_t AffinityValueComparison.rawValue.getter(char a1)
{
  uint64_t result = 60;
  switch(a1)
  {
    case 1:
      uint64_t result = 62;
      break;
    case 2:
      uint64_t result = 15676;
      break;
    case 3:
      uint64_t result = 15678;
      break;
    case 4:
      uint64_t result = 15677;
      break;
    case 5:
      uint64_t result = 15649;
      break;
    case 6:
      uint64_t result = 42;
      break;
    case 7:
      uint64_t result = 33;
      break;
    default:
      return result;
  }
  return result;
}

void ComparingAffinityScorer.__allocating_init()()
{
}

void ComparingAffinityScorer.init()()
{
}

uint64_t ComparingAffinityScorer.__ivar_destroyer()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_first);
  return outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_second, &demangling cache variable for type metadata for AffinityValueFetcher?);
}

uint64_t ComparingAffinityScorer.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_id;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_first);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_second, &demangling cache variable for type metadata for AffinityValueFetcher?);
  return v0;
}

uint64_t ComparingAffinityScorer.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_id;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_first);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_second, &demangling cache variable for type metadata for AffinityValueFetcher?);

  return swift_deallocClassInstance();
}

BOOL closure #1 in AffinityValueComparison.evaluate(input:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v20[0] = a3;
  uint64_t v8 = type metadata accessor for TypeIdentifier();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  Swift::String v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)v20 - v13;
  uint64_t v15 = MEMORY[0x1E4FBB1A0];
  uint64_t v23 = MEMORY[0x1E4FBB1A0];
  uint64_t v21 = a1;
  uint64_t v22 = a2;
  swift_bridgeObjectRetain();
  TypeIdentifier.init(for:)();
  static Transformation.defaultLengthLimit.getter();
  static Transformation.transform<A>(_:to:lengthLimit:)();
  if (v4)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v21);
  }
  else
  {
    uint64_t v16 = *(void (**)(char *, uint64_t))(v9 + 8);
    v16(v14, v8);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v21);
    uint64_t v17 = v24;
    uint64_t v23 = v15;
    uint64_t v21 = v20[0];
    uint64_t v22 = a4;
    swift_bridgeObjectRetain();
    TypeIdentifier.init(for:)();
    static Transformation.defaultLengthLimit.getter();
    static Transformation.transform<A>(_:to:lengthLimit:)();
    v16(v12, v8);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v21);
    return v17 < v20[1];
  }
  return v18;
}

BOOL closure #2 in AffinityValueComparison.evaluate(input:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v20[0] = a3;
  uint64_t v8 = type metadata accessor for TypeIdentifier();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  Swift::String v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)v20 - v13;
  uint64_t v15 = MEMORY[0x1E4FBB1A0];
  uint64_t v23 = MEMORY[0x1E4FBB1A0];
  uint64_t v21 = a1;
  uint64_t v22 = a2;
  swift_bridgeObjectRetain();
  TypeIdentifier.init(for:)();
  static Transformation.defaultLengthLimit.getter();
  static Transformation.transform<A>(_:to:lengthLimit:)();
  if (v4)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v21);
  }
  else
  {
    uint64_t v16 = *(void (**)(char *, uint64_t))(v9 + 8);
    v16(v14, v8);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v21);
    uint64_t v17 = v24;
    uint64_t v23 = v15;
    uint64_t v21 = v20[0];
    uint64_t v22 = a4;
    swift_bridgeObjectRetain();
    TypeIdentifier.init(for:)();
    static Transformation.defaultLengthLimit.getter();
    static Transformation.transform<A>(_:to:lengthLimit:)();
    v16(v12, v8);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v21);
    return v20[1] < v17;
  }
  return v18;
}

BOOL closure #3 in AffinityValueComparison.evaluate(input:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v20[0] = a3;
  uint64_t v8 = type metadata accessor for TypeIdentifier();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  Swift::String v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)v20 - v13;
  uint64_t v15 = MEMORY[0x1E4FBB1A0];
  uint64_t v23 = MEMORY[0x1E4FBB1A0];
  uint64_t v21 = a1;
  uint64_t v22 = a2;
  swift_bridgeObjectRetain();
  TypeIdentifier.init(for:)();
  static Transformation.defaultLengthLimit.getter();
  static Transformation.transform<A>(_:to:lengthLimit:)();
  if (v4)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v21);
  }
  else
  {
    uint64_t v16 = *(void (**)(char *, uint64_t))(v9 + 8);
    v16(v14, v8);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v21);
    uint64_t v17 = v24;
    uint64_t v23 = v15;
    uint64_t v21 = v20[0];
    uint64_t v22 = a4;
    swift_bridgeObjectRetain();
    TypeIdentifier.init(for:)();
    static Transformation.defaultLengthLimit.getter();
    static Transformation.transform<A>(_:to:lengthLimit:)();
    v16(v12, v8);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v21);
    return v20[1] >= v17;
  }
  return v18;
}

BOOL closure #4 in AffinityValueComparison.evaluate(input:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v20[0] = a3;
  uint64_t v8 = type metadata accessor for TypeIdentifier();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  Swift::String v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)v20 - v13;
  uint64_t v15 = MEMORY[0x1E4FBB1A0];
  uint64_t v23 = MEMORY[0x1E4FBB1A0];
  uint64_t v21 = a1;
  uint64_t v22 = a2;
  swift_bridgeObjectRetain();
  TypeIdentifier.init(for:)();
  static Transformation.defaultLengthLimit.getter();
  static Transformation.transform<A>(_:to:lengthLimit:)();
  if (v4)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v21);
  }
  else
  {
    uint64_t v16 = *(void (**)(char *, uint64_t))(v9 + 8);
    v16(v14, v8);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v21);
    uint64_t v17 = v24;
    uint64_t v23 = v15;
    uint64_t v21 = v20[0];
    uint64_t v22 = a4;
    swift_bridgeObjectRetain();
    TypeIdentifier.init(for:)();
    static Transformation.defaultLengthLimit.getter();
    static Transformation.transform<A>(_:to:lengthLimit:)();
    v16(v12, v8);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v21);
    return v17 >= v20[1];
  }
  return v18;
}

uint64_t closure #5 in AffinityValueComparison.evaluate(input:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

uint64_t closure #6 in AffinityValueComparison.evaluate(input:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    char v4 = 0;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)() ^ 1;
  }
  return v4 & 1;
}

uint64_t AffinityValueComparison.requiredChildCount.getter(char a1)
{
  if ((a1 & 0xFE) == 6) {
    return 1;
  }
  else {
    return 2;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AffinityValueComparison(unsigned __int8 *a1, unsigned char *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xE100000000000000;
  uint64_t v4 = 60;
  switch(v2)
  {
    case 1:
      uint64_t v4 = 62;
      break;
    case 2:
      unint64_t v3 = 0xE200000000000000;
      uint64_t v4 = 15676;
      break;
    case 3:
      unint64_t v3 = 0xE200000000000000;
      uint64_t v4 = 15678;
      break;
    case 4:
      unint64_t v3 = 0xE200000000000000;
      uint64_t v4 = 15677;
      break;
    case 5:
      unint64_t v3 = 0xE200000000000000;
      uint64_t v4 = 15649;
      break;
    case 6:
      uint64_t v4 = 42;
      break;
    case 7:
      uint64_t v4 = 33;
      break;
    default:
      break;
  }
  unint64_t v5 = 0xE100000000000000;
  uint64_t v6 = 60;
  switch(*a2)
  {
    case 1:
      if (v4 == 62) {
        goto LABEL_22;
      }
      goto LABEL_25;
    case 2:
      unint64_t v5 = 0xE200000000000000;
      if (v4 != 15676) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 3:
      unint64_t v5 = 0xE200000000000000;
      if (v4 != 15678) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 4:
      unint64_t v5 = 0xE200000000000000;
      if (v4 != 15677) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 5:
      unint64_t v5 = 0xE200000000000000;
      if (v4 != 15649) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 6:
      uint64_t v6 = 42;
      goto LABEL_21;
    case 7:
      if (v4 != 33) {
        goto LABEL_25;
      }
      goto LABEL_22;
    default:
LABEL_21:
      if (v4 != v6) {
        goto LABEL_25;
      }
LABEL_22:
      if (v3 == v5) {
        char v7 = 1;
      }
      else {
LABEL_25:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AffinityValueComparison()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AffinityValueComparison()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AffinityValueComparison()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AffinityValueComparison@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized AffinityValueComparison.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AffinityValueComparison(uint64_t *a1@<X8>)
{
  uint64_t v2 = 60;
  switch(*v1)
  {
    case 1:
      uint64_t v2 = 62;
      goto LABEL_3;
    case 2:
      *a1 = 15676;
      a1[1] = 0xE200000000000000;
      break;
    case 3:
      *a1 = 15678;
      a1[1] = 0xE200000000000000;
      break;
    case 4:
      *a1 = 15677;
      a1[1] = 0xE200000000000000;
      break;
    case 5:
      *a1 = 15649;
      a1[1] = 0xE200000000000000;
      break;
    case 6:
      *a1 = 42;
      a1[1] = 0xE100000000000000;
      break;
    case 7:
      *a1 = 33;
      a1[1] = 0xE100000000000000;
      break;
    default:
LABEL_3:
      *a1 = v2;
      a1[1] = 0xE100000000000000;
      break;
  }
}

uint64_t FixedValueFetcher.value.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FixedValueFetcher.__allocating_init(value:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t FixedValueFetcher.init(value:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return v2;
}

uint64_t FixedValueFetcher.fetchValue(input:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FixedValueFetcher.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t FixedValueFetcher.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for AffinityValueFetcher.fetchValue(input:) in conformance FixedValueFetcher()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t EnvironmentValueFetcher.provider.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EnvironmentValueFetcher.valueKey.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

void *EnvironmentValueFetcher.__allocating_init(plist:)(uint64_t a1)
{
  return EnvironmentValueFetcher.init(plist:)(a1);
}

void *EnvironmentValueFetcher.init(plist:)(uint64_t a1)
{
  uint64_t v2 = v1;
  outlined init with copy of Any(a1, (uint64_t)v39);
  if ((swift_dynamicCast() & 1) == 0)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.executor);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v28, v29)) {
      goto LABEL_18;
    }
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v30 = 0;
    _os_log_impl(&dword_1B9C64000, v28, v29, "EnvironmentValueFetcher needs string argument", v30, 2u);
    unint64_t v31 = v30;
    goto LABEL_16;
  }
  v39[0] = v37;
  v39[1] = v38;
  unint64_t v4 = lazy protocol witness table accessor for type String and conformance String();
  unint64_t v5 = (void *)MEMORY[0x1BA9E37D0](46, 0xE100000000000000, 1, 1, MEMORY[0x1E4FBB1A0], v4);
  if (v5[2] != 2)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain();
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v28, v33))
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_18;
    }
    unint64_t v34 = (uint8_t *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    v39[0] = v35;
    *(_DWORD *)unint64_t v34 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v28, v33, "EnvironmentValueFetcher needs 2-part provider.value keypath, got \"%s\"", v34, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v35, -1, -1);
    unint64_t v31 = v34;
LABEL_16:
    MEMORY[0x1BA9E48C0](v31, -1, -1);
LABEL_18:

    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    type metadata accessor for EnvironmentValueFetcher();
    swift_deallocPartialClassInstance();
    return 0;
  }
  swift_bridgeObjectRelease();
  if (!v5[2])
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v6 = v5[4];
  uint64_t v7 = v5[5];
  uint64_t v8 = v5[6];
  uint64_t v9 = v5[7];
  swift_bridgeObjectRetain();
  uint64_t v10 = MEMORY[0x1BA9E2EC0](v6, v7, v8, v9);
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();
  v2[2] = v10;
  v2[3] = v12;
  if (v5[2] < 2uLL)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v13 = v5[8];
  uint64_t v14 = v5[9];
  uint64_t v15 = v5[10];
  uint64_t v16 = v5[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = MEMORY[0x1BA9E2EC0](v13, v14, v15, v16);
  uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  v2[4] = v17;
  v2[5] = v19;
  if (one-time initialization token for executor != -1) {
LABEL_24:
  }
    swift_once();
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.executor);
  swift_retain_n();
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136315138;
    v39[0] = v24;
    uint64_t v25 = (*(uint64_t (**)(void))(*v2 + 120))();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v21, v22, "%s", v23, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v24, -1, -1);
    MEMORY[0x1BA9E48C0](v23, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v2;
}

uint64_t EnvironmentValueFetcher.__allocating_init(provider:valueKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  EnvironmentValueFetcher.init(provider:valueKey:)(a1, a2, a3, a4);
  return v8;
}

void *EnvironmentValueFetcher.init(provider:valueKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a1;
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = a4;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
  swift_retain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v13 = v9;
    uint64_t v10 = (*(uint64_t (**)(void))(*v4 + 120))();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v6, v7, "%s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v9, -1, -1);
    MEMORY[0x1BA9E48C0](v8, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  return v4;
}

uint64_t EnvironmentValueFetcher.fetchValue(input:)()
{
  type metadata accessor for SiriEnvironment();
  uint64_t v1 = static SiriEnvironment.forCurrentTask.getter();
  if (!v1) {
    uint64_t v1 = static SiriEnvironment.default.getter();
  }
  uint64_t v2 = v1;
  uint64_t v7 = (*(uint64_t (**)(void))(*v0 + 120))();
  unint64_t v8 = v3;
  v4._uint64_t countAndFlagsBits = 0x615668637465662ELL;
  v4._object = (void *)0xED0000292865756CLL;
  String.append(_:)(v4);
  swift_retain();
  swift_retain();
  uint64_t v5 = specialized logAction<A>(label:_:)(v7, v8, v2, v0);
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_release();
  return v5;
}

uint64_t closure #1 in EnvironmentValueFetcher.fetchValue(input:)@<X0>(void *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = (void *)a1[5];
  uint64_t v7 = dispatch thunk of SiriEnvironment.providers.getter();
  uint64_t v8 = specialized Sequence.compactMap<A>(_:)(v7);
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(v8 + 16);
  if (!v9)
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t countAndFlagsBits = 0;
    object = 0;
LABEL_15:
    *a2 = countAndFlagsBits;
    a2[1] = (uint64_t)object;
    return result;
  }
  uint64_t v24 = v5;
  uint64_t v23 = a2;
  swift_bridgeObjectRetain();
  uint64_t v10 = (uint64_t *)(v8 + 40);
  while (1)
  {
    uint64_t v11 = *v10;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 16);
    swift_unknownObjectRetain();
    if (v13(ObjectType, v11) == v4 && v14 == v3)
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v16) {
      break;
    }
    swift_unknownObjectRelease();
    v10 += 2;
    if (!--v9)
    {
      uint64_t result = swift_bridgeObjectRelease_n();
      uint64_t countAndFlagsBits = 0;
      object = 0;
      a2 = v23;
      goto LABEL_15;
    }
  }
  swift_bridgeObjectRelease_n();
LABEL_13:
  v20._object = v6;
  v20._uint64_t countAndFlagsBits = v24;
  Swift::String_optional v21 = SiriEnvironmentStringKeyedValueFetching.getValue(forKey:)(v20);
  uint64_t countAndFlagsBits = v21.value._countAndFlagsBits;
  object = v21.value._object;
  uint64_t result = swift_unknownObjectRelease();
  if (!v22)
  {
    a2 = v23;
    goto LABEL_15;
  }
  return result;
}

uint64_t EnvironmentValueFetcher.debugDescription.getter()
{
  _StringGuts.grow(_:)(53);
  v1._object = (void *)0x80000001BA0625B0;
  v1._uint64_t countAndFlagsBits = 0xD000000000000022;
  String.append(_:)(v1);
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 0x65756C6176202C22;
  v5._object = (void *)0xED0000223D79654BLL;
  String.append(_:)(v5);
  uint64_t v7 = v0[4];
  uint64_t v6 = (void *)v0[5];
  swift_bridgeObjectRetain();
  v8._uint64_t countAndFlagsBits = v7;
  v8._object = v6;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 10530;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  return 0;
}

uint64_t EnvironmentValueFetcher.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t EnvironmentValueFetcher.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for AffinityValueFetcher.fetchValue(input:) in conformance EnvironmentValueFetcher()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance EnvironmentValueFetcher()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t static AffinityScore.kAffinityScoreVersion.getter()
{
  return 1;
}

uint64_t static AffinityScore.kAffinityScoreDefaultVersion.getter()
{
  return 0;
}

uint64_t static AffinityScore.loadAffinityScorer(from:defaultVersion:)@<X0>(uint64_t a1@<X8>)
{
  return specialized logAction<A>(label:_:)(0xD000000000000012, 0x80000001BA0625E0, (void (*)(void *__return_ptr, void))partial apply for closure #1 in static AffinityScore.loadAffinityScorer(from:defaultVersion:), a1);
}

uint64_t closure #1 in static AffinityScore.loadAffinityScorer(from:defaultVersion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  Swift::String v4 = v3;
  double v270 = *(double *)&a2;
  uint64_t v271 = a3;
  uint64_t v272 = type metadata accessor for Logger();
  uint64_t v269 = *(void *)(v272 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v272);
  Swift::String v8 = (char *)&v246 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  unint64_t v260 = (char *)&v246 - v10;
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v262 = (char *)&v246 - v12;
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v246 - v14;
  uint64_t v16 = MEMORY[0x1F4188790](v13);
  unint64_t v261 = (char *)&v246 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  v263 = (char *)&v246 - v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v264 = (char *)&v246 - v21;
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  id v265 = (char *)&v246 - v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  v266 = (char *)&v246 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  id v267 = (char *)&v246 - v27;
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  unint64_t v268 = (char *)&v246 - v29;
  MEMORY[0x1F4188790](v28);
  unint64_t v31 = (char *)&v246 - v30;
  uint64_t v32 = type metadata accessor for TypeIdentifier();
  uint64_t v33 = *(void *)(v32 - 8);
  MEMORY[0x1F4188790](v32);
  uint64_t v35 = (char *)&v246 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any(a1, (uint64_t)&v275);
  if (swift_dynamicCast())
  {
    uint64_t v36 = *(void *)&v273[0];
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v272, (uint64_t)static Logger.executor);
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v39 = 134217984;
      *(void *)&long long v275 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v37, v38, "FixedAffinityScorer(score: %ld)", v39, 0xCu);
      MEMORY[0x1BA9E48C0](v39, -1, -1);
    }

    uint64_t v40 = type metadata accessor for FixedAffinityScorer(0);
    uint64_t v41 = swift_allocObject();
    UUID.init()();
    uint64_t v42 = v41 + OBJC_IVAR____TtC14SiriKitRuntime19FixedAffinityScorer_score;
    *(void *)uint64_t v42 = v36;
    *(unsigned char *)(v42 + 8) = 0;
    uint64_t v43 = v271;
LABEL_7:
    v43[3] = v40;
    uint64_t result = lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type FixedAffinityScorer and conformance FixedAffinityScorer, (void (*)(uint64_t))type metadata accessor for FixedAffinityScorer);
LABEL_16:
    v43[4] = result;
    uint64_t *v43 = v41;
    return result;
  }
  outlined init with copy of Any(a1, (uint64_t)&v275);
  if (swift_dynamicCast())
  {
    uint64_t v45 = *(void *)&v273[0];
    double v46 = round(*(double *)v273);
    if ((~*(void *)&v46 & 0x7FF0000000000000) != 0)
    {
      if (v46 > -9.22337204e18)
      {
        if (v46 < 9.22337204e18)
        {
          if (one-time initialization token for executor == -1)
          {
LABEL_13:
            uint64_t v47 = (uint64_t)v46;
            __swift_project_value_buffer(v272, (uint64_t)static Logger.executor);
            os_log_type_t v48 = Logger.logObject.getter();
            os_log_type_t v49 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v48, v49))
            {
              uint64_t v50 = swift_slowAlloc();
              *(_DWORD *)uint64_t v50 = 134218240;
              *(void *)&long long v275 = v47;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v50 + 12) = 2048;
              *(void *)&long long v275 = v45;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              _os_log_impl(&dword_1B9C64000, v48, v49, "FixedAffinityScorer(score: %ld) (rounded from double value %f)", (uint8_t *)v50, 0x16u);
              MEMORY[0x1BA9E48C0](v50, -1, -1);
            }

            uint64_t v51 = type metadata accessor for FixedAffinityScorer(0);
            uint64_t v41 = swift_allocObject();
            UUID.init()();
            uint64_t v52 = v41 + OBJC_IVAR____TtC14SiriKitRuntime19FixedAffinityScorer_score;
            *(void *)uint64_t v52 = v47;
            *(unsigned char *)(v52 + 8) = 0;
            uint64_t v43 = v271;
            v271[3] = v51;
            uint64_t result = lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type FixedAffinityScorer and conformance FixedAffinityScorer, (void (*)(uint64_t))type metadata accessor for FixedAffinityScorer);
            goto LABEL_16;
          }
LABEL_69:
          double v270 = v46;
          swift_once();
          double v46 = v270;
          goto LABEL_13;
        }
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_68;
  }
  outlined init with copy of Any(a1, (uint64_t)&v275);
  uint64_t v53 = MEMORY[0x1E4FBB1A0];
  if (swift_dynamicCast())
  {
    unint64_t v259 = v3;
    unint64_t v54 = *((void *)&v273[0] + 1);
    uint64_t v55 = HIBYTE(*((void *)&v273[0] + 1)) & 0xFLL;
    if ((*((void *)&v273[0] + 1) & 0x2000000000000000) == 0) {
      uint64_t v55 = *(void *)&v273[0] & 0xFFFFFFFFFFFFLL;
    }
    if (!v55)
    {
      swift_bridgeObjectRelease();
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      __swift_project_value_buffer(v272, (uint64_t)static Logger.executor);
      uint64_t v62 = Logger.logObject.getter();
      os_log_type_t v63 = static os_log_type_t.debug.getter();
      BOOL v64 = os_log_type_enabled(v62, v63);
      uint64_t v43 = v271;
      if (v64)
      {
        uint64_t v65 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v65 = 0;
        _os_log_impl(&dword_1B9C64000, v62, v63, "FixedAffinityScorer(score: nil) (from empty string)", v65, 2u);
        MEMORY[0x1BA9E48C0](v65, -1, -1);
      }

      uint64_t v40 = type metadata accessor for FixedAffinityScorer(0);
      uint64_t v41 = swift_allocObject();
      UUID.init()();
      uint64_t v66 = v41 + OBJC_IVAR____TtC14SiriKitRuntime19FixedAffinityScorer_score;
      *(void *)uint64_t v66 = 0;
      *(unsigned char *)(v66 + 8) = 1;
      goto LABEL_7;
    }
    uint64_t v276 = v53;
    long long v275 = v273[0];
    uint64_t v258 = *(void *)&v273[0];
    swift_bridgeObjectRetain();
    TypeIdentifier.init(for:)();
    static Transformation.defaultLengthLimit.getter();
    uint64_t v56 = v259;
    static Transformation.transform<A>(_:to:lengthLimit:)();
    if (!v56)
    {
      uint64_t v67 = v258;
      unint64_t v259 = 0;
      (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v32);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v275);
      uint64_t v68 = *(void *)&v273[0];
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      __swift_project_value_buffer(v272, (uint64_t)static Logger.executor);
      swift_bridgeObjectRetain();
      BOOL v69 = Logger.logObject.getter();
      os_log_type_t v70 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v69, v70))
      {
        uint64_t v71 = swift_slowAlloc();
        uint64_t v72 = swift_slowAlloc();
        *(void *)&long long v275 = v72;
        *(_DWORD *)uint64_t v71 = 134218242;
        *(void *)&v273[0] = v68;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v71 + 12) = 2080;
        swift_bridgeObjectRetain();
        *(void *)&v273[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v54, (uint64_t *)&v275);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B9C64000, v69, v70, "FixedAffinityScorer(score: %ld) (from string \"%s\")", (uint8_t *)v71, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v72, -1, -1);
        MEMORY[0x1BA9E48C0](v71, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v43 = v271;
      uint64_t v73 = type metadata accessor for FixedAffinityScorer(0);
      uint64_t v41 = swift_allocObject();
      UUID.init()();
      uint64_t v74 = v41 + OBJC_IVAR____TtC14SiriKitRuntime19FixedAffinityScorer_score;
      *(void *)uint64_t v74 = v68;
      *(unsigned char *)(v74 + 8) = 0;
      v43[3] = v73;
      uint64_t v75 = &lazy protocol witness table cache variable for type FixedAffinityScorer and conformance FixedAffinityScorer;
      id v76 = (void (*)(uint64_t))type metadata accessor for FixedAffinityScorer;
LABEL_38:
      uint64_t result = lazy protocol witness table accessor for type Input and conformance Input(v75, v76);
      goto LABEL_16;
    }
    swift_bridgeObjectRelease();

    (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v32);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v275);
    Swift::String v4 = 0;
  }
  outlined init with copy of Any(a1, (uint64_t)&v275);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : Any]);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_40;
  }
  uint64_t v57 = *(void *)&v273[0];
  specialized Dictionary.getAsType<A>(key:)(1701869940, 0xE400000000000000, *(uint64_t *)&v273[0]);
  if (v4) {
    return swift_bridgeObjectRelease();
  }
  if (!v58)
  {
    swift_bridgeObjectRelease();
LABEL_40:
    uint64_t v77 = v272;
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v77, (uint64_t)static Logger.executor);
    uint64_t v78 = Logger.logObject.getter();
    os_log_type_t v79 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v78, v79)) {
      goto LABEL_45;
    }
    uint64_t v80 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v80 = 0;
    uint64_t v81 = "bad encoding dict";
    goto LABEL_44;
  }
  Swift::String v59 = String.lowercased()();
  object = (char *)v59._object;
  swift_bridgeObjectRelease();
  uint64_t v61 = specialized Dictionary.getAsType<A>(key:)(0x6E6572646C696863, 0xE800000000000000, v57);
  if (v61) {
    uint64_t v84 = v61;
  }
  else {
    uint64_t v84 = MEMORY[0x1E4FBC860];
  }
  char v85 = specialized Dictionary.getAsType<A>(key:)(0x4165726975716572, 0xEA00000000006C6CLL, v57);
  uint64_t v86 = specialized Dictionary.getAsType<A>(key:)(0x6E6F6973726576, 0xE700000000000000, v57);
  uint64_t v88 = *(void *)&v270;
  if ((v87 & 1) == 0) {
    uint64_t v88 = v86;
  }
  double v270 = *(double *)&v88;
  uint64_t v89 = specialized Dictionary.getAsType<A>(key:)(0x65726F6373, 0xE500000000000000, v57);
  uint64_t v258 = v57;
  if (*(uint64_t *)&v270 > 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v91 = v272;
    uint64_t v92 = __swift_project_value_buffer(v272, (uint64_t)static Logger.executor);
    uint64_t v93 = v269;
    (*(void (**)(char *, uint64_t, uint64_t))(v269 + 16))(v8, v92, v91);
    unint64_t v94 = Logger.logObject.getter();
    os_log_type_t v95 = static os_log_type_t.error.getter();
    BOOL v96 = os_log_type_enabled(v94, v95);
    uint64_t v97 = *(void *)&v270;
    if (v96)
    {
      uint64_t v98 = swift_slowAlloc();
      *(_DWORD *)uint64_t v98 = 134218240;
      *(void *)&long long v275 = v97;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v98 + 12) = 2048;
      *(void *)&long long v275 = 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v94, v95, "bad version: got %ld, newer than our version %ld", (uint8_t *)v98, 0x16u);
      MEMORY[0x1BA9E48C0](v98, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v93 + 8))(v8, v91);
    lazy protocol witness table accessor for type AffinityScoreError and conformance AffinityScoreError();
    swift_allocError();
    *(void *)uint64_t v99 = v97;
    *(unsigned char *)(v99 + 8) = 0;
    return swift_willThrow();
  }
  uint64_t v254 = v89;
  int v255 = v90;
  uint64_t v257 = v84;
  unint64_t v259 = 0;
  unint64_t v248 = v15;
  int v256 = v85 & 1;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v100 = v272;
  uint64_t v101 = __swift_project_value_buffer(v272, (uint64_t)static Logger.executor);
  uint64_t v102 = v269;
  unint64_t v103 = *(void (**)(char *, uint64_t, uint64_t))(v269 + 16);
  uint64_t v251 = v101;
  uint64_t v250 = v269 + 16;
  unint64_t v249 = v103;
  ((void (*)(char *))v103)(v31);
  swift_bridgeObjectRetain_n();
  uint64_t v104 = v257;
  swift_bridgeObjectRetain_n();
  os_log_t v105 = Logger.logObject.getter();
  os_log_type_t v106 = static os_log_type_t.debug.getter();
  LODWORD(v253) = v106;
  if (os_log_type_enabled(v105, v106))
  {
    uint64_t v107 = swift_slowAlloc();
    uint64_t v247 = swift_slowAlloc();
    *(void *)&v273[0] = v247;
    *(_DWORD *)uint64_t v107 = 136315906;
    swift_bridgeObjectRetain();
    *(void *)&long long v275 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59._countAndFlagsBits, (unint64_t)v59._object, (uint64_t *)v273);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v107 + 12) = 2080;
    *(void *)&long long v275 = v254;
    BYTE8(v275) = v255 & 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
    uint64_t v108 = String.init<A>(describing:)();
    *(void *)&long long v275 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v108, v109, (uint64_t *)v273);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v107 + 22) = 2048;
    uint64_t v110 = *(void *)(v104 + 16);
    swift_bridgeObjectRelease();
    *(void *)&long long v275 = v110;
    object = (char *)v59._object;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v107 + 32) = 1024;
    LODWORD(v275) = v256;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v105, (os_log_type_t)v253, "Loading scorer type=%s, score=%s, childCount=%ld, requireAll=%{BOOL}d", (uint8_t *)v107, 0x26u);
    uint64_t v111 = v247;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v111, -1, -1);
    MEMORY[0x1BA9E48C0](v107, -1, -1);

    unint64_t v112 = *(void (**)(char *, uint64_t))(v269 + 8);
    v112(v31, v272);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    unint64_t v112 = *(void (**)(char *, uint64_t))(v102 + 8);
    v112(v31, v100);
  }
  unint64_t v253 = v112;
  uint64_t countAndFlagsBits = v59._countAndFlagsBits;
  if (v59._countAndFlagsBits == 7235949 && object == (char *)0xE300000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    int64_t v113 = *(void *)(v104 + 16);
    if (v113)
    {
      uint64_t v277 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v113, 0);
      uint64_t v114 = v104 + 32;
      while (1)
      {
        uint64_t v115 = outlined init with copy of Any(v114, (uint64_t)v273);
        MEMORY[0x1F4188790](v115);
        uint64_t v116 = *(void *)&v270;
        *(&v246 - 2) = (uint64_t)v273;
        *(&v246 - 1) = v116;
        unint64_t v117 = v259;
        specialized logAction<A>(label:_:)(0xD000000000000012, 0x80000001BA0625E0, (void (*)(void *__return_ptr, void))closure #1 in static AffinityScore.loadAffinityScorer(from:defaultVersion:)partial apply, (uint64_t)&v275);
        if (v117) {
          break;
        }
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v273);
        uint64_t v118 = v277;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v259 = 0;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v118 + 16) + 1, 1);
          uint64_t v118 = v277;
        }
        unint64_t v121 = *(void *)(v118 + 16);
        unint64_t v120 = *(void *)(v118 + 24);
        if (v121 >= v120 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v120 > 1, v121 + 1, 1);
          uint64_t v118 = v277;
        }
        *(void *)(v118 + 16) = v121 + 1;
        outlined init with take of ReferenceResolutionClientProtocol(&v275, v118 + 40 * v121 + 32);
        v114 += 32;
        if (!--v113)
        {
          swift_bridgeObjectRelease();
          goto LABEL_97;
        }
      }
LABEL_96:
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v273);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_release();
    }
    swift_bridgeObjectRelease();
    uint64_t v118 = MEMORY[0x1E4FBC860];
LABEL_97:
    if (*(void *)(v118 + 16))
    {
      swift_bridgeObjectRelease();
      uint64_t v130 = swift_allocObject();
      *(unsigned char *)(v130 + 16) = 1;
      uint64_t v131 = swift_allocObject();
      *(unsigned char *)(v131 + 16) = 0;
      uint64_t v132 = swift_allocObject();
      *(void *)(v132 + 16) = v130;
      *(unsigned char *)(v132 + 24) = v256;
      *(void *)(v132 + 32) = v131;
      uint64_t v133 = type metadata accessor for CombiningAffinityScorer(0);
      uint64_t v41 = swift_allocObject();
      *(void *)(v41 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_children) = v118;
      uint64_t v134 = (uint64_t (**)())(v41 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_reducer);
      uint64_t v135 = closure #1 in static CombiningAffinityScorer.min(children:requireAll:)partial apply;
LABEL_120:
      *uint64_t v134 = v135;
      v134[1] = (uint64_t (*)())v132;
LABEL_121:
      swift_bridgeObjectRetain();
      UUID.init()();
      uint64_t v151 = v41 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_scoreState;
      *(void *)uint64_t v151 = 0;
      *(_WORD *)(v151 + 8) = 256;
      swift_bridgeObjectRelease();
      uint64_t v43 = v271;
      v271[3] = v133;
      goto LABEL_122;
    }
    swift_bridgeObjectRelease();
    v249(v268, v251, v272);
    swift_bridgeObjectRetain();
    unint64_t v136 = Logger.logObject.getter();
    os_log_type_t v137 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v136, v137))
    {
      unint64_t v138 = (uint8_t *)swift_slowAlloc();
      uint64_t v139 = swift_slowAlloc();
      *(void *)&long long v275 = v139;
      *(_DWORD *)unint64_t v138 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)&v273[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, (uint64_t *)&v275);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v136, v137, "bad operand count, \"%s\" operator has no children", v138, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v139, -1, -1);
      MEMORY[0x1BA9E48C0](v138, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    unint64_t v140 = v268;
    goto LABEL_103;
  }
  if (v59._countAndFlagsBits == 7889261 && object == (char *)0xE300000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    int64_t v122 = *(void *)(v257 + 16);
    if (v122)
    {
      uint64_t v277 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v122, 0);
      uint64_t v123 = v257 + 32;
      while (1)
      {
        uint64_t v124 = outlined init with copy of Any(v123, (uint64_t)v273);
        MEMORY[0x1F4188790](v124);
        uint64_t v125 = *(void *)&v270;
        *(&v246 - 2) = (uint64_t)v273;
        *(&v246 - 1) = v125;
        uint64_t v126 = v259;
        specialized logAction<A>(label:_:)(0xD000000000000012, 0x80000001BA0625E0, (void (*)(void *__return_ptr, void))closure #1 in static AffinityScore.loadAffinityScorer(from:defaultVersion:)partial apply, (uint64_t)&v275);
        unint64_t v259 = v126;
        if (v126) {
          goto LABEL_96;
        }
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v273);
        uint64_t v127 = v277;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v127 + 16) + 1, 1);
          uint64_t v127 = v277;
        }
        unint64_t v129 = *(void *)(v127 + 16);
        unint64_t v128 = *(void *)(v127 + 24);
        if (v129 >= v128 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v128 > 1, v129 + 1, 1);
          uint64_t v127 = v277;
        }
        *(void *)(v127 + 16) = v129 + 1;
        outlined init with take of ReferenceResolutionClientProtocol(&v275, v127 + 40 * v129 + 32);
        v123 += 32;
        if (!--v122)
        {
          swift_bridgeObjectRelease();
          goto LABEL_118;
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v127 = MEMORY[0x1E4FBC860];
LABEL_118:
    if (*(void *)(v127 + 16))
    {
      swift_bridgeObjectRelease();
      uint64_t v149 = swift_allocObject();
      *(unsigned char *)(v149 + 16) = 1;
      uint64_t v150 = swift_allocObject();
      *(unsigned char *)(v150 + 16) = 0;
      uint64_t v132 = swift_allocObject();
      *(void *)(v132 + 16) = v149;
      *(unsigned char *)(v132 + 24) = v256;
      *(void *)(v132 + 32) = v150;
      uint64_t v133 = type metadata accessor for CombiningAffinityScorer(0);
      uint64_t v41 = swift_allocObject();
      *(void *)(v41 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_children) = v127;
      uint64_t v134 = (uint64_t (**)())(v41 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_reducer);
      uint64_t v135 = closure #1 in static CombiningAffinityScorer.max(children:requireAll:)partial apply;
      goto LABEL_120;
    }
    swift_bridgeObjectRelease();
    v249(v267, v251, v272);
    swift_bridgeObjectRetain();
    uint64_t v153 = Logger.logObject.getter();
    os_log_type_t v154 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v153, v154))
    {
      uint64_t v155 = (uint8_t *)swift_slowAlloc();
      uint64_t v156 = swift_slowAlloc();
      *(void *)&long long v275 = v156;
      *(_DWORD *)uint64_t v155 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)&v273[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, (uint64_t *)&v275);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v153, v154, "bad operand count, \"%s\" operator has no children", v155, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v156, -1, -1);
      MEMORY[0x1BA9E48C0](v155, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    unint64_t v140 = v267;
    goto LABEL_103;
  }
  unint64_t v268 = object;
  if (countAndFlagsBits == 7173491 && v268 == (char *)0xE300000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    int64_t v141 = *(void *)(v257 + 16);
    if (v141)
    {
      uint64_t v277 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v141, 0);
      uint64_t v142 = v257 + 32;
      while (1)
      {
        uint64_t v143 = outlined init with copy of Any(v142, (uint64_t)v273);
        MEMORY[0x1F4188790](v143);
        uint64_t v144 = *(void *)&v270;
        *(&v246 - 2) = (uint64_t)v273;
        *(&v246 - 1) = v144;
        unint64_t v145 = v259;
        specialized logAction<A>(label:_:)(0xD000000000000012, 0x80000001BA0625E0, (void (*)(void *__return_ptr, void))closure #1 in static AffinityScore.loadAffinityScorer(from:defaultVersion:)partial apply, (uint64_t)&v275);
        unint64_t v259 = v145;
        if (v145) {
          goto LABEL_96;
        }
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v273);
        uint64_t v146 = v277;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v146 + 16) + 1, 1);
          uint64_t v146 = v277;
        }
        unint64_t v148 = *(void *)(v146 + 16);
        unint64_t v147 = *(void *)(v146 + 24);
        if (v148 >= v147 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v147 > 1, v148 + 1, 1);
          uint64_t v146 = v277;
        }
        *(void *)(v146 + 16) = v148 + 1;
        outlined init with take of ReferenceResolutionClientProtocol(&v275, v146 + 40 * v148 + 32);
        v142 += 32;
        if (!--v141)
        {
          swift_bridgeObjectRelease();
          goto LABEL_141;
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v146 = MEMORY[0x1E4FBC860];
LABEL_141:
    if (*(void *)(v146 + 16))
    {
      swift_bridgeObjectRelease();
      uint64_t v165 = swift_allocObject();
      *(unsigned char *)(v165 + 16) = 1;
      uint64_t v166 = swift_allocObject();
      *(unsigned char *)(v166 + 16) = 0;
      uint64_t v132 = swift_allocObject();
      *(void *)(v132 + 16) = v165;
      *(unsigned char *)(v132 + 24) = v256;
      *(void *)(v132 + 32) = v166;
      uint64_t v133 = type metadata accessor for CombiningAffinityScorer(0);
      uint64_t v41 = swift_allocObject();
      *(void *)(v41 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_children) = v146;
      uint64_t v134 = (uint64_t (**)())(v41 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_reducer);
      uint64_t v135 = closure #1 in static CombiningAffinityScorer.sum(children:requireAll:)partial apply;
      goto LABEL_120;
    }
    swift_bridgeObjectRelease();
    v249(v266, v251, v272);
    swift_bridgeObjectRetain();
    uint64_t v167 = Logger.logObject.getter();
    os_log_type_t v168 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v167, v168))
    {
      unint64_t v169 = (uint8_t *)swift_slowAlloc();
      uint64_t v170 = swift_slowAlloc();
      *(void *)&long long v275 = v170;
      *(_DWORD *)unint64_t v169 = 136315138;
      unint64_t v171 = (unint64_t)v268;
      swift_bridgeObjectRetain();
      *(void *)&v273[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, v171, (uint64_t *)&v275);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v167, v168, "bad operand count, \"%s\" operator has no children", v169, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v170, -1, -1);
      MEMORY[0x1BA9E48C0](v169, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    unint64_t v140 = v266;
    goto LABEL_103;
  }
  if (countAndFlagsBits == 0x7473726966 && v268 == (char *)0xE500000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    int64_t v157 = *(void *)(v257 + 16);
    if (v157)
    {
      uint64_t v277 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v157, 0);
      uint64_t v158 = v257 + 32;
      while (1)
      {
        uint64_t v159 = outlined init with copy of Any(v158, (uint64_t)v273);
        MEMORY[0x1F4188790](v159);
        uint64_t v160 = *(void *)&v270;
        *(&v246 - 2) = (uint64_t)v273;
        *(&v246 - 1) = v160;
        unint64_t v161 = v259;
        specialized logAction<A>(label:_:)(0xD000000000000012, 0x80000001BA0625E0, (void (*)(void *__return_ptr, void))closure #1 in static AffinityScore.loadAffinityScorer(from:defaultVersion:)partial apply, (uint64_t)&v275);
        unint64_t v259 = v161;
        if (v161) {
          goto LABEL_96;
        }
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v273);
        uint64_t v162 = v277;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v162 + 16) + 1, 1);
          uint64_t v162 = v277;
        }
        unint64_t v164 = *(void *)(v162 + 16);
        unint64_t v163 = *(void *)(v162 + 24);
        if (v164 >= v163 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v163 > 1, v164 + 1, 1);
          uint64_t v162 = v277;
        }
        *(void *)(v162 + 16) = v164 + 1;
        outlined init with take of ReferenceResolutionClientProtocol(&v275, v162 + 40 * v164 + 32);
        v158 += 32;
        if (!--v157)
        {
          swift_bridgeObjectRelease();
          goto LABEL_161;
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v162 = MEMORY[0x1E4FBC860];
LABEL_161:
    if (*(void *)(v162 + 16))
    {
      swift_bridgeObjectRelease();
      uint64_t v133 = type metadata accessor for CombiningAffinityScorer(0);
      uint64_t v41 = swift_allocObject();
      *(void *)(v41 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_children) = v162;
      uint64_t v180 = (void *)(v41 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_reducer);
      uint64_t v181 = closure #1 in static CombiningAffinityScorer.first(children:);
LABEL_163:
      *uint64_t v180 = v181;
      v180[1] = 0;
      goto LABEL_121;
    }
    swift_bridgeObjectRelease();
    v249(v265, v251, v272);
    swift_bridgeObjectRetain();
    unint64_t v182 = Logger.logObject.getter();
    os_log_type_t v183 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v182, v183))
    {
      uint64_t v184 = (uint8_t *)swift_slowAlloc();
      uint64_t v185 = swift_slowAlloc();
      *(void *)&long long v275 = v185;
      *(_DWORD *)uint64_t v184 = 136315138;
      unint64_t v186 = (unint64_t)v268;
      swift_bridgeObjectRetain();
      *(void *)&v273[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, v186, (uint64_t *)&v275);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v182, v183, "bad operand count, \"%s\" operator has no children", v184, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v185, -1, -1);
      MEMORY[0x1BA9E48C0](v184, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    unint64_t v140 = v265;
    goto LABEL_103;
  }
  if (countAndFlagsBits == 1953718636 && v268 == (char *)0xE400000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    int64_t v172 = *(void *)(v257 + 16);
    if (v172)
    {
      uint64_t v277 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v172, 0);
      uint64_t v173 = v257 + 32;
      while (1)
      {
        uint64_t v174 = outlined init with copy of Any(v173, (uint64_t)v273);
        MEMORY[0x1F4188790](v174);
        uint64_t v175 = *(void *)&v270;
        *(&v246 - 2) = (uint64_t)v273;
        *(&v246 - 1) = v175;
        uint64_t v176 = v259;
        specialized logAction<A>(label:_:)(0xD000000000000012, 0x80000001BA0625E0, (void (*)(void *__return_ptr, void))closure #1 in static AffinityScore.loadAffinityScorer(from:defaultVersion:)partial apply, (uint64_t)&v275);
        unint64_t v259 = v176;
        if (v176) {
          goto LABEL_96;
        }
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v273);
        uint64_t v177 = v277;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v177 + 16) + 1, 1);
          uint64_t v177 = v277;
        }
        unint64_t v179 = *(void *)(v177 + 16);
        unint64_t v178 = *(void *)(v177 + 24);
        if (v179 >= v178 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v178 > 1, v179 + 1, 1);
          uint64_t v177 = v277;
        }
        *(void *)(v177 + 16) = v179 + 1;
        outlined init with take of ReferenceResolutionClientProtocol(&v275, v177 + 40 * v179 + 32);
        v173 += 32;
        if (!--v172)
        {
          swift_bridgeObjectRelease();
          goto LABEL_181;
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v177 = MEMORY[0x1E4FBC860];
LABEL_181:
    if (*(void *)(v177 + 16))
    {
      swift_bridgeObjectRelease();
      uint64_t v133 = type metadata accessor for CombiningAffinityScorer(0);
      uint64_t v41 = swift_allocObject();
      *(void *)(v41 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_children) = v177;
      uint64_t v180 = (void *)(v41 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_reducer);
      uint64_t v181 = closure #1 in static CombiningAffinityScorer.last(children:);
      goto LABEL_163;
    }
    swift_bridgeObjectRelease();
    v249(v264, v251, v272);
    swift_bridgeObjectRetain();
    id v195 = Logger.logObject.getter();
    os_log_type_t v196 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v195, v196))
    {
      uint64_t v197 = (uint8_t *)swift_slowAlloc();
      uint64_t v198 = swift_slowAlloc();
      *(void *)&long long v275 = v198;
      *(_DWORD *)uint64_t v197 = 136315138;
      unint64_t v199 = (unint64_t)v268;
      swift_bridgeObjectRetain();
      *(void *)&v273[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, v199, (uint64_t *)&v275);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v195, v196, "bad operand count, \"%s\" operator has no children", v197, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v198, -1, -1);
      MEMORY[0x1BA9E48C0](v197, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    unint64_t v140 = v264;
LABEL_103:
    v253(v140, v272);
    lazy protocol witness table accessor for type AffinityScoreError and conformance AffinityScoreError();
    swift_allocError();
    uint64_t v83 = 2;
    goto LABEL_47;
  }
  if (countAndFlagsBits == 0x747265766E69 && v268 == (char *)0xE600000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    int64_t v187 = *(void *)(v257 + 16);
    if (v187)
    {
      uint64_t v277 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v187, 0);
      uint64_t v188 = v257 + 32;
      while (1)
      {
        uint64_t v189 = outlined init with copy of Any(v188, (uint64_t)v273);
        MEMORY[0x1F4188790](v189);
        uint64_t v190 = *(void *)&v270;
        *(&v246 - 2) = (uint64_t)v273;
        *(&v246 - 1) = v190;
        uint64_t v191 = v259;
        specialized logAction<A>(label:_:)(0xD000000000000012, 0x80000001BA0625E0, (void (*)(void *__return_ptr, void))closure #1 in static AffinityScore.loadAffinityScorer(from:defaultVersion:)partial apply, (uint64_t)&v275);
        unint64_t v259 = v191;
        if (v191) {
          goto LABEL_96;
        }
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v273);
        uint64_t v192 = v277;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v192 + 16) + 1, 1);
          uint64_t v192 = v277;
        }
        unint64_t v194 = *(void *)(v192 + 16);
        unint64_t v193 = *(void *)(v192 + 24);
        if (v194 >= v193 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v193 > 1, v194 + 1, 1);
          uint64_t v192 = v277;
        }
        *(void *)(v192 + 16) = v194 + 1;
        outlined init with take of ReferenceResolutionClientProtocol(&v275, v192 + 40 * v194 + 32);
        v188 += 32;
        if (!--v187)
        {
          swift_bridgeObjectRelease();
          goto LABEL_191;
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v192 = MEMORY[0x1E4FBC860];
LABEL_191:
    uint64_t v200 = *(void *)(v192 + 16);
    if (v200 != 1)
    {
      v249(v263, v251, v272);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v207 = Logger.logObject.getter();
      os_log_type_t v208 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v207, v208))
      {
        uint64_t v209 = swift_slowAlloc();
        uint64_t v210 = swift_slowAlloc();
        *(void *)&long long v275 = v210;
        *(_DWORD *)uint64_t v209 = 136315394;
        unint64_t v211 = (unint64_t)v268;
        swift_bridgeObjectRetain();
        *(void *)&v273[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, v211, (uint64_t *)&v275);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v209 + 12) = 2048;
        swift_bridgeObjectRelease();
        *(void *)&v273[0] = v200;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v207, v208, "bad operand count, \"%s\" operator has %ld children (should have 1)", (uint8_t *)v209, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v210, -1, -1);
        MEMORY[0x1BA9E48C0](v209, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      unint64_t v140 = v263;
      goto LABEL_103;
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (*(void *)(v192 + 16))
    {
      outlined init with copy of ReferenceResolutionClientProtocol(v192 + 32, (uint64_t)&v275);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AffinityScorer>);
      uint64_t v201 = swift_allocObject();
      *(_OWORD *)(v201 + 16) = xmmword_1BA04FD90;
      outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)&v275, v201 + 32);
      uint64_t v202 = swift_allocObject();
      *(void *)(v202 + 16) = v254;
      *(unsigned char *)(v202 + 24) = v255 & 1;
      uint64_t v203 = type metadata accessor for CombiningAffinityScorer(0);
      uint64_t v41 = swift_allocObject();
      *(void *)(v41 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_children) = v201;
      unint64_t v204 = (void *)(v41 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_reducer);
      *unint64_t v204 = partial apply for closure #1 in static CombiningAffinityScorer.invert(child:fallbackValue:);
      v204[1] = v202;
      UUID.init()();
      uint64_t v205 = v41 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_scoreState;
      *(void *)uint64_t v205 = 0;
      *(_WORD *)(v205 + 8) = 256;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v275);
      uint64_t v206 = v271;
      v271[3] = v203;
      uint64_t v43 = v206;
LABEL_122:
      uint64_t v75 = (unint64_t *)&lazy protocol witness table cache variable for type CombiningAffinityScorer and conformance CachingAffinityScorer;
      unint64_t v152 = type metadata accessor for CombiningAffinityScorer;
LABEL_123:
      id v76 = (void (*)(uint64_t))v152;
      goto LABEL_38;
    }
    __break(1u);
    goto LABEL_241;
  }
  if ((countAndFlagsBits != 0x657261706D6F63 || v268 != (char *)0xE700000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v249(v260, v251, v272);
    swift_bridgeObjectRetain();
    id v219 = Logger.logObject.getter();
    os_log_type_t v220 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v219, v220))
    {
      uint64_t v221 = (uint8_t *)swift_slowAlloc();
      uint64_t v222 = swift_slowAlloc();
      *(void *)&long long v275 = v222;
      *(_DWORD *)uint64_t v221 = 136315138;
      unint64_t v223 = (unint64_t)v268;
      swift_bridgeObjectRetain();
      *(void *)&v273[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, v223, (uint64_t *)&v275);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v219, v220, "unknown node type %s; throwing bad encoding", v221, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v222, -1, -1);
      MEMORY[0x1BA9E48C0](v221, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    unint64_t v224 = &v278;
    goto LABEL_226;
  }
  swift_bridgeObjectRelease();
  id v212 = v259;
  double v270 = COERCE_DOUBLE(specialized Dictionary.getAsType<A>(key:)(0x726F74617265706FLL, 0xE800000000000000, v258));
  unint64_t v259 = v212;
  if (v212)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  unint64_t v214 = v213;
  swift_bridgeObjectRelease();
  if (!v214)
  {
    swift_bridgeObjectRelease();
    uint64_t v78 = Logger.logObject.getter();
    os_log_type_t v79 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v78, v79)) {
      goto LABEL_45;
    }
    uint64_t v80 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v80 = 0;
    uint64_t v81 = "bad comparison operator encoding; missing or non-string operator";
LABEL_44:
    _os_log_impl(&dword_1B9C64000, v78, v79, v81, v80, 2u);
    MEMORY[0x1BA9E48C0](v80, -1, -1);
LABEL_45:

LABEL_46:
    lazy protocol witness table accessor for type AffinityScoreError and conformance AffinityScoreError();
    swift_allocError();
    uint64_t v83 = 3;
LABEL_47:
    *(void *)uint64_t v82 = v83;
    *(unsigned char *)(v82 + 8) = 1;
    return swift_willThrow();
  }
  swift_bridgeObjectRetain();
  *(double *)&v280._uint64_t countAndFlagsBits = v270;
  v280._object = v214;
  LODWORD(v268) = specialized AffinityValueComparison.init(rawValue:)(v280);
  if (v268 == 8)
  {
    swift_bridgeObjectRelease();
    v249(v261, v251, v272);
    swift_bridgeObjectRetain();
    unint64_t v215 = Logger.logObject.getter();
    os_log_type_t v216 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v215, v216))
    {
      BOOL v217 = (uint8_t *)swift_slowAlloc();
      uint64_t v218 = swift_slowAlloc();
      *(void *)&long long v275 = v218;
      *(_DWORD *)BOOL v217 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)&v273[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(uint64_t *)&v270, (unint64_t)v214, (uint64_t *)&v275);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v215, v216, "unknown comparison operator %s; throwing badEncoding", v217, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v218, -1, -1);
      MEMORY[0x1BA9E48C0](v217, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    unint64_t v224 = &v279;
LABEL_226:
    v253((char *)*(v224 - 32), v272);
    goto LABEL_46;
  }
  int64_t v225 = *(void *)(v257 + 16);
  if ((v268 & 0xFE) == 6) {
    uint64_t v226 = 1;
  }
  else {
    uint64_t v226 = 2;
  }
  if (v225 != v226)
  {
    v249(v262, v251, v272);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v232 = Logger.logObject.getter();
    os_log_type_t v233 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v232, v233))
    {
      uint64_t v234 = swift_slowAlloc();
      uint64_t v235 = swift_slowAlloc();
      *(void *)&long long v275 = v235;
      *(_DWORD *)uint64_t v234 = 134218498;
      swift_bridgeObjectRelease();
      *(void *)&v273[0] = v225;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v234 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)&v273[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(uint64_t *)&v270, (unint64_t)v214, (uint64_t *)&v275);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v234 + 22) = 2048;
      *(void *)&v273[0] = v226;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v232, v233, "bad operand count %ld for operator %s; needs %ld",
        (uint8_t *)v234,
        0x20u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v235, -1, -1);
      MEMORY[0x1BA9E48C0](v234, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    unint64_t v140 = v262;
    goto LABEL_103;
  }
  uint64_t v277 = MEMORY[0x1E4FBC860];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v225, 0);
  uint64_t v227 = v257 + 32;
  while (v225)
  {
    outlined init with copy of Any(v227, (uint64_t)v273);
    v228 = v259;
    static AffinityScore.loadValueFetcher(from:)((uint64_t)v273, (uint64_t *)&v275);
    unint64_t v259 = v228;
    if (v228) {
      goto LABEL_96;
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v273);
    uint64_t v229 = v277;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v229 + 16) + 1, 1);
      uint64_t v229 = v277;
    }
    unint64_t v231 = *(void *)(v229 + 16);
    unint64_t v230 = *(void *)(v229 + 24);
    if (v231 >= v230 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v230 > 1, v231 + 1, 1);
      uint64_t v229 = v277;
    }
    *(void *)(v229 + 16) = v231 + 1;
    uint64_t result = outlined init with take of ReferenceResolutionClientProtocol(&v275, v229 + 32 + 40 * v231);
    v227 += 32;
    if (!--v225)
    {
      swift_bridgeObjectRelease();
      v249(v248, v251, v272);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v236 = Logger.logObject.getter();
      os_log_type_t v237 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v236, v237))
      {
        uint64_t v239 = swift_slowAlloc();
        id v267 = (char *)swift_slowAlloc();
        *(void *)&long long v275 = v267;
        *(_DWORD *)uint64_t v239 = 136315394;
        swift_bridgeObjectRetain();
        *(void *)&v273[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(uint64_t *)&v270, (unint64_t)v214, (uint64_t *)&v275);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v239 + 12) = 2048;
        uint64_t v240 = *(void *)(v229 + 16);
        swift_bridgeObjectRelease();
        *(void *)&v273[0] = v240;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v236, v237, "returning CombiningAffinityScorer(oper=%s, children=%ld)", (uint8_t *)v239, 0x16u);
        uint64_t v241 = v267;
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v241, -1, -1);
        MEMORY[0x1BA9E48C0](v239, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v253)(v248, v272);
      uint64_t v242 = *(void *)(v229 + 16);
      if (v242 == 2)
      {
        outlined init with copy of ReferenceResolutionClientProtocol(v229 + 32, (uint64_t)&v275);
        outlined init with copy of ReferenceResolutionClientProtocol(v229 + 72, (uint64_t)v273);
        swift_bridgeObjectRelease();
        uint64_t v243 = type metadata accessor for ComparingAffinityScorer(0);
      }
      else
      {
        if (!v242) {
          goto LABEL_242;
        }
        outlined init with copy of ReferenceResolutionClientProtocol(v229 + 32, (uint64_t)&v275);
        swift_bridgeObjectRelease();
        uint64_t v243 = type metadata accessor for ComparingAffinityScorer(0);
        memset(v273, 0, sizeof(v273));
        uint64_t v274 = 0;
      }
      uint64_t v41 = swift_allocObject();
      uint64_t v244 = v41 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_score;
      *(void *)uint64_t v244 = v254;
      *(unsigned char *)(v244 + 8) = v255 & 1;
      *(unsigned char *)(v41 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_comparison) = (_BYTE)v268;
      outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)&v275, v41 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_first);
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v273, v41 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_second, &demangling cache variable for type metadata for AffinityValueFetcher?);
      UUID.init()();
      uint64_t v245 = v41 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_scoreState;
      *(void *)uint64_t v245 = 0;
      *(_WORD *)(v245 + 8) = 256;
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v273, &demangling cache variable for type metadata for AffinityValueFetcher?);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v275);
      uint64_t v43 = v271;
      v271[3] = v243;
      uint64_t v75 = (unint64_t *)&lazy protocol witness table cache variable for type ComparingAffinityScorer and conformance CachingAffinityScorer;
      unint64_t v152 = type metadata accessor for ComparingAffinityScorer;
      goto LABEL_123;
    }
  }
LABEL_241:
  __break(1u);
LABEL_242:
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.getAsType<A>(key:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v5 & 1) == 0) {
    return 0;
  }
  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v4, (uint64_t)v9);
  outlined init with take of Any(v9, v10);
  outlined init with copy of Any((uint64_t)v10, (uint64_t)v9);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
    return v8;
  }
  else
  {
    lazy protocol witness table accessor for type AffinityScoreError and conformance AffinityScoreError();
    swift_allocError();
    *(void *)uint64_t v7 = 3;
    *(unsigned char *)(v7 + 8) = 1;
    swift_willThrow();
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
  }
}

{
  unint64_t v4;
  char v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[2];
  _OWORD v10[2];

  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v5 & 1) == 0) {
    return 0;
  }
  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v4, (uint64_t)v9);
  outlined init with take of Any(v9, v10);
  outlined init with copy of Any((uint64_t)v10, (uint64_t)v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
    return v8;
  }
  else
  {
    lazy protocol witness table accessor for type AffinityScoreError and conformance AffinityScoreError();
    swift_allocError();
    *(void *)uint64_t v7 = 3;
    *(unsigned char *)(v7 + 8) = 1;
    swift_willThrow();
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
  }
}

{
  unint64_t v4;
  char v5;
  uint64_t v7;
  unsigned __int8 v8;
  _OWORD v9[2];
  _OWORD v10[2];

  if (!*(void *)(a3 + 16)) {
    return 2;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v5 & 1) == 0) {
    return 2;
  }
  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v4, (uint64_t)v9);
  outlined init with take of Any(v9, v10);
  outlined init with copy of Any((uint64_t)v10, (uint64_t)v9);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
    return v8;
  }
  else
  {
    lazy protocol witness table accessor for type AffinityScoreError and conformance AffinityScoreError();
    swift_allocError();
    *(void *)uint64_t v7 = 3;
    *(unsigned char *)(v7 + 8) = 1;
    swift_willThrow();
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
  }
}

{
  unint64_t v4;
  char v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[2];
  _OWORD v10[2];

  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v5 & 1) == 0) {
    return 0;
  }
  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v4, (uint64_t)v9);
  outlined init with take of Any(v9, v10);
  outlined init with copy of Any((uint64_t)v10, (uint64_t)v9);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
    return v8;
  }
  else
  {
    lazy protocol witness table accessor for type AffinityScoreError and conformance AffinityScoreError();
    swift_allocError();
    *(void *)uint64_t v7 = 3;
    *(unsigned char *)(v7 + 8) = 1;
    swift_willThrow();
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
  }
}

uint64_t static AffinityScore.loadValueFetcher(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  outlined init with copy of Any(a1, (uint64_t)v64);
  if (swift_dynamicCast())
  {
    uint64_t v4 = *(void *)&v63[0];
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 134217984;
      *(void *)&v64[0] = v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v6, v7, "FixedValueFetcher(value: %ld)", v8, 0xCu);
      MEMORY[0x1BA9E48C0](v8, -1, -1);
    }

    *(void *)&v64[0] = v4;
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v11 = v10;
    uint64_t v12 = type metadata accessor for FixedValueFetcher();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v9;
    *(void *)(result + 24) = v11;
    a2[3] = v12;
    goto LABEL_25;
  }
  outlined init with copy of Any(a1, (uint64_t)v64);
  if (swift_dynamicCast())
  {
    uint64_t v14 = *(void *)&v63[0];
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 134217984;
      *(void *)&v64[0] = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v16, v17, "FixedValueFetcher(value: %f)", v18, 0xCu);
      MEMORY[0x1BA9E48C0](v18, -1, -1);
    }

    *(void *)&v64[0] = 0;
    *((void *)&v64[0] + 1) = 0xE000000000000000;
    Double.write<A>(to:)();
    long long v19 = v64[0];
    uint64_t v20 = type metadata accessor for FixedValueFetcher();
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = v19;
LABEL_24:
    a2[3] = v20;
LABEL_25:
    a2[4] = (uint64_t)&protocol witness table for FixedValueFetcher;
    *a2 = result;
    return result;
  }
  outlined init with copy of Any(a1, (uint64_t)v64);
  if (swift_dynamicCast())
  {
    long long v21 = v63[0];
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain_n();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(void *)&v64[0] = v26;
      *(_DWORD *)uint64_t v25 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)&v63[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, *((unint64_t *)&v21 + 1), (uint64_t *)v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v23, v24, "FixedValueFetcher(value: \"%s\")", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v26, -1, -1);
      MEMORY[0x1BA9E48C0](v25, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v20 = type metadata accessor for FixedValueFetcher();
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = v21;
    goto LABEL_24;
  }
  outlined init with copy of Any(a1, (uint64_t)v64);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : Any]);
  if (swift_dynamicCast())
  {
    if (*(void *)(*(void *)&v63[0] + 16)
      && (unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(0x6D6E6F7269766E65, 0xEB00000000746E65),
          (v28 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(*(void *)&v63[0] + 56) + 32 * v27, (uint64_t)v64);
    }
    else
    {
      memset(v64, 0, 32);
    }
    if (*(void *)(*(void *)&v63[0] + 16)
      && (unint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(0x7475706E69, 0xE500000000000000), (v35 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(*(void *)&v63[0] + 56) + 32 * v34, (uint64_t)v63);
    }
    else
    {
      memset(v63, 0, sizeof(v63));
    }
    swift_bridgeObjectRelease();
    v60[3] = xmmword_1BA04F9C0;
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v64, (uint64_t)v61, (uint64_t *)&demangling cache variable for type metadata for Any?);
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v63, (uint64_t)v62, (uint64_t *)&demangling cache variable for type metadata for Any?);
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v61, (uint64_t)v60, (uint64_t *)&demangling cache variable for type metadata for Any?);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v60, (uint64_t)&v56, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v57)
    {
      outlined init with take of Any(&v56, &v58);
      outlined init with take of Any(&v58, &v56);
      uint64_t v36 = (void *)MEMORY[0x1E4FBC860];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36[2] + 1, 1, v36);
      }
      unint64_t v38 = v36[2];
      unint64_t v37 = v36[3];
      if (v38 >= v37 >> 1) {
        uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v37 > 1), v38 + 1, 1, v36);
      }
      _OWORD v36[2] = v38 + 1;
      outlined init with take of Any(&v56, &v36[4 * v38 + 4]);
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v56, (uint64_t *)&demangling cache variable for type metadata for Any?);
      uint64_t v36 = (void *)MEMORY[0x1E4FBC860];
    }
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v62, (uint64_t)v60, (uint64_t *)&demangling cache variable for type metadata for Any?);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v60, (uint64_t)&v56, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v57)
    {
      outlined init with take of Any(&v56, &v58);
      outlined init with take of Any(&v58, &v56);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36[2] + 1, 1, v36);
      }
      unint64_t v40 = v36[2];
      unint64_t v39 = v36[3];
      if (v40 >= v39 >> 1) {
        uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v39 > 1), v40 + 1, 1, v36);
      }
      _OWORD v36[2] = v40 + 1;
      outlined init with take of Any(&v56, &v36[4 * v40 + 4]);
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v56, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
    swift_arrayDestroy();
    uint64_t v41 = v36[2];
    swift_bridgeObjectRelease();
    if (v41 == 1)
    {
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v64, (uint64_t)&v58, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v59)
      {
        outlined init with take of Any(&v58, v60);
        outlined init with copy of Any((uint64_t)v60, (uint64_t)&v58);
        uint64_t v42 = type metadata accessor for EnvironmentValueFetcher();
        swift_allocObject();
        uint64_t v43 = (uint64_t)EnvironmentValueFetcher.init(plist:)((uint64_t)&v58);
        if (v43)
        {
          unint64_t v44 = &protocol witness table for EnvironmentValueFetcher;
LABEL_63:
          a2[3] = v42;
          a2[4] = (uint64_t)v44;
          *a2 = v43;
LABEL_65:
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v60);
          goto LABEL_66;
        }
        goto LABEL_64;
      }
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v58, (uint64_t *)&demangling cache variable for type metadata for Any?);
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v63, (uint64_t)&v58, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v59)
      {
        outlined init with take of Any(&v58, v60);
        outlined init with copy of Any((uint64_t)v60, (uint64_t)&v58);
        uint64_t v42 = type metadata accessor for InputValueFetcher();
        swift_allocObject();
        uint64_t v43 = InputValueFetcher.init(plist:)((uint64_t)&v58);
        if (v43)
        {
          unint64_t v44 = &protocol witness table for InputValueFetcher;
          goto LABEL_63;
        }
LABEL_64:
        lazy protocol witness table accessor for type AffinityScoreError and conformance AffinityScoreError();
        swift_allocError();
        *(void *)uint64_t v50 = 3;
        *(unsigned char *)(v50 + 8) = 1;
        swift_willThrow();
        goto LABEL_65;
      }
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v58, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v51 = type metadata accessor for Logger();
      __swift_project_value_buffer(v51, (uint64_t)static Logger.executor);
      uint64_t v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v52, v53))
      {
        unint64_t v54 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v54 = 0;
        _os_log_impl(&dword_1B9C64000, v52, v53, "loadValueFetcher logic error", v54, 2u);
        MEMORY[0x1BA9E48C0](v54, -1, -1);
      }

      lazy protocol witness table accessor for type AffinityScoreError and conformance AffinityScoreError();
      swift_allocError();
      *(void *)uint64_t v55 = 1;
      *(unsigned char *)(v55 + 8) = 1;
    }
    else
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v45 = type metadata accessor for Logger();
      __swift_project_value_buffer(v45, (uint64_t)static Logger.executor);
      double v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v46, v47))
      {
        os_log_type_t v48 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v48 = 0;
        _os_log_impl(&dword_1B9C64000, v46, v47, "value fetcher must be either an input fetcher XOR an environment value fetcher", v48, 2u);
        MEMORY[0x1BA9E48C0](v48, -1, -1);
      }

      lazy protocol witness table accessor for type AffinityScoreError and conformance AffinityScoreError();
      swift_allocError();
      *(void *)uint64_t v49 = 3;
      *(unsigned char *)(v49 + 8) = 1;
    }
    swift_willThrow();
LABEL_66:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v63, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v64, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  __swift_project_value_buffer(v29, (uint64_t)static Logger.executor);
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v32 = 0;
    _os_log_impl(&dword_1B9C64000, v30, v31, "bad encoding, not fixed or a dict", v32, 2u);
    MEMORY[0x1BA9E48C0](v32, -1, -1);
  }

  lazy protocol witness table accessor for type AffinityScoreError and conformance AffinityScoreError();
  swift_allocError();
  *(void *)uint64_t v33 = 3;
  *(unsigned char *)(v33 + 8) = 1;
  return swift_willThrow();
}

uint64_t _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC@<X0>(void (*a1)(unsigned char *)@<X0>, uint64_t a2@<X8>)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for Result();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = &v11[-v8];
  a1(v5);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v7 + 32))(a2, v9, v6);
}

uint64_t specialized logAction<A>(label:_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain_n();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v25 = a3;
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = a5;
    unint64_t v14 = a4;
    uint64_t v15 = swift_slowAlloc();
    *(void *)&v30[0] = v15;
    *(_DWORD *)uint64_t v12 = 136315138;
    swift_bridgeObjectRetain();
    v29[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v10, v11, "==>> %s", v12, 0xCu);
    swift_arrayDestroy();
    uint64_t v16 = v15;
    a4 = v14;
    a5 = v13;
    MEMORY[0x1BA9E48C0](v16, -1, -1);
    os_log_type_t v17 = v12;
    a3 = v25;
    MEMORY[0x1BA9E48C0](v17, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  closure #1 in implicit closure #1 in RemoteFlowPluginPackage.init(bundleId:bundlePath:supportedTopics:sharedFlowPluginServiceClient:overrideAffinityScorer:)(a3, a4, (uint64_t *)v30);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v30, (uint64_t)v29);
  swift_bridgeObjectRetain_n();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    uint64_t v28 = v21;
    *(_DWORD *)uint64_t v20 = 136315394;
    swift_bridgeObjectRetain();
    v27[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v20 + 12) = 2080;
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v29, (uint64_t)v27);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AffinityScorer);
    uint64_t v22 = String.init<A>(describing:)();
    v27[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v29);
    _os_log_impl(&dword_1B9C64000, v18, v19, "<<== %s -> %s", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v21, -1, -1);
    MEMORY[0x1BA9E48C0](v20, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v29);
  }

  outlined init with take of ReferenceResolutionClientProtocol(v30, a5);
  return swift_bridgeObjectRelease();
}

void logAction<A>(label:_:)(uint64_t a1@<X0>, unint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v39 = a1;
  uint64_t v9 = *(void *)(a4 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](a1);
  unint64_t v38 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v34 - v12;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = __swift_project_value_buffer(v14, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain_n();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v35 = a5;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v37 = v9;
    os_log_type_t v19 = (uint8_t *)v18;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v36 = (uint64_t)v13;
    uint64_t v21 = v20;
    uint64_t v41 = v20;
    uint64_t v34 = v15;
    *(_DWORD *)os_log_type_t v19 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, a2, &v41);
    a5 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v16, v17, "==>> %s", v19, 0xCu);
    swift_arrayDestroy();
    uint64_t v22 = v21;
    uint64_t v13 = (char *)v36;
    MEMORY[0x1BA9E48C0](v22, -1, -1);
    unint64_t v23 = v19;
    uint64_t v9 = v37;
    MEMORY[0x1BA9E48C0](v23, -1, -1);
  }
  else
  {

    uint64_t v24 = swift_bridgeObjectRelease_n();
  }
  a3(v24);
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v25(v13, a5, a4);
  swift_bridgeObjectRetain_n();
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  int v28 = v27;
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v29 = swift_slowAlloc();
    LODWORD(v37) = v28;
    uint64_t v30 = v29;
    uint64_t v36 = swift_slowAlloc();
    uint64_t v41 = v36;
    *(_DWORD *)uint64_t v30 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, a2, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v30 + 12) = 2080;
    v25(v38, (uint64_t)v13, a4);
    uint64_t v31 = String.init<A>(describing:)();
    uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, a4);
    _os_log_impl(&dword_1B9C64000, v26, (os_log_type_t)v37, "<<== %s -> %s", (uint8_t *)v30, 0x16u);
    uint64_t v33 = v36;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v33, -1, -1);
    MEMORY[0x1BA9E48C0](v30, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, a4);
  }
}

uint64_t partial apply for closure #1 in logAction<A>(label:_:)(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 24))();
  if (v2) {
    *a1 = v2;
  }
  return result;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<RemoteConversationClient>);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for RemoteConversationClient();
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          uint64_t v2 = v14;
        }
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        Swift::Int result = Hasher._finalize()();
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E4FBC870];
  }
  return v2;
}

{
  uint64_t v2;
  Swift::Int result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<LNSystemProtocol>);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for LNSystemProtocol();
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          uint64_t v2 = v14;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E4FBC870];
  }
  return v2;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Task<SABaseCommand?, Error>>);
  uint64_t v2 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v3 = v2;
  if (*(void *)(v1 + 16))
  {
    uint64_t v4 = 1 << *(unsigned char *)(v1 + 32);
    uint64_t v5 = (void *)(v1 + 56);
    if (v4 < 64) {
      uint64_t v6 = ~(-1 << v4);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v1 + 56);
    int64_t v8 = (unint64_t)(v4 + 63) >> 6;
    uint64_t v9 = v2 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v14 = v13 | (v11 << 6);
      }
      else
      {
        int64_t v15 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v8) {
          goto LABEL_33;
        }
        unint64_t v16 = v5[v15];
        ++v11;
        if (!v16)
        {
          int64_t v11 = v15 + 1;
          if (v15 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v16 = v5[v11];
          if (!v16)
          {
            int64_t v11 = v15 + 2;
            if (v15 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v16 = v5[v11];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v26 = 1 << *(unsigned char *)(v1 + 32);
                if (v26 > 63) {
                  bzero((void *)(v1 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v5 = -1 << v26;
                }
                *(void *)(v1 + 16) = 0;
                break;
              }
              unint64_t v16 = v5[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v11 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v5[v11];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v1 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      Task.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v9 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v9 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v9 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v3 + 48) + 8 * v12) = v18;
      ++*(void *)(v3 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v0 = v3;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  char *v41;
  uint64_t v42;

  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for AppShortcutGeneralizedInvocation();
  uint64_t v2 = *(void *)(v42 - 8);
  MEMORY[0x1F4188790](v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AppShortcutGeneralizedInvocation>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    unint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    int64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    uint64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    int64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    unint64_t v13 = 0;
    unint64_t v38 = v6;
    unint64_t v14 = v41;
    int64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        int64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        uint64_t v40 = v13;
        uint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        uint64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        unint64_t v21 = v13 + 1;
        if (!v20)
        {
          unint64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            unint64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              char v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  NSObject *v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  unint64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        uint64_t v40 = v21;
        uint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      unint64_t v23 = v4;
      BOOL v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type AppShortcutGeneralizedInvocation and conformance AppShortcutGeneralizedInvocation, MEMORY[0x1E4FA1E98]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      os_log_type_t v27 = -1 << *(unsigned char *)(v6 + 32);
      int v28 = result & ~v27;
      uint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v30 = 0;
        uint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          unint64_t v32 = v29 == v31;
          if (v29 == v31) {
            uint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      unint64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  void *v1 = v6;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        int64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        unint64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        int64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          int64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            int64_t v17 = v30[v11];
            if (!v17)
            {
              uint64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              int64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  int64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        int64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      unint64_t v20 = *v19;
      unint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      char v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      BOOL v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v25 = 0;
        uint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          os_log_type_t v27 = v24 == v26;
          if (v24 == v26) {
            BOOL v24 = 0;
          }
          v25 |= v27;
          int v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      char *v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  void *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  char *v41;
  uint64_t v42;

  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for IntentTopic();
  uint64_t v2 = *(void *)(v42 - 8);
  MEMORY[0x1F4188790](v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<IntentTopic>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    unint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    int64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    uint64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    int64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    unint64_t v13 = 0;
    unint64_t v38 = v6;
    unint64_t v14 = v41;
    int64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        int64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        uint64_t v40 = v13;
        uint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        uint64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        unint64_t v21 = v13 + 1;
        if (!v20)
        {
          unint64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            unint64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              char v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  NSObject *v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  unint64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        uint64_t v40 = v21;
        uint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      unint64_t v23 = v4;
      BOOL v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type IntentTopic and conformance IntentTopic, MEMORY[0x1E4FA1AB0]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      os_log_type_t v27 = -1 << *(unsigned char *)(v6 + 32);
      int v28 = result & ~v27;
      uint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v30 = 0;
        uint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          unint64_t v32 = v29 == v31;
          if (v29 == v31) {
            uint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      unint64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  void *v1 = v6;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  char *v41;
  uint64_t v42;

  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v42 - 8);
  MEMORY[0x1F4188790](v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    unint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    int64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    uint64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    int64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    unint64_t v13 = 0;
    unint64_t v38 = v6;
    unint64_t v14 = v41;
    int64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        int64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        uint64_t v40 = v13;
        uint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        uint64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        unint64_t v21 = v13 + 1;
        if (!v20)
        {
          unint64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            unint64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              char v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  NSObject *v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  unint64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        uint64_t v40 = v21;
        uint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      unint64_t v23 = v4;
      BOOL v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      os_log_type_t v27 = -1 << *(unsigned char *)(v6 + 32);
      int v28 = result & ~v27;
      uint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v30 = 0;
        uint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          unint64_t v32 = v29 == v31;
          if (v29 == v31) {
            uint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      unint64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  void *v1 = v6;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  char *v41;
  uint64_t v42;

  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for UserID();
  uint64_t v2 = *(void *)(v42 - 8);
  MEMORY[0x1F4188790](v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UserID>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    unint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    int64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    uint64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    int64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    unint64_t v13 = 0;
    unint64_t v38 = v6;
    unint64_t v14 = v41;
    int64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        int64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        uint64_t v40 = v13;
        uint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        uint64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        unint64_t v21 = v13 + 1;
        if (!v20)
        {
          unint64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            unint64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              char v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  NSObject *v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  unint64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        uint64_t v40 = v21;
        uint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      unint64_t v23 = v4;
      BOOL v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type UserID and conformance UserID, MEMORY[0x1E4FA26E0]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      os_log_type_t v27 = -1 << *(unsigned char *)(v6 + 32);
      int v28 = result & ~v27;
      uint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v30 = 0;
        uint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          unint64_t v32 = v29 == v31;
          if (v29 == v31) {
            uint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      unint64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  void *v1 = v6;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  char *v41;
  uint64_t v42;

  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for ConversationSessionKey();
  uint64_t v2 = *(void *)(v42 - 8);
  MEMORY[0x1F4188790](v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ConversationSessionKey>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    unint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    int64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    uint64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    int64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    unint64_t v13 = 0;
    unint64_t v38 = v6;
    unint64_t v14 = v41;
    int64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        int64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        uint64_t v40 = v13;
        uint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        uint64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        unint64_t v21 = v13 + 1;
        if (!v20)
        {
          unint64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            unint64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              char v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  NSObject *v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  unint64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        uint64_t v40 = v21;
        uint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      unint64_t v23 = v4;
      BOOL v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type ConversationSessionKey and conformance ConversationSessionKey, MEMORY[0x1E4FA2670]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      os_log_type_t v27 = -1 << *(unsigned char *)(v6 + 32);
      int v28 = result & ~v27;
      uint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v30 = 0;
        uint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          unint64_t v32 = v29 == v31;
          if (v29 == v31) {
            uint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      unint64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  void *v1 = v6;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<RemoteConversationClient>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    os_log_type_t v27 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v14 = v13 | (v11 << 6);
      }
      else
      {
        int64_t v15 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v8) {
          goto LABEL_33;
        }
        unint64_t v16 = v27[v15];
        ++v11;
        if (!v16)
        {
          int64_t v11 = v15 + 1;
          if (v15 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v16 = v27[v11];
          if (!v16)
          {
            int64_t v11 = v15 + 2;
            if (v15 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v16 = v27[v11];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero(v27, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *os_log_type_t v27 = -1 << v26;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v27[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v11 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v27[v11];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v9 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v9 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v9 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  void *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<LNSystemProtocol>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    int v28 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      unint64_t v7 = ~(-1 << v5);
    }
    else {
      unint64_t v7 = -1;
    }
    int64_t v8 = v7 & *(void *)(v2 + 56);
    uint64_t v9 = (unint64_t)(v5 + 63) >> 6;
    unint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    unint64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        int64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        unint64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_33;
        }
        int64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          unint64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_33;
          }
          int64_t v17 = v6[v12];
          if (!v17)
          {
            unint64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_33;
            }
            int64_t v17 = v6[v12];
            if (!v17)
            {
              uint64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v28;
                os_log_type_t v27 = 1 << *(unsigned char *)(v2 + 32);
                if (v27 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v27;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              int64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  unint64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  int64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v12 = v18;
            }
          }
        }
LABEL_23:
        int64_t v8 = (v17 - 1) & v17;
        int64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
      unint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      char v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v23 = 0;
        BOOL v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v25 = v22 == v24;
          if (v22 == v24) {
            char v22 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  void *v1 = v4;
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, void *a2)
{
  NSObject._rawHashValue(seed:)(a2[5]);
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(void *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Task<SABaseCommand?, Error>>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    unint64_t result = (void *)swift_retain();
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    int64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v19 = *v17;
    v19[1] = v18;
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  char v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeSet.copy()(MEMORY[0x1E4FA2670], &demangling cache variable for type metadata for _SetStorage<ConversationSessionKey>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<RemoteConversationClient>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    unint64_t result = (void *)swift_retain();
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = a1(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  int64_t v8 = (char *)&v25 - v7;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v9 = *v2;
  uint64_t v10 = static _SetStorage.copy(original:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_30:
    *uint64_t v4 = v11;
    return result;
  }
  unint64_t result = (void *)(v10 + 56);
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v11 + 32)) + 63) >> 6;
  uint64_t v26 = v4;
  os_log_type_t v27 = (const void *)(v9 + 56);
  if (v11 != v9 || (unint64_t)result >= v9 + 56 + 8 * v13) {
    unint64_t result = memmove(result, v27, 8 * v13);
  }
  int64_t v15 = 0;
  *(void *)(v11 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 56);
  int64_t v28 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      unint64_t v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v20 = v19 | (v15 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v22 >= v28) {
      goto LABEL_28;
    }
    unint64_t v23 = *((void *)v27 + v22);
    ++v15;
    if (!v23)
    {
      int64_t v15 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_28;
      }
      unint64_t v23 = *((void *)v27 + v15);
      if (!v23)
      {
        int64_t v15 = v22 + 2;
        if (v22 + 2 >= v28) {
          goto LABEL_28;
        }
        unint64_t v23 = *((void *)v27 + v15);
        if (!v23) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v18 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v15 << 6);
LABEL_12:
    unint64_t v21 = *(void *)(v6 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(void *)(v9 + 48) + v21, v5);
    unint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(void *)(v11 + 48) + v21, v8, v5);
  }
  int64_t v24 = v22 + 3;
  if (v24 >= v28)
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    uint64_t v4 = v26;
    goto LABEL_30;
  }
  unint64_t v23 = *((void *)v27 + v24);
  if (v23)
  {
    int64_t v15 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v15 >= v28) {
      goto LABEL_28;
    }
    unint64_t v23 = *((void *)v27 + v15);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

id specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<LNSystemProtocol>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Task<SABaseCommand?, Error>>);
  uint64_t v2 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v0 = v3;
    return result;
  }
  uint64_t v4 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v5 = v1 + 56;
  if (v4 < 64) {
    uint64_t v6 = ~(-1 << v4);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v1 + 56);
  int64_t v8 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v9 = v2 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v8) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v5 + 8 * v15);
    ++v11;
    if (!v16)
    {
      int64_t v11 = v15 + 1;
      if (v15 + 1 >= v8) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v5 + 8 * v11);
      if (!v16)
      {
        int64_t v11 = v15 + 2;
        if (v15 + 2 >= v8) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v5 + 8 * v11);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v1 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    Task.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v9 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v9 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v9 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v3 + 48) + 8 * v12) = v18;
    ++*(void *)(v3 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v8)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v5 + 8 * v17);
  if (v16)
  {
    int64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= v8) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v5 + 8 * v11);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (**v14)(unint64_t, char *, uint64_t);
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AppShortcutGeneralizedInvocation();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AppShortcutGeneralizedInvocation>);
  unint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  int64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    int64_t v11 = ~(-1 << v9);
  }
  else {
    int64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  uint64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  unint64_t v13 = v7 + 56;
  unint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  unint64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      uint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    unint64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      unint64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        unint64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    uint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    unint64_t v23 = v6;
    BOOL v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type AppShortcutGeneralizedInvocation and conformance AppShortcutGeneralizedInvocation, MEMORY[0x1E4FA1E98]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    os_log_type_t v27 = result & ~v26;
    int64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      int64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v31 = v28 == v30;
        if (v28 == v30) {
          int64_t v28 = 0;
        }
        v29 |= v31;
        unint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      int64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  char v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    unint64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    unint64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    unint64_t v7 = ~(-1 << v5);
  }
  else {
    unint64_t v7 = -1;
  }
  int64_t v8 = v7 & *(void *)(v2 + 56);
  uint64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      int64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    unint64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    int64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      int64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        int64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    int64_t v8 = (v17 - 1) & v17;
    int64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v20 = *v19;
    unint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    char v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    BOOL v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v25 = 0;
      uint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        os_log_type_t v27 = v24 == v26;
        if (v24 == v26) {
          BOOL v24 = 0;
        }
        v25 |= v27;
        int64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    char *v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  uint64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  int64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    int64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (**v14)(unint64_t, char *, uint64_t);
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for IntentTopic();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<IntentTopic>);
  unint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  int64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    int64_t v11 = ~(-1 << v9);
  }
  else {
    int64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  uint64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  unint64_t v13 = v7 + 56;
  unint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  unint64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      uint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    unint64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      unint64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        unint64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    uint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    unint64_t v23 = v6;
    BOOL v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type IntentTopic and conformance IntentTopic, MEMORY[0x1E4FA1AB0]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    os_log_type_t v27 = result & ~v26;
    int64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      int64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v31 = v28 == v30;
        if (v28 == v30) {
          int64_t v28 = 0;
        }
        v29 |= v31;
        unint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      int64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  char v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    unint64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    unint64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (**v14)(unint64_t, char *, uint64_t);
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID>);
  unint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  int64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    int64_t v11 = ~(-1 << v9);
  }
  else {
    int64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  uint64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  unint64_t v13 = v7 + 56;
  unint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  unint64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      uint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    unint64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      unint64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        unint64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    uint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    unint64_t v23 = v6;
    BOOL v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    os_log_type_t v27 = result & ~v26;
    int64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      int64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v31 = v28 == v30;
        if (v28 == v30) {
          int64_t v28 = 0;
        }
        v29 |= v31;
        unint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      int64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  char v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    unint64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    unint64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (**v14)(unint64_t, char *, uint64_t);
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UserID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UserID>);
  unint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  int64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    int64_t v11 = ~(-1 << v9);
  }
  else {
    int64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  uint64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  unint64_t v13 = v7 + 56;
  unint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  unint64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      uint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    unint64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      unint64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        unint64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    uint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    unint64_t v23 = v6;
    BOOL v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type UserID and conformance UserID, MEMORY[0x1E4FA26E0]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    os_log_type_t v27 = result & ~v26;
    int64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      int64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v31 = v28 == v30;
        if (v28 == v30) {
          int64_t v28 = 0;
        }
        v29 |= v31;
        unint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      int64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  char v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    unint64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    unint64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (**v14)(unint64_t, char *, uint64_t);
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ConversationSessionKey();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ConversationSessionKey>);
  unint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  int64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    int64_t v11 = ~(-1 << v9);
  }
  else {
    int64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  uint64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  unint64_t v13 = v7 + 56;
  unint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  unint64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      uint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    unint64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      unint64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        unint64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    uint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    unint64_t v23 = v6;
    BOOL v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type ConversationSessionKey and conformance ConversationSessionKey, MEMORY[0x1E4FA2670]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    os_log_type_t v27 = result & ~v26;
    int64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      int64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v31 = v28 == v30;
        if (v28 == v30) {
          int64_t v28 = 0;
        }
        v29 |= v31;
        unint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      int64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  char v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    unint64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    unint64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  int64_t v26;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<RemoteConversationClient>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    unint64_t v7 = ~(-1 << v5);
  }
  else {
    unint64_t v7 = -1;
  }
  int64_t v8 = v7 & *(void *)(v2 + 56);
  uint64_t v26 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v26) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v11;
    if (!v16)
    {
      int64_t v11 = v15 + 1;
      if (v15 + 1 >= v26) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v11);
      if (!v16)
      {
        int64_t v11 = v15 + 2;
        if (v15 + 2 >= v26) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v11);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    int64_t v8 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    swift_retain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v9 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v9 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v9 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v26)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v11);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::Int v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<LNSystemProtocol>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  int64_t v28 = v0;
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    unint64_t v7 = ~(-1 << v5);
  }
  else {
    unint64_t v7 = -1;
  }
  int64_t v8 = v7 & *(void *)(v2 + 56);
  uint64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  unint64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      int64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    unint64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9) {
      goto LABEL_33;
    }
    int64_t v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      unint64_t v12 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_33;
      }
      int64_t v17 = *(void *)(v6 + 8 * v12);
      if (!v17)
      {
        unint64_t v12 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_33;
        }
        int64_t v17 = *(void *)(v6 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    int64_t v8 = (v17 - 1) & v17;
    int64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    uint64_t v19 = *(void *)(v4 + 40);
    unint64_t v20 = *(id *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t result = NSObject._rawHashValue(seed:)(v19);
    unint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
    char v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      BOOL v24 = 0;
      uint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        os_log_type_t v27 = *(void *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(void *)(*(void *)(v4 + 48) + 8 * v13) = v20;
    ++*(void *)(v4 + 16);
  }
  uint64_t v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v28;
    goto LABEL_35;
  }
  int64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    unint64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    unint64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    int64_t v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for AppShortcutGeneralizedInvocation();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type AppShortcutGeneralizedInvocation and conformance AppShortcutGeneralizedInvocation, MEMORY[0x1E4FA1E98]);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    int64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    unint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    unint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    int64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      unint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type AppShortcutGeneralizedInvocation and conformance AppShortcutGeneralizedInvocation, MEMORY[0x1E4FA1E98]);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      char v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      unint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    BOOL v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(void, void, void);
  uint64_t v15;
  void (*v16)(void, void, void);
  void (**v17)(char *, uint64_t);
  uint64_t v18;
  unint64_t v19;
  void (*v20)(void, void, void);
  char v21;
  void (*v22)(char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  char *v24;
  void v26[2];
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;

  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for IntentTopic();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type IntentTopic and conformance IntentTopic, MEMORY[0x1E4FA1AB0]);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    int64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    unint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    unint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    int64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      unint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type IntentTopic and conformance IntentTopic, MEMORY[0x1E4FA1AB0]);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      char v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      unint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    BOOL v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(void, void, void);
  uint64_t v15;
  void (*v16)(void, void, void);
  void (**v17)(char *, uint64_t);
  uint64_t v18;
  unint64_t v19;
  void (*v20)(void, void, void);
  char v21;
  void (*v22)(char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  char *v24;
  void v26[2];
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;

  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    int64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    unint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    unint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    int64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      unint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      lazy protocol witness table accessor for type Input and conformance Input((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      char v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      unint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    BOOL v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(void, void, void);
  uint64_t v15;
  void (*v16)(void, void, void);
  void (**v17)(char *, uint64_t);
  uint64_t v18;
  unint64_t v19;
  void (*v20)(void, void, void);
  char v21;
  void (*v22)(char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  char *v24;
  void v26[2];
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;

  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UserID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type UserID and conformance UserID, MEMORY[0x1E4FA26E0]);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    int64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    unint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    unint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    int64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      unint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type UserID and conformance UserID, MEMORY[0x1E4FA26E0]);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      char v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      unint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    BOOL v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(void, void, void);
  uint64_t v15;
  void (*v16)(void, void, void);
  void (**v17)(char *, uint64_t);
  uint64_t v18;
  unint64_t v19;
  void (*v20)(void, void, void);
  char v21;
  void (*v22)(char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  char *v24;
  void v26[2];
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;

  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for ConversationSessionKey();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type ConversationSessionKey and conformance ConversationSessionKey, MEMORY[0x1E4FA2670]);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    int64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    unint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    unint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    int64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      unint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      lazy protocol witness table accessor for type Input and conformance Input((unint64_t *)&lazy protocol witness table cache variable for type ConversationSessionKey and conformance ConversationSessionKey, MEMORY[0x1E4FA2670]);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      char v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      unint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    BOOL v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

unint64_t lazy protocol witness table accessor for type AffinityScoreError and conformance AffinityScoreError()
{
  unint64_t result = lazy protocol witness table cache variable for type AffinityScoreError and conformance AffinityScoreError;
  if (!lazy protocol witness table cache variable for type AffinityScoreError and conformance AffinityScoreError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AffinityScoreError and conformance AffinityScoreError);
  }
  return result;
}

uint64_t partial apply for closure #1 in CombiningAffinityScorer.computeScore(for:loopCheck:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in CombiningAffinityScorer.computeScore(for:loopCheck:)(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_1B9D7D4F0()
{
  return MEMORY[0x1F4186498](v0, 17, 7);
}

uint64_t partial apply for closure #1 in static CombiningAffinityScorer.max(children:requireAll:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  return closure #1 in static CombiningAffinityScorer.max(children:requireAll:)(a1, a2 & 1, a3, a4 & 1, *(void *)(v4 + 16), *(unsigned char *)(v4 + 24), *(void *)(v4 + 32));
}

uint64_t type metadata accessor for CombiningAffinityScorer(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for CombiningAffinityScorer);
}

uint64_t partial apply for closure #1 in static CombiningAffinityScorer.min(children:requireAll:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  return closure #1 in static CombiningAffinityScorer.min(children:requireAll:)(a1, a2 & 1, a3, a4 & 1, *(void *)(v4 + 16), *(unsigned char *)(v4 + 24), *(void *)(v4 + 32));
}

uint64_t partial apply for closure #1 in static CombiningAffinityScorer.sum(children:requireAll:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  return closure #1 in static CombiningAffinityScorer.sum(children:requireAll:)(a1, a2 & 1, a3, a4 & 1, *(void *)(v4 + 16), *(unsigned char *)(v4 + 24), *(void *)(v4 + 32));
}

uint64_t sub_1B9D7D574()
{
  return MEMORY[0x1F4186498](v0, 25, 7);
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for RemoteConversationClient();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v25;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v18 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    Swift::Int v26 = v18;
    if (*(void *)(v18 + 24) <= *(void *)(v18 + 16))
    {
      swift_retain();
      specialized _NativeSet.resize(capacity:)();
      uint64_t v19 = v26;
    }
    else
    {
      uint64_t v19 = v18;
      swift_retain();
    }
    specialized _NativeSet._unsafeInsertNew(_:)(a2, v19);
    *uint64_t v3 = v19;
  }
  else
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v10 = Hasher._finalize()();
    uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v12 = v10 & ~v11;
    if ((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
    {
      uint64_t v13 = *(void *)(v6 + 48);
      uint64_t v14 = *(void *)(v13 + 8 * v12);
      uint64_t v15 = *(void *)(a2 + 112);
      uint64_t v16 = *(void *)(a2 + 120);
      BOOL v17 = *(void *)(v14 + 112) == v15 && *(void *)(v14 + 120) == v16;
      if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_13:
        swift_release();
        swift_bridgeObjectRelease();
        *a1 = *(void *)(*(void *)(*v3 + 48) + 8 * v12);
        swift_retain();
        return 0;
      }
      uint64_t v20 = ~v11;
      while (1)
      {
        unint64_t v12 = (v12 + 1) & v20;
        if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
          break;
        }
        uint64_t v21 = *(void *)(v13 + 8 * v12);
        BOOL v22 = *(void *)(v21 + 112) == v15 && *(void *)(v21 + 120) == v16;
        if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_13;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v27 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    Swift::Int v24 = swift_retain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v24, v12, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v27;
  }
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for LNSystemProtocol();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v27;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    int64_t v28 = (void *)v22;
    if (*(void *)(v22 + 24) <= *(void *)(v22 + 16))
    {
      id v26 = v8;
      specialized _NativeSet.resize(capacity:)();
      unint64_t v23 = v28;
    }
    else
    {
      unint64_t v23 = (void *)v22;
      id v24 = v8;
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v8, v23);
    *uint64_t v3 = (uint64_t)v23;
  }
  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      type metadata accessor for LNSystemProtocol();
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        id v21 = v20;
        return 0;
      }
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v29 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    id v8 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v29;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for AppShortcutGeneralizedInvocation();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  int64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()(MEMORY[0x1E4FA1E98], &demangling cache variable for type metadata for _SetStorage<AppShortcutGeneralizedInvocation>);
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v12 = *v3;
  lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type AppShortcutGeneralizedInvocation and conformance AppShortcutGeneralizedInvocation, MEMORY[0x1E4FA1E98]);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    char v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    uint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type AppShortcutGeneralizedInvocation and conformance AppShortcutGeneralizedInvocation, MEMORY[0x1E4FA1E98]);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for IntentTopic();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  int64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()(MEMORY[0x1E4FA1AB0], &demangling cache variable for type metadata for _SetStorage<IntentTopic>);
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v12 = *v3;
  lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type IntentTopic and conformance IntentTopic, MEMORY[0x1E4FA1AB0]);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    char v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    uint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type IntentTopic and conformance IntentTopic, MEMORY[0x1E4FA1AB0]);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  int64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()(MEMORY[0x1E4F27990], &demangling cache variable for type metadata for _SetStorage<UUID>);
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v12 = *v3;
  lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    char v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    uint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      lazy protocol witness table accessor for type Input and conformance Input((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for UserID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  int64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()(MEMORY[0x1E4FA26E0], &demangling cache variable for type metadata for _SetStorage<UserID>);
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v12 = *v3;
  lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type UserID and conformance UserID, MEMORY[0x1E4FA26E0]);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    char v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    uint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type UserID and conformance UserID, MEMORY[0x1E4FA26E0]);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for ConversationSessionKey();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  int64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()(MEMORY[0x1E4FA2670], &demangling cache variable for type metadata for _SetStorage<ConversationSessionKey>);
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v12 = *v3;
  lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type ConversationSessionKey and conformance ConversationSessionKey, MEMORY[0x1E4FA2670]);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    char v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    uint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      lazy protocol witness table accessor for type Input and conformance Input((unint64_t *)&lazy protocol witness table cache variable for type ConversationSessionKey and conformance ConversationSessionKey, MEMORY[0x1E4FA2670]);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  char v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *char v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, unint64_t a2, char a3)
{
  Swift::Int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_22;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  uint64_t v10 = v8 + 56;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    type metadata accessor for RemoteConversationClient();
    uint64_t v11 = *(void *)(v8 + 48);
    uint64_t v12 = *(void *)(v11 + 8 * a2);
    uint64_t v13 = *(void *)(v5 + 112);
    uint64_t v14 = *(void *)(v5 + 120);
    BOOL v15 = *(void *)(v12 + 112) == v13 && *(void *)(v12 + 120) == v14;
    if (v15 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v16 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v16;
        if (((*(void *)(v10 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        uint64_t v17 = *(void *)(v11 + 8 * a2);
        if (*(void *)(v17 + 112) != v13 || *(void *)(v17 + 120) != v14)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v19 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v19 + 48) + 8 * a2) = v5;
  uint64_t v20 = *(void *)(v19 + 16);
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21) {
    __break(1u);
  }
  else {
    *(void *)(v19 + 16) = v22;
  }
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  Swift::Int v9 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = v9 & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    type metadata accessor for LNSystemProtocol();
    id v11 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
    char v12 = static NSObject.== infix(_:_:)();

    if (v12)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v14 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
        char v15 = static NSObject.== infix(_:_:)();

        if (v15) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = a1;
  uint64_t v17 = *(void *)(v16 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v19;
  }
}

unint64_t specialized AffinityValueComparison.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AffinityValueComparison.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 8) {
    return 8;
  }
  else {
    return v3;
  }
}

uint64_t type metadata accessor for EnvironmentValueFetcher()
{
  return self;
}

uint64_t partial apply for closure #1 in static AffinityScore.loadAffinityScorer(from:defaultVersion:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in static AffinityScore.loadAffinityScorer(from:defaultVersion:)(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t instantiation function for generic protocol witness table for FixedAffinityScorer(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type FixedAffinityScorer and conformance FixedAffinityScorer, (void (*)(uint64_t))type metadata accessor for FixedAffinityScorer);
  uint64_t result = lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type FixedAffinityScorer and conformance FixedAffinityScorer, (void (*)(uint64_t))type metadata accessor for FixedAffinityScorer);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for FixedAffinityScorer(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for FixedAffinityScorer);
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in FixedAffinityScorer()
{
  return lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
}

uint64_t instantiation function for generic protocol witness table for CachingAffinityScorer(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type CachingAffinityScorer and conformance CachingAffinityScorer, (void (*)(uint64_t))type metadata accessor for CachingAffinityScorer);
  uint64_t result = lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type CachingAffinityScorer and conformance CachingAffinityScorer, (void (*)(uint64_t))type metadata accessor for CachingAffinityScorer);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for CachingAffinityScorer(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for CachingAffinityScorer);
}

unint64_t lazy protocol witness table accessor for type AffinityValueComparison and conformance AffinityValueComparison()
{
  unint64_t result = lazy protocol witness table cache variable for type AffinityValueComparison and conformance AffinityValueComparison;
  if (!lazy protocol witness table cache variable for type AffinityValueComparison and conformance AffinityValueComparison)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AffinityValueComparison and conformance AffinityValueComparison);
  }
  return result;
}

uint64_t dispatch thunk of AffinityScorer.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of AffinityScorer.score(for:loopCheck:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t getEnumTagSinglePayload for AffinityScoreError(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AffinityScoreError(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t getEnumTag for AffinityScoreError(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for AffinityScoreError(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AffinityScoreError()
{
  return &type metadata for AffinityScoreError;
}

uint64_t ObjC metadata update function for FixedAffinityScorer()
{
  return type metadata accessor for FixedAffinityScorer(0);
}

uint64_t type metadata completion function for FixedAffinityScorer()
{
  return type metadata completion function for FixedAffinityScorer();
}

{
  uint64_t result;
  unint64_t v1;

  unint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    unint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for FixedAffinityScorer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for FixedAffinityScorer);
}

uint64_t dispatch thunk of FixedAffinityScorer.__allocating_init(score:)(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))(v2 + 96))(a1, a2 & 1);
}

uint64_t dispatch thunk of FixedAffinityScorer.score(for:loopCheck:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t ObjC metadata update function for CachingAffinityScorer()
{
  return type metadata accessor for CachingAffinityScorer(0);
}

uint64_t type metadata completion function for CachingAffinityScorer()
{
  return type metadata completion function for FixedAffinityScorer();
}

uint64_t method lookup function for CachingAffinityScorer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CachingAffinityScorer);
}

uint64_t dispatch thunk of CachingAffinityScorer.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of CachingAffinityScorer.score(for:loopCheck:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of CachingAffinityScorer.computeScore(for:loopCheck:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t ObjC metadata update function for CombiningAffinityScorer()
{
  return type metadata accessor for CombiningAffinityScorer(0);
}

uint64_t type metadata completion function for CombiningAffinityScorer()
{
  return swift_updateClassMetadata2();
}

uint64_t method lookup function for CombiningAffinityScorer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CombiningAffinityScorer);
}

uint64_t dispatch thunk of CombiningAffinityScorer.__allocating_init(children:reducer:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t ObjC metadata update function for ComparingAffinityScorer()
{
  return type metadata accessor for ComparingAffinityScorer(0);
}

uint64_t type metadata accessor for ComparingAffinityScorer(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for ComparingAffinityScorer);
}

uint64_t type metadata completion function for ComparingAffinityScorer()
{
  return swift_updateClassMetadata2();
}

uint64_t method lookup function for ComparingAffinityScorer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ComparingAffinityScorer);
}

uint64_t dispatch thunk of ComparingAffinityScorer.__allocating_init(score:comparison:_:_:)(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))(v2 + 176))(a1, a2 & 1);
}

uint64_t dispatch thunk of ComparingAffinityScorer.debugDescription.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t getEnumTagSinglePayload for AffinityValueComparison(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AffinityValueComparison(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9D7FB8CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for AffinityValueComparison(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for AffinityValueComparison()
{
  return &type metadata for AffinityValueComparison;
}

uint64_t dispatch thunk of AffinityValueFetcher.fetchValue(input:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t type metadata accessor for FixedValueFetcher()
{
  return self;
}

uint64_t method lookup function for FixedValueFetcher(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for FixedValueFetcher);
}

uint64_t dispatch thunk of FixedValueFetcher.__allocating_init(value:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of FixedValueFetcher.fetchValue(input:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t method lookup function for EnvironmentValueFetcher(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for EnvironmentValueFetcher);
}

uint64_t dispatch thunk of EnvironmentValueFetcher.__allocating_init(plist:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of EnvironmentValueFetcher.__allocating_init(provider:valueKey:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of EnvironmentValueFetcher.fetchValue(input:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of EnvironmentValueFetcher.debugDescription.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

ValueMetadata *type metadata accessor for AffinityScore()
{
  return &type metadata for AffinityScore;
}

uint64_t __swift_memcpy10_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for CachingAffinityScorer.ScoreState(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 10)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CachingAffinityScorer.ScoreState(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = 0;
    *(_WORD *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 10) = v3;
  return result;
}

uint64_t getEnumTag for CachingAffinityScorer.ScoreState(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for CachingAffinityScorer.ScoreState(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)unint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    *(unsigned char *)(result + 9) = 1;
  }
  else
  {
    *(unsigned char *)(result + 9) = 0;
  }
  return result;
}

void *type metadata accessor for CachingAffinityScorer.ScoreState()
{
  return &unk_1F13777F8;
}

uint64_t sub_1B9D7FDE0()
{
  return MEMORY[0x1F4186498](v0, 25, 7);
}

uint64_t partial apply for closure #1 in static CombiningAffinityScorer.invert(child:fallbackValue:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    return *(void *)(v4 + 16);
  }
  else {
    return 0;
  }
}

uint64_t objectdestroy_3Tm()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t closure #1 in static AffinityScore.loadAffinityScorer(from:defaultVersion:)partial apply()
{
  return partial apply for closure #1 in static AffinityScore.loadAffinityScorer(from:defaultVersion:)();
}

uint64_t static AffinityScorerUtils.topCloseableEntity(candidates:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = type metadata accessor for RREntity();
  uint64_t v4 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  unsigned int v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for RRCandidate();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[0] = a1;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(v24);
  id v11 = v24[0];
  uint64_t v12 = v24[0][2];
  if (v12)
  {
    uint64_t v18 = a2;
    unint64_t v13 = 0;
    BOOL v21 = (char *)v24[0] + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v20 = v8 + 16;
    id v14 = (void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v19 = MEMORY[0x1E4FBC840] + 8;
    while (v13 < v11[2])
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, &v21[*(void *)(v8 + 72) * v13], v7);
      RRCandidate.entity.getter();
      RREntity.usoEntity.getter();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v22);
      static UsoEntity_CodeGenConverter.convert(entity:)();
      swift_release();
      if (v24[3])
      {
        outlined init with copy of Any?((uint64_t)v24, (uint64_t)v23);
        type metadata accessor for UsoEntity_common_App();
        if (swift_dynamicCast()
          || (type metadata accessor for UsoEntity_common_Window(), swift_dynamicCast()))
        {
          swift_release();
          swift_release();
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for Any?);
          a2 = v18;
          (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v18, v10, v7);
          uint64_t v15 = 0;
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a2, v15, 1, v7);
        }
        type metadata accessor for UsoEntity_common_AppEntity();
        if (swift_dynamicCast()
          || (type metadata accessor for UsoEntity_common_UserEntity(), swift_dynamicCast()))
        {
          swift_retain();
          dispatch thunk of CodeGenBase.usoIdentifiers.getter();
          swift_bridgeObjectRelease();
          swift_release_n();
        }
        (*v14)(v10, v7);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
      }
      else
      {
        (*v14)(v10, v7);
      }
      ++v13;
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v12 == v13)
      {
        swift_release();
        uint64_t v15 = 1;
        a2 = v18;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a2, v15, 1, v7);
      }
    }
    __break(1u);
    uint64_t result = swift_release();
    __break(1u);
  }
  else
  {
    swift_release();
    uint64_t v15 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a2, v15, 1, v7);
  }
  return result;
}

uint64_t UsoIdentifier.isApplicationRepresentable.getter()
{
  return 0;
}

uint64_t UsoIdentifier.isEnvironmentRepresentable.getter()
{
  return 0;
}

uint64_t UsoIdentifier.hasEnvironmentNamespace.getter()
{
  return 0;
}

uint64_t static AffinityScorerUtils.topOpenableEntity(candidates:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = type metadata accessor for RREntity();
  uint64_t v4 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  unsigned int v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for RRCandidate();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[0] = a1;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(v24);
  id v11 = v24[0];
  uint64_t v12 = v24[0][2];
  if (v12)
  {
    uint64_t v18 = a2;
    unint64_t v13 = 0;
    BOOL v21 = (char *)v24[0] + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v20 = v8 + 16;
    id v14 = (void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v19 = MEMORY[0x1E4FBC840] + 8;
    while (v13 < v11[2])
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, &v21[*(void *)(v8 + 72) * v13], v7);
      RRCandidate.entity.getter();
      RREntity.usoEntity.getter();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v22);
      static UsoEntity_CodeGenConverter.convert(entity:)();
      swift_release();
      if (v24[3])
      {
        outlined init with copy of Any?((uint64_t)v24, (uint64_t)v23);
        type metadata accessor for UsoEntity_common_App();
        if (swift_dynamicCast())
        {
          swift_release();
          if ((RRCandidate.isOnScreen.getter() & 1) == 0)
          {
            swift_release();
            uint64_t v15 = v18;
            (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v18, v10, v7);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v15, 0, 1, v7);
            __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
            return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for Any?);
          }
        }
        else
        {
          type metadata accessor for UsoEntity_common_AppEntity();
          if (swift_dynamicCast())
          {
            swift_retain();
            dispatch thunk of CodeGenBase.usoIdentifiers.getter();
            swift_bridgeObjectRelease();
            swift_release_n();
          }
        }
        (*v14)(v10, v7);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
      }
      else
      {
        (*v14)(v10, v7);
      }
      ++v13;
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v12 == v13)
      {
        swift_release();
        a2 = v18;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a2, 1, 1, v7);
      }
    }
    __break(1u);
    uint64_t result = swift_release();
    __break(1u);
  }
  else
  {
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a2, 1, 1, v7);
  }
  return result;
}

Swift::Int specialized MutableCollection<>.sort(by:)(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for RRCandidate() - 8);
  char v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    char v3 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  *a1 = v3;
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  Swift::Int result;
  void v6[2];

  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler))
                 - 8);
  char v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    char v3 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  *a1 = v3;
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for RRCandidate();
  uint64_t v143 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  unint64_t v140 = (char *)&v134 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v155 = (char *)&v134 - v8;
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v150 = (char *)&v134 - v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v151 = (char *)&v134 - v11;
  Swift::Int v12 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v12);
  if (result >= v12)
  {
    if (v12 < 0) {
      goto LABEL_140;
    }
    if (v12) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v12, 1, a1);
    }
    return result;
  }
  if (v12 >= 0) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = v12 + 1;
  }
  if (v12 < -1) {
    goto LABEL_148;
  }
  Swift::Int v136 = result;
  if (v12 < 2)
  {
    uint64_t v19 = (char *)MEMORY[0x1E4FBC860];
    unint64_t v142 = MEMORY[0x1E4FBC860]
         + ((*(unsigned __int8 *)(v143 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v143 + 80));
    uint64_t v135 = MEMORY[0x1E4FBC860];
    if (v12 != 1)
    {
      unint64_t v21 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_106:
      uint64_t v127 = v143;
      if (v21 >= 2)
      {
        uint64_t v128 = *a1;
        do
        {
          unint64_t v129 = v21 - 2;
          if (v21 < 2) {
            goto LABEL_135;
          }
          if (!v128) {
            goto LABEL_147;
          }
          uint64_t v130 = *(void *)&v19[16 * v129 + 32];
          uint64_t v131 = *(void *)&v19[16 * v21 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)(v128 + *(void *)(v127 + 72) * v130, v128 + *(void *)(v127 + 72) * *(void *)&v19[16 * v21 + 16], v128 + *(void *)(v127 + 72) * v131, v142);
          if (v2) {
            break;
          }
          if (v131 < v130) {
            goto LABEL_136;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v19);
          }
          if (v129 >= *((void *)v19 + 2)) {
            goto LABEL_137;
          }
          uint64_t v132 = &v19[16 * v129 + 32];
          *(void *)uint64_t v132 = v130;
          *((void *)v132 + 1) = v131;
          unint64_t v133 = *((void *)v19 + 2);
          if (v21 > v133) {
            goto LABEL_138;
          }
          memmove(&v19[16 * v21 + 16], &v19[16 * v21 + 32], 16 * (v133 - v21));
          *((void *)v19 + 2) = v133 - 1;
          unint64_t v21 = v133 - 1;
        }
        while (v133 > 2);
      }
LABEL_117:
      swift_bridgeObjectRelease();
      *(void *)(v135 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v17 = v143;
  }
  else
  {
    uint64_t v15 = v14 >> 1;
    uint64_t v16 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v16 + 16) = v15;
    uint64_t v17 = v143;
    unint64_t v18 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    uint64_t v135 = v16;
    unint64_t v142 = v16 + v18;
  }
  uint64_t v20 = 0;
  unint64_t v148 = (void (**)(char *, uint64_t))(v17 + 8);
  uint64_t v149 = v17 + 16;
  uint64_t v158 = (uint64_t *)(v17 + 32);
  uint64_t v19 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v153 = a1;
  uint64_t v154 = v4;
  while (1)
  {
    uint64_t v22 = v20 + 1;
    uint64_t v141 = v20;
    if (v20 + 1 >= v12)
    {
      uint64_t v35 = v20;
      Swift::Int v37 = v20 + 1;
    }
    else
    {
      Swift::Int v23 = *a1;
      uint64_t v157 = *(void *)(v143 + 72);
      uint64_t v24 = v157;
      Swift::Int v146 = v23;
      uint64_t v25 = *(void (**)(char *, Swift::Int, uint64_t))(v143 + 16);
      v25(v151, v23 + v157 * v22, v4);
      Swift::Int v156 = v12;
      BOOL v26 = v150;
      v25(v150, v23 + v24 * v141, v4);
      uint64_t v27 = v151;
      RRCandidate.score.getter();
      double v29 = v28;
      RRCandidate.score.getter();
      double v31 = v30;
      uint64_t v32 = *(void (**)(char *, uint64_t))(v143 + 8);
      uint64_t v33 = v26;
      Swift::Int v12 = v156;
      v32(v33, v4);
      uint64_t v34 = v27;
      uint64_t v35 = v141;
      v32(v34, v4);
      uint64_t v36 = v157;
      Swift::Int v37 = v35 + 2;
      if (v35 + 2 < v12)
      {
        uint64_t v139 = v2;
        os_log_type_t v137 = v19;
        uint64_t v152 = v157 * v22;
        Swift::Int v38 = v146;
        uint64_t v147 = v157 * v37;
        while (1)
        {
          Swift::Int v39 = v37;
          uint64_t v40 = v151;
          v25(v151, v38 + v147, v4);
          uint64_t v41 = v150;
          v25(v150, v38 + v152, v4);
          RRCandidate.score.getter();
          double v43 = v42;
          RRCandidate.score.getter();
          BOOL v45 = v44 >= v43;
          v32(v41, v4);
          v32(v40, v4);
          if (v31 < v29 == v45) {
            break;
          }
          Swift::Int v37 = v39 + 1;
          uint64_t v36 = v157;
          v38 += v157;
          if (v156 == v39 + 1)
          {
            Swift::Int v12 = v156;
            Swift::Int v37 = v156;
            uint64_t v19 = v137;
            uint64_t v2 = v139;
            uint64_t v35 = v141;
            goto LABEL_24;
          }
        }
        uint64_t v19 = v137;
        Swift::Int v37 = v39;
        uint64_t v2 = v139;
        uint64_t v35 = v141;
        Swift::Int v12 = v156;
        uint64_t v36 = v157;
      }
LABEL_24:
      a1 = v153;
      if (v31 < v29)
      {
        if (v37 < v35) {
          goto LABEL_141;
        }
        if (v35 < v37)
        {
          os_log_type_t v137 = v19;
          uint64_t v46 = 0;
          uint64_t v47 = v36 * (v37 - 1);
          Swift::Int v48 = v37 * v36;
          uint64_t v49 = v35 * v36;
          do
          {
            if (v35 != v37 + v46 - 1)
            {
              uint64_t v139 = v2;
              Swift::Int v50 = v146;
              if (!v146) {
                goto LABEL_146;
              }
              unint64_t v51 = v146 + v49;
              Swift::Int v52 = v146 + v47;
              uint64_t v152 = *v158;
              ((void (*)(char *, Swift::Int, uint64_t))v152)(v140, v146 + v49, v154);
              if (v49 < v47 || v51 >= v50 + v48)
              {
                uint64_t v4 = v154;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                uint64_t v4 = v154;
                if (v49 != v47) {
                  swift_arrayInitWithTakeBackToFront();
                }
              }
              ((void (*)(Swift::Int, char *, uint64_t))v152)(v52, v140, v4);
              a1 = v153;
              uint64_t v2 = v139;
              uint64_t v36 = v157;
            }
            ++v35;
            --v46;
            v47 -= v36;
            v48 -= v36;
            v49 += v36;
          }
          while (v35 < v37 + v46);
          uint64_t v19 = v137;
          uint64_t v35 = v141;
          Swift::Int v12 = v156;
        }
      }
    }
    if (v37 < v12)
    {
      if (__OFSUB__(v37, v35)) {
        goto LABEL_139;
      }
      if (v37 - v35 < v136) {
        break;
      }
    }
LABEL_56:
    if (v37 < v35) {
      goto LABEL_134;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v152 = v37;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v19 + 2) + 1, 1, v19);
    }
    unint64_t v76 = *((void *)v19 + 2);
    unint64_t v75 = *((void *)v19 + 3);
    unint64_t v21 = v76 + 1;
    if (v76 >= v75 >> 1) {
      uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v75 > 1), v76 + 1, 1, v19);
    }
    *((void *)v19 + 2) = v21;
    uint64_t v77 = v19 + 32;
    uint64_t v78 = &v19[16 * v76 + 32];
    uint64_t v79 = v152;
    *(void *)uint64_t v78 = v35;
    *((void *)v78 + 1) = v79;
    if (v76)
    {
      a1 = v153;
      while (1)
      {
        unint64_t v80 = v21 - 1;
        if (v21 >= 4)
        {
          char v85 = &v77[16 * v21];
          uint64_t v86 = *((void *)v85 - 8);
          uint64_t v87 = *((void *)v85 - 7);
          BOOL v91 = __OFSUB__(v87, v86);
          uint64_t v88 = v87 - v86;
          if (v91) {
            goto LABEL_123;
          }
          uint64_t v90 = *((void *)v85 - 6);
          uint64_t v89 = *((void *)v85 - 5);
          BOOL v91 = __OFSUB__(v89, v90);
          uint64_t v83 = v89 - v90;
          char v84 = v91;
          if (v91) {
            goto LABEL_124;
          }
          unint64_t v92 = v21 - 2;
          uint64_t v93 = &v77[16 * v21 - 32];
          uint64_t v95 = *(void *)v93;
          uint64_t v94 = *((void *)v93 + 1);
          BOOL v91 = __OFSUB__(v94, v95);
          uint64_t v96 = v94 - v95;
          if (v91) {
            goto LABEL_126;
          }
          BOOL v91 = __OFADD__(v83, v96);
          uint64_t v97 = v83 + v96;
          if (v91) {
            goto LABEL_129;
          }
          if (v97 >= v88)
          {
            uint64_t v115 = &v77[16 * v80];
            uint64_t v117 = *(void *)v115;
            uint64_t v116 = *((void *)v115 + 1);
            BOOL v91 = __OFSUB__(v116, v117);
            uint64_t v118 = v116 - v117;
            if (v91) {
              goto LABEL_133;
            }
            BOOL v108 = v83 < v118;
            goto LABEL_94;
          }
        }
        else
        {
          if (v21 != 3)
          {
            uint64_t v109 = *((void *)v19 + 4);
            uint64_t v110 = *((void *)v19 + 5);
            BOOL v91 = __OFSUB__(v110, v109);
            uint64_t v102 = v110 - v109;
            char v103 = v91;
            goto LABEL_88;
          }
          uint64_t v82 = *((void *)v19 + 4);
          uint64_t v81 = *((void *)v19 + 5);
          BOOL v91 = __OFSUB__(v81, v82);
          uint64_t v83 = v81 - v82;
          char v84 = v91;
        }
        if (v84) {
          goto LABEL_125;
        }
        unint64_t v92 = v21 - 2;
        uint64_t v98 = &v77[16 * v21 - 32];
        uint64_t v100 = *(void *)v98;
        uint64_t v99 = *((void *)v98 + 1);
        BOOL v101 = __OFSUB__(v99, v100);
        uint64_t v102 = v99 - v100;
        char v103 = v101;
        if (v101) {
          goto LABEL_128;
        }
        uint64_t v104 = &v77[16 * v80];
        uint64_t v106 = *(void *)v104;
        uint64_t v105 = *((void *)v104 + 1);
        BOOL v91 = __OFSUB__(v105, v106);
        uint64_t v107 = v105 - v106;
        if (v91) {
          goto LABEL_131;
        }
        if (__OFADD__(v102, v107)) {
          goto LABEL_132;
        }
        if (v102 + v107 >= v83)
        {
          BOOL v108 = v83 < v107;
LABEL_94:
          if (v108) {
            unint64_t v80 = v92;
          }
          goto LABEL_96;
        }
LABEL_88:
        if (v103) {
          goto LABEL_127;
        }
        uint64_t v111 = &v77[16 * v80];
        uint64_t v113 = *(void *)v111;
        uint64_t v112 = *((void *)v111 + 1);
        BOOL v91 = __OFSUB__(v112, v113);
        uint64_t v114 = v112 - v113;
        if (v91) {
          goto LABEL_130;
        }
        if (v114 < v102) {
          goto LABEL_15;
        }
LABEL_96:
        unint64_t v119 = v80 - 1;
        if (v80 - 1 >= v21)
        {
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
          goto LABEL_143;
        }
        uint64_t v120 = *a1;
        if (!*a1) {
          goto LABEL_145;
        }
        unint64_t v121 = v19;
        int64_t v122 = &v77[16 * v119];
        uint64_t v123 = *(void *)v122;
        uint64_t v124 = &v77[16 * v80];
        uint64_t v125 = *((void *)v124 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)(v120 + *(void *)(v143 + 72) * *(void *)v122, v120 + *(void *)(v143 + 72) * *(void *)v124, v120 + *(void *)(v143 + 72) * v125, v142);
        if (v2) {
          goto LABEL_117;
        }
        if (v125 < v123) {
          goto LABEL_120;
        }
        if (v80 > *((void *)v121 + 2)) {
          goto LABEL_121;
        }
        *(void *)int64_t v122 = v123;
        *(void *)&v77[16 * v119 + 8] = v125;
        unint64_t v126 = *((void *)v121 + 2);
        if (v80 >= v126) {
          goto LABEL_122;
        }
        uint64_t v19 = v121;
        unint64_t v21 = v126 - 1;
        memmove(&v77[16 * v80], v124 + 16, 16 * (v126 - 1 - v80));
        *((void *)v121 + 2) = v126 - 1;
        a1 = v153;
        uint64_t v4 = v154;
        if (v126 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v21 = 1;
    a1 = v153;
LABEL_15:
    Swift::Int v12 = a1[1];
    uint64_t v20 = v152;
    if (v152 >= v12) {
      goto LABEL_106;
    }
  }
  if (__OFADD__(v35, v136)) {
    goto LABEL_142;
  }
  if (v35 + v136 >= v12) {
    Swift::Int v53 = v12;
  }
  else {
    Swift::Int v53 = v35 + v136;
  }
  if (v53 >= v35)
  {
    if (v37 != v53)
    {
      os_log_type_t v137 = v19;
      uint64_t v139 = v2;
      uint64_t v54 = *(void *)(v143 + 72);
      uint64_t v144 = *(void (**)(char *, uint64_t, uint64_t))(v143 + 16);
      uint64_t v145 = v54;
      uint64_t v55 = v54 * (v37 - 1);
      Swift::Int v56 = v37 * v54;
      Swift::Int v138 = v53;
      do
      {
        uint64_t v58 = 0;
        uint64_t v152 = v37;
        Swift::Int v146 = v56;
        uint64_t v147 = v55;
        while (1)
        {
          uint64_t v59 = *a1;
          Swift::Int v156 = v56 + v58;
          uint64_t v157 = v35;
          Swift::Int v60 = v56 + v58 + v59;
          uint64_t v61 = v151;
          uint64_t v62 = v144;
          v144(v151, v60, v4);
          uint64_t v63 = v55 + v58 + v59;
          BOOL v64 = a1;
          uint64_t v65 = v150;
          v62(v150, v63, v4);
          RRCandidate.score.getter();
          double v67 = v66;
          RRCandidate.score.getter();
          double v69 = v68;
          os_log_type_t v70 = *v148;
          (*v148)(v65, v4);
          v70(v61, v4);
          if (v69 >= v67) {
            break;
          }
          uint64_t v71 = *v64;
          if (!*v64) {
            goto LABEL_144;
          }
          Swift::Int v56 = v146;
          uint64_t v55 = v147;
          uint64_t v72 = v71 + v147 + v58;
          uint64_t v73 = (void (*)(uint64_t, char *, uint64_t))*v158;
          uint64_t v4 = v154;
          ((void (*)(char *, uint64_t, uint64_t))*v158)(v155, v71 + v146 + v58, v154);
          swift_arrayInitWithTakeFrontToBack();
          v73(v72, v155, v4);
          v58 -= v145;
          uint64_t v35 = v157 + 1;
          uint64_t v57 = v152;
          a1 = v153;
          if (v152 == v157 + 1) {
            goto LABEL_49;
          }
        }
        uint64_t v4 = v154;
        uint64_t v57 = v152;
        a1 = v64;
        Swift::Int v56 = v146;
        uint64_t v55 = v147;
LABEL_49:
        Swift::Int v37 = v57 + 1;
        v55 += v145;
        v56 += v145;
        uint64_t v35 = v141;
      }
      while (v37 != v138);
      Swift::Int v37 = v138;
      uint64_t v2 = v139;
      uint64_t v19 = v137;
    }
    goto LABEL_56;
  }
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  Swift::Int result;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  Swift::Int v24;
  unint64_t v25;
  Swift::Int v26;
  Swift::Int v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(void);
  uint64_t v38;
  char *v39;
  uint64_t *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  Swift::Int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (**v49)();
  uint64_t v50;
  uint64_t v51;
  void (*v52)(void);
  uint64_t v53;
  char *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  Swift::Int v61;
  Swift::Int v62;
  uint64_t v63;
  uint64_t v64;
  Swift::Int v65;
  uint64_t v66;
  unint64_t v67;
  Swift::Int v68;
  uint64_t v69;
  uint64_t v70;
  Swift::Int v71;
  Swift::Int v72;
  uint64_t (*v73)();
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  void (*v85)(char *, uint64_t, uint64_t);
  uint64_t v86;
  char *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t);
  uint64_t v92;
  uint64_t (*v93)();
  char *v94;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  Swift::Int v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  BOOL v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  BOOL v122;
  uint64_t v123;
  char v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  BOOL v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  Swift::Int v158;
  char *v159;
  uint64_t v160;
  Swift::Int v161;
  Swift::Int v162;
  void (*v163)(char *, uint64_t);
  void (*v164)(void);
  Swift::Int v165;
  uint64_t v166;
  Swift::Int v167;
  void *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  Swift::Int v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  Swift::Int v180;
  uint64_t (*v181)();
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;

  uint64_t v2 = v1;
  uint64_t v176 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
  uint64_t v4 = *(void *)(v176 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v176);
  uint64_t v166 = (uint64_t)&v156 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v177 = (uint64_t)&v156 - v8;
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v174 = (char *)&v156 - v10;
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v184 = (char *)&v156 - v12;
  unint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v185 = (uint64_t)&v156 - v14;
  MEMORY[0x1F4188790](v13);
  os_log_type_t v183 = (uint64_t)&v156 - v15;
  uint64_t v16 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v16);
  if (result >= v16)
  {
    if (v16 < 0) {
      goto LABEL_136;
    }
    if (v16) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v16, 1, a1);
    }
    return result;
  }
  if (v16 >= 0) {
    unint64_t v18 = v16;
  }
  else {
    unint64_t v18 = v16 + 1;
  }
  if (v16 < -1) {
    goto LABEL_144;
  }
  uint64_t v158 = result;
  uint64_t v170 = v4;
  if (v16 < 2)
  {
    Swift::Int v23 = (char *)MEMORY[0x1E4FBC860];
    unint64_t v169 = MEMORY[0x1E4FBC860]
         + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v157 = MEMORY[0x1E4FBC860];
    if (v16 != 1)
    {
      uint64_t v25 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_102:
      if (v25 >= 2)
      {
        unint64_t v148 = *a1;
        do
        {
          uint64_t v149 = v25 - 2;
          if (v25 < 2) {
            goto LABEL_131;
          }
          if (!v148) {
            goto LABEL_143;
          }
          uint64_t v150 = v23;
          uint64_t v151 = v23 + 32;
          uint64_t v152 = *(void *)&v23[16 * v149 + 32];
          uint64_t v153 = *(void *)&v23[16 * v25 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)(v148 + *(void *)(v170 + 72) * v152, v148 + *(void *)(v170 + 72) * *(void *)&v151[16 * v25 - 16], v148 + *(void *)(v170 + 72) * v153, v169);
          if (v2) {
            break;
          }
          if (v153 < v152) {
            goto LABEL_132;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v150 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v150);
          }
          if (v149 >= *((void *)v150 + 2)) {
            goto LABEL_133;
          }
          uint64_t v154 = &v150[16 * v149 + 32];
          *(void *)uint64_t v154 = v152;
          *((void *)v154 + 1) = v153;
          uint64_t v155 = *((void *)v150 + 2);
          if (v25 > v155) {
            goto LABEL_134;
          }
          Swift::Int v23 = v150;
          memmove(&v150[16 * v25 + 16], &v150[16 * v25 + 32], 16 * (v155 - v25));
          *((void *)v150 + 2) = v155 - 1;
          uint64_t v25 = v155 - 1;
        }
        while (v155 > 2);
      }
LABEL_113:
      swift_bridgeObjectRelease();
      *(void *)(v157 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v19 = v16;
    uint64_t v20 = v18 >> 1;
    unint64_t v21 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v21 + 16) = v20;
    uint64_t v16 = v19;
    uint64_t v22 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v157 = v21;
    unint64_t v169 = v21 + v22;
  }
  uint64_t v24 = 0;
  Swift::Int v23 = (char *)MEMORY[0x1E4FBC860];
  os_log_type_t v168 = a1;
  while (1)
  {
    BOOL v26 = v24;
    uint64_t v27 = v24 + 1;
    uint64_t v167 = v24;
    if (v24 + 1 < v16)
    {
      uint64_t v159 = v23;
      uint64_t v160 = *a1;
      double v28 = v160;
      double v29 = *(void *)(v170 + 72);
      uint64_t v180 = v29;
      uint64_t v175 = v24 + 1;
      double v30 = v160 + v29 * v27;
      double v31 = v183;
      outlined init with copy of ReferenceResolutionClientProtocol?(v30, v183, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
      unint64_t v179 = (char *)v16;
      outlined init with copy of ReferenceResolutionClientProtocol?(v28 + v29 * v26, v185, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
      uint64_t v32 = *(int *)(v176 + 48);
      uint64_t v33 = v184;
      uint64_t v34 = &v184[v32];
      unint64_t v182 = v31 + v32;
      uint64_t v35 = type metadata accessor for UUID();
      uint64_t v36 = *(void *)(v35 - 8);
      Swift::Int v37 = *(void (**)(void))(v36 + 16);
      ((void (*)(char *, uint64_t, uint64_t))v37)(v33, v31, v35);
      uint64_t v181 = type metadata accessor for ConversationHandlerLocator.ScoredHandler;
      outlined init with copy of RemoteConversationTurnData(v182, (uint64_t)v34, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      unint64_t v178 = *(char **)v34;
      outlined destroy of ConversationHandlerLocator.ScoredHandler((uint64_t)v34);
      Swift::Int v38 = *(int *)(v176 + 48);
      Swift::Int v39 = v174;
      uint64_t v40 = (uint64_t *)&v174[v38];
      unint64_t v182 = v185 + v38;
      unint64_t v164 = v37;
      uint64_t v165 = v36 + 16;
      ((void (*)(char *))v37)(v174);
      outlined init with copy of RemoteConversationTurnData(v182, (uint64_t)v40, (uint64_t (*)(void))v181);
      uint64_t v173 = *v40;
      uint64_t v41 = (uint64_t)v40;
      BOOL v26 = v167;
      outlined destroy of ConversationHandlerLocator.ScoredHandler(v41);
      double v42 = *(void (**)(char *, uint64_t))(v36 + 8);
      v42(v39, v35);
      unint64_t v171 = v36 + 8;
      int64_t v172 = v35;
      unint64_t v163 = v42;
      v42(v184, v35);
      uint64_t v16 = (Swift::Int)v179;
      outlined destroy of ReferenceResolutionClientProtocol?(v185, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
      outlined destroy of ReferenceResolutionClientProtocol?(v183, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
      double v43 = v180;
      uint64_t v27 = v26 + 2;
      if (v26 + 2 < v16)
      {
        Swift::Int v156 = v2;
        uint64_t v162 = v180 * v175;
        double v44 = v160;
        unint64_t v161 = v180 * v27;
        while (1)
        {
          uint64_t v175 = v27;
          LODWORD(v182) = v173 < (uint64_t)v178;
          BOOL v45 = v183;
          outlined init with copy of ReferenceResolutionClientProtocol?(v44 + v161, v183, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
          uint64_t v46 = v185;
          outlined init with copy of ReferenceResolutionClientProtocol?(v44 + v162, v185, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
          uint64_t v47 = v176;
          Swift::Int v48 = *(int *)(v176 + 48);
          uint64_t v49 = (uint64_t (**)())&v184[v48];
          Swift::Int v50 = v45 + v48;
          unint64_t v51 = v172;
          Swift::Int v52 = v164;
          v164();
          outlined init with copy of RemoteConversationTurnData(v50, (uint64_t)v49, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
          uint64_t v181 = *v49;
          outlined destroy of ConversationHandlerLocator.ScoredHandler((uint64_t)v49);
          Swift::Int v53 = *(int *)(v47 + 48);
          uint64_t v54 = v174;
          uint64_t v55 = (uint64_t *)&v174[v53];
          Swift::Int v56 = v46 + v53;
          ((void (*)(char *, uint64_t, uint64_t))v52)(v174, v46, v51);
          outlined init with copy of RemoteConversationTurnData(v56, (uint64_t)v55, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
          uint64_t v57 = *v55;
          outlined destroy of ConversationHandlerLocator.ScoredHandler((uint64_t)v55);
          LODWORD(v57) = v57 >= (uint64_t)v181;
          uint64_t v58 = v163;
          v163(v54, v51);
          v58(v184, v51);
          outlined destroy of ReferenceResolutionClientProtocol?(v46, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
          outlined destroy of ReferenceResolutionClientProtocol?(v183, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
          if (v182 == v57) {
            break;
          }
          uint64_t v27 = v175 + 1;
          uint64_t v16 = (Swift::Int)v179;
          double v43 = v180;
          v44 += v180;
          if (v179 == (char *)(v175 + 1))
          {
            uint64_t v27 = (Swift::Int)v179;
            uint64_t v2 = v156;
            BOOL v26 = v167;
            a1 = v168;
            goto LABEL_22;
          }
        }
        uint64_t v2 = v156;
        BOOL v26 = v167;
        a1 = v168;
        uint64_t v27 = v175;
        uint64_t v16 = (Swift::Int)v179;
        double v43 = v180;
      }
LABEL_22:
      Swift::Int v23 = v159;
      if (v173 < (uint64_t)v178)
      {
        if (v27 < v26) {
          goto LABEL_137;
        }
        if (v26 < v27)
        {
          uint64_t v59 = 0;
          Swift::Int v60 = v43 * (v27 - 1);
          uint64_t v61 = v27 * v43;
          uint64_t v62 = v26;
          uint64_t v63 = v26 * v43;
          do
          {
            if (v62 != v27 + v59 - 1)
            {
              uint64_t v65 = v27;
              double v66 = v160;
              if (!v160) {
                goto LABEL_142;
              }
              double v67 = v160 + v63;
              unint64_t v182 = v160 + v60;
              outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v160 + v63, v166, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
              if (v63 < v60 || v67 >= v66 + v61)
              {
                BOOL v64 = v182;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                BOOL v64 = v182;
                if (v63 != v60) {
                  swift_arrayInitWithTakeBackToFront();
                }
              }
              outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v166, v64, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
              uint64_t v27 = v65;
              BOOL v26 = v167;
              double v43 = v180;
            }
            ++v62;
            --v59;
            v60 -= v43;
            v61 -= v43;
            v63 += v43;
          }
          while (v62 < v27 + v59);
          a1 = v168;
          Swift::Int v23 = v159;
          uint64_t v16 = (Swift::Int)v179;
        }
      }
    }
    if (v27 < v16)
    {
      if (__OFSUB__(v27, v26)) {
        goto LABEL_135;
      }
      if (v27 - v26 < v158) {
        break;
      }
    }
LABEL_54:
    if (v27 < v26) {
      goto LABEL_130;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v175 = v27;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      Swift::Int v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v23 + 2) + 1, 1, v23);
    }
    uint64_t v97 = *((void *)v23 + 2);
    uint64_t v96 = *((void *)v23 + 3);
    uint64_t v25 = v97 + 1;
    if (v97 >= v96 >> 1) {
      Swift::Int v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v96 > 1), v97 + 1, 1, v23);
    }
    *((void *)v23 + 2) = v25;
    uint64_t v98 = v23 + 32;
    uint64_t v99 = &v23[16 * v97 + 32];
    uint64_t v100 = v175;
    *(void *)uint64_t v99 = v26;
    *((void *)v99 + 1) = v100;
    if (v97)
    {
      while (1)
      {
        BOOL v101 = v25 - 1;
        if (v25 >= 4)
        {
          uint64_t v106 = &v98[16 * v25];
          uint64_t v107 = *((void *)v106 - 8);
          BOOL v108 = *((void *)v106 - 7);
          uint64_t v112 = __OFSUB__(v108, v107);
          uint64_t v109 = v108 - v107;
          if (v112) {
            goto LABEL_119;
          }
          uint64_t v111 = *((void *)v106 - 6);
          uint64_t v110 = *((void *)v106 - 5);
          uint64_t v112 = __OFSUB__(v110, v111);
          uint64_t v104 = v110 - v111;
          uint64_t v105 = v112;
          if (v112) {
            goto LABEL_120;
          }
          uint64_t v113 = v25 - 2;
          uint64_t v114 = &v98[16 * v25 - 32];
          uint64_t v116 = *(void *)v114;
          uint64_t v115 = *((void *)v114 + 1);
          uint64_t v112 = __OFSUB__(v115, v116);
          uint64_t v117 = v115 - v116;
          if (v112) {
            goto LABEL_122;
          }
          uint64_t v112 = __OFADD__(v104, v117);
          uint64_t v118 = v104 + v117;
          if (v112) {
            goto LABEL_125;
          }
          if (v118 >= v109)
          {
            Swift::Int v136 = &v98[16 * v101];
            Swift::Int v138 = *(void *)v136;
            os_log_type_t v137 = *((void *)v136 + 1);
            uint64_t v112 = __OFSUB__(v137, v138);
            uint64_t v139 = v137 - v138;
            if (v112) {
              goto LABEL_129;
            }
            unint64_t v129 = v104 < v139;
            goto LABEL_91;
          }
        }
        else
        {
          if (v25 != 3)
          {
            uint64_t v130 = *((void *)v23 + 4);
            uint64_t v131 = *((void *)v23 + 5);
            uint64_t v112 = __OFSUB__(v131, v130);
            uint64_t v123 = v131 - v130;
            uint64_t v124 = v112;
            goto LABEL_85;
          }
          char v103 = *((void *)v23 + 4);
          uint64_t v102 = *((void *)v23 + 5);
          uint64_t v112 = __OFSUB__(v102, v103);
          uint64_t v104 = v102 - v103;
          uint64_t v105 = v112;
        }
        if (v105) {
          goto LABEL_121;
        }
        uint64_t v113 = v25 - 2;
        unint64_t v119 = &v98[16 * v25 - 32];
        unint64_t v121 = *(void *)v119;
        uint64_t v120 = *((void *)v119 + 1);
        int64_t v122 = __OFSUB__(v120, v121);
        uint64_t v123 = v120 - v121;
        uint64_t v124 = v122;
        if (v122) {
          goto LABEL_124;
        }
        uint64_t v125 = &v98[16 * v101];
        uint64_t v127 = *(void *)v125;
        unint64_t v126 = *((void *)v125 + 1);
        uint64_t v112 = __OFSUB__(v126, v127);
        uint64_t v128 = v126 - v127;
        if (v112) {
          goto LABEL_127;
        }
        if (__OFADD__(v123, v128)) {
          goto LABEL_128;
        }
        if (v123 + v128 >= v104)
        {
          unint64_t v129 = v104 < v128;
LABEL_91:
          if (v129) {
            BOOL v101 = v113;
          }
          goto LABEL_93;
        }
LABEL_85:
        if (v124) {
          goto LABEL_123;
        }
        uint64_t v132 = &v98[16 * v101];
        uint64_t v134 = *(void *)v132;
        unint64_t v133 = *((void *)v132 + 1);
        uint64_t v112 = __OFSUB__(v133, v134);
        uint64_t v135 = v133 - v134;
        if (v112) {
          goto LABEL_126;
        }
        if (v135 < v123) {
          goto LABEL_14;
        }
LABEL_93:
        unint64_t v140 = v101 - 1;
        if (v101 - 1 >= v25)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        uint64_t v141 = *a1;
        if (!*a1) {
          goto LABEL_141;
        }
        unint64_t v142 = v23;
        uint64_t v143 = &v98[16 * v140];
        uint64_t v144 = *(void *)v143;
        uint64_t v145 = &v98[16 * v101];
        Swift::Int v146 = *((void *)v145 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)(v141 + *(void *)(v170 + 72) * *(void *)v143, v141 + *(void *)(v170 + 72) * *(void *)v145, v141 + *(void *)(v170 + 72) * v146, v169);
        if (v2) {
          goto LABEL_113;
        }
        if (v146 < v144) {
          goto LABEL_116;
        }
        if (v101 > *((void *)v142 + 2)) {
          goto LABEL_117;
        }
        *(void *)uint64_t v143 = v144;
        *(void *)&v98[16 * v140 + 8] = v146;
        uint64_t v147 = *((void *)v142 + 2);
        if (v101 >= v147) {
          goto LABEL_118;
        }
        Swift::Int v23 = v142;
        uint64_t v25 = v147 - 1;
        memmove(&v98[16 * v101], v145 + 16, 16 * (v147 - 1 - v101));
        *((void *)v142 + 2) = v147 - 1;
        a1 = v168;
        if (v147 <= 2) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v25 = 1;
LABEL_14:
    uint64_t v16 = a1[1];
    uint64_t v24 = v175;
    if (v175 >= v16) {
      goto LABEL_102;
    }
  }
  if (__OFADD__(v26, v158)) {
    goto LABEL_138;
  }
  if (v26 + v158 >= v16) {
    double v68 = v16;
  }
  else {
    double v68 = v26 + v158;
  }
  if (v68 >= v26)
  {
    if (v27 != v68)
    {
      uint64_t v159 = v23;
      Swift::Int v156 = v2;
      double v69 = *(void *)(v170 + 72);
      os_log_type_t v70 = v69 * (v27 - 1);
      unint64_t v171 = v69;
      uint64_t v71 = v27 * v69;
      uint64_t v165 = v68;
      do
      {
        uint64_t v73 = 0;
        uint64_t v175 = v27;
        int64_t v172 = v71;
        uint64_t v173 = v70;
        while (1)
        {
          uint64_t v74 = *a1;
          unint64_t v179 = (char *)v73 + v71;
          uint64_t v180 = v26;
          unint64_t v75 = (uint64_t)v73 + v71 + v74;
          unint64_t v76 = v183;
          outlined init with copy of ReferenceResolutionClientProtocol?(v75, v183, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
          uint64_t v181 = v73;
          unint64_t v178 = (char *)v73 + v70;
          outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v73 + v70 + v74, v185, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
          uint64_t v77 = v176;
          uint64_t v78 = *(int *)(v176 + 48);
          uint64_t v79 = v184;
          unint64_t v80 = (uint64_t *)&v184[v78];
          uint64_t v81 = v76;
          unint64_t v182 = v76 + v78;
          uint64_t v82 = type metadata accessor for UUID();
          uint64_t v83 = *(void *)(v82 - 8);
          char v84 = a1;
          char v85 = *(void (**)(char *, uint64_t, uint64_t))(v83 + 16);
          v85(v79, v81, v82);
          outlined init with copy of RemoteConversationTurnData(v182, (uint64_t)v80, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
          unint64_t v182 = *v80;
          outlined destroy of ConversationHandlerLocator.ScoredHandler((uint64_t)v80);
          uint64_t v86 = *(int *)(v77 + 48);
          uint64_t v87 = v174;
          uint64_t v88 = (uint64_t *)&v174[v86];
          uint64_t v89 = v185 + v86;
          ((void (*)(char *))v85)(v174);
          outlined init with copy of RemoteConversationTurnData(v89, (uint64_t)v88, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
          uint64_t v90 = *v88;
          outlined destroy of ConversationHandlerLocator.ScoredHandler((uint64_t)v88);
          BOOL v91 = *(void (**)(char *, uint64_t))(v83 + 8);
          v91(v87, v82);
          v91(v184, v82);
          outlined destroy of ReferenceResolutionClientProtocol?(v185, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
          outlined destroy of ReferenceResolutionClientProtocol?(v183, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
          if (v90 >= v182) {
            break;
          }
          unint64_t v92 = *v84;
          if (!*v84) {
            goto LABEL_140;
          }
          a1 = v84;
          uint64_t v71 = v172;
          os_log_type_t v70 = v173;
          uint64_t v93 = v181;
          uint64_t v94 = (char *)v181 + v92 + v173;
          outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v181 + v92 + v172, v177, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
          swift_arrayInitWithTakeFrontToBack();
          outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v177, (uint64_t)v94, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
          uint64_t v73 = (uint64_t (*)())((char *)v93 - v171);
          BOOL v26 = v180 + 1;
          uint64_t v72 = v175;
          if (v175 == v180 + 1) {
            goto LABEL_47;
          }
        }
        a1 = v84;
        uint64_t v72 = v175;
        uint64_t v71 = v172;
        os_log_type_t v70 = v173;
LABEL_47:
        uint64_t v27 = v72 + 1;
        v70 += v171;
        v71 += v171;
        BOOL v26 = v167;
      }
      while (v27 != v165);
      uint64_t v27 = v165;
      uint64_t v2 = v156;
      Swift::Int v23 = v159;
    }
    goto LABEL_54;
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v33 = a1;
  uint64_t v7 = type metadata accessor for RRCandidate();
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  double v44 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  Swift::Int v39 = (char *)&v31 - v11;
  uint64_t result = MEMORY[0x1F4188790](v10);
  Swift::Int v38 = (char *)&v31 - v14;
  uint64_t v42 = a3;
  uint64_t v32 = a2;
  if (a3 != a2)
  {
    uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    uint64_t v37 = v13 + 16;
    uint64_t v15 = *(void *)(v13 + 72);
    uint64_t v34 = (uint64_t (**)(char *, uint64_t))(v13 + 8);
    uint64_t v35 = a4;
    double v43 = (void (**)(char *, uint64_t, uint64_t))(v13 + 32);
    uint64_t v46 = v15 * (v42 - 1);
    uint64_t v40 = v15;
    uint64_t v16 = v15 * v42;
LABEL_5:
    uint64_t v17 = 0;
    uint64_t v45 = v33;
    uint64_t v41 = v16;
    while (1)
    {
      uint64_t v18 = *a4;
      uint64_t v19 = v16 + v17 + *a4;
      uint64_t v20 = v38;
      unint64_t v21 = v36;
      v36(v38, v19, v7);
      uint64_t v22 = v39;
      v21(v39, v46 + v17 + v18, v7);
      a4 = v35;
      RRCandidate.score.getter();
      double v24 = v23;
      RRCandidate.score.getter();
      double v26 = v25;
      uint64_t v27 = *v34;
      (*v34)(v22, v7);
      uint64_t result = v27(v20, v7);
      uint64_t v16 = v41;
      if (v26 >= v24)
      {
LABEL_4:
        v46 += v40;
        v16 += v40;
        if (++v42 == v32) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v28 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v29 = v28 + v46 + v17;
      double v30 = *v43;
      (*v43)(v44, v28 + v41 + v17, v7);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(v29, v44, v7);
      v17 -= v40;
      if (v42 == ++v45) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;

  double v43 = a1;
  Swift::Int v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
  uint64_t v7 = MEMORY[0x1F4188790](v50);
  unint64_t v51 = (uint64_t)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v45 = (char *)&v41 - v10;
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v57 = (char *)&v41 - v12;
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v58 = (uint64_t)&v41 - v14;
  uint64_t result = MEMORY[0x1F4188790](v13);
  Swift::Int v56 = (uint64_t)&v41 - v17;
  uint64_t v49 = a3;
  uint64_t v42 = a2;
  if (a3 != a2)
  {
    uint64_t v18 = *(void *)(v16 + 72);
    uint64_t v19 = v18 * (v49 - 1);
    uint64_t v46 = v18;
    uint64_t v20 = v18 * v49;
    double v44 = a4;
LABEL_5:
    unint64_t v21 = 0;
    uint64_t v54 = v43;
    uint64_t v47 = v20;
    Swift::Int v48 = v19;
    while (1)
    {
      uint64_t v22 = *a4;
      Swift::Int v53 = v20 + v21;
      double v23 = v56;
      outlined init with copy of ReferenceResolutionClientProtocol?(v20 + v21 + v22, v56, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
      Swift::Int v52 = v19 + v21;
      outlined init with copy of ReferenceResolutionClientProtocol?(v19 + v21 + v22, v58, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
      double v24 = v50;
      double v25 = *(int *)(v50 + 48);
      double v26 = v57;
      uint64_t v27 = (uint64_t *)&v57[v25];
      uint64_t v55 = v23 + v25;
      uint64_t v28 = v23;
      uint64_t v29 = type metadata accessor for UUID();
      double v30 = *(void *)(v29 - 8);
      uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
      v31(v26, v28, v29);
      outlined init with copy of RemoteConversationTurnData(v55, (uint64_t)v27, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      uint64_t v55 = *v27;
      outlined destroy of ConversationHandlerLocator.ScoredHandler((uint64_t)v27);
      uint64_t v32 = *(int *)(v24 + 48);
      uint64_t v33 = v45;
      uint64_t v34 = (uint64_t *)&v45[v32];
      uint64_t v35 = v58 + v32;
      ((void (*)(char *))v31)(v45);
      uint64_t v20 = v47;
      outlined init with copy of RemoteConversationTurnData(v35, (uint64_t)v34, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      uint64_t v36 = *v34;
      outlined destroy of ConversationHandlerLocator.ScoredHandler((uint64_t)v34);
      uint64_t v37 = *(void (**)(char *, uint64_t))(v30 + 8);
      v37(v33, v29);
      v37(v57, v29);
      uint64_t v19 = v48;
      outlined destroy of ReferenceResolutionClientProtocol?(v58, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
      uint64_t result = outlined destroy of ReferenceResolutionClientProtocol?(v56, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
      Swift::Int v38 = v36 < v55;
      a4 = v44;
      if (!v38)
      {
LABEL_4:
        v19 += v46;
        v20 += v46;
        if (++v49 == v42) {
          return result;
        }
        goto LABEL_5;
      }
      Swift::Int v39 = *v44;
      if (!*v44) {
        break;
      }
      uint64_t v40 = v39 + v19 + v21;
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v39 + v20 + v21, v51, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v51, v40, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
      v21 -= v46;
      if (v49 == ++v54) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for RRCandidate();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  double v67 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  double v66 = (char *)&v59 - v12;
  uint64_t v14 = *(void *)(v13 + 72);
  if (!v14)
  {
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  if (a2 - a1 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_71;
  }
  int64_t v15 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_72;
  }
  uint64_t v16 = (uint64_t)(a2 - a1) / v14;
  unint64_t v70 = a1;
  unint64_t v69 = a4;
  uint64_t v17 = v15 / v14;
  if (v16 >= v15 / v14)
  {
    if ((v17 & 0x8000000000000000) == 0)
    {
      unint64_t v19 = a3;
      uint64_t v20 = v17 * v14;
      if (a4 < a2 || a2 + v20 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v36 = a4 + v20;
      unint64_t v68 = a4 + v20;
      unint64_t v70 = a2;
      if (v20 >= 1 && a1 < a2)
      {
        unint64_t v38 = v19;
        uint64_t v39 = -v14;
        uint64_t v40 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
        uint64_t v65 = v9 + 16;
        uint64_t v61 = (void (**)(char *, uint64_t))(v9 + 8);
        uint64_t v62 = v40;
        unint64_t v60 = a4;
        unint64_t v63 = a1;
        uint64_t v41 = v66;
        do
        {
          unint64_t v64 = v38 + v39;
          uint64_t v42 = v8;
          unint64_t v43 = v38;
          uint64_t v44 = v8;
          uint64_t v45 = v62;
          v62(v41, v36 + v39, v42);
          unint64_t v46 = a2 + v39;
          uint64_t v47 = v67;
          v45(v67, a2 + v39, v44);
          uint64_t v8 = v44;
          RRCandidate.score.getter();
          double v49 = v48;
          RRCandidate.score.getter();
          double v51 = v50;
          Swift::Int v52 = *v61;
          (*v61)(v47, v44);
          v52(v41, v44);
          if (v51 >= v49)
          {
            unint64_t v56 = v68;
            v68 += v39;
            unint64_t v38 = v64;
            if (v43 < v56 || v64 >= v56)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v46 = a2;
              unint64_t v54 = v60;
              unint64_t v55 = v63;
            }
            else
            {
              unint64_t v55 = v63;
              if (v43 != v56) {
                swift_arrayInitWithTakeBackToFront();
              }
              unint64_t v46 = a2;
              unint64_t v54 = v60;
            }
          }
          else
          {
            unint64_t v38 = v64;
            if (v43 < a2 || v64 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v54 = v60;
              unint64_t v55 = v63;
            }
            else
            {
              BOOL v53 = v43 == a2;
              unint64_t v54 = v60;
              unint64_t v55 = v63;
              if (!v53) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v70 += v39;
          }
          unint64_t v36 = v68;
          if (v68 <= v54) {
            break;
          }
          a2 = v46;
        }
        while (v46 > v55);
      }
      goto LABEL_69;
    }
  }
  else
  {
    unint64_t v64 = a3;
    if ((v16 & 0x8000000000000000) == 0)
    {
      uint64_t v18 = v16 * v14;
      if (a4 < a1 || a1 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a1)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v63 = a4 + v18;
      unint64_t v68 = a4 + v18;
      if (v18 >= 1 && a2 < v64)
      {
        uint64_t v22 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
        uint64_t v65 = v9 + 16;
        double v23 = (void (**)(char *, uint64_t))(v9 + 8);
        double v24 = v66;
        do
        {
          v22(v24, a2, v8);
          double v25 = v67;
          v22(v67, a4, v8);
          RRCandidate.score.getter();
          double v27 = v26;
          RRCandidate.score.getter();
          double v29 = v28;
          double v30 = *v23;
          (*v23)(v25, v8);
          v30(v24, v8);
          unint64_t v31 = v70;
          if (v29 >= v27)
          {
            unint64_t v34 = v69 + v14;
            if (v70 < v69 || v70 >= v34)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v70 != v69)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v69 = v34;
            unint64_t v32 = a2;
          }
          else
          {
            unint64_t v32 = a2 + v14;
            if (v70 < a2 || v70 >= v32)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v70 == a2)
            {
              unint64_t v31 = a2;
            }
            else
            {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          unint64_t v70 = v31 + v14;
          a4 = v69;
          if (v69 >= v63) {
            break;
          }
          a2 = v32;
        }
        while (v32 < v64);
      }
LABEL_69:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v70, &v69, (uint64_t *)&v68);
      return 1;
    }
  }
LABEL_73:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  char *v34;
  int64_t *v35;
  uint64_t v36;
  int64_t v37;
  void (*v38)(char *, uint64_t);
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t result;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;

  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  unint64_t v76 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v81 = (char *)&v68 - v12;
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  unint64_t v75 = (uint64_t)&v68 - v14;
  MEMORY[0x1F4188790](v13);
  unint64_t v80 = (uint64_t)&v68 - v15;
  uint64_t v17 = *(void *)(v16 + 72);
  if (!v17)
  {
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (a2 - a1 == 0x8000000000000000 && v17 == -1) {
    goto LABEL_61;
  }
  uint64_t v18 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v17 == -1) {
    goto LABEL_62;
  }
  unint64_t v19 = (uint64_t)(a2 - a1) / v17;
  char v84 = a1;
  uint64_t v83 = a4;
  uint64_t v20 = v18 / v17;
  if (v19 >= v18 / v17)
  {
    if ((v20 & 0x8000000000000000) == 0)
    {
      uint64_t v22 = v20 * v17;
      if (a4 < a2 || a2 + v22 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      uint64_t v45 = a4 + v22;
      uint64_t v82 = a4 + v22;
      char v84 = a2;
      if (v22 >= 1 && a1 < a2)
      {
        uint64_t v47 = -v17;
        uint64_t v78 = v8;
        unint64_t v70 = a1;
        uint64_t v71 = a4;
        unint64_t v69 = -v17;
        double v48 = v75;
        do
        {
          uint64_t v77 = a3;
          uint64_t v79 = a2;
          uint64_t v74 = a3 + v47;
          double v49 = v80;
          outlined init with copy of ReferenceResolutionClientProtocol?(v45 + v47, v80, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
          uint64_t v72 = a2 + v47;
          outlined init with copy of ReferenceResolutionClientProtocol?(a2 + v47, v48, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
          double v50 = *(int *)(v8 + 48);
          double v51 = v81;
          Swift::Int v52 = (uint64_t *)&v81[v50];
          uint64_t v73 = v49 + v50;
          BOOL v53 = type metadata accessor for UUID();
          unint64_t v54 = *(void *)(v53 - 8);
          unint64_t v55 = *(void (**)(char *, uint64_t, uint64_t))(v54 + 16);
          v55(v51, v49, v53);
          outlined init with copy of RemoteConversationTurnData(v73, (uint64_t)v52, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
          unint64_t v56 = v78;
          uint64_t v73 = *v52;
          outlined destroy of ConversationHandlerLocator.ScoredHandler((uint64_t)v52);
          uint64_t v57 = *(int *)(v56 + 48);
          uint64_t v58 = v76;
          uint64_t v59 = (uint64_t *)&v76[v57];
          unint64_t v60 = v48 + v57;
          v55(v76, v48, v53);
          outlined init with copy of RemoteConversationTurnData(v60, (uint64_t)v59, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
          uint64_t v61 = *v59;
          outlined destroy of ConversationHandlerLocator.ScoredHandler((uint64_t)v59);
          uint64_t v62 = *(void (**)(char *, uint64_t))(v54 + 8);
          v62(v58, v53);
          v62(v81, v53);
          outlined destroy of ReferenceResolutionClientProtocol?(v48, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
          outlined destroy of ReferenceResolutionClientProtocol?(v80, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
          if (v61 >= (uint64_t)v73)
          {
            uint64_t v65 = v79;
            double v66 = v82;
            v82 += v69;
            uint64_t v47 = v69;
            a3 = v74;
            if (v77 < v66 || v74 >= v66)
            {
              uint64_t v8 = v78;
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v64 = v70;
              unint64_t v63 = v71;
            }
            else
            {
              uint64_t v8 = v78;
              unint64_t v64 = v70;
              unint64_t v63 = v71;
              if (v77 != v66) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
          }
          else
          {
            uint64_t v47 = v69;
            a3 = v74;
            if (v77 < v79 || v74 >= v79)
            {
              uint64_t v65 = v72;
              uint64_t v8 = v78;
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v64 = v70;
              unint64_t v63 = v71;
            }
            else
            {
              uint64_t v8 = v78;
              unint64_t v64 = v70;
              unint64_t v63 = v71;
              uint64_t v65 = v72;
              if (v77 != v79) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v84 += v47;
          }
          uint64_t v45 = v82;
          if (v82 <= v63) {
            break;
          }
          a2 = v65;
        }
        while (v65 > v64);
      }
      goto LABEL_59;
    }
  }
  else if ((v19 & 0x8000000000000000) == 0)
  {
    unint64_t v21 = v19 * v17;
    if (a4 < a1 || a1 + v21 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    uint64_t v73 = a4 + v21;
    uint64_t v82 = a4 + v21;
    if (v21 >= 1 && a2 < a3)
    {
      uint64_t v77 = a3;
      uint64_t v78 = v8;
      uint64_t v72 = v17;
      do
      {
        uint64_t v79 = a2;
        double v24 = v80;
        outlined init with copy of ReferenceResolutionClientProtocol?(a2, v80, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
        double v25 = v75;
        outlined init with copy of ReferenceResolutionClientProtocol?(a4, v75, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
        double v26 = *(int *)(v8 + 48);
        double v27 = v81;
        double v28 = (unint64_t *)&v81[v26];
        uint64_t v74 = v24 + v26;
        double v29 = type metadata accessor for UUID();
        double v30 = v8;
        unint64_t v31 = *(void *)(v29 - 8);
        unint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 16);
        v32(v27, v24, v29);
        outlined init with copy of RemoteConversationTurnData(v74, (uint64_t)v28, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
        uint64_t v74 = *v28;
        outlined destroy of ConversationHandlerLocator.ScoredHandler((uint64_t)v28);
        uint64_t v33 = *(int *)(v30 + 48);
        unint64_t v34 = v76;
        uint64_t v35 = (int64_t *)&v76[v33];
        unint64_t v36 = v25 + v33;
        v32(v76, v25, v29);
        outlined init with copy of RemoteConversationTurnData(v36, (uint64_t)v35, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
        uint64_t v37 = *v35;
        outlined destroy of ConversationHandlerLocator.ScoredHandler((uint64_t)v35);
        unint64_t v38 = *(void (**)(char *, uint64_t))(v31 + 8);
        v38(v34, v29);
        v38(v81, v29);
        outlined destroy of ReferenceResolutionClientProtocol?(v25, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
        outlined destroy of ReferenceResolutionClientProtocol?(v80, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
        uint64_t v39 = v84;
        if (v37 >= (uint64_t)v74)
        {
          unint64_t v43 = v79;
          uint64_t v40 = v72;
          uint64_t v44 = v83 + v72;
          if (v84 < v83 || v84 >= v44)
          {
            uint64_t v8 = v78;
            swift_arrayInitWithTakeFrontToBack();
            uint64_t v42 = v77;
          }
          else
          {
            uint64_t v42 = v77;
            uint64_t v8 = v78;
            if (v84 != v83) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          uint64_t v83 = v44;
          uint64_t v41 = v43;
        }
        else
        {
          uint64_t v40 = v72;
          uint64_t v41 = v79 + v72;
          if (v84 < v79 || v84 >= v41)
          {
            uint64_t v8 = v78;
            swift_arrayInitWithTakeFrontToBack();
            uint64_t v42 = v77;
          }
          else
          {
            uint64_t v42 = v77;
            uint64_t v8 = v78;
            if (v84 == v79) {
              uint64_t v39 = v79;
            }
            else {
              swift_arrayInitWithTakeBackToFront();
            }
          }
        }
        char v84 = v39 + v40;
        a4 = v83;
        if (v83 >= v73) {
          break;
        }
        a2 = v41;
      }
      while (v41 < v42);
    }
LABEL_59:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v84, &v83, (uint64_t *)&v82);
    return 1;
  }
LABEL_63:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static AffinityScorerUtils.getEntitySpans(_:)()
{
  uint64_t v58 = type metadata accessor for Node();
  uint64_t v48 = *(void *)(v58 - 8);
  MEMORY[0x1F4188790](v58);
  uint64_t v47 = (char *)&v47 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v1 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  uint64_t v54 = *(void *)(v1 - 8);
  uint64_t v55 = v1;
  MEMORY[0x1F4188790](v1);
  BOOL v53 = (char *)&v47 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v57 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  Swift::Int v52 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  unint64_t v56 = (char *)&v47 - v17;
  uint64_t v18 = USOParse.userParse.getter();
  uint64_t v19 = MEMORY[0x1BA9DE000](v18);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v20 = *(void *)(v19 + 16);
  if (v20)
  {
    uint64_t v50 = v14;
    uint64_t v51 = v13;
    uint64_t v49 = v4;
    uint64_t v22 = v4 + 16;
    unint64_t v21 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    unint64_t v23 = v19 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    double v24 = (void (**)(char *, uint64_t))(v4 + 8);
    uint64_t v25 = *(void *)(v22 + 56);
    swift_bridgeObjectRetain();
    while (1)
    {
      v21(v6, v23, v3);
      if (Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter()) {
        break;
      }
      (*v24)(v6, v3);
      v23 += v25;
      if (!--v20)
      {
        swift_bridgeObjectRelease();
        uint64_t v26 = 1;
        uint64_t v14 = v50;
        uint64_t v13 = v51;
        uint64_t v27 = v58;
        uint64_t v4 = v49;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v4 = v49;
    uint64_t v28 = (uint64_t)v57;
    (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v57, v6, v3);
    uint64_t v26 = 0;
    uint64_t v14 = v50;
    uint64_t v13 = v51;
    uint64_t v27 = v58;
  }
  else
  {
    uint64_t v26 = 1;
    uint64_t v27 = v58;
LABEL_7:
    uint64_t v28 = (uint64_t)v57;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v28, v26, 1, v3);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v28, 1, v3) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v28, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.executor);
    double v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      unint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v32 = 0;
      _os_log_impl(&dword_1B9C64000, v30, v31, "Could not extract userStatedTask, returning empty entity spans", v32, 2u);
      MEMORY[0x1BA9E48C0](v32, -1, -1);
    }

    return MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v33 = v53;
    Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v28, v3);
    unint64_t v34 = v52;
    Siri_Nlu_External_UserStatedTask.task.getter();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v33, v55);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v56, v34, v13);
    uint64_t v37 = static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)();
    uint64_t v38 = dispatch thunk of Graph.nodes.getter();
    uint64_t v59 = MEMORY[0x1E4FBC860];
    uint64_t v39 = *(void *)(v38 + 16);
    if (v39)
    {
      uint64_t v57 = (char *)v38;
      uint64_t v58 = v37;
      uint64_t v50 = v14;
      uint64_t v51 = v13;
      uint64_t v40 = v47;
      uint64_t v41 = *(void (**)(char *, unint64_t, uint64_t))(v48 + 16);
      unint64_t v42 = v38 + ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80));
      uint64_t v43 = v27;
      uint64_t v44 = *(void *)(v48 + 72);
      uint64_t v45 = (void (**)(char *, uint64_t))(v48 + 8);
      do
      {
        v41(v40, v42, v43);
        uint64_t v46 = Node.entitySpans.getter();
        (*v45)(v40, v43);
        specialized Array.append<A>(contentsOf:)(v46);
        v42 += v44;
        --v39;
      }
      while (v39);
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v35 = v59;
      uint64_t v14 = v50;
      uint64_t v13 = v51;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v35 = MEMORY[0x1E4FBC860];
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v56, v13);
  }
  return v35;
}

ValueMetadata *type metadata accessor for AffinityScorerUtils()
{
  return &type metadata for AffinityScorerUtils;
}

unint64_t specialized AffinityScorer.debugDescription.getter()
{
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v0._uint64_t countAndFlagsBits = UUID.uuidString.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0xD000000000000013;
}

uint64_t one-time initialization function for kAffinityScorers()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AffinityScoring>);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 32) = 0xD00000000000001ELL;
  *(void *)(v0 + 56) = &type metadata for AlarmAffinityScorer;
  *(void *)(v0 + 64) = &protocol witness table for AlarmAffinityScorer;
  *(void *)(v0 + 40) = 0x80000001BA062810;
  *(void *)(v0 + 96) = &type metadata for AppLaunchAffinityScorer;
  *(void *)(v0 + 104) = &protocol witness table for AppLaunchAffinityScorer;
  *(void *)(v0 + 72) = 0xD00000000000001ELL;
  *(void *)(v0 + 80) = 0x80000001BA062830;
  *(void *)(v0 + 136) = &type metadata for CAMRootFlowAffinityScorer;
  *(void *)(v0 + 144) = &protocol witness table for CAMRootFlowAffinityScorer;
  *(void *)(v0 + 112) = 0xD000000000000020;
  *(void *)(v0 + 120) = 0x80000001BA062850;
  *(void *)(v0 + 176) = &type metadata for CarCommandsAffinityScorer;
  *(void *)(v0 + 184) = &protocol witness table for CarCommandsAffinityScorer;
  *(void *)(v0 + 152) = 0xD00000000000002CLL;
  *(void *)(v0 + 160) = 0x80000001BA062880;
  *(void *)(v0 + 216) = &type metadata for CalendarAffinityScorer;
  *(void *)(v0 + 224) = &protocol witness table for CalendarAffinityScorer;
  *(void *)(v0 + 192) = 0xD000000000000029;
  *(void *)(v0 + 200) = 0x80000001BA0628B0;
  *(void *)(v0 + 256) = &type metadata for ContactsAffinityScorer;
  *(void *)(v0 + 264) = &protocol witness table for ContactsAffinityScorer;
  *(void *)(v0 + 232) = 0xD000000000000029;
  *(void *)(v0 + 240) = 0x80000001BA0628E0;
  *(void *)(v0 + 296) = &type metadata for EmergencyAffinityScorer;
  *(void *)(v0 + 304) = &protocol witness table for EmergencyAffinityScorer;
  *(void *)(v0 + 272) = 0xD000000000000022;
  *(void *)(v0 + 280) = 0x80000001BA062910;
  *(void *)(v0 + 336) = &type metadata for FindMyAffinityScorer;
  *(void *)(v0 + 344) = &protocol witness table for FindMyAffinityScorer;
  *(void *)(v0 + 312) = 0xD000000000000026;
  *(void *)(v0 + 320) = 0x80000001BA062940;
  *(void *)(v0 + 376) = &type metadata for HomeAutomationAffinityScorer;
  *(void *)(v0 + 384) = &protocol witness table for HomeAutomationAffinityScorer;
  *(void *)(v0 + 352) = 0xD00000000000002FLL;
  *(void *)(v0 + 360) = 0x80000001BA062970;
  *(void *)(v0 + 416) = &type metadata for InformationAffinityScorer;
  *(void *)(v0 + 424) = &protocol witness table for InformationAffinityScorer;
  *(void *)(v0 + 392) = 0xD000000000000024;
  *(void *)(v0 + 400) = 0x80000001BA0629A0;
  *(void *)(v0 + 456) = &type metadata for MessagesAffinityScorer;
  *(void *)(v0 + 464) = &protocol witness table for MessagesAffinityScorer;
  *(void *)(v0 + 432) = 0xD000000000000031;
  *(void *)(v0 + 440) = 0x80000001BA0629D0;
  *(_OWORD *)(v0 + 16) = xmmword_1BA0502F0;
  *(void *)(v0 + 496) = &type metadata for NotificationAffinityScorer;
  *(void *)(v0 + 504) = &protocol witness table for NotificationAffinityScorer;
  *(void *)(v0 + 472) = 0xD00000000000002ELL;
  *(void *)(v0 + 480) = 0x80000001BA062A10;
  *(void *)(v0 + 536) = &type metadata for PlaybackControlsAffinityScorer;
  *(void *)(v0 + 544) = &protocol witness table for PlaybackControlsAffinityScorer;
  *(void *)(v0 + 512) = 0xD00000000000002FLL;
  *(void *)(v0 + 520) = 0x80000001BA062A40;
  *(void *)(v0 + 576) = &type metadata for SettingsAffinityScorer;
  *(void *)(v0 + 584) = &protocol witness table for SettingsAffinityScorer;
  *(void *)(v0 + 552) = 0xD000000000000029;
  *(void *)(v0 + 560) = 0x80000001BA062A70;
  *(void *)(v0 + 616) = &type metadata for SiriAudioAffinityScorer;
  *(void *)(v0 + 624) = &protocol witness table for SiriAudioAffinityScorer;
  *(void *)(v0 + 592) = 0xD00000000000002CLL;
  *(void *)(v0 + 600) = 0x80000001BA062AA0;
  *(void *)(v0 + 656) = &type metadata for SiriClockFlowAffinityScorer;
  *(void *)(v0 + 664) = &protocol witness table for SiriClockFlowAffinityScorer;
  *(void *)(v0 + 632) = 0xD00000000000001ELL;
  *(void *)(v0 + 640) = 0x80000001BA062AD0;
  *(void *)(v0 + 696) = &type metadata for SiriLinkFlowAffinityScorer;
  *(void *)(v0 + 704) = &protocol witness table for SiriLinkFlowAffinityScorer;
  *(void *)(v0 + 680) = 0x80000001BA062AF0;
  *(void *)(v0 + 672) = 0xD000000000000021;
  *(void *)(v0 + 736) = &type metadata for SocialConversationAffinityScorer;
  *(void *)(v0 + 744) = &protocol witness table for SocialConversationAffinityScorer;
  *(void *)(v0 + 712) = 0xD000000000000033;
  *(void *)(v0 + 720) = 0x80000001BA062B20;
  *(void *)(v0 + 776) = &type metadata for SystemCommandsAffinityScorer;
  *(void *)(v0 + 784) = &protocol witness table for SystemCommandsAffinityScorer;
  *(void *)(v0 + 752) = 0xD00000000000002FLL;
  *(void *)(v0 + 760) = 0x80000001BA062B60;
  *(void *)(v0 + 816) = &type metadata for PhoneAffinityScorer;
  *(void *)(v0 + 824) = &protocol witness table for PhoneAffinityScorer;
  *(void *)(v0 + 792) = 0xD00000000000002ALL;
  *(void *)(v0 + 800) = 0x80000001BA062B90;
  *(void *)(v0 + 856) = &type metadata for ReaderAffinityScorer;
  *(void *)(v0 + 864) = &protocol witness table for ReaderAffinityScorer;
  *(void *)(v0 + 832) = 0xD00000000000001FLL;
  *(void *)(v0 + 840) = 0x80000001BA062BC0;
  *(void *)(v0 + 896) = &type metadata for TimerAffinityScorer;
  *(void *)(v0 + 904) = &protocol witness table for TimerAffinityScorer;
  *(void *)(v0 + 872) = 0xD000000000000026;
  *(void *)(v0 + 880) = 0x80000001BA062BE0;
  *(void *)(v0 + 936) = &type metadata for TranslationAffinityScorer;
  *(void *)(v0 + 944) = &protocol witness table for TranslationAffinityScorer;
  *(void *)(v0 + 912) = 0xD00000000000002CLL;
  *(void *)(v0 + 920) = 0x80000001BA062C10;
  *(void *)(v0 + 976) = &type metadata for NotebookAffinityScorer;
  *(void *)(v0 + 984) = &protocol witness table for NotebookAffinityScorer;
  *(void *)(v0 + 952) = 0xD000000000000021;
  *(void *)(v0 + 960) = 0x80000001BA062C40;
  *(void *)(v0 + 1016) = &type metadata for HealthAffinityScorer;
  *(void *)(v0 + 1024) = &protocol witness table for HealthAffinityScorer;
  *(void *)(v0 + 992) = 0xD000000000000021;
  *(void *)(v0 + 1000) = 0x80000001BA062C70;
  *(void *)(v0 + 1056) = &type metadata for PhotosAffinityScorer;
  *(void *)(v0 + 1064) = &protocol witness table for PhotosAffinityScorer;
  *(void *)(v0 + 1032) = 0xD000000000000027;
  *(void *)(v0 + 1040) = 0x80000001BA062CA0;
  *(void *)(v0 + 1096) = &type metadata for SiriVideoAffinityScorer;
  *(void *)(v0 + 1104) = &protocol witness table for SiriVideoAffinityScorer;
  *(void *)(v0 + 1072) = 0xD000000000000026;
  *(void *)(v0 + 1080) = 0x80000001BA062CD0;
  *(void *)(v0 + 1136) = &type metadata for SiriSafariAffinityScorer;
  *(void *)(v0 + 1144) = &protocol witness table for SiriSafariAffinityScorer;
  *(void *)(v0 + 1112) = 0xD000000000000027;
  *(void *)(v0 + 1120) = 0x80000001BA062D00;
  uint64_t v22 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 28, 0);
  uint64_t v1 = v22;
  for (uint64_t i = 32; i != 1152; i += 40)
  {
    outlined init with copy of ReferenceResolutionClientProtocol(v0 + i, (uint64_t)&v16);
    uint64_t v3 = v17;
    uint64_t v4 = v18;
    __swift_project_boxed_opaque_existential_1(&v16, v17);
    *(void *)&long long v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
    *((void *)&v19 + 1) = v5;
    outlined init with take of ReferenceResolutionClientProtocol(&v16, (uint64_t)v20);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v22 = v1;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v1 + 16) + 1, 1);
      uint64_t v1 = v22;
    }
    unint64_t v8 = *(void *)(v1 + 16);
    unint64_t v7 = *(void *)(v1 + 24);
    if (v8 >= v7 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      uint64_t v1 = v22;
    }
    *(void *)(v1 + 16) = v8 + 1;
    uint64_t v9 = v1 + 56 * v8;
    long long v10 = v19;
    long long v11 = v20[0];
    long long v12 = v20[1];
    *(void *)(v9 + 80) = v21;
    *(_OWORD *)(v9 + 48) = v11;
    *(_OWORD *)(v9 + 64) = v12;
    *(_OWORD *)(v9 + 32) = v10;
  }
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AffinityScoring);
  swift_arrayDestroy();
  swift_deallocClassInstance();
  if (*(void *)(v1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, AffinityScoring>);
    uint64_t v13 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v13 = MEMORY[0x1E4FBC868];
  }
  *(void *)&long long v19 = v13;
  uint64_t v14 = swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v14, 1, &v19);
  uint64_t result = swift_release();
  static AffinityScorerManager.kAffinityScorers = v19;
  return result;
}

uint64_t *AffinityScorerManager.kAffinityScorers.unsafeMutableAddressor()
{
  if (one-time initialization token for kAffinityScorers != -1) {
    swift_once();
  }
  return &static AffinityScorerManager.kAffinityScorers;
}

uint64_t static AffinityScorerManager.kAffinityScorers.getter()
{
  if (one-time initialization token for kAffinityScorers != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

void *AffinityScorerManager.DefaultAffinityScorer.pommesConfidenceThreshold.unsafeMutableAddressor()
{
  return &static AffinityScorerManager.DefaultAffinityScorer.pommesConfidenceThreshold;
}

double static AffinityScorerManager.DefaultAffinityScorer.pommesConfidenceThreshold.getter()
{
  return 0.5;
}

uint64_t AffinityScorerManager.DefaultAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  return a1;
}

uint64_t AffinityScorerManager.DefaultAffinityScorer.score.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

SiriKitRuntime::AffinityScorerManager::DefaultAffinityScorer __swiftcall AffinityScorerManager.DefaultAffinityScorer.init(score:)(SiriKitRuntime::Affinity score)
{
  uint64_t v2 = (void *)0x80000001BA062780;
  uint64_t v3 = 0xD000000000000023;
  result.bundleIdentifier._object = v2;
  result.bundleIdentifier._uint64_t countAndFlagsBits = v3;
  result.score = score;
  return result;
}

uint64_t AffinityScorerManager.DefaultAffinityScorer.score(input:environment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return specialized AffinityScorerManager.DefaultAffinityScorer.score(input:environment:)(a1, a5);
}

uint64_t protocol witness for AffinityScoring.bundleIdentifier.getter in conformance AffinityScorerManager.DefaultAffinityScorer()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void *AffinityScorerManager.kDefaultScorer.unsafeMutableAddressor()
{
  return &static AffinityScorerManager.kDefaultScorer;
}

unint64_t static AffinityScorerManager.kDefaultScorer.getter()
{
  return 0xD000000000000023;
}

void static AffinityScorerManager.affinityScorer(for:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (one-time initialization token for kAffinityScorers != -1) {
    swift_once();
  }
  uint64_t v6 = static AffinityScorerManager.kAffinityScorers;
  if (*(void *)(static AffinityScorerManager.kAffinityScorers + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if (v8)
    {
      outlined init with copy of ReferenceResolutionClientProtocol(*(void *)(v6 + 56) + 40 * v7, (uint64_t)&v14);
      swift_bridgeObjectRelease();
      if (*((void *)&v15 + 1))
      {
        outlined init with take of ReferenceResolutionClientProtocol(&v14, (uint64_t)v17);
        outlined init with take of ReferenceResolutionClientProtocol(v17, a3);
        return;
      }
    }
    else
    {
      uint64_t v16 = 0;
      long long v14 = 0u;
      long long v15 = 0u;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v16 = 0;
    long long v14 = 0u;
    long long v15 = 0u;
  }
  outlined destroy of AffinityScoring?((uint64_t)&v14);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain_n();
  long long v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    long long v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(void *)&v17[0] = v13;
    *(_DWORD *)long long v12 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)&long long v14 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v10, v11, "No AffinityScorer found for %s, returning default.", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v13, -1, -1);
    MEMORY[0x1BA9E48C0](v12, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  *(void *)(a3 + 24) = &type metadata for AffinityScorerManager.DefaultAffinityScorer;
  *(void *)(a3 + 32) = &protocol witness table for AffinityScorerManager.DefaultAffinityScorer;
  *(void *)a3 = 0xD000000000000023;
  *(void *)(a3 + 8) = 0x80000001BA062780;
  *(unsigned char *)(a3 + 16) = 2;
}

uint64_t Affinity.rawValue.getter(uint64_t result)
{
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Affinity(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Affinity()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Affinity()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Affinity()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Affinity@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized Affinity.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Affinity(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t AffinityScoringAdapter.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t AffinityScoringAdapter.affinityScorer.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AffinityScoringAdapter() + 20);

  return outlined init with copy of ReferenceResolutionClientProtocol(v3, a1);
}

uint64_t AffinityScoringAdapter.init(affinityScorer:)@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  UUID.init()();
  uint64_t v4 = a2 + *(int *)(type metadata accessor for AffinityScoringAdapter() + 20);

  return outlined init with take of ReferenceResolutionClientProtocol(a1, v4);
}

uint64_t AffinityScoringAdapter.score(for:loopCheck:)(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + *(int *)(type metadata accessor for AffinityScoringAdapter() + 20));
  uint64_t v4 = v3[3];
  uint64_t v5 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  type metadata accessor for SiriEnvironment();
  uint64_t v6 = static SiriEnvironment.default.getter();
  unsigned __int8 v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, v6, v4, v5);
  swift_release();
  return v7;
}

uint64_t protocol witness for AffinityScorer.id.getter in conformance AffinityScoringAdapter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, char a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  outlined init with copy of (String, AffinityScoring)(a1 + 32, (uint64_t)&v46);
  uint64_t v7 = v46;
  uint64_t v8 = v47;
  uint64_t v44 = v46;
  uint64_t v45 = v47;
  outlined init with take of ReferenceResolutionClientProtocol(v48, (uint64_t)v43);
  uint64_t v9 = (void *)*a3;
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13)) {
    goto LABEL_23;
  }
  char v15 = v10;
  if (v9[3] >= v14)
  {
    if (a2)
    {
      if (v10) {
        goto LABEL_10;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if (v15) {
        goto LABEL_10;
      }
    }
LABEL_13:
    uint64_t v20 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    uint64_t v21 = (uint64_t *)(v20[6] + 16 * v11);
    *uint64_t v21 = v7;
    v21[1] = v8;
    outlined init with take of ReferenceResolutionClientProtocol(v43, v20[7] + 40 * v11);
    uint64_t v22 = v20[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    _OWORD v20[2] = v24;
    uint64_t v25 = v4 - 1;
    if (!v25)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    uint64_t v26 = a1 + 88;
    while (1)
    {
      outlined init with copy of (String, AffinityScoring)(v26, (uint64_t)&v46);
      uint64_t v27 = v46;
      uint64_t v28 = v47;
      uint64_t v44 = v46;
      uint64_t v45 = v47;
      outlined init with take of ReferenceResolutionClientProtocol(v48, (uint64_t)v43);
      uint64_t v29 = (void *)*a3;
      unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v28);
      uint64_t v32 = v29[2];
      BOOL v33 = (v31 & 1) == 0;
      BOOL v23 = __OFADD__(v32, v33);
      uint64_t v34 = v32 + v33;
      if (v23) {
        break;
      }
      char v35 = v31;
      if (v29[3] < v34)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v34, 1);
        unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v28);
        if ((v35 & 1) != (v36 & 1)) {
          goto LABEL_25;
        }
      }
      if (v35) {
        goto LABEL_10;
      }
      uint64_t v37 = (void *)*a3;
      *(void *)(*a3 + 8 * (v30 >> 6) + 64) |= 1 << v30;
      uint64_t v38 = (uint64_t *)(v37[6] + 16 * v30);
      *uint64_t v38 = v27;
      v38[1] = v28;
      outlined init with take of ReferenceResolutionClientProtocol(v43, v37[7] + 40 * v30);
      uint64_t v39 = v37[2];
      BOOL v23 = __OFADD__(v39, 1);
      uint64_t v40 = v39 + 1;
      if (v23) {
        goto LABEL_24;
      }
      v37[2] = v40;
      v26 += 56;
      if (!--v25) {
        goto LABEL_22;
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a2 & 1);
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
  if ((v15 & 1) == (v17 & 1))
  {
    unint64_t v11 = v16;
    if ((v15 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v18 = (void *)swift_allocError();
    swift_willThrow();
    id v49 = v18;
    id v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v43);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v41._object = (void *)0x80000001BA062D70;
  v41._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v41);
  _print_unlocked<A, B>(_:_:)();
  v42._uint64_t countAndFlagsBits = 39;
  v42._object = (void *)0xE100000000000000;
  String.append(_:)(v42);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t outlined destroy of AffinityScoring?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AffinityScoring?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t specialized Affinity.init(rawValue:)(unint64_t result)
{
  if (result >= 5) {
    return 5;
  }
  return result;
}

uint64_t type metadata accessor for AffinityScoringAdapter()
{
  uint64_t result = type metadata singleton initialization cache for AffinityScoringAdapter;
  if (!type metadata singleton initialization cache for AffinityScoringAdapter) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Affinity and conformance Affinity()
{
  unint64_t result = lazy protocol witness table cache variable for type Affinity and conformance Affinity;
  if (!lazy protocol witness table cache variable for type Affinity and conformance Affinity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Affinity and conformance Affinity);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for AffinityScoringAdapter(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type AffinityScoringAdapter and conformance AffinityScoringAdapter(&lazy protocol witness table cache variable for type AffinityScoringAdapter and conformance AffinityScoringAdapter, (void (*)(uint64_t))type metadata accessor for AffinityScoringAdapter);
  uint64_t result = lazy protocol witness table accessor for type AffinityScoringAdapter and conformance AffinityScoringAdapter(&lazy protocol witness table cache variable for type AffinityScoringAdapter and conformance AffinityScoringAdapter, (void (*)(uint64_t))type metadata accessor for AffinityScoringAdapter);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in AffinityScoringAdapter()
{
  return lazy protocol witness table accessor for type AffinityScoringAdapter and conformance AffinityScoringAdapter(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
}

ValueMetadata *type metadata accessor for AffinityScorerManager()
{
  return &type metadata for AffinityScorerManager;
}

uint64_t initializeBufferWithCopyOfBuffer for AffinityScorerManager.DefaultAffinityScorer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AffinityScorerManager.DefaultAffinityScorer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AffinityScorerManager.DefaultAffinityScorer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AffinityScorerManager.DefaultAffinityScorer(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AffinityScorerManager.DefaultAffinityScorer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AffinityScorerManager.DefaultAffinityScorer()
{
  return &type metadata for AffinityScorerManager.DefaultAffinityScorer;
}

unsigned char *storeEnumTagSinglePayload for Affinity(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *__n128 result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9D839F0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Affinity()
{
  return &type metadata for Affinity;
}

uint64_t dispatch thunk of AffinityScoring.bundleIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AffinityScoring.score(input:environment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t destroy for AffinityScoringAdapter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);

  return __swift_destroy_boxed_opaque_existential_1Tm(v5);
}

uint64_t initializeWithCopy for AffinityScoringAdapter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  long long v8 = *(_OWORD *)(a2 + v7 + 24);
  *(_OWORD *)(a1 + v7 + 24) = v8;
  (**(void (***)(void))(v8 - 8))();
  return a1;
}

uint64_t assignWithCopy for AffinityScoringAdapter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + *(int *)(a3 + 20)), (uint64_t *)(a2 + *(int *)(a3 + 20)));
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    int v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        __n128 result = (uint64_t *)swift_release();
        *int v3 = v12;
      }
      else
      {
        unint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *__n128 result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *int v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t initializeWithTake for AffinityScoringAdapter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  long long v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  return a1;
}

uint64_t assignWithTake for AffinityScoringAdapter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + v7);
  long long v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AffinityScoringAdapter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B9D83F6C);
}

uint64_t sub_1B9D83F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 24);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for AffinityScoringAdapter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B9D84044);
}

uint64_t sub_1B9D84044(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for AffinityScoringAdapter()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t outlined init with copy of (String, AffinityScoring)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, AffinityScoring));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

SiriKitRuntime::AlarmAffinityScorer __swiftcall AlarmAffinityScorer.init()()
{
  uint64_t v0 = (void *)0x80000001BA062810;
  uint64_t v1 = 0xD00000000000001ELL;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t AlarmAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  return a1;
}

uint64_t one-time initialization function for kAppBundleIdMatches()
{
  Swift::Int v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kAppBundleIdMatches);
  uint64_t result = swift_arrayDestroy();
  static AlarmAffinityScorer.kAppBundleIdMatches = v0;
  return result;
}

{
  Swift::Int v0;
  uint64_t result;

  Swift::Int v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kAppBundleIdMatches);
  uint64_t result = swift_arrayDestroy();
  static HomeAutomationAffinityScorer.kAppBundleIdMatches = v0;
  return result;
}

{
  Swift::Int v0;
  uint64_t result;

  Swift::Int v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kAppBundleIdMatches);
  uint64_t result = swift_arrayDestroy();
  static ReaderAffinityScorer.kAppBundleIdMatches = v0;
  return result;
}

{
  Swift::Int v0;
  uint64_t result;

  Swift::Int v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kAppBundleIdMatches);
  uint64_t result = swift_arrayDestroy();
  static TimerAffinityScorer.kAppBundleIdMatches = v0;
  return result;
}

uint64_t *AlarmAffinityScorer.kAppBundleIdMatches.unsafeMutableAddressor()
{
  if (one-time initialization token for kAppBundleIdMatches != -1) {
    swift_once();
  }
  return &static AlarmAffinityScorer.kAppBundleIdMatches;
}

uint64_t static AlarmAffinityScorer.kAppBundleIdMatches.getter()
{
  if (one-time initialization token for kAppBundleIdMatches != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

uint64_t specialized AlarmAffinityScorer.supportedAppIsOnScreen(with:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRDataSourceMetadataValue?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v161 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for RRMetadata();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)v161 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  unint64_t v215 = (char *)v161 - v10;
  uint64_t v213 = type metadata accessor for RRDataSourceMetadataValue();
  uint64_t v11 = *(void *)(v213 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v213);
  uint64_t v165 = (char *)v161 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v176 = (char *)v161 - v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v206 = (char *)v161 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v190 = (char *)v161 - v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v189 = (char *)v161 - v21;
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  unint64_t v178 = (char *)v161 - v23;
  MEMORY[0x1F4188790](v22);
  uint64_t v185 = (char *)v161 - v24;
  uint64_t v211 = type metadata accessor for UsoIdentifier();
  uint64_t v25 = *(void *)(v211 - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v211);
  unint64_t v199 = (char *)v161 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  os_log_type_t v208 = (char *)v161 - v29;
  MEMORY[0x1F4188790](v28);
  unint64_t v214 = (char *)v161 - v30;
  uint64_t v183 = type metadata accessor for RREntity();
  uint64_t v31 = *(void *)(v183 - 8);
  uint64_t v32 = MEMORY[0x1F4188790](v183);
  uint64_t v174 = (char *)v161 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v32);
  uint64_t v175 = (char *)v161 - v34;
  uint64_t v180 = type metadata accessor for RRCandidate();
  MEMORY[0x1F4188790](v180);
  int64_t v187 = (char *)v161 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v173 = *(void *)(a1 + 16);
  if (!v173) {
    return 0;
  }
  uint64_t v37 = v35;
  uint64_t v171 = type metadata accessor for UsoEntity_common_App();
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 16);
  v37 += 16;
  uint64_t v170 = v38;
  uint64_t v169 = a1 + ((*(unsigned __int8 *)(v37 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 64));
  unint64_t v182 = (void (**)(char *, uint64_t))(v31 + 8);
  uint64_t v210 = v25 + 16;
  uint64_t v192 = (void (**)(char *, uint64_t))(v25 + 8);
  uint64_t v194 = v25;
  uint64_t v198 = (uint64_t (**)(char *, char *, uint64_t))(v25 + 32);
  uint64_t v205 = v6 + 16;
  unint64_t v204 = (uint64_t (**)(char *, uint64_t))(v6 + 88);
  int v203 = *MEMORY[0x1E4FA3DB0];
  uint64_t v201 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v200 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  uint64_t v188 = (void (**)(char *, uint64_t))(v6 + 96);
  id v212 = (void (**)(char *, char *, uint64_t))(v11 + 32);
  uint64_t v202 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  unsigned int v166 = *MEMORY[0x1E4FA3DE0];
  uint64_t v177 = (void (**)(char *, void, uint64_t))(v11 + 104);
  uint64_t v184 = v11 + 16;
  uint64_t v191 = v11;
  unint64_t v186 = (void (**)(char *, uint64_t))(v11 + 8);
  unsigned int v162 = *MEMORY[0x1E4FA3DD0];
  uint64_t v167 = (void (**)(char *, uint64_t))(v37 - 8);
  uint64_t v172 = v37;
  uint64_t v168 = *(void *)(v37 + 56);
  v161[1] = a1;
  swift_bridgeObjectRetain();
  uint64_t v39 = 0;
  os_log_type_t v216 = v4;
  uint64_t v197 = v5;
  uint64_t v196 = v6;
  uint64_t v209 = v9;
  uint64_t v40 = v211;
  while (1)
  {
    uint64_t v179 = v39;
    v170(v187, v169 + v168 * v39, v180);
    Swift::String v41 = v175;
    RRCandidate.entity.getter();
    RREntity.usoEntity.getter();
    uint64_t v181 = *v182;
    v181(v41, v183);
    static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
    swift_release();
    uint64_t v42 = v217;
    if (!v217)
    {
      uint64_t v102 = (uint64_t)v216;
      goto LABEL_67;
    }
    swift_retain();
    uint64_t v43 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
    uint64_t result = swift_release();
    uint64_t v45 = MEMORY[0x1E4FBC860];
    uint64_t v218 = MEMORY[0x1E4FBC860];
    unint64_t v195 = *(void *)(v43 + 16);
    if (v195)
    {
      uint64_t v164 = v42;
      unint64_t v46 = 0;
      uint64_t v47 = v194;
      unint64_t v193 = v43;
      while (1)
      {
        if (v46 >= *(void *)(v43 + 16))
        {
          __break(1u);
          goto LABEL_121;
        }
        uint64_t v50 = *(void *)(v47 + 72);
        unint64_t v207 = (*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
        unint64_t v51 = v43 + v207 + v50 * v46;
        Swift::Int v52 = *(void (**)(char *, unint64_t, uint64_t))(v47 + 16);
        v52(v214, v51, v40);
        if (one-time initialization token for kAppBundleIdMatches != -1) {
          swift_once();
        }
        uint64_t v53 = static AlarmAffinityScorer.kAppBundleIdMatches;
        uint64_t v54 = UsoIdentifier.appBundleId.getter();
        uint64_t v56 = v55;
        if (*(void *)(v53 + 16))
        {
          uint64_t v57 = v54;
          Hasher.init(_seed:)();
          String.hash(into:)();
          Swift::Int v58 = Hasher._finalize()();
          uint64_t v59 = -1 << *(unsigned char *)(v53 + 32);
          unint64_t v60 = v58 & ~v59;
          uint64_t v61 = v53 + 56;
          if ((*(void *)(v53 + 56 + ((v60 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v60))
          {
            uint64_t v62 = *(void *)(v53 + 48);
            unint64_t v63 = (void *)(v62 + 16 * v60);
            BOOL v64 = *v63 == v57 && v63[1] == v56;
            if (v64 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
LABEL_27:
              swift_bridgeObjectRelease();
              unint64_t v70 = v208;
              uint64_t v71 = v214;
              uint64_t v72 = v211;
              v52(v208, (unint64_t)v214, v211);
              uint64_t v5 = v197;
LABEL_50:
              (*v192)(v70, v72);
              uint64_t v93 = *v198;
              (*v198)(v199, v71, v72);
              uint64_t v94 = v218;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v94 + 16) + 1, 1);
                uint64_t v94 = v218;
              }
              uint64_t v49 = (uint64_t)v216;
              uint64_t v6 = v196;
              uint64_t v43 = v193;
              unint64_t v96 = *(void *)(v94 + 16);
              unint64_t v95 = *(void *)(v94 + 24);
              if (v96 >= v95 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v95 > 1, v96 + 1, 1);
                uint64_t v94 = v218;
              }
              *(void *)(v94 + 16) = v96 + 1;
              unint64_t v97 = v94 + v207 + v96 * v50;
              uint64_t v40 = v211;
              uint64_t result = v93((char *)v97, v199, v211);
              uint64_t v218 = v94;
              goto LABEL_10;
            }
            uint64_t v65 = ~v59;
            unint64_t v66 = (v60 + 1) & ~v59;
            if ((*(void *)(v61 + ((v66 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v66))
            {
              double v67 = (void *)(v62 + 16 * v66);
              if (*v67 == v57 && v67[1] == v56) {
                goto LABEL_27;
              }
              uint64_t v69 = v65;
              if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
                goto LABEL_27;
              }
              for (unint64_t i = v66 + 1; ; unint64_t i = v74 + 1)
              {
                unint64_t v74 = i & v69;
                if (((*(void *)(v61 + (((i & v69) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v69)) & 1) == 0) {
                  break;
                }
                unint64_t v75 = (void *)(v62 + 16 * v74);
                BOOL v76 = *v75 == v57 && v75[1] == v56;
                if (v76 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                  goto LABEL_27;
                }
              }
            }
          }
        }
        swift_bridgeObjectRelease();
        v52(v208, (unint64_t)v214, v211);
        uint64_t v77 = static AlarmAffinityScorer.kAppBundleIdMatches;
        uint64_t v78 = UsoIdentifier.value.getter();
        uint64_t v80 = v79;
        if (*(void *)(v77 + 16))
        {
          uint64_t v81 = v78;
          Hasher.init(_seed:)();
          String.hash(into:)();
          Swift::Int v82 = Hasher._finalize()();
          uint64_t v83 = -1 << *(unsigned char *)(v77 + 32);
          unint64_t v84 = v82 & ~v83;
          uint64_t v85 = v77 + 56;
          if ((*(void *)(v77 + 56 + ((v84 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v84))
          {
            uint64_t v86 = *(void *)(v77 + 48);
            uint64_t v87 = (void *)(v86 + 16 * v84);
            BOOL v88 = *v87 == v81 && v87[1] == v80;
            if (v88 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
LABEL_49:
              swift_bridgeObjectRelease();
              uint64_t v5 = v197;
              uint64_t v72 = v211;
              unint64_t v70 = v208;
              uint64_t v71 = v214;
              goto LABEL_50;
            }
            uint64_t v89 = ~v83;
            unint64_t v90 = (v84 + 1) & ~v83;
            if ((*(void *)(v85 + ((v90 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v90))
            {
              BOOL v91 = (void *)(v86 + 16 * v90);
              BOOL v92 = *v91 == v81 && v91[1] == v80;
              if (v92 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                goto LABEL_49;
              }
              for (unint64_t j = v90 + 1; ; unint64_t j = v99 + 1)
              {
                unint64_t v99 = j & v89;
                if (((*(void *)(v85 + (((j & v89) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (j & v89)) & 1) == 0) {
                  break;
                }
                uint64_t v100 = (void *)(v86 + 16 * v99);
                BOOL v101 = *v100 == v81 && v100[1] == v80;
                if (v101 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                  goto LABEL_49;
                }
              }
            }
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v48 = *v192;
        uint64_t v40 = v211;
        (*v192)(v208, v211);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v48)(v214, v40);
        uint64_t v49 = (uint64_t)v216;
        uint64_t v5 = v197;
        uint64_t v6 = v196;
        uint64_t v43 = v193;
LABEL_10:
        ++v46;
        uint64_t v9 = v209;
        uint64_t v47 = v194;
        if (v46 == v195)
        {
          uint64_t v45 = v218;
          uint64_t v102 = v49;
          goto LABEL_66;
        }
      }
    }
    uint64_t v102 = (uint64_t)v216;
LABEL_66:
    swift_bridgeObjectRelease();
    uint64_t v103 = *(void *)(v45 + 16);
    swift_release();
    swift_release();
    if (v103) {
      break;
    }
LABEL_67:
    uint64_t v104 = v174;
    RRCandidate.entity.getter();
    uint64_t v105 = RREntity.metadata.getter();
    v181(v104, v183);
    uint64_t v106 = *(void *)(v105 + 16);
    if (v106)
    {
      unint64_t v107 = v105 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
      unint64_t v207 = *(void *)(v6 + 72);
      BOOL v108 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
      unint64_t v195 = v105;
      swift_bridgeObjectRetain();
      unint64_t v109 = MEMORY[0x1E4FBC860];
      do
      {
        uint64_t v110 = v215;
        v108(v215, v107, v5);
        v108(v9, (unint64_t)v110, v5);
        int v111 = (*v204)(v9, v5);
        if (v111 == v203)
        {
          (*v188)(v9, v5);
          uint64_t v112 = v213;
          uint64_t v113 = *v212;
          uint64_t v114 = v190;
          (*v212)(v190, v9, v213);
          v113(v216, v114, v112);
          uint64_t v102 = (uint64_t)v216;
          (*v200)(v216, 0, 1, v112);
          (*v201)(v215, v5);
        }
        else
        {
          uint64_t v115 = *v201;
          (*v201)(v9, v5);
          uint64_t v112 = v213;
          (*v200)((char *)v102, 1, 1, v213);
          v115(v215, v5);
        }
        if ((*v202)(v102, 1, v112) == 1)
        {
          outlined destroy of ReferenceResolutionClientProtocol?(v102, &demangling cache variable for type metadata for RRDataSourceMetadataValue?);
        }
        else
        {
          uint64_t v116 = *v212;
          uint64_t v117 = v189;
          (*v212)(v189, (char *)v102, v112);
          v116(v206, v117, v112);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v109 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v109 + 16) + 1, 1, v109);
          }
          unint64_t v119 = *(void *)(v109 + 16);
          unint64_t v118 = *(void *)(v109 + 24);
          uint64_t v120 = v191;
          uint64_t v102 = (uint64_t)v216;
          if (v119 >= v118 >> 1)
          {
            uint64_t v121 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v118 > 1, v119 + 1, 1, v109);
            uint64_t v120 = v191;
            unint64_t v109 = v121;
          }
          *(void *)(v109 + 16) = v119 + 1;
          v116((char *)(v109+ ((*(unsigned __int8 *)(v120 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v120 + 80))+ *(void *)(v120 + 72) * v119), v206, v213);
          uint64_t v9 = v209;
        }
        v107 += v207;
        --v106;
      }
      while (v106);
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v109 = MEMORY[0x1E4FBC860];
    }
    uint64_t v122 = v213;
    uint64_t v123 = v185;
    uint64_t v124 = *v177;
    (*v177)(v185, v166, v213);
    uint64_t v125 = *(void *)(v109 + 16);
    if (!v125)
    {
      uint64_t v131 = *v186;
      uint64_t v5 = v197;
      goto LABEL_98;
    }
    uint64_t v126 = v191;
    unint64_t v163 = (*(unsigned __int8 *)(v126 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v126 + 80);
    uint64_t v127 = *(void (**)(char *))(v191 + 16);
    uint64_t v128 = v178;
    unint64_t v193 = v109 + v163;
    unint64_t v207 = (unint64_t)v127;
    v127(v178);
    unint64_t v129 = lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue();
    swift_bridgeObjectRetain();
    unint64_t v195 = v129;
    char v130 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v131 = *(void (**)(char *, uint64_t))(v126 + 8);
    v131(v128, v122);
    if (v130)
    {
      swift_bridgeObjectRelease();
      uint64_t v132 = v165;
      unint64_t v133 = v185;
      goto LABEL_101;
    }
    if (v125 == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v5 = v197;
      goto LABEL_97;
    }
    uint64_t v164 = *(void *)(v191 + 72);
    uint64_t v134 = v178;
    ((void (*)(char *, unint64_t, uint64_t))v207)(v178, v193 + v164, v122);
    char v135 = dispatch thunk of static Equatable.== infix(_:_:)();
    v131(v134, v122);
    if ((v135 & 1) == 0)
    {
      if (v125 != 2)
      {
        unint64_t v136 = v109 + v163 + 2 * v164;
        uint64_t v137 = 2;
        while (1)
        {
          uint64_t v138 = v213;
          uint64_t result = ((uint64_t (*)(char *, unint64_t, uint64_t))v207)(v134, v136, v213);
          uint64_t v139 = v137 + 1;
          if (__OFADD__(v137, 1)) {
            break;
          }
          char v140 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v141 = v134;
          char v142 = v140;
          v131(v141, v138);
          if (v142)
          {
            swift_bridgeObjectRelease();
            uint64_t v122 = v213;
            goto LABEL_100;
          }
          ++v137;
          v136 += v164;
          uint64_t v134 = v178;
          if (v139 == v125)
          {
            swift_bridgeObjectRelease();
            uint64_t v5 = v197;
            uint64_t v9 = v209;
            uint64_t v122 = v213;
            goto LABEL_97;
          }
        }
LABEL_121:
        __break(1u);
        goto LABEL_122;
      }
      swift_bridgeObjectRelease();
      uint64_t v5 = v197;
      uint64_t v9 = v209;
LABEL_97:
      uint64_t v123 = v185;
LABEL_98:
      uint64_t v40 = v211;
      v131(v123, v122);
      goto LABEL_4;
    }
    swift_bridgeObjectRelease();
LABEL_100:
    uint64_t v132 = v165;
    unint64_t v133 = v185;
LABEL_101:
    unint64_t v143 = v193;
    v131(v133, v122);
    v124(v176, v162, v122);
    ((void (*)(char *, unint64_t, uint64_t))v207)(v132, v143, v122);
    swift_bridgeObjectRetain();
    char v144 = dispatch thunk of static Equatable.== infix(_:_:)();
    v131(v132, v122);
    uint64_t v5 = v197;
    if ((v144 & 1) == 0)
    {
      if (v125 == 1) {
        goto LABEL_103;
      }
      unint64_t v193 = *(void *)(v191 + 72);
      uint64_t v151 = v165;
      uint64_t v152 = v213;
      ((void (*)(char *, unint64_t, uint64_t))v207)(v165, v143 + v193, v213);
      char v153 = dispatch thunk of static Equatable.== infix(_:_:)();
      v131(v151, v152);
      if ((v153 & 1) == 0)
      {
        if (v125 == 2)
        {
LABEL_103:
          swift_bridgeObjectRelease();
          v131(v176, v213);
          swift_bridgeObjectRelease();
          if (one-time initialization token for kAppBundleIdMatches != -1) {
            swift_once();
          }
          uint64_t v145 = static AlarmAffinityScorer.kAppBundleIdMatches;
          Swift::Int v146 = v175;
          uint64_t v147 = v187;
          RRCandidate.entity.getter();
          uint64_t v148 = RREntity.appBundleId.getter();
          uint64_t v150 = v149;
          v181(v146, v183);
          LOBYTE(v148) = specialized Set.contains(_:)(v148, v150, v145);
          swift_bridgeObjectRelease();
          (*v167)(v147, v180);
          uint64_t v5 = v197;
          uint64_t v6 = v196;
          uint64_t v9 = v209;
          uint64_t v40 = v211;
          if (v148) {
            goto LABEL_117;
          }
          goto LABEL_5;
        }
        unint64_t v154 = v109 + v163 + 2 * v193;
        uint64_t v155 = 2;
        while (1)
        {
          Swift::Int v156 = v165;
          uint64_t v157 = v213;
          uint64_t result = ((uint64_t (*)(char *, unint64_t, uint64_t))v207)(v165, v154, v213);
          uint64_t v158 = v155 + 1;
          if (__OFADD__(v155, 1)) {
            break;
          }
          char v159 = dispatch thunk of static Equatable.== infix(_:_:)();
          v131(v156, v157);
          if (v159) {
            goto LABEL_3;
          }
          ++v155;
          v154 += v193;
          if (v158 == v125) {
            goto LABEL_103;
          }
        }
LABEL_122:
        __break(1u);
        return result;
      }
    }
LABEL_3:
    swift_bridgeObjectRelease();
    v131(v176, v213);
    uint64_t v9 = v209;
    uint64_t v40 = v211;
LABEL_4:
    swift_bridgeObjectRelease();
    (*v167)(v187, v180);
    uint64_t v6 = v196;
LABEL_5:
    uint64_t v39 = v179 + 1;
    if (v179 + 1 == v173)
    {
      uint64_t v160 = 0;
      goto LABEL_118;
    }
  }
  (*v167)(v187, v180);
LABEL_117:
  uint64_t v160 = 1;
LABEL_118:
  swift_bridgeObjectRelease();
  return v160;
}

uint64_t specialized AlarmAffinityScorer.priorityForSharedTask(_:environment:)()
{
  uint64_t v50 = type metadata accessor for RREntity();
  uint64_t v0 = *(void *)(v50 - 8);
  MEMORY[0x1F4188790](v50);
  uint64_t v49 = (char *)&v42 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for RRCandidate();
  uint64_t v51 = *(void *)(v2 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  uint64_t v48 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v42 - v5;
  static UsoTask_CodegenConverter.convert(task:)();
  outlined init with copy of Any?((uint64_t)v57, (uint64_t)&v54);
  if (v56)
  {
    type metadata accessor for UsoTask_noVerb_uso_NoEntity();
    if (swift_dynamicCast())
    {
      swift_release();
LABEL_28:
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v57, (uint64_t *)&demangling cache variable for type metadata for Any?);
      return 2;
    }
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v54, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  uint64_t v54 = UsoTask.baseEntityAsString.getter();
  uint64_t v55 = v7;
  strcpy((char *)v53, "uso_NoEntity");
  BYTE5(v53[1]) = 0;
  HIWORD(v53[1]) = -5120;
  unint64_t v47 = lazy protocol witness table accessor for type String and conformance String();
  char v8 = StringProtocol.contains<A>(_:)();
  swift_bridgeObjectRelease();
  if ((v8 & 1) == 0) {
    goto LABEL_28;
  }
  SiriEnvironment.salientEntitiesProvider.getter();
  uint64_t v9 = dispatch thunk of SalientEntitiesDataProvider.salientEntities.getter();
  swift_release();
  uint64_t v10 = MEMORY[0x1E4FBC860];
  uint64_t v52 = MEMORY[0x1E4FBC860];
  uint64_t v11 = *(void *)(v9 + 16);
  swift_bridgeObjectRetain();
  uint64_t v43 = v2;
  uint64_t v46 = v11;
  if (v11)
  {
    unint64_t v12 = 0;
    uint64_t v13 = (void (**)(char *, uint64_t))(v0 + 8);
    uint64_t v42 = (void (**)(char *, uint64_t))(v51 + 8);
    uint64_t v44 = (void (**)(char *, char *, uint64_t))(v51 + 32);
    uint64_t v45 = v51 + 16;
    while (v12 < *(void *)(v9 + 16))
    {
      unint64_t v14 = (*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
      uint64_t v15 = *(void *)(v51 + 72);
      uint64_t v16 = v9;
      (*(void (**)(char *, unint64_t, uint64_t))(v51 + 16))(v6, v9 + v14 + v15 * v12, v2);
      uint64_t v17 = v49;
      RRCandidate.entity.getter();
      RREntity.usoEntity.getter();
      (*v13)(v17, v50);
      uint64_t v18 = UsoTask.verbString.getter();
      uint64_t v20 = v19;
      swift_release();
      uint64_t v54 = v18;
      uint64_t v55 = v20;
      strcpy((char *)v53, "common_Alarm");
      BYTE5(v53[1]) = 0;
      HIWORD(v53[1]) = -5120;
      char v21 = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      if (v21)
      {
        uint64_t v22 = *v44;
        (*v44)(v48, v6, v2);
        uint64_t v23 = v52;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v23 + 16) + 1, 1);
          uint64_t v23 = v52;
        }
        unint64_t v25 = *(void *)(v23 + 16);
        unint64_t v24 = *(void *)(v23 + 24);
        if (v25 >= v24 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
          uint64_t v23 = v52;
        }
        *(void *)(v23 + 16) = v25 + 1;
        unint64_t v26 = v23 + v14 + v25 * v15;
        uint64_t v2 = v43;
        v22((char *)v26, v48, v43);
        uint64_t v52 = v23;
      }
      else
      {
        (*v42)(v6, v2);
      }
      ++v12;
      uint64_t v9 = v16;
      if (v46 == v12)
      {
        uint64_t v10 = v52;
        goto LABEL_18;
      }
    }
    __break(1u);
    goto LABEL_33;
  }
LABEL_18:
  swift_bridgeObjectRelease();
  if (*(void *)(v10 + 16))
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for executor == -1)
    {
LABEL_20:
      uint64_t v27 = type metadata accessor for Logger();
      __swift_project_value_buffer(v27, (uint64_t)static Logger.executor);
      swift_retain();
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = (uint8_t *)swift_slowAlloc();
        uint64_t v31 = swift_slowAlloc();
        uint64_t v54 = v31;
        *(_DWORD *)uint64_t v30 = 136315138;
        uint64_t v32 = swift_retain();
        uint64_t v33 = MEMORY[0x1BA9E3080](v32, v43);
        unint64_t v35 = v34;
        swift_release();
        v53[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v35, &v54);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v28, v29, "AlarmAffinityScorer found salient alarm entities %s", v30, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v31, -1, -1);
        MEMORY[0x1BA9E48C0](v30, -1, -1);
      }
      else
      {
        swift_release_n();
      }

      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v57, (uint64_t *)&demangling cache variable for type metadata for Any?);
      return 3;
    }
LABEL_33:
    swift_once();
    goto LABEL_20;
  }
  swift_release();
  char v36 = specialized AlarmAffinityScorer.supportedAppIsOnScreen(with:)(v9);
  swift_bridgeObjectRelease();
  if (v36)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static Logger.executor);
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl(&dword_1B9C64000, v38, v39, "AlarmAffinityScorer found commonApp entity with Clock/NanoAlarm bundle ID", v40, 2u);
      MEMORY[0x1BA9E48C0](v40, -1, -1);
    }

    goto LABEL_28;
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v57, (uint64_t *)&demangling cache variable for type metadata for Any?);
  return 0;
}

uint64_t specialized AlarmAffinityScorer.score(input:environment:)()
{
  uint64_t v0 = type metadata accessor for Parse();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for USOParse();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v1 + 88))(v3, v0) == *MEMORY[0x1E4FA1F48])
  {
    (*(void (**)(char *, uint64_t))(v1 + 96))(v3, v0);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
    if (specialized static AffinityScorerUtils.getTask(_:)())
    {
      void v26[2] = UsoTask.baseEntityAsString.getter();
      uint64_t v26[3] = v8;
      v26[0] = 0x6D72616C41;
      v26[1] = 0xE500000000000000;
      lazy protocol witness table accessor for type String and conformance String();
      char v9 = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      if (v9)
      {
        if (specialized static AlarmAffinityScorer.isCreateAlarmTaskWithRelativeOffset(task:)())
        {
          if (one-time initialization token for executor != -1) {
            swift_once();
          }
          uint64_t v10 = type metadata accessor for Logger();
          __swift_project_value_buffer(v10, (uint64_t)static Logger.executor);
          uint64_t v11 = Logger.logObject.getter();
          os_log_type_t v12 = static os_log_type_t.debug.getter();
          if (!os_log_type_enabled(v11, v12)) {
            goto LABEL_25;
          }
          uint64_t v13 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v13 = 0;
          unint64_t v14 = "AlarmAffinityScorer Task is \"Create Alarm\" with a relative offset duration – alarm should not take a f"
                "irst pass; timer should handle first";
        }
        else
        {
          if (one-time initialization token for executor != -1) {
            swift_once();
          }
          uint64_t v24 = type metadata accessor for Logger();
          __swift_project_value_buffer(v24, (uint64_t)static Logger.executor);
          uint64_t v11 = Logger.logObject.getter();
          os_log_type_t v12 = static os_log_type_t.debug.getter();
          if (!os_log_type_enabled(v11, v12)) {
            goto LABEL_25;
          }
          uint64_t v13 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v13 = 0;
          unint64_t v14 = "AlarmAffinityScorer Task contains \"Alarm\" – using .default affinity";
        }
        _os_log_impl(&dword_1B9C64000, v11, v12, v14, v13, 2u);
        MEMORY[0x1BA9E48C0](v13, -1, -1);
LABEL_25:

        swift_release();
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        return 2;
      }
      uint64_t v18 = specialized AlarmAffinityScorer.priorityForSharedTask(_:environment:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    else
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      __swift_project_value_buffer(v20, (uint64_t)static Logger.executor);
      char v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v23 = 0;
        _os_log_impl(&dword_1B9C64000, v21, v22, "AlarmAffinityScorer Could not extract usoTask from parse", v23, 2u);
        MEMORY[0x1BA9E48C0](v23, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      return 0;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v16, v17))
    {

      return 2;
    }
    uint64_t v18 = 2;
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl(&dword_1B9C64000, v16, v17, "AlarmAffinityScorer Not a USO parse – .default", v19, 2u);
    MEMORY[0x1BA9E48C0](v19, -1, -1);
  }
  return v18;
}

uint64_t getEnumTagSinglePayload for AlarmAffinityScorer(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AlarmAffinityScorer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AlarmAffinityScorer()
{
  return &type metadata for AlarmAffinityScorer;
}

unint64_t lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue()
{
  unint64_t result = lazy protocol witness table cache variable for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue;
  if (!lazy protocol witness table cache variable for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue)
  {
    type metadata accessor for RRDataSourceMetadataValue();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue);
  }
  return result;
}

void one-time initialization function for forceEnabled()
{
  static AmbiguityFeatureFlags.forceEnabled = MEMORY[0x1E4FBC868];
}

{
  static SydneyConversationFeatureFlags.forceEnabled = MEMORY[0x1E4FBC868];
}

{
  static SiriKitFlowFeatureFlagDefinitions.forceEnabled = MEMORY[0x1E4FBC868];
}

{
  static SiriPlaybackControlFeature.forceEnabled = MEMORY[0x1E4FBC868];
}

{
  static SiriPhoneFeature.forceEnabled = MEMORY[0x1E4FBC868];
}

{
  static LinkFeature.forceEnabled = MEMORY[0x1E4FBC868];
}

uint64_t *AmbiguityFeatureFlags.forceEnabled.unsafeMutableAddressor()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  return &static AmbiguityFeatureFlags.forceEnabled;
}

uint64_t static AmbiguityFeatureFlags.forceEnabled.getter()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static AmbiguityFeatureFlags.forceEnabled.setter(uint64_t a1)
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  static AmbiguityFeatureFlags.forceEnabled = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static AmbiguityFeatureFlags.forceEnabled.modify())()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

const char *AmbiguityFeatureFlags.domain.getter()
{
  return "SiriKitRuntime";
}

const char *AmbiguityFeatureFlags.feature.getter(char a1)
{
  if (!a1) {
    return "affinity_scoring_v2";
  }
  if (a1 == 1) {
    return "input_paraphrasing_flows";
  }
  return "app_shortcuts_omitting_app_name";
}

BOOL static AmbiguityFeatureFlags.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void AmbiguityFeatureFlags.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int AmbiguityFeatureFlags.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance AmbiguityFeatureFlags()
{
  return "SiriKitRuntime";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance AmbiguityFeatureFlags()
{
  uint64_t v1 = "input_paraphrasing_flows";
  if (*v0 != 1) {
    uint64_t v1 = "app_shortcuts_omitting_app_name";
  }
  if (*v0) {
    return v1;
  }
  else {
    return "affinity_scoring_v2";
  }
}

uint64_t protocol witness for static FeatureToggle.forceEnabled.getter in conformance AmbiguityFeatureFlags()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static FeatureToggle.forceEnabled.setter in conformance AmbiguityFeatureFlags(uint64_t a1)
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  static AmbiguityFeatureFlags.forceEnabled = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags())()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

unint64_t instantiation function for generic protocol witness table for AmbiguityFeatureFlags(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AmbiguityFeatureFlags and conformance AmbiguityFeatureFlags();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for AmbiguityFeatureFlags(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AmbiguityFeatureFlags(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9D86DC0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AmbiguityFeatureFlags()
{
  return &type metadata for AmbiguityFeatureFlags;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriNLUTypes0D23_Nlu_External_UserParseVG_Sds5NeverOTg504_s14d62KitRuntime16AmbiguityServiceC17findBestActionFor21conversationh260Input0j6HelperL00jM016actionCandidates02rrO08fallback20previousConversation11inputOriginAA0dE8ResponseVSgAA0skL0C_AA0smL0VAA0sM0CSay0A3Cam0H9CandidateVGSay0A28ReferenceResolutionDataModel11RRCandidateVG0aB4Flow0L0VAA06RemoteS6ClientCSgSStYaKFSd0A8NLUTypes0a14_f1_g3_K5I56Vcfu_33_8b0e7d0ff9134e4aee37f7deef662011A10_SdTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v12 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v12;
    uint64_t v4 = *(void *)(type metadata accessor for Siri_Nlu_External_UserParse() - 8);
    uint64_t v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v6 = *(void *)(v4 + 72);
    do
    {
      Siri_Nlu_External_UserParse.comparableProbability.getter();
      uint64_t v8 = v7;
      unint64_t v10 = *(void *)(v12 + 16);
      unint64_t v9 = *(void *)(v12 + 24);
      if (v10 >= v9 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
      }
      *(void *)(v12 + 16) = v10 + 1;
      *(void *)(v12 + 8 * v10 + 32) = v8;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t AmbiguityServiceResponse.correctionsOutput.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1, a1, &demangling cache variable for type metadata for Input?);
}

uint64_t AmbiguityServiceResponse.ambiguityOutput.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AmbiguityServiceResponse(0);
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + *(int *)(v3 + 20), a1, &demangling cache variable for type metadata for AmbiguityOutput?);
}

uint64_t AmbiguityServiceResponse.topParse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AmbiguityServiceResponse(0) + 24);
  uint64_t v4 = type metadata accessor for Parse();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t AmbiguityServiceResponse.init(correctionsOutput:ambiguityOutput:topParse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a1, a4, &demangling cache variable for type metadata for Input?);
  uint64_t v7 = type metadata accessor for AmbiguityServiceResponse(0);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a2, a4 + *(int *)(v7 + 20), &demangling cache variable for type metadata for AmbiguityOutput?);
  uint64_t v8 = a4 + *(int *)(v7 + 24);
  uint64_t v9 = type metadata accessor for Parse();
  unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32);

  return v10(v8, a3, v9);
}

void *AmbiguityService.kPommesQueryConfidenceThreshold.unsafeMutableAddressor()
{
  return &static AmbiguityService.kPommesQueryConfidenceThreshold;
}

double static AmbiguityService.kPommesQueryConfidenceThreshold.getter()
{
  return 0.7;
}

uint64_t AmbiguityService.__allocating_init(correctionsService:camBridge:)(uint64_t a1, long long *a2)
{
  uint64_t v4 = swift_allocObject();
  type metadata accessor for ServerFallbackDisablingUtils();
  uint64_t v5 = (void *)swift_allocObject();
  _OWORD v5[2] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
  v5[3] = closure #1 in default argument 5 of ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:);
  v5[4] = 0;
  *(void *)(v4 + 64) = v5;
  *(void *)(v4 + 16) = a1;
  outlined init with take of ReferenceResolutionClientProtocol(a2, v4 + 24);
  return v4;
}

uint64_t AmbiguityService.init(correctionsService:camBridge:)(uint64_t a1, long long *a2)
{
  type metadata accessor for ServerFallbackDisablingUtils();
  uint64_t v5 = (void *)swift_allocObject();
  _OWORD v5[2] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
  v5[3] = closure #1 in default argument 5 of ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:);
  v5[4] = 0;
  *(void *)(v2 + 64) = v5;
  *(void *)(v2 + 16) = a1;
  outlined init with take of ReferenceResolutionClientProtocol(a2, v2 + 24);
  return v2;
}

Swift::Void __swiftcall AmbiguityService.newSessionStarted()()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  __swift_project_boxed_opaque_existential_1(v0 + 3, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);

  swift_release();
}

uint64_t AmbiguityService.newTurnStarted(executionUUID:)(uint64_t a1)
{
  uint64_t v3 = v1[6];
  uint64_t v4 = v1[7];
  __swift_project_boxed_opaque_existential_1(v1 + 3, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 64))(a1, v3, v4);
  uint64_t v5 = (void *)v1[2];
  uint64_t v6 = v5[5];
  uint64_t v7 = v5[6];
  __swift_project_boxed_opaque_existential_1(v5 + 2, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 8))(a1, v6, v7);
}

uint64_t AmbiguityService.getDefaultResponse(input:conversationUserInput:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v29 = a3;
  uint64_t v5 = type metadata accessor for Parse();
  uint64_t v27 = *(void *)(v5 - 8);
  uint64_t v28 = v5;
  MEMORY[0x1F4188790](v5);
  unint64_t v26 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AmbiguityOutput?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v26 - v14;
  uint64_t v16 = type metadata accessor for Input();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  CorrectionsService.getCorrectionsAction(input:conversationUserInput:)(a1, a2, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v15, &demangling cache variable for type metadata for Input?);
    uint64_t v20 = type metadata accessor for AmbiguityServiceResponse(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v29, 1, 1, v20);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v19, v15, v16);
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v13, v19, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
    uint64_t v22 = type metadata accessor for AmbiguityOutput(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v9, 1, 1, v22);
    uint64_t v23 = v26;
    Input.parse.getter();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    uint64_t v24 = v29;
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v13, v29, &demangling cache variable for type metadata for Input?);
    uint64_t v25 = type metadata accessor for AmbiguityServiceResponse(0);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v9, v24 + *(int *)(v25 + 20), &demangling cache variable for type metadata for AmbiguityOutput?);
    (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(v24 + *(int *)(v25 + 24), v23, v28);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 0, 1, v25);
  }
}

int64_t specialized Sequence<>.max()(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  int64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = v1 - 1;
  if (v1 != 1)
  {
    if (v1 >= 5)
    {
      unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFFCLL | 1;
      int64x2_t v5 = vdupq_n_s64(v2);
      uint64_t v6 = (int64x2_t *)(a1 + 56);
      unint64_t v7 = v3 & 0xFFFFFFFFFFFFFFFCLL;
      int64x2_t v8 = v5;
      do
      {
        int64x2_t v5 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v5, v6[-1]), (int8x16_t)v5, (int8x16_t)v6[-1]);
        int64x2_t v8 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v8, *v6), (int8x16_t)v8, *(int8x16_t *)v6);
        v6 += 2;
        v7 -= 4;
      }
      while (v7);
      int8x16_t v9 = vbslq_s8((int8x16_t)vcgtq_s64(v5, v8), (int8x16_t)v5, (int8x16_t)v8);
      uint64_t v10 = vextq_s8(v9, v9, 8uLL).u64[0];
      int64_t v2 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v9.i64[0], v10), *(int8x8_t *)v9.i8, (int8x8_t)v10);
      if (v3 == (v3 & 0xFFFFFFFFFFFFFFFCLL)) {
        return v2;
      }
    }
    else
    {
      unint64_t v4 = 1;
    }
    unint64_t v11 = v1 - v4;
    uint64_t v12 = (int64_t *)(a1 + 8 * v4 + 32);
    do
    {
      int64_t v14 = *v12++;
      int64_t v13 = v14;
      if (v2 <= v14) {
        int64_t v2 = v13;
      }
      --v11;
    }
    while (v11);
  }
  return v2;
}

uint64_t AmbiguityService.deinit()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24);
  swift_release();
  return v0;
}

uint64_t AmbiguityService.__deallocating_deinit()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for AmbiguityServiceProviding.newSessionStarted() in conformance AmbiguityService()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  uint64_t v2 = *(void *)(*(void *)v0 + 56);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)v0 + 24), v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);

  return swift_release();
}

uint64_t *initializeBufferWithCopyOfBuffer for AmbiguityServiceResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Input();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v11 = *(int *)(a3 + 20);
    uint64_t v12 = (uint64_t *)((char *)a1 + v11);
    int64_t v13 = (uint64_t *)((char *)a2 + v11);
    uint64_t v14 = type metadata accessor for AmbiguityOutput(0);
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AmbiguityOutput?);
      memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v12, v13, v7);
      }
      else
      {
        *uint64_t v12 = *v13;
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    uint64_t v17 = *(int *)(a3 + 24);
    uint64_t v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    uint64_t v20 = type metadata accessor for Parse();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
  }
  return a1;
}

char *initializeWithCopy for AmbiguityServiceResponse(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Input();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for AmbiguityOutput(0);
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AmbiguityOutput?);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
    }
    else
    {
      *(void *)uint64_t v10 = *(void *)v11;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = type metadata accessor for Parse();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

char *assignWithCopy for AmbiguityServiceResponse(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Input();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  uint64_t v27 = v7;
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3;
  uint64_t v13 = *(int *)(a3 + 20);
  uint64_t v14 = &a1[v13];
  uint64_t v15 = a2;
  uint64_t v16 = &a2[v13];
  uint64_t v17 = type metadata accessor for AmbiguityOutput(0);
  uint64_t v28 = *(void *)(v17 - 8);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  int v19 = v18(v14, 1, v17);
  int v20 = v18(v16, 1, v17);
  if (v19)
  {
    if (!v20)
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v14, v16, v6);
      }
      else
      {
        *(void *)uint64_t v14 = *(void *)v16;
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v14, 0, 1, v17);
      goto LABEL_21;
    }
LABEL_13:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AmbiguityOutput?);
    memcpy(v14, v16, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_21;
  }
  if (v20)
  {
    outlined destroy of CamOutput((uint64_t)v14, type metadata accessor for AmbiguityOutput);
    goto LABEL_13;
  }
  if (a1 != v15)
  {
    outlined destroy of CamOutput((uint64_t)v14, type metadata accessor for AmbiguityOutput);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v14, v16, v6);
    }
    else
    {
      *(void *)uint64_t v14 = *(void *)v16;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_21:
  uint64_t v22 = *(int *)(v12 + 24);
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &v15[v22];
  uint64_t v25 = type metadata accessor for Parse();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 24))(v23, v24, v25);
  return a1;
}

char *initializeWithTake for AmbiguityServiceResponse(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Input();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = *(int *)(a3 + 20);
  int v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for AmbiguityOutput(0);
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AmbiguityOutput?);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v10, v11, *(void *)(v13 + 64));
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = type metadata accessor for Parse();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
  return a1;
}

char *assignWithTake for AmbiguityServiceResponse(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Input();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  uint64_t v27 = v7;
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3;
  uint64_t v13 = *(int *)(a3 + 20);
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = type metadata accessor for AmbiguityOutput(0);
  uint64_t v28 = *(void *)(v16 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  int v18 = v17(v14, 1, v16);
  int v19 = v17(v15, 1, v16);
  if (!v18)
  {
    if (!v19)
    {
      if (a1 == a2) {
        goto LABEL_21;
      }
      outlined destroy of CamOutput((uint64_t)v14, type metadata accessor for AmbiguityOutput);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v14, v15, v6);
        swift_storeEnumTagMultiPayload();
        goto LABEL_21;
      }
      size_t v21 = *(void *)(v28 + 64);
      goto LABEL_14;
    }
    outlined destroy of CamOutput((uint64_t)v14, type metadata accessor for AmbiguityOutput);
LABEL_13:
    size_t v21 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AmbiguityOutput?)
                                - 8)
                    + 64);
LABEL_14:
    memcpy(v14, v15, v21);
    goto LABEL_21;
  }
  if (v19) {
    goto LABEL_13;
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v14, v15, v6);
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = v28;
  }
  else
  {
    uint64_t v20 = v28;
    memcpy(v14, v15, *(void *)(v28 + 64));
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v14, 0, 1, v16);
LABEL_21:
  uint64_t v22 = *(int *)(v12 + 24);
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = type metadata accessor for Parse();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 40))(v23, v24, v25);
  return a1;
}

uint64_t sub_1B9D8884C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AmbiguityOutput?);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  uint64_t v14 = type metadata accessor for Parse();
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + *(int *)(a3 + 24);

  return v15(v17, a2, v16);
}

uint64_t sub_1B9D889A0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AmbiguityOutput?);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  uint64_t v16 = type metadata accessor for Parse();
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a4 + 24);

  return v17(v19, a2, a2, v18);
}

void type metadata completion function for AmbiguityServiceResponse()
{
  type metadata accessor for Input?(319, (unint64_t *)&lazy cache variable for type metadata for Input?, MEMORY[0x1E4FA1EE0]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Input?(319, &lazy cache variable for type metadata for AmbiguityOutput?, (void (*)(uint64_t))type metadata accessor for AmbiguityOutput);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Parse();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void type metadata accessor for Input?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void *assignWithCopy for AmbiguityOutput(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of CamOutput((uint64_t)a1, type metadata accessor for AmbiguityOutput);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for Input();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for AmbiguityOutput(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for Input();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for AmbiguityOutput(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of CamOutput((uint64_t)a1, type metadata accessor for AmbiguityOutput);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for Input();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AmbiguityOutput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for AmbiguityOutput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t destructiveInjectEnumTag for AmbiguityOutput()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for AmbiguityOutput()
{
  uint64_t result = type metadata accessor for Input();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for AmbiguityService()
{
  return self;
}

uint64_t method lookup function for AmbiguityService(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AmbiguityService);
}

uint64_t dispatch thunk of AmbiguityService.__allocating_init(correctionsService:camBridge:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of AmbiguityServiceProviding.newSessionStarted()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AmbiguityServiceProviding.newTurnStarted(executionUUID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of AmbiguityServiceProviding.createRankedInput(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of AmbiguityServiceProviding.findBestActionFor(conversationUserInput:conversationHelperInput:conversationHelper:actionCandidates:rrCandidates:fallback:previousConversation:inputOrigin:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a12 + 32) + **(int **)(a12 + 32));
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v12 + 16) = v18;
  *uint64_t v18 = v12;
  v18[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v20(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t AnnounceContext.activeTasks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AnnounceContext.executedTasks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AnnounceContext.__allocating_init(activeTasks:executedTasks:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t AnnounceContext.init(activeTasks:executedTasks:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return v2;
}

uint64_t AnnounceContext.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t method lookup function for AnnounceContext(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AnnounceContext);
}

uint64_t dispatch thunk of AnnounceContext.__allocating_init(activeTasks:executedTasks:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return v2 & 1;
  }
  if (*(unsigned char *)(a2 + 32) == (result & 1)) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  uint64_t v3 = 33;
  while (1)
  {
    uint64_t v4 = v3 - 31;
    if (__OFADD__(v3 - 32, 1)) {
      break;
    }
    char v5 = *(unsigned char *)(a2 + v3) ^ result;
    if (v5)
    {
      ++v3;
      if (v4 != v2) {
        continue;
      }
    }
    LOBYTE(v2) = v5 ^ 1;
    return v2 & 1;
  }
  __break(1u);
  return result;
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xE900000000000074;
  uint64_t v3 = 0x6E656469666E6F63;
  uint64_t v4 = a1;
  uint64_t v5 = 0x6E656469666E6F63;
  unint64_t v6 = 0xE900000000000074;
  switch(v4)
  {
    case 1:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v5 = 0x6E776F6E6BLL;
      break;
    case 2:
      unint64_t v6 = 0xE700000000000000;
      uint64_t v5 = 0x31657275736E75;
      break;
    case 3:
      unint64_t v6 = 0xE700000000000000;
      uint64_t v5 = 0x4E657275736E75;
      break;
    case 4:
      unint64_t v6 = 0xE700000000000000;
      uint64_t v5 = 0x6E776F6E6B6E75;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xE500000000000000;
      if (v5 == 0x6E776F6E6BLL) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v2 = 0xE700000000000000;
      if (v5 != 0x31657275736E75) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v2 = 0xE700000000000000;
      uint64_t v3 = 0x4E657275736E75;
      goto LABEL_12;
    case 4:
      unint64_t v2 = 0xE700000000000000;
      if (v5 != 0x6E776F6E6B6E75) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v3) {
        goto LABEL_16;
      }
LABEL_13:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  const char *v6;
  const char *v7;
  unint64_t v8;
  const char *v9;
  const char *v10;
  char v11;

  unint64_t v2 = 0xD000000000000016;
  uint64_t v3 = 0x80000001BA060D10;
  uint64_t v4 = a1;
  uint64_t v5 = 0xD000000000000016;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0xD000000000000021;
      unint64_t v6 = "overrideMitigatorForEmergencyCall";
      goto LABEL_10;
    case 2:
      uint64_t v5 = 0xD000000000000023;
      unint64_t v6 = "overrideMitigatorForIntercomRequest";
      goto LABEL_10;
    case 3:
      char v7 = "overrideMitigatorForServerFallback";
      goto LABEL_6;
    case 4:
      char v7 = "validIntentForTriggerLessFollowups";
LABEL_6:
      uint64_t v3 = (unint64_t)(v7 - 32) | 0x8000000000000000;
      uint64_t v5 = 0xD000000000000022;
      break;
    case 5:
      uint64_t v5 = 0xD000000000000017;
      unint64_t v6 = "isOfflineServerFallback";
      goto LABEL_10;
    case 6:
      uint64_t v5 = 0x5253417974706D65;
      uint64_t v3 = 0xEC000000656C7552;
      break;
    case 7:
      uint64_t v5 = 0xD00000000000001BLL;
      unint64_t v6 = "waitUniversalActionOverride";
LABEL_10:
      uint64_t v3 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      break;
    case 8:
      uint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1701736302;
      break;
    default:
      break;
  }
  uint64_t v8 = 0x80000001BA060D10;
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xD000000000000021;
      uint64_t v9 = "overrideMitigatorForEmergencyCall";
      goto LABEL_23;
    case 2:
      unint64_t v2 = 0xD000000000000023;
      uint64_t v9 = "overrideMitigatorForIntercomRequest";
      goto LABEL_23;
    case 3:
      uint64_t v10 = "overrideMitigatorForServerFallback";
      goto LABEL_17;
    case 4:
      uint64_t v10 = "validIntentForTriggerLessFollowups";
LABEL_17:
      uint64_t v8 = (unint64_t)(v10 - 32) | 0x8000000000000000;
      if (v5 != 0xD000000000000022) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 5:
      unint64_t v2 = 0xD000000000000017;
      uint64_t v9 = "isOfflineServerFallback";
      goto LABEL_23;
    case 6:
      uint64_t v8 = 0xEC000000656C7552;
      if (v5 != 0x5253417974706D65) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 7:
      unint64_t v2 = 0xD00000000000001BLL;
      uint64_t v9 = "waitUniversalActionOverride";
LABEL_23:
      uint64_t v8 = (unint64_t)(v9 - 32) | 0x8000000000000000;
      goto LABEL_24;
    case 8:
      uint64_t v8 = 0xE400000000000000;
      if (v5 != 1701736302) {
        goto LABEL_28;
      }
      goto LABEL_25;
    default:
LABEL_24:
      if (v5 != v2) {
        goto LABEL_28;
      }
LABEL_25:
      if (v3 == v8) {
        uint64_t v11 = 1;
      }
      else {
LABEL_28:
      }
        uint64_t v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v11 & 1;
  }
}

{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  unint64_t v2 = 0xD000000000000012;
  uint64_t v3 = 0x80000001BA060AC0;
  uint64_t v4 = a1;
  uint64_t v5 = 0xD000000000000012;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x75716552746F6F72;
      uint64_t v3 = 0xED00006449747365;
      break;
    case 2:
      uint64_t v5 = 0x496E6F6973736573;
      uint64_t v3 = 0xE900000000000064;
      break;
    case 3:
      uint64_t v5 = 0x456F547061547369;
      uint64_t v3 = 0xEB00000000746964;
      break;
    case 4:
      uint64_t v5 = 0x616E4558554D7369;
      uint64_t v3 = 0xEC00000064656C62;
      break;
    default:
      break;
  }
  unint64_t v6 = 0x80000001BA060AC0;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xED00006449747365;
      if (v5 == 0x75716552746F6F72) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v6 = 0xE900000000000064;
      if (v5 != 0x496E6F6973736573) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v2 = 0x456F547061547369;
      unint64_t v6 = 0xEB00000000746964;
      goto LABEL_12;
    case 4:
      unint64_t v6 = 0xEC00000064656C62;
      if (v5 != 0x616E4558554D7369) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v2) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  const char *v6;
  const char *v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  const char *v11;
  char v12;

  unint64_t v2 = 0x7365737261506C6ELL;
  uint64_t v3 = 0xE800000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x7365737261506C6ELL;
  switch(v4)
  {
    case 1:
      unint64_t v6 = "nlResponseStatusCode";
      goto LABEL_7;
    case 2:
      uint64_t v5 = 0x6E4973656D6D6F70;
      uint64_t v3 = 0xEA00000000006F66;
      break;
    case 3:
      uint64_t v5 = 0xD000000000000015;
      char v7 = "languageVariantResult";
      goto LABEL_9;
    case 4:
      uint64_t v5 = 0xD000000000000015;
      char v7 = "responseVariantResult";
      goto LABEL_9;
    case 5:
      unint64_t v6 = "serverFallbackReason";
LABEL_7:
      uint64_t v3 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      uint64_t v5 = 0xD000000000000014;
      break;
    case 6:
      uint64_t v5 = 0xD000000000000011;
      char v7 = "nlRoutingDecision";
LABEL_9:
      uint64_t v3 = (unint64_t)(v7 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  uint64_t v8 = 0xE800000000000000;
  switch(a2)
  {
    case 1:
      uint64_t v9 = "nlResponseStatusCode";
      goto LABEL_17;
    case 2:
      uint64_t v8 = 0xEA00000000006F66;
      if (v5 != 0x6E4973656D6D6F70) {
        goto LABEL_24;
      }
      goto LABEL_22;
    case 3:
      uint64_t v10 = 0xD000000000000015;
      uint64_t v11 = "languageVariantResult";
      goto LABEL_21;
    case 4:
      uint64_t v10 = 0xD000000000000015;
      uint64_t v11 = "responseVariantResult";
      goto LABEL_21;
    case 5:
      uint64_t v9 = "serverFallbackReason";
LABEL_17:
      uint64_t v8 = (unint64_t)(v9 - 32) | 0x8000000000000000;
      unint64_t v2 = 0xD000000000000014;
      goto LABEL_18;
    case 6:
      uint64_t v10 = 0xD000000000000011;
      uint64_t v11 = "nlRoutingDecision";
LABEL_21:
      uint64_t v8 = (unint64_t)(v11 - 32) | 0x8000000000000000;
      if (v5 == v10) {
        goto LABEL_22;
      }
      goto LABEL_24;
    default:
LABEL_18:
      if (v5 != v2) {
        goto LABEL_24;
      }
LABEL_22:
      if (v3 == v8) {
        uint64_t v12 = 1;
      }
      else {
LABEL_24:
      }
        uint64_t v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v12 & 1;
  }
}

uint64_t specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))ExecutionOverrideDecision.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))AppResolutionType.rawValue.getter);
}

uint64_t specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4 = a3();
  uint64_t v6 = v5;
  if (v4 == a3() && v6 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  unint64_t v3 = 0xD000000000000012;
  unint64_t v4 = 0x80000001BA060AC0;
  switch(a1)
  {
    case 1:
      unint64_t v4 = 0xE700000000000000;
      unint64_t v3 = 0x646E616D6D6F63;
      break;
    case 2:
      unint64_t v3 = 0x55747865746E6F63;
      unsigned int v5 = 1952539760;
      goto LABEL_11;
    case 3:
      unint64_t v3 = 0x6E6972506C6C7566;
      unint64_t v4 = 0xE900000000000074;
      break;
    case 4:
      unint64_t v3 = 0x616570536C6C7566;
      unint64_t v4 = 0xE90000000000006BLL;
      break;
    case 5:
      uint64_t v6 = "redactedFullPrint";
      goto LABEL_8;
    case 6:
      uint64_t v6 = "redactedFullSpeak";
LABEL_8:
      unint64_t v4 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      unint64_t v3 = 0xD000000000000011;
      break;
    case 7:
      unint64_t v3 = 0x6F69747563657865;
      unint64_t v4 = 0xEF656372756F536ELL;
      break;
    case 8:
      unint64_t v3 = 0x7365527070416E69;
      unsigned int v5 = 1936617328;
LABEL_11:
      unint64_t v4 = v5 | 0xED00006500000000;
      break;
    default:
      break;
  }
  unint64_t v7 = 0xD000000000000012;
  unint64_t v8 = 0x80000001BA060AC0;
  switch(a2)
  {
    case 1:
      unint64_t v8 = 0xE700000000000000;
      if (v3 == 0x646E616D6D6F63) {
        goto LABEL_26;
      }
      goto LABEL_30;
    case 2:
      uint64_t v9 = 0x55747865746E6F63;
      unsigned int v10 = 1952539760;
      goto LABEL_29;
    case 3:
      unint64_t v8 = 0xE900000000000074;
      if (v3 != 0x6E6972506C6C7566) {
        goto LABEL_30;
      }
      goto LABEL_26;
    case 4:
      unint64_t v8 = 0xE90000000000006BLL;
      if (v3 != 0x616570536C6C7566) {
        goto LABEL_30;
      }
      goto LABEL_26;
    case 5:
      uint64_t v11 = "redactedFullPrint";
      goto LABEL_22;
    case 6:
      uint64_t v11 = "redactedFullSpeak";
LABEL_22:
      unint64_t v8 = (unint64_t)(v11 - 32) | 0x8000000000000000;
      if (v3 != 0xD000000000000011) {
        goto LABEL_30;
      }
      goto LABEL_26;
    case 7:
      unint64_t v7 = 0x6F69747563657865;
      unint64_t v8 = 0xEF656372756F536ELL;
      goto LABEL_25;
    case 8:
      uint64_t v9 = 0x7365527070416E69;
      unsigned int v10 = 1936617328;
LABEL_29:
      unint64_t v8 = v10 | 0xED00006500000000;
      if (v3 != v9) {
        goto LABEL_30;
      }
      goto LABEL_26;
    default:
LABEL_25:
      if (v3 != v7) {
        goto LABEL_30;
      }
LABEL_26:
      if (v4 == v8) {
        char v12 = 1;
      }
      else {
LABEL_30:
      }
        char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v12 & 1;
  }
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  unint64_t v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0x726564697374756FLL;
  }
  else {
    unint64_t v3 = 0x72656E776FLL;
  }
  if (v2) {
    unint64_t v4 = 0xE500000000000000;
  }
  else {
    unint64_t v4 = 0xE800000000000000;
  }
  if (a2) {
    unsigned int v5 = 0x726564697374756FLL;
  }
  else {
    unsigned int v5 = 0x72656E776FLL;
  }
  if (a2) {
    uint64_t v6 = 0xE800000000000000;
  }
  else {
    uint64_t v6 = 0xE500000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    unint64_t v7 = 1;
  }
  else {
    unint64_t v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xD000000000000018;
  unint64_t v3 = 0x80000001BA060680;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0xD000000000000016;
    }
    else {
      unint64_t v5 = 0xD000000000000019;
    }
    if (v4 == 1) {
      unint64_t v6 = 0x80000001BA0606A0;
    }
    else {
      unint64_t v6 = 0x80000001BA0606C0;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  unint64_t v5 = 0xD000000000000018;
  unint64_t v6 = 0x80000001BA060680;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      unint64_t v2 = 0xD000000000000016;
    }
    else {
      unint64_t v2 = 0xD000000000000019;
    }
    if (v7 == 1) {
      unint64_t v3 = 0x80000001BA0606A0;
    }
    else {
      unint64_t v3 = 0x80000001BA0606C0;
    }
  }
LABEL_15:
  if (v5 == v2 && v6 == v3) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void AnnounceExecutionOverride.overrideType.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

double one-time initialization function for announceTypes()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnnounceTypeOverride.Type>);
  uint64_t v0 = swift_allocObject();
  *(void *)&double result = 2;
  *(_OWORD *)(v0 + 16) = xmmword_1BA04F9C0;
  *(void *)(v0 + 32) = &type metadata for AnnounceTypeOverrideMessages;
  *(void *)(v0 + 40) = &protocol witness table for AnnounceTypeOverrideMessages;
  *(void *)(v0 + 48) = &type metadata for AnnounceTypeOverridePhoneCall;
  *(void *)(v0 + 56) = &protocol witness table for AnnounceTypeOverridePhoneCall;
  static AnnounceExecutionOverride.announceTypes = v0;
  return result;
}

uint64_t *AnnounceExecutionOverride.announceTypes.unsafeMutableAddressor()
{
  if (one-time initialization token for announceTypes != -1) {
    swift_once();
  }
  return &static AnnounceExecutionOverride.announceTypes;
}

uint64_t static AnnounceExecutionOverride.announceTypes.getter()
{
  if (one-time initialization token for announceTypes != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

void AnnounceExecutionOverride.ruleType.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 17);
}

uint64_t AnnounceExecutionOverride.activeTasks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AnnounceExecutionOverride.executedTasks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AnnounceExecutionOverride.topNlParse.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Siri_Nlu_External_UserParse?(v1 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_topNlParse, a1);
}

uint64_t outlined init with copy of Siri_Nlu_External_UserParse?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t AnnounceExecutionOverride.isTriggerlessFollowup.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_isTriggerlessFollowup);
}

uint64_t AnnounceExecutionOverride.isMitigated.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_isMitigated);
}

uint64_t AnnounceExecutionOverride.isMedocSupported.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_isMedocSupported);
}

uint64_t AnnounceExecutionOverride.__allocating_init(activeTasks:executedTasks:topNlParse:isTriggerlessFollowup:isMitigated:isMedocSupported:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  uint64_t v12 = swift_allocObject();
  *(_WORD *)(v12 + 16) = 1028;
  *(void *)(v12 + 24) = a1;
  *(void *)(v12 + 32) = a2;
  outlined init with take of Siri_Nlu_External_UserParse?(a3, v12 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_topNlParse);
  *(unsigned char *)(v12 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_isTriggerlessFollowup) = a4;
  *(unsigned char *)(v12 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_isMitigated) = a5;
  *(unsigned char *)(v12 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_isMedocSupported) = a6;
  return v12;
}

uint64_t AnnounceExecutionOverride.init(activeTasks:executedTasks:topNlParse:isTriggerlessFollowup:isMitigated:isMedocSupported:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  *(_WORD *)(v6 + 16) = 1028;
  *(void *)(v6 + 24) = a1;
  *(void *)(v6 + 32) = a2;
  outlined init with take of Siri_Nlu_External_UserParse?(a3, v6 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_topNlParse);
  *(unsigned char *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_isTriggerlessFollowup) = a4;
  *(unsigned char *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_isMitigated) = a5;
  *(unsigned char *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_isMedocSupported) = a6;
  return v6;
}

uint64_t outlined init with take of Siri_Nlu_External_UserParse?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void AnnounceExecutionOverride.triggerlessFollowupRulesWithoutFlexibleAnnounce()(unsigned char *a1@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v1 + 176))(&v11);
  char v3 = v11;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
  unint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    int v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v11 = v8;
    *(_DWORD *)int v7 = 136315138;
    uint64_t v9 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v5, v6, "With trigger less followup evaluation result from Announce rule is %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v8, -1, -1);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }

  *a1 = v3;
}

SiriKitRuntime::ExecutionOverrideDecision __swiftcall AnnounceExecutionOverride.executionOverrideDecisionForTriggerlessFollowup()()
{
  uint64_t v106 = v0;
  uint64_t v2 = *v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = &v99[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = &v99[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v105 = *(void *)(v9 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = &v99[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v10);
  os_log_t v104 = (os_log_t)&v99[-v13];
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Task?);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = &v99[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = type metadata accessor for Siri_Nlu_External_Task();
  uint64_t v18 = MEMORY[0x1F4188790](v17);
  uint64_t v20 = (uint64_t *)&v99[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v21 = MEMORY[0x1F4188790](v18);
  uint64_t v23 = &v99[-v22];
  uint64_t v24 = v2;
  uint64_t v26 = v25;
  (*(void (**)(uint64_t))(v24 + 184))(v21);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v26 + 48))(v16, 1, v17) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, &demangling cache variable for type metadata for Siri_Nlu_External_Task?);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.executor);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl(&dword_1B9C64000, v28, v29, "Unable to retrieve task from activeTasks or executedTasks in SessionState for triggerless followup. Rejecting.", v30, 2u);
      MEMORY[0x1BA9E48C0](v30, -1, -1);
    }

LABEL_7:
    char *v106 = 1;
    return result;
  }
  uint64_t v32 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v26 + 32);
  uint64_t v103 = v17;
  v32(v23, v16, v17);
  static AnnounceExecutionOverride.announceTypeForTask(_:)((uint64_t)&v115);
  if (!v116)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v115, &demangling cache variable for type metadata for AnnounceTypeOverride?);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Logger.executor);
    os_log_type_t v39 = *(void (**)(uint64_t *, unsigned char *, uint64_t))(v26 + 16);
    uint64_t v40 = v103;
    v39(v20, v23, v103);
    Swift::String v41 = Logger.logObject.getter();
    uint64_t v42 = v23;
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v43))
    {
      uint64_t v102 = v42;
      uint64_t v44 = v26;
      uint64_t v45 = swift_slowAlloc();
      uint64_t v105 = swift_slowAlloc();
      *(void *)&long long v115 = v105;
      *(_DWORD *)uint64_t v45 = 136315138;
      os_log_t v104 = (os_log_t)(v45 + 4);
      type metadata accessor for SiriNLUTypesPrintUtils();
      uint64_t v118 = v40;
      unint64_t v119 = lazy protocol witness table accessor for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task();
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v117);
      v39(boxed_opaque_existential_0, v20, v40);
      uint64_t v47 = static SiriNLUTypesPrintUtils.printableProtoObject(object:)();
      unint64_t v49 = v48;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v117);
      v117[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v49, (uint64_t *)&v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v50 = *(unsigned __int8 (**)(unsigned char *, uint64_t))(v44 + 8);
      v50(v20, v40);
      _os_log_impl(&dword_1B9C64000, v41, v43, "Unable to identify announce type of task: %s.", (uint8_t *)v45, 0xCu);
      uint64_t v51 = v105;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v51, -1, -1);
      MEMORY[0x1BA9E48C0](v45, -1, -1);

      SiriKitRuntime::ExecutionOverrideDecision result = v50(v102, v40);
    }
    else
    {

      uint64_t v55 = *(unsigned __int8 (**)(unsigned char *, uint64_t))(v26 + 8);
      v55(v20, v40);
      SiriKitRuntime::ExecutionOverrideDecision result = v55(v42, v40);
    }
    goto LABEL_7;
  }
  uint64_t v101 = v26;
  uint64_t v102 = v23;
  uint64_t v33 = v105;
  outlined init with take of ReferenceResolutionClientProtocol(&v115, (uint64_t)v117);
  outlined init with copy of Siri_Nlu_External_UserParse?((uint64_t)v1 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_topNlParse, (uint64_t)v5);
  uint64_t v34 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v35 = *(void *)(v34 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v35 + 48))(v5, 1, v34) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v33 + 56))(v8, 1, 1, v9);
    char v36 = v102;
    uint64_t v37 = v103;
LABEL_20:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v58 = type metadata accessor for Logger();
    __swift_project_value_buffer(v58, (uint64_t)static Logger.executor);
    uint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      uint64_t v61 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v61 = 0;
      _os_log_impl(&dword_1B9C64000, v59, v60, "Unable to retrieve UserDialogAct from parse.", v61, 2u);
      MEMORY[0x1BA9E48C0](v61, -1, -1);
    }

    (*(void (**)(unsigned char *, uint64_t))(v101 + 8))(v36, v37);
    char v62 = 1;
    goto LABEL_37;
  }
  uint64_t v52 = MEMORY[0x1BA9DE000]();
  (*(void (**)(unsigned char *, uint64_t))(v35 + 8))(v5, v34);
  uint64_t v53 = v9;
  if (*(void *)(v52 + 16))
  {
    (*(void (**)(unsigned char *, unint64_t, uint64_t))(v33 + 16))(v8, v52 + ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80)), v9);
    uint64_t v54 = 0;
  }
  else
  {
    uint64_t v54 = 1;
  }
  char v36 = v102;
  os_log_t v56 = v104;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v33 + 56))(v8, v54, 1, v53);
  swift_bridgeObjectRelease();
  int v57 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v33 + 48))(v8, 1, v53);
  uint64_t v37 = v103;
  if (v57 == 1) {
    goto LABEL_20;
  }
  (*(void (**)(os_log_t, unsigned char *, uint64_t))(v33 + 32))(v56, v8, v53);
  char v63 = Siri_Nlu_External_UserDialogAct.hasWantedToRepeat.getter();
  (*(void (**)(NSObject *, os_log_t, uint64_t))(v33 + 16))(v12, v56, v53);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v117, (uint64_t)&v115);
  if (v63)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v115);
    BOOL v64 = *(void (**)(os_log_t, uint64_t))(v33 + 8);
    v64(v12, v53);
LABEL_31:
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v71 = type metadata accessor for Logger();
    __swift_project_value_buffer(v71, (uint64_t)static Logger.executor);
    uint64_t v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v72, v73))
    {
      unint64_t v74 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v74 = 0;
      _os_log_impl(&dword_1B9C64000, v72, v73, "Accepting WantedToRepeat / UserCancelled dialog act.", v74, 2u);
      unint64_t v75 = v74;
      char v36 = v102;
      MEMORY[0x1BA9E48C0](v75, -1, -1);
    }

    v64(v56, v53);
    (*(void (**)(unsigned char *, uint64_t))(v101 + 8))(v36, v37);
    goto LABEL_36;
  }
  char v65 = Siri_Nlu_External_UserDialogAct.hasCancelled.getter();
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)&v115, (uint64_t)v112);
  if (v65)
  {
    unint64_t v66 = v113;
    double v67 = v114;
    __swift_project_boxed_opaque_existential_1(v112, (uint64_t)v113);
    unint64_t v68 = (uint64_t (*)(ValueMetadata *, _UNKNOWN **))v67[2];
    uint64_t v69 = v67;
    char v36 = v102;
    char v70 = v68(v66, v69);
  }
  else
  {
    char v70 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v115);
  BOOL v64 = *(void (**)(os_log_t, uint64_t))(v33 + 8);
  v64(v12, v53);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v112);
  if (v70) {
    goto LABEL_31;
  }
  if (!Siri_Nlu_External_UserDialogAct.toUsoTask()())
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v79 = type metadata accessor for Logger();
    __swift_project_value_buffer(v79, (uint64_t)static Logger.executor);
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v117, (uint64_t)v112);
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v117, (uint64_t)v109);
    uint64_t v80 = Logger.logObject.getter();
    os_log_type_t v81 = static os_log_type_t.debug.getter();
    int v82 = v81;
    if (os_log_type_enabled(v80, v81))
    {
      uint64_t v83 = swift_slowAlloc();
      uint64_t v105 = swift_slowAlloc();
      uint64_t v108 = v105;
      *(_DWORD *)uint64_t v83 = 136315394;
      os_log_t v104 = v80;
      uint64_t v85 = v113;
      unint64_t v84 = v114;
      __swift_project_boxed_opaque_existential_1(v112, (uint64_t)v113);
      uint64_t v86 = (uint64_t (*)(ValueMetadata *, _UNKNOWN **))v84[1];
      int v100 = v82;
      uint64_t v87 = v86(v85, v84);
      uint64_t v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v87, v88, &v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v112);
      *(_WORD *)(v83 + 12) = 2080;
      uint64_t v89 = v110;
      uint64_t v90 = v111;
      __swift_project_boxed_opaque_existential_1(v109, v110);
      char v91 = (*(uint64_t (**)(uint64_t, uint64_t))(v90 + 24))(v89, v90);
      BOOL v92 = (v91 & 1) == 0;
      if (v91) {
        uint64_t v93 = 0;
      }
      else {
        uint64_t v93 = 5525326;
      }
      if (v92) {
        unint64_t v94 = 0xE300000000000000;
      }
      else {
        unint64_t v94 = 0xE000000000000000;
      }
      uint64_t v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v94, &v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v109);
      uint64_t v80 = v104;
      _os_log_impl(&dword_1B9C64000, v104, (os_log_type_t)v100, "UserDialog was not of type UsoTask. AnnounceType %s DOES %s allow non-UsoTask parses.", (uint8_t *)v83, 0x16u);
      uint64_t v95 = v105;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v95, -1, -1);
      MEMORY[0x1BA9E48C0](v83, -1, -1);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v112);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v109);
    }

    uint64_t v96 = v118;
    unint64_t v97 = v119;
    __swift_project_boxed_opaque_existential_1(v117, v118);
    LOBYTE(v96) = (*(uint64_t (**)(uint64_t, unint64_t))(v97 + 24))(v96, v97);
    v64(v56, v53);
    (*(void (**)(unsigned char *, uint64_t))(v101 + 8))(v102, v37);
    if (v96) {
      char v62 = 12;
    }
    else {
      char v62 = 1;
    }
    goto LABEL_37;
  }
  uint64_t v76 = v118;
  unint64_t v77 = v119;
  __swift_project_boxed_opaque_existential_1(v117, v118);
  if (((*(uint64_t (**)(uint64_t, unint64_t))(v77 + 32))(v76, v77) & 1) == 0) {
    goto LABEL_61;
  }
  uint64_t v113 = &type metadata for AnnounceTypeGlobalOverride;
  uint64_t v114 = &protocol witness table for AnnounceTypeGlobalOverride;
  v112[0] = swift_allocObject();
  AnnounceTypeGlobalOverride.init()((SiriKitRuntime::AnnounceTypeGlobalOverride *)(v112[0] + 16));
  static AnnounceExecutionOverride.executionOverrideDecisionForAnnounceType(announceType:followupUsoTask:)(v112, (char *)v109);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v112);
  if (ExecutionOverrideDecision.rawValue.getter() != 0x747065636361 || v78 != 0xE600000000000000)
  {
    char v98 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v98)
    {
      swift_release();
      goto LABEL_60;
    }
LABEL_61:
    static AnnounceExecutionOverride.executionOverrideDecisionForAnnounceType(announceType:followupUsoTask:)(v117, v106);
    swift_release();
    v64(v56, v53);
    (*(void (**)(unsigned char *, uint64_t))(v101 + 8))(v102, v37);
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v117);
  }
  swift_release();
  swift_bridgeObjectRelease();
LABEL_60:
  v64(v56, v53);
  (*(void (**)(unsigned char *, uint64_t))(v101 + 8))(v102, v37);
LABEL_36:
  char v62 = 12;
LABEL_37:
  char *v106 = v62;
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v117);
}

double static AnnounceExecutionOverride.announceTypeForTask(_:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Siri_Nlu_External_Task();
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  void v58[2] = (char *)v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Siri_Nlu_External_Task.task.getter();
  uint64_t v9 = static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  unint64_t v10 = MEMORY[0x1BA9DE8C0](v9);
  unint64_t v11 = v10;
  if (!(v10 >> 62))
  {
    uint64_t v12 = a1;
    if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
LABEL_39:
    swift_bridgeObjectRelease();
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v48 = type metadata accessor for Logger();
    __swift_project_value_buffer(v48, (uint64_t)static Logger.executor);
    swift_retain_n();
    unint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      *(void *)&v62[0] = v52;
      *(_DWORD *)uint64_t v51 = 136315138;
      uint64_t v53 = dispatch thunk of Graph.description.getter();
      *(void *)&long long v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, (uint64_t *)v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v49, v50, "Unable to convert UsoGraphSiriNL to UsoTask for graph %s.", v51, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v52, -1, -1);
      MEMORY[0x1BA9E48C0](v51, -1, -1);
      swift_release();
    }
    else
    {

      swift_release_n();
    }
    *(void *)(v12 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)uint64_t v12 = 0u;
    *(_OWORD *)(v12 + 16) = 0u;
    return result;
  }
  uint64_t v12 = a1;
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_39;
  }
LABEL_3:
  if ((v11 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1BA9E3990](0, v11);
  }
  else
  {
    if (!*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_47;
    }
    swift_retain();
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for executor != -1) {
LABEL_47:
  }
    swift_once();
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
  swift_retain_n();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v59 = (uint64_t *)v12;
  if (v16)
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(void *)&v62[0] = v18;
    *(_DWORD *)uint64_t v17 = 136315394;
    uint64_t v19 = UsoTask.baseEntityAsString.getter();
    *(void *)&long long v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, (uint64_t *)v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    uint64_t v21 = UsoTask.verbString.getter();
    *(void *)&long long v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, (uint64_t *)v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v14, v15, "Found UsoTask %s::%s.", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v18, -1, -1);
    MEMORY[0x1BA9E48C0](v17, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  swift_retain();
  static UsoTask_CodegenConverter.convert(task:)();
  swift_release();
  if (v61)
  {
    outlined init with take of Any(&v60, v62);
    outlined init with copy of Any((uint64_t)v62, (uint64_t)&v60);
    type metadata accessor for UsoTask_read_common_Message();
    if (swift_dynamicCast())
    {
      swift_release();
      uint64_t v25 = v59;
      v59[3] = (uint64_t)&type metadata for AnnounceTypeOverrideMessages;
      v25[4] = (uint64_t)&protocol witness table for AnnounceTypeOverrideMessages;
      uint64_t v26 = swift_allocObject();
      *uint64_t v25 = v26;
      AnnounceTypeOverrideMessages.init()((SiriKitRuntime::AnnounceTypeOverrideMessages *)(v26 + 16));
    }
    else
    {
      type metadata accessor for UsoTask_summarise_common_PhoneCall();
      if (!swift_dynamicCast())
      {
        type metadata accessor for UsoTask_read_common_Notification();
        if (swift_dynamicCast())
        {
          swift_release();
          uint64_t v37 = v59;
          v59[3] = (uint64_t)&type metadata for AnnounceTypeOverrideGenericNotification;
          void v37[4] = (uint64_t)&protocol witness table for AnnounceTypeOverrideGenericNotification;
          uint64_t v38 = swift_allocObject();
          uint64_t *v37 = v38;
          uint64_t v39 = MEMORY[0x1E4FBC860];
          unint64_t v40 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
          swift_release();
          swift_release();
          *(void *)(v38 + 16) = 0xD00000000000001BLL;
          *(void *)(v38 + 24) = 0x80000001BA062F80;
          *(_DWORD *)(v38 + 32) = 16843009;
        }
        else
        {
          type metadata accessor for UsoTask_summarise_common_NotebookList();
          if (swift_dynamicCast()
            || (type metadata accessor for UsoTask_snooze_common_Reminder(), swift_dynamicCast())
            || (type metadata accessor for UsoTask_update_common_Reminder(), swift_dynamicCast()))
          {
            swift_release();
            Swift::String v41 = v59;
            v59[3] = (uint64_t)&type metadata for AnnounceTypeOverrideReminder;
            v41[4] = (uint64_t)&protocol witness table for AnnounceTypeOverrideReminder;
            uint64_t v42 = swift_allocObject();
            uint64_t *v41 = v42;
            AnnounceTypeOverrideReminder.init()((SiriKitRuntime::AnnounceTypeOverrideReminder *)(v42 + 16));
            goto LABEL_26;
          }
          type metadata accessor for UsoTask_summarise_common_Voicemail();
          if (swift_dynamicCast())
          {
            swift_release();
            os_log_type_t v43 = v59;
            v59[3] = (uint64_t)&type metadata for AnnounceTypeOverrideVoicemail;
            v43[4] = (uint64_t)&protocol witness table for AnnounceTypeOverrideVoicemail;
            uint64_t v44 = swift_allocObject();
            uint64_t *v43 = v44;
            AnnounceTypeOverrideVoicemail.init()((SiriKitRuntime::AnnounceTypeOverrideVoicemail *)(v44 + 16));
            goto LABEL_26;
          }
          type metadata accessor for UsoTask_noVerb_common_UserEntity();
          if (!swift_dynamicCast())
          {
            type metadata accessor for UsoTask_send_common_Announcement();
            if (swift_dynamicCast()
              || (type metadata accessor for UsoTask_reply_common_Announcement(), swift_dynamicCast())
              || (type metadata accessor for UsoTask_play_common_Announcement(), swift_dynamicCast())
              || (type metadata accessor for UsoTask_stop_common_Announcement(), swift_dynamicCast()))
            {
              swift_release();
              uint64_t v46 = v59;
              v59[3] = (uint64_t)&type metadata for AnnounceTypeOverrideMitigationForIntercomRequest;
              v46[4] = (uint64_t)&protocol witness table for AnnounceTypeOverrideMitigationForIntercomRequest;
              uint64_t v47 = swift_allocObject();
              uint64_t *v46 = v47;
              AnnounceTypeOverrideMitigationForIntercomRequest.init()((SiriKitRuntime::AnnounceTypeOverrideMitigationForIntercomRequest *)(v47 + 16));
            }
            else
            {
              type metadata accessor for UsoTask_noVerb_common_Workout();
              if (!swift_dynamicCast())
              {
                __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v62);
                swift_release();
                swift_release();
                int v57 = v59;
                v59[4] = 0;
                *(_OWORD *)int v57 = 0u;
                *((_OWORD *)v57 + 1) = 0u;
                goto LABEL_28;
              }
              swift_release();
              uint64_t v55 = v59;
              v59[3] = (uint64_t)&type metadata for AnnounceTypeOverrideWorkoutReminder;
              v55[4] = (uint64_t)&protocol witness table for AnnounceTypeOverrideWorkoutReminder;
              uint64_t v56 = swift_allocObject();
              *uint64_t v55 = v56;
              AnnounceTypeOverrideWorkoutReminder.init()((SiriKitRuntime::AnnounceTypeOverrideWorkoutReminder *)(v56 + 16));
            }
            goto LABEL_26;
          }
          swift_release();
          uint64_t v45 = v59;
          v59[3] = (uint64_t)&type metadata for AnnounceTypeOverrideIntercom;
          v45[4] = (uint64_t)&protocol witness table for AnnounceTypeOverrideIntercom;
          uint64_t v38 = swift_allocObject();
          *uint64_t v45 = v38;
          uint64_t v39 = MEMORY[0x1E4FBC860];
          unint64_t v40 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
          swift_release();
          swift_release();
          *(void *)(v38 + 16) = 0xD000000000000010;
          *(void *)(v38 + 24) = 0x80000001BA062F60;
          *(_DWORD *)(v38 + 32) = 16777217;
        }
        *(void *)(v38 + 40) = v39;
        *(void *)(v38 + 48) = v40;
LABEL_27:
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v62);
LABEL_28:
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v60);
        return result;
      }
      swift_release();
      uint64_t v35 = v59;
      v59[3] = (uint64_t)&type metadata for AnnounceTypeOverridePhoneCall;
      v35[4] = (uint64_t)&protocol witness table for AnnounceTypeOverridePhoneCall;
      uint64_t v36 = swift_allocObject();
      *uint64_t v35 = v36;
      AnnounceTypeOverridePhoneCall.init()((SiriKitRuntime::AnnounceTypeOverridePhoneCall *)(v36 + 16));
    }
LABEL_26:
    swift_release();
    swift_release();
    goto LABEL_27;
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v60, (uint64_t *)&demangling cache variable for type metadata for Any?);
  swift_retain_n();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(void *)&v62[0] = v30;
    *(_DWORD *)uint64_t v29 = 136315394;
    uint64_t v31 = UsoTask.baseEntityAsString.getter();
    *(void *)&long long v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, (uint64_t *)v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 12) = 2080;
    uint64_t v33 = UsoTask.verbString.getter();
    *(void *)&long long v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, (uint64_t *)v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v27, v28, "Unable to run codegen converter on UsoTask %s::%s.", (uint8_t *)v29, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v30, -1, -1);
    MEMORY[0x1BA9E48C0](v29, -1, -1);
    swift_release();
    swift_release();
  }
  else
  {

    swift_release();
    swift_release_n();
  }
  uint64_t v23 = v59;
  v59[4] = 0;
  double result = 0.0;
  *(_OWORD *)uint64_t v23 = 0u;
  *((_OWORD *)v23 + 1) = 0u;
  return result;
}

void __swiftcall AnnounceTypeGlobalOverride.init()(SiriKitRuntime::AnnounceTypeGlobalOverride *__return_ptr retstr)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [String])>);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 32) = 0x415F6E6F6D6D6F63;
  *(void *)(inited + 40) = 0xEA00000000007070;
  *(void *)(inited + 48) = &outlined read-only object #1 of AnnounceTypeGlobalOverride.init();
  strcpy((char *)(inited + 56), "uso_NoEntity");
  *(unsigned char *)(inited + 69) = 0;
  *(_WORD *)(inited + 70) = -5120;
  *(void *)(inited + 72) = &outlined read-only object #2 of AnnounceTypeGlobalOverride.init();
  *(void *)(inited + 80) = 0xD000000000000010;
  *(void *)(inited + 88) = 0x80000001BA05F530;
  *(void *)(inited + 96) = &outlined read-only object #3 of AnnounceTypeGlobalOverride.init();
  strcpy((char *)(inited + 104), "common_Message");
  *(unsigned char *)(inited + 119) = -18;
  *(void *)(inited + 120) = &outlined read-only object #4 of AnnounceTypeGlobalOverride.init();
  strcpy((char *)(inited + 128), "common_Setting");
  *(unsigned char *)(inited + 143) = -18;
  *(_OWORD *)(inited + 16) = xmmword_1BA050750;
  *(void *)(inited + 144) = &outlined read-only object #5 of AnnounceTypeGlobalOverride.init();
  *(void *)(inited + 152) = 0xD000000000000013;
  *(void *)(inited + 160) = 0x80000001BA05F5A0;
  *(void *)(inited + 168) = &outlined read-only object #6 of AnnounceTypeGlobalOverride.init();
  uint64_t v3 = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  retstr->name._uint64_t countAndFlagsBits = 0x6C61626F6C47;
  retstr->name._object = (void *)0xE600000000000000;
  *(_DWORD *)&retstr->rejectDecision = 16777217;
  retstr->validVerbsForAllEntities._rawValue = &outlined read-only object #0 of AnnounceTypeGlobalOverride.init();
  retstr->validEntityToVerbMap._rawValue = v3;
}

void *static AnnounceExecutionOverride.executionOverrideDecisionForAnnounceType(announceType:followupUsoTask:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)a1, (uint64_t)v57);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)a1, (uint64_t)v54);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)a1, (uint64_t)v51);
  swift_retain_n();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v48 = swift_slowAlloc();
    uint64_t v50 = v48;
    *(_DWORD *)uint64_t v6 = 136316162;
    uint64_t v7 = UsoTask.baseEntityAsString.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    uint64_t v9 = UsoTask.verbString.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 22) = 2080;
    os_log_type_t type = v5;
    uint64_t v11 = v58;
    uint64_t v12 = v59;
    __swift_project_boxed_opaque_existential_1(v57, v58);
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v57);
    *(_WORD *)(v6 + 32) = 2080;
    uint64_t v15 = v55;
    uint64_t v16 = v56;
    __swift_project_boxed_opaque_existential_1(v54, v55);
    (*(void (**)(uint64_t, uint64_t))(v16 + 48))(v15, v16);
    uint64_t v17 = MEMORY[0x1BA9E3080]();
    unint64_t v19 = v18;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v54);
    *(_WORD *)(v6 + 42) = 2080;
    uint64_t v20 = v52;
    uint64_t v21 = v53;
    __swift_project_boxed_opaque_existential_1(v51, v52);
    (*(void (**)(uint64_t, uint64_t))(v21 + 56))(v20, v21);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    uint64_t v22 = Dictionary.description.getter();
    unint64_t v24 = v23;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v51);
    _os_log_impl(&dword_1B9C64000, v4, type, "Validating task: %s::%s\nwith AnnounceType: %s\nwith allowed verb set: %s\nand allowed entityToVerb map: %s", (uint8_t *)v6, 0x34u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v48, -1, -1);
    MEMORY[0x1BA9E48C0](v6, -1, -1);
  }
  else
  {
    swift_release_n();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v57);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v54);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v51);
  }

  uint64_t v25 = a1[3];
  uint64_t v26 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v25);
  uint64_t v27 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v26 + 48))(v25, v26);
  uint64_t v28 = UsoTask.verbString.getter();
  LOBYTE(v26) = specialized Sequence<>.contains(_:)(v28, v29, v27);
  swift_bridgeObjectRelease();
  double result = (void *)swift_bridgeObjectRelease();
  if (v26) {
    goto LABEL_7;
  }
  uint64_t v32 = a1[3];
  uint64_t v33 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v32);
  uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 56))(v32, v33);
  uint64_t v35 = UsoTask.baseEntityAsString.getter();
  if (*(void *)(v34 + 16))
  {
    unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36);
    if (v38)
    {
      uint64_t v39 = *(void **)(*(void *)(v34 + 56) + 8 * v37);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v40 = UsoTask.verbString.getter();
      char v42 = specialized Sequence<>.contains(_:)(v40, v41, v39);
      swift_bridgeObjectRelease();
      double result = (void *)swift_bridgeObjectRelease();
      if ((v42 & 1) == 0)
      {
        uint64_t v43 = a1[3];
        uint64_t v44 = a1[4];
        __swift_project_boxed_opaque_existential_1(a1, v43);
        double result = (*(void *(**)(void *__return_ptr, uint64_t, uint64_t))(v44 + 40))(v57, v43, v44);
        char v31 = v57[0];
        goto LABEL_8;
      }
LABEL_7:
      char v31 = 12;
LABEL_8:
      *a2 = v31;
      return result;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v45 = a1[3];
  uint64_t v46 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v45);
  return (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v46 + 40))(v45, v46);
}

uint64_t AnnounceExecutionOverride.getAnnounceTask()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_Task();
  uint64_t v4 = MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v4);
  uint64_t v9 = (char *)v40 - v8;
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v12 = (char *)v40 - v11;
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)v40 - v14;
  MEMORY[0x1F4188790](v13);
  unint64_t v18 = (char *)v40 - v17;
  uint64_t v19 = *(void *)(v1 + 24);
  if (*(void *)(v19 + 16))
  {
    uint64_t v44 = v16;
    uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v16 + 16);
    v20((char *)v40 - v17, v19 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80)), v3);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.executor);
    v20(v15, (unint64_t)v18, v3);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      unint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      uint64_t v43 = a1;
      uint64_t v46 = v42;
      *(_DWORD *)unint64_t v24 = 136315138;
      uint64_t v41 = v24 + 4;
      v20(v12, (unint64_t)v15, v3);
      uint64_t v25 = String.init<A>(describing:)();
      uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v44 + 8))(v15, v3);
      _os_log_impl(&dword_1B9C64000, v22, v23, "Found announceTask in SessionState's activeTasks: %s", v24, 0xCu);
      uint64_t v27 = v42;
      swift_arrayDestroy();
      a1 = v43;
      MEMORY[0x1BA9E48C0](v27, -1, -1);
      MEMORY[0x1BA9E48C0](v24, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v44 + 8))(v15, v3);
    }

    (*(void (**)(uint64_t, char *, uint64_t))(v44 + 32))(a1, v18, v3);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v44 + 56))(a1, 0, 1, v3);
  }
  uint64_t v28 = *(void *)(v1 + 32);
  if (*(void *)(v28 + 16))
  {
    uint64_t v42 = (uint64_t)v12;
    uint64_t v44 = v16;
    uint64_t v29 = *(void (**)(char *, unint64_t, uint64_t))(v16 + 16);
    v29(v9, v28 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80)), v3);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.executor);
    v29(v6, (unint64_t)v9, v3);
    char v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      uint64_t v43 = a1;
      uint64_t v41 = (uint8_t *)v34;
      uint64_t v46 = v34;
      *(_DWORD *)uint64_t v33 = 136315138;
      v40[1] = v33 + 4;
      v29((char *)v42, (unint64_t)v6, v3);
      uint64_t v35 = String.init<A>(describing:)();
      uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v44 + 8))(v6, v3);
      _os_log_impl(&dword_1B9C64000, v31, v32, "Found announceTask in SessionState's executedTasks: %s", v33, 0xCu);
      unint64_t v37 = v41;
      swift_arrayDestroy();
      a1 = v43;
      MEMORY[0x1BA9E48C0](v37, -1, -1);
      MEMORY[0x1BA9E48C0](v33, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v44 + 8))(v6, v3);
    }

    (*(void (**)(uint64_t, char *, uint64_t))(v44 + 32))(a1, v9, v3);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v44 + 56))(a1, 0, 1, v3);
  }
  char v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);

  return v38(a1, 1, 1, v3);
}

uint64_t AnnounceExecutionOverride.parseContainsAnnounceIntercomTask()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Task?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_Task();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(uint64_t))(v1 + 184))(v7);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, &demangling cache variable for type metadata for Siri_Nlu_External_Task?);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.executor);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_1B9C64000, v11, v12, "Parse does not contain an announce intercom task.", v13, 2u);
      MEMORY[0x1BA9E48C0](v13, -1, -1);
    }
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v6 + 32))(v9, v4, v5);
    static AnnounceExecutionOverride.announceTypeForTask(_:)((uint64_t)v16);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, &demangling cache variable for type metadata for AnnounceTypeOverride?);
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v5);
  }
  return 0;
}

void __swiftcall AnnounceTypeOverrideMessages.init()(SiriKitRuntime::AnnounceTypeOverrideMessages *__return_ptr retstr)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [String])>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BA050760;
  strcpy((char *)(inited + 32), "common_Email");
  *(unsigned char *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  *(void *)(inited + 48) = &outlined read-only object #0 of AnnounceTypeOverrideMessages.init();
  *(void *)(inited + 56) = 0xD000000000000014;
  *(void *)(inited + 64) = 0x80000001BA05F550;
  *(void *)(inited + 72) = &outlined read-only object #1 of AnnounceTypeOverrideMessages.init();
  strcpy((char *)(inited + 80), "common_Message");
  *(unsigned char *)(inited + 95) = -18;
  *(void *)(inited + 96) = &outlined read-only object #2 of AnnounceTypeOverrideMessages.init();
  uint64_t v3 = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  retstr->name._uint64_t countAndFlagsBits = 0xD000000000000010;
  retstr->name._object = (void *)0x80000001BA062FA0;
  *(_DWORD *)&retstr->rejectDecision = 16842753;
  retstr->validVerbsForAllEntities._rawValue = (void *)MEMORY[0x1E4FBC860];
  retstr->validEntityToVerbMap._rawValue = v3;
}

void __swiftcall AnnounceTypeOverridePhoneCall.init()(SiriKitRuntime::AnnounceTypeOverridePhoneCall *__return_ptr retstr)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [String])>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BA04FD90;
  *(void *)(inited + 32) = 0xD000000000000010;
  *(void *)(inited + 40) = 0x80000001BA05F530;
  *(void *)(inited + 48) = &outlined read-only object #0 of AnnounceTypeOverridePhoneCall.init();
  uint64_t v3 = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  strcpy((char *)retstr, "AnnounceCalls");
  HIWORD(retstr->name._object) = -4864;
  *(_DWORD *)&retstr->rejectDecision = 65794;
  retstr->validVerbsForAllEntities._rawValue = (void *)MEMORY[0x1E4FBC860];
  retstr->validEntityToVerbMap._rawValue = v3;
}

void __swiftcall AnnounceTypeOverrideGenericNotification.init()(SiriKitRuntime::AnnounceTypeOverrideGenericNotification *__return_ptr retstr)
{
  uint64_t v2 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v3 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  retstr->name._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  retstr->name._object = (void *)0x80000001BA062F80;
  *(_DWORD *)&retstr->rejectDecision = 16843009;
  retstr->validVerbsForAllEntities._rawValue = v2;
  retstr->validEntityToVerbMap._rawValue = v3;
}

void __swiftcall AnnounceTypeOverrideReminder.init()(SiriKitRuntime::AnnounceTypeOverrideReminder *__return_ptr retstr)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [String])>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BA04F9C0;
  *(void *)(inited + 32) = 0xD000000000000013;
  *(void *)(inited + 40) = 0x80000001BA05F570;
  *(void *)(inited + 48) = &outlined read-only object #0 of AnnounceTypeOverrideReminder.init();
  *(void *)(inited + 56) = 0x525F6E6F6D6D6F63;
  *(void *)(inited + 64) = 0xEF7265646E696D65;
  *(void *)(inited + 72) = &outlined read-only object #1 of AnnounceTypeOverrideReminder.init();
  uint64_t v3 = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  retstr->name._uint64_t countAndFlagsBits = 0xD000000000000010;
  retstr->name._object = (void *)0x80000001BA062FC0;
  *(_DWORD *)&retstr->rejectDecision = 16777217;
  retstr->validVerbsForAllEntities._rawValue = (void *)MEMORY[0x1E4FBC860];
  retstr->validEntityToVerbMap._rawValue = v3;
}

void __swiftcall AnnounceTypeOverrideVoicemail.init()(SiriKitRuntime::AnnounceTypeOverrideVoicemail *__return_ptr retstr)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [String])>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BA04F9C0;
  *(void *)(inited + 32) = 0xD000000000000010;
  *(void *)(inited + 40) = 0x80000001BA05F5C0;
  *(void *)(inited + 48) = &outlined read-only object #0 of AnnounceTypeOverrideVoicemail.init();
  *(void *)(inited + 56) = 0xD000000000000010;
  *(void *)(inited + 64) = 0x80000001BA05F530;
  *(void *)(inited + 72) = &outlined read-only object #1 of AnnounceTypeOverrideVoicemail.init();
  uint64_t v3 = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  retstr->name._uint64_t countAndFlagsBits = 0xD000000000000011;
  retstr->name._object = (void *)0x80000001BA062FE0;
  *(_DWORD *)&retstr->rejectDecision = 1;
  retstr->validVerbsForAllEntities._rawValue = (void *)MEMORY[0x1E4FBC860];
  retstr->validEntityToVerbMap._rawValue = v3;
}

void __swiftcall AnnounceTypeOverrideIntercom.init()(SiriKitRuntime::AnnounceTypeOverrideIntercom *__return_ptr retstr)
{
  uint64_t v2 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v3 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  retstr->name._uint64_t countAndFlagsBits = 0xD000000000000010;
  retstr->name._object = (void *)0x80000001BA062F60;
  *(_DWORD *)&retstr->rejectDecision = 16777217;
  retstr->validVerbsForAllEntities._rawValue = v2;
  retstr->validEntityToVerbMap._rawValue = v3;
}

void __swiftcall AnnounceTypeOverrideMitigationForIntercomRequest.init()(SiriKitRuntime::AnnounceTypeOverrideMitigationForIntercomRequest *__return_ptr retstr)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [String])>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BA04FD90;
  *(void *)(inited + 32) = 0xD000000000000013;
  *(void *)(inited + 40) = 0x80000001BA05F5A0;
  *(void *)(inited + 48) = &outlined read-only object #0 of AnnounceTypeOverrideMitigationForIntercomRequest.init();
  uint64_t v3 = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  retstr->name._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  retstr->name._object = (void *)0x80000001BA063000;
  *(_DWORD *)&retstr->rejectDecision = 16777219;
  retstr->validVerbsForAllEntities._rawValue = (void *)MEMORY[0x1E4FBC860];
  retstr->validEntityToVerbMap._rawValue = v3;
}

void __swiftcall AnnounceTypeOverrideWorkoutReminder.init()(SiriKitRuntime::AnnounceTypeOverrideWorkoutReminder *__return_ptr retstr)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [String])>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BA04FD90;
  strcpy((char *)(inited + 32), "common_Workout");
  *(unsigned char *)(inited + 47) = -18;
  *(void *)(inited + 48) = &outlined read-only object #0 of AnnounceTypeOverrideWorkoutReminder.init();
  uint64_t v3 = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  retstr->name._uint64_t countAndFlagsBits = 0xD000000000000017;
  retstr->name._object = (void *)0x80000001BA063020;
  *(_DWORD *)&retstr->rejectDecision = 65537;
  retstr->validVerbsForAllEntities._rawValue = (void *)MEMORY[0x1E4FBC860];
  retstr->validEntityToVerbMap._rawValue = v3;
}

uint64_t AnnounceExecutionOverride.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_topNlParse, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  return v0;
}

uint64_t AnnounceTypeGlobalOverride.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void AnnounceTypeGlobalOverride.rejectDecision.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

uint64_t AnnounceTypeGlobalOverride.allowsCancellation.getter()
{
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t AnnounceTypeGlobalOverride.allowsNonUsoTasks.getter()
{
  return *(unsigned __int8 *)(v0 + 18);
}

uint64_t AnnounceTypeGlobalOverride.allowsGlobalIntents.getter()
{
  return *(unsigned __int8 *)(v0 + 19);
}

unint64_t AnnounceUsoVerbOverride.rawValue.getter(char a1)
{
  unint64_t result = 0x656C62616E65;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x656C6261736964;
      break;
    case 2:
      unint64_t result = 0x6B6361626C6C6163;
      break;
    case 3:
      unint64_t result = 1819042147;
      break;
    case 4:
      unint64_t result = 0x726577736E61;
      break;
    case 5:
      unint64_t result = 0x7075676E6168;
      break;
    case 6:
      unint64_t result = 1684956531;
      break;
    case 7:
      unint64_t result = 0x796C706572;
      break;
    case 8:
      unint64_t result = 2036427888;
      break;
    case 9:
      unint64_t result = 0x74736575716572;
      break;
    case 10:
      unint64_t result = 0xD000000000000013;
      break;
    case 11:
      unint64_t result = 0x657A6F6F6E73;
      break;
    case 12:
      unint64_t result = 0x736972616D6D7573;
      break;
    case 13:
      unint64_t result = 0x657461647075;
      break;
    case 14:
      unint64_t result = 1886352499;
      break;
    case 15:
      unint64_t result = 1684104562;
      break;
    case 16:
      unint64_t result = 0x746165706572;
      break;
    case 17:
      unint64_t result = 1852141679;
      break;
    case 18:
      unint64_t result = 0x657461657263;
      break;
    case 19:
      unint64_t result = 0x6573756170;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t AnnounceTypeGlobalOverride.validVerbsForAllEntities.getter()
{
  return swift_bridgeObjectRetain();
}

unint64_t AnnounceUsoEntity.rawValue.getter(char a1)
{
  unint64_t result = 0x4D5F6E6F6D6D6F63;
  switch(a1)
  {
    case 1:
    case 8:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0x455F6E6F6D6D6F63;
      break;
    case 3:
      unint64_t result = 0xD000000000000014;
      break;
    case 4:
      unint64_t result = 0x415F6E6F6D6D6F63;
      break;
    case 5:
      unint64_t result = 0xD000000000000013;
      break;
    case 6:
      unint64_t result = 0x525F6E6F6D6D6F63;
      break;
    case 7:
      unint64_t result = 0xD000000000000013;
      break;
    case 9:
      unint64_t result = 0x535F6E6F6D6D6F63;
      break;
    case 10:
      unint64_t result = 0x6E456F4E5F6F7375;
      break;
    case 11:
      unint64_t result = 0x575F6E6F6D6D6F63;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t AnnounceTypeGlobalOverride.validEntityToVerbMap.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for AnnounceTypeOverride.allowsCancellation.getter in conformance AnnounceTypeGlobalOverride()
{
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t protocol witness for AnnounceTypeOverride.allowsNonUsoTasks.getter in conformance AnnounceTypeGlobalOverride()
{
  return *(unsigned __int8 *)(v0 + 18);
}

uint64_t protocol witness for AnnounceTypeOverride.allowsGlobalIntents.getter in conformance AnnounceTypeGlobalOverride()
{
  return *(unsigned __int8 *)(v0 + 19);
}

void protocol witness for AnnounceTypeOverride.rejectDecision.getter in conformance AnnounceTypeGlobalOverride(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

uint64_t protocol witness for AnnounceTypeOverride.validVerbsForAllEntities.getter in conformance AnnounceTypeGlobalOverride()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for AnnounceTypeOverride.validEntityToVerbMap.getter in conformance AnnounceTypeGlobalOverride()
{
  return swift_bridgeObjectRetain();
}

double protocol witness for AnnounceTypeOverride.init() in conformance AnnounceTypeOverrideIntercom@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = MEMORY[0x1E4FBC860];
  unint64_t v3 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(void *)a1 = 0xD000000000000010;
  *(void *)(a1 + 8) = 0x80000001BA062F60;
  *(void *)&double result = 16777217;
  *(_DWORD *)(a1 + 16) = 16777217;
  *(void *)(a1 + 24) = v2;
  *(void *)(a1 + 32) = v3;
  return result;
}

unint64_t protocol witness for AnnounceTypeOverride.init() in conformance AnnounceTypeOverrideGenericNotification@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = MEMORY[0x1E4FBC860];
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(void *)a1 = 0xD00000000000001BLL;
  *(void *)(a1 + 8) = 0x80000001BA062F80;
  *(_DWORD *)(a1 + 16) = 16843009;
  *(void *)(a1 + 24) = v2;
  *(void *)(a1 + 32) = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnnounceUsoEntity(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance AnnounceUsoEntity(a1, a2, a3, a4, (uint64_t (*)(uint64_t))AnnounceUsoEntity.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnnounceUsoEntity(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AnnounceUsoEntity(a1, a2, (void (*)(uint64_t))AnnounceUsoEntity.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnnounceUsoEntity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance AnnounceUsoEntity(a1, a2, a3, (void (*)(void))AnnounceUsoEntity.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnnounceUsoEntity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AnnounceUsoEntity(a1, a2, a3, (void (*)(uint64_t))AnnounceUsoEntity.rawValue.getter);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AnnounceUsoEntity@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized AnnounceUsoEntity.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AnnounceUsoEntity@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = AnnounceUsoEntity.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnnounceUsoVerbOverride(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance AnnounceUsoEntity(a1, a2, a3, a4, (uint64_t (*)(uint64_t))AnnounceUsoVerbOverride.rawValue.getter);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnnounceUsoEntity(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = *a2;
  uint64_t v7 = a5(*a1);
  uint64_t v9 = v8;
  if (v7 == a5(v6) && v9 == v10) {
    char v12 = 1;
  }
  else {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnnounceUsoVerbOverride(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AnnounceUsoEntity(a1, a2, (void (*)(uint64_t))AnnounceUsoVerbOverride.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnnounceUsoEntity(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5 = *v3;
  Hasher.init(_seed:)();
  a3(v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnnounceUsoVerbOverride(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance AnnounceUsoEntity(a1, a2, a3, (void (*)(void))AnnounceUsoVerbOverride.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnnounceUsoEntity(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4(*v4);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnnounceUsoVerbOverride(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AnnounceUsoEntity(a1, a2, a3, (void (*)(uint64_t))AnnounceUsoVerbOverride.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnnounceUsoEntity(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6 = *v4;
  Hasher.init(_seed:)();
  a4(v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AnnounceUsoVerbOverride@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized AnnounceUsoVerbOverride.init(rawValue:)();
  *a1 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AnnounceUsoVerbOverride@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = AnnounceUsoVerbOverride.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unsigned __int8 *partial apply for closure #1 in FlexibleAnnounceFeatureFlag.isEnabled.getter@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  return closure #1 in FlexibleAnnounceFeatureFlag.isEnabled.getter(a1, a2);
}

uint64_t objectdestroyTm_1()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

unint64_t specialized AnnounceUsoEntity.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AnnounceUsoEntity.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xC) {
    return 12;
  }
  else {
    return v3;
  }
}

uint64_t specialized AnnounceUsoVerbOverride.init(rawValue:)()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x14) {
    return 20;
  }
  else {
    return v0;
  }
}

unint64_t lazy protocol witness table accessor for type AnnounceUsoEntity and conformance AnnounceUsoEntity()
{
  unint64_t result = lazy protocol witness table cache variable for type AnnounceUsoEntity and conformance AnnounceUsoEntity;
  if (!lazy protocol witness table cache variable for type AnnounceUsoEntity and conformance AnnounceUsoEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceUsoEntity and conformance AnnounceUsoEntity);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnnounceUsoVerbOverride and conformance AnnounceUsoVerbOverride()
{
  unint64_t result = lazy protocol witness table cache variable for type AnnounceUsoVerbOverride and conformance AnnounceUsoVerbOverride;
  if (!lazy protocol witness table cache variable for type AnnounceUsoVerbOverride and conformance AnnounceUsoVerbOverride)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceUsoVerbOverride and conformance AnnounceUsoVerbOverride);
  }
  return result;
}

uint64_t ObjC metadata update function for AnnounceExecutionOverride()
{
  return type metadata accessor for AnnounceExecutionOverride();
}

void type metadata completion function for AnnounceExecutionOverride()
{
  type metadata accessor for Siri_Nlu_External_UserParse?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for AnnounceExecutionOverride(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AnnounceExecutionOverride);
}

uint64_t dispatch thunk of AnnounceExecutionOverride.__allocating_init(activeTasks:executedTasks:topNlParse:isTriggerlessFollowup:isMitigated:isMedocSupported:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of AnnounceExecutionOverride.evaluate()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of AnnounceExecutionOverride.shouldOverrideMitigatorAndIsIntercomTask()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of AnnounceExecutionOverride.executionOverrideDecisionForTriggerlessFollowup()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of AnnounceExecutionOverride.getAnnounceTask()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

void type metadata accessor for Siri_Nlu_External_UserParse?()
{
  if (!lazy cache variable for type metadata for Siri_Nlu_External_UserParse?)
  {
    type metadata accessor for Siri_Nlu_External_UserParse();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Siri_Nlu_External_UserParse?);
    }
  }
}

uint64_t dispatch thunk of AnnounceTypeOverride.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AnnounceTypeOverride.allowsCancellation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AnnounceTypeOverride.allowsNonUsoTasks.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of AnnounceTypeOverride.allowsGlobalIntents.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of AnnounceTypeOverride.rejectDecision.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of AnnounceTypeOverride.validVerbsForAllEntities.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of AnnounceTypeOverride.validEntityToVerbMap.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of AnnounceTypeOverride.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AnnounceTypeGlobalOverride()
{
  return &type metadata for AnnounceTypeGlobalOverride;
}

ValueMetadata *type metadata accessor for AnnounceTypeOverrideMessages()
{
  return &type metadata for AnnounceTypeOverrideMessages;
}

ValueMetadata *type metadata accessor for AnnounceTypeOverridePhoneCall()
{
  return &type metadata for AnnounceTypeOverridePhoneCall;
}

ValueMetadata *type metadata accessor for AnnounceTypeOverrideIntercom()
{
  return &type metadata for AnnounceTypeOverrideIntercom;
}

ValueMetadata *type metadata accessor for AnnounceTypeOverrideMitigationForIntercomRequest()
{
  return &type metadata for AnnounceTypeOverrideMitigationForIntercomRequest;
}

ValueMetadata *type metadata accessor for AnnounceTypeOverrideGenericNotification()
{
  return &type metadata for AnnounceTypeOverrideGenericNotification;
}

ValueMetadata *type metadata accessor for AnnounceTypeOverrideReminder()
{
  return &type metadata for AnnounceTypeOverrideReminder;
}

ValueMetadata *type metadata accessor for AnnounceTypeOverrideWorkoutReminder()
{
  return &type metadata for AnnounceTypeOverrideWorkoutReminder;
}

uint64_t destroy for AnnounceTypeGlobalOverride()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AnnounceTypeGlobalOverride(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AnnounceTypeGlobalOverride(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(a1 + 19) = *(unsigned char *)(a2 + 19);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AnnounceTypeGlobalOverride(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(a1 + 19) = *(unsigned char *)(a2 + 19);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnnounceTypeGlobalOverride(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnnounceTypeGlobalOverride(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnnounceTypeOverrideVoicemail()
{
  return &type metadata for AnnounceTypeOverrideVoicemail;
}

uint64_t getEnumTagSinglePayload for AnnounceUsoEntity(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF5) {
    goto LABEL_17;
  }
  if (a2 + 11 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 11) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 11;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v8 = v6 - 12;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AnnounceUsoEntity(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *__n128 result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9D8E8B4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnnounceUsoEntity()
{
  return &type metadata for AnnounceUsoEntity;
}

uint64_t getEnumTagSinglePayload for AnnounceUsoVerbOverride(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xED) {
    goto LABEL_17;
  }
  if (a2 + 19 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 19) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 19;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 19;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 19;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x14;
  int v8 = v6 - 20;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AnnounceUsoVerbOverride(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 19 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 19) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xED) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEC)
  {
    unsigned int v6 = ((a2 - 237) >> 8) + 1;
    *__n128 result = a2 + 19;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9D8EA48);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 19;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnnounceUsoVerbOverride()
{
  return &type metadata for AnnounceUsoVerbOverride;
}

uint64_t protocol witness for ExecutionOverride.evaluate() in conformance AnnounceExecutionOverride(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t AnyFlow.instrumentationId.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1BA04FD90;
  uint64_t v1 = ObjectIdentifier.hashValue.getter();
  uint64_t v2 = MEMORY[0x1E4FBB5C8];
  *(void *)(v0 + 56) = MEMORY[0x1E4FBB550];
  *(void *)(v0 + 64) = v2;
  *(void *)(v0 + 32) = v1;

  return String.init(format:_:)();
}

SiriKitRuntime::AppLaunchAffinityScorer __swiftcall AppLaunchAffinityScorer.init()()
{
  uint64_t v0 = (void *)0x80000001BA062830;
  uint64_t v1 = 0xD00000000000001ELL;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t AppLaunchAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  return a1;
}

uint64_t AppLaunchAffinityScorer.score(_:environment:)()
{
  return specialized AppLaunchAffinityScorer.score(_:environment:)();
}

uint64_t AppLaunchAffinityScorer.score(_:)()
{
  return 0;
}

uint64_t AppLaunchAffinityScorer.score(_:usoParse:environment:)()
{
  return 0;
}

uint64_t specialized AppLaunchAffinityScorer.score(_:environment:)()
{
  uint64_t v0 = type metadata accessor for RREntity();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  int v3 = &v21[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRCandidate?);
  MEMORY[0x1F4188790](v4 - 8);
  unsigned int v6 = &v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for RRCandidate();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = &v21[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
  if (v22[0])
  {
    uint64_t v11 = dispatch thunk of CodeGenGlobalArgs.usoReferenceType.getter();
    swift_release();
    if (v11)
    {
      dispatch thunk of CodeGenBase.usoIdentifiers.getter();
      swift_release();
      swift_bridgeObjectRelease();
    }
  }
  SiriEnvironment.salientEntitiesProvider.getter();
  char v12 = (void *)dispatch thunk of SalientEntitiesDataProvider.salientEntities.getter();
  swift_release();
  static AffinityScorerUtils.topOpenableEntity(candidates:)(v12, (uint64_t)v6);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    uint64_t v13 = &demangling cache variable for type metadata for RRCandidate?;
    uint64_t v14 = v6;
LABEL_20:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, v13);
    return 5;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 32))(v10, v6, v7);
  RRCandidate.entity.getter();
  RREntity.usoEntity.getter();
  (*(void (**)(unsigned char *, uint64_t))(v1 + 8))(v3, v0);
  static UsoEntity_CodeGenConverter.convert(entity:)();
  swift_release();
  if (!v22[3])
  {
    (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
LABEL_19:
    uint64_t v13 = (uint64_t *)&demangling cache variable for type metadata for Any?;
    uint64_t v14 = v22;
    goto LABEL_20;
  }
  outlined init with copy of Any?((uint64_t)v22, (uint64_t)v21);
  type metadata accessor for UsoEntity_common_App();
  if (!swift_dynamicCast())
  {
    type metadata accessor for UsoEntity_common_Window();
    if (!swift_dynamicCast())
    {
      type metadata accessor for UsoEntity_common_AppEntity();
      if (swift_dynamicCast())
      {
        swift_retain();
        dispatch thunk of CodeGenBase.usoIdentifiers.getter();
        swift_bridgeObjectRelease();
        swift_release();
        (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
        swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
      }
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v21);
      goto LABEL_19;
    }
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v21);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    unint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v18 = 0;
    _os_log_impl(&dword_1B9C64000, v16, v17, "AppLaunchAffinityScorer found valid Window/App entity for open::uso_NoEntity parse", v18, 2u);
    MEMORY[0x1BA9E48C0](v18, -1, -1);
  }

  (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
  return 3;
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (**v13)(char *, uint64_t);
  void (**v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  void v21[3];
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  unsigned char v24[32];
  unsigned char v25[24];
  uint64_t v26;

  os_log_type_t v23 = type metadata accessor for RREntity();
  uint64_t v0 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v2 = (char *)v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v3 = type metadata accessor for RRCandidate();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  unsigned int v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  SiriEnvironment.salientEntitiesProvider.getter();
  uint64_t v7 = dispatch thunk of SalientEntitiesDataProvider.salientEntities.getter();
  swift_release();
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    return 5;
  }
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  uint64_t v9 = v4 + 16;
  uint64_t v22 = v10;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 64);
  v21[1] = v7;
  char v12 = v7 + ((v11 + 32) & ~v11);
  uint64_t v13 = (void (**)(char *, uint64_t))(v0 + 8);
  uint64_t v14 = (void (**)(char *, uint64_t))(v9 - 8);
  uint64_t v15 = *(void *)(v9 + 56);
  v21[2] = MEMORY[0x1E4FBC840] + 8;
  v10(v6, v12, v3);
  while (1)
  {
    RRCandidate.entity.getter();
    RREntity.usoEntity.getter();
    (*v13)(v2, v23);
    static UsoEntity_CodeGenConverter.convert(entity:)();
    swift_release();
    if (!v26)
    {
      (*v14)(v6, v3);
      goto LABEL_4;
    }
    outlined init with copy of Any?((uint64_t)v25, (uint64_t)v24);
    type metadata accessor for UsoEntity_common_App();
    if (swift_dynamicCast()) {
      break;
    }
    type metadata accessor for UsoEntity_common_Window();
    if (swift_dynamicCast()) {
      break;
    }
    (*v14)(v6, v3);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v24);
LABEL_4:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v25, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v12 += v15;
    if (!--v8) {
      goto LABEL_16;
    }
    v22(v6, v12, v3);
  }
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v24);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v25, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.executor);
  os_log_type_t v17 = Logger.logObject.getter();
  unint64_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl(&dword_1B9C64000, v17, v18, "AppLaunchAffinityScorer found valid app/window entity for close::common_App parse", v19, 2u);
    MEMORY[0x1BA9E48C0](v19, -1, -1);
  }

  (*v14)(v6, v3);
  return 3;
}

uint64_t specialized AppLaunchAffinityScorer.score(input:environment:)(uint64_t a1, uint64_t a2)
{
  v30[1] = a2;
  uint64_t v2 = type metadata accessor for USOParse();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Parse();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.executor);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    v30[0] = v6;
    uint64_t v14 = v5;
    uint64_t v15 = v2;
    uint64_t v16 = v3;
    os_log_type_t v17 = v13;
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_1B9C64000, v11, v12, "AppLaunchAffinityScorer running", v13, 2u);
    unint64_t v18 = v17;
    uint64_t v3 = v16;
    uint64_t v2 = v15;
    uint64_t v5 = v14;
    uint64_t v6 = v30[0];
    MEMORY[0x1BA9E48C0](v18, -1, -1);
  }

  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v7 + 88))(v9, v6) != *MEMORY[0x1E4FA1F48])
  {
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      unint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v24 = 0;
      _os_log_impl(&dword_1B9C64000, v22, v23, "AppLaunchAffinityScorer got unimplemented parse", v24, 2u);
      MEMORY[0x1BA9E48C0](v24, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return 2;
  }
  (*(void (**)(char *, uint64_t))(v7 + 96))(v9, v6);
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v9, v2);
  if (!specialized static AffinityScorerUtils.getTask(_:)())
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return 2;
  }
  static UsoTask_CodegenConverter.convert(task:)();
  if (!v33) {
    goto LABEL_30;
  }
  outlined init with copy of Any?((uint64_t)v32, (uint64_t)v31);
  type metadata accessor for UsoTask_open_uso_NoEntity();
  if (swift_dynamicCast())
  {
    uint64_t v19 = specialized AppLaunchAffinityScorer.score(_:environment:)();
    goto LABEL_10;
  }
  type metadata accessor for UsoTask_close_uso_NoEntity();
  if (swift_dynamicCast())
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
    swift_release();
    if (v30[2] && (uint64_t v25 = dispatch thunk of CodeGenGlobalArgs.usoReferenceType.getter(), swift_release(), v25))
    {
      dispatch thunk of CodeGenBase.usoIdentifiers.getter();
      swift_release();
      swift_release();
      swift_release();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
      swift_release();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v31);
    goto LABEL_33;
  }
  type metadata accessor for UsoTask_close_common_App();
  if (!swift_dynamicCast())
  {
    type metadata accessor for UsoTask_open_common_Setting();
    if (swift_dynamicCast())
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      swift_release();
      swift_release();
LABEL_28:
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v31);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v32, (uint64_t *)&demangling cache variable for type metadata for Any?);
      return 0;
    }
    type metadata accessor for UsoTask_enable_common_Setting();
    if (swift_dynamicCast())
    {
      swift_release();
      swift_release();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      goto LABEL_28;
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v31);
LABEL_30:
    unint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl(&dword_1B9C64000, v26, v27, "AppLaunchAffinityScorer got unimplemented USO parse", v28, 2u);
      MEMORY[0x1BA9E48C0](v28, -1, -1);
    }

    swift_release();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    goto LABEL_33;
  }
  uint64_t v19 = specialized AppLaunchAffinityScorer.score(_:environment:)();
LABEL_10:
  uint64_t v20 = v19;
  int v21 = v19;
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v31);
  if (v21 == 5)
  {
LABEL_33:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v32, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 2;
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v32, (uint64_t *)&demangling cache variable for type metadata for Any?);
  return v20;
}

ValueMetadata *type metadata accessor for AppLaunchAffinityScorer()
{
  return &type metadata for AppLaunchAffinityScorer;
}

uint64_t AppResolutionResult.selectedApp.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AppResolutionResult();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  int v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == *MEMORY[0x1E4F9FA08] || v6 == *MEMORY[0x1E4F9FA18])
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    return *(void *)v5;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return 0;
  }
}

uint64_t AppResolutionType.flowAppResolutionType.getter()
{
  return dword_1BA050E38[*v0];
}

SiriKitRuntime::AppResolutionType_optional __swiftcall AppResolutionType.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AppResolutionType.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  char v7 = 12;
  if (v5 < 0xC) {
    char v7 = v5;
  }
  *uint64_t v4 = v7;
  return result;
}

void *static AppResolutionType.allCases.getter()
{
  return &outlined read-only object #0 of static AppResolutionType.allCases.getter;
}

unint64_t AppResolutionType.rawValue.getter()
{
  unint64_t result = 0xD000000000000019;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6E49746F4E707041;
      break;
    case 2:
      unint64_t result = 0xD000000000000012;
      break;
    case 3:
      unint64_t result = 0x6465727265666E49;
      break;
    case 4:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 5:
      unint64_t result = 0xD000000000000015;
      break;
    case 6:
      unint64_t result = 0x746C7561666544;
      break;
    case 7:
      unint64_t result = 0xD000000000000017;
      break;
    case 8:
      unint64_t result = 0xD000000000000014;
      break;
    case 9:
      unint64_t result = 0x6E776F6E6B6E55;
      break;
    case 0xA:
      unint64_t result = 0xD000000000000016;
      break;
    case 0xB:
      unint64_t result = 0x656C655372657355;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AppResolutionType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t lazy protocol witness table accessor for type AppResolutionType and conformance AppResolutionType()
{
  unint64_t result = lazy protocol witness table cache variable for type AppResolutionType and conformance AppResolutionType;
  if (!lazy protocol witness table cache variable for type AppResolutionType and conformance AppResolutionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppResolutionType and conformance AppResolutionType);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AppResolutionType()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AppResolutionType()
{
  AppResolutionType.rawValue.getter();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AppResolutionType()
{
  return Hasher._finalize()();
}

SiriKitRuntime::AppResolutionType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AppResolutionType(Swift::String *a1)
{
  return AppResolutionType.init(rawValue:)(*a1);
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AppResolutionType@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = AppResolutionType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t lazy protocol witness table accessor for type [AppResolutionType] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [AppResolutionType] and conformance [A];
  if (!lazy protocol witness table cache variable for type [AppResolutionType] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [AppResolutionType]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [AppResolutionType] and conformance [A]);
  }
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance AppResolutionType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static AppResolutionType.allCases.getter;
}

unsigned char *storeEnumTagSinglePayload for AppResolutionType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *unint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9D901A8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppResolutionType()
{
  return &type metadata for AppResolutionType;
}

Swift::Void __swiftcall AppShortcutExpansionContextBuilder.newSessionStarted()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  int v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1B9C64000, v3, v4, "[AppShortcutExpansionContext] New session started", v5, 2u);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }

  type metadata accessor for ConditionalIntentMetadataStore();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = MEMORY[0x1E4FBC868];
  swift_beginAccess();
  *(void *)(v1 + 16) = v6;
  swift_release();
}

Swift::Void __swiftcall AppShortcutExpansionContextBuilder.newTurnStarted()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  int v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1B9C64000, v3, v4, "[AppShortcutExpansionContext] New turn started", v5, 2u);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }

  swift_beginAccess();
  uint64_t v6 = v1[3];
  v1[4] = 0;
  v1[5] = 0;
  v1[3] = 0;
  outlined consume of AppShortcutExpansionContext?(v6);
}

uint64_t *AppShortcutExpansionContext.emptyContext.unsafeMutableAddressor()
{
  if (one-time initialization token for emptyContext != -1) {
    swift_once();
  }
  return &static AppShortcutExpansionContext.emptyContext;
}

uint64_t AppShortcutExpansionContextBuilder.build(rrCandidates:appShortcutTargets:)(uint64_t a1, uint64_t a2)
{
  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v4 = static MessageBusActor.shared;
  v3[11] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](AppShortcutExpansionContextBuilder.build(rrCandidates:appShortcutTargets:), v4, 0);
}

uint64_t AppShortcutExpansionContextBuilder.build(rrCandidates:appShortcutTargets:)()
{
  uint64_t v1 = v0[10];
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 24);
  if (v2)
  {
    uint64_t v5 = v1 + 32;
    uint64_t v4 = *(void *)(v1 + 32);
    uint64_t v3 = *(void *)(v5 + 8);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_release();
    uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
    return v6(v2, v4, v3);
  }
  else
  {
    uint64_t v8 = (void *)swift_task_alloc();
    v0[12] = v8;
    *uint64_t v8 = v0;
    v8[1] = AppShortcutExpansionContextBuilder.build(rrCandidates:appShortcutTargets:);
    uint64_t v9 = v0[9];
    uint64_t v10 = v0[8];
    return AppShortcutExpansionContextBuilder.collectTurnContext(rrCandidates:appShortcutTargets:)(v10, v9);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  uint64_t v1 = v0[14];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[13];
  uint64_t v4 = (void *)v0[10];
  swift_release();
  uint64_t v5 = v4[3];
  v4[3] = v3;
  v4[4] = v1;
  v4[5] = v2;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  outlined consume of AppShortcutExpansionContext?(v5);
  uint64_t v6 = v0[14];
  char v7 = v0[15];
  uint64_t v8 = v0[13];
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  return v9(v8, v6, v7);
}

uint64_t AppShortcutExpansionContextBuilder.build(rrCandidates:appShortcutTargets:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void **)v3;
  uint64_t v5 = *(void *)(*(void *)v3 + 88);
  v4[13] = a1;
  v4[14] = a2;
  v4[15] = a3;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](AppShortcutExpansionContextBuilder.build(rrCandidates:appShortcutTargets:), v5, 0);
}

uint64_t ConditionalIntentMetadataStore.debugDescription.getter()
{
  return ConditionalIntentMetadataStore.debugDescription.getter(29, 0xD00000000000001BLL, 0x80000001BA0630D0, &demangling cache variable for type metadata for [String : [String : Bool]]);
}

Swift::Bool __swiftcall ConditionalIntentMetadataStore.isConditionalIntent(appBundleId:actionId:)(Swift::String appBundleId, Swift::String actionId)
{
  uint64_t v3 = *(void *)(v2 + 16);
  if (!*(void *)(v3 + 16)) {
    goto LABEL_6;
  }
  object = actionId._object;
  uint64_t countAndFlagsBits = actionId._countAndFlagsBits;
  uint64_t v6 = appBundleId._object;
  uint64_t v7 = appBundleId._countAndFlagsBits;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v7, (uint64_t)v6);
  if ((v9 & 1) == 0
    || (uint64_t v10 = *(void *)(*(void *)(v3 + 56) + 8 * v8),
        swift_bridgeObjectRetain(),
        swift_bridgeObjectRelease(),
        !*(void *)(v10 + 16)))
  {
    swift_bridgeObjectRelease();
LABEL_6:
    char v12 = 0;
    return v12 & 1;
  }
  swift_bridgeObjectRetain();
  specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object);
  char v12 = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

Swift::Bool __swiftcall ConditionalIntentMetadataStore.isPersistedConditionalIntent(appBundleId:actionId:)(Swift::String appBundleId, Swift::String actionId)
{
  uint64_t v3 = *(void *)(v2 + 16);
  if (!*(void *)(v3 + 16)) {
    return 0;
  }
  object = actionId._object;
  uint64_t countAndFlagsBits = actionId._countAndFlagsBits;
  uint64_t v6 = appBundleId._object;
  uint64_t v7 = appBundleId._countAndFlagsBits;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v7, (uint64_t)v6);
  if ((v9 & 1) == 0
    || (uint64_t v10 = *(void *)(*(void *)(v3 + 56) + 8 * v8),
        swift_bridgeObjectRetain(),
        swift_bridgeObjectRelease(),
        !*(void *)(v10 + 16)))
  {
LABEL_8:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  char v13 = *(unsigned char *)(*(void *)(v10 + 56) + v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t ConditionalIntentMetadataStore.rawDictionary()()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ConditionalIntentMetadataStore()
{
  return ConditionalIntentMetadataStore.debugDescription.getter();
}

uint64_t IntentStatesStore.__allocating_init(conditionalIntentsStates:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t IntentStatesStore.init(conditionalIntentsStates:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t IntentStatesStore.debugDescription.getter()
{
  return ConditionalIntentMetadataStore.debugDescription.getter(21, 0xD000000000000013, 0x80000001BA0630F0, &demangling cache variable for type metadata for [String : [String : NSNumber]]);
}

uint64_t ConditionalIntentMetadataStore.debugDescription.getter(Swift::Int a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _StringGuts.grow(_:)(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(a4);
  v6._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  return a2;
}

Swift::Bool __swiftcall IntentStatesStore.isConditionallyActive(appBundleId:actionId:)(Swift::String appBundleId, Swift::String actionId)
{
  uint64_t v3 = *(void *)(v2 + 16);
  if (!*(void *)(v3 + 16)) {
    return 0;
  }
  object = actionId._object;
  uint64_t countAndFlagsBits = actionId._countAndFlagsBits;
  Swift::String v6 = appBundleId._object;
  uint64_t v7 = appBundleId._countAndFlagsBits;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v7, (uint64_t)v6);
  if ((v9 & 1) == 0
    || (uint64_t v10 = *(void *)(*(void *)(v3 + 56) + 8 * v8),
        swift_bridgeObjectRetain(),
        swift_bridgeObjectRelease(),
        !*(void *)(v10 + 16)))
  {
LABEL_8:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  id v13 = *(id *)(*(void *)(v10 + 56) + 8 * v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unsigned __int8 v14 = objc_msgSend(v13, sel_BOOLValue);

  return v14;
}

Swift::Bool __swiftcall IntentStatesStore.isEmpty()()
{
  return *(void *)(*(void *)(v0 + 16) + 16) == 0;
}

uint64_t IntentStatesStore.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ConditionalIntentMetadataStore.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IntentStatesStore()
{
  return IntentStatesStore.debugDescription.getter();
}

uint64_t AppShortcutExpansionContext.mapConditionalIntentMetadata.getter()
{
  return swift_retain();
}

uint64_t AppShortcutExpansionContext.mapConditionalIntentsStates.getter()
{
  return swift_retain();
}

uint64_t one-time initialization function for emptyContext()
{
  type metadata accessor for ConditionalIntentMetadataStore();
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = MEMORY[0x1E4FBC868];
  *(void *)(v0 + 16) = MEMORY[0x1E4FBC868];
  type metadata accessor for IntentStatesStore();
  uint64_t result = swift_allocObject();
  uint64_t v3 = MEMORY[0x1E4FBC870];
  *(void *)(result + 16) = v1;
  static AppShortcutExpansionContext.emptyContext = v3;
  *(void *)algn_1EB9DB6F8 = v0;
  qword_1EB9DB700 = result;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t vars8;

  if (one-time initialization token for emptySessionContext != -1) {
    swift_once();
  }
  uint64_t v0 = static LinkExpansionContext.SessionContext.emptySessionContext;
  uint64_t v1 = one-time initialization token for emptyTurnContext;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  static LinkExpansionContext.emptyContext = v0;
  *(void *)algn_1E9F3D518 = static LinkExpansionContext.TurnContext.emptyTurnContext;

  return swift_retain();
}

uint64_t static AppShortcutExpansionContext.emptyContext.getter()
{
  if (one-time initialization token for emptyContext != -1) {
    swift_once();
  }
  uint64_t v0 = static AppShortcutExpansionContext.emptyContext;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return v0;
}

unint64_t AppShortcutExpansionContext.debugDescription.getter()
{
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v0 = Set.description.getter();
  uint64_t v2 = v1;
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = v0;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 8236;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  v5._uint64_t countAndFlagsBits = 0xD000000000000016;
  v5._object = (void *)0x80000001BA063130;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  type metadata accessor for ConditionalIntentMetadataStore();
  swift_retain();
  v6._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 8236;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  swift_bridgeObjectRetain();
  v8._uint64_t countAndFlagsBits = 0xD000000000000013;
  v8._object = (void *)0x80000001BA063150;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  type metadata accessor for IntentStatesStore();
  swift_retain();
  v9._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v10._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  v10._object = (void *)0x80000001BA063170;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v11._uint64_t countAndFlagsBits = 41;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  return 0xD00000000000001CLL;
}

uint64_t AppShortcutExpansionContext.conditionalIntentsStates.getter()
{
  return swift_retain();
}

uint64_t AppShortcutExpansionContext.conditionalIntentMetadataStore.getter()
{
  return swift_retain();
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AppShortcutExpansionContext()
{
  return AppShortcutExpansionContext.debugDescription.getter();
}

uint64_t protocol witness for AppShortcutContextProviding.salientAppBundleIds.getter in conformance AppShortcutExpansionContext()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for AppShortcutContextProviding.mapConditionalIntentMetadata.getter in conformance AppShortcutExpansionContext()
{
  return swift_retain();
}

uint64_t protocol witness for AppShortcutContextProviding.conditionalIntentsStates.getter in conformance AppShortcutExpansionContext()
{
  return swift_retain();
}

uint64_t AppShortcutExpansionContextBuilder.cachedConditionalIntentsMetadata.getter()
{
  return swift_retain();
}

uint64_t AppShortcutExpansionContextBuilder.cachedConditionalIntentsMetadata.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_release();
}

uint64_t (*AppShortcutExpansionContextBuilder.cachedConditionalIntentsMetadata.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t AppShortcutExpansionContextBuilder.appShortcutExpansionContext.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 24);
  outlined copy of AppShortcutExpansionContext?(v1);
  return v1;
}

uint64_t AppShortcutExpansionContextBuilder.appShortcutExpansionContext.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t v7 = v3[3];
  void v3[3] = a1;
  v3[4] = a2;
  v3[5] = a3;
  return outlined consume of AppShortcutExpansionContext?(v7);
}

uint64_t (*AppShortcutExpansionContextBuilder.appShortcutExpansionContext.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t AppShortcutExpansionContextBuilder.metadataProvider.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 48, a1);
}

uint64_t AppShortcutExpansionContextBuilder.appShortcutStateProvider.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 88, a1);
}

void *AppShortcutExpansionContextBuilder.__allocating_init(metadataProvider:appShortcutStateProvider:)(uint64_t a1, uint64_t a2)
{
  Swift::String v4 = (void *)swift_allocObject();
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v7 = __swift_mutable_project_boxed_opaque_existential_1(a1, v6);
  MEMORY[0x1F4188790](v7);
  Swift::String v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 16))(v9);
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v12 = *(void *)(a2 + 32);
  uint64_t v13 = __swift_mutable_project_boxed_opaque_existential_1(a2, v11);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v16 + 16))(v15);
  os_log_type_t v17 = specialized AppShortcutExpansionContextBuilder.init(metadataProvider:appShortcutStateProvider:)((uint64_t)v9, (uint64_t)v15, v4, v6, v11, v5, v12);
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v17;
}

void *AppShortcutExpansionContextBuilder.init(metadataProvider:appShortcutStateProvider:)(uint64_t a1, uint64_t a2)
{
  Swift::String v3 = v2;
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v8 = __swift_mutable_project_boxed_opaque_existential_1(a1, v7);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v11 + 16))(v10);
  uint64_t v12 = *(void *)(a2 + 24);
  uint64_t v13 = *(void *)(a2 + 32);
  uint64_t v14 = __swift_mutable_project_boxed_opaque_existential_1(a2, v12);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v17 + 16))(v16);
  unint64_t v18 = specialized AppShortcutExpansionContextBuilder.init(metadataProvider:appShortcutStateProvider:)((uint64_t)v10, (uint64_t)v16, v3, v7, v12, v6, v13);
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v18;
}

uint64_t AppShortcutExpansionContextBuilder.collectTurnContext(rrCandidates:appShortcutTargets:)(uint64_t a1, uint64_t a2)
{
  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v4 = static MessageBusActor.shared;
  v3[15] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](AppShortcutExpansionContextBuilder.collectTurnContext(rrCandidates:appShortcutTargets:), v4, 0);
}

uint64_t AppShortcutExpansionContextBuilder.collectTurnContext(rrCandidates:appShortcutTargets:)()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[16] = __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1B9C64000, v2, v3, "[AppShortcutExpansionContext] Collecting TurnContext", v4, 2u);
    MEMORY[0x1BA9E48C0](v4, -1, -1);
  }
  uint64_t v5 = v0[14];
  uint64_t v6 = v0[12];

  v0[17] = specialized AppShortcutExpansionContextBuilder.extractOnScreenBundleIDs(from:)(v6);
  swift_beginAccess();
  uint64_t v7 = *(void *)(*(void *)(*(void *)(v5 + 16) + 16) + 16);
  uint64_t v8 = (void *)v0[14];
  if (v7)
  {
    uint64_t v9 = v8[14];
    uint64_t v10 = v8[15];
    __swift_project_boxed_opaque_existential_1(v8 + 11, v9);
    uint64_t v11 = v8[2];
    v0[20] = v11;
    unint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 + 8) + **(int **)(v10 + 8));
    swift_retain();
    uint64_t v12 = (void *)swift_task_alloc();
    v0[21] = v12;
    *uint64_t v12 = v0;
    v12[1] = AppShortcutExpansionContextBuilder.collectTurnContext(rrCandidates:appShortcutTargets:);
    uint64_t v13 = v0[13];
    return v18(v13, v11, v9, v10);
  }
  else
  {
    uint64_t v15 = v8[9];
    uint64_t v16 = v8[10];
    __swift_project_boxed_opaque_existential_1(v8 + 6, v15);
    uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v16 + 16) + **(int **)(v16 + 16));
    uint64_t v17 = (void *)swift_task_alloc();
    v0[18] = v17;
    *uint64_t v17 = v0;
    v17[1] = AppShortcutExpansionContextBuilder.collectTurnContext(rrCandidates:appShortcutTargets:);
    return v19(v15, v16);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  uint64_t v1 = v0[14];
  uint64_t v2 = specialized AppShortcutExpansionContextBuilder.extractActionMetadata(actionsMetadata:)(v0[19]);
  swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = v2;
  swift_release();
  os_log_type_t v3 = (void *)v0[14];
  uint64_t v4 = v3[14];
  uint64_t v5 = v3[15];
  __swift_project_boxed_opaque_existential_1(v3 + 11, v4);
  uint64_t v6 = v3[2];
  v0[20] = v6;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 + 8) + **(int **)(v5 + 8));
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[21] = v7;
  uint8_t *v7 = v0;
  v7[1] = AppShortcutExpansionContextBuilder.collectTurnContext(rrCandidates:appShortcutTargets:);
  uint64_t v8 = v0[13];
  return v10(v8, v6, v4, v5);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v15;
  void *v16;
  uint64_t v17;

  uint64_t v16 = v0;
  uint64_t v1 = v0[22];
  uint64_t v2 = v0[14];
  swift_release();
  type metadata accessor for IntentStatesStore();
  os_log_type_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  uint64_t v4 = *(void *)(v2 + 16);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = v0[17];
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    v0[8] = v7;
    uint64_t v15 = v9;
    v0[9] = v4;
    v0[10] = v3;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v10 = String.init<A>(reflecting:)();
    v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    _os_log_impl(&dword_1B9C64000, v5, v6, "[AppShortcutExpansionContext] TurnContext: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v9, -1, -1);
    MEMORY[0x1BA9E48C0](v8, -1, -1);

    swift_release();
  }
  else
  {
    swift_release_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  uint64_t v13 = v0[17];
  return v12(v13, v4, v3);
}

uint64_t AppShortcutExpansionContextBuilder.collectTurnContext(rrCandidates:appShortcutTargets:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 120);
  *(void *)(*(void *)v1 + 152) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](AppShortcutExpansionContextBuilder.collectTurnContext(rrCandidates:appShortcutTargets:), v2, 0);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v2 = *(void *)(*(void *)v1 + 120);
  *(void *)(*(void *)v1 + 176) = a1;
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](AppShortcutExpansionContextBuilder.collectTurnContext(rrCandidates:appShortcutTargets:), v2, 0);
}

uint64_t AppShortcutExpansionContextBuilder.deinit()
{
  swift_release();
  outlined consume of AppShortcutExpansionContext?(*(void *)(v0 + 24));
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 48);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 88);
  return v0;
}

uint64_t AppShortcutExpansionContextBuilder.__deallocating_deinit()
{
  swift_release();
  outlined consume of AppShortcutExpansionContext?(*(void *)(v0 + 24));
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 48);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 88);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ConditionalIntentMetadataStore()
{
  return self;
}

uint64_t type metadata accessor for IntentStatesStore()
{
  return self;
}

uint64_t outlined copy of AppShortcutExpansionContext?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

void *specialized AppShortcutExpansionContextBuilder.init(metadataProvider:appShortcutStateProvider:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  a3[9] = a4;
  a3[10] = a6;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(a3 + 6);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(boxed_opaque_existential_0, a1, a4);
  a3[14] = a5;
  a3[15] = a7;
  uint64_t v14 = __swift_allocate_boxed_opaque_existential_0(a3 + 11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(v14, a2, a5);
  type metadata accessor for ConditionalIntentMetadataStore();
  a3[4] = 0;
  a3[5] = 0;
  a3[3] = 0;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = MEMORY[0x1E4FBC868];
  a3[2] = v15;
  return a3;
}

uint64_t method lookup function for ConditionalIntentMetadataStore(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConditionalIntentMetadataStore);
}

uint64_t dispatch thunk of ConditionalIntentMetadataStore.__allocating_init(mapIsPersistedConditionalIntent:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t method lookup function for IntentStatesStore(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for IntentStatesStore);
}

uint64_t dispatch thunk of IntentStatesStore.__allocating_init(conditionalIntentsStates:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of AppShortcutContextProviding.salientAppBundleIds.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AppShortcutContextProviding.mapConditionalIntentMetadata.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AppShortcutContextProviding.conditionalIntentsStates.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t destroy for AppShortcutExpansionContext()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for AppShortcutExpansionContext(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for AppShortcutExpansionContext(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AppShortcutExpansionContext(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AppShortcutExpansionContext(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppShortcutExpansionContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppShortcutExpansionContext()
{
  return &type metadata for AppShortcutExpansionContext;
}

uint64_t type metadata accessor for AppShortcutExpansionContextBuilder()
{
  return self;
}

uint64_t method lookup function for AppShortcutExpansionContextBuilder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AppShortcutExpansionContextBuilder);
}

uint64_t dispatch thunk of AppShortcutExpansionContextBuilder.__allocating_init(metadataProvider:appShortcutStateProvider:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t specialized AppShortcutExpansionContextBuilder.extractOnScreenBundleIDs(from:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRDataSourceMetadataValue?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v172 = (char *)v130 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for RRMetadata();
  uint64_t v140 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v130 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v184 = (void (*)(char *, char *, uint64_t))((char *)v130 - v8);
  uint64_t v9 = type metadata accessor for RRDataSourceMetadataValue();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v137 = (char *)v130 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v149 = (char *)v130 - v14;
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v180 = (char *)v130 - v16;
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v171 = (char *)v130 - v18;
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v170 = (char *)v130 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  unint64_t v154 = (char *)v130 - v22;
  MEMORY[0x1F4188790](v21);
  unsigned int v162 = (char *)v130 - v23;
  uint64_t v167 = type metadata accessor for RREntity();
  uint64_t v24 = *(void *)(v167 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v167);
  uint64_t v151 = (char *)v130 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  unint64_t v143 = (char *)v130 - v28;
  MEMORY[0x1F4188790](v27);
  uint64_t v148 = (char *)v130 - v29;
  uint64_t v30 = type metadata accessor for RRCandidate();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v150 = (char *)v130 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = MEMORY[0x1F4188790](v32);
  char v135 = (char *)v130 - v35;
  uint64_t v36 = MEMORY[0x1F4188790](v34);
  uint64_t v160 = (char *)v130 - v37;
  MEMORY[0x1F4188790](v36);
  uint64_t v168 = (char *)v130 - v38;
  uint64_t v39 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v185 = MEMORY[0x1E4FBC860];
  uint64_t v40 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v161 = v30;
  uint64_t v147 = v40;
  uint64_t v131 = v31;
  uint64_t v132 = v24;
  if (!v40)
  {
    uint64_t v110 = v39;
    uint64_t v111 = (uint64_t)v39;
LABEL_64:
    swift_bridgeObjectRelease();
    int64_t v112 = *((void *)v110 + 2);
    uint64_t v113 = v132;
    if (v112)
    {
      uint64_t v185 = v111;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v112, 0);
      uint64_t v114 = *(void (**)(char *, char *, uint64_t))(v131 + 16);
      uint64_t v115 = *(unsigned __int8 *)(v131 + 80);
      unint64_t v182 = v110;
      uint64_t v116 = &v110[(v115 + 32) & ~v115];
      uint64_t v183 = *(void (***)(char *, uint64_t, uint64_t))(v131 + 72);
      uint64_t v184 = v114;
      uint64_t v117 = (void (**)(char *, uint64_t))(v113 + 8);
      uint64_t v118 = (void (**)(char *, uint64_t))(v131 + 8);
      do
      {
        unint64_t v119 = v150;
        v184(v150, v116, v30);
        uint64_t v120 = v151;
        RRCandidate.entity.getter();
        uint64_t v121 = v30;
        uint64_t v122 = RREntity.appBundleId.getter();
        uint64_t v124 = v123;
        (*v117)(v120, v167);
        (*v118)(v119, v121);
        uint64_t v125 = v185;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v125 + 16) + 1, 1);
          uint64_t v125 = v185;
        }
        unint64_t v127 = *(void *)(v125 + 16);
        unint64_t v126 = *(void *)(v125 + 24);
        if (v127 >= v126 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v126 > 1, v127 + 1, 1);
          uint64_t v125 = v185;
        }
        *(void *)(v125 + 16) = v127 + 1;
        uint64_t v128 = v125 + 16 * v127;
        *(void *)(v128 + 32) = v122;
        *(void *)(v128 + 40) = v124;
        uint64_t v116 = (char *)v183 + (void)v116;
        --v112;
        uint64_t v30 = v161;
      }
      while (v112);
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v125 = MEMORY[0x1E4FBC860];
    }
    uint64_t v129 = specialized Set.init<A>(_:)(v125);
    swift_bridgeObjectRelease();
    return v129;
  }
  uint64_t v41 = 0;
  uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 16);
  uint64_t v42 = v31 + 16;
  uint64_t v164 = v43;
  unint64_t v44 = (*(unsigned __int8 *)(v42 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 64);
  uint64_t v153 = *(void *)(v42 + 56);
  v130[1] = a1;
  unint64_t v133 = v44;
  uint64_t v146 = a1 + v44;
  uint64_t v158 = (void (**)(char *, uint64_t))(v24 + 8);
  uint64_t v145 = (void (**)(char *, uint64_t))(v42 - 8);
  unint64_t v178 = (uint64_t (**)(char *, uint64_t))(v140 + 88);
  uint64_t v179 = v140 + 16;
  int v177 = *MEMORY[0x1E4FA3DB0];
  uint64_t v174 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
  uint64_t v175 = (void (**)(char *, uint64_t))(v140 + 8);
  uint64_t v169 = (void (**)(char *, uint64_t))(v140 + 96);
  uint64_t v183 = (void (**)(char *, uint64_t, uint64_t))(v10 + 32);
  uint64_t v176 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  unsigned int v142 = *MEMORY[0x1E4FA3DE0];
  uint64_t v152 = (void (**)(char *, void, uint64_t))(v10 + 104);
  uint64_t v159 = v10 + 16;
  uint64_t v173 = v10;
  unsigned int v166 = (void (**)(char *, uint64_t))(v10 + 8);
  unsigned int v136 = *MEMORY[0x1E4FA3DD0];
  uint64_t v165 = v42;
  uint64_t v134 = (void (**)(char *, char *, uint64_t))(v42 + 16);
  uint64_t v45 = (uint64_t)v172;
  unint64_t v182 = v7;
  while (1)
  {
    uint64_t v163 = v41;
    v164(v168, v146 + v153 * v41, v30);
    uint64_t v48 = v148;
    RRCandidate.entity.getter();
    RREntity.usoEntity.getter();
    unint64_t v49 = *v158;
    (*v158)(v48, v167);
    uint64_t v50 = UsoTask.verbString.getter();
    uint64_t v52 = v51;
    swift_release();
    if (one-time initialization token for kUsoCommonAppEntityName != -1) {
      swift_once();
    }
    if (v50 == kUsoCommonAppEntityName._countAndFlagsBits && v52 == kUsoCommonAppEntityName._object)
    {
      swift_bridgeObjectRelease();
      v164(v160, (uint64_t)v168, v30);
      uint64_t v56 = v182;
    }
    else
    {
      char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v55 = v160;
      v164(v160, (uint64_t)v168, v30);
      uint64_t v56 = v182;
      if ((v54 & 1) == 0)
      {
        uint64_t v46 = v55;
        uint64_t v47 = *v145;
        (*v145)(v46, v30);
        goto LABEL_4;
      }
    }
    int v57 = v143;
    RRCandidate.entity.getter();
    uint64_t v58 = RREntity.metadata.getter();
    v49(v57, v167);
    uint64_t v59 = *(void *)(v58 + 16);
    if (v59)
    {
      unint64_t v60 = v58 + ((*(unsigned __int8 *)(v140 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v140 + 80));
      uint64_t v181 = *(void *)(v140 + 72);
      uint64_t v61 = *(void (**)(char *, unint64_t, uint64_t))(v140 + 16);
      uint64_t v157 = (void (*)(char *, unint64_t, uint64_t))v58;
      swift_bridgeObjectRetain();
      unint64_t v62 = MEMORY[0x1E4FBC860];
      do
      {
        char v63 = v184;
        v61((char *)v184, v60, v4);
        v61(v56, (unint64_t)v63, v4);
        int v64 = (*v178)(v56, v4);
        if (v64 == v177)
        {
          (*v169)(v56, v4);
          char v65 = *v183;
          uint64_t v66 = v45;
          double v67 = v171;
          (*v183)(v171, (uint64_t)v56, v9);
          unint64_t v68 = v67;
          uint64_t v45 = v66;
          v65((char *)v66, (uint64_t)v68, v9);
          (*v174)(v66, 0, 1, v9);
          (*v175)((char *)v184, v4);
        }
        else
        {
          uint64_t v69 = v56;
          char v70 = *v175;
          (*v175)(v69, v4);
          (*v174)(v45, 1, 1, v9);
          v70((char *)v184, v4);
        }
        if ((*v176)(v45, 1, v9) == 1)
        {
          outlined destroy of RRDataSourceMetadataValue?(v45);
        }
        else
        {
          uint64_t v71 = v45;
          uint64_t v72 = *v183;
          os_log_type_t v73 = v170;
          (*v183)(v170, v71, v9);
          v72(v180, (uint64_t)v73, v9);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v62 + 16) + 1, 1, v62);
          }
          unint64_t v75 = *(void *)(v62 + 16);
          unint64_t v74 = *(void *)(v62 + 24);
          if (v75 >= v74 >> 1) {
            unint64_t v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v74 > 1, v75 + 1, 1, v62);
          }
          *(void *)(v62 + 16) = v75 + 1;
          v72((char *)(v62+ ((*(unsigned __int8 *)(v173 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v173 + 80))+ *(void *)(v173 + 72) * v75), (uint64_t)v180, v9);
          uint64_t v45 = (uint64_t)v172;
        }
        uint64_t v56 = v182;
        v60 += v181;
        --v59;
      }
      while (v59);
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v62 = MEMORY[0x1E4FBC860];
    }
    uint64_t v76 = v173;
    unint64_t v77 = v154;
    uint64_t v78 = v162;
    uint64_t v79 = *v152;
    (*v152)(v162, v142, v9);
    uint64_t v181 = *(void *)(v62 + 16);
    if (!v181)
    {
      uint64_t v30 = v161;
      (*v166)(v78, v9);
LABEL_61:
      swift_bridgeObjectRelease();
      uint64_t v47 = *v145;
      (*v145)(v160, v30);
      goto LABEL_4;
    }
    unint64_t v139 = (*(unsigned __int8 *)(v76 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80);
    uint64_t v80 = *(void (**)(char *, unint64_t, uint64_t))(v76 + 16);
    unint64_t v144 = v62 + v139;
    uint64_t v157 = v80;
    ((void (*)(char *))v80)(v77);
    uint64_t v81 = lazy protocol witness table accessor for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier((unint64_t *)&lazy protocol witness table cache variable for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue, MEMORY[0x1E4FA3DE8]);
    swift_bridgeObjectRetain();
    uint64_t v156 = v81;
    char v82 = dispatch thunk of static Equatable.== infix(_:_:)();
    unint64_t v83 = (unint64_t)v166;
    uint64_t v155 = *(void (**)(char *, uint64_t))(v76 + 8);
    v155(v77, v9);
    if (v82)
    {
      swift_bridgeObjectRelease();
      unint64_t v84 = v162;
      uint64_t v85 = v155;
      goto LABEL_38;
    }
    uint64_t v138 = v83 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    if (v181 == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v30 = v161;
      v155(v162, v9);
      goto LABEL_61;
    }
    uint64_t v141 = *(void *)(v76 + 72);
    v157(v77, v144 + v141, v9);
    char v86 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v87 = v155;
    v155(v77, v9);
    uint64_t v85 = v87;
    if ((v86 & 1) == 0) {
      break;
    }
LABEL_37:
    swift_bridgeObjectRelease();
    uint64_t v45 = (uint64_t)v172;
    unint64_t v84 = v162;
LABEL_38:
    unint64_t v88 = v144;
    v85(v84, v9);
    v79(v149, v136, v9);
    uint64_t v89 = v137;
    v157(v137, v88, v9);
    uint64_t v90 = v85;
    unint64_t v91 = v62;
    BOOL v92 = v89;
    swift_bridgeObjectRetain();
    LOBYTE(v89) = dispatch thunk of static Equatable.== infix(_:_:)();
    v90(v92, v9);
    if ((v89 & 1) == 0)
    {
      if (v181 == 1) {
        goto LABEL_40;
      }
      uint64_t v97 = *(void *)(v173 + 72);
      v157(v92, v88 + v97, v9);
      char v98 = dispatch thunk of static Equatable.== infix(_:_:)();
      v155(v92, v9);
      if ((v98 & 1) == 0)
      {
        if (v181 != 2)
        {
          unint64_t v100 = v91 + v139 + 2 * v97;
          uint64_t v101 = 2;
          do
          {
            uint64_t result = ((uint64_t (*)(char *, unint64_t, uint64_t))v157)(v92, v100, v9);
            uint64_t v103 = v101 + 1;
            if (__OFADD__(v101, 1)) {
              goto LABEL_75;
            }
            char v104 = dispatch thunk of static Equatable.== infix(_:_:)();
            v155(v92, v9);
            if (v104) {
              goto LABEL_46;
            }
            ++v101;
            v100 += v97;
          }
          while (v103 != v181);
        }
LABEL_40:
        swift_bridgeObjectRelease();
        v155(v149, v9);
        swift_bridgeObjectRelease();
        uint64_t v30 = v161;
        (*v145)(v160, v161);
        uint64_t v93 = *v134;
        (*v134)(v135, v168, v30);
        uint64_t v94 = v185;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v94 + 16) + 1, 1);
          uint64_t v94 = v185;
        }
        unint64_t v96 = *(void *)(v94 + 16);
        unint64_t v95 = *(void *)(v94 + 24);
        if (v96 >= v95 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v95 > 1, v96 + 1, 1);
          uint64_t v94 = v185;
        }
        *(void *)(v94 + 16) = v96 + 1;
        v93((char *)(v94 + v133 + v96 * v153), v135, v30);
        uint64_t v185 = v94;
        goto LABEL_5;
      }
    }
LABEL_46:
    swift_bridgeObjectRelease();
    v155(v149, v9);
    swift_bridgeObjectRelease();
    uint64_t v47 = *v145;
    uint64_t v30 = v161;
    (*v145)(v160, v161);
LABEL_4:
    v47(v168, v30);
LABEL_5:
    uint64_t v41 = v163 + 1;
    if (v163 + 1 == v147)
    {
      uint64_t v110 = (char *)v185;
      uint64_t v111 = MEMORY[0x1E4FBC860];
      goto LABEL_64;
    }
  }
  if (v181 == 2)
  {
    swift_bridgeObjectRelease();
    uint64_t v30 = v161;
    uint64_t v45 = (uint64_t)v172;
    unint64_t v99 = v162;
LABEL_60:
    v85(v99, v9);
    goto LABEL_61;
  }
  unint64_t v105 = v62 + v139 + 2 * v141;
  uint64_t v106 = 2;
  while (1)
  {
    uint64_t v107 = v154;
    uint64_t result = ((uint64_t (*)(char *, unint64_t, uint64_t))v157)(v154, v105, v9);
    uint64_t v108 = v106 + 1;
    if (__OFADD__(v106, 1)) {
      break;
    }
    char v109 = dispatch thunk of static Equatable.== infix(_:_:)();
    v85(v107, v9);
    if (v109) {
      goto LABEL_37;
    }
    ++v106;
    v105 += v141;
    unint64_t v99 = v162;
    if (v108 == v181)
    {
      swift_bridgeObjectRelease();
      uint64_t v30 = v161;
      uint64_t v45 = (uint64_t)v172;
      goto LABEL_60;
    }
  }
  __break(1u);
LABEL_75:
  __break(1u);
  return result;
}

uint64_t specialized AppShortcutExpansionContextBuilder.extractActionMetadata(actionsMetadata:)(uint64_t a1)
{
  uint64_t v87 = a1 + 64;
  uint64_t v1 = 1 << *(unsigned char *)(a1 + 32);
  if (v1 < 64) {
    uint64_t v2 = ~(-1 << v1);
  }
  else {
    uint64_t v2 = -1;
  }
  unint64_t v93 = v2 & *(void *)(a1 + 64);
  int64_t v88 = (unint64_t)(v1 + 63) >> 6;
  uint64_t v3 = (void *)*MEMORY[0x1E4F725A0];
  swift_bridgeObjectRetain();
  uint64_t v85 = 0;
  int64_t v4 = 0;
  uint64_t v5 = (void *)MEMORY[0x1E4FBC868];
  unint64_t v91 = v3;
  while (2)
  {
    uint64_t v94 = v5;
    if (!v93)
    {
      int64_t v8 = v4 + 1;
      if (__OFADD__(v4, 1)) {
        goto LABEL_104;
      }
      if (v8 >= v88) {
        goto LABEL_99;
      }
      unint64_t v9 = *(void *)(v87 + 8 * v8);
      int64_t v10 = v4 + 1;
      if (!v9)
      {
        int64_t v10 = v8 + 1;
        if (v8 + 1 >= v88) {
          goto LABEL_99;
        }
        unint64_t v9 = *(void *)(v87 + 8 * v10);
        if (!v9)
        {
          int64_t v10 = v8 + 2;
          if (v8 + 2 >= v88) {
            goto LABEL_99;
          }
          unint64_t v9 = *(void *)(v87 + 8 * v10);
          if (!v9)
          {
            int64_t v11 = v8 + 3;
            if (v11 < v88)
            {
              unint64_t v9 = *(void *)(v87 + 8 * v11);
              if (v9)
              {
                int64_t v10 = v11;
                goto LABEL_21;
              }
              while (1)
              {
                int64_t v10 = v11 + 1;
                if (__OFADD__(v11, 1)) {
                  goto LABEL_107;
                }
                if (v10 >= v88) {
                  break;
                }
                unint64_t v9 = *(void *)(v87 + 8 * v10);
                ++v11;
                if (v9) {
                  goto LABEL_21;
                }
              }
            }
LABEL_99:
            unint64_t v83 = v5;
            swift_release();
            _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe((uint64_t)v85);
            type metadata accessor for ConditionalIntentMetadataStore();
            uint64_t result = swift_allocObject();
            *(void *)(result + 16) = v83;
            return result;
          }
        }
      }
LABEL_21:
      int64_t v92 = v10;
      unint64_t v93 = (v9 - 1) & v9;
      unint64_t v7 = __clz(__rbit64(v9)) + (v10 << 6);
      goto LABEL_22;
    }
    unint64_t v6 = __clz(__rbit64(v93));
    int64_t v92 = v4;
    v93 &= v93 - 1;
    unint64_t v7 = v6 | (v4 << 6);
LABEL_22:
    uint64_t v12 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v7);
    uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8 * v7);
    uint64_t v14 = v12[1];
    uint64_t v90 = *v12;
    uint64_t v97 = v13 + 64;
    uint64_t v15 = 1 << *(unsigned char *)(v13 + 32);
    if (v15 < 64) {
      uint64_t v16 = ~(-1 << v15);
    }
    else {
      uint64_t v16 = -1;
    }
    unint64_t v17 = v16 & *(void *)(v13 + 64);
    int64_t v98 = (unint64_t)(v15 + 63) >> 6;
    uint64_t v95 = v14;
    swift_bridgeObjectRetain();
    uint64_t v99 = v13;
    swift_bridgeObjectRetain();
    int64_t v18 = 0;
    while (v17)
    {
      unint64_t v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v20 = v19 | (v18 << 6);
LABEL_44:
      uint64_t v24 = (uint64_t *)(*(void *)(v99 + 48) + 16 * v20);
      uint64_t v25 = *v24;
      uint64_t v26 = *(void **)(*(void *)(v99 + 56) + 8 * v20);
      uint64_t v101 = v24[1];
      swift_bridgeObjectRetain();
      id v27 = v26;
      id v28 = objc_msgSend(v27, sel_systemProtocols);
      type metadata accessor for LNSystemProtocol();
      unint64_t v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      id v30 = objc_msgSend(self, sel_conditionallyEnabledProtocol);
      if (v29 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
        if (!v31)
        {
LABEL_26:

          swift_bridgeObjectRelease();
          goto LABEL_27;
        }
      }
      else
      {
        uint64_t v31 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v31) {
          goto LABEL_26;
        }
      }
      uint64_t v96 = v25;
      int64_t v100 = v18;
      if ((v29 & 0xC000000000000001) != 0) {
        id v32 = (id)MEMORY[0x1BA9E3990](0, v29);
      }
      else {
        id v32 = *(id *)(v29 + 32);
      }
      uint64_t v33 = v32;
      char v34 = static NSObject.== infix(_:_:)();

      if (v34) {
        goto LABEL_49;
      }
      if (v31 == 1)
      {
LABEL_55:

        swift_bridgeObjectRelease();
LABEL_56:
        int64_t v18 = v100;
LABEL_27:
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
      }
      else
      {
        if ((v29 & 0xC000000000000001) != 0)
        {
          MEMORY[0x1BA9E3990](1, v29);
          char v40 = static NSObject.== infix(_:_:)();
          swift_unknownObjectRelease();
          if ((v40 & 1) == 0)
          {
            if (v31 == 2) {
              goto LABEL_55;
            }
            uint64_t v41 = 2;
            while (1)
            {
              MEMORY[0x1BA9E3990](v41, v29);
              uint64_t v42 = v41 + 1;
              if (__OFADD__(v41, 1)) {
                break;
              }
              char v43 = static NSObject.== infix(_:_:)();
              swift_unknownObjectRelease();
              if (v43) {
                goto LABEL_75;
              }
              ++v41;
              if (v42 == v31)
              {

                swift_bridgeObjectRelease();
                uint64_t v3 = v91;
                goto LABEL_56;
              }
            }
            __break(1u);
LABEL_101:
            __break(1u);
            goto LABEL_102;
          }
        }
        else
        {
          id v44 = *(id *)(v29 + 40);
          char v45 = static NSObject.== infix(_:_:)();

          if ((v45 & 1) == 0)
          {
            if (v31 == 2) {
              goto LABEL_55;
            }
            uint64_t v46 = 6;
            while (1)
            {
              uint64_t v47 = v46 - 3;
              if (__OFADD__(v46 - 4, 1)) {
                break;
              }
              id v48 = *(id *)(v29 + 8 * v46);
              char v49 = static NSObject.== infix(_:_:)();

              if (v49)
              {
LABEL_75:

                swift_bridgeObjectRelease();
                uint64_t v3 = v91;
                goto LABEL_50;
              }
              ++v46;
              int64_t v18 = v100;
              if (v47 == v31)
              {

                swift_bridgeObjectRelease();
                uint64_t v3 = v91;
                goto LABEL_27;
              }
            }
LABEL_102:
            __break(1u);
            goto LABEL_103;
          }
        }
LABEL_49:

        swift_bridgeObjectRelease();
LABEL_50:
        swift_bridgeObjectRelease();
        id v35 = objc_msgSend(v27, sel_systemProtocolMetadata);
        type metadata accessor for LNSystemProtocolIdentifier(0);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LNSystemProtocolMetadata);
        lazy protocol witness table accessor for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier((unint64_t *)&lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier, type metadata accessor for LNSystemProtocolIdentifier);
        uint64_t v36 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        int64_t v18 = v100;
        if (!*(void *)(v36 + 16))
        {
          swift_bridgeObjectRelease();

          goto LABEL_67;
        }
        id v37 = v3;
        specialized __RawDictionaryStorage.find<A>(_:)();
        if (v38)
        {
          swift_unknownObjectRetain();

          swift_bridgeObjectRelease();
          self;
          uint64_t v39 = swift_dynamicCastObjCClass();
          if (v39)
          {
            uint64_t v50 = (void *)v39;
            swift_bridgeObjectRetain();
            swift_unknownObjectRetain();
            unsigned __int8 v51 = objc_msgSend(v50, sel_persistState);
            _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe((uint64_t)v85);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            unint64_t v54 = specialized __RawDictionaryStorage.find<A>(_:)(v90, v95);
            uint64_t v55 = v94[2];
            BOOL v56 = (v53 & 1) == 0;
            uint64_t v57 = v55 + v56;
            if (__OFADD__(v55, v56)) {
              goto LABEL_105;
            }
            char v58 = v53;
            if (v94[3] >= v57)
            {
              if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                specialized _NativeDictionary.copy()();
              }
            }
            else
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v57, isUniquelyReferenced_nonNull_native);
              unint64_t v59 = specialized __RawDictionaryStorage.find<A>(_:)(v90, v95);
              if ((v58 & 1) != (v60 & 1)) {
                goto LABEL_110;
              }
              unint64_t v54 = v59;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            if ((v58 & 1) == 0)
            {
              unint64_t v61 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
              v94[(v54 >> 6) + 8] |= 1 << v54;
              unint64_t v62 = (uint64_t *)(v94[6] + 16 * v54);
              *unint64_t v62 = v90;
              v62[1] = v95;
              *(void *)(v94[7] + 8 * v54) = v61;
              uint64_t v63 = v94[2];
              BOOL v64 = __OFADD__(v63, 1);
              uint64_t v65 = v63 + 1;
              if (v64) {
                goto LABEL_108;
              }
              v94[2] = v65;
              swift_bridgeObjectRetain();
            }
            unsigned __int8 v86 = v51;
            uint64_t v66 = v94[7];
            swift_bridgeObjectRelease();
            uint64_t v67 = 8 * v54;
            char v68 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v69 = *(void **)(v66 + 8 * v54);
            *(void *)(v66 + 8 * v54) = 0x8000000000000000;
            unint64_t v71 = specialized __RawDictionaryStorage.find<A>(_:)(v96, v101);
            uint64_t v72 = v69[2];
            BOOL v73 = (v70 & 1) == 0;
            uint64_t v74 = v72 + v73;
            if (__OFADD__(v72, v73)) {
              goto LABEL_106;
            }
            char v75 = v70;
            if (v69[3] >= v74)
            {
              if ((v68 & 1) == 0) {
                specialized _NativeDictionary.copy()();
              }
              uint64_t v79 = v101;
              uint64_t v76 = v96;
              if (v75) {
                goto LABEL_94;
              }
            }
            else
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v74, v68);
              uint64_t v76 = v96;
              unint64_t v77 = specialized __RawDictionaryStorage.find<A>(_:)(v96, v101);
              if ((v75 & 1) != (v78 & 1)) {
                goto LABEL_110;
              }
              unint64_t v71 = v77;
              uint64_t v79 = v101;
              if (v75)
              {
LABEL_94:
                *(unsigned char *)(v69[7] + v71) = v86;
                goto LABEL_95;
              }
            }
            v69[(v71 >> 6) + 8] |= 1 << v71;
            uint64_t v80 = (uint64_t *)(v69[6] + 16 * v71);
            *uint64_t v80 = v76;
            v80[1] = v79;
            *(unsigned char *)(v69[7] + v71) = v86;
            uint64_t v81 = v69[2];
            BOOL v64 = __OFADD__(v81, 1);
            uint64_t v82 = v81 + 1;
            if (v64) {
              goto LABEL_109;
            }
            v69[2] = v82;
            swift_bridgeObjectRetain();
LABEL_95:
            *(void *)(v66 + v67) = v69;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease_n();

            uint64_t v85 = specialized thunk for @callee_guaranteed () -> (@owned [String : Bool]);
            int64_t v18 = v100;
          }
          else
          {
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          swift_bridgeObjectRelease();

LABEL_67:
          swift_bridgeObjectRelease();
        }
      }
    }
    int64_t v21 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      goto LABEL_101;
    }
    if (v21 >= v98)
    {
LABEL_5:
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v5 = v94;
      int64_t v4 = v92;
      continue;
    }
    break;
  }
  unint64_t v22 = *(void *)(v97 + 8 * v21);
  ++v18;
  if (v22) {
    goto LABEL_43;
  }
  int64_t v18 = v21 + 1;
  if (v21 + 1 >= v98) {
    goto LABEL_5;
  }
  unint64_t v22 = *(void *)(v97 + 8 * v18);
  if (v22) {
    goto LABEL_43;
  }
  int64_t v18 = v21 + 2;
  if (v21 + 2 >= v98) {
    goto LABEL_5;
  }
  unint64_t v22 = *(void *)(v97 + 8 * v18);
  if (v22)
  {
LABEL_43:
    unint64_t v17 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v18 << 6);
    goto LABEL_44;
  }
  int64_t v23 = v21 + 3;
  if (v23 >= v98) {
    goto LABEL_5;
  }
  unint64_t v22 = *(void *)(v97 + 8 * v23);
  if (v22)
  {
    int64_t v18 = v23;
    goto LABEL_43;
  }
  while (1)
  {
    int64_t v18 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v18 >= v98) {
      goto LABEL_5;
    }
    unint64_t v22 = *(void *)(v97 + 8 * v18);
    ++v23;
    if (v22) {
      goto LABEL_43;
    }
  }
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t outlined destroy of RRDataSourceMetadataValue?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRDataSourceMetadataValue?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t lazy protocol witness table accessor for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *AppShortcutParseExpansion.__allocating_init(appShortcutExpansionContext:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (void *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  return result;
}

uint64_t AppShortcutParseExpansion.appShortcutExpansionContext.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return v1;
}

void *AppShortcutParseExpansion.init(appShortcutExpansionContext:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[2] = a1;
  void v3[3] = a2;
  v3[4] = a3;
  return v3;
}

uint64_t closure #1 in AppShortcutParseExpansion.expandExactMatchParses(nlParse:appShortcutTargets:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v69 = a4;
  uint64_t v67 = a3;
  uint64_t v64 = a2;
  uint64_t v68 = type metadata accessor for Siri_Nlu_External_Parser();
  uint64_t v5 = *(void *)(v68 - 8);
  MEMORY[0x1F4188790](v68);
  unint64_t v7 = &v58[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  MEMORY[0x1F4188790](v8 - 8);
  int64_t v10 = &v58[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = &v58[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = *(void *)a1;
  char v70 = *(void **)(a1 + 8);
  uint64_t v16 = *(void **)(a1 + 24);
  uint64_t v63 = *(void *)(a1 + 16);
  uint64_t v66 = *(unsigned int *)(a1 + 32);
  int v65 = *(unsigned __int8 *)(a1 + 36);
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  uint64_t v17 = swift_beginAccess();
  uint64_t v18 = static LinkFeature.forceEnabled;
  if (*(void *)(static LinkFeature.forceEnabled + 16)
    && (uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v17), (v20 & 1) != 0))
  {
    if (*(unsigned char *)(*(void *)(v18 + 56) + v19) != 1) {
      goto LABEL_19;
    }
  }
  else
  {
    v71[3] = (uint64_t)&type metadata for LinkFeature;
    v71[4] = lazy protocol witness table accessor for type LinkFeature and conformance LinkFeature();
    char v21 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v71);
    if ((v21 & 1) == 0)
    {
LABEL_19:
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v12 + 16))(v14, v67, v11);
      Siri_Nlu_External_UserParse.parser.getter();
      Siri_Nlu_External_Parser.parserID.getter();
      (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v68);
      uint64_t v38 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v10, 0, 1, v38);
      swift_bridgeObjectRetain();
      LOBYTE(v71[0]) = v65;
      uint64_t v39 = v69;
      USOParse.init(userParse:parserIdentifier:appBundleId:groupIndex:)();
      uint64_t v40 = type metadata accessor for USOParse();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v39, 0, 1, v40);
    }
  }
  uint64_t v22 = *(void *)(*(void *)(v64 + 24) + 16);
  if (!*(void *)(v22 + 16)) {
    goto LABEL_19;
  }
  unint64_t v61 = v16;
  uint64_t v23 = swift_retain();
  uint64_t v24 = v15;
  uint64_t v25 = (uint64_t)v70;
  swift_bridgeObjectRetain();
  uint64_t v62 = v24;
  unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25);
  if ((v27 & 1) == 0
    || (uint64_t v60 = v23,
        uint64_t v28 = *(void *)(*(void *)(v22 + 56) + 8 * v26),
        swift_bridgeObjectRetain(),
        swift_bridgeObjectRelease(),
        !*(void *)(v28 + 16)))
  {
    swift_release();
LABEL_18:
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  unint64_t v29 = v61;
  swift_bridgeObjectRetain();
  uint64_t v30 = v63;
  specialized __RawDictionaryStorage.find<A>(_:)(v63, (uint64_t)v29);
  if ((v31 & 1) == 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_retain();
  v32._uint64_t countAndFlagsBits = v62;
  v32._object = v70;
  v33._uint64_t countAndFlagsBits = v30;
  v33._object = v29;
  BOOL v59 = IntentStatesStore.isConditionallyActive(appBundleId:actionId:)(v32, v33);
  swift_release();
  if (v59)
  {
    v34._uint64_t countAndFlagsBits = v62;
    v34._object = v70;
    v35._uint64_t countAndFlagsBits = v30;
    v35._object = v29;
    BOOL v59 = ConditionalIntentMetadataStore.isPersistedConditionalIntent(appBundleId:actionId:)(v34, v35);
    uint64_t v36 = *(void *)(v64 + 16);
    uint64_t v37 = (uint64_t)v70;
    swift_bridgeObjectRetain();
    LODWORD(v64) = specialized Set.contains(_:)(v62, v37, v36);
    swift_bridgeObjectRelease();
    if (v59 || (v64 & 1) != 0)
    {
      swift_release();
      goto LABEL_19;
    }
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v52 = type metadata accessor for Logger();
    __swift_project_value_buffer(v52, (uint64_t)static Logger.executor);
    unint64_t v53 = (unint64_t)v70;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    unint64_t v54 = (unint64_t)v29;
    char v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.debug.getter();
    BOOL v55 = os_log_type_enabled(v45, v46);
    uint64_t v56 = v63;
    if (!v55)
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      goto LABEL_32;
    }
    uint64_t v49 = swift_slowAlloc();
    uint64_t v50 = swift_slowAlloc();
    v71[0] = v50;
    *(_DWORD *)uint64_t v49 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v53, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v49 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v54, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    unsigned __int8 v51 = "[AppShortcutExpansion] Dropping non persisted conditional intent as the bundle isn't on screen: %s - %s";
LABEL_31:
    _os_log_impl(&dword_1B9C64000, v45, v46, v51, (uint8_t *)v49, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v50, -1, -1);
    MEMORY[0x1BA9E48C0](v49, -1, -1);

LABEL_32:
    swift_release();
    goto LABEL_33;
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v42 = type metadata accessor for Logger();
  __swift_project_value_buffer(v42, (uint64_t)static Logger.executor);
  unint64_t v43 = (unint64_t)v70;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  unint64_t v44 = (unint64_t)v29;
  char v45 = Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.debug.getter();
  BOOL v47 = os_log_type_enabled(v45, v46);
  uint64_t v48 = v63;
  if (v47)
  {
    uint64_t v49 = swift_slowAlloc();
    uint64_t v50 = swift_slowAlloc();
    v71[0] = v50;
    *(_DWORD *)uint64_t v49 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v43, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v49 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v44, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    unsigned __int8 v51 = "[AppShortcutExpansion] Dropping disabled conditional intent: %s - %s";
    goto LABEL_31;
  }

  swift_release();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
LABEL_33:
  uint64_t v57 = type metadata accessor for USOParse();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v69, 1, 1, v57);
}

uint64_t closure #1 in AppShortcutParseExpansion.expand(nlParse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v16 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  MEMORY[0x1F4188790](v5 - 8);
  unint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Siri_Nlu_External_UserParse();
  MEMORY[0x1F4188790](v8);
  char v10 = *(unsigned char *)(a1 + 20);
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  uint64_t v12 = *MEMORY[0x1E4FA2788];
  uint64_t v13 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 104))(v7, v12, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v7, 0, 1, v13);
  swift_bridgeObjectRetain();
  char v17 = v10;
  return USOParse.init(userParse:parserIdentifier:appBundleId:groupIndex:)();
}

uint64_t AppShortcutParseExpansion.deinit()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t method lookup function for AppShortcutParseExpansion(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AppShortcutParseExpansion);
}

uint64_t dispatch thunk of AppShortcutParseExpansion.__allocating_init(appShortcutExpansionContext:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of AppShortcutParseExpansion.expand(nlParse:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t AppShortcutStateProvider.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:)(uint64_t a1, uint64_t a2)
{
  unint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:)
                                                + async function pointer to specialized AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  return v7(a1, a2);
}

void specialized thunk for @callee_guaranteed () -> (@owned [String])(void *a1@<X8>)
{
  *a1 = MEMORY[0x1E4FBC860];
}

uint64_t AppShortcutStateProvider.deinit()
{
  return v0;
}

uint64_t AppShortcutStateProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t AppShortcutStateProvider.init()()
{
  return v0;
}

uint64_t protocol witness for AppShortcutStateProviding.intentsStates(appShortcutTargets:conditionalIntentMetadata:) in conformance AppShortcutStateProvider(uint64_t a1, uint64_t a2)
{
  unint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:)
                                                + async function pointer to specialized AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for AppShortcutStateProviding.intentsStates(appShortcutTargets:conditionalIntentMetadata:) in conformance AppShortcutStateProvider;
  return v7(a1, a2);
}

uint64_t specialized AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = a2;
  return MEMORY[0x1F4188298](specialized AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:), 0, 0);
}

uint64_t specialized AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:)()
{
  uint64_t v81 = v0;
  v80[1] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(*(void *)(v0 + 128) + 16);
  uint64_t v2 = MEMORY[0x1E4FBC868];
  if (v1)
  {
    uint64_t v3 = *(void *)(*(void *)(v0 + 136) + 16);
    uint64_t v4 = 0;
    uint64_t v5 = (uint64_t *)(swift_bridgeObjectRetain() + 56);
    uint64_t v78 = MEMORY[0x1E4FBC868];
    do
    {
      if (*(void *)(v3 + 16))
      {
        uint64_t v7 = *(v5 - 3);
        uint64_t v6 = *(v5 - 2);
        uint64_t v9 = *(v5 - 1);
        uint64_t v8 = *v5;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
        if ((v11 & 1) != 0
          && (uint64_t v12 = *(void *)(*(void *)(v3 + 56) + 8 * v10),
              swift_bridgeObjectRetain(),
              swift_bridgeObjectRelease(),
              *(void *)(v12 + 16)))
        {
          swift_bridgeObjectRetain();
          uint64_t v79 = v9;
          specialized __RawDictionaryStorage.find<A>(_:)(v9, v8);
          char v14 = v13;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v14)
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe((uint64_t)v4);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v80[0] = v78;
            unint64_t v77 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
            uint64_t v17 = *(void *)(v78 + 16);
            BOOL v18 = (v16 & 1) == 0;
            uint64_t v19 = v17 + v18;
            if (__OFADD__(v17, v18)) {
              goto LABEL_67;
            }
            char v20 = v16;
            if (*(void *)(v78 + 24) >= v19)
            {
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                specialized _NativeDictionary.copy()();
                uint64_t v78 = v80[0];
              }
            }
            else
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, isUniquelyReferenced_nonNull_native);
              uint64_t v78 = v80[0];
              unint64_t v77 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
              if ((v20 & 1) != (v21 & 1))
              {
                return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              }
            }
            swift_bridgeObjectRelease();
            if ((v20 & 1) == 0)
            {
              *(void *)(v78 + 8 * (v77 >> 6) + 64) |= 1 << v77;
              uint64_t v22 = (uint64_t *)(*(void *)(v78 + 48) + 16 * v77);
              *uint64_t v22 = v7;
              v22[1] = v6;
              *(void *)(*(void *)(v78 + 56) + 8 * v77) = MEMORY[0x1E4FBC860];
              uint64_t v23 = *(void *)(v78 + 16);
              uint64_t v24 = v23 + 1;
              BOOL v25 = __OFADD__(v23, 1);
              swift_bridgeObjectRetain();
              if (v25) {
                goto LABEL_68;
              }
              *(void *)(v78 + 16) = v24;
            }
            uint64_t v26 = *(void *)(v78 + 56);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            char v27 = *(void **)(v26 + 8 * v77);
            char v28 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)(v26 + 8 * v77) = v27;
            if ((v28 & 1) == 0)
            {
              char v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
              *(void *)(v26 + 8 * v77) = v27;
            }
            unint64_t v30 = v27[2];
            unint64_t v29 = v27[3];
            if (v30 >= v29 >> 1)
            {
              char v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v29 > 1), v30 + 1, 1, v27);
              *(void *)(v26 + 8 * v77) = v27;
            }
            v27[2] = v30 + 1;
            char v31 = &v27[2 * v30];
            v31[4] = v79;
            v31[5] = v8;
            swift_bridgeObjectRelease();
            uint64_t v4 = specialized thunk for @callee_guaranteed () -> (@owned [String]);
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v5 += 5;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
    uint64_t v2 = MEMORY[0x1E4FBC868];
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v78 = MEMORY[0x1E4FBC868];
  }
  int64_t v32 = 0;
  *(void *)(v0 + 144) = v78;
  *(void *)(v0 + 152) = v4;
  char v33 = *(unsigned char *)(v78 + 32);
  *(unsigned char *)(v0 + 232) = v33;
  uint64_t v34 = 1 << v33;
  if (v34 < 64) {
    uint64_t v35 = ~(-1 << v34);
  }
  else {
    uint64_t v35 = -1;
  }
  unint64_t v36 = v35 & *(void *)(v78 + 64);
  *(void *)(v0 + 160) = v2;
  uint64_t v37 = &off_1E61F1000;
  uint64_t v38 = &off_1E61F1000;
  while (1)
  {
    if (v36)
    {
      uint64_t v39 = (v36 - 1) & v36;
      unint64_t v40 = __clz(__rbit64(v36)) | (v32 << 6);
      uint64_t v41 = *(void *)(v0 + 144);
      goto LABEL_51;
    }
    int64_t v42 = v32 + 1;
    if (__OFADD__(v32, 1))
    {
      __break(1u);
      goto LABEL_66;
    }
    int64_t v43 = (unint64_t)((1 << *(unsigned char *)(v0 + 232)) + 63) >> 6;
    uint64_t v41 = *(void *)(v0 + 144);
    if (v42 >= v43) {
      goto LABEL_59;
    }
    uint64_t v44 = v41 + 64;
    unint64_t v45 = *(void *)(v41 + 64 + 8 * v42);
    ++v32;
    if (!v45)
    {
      int64_t v32 = v42 + 1;
      if (v42 + 1 >= v43) {
        goto LABEL_59;
      }
      unint64_t v45 = *(void *)(v44 + 8 * v32);
      if (!v45)
      {
        int64_t v32 = v42 + 2;
        if (v42 + 2 >= v43) {
          goto LABEL_59;
        }
        unint64_t v45 = *(void *)(v44 + 8 * v32);
        if (!v45) {
          break;
        }
      }
    }
LABEL_50:
    uint64_t v39 = (v45 - 1) & v45;
    unint64_t v40 = __clz(__rbit64(v45)) + (v32 << 6);
LABEL_51:
    *(void *)(v0 + 168) = v32;
    *(void *)(v0 + 176) = v39;
    BOOL v47 = (uint64_t *)(*(void *)(v41 + 48) + 16 * v40);
    uint64_t v48 = *v47;
    *(void *)(v0 + 184) = *v47;
    uint64_t v49 = v47[1];
    *(void *)(v0 + 192) = v49;
    uint64_t v50 = self;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unsigned __int8 v51 = (void *)MEMORY[0x1BA9E2DD0](v48, v49);
    id v52 = objc_msgSend(v50, (SEL)v37[197], v51);
    *(void *)(v0 + 200) = v52;

    *(void *)(v0 + 80) = 0;
    id v53 = objc_msgSend(v52, (SEL)v38[198], v0 + 80);
    *(void *)(v0 + 208) = v53;
    unint64_t v54 = *(void **)(v0 + 80);
    if (v53)
    {
      uint64_t v69 = v53;
      id v70 = v54;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      *(void *)(v0 + 216) = isa;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 16) = v0;
      *(void *)(v0 + 56) = v0 + 120;
      *(void *)(v0 + 24) = specialized AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
      uint64_t v72 = swift_continuation_init();
      *(void *)(v0 + 80) = MEMORY[0x1E4F143A8];
      *(void *)(v0 + 88) = 0x40000000;
      *(void *)(v0 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSDictionary?, @unowned NSError?) -> () with result type [String : NSNumber];
      *(void *)(v0 + 104) = &block_descriptor;
      *(void *)(v0 + 112) = v72;
      objc_msgSend(v69, sel_fetchStateForAppIntentIdentifiers_completionHandler_, isa);
      return MEMORY[0x1F41881E8](v0 + 16);
    }
    id v55 = v54;
    swift_bridgeObjectRelease();
    uint64_t v56 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v57 = type metadata accessor for Logger();
    __swift_project_value_buffer(v57, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain();
    char v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.error.getter();
    BOOL v60 = os_log_type_enabled(v58, v59);
    unint64_t v62 = *(void *)(v0 + 192);
    unint64_t v61 = *(void **)(v0 + 200);
    if (v60)
    {
      uint64_t v63 = v37;
      uint64_t v64 = *(void *)(v0 + 184);
      uint64_t v65 = swift_slowAlloc();
      uint64_t v66 = swift_slowAlloc();
      v80[0] = v66;
      *(_DWORD *)uint64_t v65 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v67 = v64;
      uint64_t v37 = v63;
      *(void *)(v65 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v62, v80);
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v58, v59, "[AppShortcuts] Cannot fetch intent state for: App - %s", (uint8_t *)v65, 0xCu);
      swift_arrayDestroy();
      uint64_t v68 = v66;
      uint64_t v38 = &off_1E61F1000;
      MEMORY[0x1BA9E48C0](v68, -1, -1);
      MEMORY[0x1BA9E48C0](v65, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }

    int64_t v32 = *(void *)(v0 + 168);
    unint64_t v36 = *(void *)(v0 + 176);
  }
  int64_t v46 = v42 + 3;
  if (v46 < v43)
  {
    unint64_t v45 = *(void *)(v44 + 8 * v46);
    if (!v45)
    {
      while (1)
      {
        int64_t v32 = v46 + 1;
        if (__OFADD__(v46, 1)) {
          break;
        }
        if (v32 >= v43) {
          goto LABEL_59;
        }
        unint64_t v45 = *(void *)(v44 + 8 * v32);
        ++v46;
        if (v45) {
          goto LABEL_50;
        }
      }
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
    }
    int64_t v32 = v46;
    goto LABEL_50;
  }
LABEL_59:
  uint64_t v73 = *(void *)(v0 + 152);
  swift_release();
  _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe(v73);
  uint64_t v74 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v75 = *(void *)(v0 + 160);
  return v74(v75);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 224) = v1;
  if (v1) {
    uint64_t v2 = specialized AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  }
  else {
    uint64_t v2 = specialized AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  char v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  int64_t v28;
  unint64_t v29;
  __objc2_class **v30;
  __objc2_class **v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int64_t v35;
  int64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  id v45;
  id v46;
  void *v47;
  id v48;
  void *v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  BOOL v53;
  void *v54;
  unint64_t v55;
  __objc2_class **v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  id v63;
  Class isa;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t);
  uint64_t v68;
  void *v69;
  uint64_t v70[2];
  uint64_t v71;
  uint64_t v72;

  unint64_t v71 = v0;
  v70[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 120);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v0 + 80) = v3;
  uint64_t v69 = (void *)(v0 + 80);
  uint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(v2, v1);
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = (v6 & 1) == 0;
  unint64_t v10 = v8 + v9;
  if (__OFADD__(v8, v9)) {
    goto LABEL_46;
  }
  char v11 = v6;
  if (*(void *)(*(void *)(v0 + 160) + 24) >= v10)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      specialized _NativeDictionary.copy()();
    }
  }
  else
  {
    char v13 = *(void *)(v0 + 184);
    uint64_t v12 = *(void *)(v0 + 192);
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v10, isUniquelyReferenced_nonNull_native);
    char v14 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v12);
    if ((v11 & 1) != (v15 & 1))
    {
      return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    }
    uint64_t v7 = v14;
  }
  uint64_t v17 = (void *)*v69;
  if (v11)
  {
    BOOL v18 = v17[7];
    swift_bridgeObjectRelease();
    *(void *)(v18 + 8 * v7) = v4;
  }
  else
  {
    char v20 = *(void *)(v0 + 184);
    uint64_t v19 = *(void *)(v0 + 192);
    v17[(v7 >> 6) + 8] |= 1 << v7;
    char v21 = (void *)(v17[6] + 16 * v7);
    *char v21 = v20;
    v21[1] = v19;
    *(void *)(v17[7] + 8 * v7) = v4;
    uint64_t v22 = v17[2];
    uint64_t v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_47;
    }
    long long v17[2] = v24;
    swift_bridgeObjectRetain();
  }
  uint64_t v26 = *(void **)(v0 + 208);
  BOOL v25 = *(void **)(v0 + 216);
  char v27 = *(void **)(v0 + 200);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  char v28 = *(void *)(v0 + 168);
  unint64_t v29 = *(void *)(v0 + 176);
  *(void *)(v0 + 160) = v17;
  unint64_t v30 = &off_1E61F1000;
  char v31 = &off_1E61F1000;
  while (1)
  {
    if (v29)
    {
      int64_t v32 = (v29 - 1) & v29;
      char v33 = __clz(__rbit64(v29)) | (v28 << 6);
      uint64_t v34 = *(void *)(v0 + 144);
      goto LABEL_33;
    }
    uint64_t v35 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    unint64_t v36 = (unint64_t)((1 << *(unsigned char *)(v0 + 232)) + 63) >> 6;
    uint64_t v34 = *(void *)(v0 + 144);
    if (v35 >= v36) {
      goto LABEL_41;
    }
    uint64_t v37 = v34 + 64;
    uint64_t v38 = *(void *)(v34 + 64 + 8 * v35);
    ++v28;
    if (!v38)
    {
      char v28 = v35 + 1;
      if (v35 + 1 >= v36) {
        goto LABEL_41;
      }
      uint64_t v38 = *(void *)(v37 + 8 * v28);
      if (!v38)
      {
        char v28 = v35 + 2;
        if (v35 + 2 >= v36) {
          goto LABEL_41;
        }
        uint64_t v38 = *(void *)(v37 + 8 * v28);
        if (!v38) {
          break;
        }
      }
    }
LABEL_32:
    int64_t v32 = (v38 - 1) & v38;
    char v33 = __clz(__rbit64(v38)) + (v28 << 6);
LABEL_33:
    *(void *)(v0 + 168) = v28;
    *(void *)(v0 + 176) = v32;
    unint64_t v40 = (uint64_t *)(*(void *)(v34 + 48) + 16 * v33);
    uint64_t v41 = *v40;
    *(void *)(v0 + 184) = *v40;
    int64_t v42 = v40[1];
    *(void *)(v0 + 192) = v42;
    int64_t v43 = self;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v44 = (void *)MEMORY[0x1BA9E2DD0](v41, v42);
    unint64_t v45 = objc_msgSend(v43, (SEL)v30[197], v44);
    *(void *)(v0 + 200) = v45;

    *(void *)(v0 + 80) = 0;
    int64_t v46 = objc_msgSend(v45, (SEL)v31[198], v69);
    *(void *)(v0 + 208) = v46;
    BOOL v47 = *(void **)(v0 + 80);
    if (v46)
    {
      unint64_t v62 = v46;
      uint64_t v63 = v47;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      *(void *)(v0 + 216) = isa;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 16) = v0;
      *(void *)(v0 + 56) = v0 + 120;
      *(void *)(v0 + 24) = specialized AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
      uint64_t v65 = swift_continuation_init();
      *(void *)(v0 + 80) = MEMORY[0x1E4F143A8];
      *(void *)(v0 + 88) = 0x40000000;
      *(void *)(v0 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSDictionary?, @unowned NSError?) -> () with result type [String : NSNumber];
      *(void *)(v0 + 104) = &block_descriptor;
      *(void *)(v0 + 112) = v65;
      objc_msgSend(v62, sel_fetchStateForAppIntentIdentifiers_completionHandler_, isa);
      return MEMORY[0x1F41881E8](v0 + 16);
    }
    uint64_t v48 = v47;
    swift_bridgeObjectRelease();
    uint64_t v49 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v50 = type metadata accessor for Logger();
    __swift_project_value_buffer(v50, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain();
    unsigned __int8 v51 = Logger.logObject.getter();
    id v52 = static os_log_type_t.error.getter();
    id v53 = os_log_type_enabled(v51, v52);
    id v55 = *(void *)(v0 + 192);
    unint64_t v54 = *(void **)(v0 + 200);
    if (v53)
    {
      uint64_t v56 = v30;
      uint64_t v57 = *(void *)(v0 + 184);
      char v58 = swift_slowAlloc();
      os_log_type_t v59 = swift_slowAlloc();
      v70[0] = v59;
      *(_DWORD *)char v58 = 136315138;
      swift_bridgeObjectRetain();
      BOOL v60 = v57;
      unint64_t v30 = v56;
      *(void *)(v58 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v55, v70);
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v51, v52, "[AppShortcuts] Cannot fetch intent state for: App - %s", (uint8_t *)v58, 0xCu);
      swift_arrayDestroy();
      unint64_t v61 = v59;
      char v31 = &off_1E61F1000;
      MEMORY[0x1BA9E48C0](v61, -1, -1);
      MEMORY[0x1BA9E48C0](v58, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }

    char v28 = *(void *)(v0 + 168);
    unint64_t v29 = *(void *)(v0 + 176);
  }
  uint64_t v39 = v35 + 3;
  if (v39 < v36)
  {
    uint64_t v38 = *(void *)(v37 + 8 * v39);
    if (!v38)
    {
      while (1)
      {
        char v28 = v39 + 1;
        if (__OFADD__(v39, 1)) {
          break;
        }
        if (v28 >= v36) {
          goto LABEL_41;
        }
        uint64_t v38 = *(void *)(v37 + 8 * v28);
        ++v39;
        if (v38) {
          goto LABEL_32;
        }
      }
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
    }
    char v28 = v39;
    goto LABEL_32;
  }
LABEL_41:
  uint64_t v66 = *(void *)(v0 + 152);
  swift_release();
  _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe(v66);
  uint64_t v67 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v68 = *(void *)(v0 + 160);
  return v67(v68);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  void *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  void *v40;
  id v41;
  Class isa;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t);
  uint64_t v46;
  void *v48;
  uint64_t v49[2];
  uint64_t v50;
  uint64_t v51;

  uint64_t v50 = v0;
  v49[1] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = v0 + 80;
  uint64_t v2 = *(void **)(v0 + 216);
  uint64_t v3 = *(void **)(v0 + 208);
  swift_willThrow();

  uint64_t v4 = *(void *)(v0 + 224);
  uint64_t v5 = &unk_1EB9D8000;
  uint64_t v6 = static Logger.executor;
  while (1)
  {
    if (v5[24] != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)v6);
    swift_bridgeObjectRetain();
    uint64_t v8 = Logger.logObject.getter();
    uint64_t v9 = static os_log_type_t.error.getter();
    unint64_t v10 = os_log_type_enabled(v8, v9);
    uint64_t v12 = *(void *)(v0 + 192);
    char v11 = *(void **)(v0 + 200);
    if (v10)
    {
      uint64_t v48 = (void *)v4;
      char v13 = v6;
      char v14 = *(void *)(v0 + 184);
      uint64_t v15 = swift_slowAlloc();
      char v16 = v5;
      uint64_t v17 = swift_slowAlloc();
      v49[0] = v17;
      *(_DWORD *)uint64_t v15 = 136315138;
      swift_bridgeObjectRetain();
      BOOL v18 = v14;
      uint64_t v6 = v13;
      *(void *)(v15 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v12, v49);
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v8, v9, "[AppShortcuts] Cannot fetch intent state for: App - %s", (uint8_t *)v15, 0xCu);
      swift_arrayDestroy();
      uint64_t v19 = v17;
      uint64_t v5 = v16;
      uint64_t v1 = v0 + 80;
      MEMORY[0x1BA9E48C0](v19, -1, -1);
      MEMORY[0x1BA9E48C0](v15, -1, -1);

      char v20 = v48;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      char v20 = (void *)v4;
    }

    char v21 = *(void *)(v0 + 168);
    uint64_t v22 = *(void *)(v0 + 176);
    if (v22)
    {
      uint64_t v23 = (v22 - 1) & v22;
      uint64_t v24 = __clz(__rbit64(v22)) | (v21 << 6);
      BOOL v25 = *(void *)(v0 + 144);
      goto LABEL_23;
    }
    uint64_t v26 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    char v27 = (unint64_t)((1 << *(unsigned char *)(v0 + 232)) + 63) >> 6;
    BOOL v25 = *(void *)(v0 + 144);
    if (v26 >= v27) {
      goto LABEL_28;
    }
    char v28 = v25 + 64;
    unint64_t v29 = *(void *)(v25 + 64 + 8 * v26);
    ++v21;
    if (!v29)
    {
      char v21 = v26 + 1;
      if (v26 + 1 >= v27) {
        goto LABEL_28;
      }
      unint64_t v29 = *(void *)(v28 + 8 * v21);
      if (!v29)
      {
        char v21 = v26 + 2;
        if (v26 + 2 >= v27) {
          goto LABEL_28;
        }
        unint64_t v29 = *(void *)(v28 + 8 * v21);
        if (!v29) {
          break;
        }
      }
    }
LABEL_22:
    uint64_t v23 = (v29 - 1) & v29;
    uint64_t v24 = __clz(__rbit64(v29)) + (v21 << 6);
LABEL_23:
    *(void *)(v0 + 168) = v21;
    *(void *)(v0 + 176) = v23;
    char v31 = (uint64_t *)(*(void *)(v25 + 48) + 16 * v24);
    int64_t v32 = *v31;
    *(void *)(v0 + 184) = *v31;
    char v33 = v31[1];
    *(void *)(v0 + 192) = v33;
    uint64_t v34 = self;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v35 = (void *)MEMORY[0x1BA9E2DD0](v32, v33);
    unint64_t v36 = objc_msgSend(v34, sel_policyWithBundleIdentifier_, v35);
    *(void *)(v0 + 200) = v36;

    *(void *)(v0 + 80) = 0;
    uint64_t v37 = objc_msgSend(v36, sel_connectionWithError_, v1);
    *(void *)(v0 + 208) = v37;
    uint64_t v38 = *(void **)(v0 + 80);
    if (v37)
    {
      unint64_t v40 = v37;
      uint64_t v41 = v38;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      *(void *)(v0 + 216) = isa;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 16) = v0;
      *(void *)(v0 + 56) = v0 + 120;
      *(void *)(v0 + 24) = specialized AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
      int64_t v43 = swift_continuation_init();
      *(void *)(v0 + 80) = MEMORY[0x1E4F143A8];
      *(void *)(v0 + 88) = 0x40000000;
      *(void *)(v0 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSDictionary?, @unowned NSError?) -> () with result type [String : NSNumber];
      *(void *)(v0 + 104) = &block_descriptor;
      *(void *)(v0 + 112) = v43;
      objc_msgSend(v40, sel_fetchStateForAppIntentIdentifiers_completionHandler_, isa, v1);
      return MEMORY[0x1F41881E8](v0 + 16);
    }
    uint64_t v39 = v38;
    swift_bridgeObjectRelease();
    uint64_t v4 = _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  unint64_t v30 = v26 + 3;
  if (v30 < v27)
  {
    unint64_t v29 = *(void *)(v28 + 8 * v30);
    if (!v29)
    {
      while (1)
      {
        char v21 = v30 + 1;
        if (__OFADD__(v30, 1)) {
          break;
        }
        if (v21 >= v27) {
          goto LABEL_28;
        }
        unint64_t v29 = *(void *)(v28 + 8 * v21);
        ++v30;
        if (v29) {
          goto LABEL_22;
        }
      }
LABEL_32:
      __break(1u);
    }
    char v21 = v30;
    goto LABEL_22;
  }
LABEL_28:
  uint64_t v44 = *(void *)(v0 + 152);
  swift_release();
  _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe(v44);
  unint64_t v45 = *(uint64_t (**)(uint64_t))(v0 + 8);
  int64_t v46 = *(void *)(v0 + 160);
  return v45(v46);
}

uint64_t dispatch thunk of AppShortcutStateProviding.intentsStates(appShortcutTargets:conditionalIntentMetadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 + 8) + **(int **)(a4 + 8));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = protocol witness for AppShortcutStateProviding.intentsStates(appShortcutTargets:conditionalIntentMetadata:) in conformance AppShortcutStateProvider;
  return v11(a1, a2, a3, a4);
}

uint64_t type metadata accessor for AppShortcutStateProvider()
{
  return self;
}

uint64_t method lookup function for AppShortcutStateProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AppShortcutStateProvider);
}

uint64_t dispatch thunk of AppShortcutStateProvider.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }
  return result;
}

uint64_t WorkItem.name.getter(uint64_t a1)
{
  return a1;
}

uint64_t WorkItem.work.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

void *AsyncSerialQueue.__allocating_init(queueName:logger:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)swift_allocObject();
  void v6[2] = MEMORY[0x1E4FBC860];
  v6[3] = 0;
  v6[4] = 0;
  v6[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v7 = swift_allocObject();
  *(_DWORD *)(v7 + 16) = 0;
  void v6[6] = v7;
  v6[7] = a1;
  v6[8] = a2;
  uint64_t v8 = (char *)v6 + OBJC_IVAR____TtC14SiriKitRuntime16AsyncSerialQueue_logger;
  uint64_t v9 = type metadata accessor for Logger();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8, a3, v9);
  return v6;
}

void *AsyncSerialQueue.init(queueName:logger:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[2] = MEMORY[0x1E4FBC860];
  void v3[3] = 0;
  v3[4] = 0;
  v3[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v7 = swift_allocObject();
  *(_DWORD *)(v7 + 16) = 0;
  v3[6] = v7;
  v3[7] = a1;
  v3[8] = a2;
  uint64_t v8 = (char *)v3 + OBJC_IVAR____TtC14SiriKitRuntime16AsyncSerialQueue_logger;
  uint64_t v9 = type metadata accessor for Logger();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8, a3, v9);
  return v3;
}

void AsyncSerialQueue.add(taskName:work:)()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(v0 + 48) + 16);
  os_unfair_lock_lock(v1);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)();
  os_unfair_lock_unlock(v1);
}

uint64_t closure #1 in AsyncSerialQueue.add(taskName:work:)(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a5;
  unint64_t v8 = a1[5];
  if (v8)
  {
    uint64_t v9 = a1[4];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    unint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v22 = v9;
      uint64_t v12 = swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      v27[0] = v23;
      *(_DWORD *)uint64_t v12 = 136446722;
      swift_bridgeObjectRetain();
      uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v12 + 12) = 2082;
      uint64_t v13 = a1[7];
      unint64_t v14 = a1[8];
      swift_bridgeObjectRetain();
      uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v8, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v10, v11, "Adding workItem: %{public}s to queue: %{public}s, which is currently executing task: %s", (uint8_t *)v12, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v23, -1, -1);
      MEMORY[0x1BA9E48C0](v12, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_release_n();
      swift_bridgeObjectRelease_n();
    }

    uint64_t v5 = a5;
  }
  uint64_t v15 = a1 + 2;
  swift_beginAccess();
  char v16 = (void *)a1[2];
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  a1[2] = v16;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    char v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    *uint64_t v15 = v16;
  }
  unint64_t v19 = v16[2];
  unint64_t v18 = v16[3];
  if (v19 >= v18 >> 1)
  {
    char v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v16);
    *uint64_t v15 = v16;
  }
  v16[2] = v19 + 1;
  char v20 = &v16[4 * v19];
  v20[4] = a2;
  v20[5] = a3;
  v20[6] = a4;
  v20[7] = v5;
  uint64_t result = swift_endAccess();
  if (!a1[3])
  {
    a1[3] = AsyncSerialQueue.runAll()();
    return swift_release();
  }
  return result;
}

uint64_t partial apply for closure #1 in AsyncSerialQueue.add(taskName:work:)()
{
  return closure #1 in AsyncSerialQueue.add(taskName:work:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t AsyncSerialQueue.runAll()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = 0;
  v7[3] = 0;
  v7[4] = v1;
  int v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  swift_retain();
  if (v8 == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v4);
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    if (v7[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v10 = v11;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
    }
  }
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = &async function pointer to partial apply for closure #1 in AsyncSerialQueue.runAll();
  *(void *)(v12 + 24) = v7;
  if (v10 | v9)
  {
    v14[0] = 0;
    v14[1] = 0;
    v14[2] = v9;
    v14[3] = v10;
  }
  return swift_task_create();
}

uint64_t closure #1 in AsyncSerialQueue.runAll()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 48) = a4;
  return MEMORY[0x1F4188298](closure #1 in AsyncSerialQueue.runAll(), 0, 0);
}

uint64_t closure #1 in AsyncSerialQueue.runAll()()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(os_unfair_lock_s **)(v1 + 48);
  *(void *)(v0 + 56) = v2;
  uint64_t v3 = v2 + 4;
  uint64_t v4 = swift_task_alloc();
  *(void *)(v4 + 16) = partial apply for closure #1 in closure #1 in AsyncSerialQueue.runAll();
  *(void *)(v4 + 24) = v1;
  os_unfair_lock_lock(v3);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)((_OWORD *)(v0 + 16));
  *(void *)(v0 + 64) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(v0 + 56) + 16));
  uint64_t v5 = *(void *)(v0 + 24);
  *(void *)(v0 + 72) = *(void *)(v0 + 16);
  *(void *)(v0 + 80) = v5;
  uint64_t v7 = *(int **)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 40);
  *(void *)(v0 + 88) = v7;
  *(void *)(v0 + 96) = v6;
  swift_task_dealloc();
  if (v5)
  {
    uint64_t v11 = (uint64_t (*)(void))((char *)v7 + *v7);
    swift_bridgeObjectRetain();
    swift_retain();
    int v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 104) = v8;
    *int v8 = v0;
    v8[1] = closure #1 in AsyncSerialQueue.runAll();
    return v11();
  }
  else
  {
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in AsyncSerialQueue.runAll(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  void *v14;
  uint64_t (*v15)(void);
  uint64_t (*v16)(void);
  uint64_t v17;

  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = (os_unfair_lock_s *)(*(void *)(v0 + 56) + 16);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v4 + 16) = partial apply for closure #2 in closure #1 in AsyncSerialQueue.runAll();
  *(void *)(v4 + 24) = v2;
  os_unfair_lock_lock(v3);
  closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)specialized partial apply();
  if (v1)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(v0 + 56) + 16));
    return swift_task_dealloc();
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 72);
    uint64_t v5 = *(void *)(v0 + 80);
    uint64_t v7 = *(void *)(v0 + 48);
    int v8 = (os_unfair_lock_s *)(*(void *)(v0 + 56) + 16);
    os_unfair_lock_unlock(v8);
    outlined consume of WorkItem?(v6, v5);
    swift_task_dealloc();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v9 = swift_task_alloc();
    *(void *)(v9 + 16) = partial apply for closure #1 in closure #1 in AsyncSerialQueue.runAll();
    *(void *)(v9 + 24) = v7;
    os_unfair_lock_lock(v8);
    partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)((_OWORD *)(v0 + 16));
    *(void *)(v0 + 64) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(v0 + 56) + 16));
    uint64_t v11 = *(void *)(v0 + 24);
    *(void *)(v0 + 72) = *(void *)(v0 + 16);
    *(void *)(v0 + 80) = v11;
    uint64_t v13 = *(int **)(v0 + 32);
    uint64_t v12 = *(void *)(v0 + 40);
    *(void *)(v0 + 88) = v13;
    *(void *)(v0 + 96) = v12;
    swift_task_dealloc();
    if (v11)
    {
      char v16 = (uint64_t (*)(void))((char *)v13 + *v13);
      swift_bridgeObjectRetain();
      swift_retain();
      unint64_t v14 = (void *)swift_task_alloc();
      *(void *)(v0 + 104) = v14;
      *unint64_t v14 = v0;
      v14[1] = closure #1 in AsyncSerialQueue.runAll();
      return v16();
    }
    else
    {
      uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
      return v15();
    }
  }
}

uint64_t closure #1 in closure #1 in AsyncSerialQueue.runAll()@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = a1 + 2;
  swift_beginAccess();
  uint64_t v5 = (void *)a1[2];
  if (v5[2])
  {
    uint64_t v7 = v5[4];
    uint64_t v6 = v5[5];
    uint64_t v9 = v5[6];
    uint64_t v8 = v5[7];
    uint64_t result = swift_beginAccess();
    if (*(void *)(*v4 + 16))
    {
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      specialized Array.replaceSubrange<A>(_:with:)(0, 1);
      swift_endAccess();
      swift_release();
      swift_bridgeObjectRelease();
      a1[4] = v7;
      a1[5] = v6;
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRelease();
      *a2 = v7;
      a2[1] = v6;
      a2[2] = v9;
      a2[3] = v8;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    a1[3] = 0;
    uint64_t result = swift_release();
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  return result;
}

uint64_t AsyncSerialQueue.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime16AsyncSerialQueue_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t AsyncSerialQueue.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime16AsyncSerialQueue_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime25PluginLookupByIntentTopic_p_Tg5(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime25PluginLookupByIntentTopic_p_Tg5TQ0_;
  return v6(a1);
}

uint64_t partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void *partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)@<X0>(void *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

{
  return partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(a1);
}

uint64_t destroy for WorkItem()
{
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for WorkItem(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for WorkItem(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for WorkItem(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v4;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for WorkItem(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WorkItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WorkItem()
{
  return &type metadata for WorkItem;
}

uint64_t ObjC metadata update function for AsyncSerialQueue()
{
  return type metadata accessor for AsyncSerialQueue();
}

uint64_t type metadata accessor for AsyncSerialQueue()
{
  uint64_t result = type metadata singleton initialization cache for AsyncSerialQueue;
  if (!type metadata singleton initialization cache for AsyncSerialQueue) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for AsyncSerialQueue()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for AsyncSerialQueue(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AsyncSerialQueue);
}

uint64_t dispatch thunk of AsyncSerialQueue.__allocating_init(queueName:logger:)()
{
  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of AsyncSerialQueue.add(taskName:work:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of AsyncSerialQueue.wait()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 216) + **(int **)(*(void *)v0 + 216));
  unint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  void *v2 = v1;
  v2[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v4();
}

uint64_t sub_1B9D97E78()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #1 in AsyncSerialQueue.runAll()()
{
  uint64_t v2 = *(void *)(v0 + 32);
  long long v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *long long v3 = v1;
  v3[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  v3[6] = v2;
  return MEMORY[0x1F4188298](closure #1 in AsyncSerialQueue.runAll(), 0, 0);
}

uint64_t sub_1B9D97F64()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in closure #1 in AsyncSerialQueue.runAll()@<X0>(void *a1@<X8>)
{
  return closure #1 in closure #1 in AsyncSerialQueue.runAll()(v1, a1);
}

double partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)@<D0>(_OWORD *a1@<X8>)
{
  (*(void (**)(_OWORD *__return_ptr))(v1 + 16))(v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *a1 = v6[0];
    a1[1] = v5;
  }
  return result;
}

uint64_t partial apply for closure #2 in closure #1 in AsyncSerialQueue.runAll()()
{
  *(void *)(v0 + 32) = 0;
  *(void *)(v0 + 40) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t outlined consume of WorkItem?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)specialized partial apply()
{
  return partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)();
}

uint64_t ManagedContinuation.resume(throwing:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Error);
  uint64_t v2 = type metadata accessor for Result();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  long long v5 = (char *)&v8 - v4;
  *(uint64_t *)((char *)&v8 - v4) = (uint64_t)a1;
  swift_storeEnumTagMultiPayload();
  id v6 = a1;
  ManagedContinuation.resume(with:)((uint64_t)v5);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t static AsyncTaskUtils.taskWithCatchingCompletion(completion:do:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = (void *)swift_allocObject();
  _OWORD v12[2] = 0;
  v12[3] = 0;
  v12[4] = a3;
  v12[5] = a4;
  v12[6] = a1;
  v12[7] = a2;
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #1 in static AsyncTaskUtils.taskWithCatchingCompletion(completion:do:), (uint64_t)v12);
  return swift_release();
}

uint64_t closure #1 in static AsyncTaskUtils.taskWithCatchingCompletion(completion:do:)(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[2] = a6;
  v7[3] = a7;
  uint64_t v10 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v8 = (void *)swift_task_alloc();
  v7[4] = v8;
  *uint64_t v8 = v7;
  v8[1] = closure #1 in static AsyncTaskUtils.taskWithCatchingCompletion(completion:do:);
  return v10();
}

uint64_t closure #1 in static AsyncTaskUtils.taskWithCatchingCompletion(completion:do:)()
{
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in static AsyncTaskUtils.taskWithCatchingCompletion(completion:do:);
  }
  else {
    uint64_t v2 = closure #1 in static AsyncTaskUtils.taskWithCatchingCompletion(completion:do:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void))(v0 + 16))(0);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  void *v1;
  void (*v2)(void *);
  id v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = (void *)v0[5];
  uint64_t v2 = (void (*)(void *))v0[2];
  uint64_t v3 = v1;
  v2(v1);

  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return MEMORY[0x1F4188298](static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:), 0, 0);
}

uint64_t static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:)()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  long long v3 = *(_OWORD *)(v0 + 24);
  *(void *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v4;
  *uint64_t v4 = v0;
  v4[1] = static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 16);
  return MEMORY[0x1F4188160](v6, 0, 0, 0xD000000000000028, 0x80000001BA063410, partial apply for closure #1 in static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:), v2, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    long long v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t ManagedContinuation.__allocating_init()()
{
  return ManagedContinuation.().init()();
}

uint64_t closure #1 in withCancellableContinuation<A>(body:)()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Error);
  uint64_t v0 = type metadata accessor for Result();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  long long v3 = (uint64_t *)((char *)&v6 - v2);
  type metadata accessor for CancellationError();
  lazy protocol witness table accessor for type CancellationError and conformance CancellationError();
  uint64_t v4 = swift_allocError();
  CancellationError.init()();
  *long long v3 = v4;
  swift_storeEnumTagMultiPayload();
  ManagedContinuation.resume(with:)((uint64_t)v3);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t partial apply for closure #1 in withCancellableContinuation<A>(body:)()
{
  return closure #1 in withCancellableContinuation<A>(body:)();
}

uint64_t closure #2 in withCancellableContinuation<A>(body:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  v4[6] = *a2;
  return MEMORY[0x1F4188298](closure #2 in withCancellableContinuation<A>(body:), 0, 0);
}

uint64_t closure #2 in withCancellableContinuation<A>(body:)()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 24);
  *(void *)(v3 + 32) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  uint64_t v5 = *(void *)(v1 + 80);
  *uint64_t v4 = v0;
  v4[1] = closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:executionSource:);
  uint64_t v6 = *(void *)(v0 + 16);
  return MEMORY[0x1F4188160](v6, 0, 0, 0xD000000000000022, 0x80000001BA063460, partial apply for closure #1 in closure #2 in withCancellableContinuation<A>(body:), v3, v5);
}

uint64_t _unsafeInheritExecutor_withTaskCancellationHandler<A>(handler:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  void *v13 = v6;
  v13[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return MEMORY[0x1F4188150](a1, a4, a5, a2, a3, a6);
}

uint64_t sub_1B9D98C60()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t partial apply for closure #1 in static AsyncTaskUtils.taskWithCatchingCompletion(completion:do:)()
{
  uint64_t v2 = *(int **)(v0 + 32);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  *(_OWORD *)(v3 + 16) = v4;
  uint64_t v7 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 32) = v5;
  *uint64_t v5 = v3;
  v5[1] = closure #1 in static AsyncTaskUtils.taskWithCatchingCompletion(completion:do:);
  return v7();
}

uint64_t partial apply for closure #1 in static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:)(uint64_t a1)
{
  return closure #1 in static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:)(a1, *(uint64_t (**)(void))(v1 + 24));
}

uint64_t ManagedContinuation.__allocating_init(_:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Error);
  uint64_t v2 = type metadata accessor for CheckedContinuation();
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v11 - v5;
  swift_allocObject();
  uint64_t v7 = ManagedContinuation.().init()();
  uint64_t v8 = *(void *)(v2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v6, a1, v2);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v2);
  uint64_t v9 = v7 + *(void *)(*(void *)v7 + 88);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 40))(v9, v6, v3);
  swift_endAccess();
  return v7;
}

uint64_t specialized ManagedContinuation.updateState(continuation:result:)(uint64_t a1, char *a2, unsigned __int8 a3)
{
  uint64_t v49 = a2;
  id v53 = (char *)a1;
  int v4 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  id v52 = (char *)&v48 - v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v48 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  unsigned __int8 v51 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  unint64_t v19 = (char *)&v48 - v18;
  uint64_t v50 = v20;
  MEMORY[0x1F4188790](v17);
  uint64_t v22 = (char *)&v48 - v21;
  uint64_t v23 = *(char **)(*(void *)v3 + 104);
  objc_msgSend(*(id *)&v23[v3], sel_lock);
  if (v4 != 255)
  {
    uint64_t v24 = v3 + *(void *)(*(void *)v3 + 96);
    swift_beginAccess();
    if (*(unsigned __int8 *)(v24 + 8) == 255)
    {
      id v48 = *(id *)v24;
      BOOL v25 = v49;
      *(void *)uint64_t v24 = v49;
      *(unsigned char *)(v24 + 8) = v4;
      outlined copy of Result<SABaseCommand?, Error>(v25);
      outlined consume of Result<SABaseCommand?, Error>?(v48, 0xFFu);
    }
  }
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v53, (uint64_t)v12, &demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>?);
  uint64_t v26 = *(unsigned int (**)(void, void, void))(v14 + 48);
  if (v26(v12, 1, v13) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, &demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>?);
  }
  else
  {
    id v53 = v19;
    uint64_t v49 = v23;
    char v27 = v22;
    uint64_t v28 = v26;
    unint64_t v29 = v8;
    uint64_t v30 = v14;
    char v31 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v31(v27, v12, v13);
    uint64_t v32 = (uint64_t)v52;
    v31(v52, v27, v13);
    uint64_t v14 = v30;
    uint64_t v8 = v29;
    uint64_t v26 = v28;
    uint64_t v23 = v49;
    unint64_t v19 = v53;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v32, 0, 1, v13);
    uint64_t v33 = v3 + *(void *)(*(void *)v3 + 88);
    swift_beginAccess();
    outlined assign with take of (Input, AnyFlow, SiriEnvironment)(v32, v33, &demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>?);
    swift_endAccess();
  }
  uint64_t v34 = v3 + *(void *)(*(void *)v3 + 88);
  swift_beginAccess();
  outlined init with copy of ReferenceResolutionClientProtocol?(v34, (uint64_t)v8, &demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>?);
  if (v26(v8, 1, v13) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>?);
  }
  else
  {
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v35(v19, v8, v13);
    uint64_t v36 = v3 + *(void *)(*(void *)v3 + 96);
    swift_beginAccess();
    int v37 = *(unsigned __int8 *)(v36 + 8);
    if (v37 != 255)
    {
      uint64_t v39 = *(void **)v36;
      id v53 = v19;
      uint64_t v40 = v14;
      char v41 = v37 & 1;
      uint64_t v42 = (uint64_t)v52;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56))(v52, 1, 1, v13);
      swift_beginAccess();
      outlined copy of Result<SABaseCommand?, Error>(v39);
      outlined assign with take of (Input, AnyFlow, SiriEnvironment)(v42, v34, &demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>?);
      swift_endAccess();
      int64_t v43 = v51;
      v35(v51, v53, v13);
      unint64_t v54 = v39;
      char v55 = v41;
      unint64_t v44 = (*(unsigned __int8 *)(v40 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
      unint64_t v45 = (v50 + v44 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v46 = swift_allocObject();
      v35((char *)(v46 + v44), v43, v13);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)&v54, v46 + v45, &demangling cache variable for type metadata for Result<SABaseCommand?, Error>);
      uint64_t v38 = partial apply for specialized closure #2 in ManagedContinuation.updateState(continuation:result:);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
  }
  uint64_t v38 = destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
LABEL_13:
  ((void (*)(id))v38)(objc_msgSend(*(id *)&v23[v3], sel_unlock));
  return swift_release();
}

{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void *v25;
  unsigned int (*v26)(void, void, void);
  char *v27;
  unsigned int (*v28)(void, void, void);
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  int v37;
  uint64_t (*v38)();
  void *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  void *v54;
  char v55;

  uint64_t v49 = a2;
  id v53 = (char *)a1;
  int v4 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  id v52 = (char *)&v48 - v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v48 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  unsigned __int8 v51 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  unint64_t v19 = (char *)&v48 - v18;
  uint64_t v50 = v20;
  MEMORY[0x1F4188790](v17);
  uint64_t v22 = (char *)&v48 - v21;
  uint64_t v23 = *(char **)(*(void *)v3 + 104);
  objc_msgSend(*(id *)&v23[v3], sel_lock);
  if (v4 != 255)
  {
    uint64_t v24 = v3 + *(void *)(*(void *)v3 + 96);
    swift_beginAccess();
    if (*(unsigned __int8 *)(v24 + 8) == 255)
    {
      id v48 = *(void **)v24;
      BOOL v25 = v49;
      *(void *)uint64_t v24 = v49;
      *(unsigned char *)(v24 + 8) = v4;
      outlined copy of Result<(), Error>(v25, v4 & 1);
      outlined consume of Result<(), Error>?(v48, 0xFFu);
    }
  }
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v53, (uint64_t)v12, &demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
  uint64_t v26 = *(unsigned int (**)(void, void, void))(v14 + 48);
  if (v26(v12, 1, v13) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, &demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
  }
  else
  {
    id v53 = v19;
    uint64_t v49 = v23;
    char v27 = v22;
    uint64_t v28 = v26;
    unint64_t v29 = v8;
    uint64_t v30 = v14;
    char v31 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v31(v27, v12, v13);
    uint64_t v32 = (uint64_t)v52;
    v31(v52, v27, v13);
    uint64_t v14 = v30;
    uint64_t v8 = v29;
    uint64_t v26 = v28;
    uint64_t v23 = v49;
    unint64_t v19 = v53;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v32, 0, 1, v13);
    uint64_t v33 = v3 + *(void *)(*(void *)v3 + 88);
    swift_beginAccess();
    outlined assign with take of (Input, AnyFlow, SiriEnvironment)(v32, v33, &demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
    swift_endAccess();
  }
  uint64_t v34 = v3 + *(void *)(*(void *)v3 + 88);
  swift_beginAccess();
  outlined init with copy of ReferenceResolutionClientProtocol?(v34, (uint64_t)v8, &demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
  if (v26(v8, 1, v13) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
  }
  else
  {
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v35(v19, v8, v13);
    uint64_t v36 = v3 + *(void *)(*(void *)v3 + 96);
    swift_beginAccess();
    int v37 = *(unsigned __int8 *)(v36 + 8);
    if (v37 != 255)
    {
      uint64_t v39 = *(void **)v36;
      id v53 = v19;
      uint64_t v40 = v14;
      char v41 = v37 & 1;
      uint64_t v42 = (uint64_t)v52;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56))(v52, 1, 1, v13);
      swift_beginAccess();
      outlined copy of Result<(), Error>(v39, v41);
      outlined assign with take of (Input, AnyFlow, SiriEnvironment)(v42, v34, &demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
      swift_endAccess();
      int64_t v43 = v51;
      v35(v51, v53, v13);
      unint64_t v54 = v39;
      char v55 = v41;
      unint64_t v44 = (*(unsigned __int8 *)(v40 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
      unint64_t v45 = (v50 + v44 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v46 = swift_allocObject();
      v35((char *)(v46 + v44), v43, v13);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)&v54, v46 + v45, &demangling cache variable for type metadata for Result<(), Error>);
      uint64_t v38 = partial apply for specialized closure #2 in ManagedContinuation.updateState(continuation:result:);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
  }
  uint64_t v38 = destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
LABEL_13:
  ((void (*)(id))v38)(objc_msgSend(*(id *)&v23[v3], sel_unlock));
  return swift_release();
}

uint64_t specialized ManagedContinuation.updateState(continuation:result:)(uint64_t a1, void *a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v49 = a2;
  uint64_t v50 = (unsigned int (*)(void, void, void))a3;
  int v6 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  unint64_t v54 = (char *)&v47 - v12;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v47 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  id v52 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  id v53 = (char *)&v47 - v20;
  uint64_t v51 = v21;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v47 - v22;
  uint64_t v55 = *(void *)(*(void *)v4 + 104);
  objc_msgSend(*(id *)(v4 + v55), sel_lock);
  if (v6 != 255)
  {
    uint64_t v24 = v4 + *(void *)(*(void *)v4 + 96);
    swift_beginAccess();
    if (*(unsigned __int8 *)(v24 + 16) == 255)
    {
      BOOL v25 = *(void **)v24;
      uint64_t v48 = *(void *)(v24 + 8);
      uint64_t v26 = v49;
      uint64_t v27 = (uint64_t)v50;
      *(void *)uint64_t v24 = v49;
      *(void *)(v24 + 8) = v27;
      *(unsigned char *)(v24 + 16) = v6;
      outlined copy of Result<RemoteConversation?, Error>(v26, v27, v6 & 1);
      outlined consume of Result<RemoteConversation?, Error>?(v25, v48, 0xFFu);
    }
  }
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v14, &demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>?);
  uint64_t v28 = *(unsigned int (**)(void, void, void))(v16 + 48);
  if (v28(v14, 1, v15) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>?);
  }
  else
  {
    uint64_t v50 = v28;
    unint64_t v29 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    v29(v23, v14, v15);
    uint64_t v30 = (uint64_t)v54;
    v29(v54, v23, v15);
    uint64_t v28 = v50;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v30, 0, 1, v15);
    uint64_t v31 = v4 + *(void *)(*(void *)v4 + 88);
    swift_beginAccess();
    outlined assign with take of (Input, AnyFlow, SiriEnvironment)(v30, v31, &demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>?);
    swift_endAccess();
  }
  uint64_t v32 = v4 + *(void *)(*(void *)v4 + 88);
  swift_beginAccess();
  outlined init with copy of ReferenceResolutionClientProtocol?(v32, (uint64_t)v10, &demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>?);
  if (v28(v10, 1, v15) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, &demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>?);
  }
  else
  {
    uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    uint64_t v34 = v53;
    v33(v53, v10, v15);
    uint64_t v35 = v4 + *(void *)(*(void *)v4 + 96);
    swift_beginAccess();
    int v36 = *(unsigned __int8 *)(v35 + 16);
    if (v36 != 255)
    {
      uint64_t v38 = *(void **)v35;
      uint64_t v50 = *(unsigned int (**)(void, void, void))(v35 + 8);
      char v39 = v36 & 1;
      uint64_t v40 = (uint64_t)v54;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v54, 1, 1, v15);
      swift_beginAccess();
      uint64_t v41 = (uint64_t)v50;
      outlined copy of Result<RemoteConversation?, Error>(v38, (uint64_t)v50, v39);
      outlined assign with take of (Input, AnyFlow, SiriEnvironment)(v40, v32, &demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>?);
      swift_endAccess();
      uint64_t v42 = v52;
      v33(v52, v53, v15);
      v56[0] = v38;
      v56[1] = v41;
      char v57 = v39;
      unint64_t v43 = (*(unsigned __int8 *)(v16 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
      unint64_t v44 = (v51 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v45 = swift_allocObject();
      v33((char *)(v45 + v43), v42, v15);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v56, v45 + v44, &demangling cache variable for type metadata for Result<RemoteConversation?, Error>);
      int v37 = partial apply for specialized closure #2 in ManagedContinuation.updateState(continuation:result:);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v34, v15);
  }
  int v37 = destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
LABEL_13:
  ((void (*)(id))v37)(objc_msgSend(*(id *)(v4 + v55), sel_unlock));
  return swift_release();
}

uint64_t ManagedContinuation<A>.resume()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  specialized ManagedContinuation.updateState(continuation:result:)((uint64_t)v2, 0, 0);
  return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v2, &demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
}

ValueMetadata *type metadata accessor for AsyncTaskUtils()
{
  return &type metadata for AsyncTaskUtils;
}

uint64_t type metadata instantiation function for ManagedContinuation()
{
  return MEMORY[0x1F41863F0]();
}

uint64_t type metadata completion function for ManagedContinuation()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Error);
  type metadata accessor for CheckedContinuation();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    type metadata accessor for Result();
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return result;
}

uint64_t method lookup function for ManagedContinuation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ManagedContinuation);
}

uint64_t specialized closure #2 in ManagedContinuation.updateState(continuation:result:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)a2;
  if (*(unsigned char *)(a2 + 8) == 1)
  {
    id v3 = v2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    id v5 = v2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

{
  id v2;

  if (*(unsigned char *)(a2 + 8))
  {
    unint64_t v2 = *(id *)a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

{
  id v2;

  if (*(unsigned char *)(a2 + 16))
  {
    unint64_t v2 = *(id *)a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_1B9D9A38C()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  outlined consume of Result<RemoteConversation?, Error>(*(id *)(v0 + v6), *(void *)(v0 + v6 + 8), *(unsigned char *)(v0 + v6 + 16));

  return MEMORY[0x1F4186498](v0, v6 + 17, v5);
}

uint64_t partial apply for specialized closure #2 in ManagedContinuation.updateState(continuation:result:)()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>)
                 - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8);

  return specialized closure #2 in ManagedContinuation.updateState(continuation:result:)(v0 + v2, v3);
}

{
  return partial apply for specialized closure #2 in ManagedContinuation.updateState(continuation:result:)(&demangling cache variable for type metadata for CheckedContinuation<(), Error>, (uint64_t (*)(unint64_t, uint64_t))specialized closure #2 in ManagedContinuation.updateState(continuation:result:));
}

{
  return partial apply for specialized closure #2 in ManagedContinuation.updateState(continuation:result:)(&demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>, (uint64_t (*)(unint64_t, uint64_t))specialized closure #2 in ManagedContinuation.updateState(continuation:result:));
}

uint64_t sub_1B9D9A4CC()
{
  return objectdestroy_11Tm(&demangling cache variable for type metadata for CheckedContinuation<(), Error>, (void (*)(void, void))outlined consume of Result<(), Error>);
}

uint64_t sub_1B9D9A50C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Error);
  uint64_t v2 = type metadata accessor for CheckedContinuation();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 24) & ~v4;
  uint64_t v6 = *(void *)(v3 + 64);
  uint64_t v7 = *(void *)(type metadata accessor for Result() - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v6 + v8) & ~v8;
  uint64_t v11 = *(void *)(v7 + 64);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v5, v2);
  if (swift_getEnumCaseMultiPayload() == 1) {

  }
  else {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v9, v1);
  }

  return MEMORY[0x1F4186498](v0, v9 + v11, v4 | v8 | 7);
}

unint64_t lazy protocol witness table accessor for type CancellationError and conformance CancellationError()
{
  unint64_t result = lazy protocol witness table cache variable for type CancellationError and conformance CancellationError;
  if (!lazy protocol witness table cache variable for type CancellationError and conformance CancellationError)
  {
    type metadata accessor for CancellationError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError);
  }
  return result;
}

uint64_t sub_1B9D9A72C()
{
  return objectdestroy_11Tm(&demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>, (void (*)(void, void))outlined consume of Result<SABaseCommand?, Error>);
}

uint64_t partial apply for specialized closure #2 in ManagedContinuation.updateState(continuation:result:)(uint64_t *a1, uint64_t (*a2)(unint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a1) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v2 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);

  return a2(v2 + v4, v5);
}

void outlined consume of Result<SABaseCommand?, Error>?(id a1, unsigned __int8 a2)
{
  if (a2 != 255) {
    outlined consume of Result<SABaseCommand?, Error>(a1);
  }
}

const char *AutoBugCapture.domain.unsafeMutableAddressor()
{
  return "SiriAssistant";
}

uint64_t static AutoBugCapture.domain.getter()
{
  return 0x6973734169726953;
}

void *AutoBugCapture.sessionDuration.unsafeMutableAddressor()
{
  return &static AutoBugCapture.sessionDuration;
}

double static AutoBugCapture.sessionDuration.getter()
{
  return 30.0;
}

uint64_t static AutoBugCapture.ErrorType.sirikitRuntime.getter()
{
  return 0x5274696B69726973;
}

uint64_t static AutoBugCapture.ErrorSubType.nl.getter()
{
  return 27758;
}

uint64_t static AutoBugCapture.ErrorContext.camGibberish.getter()
{
  return 0x65626269476D6163;
}

uint64_t static AutoBugCapture.generateSnapshot(type:subType:context:)()
{
  uint64_t result = AFIsInternalInstall();
  if (result)
  {
    type metadata accessor for AutoBugCaptureManager();
    swift_allocObject();
    AutoBugCaptureManager.init(domain:sessionDuration:)();
    dispatch thunk of AutoBugCaptureManager.generateSnapshot(errorType:errorSubType:subTypeContext:completion:)();
    return swift_release();
  }
  return result;
}

void closure #1 in static AutoBugCapture.generateSnapshot(type:subType:context:)()
{
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.instrumentation);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, oslog, v1, "AutoBugCapture#generateSnapshot ABC result: %{BOOL}d", v2, 8u);
    MEMORY[0x1BA9E48C0](v2, -1, -1);
  }
  else
  {
  }
}

ValueMetadata *type metadata accessor for AutoBugCapture()
{
  return &type metadata for AutoBugCapture;
}

ValueMetadata *type metadata accessor for AutoBugCapture.ErrorType()
{
  return &type metadata for AutoBugCapture.ErrorType;
}

ValueMetadata *type metadata accessor for AutoBugCapture.ErrorSubType()
{
  return &type metadata for AutoBugCapture.ErrorSubType;
}

ValueMetadata *type metadata accessor for AutoBugCapture.ErrorContext()
{
  return &type metadata for AutoBugCapture.ErrorContext;
}

uint64_t lazy protocol witness table accessor for type BargeInMode and conformance BargeInMode(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for BargeInMode();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t BargeInContext.debugDescription.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)v16 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for BargeInMode();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = 0;
  v16[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(36);
  v7._object = (void *)0x80000001BA0634C0;
  v7._uint64_t countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v7);
  BargeInContext.mode.getter();
  _print_unlocked<A, B>(_:_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v8._uint64_t countAndFlagsBits = 0x61767265746E6920;
  v8._object = (void *)0xEB00000000203A6CLL;
  String.append(_:)(v8);
  BargeInContext.approximatePreviousTTSInterval.getter();
  uint64_t v9 = type metadata accessor for DateInterval();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v2, 1, v9) == 1)
  {
    outlined destroy of DateInterval?((uint64_t)v2);
    uint64_t v11 = (void *)0xE500000000000000;
    uint64_t v12 = 0x3E6C696E3CLL;
  }
  else
  {
    uint64_t v12 = MEMORY[0x1BA9DBF60]();
    uint64_t v11 = v13;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v2, v9);
  }
  v14._uint64_t countAndFlagsBits = v12;
  v14._object = v11;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  return v16[0];
}

uint64_t outlined destroy of DateInterval?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v29 = a5;
  uint64_t v30 = a8;
  uint64_t v10 = v9;
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  uint64_t v28 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v40 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  int v36 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v13 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v26 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v33 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v31 = *(void *)(v17 - 8);
  uint64_t v32 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v26 - v18;
  uint64_t v34 = v8;
  uint64_t v20 = dispatch thunk of Collection.count.getter();
  if (!v20) {
    return static Array._allocateUninitialized(_:)();
  }
  Swift::Int v21 = v20;
  uint64_t v27 = v15;
  uint64_t v43 = Array.init()();
  uint64_t v35 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v21);
  uint64_t v41 = v19;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if (v21 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v23 = (void (**)(char *))(v36 + 2);
    ++v36;
    int v37 = v23;
    uint64_t v24 = v27;
    while (1)
    {
      BOOL v25 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      (*v37)(v24);
      v25(v42, 0);
      v38(v24, v40);
      if (v10) {
        break;
      }
      uint64_t v10 = 0;
      (*v36)(v24, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      dispatch thunk of Collection.formIndex(after:)();
      if (!--v21)
      {
        (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
        return v43;
      }
    }
    (*v36)(v24, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v30, v40, v29);
  }
  return result;
}

uint64_t ConversationRequestProcessorBase.serviceHelper.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ConversationRequestProcessorBase.messagePublisher.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 24, a1);
}

uint64_t ConversationRequestProcessorBase.requestId.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ConversationRequestProcessorBase.rootRequestId.getter()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ConversationRequestProcessorBase.assistantId.getter()
{
  uint64_t v1 = *(void *)(v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ConversationRequestProcessorBase.sessionId.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationRequestProcessorBase.sessionId.getter(&OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId, MEMORY[0x1E4F27990], a1);
}

void *ConversationRequestProcessorBase.__allocating_init(_:_:_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, long long *a10, uint64_t a11)
{
  swift_bridgeObjectRelease();
  uint64_t v18 = (void *)swift_allocObject();
  v18[12] = a1;
  v18[13] = a2;
  uint64_t v19 = (char *)v18 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  uint64_t v20 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(v19, a3, v20);
  v18[8] = a4;
  v18[9] = a5;
  v18[10] = a6;
  v18[11] = a7;
  outlined init with take of ReferenceResolutionClientProtocol(a10, (uint64_t)(v18 + 3));
  void v18[2] = a11;
  return v18;
}

void *ConversationRequestProcessorBase.init(_:_:_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, long long *a10, uint64_t a11)
{
  swift_bridgeObjectRelease();
  v11[12] = a1;
  v11[13] = a2;
  uint64_t v19 = (char *)v11 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  uint64_t v20 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(v19, a3, v20);
  v11[8] = a4;
  v11[9] = a5;
  v11[10] = a6;
  v11[11] = a7;
  outlined init with take of ReferenceResolutionClientProtocol(a10, (uint64_t)(v11 + 3));
  v11[2] = a11;
  return v11;
}

uint64_t ConversationRequestProcessorBase.deinit()
{
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t ConversationRequestProcessorBase.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t (*ConversationRequestAwareBridgeBase.currentRequestProcessor.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t ConversationRequestAwareBridgeBase.candidateRequestProcessors.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + direct field offset for ConversationRequestAwareBridgeBase.candidateRequestProcessors);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t ConversationRequestAwareBridgeBase.requestMessagesHandledByBridgeBase.getter()
{
  return swift_retain();
}

uint64_t ConversationRequestAwareBridgeBase.previousProcessorTimeout.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationRequestProcessorBase.sessionId.getter(&direct field offset for ConversationRequestAwareBridgeBase.previousProcessorTimeout, MEMORY[0x1E4FBCAF0], a1);
}

void *ConversationRequestAwareBridgeBase.__allocating_init(withName:messagePublisher:serviceHelper:conversationSessionsManaging:autoRegisterStartRequestMessageBase:logger:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  swift_allocObject();
  uint64_t v14 = specialized ConversationRequestAwareBridgeBase.init(withName:messagePublisher:serviceHelper:conversationSessionsManaging:autoRegisterStartRequestMessageBase:logger:)(a1, a2, a3, a4, a5, a6, a7);
  swift_unknownObjectRelease();
  return v14;
}

void *ConversationRequestAwareBridgeBase.init(withName:messagePublisher:serviceHelper:conversationSessionsManaging:autoRegisterStartRequestMessageBase:logger:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  Swift::String v7 = specialized ConversationRequestAwareBridgeBase.init(withName:messagePublisher:serviceHelper:conversationSessionsManaging:autoRegisterStartRequestMessageBase:logger:)(a1, a2, a3, a4, a5, a6, a7);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t static ConversationRequestAwareBridgeBase.readPreviousProcessorTimeoutFromDefault()@<X0>(void *a1@<X8>)
{
  id v2 = objc_allocWithZone(MEMORY[0x1E4F1CB18]);
  uint64_t v3 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000013, 0x80000001BA063780);
  id v4 = objc_msgSend(v2, sel_initWithSuiteName_, v3);

  if (v4)
  {
    uint64_t v5 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000023, 0x80000001BA0637A0);
    id v6 = objc_msgSend(v4, sel_stringForKey_, v5);

    if (v6)
    {

      Swift::String v7 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000023, 0x80000001BA0637A0);
      id v8 = objc_msgSend(v4, sel_integerForKey_, v7);

      *a1 = v8;
      uint64_t v9 = *MEMORY[0x1E4FBCAC8];
      uint64_t v10 = type metadata accessor for DispatchTimeInterval();
      uint64_t v17 = *(void *)(v10 - 8);
      (*(void (**)(void *, uint64_t, uint64_t))(v17 + 104))(a1, v9, v10);
      uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(v17 + 56);
      uint64_t v12 = a1;
      uint64_t v13 = 0;
      uint64_t v14 = v10;
      goto LABEL_6;
    }
  }
  uint64_t v15 = type metadata accessor for DispatchTimeInterval();
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v14 = v15;
  uint64_t v12 = a1;
  uint64_t v13 = 1;
LABEL_6:

  return v11(v12, v13, 1, v14);
}

void *ConversationMessageDispatchingBridgeBase.init(_:_:_:_:_:)(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, long long *a5, uint64_t a6)
{
  type metadata accessor for ConversationMessageDispatchingBridgeBase.MessageHandlerBase();
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  v6[15] = Dictionary.init(dictionaryLiteral:)();
  static Array._allocateUninitialized(_:)();
  v6[16] = Dictionary.init(dictionaryLiteral:)();
  type metadata accessor for ConversationMessageDispatchingBridgeBase.CommandHandlerBase();
  type metadata accessor for Dictionary();
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  v6[17] = Dictionary.init(dictionaryLiteral:)();
  _OWORD v6[2] = a1;
  v6[3] = a2;
  outlined init with take of ReferenceResolutionClientProtocol(a3, (uint64_t)(v6 + 4));
  v6[9] = a4;
  outlined init with take of ReferenceResolutionClientProtocol(a5, (uint64_t)(v6 + 10));
  uint64_t v11 = (char *)v6 + direct field offset for ConversationMessageDispatchingBridgeBase.logger;
  uint64_t v12 = type metadata accessor for Logger();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v11, a6, v12);
  return v6;
}

uint64_t ConversationRequestAwareBridgeBase.registerMessages()()
{
  uint64_t v1 = *(void **)v0;
  if (*(unsigned char *)(v0
                + direct field offset for ConversationRequestAwareBridgeBase.hasAutoRegisteredStartRequestMessageBase) == 1)
  {
    uint64_t v2 = swift_allocObject();
    *(void *)(v2 + 16) = v1[39];
    *(void *)(v2 + 24) = v1[40];
    uint64_t v3 = (void (*)(uint64_t (*(*)(uint64_t))(uint64_t), uint64_t, uint64_t))v1[58];
    uint64_t started = type metadata accessor for StartRequestMessageBase();
    v3(partial apply for closure #1 in ConversationRequestAwareBridgeBase.registerMessages(), v2, started);
    swift_release();
  }
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v1[39];
  *(void *)(v5 + 24) = v1[40];
  id v6 = *(void (**)(uint64_t (*(*)(uint64_t))(uint64_t), uint64_t, uint64_t))(*(void *)v0 + 464);
  uint64_t v7 = type metadata accessor for EndRequestMessageBase();
  v6(partial apply for closure #2 in ConversationRequestAwareBridgeBase.registerMessages(), v5, v7);

  return swift_release();
}

uint64_t closure #1 in closure #1 in ConversationRequestAwareBridgeBase.registerMessages()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = (void *)swift_allocObject();
  v8[2] = a3;
  v8[3] = a4;
  v8[4] = a2;
  uint64_t v9 = *(void (**)(uint64_t))(*(void *)a2 + 136);
  swift_retain();
  v9(a1);

  return swift_release();
}

uint64_t closure #1 in closure #2 in ConversationRequestAwareBridgeBase.registerMessages()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = (void *)swift_allocObject();
  v8[2] = a3;
  v8[3] = a4;
  v8[4] = a2;
  uint64_t v9 = *(void (**)(uint64_t))(*(void *)a2 + 144);
  swift_retain();
  v9(a1);

  return swift_release();
}

void ConversationRequestAwareBridgeBase.registerMessageHandler<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for RequestMessageBase();
  uint64_t v6 = swift_dynamicCastMetatype();
  if (v6)
  {
    MEMORY[0x1F4188790](v6);
    id v8 = v7 + 4;
    uint64_t v9 = v7 + 6;
    os_unfair_lock_lock(v7 + 6);
    partial apply for closure #1 in ConversationRequestAwareBridgeBase.registerMessageHandler<A>(_:)(v8);
    os_unfair_lock_unlock(v9);
  }
  ConversationMessageDispatchingBridgeBase.registerMessageHandler<A>(_:)(a1, a2, a3);
}

{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t *);
  void (*v34)(uint64_t *, void);
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[3];
  uint64_t v44[7];

  uint64_t v40 = a1;
  uint64_t v41 = a2;
  int v37 = *v3;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v38 = *(void *)(v5 - 8);
  uint64_t v39 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44[0] = a3;
  swift_getMetatypeMetadata();
  uint64_t v11 = String.init<A>(describing:)();
  uint64_t v13 = v12;
  uint64_t v14 = *(uint64_t (**)(uint64_t))(*v3 + 176);
  uint64_t v15 = swift_bridgeObjectRetain();
  uint64_t v16 = v14(v15);
  uint64_t v42 = v11;
  v44[0] = v11;
  v44[1] = v13;
  uint64_t v17 = type metadata accessor for ConversationMessageDispatchingBridgeBase.MessageHandlerBase();
  MEMORY[0x1BA9E2D40](v43, v44, v16, MEMORY[0x1E4FBB1A0], v17, MEMORY[0x1E4FBB1B0]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v18 = v43[0];
  swift_release();
  if (v18)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = Logger.logObject.getter();
    uint64_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      Swift::Int v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      v44[0] = v22;
      *(_DWORD *)Swift::Int v21 = 136315138;
      swift_bridgeObjectRetain();
      v43[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v13, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v19, v20, "Message type: %s is already registered. Ignoring this request", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v22, -1, -1);
      MEMORY[0x1BA9E48C0](v21, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    int v36 = v7;
    type metadata accessor for StartRequestMessageBase();
    uint64_t v23 = swift_dynamicCastMetatype();
    BOOL v25 = v40;
    uint64_t v24 = v41;
    if (v23)
    {
      uint64_t v35 = a3;
      uint64_t v26 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v10, 1, 1, v26);
      uint64_t v27 = one-time initialization token for shared;
      swift_retain();
      if (v27 != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v28 = static MessageBusActor.shared;
      uint64_t v29 = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
      uint64_t v30 = (void *)swift_allocObject();
      long long v30[2] = v28;
      void v30[3] = v29;
      v30[4] = v35;
      v30[5] = v3;
      swift_retain();
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationRequestAwareBridgeBase.registerMessageHandler<A>(_:), (uint64_t)v30);
      swift_release();
      BOOL v25 = v40;
      uint64_t v24 = v41;
    }
    type metadata accessor for ConversationMessageDispatchingBridgeBase.MessageHandler();
    uint64_t v31 = (uint64_t)v36;
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v36, (uint64_t)v3 + direct field offset for ConversationMessageDispatchingBridgeBase.logger, v39);
    uint64_t v32 = ConversationMessageDispatchingBridgeBase.MessageHandler.__allocating_init(_:_:)(v25, v24, v31);
    v44[5] = v13;
    v44[6] = v32;
    v44[4] = v42;
    uint64_t v33 = *(uint64_t (**)(uint64_t *))(*v3 + 192);
    swift_retain();
    uint64_t v34 = (void (*)(uint64_t *, void))v33(v44);
    type metadata accessor for Dictionary();
    Dictionary.subscript.setter();
    v34(v44, 0);
  }
}

uint64_t closure #1 in ConversationRequestAwareBridgeBase.registerMessageHandler<A>(_:)(void **a1, uint64_t a2)
{
  id v4 = *a1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
    id v4 = (void *)result;
  }
  unint64_t v7 = v4[2];
  unint64_t v6 = v4[3];
  if (v7 >= v6 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v4);
    id v4 = (void *)result;
  }
  v4[2] = v7 + 1;
  v4[v7 + 4] = a2;
  *a1 = v4;
  return result;
}

void ConversationMessageDispatchingBridgeBase.registerMessageHandler<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v24 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27[0] = a3;
  swift_getMetatypeMetadata();
  uint64_t v8 = String.init<A>(describing:)();
  unint64_t v10 = v9;
  uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 176);
  uint64_t v12 = swift_bridgeObjectRetain();
  uint64_t v13 = v8;
  uint64_t v14 = v11(v12);
  v27[0] = v8;
  v27[1] = v10;
  uint64_t v15 = type metadata accessor for ConversationMessageDispatchingBridgeBase.MessageHandlerBase();
  MEMORY[0x1BA9E2D40](v28, v27, v14, MEMORY[0x1E4FBB1A0], v15, MEMORY[0x1E4FBB1B0]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v16 = v28[0];
  swift_release();
  if (v16)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      v27[0] = v20;
      *(_DWORD *)uint64_t v19 = 136315138;
      swift_bridgeObjectRetain();
      v28[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v10, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v17, v18, "Message type: %s is already registered so ignore this request", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v20, -1, -1);
      MEMORY[0x1BA9E48C0](v19, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    type metadata accessor for ConversationMessageDispatchingBridgeBase.MessageHandler();
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v7, v3 + direct field offset for ConversationMessageDispatchingBridgeBase.logger, v5);
    uint64_t v21 = ConversationMessageDispatchingBridgeBase.MessageHandler.__allocating_init(_:_:)(v25, v26, (uint64_t)v7);
    v28[1] = v10;
    void v28[2] = v21;
    v28[0] = v8;
    uint64_t v22 = *(uint64_t (**)(uint64_t *))(*(void *)v3 + 192);
    swift_retain();
    uint64_t v23 = (void (*)(uint64_t *, void))v22(v27);
    type metadata accessor for Dictionary();
    Dictionary.subscript.setter();
    v23(v27, 0);
  }
}

uint64_t closure #1 in ConversationRequestAwareBridgeBase.registerMessageHandler<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 40) = a4;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v5 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #1 in ConversationRequestAwareBridgeBase.registerMessageHandler<A>(_:), v5, 0);
}

uint64_t closure #1 in ConversationRequestAwareBridgeBase.registerMessageHandler<A>(_:)()
{
  uint64_t v1 = *(void *)(v0 + 40);
  if ((*(unsigned char *)(v1 + direct field offset for ConversationRequestAwareBridgeBase.hasRegisteredToAnyStartRequest) & 1) == 0) {
    *(unsigned char *)(v1 + direct field offset for ConversationRequestAwareBridgeBase.hasRegisteredToAnyStartRequest) = 1;
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ConversationMessageDispatchingBridgeBase.MessageHandler.__allocating_init(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ConversationMessageDispatchingBridgeBase.MessageHandler.__allocating_init(_:_:)(a1, a2, a3, &direct field offset for ConversationMessageDispatchingBridgeBase.MessageHandler.logger);
}

uint64_t ConversationMessageDispatchingBridgeBase.handleMessage(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790]();
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (char *)v2 + direct field offset for ConversationMessageDispatchingBridgeBase.logger;
  swift_retain_n();
  id v9 = a1;
  unint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v38 = v5;
  uint64_t v39 = v4;
  int v37 = v7;
  if (v12)
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    uint64_t v41 = v35;
    *(_DWORD *)uint64_t v13 = 136315394;
    uint64_t v36 = (uint64_t)v8;
    uint64_t v15 = v2[2];
    unint64_t v16 = v2[3];
    swift_bridgeObjectRetain();
    uint64_t ObjectType = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2112;
    uint64_t ObjectType = (uint64_t)v9;
    id v17 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v9;

    _os_log_impl(&dword_1B9C64000, v10, v11, "Bridge \"%s\" received message: %@", (uint8_t *)v13, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v14, -1, -1);
    uint64_t v18 = v35;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v18, -1, -1);
    MEMORY[0x1BA9E48C0](v13, -1, -1);
  }
  else
  {

    swift_release_n();
  }

  uint64_t v19 = (*(uint64_t (**)(id))(*v2 + 264))(v9);
  if ((*(uint64_t (**)(void))(*(void *)v19 + 104))())
  {
    id v20 = v9;
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    int v23 = v22;
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v24 = swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      uint64_t v41 = v36;
      *(_DWORD *)uint64_t v24 = 136315394;
      LODWORD(v35) = v23;
      uint64_t ObjectType = swift_getObjectType();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageBase.Type);
      uint64_t v25 = String.init<A>(describing:)();
      uint64_t ObjectType = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 12) = 2080;
      uint64_t v27 = v37;
      MessageBase.messageId.getter();
      _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v28 = v39;
      uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v31 = v30;
      (*(void (**)(char *, uint64_t))(v38 + 8))(v27, v28);
      uint64_t ObjectType = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v21, (os_log_type_t)v35, "handleMessage got message type %s with message id: %s which is not registered with the bridge", (uint8_t *)v24, 0x16u);
      uint64_t v32 = v36;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v32, -1, -1);
      MEMORY[0x1BA9E48C0](v24, -1, -1);
    }
    else
    {
    }
  }
  else
  {
    (*(void (**)(void *, id))(*(void *)v19 + 88))(v2, v9);
  }
  return swift_release();
}

uint64_t ConversationRequestAwareBridgeBase.createRequestProcessor(_:_:_:_:)()
{
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v0, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_1B9C64000, v0, v1, "createRequestProcessor() method from base class called. Please implement this method in your RequestProcessorBase implementation", v2, 2u);
    MEMORY[0x1BA9E48C0](v2, -1, -1);
  }

  return 0;
}

uint64_t ConversationRequestAwareBridgeBase.tryToDipatchCommandToProcessor<A>(_:executionContextInfo:reply:handler:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void *))
{
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)v5 + 376))();
  if (!v11)
  {
    os_log_type_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v65 = v25;
      *(_DWORD *)uint64_t v24 = 136315138;
      uint64_t v26 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v22, v23, "There is no request processor to serve command: %s", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v25, -1, -1);
      MEMORY[0x1BA9E48C0](v24, -1, -1);
    }

    return 0;
  }
  BOOL v12 = (void *)v11;
  unint64_t v61 = a5;
  uint64_t v62 = a2;
  uint64_t v63 = a3;
  uint64_t v64 = a4;
  uint64_t v13 = *(void *)(v11 + 80);
  uint64_t v14 = *(void *)(v11 + 88);
  swift_bridgeObjectRetain();
  id v15 = objc_msgSend(a1, sel_refId);
  if (v15)
  {
    unint64_t v16 = v15;
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;

    if (v13 == v17 && v14 == v19)
    {
LABEL_21:
      swift_bridgeObjectRelease_n();
      goto LABEL_22;
    }
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v21) {
      goto LABEL_22;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v29 = v12[8];
  uint64_t v30 = v12[9];
  swift_bridgeObjectRetain();
  id v31 = objc_msgSend(a1, sel_refId);
  if (!v31)
  {
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  uint64_t v32 = v31;
  uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v35 = v34;

  if (v29 == v33 && v30 == v35) {
    goto LABEL_21;
  }
  char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v37 & 1) == 0)
  {
LABEL_27:
    swift_retain_n();
    id v45 = a1;
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      uint64_t v65 = v49;
      *(_DWORD *)uint64_t v48 = 136315906;
      uint64_t v50 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v48 + 12) = 2080;
      id v52 = objc_msgSend(v45, sel_refId);
      if (v52)
      {
        id v53 = v52;
        uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v56 = v55;
      }
      else
      {
        unint64_t v56 = 0xE300000000000000;
        uint64_t v54 = 7104878;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v56, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v48 + 22) = 2080;
      uint64_t v57 = v12[10];
      unint64_t v58 = v12[11];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v48 + 32) = 2080;
      uint64_t v59 = v12[8];
      unint64_t v60 = v12[9];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v46, v47, "Received %s with refId: %s whereas current rootRequestId is: %s and current requestId is: %s .. ignoring this command", (uint8_t *)v48, 0x2Au);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v49, -1, -1);
      MEMORY[0x1BA9E48C0](v48, -1, -1);

      swift_release();
    }
    else
    {

      swift_release_n();
    }
    return 0;
  }
LABEL_22:
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = (uint8_t *)swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    uint64_t v65 = v41;
    *(_DWORD *)uint64_t v40 = 136315138;
    uint64_t v42 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v38, v39, "Dispatching %s", v40, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v41, -1, -1);
    MEMORY[0x1BA9E48C0](v40, -1, -1);
  }

  unint64_t v44 = (void (*)(void *, uint64_t, uint64_t, uint64_t))v61(v12);
  v44(a1, v62, v63, v64);
  swift_release();
  swift_release();
  return 1;
}

void ConversationRequestAwareBridgeBase.handleStartRequestInternal(_:)(void *a1, NSObject *a2)
{
  uint64_t v3 = v2;
  uint64_t v64 = a2;
  uint64_t v5 = *v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v62 = *(void *)(v6 - 8);
  uint64_t v63 = v6;
  MEMORY[0x1F4188790]();
  uint64_t v8 = (char *)v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v9 = RequestMessageBase.requestId.getter();
  unint64_t v11 = v10;
  uint64_t v60 = MessageBase.assistantId.getter();
  uint64_t v13 = v12;
  uint64_t v14 = (*(uint64_t (**)(void))(*v2 + 376))();
  if (!v14) {
    goto LABEL_7;
  }
  uint64_t v16 = *(void *)(v14 + 64);
  uint64_t v15 = *(void *)(v14 + 72);
  swift_bridgeObjectRetain();
  swift_release();
  if (v16 == v9 && v15 == v11)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0)
    {
LABEL_7:
      uint64_t v19 = RequestMessageBase.requestId.getter();
      uint64_t v21 = v20;
      uint64_t v22 = (*(uint64_t (**)(void))(*v3 + 400))();
      v65[0] = v19;
      v65[1] = v21;
      uint64_t v59 = *(void *)(v5 + 320);
      MEMORY[0x1BA9E2D40](&v66, v65, v22, MEMORY[0x1E4FBB1A0]);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v23 = v66;
      if (v66)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (one-time initialization token for conversationBridge != -1) {
          swift_once();
        }
        uint64_t v24 = type metadata accessor for Logger();
        __swift_project_value_buffer(v24, (uint64_t)static Logger.conversationBridge);
        id v25 = a1;
        uint64_t v26 = Logger.logObject.getter();
        os_log_type_t v27 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v26, v27))
        {
          uint64_t v28 = (uint8_t *)swift_slowAlloc();
          uint64_t v29 = swift_slowAlloc();
          *(_DWORD *)uint64_t v28 = 136315138;
          uint64_t v64 = (v28 + 4);
          v65[0] = v29;
          uint64_t v30 = RequestMessageBase.requestId.getter();
          uint64_t v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, v65);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B9C64000, v26, v27, "Got StartRequest for a request for which we've previously seen speech candidates. Will promote candidate request processor to active for requestId=%s", v28, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v29, -1, -1);
          MEMORY[0x1BA9E48C0](v28, -1, -1);
        }
        else
        {
        }
      }
      else
      {
        if (one-time initialization token for conversationBridge != -1) {
          swift_once();
        }
        uint64_t v43 = type metadata accessor for Logger();
        __swift_project_value_buffer(v43, (uint64_t)static Logger.conversationBridge);
        swift_bridgeObjectRetain_n();
        unint64_t v44 = Logger.logObject.getter();
        os_log_type_t v45 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v44, v45))
        {
          uint64_t v46 = (uint8_t *)swift_slowAlloc();
          uint64_t v58 = swift_slowAlloc();
          v65[0] = v58;
          *(_DWORD *)uint64_t v46 = 136315138;
          v57[1] = v46 + 4;
          swift_bridgeObjectRetain();
          uint64_t v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, v65);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B9C64000, v44, v45, "Creating new RequestProcessor to handle StartRequest<requestId: %s>", v46, 0xCu);
          uint64_t v47 = v58;
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v47, -1, -1);
          MEMORY[0x1BA9E48C0](v46, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        SessionMessageBase.sessionId.getter();
        uint64_t v48 = ((uint64_t (*)(uint64_t))v64[2].isa)(ObjectType);
        uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, unint64_t, uint64_t, uint64_t))(*v3 + 472))(v60, v13, v8, v9, v11, v48, v49);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v62 + 8))(v8, v63);
      }
      uint64_t v50 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*v3 + 416))(v65);
      type metadata accessor for Dictionary();
      Dictionary.removeAll(keepingCapacity:)(0);
      v50(v65, 0);
      unint64_t v51 = *(void (**)(uint64_t))(*v3 + 384);
      uint64_t v52 = swift_retain();
      v51(v52);
      if (v23)
      {
        id v53 = *(void (**)(void *, uint64_t))(*v3 + 496);
        swift_retain();
        v53(a1, v23);
        swift_release_n();
      }
      else
      {
        uint64_t v54 = Logger.logObject.getter();
        os_log_type_t v55 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v54, v55))
        {
          unint64_t v56 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v56 = 0;
          _os_log_impl(&dword_1B9C64000, v54, v55, "Could not create an instance of RequestProcessor", v56, 2u);
          MEMORY[0x1BA9E48C0](v56, -1, -1);
        }
      }
      return;
    }
  }
  swift_bridgeObjectRelease();
  id v32 = a1;
  swift_bridgeObjectRetain();
  uint64_t v64 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v64, v33))
  {
    uint64_t v34 = swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    v65[0] = v35;
    *(_DWORD *)uint64_t v34 = 136315650;
    swift_bridgeObjectRetain();
    uint64_t v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v34 + 12) = 2080;
    MessageBase.messageId.getter();
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v36 = v63;
    uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v39 = v38;
    (*(void (**)(char *, uint64_t))(v62 + 8))(v8, v36);
    uint64_t v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v34 + 22) = 2080;
    swift_getObjectType();
    uint64_t v40 = _typeName(_:qualified:)();
    uint64_t v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v64, v33, "Got a duplicate start request message to requestId: %s messageId: %s type: %s ignoring the new start", (uint8_t *)v34, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v35, -1, -1);
    MEMORY[0x1BA9E48C0](v34, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v42 = v64;
  }
}

void ConversationRequestAwareBridgeBase.__allocating_init(_:_:_:_:_:)()
{
}

void ConversationRequestAwareBridgeBase.init(_:_:_:_:_:)()
{
}

uint64_t ConversationRequestAwareBridgeBase.__ivar_destroyer()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v1 = v0 + direct field offset for ConversationRequestAwareBridgeBase.previousProcessorTimeout;
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(v1, v2);
}

uint64_t ConversationRequestAwareBridgeBase.deinit()
{
  ConversationMessageDispatchingBridgeBase.deinit();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v1 = v0 + direct field offset for ConversationRequestAwareBridgeBase.previousProcessorTimeout;
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t ConversationMessageDispatchingBridgeBase.deinit()
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 32);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + direct field offset for ConversationMessageDispatchingBridgeBase.logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t ConversationRequestAwareBridgeBase.__deallocating_deinit()
{
  return ConversationRequestAwareBridgeBase.__deallocating_deinit((void (*)(void))ConversationRequestAwareBridgeBase.deinit);
}

uint64_t ConversationMessageDispatchingBridgeBase.methodDispatcher.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 120) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*ConversationMessageDispatchingBridgeBase.methodDispatcher.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationMessageDispatchingBridgeBase.registeredMethod.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ConversationMessageDispatchingBridgeBase.registeredMethod.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 128) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*ConversationMessageDispatchingBridgeBase.registeredMethod.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationMessageDispatchingBridgeBase.commandsDispatcher.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 136) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*ConversationMessageDispatchingBridgeBase.commandsDispatcher.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationMessageDispatchingBridgeBase.messageTypesForSubscription()()
{
  uint64_t v1 = (uint64_t (**)(void))(*v0 + 176);
  uint64_t v2 = (*v1)();
  uint64_t v3 = (uint64_t)*(v1 - 12);
  type metadata accessor for ConversationMessageDispatchingBridgeBase.MessageHandlerBase();
  void v10[5] = v2;
  _OWORD v10[2] = v3;
  uint64_t v4 = type metadata accessor for Dictionary.Values();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageBase.Type);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in ConversationMessageDispatchingBridgeBase.messageTypesForSubscription(), (uint64_t)v10, v4, v5, MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v7);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t ConversationMessageDispatchingBridgeBase.aceCommandsGroups()()
{
  (*(void (**)(void))(*(void *)v0 + 200))();
  type metadata accessor for ConversationMessageDispatchingBridgeBase.CommandHandlerBase();
  type metadata accessor for Dictionary();
  type metadata accessor for Dictionary.Keys();
  swift_getWitnessTable();
  return Array.init<A>(_:)();
}

uint64_t ConversationMessageDispatchingBridgeBase.aceCommands(forGroup:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 200);
  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = v5(v6);
  v13[0] = a1;
  v13[1] = a2;
  type metadata accessor for ConversationMessageDispatchingBridgeBase.CommandHandlerBase();
  uint64_t v8 = MEMORY[0x1E4FBB1A0];
  uint64_t v9 = MEMORY[0x1E4FBB1B0];
  uint64_t v10 = type metadata accessor for Dictionary();
  MEMORY[0x1BA9E2D40](&v14, v13, v7, v8, v10, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v14;
  if (!v14)
  {
    swift_getTupleTypeMetadata2();
    static Array._allocateUninitialized(_:)();
    uint64_t v11 = Dictionary.init(dictionaryLiteral:)();
  }
  v13[0] = v11;
  type metadata accessor for Dictionary.Keys();
  swift_getWitnessTable();
  return Array.init<A>(_:)();
}

uint64_t ConversationMessageDispatchingBridgeBase.findRegisterMethod(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror?);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)&v22[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v22[-1] - v8;
  uint64_t v10 = type metadata accessor for Mirror();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v22[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Mirror?(a1, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for Mirror?);
    type metadata accessor for ConversationMessageDispatchingBridgeBase.MessageHandlerBase();
    return swift_allocObject();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    v22[0] = Mirror.subjectType.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
    uint64_t v15 = String.init<A>(describing:)();
    uint64_t v17 = v16;
    uint64_t v18 = (*(uint64_t (**)(void))(*(void *)v2 + 176))();
    v22[0] = v15;
    v22[1] = v17;
    uint64_t v19 = type metadata accessor for ConversationMessageDispatchingBridgeBase.MessageHandlerBase();
    MEMORY[0x1BA9E2D40](&v23, v22, v18, MEMORY[0x1E4FBB1A0], v19, MEMORY[0x1E4FBB1B0]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v14 = v23;
    if (!v23)
    {
      Mirror.superclassMirror.getter();
      uint64_t v14 = ConversationMessageDispatchingBridgeBase.findRegisterMethod(_:)(v7);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for Mirror?);
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  return v14;
}

void ConversationMessageDispatchingBridgeBase.registerCommandHandler<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)v3;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v59 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  id v13 = objc_msgSend(v59, sel_groupIdentifier);
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v58 = v9;
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v17 = v16;

    id v18 = objc_msgSend(v59, sel_encodedClassName);
    if (v18)
    {
      uint64_t v19 = v18;
      uint64_t v53 = v10;
      uint64_t v54 = a1;
      uint64_t v55 = a2;
      uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v21 = v20;

      uint64_t v22 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 200);
      uint64_t v23 = swift_bridgeObjectRetain();
      uint64_t v24 = v22(v23);
      uint64_t v57 = v15;
      uint64_t v60 = v15;
      unint64_t v61 = v17;
      v52[1] = *(void *)(v8 + 80);
      uint64_t v25 = type metadata accessor for ConversationMessageDispatchingBridgeBase.CommandHandlerBase();
      uint64_t v26 = MEMORY[0x1E4FBB1A0];
      uint64_t v27 = MEMORY[0x1E4FBB1B0];
      uint64_t v28 = type metadata accessor for Dictionary();
      MEMORY[0x1BA9E2D40](v62, &v60, v24, v26, v28, v27);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v29 = v62[0];
      v52[2] = v28;
      if (!v62[0])
      {
        swift_getTupleTypeMetadata2();
        static Array._allocateUninitialized(_:)();
        uint64_t v29 = Dictionary.init(dictionaryLiteral:)();
      }
      uint64_t v31 = v56;
      uint64_t v30 = v57;
      uint64_t v63 = v29;
      uint64_t v60 = v56;
      unint64_t v61 = v21;
      swift_bridgeObjectRetain();
      MEMORY[0x1BA9E2D40](v62, &v60, v29, MEMORY[0x1E4FBB1A0], v25, MEMORY[0x1E4FBB1B0]);
      swift_bridgeObjectRelease();
      uint64_t v32 = v62[0];
      swift_release();
      os_log_type_t v33 = &metadata instantiation cache for protocol conformance descriptor for AceServiceInvokerImpl;
      if (v32)
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v34 = Logger.logObject.getter();
        os_log_type_t v35 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v34, v35))
        {
          uint64_t v36 = swift_slowAlloc();
          v52[0] = swift_slowAlloc();
          uint64_t v60 = v52[0];
          *(_DWORD *)uint64_t v36 = 136315394;
          swift_bridgeObjectRetain();
          v62[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v17, &v60);
          uint64_t v37 = v34;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v36 + 12) = 2080;
          swift_bridgeObjectRetain();
          v62[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v21, &v60);
          uint64_t v31 = v56;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B9C64000, v34, v35, "There is already a method register to handle command: %s:%s, replacing", (uint8_t *)v36, 0x16u);
          uint64_t v38 = v52[0];
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v38, -1, -1);
          uint64_t v39 = v36;
          os_log_type_t v33 = (void *)&metadata instantiation cache for protocol conformance descriptor for AceServiceInvokerImpl;
          MEMORY[0x1BA9E48C0](v39, -1, -1);

          uint64_t v30 = v57;
        }
        else
        {
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
      }
      type metadata accessor for ConversationMessageDispatchingBridgeBase.CommandHandler();
      (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v12, &v4[v33[316]], v58);
      v62[3] = ConversationMessageDispatchingBridgeBase.CommandHandler.__allocating_init(_:_:)(v54, v55, (uint64_t)v12);
      uint64_t v60 = v31;
      unint64_t v61 = v21;
      swift_retain();
      Dictionary.updateValue(_:forKey:)();
      swift_bridgeObjectRelease();
      swift_release();
      v62[1] = v17;
      _OWORD v62[2] = v63;
      v62[0] = v30;
      uint64_t v50 = *(uint64_t (**)(uint64_t *))(*(void *)v4 + 216);
      swift_bridgeObjectRetain();
      unint64_t v51 = (void (*)(uint64_t *, void))v50(&v60);
      type metadata accessor for Dictionary();
      Dictionary.updateValue(_:forKey:)();
      swift_bridgeObjectRelease();
      v51(&v60, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }
    swift_bridgeObjectRelease();
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      uint64_t v60 = v43;
      *(_DWORD *)uint64_t v42 = 136315138;
      v62[0] = a3;
      swift_getMetatypeMetadata();
      uint64_t v47 = String.init<A>(describing:)();
      v62[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v46 = "Cannot get command encode name %s";
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      uint64_t v60 = v43;
      *(_DWORD *)uint64_t v42 = 136315138;
      v62[0] = a3;
      swift_getMetatypeMetadata();
      uint64_t v44 = String.init<A>(describing:)();
      v62[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v46 = "Cannot get command group identifier %s";
LABEL_12:
      _os_log_impl(&dword_1B9C64000, v40, v41, v46, v42, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v43, -1, -1);
      MEMORY[0x1BA9E48C0](v42, -1, -1);

LABEL_18:
      return;
    }
  }

  id v49 = v59;
}

void ConversationMessageDispatchingBridgeBase.defaultHandle(_:executionContextInfo:reply:)(void *a1, uint64_t a2, void (*a3)(id, id))
{
  uint64_t v4 = v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v54 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
  swift_retain_n();
  id v11 = a1;
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  int v14 = v13;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v52 = v8;
    uint64_t v16 = v15;
    uint64_t v50 = (void *)swift_slowAlloc();
    uint64_t v51 = swift_slowAlloc();
    uint64_t v57 = v51;
    *(_DWORD *)uint64_t v16 = 136315394;
    uint64_t v53 = v7;
    HIDWORD(v49) = v14;
    unint64_t v17 = v11;
    uint64_t v19 = *(void *)(v4 + 16);
    unint64_t v18 = *(void *)(v4 + 24);
    swift_bridgeObjectRetain();
    uint64_t v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v18, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2112;
    uint64_t v55 = (uint64_t)v17;
    id v20 = v17;
    uint64_t v7 = v53;
    id v11 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    unint64_t v21 = v50;
    *uint64_t v50 = v11;

    uint64_t v22 = v12;
    _os_log_impl(&dword_1B9C64000, v12, BYTE4(v49), "Bridge:%s received %@", (uint8_t *)v16, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v21, -1, -1);
    uint64_t v23 = v51;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v23, -1, -1);
    uint64_t v24 = v16;
    uint64_t v8 = v52;
    MEMORY[0x1BA9E48C0](v24, -1, -1);

    if (!a3) {
      return;
    }
  }
  else
  {

    swift_release_n();
    if (!a3) {
      return;
    }
  }
  id v25 = objc_allocWithZone(MEMORY[0x1E4F965B0]);
  swift_retain();
  id v26 = objc_msgSend(v25, sel_init);
  uint64_t v27 = v54;
  UUID.init()();
  uint64_t v28 = UUID.uuidString.getter();
  uint64_t v30 = v29;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v27, v7);
  uint64_t v31 = (void *)MEMORY[0x1BA9E2DD0](v28, v30);
  swift_bridgeObjectRelease();
  objc_msgSend(v26, sel_setAceId_, v31);

  id v32 = v26;
  id v33 = objc_msgSend(v11, sel_aceId);
  objc_msgSend(v32, sel_setRefId_, v33);

  uint64_t v57 = 0;
  unint64_t v58 = 0xE000000000000000;
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease();
  uint64_t v57 = 0x20656764697242;
  unint64_t v58 = 0xE700000000000000;
  uint64_t v34 = *(void *)(v4 + 16);
  os_log_type_t v35 = *(void **)(v4 + 24);
  swift_bridgeObjectRetain();
  v36._uint64_t countAndFlagsBits = v34;
  v36._object = v35;
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  v37._object = (void *)0x80000001BA0634E0;
  v37._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v37);
  id v38 = objc_msgSend(v11, sel_encodedClassName);
  if (v38)
  {
    uint64_t v39 = v38;
    uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v42 = v41;
  }
  else
  {
    uint64_t v40 = 0;
    uint64_t v42 = 0;
  }
  uint64_t v43 = self;
  uint64_t v55 = v40;
  uint64_t v56 = v42;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  v44._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v44);
  swift_bridgeObjectRelease();
  unint64_t v45 = (void *)MEMORY[0x1BA9E2DD0](v57, v58);
  swift_bridgeObjectRelease();
  id v46 = objc_msgSend(v43, sel_errorWithCode_description_, 2000, v45);

  id v47 = v32;
  id v48 = v46;
  a3(v32, v46);

  _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe((uint64_t)a3);
}

uint64_t ConversationMessageDispatchingBridgeBase.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ConversationMessageDispatchingBridgeBase.messagePublisher.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 32, a1);
}

uint64_t ConversationMessageDispatchingBridgeBase.serviceHelper.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ConversationMessageDispatchingBridgeBase.conversationSessionsManaging.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 80, a1);
}

uint64_t ConversationMessageDispatchingBridgeBase.logger.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationRequestProcessorBase.sessionId.getter(&direct field offset for ConversationMessageDispatchingBridgeBase.logger, MEMORY[0x1E4FBD360], a1);
}

uint64_t ConversationMessageDispatchingBridgeBase.__allocating_init(_:_:_:_:_:)(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, long long *a5, uint64_t a6)
{
  uint64_t v12 = swift_allocObject();
  ConversationMessageDispatchingBridgeBase.init(_:_:_:_:_:)(a1, a2, a3, a4, a5, a6);
  return v12;
}

uint64_t ConversationMessageDispatchingBridgeBase.MessageHandlerBase.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t ConversationMessageDispatchingBridgeBase.CommandHandler.__allocating_init(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ConversationMessageDispatchingBridgeBase.MessageHandler.__allocating_init(_:_:)(a1, a2, a3, &direct field offset for ConversationMessageDispatchingBridgeBase.CommandHandler.logger);
}

uint64_t ConversationMessageDispatchingBridgeBase.MessageHandler.__allocating_init(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  uint64_t v9 = v8 + *a4;
  uint64_t v10 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9, a3, v10);
  return v8;
}

uint64_t ConversationMessageDispatchingBridgeBase.MessageHandlerBase.getMessageType()()
{
  return type metadata accessor for MessageBase();
}

Swift::Bool __swiftcall ConversationMessageDispatchingBridgeBase.MessageHandlerBase.isBase()()
{
  return 1;
}

uint64_t ConversationMessageDispatchingBridgeBase.MessageHandlerBase.deinit()
{
  return v0;
}

uint64_t ConversationMessageDispatchingBridgeBase.MessageHandlerBase.init()()
{
  return v0;
}

uint64_t ConversationMessageDispatchingBridgeBase.MessageHandler.method.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  return v1;
}

uint64_t ConversationMessageDispatchingBridgeBase.MessageHandler.logger.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationRequestProcessorBase.sessionId.getter(&direct field offset for ConversationMessageDispatchingBridgeBase.MessageHandler.logger, MEMORY[0x1E4FBD360], a1);
}

uint64_t ConversationMessageDispatchingBridgeBase.MessageHandler.init(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ConversationMessageDispatchingBridgeBase.MessageHandler.init(_:_:)(a1, a2, a3, &direct field offset for ConversationMessageDispatchingBridgeBase.MessageHandler.logger);
}

uint64_t ConversationMessageDispatchingBridgeBase.MessageHandler.getMessageType()()
{
  return *(void *)(*(void *)v0 + 136);
}

void ConversationMessageDispatchingBridgeBase.MessageHandler.__allocating_init()()
{
}

{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void ConversationMessageDispatchingBridgeBase.MessageHandler.init()()
{
}

uint64_t ConversationMessageDispatchingBridgeBase.MessageHandler.__ivar_destroyer()
{
  return ConversationMessageDispatchingBridgeBase.MessageHandler.__ivar_destroyer(&direct field offset for ConversationMessageDispatchingBridgeBase.MessageHandler.logger);
}

uint64_t ConversationMessageDispatchingBridgeBase.MessageHandler.deinit()
{
  return ConversationMessageDispatchingBridgeBase.MessageHandler.deinit(&direct field offset for ConversationMessageDispatchingBridgeBase.MessageHandler.logger);
}

uint64_t ConversationMessageDispatchingBridgeBase.MessageHandler.__deallocating_deinit()
{
  return ConversationRequestAwareBridgeBase.__deallocating_deinit((void (*)(void))ConversationMessageDispatchingBridgeBase.MessageHandler.deinit);
}

uint64_t ConversationRequestAwareBridgeBase.__deallocating_deinit(void (*a1)(void))
{
  a1();

  return swift_deallocClassInstance();
}

unint64_t ConversationMessageDispatchingBridgeBase.CommandHandlerBase.commandType()()
{
  return type metadata accessor for SABaseClientBoundCommand();
}

uint64_t ConversationMessageDispatchingBridgeBase.CommandHandlerBase.deinit()
{
  return v0;
}

uint64_t ConversationMessageDispatchingBridgeBase.CommandHandlerBase.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t ConversationMessageDispatchingBridgeBase.CommandHandlerBase.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t ConversationMessageDispatchingBridgeBase.CommandHandlerBase.init()()
{
  return v0;
}

uint64_t ConversationMessageDispatchingBridgeBase.CommandHandler.logger.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationRequestProcessorBase.sessionId.getter(&direct field offset for ConversationMessageDispatchingBridgeBase.CommandHandler.logger, MEMORY[0x1E4FBD360], a1);
}

uint64_t ConversationRequestProcessorBase.sessionId.getter@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3 + *a1;
  uint64_t v6 = a2(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);

  return v7(a3, v5, v6);
}

uint64_t ConversationMessageDispatchingBridgeBase.CommandHandler.init(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ConversationMessageDispatchingBridgeBase.MessageHandler.init(_:_:)(a1, a2, a3, &direct field offset for ConversationMessageDispatchingBridgeBase.CommandHandler.logger);
}

uint64_t ConversationMessageDispatchingBridgeBase.MessageHandler.init(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  uint64_t v6 = v4 + *a4;
  uint64_t v7 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v6, a3, v7);
  return v4;
}

uint64_t ConversationMessageDispatchingBridgeBase.CommandHandler.commandType()()
{
  return *(void *)(*(void *)v0 + 128);
}

void ConversationMessageDispatchingBridgeBase.CommandHandler.__allocating_init()()
{
}

void ConversationMessageDispatchingBridgeBase.CommandHandler.init()()
{
}

uint64_t ConversationMessageDispatchingBridgeBase.CommandHandler.__ivar_destroyer()
{
  return ConversationMessageDispatchingBridgeBase.MessageHandler.__ivar_destroyer(&direct field offset for ConversationMessageDispatchingBridgeBase.CommandHandler.logger);
}

uint64_t ConversationMessageDispatchingBridgeBase.MessageHandler.__ivar_destroyer(void *a1)
{
  swift_release();
  uint64_t v3 = v1 + *a1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);

  return v5(v3, v4);
}

uint64_t ConversationMessageDispatchingBridgeBase.CommandHandler.deinit()
{
  return ConversationMessageDispatchingBridgeBase.MessageHandler.deinit(&direct field offset for ConversationMessageDispatchingBridgeBase.CommandHandler.logger);
}

uint64_t ConversationMessageDispatchingBridgeBase.MessageHandler.deinit(void *a1)
{
  swift_release();
  uint64_t v3 = v1 + *a1;
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  return v1;
}

uint64_t ConversationMessageDispatchingBridgeBase.CommandHandler.__deallocating_deinit()
{
  return ConversationRequestAwareBridgeBase.__deallocating_deinit((void (*)(void))ConversationMessageDispatchingBridgeBase.CommandHandler.deinit);
}

uint64_t ConversationMessageDispatchingBridgeBase.__deallocating_deinit()
{
  return ConversationRequestAwareBridgeBase.__deallocating_deinit((void (*)(void))ConversationMessageDispatchingBridgeBase.deinit);
}

uint64_t protocol witness for StartRequestMessageForConversation.rootRequestId.getter in conformance StartIFRequestMessage()
{
  return MEMORY[0x1F4152FB8]();
}

void *specialized ConversationRequestAwareBridgeBase.init(withName:messagePublisher:serviceHelper:conversationSessionsManaging:autoRegisterStartRequestMessageBase:logger:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v36 = a7;
  uint64_t v37 = a5;
  uint64_t v33 = a2;
  uint64_t v34 = a4;
  uint64_t v38 = a3;
  uint64_t v31 = *v8;
  uint64_t v32 = a1;
  uint64_t v35 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v35 - 8);
  MEMORY[0x1F4188790](v35);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTimeInterval?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (uint64_t *)((char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = type metadata accessor for DispatchTimeInterval();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (uint64_t *)((char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(void *)((char *)v8 + direct field offset for ConversationRequestAwareBridgeBase.currentRequestProcessor) = 0;
  uint64_t v20 = direct field offset for ConversationRequestAwareBridgeBase.candidateRequestProcessors;
  swift_retain();
  *(void *)((char *)v8 + v20) = Dictionary.init()();
  uint64_t v21 = direct field offset for ConversationRequestAwareBridgeBase.requestMessagesHandledByBridgeBase;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<[RequestMessageBase.Type], os_unfair_lock_s>);
  uint64_t v22 = swift_allocObject();
  *(_DWORD *)(v22 + 24) = 0;
  *(void *)(v22 + 16) = MEMORY[0x1E4FBC860];
  *(void *)((char *)v8 + v21) = v22;
  uint64_t v23 = direct field offset for ConversationRequestAwareBridgeBase.hasRegisteredToAnyStartRequest;
  *((unsigned char *)v8 + direct field offset for ConversationRequestAwareBridgeBase.hasRegisteredToAnyStartRequest) = 0;
  *((unsigned char *)v8 + direct field offset for ConversationRequestAwareBridgeBase.hasAutoRegisteredStartRequestMessageBase) = a6;
  *((unsigned char *)v8 + v23) = a6;
  static ConversationRequestAwareBridgeBase.readPreviousProcessorTimeoutFromDefault()(v15);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    *uint64_t v19 = 500;
    (*(void (**)(void *, void, uint64_t))(v17 + 104))(v19, *MEMORY[0x1E4FBCAC8], v16);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v15, &demangling cache variable for type metadata for DispatchTimeInterval?);
    (*(void (**)(uint64_t, void *, uint64_t))(v17 + 32))((uint64_t)v8 + direct field offset for ConversationRequestAwareBridgeBase.previousProcessorTimeout, v19, v16);
  }
  else
  {
    uint64_t v24 = *(void (**)(void *, void *, uint64_t))(v17 + 32);
    v24(v19, v15, v16);
    v24((void *)((char *)v8 + direct field offset for ConversationRequestAwareBridgeBase.previousProcessorTimeout), v19, v16);
  }
  swift_release();
  uint64_t v25 = v38;
  outlined init with copy of ReferenceResolutionClientProtocol(v38, (uint64_t)v40);
  uint64_t v26 = v37;
  outlined init with copy of ReferenceResolutionClientProtocol(v37, (uint64_t)v39);
  uint64_t v28 = v35;
  uint64_t v27 = v36;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v36, v35);
  uint64_t v29 = v34;
  swift_unknownObjectRetain();
  ConversationMessageDispatchingBridgeBase.init(_:_:_:_:_:)(v32, v33, v40, v29, v39, (uint64_t)v12);
  swift_retain();
  ConversationRequestAwareBridgeBase.registerMessages()();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v27, v28);
  __swift_destroy_boxed_opaque_existential_1Tm(v26);
  __swift_destroy_boxed_opaque_existential_1Tm(v25);
  return v8;
}

{
  void *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(void *, void *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t (*(*)())(uint64_t), void, uint64_t);
  uint64_t started;
  void (*v31)(uint64_t (*(*)())(uint64_t), void, uint64_t);
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  long long v40[2];
  long long v41[2];

  uint64_t v38 = a3;
  uint64_t v39 = a7;
  uint64_t v36 = a4;
  uint64_t v37 = a5;
  uint64_t v34 = a1;
  uint64_t v35 = a2;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTimeInterval?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (uint64_t *)((char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = type metadata accessor for DispatchTimeInterval();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (uint64_t *)((char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(void *)((char *)v7 + direct field offset for ConversationRequestAwareBridgeBase.currentRequestProcessor) = 0;
  *(void *)((char *)v7 + direct field offset for ConversationRequestAwareBridgeBase.candidateRequestProcessors) = MEMORY[0x1E4FBC868];
  uint64_t v20 = direct field offset for ConversationRequestAwareBridgeBase.requestMessagesHandledByBridgeBase;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<[RequestMessageBase.Type], os_unfair_lock_s>);
  uint64_t v21 = swift_allocObject();
  *(_DWORD *)(v21 + 24) = 0;
  *(void *)(v21 + 16) = MEMORY[0x1E4FBC860];
  *(void *)((char *)v7 + v20) = v21;
  uint64_t v22 = direct field offset for ConversationRequestAwareBridgeBase.hasRegisteredToAnyStartRequest;
  *((unsigned char *)v7 + direct field offset for ConversationRequestAwareBridgeBase.hasRegisteredToAnyStartRequest) = 0;
  *((unsigned char *)v7 + direct field offset for ConversationRequestAwareBridgeBase.hasAutoRegisteredStartRequestMessageBase) = a6;
  *((unsigned char *)v7 + v22) = a6;
  swift_retain();
  static ConversationRequestAwareBridgeBase.readPreviousProcessorTimeoutFromDefault()(v15);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    *uint64_t v19 = 500;
    (*(void (**)(void *, void, uint64_t))(v17 + 104))(v19, *MEMORY[0x1E4FBCAC8], v16);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v15, &demangling cache variable for type metadata for DispatchTimeInterval?);
    (*(void (**)(uint64_t, void *, uint64_t))(v17 + 32))((uint64_t)v7 + direct field offset for ConversationRequestAwareBridgeBase.previousProcessorTimeout, v19, v16);
  }
  else
  {
    uint64_t v23 = *(void (**)(void *, void *, uint64_t))(v17 + 32);
    v23(v19, v15, v16);
    v23((void *)((char *)v7 + direct field offset for ConversationRequestAwareBridgeBase.previousProcessorTimeout), v19, v16);
  }
  swift_release();
  uint64_t v24 = v38;
  outlined init with copy of ReferenceResolutionClientProtocol(v38, (uint64_t)v41);
  uint64_t v25 = v37;
  outlined init with copy of ReferenceResolutionClientProtocol(v37, (uint64_t)v40);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v39, v9);
  uint64_t v26 = v36;
  swift_unknownObjectRetain();
  uint64_t v27 = MEMORY[0x1E4FBC860];
  v7[15] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  v7[16] = specialized Dictionary.init(dictionaryLiteral:)(v27);
  v7[17] = specialized Dictionary.init(dictionaryLiteral:)(v27);
  uint64_t v28 = v35;
  v7[2] = v34;
  v7[3] = v28;
  outlined init with take of ReferenceResolutionClientProtocol(v41, (uint64_t)(v7 + 4));
  v7[9] = v26;
  outlined init with take of ReferenceResolutionClientProtocol(v40, (uint64_t)(v7 + 10));
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))((uint64_t)v7 + direct field offset for ConversationMessageDispatchingBridgeBase.logger, v12, v9);
  if (*((unsigned char *)v7
       + direct field offset for ConversationRequestAwareBridgeBase.hasAutoRegisteredStartRequestMessageBase) == 1)
  {
    uint64_t v29 = *(void (**)(uint64_t (*(*)())(uint64_t), void, uint64_t))(*v7 + 464);
    uint64_t started = type metadata accessor for StartRequestMessageBase();
    swift_retain();
    v29(specialized closure #1 in ConversationRequestAwareBridgeBase.registerMessages(), 0, started);
  }
  else
  {
    swift_retain();
  }
  uint64_t v31 = *(void (**)(uint64_t (*(*)())(uint64_t), void, uint64_t))(*v7 + 464);
  uint64_t v32 = type metadata accessor for EndRequestMessageBase();
  v31(specialized closure #2 in ConversationRequestAwareBridgeBase.registerMessages(), 0, v32);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v39, v9);
  __swift_destroy_boxed_opaque_existential_1Tm(v25);
  __swift_destroy_boxed_opaque_existential_1Tm(v24);
  return v7;
}

uint64_t partial apply for closure #1 in ConversationRequestAwareBridgeBase.registerMessageHandler<A>(_:)(void **a1)
{
  return closure #1 in ConversationRequestAwareBridgeBase.registerMessageHandler<A>(_:)(a1, *(void *)(v1 + 16));
}

uint64_t type metadata accessor for ConversationMessageDispatchingBridgeBase.MessageHandler()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1B9DA018C()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in ConversationRequestAwareBridgeBase.registerMessageHandler<A>(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[5];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in ConversationRequestAwareBridgeBase.registerMessageHandler<A>(_:)(a1, v4, v5, v6);
}

uint64_t partial apply for closure #1 in ConversationRequestAwareBridgeBase.handleMessage(_:)@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)result + 16);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(*(void *)result + 32);
    uint64_t result = swift_getObjectType();
    uint64_t v5 = v3 - 1;
    do
    {
      uint64_t v6 = *v4++;
      BOOL v7 = v6 == result;
    }
    while (v6 != result && v5-- != 0);
  }
  else
  {
    BOOL v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void specialized ConversationRequestAwareBridgeBase.init(_:_:_:_:_:)()
{
}

uint64_t partial apply for closure #1 in ConversationMessageDispatchingBridgeBase.messageTypesForSubscription()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 96))();
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for ConversationMessageDispatchingBridgeBase.CommandHandler()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t type metadata accessor for SABaseClientBoundCommand()
{
  unint64_t result = lazy cache variable for type metadata for SABaseClientBoundCommand;
  if (!lazy cache variable for type metadata for SABaseClientBoundCommand)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SABaseClientBoundCommand);
  }
  return result;
}

void specialized ConversationMessageDispatchingBridgeBase.MessageHandler.init()()
{
}

uint64_t sub_1B9DA0454@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 376))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9DA04A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 384);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1B9DA0504()
{
  return 16;
}

__n128 sub_1B9DA0510(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1B9DA051C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 400))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9DA0570(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 408);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B9DA05CC()
{
  return 16;
}

__n128 sub_1B9DA05D8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1B9DA05E4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 152))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9DA0630(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 160);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B9DA0684()
{
  return 8;
}

void *sub_1B9DA0690(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1B9DA069C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 176))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9DA06E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 184);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B9DA073C()
{
  return 8;
}

uint64_t sub_1B9DA0748@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 200))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9DA0794(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 208);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B9DA07E8()
{
  return 8;
}

uint64_t ObjC metadata update function for ConversationRequestProcessorBase()
{
  return type metadata accessor for ConversationRequestProcessorBase();
}

uint64_t type metadata accessor for ConversationRequestProcessorBase()
{
  uint64_t result = type metadata singleton initialization cache for ConversationRequestProcessorBase;
  if (!type metadata singleton initialization cache for ConversationRequestProcessorBase) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for ConversationRequestProcessorBase()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for ConversationRequestProcessorBase(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationRequestProcessorBase);
}

uint64_t dispatch thunk of ConversationRequestProcessorBase.__allocating_init(_:_:_:_:_:_:_:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of ConversationRequestProcessorBase.handleStartRequest(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of ConversationRequestProcessorBase.handleEndRequest(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t type metadata completion function for ConversationRequestAwareBridgeBase()
{
  uint64_t result = type metadata accessor for DispatchTimeInterval();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for ConversationRequestAwareBridgeBase()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for ConversationRequestAwareBridgeBase(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationRequestAwareBridgeBase);
}

uint64_t dispatch thunk of ConversationRequestAwareBridgeBase.currentRequestProcessor.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 376))();
}

uint64_t dispatch thunk of ConversationRequestAwareBridgeBase.currentRequestProcessor.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 384))();
}

uint64_t dispatch thunk of ConversationRequestAwareBridgeBase.currentRequestProcessor.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392))();
}

uint64_t dispatch thunk of ConversationRequestAwareBridgeBase.candidateRequestProcessors.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 400))();
}

uint64_t dispatch thunk of ConversationRequestAwareBridgeBase.candidateRequestProcessors.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 408))();
}

uint64_t dispatch thunk of ConversationRequestAwareBridgeBase.candidateRequestProcessors.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 416))();
}

uint64_t dispatch thunk of ConversationRequestAwareBridgeBase.__allocating_init(withName:messagePublisher:serviceHelper:conversationSessionsManaging:autoRegisterStartRequestMessageBase:logger:)()
{
  return (*(uint64_t (**)(void))(v0 + 448))();
}

uint64_t dispatch thunk of ConversationRequestAwareBridgeBase.registerMessageHandler<A>(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 464))();
}

uint64_t dispatch thunk of ConversationRequestAwareBridgeBase.createRequestProcessor(_:_:_:_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 472))();
}

uint64_t dispatch thunk of ConversationRequestAwareBridgeBase.tryToDipatchCommandToProcessor<A>(_:executionContextInfo:reply:handler:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 480))();
}

uint64_t dispatch thunk of ConversationRequestAwareBridgeBase.dispatchCommandToProcessor<A>(_:executionContextInfo:reply:handler:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 488))();
}

uint64_t dispatch thunk of ConversationRequestAwareBridgeBase.postMessage(_:to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 496))();
}

uint64_t type metadata completion function for ConversationMessageDispatchingBridgeBase()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for ConversationMessageDispatchingBridgeBase()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for ConversationMessageDispatchingBridgeBase(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationMessageDispatchingBridgeBase);
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.methodDispatcher.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.methodDispatcher.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.methodDispatcher.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.registeredMethod.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.registeredMethod.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.registeredMethod.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.commandsDispatcher.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.commandsDispatcher.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.commandsDispatcher.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.__allocating_init(_:_:_:_:_:)()
{
  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.messageTypesForSubscription()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.aceCommandsGroups()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.aceCommands(forGroup:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.handleMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.getHandleMethod(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.handle(_:executionContextInfo:reply:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.registerMessageHandler<A>(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.registerCommandHandler<A>(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.defaultHandle(_:executionContextInfo:reply:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t method lookup function for ConversationMessageDispatchingBridgeBase.MessageHandlerBase(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationMessageDispatchingBridgeBase.MessageHandlerBase);
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.MessageHandlerBase.handleMethod(_:_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.MessageHandlerBase.getMessageType()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.MessageHandlerBase.isBase()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.MessageHandlerBase.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t type metadata completion function for ConversationMessageDispatchingBridgeBase.MessageHandler()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for ConversationMessageDispatchingBridgeBase.MessageHandler(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationMessageDispatchingBridgeBase.MessageHandler);
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.MessageHandler.__allocating_init(_:_:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t type metadata completion function for ConversationMessageDispatchingBridgeBase.MessageHandlerBase()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for ConversationMessageDispatchingBridgeBase.CommandHandlerBase(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationMessageDispatchingBridgeBase.CommandHandlerBase);
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.CommandHandlerBase.handle(_:_:executionContextInfo:reply:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.CommandHandlerBase.commandType()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.CommandHandlerBase.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t type metadata completion function for ConversationMessageDispatchingBridgeBase.CommandHandler()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for ConversationMessageDispatchingBridgeBase.CommandHandler(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationMessageDispatchingBridgeBase.CommandHandler);
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.CommandHandler.__allocating_init(_:_:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of StartRequestMessageForConversation.optionalRequestContextData.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of StartRequestMessageForConversation.rootRequestId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of StartRequestMessageForConversation.inputOrigin.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t sub_1B9DA1348()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t (*partial apply for closure #2 in ConversationRequestAwareBridgeBase.registerMessages()(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v1 + 16);
  *(void *)(v3 + 32) = a1;
  swift_retain();
  return partial apply for closure #1 in closure #2 in ConversationRequestAwareBridgeBase.registerMessages();
}

uint64_t sub_1B9DA13C8()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t (*partial apply for closure #1 in ConversationRequestAwareBridgeBase.registerMessages()(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v1 + 16);
  *(void *)(v3 + 32) = a1;
  swift_retain();
  return partial apply for closure #1 in closure #1 in ConversationRequestAwareBridgeBase.registerMessages();
}

uint64_t sub_1B9DA1448()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #1 in closure #1 in ConversationRequestAwareBridgeBase.registerMessages()(uint64_t a1)
{
  return closure #1 in closure #1 in ConversationRequestAwareBridgeBase.registerMessages()(a1, v1[4], v1[2], v1[3]);
}

uint64_t partial apply for closure #1 in closure #2 in ConversationRequestAwareBridgeBase.registerMessages()(uint64_t a1)
{
  return closure #1 in closure #2 in ConversationRequestAwareBridgeBase.registerMessages()(a1, v1[4], v1[2], v1[3]);
}

uint64_t outlined init with copy of Mirror?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void closure #1 in closure #1 in CachedPluginCatalog.init(capabilityCache:packageCache:sharedFlowPluginServiceClient:)(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v8 = *a1;
  unint64_t v7 = a1[1];
  uint64_t v9 = *a2;
  if (!*(void *)(*a2 + 16))
  {
LABEL_7:
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain_n();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(void *)&v37[0] = v25;
      *(_DWORD *)uint64_t v24 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, (uint64_t *)v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v22, v23, "Warning: No bundle ID found for %s when reading plugin catalog from cache", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v25, -1, -1);
      uint64_t v26 = v24;
LABEL_11:
      MEMORY[0x1BA9E48C0](v26, -1, -1);

LABEL_13:
      uint64_t v20 = 0;
      goto LABEL_14;
    }
LABEL_12:

    swift_bridgeObjectRelease_n();
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
  if ((v14 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  uint64_t v15 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v13);
  uint64_t v16 = (void *)v15[1];
  uint64_t v36 = *v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = *a3;
  if (!*(void *)(*a3 + 16)) {
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v36, (uint64_t)v16);
  if ((v19 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_16:
    uint64_t v27 = *a4;
    if (*(void *)(*a4 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
      if (v29)
      {
        uint64_t v30 = *(void *)(*(void *)(v27 + 56) + 8 * v28);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        type metadata accessor for RemoteFlowPluginPackage();
        memset(v37, 0, sizeof(v37));
        uint64_t v38 = 0;
        swift_allocObject();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        uint64_t v20 = RemoteFlowPluginPackage.init(bundleId:bundlePath:supportedTopics:sharedFlowPluginServiceClient:overrideAffinityScorer:)(v36, v16, v8, v7, v30, a5, (uint64_t)v37);
        swift_retain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&v37[0] = *a3;
        *a3 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v20, v36, (uint64_t)v16, isUniquelyReferenced_nonNull_native);
        *a3 = *(void *)&v37[0];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
      swift_bridgeObjectRelease();
    }
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      *(void *)&v37[0] = v35;
      *(_DWORD *)uint64_t v34 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, (unint64_t)v16, (uint64_t *)v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v22, v33, "Warning: No intent topics supported by %s when reading plugin catalog from cache", v34, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v35, -1, -1);
      uint64_t v26 = v34;
      goto LABEL_11;
    }
    goto LABEL_12;
  }
  uint64_t v20 = *(void **)(*(void *)(v17 + 56) + 8 * v18);
  swift_retain();
  swift_bridgeObjectRelease_n();
LABEL_14:
  *a6 = v20;
}

uint64_t CachedPluginCatalog.findRemoteFlowPlugins(intentTopic:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a1), (v2 & 1) != 0)) {
    return swift_bridgeObjectRetain();
  }
  else {
    return MEMORY[0x1E4FBC860];
  }
}

void *CachedPluginCatalog.getConversationHandler(id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized CachedPluginCatalog.getConversationHandler(id:)(a1, a2, a4);
}

uint64_t CachedPluginCatalog.pluginCount.getter(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t CachedPluginCatalog.intentTopicCount.getter(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t CachedPluginCatalog.sharedFlowPluginServiceClientKey.unsafeMutableAddressor()
{
  return CachedPluginCatalog.sharedFlowPluginServiceClientKey.unsafeMutableAddressor(&one-time initialization token for sharedFlowPluginServiceClientKey, (uint64_t)static CachedPluginCatalog.sharedFlowPluginServiceClientKey);
}

uint64_t CachedPluginCatalog.ignoreOSVersionKey.unsafeMutableAddressor()
{
  return CachedPluginCatalog.sharedFlowPluginServiceClientKey.unsafeMutableAddressor(&one-time initialization token for ignoreOSVersionKey, (uint64_t)static CachedPluginCatalog.ignoreOSVersionKey);
}

uint64_t CachedPluginCatalog.sharedFlowPluginServiceClientKey.unsafeMutableAddressor(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for CodingUserInfoKey();

  return __swift_project_value_buffer(v3, a2);
}

uint64_t one-time initialization function for sharedFlowPluginServiceClientKey(uint64_t a1)
{
  return one-time initialization function for sharedFlowPluginServiceClientKey(a1, static CachedPluginCatalog.sharedFlowPluginServiceClientKey);
}

uint64_t static CachedPluginCatalog.sharedFlowPluginServiceClientKey.getter@<X0>(uint64_t a1@<X8>)
{
  return static CachedPluginCatalog.sharedFlowPluginServiceClientKey.getter(&one-time initialization token for sharedFlowPluginServiceClientKey, (uint64_t)static CachedPluginCatalog.sharedFlowPluginServiceClientKey, a1);
}

uint64_t one-time initialization function for ignoreOSVersionKey(uint64_t a1)
{
  return one-time initialization function for sharedFlowPluginServiceClientKey(a1, static CachedPluginCatalog.ignoreOSVersionKey);
}

uint64_t one-time initialization function for sharedFlowPluginServiceClientKey(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodingUserInfoKey?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CodingUserInfoKey();
  __swift_allocate_value_buffer(v6, a2);
  uint64_t v7 = __swift_project_value_buffer(v6, (uint64_t)a2);
  CodingUserInfoKey.init(rawValue:)();
  uint64_t v8 = *(void *)(v6 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v7, v5, v6);
  }
  __break(1u);
  return result;
}

uint64_t static CachedPluginCatalog.ignoreOSVersionKey.getter@<X0>(uint64_t a1@<X8>)
{
  return static CachedPluginCatalog.sharedFlowPluginServiceClientKey.getter(&one-time initialization token for ignoreOSVersionKey, (uint64_t)static CachedPluginCatalog.ignoreOSVersionKey, a1);
}

uint64_t static CachedPluginCatalog.sharedFlowPluginServiceClientKey.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for CodingUserInfoKey();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

SiriKitRuntime::CachedPluginCatalog::CodingKeys_optional __swiftcall CachedPluginCatalog.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  object = stringValue._object;
  v2._uint64_t countAndFlagsBits = stringValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of CachedPluginCatalog.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return (SiriKitRuntime::CachedPluginCatalog::CodingKeys_optional)3;
  }
  else {
    return (SiriKitRuntime::CachedPluginCatalog::CodingKeys_optional)v3;
  }
}

SiriKitRuntime::CachedPluginCatalog::CodingKeys_optional __swiftcall CachedPluginCatalog.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (SiriKitRuntime::CachedPluginCatalog::CodingKeys_optional)3;
}

uint64_t CachedPluginCatalog.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t CachedPluginCatalog.CodingKeys.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x6F6973726556736FLL;
  }
  if (a1 == 1) {
    return 0x696C696261706163;
  }
  return 0x736567616B636170;
}

uint64_t CachedPluginCatalog.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 0x6F6973726556736FLL;
  }
  if (a1 == 1) {
    return 0x696C696261706163;
  }
  return 0x736567616B636170;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CachedPluginCatalog.CodingKeys(unsigned char *a1, unsigned char *a2)
{
  int v2 = *a1;
  uint64_t v3 = 0x696C696261706163;
  unint64_t v4 = 0xEC00000073656974;
  if (v2 != 1)
  {
    uint64_t v3 = 0x736567616B636170;
    unint64_t v4 = 0xE800000000000000;
  }
  if (*a1) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = 0x6F6973726556736FLL;
  }
  if (v2) {
    unint64_t v6 = v4;
  }
  else {
    unint64_t v6 = 0xE90000000000006ELL;
  }
  uint64_t v7 = 0x696C696261706163;
  unint64_t v8 = 0xEC00000073656974;
  if (*a2 != 1)
  {
    uint64_t v7 = 0x736567616B636170;
    unint64_t v8 = 0xE800000000000000;
  }
  if (*a2) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = 0x6F6973726556736FLL;
  }
  if (*a2) {
    unint64_t v10 = v8;
  }
  else {
    unint64_t v10 = 0xE90000000000006ELL;
  }
  if (v5 == v9 && v6 == v10) {
    char v11 = 1;
  }
  else {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CachedPluginCatalog.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CachedPluginCatalog.CodingKeys()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CachedPluginCatalog.CodingKeys()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CachedPluginCatalog.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized CachedPluginCatalog.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CachedPluginCatalog.CodingKeys(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE90000000000006ELL;
  unint64_t v4 = 0xEC00000073656974;
  uint64_t v5 = 0x696C696261706163;
  if (v2 != 1)
  {
    uint64_t v5 = 0x736567616B636170;
    unint64_t v4 = 0xE800000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x6F6973726556736FLL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CachedPluginCatalog.CodingKeys()
{
  uint64_t v1 = 0x696C696261706163;
  if (*v0 != 1) {
    uint64_t v1 = 0x736567616B636170;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6F6973726556736FLL;
  }
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance CachedPluginCatalog.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized CachedPluginCatalog.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance CachedPluginCatalog.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance CachedPluginCatalog.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CachedPluginCatalog.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CachedPluginCatalog.CodingKeys and conformance CachedPluginCatalog.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CachedPluginCatalog.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CachedPluginCatalog.CodingKeys and conformance CachedPluginCatalog.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

NSObject *CachedPluginCatalog.init(from:)(void *a1)
{
  return specialized CachedPluginCatalog.init(from:)(a1);
}

NSObject *protocol witness for Decodable.init(from:) in conformance CachedPluginCatalog@<X0>(void *a1@<X0>, NSObject **a2@<X8>)
{
  unint64_t result = specialized CachedPluginCatalog.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t protocol witness for PluginLookupByIntentTopic.findRemoteFlowPlugins(intentTopic:) in conformance CachedPluginCatalog(uint64_t a1)
{
  if (*(void *)(*(void *)v1 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a1), (v2 & 1) != 0)) {
    return swift_bridgeObjectRetain();
  }
  else {
    return MEMORY[0x1E4FBC860];
  }
}

void *protocol witness for PluginLookupByIntentTopic.getConversationHandler(id:) in conformance CachedPluginCatalog(uint64_t a1, uint64_t a2)
{
  return specialized CachedPluginCatalog.getConversationHandler(id:)(a1, a2, *(void *)(v2 + 8));
}

uint64_t PluginCapabilityCatalog<>.getConversationHandler(id:)()
{
  uint64_t result = dispatch thunk of PluginCatalog.getPlugin(id:)();
  if (result)
  {
    type metadata accessor for RemoteFlowPluginBundleConversationHandler();
    uint64_t result = swift_dynamicCastClass();
    if (!result)
    {
      swift_unknownObjectRelease();
      return 0;
    }
  }
  return result;
}

uint64_t protocol witness for PluginLookupByIntentTopic.findRemoteFlowPlugins(intentTopic:) in conformance <> PluginCapabilityCatalog<A>()
{
  return dispatch thunk of PluginCapabilityCatalog.getPackages(capability:)();
}

uint64_t protocol witness for PluginLookupByIntentTopic.getConversationHandler(id:) in conformance <> PluginCapabilityCatalog<A>()
{
  uint64_t result = dispatch thunk of PluginCatalog.getPlugin(id:)();
  if (result)
  {
    type metadata accessor for RemoteFlowPluginBundleConversationHandler();
    uint64_t result = swift_dynamicCastClass();
    if (!result)
    {
      swift_unknownObjectRelease();
      return 0;
    }
  }
  return result;
}

uint64_t specialized static CachedPluginCatalog.load(cacheUrl:sharedFlowPluginServiceClient:ignoreOSVersion:)(uint64_t a1, uint64_t a2, int a3)
{
  int v36 = a3;
  uint64_t v37 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v37 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v37);
  uint64_t v35 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v35 - v8;
  uint64_t v10 = type metadata accessor for CodingUserInfoKey();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  unint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = objc_msgSend(self, sel_defaultManager);
  uint64_t v15 = URL.path.getter();
  uint64_t v16 = (void *)MEMORY[0x1BA9E2DD0](v15);
  swift_bridgeObjectRelease();
  unsigned int v17 = objc_msgSend(v14, sel_fileExistsAtPath_, v16);

  if (v17)
  {
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    if (one-time initialization token for sharedFlowPluginServiceClientKey != -1) {
      swift_once();
    }
    uint64_t v18 = __swift_project_value_buffer(v10, (uint64_t)static CachedPluginCatalog.sharedFlowPluginServiceClientKey);
    char v19 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    v19(v13, v18, v10);
    uint64_t v40 = type metadata accessor for SharedFlowPluginServiceClient();
    uint64_t v39 = a2;
    swift_retain();
    uint64_t v20 = (void (*)(void *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
    specialized Dictionary.subscript.setter((uint64_t)&v39, (uint64_t)v13);
    v20(v38, 0);
    if (v36)
    {
      if (one-time initialization token for ignoreOSVersionKey != -1) {
        swift_once();
      }
      uint64_t v21 = __swift_project_value_buffer(v10, (uint64_t)static CachedPluginCatalog.ignoreOSVersionKey);
      v19(v13, v21, v10);
      uint64_t v40 = MEMORY[0x1E4FBB390];
      LOBYTE(v39) = 1;
      uint64_t v22 = (void (*)(void *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
      specialized Dictionary.subscript.setter((uint64_t)&v39, (uint64_t)v13);
      v22(v38, 0);
    }
    uint64_t v31 = Data.init(contentsOf:options:)();
    unint64_t v33 = v32;
    lazy protocol witness table accessor for type CachedPluginCatalog and conformance CachedPluginCatalog();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    outlined consume of Data._Representation(v31, v33);
    swift_release();
    return v39;
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.executor);
    uint64_t v24 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v9, a1, v37);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      uint64_t v39 = v28;
      *(_DWORD *)uint64_t v27 = 136315138;
      uint64_t v29 = URL.path.getter();
      v38[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v24);
      _os_log_impl(&dword_1B9C64000, v25, v26, "CachedPluginCatalog: No cache file exists at %s", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v28, -1, -1);
      MEMORY[0x1BA9E48C0](v27, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v24);
    }

    return 0;
  }
}

uint64_t specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v64 = a4;
  uint64_t v11 = type metadata accessor for IntentTopic();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v52 = (char *)&v47 - v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<IntentTopic, [RemoteFlowPluginPackage]>);
  uint64_t v17 = static _DictionaryStorage.copy(original:)();
  int64_t v18 = 0;
  uint64_t v54 = v12;
  uint64_t v55 = a1;
  uint64_t v19 = a1;
  uint64_t v20 = v17;
  uint64_t v21 = *(void *)(v19 + 64);
  uint64_t v47 = v11;
  uint64_t v48 = v19 + 64;
  uint64_t v22 = 1 << *(unsigned char *)(v19 + 32);
  uint64_t v23 = -1;
  if (v22 < 64) {
    uint64_t v23 = ~(-1 << v22);
  }
  unint64_t v24 = v23 & v21;
  uint64_t v51 = v12 + 16;
  uint64_t v63 = v12 + 32;
  int64_t v49 = (unint64_t)(v22 + 63) >> 6;
  uint64_t v50 = v17 + 64;
  uint64_t v53 = v17;
  uint64_t v57 = v15;
  if (!v24) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v58 = (v24 - 1) & v24;
  int64_t v59 = v18;
  for (unint64_t i = __clz(__rbit64(v24)) | (v18 << 6); ; unint64_t i = __clz(__rbit64(v28)) + (v27 << 6))
  {
    uint64_t v31 = v54;
    uint64_t v30 = v55;
    uint64_t v32 = *(void *)(v55 + 48);
    unint64_t v61 = *(void *)(v54 + 72) * i;
    unint64_t v33 = v52;
    (*(void (**)(char *, unint64_t, uint64_t))(v54 + 16))(v52, v32 + v61, v11);
    uint64_t v34 = *(void *)(v30 + 56);
    unint64_t v62 = i;
    uint64_t v35 = *(void (**)(unint64_t, char *, uint64_t))(v31 + 32);
    uint64_t v36 = *(void *)(v34 + 8 * i);
    uint64_t v37 = v57;
    uint64_t v60 = v35;
    v35((unint64_t)v57, v33, v11);
    uint64_t v38 = MEMORY[0x1E4FBC860];
    uint64_t v67 = MEMORY[0x1E4FBC860];
    uint64_t v39 = *(void *)(v36 + 16);
    if (v39) {
      break;
    }
    swift_bridgeObjectRetain();
    swift_retain();
LABEL_26:
    swift_bridgeObjectRelease();
    swift_release();
    unint64_t v43 = v62;
    *(void *)(v50 + ((v62 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v62;
    uint64_t v20 = v53;
    v60(*(void *)(v53 + 48) + v61, v37, v11);
    *(void *)(*(void *)(v20 + 56) + 8 * v43) = v38;
    uint64_t v44 = *(void *)(v20 + 16);
    BOOL v26 = __OFADD__(v44, 1);
    uint64_t v45 = v44 + 1;
    if (v26)
    {
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    *(void *)(v20 + 16) = v45;
    unint64_t v24 = v58;
    int64_t v18 = v59;
    if (v58) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v26 = __OFADD__(v18, 1);
    int64_t v27 = v18 + 1;
    if (v26) {
      goto LABEL_35;
    }
    if (v27 >= v49) {
      return v20;
    }
    unint64_t v28 = *(void *)(v48 + 8 * v27);
    if (!v28)
    {
      int64_t v29 = v27 + 1;
      if (v27 + 1 >= v49) {
        return v20;
      }
      unint64_t v28 = *(void *)(v48 + 8 * v29);
      if (!v28)
      {
        int64_t v29 = v27 + 2;
        if (v27 + 2 >= v49) {
          return v20;
        }
        unint64_t v28 = *(void *)(v48 + 8 * v29);
        if (!v28)
        {
          int64_t v29 = v27 + 3;
          if (v27 + 3 >= v49) {
            return v20;
          }
          unint64_t v28 = *(void *)(v48 + 8 * v29);
          if (!v28)
          {
            while (1)
            {
              int64_t v27 = v29 + 1;
              if (__OFADD__(v29, 1)) {
                goto LABEL_36;
              }
              if (v27 >= v49) {
                return v20;
              }
              unint64_t v28 = *(void *)(v48 + 8 * v27);
              ++v29;
              if (v28) {
                goto LABEL_15;
              }
            }
          }
        }
      }
      int64_t v27 = v29;
    }
LABEL_15:
    uint64_t v58 = (v28 - 1) & v28;
    int64_t v59 = v27;
  }
  swift_bridgeObjectRetain_n();
  swift_retain();
  uint64_t v56 = v36;
  uint64_t v40 = (uint64_t *)(v36 + 40);
  while (1)
  {
    uint64_t v41 = *v40;
    v66[0] = *(v40 - 1);
    v66[1] = v41;
    swift_bridgeObjectRetain();
    closure #1 in closure #1 in CachedPluginCatalog.init(capabilityCache:packageCache:sharedFlowPluginServiceClient:)(v66, a2, a3, v64, a5, &v65);
    if (v6) {
      break;
    }
    uint64_t v6 = 0;
    uint64_t v42 = swift_bridgeObjectRelease();
    if (v65)
    {
      MEMORY[0x1BA9E3030](v42);
      if (*(void *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    v40 += 2;
    if (!--v39)
    {
      swift_bridgeObjectRelease();
      uint64_t v38 = v67;
      uint64_t v11 = v47;
      uint64_t v37 = v57;
      goto LABEL_26;
    }
  }
LABEL_37:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t specialized CachedPluginCatalog.init(capabilityCache:packageCache:sharedFlowPluginServiceClient:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v97 = a3;
  uint64_t v5 = type metadata accessor for IntentTopic();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  int64_t v112 = (char *)&v96 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: IntentTopic, value: [String])?);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v103 = (char *)&v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v102 = (uint64_t)&v96 - v14;
  type metadata accessor for RemoteFlowPluginPackage();
  uint64_t v117 = Dictionary.init(minimumCapacity:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [IntentTopic]);
  uint64_t v116 = (void *)Dictionary.init(minimumCapacity:)();
  uint64_t v105 = a2;
  uint64_t v115 = (void *)Dictionary.init(minimumCapacity:)();
  uint64_t v15 = *(void *)(a1 + 64);
  uint64_t v98 = a1 + 64;
  uint64_t v16 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  uint64_t v108 = (void (**)(char *, char *, uint64_t))(v6 + 16);
  uint64_t v109 = v6;
  uint64_t v111 = (void (**)(char *, uint64_t, uint64_t))(v6 + 32);
  uint64_t v101 = (void (**)(char *, uint64_t))(v6 + 8);
  int64_t v99 = (unint64_t)(v16 + 63) >> 6;
  int64_t v96 = v99 - 1;
  uint64_t v100 = a1;
  swift_bridgeObjectRetain();
  int64_t v104 = 0;
  while (1)
  {
    uint64_t v19 = (uint64_t)v103;
    if (v18)
    {
      uint64_t v106 = (v18 - 1) & v18;
      unint64_t v20 = __clz(__rbit64(v18)) | (v104 << 6);
LABEL_7:
      uint64_t v21 = v100;
      (*(void (**)(char *, unint64_t, uint64_t))(v109 + 16))(v103, *(void *)(v100 + 48) + *(void *)(v109 + 72) * v20, v5);
      uint64_t v22 = *(void *)(v21 + 56);
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: IntentTopic, value: [String]));
      *(void *)(v19 + *(int *)(v23 + 48)) = *(void *)(v22 + 8 * v20);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v19, 0, 1, v23);
      swift_bridgeObjectRetain();
      goto LABEL_26;
    }
    int64_t v24 = v104 + 1;
    if (__OFADD__(v104, 1)) {
      goto LABEL_89;
    }
    if (v24 < v99)
    {
      unint64_t v25 = *(void *)(v98 + 8 * v24);
      if (v25) {
        goto LABEL_11;
      }
      int64_t v26 = v104 + 2;
      ++v104;
      if (v24 + 1 < v99)
      {
        unint64_t v25 = *(void *)(v98 + 8 * v26);
        if (v25) {
          goto LABEL_14;
        }
        int64_t v104 = v24 + 1;
        if (v24 + 2 < v99)
        {
          unint64_t v25 = *(void *)(v98 + 8 * (v24 + 2));
          if (v25)
          {
            v24 += 2;
            goto LABEL_11;
          }
          int64_t v26 = v24 + 3;
          int64_t v104 = v24 + 2;
          if (v24 + 3 < v99)
          {
            unint64_t v25 = *(void *)(v98 + 8 * v26);
            if (v25)
            {
LABEL_14:
              int64_t v24 = v26;
LABEL_11:
              uint64_t v106 = (v25 - 1) & v25;
              unint64_t v20 = __clz(__rbit64(v25)) + (v24 << 6);
              int64_t v104 = v24;
              goto LABEL_7;
            }
            while (1)
            {
              int64_t v24 = v26 + 1;
              if (__OFADD__(v26, 1)) {
                goto LABEL_91;
              }
              if (v24 >= v99) {
                break;
              }
              unint64_t v25 = *(void *)(v98 + 8 * v24);
              ++v26;
              if (v25) {
                goto LABEL_11;
              }
            }
            int64_t v104 = v96;
          }
        }
      }
    }
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: IntentTopic, value: [String]));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v19, 1, 1, v27);
    uint64_t v106 = 0;
LABEL_26:
    uint64_t v28 = v102;
    outlined init with take of (key: IntentTopic, value: [String])?(v19, v102);
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: IntentTopic, value: [String]));
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48))(v28, 1, v29) == 1)
    {
      swift_release();
      int64_t v61 = 0;
      uint64_t v62 = *(void *)(v105 + 64);
      int64_t v112 = (char *)(v105 + 64);
      uint64_t v63 = 1 << *(unsigned char *)(v105 + 32);
      uint64_t v64 = -1;
      if (v63 < 64) {
        uint64_t v64 = ~(-1 << v63);
      }
      unint64_t v65 = v64 & v62;
      uint64_t v66 = v115;
      int64_t v113 = (unint64_t)(v63 + 63) >> 6;
      while (1)
      {
        if (v65)
        {
          unint64_t v68 = __clz(__rbit64(v65));
          v65 &= v65 - 1;
          unint64_t v69 = v68 | (v61 << 6);
        }
        else
        {
          int64_t v70 = v61 + 1;
          if (__OFADD__(v61, 1)) {
            goto LABEL_88;
          }
          if (v70 >= v113) {
            goto LABEL_83;
          }
          unint64_t v71 = *(void *)&v112[8 * v70];
          ++v61;
          if (!v71)
          {
            int64_t v61 = v70 + 1;
            if (v70 + 1 >= v113) {
              goto LABEL_83;
            }
            unint64_t v71 = *(void *)&v112[8 * v61];
            if (!v71)
            {
              int64_t v61 = v70 + 2;
              if (v70 + 2 >= v113) {
                goto LABEL_83;
              }
              unint64_t v71 = *(void *)&v112[8 * v61];
              if (!v71)
              {
                int64_t v72 = v70 + 3;
                if (v72 >= v113) {
                  goto LABEL_83;
                }
                unint64_t v71 = *(void *)&v112[8 * v72];
                if (!v71)
                {
                  while (1)
                  {
                    int64_t v61 = v72 + 1;
                    if (__OFADD__(v72, 1)) {
                      goto LABEL_90;
                    }
                    if (v61 >= v113) {
                      break;
                    }
                    unint64_t v71 = *(void *)&v112[8 * v61];
                    ++v72;
                    if (v71) {
                      goto LABEL_71;
                    }
                  }
LABEL_83:
                  uint64_t v115 = v66;
                  swift_release();
                  uint64_t v93 = v97;
                  swift_retain();
                  uint64_t v94 = specialized _NativeDictionary.mapValues<A>(_:)(v100, (uint64_t *)&v115, &v117, (uint64_t *)&v116, v93);
                  swift_bridgeObjectRelease();
                  swift_release_n();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  return v94;
                }
                int64_t v61 = v72;
              }
            }
          }
LABEL_71:
          unint64_t v65 = (v71 - 1) & v71;
          unint64_t v69 = __clz(__rbit64(v71)) + (v61 << 6);
        }
        uint64_t v73 = 16 * v69;
        uint64_t v74 = (uint64_t *)(*(void *)(v105 + 48) + v73);
        uint64_t v76 = *v74;
        uint64_t v75 = v74[1];
        unint64_t v77 = (uint64_t *)(*(void *)(v105 + 56) + v73);
        uint64_t v79 = *v77;
        uint64_t v78 = v77[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v114 = v66;
        unint64_t v82 = specialized __RawDictionaryStorage.find<A>(_:)(v79, v78);
        uint64_t v83 = v66[2];
        BOOL v84 = (v81 & 1) == 0;
        uint64_t v85 = v83 + v84;
        if (__OFADD__(v83, v84)) {
          goto LABEL_86;
        }
        char v86 = v81;
        if (v66[3] >= v85)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            uint64_t v66 = v114;
            if (v81) {
              goto LABEL_54;
            }
          }
          else
          {
            specialized _NativeDictionary.copy()();
            uint64_t v66 = v114;
            if (v86) {
              goto LABEL_54;
            }
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v85, isUniquelyReferenced_nonNull_native);
          unint64_t v87 = specialized __RawDictionaryStorage.find<A>(_:)(v79, v78);
          if ((v86 & 1) != (v88 & 1)) {
            goto LABEL_92;
          }
          unint64_t v82 = v87;
          uint64_t v66 = v114;
          if (v86)
          {
LABEL_54:
            uint64_t v67 = (void *)(v66[7] + 16 * v82);
            swift_bridgeObjectRelease();
            *uint64_t v67 = v76;
            v67[1] = v75;
            goto LABEL_55;
          }
        }
        v66[(v82 >> 6) + 8] |= 1 << v82;
        uint64_t v89 = (uint64_t *)(v66[6] + 16 * v82);
        *uint64_t v89 = v79;
        v89[1] = v78;
        uint64_t v90 = (void *)(v66[7] + 16 * v82);
        *uint64_t v90 = v76;
        v90[1] = v75;
        uint64_t v91 = v66[2];
        BOOL v59 = __OFADD__(v91, 1);
        uint64_t v92 = v91 + 1;
        if (v59) {
          goto LABEL_87;
        }
        v66[2] = v92;
        swift_bridgeObjectRetain();
LABEL_55:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    uint64_t v30 = *(void *)(v28 + *(int *)(v29 + 48));
    uint64_t v110 = *v111;
    v110(v112, v28, v5);
    uint64_t v107 = v30;
    int64_t v31 = *(void *)(v30 + 16);
    if (v31) {
      break;
    }
LABEL_4:
    swift_bridgeObjectRelease();
    (*v101)(v112, v5);
    unint64_t v18 = v106;
  }
  uint64_t v32 = (uint64_t *)(v107 + 40);
  while (1)
  {
    int64_t v113 = v31;
    uint64_t v35 = *(v32 - 1);
    uint64_t v34 = *v32;
    uint64_t v36 = (uint64_t)v116;
    uint64_t v37 = v116[2];
    swift_bridgeObjectRetain();
    if (v37)
    {
      swift_bridgeObjectRetain();
      unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v34);
      unint64_t v39 = MEMORY[0x1E4FBC860];
      if (v40)
      {
        unint64_t v39 = *(void *)(*(void *)(v36 + 56) + 8 * v38);
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v39 = MEMORY[0x1E4FBC860];
    }
    (*v108)(v9, v112, v5);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v39 + 16) + 1, 1, v39);
    }
    unint64_t v42 = *(void *)(v39 + 16);
    unint64_t v41 = *(void *)(v39 + 24);
    if (v42 >= v41 >> 1) {
      unint64_t v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v42 + 1, 1, v39);
    }
    *(void *)(v39 + 16) = v42 + 1;
    unint64_t v43 = v9;
    uint64_t v44 = v9;
    uint64_t v45 = v5;
    v110((char *)(v39+ ((*(unsigned __int8 *)(v109 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v109 + 80))+ *(void *)(v109 + 72) * v42), (uint64_t)v44, v5);
    uint64_t v46 = (uint64_t)v116;
    char v47 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v114 = (void *)v46;
    unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v34);
    uint64_t v50 = *(void *)(v46 + 16);
    BOOL v51 = (v48 & 1) == 0;
    uint64_t v52 = v50 + v51;
    if (__OFADD__(v50, v51)) {
      break;
    }
    char v53 = v48;
    if (*(void *)(v46 + 24) >= v52)
    {
      if (v47)
      {
        uint64_t v56 = v114;
        if (v48) {
          goto LABEL_29;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        uint64_t v56 = v114;
        if (v53) {
          goto LABEL_29;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v52, v47);
      unint64_t v54 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v34);
      if ((v53 & 1) != (v55 & 1)) {
        goto LABEL_92;
      }
      unint64_t v49 = v54;
      uint64_t v56 = v114;
      if (v53)
      {
LABEL_29:
        uint64_t v33 = v56[7];
        swift_bridgeObjectRelease();
        *(void *)(v33 + 8 * v49) = v39;
        goto LABEL_30;
      }
    }
    v56[(v49 >> 6) + 8] |= 1 << v49;
    uint64_t v57 = (uint64_t *)(v56[6] + 16 * v49);
    *uint64_t v57 = v35;
    v57[1] = v34;
    *(void *)(v56[7] + 8 * v49) = v39;
    uint64_t v58 = v56[2];
    BOOL v59 = __OFADD__(v58, 1);
    uint64_t v60 = v58 + 1;
    if (v59) {
      goto LABEL_85;
    }
    void v56[2] = v60;
    swift_bridgeObjectRetain();
LABEL_30:
    v32 += 2;
    uint64_t v116 = v56;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int64_t v31 = v113 - 1;
    uint64_t v5 = v45;
    uint64_t v9 = v43;
    if (v113 == 1) {
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *specialized CachedPluginCatalog.getConversationHandler(id:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  swift_bridgeObjectRetain();
  specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v5 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t v6 = RemoteFlowPluginPackage.loadRemoteConversationHandler()();
  swift_release();
  return v6;
}

unint64_t specialized CachedPluginCatalog.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of CachedPluginCatalog.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

NSObject *specialized CachedPluginCatalog.init(from:)(void *a1)
{
  uint64_t v2 = type metadata accessor for CodingUserInfoKey();
  unint64_t v66 = *(void *)(v2 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  char v5 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v59 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CachedPluginCatalog.CodingKeys>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1[3];
  unint64_t v68 = a1;
  uint64_t v13 = __swift_project_boxed_opaque_existential_1(a1, v12);
  lazy protocol witness table accessor for type CachedPluginCatalog.CodingKeys and conformance CachedPluginCatalog.CodingKeys();
  uint64_t v14 = v67;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14) {
    goto LABEL_40;
  }
  uint64_t v63 = v7;
  uint64_t v64 = v5;
  uint64_t v65 = v2;
  uint64_t v67 = v9;
  LOBYTE(v71[0]) = 0;
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
  unint64_t v17 = v16;
  uint64_t v62 = 0;
  id v18 = objc_msgSend(self, sel_processInfo);
  id v19 = objc_msgSend(v18, sel_operatingSystemVersionString);

  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v22 = v21;

  if (v15 == v20 && v17 == v22)
  {
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v68, (uint64_t)v71);
    goto LABEL_13;
  }
  char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v68, (uint64_t)v71);
  if (v24)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v71);
    goto LABEL_14;
  }
  uint64_t v60 = v20;
  uint64_t v61 = v15;
  unint64_t v25 = v22;
  __swift_project_boxed_opaque_existential_1(v71, v71[3]);
  uint64_t v26 = dispatch thunk of Decoder.userInfo.getter();
  if (one-time initialization token for ignoreOSVersionKey != -1) {
    swift_once();
  }
  uint64_t v27 = v65;
  uint64_t v28 = __swift_project_value_buffer(v65, (uint64_t)static CachedPluginCatalog.ignoreOSVersionKey);
  unint64_t v29 = v66;
  uint64_t v30 = (uint64_t)v63;
  (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v63, v28, v27);
  uint64_t v31 = v61;
  if (*(void *)(v26 + 16) && (unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v30), (v33 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v26 + 56) + 32 * v32, (uint64_t)&v69);
  }
  else
  {
    long long v69 = 0u;
    long long v70 = 0u;
  }
  uint64_t v46 = v31;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v63, v27);
  if (!*((void *)&v70 + 1))
  {
    outlined destroy of Any?((uint64_t)&v69);
    unint64_t v47 = v25;
    goto LABEL_32;
  }
  unint64_t v47 = v25;
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_32:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v71);
    goto LABEL_33;
  }
  char v48 = v72;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v71);
  if ((v48 & 1) == 0)
  {
LABEL_33:
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v49 = type metadata accessor for Logger();
    __swift_project_value_buffer(v49, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v50))
    {
      uint64_t v51 = swift_slowAlloc();
      unint64_t v66 = v47;
      uint64_t v52 = v51;
      uint64_t v65 = swift_slowAlloc();
      v71[0] = v65;
      *(_DWORD *)uint64_t v52 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)&long long v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v17, v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v52 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v53 = v60;
      *(void *)&long long v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v66, v71);
      uint64_t v46 = v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v13, v50, "Not using cached plugin information, as it is from %s and we are running %s.", (uint8_t *)v52, 0x16u);
      uint64_t v54 = v65;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v54, -1, -1);
      uint64_t v55 = v52;
      unint64_t v47 = v66;
      MEMORY[0x1BA9E48C0](v55, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      uint64_t v53 = v60;
    }
    lazy protocol witness table accessor for type CachedPluginCatalog.FlowPluginCacheError and conformance CachedPluginCatalog.FlowPluginCacheError();
    swift_allocError();
    *uint64_t v56 = v53;
    v56[1] = v47;
    void v56[2] = v46;
    void v56[3] = v17;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v67 + 8))(v11, v8);
    goto LABEL_40;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_14:
  __swift_project_boxed_opaque_existential_1(v68, v68[3]);
  uint64_t v34 = dispatch thunk of Decoder.userInfo.getter();
  if (one-time initialization token for sharedFlowPluginServiceClientKey != -1) {
    swift_once();
  }
  uint64_t v35 = v65;
  uint64_t v36 = __swift_project_value_buffer(v65, (uint64_t)static CachedPluginCatalog.sharedFlowPluginServiceClientKey);
  unint64_t v37 = v66;
  uint64_t v38 = (uint64_t)v64;
  (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v64, v36, v35);
  if (*(void *)(v34 + 16) && (unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v38), (v40 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v34 + 56) + 32 * v39, (uint64_t)&v69);
  }
  else
  {
    long long v69 = 0u;
    long long v70 = 0u;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v35);
  if (!*((void *)&v70 + 1))
  {
    outlined destroy of Any?((uint64_t)&v69);
    goto LABEL_25;
  }
  type metadata accessor for SharedFlowPluginServiceClient();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_25:
    unint64_t v43 = v67;
    lazy protocol witness table accessor for type CachedPluginCatalog.FlowPluginCacheError and conformance CachedPluginCatalog.FlowPluginCacheError();
    swift_allocError();
    _OWORD *v44 = 0u;
    v44[1] = 0u;
    swift_willThrow();
    Class isa = (void (*)(char *, uint64_t))v43[1].isa;
    uint64_t v13 = v43 + 1;
    isa(v11, v8);
    goto LABEL_40;
  }
  uint64_t v41 = v72;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [IntentTopic : [String]]);
  LOBYTE(v72) = 1;
  lazy protocol witness table accessor for type [IntentTopic : [String]] and conformance <> [A : B]();
  uint64_t v13 = v11;
  uint64_t v42 = v62;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  if (v42)
  {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v11, v8);
    swift_release();
LABEL_40:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v68);
    return v13;
  }
  uint64_t v57 = v69;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : String]);
  LOBYTE(v72) = 2;
  lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v13 = specialized CachedPluginCatalog.init(capabilityCache:packageCache:sharedFlowPluginServiceClient:)(v57, v69, v41);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v11, v8);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v68);
  return v13;
}

unint64_t lazy protocol witness table accessor for type CachedPluginCatalog.CodingKeys and conformance CachedPluginCatalog.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CachedPluginCatalog.CodingKeys and conformance CachedPluginCatalog.CodingKeys;
  if (!lazy protocol witness table cache variable for type CachedPluginCatalog.CodingKeys and conformance CachedPluginCatalog.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CachedPluginCatalog.CodingKeys and conformance CachedPluginCatalog.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CachedPluginCatalog.CodingKeys and conformance CachedPluginCatalog.CodingKeys;
  if (!lazy protocol witness table cache variable for type CachedPluginCatalog.CodingKeys and conformance CachedPluginCatalog.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CachedPluginCatalog.CodingKeys and conformance CachedPluginCatalog.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CachedPluginCatalog.CodingKeys and conformance CachedPluginCatalog.CodingKeys;
  if (!lazy protocol witness table cache variable for type CachedPluginCatalog.CodingKeys and conformance CachedPluginCatalog.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CachedPluginCatalog.CodingKeys and conformance CachedPluginCatalog.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CachedPluginCatalog.CodingKeys and conformance CachedPluginCatalog.CodingKeys;
  if (!lazy protocol witness table cache variable for type CachedPluginCatalog.CodingKeys and conformance CachedPluginCatalog.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CachedPluginCatalog.CodingKeys and conformance CachedPluginCatalog.CodingKeys);
  }
  return result;
}

uint64_t destroy for CachedPluginCatalog()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for CachedPluginCatalog(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CachedPluginCatalog(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for CachedPluginCatalog(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for CachedPluginCatalog()
{
  return &type metadata for CachedPluginCatalog;
}

unsigned char *storeEnumTagSinglePayload for CachedPluginCatalog.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9DA47C4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CachedPluginCatalog.CodingKeys()
{
  return &type metadata for CachedPluginCatalog.CodingKeys;
}

unint64_t destroy for CachedPluginCatalog.FlowPluginCacheError(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for CachedPluginCatalog.FlowPluginCacheError(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    uint64_t v4 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for CachedPluginCatalog.FlowPluginCacheError(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    long long v5 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v5;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CachedPluginCatalog.FlowPluginCacheError(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CachedPluginCatalog.FlowPluginCacheError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CachedPluginCatalog.FlowPluginCacheError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)unint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

void *destructiveInjectEnumTag for CachedPluginCatalog.FlowPluginCacheError(void *result, int a2)
{
  if (a2 < 0)
  {
    result[2] = 0;
    result[3] = 0;
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for CachedPluginCatalog.FlowPluginCacheError()
{
  return &type metadata for CachedPluginCatalog.FlowPluginCacheError;
}

uint64_t dispatch thunk of PluginLookupByIntentTopic.findRemoteFlowPlugins(intentTopic:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of PluginLookupByIntentTopic.getConversationHandler(id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

unint64_t lazy protocol witness table accessor for type CachedPluginCatalog.FlowPluginCacheError and conformance CachedPluginCatalog.FlowPluginCacheError()
{
  unint64_t result = lazy protocol witness table cache variable for type CachedPluginCatalog.FlowPluginCacheError and conformance CachedPluginCatalog.FlowPluginCacheError;
  if (!lazy protocol witness table cache variable for type CachedPluginCatalog.FlowPluginCacheError and conformance CachedPluginCatalog.FlowPluginCacheError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CachedPluginCatalog.FlowPluginCacheError and conformance CachedPluginCatalog.FlowPluginCacheError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [String] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
  }
  return result;
}

uint64_t outlined init with take of (key: IntentTopic, value: [String])?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: IntentTopic, value: [String])?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t lazy protocol witness table accessor for type IntentTopic and conformance IntentTopic(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CachedPluginCatalog and conformance CachedPluginCatalog()
{
  unint64_t result = lazy protocol witness table cache variable for type CachedPluginCatalog and conformance CachedPluginCatalog;
  if (!lazy protocol witness table cache variable for type CachedPluginCatalog and conformance CachedPluginCatalog)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CachedPluginCatalog and conformance CachedPluginCatalog);
  }
  return result;
}

SiriKitRuntime::CalendarAffinityScorer __swiftcall CalendarAffinityScorer.init()()
{
  uint64_t v0 = (void *)0x80000001BA0628B0;
  uint64_t v1 = 0xD000000000000029;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t CalendarAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  return a1;
}

uint64_t specialized CalendarAffinityScorer.score(input:environment:)()
{
  uint64_t v65 = type metadata accessor for RREntity();
  unint64_t v62 = *(void *)(v65 - 8);
  MEMORY[0x1F4188790](v65);
  uint64_t v1 = (char *)v57 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for RRCandidate();
  uint64_t v66 = *(void *)(v64 - 8);
  MEMORY[0x1F4188790](v64);
  uint64_t v3 = (char *)v57 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Parse();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for USOParse();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v5 + 88))(v7, v4) == *MEMORY[0x1E4FA1F48])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    unint64_t v12 = specialized static AffinityScorerUtils.getTask(_:)();
    if (!v12)
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v26 = type metadata accessor for Logger();
      __swift_project_value_buffer(v26, (uint64_t)static Logger.executor);
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v27, v28))
      {
        unint64_t v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v29 = 0;
        _os_log_impl(&dword_1B9C64000, v27, v28, "[CalendarAffinityScorer] Unable to extract task from uso parse, returning .default", v29, 2u);
        MEMORY[0x1BA9E48C0](v29, -1, -1);
      }

      goto LABEL_23;
    }
    unint64_t v13 = v12;
    if (UsoTask.baseEntityAsString.getter() == 0x6E456F4E5F6F7375 && v14 == 0xEC00000079746974)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v16 & 1) == 0)
      {
LABEL_8:
        if (one-time initialization token for executor != -1) {
          swift_once();
        }
        uint64_t v17 = type metadata accessor for Logger();
        __swift_project_value_buffer(v17, (uint64_t)static Logger.executor);
        id v18 = Logger.logObject.getter();
        os_log_type_t v19 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v18, v19))
        {
          uint64_t v20 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v20 = 0;
          _os_log_impl(&dword_1B9C64000, v18, v19, "[CalendarAffinityScorer] UsoTask is not a shared task, returning .default", v20, 2u);
          MEMORY[0x1BA9E48C0](v20, -1, -1);
        }

        swift_release();
LABEL_23:
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
        return 2;
      }
    }
    if (UsoTask.verbString.getter() != 0x657461647075 || v30 != 0xE600000000000000)
    {
      char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v31) {
        goto LABEL_32;
      }
      if (UsoTask.verbString.getter() != 0x6574656C6564 || v32 != 0xE600000000000000)
      {
        char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v56 & 1) == 0) {
          goto LABEL_8;
        }
        goto LABEL_32;
      }
    }
    swift_bridgeObjectRelease();
LABEL_32:
    uint64_t v60 = v11;
    SiriEnvironment.salientEntitiesProvider.getter();
    uint64_t v33 = dispatch thunk of SalientEntitiesDataProvider.salientEntities.getter();
    swift_release();
    uint64_t v34 = *(void *)(v33 + 16);
    if (v34)
    {
      void v57[2] = v13;
      uint64_t v58 = v9;
      uint64_t v59 = v8;
      uint64_t v63 = *(void (**)(char *, unint64_t, uint64_t))(v66 + 16);
      unint64_t v35 = v33 + ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80));
      uint64_t v36 = (void (**)(char *, uint64_t))(v62 + 8);
      unint64_t v37 = (void (**)(char *, uint64_t))(v66 + 8);
      v66 += 16;
      uint64_t v61 = *(void *)(v66 + 56);
      v57[1] = v33;
      swift_bridgeObjectRetain();
      unint64_t v62 = 0x80000001BA0637F0;
      uint64_t v38 = v64;
      while (1)
      {
        v63(v3, v35, v38);
        RRCandidate.entity.getter();
        RREntity.usoEntity.getter();
        (*v36)(v1, v65);
        uint64_t v39 = UsoTask.verbString.getter();
        uint64_t v41 = v40;
        swift_release();
        uint64_t v69 = v39;
        uint64_t v70 = v41;
        unint64_t v67 = 0xD000000000000014;
        unint64_t v68 = v62;
        lazy protocol witness table accessor for type String and conformance String();
        LOBYTE(v39) = StringProtocol.contains<A>(_:)();
        swift_bridgeObjectRelease();
        (*v37)(v3, v38);
        if (v39) {
          break;
        }
        v35 += v61;
        if (!--v34)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v9 = v58;
          uint64_t v8 = v59;
          uint64_t v42 = v60;
          goto LABEL_38;
        }
      }
      swift_bridgeObjectRelease_n();
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v47 = type metadata accessor for Logger();
      __swift_project_value_buffer(v47, (uint64_t)static Logger.executor);
      char v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.debug.getter();
      BOOL v50 = os_log_type_enabled(v48, v49);
      uint64_t v52 = v58;
      uint64_t v51 = v59;
      uint64_t v53 = v60;
      if (v50)
      {
        uint64_t v54 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v54 = 0;
        _os_log_impl(&dword_1B9C64000, v48, v49, "[CalendarAffinityScorer] calendar event entities found in salient entities, returning .high", v54, 2u);
        MEMORY[0x1BA9E48C0](v54, -1, -1);
      }

      swift_release();
      (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v51);
      return 3;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v42 = v60;
LABEL_38:
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v43 = type metadata accessor for Logger();
      __swift_project_value_buffer(v43, (uint64_t)static Logger.executor);
      uint64_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v46 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v46 = 0;
        _os_log_impl(&dword_1B9C64000, v44, v45, "[CalendarAffinityScorer] No calendar event entities found in salient entities, returning .unsupported", v46, 2u);
        MEMORY[0x1BA9E48C0](v46, -1, -1);
      }

      swift_release();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v42, v8);
      return 0;
    }
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  __swift_project_value_buffer(v21, (uint64_t)static Logger.executor);
  unint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v22, v23))
  {

    return 2;
  }
  uint64_t v24 = 2;
  unint64_t v25 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)unint64_t v25 = 0;
  _os_log_impl(&dword_1B9C64000, v22, v23, "[CalendarAffinityScorer] Not a Uso parse, returning .default", v25, 2u);
  MEMORY[0x1BA9E48C0](v25, -1, -1);

  return v24;
}

ValueMetadata *type metadata accessor for CalendarAffinityScorer()
{
  return &type metadata for CalendarAffinityScorer;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SiriCam12RankedActionV03topG0_SayAF0E5ParseOG17alternativeParsestG_AHs5NeverOTg503_s7d5Cam12fg9VSayAA0B5i46OGACIgngr_AC03topD0_AF17alternativeParsestACs5L136OIegnrzr_TR04_s14a12KitRuntime13b55BridgeImplC13collateParses4rcId13rankedActionsSay0aD012cd22VGSS_AJtFZA2I_SayAG0D5E8OGtXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v22 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CamParse();
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v21 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for RankedAction();
  uint64_t v7 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = MEMORY[0x1E4FBC860];
  if (v10)
  {
    v16[0] = v1;
    uint64_t v24 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    uint64_t v11 = v24;
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
    uint64_t v12 = a1
        + ((*(unsigned __int8 *)(*(void *)(v18 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v18 - 8) + 80));
    uint64_t v17 = *(void *)(*(void *)(v18 - 8) + 72);
    v16[1] = v7 + 32;
    uint64_t v19 = v7;
    do
    {
      int64_t v23 = v10;
      RankedAction.flowHandlerId.getter();
      RankedAction.parse.getter();
      RankedAction.score.getter();
      RankedAction.loggingId.getter();
      swift_bridgeObjectRetain();
      RankedAction.userData.getter();
      RankedAction.init(flowHandlerId:parse:score:loggingId:alternatives:userData:)();
      uint64_t v24 = v11;
      unint64_t v14 = *(void *)(v11 + 16);
      unint64_t v13 = *(void *)(v11 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        uint64_t v11 = v24;
      }
      *(void *)(v11 + 16) = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v19 + 32))(v11+ ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))+ *(void *)(v19 + 72) * v14, v9, v20);
      v12 += v17;
      int64_t v10 = v23 - 1;
    }
    while (v23 != 1);
  }
  return v11;
}

Swift::String *kSiriLinkFlowBundleId.unsafeMutableAddressor()
{
  return &kSiriLinkFlowBundleId;
}

uint64_t CamBridgeImpl.enabledCamFeaturesForDevice.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CamBridgeImpl.enabledCamFeaturesForDevice.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 96) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*CamBridgeImpl.enabledCamFeaturesForDevice.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t CamBridgeImpl.trialExperimentManager.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 104, a1);
}

uint64_t CamBridgeImpl.camState.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return outlined init with copy of CamBridgeImpl.CamState((uint64_t *)(v1 + 144), a1);
}

uint64_t key path setter for CamBridgeImpl.camState : CamBridgeImpl(uint64_t *a1, void *a2)
{
  outlined init with copy of CamBridgeImpl.CamState(a1, (uint64_t)v5);
  uint64_t v3 = *a2 + 144;
  swift_beginAccess();
  outlined assign with copy of CamBridgeImpl.CamState(v5, v3);
  swift_endAccess();
  CamBridgeImpl.camState.didset();
  return outlined destroy of CamBridgeImpl.CamState((uint64_t)v5);
}

uint64_t CamBridgeImpl.camState.setter(long long *a1)
{
  swift_beginAccess();
  outlined assign with copy of CamBridgeImpl.CamState(a1, v1 + 144);
  swift_endAccess();
  CamBridgeImpl.camState.didset();
  return outlined destroy of CamBridgeImpl.CamState((uint64_t)a1);
}

uint64_t (*CamBridgeImpl.camState.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return CamBridgeImpl.camState.modify;
}

uint64_t CamBridgeImpl.camState.modify(uint64_t a1, char a2)
{
  return CamBridgeImpl.camState.modify(a1, a2, (uint64_t (*)(uint64_t))CamBridgeImpl.camState.didset);
}

uint64_t CamBridgeImpl.caarState.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return outlined init with copy of CamBridgeImpl.CaarState((uint64_t *)(v1 + 192), a1);
}

uint64_t key path setter for CamBridgeImpl.caarState : CamBridgeImpl(uint64_t *a1, void *a2)
{
  outlined init with copy of CamBridgeImpl.CaarState(a1, (uint64_t)v5);
  uint64_t v3 = *a2 + 192;
  swift_beginAccess();
  outlined assign with copy of CamBridgeImpl.CaarState(v5, v3);
  swift_endAccess();
  CamBridgeImpl.caarState.didset();
  return outlined destroy of CamBridgeImpl.CaarState((uint64_t)v5);
}

uint64_t CamBridgeImpl.caarState.setter(long long *a1)
{
  swift_beginAccess();
  outlined assign with copy of CamBridgeImpl.CaarState(a1, v1 + 192);
  swift_endAccess();
  CamBridgeImpl.caarState.didset();
  return outlined destroy of CamBridgeImpl.CaarState((uint64_t)a1);
}

uint64_t outlined assign with copy of CamBridgeImpl.CaarState(long long *a1, uint64_t a2)
{
  return a2;
}

void CamBridgeImpl.caarState.didset()
{
  uint64_t v1 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v10 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_beginAccess();
    outlined init with copy of CamBridgeImpl.CaarState((uint64_t *)(v1 + 192), (uint64_t)v9);
    uint64_t v7 = String.init<A>(describing:)();
    v9[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v3, v4, "CamBridge: caarState set to %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v6, -1, -1);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }
  else
  {

    swift_release_n();
  }
}

uint64_t (*CamBridgeImpl.caarState.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return CamBridgeImpl.caarState.modify;
}

uint64_t CamBridgeImpl.caarState.modify(uint64_t a1, char a2)
{
  return CamBridgeImpl.camState.modify(a1, a2, (uint64_t (*)(uint64_t))CamBridgeImpl.caarState.didset);
}

uint64_t CamBridgeImpl.camBridgeState.getter()
{
  return swift_retain();
}

uint64_t key path setter for CamBridgeImpl.camBridgeState : CamBridgeImpl(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 240) = v2;
  swift_retain_n();
  swift_release();
  CamBridgeImpl.camBridgeState.didset();
  return swift_release();
}

uint64_t CamBridgeImpl.camBridgeState.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 240) = a1;
  swift_retain();
  swift_release();
  CamBridgeImpl.camBridgeState.didset();
  return swift_release();
}

uint64_t (*CamBridgeImpl.camBridgeState.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return CamBridgeImpl.camBridgeState.modify;
}

uint64_t CamBridgeImpl.camBridgeState.modify(uint64_t a1, char a2)
{
  return CamBridgeImpl.camState.modify(a1, a2, (uint64_t (*)(uint64_t))CamBridgeImpl.camBridgeState.didset);
}

uint64_t CamBridgeImpl.camState.modify(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return a3(result);
  }
  return result;
}

uint64_t CamBridgeImpl.__allocating_init(forceSupported:camProvider:caarProvider:trialExperimentManager:)(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = a3;
  uint64_t v7 = swift_allocObject();
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v10 = __swift_mutable_project_boxed_opaque_existential_1(a2, v9);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v13 + 16))(v12);
  uint64_t v15 = *(void *)(a4 + 24);
  uint64_t v14 = *(void *)(a4 + 32);
  uint64_t v16 = __swift_mutable_project_boxed_opaque_existential_1(a4, v15);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v19 + 16))(v18);
  uint64_t v20 = specialized CamBridgeImpl.init(forceSupported:camProvider:caarProvider:trialExperimentManager:)(a1, (uint64_t)v12, v23, (uint64_t)v18, v7, v9, v15, v8, v14);
  __swift_destroy_boxed_opaque_existential_1Tm(a4);
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  return v20;
}

uint64_t CamBridgeImpl.init(forceSupported:camProvider:caarProvider:trialExperimentManager:)(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v10 = __swift_mutable_project_boxed_opaque_existential_1(a2, v9);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v13 + 16))(v12);
  uint64_t v15 = *(void *)(a4 + 24);
  uint64_t v14 = *(void *)(a4 + 32);
  uint64_t v16 = __swift_mutable_project_boxed_opaque_existential_1(a4, v15);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v19 + 16))(v18);
  uint64_t v20 = specialized CamBridgeImpl.init(forceSupported:camProvider:caarProvider:trialExperimentManager:)(a1, (uint64_t)v12, a3, (uint64_t)v18, v22[1], v9, v15, v8, v14);
  __swift_destroy_boxed_opaque_existential_1Tm(a4);
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  return v20;
}

uint64_t static CamBridgeImpl.isCaarSupportedOnThisDevice.getter()
{
  return 1;
}

uint64_t one-time initialization function for shared()
{
  id v0 = objc_msgSend(self, sel_clientWithIdentifier_, 125, (unsigned __int128)0, (unsigned __int128)0, 0);
  type metadata accessor for TrialExperimentationAssetManager();
  uint64_t v1 = swift_allocObject();
  id v2 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
  *(void *)(v1 + 16) = v0;
  *(void *)(v1 + 24) = v2;
  type metadata accessor for CamBridgeImpl();
  uint64_t v3 = swift_allocObject();
  uint64_t result = specialized CamBridgeImpl.init(forceSupported:camProvider:caarProvider:trialExperimentManager:)(2u, (uint64_t)&v5, v1, v3);
  static CamBridgeImpl.shared = result;
  return result;
}

{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for MessageBusActor();
  id v0 = swift_allocObject();
  uint64_t result = swift_defaultActor_initialize();
  static MessageBusActor.shared = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for FlowActor();
  id v0 = swift_allocObject();
  uint64_t result = swift_defaultActor_initialize();
  static FlowActor.shared = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t vars8;

  if (one-time initialization token for kSharedFlowExtensionObserver != -1) {
    swift_once();
  }
  id v0 = kSharedFlowExtensionObserver;
  type metadata accessor for FlowExtensionDiscoverer();
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = v0;
  static FlowExtensionDiscoverer.shared = v1;

  return swift_retain();
}

{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for ReactiveUIEventActor();
  id v0 = swift_allocObject();
  uint64_t result = swift_defaultActor_initialize();
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = 0;
  *(unsigned char *)(v0 + 128) = 0;
  static ReactiveUIEventActor.shared = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for ConversationActor();
  id v0 = swift_allocObject();
  uint64_t result = swift_defaultActor_initialize();
  static ConversationActor.shared = v0;
  return result;
}

uint64_t *CamBridgeImpl.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return &static CamBridgeImpl.shared;
}

uint64_t static CamBridgeImpl.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_retain();
}

uint64_t static CamBridgeImpl.shared.setter(uint64_t a1)
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  static CamBridgeImpl.shared = a1;
  return swift_release();
}

uint64_t (*static CamBridgeImpl.shared.modify())()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t static CamBridgeImpl.isCamUncertaintyPromptSupportedOnThisDevice.getter()
{
  id v0 = (id)AFCurrentUserInterfaceIdiom();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = v2;

  if (v1 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v3 == v4) {
    char v6 = 1;
  }
  else {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6 & 1;
}

uint64_t static CamBridgeImpl.isCamActionAmbiguitySupportedOnThisDevice.getter()
{
  return 1;
}

uint64_t CamBridgeImpl.asyncWarmUpIfSupported()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  outlined init with copy of CamBridgeImpl.CamState(v0 + 18, (uint64_t)&v21);
  if (v25 != 3
    || v24
    || v21 != 1
    || (int8x16_t v5 = vorrq_s8(v22, v23), *(void *)&vorr_s8(*(int8x8_t *)v5.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL))))
  {
    outlined destroy of CamBridgeImpl.CamState((uint64_t)&v21);
  }
  else
  {
    outlined destroy of CamBridgeImpl.CamState((uint64_t)&v21);
    swift_beginAccess();
    outlined init with copy of CamBridgeImpl.CaarState(v0 + 24, (uint64_t)&v21);
    if (v24 == 3 && v21 == 1)
    {
      int8x16_t v6 = vorrq_s8(v22, v23);
      if (!*(void *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)))
      {
        outlined destroy of CamBridgeImpl.CaarState((uint64_t)&v21);
        uint64_t v7 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v4, 1, 1, v7);
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        swift_beginAccess();
        uint64_t v8 = static MessageBusActor.shared;
        uint64_t v9 = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
        uint64_t v10 = swift_allocObject();
        *(void *)(v10 + 16) = v8;
        *(void *)(v10 + 24) = v9;
        swift_retain();
        return _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #1 in CamBridgeImpl.asyncWarmUpIfSupported(), v10);
      }
    }
    outlined destroy of CamBridgeImpl.CaarState((uint64_t)&v21);
  }
  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v4, 1, 1, v12);
  uint64_t v13 = one-time initialization token for shared;
  swift_retain();
  if (v13 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v14 = static MessageBusActor.shared;
  uint64_t v15 = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = v14;
  void v16[3] = v15;
  v16[4] = v0;
  v16[5] = v1;
  swift_retain();
  uint64_t v11 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #2 in CamBridgeImpl.asyncWarmUpIfSupported(), (uint64_t)v16);
  outlined init with copy of CamBridgeImpl.CamState(v0 + 18, (uint64_t)&v21);
  if (v25 != 3
    || v24
    || v21 != 1
    || (int8x16_t v17 = vorrq_s8(v22, v23),
        *(void *)&vorr_s8(*(int8x8_t *)v17.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL))))
  {
    outlined destroy of CamBridgeImpl.CamState((uint64_t)&v21);
    uint64_t v21 = v11;
    char v25 = 0;
    swift_beginAccess();
    swift_retain();
    outlined assign with copy of CamBridgeImpl.CamState((long long *)&v21, (uint64_t)(v0 + 18));
    swift_endAccess();
    CamBridgeImpl.camState.didset();
  }
  outlined destroy of CamBridgeImpl.CamState((uint64_t)&v21);
  swift_beginAccess();
  outlined init with copy of CamBridgeImpl.CaarState(v0 + 24, (uint64_t)&v21);
  if (v24 != 3
    || v21 != 1
    || (int8x16_t v18 = vorrq_s8(v22, v23),
        *(void *)&vorr_s8(*(int8x8_t *)v18.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL))))
  {
    outlined destroy of CamBridgeImpl.CaarState((uint64_t)&v21);
    uint64_t v21 = v11;
    char v24 = 0;
    swift_beginAccess();
    swift_retain();
    outlined assign with copy of CamBridgeImpl.CaarState((long long *)&v21, (uint64_t)(v0 + 24));
    swift_endAccess();
    CamBridgeImpl.caarState.didset();
  }
  outlined destroy of CamBridgeImpl.CaarState((uint64_t)&v21);
  return v11;
}

uint64_t closure #1 in CamBridgeImpl.asyncWarmUpIfSupported()()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return protocol witness for ExecutionOverride.evaluate() in conformance AnnounceExecutionOverride(v1);
}

uint64_t closure #2 in CamBridgeImpl.asyncWarmUpIfSupported()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[108] = a4;
  uint64_t v5 = type metadata accessor for CamFeature();
  v4[109] = v5;
  v4[110] = *(void *)(v5 - 8);
  v4[111] = swift_task_alloc();
  v4[112] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v6 = static MessageBusActor.shared;
  v4[113] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](closure #2 in CamBridgeImpl.asyncWarmUpIfSupported(), v6, 0);
}

uint64_t closure #2 in CamBridgeImpl.asyncWarmUpIfSupported()()
{
  uint64_t v56 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 912) = __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1B9C64000, v2, v3, "CamBridge: Trying to initialise CAAR", v4, 2u);
    MEMORY[0x1BA9E48C0](v4, -1, -1);
  }
  uint64_t v5 = *(void *)(v0 + 864);

  outlined init with copy of ReferenceResolutionClientProtocol?(v5 + 56, v0 + 432, &demangling cache variable for type metadata for CaarProviding?);
  uint64_t v6 = *(void *)(v0 + 456);
  if (v6)
  {
    uint64_t v7 = *(void *)(v0 + 464);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 432), *(void *)(v0 + 456));
    uint64_t v52 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 8) + **(int **)(v7 + 8));
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 920) = v8;
    *uint64_t v8 = v0;
    v8[1] = closure #2 in CamBridgeImpl.asyncWarmUpIfSupported();
    return v52(v0 + 472, v6, v7);
  }
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 432, &demangling cache variable for type metadata for CaarProviding?);
  *(_OWORD *)(v0 + 472) = 0u;
  *(_OWORD *)(v0 + 488) = 0u;
  *(void *)(v0 + 504) = 0;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v0 + 472, v0 + 552, &demangling cache variable for type metadata for CaarRankingProviding?);
  outlined init with copy of ReferenceResolutionClientProtocol?(v0 + 552, v0 + 392, &demangling cache variable for type metadata for CaarRankingProviding?);
  if (!*(void *)(v0 + 416))
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 552, &demangling cache variable for type metadata for CaarRankingProviding?);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 392, &demangling cache variable for type metadata for CaarRankingProviding?);
    goto LABEL_18;
  }
  uint64_t v10 = *(void *)(v0 + 864);
  outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 392), v0 + 352);
  outlined init with copy of ReferenceResolutionClientProtocol(v0 + 352, v0 + 304);
  *(unsigned char *)(v0 + 344) = 1;
  swift_beginAccess();
  outlined assign with copy of CamBridgeImpl.CaarState((long long *)(v0 + 304), v10 + 192);
  swift_endAccess();
  CamBridgeImpl.caarState.didset();
  outlined destroy of CamBridgeImpl.CaarState(v0 + 304);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 352);
  uint64_t v11 = (uint64_t *)(v10 + 144);
  swift_beginAccess();
  outlined init with copy of CamBridgeImpl.CamState(v11, v0 + 160);
  if (*(unsigned char *)(v0 + 201) == 3 && !*(unsigned char *)(v0 + 200) && *(void *)(v0 + 160) == 1)
  {
    int8x16_t v12 = vorrq_s8(*(int8x16_t *)(v0 + 168), *(int8x16_t *)(v0 + 184));
    if (!*(void *)&vorr_s8(*(int8x8_t *)v12.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)))
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 552, &demangling cache variable for type metadata for CaarRankingProviding?);
      swift_release();
      outlined destroy of CamBridgeImpl.CamState(v0 + 160);
LABEL_18:
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
      return v14();
    }
  }
  outlined destroy of CamBridgeImpl.CamState(v0 + 160);
  outlined init with copy of CamBridgeImpl.CamState(v11, v0 + 112);
  if (*(unsigned char *)(v0 + 153) == 1)
  {
    char v13 = *(unsigned char *)(v0 + 152);
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 112);
  }
  else
  {
    outlined destroy of CamBridgeImpl.CamState(v0 + 112);
    char v13 = 4;
  }
  *(unsigned char *)(v0 + 58) = v13;
  id v15 = (id)AFCurrentUserInterfaceIdiom();
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v18 == v19)
  {
    swift_bridgeObjectRelease_n();
LABEL_26:
    uint64_t v21 = *(void (**)(void, void, void))(*(void *)(v0 + 880) + 104);
    v21(*(void *)(v0 + 896), *MEMORY[0x1E4F9FA88], *(void *)(v0 + 872));
    unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
    unint64_t v24 = *(void *)(v22 + 16);
    unint64_t v23 = *(void *)(v22 + 24);
    if (v24 >= v23 >> 1) {
      unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1, v22);
    }
    uint64_t v25 = *(void *)(v0 + 896);
    uint64_t v26 = *(void *)(v0 + 880);
    uint64_t v27 = *(void *)(v0 + 872);
    *(void *)(v22 + 16) = v24 + 1;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v26 + 32))(v22+ ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ *(void *)(v26 + 72) * v24, v25, v27);
    goto LABEL_30;
  }
  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v20) {
    goto LABEL_26;
  }
  uint64_t v21 = *(void (**)(void, void, void))(*(void *)(v0 + 880) + 104);
  unint64_t v22 = MEMORY[0x1E4FBC860];
LABEL_30:
  v21(*(void *)(v0 + 888), *MEMORY[0x1E4F9FA90], *(void *)(v0 + 872));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v22 + 16) + 1, 1, v22);
  }
  unint64_t v29 = *(void *)(v22 + 16);
  unint64_t v28 = *(void *)(v22 + 24);
  if (v29 >= v28 >> 1) {
    unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1, v22);
  }
  uint64_t v30 = *(void *)(v0 + 888);
  uint64_t v31 = *(void *)(v0 + 880);
  uint64_t v32 = *(void *)(v0 + 872);
  uint64_t v33 = *(void *)(v0 + 864);
  *(void *)(v22 + 16) = v29 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v31 + 32))(v22+ ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ *(void *)(v31 + 72) * v29, v30, v32);
  swift_beginAccess();
  *(void *)(v33 + 96) = v22;
  swift_bridgeObjectRelease();
  swift_retain_n();
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  uint64_t v54 = (uint64_t *)(v33 + 96);
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = *(void *)(v0 + 872);
    unint64_t v37 = (uint8_t *)swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    uint64_t v55 = v38;
    *(_DWORD *)unint64_t v37 = 136315138;
    uint64_t v39 = swift_bridgeObjectRetain();
    uint64_t v40 = MEMORY[0x1BA9E3080](v39, v36);
    unint64_t v42 = v41;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 824) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v42, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B9C64000, v34, v35, "CamBridge: Adding feature flags: %s", v37, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v38, -1, -1);
    MEMORY[0x1BA9E48C0](v37, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  uint64_t v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v43, v44))
  {
    os_log_type_t v45 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v45 = 0;
    _os_log_impl(&dword_1B9C64000, v43, v44, "CamBridge: Trying to initialise CAM", v45, 2u);
    MEMORY[0x1BA9E48C0](v45, -1, -1);
  }
  uint64_t v46 = *(void **)(v0 + 864);

  uint64_t v47 = v46 + 2;
  uint64_t v48 = v46[5];
  uint64_t v49 = v46[6];
  __swift_project_boxed_opaque_existential_1(v47, v48);
  uint64_t v50 = *v54;
  *(void *)(v0 + 936) = *v54;
  uint64_t v53 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v49 + 8) + **(int **)(v49 + 8));
  swift_bridgeObjectRetain();
  uint64_t v51 = (void *)swift_task_alloc();
  *(void *)(v0 + 944) = v51;
  void *v51 = v0;
  v51[1] = closure #2 in CamBridgeImpl.asyncWarmUpIfSupported();
  return v53(v0 + 592, v50, v48, v49);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 928) = v0;
  swift_task_dealloc();
  os_log_type_t v3 = *(void *)(v2 + 904);
  if (v0) {
    uint64_t v4 = closure #2 in CamBridgeImpl.asyncWarmUpIfSupported();
  }
  else {
    uint64_t v4 = closure #2 in CamBridgeImpl.asyncWarmUpIfSupported();
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  int8x16_t v3;
  char v4;
  uint64_t (*v5)(void);
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void (*v13)(void, void, void);
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  uint64_t v47 = v0;
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 432);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v0 + 472, v0 + 552, &demangling cache variable for type metadata for CaarRankingProviding?);
  outlined init with copy of ReferenceResolutionClientProtocol?(v0 + 552, v0 + 392, &demangling cache variable for type metadata for CaarRankingProviding?);
  if (!*(void *)(v0 + 416))
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 552, &demangling cache variable for type metadata for CaarRankingProviding?);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 392, &demangling cache variable for type metadata for CaarRankingProviding?);
    goto LABEL_10;
  }
  uint64_t v1 = *(void *)(v0 + 864);
  outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 392), v0 + 352);
  outlined init with copy of ReferenceResolutionClientProtocol(v0 + 352, v0 + 304);
  *(unsigned char *)(v0 + 344) = 1;
  swift_beginAccess();
  outlined assign with copy of CamBridgeImpl.CaarState((long long *)(v0 + 304), v1 + 192);
  swift_endAccess();
  CamBridgeImpl.caarState.didset();
  outlined destroy of CamBridgeImpl.CaarState(v0 + 304);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 352);
  uint64_t v2 = (uint64_t *)(v1 + 144);
  swift_beginAccess();
  outlined init with copy of CamBridgeImpl.CamState(v2, v0 + 160);
  if (*(unsigned char *)(v0 + 201) == 3 && !*(unsigned char *)(v0 + 200) && *(void *)(v0 + 160) == 1)
  {
    os_log_type_t v3 = vorrq_s8(*(int8x16_t *)(v0 + 168), *(int8x16_t *)(v0 + 184));
    if (!*(void *)&vorr_s8(*(int8x8_t *)v3.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL)))
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 552, &demangling cache variable for type metadata for CaarRankingProviding?);
      swift_release();
      outlined destroy of CamBridgeImpl.CamState(v0 + 160);
LABEL_10:
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
      return v5();
    }
  }
  outlined destroy of CamBridgeImpl.CamState(v0 + 160);
  outlined init with copy of CamBridgeImpl.CamState(v2, v0 + 112);
  if (*(unsigned char *)(v0 + 153) == 1)
  {
    uint64_t v4 = *(unsigned char *)(v0 + 152);
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 112);
  }
  else
  {
    outlined destroy of CamBridgeImpl.CamState(v0 + 112);
    uint64_t v4 = 4;
  }
  *(unsigned char *)(v0 + 58) = v4;
  uint64_t v7 = (id)AFCurrentUserInterfaceIdiom();
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  if (v8 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v10 == v11)
  {
    swift_bridgeObjectRelease_n();
LABEL_18:
    char v13 = *(void (**)(void, void, void))(*(void *)(v0 + 880) + 104);
    v13(*(void *)(v0 + 896), *MEMORY[0x1E4F9FA88], *(void *)(v0 + 872));
    uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
    uint64_t v16 = *(void *)(v14 + 16);
    id v15 = *(void *)(v14 + 24);
    if (v16 >= v15 >> 1) {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1, v14);
    }
    uint64_t v17 = *(void *)(v0 + 896);
    uint64_t v18 = *(void *)(v0 + 880);
    uint64_t v19 = *(void *)(v0 + 872);
    *(void *)(v14 + 16) = v16 + 1;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v18 + 32))(v14+ ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))+ *(void *)(v18 + 72) * v16, v17, v19);
    goto LABEL_22;
  }
  int8x16_t v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v12) {
    goto LABEL_18;
  }
  char v13 = *(void (**)(void, void, void))(*(void *)(v0 + 880) + 104);
  uint64_t v14 = MEMORY[0x1E4FBC860];
LABEL_22:
  v13(*(void *)(v0 + 888), *MEMORY[0x1E4F9FA90], *(void *)(v0 + 872));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v14 + 16) + 1, 1, v14);
  }
  uint64_t v21 = *(void *)(v14 + 16);
  char v20 = *(void *)(v14 + 24);
  if (v21 >= v20 >> 1) {
    uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1, v14);
  }
  unint64_t v22 = *(void *)(v0 + 888);
  unint64_t v23 = *(void *)(v0 + 880);
  unint64_t v24 = *(void *)(v0 + 872);
  uint64_t v25 = *(void *)(v0 + 864);
  *(void *)(v14 + 16) = v21 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v23 + 32))(v14+ ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80))+ *(void *)(v23 + 72) * v21, v22, v24);
  swift_beginAccess();
  *(void *)(v25 + 96) = v14;
  swift_bridgeObjectRelease();
  swift_retain_n();
  uint64_t v26 = Logger.logObject.getter();
  uint64_t v27 = static os_log_type_t.debug.getter();
  os_log_type_t v45 = (uint64_t *)(v25 + 96);
  if (os_log_type_enabled(v26, v27))
  {
    unint64_t v28 = *(void *)(v0 + 872);
    unint64_t v29 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    uint64_t v46 = v30;
    *(_DWORD *)unint64_t v29 = 136315138;
    uint64_t v31 = swift_bridgeObjectRetain();
    uint64_t v32 = MEMORY[0x1BA9E3080](v31, v28);
    uint64_t v34 = v33;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 824) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v34, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B9C64000, v26, v27, "CamBridge: Adding feature flags: %s", v29, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v30, -1, -1);
    MEMORY[0x1BA9E48C0](v29, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  os_log_type_t v35 = Logger.logObject.getter();
  uint64_t v36 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v35, v36))
  {
    unint64_t v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v37 = 0;
    _os_log_impl(&dword_1B9C64000, v35, v36, "CamBridge: Trying to initialise CAM", v37, 2u);
    MEMORY[0x1BA9E48C0](v37, -1, -1);
  }
  uint64_t v38 = *(void **)(v0 + 864);

  uint64_t v39 = v38 + 2;
  uint64_t v40 = v38[5];
  unint64_t v41 = v38[6];
  __swift_project_boxed_opaque_existential_1(v39, v40);
  unint64_t v42 = *v45;
  *(void *)(v0 + 936) = *v45;
  os_log_type_t v44 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v41 + 8) + **(int **)(v41 + 8));
  swift_bridgeObjectRetain();
  uint64_t v43 = (void *)swift_task_alloc();
  *(void *)(v0 + 944) = v43;
  NSObject *v43 = v0;
  v43[1] = closure #2 in CamBridgeImpl.asyncWarmUpIfSupported();
  return v44(v0 + 592, v42, v40, v41);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 952) = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v3 = *(void *)(v2 + 904);
    uint64_t v4 = closure #2 in CamBridgeImpl.asyncWarmUpIfSupported();
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 904);
    swift_bridgeObjectRelease();
    uint64_t v4 = closure #2 in CamBridgeImpl.asyncWarmUpIfSupported();
    os_log_type_t v3 = v5;
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = *(unsigned char *)(v0 + 58);
  uint64_t v2 = *(void *)(v0 + 864);
  swift_release();
  outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 592), v0 + 512);
  outlined init with copy of ReferenceResolutionClientProtocol(v0 + 512, v0 + 64);
  *(unsigned char *)(v0 + 104) = v1;
  *(unsigned char *)(v0 + 105) = 1;
  swift_beginAccess();
  outlined assign with copy of CamBridgeImpl.CamState((long long *)(v0 + 64), v2 + 144);
  swift_endAccess();
  CamBridgeImpl.camState.didset();
  outlined destroy of CamBridgeImpl.CamState(v0 + 64);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 512);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 552, &demangling cache variable for type metadata for CaarRankingProviding?);
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t (*v17)(void);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  char v20 = v0;
  uint64_t v1 = *(void **)(v0 + 928);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 432);
  uint64_t v2 = v1;
  os_log_type_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void **)(v0 + 928);
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v19 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    *(void *)(v0 + 848) = v6;
    uint64_t v9 = v6;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v10 = String.init<A>(describing:)();
    *(void *)(v0 + 856) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, v4, v5, "CamBridge: Error initializing CAAR(will retry on next Siri session): %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v8, -1, -1);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }
  else
  {
    int8x16_t v12 = *(void **)(v0 + 928);
  }
  char v13 = *(void **)(v0 + 928);
  uint64_t v14 = *(void *)(v0 + 864);
  *(void *)(v0 + 256) = v13;
  *(unsigned char *)(v0 + 296) = 2;
  swift_beginAccess();
  id v15 = v13;
  outlined assign with copy of CamBridgeImpl.CaarState((long long *)(v0 + 256), v14 + 192);
  swift_endAccess();
  CamBridgeImpl.caarState.didset();
  outlined destroy of CamBridgeImpl.CaarState(v0 + 256);
  *(void *)(v0 + 16) = v13;
  *(unsigned char *)(v0 + 57) = 2;
  swift_beginAccess();
  uint64_t v16 = v13;
  outlined assign with copy of CamBridgeImpl.CamState((long long *)(v0 + 16), v14 + 144);
  swift_endAccess();
  CamBridgeImpl.camState.didset();
  outlined destroy of CamBridgeImpl.CamState(v0 + 16);

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
  return v17();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t (*v16)(void);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v19 = v0;
  uint64_t v1 = *(void **)(v0 + 952);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v2 = v1;
  os_log_type_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void **)(v0 + 952);
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v18 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    *(void *)(v0 + 840) = v6;
    uint64_t v9 = v6;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v10 = String.init<A>(describing:)();
    *(void *)(v0 + 832) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, v4, v5, "CamBridge: Error initializing CAM (will retry on next Siri session): %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v8, -1, -1);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }
  else
  {
    int8x16_t v12 = *(void **)(v0 + 952);
  }
  char v13 = *(void **)(v0 + 952);
  uint64_t v14 = *(void *)(v0 + 864) + 144;
  *(void *)(v0 + 208) = v13;
  *(unsigned char *)(v0 + 249) = 2;
  swift_beginAccess();
  id v15 = v13;
  outlined assign with copy of CamBridgeImpl.CamState((long long *)(v0 + 208), v14);
  swift_endAccess();
  CamBridgeImpl.camState.didset();
  outlined destroy of CamBridgeImpl.CamState(v0 + 208);

  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 552, &demangling cache variable for type metadata for CaarRankingProviding?);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

uint64_t implicit closure #2 in CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  void v5[6] = a5;
  long long v5[3] = a2;
  v5[4] = a3;
  _OWORD v5[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionParaphrase?);
  v5[7] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for PluginAction();
  v5[8] = v6;
  v5[9] = *(void *)(v6 - 8);
  v5[10] = swift_task_alloc();
  return MEMORY[0x1F4188298](implicit closure #2 in CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:), 0, 0);
}

void implicit closure #2 in CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:)()
{
  if (*(void *)(v0[4] + 16))
  {
    uint64_t v1 = v0[10];
    uint64_t v2 = v0[7];
    type metadata accessor for RankedAction();
    uint64_t v3 = type metadata accessor for ActionParaphrase();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
    RankedAction.toPluginAction(withSpeechPackage:withParaphrase:)(0, v2, v1);
    outlined destroy of ReferenceResolutionClientProtocol?(v2, &demangling cache variable for type metadata for ActionParaphrase?);
    uint64_t v4 = (void *)swift_task_alloc();
    v0[11] = v4;
    *uint64_t v4 = v0;
    v4[1] = implicit closure #2 in CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:);
    uint64_t v5 = v0[10];
    uint64_t v6 = v0[5];
    uint64_t v7 = v0[6];
    uint64_t v8 = v0[2];
    CamBridgeImpl.probePluginActionForActionParaphrase(pluginAction:conversationHelper:conversationHelperInput:)(v8, v5, v6, v7);
  }
  else
  {
    __break(1u);
  }
}

uint64_t implicit closure #2 in CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:)()
{
  uint64_t v1 = *(void *)(*v0 + 80);
  uint64_t v2 = *(void *)(*v0 + 72);
  uint64_t v3 = *(void *)(*v0 + 64);
  uint64_t v6 = *v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v6 + 8);
  return v4();
}

uint64_t CamBridgeImpl.probePluginActionForActionParaphrase(pluginAction:conversationHelper:conversationHelperInput:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[13] = a1;
  v4[14] = a2;
  uint64_t v7 = type metadata accessor for PluginAction();
  v4[15] = v7;
  v4[16] = *(void *)(v7 - 8);
  v4[17] = swift_task_alloc();
  v4[18] = swift_task_alloc();
  v4[19] = type metadata accessor for ConversationParaphraseResult(0);
  v4[20] = swift_task_alloc();
  v4[21] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  v4[22] = static MessageBusActor.shared;
  swift_retain();
  uint64_t v8 = (void *)swift_task_alloc();
  v4[23] = v8;
  *uint64_t v8 = v4;
  v8[1] = CamBridgeImpl.probePluginActionForActionParaphrase(pluginAction:conversationHelper:conversationHelperInput:);
  return ConversationHelper.loadNewConversation(pluginAction:conversationHelperInput:)(a2, a4);
}

uint64_t CamBridgeImpl.probePluginActionForActionParaphrase(pluginAction:conversationHelper:conversationHelperInput:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 176);
  *(void *)(v3 + 192) = a1;
  *(void *)(v3 + 200) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v5 = CamBridgeImpl.probePluginActionForActionParaphrase(pluginAction:conversationHelper:conversationHelperInput:);
  }
  else {
    uint64_t v5 = CamBridgeImpl.probePluginActionForActionParaphrase(pluginAction:conversationHelper:conversationHelperInput:);
  }
  return MEMORY[0x1F4188298](v5, v4, 0);
}

uint64_t CamBridgeImpl.probePluginActionForActionParaphrase(pluginAction:conversationHelper:conversationHelperInput:)()
{
  uint64_t v1 = v0[24];
  if (v1)
  {
    swift_retain();
    return MEMORY[0x1F4188298](CamBridgeImpl.probePluginActionForActionParaphrase(pluginAction:conversationHelper:conversationHelperInput:), v1, 0);
  }
  else
  {
    swift_release();
    uint64_t v2 = v0[13];
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 2, 2, v3);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v10)(uint64_t, void *, void, uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[24];
  uint64_t v2 = type metadata accessor for Logger();
  v0[26] = __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v3 = v1 + 16;
  uint64_t v4 = v1[19];
  uint64_t v5 = v1[20];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  uint64_t v10 = (uint64_t (*)(uint64_t, void *, void, uint64_t, uint64_t, uint64_t))(*(void *)(v5 + 8)
                                                                                   + **(int **)(v5 + 8));
  uint64_t v6 = (void *)swift_task_alloc();
  v0[27] = v6;
  *uint64_t v6 = v0;
  v6[1] = CamBridgeImpl.probePluginActionForActionParaphrase(pluginAction:conversationHelper:conversationHelperInput:);
  uint64_t v7 = v0[21];
  uint64_t v8 = v0[19];
  return v10(v7, &async function pointer to closure #1 in RemoteConversationClient.paraphrase(), 0, v8, v4, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 224) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 176);
  if (v0) {
    uint64_t v4 = CamBridgeImpl.probePluginActionForActionParaphrase(pluginAction:conversationHelper:conversationHelperInput:);
  }
  else {
    uint64_t v4 = CamBridgeImpl.probePluginActionForActionParaphrase(pluginAction:conversationHelper:conversationHelperInput:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;

  uint64_t v27 = v0;
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[20];
  swift_release();
  outlined init with copy of ConversationHelperInput(v1, v2, type metadata accessor for ConversationParaphraseResult);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v3 = (uint64_t *)v0[20];
    uint64_t v5 = *v3;
    uint64_t v4 = v3[1];
    (*(void (**)(void, void, void))(v0[16] + 16))(v0[18], v0[14], v0[15]);
    swift_bridgeObjectRetain();
    uint64_t v6 = Logger.logObject.getter();
    uint64_t v7 = static os_log_type_t.error.getter();
    uint64_t v8 = os_log_type_enabled(v6, v7);
    uint64_t v9 = v0[21];
    uint64_t v10 = v0[18];
    uint64_t v11 = v0[15];
    int8x16_t v12 = v0[16];
    if (v8)
    {
      unint64_t v24 = v5;
      char v13 = swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)char v13 = 136315394;
      uint64_t v26 = v25;
      _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type PluginAction and conformance PluginAction, MEMORY[0x1E4FA1B58]);
      uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
      *(_WORD *)(v13 + 12) = 2080;
      swift_bridgeObjectRetain();
      v0[12] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v4, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v6, v7, "CamBridge: Received ActionParaphrase for %s with error %s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v25, -1, -1);
      MEMORY[0x1BA9E48C0](v13, -1, -1);
      swift_release_n();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
      swift_release();
    }
    outlined destroy of ParaphraseProbeResult(v9, type metadata accessor for ConversationParaphraseResult);
    uint64_t v19 = 1;
  }
  else
  {
    uint64_t v16 = v0[20];
    uint64_t v17 = v0[13];
    outlined destroy of ParaphraseProbeResult(v0[21], type metadata accessor for ConversationParaphraseResult);
    swift_release_n();
    uint64_t v18 = type metadata accessor for ActionParaphrase();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v17, v16, v18);
    uint64_t v19 = 0;
  }
  char v20 = v0[13];
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, v19, 2, v21);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v22 = (uint64_t (*)(void))v0[1];
  return v22();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void);
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;

  uint64_t v26 = v0;
  swift_release();
  swift_release_n();
  uint64_t v1 = (void *)v0[28];
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v3 = v0[16];
  uint64_t v2 = v0[17];
  uint64_t v5 = v0[14];
  uint64_t v4 = v0[15];
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  uint64_t v7 = v1;
  uint64_t v8 = v1;
  uint64_t v9 = Logger.logObject.getter();
  uint64_t v10 = static os_log_type_t.error.getter();
  uint64_t v11 = os_log_type_enabled(v9, v10);
  char v13 = v0[16];
  int8x16_t v12 = v0[17];
  uint64_t v14 = v0[15];
  if (v11)
  {
    id v15 = swift_slowAlloc();
    unint64_t v24 = swift_slowAlloc();
    uint64_t v25 = v24;
    *(_DWORD *)id v15 = 136315394;
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type PluginAction and conformance PluginAction, MEMORY[0x1E4FA1B58]);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    *(_WORD *)(v15 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v18 = Error.localizedDescription.getter();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, v9, v10, "CamBridge: Did not receive any ActionParaphrase for %s. %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v24, -1, -1);
    MEMORY[0x1BA9E48C0](v15, -1, -1);
  }
  else
  {

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }
  char v20 = v0[13];
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 1, 2, v21);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v22 = (uint64_t (*)(void))v0[1];
  return v22();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void);
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;

  uint64_t v26 = v0;
  swift_release();
  uint64_t v1 = (void *)v0[25];
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v3 = v0[16];
  uint64_t v2 = v0[17];
  uint64_t v5 = v0[14];
  uint64_t v4 = v0[15];
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  uint64_t v7 = v1;
  uint64_t v8 = v1;
  uint64_t v9 = Logger.logObject.getter();
  uint64_t v10 = static os_log_type_t.error.getter();
  uint64_t v11 = os_log_type_enabled(v9, v10);
  char v13 = v0[16];
  int8x16_t v12 = v0[17];
  uint64_t v14 = v0[15];
  if (v11)
  {
    id v15 = swift_slowAlloc();
    unint64_t v24 = swift_slowAlloc();
    uint64_t v25 = v24;
    *(_DWORD *)id v15 = 136315394;
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type PluginAction and conformance PluginAction, MEMORY[0x1E4FA1B58]);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    *(_WORD *)(v15 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v18 = Error.localizedDescription.getter();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, v9, v10, "CamBridge: Did not receive any ActionParaphrase for %s. %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v24, -1, -1);
    MEMORY[0x1BA9E48C0](v15, -1, -1);
  }
  else
  {

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }
  char v20 = v0[13];
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 1, 2, v21);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v22 = (uint64_t (*)(void))v0[1];
  return v22();
}

uint64_t implicit closure #3 in CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  void v5[6] = a5;
  long long v5[3] = a2;
  v5[4] = a3;
  _OWORD v5[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionParaphrase?);
  v5[7] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for PluginAction();
  v5[8] = v6;
  v5[9] = *(void *)(v6 - 8);
  v5[10] = swift_task_alloc();
  return MEMORY[0x1F4188298](implicit closure #3 in CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:), 0, 0);
}

void implicit closure #3 in CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:)()
{
  if (*(void *)(v0[4] + 16) < 2uLL)
  {
    __break(1u);
  }
  else
  {
    uint64_t v1 = v0[10];
    uint64_t v2 = v0[7];
    type metadata accessor for RankedAction();
    uint64_t v3 = type metadata accessor for ActionParaphrase();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
    RankedAction.toPluginAction(withSpeechPackage:withParaphrase:)(0, v2, v1);
    outlined destroy of ReferenceResolutionClientProtocol?(v2, &demangling cache variable for type metadata for ActionParaphrase?);
    uint64_t v4 = (void *)swift_task_alloc();
    v0[11] = v4;
    *uint64_t v4 = v0;
    v4[1] = implicit closure #3 in CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:);
    uint64_t v5 = v0[10];
    uint64_t v6 = v0[5];
    uint64_t v7 = v0[6];
    uint64_t v8 = v0[2];
    CamBridgeImpl.probePluginActionForActionParaphrase(pluginAction:conversationHelper:conversationHelperInput:)(v8, v5, v6, v7);
  }
}

uint64_t ParaphraseProbeResult.toActionParaphrase()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ParaphraseProbeResult();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ConversationHelperInput(v2, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ParaphraseProbeResult);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
  int v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 2, v7);
  uint64_t v9 = type metadata accessor for ActionParaphrase();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = v10;
  if (v8)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a1, 1, 1, v9);
    return outlined destroy of ParaphraseProbeResult((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ParaphraseProbeResult);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v6, v9);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v9);
  }
}

void (*specialized Dictionary.subscript.modify(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x40uLL);
  *a1 = v2;
  uint64_t v3 = type metadata accessor for UUID();
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  v2[5] = v4;
  uint64_t v6 = malloc(*(void *)(v4 + 64));
  v2[6] = v6;
  (*(void (**)(void))(v5 + 16))();
  v2[7] = specialized Dictionary._Variant.subscript.modify(v2, (uint64_t)v6);
  return Dictionary.subscript.modifyspecialized ;
}

void Dictionary.subscript.modifyspecialized (void *a1)
{
  uint64_t v1 = (void *)*a1;
  uint64_t v2 = *(void **)(*a1 + 48);
  uint64_t v3 = *(void *)(*a1 + 32);
  uint64_t v4 = *(void *)(*a1 + 40);
  (*(void (**)(void, void))(*a1 + 56))(*a1, 0);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v2, v3);
  free(v2);

  free(v1);
}

uint64_t CamBridgeImpl.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 56, &demangling cache variable for type metadata for CaarProviding?);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 104);
  outlined destroy of CamBridgeImpl.CamState(v0 + 144);
  outlined destroy of CamBridgeImpl.CaarState(v0 + 192);
  swift_release();
  return v0;
}

uint64_t CamBridgeImpl.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 56, &demangling cache variable for type metadata for CaarProviding?);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 104);
  outlined destroy of CamBridgeImpl.CamState(v0 + 144);
  outlined destroy of CamBridgeImpl.CaarState(v0 + 192);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for CamBridge.camBridgeState.getter in conformance CamBridgeImpl()
{
  return swift_retain();
}

uint64_t protocol witness for CamBridge.asyncWarmUpIfSupported() in conformance CamBridgeImpl()
{
  return CamBridgeImpl.asyncWarmUpIfSupported()();
}

uint64_t protocol witness for CamBridge.action(requestId:camId:rcId:speechPackage:rankedActions:inputOrigin:) in conformance CamBridgeImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v17;
  *uint64_t v17 = v8;
  v17[1] = AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  return CamBridgeImpl.action(requestId:camId:rcId:speechPackage:rankedActions:inputOrigin:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t protocol witness for CamBridge.commit(action:) in conformance CamBridgeImpl(char a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return CamBridgeImpl.commit(action:)(a1);
}

uint64_t RealCamProvider.provideCamInstance(camEnabledFeatures:)@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CamSingletonProvider();
  uint64_t result = static CamSingletonProvider.cam(camEnabledFeatures:)();
  if (!v1)
  {
    uint64_t v4 = type metadata accessor for RealCamWrapper();
    uint64_t v5 = swift_allocObject();
    uint64_t result = outlined init with take of ReferenceResolutionClientProtocol(&v6, v5 + 16);
    a1[3] = v4;
    a1[4] = (uint64_t)&protocol witness table for RealCamWrapper;
    *a1 = v5;
  }
  return result;
}

uint64_t RealCamWrapper.__allocating_init(wrapping:)(long long *a1)
{
  uint64_t v2 = swift_allocObject();
  outlined init with take of ReferenceResolutionClientProtocol(a1, v2 + 16);
  return v2;
}

uint64_t protocol witness for CamProviding.provideCamInstance(camEnabledFeatures:) in conformance RealCamProvider(uint64_t *a1)
{
  uint64_t v8 = v1;
  type metadata accessor for CamSingletonProvider();
  static CamSingletonProvider.cam(camEnabledFeatures:)();
  uint64_t v3 = type metadata accessor for RealCamWrapper();
  uint64_t v4 = swift_allocObject();
  outlined init with take of ReferenceResolutionClientProtocol(&v7, v4 + 16);
  a1[3] = v3;
  a1[4] = (uint64_t)&protocol witness table for RealCamWrapper;
  *a1 = v4;
  uint64_t v5 = *(uint64_t (**)(void))(v1 + 8);
  return protocol witness for CamProviding.provideCamInstance(camEnabledFeatures:) in conformance RealCamProvider(v5);
}

uint64_t RealCaarProvider.provideCaarInstance()@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CaarProvider();
  static CaarProvider.caar()();
  uint64_t v2 = type metadata accessor for RealCaarWrapper();
  uint64_t v3 = swift_allocObject();
  uint64_t result = outlined init with take of ReferenceResolutionClientProtocol(&v5, v3 + 16);
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for RealCaarWrapper;
  *a1 = v3;
  return result;
}

uint64_t protocol witness for CaarProviding.provideCaarInstance() in conformance RealCaarProvider(uint64_t *a1)
{
  uint64_t v8 = v1;
  type metadata accessor for CaarProvider();
  static CaarProvider.caar()();
  uint64_t v3 = type metadata accessor for RealCaarWrapper();
  uint64_t v4 = swift_allocObject();
  outlined init with take of ReferenceResolutionClientProtocol(&v7, v4 + 16);
  a1[3] = v3;
  a1[4] = (uint64_t)&protocol witness table for RealCaarWrapper;
  *a1 = v4;
  long long v5 = *(uint64_t (**)(void))(v1 + 8);
  return protocol witness for CamProviding.provideCamInstance(camEnabledFeatures:) in conformance RealCamProvider(v5);
}

uint64_t RealCamWrapper.wrapped.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 16, a1);
}

uint64_t RealCamWrapper.init(wrapping:)(long long *a1)
{
  outlined init with take of ReferenceResolutionClientProtocol(a1, v1 + 16);
  return v1;
}

uint64_t RealCamWrapper.getCamAction(request:)(uint64_t a1, uint64_t a2)
{
  void v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for CamResponse();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  return MEMORY[0x1F4188298](RealCamWrapper.getCamAction(request:), 0, 0);
}

uint64_t RealCamWrapper.getCamAction(request:)()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[5];
  __swift_project_boxed_opaque_existential_1((void *)(v0[4] + 16), *(void *)(v0[4] + 40));
  dispatch thunk of Cam.action(request:)();
  CamResponse.camAction.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t RealCamWrapper.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  return v0;
}

uint64_t RealCamWrapper.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t RealCaarWrapper.getCaarRanking(requestId:caarId:rcId:actions:rankerContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  return MEMORY[0x1F4188298](RealCaarWrapper.getCaarRanking(requestId:caarId:rcId:actions:rankerContext:), 0, 0);
}

unint64_t ParaphraseProbeResult.description.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ActionParaphrase();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  long long v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ParaphraseProbeResult();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ConversationHelperInput(v1, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ParaphraseProbeResult);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
  int v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 2, v9);
  if (v10)
  {
    uint64_t v11 = 0xD000000000000010;
    if (v10 != 1) {
      return 0xD00000000000001DLL;
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_1(&lazy protocol witness table cache variable for type ActionParaphrase and conformance ActionParaphrase, MEMORY[0x1E4FA1C20]);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return v11;
}

void (*specialized Dictionary._Variant.subscript.modify(void *a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v4 = malloc(0x68uLL);
  *a1 = v4;
  uint64_t v5 = type metadata accessor for UUID();
  v4[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  v4[9] = v6;
  uint64_t v8 = malloc(*(void *)(v6 + 64));
  v4[10] = v8;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  (*(void (**)(void *, uint64_t, uint64_t))(v7 + 16))(v8, a2, v5);
  v4[11] = specialized Dictionary._Variant.asNative.modify(v4);
  v4[12] = specialized _NativeDictionary.subscript.modify(v4 + 4, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

void Dictionary._Variant.subscript.modifyspecialized (uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 88);
  uint64_t v4 = *(void *)(*(void *)a1 + 72);
  uint64_t v3 = *(void **)(*(void *)a1 + 80);
  uint64_t v5 = *(void *)(*(void *)a1 + 64);
  (*(void (**)(void))(*(void *)a1 + 96))();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
  v2(v1, 0);
  free(v3);

  free(v1);
}

void (*specialized _NativeDictionary.subscript.modify(void *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  uint64_t v4 = v3;
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  v8[2] = v3;
  uint64_t v9 = *v3;
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  *((unsigned char *)v8 + 32) = v10 & 1;
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    char v15 = v10;
    uint64_t v16 = *(void *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v11;
      if (v15)
      {
LABEL_8:
        uint64_t v17 = *(void *)(*(void *)(*v4 + 56) + 8 * v11);
LABEL_12:
        *uint64_t v8 = v17;
        return _NativeDictionary.subscript.modifyspecialized ;
      }
LABEL_11:
      uint64_t v17 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a3 & 1);
    unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      unint64_t v11 = v18;
      v8[3] = v18;
      if (v15) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  type metadata accessor for UUID();
  uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void _NativeDictionary.subscript.modifyspecialized (uint64_t **a1)
{
  uint64_t v1 = *a1;
  specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(*a1, *((unsigned char *)*a1 + 32), (uint64_t *)(*a1)[2], (*a1)[3], (*a1)[1]);
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t (*specialized Dictionary._Variant.asNative.modify(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  void *v1 = 0x8000000000000000;
  return Dictionary._Variant.asNative.modifyspecialized ;
}

uint64_t Dictionary._Variant.asNative.modifyspecialized (uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

uint64_t specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(uint64_t *a1, char a2, uint64_t *a3, int64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for UUID();
  MEMORY[0x1F4188790](v10);
  BOOL v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *a1;
  if (v14)
  {
    uint64_t v15 = *a3;
    if (a2)
    {
      *(void *)(*(void *)(v15 + 56) + 8 * a4) = v14;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 16))(v13, a5);
      specialized _NativeDictionary._insert(at:key:value:)(a4, v13, v14, v15);
    }
  }
  else if (a2)
  {
    swift_arrayDestroy();
    specialized _NativeDictionary._delete(at:)(a4, *a3);
  }
  return swift_bridgeObjectRetain();
}

uint64_t specialized CamBridgeImpl.init(forceSupported:camProvider:caarProvider:trialExperimentManager:)(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7 = a1;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v31 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v31 - v15;
  uint64_t v43 = &type metadata for RealCamProvider;
  os_log_type_t v44 = &protocol witness table for RealCamProvider;
  uint64_t v40 = type metadata accessor for TrialExperimentationAssetManager();
  unint64_t v41 = &protocol witness table for TrialExperimentationAssetManager;
  *(void *)&long long v39 = a3;
  *(void *)(a4 + 96) = MEMORY[0x1E4FBC860];
  uint64_t v38 = 0;
  long long v36 = 0u;
  long long v37 = 0u;
  if (v7 == 2)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.executor);
    unint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      char v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v20 = 0;
      _os_log_impl(&dword_1B9C64000, v18, v19, "CamBridge: CAAR is supported on this device", v20, 2u);
      MEMORY[0x1BA9E48C0](v20, -1, -1);
    }

    *(_OWORD *)(a4 + 192) = 0u;
    *(void *)(a4 + 224) = 0;
    *(_OWORD *)(a4 + 208) = 0u;
    *(unsigned char *)(a4 + 232) = 3;
    v34.i64[0] = (uint64_t)&type metadata for RealCaarProvider;
    v34.i64[1] = (uint64_t)&protocol witness table for RealCaarProvider;
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v36, &demangling cache variable for type metadata for CaarProviding?);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)&v32, (uint64_t)&v36, &demangling cache variable for type metadata for CaarProviding?);
    swift_beginAccess();
    outlined init with copy of CamBridgeImpl.CaarState((uint64_t *)(a4 + 192), (uint64_t)&v32);
    if (v35 == 3 && v32 == 1)
    {
      int8x16_t v21 = vorrq_s8(v33, v34);
      if (!*(void *)&vorr_s8(*(int8x8_t *)v21.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)))
      {
        outlined destroy of CamBridgeImpl.CaarState((uint64_t)&v32);
        unint64_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v22, v23))
        {
          unint64_t v24 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v24 = 0;
          _os_log_impl(&dword_1B9C64000, v22, v23, "CamBridge: Marking CAM as unsupported as CAM cannot work without CAAR results", v24, 2u);
          MEMORY[0x1BA9E48C0](v24, -1, -1);
        }

        outlined destroy of ReferenceResolutionClientProtocol?(a2, &demangling cache variable for type metadata for CaarProviding?);
        goto LABEL_16;
      }
    }
    outlined destroy of CamBridgeImpl.CaarState((uint64_t)&v32);
    char v26 = specialized static CamBridgeImpl.isCamSupportedOnThisDevice.getter();
    outlined destroy of ReferenceResolutionClientProtocol?(a2, &demangling cache variable for type metadata for CaarProviding?);
    if ((v26 & 1) == 0)
    {
LABEL_16:
      *(void *)(a4 + 144) = 1;
      *(_OWORD *)(a4 + 152) = 0u;
      *(_OWORD *)(a4 + 168) = 0u;
      *(_WORD *)(a4 + 184) = 768;
      goto LABEL_19;
    }
    *(_OWORD *)(a4 + 169) = 0u;
    *(_OWORD *)(a4 + 144) = 0u;
    *(_OWORD *)(a4 + 160) = 0u;
    *(unsigned char *)(a4 + 185) = 3;
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v36, &demangling cache variable for type metadata for CaarProviding?);
    if (v7)
    {
      *(void *)(a4 + 224) = 0;
      *(_OWORD *)(a4 + 192) = 0u;
      *(_OWORD *)(a4 + 208) = 0u;
      *(unsigned char *)(a4 + 232) = 3;
      outlined init with copy of ReferenceResolutionClientProtocol?(a2, (uint64_t)&v36, &demangling cache variable for type metadata for CaarProviding?);
      outlined destroy of ReferenceResolutionClientProtocol?(a2, &demangling cache variable for type metadata for CaarProviding?);
      uint64_t v25 = 0;
    }
    else
    {
      uint64_t v25 = 1;
      *(void *)(a4 + 192) = 1;
      *(_OWORD *)(a4 + 200) = 0u;
      *(_OWORD *)(a4 + 216) = 0u;
      *(unsigned char *)(a4 + 232) = 3;
      long long v36 = 0u;
      long long v37 = 0u;
      uint64_t v38 = 0;
      outlined destroy of ReferenceResolutionClientProtocol?(a2, &demangling cache variable for type metadata for CaarProviding?);
    }
    uint64_t v32 = v25;
    int8x16_t v33 = 0u;
    int8x16_t v34 = 0u;
    __int16 v35 = 768;
    outlined init with take of CamBridgeImpl.CamState((long long *)&v32, (_OWORD *)(a4 + 144));
  }
LABEL_19:
  uint64_t v27 = type metadata accessor for UUID();
  unint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56);
  v28(v16, 1, 1, v27);
  v28(v14, 1, 1, v27);
  v28(v11, 1, 1, v27);
  type metadata accessor for CamBridgeState();
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = MEMORY[0x1E4FBC868];
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v16, v29 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_requestLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v14, v29 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_camLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v11, v29 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_caarLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  *(void *)(a4 + 240) = v29;
  outlined init with take of ReferenceResolutionClientProtocol(&v42, a4 + 16);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)&v36, a4 + 56, &demangling cache variable for type metadata for CaarProviding?);
  outlined init with take of ReferenceResolutionClientProtocol(&v39, a4 + 104);
  return a4;
}

uint64_t specialized CamBridgeImpl.init(forceSupported:camProvider:caarProvider:trialExperimentManager:)(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v43 = a3;
  int v15 = a1;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  os_log_type_t v44 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  int8x16_t v21 = (char *)&v42 - v20;
  MEMORY[0x1F4188790](v19);
  os_log_type_t v23 = (char *)&v42 - v22;
  uint64_t v56 = a6;
  uint64_t v57 = a8;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v55);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(boxed_opaque_existential_0, a2, a6);
  uint64_t v53 = a7;
  uint64_t v54 = a9;
  uint64_t v25 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v52);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(v25, a4, a7);
  *(void *)(a5 + 96) = MEMORY[0x1E4FBC860];
  uint64_t v51 = 0;
  long long v49 = 0u;
  long long v50 = 0u;
  if (v15 == 2)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.executor);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl(&dword_1B9C64000, v27, v28, "CamBridge: CAAR is supported on this device", v29, 2u);
      MEMORY[0x1BA9E48C0](v29, -1, -1);
    }

    *(_OWORD *)(a5 + 192) = 0u;
    *(void *)(a5 + 224) = 0;
    *(_OWORD *)(a5 + 208) = 0u;
    *(unsigned char *)(a5 + 232) = 3;
    v47.i64[0] = (uint64_t)&type metadata for RealCaarProvider;
    v47.i64[1] = (uint64_t)&protocol witness table for RealCaarProvider;
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v49, &demangling cache variable for type metadata for CaarProviding?);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)&v45, (uint64_t)&v49, &demangling cache variable for type metadata for CaarProviding?);
    swift_beginAccess();
    outlined init with copy of CamBridgeImpl.CaarState((uint64_t *)(a5 + 192), (uint64_t)&v45);
    if (v48 == 3 && v45 == 1)
    {
      int8x16_t v30 = vorrq_s8(v46, v47);
      if (!*(void *)&vorr_s8(*(int8x8_t *)v30.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)))
      {
        outlined destroy of CamBridgeImpl.CaarState((uint64_t)&v45);
        uint64_t v31 = Logger.logObject.getter();
        os_log_type_t v32 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v31, v32))
        {
          int8x16_t v33 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)int8x16_t v33 = 0;
          _os_log_impl(&dword_1B9C64000, v31, v32, "CamBridge: Marking CAM as unsupported as CAM cannot work without CAAR results", v33, 2u);
          MEMORY[0x1BA9E48C0](v33, -1, -1);
        }

        outlined destroy of ReferenceResolutionClientProtocol?(v43, &demangling cache variable for type metadata for CaarProviding?);
        goto LABEL_16;
      }
    }
    outlined destroy of CamBridgeImpl.CaarState((uint64_t)&v45);
    char v35 = specialized static CamBridgeImpl.isCamSupportedOnThisDevice.getter();
    outlined destroy of ReferenceResolutionClientProtocol?(v43, &demangling cache variable for type metadata for CaarProviding?);
    if ((v35 & 1) == 0)
    {
LABEL_16:
      *(void *)(a5 + 144) = 1;
      *(_OWORD *)(a5 + 152) = 0u;
      *(_OWORD *)(a5 + 168) = 0u;
      *(_WORD *)(a5 + 184) = 768;
      goto LABEL_19;
    }
    *(_OWORD *)(a5 + 169) = 0u;
    *(_OWORD *)(a5 + 144) = 0u;
    *(_OWORD *)(a5 + 160) = 0u;
    *(unsigned char *)(a5 + 185) = 3;
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v49, &demangling cache variable for type metadata for CaarProviding?);
    if (v15)
    {
      *(void *)(a5 + 224) = 0;
      *(_OWORD *)(a5 + 192) = 0u;
      *(_OWORD *)(a5 + 208) = 0u;
      *(unsigned char *)(a5 + 232) = 3;
      uint64_t v36 = v43;
      outlined init with copy of ReferenceResolutionClientProtocol?(v43, (uint64_t)&v49, &demangling cache variable for type metadata for CaarProviding?);
      outlined destroy of ReferenceResolutionClientProtocol?(v36, &demangling cache variable for type metadata for CaarProviding?);
      uint64_t v34 = 0;
    }
    else
    {
      uint64_t v34 = 1;
      *(void *)(a5 + 192) = 1;
      *(_OWORD *)(a5 + 200) = 0u;
      *(_OWORD *)(a5 + 216) = 0u;
      *(unsigned char *)(a5 + 232) = 3;
      long long v49 = 0u;
      long long v50 = 0u;
      uint64_t v51 = 0;
      outlined destroy of ReferenceResolutionClientProtocol?(v43, &demangling cache variable for type metadata for CaarProviding?);
    }
    uint64_t v45 = v34;
    int8x16_t v46 = 0u;
    int8x16_t v47 = 0u;
    __int16 v48 = 768;
    outlined init with take of CamBridgeImpl.CamState((long long *)&v45, (_OWORD *)(a5 + 144));
  }
LABEL_19:
  uint64_t v37 = type metadata accessor for UUID();
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56);
  v38(v23, 1, 1, v37);
  v38(v21, 1, 1, v37);
  uint64_t v39 = (uint64_t)v44;
  v38(v44, 1, 1, v37);
  type metadata accessor for CamBridgeState();
  uint64_t v40 = swift_allocObject();
  *(void *)(v40 + 16) = MEMORY[0x1E4FBC868];
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v23, v40 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_requestLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v21, v40 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_camLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v39, v40 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_caarLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  *(void *)(a5 + 240) = v40;
  outlined init with take of ReferenceResolutionClientProtocol(&v55, a5 + 16);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)&v49, a5 + 56, &demangling cache variable for type metadata for CaarProviding?);
  outlined init with take of ReferenceResolutionClientProtocol(&v52, a5 + 104);
  return a5;
}

uint64_t specialized static CamBridgeImpl.isCamSupportedOnThisDevice.getter()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  uint64_t v4 = (unsigned __int8 *)(static CamFeatureFlag.forceEnabled + 16);
  uint64_t v5 = (os_unfair_lock_s *)(static CamFeatureFlag.forceEnabled + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(static CamFeatureFlag.forceEnabled + 20));
  partial apply for closure #1 in CamFeatureFlag.isEnabled.getter(v4, v37);
  os_unfair_lock_unlock(v5);
  uint64_t v6 = LOBYTE(v37[0]);
  if (LOBYTE(v37[0]) == 1)
  {
    id v7 = (id)AFCurrentUserInterfaceIdiom();
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;

    if (v8 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v10 != v11) {
      _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v13 = __swift_project_value_buffer(v0, (uint64_t)static Logger.executor);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v13, v0);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v34 = v3;
    uint64_t v17 = (uint8_t *)v16;
    uint64_t v18 = swift_slowAlloc();
    unsigned int v35 = v6;
    uint64_t v19 = v18;
    v37[0] = v18;
    uint64_t v33 = v0;
    *(_DWORD *)uint64_t v17 = 136315138;
    uint64_t v20 = (unsigned __int8 *)(static CamFeatureFlag.forceEnabled + 16);
    int8x16_t v21 = (os_unfair_lock_s *)(static CamFeatureFlag.forceEnabled + 20);
    os_unfair_lock_lock((os_unfair_lock_t)(static CamFeatureFlag.forceEnabled + 20));
    partial apply for closure #1 in CamFeatureFlag.isEnabled.getter(v20, &v36);
    os_unfair_lock_unlock(v21);
    if ((_BYTE)v36) {
      uint64_t v22 = 3042927;
    }
    else {
      uint64_t v22 = 778462831;
    }
    if ((_BYTE)v36) {
      unint64_t v23 = 0xE300000000000000;
    }
    else {
      unint64_t v23 = 0xE400000000000000;
    }
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v14, v15, "CamBridge: CAM feature flag is %s", v17, 0xCu);
    swift_arrayDestroy();
    uint64_t v24 = v19;
    uint64_t v6 = v35;
    MEMORY[0x1BA9E48C0](v24, -1, -1);
    MEMORY[0x1BA9E48C0](v17, -1, -1);

    (*(void (**)(char *, uint64_t))(v1 + 8))(v34, v33);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  os_log_type_t v25 = static os_log_type_t.default.getter();
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = v25;
  if (os_log_type_enabled(v26, v25))
  {
    os_log_type_t v28 = (uint8_t *)swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v28 = 136315138;
    v37[0] = v29;
    if (v6) {
      uint64_t v30 = 0x6574726F70707573;
    }
    else {
      uint64_t v30 = 0x7070757320746F6ELL;
    }
    if (v6) {
      unint64_t v31 = 0xEA00000000002E64;
    }
    else {
      unint64_t v31 = 0xEE002E646574726FLL;
    }
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v26, v27, "CamBridge: CAM is %s", v28, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v29, -1, -1);
    MEMORY[0x1BA9E48C0](v28, -1, -1);
  }

  return v6;
}

uint64_t sub_1B9DAC4BC()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #2 in CamBridgeImpl.asyncWarmUpIfSupported()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  id v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #2 in CamBridgeImpl.asyncWarmUpIfSupported()(a1, v4, v5, v6);
}

uint64_t sub_1B9DAC5BC()
{
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in CamBridgeImpl.asyncWarmUpIfSupported()()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in CamBridgeImpl.asyncWarmUpIfSupported()();
}

uint64_t outlined init with take of ConversationHelperInput(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ConversationHelperInput(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for implicit closure #2 in CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ConversationHelperInput(0) - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return implicit closure #2 in CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:)(a1, v5, v6, v7, v8);
}

uint64_t sub_1B9DAC804()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @async () -> (@out ParaphraseProbeResult)(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @async () -> (@out ParaphraseProbeResult)
                                              + async function pointer to thunk for @escaping @callee_guaranteed @async () -> (@out ParaphraseProbeResult));
  return v6(a1, v4);
}

uint64_t partial apply for implicit closure #3 in CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ConversationHelperInput(0) - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return implicit closure #3 in CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:)(a1, v5, v6, v7, v8);
}

uint64_t type metadata accessor for RealCamWrapper()
{
  return self;
}

uint64_t type metadata accessor for RealCaarWrapper()
{
  return self;
}

uint64_t sub_1B9DACA3C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(*a1 + 144);
  swift_beginAccess();
  return outlined init with copy of CamBridgeImpl.CamState(v3, a2);
}

uint64_t sub_1B9DACA90@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(*a1 + 192);
  swift_beginAccess();
  return outlined init with copy of CamBridgeImpl.CaarState(v3, a2);
}

uint64_t sub_1B9DACAE4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  *a2 = *(void *)(v3 + 240);
  return swift_retain();
}

uint64_t type metadata accessor for CamBridgeImpl()
{
  return self;
}

uint64_t method lookup function for CamBridgeImpl(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CamBridgeImpl);
}

uint64_t dispatch thunk of CamBridgeImpl.__allocating_init(forceSupported:camProvider:caarProvider:trialExperimentManager:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

__n128 __swift_memcpy42_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for CamBridgeImpl.CamState(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 41);
    if (v4 >= 3) {
      unsigned int v4 = *(_DWORD *)a1 + 3;
    }
    switch(v4)
    {
      case 2u:

        break;
      case 1u:
        __swift_destroy_boxed_opaque_existential_1Tm(a1);
        break;
      case 0u:
        swift_release();
        break;
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 41);
    if (v5 >= 3) {
      unsigned int v5 = *(_DWORD *)a2 + 3;
    }
    if (v5 == 2)
    {
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 41) = 2;
    }
    else if (v5 == 1)
    {
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      *(unsigned char *)(a1 + 41) = 1;
    }
    else if (v5)
    {
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 41) = 0;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CamBridgeImpl.CamState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 42)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 41);
  if (v3 >= 4) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CamBridgeImpl.CamState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 26) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 42) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 42) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 41) = -(char)a2;
    }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for CamBridgeImpl.CamState(uint64_t result, unsigned int a2)
{
  if (a2 > 2)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 41) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CamBridgeImpl.CamState()
{
  return &type metadata for CamBridgeImpl.CamState;
}

uint64_t assignWithCopy for CamBridgeImpl.CaarState(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 3) {
      unsigned int v4 = *(_DWORD *)a1 + 3;
    }
    switch(v4)
    {
      case 2u:

        break;
      case 1u:
        __swift_destroy_boxed_opaque_existential_1Tm(a1);
        break;
      case 0u:
        swift_release();
        break;
    }
    unsigned int v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 3) {
      unsigned int v5 = *(_DWORD *)a2 + 3;
    }
    if (v5 == 2)
    {
      long long v6 = *(void **)a2;
      id v7 = v6;
      *(void *)a1 = v6;
      *(unsigned char *)(a1 + 40) = 2;
    }
    else if (v5 == 1)
    {
      uint64_t v8 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v8;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v8 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 1;
    }
    else if (v5)
    {
      long long v9 = *a2;
      long long v10 = a2[1];
      *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v10;
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 40) = 0;
      swift_retain();
    }
  }
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for CamBridgeImpl.CaarState(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 3) {
      unsigned int v4 = *(_DWORD *)a1 + 3;
    }
    switch(v4)
    {
      case 2u:

        break;
      case 1u:
        __swift_destroy_boxed_opaque_existential_1Tm(a1);
        break;
      case 0u:
        swift_release();
        break;
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 3) {
      unsigned int v5 = *(_DWORD *)a2 + 3;
    }
    if (v5 == 2)
    {
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 40) = 2;
    }
    else if (v5 == 1)
    {
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(unsigned char *)(a1 + 40) = 1;
    }
    else if (v5)
    {
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CamBridgeImpl.CaarState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 4) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CamBridgeImpl.CaarState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for CamBridgeImpl.CaarState(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 3) {
    return (*(_DWORD *)a1 + 3);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for CamBridgeImpl.CaarState(uint64_t result, unsigned int a2)
{
  if (a2 > 2)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CamBridgeImpl.CaarState()
{
  return &type metadata for CamBridgeImpl.CaarState;
}

uint64_t dispatch thunk of CamProviding.provideCamInstance(camEnabledFeatures:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 + 8) + **(int **)(a4 + 8));
  long long v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of CaarProviding.provideCaarInstance()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 8) + **(int **)(a3 + 8));
  long long v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v9(a1, a2, a3);
}

ValueMetadata *type metadata accessor for RealCamProvider()
{
  return &type metadata for RealCamProvider;
}

ValueMetadata *type metadata accessor for RealCaarProvider()
{
  return &type metadata for RealCaarProvider;
}

uint64_t dispatch thunk of CamActionProviding.getCamAction(request:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 + 8) + **(int **)(a4 + 8));
  long long v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of CaarRankingProviding.getCaarRanking(requestId:caarId:rcId:actions:rankerContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a8 + 8) + **(int **)(a8 + 8));
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v17;
  *uint64_t v17 = v8;
  v17[1] = dispatch thunk of CaarRankingProviding.getCaarRanking(requestId:caarId:rcId:actions:rankerContext:);
  return v19(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t dispatch thunk of CaarRankingProviding.getCaarRanking(requestId:caarId:rcId:actions:rankerContext:)(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t method lookup function for RealCamWrapper(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RealCamWrapper);
}

uint64_t dispatch thunk of RealCamWrapper.__allocating_init(wrapping:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t method lookup function for RealCaarWrapper(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RealCaarWrapper);
}

uint64_t dispatch thunk of RealCaarWrapper.__allocating_init(wrapping:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t *initializeBufferWithCopyOfBuffer for ParaphraseProbeResult(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v10 = type metadata accessor for ActionParaphrase();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
    }
  }
  return a1;
}

uint64_t destroy for ParaphraseProbeResult(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 2, v2);
  if (!result)
  {
    uint64_t v4 = type metadata accessor for ActionParaphrase();
    int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    return v5(a1, v4);
  }
  return result;
}

void *initializeWithCopy for ParaphraseProbeResult(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v8 = type metadata accessor for ActionParaphrase();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *assignWithCopy for ParaphraseProbeResult(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 2, v6);
  int v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v13 = type metadata accessor for ActionParaphrase();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 24))(a1, a2, v13);
      return a1;
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)a1, &demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  uint64_t v11 = type metadata accessor for ActionParaphrase();
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

void *initializeWithTake for ParaphraseProbeResult(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v8 = type metadata accessor for ActionParaphrase();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *assignWithTake for ParaphraseProbeResult(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 2, v6);
  int v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v13 = type metadata accessor for ActionParaphrase();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 40))(a1, a2, v13);
      return a1;
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)a1, &demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  uint64_t v11 = type metadata accessor for ActionParaphrase();
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParaphraseProbeResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B9DADE14);
}

uint64_t sub_1B9DADE14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 3) {
    return v5 - 2;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ParaphraseProbeResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B9DADE98);
}

uint64_t sub_1B9DADE98(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 2);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t getEnumTag for ParaphraseProbeResult(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 2, v2);
}

uint64_t destructiveInjectEnumTag for ParaphraseProbeResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 2, v4);
}

uint64_t type metadata completion function for ParaphraseProbeResult()
{
  uint64_t result = type metadata accessor for ActionParaphrase();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t protocol witness for CamProviding.provideCamInstance(camEnabledFeatures:) in conformance RealCamProvider(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t outlined init with copy of ConversationHelperInput(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of ParaphraseProbeResult(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

_OWORD *outlined init with take of CamBridgeImpl.CamState(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(_OWORD *)((char *)a2 + 26) = *(long long *)((char *)a1 + 26);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

unsigned __int8 *partial apply for closure #1 in CamFeatureFlag.isEnabled.getter@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  return closure #1 in CamFeatureFlag.isEnabled.getter(a1, a2);
}

uint64_t CamBridgeState.__allocating_init(requestLoggingId:camLoggingId:caarLoggingId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = MEMORY[0x1E4FBC868];
  outlined init with take of UUID?(a1, v6 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_requestLoggingId);
  outlined init with take of UUID?(a2, v6 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_camLoggingId);
  outlined init with take of UUID?(a3, v6 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_caarLoggingId);
  return v6;
}

SiriKitRuntime::ConversationAction_optional __swiftcall CamBridgeState.getCamAction(rcId:)(Swift::String rcId)
{
  object = rcId._object;
  uint64_t countAndFlagsBits = rcId._countAndFlagsBits;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 16);
  if (*(void *)(v4 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object);
    if (v6) {
      v7.value = *(unsigned char *)(*(void *)(v4 + 56) + v5);
    }
    else {
      v7.value = SiriKitRuntime_ConversationAction_unknownDefault;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v7.value = SiriKitRuntime_ConversationAction_unknownDefault;
  }
  swift_endAccess();
  return v7;
}

uint64_t CamBridgeState.requestLoggingId.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of UUID?(v1 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_requestLoggingId, a1);
}

uint64_t CamBridgeState.camLoggingId.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of UUID?(v1 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_camLoggingId, a1);
}

uint64_t CamBridgeState.caarLoggingId.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of UUID?(v1 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_caarLoggingId, a1);
}

uint64_t CamBridgeState.init(requestLoggingId:camLoggingId:caarLoggingId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = MEMORY[0x1E4FBC868];
  outlined init with take of UUID?(a1, v3 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_requestLoggingId);
  outlined init with take of UUID?(a2, v3 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_camLoggingId);
  outlined init with take of UUID?(a3, v3 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_caarLoggingId);
  return v3;
}

uint64_t CamBridgeState.deinit()
{
  swift_bridgeObjectRelease();
  outlined destroy of UUID?(v0 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_requestLoggingId);
  outlined destroy of UUID?(v0 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_camLoggingId);
  outlined destroy of UUID?(v0 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_caarLoggingId);
  return v0;
}

uint64_t ObjC metadata update function for CamBridgeState()
{
  return type metadata accessor for CamBridgeState();
}

void type metadata completion function for CamBridgeState()
{
  type metadata accessor for UUID?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for CamBridgeState(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CamBridgeState);
}

uint64_t dispatch thunk of CamBridgeState.__allocating_init(requestLoggingId:camLoggingId:caarLoggingId:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

void type metadata accessor for UUID?()
{
  if (!lazy cache variable for type metadata for UUID?)
  {
    type metadata accessor for UUID();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UUID?);
    }
  }
}

uint64_t CamFeatureFlag.isEnabled.getter()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  unint64_t v0 = (unsigned __int8 *)(static CamFeatureFlag.forceEnabled + 16);
  uint64_t v1 = (os_unfair_lock_s *)(static CamFeatureFlag.forceEnabled + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(static CamFeatureFlag.forceEnabled + 20));
  partial apply for closure #1 in CamFeatureFlag.isEnabled.getter(v0, &v3);
  os_unfair_lock_unlock(v1);
  return v3;
}

uint64_t one-time initialization function for forceEnabled()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<Bool?, os_unfair_lock_s>);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 20) = 0;
  *(unsigned char *)(result + 16) = 2;
  static CamFeatureFlag.forceEnabled = result;
  return result;
}

{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<Bool?, os_unfair_lock_s>);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 20) = 0;
  *(unsigned char *)(result + 16) = 2;
  static CaptureSiriXToolOutputFeatureFlag.forceEnabled = result;
  return result;
}

{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<Bool?, os_unfair_lock_s>);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 20) = 0;
  *(unsigned char *)(result + 16) = 2;
  static ConversationBridgeFeatureFlag.forceEnabled = result;
  return result;
}

{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<Bool?, os_unfair_lock_s>);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 20) = 0;
  *(unsigned char *)(result + 16) = 2;
  static FlexibleAnnounceFeatureFlag.forceEnabled = result;
  return result;
}

{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<Bool?, os_unfair_lock_s>);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 20) = 0;
  *(unsigned char *)(result + 16) = 2;
  static SiriCAMAppDisambiguationFeatureFlag.forceEnabled = result;
  return result;
}

{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<Bool?, os_unfair_lock_s>);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 20) = 0;
  *(unsigned char *)(result + 16) = 2;
  static StopRepromptFeatureFlag.forceEnabled = result;
  return result;
}

uint64_t *CamFeatureFlag.forceEnabled.unsafeMutableAddressor()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  return &static CamFeatureFlag.forceEnabled;
}

uint64_t static CamFeatureFlag.forceEnabled.getter()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }

  return swift_retain();
}

const char *CamFeatureFlag.domain.getter()
{
  return "Siri";
}

const char *CamFeatureFlag.feature.getter()
{
  return "conversational_action_manager";
}

unsigned __int8 *closure #1 in CamFeatureFlag.isEnabled.getter@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *result;
  if (v3 == 2)
  {
    SiriKitRuntime::ConversationAction_optional v7 = &type metadata for CamFeatureFlag;
    unint64_t v8 = lazy protocol witness table accessor for type CamFeatureFlag and conformance CamFeatureFlag();
    char v4 = isFeatureEnabled(_:)();
    uint64_t result = (unsigned __int8 *)__swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v6);
    char v5 = v4 & 1;
  }
  else
  {
    char v5 = v3 & 1;
  }
  *a2 = v5;
  return result;
}

uint64_t static CamFeatureFlag.== infix(_:_:)()
{
  return 1;
}

void CamFeatureFlag.hash(into:)()
{
}

Swift::Int CamFeatureFlag.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CamFeatureFlag()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CamFeatureFlag()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CamFeatureFlag()
{
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type CamFeatureFlag and conformance CamFeatureFlag()
{
  unint64_t result = lazy protocol witness table cache variable for type CamFeatureFlag and conformance CamFeatureFlag;
  if (!lazy protocol witness table cache variable for type CamFeatureFlag and conformance CamFeatureFlag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamFeatureFlag and conformance CamFeatureFlag);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CamFeatureFlag and conformance CamFeatureFlag;
  if (!lazy protocol witness table cache variable for type CamFeatureFlag and conformance CamFeatureFlag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamFeatureFlag and conformance CamFeatureFlag);
  }
  return result;
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance CamFeatureFlag()
{
  return "conversational_action_manager";
}

uint64_t getEnumTagSinglePayload for CamFeatureFlag(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for CamFeatureFlag(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B9DAE9D4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t getEnumTag for CamFeatureFlag()
{
  return 0;
}

ValueMetadata *type metadata accessor for CamFeatureFlag()
{
  return &type metadata for CamFeatureFlag;
}

uint64_t CamParse.asLinkParse(userData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v49 = a2;
  uint64_t v5 = type metadata accessor for USOParse();
  uint64_t v46 = *(void *)(v5 - 8);
  uint64_t v47 = v5;
  uint64_t v6 = MEMORY[0x1F4188790](v5);
  os_log_type_t v44 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v45 = (char *)v43 - v8;
  uint64_t v9 = type metadata accessor for Parse();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  __int16 v48 = (void *)((char *)v43 - v14);
  uint64_t v15 = type metadata accessor for CamParse();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v3, v15);
  int v19 = (*(uint64_t (**)(char *, uint64_t))(v16 + 88))(v18, v15);
  int v20 = *MEMORY[0x1E4F9FA48];
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  if (v19 != v20
    || !*(void *)(a1 + 16)
    || (unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014, 0x80000001BA063BF0), (v22 & 1) == 0)
    || (outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v21, (uint64_t)v52), (swift_dynamicCast() & 1) == 0))
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)static Logger.executor);
    os_log_type_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    uint64_t v25 = v9;
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl(&dword_1B9C64000, v32, v33, "CamBridge: Could not retrieve details from RankedAction for constructing a link parse.", v34, 2u);
      MEMORY[0x1BA9E48C0](v34, -1, -1);
    }

    goto LABEL_14;
  }
  uint64_t v23 = v51;
  v43[1] = v50;
  uint64_t v24 = v48;
  CamParse.asSKEParse()(v48);
  uint64_t v25 = v9;
  (*(void (**)(char *, void *, uint64_t))(v10 + 16))(v13, v24, v9);
  if ((*(unsigned int (**)(char *, uint64_t))(v10 + 88))(v13, v9) != *MEMORY[0x1E4FA1F48])
  {
    swift_bridgeObjectRelease();
    uint64_t v38 = *(void (**)(char *, uint64_t))(v10 + 8);
    v38(v13, v25);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    __swift_project_value_buffer(v39, (uint64_t)static Logger.executor);
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v42 = 0;
      _os_log_impl(&dword_1B9C64000, v40, v41, "CamBridge: Could not get USO parse to add to Link Parse", v42, 2u);
      MEMORY[0x1BA9E48C0](v42, -1, -1);
    }

    v38((char *)v48, v25);
LABEL_14:
    uint64_t v35 = 1;
    uint64_t v36 = v49;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v36, v35, 1, v25);
  }
  v43[0] = v23;
  (*(void (**)(char *, uint64_t))(v10 + 96))(v13, v9);
  os_log_type_t v27 = v45;
  uint64_t v26 = v46;
  uint64_t v28 = v47;
  (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v45, v13, v47);
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v44, v27, v28);
  if (*(void *)(a1 + 16))
  {
    unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(0x69746E456B6E696CLL, 0xEE00657079547974);
    if (v30)
    {
      outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v29, (uint64_t)v52);
      swift_dynamicCast();
    }
  }
  uint64_t v36 = v49;
  LinkParse.init(usoParse:actionId:entityId:entityDisplayName:)();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v28);
  (*(void (**)(void *, uint64_t))(v10 + 8))(v48, v25);
  (*(void (**)(uint64_t, void, uint64_t))(v10 + 104))(v36, *MEMORY[0x1E4FA1F50], v25);
  uint64_t v35 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v36, v35, 1, v25);
}

BOOL static ConversationAction.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void ConversationAction.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int ConversationAction.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type ConversationAction and conformance ConversationAction()
{
  unint64_t result = lazy protocol witness table cache variable for type ConversationAction and conformance ConversationAction;
  if (!lazy protocol witness table cache variable for type ConversationAction and conformance ConversationAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationAction and conformance ConversationAction);
  }
  return result;
}

void *assignWithCopy for CamOutput(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of CamOutput((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for Input();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for CamOutput(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of CamOutput((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for Input();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t dispatch thunk of CamBridge.camBridgeState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CamBridge.asyncWarmUpIfSupported()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CamBridge.action(requestId:camId:rcId:speechPackage:rankedActions:inputOrigin:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a10 + 24) + **(int **)(a10 + 24));
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v10 + 16) = v18;
  *uint64_t v18 = v10;
  v18[1] = AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  return v20(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t dispatch thunk of CamBridge.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a11 + 32) + **(int **)(a11 + 32));
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v11 + 16) = v18;
  *uint64_t v18 = v11;
  v18[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v20(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t dispatch thunk of CamBridge.commit(rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 + 40) + **(int **)(a4 + 40));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of CamBridge.commit(action:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 48) + **(int **)(a3 + 48));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of CamBridge.rank(rcId:actions:rankerContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a6 + 56)
                                                                                     + **(int **)(a6 + 56));
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  void *v13 = v6;
  v13[1] = AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  return v15(a1, a2, a3, a4, a5, a6);
}

uint64_t dispatch thunk of CamBridge.setupNewTurn(executionUUID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of CamBridge.cancel()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

unsigned char *storeEnumTagSinglePayload for ConversationAction(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9DAFA1CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

SiriKitRuntime::CAMRootFlowAffinityScorer __swiftcall CAMRootFlowAffinityScorer.init()()
{
  unint64_t v0 = (void *)0x80000001BA062850;
  uint64_t v1 = 0xD000000000000020;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t CAMRootFlowAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  return a1;
}

uint64_t specialized CAMRootFlowAffinityScorer.repeatRecentDialogIntentAffinity(intent:environment:)(unsigned __int8 a1)
{
  int v1 = a1;
  unsigned int v2 = a1 - 1;
  type metadata accessor for RecentDialogsEnvironmentProvider();
  lazy protocol witness table accessor for type RecentDialogsEnvironmentProvider and conformance RecentDialogsEnvironmentProvider();
  uint64_t v3 = *(void *)dispatch thunk of SiriEnvironment.subscript.getter();
  if (v2 > 1)
  {
    char v12 = (*(uint64_t (**)(void))(v3 + 128))();
    swift_release();
    if (v12)
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
      unsigned int v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v6, v7)) {
        goto LABEL_16;
      }
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v24 = v9;
      *(_DWORD *)uint64_t v8 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ALL, 0x80000001BA063C70, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v11 = "CAMRootFlowAffinityScorer: has a dialog to repeat, returning high confidence for %s.";
      goto LABEL_15;
    }
  }
  else
  {
    char v4 = (*(uint64_t (**)(void))(v3 + 152))();
    swift_release();
    if (v4)
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v5 = type metadata accessor for Logger();
      __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
      unsigned int v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v6, v7)) {
        goto LABEL_16;
      }
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315138;
      uint64_t v24 = v9;
      if (v1 == 2) {
        unint64_t v10 = 0x80000001BA063C10;
      }
      else {
        unint64_t v10 = 0x80000001BA063C40;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ALL, v10, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v11 = "CAMRootFlowAffinityScorer: has a dialog to go back to, returning high confidence for %s.";
LABEL_15:
      _os_log_impl(&dword_1B9C64000, v6, v7, v11, v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v9, -1, -1);
      MEMORY[0x1BA9E48C0](v8, -1, -1);
LABEL_16:

      return 3;
    }
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    uint64_t v24 = v19;
    *(_DWORD *)uint64_t v18 = 136315138;
    unint64_t v20 = 0x80000001BA063C40;
    if (v1 != 1) {
      unint64_t v20 = 0x80000001BA063C10;
    }
    if (v1) {
      unint64_t v21 = v20;
    }
    else {
      unint64_t v21 = 0x80000001BA063C70;
    }
    uint64_t v22 = v19;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ALL, v21, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v16, v17, "CAMRootFlowAffinityScorer: no replayable recent dialogs for %s, returning low confidence.", v18, 0xCu);
    uint64_t v14 = 1;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v22, -1, -1);
    MEMORY[0x1BA9E48C0](v18, -1, -1);
  }
  else
  {

    return 1;
  }
  return v14;
}

uint64_t specialized CAMRootFlowAffinityScorer.taskInterruptionAffinity(input:environemnt:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v65 = *(void *)(v2 - 8);
  uint64_t v66 = v2;
  MEMORY[0x1F4188790](v2);
  unint64_t v62 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for USOParse();
  uint64_t v63 = *(void *)(v4 - 8);
  uint64_t v64 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v61 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Input();
  uint64_t v71 = *(void *)(v6 - 8);
  uint64_t v72 = v6;
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v69 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v70 = (char *)&v59 - v9;
  uint64_t v10 = type metadata accessor for UniversalActionFeatureFlags();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Parse();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  unint64_t v67 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  unint64_t v20 = (char *)&v59 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v59 - v21;
  Input.parse.getter();
  char v23 = Parse.hasDirectDismissal.getter();
  uint64_t v68 = v15;
  uint64_t v24 = *(void (**)(char *, uint64_t))(v15 + 8);
  v24(v22, v14);
  if ((v23 & 1) == 0)
  {
    Input.parse.getter();
    char v30 = Parse.hasThankYou.getter();
    v24(v22, v14);
    if (v30)
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for Logger();
      __swift_project_value_buffer(v31, (uint64_t)static Logger.executor);
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v28 = 0;
        unint64_t v29 = "CAMRootFlowAffinityScorer Got thank you.";
        goto LABEL_11;
      }
LABEL_13:
      uint64_t v32 = 3;
      goto LABEL_14;
    }
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E4FA1E48], v10);
    char v34 = UniversalActionFeatureFlags.isEnabled.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v36 = v70;
    uint64_t v35 = v71;
    uint64_t v60 = *(void (**)(char *, uint64_t, uint64_t))(v71 + 16);
    v60(v70, a1, v72);
    if (v34)
    {
      Input.parse.getter();
      char v37 = Parse.hasCancelled.getter();
      v24(v20, v14);
      uint64_t v38 = v69;
      v60(v69, (uint64_t)v36, v72);
      if (v37)
      {
        uint64_t v39 = v72;
        uint64_t v40 = *(void (**)(char *, uint64_t))(v71 + 8);
        v40(v38, v72);
        v40(v36, v39);
LABEL_21:
        uint64_t v45 = v67;
        Input.parse.getter();
        uint64_t v46 = v68;
        if ((*(unsigned int (**)(char *, uint64_t))(v68 + 88))(v45, v14) == *MEMORY[0x1E4FA1F48])
        {
          (*(void (**)(char *, uint64_t))(v46 + 96))(v45, v14);
          uint64_t v47 = v63;
          __int16 v48 = v61;
          uint64_t v49 = v45;
          uint64_t v50 = v64;
          (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v61, v49, v64);
          uint64_t v51 = v62;
          uint64_t v52 = USOParse.userParse.getter();
          uint64_t v53 = MEMORY[0x1BA9DE000](v52);
          (*(void (**)(char *, uint64_t))(v65 + 8))(v51, v66);
          unint64_t v54 = *(void *)(v53 + 16);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v50);
          if (v54 > 1) {
            return 0;
          }
        }
        else
        {
          v24(v45, v14);
        }
        if (one-time initialization token for executor != -1) {
          swift_once();
        }
        uint64_t v57 = type metadata accessor for Logger();
        __swift_project_value_buffer(v57, (uint64_t)static Logger.executor);
        uint64_t v26 = Logger.logObject.getter();
        os_log_type_t v58 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v26, v58))
        {
          uint64_t v32 = 1;
          goto LABEL_14;
        }
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v28 = 0;
        _os_log_impl(&dword_1B9C64000, v26, v58, "CAMRootFlowAffinityScorer Got user cancelled.", v28, 2u);
        uint64_t v32 = 1;
        goto LABEL_12;
      }
      Input.parse.getter();
      char v41 = Parse.hasRejected.getter();
      v24(v22, v14);
      uint64_t v42 = *(void (**)(char *, uint64_t))(v71 + 8);
      uint64_t v43 = v38;
      uint64_t v44 = v72;
      v42(v43, v72);
      v42(v36, v44);
      if (v41) {
        goto LABEL_21;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v72);
    }
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v55 = type metadata accessor for Logger();
    __swift_project_value_buffer(v55, (uint64_t)static Logger.executor);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v26, v56))
    {
      uint64_t v32 = 0;
      goto LABEL_14;
    }
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v28 = 0;
    _os_log_impl(&dword_1B9C64000, v26, v56, "CAMRootFlowAffinityScorer Got an unsupported universal action.", v28, 2u);
    uint64_t v32 = 0;
    goto LABEL_12;
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.executor);
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v26, v27)) {
    goto LABEL_13;
  }
  uint64_t v28 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v28 = 0;
  unint64_t v29 = "CAMRootFlowAffinityScorer Got direct dismissal.";
LABEL_11:
  _os_log_impl(&dword_1B9C64000, v26, v27, v29, v28, 2u);
  uint64_t v32 = 3;
LABEL_12:
  MEMORY[0x1BA9E48C0](v28, -1, -1);
LABEL_14:

  return v32;
}

uint64_t specialized CAMRootFlowAffinityScorer.score(input:environment:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Parse();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  unsigned __int8 v6 = specialized static RepeatRecentDialogIntent.fromParse(_:)((uint64_t)v5);
  uint64_t v7 = *(void (**)(char *, uint64_t))(v3 + 8);
  v7(v5, v2);
  if (v6 != 3) {
    return specialized CAMRootFlowAffinityScorer.repeatRecentDialogIntentAffinity(intent:environment:)(v6);
  }
  Input.parse.getter();
  char v8 = Parse.interpretableAsUniversalAction.getter();
  v7(v5, v2);
  if (v8) {
    return specialized CAMRootFlowAffinityScorer.taskInterruptionAffinity(input:environemnt:)(a1);
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.executor);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v9 = 2;
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_1B9C64000, v11, v12, "CAMRootFlowAffinityScorer: not a universal action special case, returning default score.", v13, 2u);
    MEMORY[0x1BA9E48C0](v13, -1, -1);
  }
  else
  {

    return 2;
  }
  return v9;
}

ValueMetadata *type metadata accessor for CAMRootFlowAffinityScorer()
{
  return &type metadata for CAMRootFlowAffinityScorer;
}

unint64_t lazy protocol witness table accessor for type RecentDialogsEnvironmentProvider and conformance RecentDialogsEnvironmentProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type RecentDialogsEnvironmentProvider and conformance RecentDialogsEnvironmentProvider;
  if (!lazy protocol witness table cache variable for type RecentDialogsEnvironmentProvider and conformance RecentDialogsEnvironmentProvider)
  {
    type metadata accessor for RecentDialogsEnvironmentProvider();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RecentDialogsEnvironmentProvider and conformance RecentDialogsEnvironmentProvider);
  }
  return result;
}

uint64_t CancelExecutionTurn.executionRequestId.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CancelExecutionTurn.__allocating_init(executionRequestId:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t CancelExecutionTurn.init(executionRequestId:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return v2;
}

uint64_t CancelExecutionTurn.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CancelExecutionTurn()
{
  return CancelExecutionTurn.debugDescription.getter();
}

uint64_t method lookup function for CancelExecutionTurn(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CancelExecutionTurn);
}

uint64_t dispatch thunk of CancelExecutionTurn.__allocating_init(executionRequestId:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t CandidateRequestMessage.message.getter(unint64_t a1)
{
  uint64_t v1 = a1;
  switch(a1 >> 61)
  {
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
      uint64_t v2 = (void *)(a1 & 0x1FFFFFFFFFFFFFFFLL);
      uint64_t v1 = a1 & 0x1FFFFFFFFFFFFFFFLL;
      break;
    default:
      uint64_t v2 = (void *)(a1 & 0x1FFFFFFFFFFFFFFFLL);
      break;
  }
  id v3 = v2;
  return v1;
}

void *initializeBufferWithCopyOfBuffer for CandidateRequestMessage(void *a1, void *a2)
{
  id v3 = (void *)(*a2 & 0x1FFFFFFFFFFFFFFFLL);
  *a1 = *a2;
  id v4 = v3;
  return a1;
}

void destroy for CandidateRequestMessage(void *a1)
{
}

uint64_t *assignWithCopy for CandidateRequestMessage(uint64_t *a1, uint64_t *a2)
{
  id v3 = (void *)(*a2 & 0x1FFFFFFFFFFFFFFFLL);
  uint64_t v4 = *a1;
  *a1 = *a2;
  uint64_t v5 = (void *)(v4 & 0x1FFFFFFFFFFFFFFFLL);
  id v6 = v3;

  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t *assignWithTake for CandidateRequestMessage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for CandidateRequestMessage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7A && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 122);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 4) | (8 * ((*(void *)a1 >> 57) & 8 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x79) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for CandidateRequestMessage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x79)
  {
    *(void *)uint64_t result = a2 - 122;
    if (a3 >= 0x7A) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7A) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 3) & 0xF | (16 * (-a2 & 0x7F));
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for CandidateRequestMessage(void *a1)
{
  return *a1 >> 61;
}

void *destructiveProjectEnumData for CandidateRequestMessage(void *result)
{
  *result &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t *destructiveInjectEnumTag for CandidateRequestMessage(uint64_t *result, uint64_t a2)
{
  *uint64_t result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 61);
  return result;
}

ValueMetadata *type metadata accessor for CandidateRequestMessage()
{
  return &type metadata for CandidateRequestMessage;
}

uint64_t *CaptureSiriXToolOutputFeatureFlag.forceEnabled.unsafeMutableAddressor()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  return &static CaptureSiriXToolOutputFeatureFlag.forceEnabled;
}

uint64_t static CaptureSiriXToolOutputFeatureFlag.forceEnabled.getter()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }

  return swift_retain();
}

const char *CaptureSiriXToolOutputFeatureFlag.domain.getter()
{
  return "Siri";
}

const char *CaptureSiriXToolOutputFeatureFlag.feature.getter()
{
  return "captureSiriXToolOutput";
}

uint64_t CaptureSiriXToolOutputFeatureFlag.isEnabled.getter()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  uint64_t v0 = (unsigned __int8 *)(static CaptureSiriXToolOutputFeatureFlag.forceEnabled + 16);
  uint64_t v1 = (os_unfair_lock_s *)(static CaptureSiriXToolOutputFeatureFlag.forceEnabled + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(static CaptureSiriXToolOutputFeatureFlag.forceEnabled + 20));
  partial apply for closure #1 in CaptureSiriXToolOutputFeatureFlag.isEnabled.getter(v0, &v3);
  os_unfair_lock_unlock(v1);
  return v3;
}

unsigned __int8 *closure #1 in CaptureSiriXToolOutputFeatureFlag.isEnabled.getter@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *result;
  if (v3 == 2)
  {
    uint64_t v7 = &type metadata for CaptureSiriXToolOutputFeatureFlag;
    unint64_t v8 = lazy protocol witness table accessor for type CaptureSiriXToolOutputFeatureFlag and conformance CaptureSiriXToolOutputFeatureFlag();
    char v4 = isFeatureEnabled(_:)();
    uint64_t result = (unsigned __int8 *)__swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v6);
    char v5 = v4 & 1;
  }
  else
  {
    char v5 = v3 & 1;
  }
  *a2 = v5;
  return result;
}

unsigned __int8 *partial apply for closure #1 in CaptureSiriXToolOutputFeatureFlag.isEnabled.getter@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  return closure #1 in CaptureSiriXToolOutputFeatureFlag.isEnabled.getter(a1, a2);
}

uint64_t static CaptureSiriXToolOutputFeatureFlag.== infix(_:_:)()
{
  return 1;
}

void CaptureSiriXToolOutputFeatureFlag.hash(into:)()
{
}

Swift::Int CaptureSiriXToolOutputFeatureFlag.hashValue.getter()
{
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type CaptureSiriXToolOutputFeatureFlag and conformance CaptureSiriXToolOutputFeatureFlag()
{
  unint64_t result = lazy protocol witness table cache variable for type CaptureSiriXToolOutputFeatureFlag and conformance CaptureSiriXToolOutputFeatureFlag;
  if (!lazy protocol witness table cache variable for type CaptureSiriXToolOutputFeatureFlag and conformance CaptureSiriXToolOutputFeatureFlag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CaptureSiriXToolOutputFeatureFlag and conformance CaptureSiriXToolOutputFeatureFlag);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CaptureSiriXToolOutputFeatureFlag and conformance CaptureSiriXToolOutputFeatureFlag;
  if (!lazy protocol witness table cache variable for type CaptureSiriXToolOutputFeatureFlag and conformance CaptureSiriXToolOutputFeatureFlag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CaptureSiriXToolOutputFeatureFlag and conformance CaptureSiriXToolOutputFeatureFlag);
  }
  return result;
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance CaptureSiriXToolOutputFeatureFlag()
{
  return "captureSiriXToolOutput";
}

unsigned char *storeEnumTagSinglePayload for CaptureSiriXToolOutputFeatureFlag(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B9DB1154);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CaptureSiriXToolOutputFeatureFlag()
{
  return &type metadata for CaptureSiriXToolOutputFeatureFlag;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShySSG_SS9namespace_SSSg5valuets5NeverOTg5038_sS3SSgIggoo_S2S9namespace_AA5valuets5F174OIegnrzr_TR150_s12SiriOntology7UsoTaskC0A10KitRuntimeE35firstCarCommandsUserVocabIdentifier33_62490FE03E7AB891D874A741A997DD8CLLAA12SpanPropertyVSgvgSS_SSSgtSSXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (!v1) {
    return v2;
  }
  uint64_t v19 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t v2 = v19;
  uint64_t result = specialized Set.startIndex.getter(a1);
  int64_t v5 = result;
  int v7 = v6;
  char v9 = v8 & 1;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(unsigned char *)(a1 + 32))
  {
    if (((*(void *)(a1 + 56 + (((unint64_t)v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v5) & 1) == 0) {
      goto LABEL_13;
    }
    if (*(_DWORD *)(a1 + 36) != v7) {
      goto LABEL_14;
    }
    char v18 = v9;
    uint64_t v10 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v5);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    unint64_t v14 = *(void *)(v19 + 16);
    unint64_t v13 = *(void *)(v19 + 24);
    swift_bridgeObjectRetain();
    if (v14 >= v13 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
    }
    *(void *)(v19 + 16) = v14 + 1;
    uint64_t v15 = (void *)(v19 + 32 * v14);
    v15[4] = v11;
    v15[5] = v12;
    v15[6] = 0;
    v15[7] = 0;
    uint64_t result = specialized _NativeSet.index(after:)(v5, v7, v18 & 1, a1);
    int64_t v5 = result;
    int v7 = v16;
    char v9 = v17 & 1;
    if (!--v1)
    {
      outlined consume of Set<String>.Index._Variant(result, v16, v9);
      return v2;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

SiriKitRuntime::CarCommandsAffinityScorer __swiftcall CarCommandsAffinityScorer.init()()
{
  uint64_t v0 = (void *)0x80000001BA062880;
  uint64_t v1 = 0xD00000000000002CLL;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t one-time initialization function for kDonatedVocabNamespaceMatches()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BA04FD90;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v1;
  Swift::Int v2 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  uint64_t result = swift_arrayDestroy();
  static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches = v2;
  return result;
}

uint64_t *CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.unsafeMutableAddressor()
{
  if (one-time initialization token for kDonatedVocabNamespaceMatches != -1) {
    swift_once();
  }
  return &static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches;
}

uint64_t static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kDonatedVocabNamespaceMatches);
}

uint64_t one-time initialization function for kUserEntityNamespaceMatches()
{
  Swift::Int v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kUserEntityNamespaceMatches);
  uint64_t result = swift_arrayDestroy();
  static CarCommandsAffinityScorer.kUserEntityNamespaceMatches = v0;
  return result;
}

uint64_t *CarCommandsAffinityScorer.kUserEntityNamespaceMatches.unsafeMutableAddressor()
{
  if (one-time initialization token for kUserEntityNamespaceMatches != -1) {
    swift_once();
  }
  return &static CarCommandsAffinityScorer.kUserEntityNamespaceMatches;
}

uint64_t static CarCommandsAffinityScorer.kUserEntityNamespaceMatches.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kUserEntityNamespaceMatches);
}

uint64_t one-time initialization function for kSettingsNamespaceMatches()
{
  Swift::Int v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kSettingsNamespaceMatches);
  uint64_t result = swift_arrayDestroy();
  static CarCommandsAffinityScorer.kSettingsNamespaceMatches = v0;
  return result;
}

uint64_t *CarCommandsAffinityScorer.kSettingsNamespaceMatches.unsafeMutableAddressor()
{
  if (one-time initialization token for kSettingsNamespaceMatches != -1) {
    swift_once();
  }
  return &static CarCommandsAffinityScorer.kSettingsNamespaceMatches;
}

uint64_t static CarCommandsAffinityScorer.kSettingsNamespaceMatches.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kSettingsNamespaceMatches);
}

uint64_t one-time initialization function for kAppNameMatches()
{
  Swift::Int v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kAppNameMatches);
  uint64_t result = swift_arrayDestroy();
  static CarCommandsAffinityScorer.kAppNameMatches = v0;
  return result;
}

uint64_t *CarCommandsAffinityScorer.kAppNameMatches.unsafeMutableAddressor()
{
  if (one-time initialization token for kAppNameMatches != -1) {
    swift_once();
  }
  return &static CarCommandsAffinityScorer.kAppNameMatches;
}

uint64_t static CarCommandsAffinityScorer.kAppNameMatches.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kAppNameMatches);
}

uint64_t one-time initialization function for kFloatSettingValuesForVolume()
{
  Swift::Int v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kFloatSettingValuesForVolume);
  uint64_t result = swift_arrayDestroy();
  static CarCommandsAffinityScorer.kFloatSettingValuesForVolume = v0;
  return result;
}

uint64_t *CarCommandsAffinityScorer.kFloatSettingValuesForVolume.unsafeMutableAddressor()
{
  if (one-time initialization token for kFloatSettingValuesForVolume != -1) {
    swift_once();
  }
  return &static CarCommandsAffinityScorer.kFloatSettingValuesForVolume;
}

uint64_t static CarCommandsAffinityScorer.kFloatSettingValuesForVolume.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kFloatSettingValuesForVolume);
}

uint64_t one-time initialization function for kRadioLabels()
{
  Swift::Int v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kRadioLabels);
  uint64_t result = swift_arrayDestroy();
  static CarCommandsAffinityScorer.kRadioLabels = v0;
  return result;
}

uint64_t *CarCommandsAffinityScorer.kRadioLabels.unsafeMutableAddressor()
{
  if (one-time initialization token for kRadioLabels != -1) {
    swift_once();
  }
  return &static CarCommandsAffinityScorer.kRadioLabels;
}

uint64_t static CarCommandsAffinityScorer.kRadioLabels.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kRadioLabels);
}

uint64_t static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

uint64_t CarCommandsAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  return a1;
}

uint64_t CarCommandsAffinityScoringData.init(usoTask:)@<X0>(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = UsoTask.namesNodeAttachmentInfo()();
  *(void *)(a1 + 8) = v2;
  uint64_t v3 = type metadata accessor for CarCommandsAffinityScoringData();
  char v4 = UsoTask.settingSpanInfo()(a1 + *(int *)(v3 + 28));
  uint64_t result = swift_release();
  *(unsigned char *)(a1 + 16) = v4 & 1;
  return result;
}

BOOL CarCommandsAffinityScorer.hasOverrideMatch(on:with:in:)(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4, uint64_t a5)
{
  os_log_t v172 = a4;
  uint64_t v173 = a5;
  uint64_t v169 = a2;
  uint64_t v170 = a3;
  uint64_t v167 = type metadata accessor for CarCommandsAffinityScoringData();
  uint64_t v5 = MEMORY[0x1F4188790](v167);
  unsigned int v162 = (unsigned __int8 *)&v158 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v168 = (uint64_t)&v158 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpanProperty?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  int64_t v163 = (int64_t)&v158 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  int64_t v165 = (int64_t)&v158 - v12;
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v158 - v14;
  MEMORY[0x1F4188790](v13);
  char v17 = (char *)&v158 - v16;
  uint64_t v18 = type metadata accessor for SpanProperty();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v159 = (char *)&v158 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v160 = (char *)&v158 - v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v158 = (char *)&v158 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v164 = (char *)&v158 - v27;
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v161 = (char *)&v158 - v29;
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  unsigned int v166 = (char *)&v158 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v171 = (char *)&v158 - v33;
  uint64_t v34 = MEMORY[0x1F4188790](v32);
  uint64_t v36 = (char *)&v158 - v35;
  MEMORY[0x1F4188790](v34);
  uint64_t v38 = (char *)&v158 - v37;
  if (one-time initialization token for kDonatedVocabNamespaceMatches != -1) {
    swift_once();
  }
  uint64_t v39 = swift_bridgeObjectRetain();
  uint64_t v40 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShySSG_SS9namespace_SSSg5valuets5NeverOTg5038_sS3SSgIggoo_S2S9namespace_AA5valuets5F174OIegnrzr_TR150_s12SiriOntology7UsoTaskC0A10KitRuntimeE35firstCarCommandsUserVocabIdentifier33_62490FE03E7AB891D874A741A997DD8CLLAA12SpanPropertyVSgvgSS_SSSgtSSXEfU_Tf3nnnpf_nTf1cn_n(v39);
  swift_bridgeObjectRelease();
  UsoTask.firstUserEntityMatch(on:)(v40, (uint64_t)v17);
  swift_bridgeObjectRelease();
  char v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  uint64_t v42 = v18;
  if (v41((uint64_t)v17, 1, v18) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v17, &demangling cache variable for type metadata for SpanProperty?);
    if (UsoTask.hasCarPlayCannedDialog.getter())
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v43 = type metadata accessor for Logger();
      __swift_project_value_buffer(v43, (uint64_t)static Logger.executor);
      uint64_t v44 = v173;
      swift_bridgeObjectRetain_n();
      uint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        uint64_t v48 = swift_slowAlloc();
        uint64_t v175 = v44;
        uint64_t v176 = v48;
        *(_DWORD *)uint64_t v47 = 136315138;
        os_log_t v174 = v172;
        swift_bridgeObjectRetain();
        uint64_t v49 = String.init<A>(describing:)();
        os_log_t v174 = (os_log_t)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, &v176);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v45, v46, "%s found CarPlay canned dialog", v47, 0xCu);
        uint64_t v51 = 1;
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v48, -1, -1);
        MEMORY[0x1BA9E48C0](v47, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        return 1;
      }
      return v51;
    }
    uint64_t v68 = v18;
    SiriEnvironment.currentDevice.getter();
    char v69 = dispatch thunk of CurrentDevice.supportsVehicleData.getter();
    swift_release();
    if ((v69 & 1) == 0) {
      return 0;
    }
    uint64_t v70 = (unsigned __int8 *)v169;
    if (CarCommandsAffinityScoringData.hasFullyAttachedNamesNodeWithoutUnattachedSettingSpan.getter())
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v71 = type metadata accessor for Logger();
      __swift_project_value_buffer(v71, (uint64_t)static Logger.executor);
      uint64_t v72 = v168;
      outlined init with copy of CarCommandsAffinityScoringData((uint64_t)v70, v168);
      uint64_t v73 = v173;
      swift_bridgeObjectRetain_n();
      uint64_t v74 = Logger.logObject.getter();
      os_log_type_t v75 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v74, v75))
      {
        uint64_t v76 = swift_slowAlloc();
        uint64_t v77 = swift_slowAlloc();
        uint64_t v175 = v73;
        uint64_t v176 = v77;
        *(_DWORD *)uint64_t v76 = 136315394;
        os_log_t v174 = v172;
        swift_bridgeObjectRetain();
        uint64_t v78 = String.init<A>(describing:)();
        os_log_t v174 = (os_log_t)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v79, &v176);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v76 + 12) = 2080;
        uint64_t v80 = type metadata accessor for UsoEntitySpan();
        uint64_t v81 = swift_bridgeObjectRetain();
        uint64_t v82 = MEMORY[0x1BA9E3080](v81, v80);
        unint64_t v84 = v83;
        swift_bridgeObjectRelease();
        os_log_t v174 = (os_log_t)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v82, v84, &v176);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of CarCommandsAffinityScoringData(v72);
        _os_log_impl(&dword_1B9C64000, v74, v75, "%s found fully attached CarCommandsUserEntityNouns while connected to a vehicle that supports vehicle data (%s)", (uint8_t *)v76, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v77, -1, -1);
        MEMORY[0x1BA9E48C0](v76, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
        outlined destroy of CarCommandsAffinityScoringData(v72);
      }

      return 1;
    }
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)&v70[*(int *)(v167 + 28)], (uint64_t)v15, &demangling cache variable for type metadata for SpanProperty?);
    uint64_t v86 = v18;
    unint64_t v87 = v41;
    if (v41((uint64_t)v15, 1, v18) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v15, &demangling cache variable for type metadata for SpanProperty?);
      goto LABEL_30;
    }
    char v88 = v166;
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v166, v15, v18);
    int v89 = *v70;
    uint64_t v90 = v162;
    outlined init with copy of CarCommandsAffinityScoringData((uint64_t)v70, (uint64_t)v162);
    if (v89 == 4)
    {
      outlined destroy of CarCommandsAffinityScoringData((uint64_t)v90);
    }
    else
    {
      int v91 = *v90;
      outlined destroy of CarCommandsAffinityScoringData((uint64_t)v90);
      if (v91)
      {
        (*(void (**)(char *, uint64_t))(v19 + 8))(v88, v68);
LABEL_30:
        Swift::Int v92 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of CarCommandsAffinityScorer.hasOverrideMatch(on:with:in:));
        swift_arrayDestroy();
        uint64_t v93 = v165;
        UsoTask.firstSettingMatch(on:)(v92, v165);
        swift_bridgeObjectRelease();
        uint64_t v94 = v68;
        if (v87(v93, 1, v68) == 1)
        {
          outlined destroy of ReferenceResolutionClientProtocol?(v93, &demangling cache variable for type metadata for SpanProperty?);
          goto LABEL_47;
        }
        int64_t v112 = v164;
        (*(void (**)(char *, uint64_t, uint64_t))(v19 + 32))(v164, v93, v68);
        uint64_t v113 = SpanProperty.valueString.getter();
        if (v114)
        {
          uint64_t v115 = v113;
          uint64_t v116 = v114;
          if (one-time initialization token for kFloatSettingValuesForVolume != -1) {
            swift_once();
          }
          char v117 = specialized Set.contains(_:)(v115, v116, static CarCommandsAffinityScorer.kFloatSettingValuesForVolume);
          swift_bridgeObjectRelease();
          uint64_t v94 = v68;
          if (v117)
          {
            if (one-time initialization token for executor != -1) {
              swift_once();
            }
            uint64_t v118 = type metadata accessor for Logger();
            __swift_project_value_buffer(v118, (uint64_t)static Logger.executor);
            uint64_t v119 = v19;
            uint64_t v120 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
            uint64_t v121 = v158;
            uint64_t v122 = v164;
            v120(v158, v164, v68);
            uint64_t v123 = v173;
            swift_bridgeObjectRetain_n();
            uint64_t v124 = Logger.logObject.getter();
            os_log_type_t v125 = static os_log_type_t.debug.getter();
            int v126 = v125;
            if (!os_log_type_enabled(v124, v125))
            {
LABEL_65:

              char v135 = *(void (**)(char *, uint64_t))(v119 + 8);
              v135(v121, v94);
              swift_bridgeObjectRelease_n();
              unsigned int v136 = v122;
              goto LABEL_66;
            }
            uint64_t v127 = swift_slowAlloc();
            LODWORD(v170) = v126;
            uint64_t v128 = v127;
            uint64_t v169 = swift_slowAlloc();
            uint64_t v175 = v123;
            uint64_t v176 = v169;
            *(_DWORD *)uint64_t v128 = 136315394;
            os_log_t v174 = v172;
            swift_bridgeObjectRetain();
            os_log_t v172 = v124;
            uint64_t v129 = String.init<A>(describing:)();
            os_log_t v174 = (os_log_t)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v129, v130, &v176);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v128 + 12) = 2080;
            v120(v171, v121, v68);
            uint64_t v131 = String.init<A>(describing:)();
            os_log_t v174 = (os_log_t)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v131, v132, &v176);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            uint64_t v108 = *(void (**)(char *, uint64_t))(v19 + 8);
            v108(v121, v68);
            os_log_t v133 = v172;
            _os_log_impl(&dword_1B9C64000, v172, (os_log_type_t)v170, "%s found a volume related setting name while connected to a vehicle that supports vehicle data (%s)", (uint8_t *)v128, 0x16u);
            uint64_t v134 = v169;
            swift_arrayDestroy();
            MEMORY[0x1BA9E48C0](v134, -1, -1);
            MEMORY[0x1BA9E48C0](v128, -1, -1);

            uint64_t v111 = v164;
LABEL_57:
            v108(v111, v94);
            return 1;
          }
          (*(void (**)(char *, uint64_t))(v19 + 8))(v164, v68);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v19 + 8))(v112, v68);
        }
LABEL_47:
        Swift::Int v137 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #1 of CarCommandsAffinityScorer.hasOverrideMatch(on:with:in:));
        swift_arrayDestroy();
        uint64_t v138 = v163;
        UsoTask.firstSettingMatch(on:)(v137, v163);
        swift_bridgeObjectRelease();
        if (v87(v138, 1, v94) == 1)
        {
          outlined destroy of ReferenceResolutionClientProtocol?(v138, &demangling cache variable for type metadata for SpanProperty?);
          goto LABEL_59;
        }
        uint64_t v119 = v19;
        uint64_t v122 = v160;
        (*(void (**)(char *, uint64_t, uint64_t))(v19 + 32))(v160, v138, v94);
        uint64_t v139 = SpanProperty.valueString.getter();
        if (!v140) {
          goto LABEL_58;
        }
        uint64_t v141 = v139;
        uint64_t v142 = v140;
        if (one-time initialization token for kFloatSettingValuesForVolume != -1) {
          swift_once();
        }
        char v143 = specialized Set.contains(_:)(v141, v142, static CarCommandsAffinityScorer.kFloatSettingValuesForVolume);
        swift_bridgeObjectRelease();
        uint64_t v121 = v159;
        if ((v143 & 1) == 0)
        {
LABEL_58:
          (*(void (**)(char *, uint64_t))(v19 + 8))(v122, v94);
LABEL_59:
          if (one-time initialization token for kRadioLabels != -1) {
            swift_once();
          }
          return (UsoTask.isValidRadioParse(namespaces:)(static CarCommandsAffinityScorer.kRadioLabels) & 1) != 0;
        }
        if (one-time initialization token for executor != -1) {
          swift_once();
        }
        uint64_t v144 = type metadata accessor for Logger();
        __swift_project_value_buffer(v144, (uint64_t)static Logger.executor);
        uint64_t v145 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
        v145(v121, v122, v94);
        uint64_t v146 = v173;
        swift_bridgeObjectRetain_n();
        uint64_t v124 = Logger.logObject.getter();
        os_log_type_t v147 = static os_log_type_t.debug.getter();
        int v148 = v147;
        if (os_log_type_enabled(v124, v147))
        {
          uint64_t v149 = swift_slowAlloc();
          LODWORD(v170) = v148;
          uint64_t v150 = v149;
          uint64_t v169 = swift_slowAlloc();
          uint64_t v175 = v146;
          uint64_t v176 = v169;
          *(_DWORD *)uint64_t v150 = 136315394;
          os_log_t v174 = v172;
          swift_bridgeObjectRetain();
          uint64_t v151 = String.init<A>(describing:)();
          os_log_t v172 = v124;
          os_log_t v174 = (os_log_t)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v151, v152, &v176);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v150 + 12) = 2080;
          v145(v171, v121, v94);
          uint64_t v153 = String.init<A>(describing:)();
          os_log_t v174 = (os_log_t)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v153, v154, &v176);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v108 = *(void (**)(char *, uint64_t))(v19 + 8);
          v108(v121, v94);
          os_log_t v155 = v172;
          _os_log_impl(&dword_1B9C64000, v172, (os_log_type_t)v170, "%s found a volume related setting state while connected to a vehicle that supports vehicle data (%s)", (uint8_t *)v150, 0x16u);
          uint64_t v156 = v169;
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v156, -1, -1);
          MEMORY[0x1BA9E48C0](v150, -1, -1);

          uint64_t v111 = v160;
          goto LABEL_57;
        }
        goto LABEL_65;
      }
    }
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v95 = type metadata accessor for Logger();
    __swift_project_value_buffer(v95, (uint64_t)static Logger.executor);
    int64_t v96 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
    uint64_t v97 = v161;
    v96(v161, v88, v86);
    uint64_t v98 = v173;
    swift_bridgeObjectRetain_n();
    int64_t v99 = Logger.logObject.getter();
    os_log_type_t v100 = static os_log_type_t.debug.getter();
    uint64_t v94 = v86;
    int v101 = v100;
    if (!os_log_type_enabled(v99, v100))
    {

      char v135 = *(void (**)(char *, uint64_t))(v19 + 8);
      v135(v97, v86);
      swift_bridgeObjectRelease_n();
      unsigned int v136 = v88;
LABEL_66:
      v135(v136, v94);
      return 1;
    }
    uint64_t v102 = swift_slowAlloc();
    LODWORD(v170) = v101;
    uint64_t v103 = v102;
    uint64_t v169 = swift_slowAlloc();
    uint64_t v175 = v98;
    uint64_t v176 = v169;
    *(_DWORD *)uint64_t v103 = 136315394;
    os_log_t v174 = v172;
    swift_bridgeObjectRetain();
    os_log_t v172 = v99;
    uint64_t v104 = String.init<A>(describing:)();
    os_log_t v174 = (os_log_t)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v104, v105, &v176);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v103 + 12) = 2080;
    v96(v171, v97, v86);
    uint64_t v106 = String.init<A>(describing:)();
    os_log_t v174 = (os_log_t)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v106, v107, &v176);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v108 = *(void (**)(char *, uint64_t))(v19 + 8);
    v108(v97, v86);
    os_log_t v109 = v172;
    _os_log_impl(&dword_1B9C64000, v172, (os_log_type_t)v170, "%s found a CarCommands setting match while connected to a vehicle that supports vehicle data (%s)", (uint8_t *)v103, 0x16u);
    uint64_t v110 = v169;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v110, -1, -1);
    MEMORY[0x1BA9E48C0](v103, -1, -1);

    uint64_t v111 = v166;
    goto LABEL_57;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v38, v17, v18);
  uint64_t v52 = v19;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v53 = type metadata accessor for Logger();
  __swift_project_value_buffer(v53, (uint64_t)static Logger.executor);
  unint64_t v54 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
  v54(v36, v38, v18);
  uint64_t v55 = v173;
  swift_bridgeObjectRetain_n();
  os_log_type_t v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.debug.getter();
  int v58 = v57;
  if (os_log_type_enabled(v56, v57))
  {
    uint64_t v59 = swift_slowAlloc();
    LODWORD(v170) = v58;
    uint64_t v60 = v59;
    uint64_t v169 = swift_slowAlloc();
    uint64_t v175 = v55;
    uint64_t v176 = v169;
    *(_DWORD *)uint64_t v60 = 136315394;
    os_log_t v174 = v172;
    swift_bridgeObjectRetain();
    uint64_t v168 = v42;
    os_log_t v172 = v52;
    uint64_t v61 = String.init<A>(describing:)();
    os_log_t v174 = (os_log_t)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v62, &v176);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v60 + 12) = 2080;
    uint64_t v63 = v168;
    v54(v171, v36, v168);
    uint64_t v64 = String.init<A>(describing:)();
    os_log_t v174 = (os_log_t)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, &v176);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    Class isa = v172[1].isa;
    ((void (*)(char *, uint64_t))isa)(v36, v63);
    _os_log_impl(&dword_1B9C64000, v56, (os_log_type_t)v170, "%s found user vocab identifier (%s)", (uint8_t *)v60, 0x16u);
    uint64_t v67 = v169;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v67, -1, -1);
    MEMORY[0x1BA9E48C0](v60, -1, -1);

    ((void (*)(char *, uint64_t))isa)(v38, v63);
  }
  else
  {

    uint64_t v85 = (void (*)(char *, uint64_t))v52[1].isa;
    v85(v36, v42);
    swift_bridgeObjectRelease_n();
    v85(v38, v42);
  }
  return 1;
}

uint64_t type metadata accessor for CarCommandsAffinityScoringData()
{
  uint64_t result = type metadata singleton initialization cache for CarCommandsAffinityScoringData;
  if (!type metadata singleton initialization cache for CarCommandsAffinityScoringData) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t UsoTask.hasCarPlayCannedDialog.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpanProperty?);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (UsoTask.verbString.getter() == 1852141679 && v3 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    int v5 = 0;
    if ((v4 & 1) == 0) {
      goto LABEL_10;
    }
  }
  if (one-time initialization token for kAppNameMatches != -1) {
    swift_once();
  }
  if (UsoTask.firstAppContaining(names:)(static CarCommandsAffinityScorer.kAppNameMatches))
  {
    swift_release();
    int v5 = 1;
  }
  else
  {
    int v5 = 0;
  }
LABEL_10:
  Swift::Int v6 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of UsoTask.hasCarPlayCannedDialog.getter);
  swift_arrayDestroy();
  UsoTask.firstSettingMatch(on:)(v6, (int64_t)v2);
  swift_bridgeObjectRelease();
  uint64_t v7 = type metadata accessor for SpanProperty();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v2, 1, v7) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v2, &demangling cache variable for type metadata for SpanProperty?);
    int v9 = 0;
  }
  else
  {
    uint64_t v10 = SpanProperty.valueString.getter();
    uint64_t v12 = v11;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v2, v7);
    if (v12)
    {
      if (v10 == 0x61635F7075746573 && v12 == 0xED000079616C7072)
      {
        swift_bridgeObjectRelease();
        int v9 = 1;
      }
      else
      {
        int v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      int v9 = 0;
    }
  }
  return (v5 | v9) & 1;
}

BOOL CarCommandsAffinityScoringData.hasFullyAttachedNamesNodeWithoutUnattachedSettingSpan.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpanProperty?);
  MEMORY[0x1F4188790](v2 - 8);
  char v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CarCommandsAffinityScoringData();
  uint64_t v6 = MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v16 - v9;
  int v11 = *v1;
  outlined init with copy of CarCommandsAffinityScoringData((uint64_t)v1, (uint64_t)&v16 - v9);
  if (v11)
  {
    BOOL v12 = 0;
  }
  else
  {
    int v13 = v10[16];
    outlined init with copy of CarCommandsAffinityScoringData((uint64_t)v10, (uint64_t)v8);
    if (v13 == 1)
    {
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)&v8[*(int *)(v5 + 28)], (uint64_t)v4, &demangling cache variable for type metadata for SpanProperty?);
      outlined destroy of CarCommandsAffinityScoringData((uint64_t)v8);
      uint64_t v14 = type metadata accessor for SpanProperty();
      BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v4, 1, v14) != 1;
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, &demangling cache variable for type metadata for SpanProperty?);
    }
    else
    {
      outlined destroy of CarCommandsAffinityScoringData((uint64_t)v8);
      BOOL v12 = 1;
    }
  }
  outlined destroy of CarCommandsAffinityScoringData((uint64_t)v10);
  return v12;
}

BOOL CarCommandsAffinityScoringData.hasNamesNodeWithoutFullAttachment.getter()
{
  uint64_t v1 = type metadata accessor for CarCommandsAffinityScoringData();
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v4 = *v0;
  outlined init with copy of CarCommandsAffinityScoringData((uint64_t)v0, (uint64_t)v3);
  BOOL v5 = v4 != 4 && *v3 != 0;
  outlined destroy of CarCommandsAffinityScoringData((uint64_t)v3);
  return v5;
}

uint64_t UsoTask.firstSettingMatch(on:)@<X0>(int64_t a1@<X0>, int64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SpanProperty();
  uint64_t v65 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = UsoTask.arguments.getter();
  if (*(void *)(v7 + 16))
  {
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(0x636E657265666572, 0xE900000000000065);
    if (v9)
    {
      unint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v10 >> 62) {
        goto LABEL_67;
      }
      if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        do
        {
          if ((v10 & 0xC000000000000001) != 0)
          {
            MEMORY[0x1BA9E3990](0, v10);
          }
          else
          {
            if (!*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
LABEL_71:
              LODWORD(vars0) = 0;
              uint64_t v68 = 1092;
              LOBYTE(v67) = 2;
              uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
              __break(1u);
              return result;
            }
            swift_retain();
          }
          swift_bridgeObjectRelease();
          uint64_t v11 = dispatch thunk of UsoValue.getAsEntity()();
          swift_release();
          if (!v11) {
            goto LABEL_14;
          }
          type metadata accessor for UsoEntity_common_Setting();
          swift_retain();
          static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
          swift_release();
          uint64_t v12 = v66;
          if (!v66)
          {
            swift_release();
            return (*(uint64_t (**)(int64_t, uint64_t, uint64_t, uint64_t))(v65 + 56))(a2, 1, 1, v4);
          }
          uint64_t v13 = dispatch thunk of CodeGenGlobalArgs.getEntitySpansFor(attributeName:)();
          if (!v13)
          {
            (*(void (**)(int64_t, uint64_t, uint64_t, uint64_t))(v65 + 56))(a2, 1, 1, v4);
            swift_release();
            return swift_release();
          }
          uint64_t v14 = v13;
          v55[0] = v12;
          v55[1] = v11;
          int64_t v56 = a2;
          uint64_t v57 = v13;
          uint64_t v15 = *(void *)(v13 + 16);
          int64_t v64 = a1;
          if (!v15)
          {
            unint64_t v18 = MEMORY[0x1E4FBC860];
LABEL_41:
            uint64_t v59 = *(void *)(v18 + 16);
            if (v59)
            {
              uint64_t v34 = *(void (**)(char *, unint64_t, uint64_t))(v65 + 16);
              unint64_t v61 = v18 + ((*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80));
              unint64_t v62 = v34;
              int64_t v35 = a1 + 56;
              int v58 = (void (**)(char *, uint64_t))(v65 + 8);
              uint64_t v63 = v65 + 16;
              uint64_t v60 = *(void *)(v65 + 72);
              swift_bridgeObjectRetain();
              uint64_t v36 = 0;
              do
              {
                v62(v6, v61 + v60 * v36, v4);
                uint64_t v37 = SpanProperty.key.getter();
                uint64_t v39 = v38;
                if (*(void *)(v64 + 16))
                {
                  uint64_t v40 = v37;
                  int64_t v41 = v35;
                  int64_t v42 = v64;
                  Hasher.init(_seed:)();
                  String.hash(into:)();
                  Swift::Int v43 = Hasher._finalize()();
                  char v44 = *(unsigned char *)(v42 + 32);
                  int64_t v35 = v41;
                  uint64_t v45 = -1 << v44;
                  unint64_t v46 = v43 & ~(-1 << v44);
                  if ((*(void *)(v35 + ((v46 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v46))
                  {
                    uint64_t v47 = *(void *)(v64 + 48);
                    uint64_t v48 = (void *)(v47 + 16 * v46);
                    BOOL v49 = *v48 == v40 && v48[1] == v39;
                    if (v49 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    {
LABEL_58:
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      uint64_t v53 = v56;
                      (*(void (**)(int64_t, char *, uint64_t))(v65 + 32))(v56, v6, v4);
                      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v65 + 56))(v53, 0, 1, v4);
                      swift_release();
                      goto LABEL_61;
                    }
                    uint64_t v50 = ~v45;
                    while (1)
                    {
                      unint64_t v46 = (v46 + 1) & v50;
                      if (((*(void *)(v35 + ((v46 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v46) & 1) == 0) {
                        break;
                      }
                      uint64_t v51 = (void *)(v47 + 16 * v46);
                      BOOL v52 = *v51 == v40 && v51[1] == v39;
                      if (v52 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                        goto LABEL_58;
                      }
                    }
                  }
                }
                ++v36;
                swift_bridgeObjectRelease();
                (*v58)(v6, v4);
              }
              while (v36 != v59);
              swift_bridgeObjectRelease();
            }
            (*(void (**)(int64_t, uint64_t, uint64_t, uint64_t))(v65 + 56))(v56, 1, 1, v4);
            swift_release();
LABEL_61:
            swift_bridgeObjectRelease();
            swift_release();
            return swift_bridgeObjectRelease();
          }
          uint64_t v16 = *(void *)(type metadata accessor for UsoEntitySpan() - 8);
          unint64_t v10 = v14 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
          uint64_t v17 = *(void *)(v16 + 72);
          swift_bridgeObjectRetain();
          unint64_t v18 = MEMORY[0x1E4FBC860];
          while (1)
          {
            uint64_t v21 = UsoEntitySpan.properties.getter();
            uint64_t v22 = *(void *)(v21 + 16);
            a1 = *(void *)(v18 + 16);
            a2 = a1 + v22;
            if (__OFADD__(a1, v22)) {
              break;
            }
            uint64_t v23 = v21;
            int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            if (isUniquelyReferenced_nonNull_native && a2 <= *(void *)(v18 + 24) >> 1)
            {
              if (*(void *)(v23 + 16)) {
                goto LABEL_28;
              }
            }
            else
            {
              if (a1 <= a2) {
                int64_t v25 = a1 + v22;
              }
              else {
                int64_t v25 = a1;
              }
              unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v25, 1, v18);
              if (*(void *)(v23 + 16))
              {
LABEL_28:
                uint64_t v26 = *(void *)(v18 + 16);
                if ((*(void *)(v18 + 24) >> 1) - v26 < v22) {
                  goto LABEL_65;
                }
                unint64_t v27 = (*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80);
                uint64_t v28 = *(void *)(v65 + 72);
                unint64_t v29 = v18 + v27 + v28 * v26;
                if (v23 + v27 < v29 + v28 * v22 && v29 < v23 + v27 + v28 * v22) {
                  goto LABEL_71;
                }
                swift_arrayInitWithCopy();
                if (v22)
                {
                  uint64_t v31 = *(void *)(v18 + 16);
                  BOOL v32 = __OFADD__(v31, v22);
                  uint64_t v33 = v31 + v22;
                  if (v32) {
                    goto LABEL_66;
                  }
                  *(void *)(v18 + 16) = v33;
                }
                goto LABEL_18;
              }
            }
            if (v22) {
              goto LABEL_64;
            }
LABEL_18:
            swift_bridgeObjectRelease();
            v10 += v17;
            if (!--v15)
            {
              swift_bridgeObjectRelease();
              a1 = v64;
              goto LABEL_41;
            }
          }
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
LABEL_67:
          swift_bridgeObjectRetain();
          uint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        while (v54);
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_14:
  uint64_t v19 = *(uint64_t (**)(int64_t, uint64_t, uint64_t, uint64_t))(v65 + 56);

  return v19(a2, 1, 1, v4);
}

uint64_t UsoTask.isValidRadioParse(namespaces:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SpanProperty();
  int64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpanProperty?);
  MEMORY[0x1F4188790](v6 - 8);
  unint64_t v8 = (char *)v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = UsoTask.arguments.getter();
  if (!*(void *)(v9 + 16)) {
    goto LABEL_13;
  }
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(0x636E657265666572, 0xE900000000000065);
  if ((v11 & 1) == 0) {
    goto LABEL_13;
  }
  unint64_t v12 = *(void *)(*(void *)(v9 + 56) + 8 * v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v12 >> 62) {
    goto LABEL_66;
  }
  if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_5:
  if ((v12 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1BA9E3990](0, v12);
  }
  else
  {
    if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_70:
      LODWORD(vars0) = 0;
      uint64_t v66 = 1092;
      LOBYTE(v65) = 2;
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    swift_retain();
  }
  swift_bridgeObjectRelease();
  uint64_t v13 = dispatch thunk of UsoValue.getAsEntity()();
  swift_release();
  if (!v13) {
    return 0;
  }
  type metadata accessor for UsoEntity_common_RadioStation();
  swift_retain();
  static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
  swift_release();
  uint64_t v14 = v64;
  if (!v64) {
    goto LABEL_38;
  }
  uint64_t v15 = dispatch thunk of CodeGenGlobalArgs.getEntitySpansFor(attributeName:)();
  if (!v15)
  {
    swift_release();
LABEL_38:
    swift_release();
    return 0;
  }
  uint64_t v16 = v15;
  v54[0] = v14;
  v54[1] = v13;
  uint64_t v17 = *(void *)(v15 + 16);
  int64_t v63 = v3;
  uint64_t v61 = a1;
  v54[2] = v15;
  uint64_t v55 = v8;
  if (v17)
  {
    uint64_t v18 = *(void *)(type metadata accessor for UsoEntitySpan() - 8);
    unint64_t v12 = v16 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
    uint64_t v19 = *(void *)(v18 + 72);
    swift_bridgeObjectRetain();
    unint64_t v20 = MEMORY[0x1E4FBC860];
    while (1)
    {
      uint64_t v23 = UsoEntitySpan.properties.getter();
      uint64_t v24 = *(void *)(v23 + 16);
      int64_t v3 = *(void *)(v20 + 16);
      unint64_t v8 = (char *)(v3 + v24);
      if (__OFADD__(v3, v24))
      {
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        swift_bridgeObjectRetain();
        uint64_t v53 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v53) {
          goto LABEL_13;
        }
        goto LABEL_5;
      }
      a1 = v23;
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (isUniquelyReferenced_nonNull_native && (uint64_t)v8 <= *(void *)(v20 + 24) >> 1)
      {
        if (*(void *)(a1 + 16)) {
          goto LABEL_27;
        }
      }
      else
      {
        if (v3 <= (uint64_t)v8) {
          int64_t v26 = v3 + v24;
        }
        else {
          int64_t v26 = v3;
        }
        unint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v26, 1, v20);
        if (*(void *)(a1 + 16))
        {
LABEL_27:
          uint64_t v27 = *(void *)(v20 + 16);
          if ((*(void *)(v20 + 24) >> 1) - v27 < v24) {
            goto LABEL_64;
          }
          unint64_t v28 = (*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80);
          uint64_t v29 = *(void *)(v63 + 72);
          unint64_t v30 = v20 + v28 + v29 * v27;
          if (a1 + v28 < v30 + v29 * v24 && v30 < a1 + v28 + v29 * v24) {
            goto LABEL_70;
          }
          swift_arrayInitWithCopy();
          if (v24)
          {
            uint64_t v32 = *(void *)(v20 + 16);
            BOOL v33 = __OFADD__(v32, v24);
            uint64_t v34 = v32 + v24;
            if (v33) {
              goto LABEL_65;
            }
            *(void *)(v20 + 16) = v34;
          }
          goto LABEL_17;
        }
      }
      if (v24) {
        goto LABEL_63;
      }
LABEL_17:
      swift_bridgeObjectRelease();
      v12 += v19;
      if (!--v17)
      {
        swift_bridgeObjectRelease();
        int64_t v3 = v63;
        unint64_t v8 = v55;
        a1 = v61;
        goto LABEL_41;
      }
    }
  }
  unint64_t v20 = MEMORY[0x1E4FBC860];
LABEL_41:
  uint64_t v57 = *(void *)(v20 + 16);
  if (v57)
  {
    uint64_t v36 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    int64_t v35 = v3 + 16;
    unint64_t v59 = v20 + ((*(unsigned __int8 *)(v35 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 64));
    uint64_t v60 = v36;
    uint64_t v62 = a1 + 56;
    int64_t v56 = (void (**)(char *, uint64_t))(v35 - 8);
    uint64_t v58 = *(void *)(v35 + 56);
    swift_bridgeObjectRetain();
    uint64_t v37 = 0;
    do
    {
      v60(v5, v59 + v58 * v37, v2);
      uint64_t v38 = SpanProperty.key.getter();
      uint64_t v40 = v39;
      if (*(void *)(v61 + 16))
      {
        uint64_t v41 = v38;
        uint64_t v42 = v61;
        Hasher.init(_seed:)();
        String.hash(into:)();
        Swift::Int v43 = Hasher._finalize()();
        uint64_t v44 = -1 << *(unsigned char *)(v42 + 32);
        unint64_t v45 = v43 & ~v44;
        if ((*(void *)(v62 + ((v45 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v45))
        {
          uint64_t v46 = *(void *)(v61 + 48);
          uint64_t v47 = (void *)(v46 + 16 * v45);
          BOOL v48 = *v47 == v41 && v47[1] == v40;
          if (v48 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
LABEL_58:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            int64_t v3 = v63;
            unint64_t v8 = v55;
            (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v55, v5, v2);
            uint64_t v52 = 0;
            goto LABEL_60;
          }
          uint64_t v49 = ~v44;
          while (1)
          {
            unint64_t v45 = (v45 + 1) & v49;
            if (((*(void *)(v62 + ((v45 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v45) & 1) == 0) {
              break;
            }
            uint64_t v50 = (void *)(v46 + 16 * v45);
            BOOL v51 = *v50 == v41 && v50[1] == v40;
            if (v51 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
              goto LABEL_58;
            }
          }
        }
      }
      ++v37;
      swift_bridgeObjectRelease();
      (*v56)(v5, v2);
    }
    while (v37 != v57);
    swift_bridgeObjectRelease();
    uint64_t v52 = 1;
    int64_t v3 = v63;
    unint64_t v8 = v55;
  }
  else
  {
    uint64_t v52 = 1;
  }
LABEL_60:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, v52, 1, v2);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  BOOL v21 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) != 1;
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for SpanProperty?);
  return v21;
}

BOOL static CarCommandsAffinityScoringData.NamesNodeAttachmentType.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

BOOL CarCommandsAffinityScoringData.hasUnmatchedSettingSpan.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpanProperty?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CarCommandsAffinityScoringData();
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v8 = *(unsigned __int8 *)(v1 + 16);
  outlined init with copy of CarCommandsAffinityScoringData(v1, (uint64_t)v7);
  if (v8 == 1)
  {
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)&v7[*(int *)(v5 + 28)], (uint64_t)v4, &demangling cache variable for type metadata for SpanProperty?);
    outlined destroy of CarCommandsAffinityScoringData((uint64_t)v7);
    uint64_t v9 = type metadata accessor for SpanProperty();
    BOOL v10 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v4, 1, v9) == 1;
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, &demangling cache variable for type metadata for SpanProperty?);
  }
  else
  {
    outlined destroy of CarCommandsAffinityScoringData((uint64_t)v7);
    return 0;
  }
  return v10;
}

void CarCommandsAffinityScoringData.NamesNodeAttachmentType.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int CarCommandsAffinityScoringData.NamesNodeAttachmentType.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t CarCommandsAffinityScoringData.namesNodeAttachmentType.getter()
{
  return *v0;
}

uint64_t CarCommandsAffinityScoringData.namesNodeSpansForCarCommands.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CarCommandsAffinityScoringData.hasSettingsNode.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t CarCommandsAffinityScoringData.settingsNodeSpanForCarCommands.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CarCommandsAffinityScoringData();
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + *(int *)(v3 + 28), a1, &demangling cache variable for type metadata for SpanProperty?);
}

uint64_t UsoTask.namesNodeAttachmentInfo()()
{
  uint64_t v0 = type metadata accessor for PayloadAttachmentInfo.AttachmentType();
  uint64_t v1 = *(uint64_t **)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v32 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PayloadAttachmentInfo.AttachmentType?, PayloadAttachmentInfo.AttachmentType?));
  MEMORY[0x1F4188790](v45);
  uint64_t v47 = (uint64_t)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PayloadAttachmentInfo?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  BOOL v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v13 = (char *)&v30 - v12;
  MEMORY[0x1F4188790](v11);
  uint64_t v49 = (char *)&v30 - v14;
  uint64_t v51 = type metadata accessor for UsoEntitySpan();
  uint64_t v46 = *(void *)(v51 - 8);
  MEMORY[0x1F4188790](v51);
  uint64_t v50 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v16 = UsoTask.userEntityNamesNodes()();
  uint64_t v17 = v16;
  uint64_t v18 = (char *)(v16 >> 62);
  if (v16 >> 62)
  {
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v29) {
      goto LABEL_3;
    }
  }
  else if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    uint64_t v19 = specialized Sequence.compactMap<A>(_:)(v17, (uint64_t (*)(char *, char *))closure #1 in UsoTask.namesNodeAttachmentInfo(), 0);
    uint64_t v44 = *(void *)(v19 + 16);
    if (!v44)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 3;
    }
    if (v18)
    {
      uint64_t v18 = (char *)v19;
      swift_bridgeObjectRetain();
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v18 = (char *)v19;
      uint64_t v20 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v44 < v20) {
      return 2;
    }
    Swift::Int v43 = v6;
    uint64_t v41 = &v18[(*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80)];
    uint64_t v40 = v46 + 16;
    uint64_t v36 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 7);
    unsigned int v39 = *MEMORY[0x1E4FA30A0];
    uint64_t v38 = (void (**)(char *, void, uint64_t))(v1 + 13);
    int64_t v35 = v1 + 6;
    uint64_t v31 = (void (**)(char *, uint64_t, uint64_t))(v1 + 4);
    BOOL v33 = (void (**)(char *, uint64_t))(v1 + 1);
    uint64_t v37 = (void (**)(char *, uint64_t))(v46 + 8);
    unint64_t v30 = v18;
    swift_bridgeObjectRetain();
    uint64_t v6 = 0;
    uint64_t v1 = &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?;
    uint64_t v34 = v10;
    uint64_t v42 = v13;
    while (1)
    {
      if (__OFADD__(v6, 1))
      {
        __break(1u);
        goto LABEL_27;
      }
      BOOL v48 = v6 + 1;
      (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v50, &v41[*(void *)(v46 + 72) * (void)v6], v51);
      uint64_t v22 = (uint64_t)v43;
      UsoEntitySpan.payloadAttachmentInfo.getter();
      uint64_t v23 = type metadata accessor for PayloadAttachmentInfo();
      uint64_t v24 = *(void *)(v23 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v22, &demangling cache variable for type metadata for PayloadAttachmentInfo?);
        int64_t v25 = (void (**)(char *, void, uint64_t, uint64_t))v36;
        BOOL v10 = v49;
        (*v36)((uint64_t)v49, 1, 1, v0);
      }
      else
      {
        BOOL v10 = v49;
        PayloadAttachmentInfo.attachmentType.getter();
        (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
        int64_t v25 = (void (**)(char *, void, uint64_t, uint64_t))v36;
      }
      int64_t v26 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))v35;
      uint64_t v13 = v42;
      (*v38)(v42, v39, v0);
      (*v25)(v13, 0, 1, v0);
      uint64_t v27 = v47;
      uint64_t v17 = v47 + *(int *)(v45 + 48);
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v10, v47, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v13, v17, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
      uint64_t v18 = (char *)*v26;
      if ((*v26)(v27, 1, v0) == 1) {
        break;
      }
      BOOL v10 = v34;
      outlined init with copy of ReferenceResolutionClientProtocol?(v27, (uint64_t)v34, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v18)(v17, 1, v0) == 1)
      {
        (*v33)(v10, v0);
LABEL_12:
        outlined destroy of ReferenceResolutionClientProtocol?(v27, &demangling cache variable for type metadata for (PayloadAttachmentInfo.AttachmentType?, PayloadAttachmentInfo.AttachmentType?));
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v49, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
        (*v37)(v50, v51);
        goto LABEL_13;
      }
      uint64_t v18 = v32;
      (*v31)(v32, v17, v0);
      lazy protocol witness table accessor for type PayloadAttachmentInfo.AttachmentType and conformance PayloadAttachmentInfo.AttachmentType();
      uint64_t v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v28 = *v33;
      (*v33)(v10, v0);
      v28(v18, v0);
      outlined destroy of ReferenceResolutionClientProtocol?(v47, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v49, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
      (*v37)(v50, v51);
      if (v17) {
        goto LABEL_25;
      }
LABEL_13:
      ++v6;
      if (v48 == (char *)v44)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v18)(v17, 1, v0) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v27, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v49, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
      (*v37)(v50, v51);
LABEL_25:
      swift_bridgeObjectRelease();
      return 1;
    }
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  return 4;
}

uint64_t UsoTask.settingSpanInfo()(int64_t a1)
{
  uint64_t v3 = type metadata accessor for SpanProperty();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = UsoTask.arguments.getter();
  if (*(void *)(v7 + 16))
  {
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(0x636E657265666572, 0xE900000000000065);
    if (v9)
    {
      unint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v10 >> 62) {
        goto LABEL_66;
      }
      if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        while ((v10 & 0xC000000000000001) == 0)
        {
          if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            swift_retain();
            goto LABEL_8;
          }
          __break(1u);
LABEL_70:
          swift_once();
LABEL_12:
          v49[1] = v10;
          int64_t v50 = a1;
          uint64_t v51 = v1;
          unint64_t v59 = v6;
          uint64_t v60 = static CarCommandsAffinityScorer.kSettingsNamespaceMatches;
          uint64_t v13 = *(void *)(v1 + 16);
          if (!v13)
          {
            unint64_t v16 = MEMORY[0x1E4FBC860];
LABEL_41:
            uint64_t v53 = *(void *)(v16 + 16);
            if (v53)
            {
              unint64_t v30 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
              unint64_t v56 = v16 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
              uint64_t v57 = v30;
              uint64_t v52 = (void (**)(char *, uint64_t))(v4 + 8);
              uint64_t v58 = v4 + 16;
              uint64_t v54 = *(void *)(v4 + 72);
              uint64_t v55 = v60 + 56;
              swift_bridgeObjectRetain();
              uint64_t v31 = 0;
              do
              {
                v57(v6, v56 + v54 * v31, v3);
                uint64_t v32 = SpanProperty.key.getter();
                uint64_t v34 = v33;
                uint64_t v35 = v55;
                if (*(void *)(v60 + 16))
                {
                  uint64_t v36 = v32;
                  uint64_t v37 = v60;
                  Hasher.init(_seed:)();
                  String.hash(into:)();
                  Swift::Int v38 = Hasher._finalize()();
                  uint64_t v39 = -1 << *(unsigned char *)(v37 + 32);
                  unint64_t v40 = v38 & ~v39;
                  if ((*(void *)(v35 + ((v40 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v40))
                  {
                    uint64_t v41 = *(void *)(v60 + 48);
                    uint64_t v42 = (void *)(v41 + 16 * v40);
                    BOOL v43 = *v42 == v36 && v42[1] == v34;
                    if (v43 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    {
LABEL_58:
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      int64_t v47 = v50;
                      (*(void (**)(int64_t, char *, uint64_t))(v4 + 32))(v50, v59, v3);
                      unint64_t v10 = 1;
                      (*(void (**)(int64_t, void, uint64_t, uint64_t))(v4 + 56))(v47, 0, 1, v3);
                      swift_release();
                      goto LABEL_61;
                    }
                    uint64_t v44 = ~v39;
                    while (1)
                    {
                      unint64_t v40 = (v40 + 1) & v44;
                      if (((*(void *)(v35 + ((v40 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v40) & 1) == 0) {
                        break;
                      }
                      uint64_t v45 = (void *)(v41 + 16 * v40);
                      BOOL v46 = *v45 == v36 && v45[1] == v34;
                      if (v46 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                        goto LABEL_58;
                      }
                    }
                  }
                }
                ++v31;
                swift_bridgeObjectRelease();
                uint64_t v6 = v59;
                (*v52)(v59, v3);
              }
              while (v31 != v53);
              swift_bridgeObjectRelease();
            }
            unint64_t v10 = 1;
            (*(void (**)(int64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v50, 1, 1, v3);
            swift_release();
LABEL_61:
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            return v10;
          }
          uint64_t v14 = *(void *)(type metadata accessor for UsoEntitySpan() - 8);
          unint64_t v10 = v1 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
          uint64_t v15 = *(void *)(v14 + 72);
          swift_bridgeObjectRetain();
          unint64_t v16 = MEMORY[0x1E4FBC860];
          while (1)
          {
            uint64_t v18 = UsoEntitySpan.properties.getter();
            uint64_t v19 = *(void *)(v18 + 16);
            a1 = *(void *)(v16 + 16);
            uint64_t v6 = (char *)(a1 + v19);
            if (__OFADD__(a1, v19)) {
              break;
            }
            uint64_t v1 = v18;
            int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            if (isUniquelyReferenced_nonNull_native && (uint64_t)v6 <= *(void *)(v16 + 24) >> 1)
            {
              if (*(void *)(v1 + 16)) {
                goto LABEL_28;
              }
            }
            else
            {
              if (a1 <= (uint64_t)v6) {
                int64_t v21 = a1 + v19;
              }
              else {
                int64_t v21 = a1;
              }
              unint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v21, 1, v16);
              if (*(void *)(v1 + 16))
              {
LABEL_28:
                uint64_t v22 = *(void *)(v16 + 16);
                if ((*(void *)(v16 + 24) >> 1) - v22 < v19) {
                  goto LABEL_64;
                }
                unint64_t v23 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
                uint64_t v24 = *(void *)(v4 + 72);
                unint64_t v25 = v16 + v23 + v24 * v22;
                if (v1 + v23 < v25 + v24 * v19 && v25 < v1 + v23 + v24 * v19)
                {
                  LODWORD(vars0) = 0;
                  uint64_t v63 = 1092;
                  LOBYTE(v62) = 2;
                  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
                  __break(1u);
                  return result;
                }
                swift_arrayInitWithCopy();
                if (v19)
                {
                  uint64_t v27 = *(void *)(v16 + 16);
                  BOOL v28 = __OFADD__(v27, v19);
                  uint64_t v29 = v27 + v19;
                  if (v28) {
                    goto LABEL_65;
                  }
                  *(void *)(v16 + 16) = v29;
                }
                goto LABEL_18;
              }
            }
            if (v19) {
              goto LABEL_63;
            }
LABEL_18:
            swift_bridgeObjectRelease();
            v10 += v15;
            if (!--v13)
            {
              swift_bridgeObjectRelease();
              uint64_t v6 = v59;
              goto LABEL_41;
            }
          }
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          swift_bridgeObjectRetain();
          uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v48) {
            goto LABEL_14;
          }
        }
        MEMORY[0x1BA9E3990](0, v10);
LABEL_8:
        swift_bridgeObjectRelease();
        uint64_t v11 = dispatch thunk of UsoValue.getAsEntity()();
        swift_release();
        if (!v11) {
          goto LABEL_15;
        }
        type metadata accessor for UsoEntity_common_Setting();
        swift_retain();
        static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
        swift_release();
        unint64_t v10 = v61;
        if (!v61)
        {
          swift_release();
          (*(void (**)(int64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(a1, 1, 1, v3);
          return v10;
        }
        uint64_t v12 = dispatch thunk of CodeGenGlobalArgs.getEntitySpansFor(attributeName:)();
        if (!v12)
        {
          swift_release();
          swift_release();
          goto LABEL_15;
        }
        uint64_t v1 = v12;
        v49[2] = v11;
        if (one-time initialization token for kSettingsNamespaceMatches == -1) {
          goto LABEL_12;
        }
        goto LABEL_70;
      }
    }
  }
LABEL_14:
  swift_bridgeObjectRelease();
LABEL_15:
  (*(void (**)(int64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(a1, 1, 1, v3);
  return 0;
}

uint64_t UsoTask.firstUserEntityMatch(on:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SpanProperty();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  unint64_t v8 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  unint64_t v83 = (char *)&v69 - v9;
  unint64_t v10 = UsoTask.userEntityNamesNodes()();
  unint64_t v11 = v10;
  uint64_t v84 = MEMORY[0x1E4FBC860];
  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v81 = v8;
    if (v12) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease_n();
    uint64_t v15 = MEMORY[0x1E4FBC860];
    goto LABEL_12;
  }
  uint64_t v12 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v81 = v8;
  if (!v12) {
    goto LABEL_11;
  }
LABEL_3:
  if (v12 < 1)
  {
LABEL_73:
    __break(1u);
LABEL_74:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v13 = 0;
  do
  {
    if ((v11 & 0xC000000000000001) != 0) {
      MEMORY[0x1BA9E3990](v13, v11);
    }
    else {
      swift_retain();
    }
    ++v13;
    uint64_t v14 = UsoEntity.entitySpans.getter();
    swift_release();
    specialized Array.append<A>(contentsOf:)(v14);
  }
  while (v12 != v13);
  swift_bridgeObjectRelease_n();
  uint64_t v15 = v84;
LABEL_12:
  uint64_t v16 = *(void *)(v15 + 16);
  uint64_t v82 = v5;
  uint64_t v77 = a1;
  uint64_t v75 = v15;
  if (!v16)
  {
    unint64_t v20 = MEMORY[0x1E4FBC860];
    goto LABEL_36;
  }
  uint64_t v17 = *(void *)(type metadata accessor for UsoEntitySpan() - 8);
  uint64_t v18 = v15 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  uint64_t v19 = *(void *)(v17 + 72);
  swift_bridgeObjectRetain();
  unint64_t v20 = MEMORY[0x1E4FBC860];
  do
  {
    uint64_t v21 = UsoEntitySpan.properties.getter();
    uint64_t v22 = *(void *)(v21 + 16);
    int64_t v23 = *(void *)(v20 + 16);
    int64_t v24 = v23 + v22;
    if (__OFADD__(v23, v22))
    {
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
      goto LABEL_73;
    }
    uint64_t v25 = v21;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v24 <= *(void *)(v20 + 24) >> 1)
    {
      if (!*(void *)(v25 + 16)) {
        goto LABEL_14;
      }
    }
    else
    {
      if (v23 <= v24) {
        int64_t v27 = v23 + v22;
      }
      else {
        int64_t v27 = v23;
      }
      unint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v27, 1, v20);
      if (!*(void *)(v25 + 16))
      {
LABEL_14:
        if (v22) {
          goto LABEL_70;
        }
        goto LABEL_15;
      }
    }
    uint64_t v28 = *(void *)(v20 + 16);
    if ((*(void *)(v20 + 24) >> 1) - v28 < v22) {
      goto LABEL_71;
    }
    unint64_t v29 = (*(unsigned __int8 *)(v82 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80);
    uint64_t v30 = *(void *)(v82 + 72);
    unint64_t v31 = v20 + v29 + v30 * v28;
    if (v25 + v29 < v31 + v30 * v22 && v31 < v25 + v29 + v30 * v22) {
      goto LABEL_74;
    }
    swift_arrayInitWithCopy();
    if (v22)
    {
      uint64_t v33 = *(void *)(v20 + 16);
      BOOL v34 = __OFADD__(v33, v22);
      uint64_t v35 = v33 + v22;
      if (v34) {
        goto LABEL_72;
      }
      *(void *)(v20 + 16) = v35;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    v18 += v19;
    --v16;
  }
  while (v16);
  swift_bridgeObjectRelease();
  uint64_t v5 = v82;
  a1 = v77;
LABEL_36:
  uint64_t v36 = *(void *)(v20 + 16);
  uint64_t v37 = v83;
  if (!v36)
  {
    uint64_t v67 = 1;
    goto LABEL_67;
  }
  uint64_t v71 = a2;
  uint64_t v39 = v5 + 16;
  Swift::Int v38 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  unint64_t v40 = v20 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  uint64_t v41 = *(void *)(a1 + 16);
  unint64_t v79 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v42 = a1;
  uint64_t v43 = *(void *)(v39 + 56);
  swift_bridgeObjectRetain();
  uint64_t v73 = (uint64_t *)(v42 + 56);
  uint64_t v74 = v43;
  uint64_t v44 = 0;
  unint64_t v69 = v40;
  uint64_t v70 = v36;
  uint64_t v78 = v38;
  uint64_t v76 = v41;
  while (1)
  {
    v38(v37, (char *)(v40 + v43 * v44), v4);
    if (v41) {
      break;
    }
LABEL_39:
    ++v44;
    (*v79)(v37, v4);
    uint64_t v41 = v76;
    uint64_t v43 = v74;
    if (v44 == v36)
    {
      swift_bridgeObjectRelease();
      uint64_t v67 = 1;
      a2 = v71;
      uint64_t v5 = v82;
      goto LABEL_67;
    }
  }
  uint64_t v72 = v44;
  swift_bridgeObjectRetain();
  uint64_t v45 = v73;
  uint64_t v46 = v76;
  while (2)
  {
    uint64_t v47 = *(v45 - 3);
    uint64_t v48 = *(v45 - 2);
    uint64_t v49 = *v45;
    if (!*v45)
    {
      swift_bridgeObjectRetain();
      if (v47 == SpanProperty.key.getter() && v48 == v61) {
        goto LABEL_65;
      }
      char v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v63) {
        goto LABEL_66;
      }
      goto LABEL_43;
    }
    uint64_t v50 = v39;
    uint64_t v51 = v4;
    uint64_t v80 = *(v45 - 1);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v52 = v83;
    if (v47 == SpanProperty.key.getter() && v48 == v53)
    {
      swift_bridgeObjectRelease();
      unint64_t v56 = v81;
      uint64_t v64 = v52;
      uint64_t v4 = v51;
      uint64_t v65 = v51;
      uint64_t v39 = v50;
      v78(v81, v64, v65);
      uint64_t v59 = SpanProperty.valueString.getter();
      if (!v60) {
        goto LABEL_42;
      }
    }
    else
    {
      char v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      unint64_t v56 = v81;
      uint64_t v57 = v52;
      uint64_t v4 = v51;
      uint64_t v58 = v51;
      uint64_t v39 = v50;
      v78(v81, v57, v58);
      if ((v55 & 1) == 0 || (uint64_t v59 = SpanProperty.valueString.getter(), !v60))
      {
LABEL_42:
        (*v79)(v56, v4);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
LABEL_43:
        v45 += 4;
        if (!--v46)
        {
          swift_bridgeObjectRelease();
          uint64_t v37 = v83;
          unint64_t v40 = v69;
          uint64_t v36 = v70;
          Swift::Int v38 = v78;
          uint64_t v44 = v72;
          goto LABEL_39;
        }
        continue;
      }
    }
    break;
  }
  if (v80 != v59 || v49 != v60)
  {
    char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    (*v79)(v81, v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    if (v66) {
      goto LABEL_66;
    }
    goto LABEL_43;
  }
  swift_bridgeObjectRelease();
  (*v79)(v81, v4);
  swift_bridgeObjectRelease();
LABEL_65:
  swift_bridgeObjectRelease_n();
LABEL_66:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v82;
  a2 = v71;
  (*(void (**)(uint64_t, char *, uint64_t))(v82 + 32))(v71, v83, v4);
  uint64_t v67 = 0;
LABEL_67:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, v67, 1, v4);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t UsoTask.userEntityNamesNodes()()
{
  unint64_t v0 = UsoTask.arguments.getter();
  if (!*(void *)(v0 + 16)) {
    goto LABEL_17;
  }
  unint64_t v1 = specialized __RawDictionaryStorage.find<A>(_:)(0x69746E4572657375, 0xEC00000073656974);
  if ((v2 & 1) == 0) {
    goto LABEL_17;
  }
  unint64_t v3 = *(void *)(*(void *)(v0 + 56) + 8 * v1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (!(v3 >> 62))
  {
    if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_5;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain();
  unint64_t v0 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v0) {
    goto LABEL_17;
  }
LABEL_5:
  if ((v3 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1BA9E3990](0, v3);
  }
  else
  {
    if (!*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_26:
      swift_bridgeObjectRetain();
      uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v13) {
        goto LABEL_13;
      }
LABEL_20:
      swift_bridgeObjectRelease();
      uint64_t v9 = 0;
      goto LABEL_21;
    }
    swift_retain();
  }
  swift_bridgeObjectRelease();
  uint64_t v4 = dispatch thunk of UsoValue.getAsEntity()();
  swift_release();
  if (!v4) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v5 = UsoEntity.attributes.getter();
  if (!*(void *)(v5 + 16)) {
    goto LABEL_20;
  }
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000016, 0x80000001BA063D10);
  if ((v7 & 1) == 0) {
    goto LABEL_20;
  }
  unint64_t v0 = *(void *)(*(void *)(v5 + 56) + 8 * v6);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  if (v0 >> 62) {
    goto LABEL_26;
  }
  if (!*(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_20;
  }
LABEL_13:
  if ((v0 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1BA9E3990](0, v0);
    goto LABEL_16;
  }
  if (*(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain();
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v9 = dispatch thunk of UsoValue.getAsEntity()();
    swift_release();
LABEL_21:
    uint64_t v10 = swift_retain();
    uint64_t v11 = closure #1 in UsoTask.userEntityNamesNodes()(v10);
    swift_release();
    unint64_t v12 = closure #1 in UsoTask.userEntityNamesNodes()(v9);
    specialized Array.append<A>(contentsOf:)(v12);
    swift_release();
    swift_release();
    return v11;
  }
  __break(1u);
  return result;
}

BOOL closure #1 in UsoTask.namesNodeAttachmentInfo()(uint64_t a1, void (*a2)(unsigned char *, uint64_t, uint64_t))
{
  uint64_t v70 = a2;
  uint64_t v2 = type metadata accessor for PayloadAttachmentInfo.AttachmentType();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v64 = &v61[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PayloadAttachmentInfo.AttachmentType?, PayloadAttachmentInfo.AttachmentType?));
  uint64_t v5 = MEMORY[0x1F4188790](v73);
  char v66 = &v61[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v5);
  uint64_t v72 = &v61[-v7];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PayloadAttachmentInfo?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = &v61[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = &v61[-v12];
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v68 = &v61[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  char v63 = &v61[-v18];
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v65 = &v61[-v20];
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  unint64_t v69 = &v61[-v22];
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v67 = &v61[-v24];
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v71 = &v61[-v26];
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v75 = &v61[-v28];
  MEMORY[0x1F4188790](v27);
  uint64_t v30 = &v61[-v29];
  UsoEntitySpan.payloadAttachmentInfo.getter();
  uint64_t v31 = type metadata accessor for PayloadAttachmentInfo();
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v32 + 48);
  int v34 = v33(v13, 1, v31);
  uint64_t v74 = v30;
  if (v34 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, &demangling cache variable for type metadata for PayloadAttachmentInfo?);
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v30, 1, 1, v2);
  }
  else
  {
    PayloadAttachmentInfo.attachmentType.getter();
    (*(void (**)(unsigned char *, uint64_t))(v32 + 8))(v13, v31);
  }
  UsoEntitySpan.payloadAttachmentInfo.getter();
  if (v33(v11, 1, v31) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v11, &demangling cache variable for type metadata for PayloadAttachmentInfo?);
    uint64_t v35 = v3;
    uint64_t v36 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    uint64_t v37 = v2;
    v36(v75, 1, 1, v2);
  }
  else
  {
    PayloadAttachmentInfo.attachmentType.getter();
    (*(void (**)(unsigned char *, uint64_t))(v32 + 8))(v11, v31);
    uint64_t v35 = v3;
    uint64_t v37 = v2;
  }
  uint64_t v38 = (uint64_t)v71;
  uint64_t v39 = *MEMORY[0x1E4FA30A0];
  uint64_t v70 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v35 + 104);
  v70(v71, v39, v37);
  uint64_t v71 = *(unsigned char **)(v35 + 56);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v71)(v38, 0, 1, v37);
  unint64_t v40 = v72;
  uint64_t v41 = (uint64_t)&v72[*(int *)(v73 + 48)];
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v74, (uint64_t)v72, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  outlined init with copy of ReferenceResolutionClientProtocol?(v38, v41, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  uint64_t v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
  if (v42((uint64_t)v40, 1, v37) != 1)
  {
    uint64_t v45 = v67;
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v40, (uint64_t)v67, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
    if (v42(v41, 1, v37) != 1)
    {
      uint64_t v48 = v64;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v35 + 32))(v64, v41, v37);
      lazy protocol witness table accessor for type PayloadAttachmentInfo.AttachmentType and conformance PayloadAttachmentInfo.AttachmentType();
      int v62 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v49 = *(void (**)(unsigned char *, uint64_t))(v35 + 8);
      v49(v48, v37);
      outlined destroy of ReferenceResolutionClientProtocol?(v38, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
      v49(v67, v37);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v72, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
      uint64_t v44 = v69;
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v75, (uint64_t)v69, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
      if (v62) {
        goto LABEL_15;
      }
LABEL_13:
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v44, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
      uint64_t v46 = v68;
      uint64_t v47 = (uint64_t)v74;
      goto LABEL_23;
    }
    outlined destroy of ReferenceResolutionClientProtocol?(v38, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
    (*(void (**)(unsigned char *, uint64_t))(v35 + 8))(v45, v37);
    uint64_t v44 = v69;
LABEL_12:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v40, &demangling cache variable for type metadata for (PayloadAttachmentInfo.AttachmentType?, PayloadAttachmentInfo.AttachmentType?));
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v75, (uint64_t)v44, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
    goto LABEL_13;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(v38, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  unsigned int v43 = v42(v41, 1, v37);
  uint64_t v44 = v69;
  if (v43 != 1) {
    goto LABEL_12;
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v40, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v75, (uint64_t)v44, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
LABEL_15:
  uint64_t v50 = v65;
  v70(v65, *MEMORY[0x1E4FA3098], v37);
  uint64_t v51 = (uint64_t)v50;
  ((void (*)(unsigned char *, void, uint64_t, uint64_t))v71)(v50, 0, 1, v37);
  uint64_t v52 = v66;
  uint64_t v53 = (uint64_t)&v66[*(int *)(v73 + 48)];
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v44, (uint64_t)v66, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  outlined init with copy of ReferenceResolutionClientProtocol?(v51, v53, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  if (v42((uint64_t)v52, 1, v37) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v51, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v44, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
    unsigned int v54 = v42(v53, 1, v37);
    uint64_t v46 = v68;
    uint64_t v47 = (uint64_t)v74;
    if (v54 == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v52, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
LABEL_22:
      BOOL v58 = 0;
      uint64_t v46 = v75;
      goto LABEL_27;
    }
    goto LABEL_20;
  }
  char v55 = v63;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v52, (uint64_t)v63, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  if (v42(v53, 1, v37) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v51, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v44, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
    (*(void (**)(unsigned char *, uint64_t))(v35 + 8))(v55, v37);
    uint64_t v46 = v68;
    uint64_t v47 = (uint64_t)v74;
LABEL_20:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v52, &demangling cache variable for type metadata for (PayloadAttachmentInfo.AttachmentType?, PayloadAttachmentInfo.AttachmentType?));
    goto LABEL_23;
  }
  unint64_t v56 = v64;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v35 + 32))(v64, v53, v37);
  lazy protocol witness table accessor for type PayloadAttachmentInfo.AttachmentType and conformance PayloadAttachmentInfo.AttachmentType();
  LODWORD(v73) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v57 = *(void (**)(unsigned char *, uint64_t))(v35 + 8);
  v57(v56, v37);
  outlined destroy of ReferenceResolutionClientProtocol?(v51, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v44, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  v57(v55, v37);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v52, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  uint64_t v46 = v68;
  uint64_t v47 = (uint64_t)v74;
  if (v73) {
    goto LABEL_22;
  }
LABEL_23:
  unsigned int v59 = v42(v47, 1, v37);
  outlined init with take of PayloadAttachmentInfo.AttachmentType?((uint64_t)v75, (uint64_t)v46);
  BOOL v58 = v59 != 1 || v42((uint64_t)v46, 1, v37) == 1;
LABEL_27:
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v46, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  outlined destroy of ReferenceResolutionClientProtocol?(v47, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  return v58;
}

uint64_t closure #2 in UsoTask.namesNodeAttachmentInfo()@<X0>(uint64_t (*a1)(char *, char *)@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v49 = a2;
  uint64_t v48 = a1;
  uint64_t v47 = a3;
  uint64_t v3 = type metadata accessor for SpanProperty();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UsoEntitySpan();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  unsigned int v59 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v46 - v11;
  uint64_t result = UsoEntity.entitySpans.getter();
  uint64_t v14 = result;
  uint64_t v15 = MEMORY[0x1E4FBC860];
  uint64_t v71 = MEMORY[0x1E4FBC860];
  uint64_t v57 = *(void *)(result + 16);
  if (v57)
  {
    unint64_t v16 = 0;
    uint64_t v56 = v8 + 16;
    uint64_t v64 = v4 + 16;
    uint64_t v65 = (void (**)(char *, uint64_t))(v4 + 8);
    BOOL v58 = (uint64_t (**)(char *, char *, uint64_t))(v8 + 32);
    uint64_t v50 = (uint64_t (**)(char *, uint64_t))(v8 + 8);
    uint64_t v55 = v4;
    uint64_t v66 = v3;
    uint64_t v54 = v7;
    uint64_t v53 = v8;
    uint64_t v52 = result;
    uint64_t v51 = v12;
    while (v16 < *(void *)(v14 + 16))
    {
      unint64_t v17 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v62 = *(void *)(v8 + 72);
      unint64_t v63 = v17;
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v12, v14 + v17 + v62 * v16, v7);
      uint64_t v18 = UsoEntitySpan.properties.getter();
      uint64_t v67 = *(void *)(v18 + 16);
      if (v67)
      {
        uint64_t v60 = v18;
        unint64_t v61 = v16;
        unint64_t v70 = v18 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
        uint64_t v19 = *(void *)(v4 + 72);
        uint64_t v68 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
        uint64_t v69 = v19;
        swift_bridgeObjectRetain();
        uint64_t v20 = 0;
        while (1)
        {
          v68(v6, v70 + v69 * v20, v3);
          if (one-time initialization token for kUserEntityNamespaceMatches != -1) {
            swift_once();
          }
          uint64_t v21 = static CarCommandsAffinityScorer.kUserEntityNamespaceMatches;
          uint64_t v22 = v6;
          uint64_t v23 = SpanProperty.key.getter();
          uint64_t v25 = v24;
          if (*(void *)(v21 + 16))
          {
            uint64_t v26 = v23;
            Hasher.init(_seed:)();
            String.hash(into:)();
            Swift::Int v27 = Hasher._finalize()();
            uint64_t v28 = -1 << *(unsigned char *)(v21 + 32);
            unint64_t v29 = v27 & ~v28;
            uint64_t v30 = v21 + 56;
            if ((*(void *)(v21 + 56 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29))
            {
              uint64_t v31 = *(void *)(v21 + 48);
              uint64_t v32 = (void *)(v31 + 16 * v29);
              BOOL v33 = *v32 == v26 && v32[1] == v25;
              if (v33 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
LABEL_33:
                swift_bridgeObjectRelease();
                uint64_t v3 = v66;
                uint64_t v6 = v22;
                (*v65)(v22, v66);
                swift_bridgeObjectRelease_n();
                uint64_t v42 = *v58;
                uint64_t v12 = v51;
                uint64_t v7 = v54;
                (*v58)(v59, v51, v54);
                uint64_t v43 = v71;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v43 + 16) + 1, 1);
                  uint64_t v43 = v71;
                }
                unint64_t v16 = v61;
                unint64_t v45 = *(void *)(v43 + 16);
                unint64_t v44 = *(void *)(v43 + 24);
                if (v45 >= v44 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1);
                  uint64_t v43 = v71;
                }
                *(void *)(v43 + 16) = v45 + 1;
                uint64_t result = v42((char *)(v43 + v63 + v45 * v62), v59, v7);
                uint64_t v71 = v43;
                uint64_t v4 = v55;
                uint64_t v8 = v53;
                uint64_t v14 = v52;
                goto LABEL_5;
              }
              uint64_t v34 = ~v28;
              unint64_t v35 = (v29 + 1) & ~v28;
              if ((*(void *)(v30 + ((v35 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v35))
              {
                uint64_t v36 = (void *)(v31 + 16 * v35);
                BOOL v37 = *v36 == v26 && v36[1] == v25;
                if (v37 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                  goto LABEL_33;
                }
                for (unint64_t i = v35 + 1; ; unint64_t i = v39 + 1)
                {
                  unint64_t v39 = i & v34;
                  if (((*(void *)(v30 + (((i & v34) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v34)) & 1) == 0) {
                    break;
                  }
                  unint64_t v40 = (void *)(v31 + 16 * v39);
                  BOOL v41 = *v40 == v26 && v40[1] == v25;
                  if (v41 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                    goto LABEL_33;
                  }
                }
              }
            }
          }
          ++v20;
          swift_bridgeObjectRelease();
          uint64_t v3 = v66;
          uint64_t v6 = v22;
          (*v65)(v22, v66);
          if (v20 == v67)
          {
            swift_bridgeObjectRelease_n();
            uint64_t v4 = v55;
            uint64_t v7 = v54;
            uint64_t v8 = v53;
            uint64_t v14 = v52;
            uint64_t v12 = v51;
            unint64_t v16 = v61;
            goto LABEL_4;
          }
        }
      }
      swift_bridgeObjectRelease();
LABEL_4:
      uint64_t result = (*v50)(v12, v7);
LABEL_5:
      if (++v16 == v57)
      {
        uint64_t v15 = v71;
        goto LABEL_40;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_40:
    swift_bridgeObjectRelease();
    specialized Sequence.min(by:)(v48, v49, v15, v47);
    return swift_release();
  }
  return result;
}