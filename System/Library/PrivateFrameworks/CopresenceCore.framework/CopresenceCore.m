uint64_t type metadata instantiation function for SKPresenceDataSource()
{
  return MEMORY[0x1F41863F0]();
}

void partial apply for closure #3 in ConversationManagerClient.init()(uint64_t *a1)
{
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_19(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_20(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_21(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_22(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_23(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_24(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_25(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_26(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_27(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_29(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_30(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_31(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_32(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_33(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_34(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_35(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_36(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_37(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_39(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_41(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_42(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_43(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

ValueMetadata *type metadata accessor for ConversationManagerInterface()
{
  return &type metadata for ConversationManagerInterface;
}

ValueMetadata *type metadata accessor for GroupActivityDescription()
{
  return &type metadata for GroupActivityDescription;
}

uint64_t type metadata accessor for Lock()
{
  return self;
}

uint64_t Lock.init()()
{
  v1 = (_DWORD *)swift_slowAlloc();
  *(void *)(v0 + 16) = v1;
  _DWORD *v1 = 0;
  return v0;
}

uint64_t one-time initialization function for client(uint64_t a1)
{
  return one-time initialization function for default(a1, static Log.client);
}

uint64_t dispatch thunk of ActivitySessionContainerProvider.onActivitySessionsChanged.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t one-time initialization function for default(uint64_t a1)
{
  return one-time initialization function for default(a1, static Log.default);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance HostConnectionNotificationObserver()
{
  return HostConnectionNotificationObserver.receive<A>(subscriber:)();
}

uint64_t HostConnectionNotificationObserver.receive<A>(subscriber:)()
{
  return CurrentValueSubject.receive<A>(subscriber:)();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance DarwinNotification()
{
  return DarwinNotification.receive<A>(subscriber:)();
}

uint64_t DarwinNotification.receive<A>(subscriber:)()
{
  return CurrentValueSubject.receive<A>(subscriber:)();
}

void Lock.withLock<A>(_:)(void (*a1)(void))
{
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 16));
  a1();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 16));
}

id static ConversationManagerClient.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static ConversationManagerClient.shared;
  return v0;
}

uint64_t protocol witness for ActivitySessionContainerProvider.onActivitySessionsChanged.getter in conformance ConversationManagerClient()
{
  uint64_t v1 = *(void *)(*v0 + direct field offset for ConversationManagerClient.publishers);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PublisherBox<CurrentValueSubject<[UUID : TUConversationActivitySessionContainer], Never>>);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v1;
  swift_retain();
  return v2;
}

void type metadata completion function for ConversationManagerClient()
{
  type metadata accessor for Published<TUConversationActivitySessionContainer?>();
  if (v0 <= 0x3F) {
    swift_initClassMetadata2();
  }
}

void type metadata accessor for Published<TUConversationActivitySessionContainer?>()
{
  if (!lazy cache variable for type metadata for Published<TUConversationActivitySessionContainer?>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for TUConversationActivitySessionContainer?);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<TUConversationActivitySessionContainer?>);
    }
  }
}

uint64_t ConversationManagerClient.onActivitySessionsChanged.getter()
{
  uint64_t v1 = *(void *)(v0 + direct field offset for ConversationManagerClient.publishers);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PublisherBox<CurrentValueSubject<[UUID : TUConversationActivitySessionContainer], Never>>);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v1;
  swift_retain();
  return v2;
}

id one-time initialization function for shared()
{
  id result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ConversationManagerClient()), sel_init);
  static ConversationManagerClient.shared = (uint64_t)result;
  return result;
}

{
  id result;

  id result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CPAudioRoutePolicyManager()), sel_init);
  static CPAudioRoutePolicyManager.shared = (uint64_t)result;
  return result;
}

{
  id result;
  uint64_t v1;
  long long v2;
  long long v3;

  id result = objc_msgSend(self, sel_sharedInstance);
  if (result)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v2, &v3);
    type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for IMUserNotificationCenter);
    id result = (id)swift_dynamicCast();
    static IMUserNotificationCenter.shared = v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  id result;

  id result = closure #1 in variable initialization expression of static CPApplicationPolicyManager.shared();
  static CPApplicationPolicyManager.shared = (uint64_t)result;
  return result;
}

char *@objc ConversationManagerClient.init()()
{
  return ConversationManagerClient.init()();
}

void ActivitySession.$state.modify(uint64_t a1, char a2)
{
  v3 = *(void **)a1;
  v4 = *(void (**)(void, void, void))(*(void *)(*(void *)a1 + 88) + 16);
  v4(*(void *)(*(void *)a1 + 104), v3[14], v3[10]);
  v5 = (void *)v3[14];
  v6 = (void *)v3[12];
  v7 = (void *)v3[13];
  uint64_t v8 = v3[10];
  uint64_t v9 = v3[11];
  if (a2)
  {
    v4(v3[12], v3[13], v3[10]);
    swift_beginAccess();
    Published.projectedValue.setter();
    swift_endAccess();
    v10 = *(void (**)(void *, uint64_t))(v9 + 8);
    v10(v7, v8);
    v10(v5, v8);
  }
  else
  {
    swift_beginAccess();
    Published.projectedValue.setter();
    swift_endAccess();
    (*(void (**)(void *, uint64_t))(v9 + 8))(v5, v8);
  }
  free(v5);
  free(v7);
  free(v6);
  free(v3);
}

void (*ConversationManagerClient.$activeSessionContainer.modify(void *a1))(uint64_t a1, char a2)
{
  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<TUConversationActivitySessionContainer?>.Publisher);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  v7 = malloc(v6);
  uint64_t v8 = direct field offset for ConversationManagerClient._activeSessionContainer;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<TUConversationActivitySessionContainer?>);
  Published.projectedValue.getter();
  swift_endAccess();
  return ActivitySession.$state.modify;
}

void *ConversationManagerClient.notification.getter()
{
  uint64_t v1 = direct field offset for ConversationManagerClient.$__lazy_storage_$_notification;
  if (*(void *)(v0 + direct field offset for ConversationManagerClient.$__lazy_storage_$_notification))
  {
    uint64_t v2 = *(void **)(v0 + direct field offset for ConversationManagerClient.$__lazy_storage_$_notification);
  }
  else
  {
    uint64_t v3 = v0;
    uint64_t v4 = *(void **)(v0 + direct field offset for XPCClient.queue);
    type metadata accessor for HostConnectionNotificationObserver();
    swift_allocObject();
    uint64_t v2 = HostConnectionNotificationObserver.init(queue:)(v4);
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

void *HostConnectionNotificationObserver.init(queue:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<DarwinNotification, OS_dispatch_queue>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v43 = v6;
  uint64_t v44 = v7;
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  v41 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  v42 = (char *)v35 - v10;
  uint64_t v45 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<UInt64, Never>);
  swift_allocObject();
  uint64_t v11 = CurrentValueSubject.init(_:)();
  v12 = v1;
  v1[5] = MEMORY[0x1E4FBC870];
  v1[4] = v11;
  uint64_t v13 = type metadata accessor for DarwinNotification();
  swift_allocObject();
  id v14 = a1;
  v1[2] = DarwinNotification.init(name:queue:)(0xD00000000000003ALL, 0x80000001B115A680, v14);
  if (one-time initialization token for canConnectBypassingSharePlayRestriction != -1) {
    swift_once();
  }
  if (static HostConnectionNotificationObserver.canConnectBypassingSharePlayRestriction == 1)
  {
    uint64_t v15 = v13;
    swift_allocObject();
    uint64_t v16 = DarwinNotification.init(name:queue:)(0xD000000000000056, 0x80000001B115A6C0, v14);
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v15 = v13;
  }
  v35[1] = v15;
  v1[3] = v16;
  uint64_t v45 = v1[2];
  id v46 = v14;
  uint64_t v17 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v18 = *(void *)(v17 - 8);
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
  uint64_t v36 = v17;
  uint64_t v39 = v18 + 56;
  v40 = v19;
  ((void (*)(char *, uint64_t, uint64_t))v19)(v5, 1, 1);
  uint64_t v20 = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v21 = _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0(&lazy protocol witness table cache variable for type DarwinNotification and conformance DarwinNotification, (void (*)(uint64_t))type metadata accessor for DarwinNotification);
  uint64_t v22 = _sSo29TUConversationActivitySessionCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  swift_retain();
  v23 = v42;
  uint64_t v37 = v21;
  uint64_t v38 = v20;
  uint64_t v24 = (uint64_t)v5;
  v35[2] = v22;
  Publisher.receive<A>(on:options:)();
  outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  swift_release();
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = v14;
  *(void *)(v26 + 24) = v25;
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<DarwinNotification, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<DarwinNotification, OS_dispatch_queue>);
  id v27 = v14;
  uint64_t v28 = v43;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  v29 = *(void (**)(char *, uint64_t))(v44 + 8);
  v29(v23, v28);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  if (v12[3])
  {
    uint64_t v45 = v12[3];
    id v46 = v27;
    v40(v5, 1, 1, v36);
    swift_retain();
    v30 = v41;
    Publisher.receive<A>(on:options:)();
    outlined destroy of UUID?(v24, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
    swift_release();
    uint64_t v31 = swift_allocObject();
    swift_weakInit();
    uint64_t v32 = swift_allocObject();
    *(void *)(v32 + 16) = v27;
    *(void *)(v32 + 24) = v31;
    id v33 = v27;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    v29(v30, v28);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
  }

  return v12;
}

char *ConversationManagerClient.init()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, TUConversationActivitySessionContainer?>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v55 = v1;
  uint64_t v56 = v2;
  MEMORY[0x1F4188790](v1);
  v54 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<Publishers.Map<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, TUConversationActivitySessionContainer?>>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v57 = v4;
  uint64_t v58 = v5;
  MEMORY[0x1F4188790](v4);
  v53 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.ReceiveOn<HostConnectionNotificationObserver, OS_dispatch_queue>);
  uint64_t v52 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<TUConversationActivitySessionContainer?>);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v0[direct field offset for ConversationManagerClient.pluginClientReporter] = 0;
  *(void *)&v0[direct field offset for ConversationManagerClient.pubSubTopicReporter] = 0;
  uint64_t v17 = direct field offset for ConversationManagerClient.customEndpointProviders;
  uint64_t v18 = v0;
  uint64_t v19 = MEMORY[0x1E4FBC860];
  *(void *)&v0[v17] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v20 = (uint64_t *)&v18[direct field offset for ConversationManagerClient.publishers];
  v59[0] = specialized Dictionary.init(dictionaryLiteral:)(v19);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<[UUID : TUConversationActivitySessionContainer], Never>);
  swift_allocObject();
  uint64_t v21 = CurrentValueSubject.init(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  swift_allocObject();
  uint64_t v22 = PassthroughSubject.init()();
  *uint64_t v20 = v21;
  v20[1] = v22;
  *(void *)&v18[direct field offset for ConversationManagerClient.subscriptions] = MEMORY[0x1E4FBC870];
  *(void *)&v18[direct field offset for ConversationManagerClient.$__lazy_storage_$_notification] = 0;
  v18[direct field offset for ConversationManagerClient.hasInitialState] = 0;
  v23 = &v18[direct field offset for ConversationManagerClient._activeSessionContainer];
  v59[0] = 0;
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUConversationActivitySessionContainer?);
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v23, v16, v13);

  uint64_t v24 = (objc_class *)type metadata accessor for ConversationManagerClient();
  v61.receiver = v18;
  v61.super_class = v24;
  uint64_t v25 = (char *)objc_msgSendSuper2(&v61, sel_init);
  uint64_t v26 = direct field offset for XPCClient.queue;
  id v27 = *(void **)&v25[direct field offset for XPCClient.queue];
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = v25;
  type metadata accessor for PluginClientReporter();
  v29 = (void *)swift_allocObject();
  uint64_t v30 = MEMORY[0x1E4FBC868];
  v29[5] = MEMORY[0x1E4FBC868];
  v29[6] = v30;
  v29[2] = v27;
  v29[3] = partial apply for closure #1 in ConversationManagerClient.init();
  v29[4] = v28;
  uint64_t v31 = &v25[direct field offset for ConversationManagerClient.pluginClientReporter];
  swift_beginAccess();
  *(void *)uint64_t v31 = v29;
  uint64_t v32 = v25;
  id v33 = v27;
  swift_release();
  v34 = *(void **)&v25[v26];
  uint64_t v35 = swift_allocObject();
  *(void *)(v35 + 16) = v32;
  type metadata accessor for PubSubTopicReporter();
  uint64_t v36 = (void *)swift_allocObject();
  v36[4] = v35;
  v36[5] = v30;
  v36[2] = v34;
  v36[3] = partial apply for closure #2 in ConversationManagerClient.init();
  uint64_t v37 = &v32[direct field offset for ConversationManagerClient.pubSubTopicReporter];
  swift_beginAccess();
  *(void *)uint64_t v37 = v36;
  uint64_t v38 = v32;
  id v39 = v34;
  swift_release();
  v59[0] = ConversationManagerClient.notification.getter();
  id v60 = *(id *)&v25[v26];
  id v40 = v60;
  uint64_t v41 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v9, 1, 1, v41);
  type metadata accessor for HostConnectionNotificationObserver();
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0(&lazy protocol witness table cache variable for type HostConnectionNotificationObserver and conformance HostConnectionNotificationObserver, (void (*)(uint64_t))type metadata accessor for HostConnectionNotificationObserver);
  _sSo29TUConversationActivitySessionCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  id v42 = v40;
  Publisher.receive<A>(on:options:)();
  outlined destroy of UUID?((uint64_t)v9, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  swift_release();
  swift_allocObject();
  swift_unknownObjectUnownedInit();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<HostConnectionNotificationObserver, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, (uint64_t *)&demangling cache variable for type metadata for Publishers.ReceiveOn<HostConnectionNotificationObserver, OS_dispatch_queue>);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v12, v10);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v43 = *(void *)&v38[direct field offset for ConversationManagerClient.publishers];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PublisherBox<CurrentValueSubject<[UUID : TUConversationActivitySessionContainer], Never>>);
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = v43;
  v59[0] = v44;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>);
  uint64_t v45 = v54;
  Publisher.map<A>(_:)();
  swift_release();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, TUConversationActivitySessionContainer?> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, TUConversationActivitySessionContainer?>);
  id v46 = v53;
  uint64_t v47 = v55;
  Publisher.removeDuplicates(by:)();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v45, v47);
  v48 = (void (*)(void *, void))(*(uint64_t (**)(void *))((*MEMORY[0x1E4FBC8C8] & *(void *)v38)
                                                                                   + 0x1E0))(v59);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<Publishers.Map<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, TUConversationActivitySessionContainer?>> and conformance Publishers.RemoveDuplicates<A>, &demangling cache variable for type metadata for Publishers.RemoveDuplicates<Publishers.Map<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, TUConversationActivitySessionContainer?>>);
  uint64_t v49 = v57;
  Publisher<>.assign(to:)();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v46, v49);
  v48(v59, 0);

  return v38;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for ConversationManagerClient()
{
  uint64_t result = type metadata singleton initialization cache for ConversationManagerClient;
  if (!type metadata singleton initialization cache for ConversationManagerClient) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for HostConnectionNotificationObserver()
{
  return self;
}

uint64_t type metadata accessor for TUConversationActivity(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_3(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_5(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_6(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for DarwinNotification()
{
  return self;
}

uint64_t lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for TUConversationActivity(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSo29TUConversationActivitySessionCSo8NSObjectCSH10ObjectiveCWlTm_0(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for TUConversationActivity(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of UUID?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, CustomEndpointProvider>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (_OWORD *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    long long v13 = *v4;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v9 = v5;
    v9[1] = v6;
    *(_OWORD *)(v2[7] + 16 * result) = v13;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  void v22[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, TUConversationActivitySessionContainer));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, TUConversationActivitySessionContainer>);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  char v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  BOOL v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  long long v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (UUID, TUConversationActivitySessionContainer));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if (v15) {
      break;
    }
    uint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(void *)(v7[7] + 8 * v16) = *(void *)&v5[v9];
    uint64_t v19 = v7[2];
    uint64_t v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSObject>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v4 - 2);
    uint64_t v6 = (uint64_t)*(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    char v8 = v7;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    BOOL v11 = (uint64_t *)(v2[6] + 16 * result);
    *BOOL v11 = v5;
    v11[1] = v6;
    *(void *)(v2[7] + 8 * result) = v8;
    uint64_t v12 = v2[2];
    long long v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  long long v17;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, Any));
    uint64_t v7 = v15;
    char v8 = v16;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    BOOL v11 = (uint64_t *)(v3[6] + 16 * result);
    *BOOL v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    long long v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  long long v13;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ()>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (_OWORD *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    long long v13 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v9 = v5;
    v9[1] = v6;
    *(_OWORD *)(v2[7] + 16 * result) = v13;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  void v22[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingUserInfoKey, Any));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<CodingUserInfoKey, Any>);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  char v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  BOOL v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  long long v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (CodingUserInfoKey, Any));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if (v15) {
      break;
    }
    uint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for CodingUserInfoKey();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    unint64_t result = (unint64_t)outlined init with take of Any(v9, (_OWORD *)(v7[7] + 32 * v16));
    uint64_t v19 = v7[2];
    uint64_t v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  long long v17;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, BackgroundSessionManagerDataSource>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, BackgroundSessionManagerDataSource));
    uint64_t v7 = v15;
    char v8 = v16;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    BOOL v11 = (uint64_t *)(v3[6] + 16 * result);
    *BOOL v11 = v7;
    v11[1] = v8;
    unint64_t result = outlined init with take of BackgroundSessionManagerDataSource(&v17, v3[7] + 40 * result);
    uint64_t v12 = v3[2];
    long long v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 56;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    char v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    BOOL v11 = (uint64_t *)(v2[6] + 16 * result);
    *BOOL v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    char *v12 = v8;
    v12[1] = v7;
    long long v13 = v2[2];
    uint64_t v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  long long v10;
  long long v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  long long v17;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v6, (uint64_t)v15, &demangling cache variable for type metadata for (AnyHashable, Any));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    uint64_t v10 = v15[0];
    BOOL v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    long long v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt64, AttachmentLedger_AttachmentEncryption));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (uint64_t *)((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, AttachmentLedger_AttachmentEncryption>);
    uint64_t v7 = (void *)static _DictionaryStorage.allocate(capacity:)();
    char v8 = (uint64_t)v5 + *(int *)(v2 + 48);
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v10 = *(void *)(v3 + 72);
    while (1)
    {
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v9, (uint64_t)v5, &demangling cache variable for type metadata for (UInt64, AttachmentLedger_AttachmentEncryption));
      BOOL v11 = *v5;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*v5);
      if (v13) {
        break;
      }
      uint64_t v14 = result;
      *(void *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v7[6] + 8 * result) = v11;
      uint64_t v15 = v7[7];
      uint64_t v16 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
      unint64_t result = outlined init with take of ActivitySession.DomainAssertionWrapper(v8, v15 + *(void *)(*(void *)(v16 - 8) + 72) * v14, type metadata accessor for AttachmentLedger_AttachmentEncryption);
      uint64_t v17 = v7[2];
      uint64_t v18 = __OFADD__(v17, 1);
      uint64_t v19 = v17 + 1;
      if (v18) {
        goto LABEL_10;
      }
      v7[2] = v19;
      v9 += v10;
      if (!--v6) {
        return (unint64_t)v7;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC868];
  }
  return result;
}

char *@objc XPCClient.init()()
{
  return XPCClient.init()();
}

char *XPCClient.init()()
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v27 = *MEMORY[0x1E4FBC8C8] & *v0;
  uint64_t v1 = v27;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v31 = *(void *)(v2 - 8);
  uint64_t v32 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v30 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v29 = direct field offset for XPCClient.queue;
  unint64_t v28 = type metadata accessor for OS_dispatch_queue();
  unint64_t v34 = 0;
  unint64_t v35 = 0xE000000000000000;
  uint64_t v6 = v0;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  unint64_t v34 = 0xD000000000000015;
  unint64_t v35 = 0x80000001B1161850;
  uint64_t v26 = *(void *)(v1 + 80);
  v7._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  unint64_t v34 = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v31 + 104))(v30, *MEMORY[0x1E4FBCC58], v32);
  *(void *)((char *)v0 + v29) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  char v8 = (void *)((char *)v6 + direct field offset for XPCClient.connectionClosure);
  *char v8 = 0;
  v8[1] = 0;
  uint64_t v9 = (char *)v6 + direct field offset for XPCClient._connection;
  *(_OWORD *)uint64_t v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  *((void *)v9 + 4) = 0;

  uint64_t v10 = v26;
  uint64_t v11 = *(void *)(v27 + 88);
  uint64_t v12 = (objc_class *)type metadata accessor for XPCClient();
  v36.receiver = v6;
  v36.super_class = v12;
  long long v13 = (char *)objc_msgSendSuper2(&v36, sel_init);
  uint64_t v14 = swift_allocObject();
  swift_unknownObjectUnownedInit();
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = v10;
  v15[3] = v11;
  uint64_t v16 = v10;
  uint64_t v17 = ObjectType;
  v15[4] = v14;
  v15[5] = v17;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = partial apply for closure #1 in XPCClient.init();
  *(void *)(v18 + 24) = v15;
  uint64_t v19 = &v13[direct field offset for XPCClient._connection];
  swift_beginAccess();
  uint64_t v20 = *((void *)v19 + 1);
  *((void *)v19 + 1) = partial apply for thunk for @escaping @callee_guaranteed () -> (@owned NSXPCConnection);
  *((void *)v19 + 2) = v18;
  _sxRi_zRi0_zlyytIseghHr_SgWOe(v20);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v16;
  v21[3] = v11;
  v21[4] = v17;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = partial apply for closure #2 in XPCClient.init();
  *(void *)(v22 + 24) = v21;
  uint64_t v23 = *((void *)v19 + 3);
  *((void *)v19 + 3) = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed BMGroupActivitySessionEvent) -> ();
  *((void *)v19 + 4) = v22;
  _sxRi_zRi0_zlyytIseghHr_SgWOe(v23);
  return v13;
}

uint64_t _sxRi_zRi0_zlyytIseghHr_SgWOe(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for XPCClient()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

uint64_t type metadata accessor for PluginClientReporter()
{
  return self;
}

uint64_t type metadata accessor for PubSubTopicReporter()
{
  return self;
}

uint64_t DarwinNotification.init(name:queue:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  *(_DWORD *)(v3 + 32) = -1;
  char v8 = (int *)(v3 + 32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<UInt64, Never>);
  swift_allocObject();
  *(void *)(v3 + 40) = CurrentValueSubject.init(_:)();
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  swift_unownedRetainStrong();
  swift_unownedRetain();
  swift_unownedRetain();
  swift_bridgeObjectRetain();
  uint64_t v9 = a3;
  swift_unownedRelease();
  swift_unownedRelease();
  swift_unownedRetain();
  swift_release();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v3;
  v18[4] = partial apply for closure #1 in DarwinNotification.init(name:queue:);
  v18[5] = v10;
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 1107296256;
  v18[2] = thunk for @escaping @callee_guaranteed (@unowned Int32) -> ();
  v18[3] = &block_descriptor_39;
  uint64_t v11 = _Block_copy(v18);
  swift_release();
  uint64_t v12 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  LODWORD(v8) = notify_register_dispatch((const char *)(v12 + 32), v8, v9, v11);
  swift_endAccess();
  swift_release();
  _Block_release(v11);

  if (v8)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Log.default);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_1B0DF7000, v14, v15, "Could not create notification observer.", v16, 2u);
      MEMORY[0x1B3EA39E0](v16, -1, -1);
    }
  }
  else
  {
    DarwinNotification.handleNotification()();
  }

  return v4;
}

uint64_t DarwinNotification.handleNotification()()
{
  uint64_t v1 = v0;
  state64[1] = *MEMORY[0x1E4F143B8];
  state64[0] = 0;
  swift_beginAccess();
  if (notify_get_state(*(_DWORD *)(v0 + 32), state64))
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Log.default);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_1B0DF7000, v3, v4, "Could not get current state.", v5, 2u);
      MEMORY[0x1B3EA39E0](v5, -1, -1);
    }

    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = state64[0];
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.default);
  swift_retain();
  char v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    state64[0] = v11;
    *(_DWORD *)uint64_t v10 = 136315394;
    uint64_t v12 = *(void *)(v1 + 16);
    unint64_t v13 = *(void *)(v1 + 24);
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, (uint64_t *)state64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B0DF7000, v8, v9, "Received DarwinNotification %s value: %llu", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v11, -1, -1);
    MEMORY[0x1B3EA39E0](v10, -1, -1);
  }
  else
  {

    swift_release();
  }
  state64[0] = v6;
  return CurrentValueSubject.send(_:)();
}

void closure #3 in ConversationManagerClient.init()(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (uint64_t *)((char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *a1;
  uint64_t Strong = swift_unknownObjectUnownedLoadStrong();
  id v8 = *(id *)(Strong + direct field offset for XPCClient.queue);

  void *v5 = v8;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FBCBF0], v2);
  LOBYTE(Strong) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (Strong)
  {
    if (one-time initialization token for client == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.client);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v22 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    uint64_t v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000003ALL, 0x80000001B115A680, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B0DF7000, v10, v11, "Handling %s by requesting initial state.", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v13, -1, -1);
    MEMORY[0x1B3EA39E0](v12, -1, -1);
  }

  if (v6 == 1)
  {
    uint64_t v14 = (void *)swift_unknownObjectUnownedLoadStrong();
    os_log_type_t v15 = (void *)MEMORY[0x1E4FBC8C8];
    char v16 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v14) + 0x1A0))();

    if ((v16 & 1) == 0)
    {
      uint64_t v17 = swift_unknownObjectUnownedLoadStrong();
      (*(void (**)(void))((*v15 & (uint64_t)v17->isa) + 0x1E8))();
      goto LABEL_13;
    }
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      uint64_t v20 = "ConversationManagerClient not re-requesting initial state since we have initial state.";
LABEL_11:
      _os_log_impl(&dword_1B0DF7000, v17, v18, v20, v19, 2u);
      MEMORY[0x1B3EA39E0](v19, -1, -1);
    }
  }
  else
  {
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      uint64_t v20 = "Host has no conversations.";
      goto LABEL_11;
    }
  }
LABEL_13:
}

uint64_t one-time initialization function for default(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x1E4FBB9B0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  return v7;
}

uint64_t __swift_destroy_boxed_opaque_existential_1Tm(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t type metadata completion function for XPCClient()
{
  return swift_initClassMetadata2();
}

void one-time initialization function for canConnectBypassingSharePlayRestriction()
{
  id v0 = objc_msgSend(self, sel_processInfo);
  char v1 = specialized NSProcessInfo.getEntitlementBoolValue(_:)(0xD000000000000039, 0x80000001B115AD00);

  static HostConnectionNotificationObserver.canConnectBypassingSharePlayRestriction = v1 & 1;
}

uint64_t specialized NSProcessInfo.getEntitlementBoolValue(_:)(uint64_t a1, uint64_t a2)
{
  SecTaskRef v4 = SecTaskCreateFromSelf(0);
  if (!v4) {
    return 2;
  }
  uint64_t v5 = v4;
  uint64_t v6 = (__CFString *)MEMORY[0x1B3EA1B00](a1, a2);
  CFTypeRef v7 = SecTaskCopyValueForEntitlement(v5, v6, 0);

  uint64_t v8 = 2;
  if (v7)
  {
    if (swift_dynamicCast()) {
      return v10;
    }
    else {
      return 2;
    }
  }
  return v8;
}

uint64_t partial apply for closure #2 in HostConnectionNotificationObserver.init(queue:)(uint64_t *a1)
{
  return closure #1 in HostConnectionNotificationObserver.init(queue:)(a1, *(void **)(v1 + 16));
}

uint64_t closure #1 in HostConnectionNotificationObserver.init(queue:)(uint64_t *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  CFTypeRef v7 = (uint64_t *)((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *a1;
  void *v7 = a2;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4FBCBF0], v4);
  id v9 = a2;
  LOBYTE(a2) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if (a2)
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      uint64_t v11 = v8;
      CurrentValueSubject.send(_:)();
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void closure #4 in ConversationManagerClient.init()(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(*a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(*a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain_n();
  int64_t v9 = 0;
  if (!v7) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v10 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v9 << 6))
  {
    id v15 = *(id *)(*(void *)(v3 + 56) + 8 * i);
    if (objc_msgSend(v15, sel_state) == (id)3)
    {
      swift_release();
      swift_bridgeObjectRelease();
LABEL_28:
      *a2 = v15;
      return;
    }

    if (v7) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      break;
    }
    if (v12 >= v8) {
      goto LABEL_27;
    }
    unint64_t v13 = *(void *)(v4 + 8 * v12);
    ++v9;
    if (v13) {
      goto LABEL_22;
    }
    int64_t v9 = v12 + 1;
    if (v12 + 1 >= v8) {
      goto LABEL_27;
    }
    unint64_t v13 = *(void *)(v4 + 8 * v9);
    if (v13) {
      goto LABEL_22;
    }
    int64_t v9 = v12 + 2;
    if (v12 + 2 >= v8) {
      goto LABEL_27;
    }
    unint64_t v13 = *(void *)(v4 + 8 * v9);
    if (v13) {
      goto LABEL_22;
    }
    int64_t v9 = v12 + 3;
    if (v12 + 3 >= v8) {
      goto LABEL_27;
    }
    unint64_t v13 = *(void *)(v4 + 8 * v9);
    if (v13) {
      goto LABEL_22;
    }
    int64_t v9 = v12 + 4;
    if (v12 + 4 >= v8) {
      goto LABEL_27;
    }
    unint64_t v13 = *(void *)(v4 + 8 * v9);
    if (v13) {
      goto LABEL_22;
    }
    int64_t v14 = v12 + 5;
    if (v14 >= v8)
    {
LABEL_27:
      swift_release();
      swift_bridgeObjectRelease();
      id v15 = 0;
      goto LABEL_28;
    }
    unint64_t v13 = *(void *)(v4 + 8 * v14);
    if (!v13)
    {
      while (1)
      {
        int64_t v9 = v14 + 1;
        if (__OFADD__(v14, 1)) {
          goto LABEL_30;
        }
        if (v9 >= v8) {
          goto LABEL_27;
        }
        unint64_t v13 = *(void *)(v4 + 8 * v9);
        ++v14;
        if (v13) {
          goto LABEL_22;
        }
      }
    }
    int64_t v9 = v14;
LABEL_22:
    unint64_t v7 = (v13 - 1) & v13;
  }
  __break(1u);
LABEL_30:
  __break(1u);
}

void OUTLINED_FUNCTION_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

uint64_t CPDataCryptorClass()
{
  return objc_opt_class();
}

id CPDefaultLog()
{
  if (CPDefaultLog_onceToken != -1) {
    dispatch_once(&CPDefaultLog_onceToken, &__block_literal_global);
  }
  id v0 = (void *)CPDefaultLog_CPDefaultLog;
  return v0;
}

uint64_t __CPDefaultLog_block_invoke()
{
  CPDefaultLog_CPDefaultLog = (uint64_t)os_log_create(CPLoggingSubsystem, "Default");
  return MEMORY[0x1F41817F8]();
}

void sub_1B0DFE4B0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1B0DFE528(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1B0DFE598(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id getGKLocalPlayerClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getGKLocalPlayerClass_softClass;
  uint64_t v7 = getGKLocalPlayerClass_softClass;
  if (!getGKLocalPlayerClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getGKLocalPlayerClass_block_invoke;
    v3[3] = &unk_1E5FF1A68;
    v3[4] = &v4;
    __getGKLocalPlayerClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1B0E01368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getGKDaemonProxyClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getGKDaemonProxyClass_softClass;
  uint64_t v7 = getGKDaemonProxyClass_softClass;
  if (!getGKDaemonProxyClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getGKDaemonProxyClass_block_invoke;
    v3[3] = &unk_1E5FF1A68;
    v3[4] = &v4;
    __getGKDaemonProxyClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1B0E0144C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id cpGameCenterLog()
{
  if (cpGameCenterLog___once != -1) {
    dispatch_once(&cpGameCenterLog___once, &__block_literal_global_27);
  }
  id v0 = (void *)cpGameCenterLog__log;
  return v0;
}

void __getGKLocalPlayerClass_block_invoke(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("GKLocalPlayer");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getGKLocalPlayerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    __getGKLocalPlayerClass_block_invoke_cold_1();
    GameCenterFoundationLibrary();
  }
}

void GameCenterFoundationLibrary()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  v1[0] = 0;
  if (!GameCenterFoundationLibraryCore_frameworkLibrary)
  {
    v1[1] = MEMORY[0x1E4F143A8];
    v1[2] = 3221225472;
    v1[3] = __GameCenterFoundationLibraryCore_block_invoke;
    v1[4] = &__block_descriptor_40_e5_v8__0l;
    v1[5] = v1;
    long long v2 = xmmword_1E5FF1A88;
    uint64_t v3 = 0;
    GameCenterFoundationLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  id v0 = (void *)v1[0];
  if (!GameCenterFoundationLibraryCore_frameworkLibrary)
  {
    id v0 = (void *)abort_report_np();
    goto LABEL_7;
  }
  if (v1[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __GameCenterFoundationLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  GameCenterFoundationLibraryCore_frameworkLibrary = result;
  return result;
}

Class __getGKDaemonProxyClass_block_invoke(uint64_t a1)
{
  GameCenterFoundationLibrary();
  Class result = objc_getClass("GKDaemonProxy");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getGKDaemonProxyClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = __getGKDaemonProxyClass_block_invoke_cold_1();
    return (Class)__cpGameCenterLog_block_invoke(v3);
  }
  return result;
}

uint64_t __cpGameCenterLog_block_invoke()
{
  cpGameCenterLog__log = (uint64_t)os_log_create(CPLoggingSubsystem, "CPGameCenterUtilities");
  return MEMORY[0x1F41817F8]();
}

BOOL static ActivitySession.Errors.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void ActivitySession.Errors.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int ActivitySession.Errors.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ActivitySession.Errors(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ActivitySession.Errors()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ActivitySession.Errors()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ActivitySession.Errors()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Error._domain.getter in conformance ActivitySession.Errors()
{
  return MEMORY[0x1F4185E10]();
}

uint64_t protocol witness for Error._code.getter in conformance ActivitySession.Errors()
{
  return MEMORY[0x1F4185E08]();
}

uint64_t protocol witness for Error._userInfo.getter in conformance ActivitySession.Errors()
{
  return MEMORY[0x1F4185E18]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance ActivitySession.Errors()
{
  return MEMORY[0x1F4185E00]();
}

uint64_t ActivitySession.State.description.getter()
{
  uint64_t v1 = *v0;
  unint64_t v2 = (unint64_t)*v0 >> 62;
  if (!v2) {
    return 0x6164696C61766E49;
  }
  if (v2 == 1) {
    return 0x664F6465646E6148;
  }
  uint64_t v4 = 0x64656E696F4ALL;
  if (v1 != 0x8000000000000008) {
    uint64_t v4 = 1952867660;
  }
  if (v1 == 0x8000000000000000) {
    return 0x676E6974696157;
  }
  else {
    return v4;
  }
}

uint64_t static ActivitySession.State.== infix(_:_:)(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = *a2;
  unint64_t v4 = *a1 >> 62;
  if (!v4)
  {
    if (v3 >> 62) {
      goto LABEL_22;
    }
    uint64_t v7 = *(void *)(v2 + 24);
    uint64_t v8 = *(void *)(v3 + 24);
    if (v7)
    {
      if (v8)
      {
        if (*(void *)(v2 + 16) != *(void *)(v3 + 16) || v7 != v8)
        {
          char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
          outlined copy of ActivitySession.State(v3);
          outlined copy of ActivitySession.State(v2);
          outlined consume of ActivitySession.State(v2);
          outlined consume of ActivitySession.State(v3);
          if (v10) {
            goto LABEL_30;
          }
LABEL_25:
          char v6 = 0;
          return v6 & 1;
        }
        outlined copy of ActivitySession.State(v3);
        outlined copy of ActivitySession.State(v2);
LABEL_28:
        outlined consume of ActivitySession.State(v2);
        unint64_t v11 = v3;
LABEL_29:
        outlined consume of ActivitySession.State(v11);
LABEL_30:
        char v6 = 1;
        return v6 & 1;
      }
    }
    else if (!v8)
    {
      outlined copy of ActivitySession.State(v3);
      outlined copy of ActivitySession.State(v2);
      swift_bridgeObjectRelease_n();
      goto LABEL_28;
    }
    outlined copy of ActivitySession.State(v3);
    outlined copy of ActivitySession.State(v2);
    outlined consume of ActivitySession.State(v2);
    outlined consume of ActivitySession.State(v3);
    goto LABEL_25;
  }
  if (v4 != 1)
  {
    if (v2 == 0x8000000000000000)
    {
      if (v3 != 0x8000000000000000) {
        goto LABEL_22;
      }
      outlined consume of ActivitySession.State(0x8000000000000000);
      unint64_t v11 = 0x8000000000000000;
    }
    else if (v2 == 0x8000000000000008)
    {
      if (v3 != 0x8000000000000008) {
        goto LABEL_22;
      }
      outlined consume of ActivitySession.State(0x8000000000000008);
      unint64_t v11 = 0x8000000000000008;
    }
    else
    {
      if (v3 != 0x8000000000000010) {
        goto LABEL_22;
      }
      outlined consume of ActivitySession.State(0x8000000000000010);
      unint64_t v11 = 0x8000000000000010;
    }
    goto LABEL_29;
  }
  if (v3 >> 62 != 1)
  {
LABEL_22:
    outlined copy of ActivitySession.State(*a2);
    outlined copy of ActivitySession.State(v2);
    outlined consume of ActivitySession.State(v2);
    outlined consume of ActivitySession.State(v3);
    char v6 = 0;
    return v6 & 1;
  }
  uint64_t v5 = *(void *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
  uint64_t v13 = *(void *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
  uint64_t v14 = v5;
  outlined copy of ActivitySession.State(v3);
  outlined copy of ActivitySession.State(v2);
  char v6 = static ActivitySession.State.== infix(_:_:)(&v14, &v13);
  outlined consume of ActivitySession.State(v2);
  outlined consume of ActivitySession.State(v3);
  return v6 & 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ActivitySession.State()
{
  uint64_t v1 = *v0;
  unint64_t v2 = (unint64_t)*v0 >> 62;
  if (!v2) {
    return 0x6164696C61766E49;
  }
  if (v2 == 1) {
    return 0x664F6465646E6148;
  }
  uint64_t v4 = 0x64656E696F4ALL;
  if (v1 != 0x8000000000000008) {
    uint64_t v4 = 1952867660;
  }
  if (v1 == 0x8000000000000000) {
    return 0x676E6974696157;
  }
  else {
    return v4;
  }
}

uint64_t ActivitySession.Capabilities.rawValue.getter()
{
  return *(void *)v0;
}

void *ActivitySession.Capabilities.pluginNames.getter()
{
  if ((*v0 & 1) == 0) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
  unint64_t v3 = v1[2];
  unint64_t v2 = v1[3];
  if (v3 >= v2 >> 1) {
    uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v2 > 1), v3 + 1, 1, v1);
  }
  v1[2] = v3 + 1;
  uint64_t v4 = &v1[2 * v3];
  v4[4] = 0xD000000000000010;
  v4[5] = 0x80000001B115AD80;
  return v1;
}

uint64_t *ActivitySession.Capabilities.attachments.unsafeMutableAddressor()
{
  if (one-time initialization token for attachments != -1) {
    swift_once();
  }
  return &static ActivitySession.Capabilities.attachments;
}

void one-time initialization function for attachments()
{
  static ActivitySession.Capabilities.attachments = 1;
}

CopresenceCore::ActivitySession::Capabilities __swiftcall ActivitySession.Capabilities.init(rawValue:)(CopresenceCore::ActivitySession::Capabilities rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static ActivitySession.Capabilities.attachments.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void *protocol witness for OptionSet.init(rawValue:) in conformance ActivitySession.Capabilities@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for SetAlgebra.init() in conformance ActivitySession.Capabilities(void *a1@<X8>)
{
  *a1 = 0;
}

void *protocol witness for SetAlgebra.union(_:) in conformance ActivitySession.Capabilities@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *protocol witness for SetAlgebra.intersection(_:) in conformance ActivitySession.Capabilities@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance ActivitySession.Capabilities@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance ActivitySession.Capabilities(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *protocol witness for SetAlgebra.remove(_:) in conformance ActivitySession.Capabilities@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *protocol witness for SetAlgebra.update(with:) in conformance ActivitySession.Capabilities@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *protocol witness for SetAlgebra.formUnion(_:) in conformance ActivitySession.Capabilities(void *result)
{
  *v1 |= *result;
  return result;
}

void *protocol witness for SetAlgebra.formIntersection(_:) in conformance ActivitySession.Capabilities(void *result)
{
  *v1 &= *result;
  return result;
}

void *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance ActivitySession.Capabilities(void *result)
{
  *v1 ^= *result;
  return result;
}

void *protocol witness for SetAlgebra.subtracting(_:) in conformance ActivitySession.Capabilities@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance ActivitySession.Capabilities(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance ActivitySession.Capabilities(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance ActivitySession.Capabilities(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance ActivitySession.Capabilities()
{
  return *v0 == 0;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance ActivitySession.Capabilities(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F4184B08](a1, a4, a2, a5, a3);
}

void *protocol witness for SetAlgebra.subtract(_:) in conformance ActivitySession.Capabilities(void *result)
{
  *v1 &= ~*result;
  return result;
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance ActivitySession.Capabilities@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ActivitySession.Capabilities(void *a1@<X8>)
{
  *a1 = *v1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ActivitySession.Capabilities(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      if ((v7 & ~v4) == 0) {
        uint64_t v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t ActivitySession.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR___CPActivitySession_id;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t key path getter for ActivitySession.activityInterval : ActivitySession(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x150))();
}

uint64_t key path setter for ActivitySession.activityInterval : ActivitySession(uint64_t a1, void **a2)
{
  uint64_t v4 = type metadata accessor for DateInterval();
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x158))(v6);
}

uint64_t ActivitySession.activityInterval.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR___CPActivitySession_activityInterval;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for DateInterval();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ActivitySession.activityInterval.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR___CPActivitySession_activityInterval;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*ActivitySession.activityInterval.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t key path getter for ActivitySession.terminatingHandle : ActivitySession@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x168))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ActivitySession.terminatingHandle : ActivitySession(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x170);
  id v4 = *a1;
  return v3(v2);
}

void *ActivitySession.terminatingHandle.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR___CPActivitySession_terminatingHandle);
  swift_beginAccess();
  id v2 = *v1;
  id v3 = v2;
  return v2;
}

void ActivitySession.terminatingHandle.setter(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR___CPActivitySession_terminatingHandle);
  swift_beginAccess();
  id v4 = *v3;
  NSObject *v3 = a1;
}

uint64_t (*ActivitySession.terminatingHandle.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t key path getter for ActivitySession.isFirstJoin : ActivitySession@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x180))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for ActivitySession.isFirstJoin : ActivitySession(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x188))(*a1);
}

uint64_t ActivitySession.isFirstJoin.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___CPActivitySession_isFirstJoin);
  swift_beginAccess();
  return *v1;
}

uint64_t ActivitySession.isFirstJoin.setter(char a1)
{
  id v3 = (unsigned char *)(v1 + OBJC_IVAR___CPActivitySession_isFirstJoin);
  uint64_t result = swift_beginAccess();
  unsigned char *v3 = a1;
  return result;
}

uint64_t (*ActivitySession.isFirstJoin.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t ActivitySession.isPermittedToJoin.getter()
{
  (*(void (**)(unint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2A0))(&v6);
  if (v6 >> 62 == 1)
  {
    unint64_t v2 = *(void *)((v6 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
    unint64_t v3 = v2 >> 62;
    BOOL v4 = (v2 & 0xFFFFFFFFFFFFFFF7) == 0x8000000000000000;
    BOOL v1 = v3 == 2 && v4;
    goto LABEL_9;
  }
  if (v6 >> 62 != 2 || (v6 | 8) != 0x8000000000000008)
  {
    BOOL v1 = 0;
LABEL_9:
    outlined consume of ActivitySession.State(v6);
    return v1;
  }
  return 1;
}

uint64_t ActivitySession.persistentSceneIdentifier.getter()
{
  uint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A8))();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 16 * v2 + 16);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = 0;
  }
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t key path getter for ActivitySession.persistentSceneIdentifiers : ActivitySession@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1A8))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ActivitySession.persistentSceneIdentifiers : ActivitySession(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t *)(*a2 + OBJC_IVAR___CPActivitySession_persistentSceneIdentifiers);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t *v3 = v2;
  swift_bridgeObjectRetain();
  ActivitySession.persistentSceneIdentifiers.didset(v4);
  return swift_bridgeObjectRelease();
}

uint64_t ActivitySession.persistentSceneIdentifiers.didset(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  unint64_t v6 = (void **)((char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void **)((char *)v1 + OBJC_IVAR___CPActivitySession_queue);
  void *v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4FBCBF0], v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = a1 + 16 * v10;
    uint64_t v13 = *(void *)(v11 + 16);
    uint64_t v12 = *(void *)(v11 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v12 = 0;
  }
  uint64_t v14 = (char *)v1 + OBJC_IVAR___CPActivitySession_persistentSceneIdentifiers;
  uint64_t result = swift_beginAccess();
  uint64_t v15 = *(void *)(*(void *)v14 + 16);
  if (!v15)
  {
    if (!v12) {
      return result;
    }
    goto LABEL_17;
  }
  uint64_t v16 = *(void *)v14 + 16 * v15;
  uint64_t v18 = *(void *)(v16 + 16);
  uint64_t v17 = *(void *)(v16 + 24);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v12)
  {
    if (!v17) {
      return result;
    }
    goto LABEL_17;
  }
  if (!v17)
  {
LABEL_17:
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  if (v13 == v18 && v12 == v17)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v20) {
    return result;
  }
LABEL_18:
  uint64_t v21 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t result = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x3B0))(result);
  if (!result) {
    return result;
  }
  uint64_t v22 = (void *)result;
  id v23 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(result
                                                              + direct field offset for XPCHostConnection.connection), sel_remoteObjectProxy));
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActivitySessionXPCClient);
  uint64_t result = swift_dynamicCast();
  if (!result)
  {
LABEL_27:
    __break(1u);
    return result;
  }
  uint64_t v24 = v28;

  uint64_t v25 = (*(uint64_t (**)(void))((*v21 & *v1) + 0x1A0))();
  if (v26)
  {
    uint64_t v27 = (void *)MEMORY[0x1B3EA1B00](v25);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v27 = 0;
  }
  objc_msgSend(v24, sel_setAssociatedSceneWithSceneSessionIdentifier_, v27);

  return swift_unknownObjectRelease();
}

uint64_t ActivitySession.persistentSceneIdentifiers.getter()
{
  return ActivitySession.persistentSceneIdentifiers.getter();
}

{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for ActivitySession.persistentSceneIsEligibleForAutoClose : ActivitySession@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1C0))();
  *a2 = result & 1;
  return result;
}

void key path setter for ActivitySession.persistentSceneIsEligibleForAutoClose : ActivitySession(char *a1)
{
}

Swift::Void __swiftcall ActivitySession.sessionChanged()()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (void *)((char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)&v0[OBJC_IVAR___CPActivitySession_queue];
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBCBF0], v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    if (one-time initialization token for host == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.host);
  id v8 = v0;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 138412290;
    v17[1] = v8;
    uint64_t v13 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v12 = v8;

    _os_log_impl(&dword_1B0DF7000, v9, v10, "%@ notifying manager of change", v11, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v12, -1, -1);
    MEMORY[0x1B3EA39E0](v11, -1, -1);
  }
  else
  {
  }
  if ((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *(void *)v8) + 0x380))())
  {
    uint64_t v15 = v14;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 48))(v8, ObjectType, v15);
    swift_unknownObjectRelease();
  }
}

uint64_t ActivitySession.persistentSceneIsEligibleForAutoClose.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___CPActivitySession_persistentSceneIsEligibleForAutoClose);
  swift_beginAccess();
  return *v1;
}

void ActivitySession.persistentSceneIsEligibleForAutoClose.setter(char a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  id v6 = (uint64_t *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = (unsigned char *)(v1 + OBJC_IVAR___CPActivitySession_persistentSceneIsEligibleForAutoClose);
  swift_beginAccess();
  int v8 = *v7;
  unsigned char *v7 = a1;
  uint64_t v9 = *(void **)(v1 + OBJC_IVAR___CPActivitySession_queue);
  void *v6 = v9;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4FBCBF0], v3);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v9)
  {
    if (v8 != *v7) {
      ActivitySession.sessionChanged()();
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t key path getter for ActivitySession.audioSessionID : ActivitySession@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1D8))();
  *(_DWORD *)a2 = result;
  *(unsigned char *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t key path setter for ActivitySession.audioSessionID : ActivitySession(unsigned int *a1, void **a2)
{
  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x1E0))(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32));
}

unint64_t ActivitySession.audioSessionID.getter()
{
  uint64_t v1 = (unsigned int *)(v0 + OBJC_IVAR___CPActivitySession_audioSessionID);
  swift_beginAccess();
  return *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
}

uint64_t ActivitySession.audioSessionID.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR___CPActivitySession_audioSessionID;
  uint64_t result = swift_beginAccess();
  *(_DWORD *)uint64_t v3 = a1;
  *(unsigned char *)(v3 + 4) = BYTE4(a1) & 1;
  return result;
}

uint64_t (*ActivitySession.audioSessionID.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

uint64_t key path getter for ActivitySession.domainAssertion : ActivitySession(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1F0))();
}

uint64_t key path setter for ActivitySession.domainAssertion : ActivitySession(uint64_t a1, void **a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActivitySession.DomainAssertionWrapper?);
  MEMORY[0x1F4188790](v4 - 8);
  id v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v6, &demangling cache variable for type metadata for ActivitySession.DomainAssertionWrapper?);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x1F8))(v6);
}

uint64_t ActivitySession.domainAssertion.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR___CPActivitySession_domainAssertion;
  swift_beginAccess();
  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3, a1, &demangling cache variable for type metadata for ActivitySession.DomainAssertionWrapper?);
}

uint64_t ActivitySession.domainAssertion.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR___CPActivitySession_domainAssertion;
  swift_beginAccess();
  outlined assign with take of ActivitySession.DomainAssertionWrapper?(a1, v3, &demangling cache variable for type metadata for ActivitySession.DomainAssertionWrapper?);
  return swift_endAccess();
}

uint64_t (*ActivitySession.domainAssertion.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t key path getter for ActivitySession.distributionCount : ActivitySession@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x220))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ActivitySession.distributionCount : ActivitySession(void *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x228))(*a1);
}

uint64_t ActivitySession.distributionCount.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR___CPActivitySession_distributionCount;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t ActivitySession.distributionCount.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___CPActivitySession_distributionCount);
  uint64_t result = swift_beginAccess();
  void *v3 = a1;
  return result;
}

uint64_t (*ActivitySession.distributionCount.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t key path getter for ActivitySession.applicationState : ActivitySession@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x268))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ActivitySession.applicationState : ActivitySession(void *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x270))(*a1);
}

uint64_t ActivitySession.applicationState.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR___CPActivitySession_applicationState;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t ActivitySession.applicationState.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___CPActivitySession_applicationState);
  uint64_t result = swift_beginAccess();
  void *v3 = a1;
  return result;
}

uint64_t (*ActivitySession.applicationState.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t ActivitySession.foregroundPresentationSubject.getter()
{
  return swift_retain();
}

void *key path getter for ActivitySession.capabilities : ActivitySession@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x280))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for ActivitySession.capabilities : ActivitySession(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a2;
  uint64_t v4 = *a1;
  return (*(uint64_t (**)(uint64_t *))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x288))(&v4);
}

uint64_t ActivitySession.capabilities.didset()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (void *)((char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)&v0[OBJC_IVAR___CPActivitySession_queue];
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBCBF0], v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    if (one-time initialization token for default == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.default);
  uint64_t v8 = v0;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 138412546;
    v20[1] = v8;
    uint64_t v13 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v12 = v8;

    *(_WORD *)(v11 + 12) = 2048;
    uint64_t v14 = (uint64_t *)&v13[OBJC_IVAR___CPActivitySession_capabilities];
    swift_beginAccess();
    uint64_t v15 = *v14;

    v20[0] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_1B0DF7000, v9, v10, "%@ updated capabilities to %ld", (uint8_t *)v11, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v12, -1, -1);
    MEMORY[0x1B3EA39E0](v11, -1, -1);
  }
  else
  {
  }
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *(void *)v8) + 0x380))();
  if (result)
  {
    uint64_t v18 = v17;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 152))(v8, ObjectType, v18);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t ActivitySession.capabilities.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___CPActivitySession_capabilities);
  uint64_t result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

uint64_t ActivitySession.capabilities.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___CPActivitySession_capabilities);
  swift_beginAccess();
  void *v3 = v2;
  return ActivitySession.capabilities.didset();
}

uint64_t (*ActivitySession.capabilities.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return ActivitySession.capabilities.modify;
}

uint64_t ActivitySession.capabilities.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return ActivitySession.capabilities.didset();
  }
  return result;
}

void ActivitySession.logDurationMetric(_:)()
{
  uint64_t v1 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x330))();
  id v2 = objc_msgSend(v1, sel_activity);

  id v3 = objc_msgSend(v2, sel_metadata);
  if (v3)
  {
    id v4 = objc_msgSend(v3, sel_context);

    if (v4)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1B1138A70;
      strcpy((char *)(inited + 32), "activity_type");
      *(_WORD *)(inited + 46) = -4864;
      id v6 = objc_msgSend(v4, sel_analyticsIdentifier);
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v9 = v8;

      id v10 = objc_allocWithZone(NSString);
      uint64_t v11 = (void *)MEMORY[0x1B3EA1B00](v7, v9);
      swift_bridgeObjectRelease();
      id v12 = objc_msgSend(v10, sel_initWithString_, v11);

      *(void *)(inited + 48) = v12;
      *(void *)(inited + 56) = 0x6E6F697461727564;
      *(void *)(inited + 64) = 0xE800000000000000;
      DateInterval.duration.getter();
      *(void *)(inited + 72) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v13);
      unint64_t v14 = specialized Dictionary.init(dictionaryLiteral:)(inited);
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v15 = type metadata accessor for Logger();
      __swift_project_value_buffer(v15, (uint64_t)static Log.default);
      swift_bridgeObjectRetain_n();
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = swift_slowAlloc();
        uint64_t v19 = swift_slowAlloc();
        aBlock[0] = v19;
        *(_DWORD *)uint64_t v18 = 136315394;
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000028, 0x80000001B115ADA0, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v18 + 12) = 2080;
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : NSObject]);
        uint64_t v20 = String.init<A>(reflecting:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v16, v17, "Logged coreanalytics event %s %s", (uint8_t *)v18, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v19, -1, -1);
        MEMORY[0x1B3EA39E0](v18, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v22 = (void *)MEMORY[0x1B3EA1B00](0xD000000000000028, 0x80000001B115ADA0);
      uint64_t v23 = swift_allocObject();
      *(void *)(v23 + 16) = v14;
      aBlock[4] = (uint64_t)partial apply for closure #1 in ActivitySession.logDurationMetric(_:);
      aBlock[5] = v23;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
      aBlock[3] = (uint64_t)&block_descriptor_1;
      uint64_t v24 = _Block_copy(aBlock);
      swift_release();
      AnalyticsSendEventLazy();
      _Block_release(v24);
    }
  }
}

void *key path getter for ActivitySession.state : ActivitySession@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x2A0))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for ActivitySession.state : ActivitySession(unint64_t *a1, void **a2)
{
  id v2 = *a2;
  unint64_t v5 = *a1;
  id v3 = *(uint64_t (**)(unint64_t *))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x2A8);
  outlined copy of ActivitySession.State(v5);
  return v3(&v5);
}

void ActivitySession.state.didset(uint64_t *a1)
{
  void (*v50)(uint64_t *__return_ptr);
  void *v51;
  id v52;
  void *v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  Swift::Int32 v63;
  Swift::String v64;
  unint64_t v65;
  char v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  void *v70;
  void (*v71)(uint64_t *, void);
  uint64_t v72;
  void (*v73)(void);
  char *v74;
  uint64_t (*v75)(char *, uint64_t);
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  void (*v86)(char *, uint64_t);
  unint64_t v87;
  void (*v88)(uint64_t *__return_ptr, unint64_t);
  unint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t *, void);
  uint64_t v99;
  uint64_t ObjectType;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  void (*v110)(unint64_t *__return_ptr, uint64_t);
  uint64_t v111;
  uint64_t v112[4];
  unint64_t v113;
  unint64_t v114[2];

  id v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x1F4188790](v4 - 8);
  id v6 = (char *)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = type metadata accessor for DateInterval();
  uint64_t v7 = *(void *)(v107 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v107);
  v105 = (char *)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  v106 = (char *)&v99 - v10;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  v104 = (char *)&v99 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  v109 = (char *)&v99 - v15;
  uint64_t v16 = type metadata accessor for DispatchPredicate();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (uint64_t *)((char *)&v99 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = *a1;
  unint64_t v21 = *(void **)((char *)v2 + OBJC_IVAR___CPActivitySession_queue);
  *uint64_t v19 = v21;
  (*(void (**)(void *, void, uint64_t))(v17 + 104))(v19, *MEMORY[0x1E4FBCBF0], v16);
  id v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)();
  uint64_t v23 = (*(uint64_t (**)(void *, uint64_t))(v17 + 8))(v19, v16);
  if ((v21 & 1) == 0)
  {
    __break(1u);
    goto LABEL_58;
  }
  v108 = v7;
  v112[0] = v20;
  uint64_t v24 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v25 = (*MEMORY[0x1E4FBC8C8] & *v2) + 672;
  v110 = *(void (**)(unint64_t *__return_ptr, uint64_t))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x2A0);
  v111 = v25;
  v110(v114, v23);
  unint64_t v26 = v114[0];
  v113 = v114[0];
  char v27 = static ActivitySession.State.== infix(_:_:)((unint64_t *)v112, &v113);
  outlined consume of ActivitySession.State(v26);
  if (v27)
  {
    if (one-time initialization token for default == -1)
    {
LABEL_4:
      uint64_t v28 = type metadata accessor for Logger();
      __swift_project_value_buffer(v28, (uint64_t)static Log.default);
      uint64_t v29 = v2;
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        id v33 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v32 = 138412290;
        v112[0] = (uint64_t)v29;
        unint64_t v34 = v29;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v33 = v2;

        _os_log_impl(&dword_1B0DF7000, v30, v31, "%@ dropping state update since value is the same", v32, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v33, -1, -1);
        MEMORY[0x1B3EA39E0](v32, -1, -1);
      }
      else
      {
      }
      return;
    }
LABEL_58:
    swift_once();
    goto LABEL_4;
  }
  v103 = v11;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v35 = type metadata accessor for Logger();
  __swift_project_value_buffer(v35, (uint64_t)static Log.default);
  objc_super v36 = v2;
  uint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.default.getter();
  BOOL v39 = os_log_type_enabled(v37, v38);
  v101 = v6;
  v102 = v12;
  if (v39)
  {
    uint64_t v40 = swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    uint64_t ObjectType = v20;
    id v42 = (void *)v41;
    v99 = swift_slowAlloc();
    v112[0] = v99;
    *(_DWORD *)uint64_t v40 = 138412546;
    v114[0] = (unint64_t)v36;
    uint64_t v43 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v42 = v2;

    *(_WORD *)(v40 + 12) = 2080;
    ((void (*)(unint64_t *__return_ptr))v110)(v114);
    v113 = v114[0];
    uint64_t v44 = String.init<A>(reflecting:)();
    v114[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, v112);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v24 = (void *)MEMORY[0x1E4FBC8C8];
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v37, v38, "%@ changed to state: %s", (uint8_t *)v40, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    id v46 = v42;
    uint64_t v20 = ObjectType;
    MEMORY[0x1B3EA39E0](v46, -1, -1);
    uint64_t v47 = v99;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v47, -1, -1);
    MEMORY[0x1B3EA39E0](v40, -1, -1);
  }
  else
  {
  }
  v48 = *(uint64_t (**)(void))((*v24 & *v36) + 0x3B0);
  uint64_t v49 = v48();
  v50 = (void (*)(uint64_t *__return_ptr))v110;
  if (v49)
  {
    uint64_t v51 = (void *)v49;
    uint64_t v52 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v49
                                                                + direct field offset for XPCHostConnection.connection), sel_remoteObjectProxy));
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActivitySessionXPCClient);
    if (!swift_dynamicCast())
    {
      __break(1u);
      return;
    }
    v53 = (void *)v114[0];

    v50(v112);
    if ((unint64_t)v112[0] >> 62)
    {
      if ((unint64_t)v112[0] >> 62 == 1)
      {
        outlined consume of ActivitySession.State(v112[0]);
        v54 = 4;
      }
      else if (v112[0] == 0x8000000000000000)
      {
        v54 = 0;
      }
      else if (v112[0] == 0x8000000000000008)
      {
        v54 = 1;
      }
      else
      {
        v54 = 5;
      }
    }
    else
    {
      outlined consume of ActivitySession.State(v112[0]);
      v54 = 2;
    }
    objc_msgSend(v53, sel_setStateWithState_error_, v54, 0);
    uint64_t v49 = swift_unknownObjectRelease();
  }
  ((void (*)(unint64_t *__return_ptr, uint64_t))v50)(v114, v49);
  if ((v114[0] & 0x8000000000000000) != 0)
  {
    if (v114[0] == 0x8000000000000000) {
      goto LABEL_28;
    }
    if (v114[0] == 0x8000000000000008)
    {
      Date.init()();
      v98 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))((*v24 & *v36) + 0x160))(v112);
      DateInterval.start.setter();
      v98(v112, 0);
      goto LABEL_28;
    }
  }
  else
  {
    outlined consume of ActivitySession.State(v114[0]);
  }
  (*(void (**)(void))((*v24 & *v36) + 0x3B8))(0);
LABEL_28:
  v112[0] = v20;
  v114[0] = 0x8000000000000008;
  if ((static ActivitySession.State.== infix(_:_:)((unint64_t *)v112, v114) & 1) == 0)
  {
    v50(v112);
    uint64_t v55 = v112[0];
    v113 = 0x8000000000000008;
    v114[0] = v112[0];
    uint64_t v56 = static ActivitySession.State.== infix(_:_:)(v114, &v113);
    uint64_t v57 = outlined consume of ActivitySession.State(v55);
    if (v56)
    {
      uint64_t v58 = ((uint64_t (*)(unint64_t))v48)(v57);
      if (v58)
      {
        v59 = (char *)v58;
        if (ActivitySession.needsAssertions()())
        {
          id v60 = OBJC_IVAR___CPActivitySession_invalidateAssertionsWorkItem;
          if (*(void *)((char *)v36 + OBJC_IVAR___CPActivitySession_invalidateAssertionsWorkItem))
          {
            swift_retain();
            dispatch thunk of DispatchWorkItem.cancel()();
            swift_release();
            *(void *)((char *)v36 + v60) = 0;
            swift_release();
          }
          objc_super v61 = *(void *)&v59[direct field offset for XPCHostConnection.bundleIdentifier];
          v62 = *(void **)&v59[direct field offset for XPCHostConnection.bundleIdentifier + 8];
          v63 = objc_msgSend(*(id *)&v59[direct field offset for XPCHostConnection.connection], sel_processIdentifier);
          v64._countAndFlagsBits = v61;
          v64._object = v62;
          ActivitySession.acquireDomainAssertion(bundleID:pid:)(v64, v63);
        }
      }
    }
  }
  v50(v112);
  v65 = v112[0];
  v113 = 0x8000000000000008;
  v114[0] = v112[0];
  v66 = static ActivitySession.State.== infix(_:_:)(v114, &v113);
  outlined consume of ActivitySession.State(v65);
  if ((v66 & 1) == 0) {
    ActivitySession.invalidateAssertions(useDelay:)(1);
  }
  v67 = v20;
  v112[0] = v20;
  v114[0] = 0x8000000000000008;
  if (static ActivitySession.State.== infix(_:_:)((unint64_t *)v112, v114))
  {
    ((void (*)(uint64_t *__return_ptr))v110)(v112);
    v68 = v112[0];
    v113 = 0x8000000000000008;
    v114[0] = v112[0];
    v69 = static ActivitySession.State.== infix(_:_:)(v114, &v113);
    outlined consume of ActivitySession.State(v68);
    if ((v69 & 1) == 0)
    {
      Date.init()();
      v70 = (void *)MEMORY[0x1E4FBC8C8];
      v71 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))((*MEMORY[0x1E4FBC8C8] & *v36)
                                                                                         + 0x160))(v112);
      DateInterval.end.setter();
      v71(v112, 0);
      v72 = (*(uint64_t (**)(void))((*v70 & *v36) + 0x188))(0);
      v73 = *(void (**)(void))((*v70 & *v36) + 0x150);
      v74 = v106;
      ((void (*)(uint64_t))v73)(v72);
      (*(void (**)(char *))((*v70 & *v36) + 0x298))(v74);
      v75 = *(uint64_t (**)(char *, uint64_t))(v108 + 8);
      v108 += 8;
      v76 = v75(v74, v107);
      if ((*(uint64_t (**)(uint64_t))((*v70 & *v36) + 0x380))(v76))
      {
        v99 = v77;
        uint64_t ObjectType = swift_getObjectType();
        v78 = v106;
        v73();
        DateInterval.start.getter();
        v79 = v78;
        v80 = v107;
        v81 = v75(v79, v107);
        v82 = v105;
        ((void (*)(uint64_t))v73)(v81);
        v83 = v104;
        DateInterval.end.getter();
        v75(v82, v80);
        v84 = v109;
        (*(void (**)(void *, char *, char *, uint64_t))(v99 + 104))(v36, v109, v83, ObjectType);
        swift_unknownObjectRelease();
        v85 = v103;
        v86 = *(void (**)(char *, uint64_t))(v102 + 8);
        v86(v83, v103);
        v86(v84, v85);
      }
    }
  }
  v112[0] = v67;
  v114[0] = 0x8000000000000010;
  v87 = static ActivitySession.State.== infix(_:_:)((unint64_t *)v112, v114);
  v88 = (void (*)(uint64_t *__return_ptr, unint64_t))v110;
  if (v87)
  {
    ((void (*)(uint64_t *__return_ptr))v110)(v112);
    v89 = v112[0];
    v113 = 0x8000000000000000;
    v114[0] = v112[0];
    v90 = static ActivitySession.State.== infix(_:_:)(v114, &v113);
    v87 = outlined consume of ActivitySession.State(v89);
    if (v90)
    {
      v91 = (uint64_t)v101;
      Date.init()();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v102 + 56))(v91, 0, 1, v103);
      v92 = (uint64_t)v36 + OBJC_IVAR___CPActivitySession_permittedJoinTimestamp;
      swift_beginAccess();
      outlined assign with take of ActivitySession.DomainAssertionWrapper?(v91, v92, (uint64_t *)&demangling cache variable for type metadata for Date?);
      v87 = swift_endAccess();
    }
  }
  v88(v112, v87);
  v93 = v112[0];
  v94 = (void *)MEMORY[0x1E4FBC8C8];
  if ((v112[0] & 0x8000000000000000) == 0)
  {
    outlined consume of ActivitySession.State(v112[0]);
LABEL_47:
    v93 = (*(uint64_t (**)(void))((*v94 & *v36) + 0x270))(0);
    goto LABEL_48;
  }
  if (v112[0] != 0x8000000000000000)
  {
    if (v112[0] == 0x8000000000000008) {
      goto LABEL_47;
    }
    v93 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v36) + 0x270))(1);
  }
LABEL_48:
  if ((*(uint64_t (**)(uint64_t))((*v94 & *v36) + 0x380))(v93))
  {
    v96 = v95;
    v97 = swift_getObjectType();
    v112[0] = v67;
    (*(void (**)(void *, uint64_t *, uint64_t, uint64_t))(v96 + 96))(v36, v112, v97, v96);
    swift_unknownObjectRelease();
  }
}

uint64_t ActivitySession.State.cpActivitySessionState.getter()
{
  uint64_t v1 = *v0;
  unint64_t v2 = (unint64_t)*v0 >> 62;
  if (!v2) {
    return 2;
  }
  if (v2 == 1) {
    return 4;
  }
  uint64_t v4 = 1;
  if (v1 != 0x8000000000000008) {
    uint64_t v4 = 5;
  }
  if (v1 == 0x8000000000000000) {
    return 0;
  }
  else {
    return v4;
  }
}

void ActivitySession.acquireAssertionsIfNecessary(for:)(uint64_t a1)
{
  if (ActivitySession.needsAssertions()())
  {
    uint64_t v3 = OBJC_IVAR___CPActivitySession_invalidateAssertionsWorkItem;
    if (*(void *)(v1 + OBJC_IVAR___CPActivitySession_invalidateAssertionsWorkItem))
    {
      swift_retain();
      dispatch thunk of DispatchWorkItem.cancel()();
      swift_release();
      *(void *)(v1 + v3) = 0;
      swift_release();
    }
    uint64_t v4 = *(void *)(a1 + direct field offset for XPCHostConnection.bundleIdentifier);
    uint64_t v5 = *(void *)(a1 + direct field offset for XPCHostConnection.bundleIdentifier + 8);
    Swift::Int32 v6 = objc_msgSend(*(id *)(a1 + direct field offset for XPCHostConnection.connection), sel_processIdentifier);
    uint64_t v7 = v4;
    uint64_t v8 = v5;
    ActivitySession.acquireDomainAssertion(bundleID:pid:)(*(Swift::String *)&v7, v6);
  }
}

Swift::Void __swiftcall ActivitySession.invalidateAssertions(useDelay:)(Swift::Bool useDelay)
{
  uint64_t v3 = type metadata accessor for DispatchTimeInterval();
  uint64_t v22 = *(void *)(v3 - 8);
  uint64_t v23 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (void *)((char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = type metadata accessor for DispatchTime();
  uint64_t v21 = *(void *)(v6 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)v20 - v10;
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  MEMORY[0x1F4188790](v12);
  uint64_t v13 = OBJC_IVAR___CPActivitySession_invalidateAssertionsWorkItem;
  uint64_t v14 = *(void *)(v1 + OBJC_IVAR___CPActivitySession_invalidateAssertionsWorkItem);
  if (useDelay)
  {
    if (!v14)
    {
      uint64_t v15 = swift_allocObject();
      swift_unknownObjectWeakInit();
      aBlock[4] = partial apply for closure #1 in ActivitySession.invalidateAssertions(useDelay:);
      aBlock[5] = v15;
      v20[2] = v15;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
      aBlock[3] = &block_descriptor_41;
      v20[3] = _Block_copy(aBlock);
      uint64_t v24 = MEMORY[0x1E4FBC860];
      v20[1] = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      type metadata accessor for DispatchWorkItem();
      swift_allocObject();
      uint64_t v16 = DispatchWorkItem.init(flags:block:)();
      swift_release();
      swift_release();
      static DispatchTime.now()();
      void *v5 = 2;
      uint64_t v18 = v22;
      uint64_t v17 = v23;
      (*(void (**)(void *, void, uint64_t))(v22 + 104))(v5, *MEMORY[0x1E4FBCAE8], v23);
      MEMORY[0x1B3EA17B0](v9, v5);
      (*(void (**)(void *, uint64_t))(v18 + 8))(v5, v17);
      uint64_t v19 = *(void (**)(char *, uint64_t))(v21 + 8);
      v19(v9, v6);
      MEMORY[0x1B3EA2190](v11, v16);
      v19(v11, v6);
      *(void *)(v1 + v13) = v16;
      swift_release();
    }
  }
  else
  {
    if (v14)
    {
      swift_retain();
      dispatch thunk of DispatchWorkItem.cancel()();
      swift_release();
      *(void *)(v1 + v13) = 0;
      swift_release();
    }
    ActivitySession.invalidateDomainAssertion()();
  }
}

uint64_t ActivitySession.state.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  return swift_release();
}

unint64_t ActivitySession.state.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  unint64_t v1 = v4;
  swift_getKeyPath();
  swift_getKeyPath();
  id v2 = v0;
  static Published.subscript.setter();
  ActivitySession.state.didset((uint64_t *)&v4);
  return outlined consume of ActivitySession.State(v1);
}

unint64_t (*ActivitySession.state.modify(uint64_t a1))(unint64_t *a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return ActivitySession.state.modify;
}

unint64_t ActivitySession.state.modify(unint64_t *a1, char a2)
{
  unint64_t v4 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v5 = (void *)a1[2];
  if (a2)
  {
    outlined copy of ActivitySession.State(v4);
    static Published.subscript.getter();
    swift_release();
    swift_release();
    unint64_t v6 = a1[1];
    swift_getKeyPath();
    swift_getKeyPath();
    a1[1] = v4;
    v5;
    static Published.subscript.setter();
    unint64_t v10 = v6;
    ActivitySession.state.didset((uint64_t *)&v10);
    outlined consume of ActivitySession.State(v6);
    unint64_t v7 = *a1;
  }
  else
  {
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v8 = a1[1];
    swift_getKeyPath();
    swift_getKeyPath();
    a1[1] = v4;
    v5;
    static Published.subscript.setter();
    unint64_t v10 = v8;
    ActivitySession.state.didset((uint64_t *)&v10);
    unint64_t v7 = v8;
  }
  return outlined consume of ActivitySession.State(v7);
}

uint64_t key path getter for ActivitySession.$state : ActivitySession(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x2B8))();
}

uint64_t key path setter for ActivitySession.$state : ActivitySession(uint64_t a1, void **a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<ActivitySession.State>.Publisher);
  MEMORY[0x1F4188790](v4);
  unint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x2C0))(v6);
}

uint64_t ActivitySession.$state.getter()
{
  return swift_endAccess();
}

uint64_t ActivitySession.$state.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<ActivitySession.State>.Publisher);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<ActivitySession.State>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*ActivitySession.$state.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<ActivitySession.State>.Publisher);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  uint64_t v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR___CPActivitySession__state;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<ActivitySession.State>);
  Published.projectedValue.getter();
  swift_endAccess();
  return ActivitySession.$state.modify;
}

id ActivitySession.activity.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR___CPActivitySession_activity);
  swift_beginAccess();
  uint64_t v2 = *v1;
  return v2;
}

void ActivitySession.activity.setter(id *a1)
{
  uint64_t v3 = (id **)(v1 + OBJC_IVAR___CPActivitySession_activity);
  swift_beginAccess();
  uint64_t v4 = *v3;
  void *v3 = a1;
  uint64_t v5 = a1;
  ActivitySession.activity.didset(v4);
}

uint64_t key path getter for ActivitySession.activity : ActivitySession@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x2D0))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ActivitySession.activity : ActivitySession(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x2D8))(*a1);
}

void ActivitySession.activity.didset(id *a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  size_t v6 = (uint64_t *)((char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void **)&v1[OBJC_IVAR___CPActivitySession_queue];
  void *v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4FBCBF0], v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v7)
  {
    if (one-time initialization token for default == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.default);
  unint64_t v10 = v1;
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  int v13 = v12;
  uint64_t v14 = &unk_1E9B74000;
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v16 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 138412546;
    uint64_t v44 = a1;
    id v46 = v10;
    uint64_t v17 = v10;
    int v43 = v13;
    uint64_t v18 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v16 = v10;

    *(_WORD *)(v15 + 12) = 2112;
    uint64_t v19 = (id *)((char *)&v18->isa + OBJC_IVAR___CPActivitySession_activity);
    swift_beginAccess();
    id v46 = *v19;
    id v20 = v46;
    id v21 = v46;
    a1 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v16[1] = v20;
    uint64_t v14 = (void *)&unk_1E9B74000;

    _os_log_impl(&dword_1B0DF7000, v11, (os_log_type_t)v43, "ActivitySession %@ activity changed to %@", (uint8_t *)v15, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v16, -1, -1);
    MEMORY[0x1B3EA39E0](v15, -1, -1);
  }
  else
  {

    uint64_t v11 = v10;
  }

  uint64_t v22 = (id *)((char *)&v10->isa + v14[92]);
  swift_beginAccess();
  uint64_t v23 = &selRef_isScreenEnabled;
  id v24 = objc_msgSend(*v22, sel_metadata);
  objc_msgSend(v24, sel_saveImageToDisk);

  id v25 = objc_msgSend(*v22, sel_metadata);
  id v26 = objc_msgSend(a1, sel_metadata);
  char v27 = v26;
  if (v25)
  {
    if (v26)
    {
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivityMetadata);
      id v28 = v25;
      char v29 = static NSObject.== infix(_:_:)();

      if (v29) {
        goto LABEL_18;
      }
      goto LABEL_14;
    }
    char v27 = v25;
  }
  else if (!v26)
  {
    goto LABEL_18;
  }

LABEL_14:
  uint64_t v30 = a1;
  os_log_type_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v44 = v22;
    id v33 = (uint8_t *)swift_slowAlloc();
    unint64_t v34 = (void *)swift_slowAlloc();
    *(_DWORD *)id v33 = 138412290;
    id v46 = v30;
    uint64_t v35 = v30;
    uint64_t v23 = &selRef_isScreenEnabled;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v34 = v30;

    uint64_t v22 = v44;
    _os_log_impl(&dword_1B0DF7000, v31, v32, "Cleaning up image for old metadata %@", v33, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v34, -1, -1);
    MEMORY[0x1B3EA39E0](v33, -1, -1);
  }
  else
  {

    os_log_type_t v31 = v30;
  }

  id v36 = [v30 v23[6]];
  objc_msgSend(v36, sel_removeImageDiskFile);

LABEL_18:
  uint64_t v37 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & (uint64_t)v10->isa) + 0x3B0))();
  if (!v37)
  {
LABEL_21:
    ActivitySession.sessionChanged()();
    return;
  }
  os_log_type_t v38 = (void *)v37;
  id v39 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v37
                                                              + direct field offset for XPCHostConnection.connection), sel_remoteObjectProxy));
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActivitySessionXPCClient);
  if (swift_dynamicCast())
  {
    uint64_t v40 = v45;

    id v41 = *v22;
    objc_msgSend(v40, sel_setActivityWithActivity_, v41);

    swift_unknownObjectRelease();
    goto LABEL_21;
  }
  __break(1u);
}

void (*ActivitySession.activity.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___CPActivitySession_activity;
  v3[4] = v1;
  void v3[5] = v4;
  uint64_t v5 = (void **)(v1 + v4);
  swift_beginAccess();
  size_t v6 = *v5;
  v3[3] = *v5;
  id v7 = v6;
  return ActivitySession.activity.modify;
}

void ActivitySession.activity.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v5 = (void **)(*(void *)a1 + 24);
  uint64_t v4 = *v5;
  uint64_t v7 = *(void *)(*(void *)a1 + 32);
  uint64_t v6 = *(void *)(*(void *)a1 + 40);
  id v8 = *(id **)(v7 + v6);
  *(void *)(v7 + v6) = *v5;
  id v9 = v4;
  unint64_t v10 = v9;
  if (a2)
  {
    id v11 = v9;
    ActivitySession.activity.didset(v8);

    id v8 = (id *)*v5;
  }
  else
  {
    ActivitySession.activity.didset(v8);
  }
  free(v3);
}

id ActivitySession.queue.getter()
{
  return *(id *)(v0 + OBJC_IVAR___CPActivitySession_queue);
}

uint64_t key path getter for ActivitySession.isLocallyInitiated : ActivitySession@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x2E8))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for ActivitySession.isLocallyInitiated : ActivitySession(char *a1, void *a2)
{
  char v2 = *a1;
  uint64_t v3 = (unsigned char *)(*a2 + OBJC_IVAR___CPActivitySession_isLocallyInitiated);
  uint64_t result = swift_beginAccess();
  unsigned char *v3 = v2;
  return result;
}

uint64_t ActivitySession.isLocallyInitiated.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___CPActivitySession_isLocallyInitiated);
  swift_beginAccess();
  return *v1;
}

uint64_t key path getter for ActivitySession.isUsingAirplay : ActivitySession@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x318))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for ActivitySession.isUsingAirplay : ActivitySession(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x320))(*a1);
}

uint64_t ActivitySession.isUsingAirplay.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___CPActivitySession_isUsingAirplay);
  swift_beginAccess();
  return *v1;
}

void ActivitySession.isUsingAirplay.setter(char a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (uint64_t *)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = (unsigned char *)(v1 + OBJC_IVAR___CPActivitySession_isUsingAirplay);
  swift_beginAccess();
  unsigned char *v7 = a1;
  id v8 = *(void **)(v1 + OBJC_IVAR___CPActivitySession_queue);
  void *v6 = v8;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4FBCBF0], v3);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v8) {
    ActivitySession.sessionChanged()();
  }
  else {
    __break(1u);
  }
}

void (*ActivitySession.isUsingAirplay.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  v3[4] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  void v3[5] = v5;
  v3[6] = malloc(*(void *)(v5 + 64));
  swift_beginAccess();
  return ActivitySession.isUsingAirplay.modify;
}

void ActivitySession.isUsingAirplay.modify(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_endAccess();
  uint64_t v4 = (void *)v3[6];
  if ((a2 & 1) == 0)
  {
    uint64_t v5 = v3[4];
    uint64_t v6 = v3[5];
    uint64_t v7 = *(void **)(v3[3] + OBJC_IVAR___CPActivitySession_queue);
    *uint64_t v4 = v7;
    (*(void (**)(void *, void, uint64_t))(v6 + 104))(v4, *MEMORY[0x1E4FBCBF0], v5);
    id v8 = v7;
    LOBYTE(v7) = _dispatchPreconditionTest(_:)();
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
    if ((v7 & 1) == 0)
    {
      __break(1u);
      return;
    }
    uint64_t v4 = (void *)v3[6];
    ActivitySession.sessionChanged()();
  }
  free(v4);
  free(v3);
}

id ActivitySession.tuConversationActivitySession.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2D0))(v3);
  objc_msgSend(v7, sel_copy);

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivity);
  uint64_t v8 = swift_dynamicCast();
  unint64_t v44 = v46[1];
  (*(void (**)(unint64_t *__return_ptr, uint64_t))((*v6 & *v0) + 0x2A0))(v46, v8);
  unint64_t v45 = v5;
  if (v46[0] >> 62)
  {
    if (v46[0] >> 62 == 1)
    {
      outlined consume of ActivitySession.State(v46[0]);
      uint64_t v9 = 4;
    }
    else
    {
      uint64_t v10 = 1;
      if (v46[0] != 0x8000000000000008) {
        uint64_t v10 = 5;
      }
      if (v46[0] == 0x8000000000000000) {
        uint64_t v9 = 0;
      }
      else {
        uint64_t v9 = v10;
      }
    }
  }
  else
  {
    outlined consume of ActivitySession.State(v46[0]);
    uint64_t v9 = 2;
  }
  uint64_t v43 = v9;
  id v11 = *(uint64_t (**)(void))((*v6 & *v0) + 0x2E8);
  id v42 = *(id *)((char *)v0 + OBJC_IVAR___CPActivitySession_endpoint);
  int v41 = v11();
  int v40 = (*(uint64_t (**)(void))((*v6 & *v0) + 0x180))();
  uint64_t v12 = (*(uint64_t (**)(void))((*v6 & *v0) + 0x368))();
  specialized Set.init<A>(_:)(v12);
  char v13 = *((unsigned char *)v0 + OBJC_IVAR___CPActivitySession_isLocalParticipantActive);
  uint64_t v14 = (*(uint64_t (**)(void))((*v6 & *v0) + 0x268))();
  id v15 = objc_allocWithZone(MEMORY[0x1E4FADB58]);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  Class v17 = Date._bridgeToObjectiveC()().super.isa;
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
  lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationParticipant and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
  Class v18 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  LOBYTE(v38) = v13;
  LOBYTE(v37) = v40 & 1;
  uint64_t v19 = v15;
  id v20 = (void *)v44;
  id v21 = v42;
  id v22 = objc_msgSend(v19, sel_initWithActivity_state_uuid_endpoint_locallyInitiated_timestamp_isFirstJoin_activeRemoteParticipants_isLocalParticipantActive_applicationState_, v44, v43, isa, v42, v41 & 1, v17, v37, v18, v38, v14);

  uint64_t v23 = (void *)MEMORY[0x1E4FBC8C8];
  id v24 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x168))();
  objc_msgSend(v22, sel_setTerminatingHandle_, v24);

  objc_msgSend(v22, sel_setDistributionCount_, (*(uint64_t (**)(void))((*v23 & *v1) + 0x220))());
  id v25 = objc_msgSend(v22, sel_setPermittedToJoin_, (*(uint64_t (**)(id))((*v23 & *v1) + 0x198))(objc_msgSend(v22, sel_setIsLightweightPrimaryInitiated_, *((unsigned __int8 *)v1 + OBJC_IVAR___CPActivitySession_isLightweightPrimaryInitiated))) & 1);
  id v26 = objc_msgSend(v22, sel_setPersistentSceneIsEligibleForAutoClose_, (*(uint64_t (**)(id))((*v23 & *v1) + 0x1C0))(v25) & 1);
  (*(void (**)(id))((*v23 & *v1) + 0x1A8))(v26);
  Class v27 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v22, sel_setPersistentSceneIdentifiers_, v27);

  id v28 = objc_msgSend(v22, sel_setUsingAirplay_, (*(uint64_t (**)(void))((*v23 & *v1) + 0x318))() & 1);
  Class v29 = 0;
  if (((*(uint64_t (**)(id))((*v23 & *v1) + 0x1D8))(v28) & 0x100000000) == 0) {
    Class v29 = UInt32._bridgeToObjectiveC()().super.super.isa;
  }
  objc_msgSend(v22, sel_setClientAudioSessionID_, v29);

  Class v30 = Date._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v22, sel_setLocalCreationTimestamp_, v30);

  uint64_t v31 = (uint64_t)v1 + OBJC_IVAR___CPActivitySession_permittedJoinTimestamp;
  swift_beginAccess();
  uint64_t v32 = (uint64_t)v45;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v31, (uint64_t)v45, (uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v33 = type metadata accessor for Date();
  uint64_t v34 = *(void *)(v33 - 8);
  Class v35 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33) != 1)
  {
    Class v35 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v32, v33);
  }
  objc_msgSend(v22, sel_setPermittedJoinTimestamp_, v35);

  return v22;
}

void specialized Set.init<A>(_:)(uint64_t a1)
{
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
  lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationParticipant and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
  int64_t v2 = 0;
  v13[1] = (id)Set.init(minimumCapacity:)();
  uint64_t v3 = a1 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    int64_t v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v10 >= v7) {
      goto LABEL_23;
    }
    unint64_t v11 = *(void *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      int64_t v2 = v10 + 1;
      if (v10 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v11 = *(void *)(v3 + 8 * v2);
      if (!v11)
      {
        int64_t v2 = v10 + 2;
        if (v10 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        if (!v11)
        {
          int64_t v2 = v10 + 3;
          if (v10 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v11 = *(void *)(v3 + 8 * v2);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    specialized Set._Variant.insert(_:)(v13, *(id *)(*(void *)(a1 + 56) + 8 * v9));
  }
  int64_t v12 = v10 + 4;
  if (v12 >= v7)
  {
LABEL_23:
    swift_release();
    return;
  }
  unint64_t v11 = *(void *)(v3 + 8 * v12);
  if (v11)
  {
    int64_t v2 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v2 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v2 >= v7) {
      goto LABEL_23;
    }
    unint64_t v11 = *(void *)(v3 + 8 * v2);
    ++v12;
    if (v11) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v3 = 0;
  uint64_t v15 = result;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      int64_t v3 = v11 + 1;
      if (v11 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v12 = *(void *)(v4 + 8 * v3);
      if (!v12)
      {
        int64_t v3 = v11 + 2;
        if (v11 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v12 = *(void *)(v4 + 8 * v3);
        if (!v12)
        {
          int64_t v3 = v11 + 3;
          if (v11 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v12 = *(void *)(v4 + 8 * v3);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_5:
    uint64_t result = specialized Set._Variant.insert(_:)(&v14, *(void *)(*(void *)(a1 + 48) + 8 * v10));
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release();
    return v15;
  }
  unint64_t v12 = *(void *)(v4 + 8 * v13);
  if (v12)
  {
    int64_t v3 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v3);
    ++v13;
    if (v12) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  Swift::Int *v11;
  Swift::Int v12;
  Swift::Int v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  Swift::Int v17;
  uint64_t v18;

  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v3 = 0;
  Class v18 = result;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    uint64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8) {
      goto LABEL_23;
    }
    uint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      uint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        uint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15)
        {
          int64_t v3 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          uint64_t v15 = *(void *)(v4 + 8 * v3);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    int64_t v11 = (Swift::Int *)(*(void *)(a1 + 48) + 16 * v10);
    unint64_t v12 = *v11;
    int64_t v13 = v11[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v17, v12, v13);
    uint64_t result = swift_bridgeObjectRelease();
  }
  uint64_t v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  uint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    int64_t v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    uint64_t v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (**v16)(uint64_t, uint64_t);
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  void v21[2];
  void (**v22)(char *, char *, uint64_t);
  uint64_t v23;
  unsigned int (**v24)(char *, uint64_t, uint64_t);
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;

  int64_t v2 = type metadata accessor for UUID();
  int64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  id v28 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  Class v27 = (char *)v21 - v6;
  unint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v7 - 8);
  unint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(a1 + 16);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  Class v29 = Set.init(minimumCapacity:)();
  if (v10)
  {
    unint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    int64_t v11 = v3 + 16;
    int64_t v13 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = v11 + 40;
    id v24 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 32);
    id v25 = v12;
    id v22 = (void (**)(char *, char *, uint64_t))(v11 + 16);
    uint64_t v23 = v14;
    id v26 = v11;
    uint64_t v16 = (void (**)(uint64_t, uint64_t))(v11 - 8);
    v21[1] = v15 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    Class v18 = (uint64_t)v27;
    Class v17 = v28;
    while (1)
    {
      v25(v9, v13, v2);
      uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v15;
      (*(void (**)(char *, void, uint64_t, uint64_t))v15)(v9, 0, 1, v2);
      if ((*v24)(v9, 1, v2) == 1) {
        break;
      }
      (*v22)(v17, v9, v2);
      specialized Set._Variant.insert(_:)(v18, v17);
      (*v16)(v18, v2);
      v13 += v23;
      if (!--v10) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v19(v9, 1, 1, v2);
  }
  return v29;
}

{
  uint64_t v2;
  uint64_t result;
  Swift::UInt64 *v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  uint64_t v8;
  uint64_t v9;

  int64_t v2 = *(void *)(a1 + 16);
  lazy protocol witness table accessor for type IDSGroupSessionProvider.Participant and conformance IDSGroupSessionProvider.Participant();
  uint64_t result = Set.init(minimumCapacity:)();
  unint64_t v9 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::UInt64 *)(a1 + 48);
    do
    {
      uint64_t v5 = *(v4 - 2);
      uint64_t v6 = *(v4 - 1);
      unint64_t v7 = *v4;
      v4 += 3;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)((uint64_t)&v8, v5, v6, v7);
      swift_bridgeObjectRelease();
      --v2;
    }
    while (v2);
    return v9;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  Swift::Int *v4;
  Swift::Int v5;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;

  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t key path getter for ActivitySession.activeParticipantsUpdateItem : ActivitySession@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x350))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ActivitySession.activeParticipantsUpdateItem : ActivitySession(uint64_t a1, void **a2)
{
  int64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x358);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t ActivitySession.activeParticipantsUpdateItem.getter()
{
  return ActivitySession.activeParticipantsUpdateItem.getter();
}

{
  swift_beginAccess();
  return swift_retain();
}

uint64_t ActivitySession.activeParticipantsUpdateItem.setter(uint64_t a1)
{
  return ActivitySession.activeParticipantsUpdateItem.setter(a1, &OBJC_IVAR___CPActivitySession_activeParticipantsUpdateItem);
}

uint64_t (*ActivitySession.activeParticipantsUpdateItem.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t key path getter for ActivitySession.activeParticipants : ActivitySession@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x368))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ActivitySession.activeParticipants : ActivitySession(uint64_t a1, void **a2)
{
  int64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x370);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t ActivitySession.activeParticipants.getter()
{
  return ActivitySession.persistentSceneIdentifiers.getter();
}

uint64_t ActivitySession.activeParticipants.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (uint64_t *)((char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v7 = (uint64_t *)(v1 + OBJC_IVAR___CPActivitySession_activeParticipants);
  swift_beginAccess();
  uint64_t v8 = *v7;
  uint64_t *v7 = a1;
  unint64_t v9 = *(void **)(v1 + OBJC_IVAR___CPActivitySession_queue);
  void *v6 = v9;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4FBCBF0], v3);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v9)
  {
    uint64_t v12 = swift_bridgeObjectRetain();
    int64_t v13 = specialized _NativeDictionary.mapValues<A>(_:)(v12);
    swift_bridgeObjectRelease();
    uint64_t v14 = specialized _NativeDictionary.mapValues<A>(_:)(v8);
    char v15 = specialized static Dictionary<>.== infix(_:_:)((unint64_t)v13, (uint64_t)v14);
    swift_release();
    swift_release();
    if ((v15 & 1) == 0) {
      ActivitySession.sessionChanged()();
    }
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void (*ActivitySession.activeParticipants.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x48uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  void v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  uint64_t v6 = malloc(*(void *)(v5 + 64));
  uint64_t v7 = OBJC_IVAR___CPActivitySession_activeParticipants;
  v3[7] = v6;
  v3[8] = v7;
  uint64_t v8 = (void *)(v1 + v7);
  swift_beginAccess();
  v3[3] = *v8;
  swift_bridgeObjectRetain();
  return ActivitySession.activeParticipants.modify;
}

void ActivitySession.activeParticipants.modify(uint64_t a1, char a2)
{
  int64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 64);
  uint64_t v4 = *(void *)(*(void *)a1 + 32);
  uint64_t v5 = *(void *)(v4 + v3);
  *(void *)(v4 + v3) = *(void *)(*(void *)a1 + 24);
  uint64_t v7 = v2[6];
  uint64_t v6 = (void *)v2[7];
  uint64_t v8 = v2[5];
  unint64_t v9 = *(void **)(v2[4] + OBJC_IVAR___CPActivitySession_queue);
  void *v6 = v9;
  uint64_t v10 = *MEMORY[0x1E4FBCBF0];
  int64_t v11 = *(void (**)(void *, uint64_t, uint64_t))(v7 + 104);
  if ((a2 & 1) == 0)
  {
    v11(v6, *MEMORY[0x1E4FBCBF0], v8);
    id v19 = v9;
    char v20 = _dispatchPreconditionTest(_:)();
    (*(void (**)(void *, uint64_t))(v7 + 8))(v6, v8);
    if (v20)
    {
      uint64_t v21 = swift_bridgeObjectRetain();
      id v22 = specialized _NativeDictionary.mapValues<A>(_:)(v21);
      swift_bridgeObjectRelease();
      uint64_t v23 = specialized _NativeDictionary.mapValues<A>(_:)(v5);
      char v24 = specialized static Dictionary<>.== infix(_:_:)((unint64_t)v22, (uint64_t)v23);
      swift_release();
      swift_release();
      if ((v24 & 1) == 0) {
        ActivitySession.sessionChanged()();
      }
      Class v18 = (void *)v2[7];
      goto LABEL_10;
    }
LABEL_14:
    __break(1u);
    return;
  }
  swift_bridgeObjectRetain();
  v11(v6, v10, v8);
  id v12 = v9;
  char v13 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v6, v8);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v14 = swift_bridgeObjectRetain();
  char v15 = specialized _NativeDictionary.mapValues<A>(_:)(v14);
  swift_bridgeObjectRelease();
  uint64_t v16 = specialized _NativeDictionary.mapValues<A>(_:)(v5);
  char v17 = specialized static Dictionary<>.== infix(_:_:)((unint64_t)v15, (uint64_t)v16);
  swift_release();
  swift_release();
  if ((v17 & 1) == 0) {
    ActivitySession.sessionChanged()();
  }
  Class v18 = (void *)v2[7];
  swift_bridgeObjectRelease();
LABEL_10:
  swift_bridgeObjectRelease();
  free(v18);
  free(v2);
}

uint64_t key path getter for ActivitySession.sessionManager : ActivitySession@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x380))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for ActivitySession.sessionManager : ActivitySession(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x388);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t ActivitySession.sessionManager.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR___CPActivitySession_sessionManager;
  swift_beginAccess();
  return MEMORY[0x1B3EA3B30](v1);
}

uint64_t ActivitySession.sessionManager.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR___CPActivitySession_sessionManager;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*ActivitySession.sessionManager.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___CPActivitySession_sessionManager;
  void v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1B3EA3B30](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return ActivitySession.sessionManager.modify;
}

void ActivitySession.sessionManager.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + *(void *)(*(void *)a1 + 48) + 8) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t key path getter for ActivitySession.rtcReporter : ActivitySession@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x398))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ActivitySession.rtcReporter : ActivitySession(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x3A0);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t ActivitySession.rtcReporter.getter()
{
  return ActivitySession.activeParticipantsUpdateItem.getter();
}

uint64_t ActivitySession.rtcReporter.setter(uint64_t a1)
{
  return ActivitySession.activeParticipantsUpdateItem.setter(a1, &OBJC_IVAR___CPActivitySession_rtcReporter);
}

uint64_t ActivitySession.activeParticipantsUpdateItem.setter(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(v2 + *a2);
  swift_beginAccess();
  *uint64_t v4 = a1;
  return swift_release();
}

uint64_t (*ActivitySession.rtcReporter.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

id ActivitySession.endpoint.getter()
{
  return *(id *)(v0 + OBJC_IVAR___CPActivitySession_endpoint);
}

uint64_t ActivitySession.notificationCenter.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of UserNotificationCenter(v1 + OBJC_IVAR___CPActivitySession_notificationCenter, a1);
}

uint64_t key path getter for ActivitySession.connection : ActivitySession@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x3B0))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ActivitySession.connection : ActivitySession(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x3B8);
  id v4 = *a1;
  return v3(v2);
}

void *ActivitySession.connection.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR___CPActivitySession_connection);
  swift_beginAccess();
  id v2 = *v1;
  id v3 = v2;
  return v2;
}

void ActivitySession.connection.setter(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR___CPActivitySession_connection);
  swift_beginAccess();
  id v4 = (char *)*v3;
  if (*v3)
  {
    uint64_t v5 = *(void **)&v4[direct field offset for XPCHostConnection.connection];
    uint64_t v6 = v4;
    objc_msgSend(v5, sel_setExportedObject_, 0);
    objc_msgSend(v5, sel_setInvalidationHandler_, 0);
    objc_msgSend(v5, sel_setInterruptionHandler_, 0);
    objc_msgSend(v5, sel_invalidate);

    id v4 = (char *)*v3;
  }
  void *v3 = a1;
}

void (*ActivitySession.connection.modify(void *a1))(uint64_t a1, char a2)
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___CPActivitySession_connection;
  v3[4] = v1;
  void v3[5] = v4;
  uint64_t v5 = (void **)(v1 + v4);
  swift_beginAccess();
  uint64_t v6 = *v5;
  v3[3] = *v5;
  id v7 = v6;
  return ActivitySession.connection.modify;
}

void ActivitySession.connection.modify(uint64_t a1, char a2)
{
  id v2 = *(void **)a1;
  uint64_t v4 = (void **)(*(void *)a1 + 24);
  id v3 = *v4;
  uint64_t v6 = *(void *)(*(void *)a1 + 32);
  uint64_t v5 = *(void *)(*(void *)a1 + 40);
  id v7 = *(char **)(v6 + v5);
  if (a2)
  {
    if (v7)
    {
      uint64_t v8 = *(void **)&v7[direct field offset for XPCHostConnection.connection];
      id v9 = v3;
      uint64_t v10 = v7;
      objc_msgSend(v8, sel_setExportedObject_, 0);
      objc_msgSend(v8, sel_setInvalidationHandler_, 0);
      objc_msgSend(v8, sel_setInterruptionHandler_, 0);
      objc_msgSend(v8, sel_invalidate);

      int64_t v11 = *(void **)(v6 + v5);
      uint64_t v6 = v2[4];
      uint64_t v5 = v2[5];
    }
    else
    {
      id v15 = v3;
      int64_t v11 = 0;
    }
    *(void *)(v6 + v5) = v3;

    uint64_t v14 = *v4;
  }
  else
  {
    if (v7)
    {
      id v12 = *(void **)&v7[direct field offset for XPCHostConnection.connection];
      char v13 = v7;
      objc_msgSend(v12, sel_setExportedObject_, 0);
      objc_msgSend(v12, sel_setInvalidationHandler_, 0);
      objc_msgSend(v12, sel_setInterruptionHandler_, 0);
      objc_msgSend(v12, sel_invalidate);

      uint64_t v14 = *(void **)(v6 + v5);
      uint64_t v6 = v2[4];
      uint64_t v5 = v2[5];
    }
    else
    {
      uint64_t v14 = 0;
    }
    *(void *)(v6 + v5) = v3;
  }

  free(v2);
}

uint64_t default argument 1 of ActivitySession.updateActiveParticipants(with:fromCache:)()
{
  return 0;
}

uint64_t ActivitySession.updateActiveParticipants(with:fromCache:)(void *a1, int a2)
{
  id v3 = v2;
  LODWORD(v130) = a2;
  uint64_t v129 = type metadata accessor for DispatchWorkItemFlags();
  MEMORY[0x1F4188790](v129);
  uint64_t v6 = (char *)&v116 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = (void *)type metadata accessor for Logger();
  dispatch_group_t v136 = (dispatch_group_t)*(v7 - 1);
  MEMORY[0x1F4188790](v7);
  uint64_t ObjectType = (char *)&v116 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  unint64_t v12 = (unint64_t)&v116 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v13 = *(void **)((char *)v3 + OBJC_IVAR___CPActivitySession_queue);
  *(void *)unint64_t v12 = v13;
  uint64_t v15 = v10 + 104;
  uint64_t v14 = *(void (**)(void))(v10 + 104);
  LODWORD(v123) = *MEMORY[0x1E4FBCBF0];
  v132 = v14;
  v14(v12);
  id v126 = v13;
  uint64_t v16 = _dispatchPreconditionTest(_:)();
  char v17 = *(void (**)(unint64_t, uint64_t))(v10 + 8);
  v17(v12, v9);
  if (v16)
  {
    v122 = (void (*)(unint64_t, void *))v17;
    uint64_t v128 = (uint64_t)v6;
    uint64_t v140 = (uint64_t)a1;
    uint64_t v141 = 0;
    char v142 = 1;
    Class v18 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x2D0);
    uint64_t v19 = (*MEMORY[0x1E4FBC8C8] & *v3) + 720;
    uint64_t v20 = swift_bridgeObjectRetain();
    v125 = v18;
    uint64_t v124 = v19;
    uint64_t v21 = (void *)v18(v20);
    id v22 = objc_msgSend(v21, sel_bundleIdentifier);

    uint64_t v23 = (void *)&unk_1EB7CD000;
    v131 = v3;
    v133 = a1;
    v134 = v7;
    if (v22)
    {
      v121 = (void *)v9;
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v26 = v25;

      Class v27 = v3;
      swift_bridgeObjectRetain();
      uint64_t v28 = specialized Sequence.first(where:)((uint64_t)a1, v27, v24, v26);
      char v30 = v29;
      swift_bridgeObjectRelease_n();

      uint64_t v127 = 0;
      if (v30)
      {
        id v3 = (void *)OBJC_IVAR___CPActivitySession_isLocalParticipantActive;
        id v7 = v134;
        if (*((unsigned char *)v27 + OBJC_IVAR___CPActivitySession_isLocalParticipantActive) == 1)
        {
          if (one-time initialization token for default != -1) {
            goto LABEL_77;
          }
          goto LABEL_11;
        }
        id v3 = v131;
        a1 = v133;
      }
      else
      {
        uint64_t v141 = v28;
        char v142 = 0;
        uint64_t v31 = OBJC_IVAR___CPActivitySession_isLocalParticipantActive;
        int v32 = *((unsigned __int8 *)v27 + OBJC_IVAR___CPActivitySession_isLocalParticipantActive);
        *((unsigned char *)v27 + OBJC_IVAR___CPActivitySession_isLocalParticipantActive) = 1;
        uint64_t v33 = v126;
        *(void *)unint64_t v12 = v126;
        id v7 = v121;
        ((void (*)(unint64_t, void, void *))v132)(v12, v123, v121);
        id v34 = v33;
        LOBYTE(v33) = _dispatchPreconditionTest(_:)();
        v122(v12, v7);
        if ((v33 & 1) == 0)
        {
          __break(1u);
          goto LABEL_76;
        }
        if (v32 != *((unsigned __int8 *)v27 + v31)) {
          ActivitySession.sessionChanged()();
        }
        specialized Set._Variant.remove(_:)(v28);
        a1 = v133;
        id v7 = v134;
      }
      uint64_t v15 = (uint64_t)ObjectType;
      uint64_t v16 = (uint64_t)v136;
      uint64_t v23 = (void *)&unk_1EB7CD000;
    }
    else
    {
      uint64_t v127 = 0;
      uint64_t v15 = (uint64_t)ObjectType;
      uint64_t v16 = (uint64_t)v136;
    }
LABEL_20:
    if (v23[186] == -1) {
      goto LABEL_21;
    }
  }
  else
  {
LABEL_73:
    __break(1u);
  }
  swift_once();
LABEL_21:
  uint64_t v50 = __swift_project_value_buffer((uint64_t)v7, (uint64_t)static Log.default);
  (*(void (**)(uint64_t, uint64_t, void *))(v16 + 16))(v15, v50, v7);
  swift_bridgeObjectRetain_n();
  uint64_t v51 = v3;
  uint64_t v52 = Logger.logObject.getter();
  os_log_type_t v53 = static os_log_type_t.default.getter();
  BOOL v54 = os_log_type_enabled(v52, v53);
  v132 = v51;
  if (v54)
  {
    uint64_t v123 = v50;
    uint64_t v55 = v51;
    uint64_t v56 = swift_slowAlloc();
    uint64_t v57 = (void *)swift_slowAlloc();
    v122 = (void (*)(unint64_t, void *))swift_slowAlloc();
    aBlock[0] = (uint64_t)v122;
    *(_DWORD *)uint64_t v56 = 138413058;
    v137 = v55;
    id v58 = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v57 = v3;

    *(_WORD *)(v56 + 12) = 1024;
    LODWORD(v137) = v130 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v56 + 18) = 2080;
    swift_beginAccess();
    if (v142)
    {
      unint64_t v59 = 0xE300000000000000;
      uint64_t v60 = 7104878;
    }
    else
    {
      v138 = (void *)v141;
      uint64_t v60 = String.init<A>(reflecting:)();
      unint64_t v59 = v62;
    }
    v138 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v59, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v56 + 28) = 2080;
    uint64_t v63 = (uint64_t)v133;
    uint64_t v64 = swift_bridgeObjectRetain();
    v65 = specialized _copyCollectionToContiguousArray<A>(_:)(v64);
    swift_bridgeObjectRelease();
    v138 = v65;
    uint64_t v66 = v127;
    specialized MutableCollection<>.sort(by:)((uint64_t *)&v138);
    uint64_t v127 = v66;
    if (v66) {
      goto LABEL_79;
    }
    uint64_t v67 = MEMORY[0x1B3EA1D20](v138, MEMORY[0x1E4FBC538]);
    unint64_t v69 = v68;
    swift_release();
    v138 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v69, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v52, v53, "%@ updating activeParticipants, fromCache: %{BOOL}d, localParticipantID:%s participantIDs: %s", (uint8_t *)v56, 0x26u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v57, -1, -1);
    v70 = (void (*)(void, void))v122;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v70, -1, -1);
    MEMORY[0x1B3EA39E0](v56, -1, -1);

    ((void (*)(char *, void *))v136[1].isa)(ObjectType, v134);
    id v3 = v131;
    uint64_t v51 = v132;
    uint64_t v61 = v63;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, void *))(v16 + 8))(v15, v7);
    uint64_t v61 = (uint64_t)a1;
  }
  uint64_t v71 = OBJC_IVAR___CPActivitySession_activeParticipantIDs;
  if (specialized static Set.== infix(_:_:)(*(void *)((char *)v51 + OBJC_IVAR___CPActivitySession_activeParticipantIDs), v61))
  {
    if ((v130 & 1) == 0
      || (uint64_t v72 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v51) + 0x368))(),
          uint64_t v73 = specialized Set.init<A>(_:)(v72),
          char v74 = specialized static Set.== infix(_:_:)(v73, v140),
          swift_bridgeObjectRelease(),
          (v74 & 1) != 0))
    {
      v75 = v51;
      v76 = Logger.logObject.getter();
      os_log_type_t v77 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v76, v77))
      {
        v78 = (uint8_t *)swift_slowAlloc();
        v79 = (void *)swift_slowAlloc();
        *(_DWORD *)v78 = 138412290;
        aBlock[0] = (uint64_t)v75;
        v80 = v75;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v79 = v131;

        _os_log_impl(&dword_1B0DF7000, v76, v77, "%@ not updating activeParticipants since no change was detected", v78, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v79, -1, -1);
        MEMORY[0x1B3EA39E0](v78, -1, -1);
      }
      else
      {
      }
      return swift_bridgeObjectRelease();
    }
  }
  *(void *)((char *)v51 + v71) = v61;
  swift_bridgeObjectRetain();
  uint64_t v81 = swift_bridgeObjectRelease();
  if ((*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v51) + 0x350))(v81))
  {
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  dispatch_group_t v136 = dispatch_group_create();
  uint64_t v82 = swift_allocObject();
  *(void *)(v82 + 16) = MEMORY[0x1E4FBC868];
  uint64_t v83 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v84 = swift_allocObject();
  *(void *)(v84 + 16) = v83;
  *(void *)(v84 + 24) = v82;
  aBlock[4] = (uint64_t)partial apply for closure #2 in ActivitySession.updateActiveParticipants(with:fromCache:);
  aBlock[5] = v84;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_54;
  a1 = _Block_copy(aBlock);
  v138 = (void *)MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  swift_retain();
  uint64_t v130 = v82;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  id v7 = v132;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  uint64_t v123 = DispatchWorkItem.init(flags:block:)();
  swift_release();
  uint64_t v85 = swift_release();
  v86 = (void *)v125(v85);
  id v87 = objc_msgSend(v86, sel_bundleIdentifier);

  if (!v87)
  {
    swift_bridgeObjectRetain_n();
    v105 = v7;
    v106 = Logger.logObject.getter();
    os_log_type_t v107 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v106, v107))
    {
      uint64_t v108 = swift_slowAlloc();
      v109 = (void *)swift_slowAlloc();
      uint64_t ObjectType = (char *)swift_slowAlloc();
      aBlock[0] = (uint64_t)ObjectType;
      *(_DWORD *)uint64_t v108 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v110 = Set.description.getter();
      unint64_t v112 = v111;
      swift_bridgeObjectRelease();
      v138 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v110, v112, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v108 + 12) = 2112;
      v138 = v105;
      v113 = v105;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v109 = v3;

      _os_log_impl(&dword_1B0DF7000, v106, v107, "Failed to update participants for participantIDs %s on %@ because of invalid bundleID", (uint8_t *)v108, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v109, -1, -1);
      v114 = ObjectType;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v114, -1, -1);
      MEMORY[0x1B3EA39E0](v108, -1, -1);

LABEL_67:
      swift_release();
    }
    else
    {

      swift_release();
      swift_bridgeObjectRelease_n();
    }
    swift_bridgeObjectRelease();
    return swift_release();
  }
  uint64_t v128 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v129 = v88;

  uint64_t v89 = *(void *)(v61 + 56);
  v134 = (void *)(v61 + 56);
  uint64_t v16 = 1 << *(unsigned char *)(v61 + 32);
  uint64_t v90 = -1;
  if (v16 < 64) {
    uint64_t v90 = ~(-1 << v16);
  }
  unint64_t v12 = v90 & v89;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  uint64_t v15 = 0;
  Class v27 = (void *)((unint64_t)(v16 + 63) >> 6);
  while (v12)
  {
    unint64_t v91 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    unint64_t v92 = v91 | (v15 << 6);
LABEL_56:
    a1 = *(void **)(*(void *)(v61 + 48) + 8 * v92);
    if ((v142 & 1) != 0 || a1 != (void *)v141)
    {
      dispatch_group_enter(v136);
      if ((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v7) + 0x380))())
      {
        uint64_t v97 = v96;
        uint64_t ObjectType = (char *)swift_getObjectType();
        v98 = (void *)swift_allocObject();
        v98[2] = v130;
        v98[3] = a1;
        dispatch_group_t v99 = v136;
        v98[4] = v136;
        uint64_t v16 = v97 + 40;
        v100 = *(void (**)(void *, uint64_t, uint64_t, void (*)(void *), void *, char *, uint64_t))(v97 + 40);
        swift_retain();
        v101 = v99;
        id v7 = v132;
        v100(a1, v128, v129, partial apply for closure #1 in closure #3 in ActivitySession.updateActiveParticipants(with:fromCache:), v98, ObjectType, v97);
        id v3 = v131;
        swift_unknownObjectRelease();
        uint64_t v61 = (uint64_t)v133;
        swift_release();
      }
    }
  }
  if (__OFADD__(v15++, 1))
  {
    __break(1u);
    goto LABEL_73;
  }
  if (v15 >= (uint64_t)v27) {
    goto LABEL_64;
  }
  unint64_t v94 = v134[v15];
  if (v94)
  {
LABEL_55:
    unint64_t v12 = (v94 - 1) & v94;
    unint64_t v92 = __clz(__rbit64(v94)) + (v15 << 6);
    goto LABEL_56;
  }
  uint64_t v95 = v15 + 1;
  if (v15 + 1 >= (uint64_t)v27) {
    goto LABEL_64;
  }
  unint64_t v94 = v134[v95];
  if (v94) {
    goto LABEL_54;
  }
  uint64_t v95 = v15 + 2;
  if (v15 + 2 >= (uint64_t)v27) {
    goto LABEL_64;
  }
  unint64_t v94 = v134[v95];
  if (v94) {
    goto LABEL_54;
  }
  uint64_t v95 = v15 + 3;
  if (v15 + 3 >= (uint64_t)v27) {
    goto LABEL_64;
  }
  unint64_t v94 = v134[v95];
  if (v94) {
    goto LABEL_54;
  }
  uint64_t v95 = v15 + 4;
  if (v15 + 4 >= (uint64_t)v27) {
    goto LABEL_64;
  }
  unint64_t v94 = v134[v95];
  if (v94) {
    goto LABEL_54;
  }
  uint64_t v95 = v15 + 5;
  if (v15 + 5 >= (uint64_t)v27)
  {
LABEL_64:
    swift_release();
    swift_bridgeObjectRelease();
    dispatch_group_t v102 = v136;
    OS_dispatch_group.notify(queue:work:)();
    v103 = *(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v7) + 0x358);
    uint64_t v104 = swift_retain();
    v103(v104);

    goto LABEL_67;
  }
  unint64_t v94 = v134[v95];
  if (v94)
  {
LABEL_54:
    uint64_t v15 = v95;
    goto LABEL_55;
  }
  while (1)
  {
    uint64_t v15 = v95 + 1;
    if (__OFADD__(v95, 1)) {
      break;
    }
    if (v15 >= (uint64_t)v27) {
      goto LABEL_64;
    }
    unint64_t v94 = v134[v15];
    ++v95;
    if (v94) {
      goto LABEL_55;
    }
  }
LABEL_76:
  __break(1u);
LABEL_77:
  swift_once();
LABEL_11:
  __swift_project_value_buffer((uint64_t)v7, (uint64_t)static Log.default);
  Class v35 = v27;
  id v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.default.getter();
  BOOL v38 = os_log_type_enabled(v36, v37);
  v120 = v35;
  if (v38)
  {
    v119 = v36;
    uint64_t v39 = (uint8_t *)swift_slowAlloc();
    v117 = (void *)swift_slowAlloc();
    v118 = v39;
    *(_DWORD *)uint64_t v39 = 138412290;
    aBlock[0] = (uint64_t)v35;
    int v40 = v35;
    id v36 = v119;
    id v7 = v134;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    int v41 = v117;
    void *v117 = v131;

    os_log_type_t v42 = v37;
    uint64_t v43 = v118;
    _os_log_impl(&dword_1B0DF7000, v36, v42, "%@ setting isLocalParticipantActive=false", v118, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v41, -1, -1);
    MEMORY[0x1B3EA39E0](v43, -1, -1);
  }
  else
  {
  }
  a1 = v133;
  uint64_t v44 = v123;

  int v45 = *((unsigned __int8 *)v3 + (void)v27);
  *((unsigned char *)v3 + (void)v27) = 0;
  id v46 = v126;
  *(void *)unint64_t v12 = v126;
  uint64_t v47 = v44;
  v48 = v121;
  ((void (*)(unint64_t, uint64_t, void *))v132)(v12, v47, v121);
  id v49 = v46;
  LOBYTE(v46) = _dispatchPreconditionTest(_:)();
  v122(v12, v48);
  if (v46)
  {
    uint64_t v15 = (uint64_t)ObjectType;
    uint64_t v16 = (uint64_t)v136;
    uint64_t v23 = &unk_1EB7CD000;
    if (v45 != *((unsigned __int8 *)v3 + (void)v27)) {
      ActivitySession.sessionChanged()();
    }
    id v3 = v131;
    goto LABEL_20;
  }
  __break(1u);
LABEL_79:
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

void closure #2 in ActivitySession.updateActiveParticipants(with:fromCache:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x1B3EA3B30](v1);
  if (v2)
  {
    id v3 = (void *)v2;
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.default);
    id v5 = v3;
    swift_retain_n();
    uint64_t v6 = v5;
    id v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      os_log_type_t type = v8;
      uint64_t v9 = swift_slowAlloc();
      uint64_t v10 = (void *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      v19[0] = v18;
      *(_DWORD *)uint64_t v9 = 138412546;
      uint64_t v11 = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v10 = v3;

      *(_WORD *)(v9 + 12) = 2080;
      swift_beginAccess();
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
      swift_bridgeObjectRetain();
      uint64_t v12 = Dictionary.description.getter();
      unint64_t v14 = v13;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v7, type, "Retrieved all participants for %@, updating with participants %s", (uint8_t *)v9, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v10, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v18, -1, -1);
      MEMORY[0x1B3EA39E0](v9, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    swift_beginAccess();
    uint64_t v15 = *(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v6) + 0x370);
    uint64_t v16 = swift_bridgeObjectRetain();
    v15(v16);
  }
}

void closure #1 in closure #3 in ActivitySession.updateActiveParticipants(with:fromCache:)(void *a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  if (a1)
  {
    swift_beginAccess();
    id v7 = a1;
    specialized Dictionary.subscript.setter((uint64_t)a1, a3);
    swift_endAccess();
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Log.default);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 134217984;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B0DF7000, v9, v10, "updateActiveParticipants, could not find active-remote-participant for participantID %llu", v11, 0xCu);
      MEMORY[0x1B3EA39E0](v11, -1, -1);
    }
  }
  dispatch_group_leave(a4);
}

void ActivitySession.join(audioSessionID:completion:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  os_log_type_t v10 = (uint64_t *)((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = *(void **)&v3[OBJC_IVAR___CPActivitySession_queue];
  *os_log_type_t v10 = v11;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E4FBCBF0], v7);
  id v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  if (v11)
  {
    unint64_t v13 = v3;
    swift_retain();
    specialized ActivitySession.invalidationBlock(execute:)(v13, v13, a1 | ((HIDWORD(a1) & 1) << 32), a2, a3);
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t closure #1 in ActivitySession.join(audioSessionID:completion:)(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v7)(uint64_t *__return_ptr);
  unint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  void *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  unsigned char *v22;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void (*v35)(void *, uint64_t, uint64_t, uint64_t (*)(), void *, uint64_t, uint64_t);
  void *v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t ObjectType;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;

  uint64_t v7 = *(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x2A0);
  v7(&v44);
  uint64_t v8 = v44;
  os_log_type_t v42 = 0x8000000000000000;
  uint64_t v43 = v44;
  uint64_t v9 = static ActivitySession.State.== infix(_:_:)((unint64_t *)&v43, &v42);
  os_log_type_t v10 = outlined consume of ActivitySession.State(v8);
  if ((v9 & 1) != 0
    || (((void (*)(uint64_t *__return_ptr, unint64_t))v7)(&v44, v10),
        uint64_t v11 = v44,
        os_log_type_t v42 = 0x8000000000000008,
        uint64_t v43 = v44,
        id v12 = static ActivitySession.State.== infix(_:_:)((unint64_t *)&v43, &v42),
        outlined consume of ActivitySession.State(v11),
        (v12 & 1) != 0))
  {
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    unint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Log.host);
    uint64_t v14 = a1;
    uint64_t v15 = Logger.logObject.getter();
    uint64_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      os_log_type_t v37 = v15;
      uint64_t v39 = a4;
      char v17 = swift_slowAlloc();
      uint64_t v18 = (void *)swift_slowAlloc();
      BOOL v38 = swift_slowAlloc();
      uint64_t v44 = v38;
      *(_DWORD *)char v17 = 138412546;
      uint64_t v43 = (uint64_t)v14;
      uint64_t v19 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v18 = a1;

      *(_WORD *)(v17 + 12) = 2080;
      if ((a2 & 0x100000000) != 0)
      {
        uint64_t v20 = 0xE300000000000000;
        uint64_t v21 = 7104878;
      }
      else
      {
        LODWORD(v43) = a2;
        uint64_t v21 = String.init<A>(reflecting:)();
        uint64_t v20 = v24;
      }
      uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v20, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v37, v16, "Joining %@ with audioSessionID: %s", (uint8_t *)v17, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v18, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v38, -1, -1);
      MEMORY[0x1B3EA39E0](v17, -1, -1);

      a4 = v39;
    }
    else
    {
    }
    uint64_t v44 = 0x8000000000000008;
    uint64_t v25 = (void *)MEMORY[0x1E4FBC8C8];
    (*(void (**)(uint64_t *))((*MEMORY[0x1E4FBC8C8] & *v14) + 0x2A8))(&v44);
    (*(void (**)(unint64_t))((*v25 & *v14) + 0x1E0))(a2 | ((HIDWORD(a2) & 1) << 32));
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = a3;
    *(void *)(v26 + 24) = a4;
    Class v27 = *(uint64_t (**)(uint64_t))((*v25 & *v14) + 0x380);
    uint64_t v28 = swift_retain();
    if (v27(v28))
    {
      char v30 = v29;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v31 = UUID.uuidString.getter();
      uint64_t v33 = v32;
      id v34 = (void *)swift_allocObject();
      v34[2] = v14;
      v34[3] = partial apply for closure #1 in closure #1 in ActivitySession.join(audioSessionID:completion:);
      v34[4] = v26;
      Class v35 = *(void (**)(void *, uint64_t, uint64_t, uint64_t (*)(), void *, uint64_t, uint64_t))(v30 + 72);
      id v36 = v14;
      swift_retain();
      v35(v36, v31, v33, closure #1 in ActivitySession.fetchDataCryptor(completion:)partial apply, v34, ObjectType, v30);
      swift_unknownObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
    }
    return swift_release();
  }
  else
  {
    lazy protocol witness table accessor for type ActivitySession.Errors and conformance ActivitySession.Errors();
    swift_allocError();
    *id v22 = 1;
    return swift_willThrow();
  }
}

uint64_t ActivitySession.invalidationBlock(execute:)(uint64_t (*a1)(void))
{
  uint64_t result = a1();
  if (v2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.default);
    id v5 = v1;
    id v6 = v2;
    id v7 = v5;
    id v8 = v2;
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      log = v9;
      id v12 = (void *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      uint64_t v20 = v19;
      *(_DWORD *)uint64_t v11 = 138412546;
      id v13 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v14 = v12;
      void *v12 = v7;

      *(_WORD *)(v11 + 12) = 2080;
      id v15 = v2;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v16 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      uint64_t v9 = log;
      _os_log_impl(&dword_1B0DF7000, log, v10, "%@ was invalidated with error: %s", (uint8_t *)v11, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v14, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v19, -1, -1);
      MEMORY[0x1B3EA39E0](v11, -1, -1);
    }
    else
    {
    }
    objc_msgSend(v7, sel_resetSession);
    return swift_willThrow();
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ActivitySession.leave()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  id v5 = (uint64_t *)((char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v6 = *(void **)((char *)v1 + OBJC_IVAR___CPActivitySession_queue);
  void *v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FBCBF0], v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  uint64_t v9 = *(uint64_t (**)(void *, uint64_t))(v3 + 8);
  id v8 = (void *)(v3 + 8);
  uint64_t v10 = v9(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once();
    goto LABEL_6;
  }
  id v8 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v11 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x2D0))(v10);
  id v12 = objc_msgSend(v11, sel_metadata);

  if (!v12
    || (id v13 = objc_msgSend(v12, sel_lifetimePolicy), v12, v13 != (id)1)
    || ((*(uint64_t (**)(void))((*v8 & *v1) + 0x2E8))() & 1) == 0)
  {
    uint64_t v18 = v1;
    specialized ActivitySession.invalidationBlock(execute:)(v18, (uint64_t)v18, (uint64_t (*)(uint64_t))closure #1 in ActivitySession.leave());

    return;
  }
  if (one-time initialization token for host != -1) {
    goto LABEL_11;
  }
LABEL_6:
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Log.host);
  id v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    unint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v17 = 0;
    _os_log_impl(&dword_1B0DF7000, v15, v16, "Requested leave, but ending instead due to lifetimePolicy", v17, 2u);
    MEMORY[0x1B3EA39E0](v17, -1, -1);
  }

  (*(void (**)(void))((*v8 & *v1) + 0x3E0))();
}

uint64_t closure #1 in ActivitySession.leave()(void *a1)
{
  void (*v3)(void *__return_ptr);
  unint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  void *v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned char *v18;
  void *v19;
  void v20[3];
  unint64_t v21;
  unint64_t v22;

  uint64_t v2 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v3 = *(void (**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x2A0);
  v3(v20);
  uint64_t v4 = v20[0];
  id v22 = v20[0];
  uint64_t v21 = 0x8000000000000008;
  id v5 = static ActivitySession.State.== infix(_:_:)(&v22, &v21);
  id v6 = outlined consume of ActivitySession.State(v4);
  if ((v5 & 1) != 0
    || (((void (*)(void *__return_ptr, unint64_t))v3)(v20, v6),
        id v7 = v20[0],
        id v22 = v20[0],
        uint64_t v21 = 0x8000000000000000,
        id v8 = static ActivitySession.State.== infix(_:_:)(&v22, &v21),
        outlined consume of ActivitySession.State(v7),
        (v8 & 1) != 0))
  {
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Log.host);
    uint64_t v10 = a1;
    uint64_t v11 = Logger.logObject.getter();
    id v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      id v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = (void *)swift_slowAlloc();
      *(_DWORD *)id v13 = 138412290;
      v20[0] = v10;
      uint64_t v14 = v10;
      uint64_t v2 = (void *)MEMORY[0x1E4FBC8C8];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v19 = a1;

      _os_log_impl(&dword_1B0DF7000, v11, v12, "Leaving %@", v13, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v19, -1, -1);
      MEMORY[0x1B3EA39E0](v13, -1, -1);
    }
    else
    {
    }
    v20[0] = 0x8000000000000010;
    (*(void (**)(void *))((*v2 & *v10) + 0x2A8))(v20);
    id v15 = (void *)((char *)v10 + OBJC_IVAR___CPActivitySession_persistentSceneIdentifiers);
    swift_beginAccess();
    os_log_type_t v16 = *v15;
    *id v15 = MEMORY[0x1E4FBC860];
    ActivitySession.persistentSceneIdentifiers.didset(v16);
    return swift_bridgeObjectRelease();
  }
  else
  {
    lazy protocol witness table accessor for type ActivitySession.Errors and conformance ActivitySession.Errors();
    swift_allocError();
    *uint64_t v18 = 1;
    return swift_willThrow();
  }
}

Swift::Void __swiftcall ActivitySession.end()()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (uint64_t *)((char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v5 = *(void **)&v0[OBJC_IVAR___CPActivitySession_queue];
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBCBF0], v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    if (one-time initialization token for host == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.host);
  id v8 = v0;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    id v12 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 138412290;
    os_log_type_t v16 = v8;
    id v13 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v12 = v8;

    _os_log_impl(&dword_1B0DF7000, v9, v10, "Ending %@", v11, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v12, -1, -1);
    MEMORY[0x1B3EA39E0](v11, -1, -1);
  }
  else
  {
  }
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0;
  *(void *)(v14 + 24) = 0;
  os_log_type_t v16 = (void *)v14;
  (*(void (**)(void **))((*MEMORY[0x1E4FBC8C8] & *(void *)v8) + 0x2A8))(&v16);
}

Swift::Void __swiftcall ActivitySession.permitJoin()()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (void *)((char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v5 = *(void **)&v0[OBJC_IVAR___CPActivitySession_queue];
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBCBF0], v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    if (one-time initialization token for host == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.host);
  id v8 = v0;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    id v12 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 138412290;
    v26[0] = v8;
    id v13 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v12 = v8;

    _os_log_impl(&dword_1B0DF7000, v9, v10, "Received request for %@ to be permitted", v11, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v12, -1, -1);
    MEMORY[0x1B3EA39E0](v11, -1, -1);
  }
  else
  {
  }
  uint64_t v14 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *(void *)v8) + 0x2A0))(v26);
  unint64_t v15 = v26[0];
  unint64_t v27 = 0x8000000000000010;
  unint64_t v28 = v26[0];
  char v16 = static ActivitySession.State.== infix(_:_:)(&v28, &v27);
  outlined consume of ActivitySession.State(v15);
  if (v16)
  {
    unint64_t v17 = v8;
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 138412290;
      v26[0] = v17;
      id v22 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v21 = v8;

      _os_log_impl(&dword_1B0DF7000, v18, v19, "Permitting %@ to be joined", v20, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      uint64_t v23 = v21;
      uint64_t v14 = (void *)MEMORY[0x1E4FBC8C8];
      MEMORY[0x1B3EA39E0](v23, -1, -1);
      MEMORY[0x1B3EA39E0](v20, -1, -1);
    }
    else
    {

      uint64_t v18 = v17;
    }

    uint64_t v24 = (void (*)(void *, void))(*(uint64_t (**)(void *))((*v14 & (uint64_t)v17->isa) + 0x230))(v26);
    if (__OFADD__(*v25, 1))
    {
      __break(1u);
    }
    else
    {
      ++*v25;
      v24(v26, 0);
      v26[0] = 0x8000000000000000;
      (*(void (**)(void *))((*v14 & (uint64_t)v17->isa) + 0x2A8))(v26);
    }
  }
}

uint64_t ActivitySession.logAttachmentEvent(report:reportEvent:)(void *a1, uint64_t a2, unint64_t a3)
{
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.host);
  id v8 = v3;
  swift_bridgeObjectRetain_n();
  uint64_t v9 = v8;
  os_log_type_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    id v13 = (void *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    uint64_t v17 = v16;
    *(_DWORD *)uint64_t v12 = 138412546;
    uint64_t v14 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v13 = v9;

    *(_WORD *)(v12 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v10, v11, "%@: Logging attachment event in RTC reporting: %s", (uint8_t *)v12, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v13, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v16, -1, -1);
    MEMORY[0x1B3EA39E0](v12, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v9) + 0x398))();
  if (result)
  {
    RTCReporter.reportAttachmentEvent(report:)(a1);
    return swift_release();
  }
  return result;
}

void ActivitySession.postEvent(event:)(char *a1)
{
  void (*v80)(unint64_t *__return_ptr);
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;

  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (uint64_t *)((char *)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v8 = *(void **)((char *)v2 + OBJC_IVAR___CPActivitySession_queue);
  void *v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4FBCBF0], v4);
  id v9 = v8;
  uint64_t v10 = _dispatchPreconditionTest(_:)();
  uint64_t v11 = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_46:
    swift_once();
LABEL_7:
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Log.default);
    uint64_t v23 = v2;
    uint64_t v24 = a1;
    uint64_t v25 = v23;
    uint64_t v26 = v24;
    unint64_t v27 = v25;
    unint64_t v28 = Logger.logObject.getter();
    int v29 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v28, (os_log_type_t)v29))
    {

      return;
    }
    os_log_type_t v77 = v28;
    int v78 = v29;
    uint64_t v30 = swift_slowAlloc();
    uint64_t v31 = (void *)swift_slowAlloc();
    uint64_t v79 = swift_slowAlloc();
    uint64_t v82 = (unint64_t)v27;
    uint64_t v83 = v79;
    *(_DWORD *)uint64_t v30 = 138412802;
    v80 = (void (*)(unint64_t *__return_ptr))v10;
    int v32 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v31 = v2;

    *(_WORD *)(v30 + 12) = 2112;
    uint64_t v82 = (unint64_t)v26;
    uint64_t v33 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v31[1] = v26;
    id v34 = v31;

    *(_WORD *)(v30 + 22) = 2080;
    v80(&v82);
    if (v82 >> 62)
    {
      if (v82 >> 62 != 1)
      {
        uint64_t v49 = v79;
        os_log_type_t v50 = v78;
        uint64_t v51 = v77;
        unint64_t v52 = 0xE600000000000000;
        uint64_t v53 = 0x64656E696F4ALL;
        if (v82 != 0x8000000000000008)
        {
          uint64_t v53 = 1952867660;
          unint64_t v52 = 0xE400000000000000;
        }
        if (v82 == 0x8000000000000000) {
          uint64_t v36 = 0x676E6974696157;
        }
        else {
          uint64_t v36 = v53;
        }
        if (v82 == 0x8000000000000000) {
          unint64_t v35 = 0xE700000000000000;
        }
        else {
          unint64_t v35 = v52;
        }
        goto LABEL_26;
      }
      outlined consume of ActivitySession.State(v82);
      unint64_t v35 = 0xE900000000000066;
      uint64_t v36 = 0x664F6465646E6148;
    }
    else
    {
      outlined consume of ActivitySession.State(v82);
      unint64_t v35 = 0xEB00000000646574;
      uint64_t v36 = 0x6164696C61766E49;
    }
    uint64_t v49 = v79;
    os_log_type_t v50 = v78;
    uint64_t v51 = v77;
LABEL_26:
    uint64_t v82 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v35, (uint64_t *)&v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v51, v50, "%@ dropping event %@ because state != joined. state: %s", (uint8_t *)v30, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v34, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v49, -1, -1);
    MEMORY[0x1B3EA39E0](v30, -1, -1);
    goto LABEL_44;
  }
  uint64_t v12 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v10 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x2A0);
  ((void (*)(unint64_t *__return_ptr, uint64_t))v10)(&v83, v11);
  unint64_t v13 = v83;
  uint64_t v81 = 0x8000000000000008;
  uint64_t v82 = v83;
  char v14 = static ActivitySession.State.== infix(_:_:)(&v82, &v81);
  unint64_t v15 = outlined consume of ActivitySession.State(v13);
  if ((v14 & 1) == 0)
  {
    if (one-time initialization token for default == -1) {
      goto LABEL_7;
    }
    goto LABEL_46;
  }
  uint64_t v16 = *(void *)&a1[OBJC_IVAR___CPActivitySessionEvent_originatorID];
  uint64_t v17 = (*(uint64_t (**)(unint64_t))((*v12 & *v2) + 0x368))(v15);
  if (!*(void *)(v17 + 16) || (unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v16), (v19 & 1) == 0))
  {
    v80 = (void (*)(unint64_t *__return_ptr))v16;
    uint64_t v37 = swift_bridgeObjectRelease();
    BOOL v38 = *(uint64_t (**)(uint64_t))((*v12 & *v2) + 0x2D0);
    uint64_t v39 = (void *)v38(v37);
    int v40 = (SEL *)&property descriptor for XPCClient.connectionClosure;
    id v41 = objc_msgSend(v39, sel_bundleIdentifier);

    if (v41)
    {
      uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v45 = v44;

      if ((*(uint64_t (**)(void))((*v12 & *v2) + 0x380))())
      {
        uint64_t v47 = v46;
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v20 = (void *)(*(uint64_t (**)(void (*)(unint64_t *__return_ptr), uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 24))(v80, v43, v45, ObjectType, v47);
        swift_unknownObjectRelease();
        uint64_t v42 = swift_bridgeObjectRelease();
        int v40 = (SEL *)&property descriptor for XPCClient.connectionClosure;
        if (v20) {
          goto LABEL_31;
        }
      }
      else
      {
        uint64_t v42 = swift_bridgeObjectRelease();
      }
    }
    BOOL v54 = (void *)v38(v42);
    id v55 = [v54 v40[466]];

    if (v55)
    {
      uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v58 = v57;

      if ((*(uint64_t (**)(void))((*v12 & *v2) + 0x380))())
      {
        uint64_t v60 = v59;
        uint64_t v61 = swift_getObjectType();
        uint64_t v20 = (void *)(*(uint64_t (**)(void (*)(unint64_t *__return_ptr), uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 32))(v80, v56, v58, v61, v60);
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        if (v20) {
          goto LABEL_31;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v72 = type metadata accessor for Logger();
    __swift_project_value_buffer(v72, (uint64_t)static Log.default);
    uint64_t v51 = a1;
    uint64_t v73 = Logger.logObject.getter();
    os_log_type_t v74 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v73, v74))
    {
      v75 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v75 = 134217984;
      uint64_t v83 = (unint64_t)v80;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_1B0DF7000, v73, v74, "Received event from unknown participant %llu", v75, 0xCu);
      MEMORY[0x1B3EA39E0](v75, -1, -1);

      return;
    }

LABEL_44:
    return;
  }
  uint64_t v20 = *(void **)(*(void *)(v17 + 56) + 8 * v18);
  id v21 = v20;
  swift_bridgeObjectRelease();
LABEL_31:
  uint64_t v62 = *(void *)&a1[OBJC_IVAR___CPActivitySessionEvent_type];
  id v63 = objc_allocWithZone(MEMORY[0x1E4FADB40]);
  id v64 = v20;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v66 = objc_msgSend(v63, sel_initWithSessionUUID_originator_type_, isa, v64, v62);

  if (*(void *)&a1[OBJC_IVAR___CPActivitySessionEvent_item + 8]) {
    uint64_t v67 = (void *)MEMORY[0x1B3EA1B00](*(void *)&a1[OBJC_IVAR___CPActivitySessionEvent_item]);
  }
  else {
    uint64_t v67 = 0;
  }
  objc_msgSend(v66, sel_setItem_, v67);

  unint64_t v68 = (void *)(*(uint64_t (**)(id))((*v12 & *v2) + 0x330))(objc_msgSend(v66, sel_setQueueItemType_, *(void *)&a1[OBJC_IVAR___CPActivitySessionEvent_queueItemType]));
  objc_msgSend(v66, sel_setSession_, v68);

  if ((*(uint64_t (**)(id))((*v12 & *v2) + 0x380))(objc_msgSend(v66, sel_setUrl_, *(void *)&a1[OBJC_IVAR___CPActivitySessionEvent_url])))
  {
    uint64_t v70 = v69;
    uint64_t v71 = swift_getObjectType();
    (*(void (**)(void *, id, uint64_t, uint64_t))(v70 + 64))(v2, v66, v71, v70);

    swift_unknownObjectRelease();
  }
  else
  {
  }
}

Swift::Void __swiftcall ActivitySession.requestEncryptionKeys(for:)(Swift::OpaquePointer_optional a1)
{
  rawValue = a1.value._rawValue;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (uint64_t *)((char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void **)((char *)v1 + OBJC_IVAR___CPActivitySession_queue);
  void *v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4FBCBF0], v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v7)
  {
    if (rawValue)
    {
      id v9 = v1;
      uint64_t v10 = swift_bridgeObjectRetain();
      uint64_t v11 = specialized Sequence.compactMap<A>(_:)(v10, v9);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v12 = (void *)MEMORY[0x1E4FBC8C8];
    if ((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x380))())
    {
      uint64_t v14 = v13;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v16 = (*(uint64_t (**)(void))((*v12 & *v1) + 0x450))();
      (*(void (**)(void *, void *, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 80))(v1, v11, v16, v17, ObjectType, v14);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t ActivitySession.activeRemoteParticipant(with:completion:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (uint64_t *)((char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = *(void **)((char *)v3 + OBJC_IVAR___CPActivitySession_queue);
  *uint64_t v10 = v11;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E4FBCBF0], v7);
  id v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  if (v11)
  {
    uint64_t v14 = (void *)MEMORY[0x1E4FBC8C8];
    if ((*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x380))(result))
    {
      uint64_t v16 = v15;
      uint64_t v17 = (void *)(*(uint64_t (**)(void))((*v14 & *v3) + 0x2D0))();
      id v18 = objc_msgSend(v17, sel_bundleIdentifier);

      if (v18)
      {
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v21 = v20;

        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)(void), uint64_t, uint64_t, uint64_t))(v16 + 40))(a1, v19, v21, a2, a3, ObjectType, v16);
        swift_unknownObjectRelease();
        return swift_bridgeObjectRelease();
      }
      swift_unknownObjectRelease();
    }
    return a2(0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void ActivitySession.presentSessionDismissalAlert(for:allowingCancellation:completion:)(uint64_t a1, uint64_t a2, int a3, void (*a4)(void), uint64_t a5)
{
  LODWORD(v102) = a3;
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (uint64_t *)((char *)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = *(void **)&v5[OBJC_IVAR___CPActivitySession_queue];
  *uint64_t v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E4FBCBF0], v10);
  id v15 = v14;
  char v16 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if (v16)
  {
    if (one-time initialization token for default == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = __swift_project_value_buffer(v17, (uint64_t)static Log.default);
  uint64_t v19 = v5;
  v101 = (void *)v18;
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v103 = a5;
  uint64_t v99 = a1;
  uint64_t v100 = a2;
  if (v22)
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    uint64_t countAndFlagsBits = (uint64_t)a4;
    uint64_t v25 = v24;
    uint64_t v104 = (uint64_t)v19;
    uint64_t v105 = v24;
    *(_DWORD *)uint64_t v23 = 136315138;
    type metadata accessor for ActivitySession(0);
    uint64_t v26 = v19;
    uint64_t v27 = String.init<A>(reflecting:)();
    uint64_t v104 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v105);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v20, v21, "Presenting session dismissal alert for %s", v23, 0xCu);
    swift_arrayDestroy();
    uint64_t v29 = v25;
    a4 = (void (*)(void))countAndFlagsBits;
    MEMORY[0x1B3EA39E0](v29, -1, -1);
    MEMORY[0x1B3EA39E0](v23, -1, -1);
  }
  else
  {
  }
  uint64_t v30 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v31 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *(void *)v19) + 0x3B0))();
  if (v31)
  {
    int v32 = (char *)v31;
    uint64_t v33 = (void *)(*(uint64_t (**)(void))((*v30 & *(void *)v19) + 0x2D0))();
    id v34 = objc_msgSend(v33, sel_metadata);

    if (v34 && (id v35 = objc_msgSend(v34, sel_title), v34, v35))
    {
      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v38 = v37;

      type metadata accessor for ConversationManagerHost();
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      id v40 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
      v106._object = (void *)0xE000000000000000;
      v41._object = (void *)0x80000001B115ADF0;
      v41._uint64_t countAndFlagsBits = 0xD000000000000015;
      v42.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
      v42.value._object = (void *)0xEE0065726F436563;
      v43._uint64_t countAndFlagsBits = 0;
      v43._object = (void *)0xE000000000000000;
      v106._uint64_t countAndFlagsBits = 0;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v41, v42, (NSBundle)v40, v43, v106);

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v44 = swift_allocObject();
      *(_OWORD *)(v44 + 16) = xmmword_1B1138A80;
      *(void *)(v44 + 56) = MEMORY[0x1E4FBB1A0];
      *(void *)(v44 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v44 + 32) = v36;
      *(void *)(v44 + 40) = v38;
    }
    else
    {
      uint64_t v45 = *(void *)&v32[direct field offset for XPCHostConnection.bundleIdentifier];
      uint64_t v46 = *(void *)&v32[direct field offset for XPCHostConnection.bundleIdentifier + 8];
      objc_allocWithZone(MEMORY[0x1E4F223C8]);
      swift_bridgeObjectRetain();
      id v47 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(v45, v46, 1);
      uint64_t v84 = v47;
      if (v47)
      {
        type metadata accessor for ConversationManagerHost();
        uint64_t v85 = swift_getObjCClassFromMetadata();
        id v86 = objc_msgSend(self, sel_bundleForClass_, v85);
        v108._object = (void *)0xE000000000000000;
        v87._uint64_t countAndFlagsBits = 0x415F40255F444E45;
        v87._object = (void *)0xEF454D414E5F5050;
        v88.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
        v88.value._object = (void *)0xEE0065726F436563;
        v89._uint64_t countAndFlagsBits = 0;
        v89._object = (void *)0xE000000000000000;
        v108._uint64_t countAndFlagsBits = 0;
        uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v87, v88, (NSBundle)v86, v89, v108)._countAndFlagsBits;

        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v90 = swift_allocObject();
        *(_OWORD *)(v90 + 16) = xmmword_1B1138A80;
        id v91 = objc_msgSend(v84, sel_localizedName);
        uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v93 = v30;
        uint64_t v95 = v94;

        *(void *)(v90 + 56) = MEMORY[0x1E4FBB1A0];
        *(void *)(v90 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v90 + 32) = v92;
        *(void *)(v90 + 40) = v95;
        uint64_t v30 = v93;
        uint64_t v53 = String.init(format:_:)();
        uint64_t v55 = v96;

LABEL_13:
        char v56 = (char)v102;
        swift_bridgeObjectRelease();
        char v57 = v56 & 1;
        unint64_t v58 = ActivitySession.buildDisplayOptions(title:allowingCancellation:)(v53, v55, v56 & 1);
        swift_bridgeObjectRelease();
        if (v58)
        {
          dispatch_group_t v102 = v32;
          uint64_t v59 = *(void *)&v19[OBJC_IVAR___CPActivitySession_notificationCenter + 24];
          uint64_t v60 = *(void *)&v19[OBJC_IVAR___CPActivitySession_notificationCenter + 32];
          v101 = __swift_project_boxed_opaque_existential_1(&v19[OBJC_IVAR___CPActivitySession_notificationCenter], v59);
          uint64_t v61 = UUID.uuidString.getter();
          uint64_t v63 = v62;
          uint64_t v64 = swift_allocObject();
          *(unsigned char *)(v64 + 16) = v57;
          *(void *)(v64 + 24) = v19;
          *(void *)(v64 + 32) = a4;
          *(void *)(v64 + 40) = v103;
          v65 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, void, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v60 + 8);
          id v66 = v19;
          swift_retain();
          v65(v61, v63, v99, v100, v58, 0, partial apply for closure #1 in ActivitySession.presentSessionDismissalAlert(for:allowingCancellation:completion:), v64, v59, v60);

          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          v75 = v19;
          uint64_t v76 = Logger.logObject.getter();
          os_log_type_t v77 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v76, v77))
          {
            int v78 = (uint8_t *)swift_slowAlloc();
            uint64_t v79 = swift_slowAlloc();
            uint64_t v104 = (uint64_t)v75;
            uint64_t v105 = v79;
            *(_DWORD *)int v78 = 136315138;
            v101 = v78 + 4;
            type metadata accessor for ActivitySession(0);
            dispatch_group_t v102 = v32;
            v80 = v75;
            uint64_t v81 = String.init<A>(reflecting:)();
            uint64_t v104 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, &v105);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            int v32 = v102;
            swift_bridgeObjectRelease();

            _os_log_impl(&dword_1B0DF7000, v76, v77, "Skipping session dismissal alert and ending session because only one option would be presented: %s", v78, 0xCu);
            swift_arrayDestroy();
            uint64_t v83 = v79;
            uint64_t v30 = (void *)MEMORY[0x1E4FBC8C8];
            MEMORY[0x1B3EA39E0](v83, -1, -1);
            MEMORY[0x1B3EA39E0](v78, -1, -1);
          }
          else
          {
          }
          (*(void (**)(void (*)(void), uint64_t))((*v30 & *(void *)v75) + 0x418))(a4, v103);
        }
        return;
      }
      type metadata accessor for ConversationManagerHost();
      uint64_t v48 = swift_getObjCClassFromMetadata();
      id v49 = objc_msgSend(self, sel_bundleForClass_, v48);
      v107._object = (void *)0xE000000000000000;
      v50._uint64_t countAndFlagsBits = 0x495443415F444E45;
      v50._object = (void *)0xEC00000059544956;
      v51.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
      v51.value._object = (void *)0xEE0065726F436563;
      v52._uint64_t countAndFlagsBits = 0;
      v52._object = (void *)0xE000000000000000;
      v107._uint64_t countAndFlagsBits = 0;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v50, v51, (NSBundle)v49, v52, v107);
    }
    uint64_t v53 = String.init(format:_:)();
    uint64_t v55 = v54;
    goto LABEL_13;
  }
  uint64_t v67 = v19;
  unint64_t v68 = Logger.logObject.getter();
  os_log_type_t v69 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v68, v69))
  {
    uint64_t v70 = (uint8_t *)swift_slowAlloc();
    uint64_t v71 = swift_slowAlloc();
    uint64_t v104 = (uint64_t)v67;
    uint64_t v105 = v71;
    *(_DWORD *)uint64_t v70 = 136315138;
    type metadata accessor for ActivitySession(0);
    uint64_t v72 = v67;
    uint64_t v73 = String.init<A>(reflecting:)();
    uint64_t v104 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v74, &v105);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v68, v69, "Not presenting session dismissal alert because we don't have an XPC connection for the app (not joined?) session: %s", v70, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v71, -1, -1);
    MEMORY[0x1B3EA39E0](v70, -1, -1);
  }
  else
  {
  }
  a4(0);
}

uint64_t closure #1 in ActivitySession.presentSessionDismissalAlert(for:allowingCancellation:completion:)(uint64_t result, char a2, void *a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  if (result == 2)
  {
    if ((a2 & 1) == 0) {
      return result;
    }
    return (*(uint64_t (**)(uint64_t (*)(uint64_t), uint64_t))((*MEMORY[0x1E4FBC8C8] & *a3) + 0x420))(a4, a5);
  }
  if (result == 1)
  {
    if (a2) {
      return (*(uint64_t (**)(uint64_t (*)(uint64_t), uint64_t))((*MEMORY[0x1E4FBC8C8] & *a3) + 0x418))(a4, a5);
    }
    return (*(uint64_t (**)(uint64_t (*)(uint64_t), uint64_t))((*MEMORY[0x1E4FBC8C8] & *a3) + 0x420))(a4, a5);
  }
  if ((a2 & 1) == 0) {
    return (*(uint64_t (**)(uint64_t (*)(uint64_t), uint64_t))((*MEMORY[0x1E4FBC8C8] & *a3) + 0x418))(a4, a5);
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.default);
  uint64_t v8 = a3;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v16 = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    type metadata accessor for ActivitySession(0);
    uint64_t v13 = v8;
    uint64_t v14 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v9, v10, "User chose not to dismiss session %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v12, -1, -1);
    MEMORY[0x1B3EA39E0](v11, -1, -1);
  }
  else
  {
  }
  return a4(1);
}

uint64_t ActivitySession.endSessionForAll(completion:)(void (*a1)(void), uint64_t a2)
{
  return ActivitySession.endSessionForAll(completion:)(a1, a2, "User chose to end for all for %s", (uint64_t)&unk_1F09B1768, (uint64_t)partial apply for closure #1 in ActivitySession.endSessionForAll(completion:), (uint64_t)&block_descriptor_69);
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);
  return swift_release();
}

{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t ActivitySession.endSessionForLocal(completion:)(void (*a1)(void), uint64_t a2)
{
  return ActivitySession.endSessionForAll(completion:)(a1, a2, "User chose to leave session %s", (uint64_t)&unk_1F09B1790, (uint64_t)partial apply for closure #1 in ActivitySession.endSessionForLocal(completion:), (uint64_t)&block_descriptor_75);
}

uint64_t ActivitySession.endSessionForAll(completion:)(void (*a1)(void), uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v39 = a3;
  uint64_t v40 = a2;
  Swift::String v41 = a1;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v44 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v43 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  Swift::String_optional v42 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.default);
  id v16 = v6;
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v36 = a6;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v37 = v12;
    uint64_t v20 = (uint8_t *)v19;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v38 = v13;
    uint64_t v22 = v21;
    uint64_t v45 = (uint64_t)v16;
    aBlock[0] = v21;
    *(_DWORD *)uint64_t v20 = 136315138;
    uint64_t v34 = a4;
    type metadata accessor for ActivitySession(0);
    id v23 = v16;
    uint64_t v35 = v10;
    id v24 = v23;
    uint64_t v25 = String.init<A>(reflecting:)();
    uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a6 = v36;
    swift_bridgeObjectRelease();

    uint64_t v10 = v35;
    _os_log_impl(&dword_1B0DF7000, v17, v18, v39, v20, 0xCu);
    swift_arrayDestroy();
    uint64_t v27 = v22;
    uint64_t v13 = v38;
    MEMORY[0x1B3EA39E0](v27, -1, -1);
    unint64_t v28 = v20;
    uint64_t v12 = v37;
    MEMORY[0x1B3EA39E0](v28, -1, -1);
  }
  else
  {
  }
  v41(0);
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = v16;
  aBlock[4] = a5;
  aBlock[5] = v29;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = a6;
  uint64_t v30 = _Block_copy(aBlock);
  id v31 = v16;
  int v32 = v42;
  static DispatchQoS.unspecified.getter();
  uint64_t v45 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v32, v12, v30);
  _Block_release(v30);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v32, v13);
  return swift_release();
}

uint64_t closure #1 in ActivitySession.endSessionForLocal(completion:)(void *a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x3D8))();
}

Swift::Void __swiftcall ActivitySession.terminateSessionIfAtEndOfLifetime()()
{
  void (*v11)(void *__return_ptr);
  uint64_t (*v12)(void *, uint64_t);
  uint64_t v13;
  void *v14;
  unint64_t v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t *__return_ptr);
  uint64_t v45;
  unint64_t v46;

  uint64_t v4 = v0;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (uint64_t *)((char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)((char *)v4 + OBJC_IVAR___CPActivitySession_queue);
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E4FBCBF0], v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t))(v6 + 8);
  uint64_t v11 = (void (*)(void *__return_ptr))(v6 + 8);
  uint64_t v13 = v12(v8, v5);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v11 = *(void (**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x2A0);
  uint64_t v3 = (*MEMORY[0x1E4FBC8C8] & *v4) + 672;
  uint64_t v14 = ((void *(*)(unint64_t *__return_ptr, uint64_t))v11)(&v46, v13);
  uint64_t v15 = v46;
  if ((v46 & 0x8000000000000000) == 0) {
    uint64_t v14 = (void *)outlined consume of ActivitySession.State(v46);
  }
  uint64_t v2 = *(uint64_t (**)(void))((*v1 & *v4) + 0x2E8);
  if ((((uint64_t (*)(void *))v2)(v14) & 1) == 0
    || (id v16 = (void *)(*(uint64_t (**)(void))((*v1 & *v4) + 0x2D0))(),
        uint64_t v17 = objc_msgSend(v16, sel_metadata),
        v16,
        !v17)
    || (os_log_type_t v18 = objc_msgSend(v17, sel_lifetimePolicy), v17, (v15 & 0x8000000000000000) == 0)
    || v18 != (id)1)
  {
    if (one-time initialization token for default == -1)
    {
LABEL_13:
      unint64_t v28 = type metadata accessor for Logger();
      __swift_project_value_buffer(v28, (uint64_t)static Log.default);
      uint64_t v29 = v4;
      uint64_t v30 = Logger.logObject.getter();
      id v31 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v43 = v3;
        uint64_t v44 = v11;
        int v32 = swift_slowAlloc();
        uint64_t v33 = swift_slowAlloc();
        uint64_t v46 = v33;
        *(_DWORD *)int v32 = 67109634;
        LOBYTE(v45) = v2() & 1;
        LODWORD(v45) = v45;
        uint64_t v34 = UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v32 + 8) = 2080;
        uint64_t v35 = (void *)(*(uint64_t (**)(uint64_t))((*v1 & *v29) + 0x2D0))(v34);
        uint64_t v36 = objc_msgSend(v35, sel_metadata);

        if (v36)
        {
          uint64_t v37 = objc_msgSend(v36, sel_lifetimePolicy);

          uint64_t v45 = (uint64_t)v37;
          type metadata accessor for TUConversationActivityLifetimePolicy(0);
          uint64_t v38 = String.init<A>(reflecting:)();
          uint64_t v40 = v39;
        }
        else
        {
          uint64_t v40 = 0xE300000000000000;
          uint64_t v38 = 7104878;
        }
        uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v40, (uint64_t *)&v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        *(_WORD *)(v32 + 18) = 2080;
        v44(&v45);
        Swift::String v41 = String.init<A>(reflecting:)();
        uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, (uint64_t *)&v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1B0DF7000, v30, v31, "terminateSessionIfAtEndOfLifetime, Not terminating session.  isLocallyInitiated: %{BOOL}d, lifetimePolicy: %s, state: %s", (uint8_t *)v32, 0x1Cu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v33, -1, -1);
        MEMORY[0x1B3EA39E0](v32, -1, -1);
      }
      else
      {
      }
      return;
    }
LABEL_23:
    swift_once();
    goto LABEL_13;
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Log.default);
  uint64_t v20 = v4;
  uint64_t v21 = Logger.logObject.getter();
  uint64_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    id v23 = (uint8_t *)swift_slowAlloc();
    id v24 = swift_slowAlloc();
    uint64_t v45 = (uint64_t)v20;
    uint64_t v46 = v24;
    *(_DWORD *)id v23 = 136315138;
    uint64_t v44 = (void (*)(uint64_t *__return_ptr))(v23 + 4);
    type metadata accessor for ActivitySession(0);
    uint64_t v25 = v20;
    unint64_t v26 = String.init<A>(reflecting:)();
    uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, (uint64_t *)&v46);
    uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v21, v22, "terminateSessionIfAtEndOfLifetime, terminating %s", v23, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v24, -1, -1);
    MEMORY[0x1B3EA39E0](v23, -1, -1);
  }
  else
  {
  }
  (*(void (**)(void))((*v1 & *v20) + 0x3E0))();
}

unint64_t ActivitySession.buildDisplayOptions(title:allowingCancellation:)(uint64_t a1, uint64_t a2, char a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B1138A80;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v8;
  uint64_t v9 = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 48) = a1;
  *(void *)(inited + 56) = a2;
  swift_bridgeObjectRetain();
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  swift_bridgeObjectRelease();
  char v64 = a3;
  uint64_t v10 = swift_initStackObject();
  if (a3)
  {
    *(_OWORD *)(v10 + 16) = xmmword_1B1138A90;
    *(void *)(v10 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v10 + 40) = v11;
    *(void *)(v10 + 72) = v9;
    *(void *)(v10 + 48) = a1;
    *(void *)(v10 + 56) = a2;
    *(void *)(v10 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v10 + 88) = v12;
    type metadata accessor for ConversationManagerHost();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    uint64_t v14 = self;
    swift_bridgeObjectRetain();
    id v15 = objc_msgSend(v14, sel_bundleForClass_, ObjCClassFromMetadata);
    v69._object = (void *)0xE000000000000000;
    v16._object = (void *)0x80000001B115B4A0;
    v16._uint64_t countAndFlagsBits = 0xD000000000000010;
    v17.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
    v17.value._object = (void *)0xEE0065726F436563;
    v18._uint64_t countAndFlagsBits = 0;
    v18._object = (void *)0xE000000000000000;
    v69._uint64_t countAndFlagsBits = 0;
    Swift::String v19 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, v17, (NSBundle)v15, v18, v69);

    *(void *)(v10 + 120) = v9;
    *(Swift::String *)(v10 + 96) = v19;
    *(void *)(v10 + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v10 + 136) = v20;
    id v21 = objc_msgSend(v14, (SEL)&selRef_resetActivitySessionSceneAssociationsForBundleID_ + 5, ObjCClassFromMetadata);
    v70._object = (void *)0xE000000000000000;
    v22._uint64_t countAndFlagsBits = 0x4C45434E4143;
    v22._object = (void *)0xE600000000000000;
    v23.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
    v23.value._object = (void *)0xEE0065726F436563;
    v24._uint64_t countAndFlagsBits = 0;
    v24._object = (void *)0xE000000000000000;
    v70._uint64_t countAndFlagsBits = 0;
    Swift::String v25 = NSLocalizedString(_:tableName:bundle:value:comment:)(v22, v23, (NSBundle)v21, v24, v70);

    *(Swift::String *)(v10 + 144) = v25;
    *(void *)(v10 + 168) = v9;
    *(void *)(v10 + 176) = 0xD000000000000022;
    *(void *)(v10 + 216) = MEMORY[0x1E4FBB808];
    *(void *)(v10 + 184) = 0x80000001B115B4C0;
    *(void *)(v10 + 192) = 1;
  }
  else
  {
    *(_OWORD *)(v10 + 16) = xmmword_1B1138A70;
    *(void *)(v10 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v10 + 40) = v26;
    *(void *)(v10 + 72) = v9;
    *(void *)(v10 + 48) = a1;
    *(void *)(v10 + 56) = a2;
    *(void *)(v10 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v10 + 88) = v27;
    type metadata accessor for ConversationManagerHost();
    uint64_t v28 = swift_getObjCClassFromMetadata();
    uint64_t v29 = self;
    swift_bridgeObjectRetain();
    id v30 = objc_msgSend(v29, sel_bundleForClass_, v28);
    v71._object = (void *)0xE000000000000000;
    v31._object = (void *)0x80000001B115B4A0;
    v31._uint64_t countAndFlagsBits = 0xD000000000000010;
    v32.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
    v32.value._object = (void *)0xEE0065726F436563;
    v33._uint64_t countAndFlagsBits = 0;
    v33._object = (void *)0xE000000000000000;
    v71._uint64_t countAndFlagsBits = 0;
    Swift::String v34 = NSLocalizedString(_:tableName:bundle:value:comment:)(v31, v32, (NSBundle)v30, v33, v71);

    *(void *)(v10 + 120) = v9;
    *(Swift::String *)(v10 + 96) = v34;
  }
  unint64_t v35 = specialized Dictionary.init(dictionaryLiteral:)(v10);
  uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v38 = v37;
  uint64_t v39 = (void *)MEMORY[0x1E4FBC8C8];
  if (((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x2E8))() & 1) != 0
    && (uint64_t v40 = (void *)(*(uint64_t (**)(void))((*v39 & *v3) + 0x2D0))(),
        id v41 = objc_msgSend(v40, sel_metadata),
        v40,
        v41)
    && (id v42 = objc_msgSend(v41, sel_lifetimePolicy), v41, v42 == (id)1))
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    __swift_project_value_buffer(v43, (uint64_t)static Log.default);
    uint64_t v44 = v3;
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v45, v46))
    {
      id v47 = (uint8_t *)swift_slowAlloc();
      uint64_t v48 = swift_slowAlloc();
      v67._uint64_t countAndFlagsBits = v48;
      *(_DWORD *)id v47 = 136315138;
      type metadata accessor for ActivitySession(0);
      id v49 = v44;
      uint64_t v50 = String.init<A>(reflecting:)();
      *(void *)&v66[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, &v67._countAndFlagsBits);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B0DF7000, v45, v46, "excluding end-only-for-me option for locally initiated session with initiator-owned content association: %s", v47, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v48, -1, -1);
      MEMORY[0x1B3EA39E0](v47, -1, -1);
    }
    else
    {
    }
    if ((v64 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v38 = v63;
    uint64_t v68 = MEMORY[0x1E4FBB808];
    v67._uint64_t countAndFlagsBits = 0;
    outlined init with take of Any(&v67, v66);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v65 = v35;
    uint64_t v59 = v62;
  }
  else
  {
    type metadata accessor for ConversationManagerHost();
    uint64_t v52 = swift_getObjCClassFromMetadata();
    id v53 = objc_msgSend(self, sel_bundleForClass_, v52);
    v72._object = (void *)0xE000000000000000;
    v54._uint64_t countAndFlagsBits = 0x5F524F465F444E45;
    v54._object = (void *)0xEA0000000000454DLL;
    v55.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
    v55.value._object = (void *)0xEE0065726F436563;
    v56._uint64_t countAndFlagsBits = 0;
    v56._object = (void *)0xE000000000000000;
    v72._uint64_t countAndFlagsBits = 0;
    Swift::String v57 = NSLocalizedString(_:tableName:bundle:value:comment:)(v54, v55, (NSBundle)v53, v56, v72);

    uint64_t v68 = v9;
    Swift::String v67 = v57;
    outlined init with take of Any(&v67, v66);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v65 = v35;
    uint64_t v59 = v36;
  }
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v66, v59, v38, isUniquelyReferenced_nonNull_native);
  unint64_t v60 = v65;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v60;
}

id default argument 6 of ActivitySession.init(activity:id:manager:timestamp:locallyInitiated:lightweightPrimaryInitiated:notificationCenter:)@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  id v3 = (id)static IMUserNotificationCenter.shared;
  a1[3] = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for IMUserNotificationCenter);
  a1[4] = &protocol witness table for IMUserNotificationCenter;
  *a1 = v3;
  return v3;
}

char *ActivitySession.__allocating_init(activity:id:manager:timestamp:locallyInitiated:lightweightPrimaryInitiated:notificationCenter:)(void (**a1)(void, void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8)
{
  int v25 = a6;
  int v26 = a7;
  uint64_t v24 = a5;
  id v14 = objc_allocWithZone(v8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v16 = *(void *)(a8 + 24);
  uint64_t v17 = *(void *)(a8 + 32);
  uint64_t v18 = __swift_mutable_project_boxed_opaque_existential_1(a8, v16);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v21 + 16))(v20);
  Swift::String v22 = specialized ActivitySession.init(activity:id:manager:timestamp:locallyInitiated:lightweightPrimaryInitiated:notificationCenter:)(a1, a2, a3, v24, v25, v26, (uint64_t)v20, v14, ObjectType, v16, a4, v17);
  __swift_destroy_boxed_opaque_existential_1Tm(a8);
  return v22;
}

char *ActivitySession.init(activity:id:manager:timestamp:locallyInitiated:lightweightPrimaryInitiated:notificationCenter:)(void (**a1)(void, void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8)
{
  int v23 = a6;
  int v24 = a7;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v15 = *(void *)(a8 + 24);
  uint64_t v16 = *(void *)(a8 + 32);
  uint64_t v17 = __swift_mutable_project_boxed_opaque_existential_1(a8, v15);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v20 + 16))(v19);
  uint64_t v21 = specialized ActivitySession.init(activity:id:manager:timestamp:locallyInitiated:lightweightPrimaryInitiated:notificationCenter:)(a1, a2, a3, a5, v23, v24, (uint64_t)v19, v25, ObjectType, v15, a4, v16);
  __swift_destroy_boxed_opaque_existential_1Tm(a8);
  return v21;
}

char *ActivitySession.__allocating_init(activitySession:manager:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = swift_getObjectType();
  return specialized ActivitySession.__allocating_init(activitySession:manager:)(a1, a2, v3, ObjectType, a3);
}

id ActivitySession.__deallocating_deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR___CPActivitySession_invalidateAssertionsWorkItem;
  if (*(void *)&v0[OBJC_IVAR___CPActivitySession_invalidateAssertionsWorkItem])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
    *(void *)&v0[v2] = 0;
    swift_release();
  }
  ActivitySession.invalidateDomainAssertion()();
  uint64_t v3 = (void **)&v0[OBJC_IVAR___CPActivitySession_connection];
  swift_beginAccess();
  uint64_t v4 = *v3;
  void *v3 = 0;

  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for ActivitySession(0);
  return objc_msgSendSuper2(&v6, sel_dealloc);
}

uint64_t default argument 0 of ActivitySession.invalidateAssertions(useDelay:)()
{
  return 0;
}

Swift::Void __swiftcall ActivitySession.refreshDataCryptor()()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (uint64_t *)((char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)((char *)v0 + OBJC_IVAR___CPActivitySession_queue);
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBCBF0], v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  uint64_t v7 = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    uint64_t v8 = (void *)MEMORY[0x1E4FBC8C8];
    (*(void (**)(unint64_t *__return_ptr, uint64_t))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2A0))(&v26, v7);
    unint64_t v9 = v26;
    unint64_t v24 = 0x8000000000000008;
    unint64_t v25 = v26;
    char v10 = static ActivitySession.State.== infix(_:_:)(&v25, &v24);
    outlined consume of ActivitySession.State(v9);
    if (v10)
    {
      uint64_t v11 = swift_allocObject();
      *(void *)(v11 + 16) = v0;
      uint64_t v12 = *(uint64_t (**)(void))((*v8 & *v0) + 0x380);
      uint64_t v13 = v0;
      if (v12())
      {
        uint64_t v15 = v14;
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v17 = UUID.uuidString.getter();
        uint64_t v19 = v18;
        uint64_t v20 = (void *)swift_allocObject();
        v20[2] = v13;
        v20[3] = partial apply for closure #1 in ActivitySession.refreshDataCryptor();
        void v20[4] = v11;
        uint64_t v21 = *(void (**)(void *, uint64_t, uint64_t, uint64_t (*)(uint64_t), void *, uint64_t, uint64_t))(v15 + 72);
        Swift::String v22 = v13;
        swift_retain();
        v21(v22, v17, v19, partial apply for closure #1 in ActivitySession.fetchDataCryptor(completion:), v20, ObjectType, v15);
        swift_unknownObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
      }
      swift_release();
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t closure #1 in ActivitySession.refreshDataCryptor()(uint64_t a1, void *a2)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a2) + 0x3B0))();
  if (result)
  {
    uint64_t v4 = (void *)result;
    id v5 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(result
                                                               + direct field offset for XPCHostConnection.connection), sel_remoteObjectProxy));
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActivitySessionXPCClient);
    uint64_t result = swift_dynamicCast();
    if (result)
    {

      objc_msgSend(v6, sel_setDataCryptor_, a1);
      return swift_unknownObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t closure #1 in ActivitySession.fetchDataCryptor(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  char v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v17[0] - 8);
  MEMORY[0x1F4188790](v17[0]);
  uint64_t v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = a3;
  v14[3] = a4;
  v14[4] = a1;
  aBlock[4] = partial apply for closure #1 in closure #1 in ActivitySession.fetchDataCryptor(completion:);
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_183;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  swift_unknownObjectRetain();
  static DispatchQoS.unspecified.getter();
  v17[1] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v13, v10, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, void))(v11 + 8))(v13, v17[0]);
  return swift_release();
}

uint64_t ActivitySession.topicName.getter()
{
  return UUID.uuidString.getter();
}

Swift::Void __swiftcall ActivitySession.invalidate(replacementBundleIdentifier:)(Swift::String replacementBundleIdentifier)
{
  object = replacementBundleIdentifier._object;
  uint64_t countAndFlagsBits = replacementBundleIdentifier._countAndFlagsBits;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (void **)((char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)&v1[OBJC_IVAR___CPActivitySession_queue];
  void *v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4FBCBF0], v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if (v8)
  {
    if (one-time initialization token for host == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.host);
  uint64_t v11 = v1;
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    Swift::String v22 = object;
    uint64_t v23 = v11;
    uint64_t v16 = countAndFlagsBits;
    uint64_t v17 = (void *)v15;
    *(_DWORD *)uint64_t v14 = 138412290;
    uint64_t v18 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v17 = v11;

    _os_log_impl(&dword_1B0DF7000, v12, v13, "Invalidating %@", v14, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    uint64_t v19 = v17;
    uint64_t countAndFlagsBits = v16;
    object = v22;
    MEMORY[0x1B3EA39E0](v19, -1, -1);
    MEMORY[0x1B3EA39E0](v14, -1, -1);
  }
  else
  {
  }
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = countAndFlagsBits;
  *(void *)(v20 + 24) = object;
  uint64_t v23 = (void *)v20;
  uint64_t v21 = *(void (**)(void **))((*MEMORY[0x1E4FBC8C8] & *(void *)v11) + 0x2A8);
  swift_bridgeObjectRetain();
  v21(&v23);
}

id ActivitySession.rbsAssertion(for:)(uint64_t a1)
{
  id v1 = objc_msgSend(self, sel_targetWithPid_, a1);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = (void *)MEMORY[0x1B3EA1B00](v2);
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)MEMORY[0x1B3EA1B00](0x74634170756F7247, 0xEF73656974697669);
  id v5 = objc_msgSend(self, sel_attributeWithDomain_name_, v3, v4);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B1138AA0;
  *(void *)(v6 + 32) = v5;
  specialized Array._endMutation()();
  id v7 = objc_allocWithZone(MEMORY[0x1E4F96318]);
  id v8 = v5;
  id v9 = (void *)MEMORY[0x1B3EA1B00](0xD000000000000024, 0x80000001B115AE10);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for RBSAttribute);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v11 = objc_msgSend(v7, sel_initWithExplanation_target_attributes_, v9, v1, isa);

  return v11;
}

void ActivitySession.updateApplicationState(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (uint64_t *)((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v7 = *(void **)((char *)v1 + OBJC_IVAR___CPActivitySession_queue);
  void *v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4FBCBF0], v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  uint64_t v9 = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v7)
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC8C8];
    if (a1 != 1
      || ((*(void (**)(unint64_t *__return_ptr, uint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x2A0))(&v16, v9), unint64_t v11 = v16, v14 = 0x8000000000000008, v15 = v16, v12 = static ActivitySession.State.== infix(_:_:)(&v15, &v14), outlined consume of ActivitySession.State(v11), (v12 & 1) == 0))
    {
      (*(void (**)(uint64_t))((*v10 & *v1) + 0x270))(a1);
      ActivitySession.sessionChanged()();
    }
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall ActivitySession.refreshActiveParticipants()()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (uint64_t *)((char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)((char *)v0 + OBJC_IVAR___CPActivitySession_queue);
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBCBF0], v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    id v7 = *(void (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3C8);
    uint64_t v8 = swift_bridgeObjectRetain();
    v7(v8, 1);
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

Swift::Bool __swiftcall ActivitySession.listener(_:shouldAcceptNewConnection:)(NSXPCListener _, NSXPCConnection shouldAcceptNewConnection)
{
  return specialized ActivitySession.listener(_:shouldAcceptNewConnection:)(shouldAcceptNewConnection.super.isa);
}

uint64_t closure #1 in ActivitySession.listener(_:shouldAcceptNewConnection:)(unsigned char *a1, void *a2)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a2) + 0x380))();
  if (result)
  {
    uint64_t v6 = v5;
    uint64_t ObjectType = swift_getObjectType();
    char v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 56))(a2, ObjectType, v6);
    uint64_t result = swift_unknownObjectRelease();
  }
  else
  {
    char v8 = 0;
  }
  *a1 = v8 & 1;
  return result;
}

Swift::Void __swiftcall ActivitySession.requestForegroundPresentation()()
{
  void (*v9)(unint64_t *__return_ptr);
  unint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;

  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.host);
  uint64_t v2 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138412290;
    unint64_t v24 = (unint64_t)v2;
    id v7 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v6 = v2;

    _os_log_impl(&dword_1B0DF7000, v3, v4, "Asked to be presented as foreground for %@", v5, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v6, -1, -1);
    MEMORY[0x1B3EA39E0](v5, -1, -1);
  }
  else
  {
  }
  char v8 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v9 = *(void (**)(unint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x2A0);
  v9(&v24);
  uint64_t v10 = v24;
  Swift::String v22 = 0x8000000000000008;
  uint64_t v23 = v24;
  unint64_t v11 = static ActivitySession.State.== infix(_:_:)(&v23, &v22);
  char v12 = outlined consume of ActivitySession.State(v10);
  if ((v11 & 1) != 0
    || (((void (*)(unint64_t *__return_ptr, unint64_t))v9)(&v24, v12),
        uint64_t v13 = v24,
        Swift::String v22 = 0x8000000000000000,
        uint64_t v23 = v24,
        unint64_t v14 = static ActivitySession.State.== infix(_:_:)(&v23, &v22),
        outlined consume of ActivitySession.State(v13),
        (v14 & 1) != 0))
  {
    unint64_t v15 = (*(uint64_t (**)(uint64_t))((*v8 & *v2) + 0x270))(1);
    if ((*(uint64_t (**)(uint64_t))((*v8 & *v2) + 0x380))(v15))
    {
      uint64_t v17 = v16;
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(void *, uint64_t, uint64_t))(v17 + 112))(v2, ObjectType, v17);
      swift_unknownObjectRelease();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(), Never>);
    Subject<>.send()();
  }
  else
  {
    uint64_t v19 = Logger.logObject.getter();
    uint64_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl(&dword_1B0DF7000, v19, v20, "Not presenting in foreground as session is not in joined or waiting state", v21, 2u);
      MEMORY[0x1B3EA39E0](v21, -1, -1);
    }
  }
}

Swift::Void __swiftcall ActivitySession.associateScene(sceneID:)(Swift::String sceneID)
{
  object = sceneID._object;
  uint64_t countAndFlagsBits = sceneID._countAndFlagsBits;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  id v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  unint64_t v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = *(void *)&v1[OBJC_IVAR___CPActivitySession_queue];
  char v12 = (void *)swift_allocObject();
  v12[2] = v1;
  uint64_t v12[3] = countAndFlagsBits;
  v12[4] = object;
  aBlock[4] = partial apply for closure #1 in ActivitySession.associateScene(sceneID:);
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_88;
  uint64_t v13 = _Block_copy(aBlock);
  unint64_t v14 = v1;
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  v15[1] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v11, v7, v13);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_release();
}

Swift::Void __swiftcall ActivitySession._associateScene(sceneID:)(Swift::String sceneID)
{
  object = sceneID._object;
  uint64_t countAndFlagsBits = sceneID._countAndFlagsBits;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = &v60[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v7 = *(void **)&v1[OBJC_IVAR___CPActivitySession_queue];
  void *v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4FBCBF0], v3);
  id v8 = v7;
  char v9 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v9)
  {
    if (one-time initialization token for host == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v10 = type metadata accessor for Logger();
  unint64_t v11 = __swift_project_value_buffer(v10, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  char v12 = v1;
  char v64 = v11;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  BOOL v15 = os_log_type_enabled(v13, v14);
  uint64_t v16 = countAndFlagsBits;
  if (v15)
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v18 = (void *)swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    v68[0] = v63;
    *(_DWORD *)uint64_t v17 = 136315394;
    swift_bridgeObjectRetain();
    Swift::String v67 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, (unint64_t)object, v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v17 + 12) = 2112;
    Swift::String v67 = v12;
    uint64_t v19 = v12;
    uint64_t v16 = countAndFlagsBits;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v18 = v12;

    _os_log_impl(&dword_1B0DF7000, v13, v14, "Associating sceneID: %s with %@", (uint8_t *)v17, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v18, -1, -1);
    uint64_t v20 = v63;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v20, -1, -1);
    MEMORY[0x1B3EA39E0](v17, -1, -1);
  }
  else
  {

    uint64_t v21 = swift_bridgeObjectRelease_n();
  }
  Swift::String v22 = *(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *(void *)v12) + 0x1A8);
  uint64_t v23 = ((uint64_t (*)(uint64_t))v22)(v21);
  v68[0] = v16;
  v68[1] = (uint64_t)object;
  MEMORY[0x1F4188790](v23);
  *(void *)&v60[-16] = v68;
  uint64_t v24 = specialized BidirectionalCollection.lastIndex(where:)(partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:), (uint64_t)&v60[-32], v23);
  char v26 = v25;
  uint64_t v27 = swift_bridgeObjectRelease();
  if ((v26 & 1) == 0)
  {
    uint64_t v28 = (uint64_t)v12;
    uint64_t v29 = ((uint64_t (*)(uint64_t))v22)(v27);
    unint64_t v30 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
      __break(1u);
    }
    else if ((v30 & 0x8000000000000000) == 0)
    {
      uint64_t v28 = v29;
      if (*(void *)(v29 + 16) >= v30)
      {
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_unknownObjectRetain_n();
        uint64_t v31 = swift_dynamicCastClass();
        if (!v31)
        {
          swift_bridgeObjectRelease();
          uint64_t v31 = MEMORY[0x1E4FBC860];
        }
        uint64_t v32 = *(void *)(v31 + 16);
        swift_release();
        if (v32 == v30)
        {
          uint64_t v33 = swift_dynamicCastClass();
          if (!v33)
          {
            swift_bridgeObjectRelease();
            uint64_t v33 = MEMORY[0x1E4FBC860];
          }
          goto LABEL_15;
        }
LABEL_34:
        swift_bridgeObjectRelease();
        uint64_t v33 = specialized _copyCollectionToContiguousArray<A>(_:)(v28, v28 + 32, 0, (2 * v30) | 1);
LABEL_15:
        swift_bridgeObjectRelease();
        Swift::String v34 = (uint64_t *)&v12[OBJC_IVAR___CPActivitySession_persistentSceneIdentifiers];
        swift_beginAccess();
        uint64_t v35 = *v34;
        uint64_t *v34 = v33;
        goto LABEL_21;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v36 = (uint64_t *)&v12[OBJC_IVAR___CPActivitySession_persistentSceneIdentifiers];
  swift_beginAccess();
  uint64_t v37 = (void *)*v36;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37[2] + 1, 1, v37);
  }
  unint64_t v39 = v37[2];
  unint64_t v38 = v37[3];
  if (v39 >= v38 >> 1) {
    uint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v39 + 1, 1, v37);
  }
  v37[2] = v39 + 1;
  uint64_t v40 = &v37[2 * v39];
  v40[4] = v16;
  v40[5] = object;
  uint64_t v35 = *v36;
  *uint64_t v36 = (uint64_t)v37;
LABEL_21:
  ActivitySession.persistentSceneIdentifiers.didset(v35);
  uint64_t v41 = swift_bridgeObjectRelease();
  unint64_t v42 = *(void *)(((uint64_t (*)(uint64_t))v22)(v41) + 16);
  swift_bridgeObjectRelease();
  if (v42 >= 2)
  {
    uint64_t v63 = (uint64_t)object;
    uint64_t v43 = v12;
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    int v46 = v45;
    char v64 = v44;
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v47 = swift_slowAlloc();
      uint64_t v48 = (void *)swift_slowAlloc();
      uint64_t v62 = swift_slowAlloc();
      uint64_t v66 = (uint64_t)v43;
      Swift::String v67 = (void *)v62;
      *(_DWORD *)uint64_t v47 = 138412546;
      id v49 = v43;
      int v61 = v46;
      uint64_t v50 = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v48 = v12;

      *(_WORD *)(v47 + 12) = 2080;
      v22();
      uint64_t v51 = MEMORY[0x1B3EA1D20]();
      unint64_t v53 = v52;
      swift_bridgeObjectRelease();
      uint64_t v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v53, (uint64_t *)&v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      Swift::String v54 = v64;
      _os_log_impl(&dword_1B0DF7000, v64, (os_log_type_t)v61, "Persistent scene identifiers for %@: %s", (uint8_t *)v47, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v48, -1, -1);
      uint64_t v55 = v62;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v55, -1, -1);
      uint64_t v56 = v47;
      uint64_t v16 = countAndFlagsBits;
      MEMORY[0x1B3EA39E0](v56, -1, -1);
    }
    else
    {
    }
    object = (void *)v63;
  }
  if ((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *(void *)v12) + 0x380))())
  {
    uint64_t v58 = v57;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(char *, uint64_t, void *, uint64_t, uint64_t))(v58 + 120))(v12, v16, object, ObjectType, v58);
    swift_unknownObjectRelease();
  }
}

Swift::Void __swiftcall ActivitySession._disassociateScene()()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (uint64_t *)((char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v7 = *(void **)((char *)v2 + OBJC_IVAR___CPActivitySession_queue);
  void *v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4FBCBF0], v3);
  id v8 = v7;
  uint64_t v9 = _dispatchPreconditionTest(_:)();
  uint64_t v10 = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v11 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x1A0))(v10);
  if (v12)
  {
    uint64_t v9 = v11;
    uint64_t v6 = v12;
    if (one-time initialization token for host == -1)
    {
LABEL_4:
      uint64_t v13 = type metadata accessor for Logger();
      __swift_project_value_buffer(v13, (uint64_t)static Log.host);
      swift_bridgeObjectRetain_n();
      os_log_type_t v14 = v2;
      BOOL v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.default.getter();
      BOOL v17 = os_log_type_enabled(v15, v16);
      uint64_t v39 = v9;
      if (v17)
      {
        uint64_t v18 = swift_slowAlloc();
        uint64_t v37 = (void *)swift_slowAlloc();
        uint64_t v38 = swift_slowAlloc();
        v41[0] = v38;
        *(_DWORD *)uint64_t v18 = 136315394;
        swift_bridgeObjectRetain();
        uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, (unint64_t)v6, v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v18 + 12) = 2112;
        uint64_t v40 = (uint64_t)v14;
        uint64_t v19 = v14;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v20 = v37;
        *uint64_t v37 = v2;

        _os_log_impl(&dword_1B0DF7000, v15, v16, "Disassociating sceneID: %s from %@", (uint8_t *)v18, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v20, -1, -1);
        uint64_t v21 = v38;
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v21, -1, -1);
        uint64_t v22 = v18;
        uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
        MEMORY[0x1B3EA39E0](v22, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      unint64_t v30 = (void *)((char *)v14 + OBJC_IVAR___CPActivitySession_persistentSceneIdentifiers);
      swift_beginAccess();
      uint64_t v31 = *v30;
      uint64_t *v30 = MEMORY[0x1E4FBC860];
      ActivitySession.persistentSceneIdentifiers.didset(v31);
      uint64_t v32 = swift_bridgeObjectRelease();
      if ((*(uint64_t (**)(uint64_t))((*v1 & *v14) + 0x380))(v32))
      {
        uint64_t v34 = v33;
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(void *, uint64_t, void *, uint64_t, uint64_t))(v34 + 128))(v14, v39, v6, ObjectType, v34);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      return;
    }
LABEL_16:
    swift_once();
    goto LABEL_4;
  }
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Log.host);
  uint64_t v24 = v2;
  char v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 138412290;
    v41[0] = (uint64_t)v24;
    uint64_t v29 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v28 = v2;

    _os_log_impl(&dword_1B0DF7000, v25, v26, "Tried to disassociate scene but no scene was associated with %@", v27, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v28, -1, -1);
    MEMORY[0x1B3EA39E0](v27, -1, -1);
  }
  else
  {
  }
}

Swift::Void __swiftcall ActivitySession._disassociateScene(sceneID:)(Swift::String sceneID)
{
  uint64_t v3 = v1;
  object = sceneID._object;
  uint64_t countAndFlagsBits = sceneID._countAndFlagsBits;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (void **)((char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = *(void **)((char *)v3 + OBJC_IVAR___CPActivitySession_queue);
  *uint64_t v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E4FBCBF0], v6);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  uint64_t v13 = *(uint64_t (**)(void *, uint64_t))(v7 + 8);
  char v12 = (uint64_t (*)(uint64_t))(v7 + 8);
  uint64_t v14 = v13(v9, v6);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  char v12 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x1A8);
  uint64_t v2 = (*MEMORY[0x1E4FBC8C8] & *v3) + 424;
  BOOL v15 = (void *)v12(v14);
  char v16 = specialized Sequence<>.contains(_:)(countAndFlagsBits, (uint64_t)object, v15);
  swift_bridgeObjectRelease();
  if (v16)
  {
    if (one-time initialization token for host == -1)
    {
LABEL_4:
      uint64_t v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)static Log.host);
      swift_bridgeObjectRetain_n();
      uint64_t v18 = v3;
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.default.getter();
      int v21 = v20;
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v22 = swift_slowAlloc();
        int v48 = v21;
        uint64_t v23 = v22;
        uint64_t v47 = (void *)swift_slowAlloc();
        uint64_t v49 = swift_slowAlloc();
        v52[0] = v49;
        *(_DWORD *)uint64_t v23 = 136315394;
        uint64_t v50 = v2;
        swift_bridgeObjectRetain();
        uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, v52);
        uint64_t v51 = v12;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v23 + 12) = 2112;
        uint64_t v53 = (uint64_t)v18;
        uint64_t v24 = countAndFlagsBits;
        char v25 = v18;
        char v12 = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        os_log_type_t v26 = v47;
        *uint64_t v47 = v3;

        uint64_t countAndFlagsBits = v24;
        uint64_t v27 = v19;
        _os_log_impl(&dword_1B0DF7000, v19, (os_log_type_t)v48, "Disassociating sceneID: %s from %@", (uint8_t *)v23, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v26, -1, -1);
        uint64_t v28 = v49;
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v28, -1, -1);
        MEMORY[0x1B3EA39E0](v23, -1, -1);
      }
      else
      {

        uint64_t v29 = swift_bridgeObjectRelease_n();
      }
      uint64_t v39 = v12(v29);
      swift_bridgeObjectRetain();
      uint64_t v40 = specialized _ArrayProtocol.filter(_:)(v39, countAndFlagsBits, (uint64_t)object);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v41 = (void *)((char *)v18 + OBJC_IVAR___CPActivitySession_persistentSceneIdentifiers);
      swift_beginAccess();
      uint64_t v42 = *v41;
      uint64_t *v41 = v40;
      ActivitySession.persistentSceneIdentifiers.didset(v42);
      uint64_t v43 = swift_bridgeObjectRelease();
      if ((*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v18) + 0x380))(v43))
      {
        uint64_t v45 = v44;
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(void *, uint64_t, void *, uint64_t, uint64_t))(v45 + 128))(v18, countAndFlagsBits, object, ObjectType, v45);
        swift_unknownObjectRelease();
      }
      return;
    }
LABEL_16:
    swift_once();
    goto LABEL_4;
  }
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  __swift_project_value_buffer(v30, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  uint64_t v31 = v3;
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = swift_slowAlloc();
    uint64_t v35 = countAndFlagsBits;
    uint64_t v36 = (void *)swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    v52[0] = v37;
    *(_DWORD *)uint64_t v34 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, (unint64_t)object, v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v34 + 12) = 2112;
    uint64_t v53 = (uint64_t)v31;
    uint64_t v38 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v36 = v3;

    _os_log_impl(&dword_1B0DF7000, v32, v33, "Tried to disassociate scene %s but it was not associated with %@", (uint8_t *)v34, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v36, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v37, -1, -1);
    MEMORY[0x1B3EA39E0](v34, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    goto LABEL_20;
  }
  uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v4 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
    {
      id v5 = *(id *)(a2 + 32);
      goto LABEL_5;
    }
    while (1)
    {
      id v5 = (id)MEMORY[0x1B3EA25C0](0, a2);
LABEL_5:
      uint64_t v6 = v5;
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivity);
      char v7 = static NSObject.== infix(_:_:)();

      if (v7)
      {
LABEL_6:
        swift_bridgeObjectRelease();
        return 1;
      }
      if (v3 == 1) {
        goto LABEL_18;
      }
      if (v4) {
        break;
      }
      unint64_t v4 = 5;
      while (1)
      {
        unint64_t v12 = v4 - 3;
        if (__OFADD__(v4 - 4, 1)) {
          break;
        }
        id v13 = *(id *)(a2 + 8 * v4);
        char v14 = static NSObject.== infix(_:_:)();

        if (v14) {
          goto LABEL_6;
        }
        ++v4;
        if (v12 == v3) {
          goto LABEL_18;
        }
      }
      __break(1u);
    }
    uint64_t v9 = 1;
    while (1)
    {
      MEMORY[0x1B3EA25C0](v9, a2);
      uint64_t v10 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        break;
      }
      char v11 = static NSObject.== infix(_:_:)();
      swift_unknownObjectRelease();
      if (v11) {
        goto LABEL_6;
      }
      ++v9;
      if (v10 == v3) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
LABEL_18:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (*(void *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 5; ; ++i)
  {
    uint64_t v4 = i - 3;
    if (__OFADD__(i - 4, 1)) {
      break;
    }
    BOOL v6 = *(void *)(a2 + 8 * i) == result;
    BOOL v5 = v6;
    BOOL v6 = v6 || v4 == v2;
    if (v6) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

id ActivitySession.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void ActivitySession.init()()
{
}

uint64_t protocol witness for Identifiable.id.getter in conformance ActivitySession@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR___CPActivitySession_id;
  uint64_t v4 = type metadata accessor for UUID();
  BOOL v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t ActivitySession.updateActivity<A>(_:newValue:)(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*MEMORY[0x1E4FBBE08] + *a1 + 8);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)v13 - v7;
  uint64_t v9 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x2D0))(v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
  v13[1] = v10;
  id v11 = v10;
  swift_setAtReferenceWritableKeyPath();

  return (*(uint64_t (**)(id))((*v9 & *v2) + 0x2D8))(v11);
}

void ActivitySession.updateActivity(_:)(void *a1)
{
  void (*v151)(uint64_t *__return_ptr);
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t ObjectType;
  void *v159;
  uint64_t v160;
  void *v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t *v168;
  char *v169;
  void *v170;
  int v171;
  uint64_t v172;
  os_log_t v173;
  id v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t (*v182)(void);
  uint64_t aBlock[6];
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;

  uint64_t v3 = type metadata accessor for Date();
  v178 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  v177 = (char *)&v166 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = type metadata accessor for UUID();
  v180 = *(void *)(v176 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v176);
  uint64_t v7 = (char *)&v166 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  v179 = (char *)&v166 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  unint64_t v12 = (char *)&v166 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  char v14 = (char *)&v166 - v13;
  BOOL v15 = (void *)type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(v15 - 1);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char **)((char *)&v166 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = *(void **)((char *)v1 + OBJC_IVAR___CPActivitySession_queue);
  *uint64_t v18 = v19;
  (*(void (**)(void *, void, void *))(v16 + 104))(v18, *MEMORY[0x1E4FBCBF0], v15);
  id v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, void *))(v16 + 8))(v18, v15);
  if ((v19 & 1) == 0)
  {
    __break(1u);
    goto LABEL_65;
  }
  v175 = v3;
  id v21 = objc_msgSend(a1, sel_activityIdentifier);
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = v23;

  char v25 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x2D0);
  os_log_type_t v26 = v1;
  v181 = (*MEMORY[0x1E4FBC8C8] & *v1) + 720;
  v182 = v25;
  uint64_t v27 = (void *)v25();
  id v28 = objc_msgSend(v27, sel_activityIdentifier);

  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v31 = v30;

  if (v22 == v29 && v24 == v31)
  {
    uint64_t v32 = swift_bridgeObjectRelease_n();
  }
  else
  {
    char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v32 = swift_bridgeObjectRelease();
    BOOL v15 = v26;
    if ((v33 & 1) == 0) {
      goto LABEL_17;
    }
  }
  uint64_t v34 = (void *)((uint64_t (*)(uint64_t))v182)(v32);
  id v35 = objc_msgSend(v34, sel_bundleIdentifier);

  if (v35)
  {
    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v38 = v37;
  }
  else
  {
    uint64_t v36 = 0;
    uint64_t v38 = 0;
  }
  id v39 = objc_msgSend(a1, sel_bundleIdentifier);
  if (v39)
  {
    uint64_t v40 = v39;
    uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v43 = v42;
  }
  else
  {
    uint64_t v41 = 0;
    uint64_t v43 = 0;
  }
  BOOL v15 = v26;
  BOOL v44 = specialized static BundleIdentiferMap.areEquivalentBundleIDs(bundleID:otherBundleID:)(v36, v38, v41, v43);
  swift_bridgeObjectRelease();
  uint64_t v45 = swift_bridgeObjectRelease();
  if (!v44)
  {
LABEL_17:
    if (one-time initialization token for host == -1)
    {
LABEL_18:
      uint64_t v54 = type metadata accessor for Logger();
      __swift_project_value_buffer(v54, (uint64_t)static Log.host);
      uint64_t v55 = v15;
      id v56 = a1;
      uint64_t v57 = v55;
      id v58 = v56;
      uint64_t v59 = Logger.logObject.getter();
      os_log_type_t v60 = static os_log_type_t.error.getter();
      int v61 = v60;
      if (os_log_type_enabled(v59, v60))
      {
        uint64_t v62 = swift_slowAlloc();
        uint64_t v63 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v62 = 138412802;
        aBlock[0] = (uint64_t)v57;
        LODWORD(v180) = v61;
        char v64 = v57;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v63 = v15;

        *(_WORD *)(v62 + 12) = 2112;
        aBlock[0] = (uint64_t)v58;
        id v65 = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v63[1] = v58;

        *(_WORD *)(v62 + 22) = 2112;
        uint64_t v66 = v182();
        aBlock[0] = v66;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v63[2] = v66;

        _os_log_impl(&dword_1B0DF7000, v59, (os_log_type_t)v180, "%@ dropping activity update because of mismatched activityIdentifiers or bundleID %@ vs %@", (uint8_t *)v62, 0x20u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v63, -1, -1);
        MEMORY[0x1B3EA39E0](v62, -1, -1);
      }
      else
      {

        uint64_t v59 = v57;
      }

      [v57 resetSession];
      return;
    }
LABEL_65:
    swift_once();
    goto LABEL_18;
  }
  int v46 = v182;
  uint64_t v47 = (void *)((uint64_t (*)(uint64_t))v182)(v45);
  unsigned int v48 = objc_msgSend(a1, sel_isEquivalentToActivity_, v47);

  if (!v48) {
    goto LABEL_38;
  }
  uint64_t v49 = (void *)v46();
  id v50 = objc_msgSend(v49, sel_metadata);

  if (v50)
  {
    id v51 = objc_msgSend(v50, sel_imageData);

    if (v51)
    {
      id v50 = (id)static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v53 = v52;

      goto LABEL_25;
    }
    id v50 = 0;
  }
  unint64_t v53 = 0xF000000000000000;
LABEL_25:
  id v67 = objc_msgSend(a1, sel_metadata);
  uint64_t v68 = v67;
  if (v67)
  {
    id v69 = objc_msgSend(v67, sel_imageData);

    if (v69)
    {
      uint64_t v68 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v71 = v70;

      goto LABEL_30;
    }
    uint64_t v68 = 0;
  }
  unint64_t v71 = 0xF000000000000000;
LABEL_30:
  if (v53 >> 60 == 15)
  {
    if (v71 >> 60 == 15) {
      goto LABEL_51;
    }
  }
  else if (v71 >> 60 != 15)
  {
    outlined copy of Data?((uint64_t)v50, v53);
    char v112 = specialized static Data.== infix(_:_:)((uint64_t)v50, v53, (uint64_t)v68, v71);
    outlined consume of Data?((uint64_t)v68, v71);
    outlined consume of Data?((uint64_t)v50, v53);
    outlined consume of Data?((uint64_t)v50, v53);
    if (v112)
    {
LABEL_51:
      if (one-time initialization token for host != -1) {
        swift_once();
      }
      uint64_t v113 = type metadata accessor for Logger();
      __swift_project_value_buffer(v113, (uint64_t)static Log.host);
      v114 = v26;
      id v115 = a1;
      uint64_t v116 = v114;
      id v117 = v115;
      v118 = Logger.logObject.getter();
      os_log_type_t v119 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v118, v119))
      {
        uint64_t v120 = swift_slowAlloc();
        v121 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v120 = 138412546;
        aBlock[0] = (uint64_t)v116;
        v122 = v116;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v121 = v26;

        *(_WORD *)(v120 + 12) = 2112;
        aBlock[0] = (uint64_t)v117;
        id v123 = v117;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v121[1] = v117;

        _os_log_impl(&dword_1B0DF7000, v118, v119, "%@ dropping activity update because of no significant changes %@", (uint8_t *)v120, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v121, -1, -1);
        MEMORY[0x1B3EA39E0](v120, -1, -1);
      }
      else
      {
      }
      return;
    }
    goto LABEL_35;
  }
  outlined consume of Data?((uint64_t)v50, v53);
  outlined consume of Data?((uint64_t)v68, v71);
LABEL_35:
  id v72 = objc_msgSend(a1, sel_metadata);
  if (!v72) {
    goto LABEL_51;
  }
  uint64_t v73 = v72;
  id v74 = objc_msgSend(v72, sel_imageData);

  if (!v74) {
    goto LABEL_51;
  }
  uint64_t v75 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v77 = v76;

  outlined consume of Data._Representation(v75, v77);
  BOOL v15 = v26;
  int v46 = v182;
LABEL_38:
  int v78 = (void *)v46();
  char v79 = specialized static TUConversationActivity.< infix(_:_:)(v78, a1);

  if (v79)
  {
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v80 = type metadata accessor for Logger();
    __swift_project_value_buffer(v80, (uint64_t)static Log.host);
    uint64_t v81 = v15;
    id v82 = a1;
    uint64_t v83 = v81;
    v174 = v82;
    uint64_t v84 = Logger.logObject.getter();
    int v85 = static os_log_type_t.default.getter();
    BOOL v86 = os_log_type_enabled(v84, (os_log_type_t)v85);
    uint64_t v87 = v176;
    if (v86)
    {
      v171 = v85;
      v173 = v84;
      v166 = v7;
      uint64_t v88 = swift_slowAlloc();
      v169 = v14;
      Swift::String v89 = (_DWORD *)v88;
      uint64_t v90 = (void *)swift_slowAlloc();
      v172 = swift_slowAlloc();
      aBlock[0] = v172;
      *Swift::String v89 = 138412802;
      uint64_t v91 = v87;
      id v92 = v174;
      v185 = (uint64_t)v174;
      v167 = v12;
      id v93 = v174;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v90 = v92;
      uint64_t v94 = v89;
      uint64_t v95 = (uint64_t)v169;

      *((_WORD *)v94 + 6) = 2112;
      uint64_t v96 = v182();
      v185 = v96;
      v168 = &v186;
      uint64_t v97 = (uint64_t)v167;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v170 = v90;
      v90[1] = v96;

      *((_WORD *)v94 + 11) = 2080;
      uint64_t v98 = v180;
      uint64_t v99 = *(void (**)(uint64_t, char *, uint64_t))(v180 + 16);
      v99(v95, (char *)v83 + OBJC_IVAR___CPActivitySession_id, v91);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v98 + 56))(v95, 0, 1, v91);
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v95, v97, &demangling cache variable for type metadata for UUID?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v98 + 48))(v97, 1, v91) == 1)
      {
        uint64_t v100 = v91;
        unint64_t v101 = 0xE300000000000000;
        uint64_t v102 = 7104878;
      }
      else
      {
        uint64_t v124 = v179;
        (*(void (**)(char *, uint64_t, uint64_t))(v98 + 32))(v179, v97, v91);
        v99((uint64_t)v166, v124, v91);
        uint64_t v102 = String.init<A>(reflecting:)();
        unint64_t v101 = v125;
        uint64_t v100 = v91;
        (*(void (**)(char *, uint64_t))(v98 + 8))(v124, v91);
      }
      unint64_t v111 = (void *)MEMORY[0x1E4FBC8C8];
      outlined destroy of UUID?(v95, &demangling cache variable for type metadata for UUID?);
      v185 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v102, v101, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_t v126 = v173;
      _os_log_impl(&dword_1B0DF7000, v173, (os_log_type_t)v171, "Updating activity %@ vs %@ on %s", (uint8_t *)v94, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v127 = v170;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v127, -1, -1);
      uint64_t v128 = v172;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v128, -1, -1);
      MEMORY[0x1B3EA39E0](v94, -1, -1);

      uint64_t v87 = v100;
    }
    else
    {

      id v110 = v174;
      unint64_t v111 = (void *)MEMORY[0x1E4FBC8C8];
    }
    uint64_t v129 = v182;
    uint64_t v130 = (void *)v182();
    id v131 = v174;
    id v132 = objc_msgSend(v174, sel_UUID);
    v133 = v179;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v180 + 8))(v133, v87);
    objc_msgSend(v130, sel_setUUID_, isa);

    v135 = (void *)v129();
    id v136 = objc_msgSend(v131, sel_applicationContext);
    uint64_t v137 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v139 = v138;

    Class v140 = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v137, v139);
    objc_msgSend(v135, sel_setApplicationContext_, v140);

    uint64_t v141 = (void *)v129();
    id v142 = objc_msgSend(v131, sel_metadata);
    objc_msgSend(v141, sel_setMetadata_, v142);

    v143 = (void *)v129();
    id v144 = objc_msgSend(v131, sel_timestamp);
    v145 = v177;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    Class v146 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v178 + 8))(v145, v175);
    objc_msgSend(v143, sel_setTimestamp_, v146);

    v147 = (void *)v129();
    id v148 = objc_msgSend(v131, sel_trustedFromHandle);
    objc_msgSend(v147, sel_setTrustedFromHandle_, v148);

    id v149 = objc_msgSend(v131, sel_originator);
    v150 = (void *)v129();
    objc_msgSend(v150, sel_setOriginator_, v149);
    (*(void (**)(void *))((*v111 & *v83) + 0x2D8))(v150);

    v151 = *(void (**)(uint64_t *__return_ptr))((*v111 & *v83) + 0x2A0);
    v151(aBlock);
    v152 = aBlock[0];
    v184 = 0x8000000000000000;
    v185 = aBlock[0];
    LOBYTE(v149) = static ActivitySession.State.== infix(_:_:)((unint64_t *)&v185, &v184);
    v153 = outlined consume of ActivitySession.State(v152);
    if ((v149 & 1) != 0
      || (((void (*)(uint64_t *__return_ptr, unint64_t))v151)(aBlock, v153),
          v154 = aBlock[0],
          v184 = 0x8000000000000008,
          v185 = aBlock[0],
          v155 = static ActivitySession.State.== infix(_:_:)((unint64_t *)&v185, &v184),
          v153 = outlined consume of ActivitySession.State(v154),
          (v155 & 1) != 0))
    {
      v153 = (*(uint64_t (**)(unint64_t))((*v111 & *v83) + 0x380))(v153);
      if (v153)
      {
        v157 = v156;
        uint64_t ObjectType = swift_getObjectType();
        v159 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v157 + 16))(ObjectType, v157);
        swift_unknownObjectRelease();
        v160 = swift_allocObject();
        *(void *)(v160 + 16) = v83;
        aBlock[4] = (uint64_t)partial apply for closure #1 in ActivitySession.updateActivity(_:);
        aBlock[5] = v160;
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
        aBlock[3] = (uint64_t)&block_descriptor_94;
        v161 = _Block_copy(aBlock);
        v162 = v83;
        swift_release();
        objc_msgSend(v159, sel_authorizePiPForActivity_withCompletion_, v162, v161);
        _Block_release(v161);
      }
    }
    if ((*(uint64_t (**)(unint64_t))((*v111 & *v83) + 0x380))(v153))
    {
      v164 = v163;
      v165 = swift_getObjectType();
      (*(void (**)(void *, uint64_t, uint64_t))(v164 + 88))(v83, v165, v164);
      swift_unknownObjectRelease();
    }
  }
  else
  {
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v103 = type metadata accessor for Logger();
    __swift_project_value_buffer(v103, (uint64_t)static Log.host);
    id v104 = a1;
    uint64_t v105 = Logger.logObject.getter();
    os_log_type_t v106 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v105, v106))
    {
      Swift::String v107 = (uint8_t *)swift_slowAlloc();
      Swift::String v108 = (void *)swift_slowAlloc();
      *(_DWORD *)Swift::String v107 = 138412290;
      aBlock[0] = (uint64_t)v104;
      id v109 = v104;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *Swift::String v108 = v104;

      _os_log_impl(&dword_1B0DF7000, v105, v106, "Dropping activity update because it is older than the current activity %@", v107, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v108, -1, -1);
      MEMORY[0x1B3EA39E0](v107, -1, -1);
    }
    else
    {
    }
  }
}

void closure #1 in ActivitySession.updateActivity(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.host);
  id v10 = a3;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412290;
    id v9 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v10;

    _os_log_impl(&dword_1B0DF7000, v5, v6, "[PiP] Authorized pip for %@", v7, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v8, -1, -1);
    MEMORY[0x1B3EA39E0](v7, -1, -1);
  }
  else
  {
  }
}

void thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

void ActivitySession.updateActivityImage(_:)()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (uint64_t *)((char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)((char *)v0 + OBJC_IVAR___CPActivitySession_queue);
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBCBF0], v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  uint64_t v7 = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_5;
  }
  uint64_t v8 = (void *)MEMORY[0x1E4FBC8C8];
  id v9 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2D0);
  id v10 = (void *)((uint64_t (*)(uint64_t))v9)(v7);
  id v11 = objc_msgSend(v10, sel_metadata);

  if (v11)
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v11, sel_setImageData_, isa);

    uint64_t v13 = v11;
    char v14 = (void *)v9();
    objc_msgSend(v14, sel_setMetadata_, v13);
    (*(void (**)(void *))((*v8 & *v0) + 0x2D8))(v14);

    goto LABEL_7;
  }
  if (one-time initialization token for host != -1) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.host);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_1B0DF7000, v13, v16, "No metadata to update", v17, 2u);
    MEMORY[0x1B3EA39E0](v17, -1, -1);
  }
LABEL_7:
}

Swift::Bool __swiftcall ActivitySession.needsAssertions()()
{
  void (**v14)(char *__return_ptr, void *);
  void (*v15)(char *__return_ptr, void *);
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  char v27;
  void v28[2];

  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v2 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2D0);
  uint64_t v3 = (void *)v2();
  unsigned __int8 v4 = objc_msgSend(v3, sel_isScreenSharingActivity);

  if (v4)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Log.default);
    id v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v6, v7)) {
      goto LABEL_23;
    }
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    id v9 = "[Assertion] Does not need assertion because is screen sharing";
LABEL_22:
    _os_log_impl(&dword_1B0DF7000, v6, v7, v9, v8, 2u);
    MEMORY[0x1B3EA39E0](v8, -1, -1);
LABEL_23:

    return 0;
  }
  id v10 = (void *)v2();
  unsigned __int8 v11 = objc_msgSend(v10, sel_isSystemActivity);

  if (v11)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Log.default);
    id v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v6, v7)) {
      goto LABEL_23;
    }
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    id v9 = "[Assertion] Does not need assertion because is system activity";
    goto LABEL_22;
  }
  uint64_t v13 = (*(uint64_t (**)(void))((*v1 & *v0) + 0x3B0))();
  if (!v13)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Log.default);
    id v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v6, v7)) {
      goto LABEL_23;
    }
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    id v9 = "[Assertion] Does not need assertion because no connection";
    goto LABEL_22;
  }
  id v6 = v13;
  char v14 = (void (**)(char *__return_ptr, void *))(v13
                                                           + direct field offset for ActivitySessionHostConnection.__isAppProcess);
  swift_beginAccess();
  uint64_t v15 = *v14;
  os_log_type_t v16 = *(uint64_t *)((char *)&v6[1].isa + direct field offset for XPCHostConnection.bundleIdentifier);
  v28[0] = *((char *)v6 + direct field offset for XPCHostConnection.bundleIdentifier);
  v28[1] = v16;
  swift_retain();
  v15(&v27, v28);
  swift_release();
  if (v27 != 1)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Log.default);
    uint64_t v24 = Logger.logObject.getter();
    char v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      os_log_type_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v26 = 0;
      _os_log_impl(&dword_1B0DF7000, v24, v25, "[Assertion] Does not need assertion because app is a daemon", v26, 2u);
      MEMORY[0x1B3EA39E0](v26, -1, -1);
    }

    goto LABEL_23;
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Log.default);
  uint64_t v18 = Logger.logObject.getter();
  uint64_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    id v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v20 = 0;
    _os_log_impl(&dword_1B0DF7000, v18, v19, "[Assertion] Needs assertion because it is an app", v20, 2u);
    MEMORY[0x1B3EA39E0](v20, -1, -1);
  }

  return 1;
}

Swift::Void __swiftcall ActivitySession.acquireDomainAssertion(bundleID:pid:)(Swift::String bundleID, Swift::Int32 pid)
{
  id v3 = *(id *)&pid;
  object = bundleID._object;
  uint64_t countAndFlagsBits = bundleID._countAndFlagsBits;
  v85[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActivitySession.DomainAssertionWrapper?);
  MEMORY[0x1F4188790](v5 - 8);
  os_log_type_t v7 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = (int *)type metadata accessor for ActivitySession.DomainAssertionWrapper(0);
  uint64_t v8 = *((void *)v80 - 1);
  uint64_t v9 = MEMORY[0x1F4188790](v80);
  unsigned __int8 v11 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v81 = (uint64_t)&v74 - v12;
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  os_log_type_t v16 = (uint64_t *)((char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = *(void **)&v2[OBJC_IVAR___CPActivitySession_queue];
  *os_log_type_t v16 = v17;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v16, *MEMORY[0x1E4FBCBF0], v13);
  id v18 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v14 + 8))(v16, v13);
  if (v17)
  {
    if (one-time initialization token for host == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v19 = type metadata accessor for Logger();
  id v20 = __swift_project_value_buffer(v19, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  id v21 = v2;
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  BOOL v24 = os_log_type_enabled(v22, v23);
  uint64_t v76 = v8;
  unint64_t v77 = v7;
  int v78 = v11;
  unint64_t v79 = (unint64_t)object;
  uint64_t v83 = v20;
  if (v24)
  {
    uint64_t v25 = swift_slowAlloc();
    os_log_type_t v26 = (void *)swift_slowAlloc();
    uint64_t v75 = (void *)swift_slowAlloc();
    v85[0] = v75;
    *(_DWORD *)uint64_t v25 = 136315650;
    swift_bridgeObjectRetain();
    uint64_t v84 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, (uint64_t *)v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v25 + 12) = 1024;
    LODWORD(v84) = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v25 + 18) = 2112;
    uint64_t v84 = (uint64_t)v21;
    uint64_t v27 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v26 = v21;

    _os_log_impl(&dword_1B0DF7000, v22, v23, "[Assertion] Attempting to acquire domain assertion for app with bundleID:%s pid:%d %@", (uint8_t *)v25, 0x1Cu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v26, -1, -1);
    id v28 = v75;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v28, -1, -1);
    MEMORY[0x1B3EA39E0](v25, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  id v29 = (id)(*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & *(void *)v21) + 0x460))(v3);
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    char v33 = (void *)swift_slowAlloc();
    v85[0] = v33;
    *(_DWORD *)uint64_t v32 = 136315138;
    uint64_t v75 = v32 + 4;
    uint64_t v84 = (uint64_t)v29;
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for RBSAssertion);
    uint64_t v34 = v21;
    int v35 = (int)v3;
    id v3 = v29;
    uint64_t v36 = String.init<A>(reflecting:)();
    uint64_t v84 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, (uint64_t *)v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    LODWORD(v3) = v35;
    id v21 = v34;
    _os_log_impl(&dword_1B0DF7000, v30, v31, "[Assertion] Generated assertion: %s", v32, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v33, -1, -1);
    MEMORY[0x1B3EA39E0](v32, -1, -1);
  }
  else
  {
  }
  uint64_t v39 = (uint64_t)v78;
  unint64_t v38 = v79;
  objc_msgSend(v29, sel_addObserver_, v21);
  ActivitySession.invalidateDomainAssertion()();
  v85[0] = 0;
  unsigned int v40 = objc_msgSend(v29, sel_acquireWithError_, v85);
  id v41 = v85[0];
  if (v40)
  {
    uint64_t v42 = &v21[OBJC_IVAR___CPActivitySession_id];
    uint64_t v43 = v81;
    uint64_t v44 = v81 + v80[7];
    uint64_t v45 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v45 - 8) + 16))(v44, v42, v45);
    uint64_t v46 = countAndFlagsBits;
    *(void *)uint64_t v43 = v29;
    *(void *)(v43 + 8) = v46;
    *(void *)(v43 + 16) = v38;
    *(_DWORD *)(v43 + 24) = v3;
    outlined init with copy of ActivitySession.DomainAssertionWrapper(v43, v39, type metadata accessor for ActivitySession.DomainAssertionWrapper);
    swift_bridgeObjectRetain();
    id v47 = v29;
    id v48 = v41;
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v49, v50))
    {
      id v51 = (uint8_t *)swift_slowAlloc();
      unint64_t v52 = (void *)swift_slowAlloc();
      v85[0] = v52;
      *(_DWORD *)id v51 = 136315138;
      uint64_t v53 = ActivitySession.DomainAssertionWrapper.description.getter();
      uint64_t v84 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, (uint64_t *)v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of ActivitySession.DomainAssertionWrapper(v39, type metadata accessor for ActivitySession.DomainAssertionWrapper);
      _os_log_impl(&dword_1B0DF7000, v49, v50, "[Assertion] Successfully acquired domain assertion for app with %s", v51, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v52, -1, -1);
      MEMORY[0x1B3EA39E0](v51, -1, -1);
    }
    else
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper(v39, type metadata accessor for ActivitySession.DomainAssertionWrapper);
    }

    uint64_t v72 = v76;
    uint64_t v71 = (uint64_t)v77;
    uint64_t v73 = v81;
    outlined init with copy of ActivitySession.DomainAssertionWrapper(v81, (uint64_t)v77, type metadata accessor for ActivitySession.DomainAssertionWrapper);
    (*(void (**)(uint64_t, void, uint64_t, int *))(v72 + 56))(v71, 0, 1, v80);
    (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *(void *)v21) + 0x1F8))(v71);

    outlined destroy of ActivitySession.DomainAssertionWrapper(v73, type metadata accessor for ActivitySession.DomainAssertionWrapper);
  }
  else
  {
    LODWORD(v81) = v3;
    id v55 = v85[0];
    id v56 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    swift_bridgeObjectRetain();
    uint64_t v57 = v21;
    id v58 = v56;
    swift_bridgeObjectRetain();
    uint64_t v59 = v57;
    id v60 = v56;
    int v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.error.getter();
    uint64_t v83 = v61;
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = swift_slowAlloc();
      int v78 = (void *)swift_slowAlloc();
      uint64_t v80 = (int *)swift_slowAlloc();
      v85[0] = v80;
      *(_DWORD *)uint64_t v63 = 136315906;
      swift_bridgeObjectRetain();
      uint64_t v84 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, v38, (uint64_t *)v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v63 + 12) = 1024;
      LODWORD(v84) = v81;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v63 + 18) = 2112;
      uint64_t v84 = (uint64_t)v59;
      char v64 = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v65 = v78;
      void *v78 = v21;

      *(_WORD *)(v63 + 28) = 2080;
      uint64_t v84 = (uint64_t)v56;
      id v66 = v56;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v67 = String.init<A>(reflecting:)();
      uint64_t v84 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, (uint64_t *)v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      id v69 = v83;
      _os_log_impl(&dword_1B0DF7000, v83, v62, "[Assertion] Domain assertion request failed for app with bundleID:%s pid:%d %@. Error:%s ", (uint8_t *)v63, 0x26u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v65, -1, -1);
      unint64_t v70 = v80;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v70, -1, -1);
      MEMORY[0x1B3EA39E0](v63, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
    objc_msgSend(v29, sel_removeObserver_, v59);
  }
}

void closure #1 in ActivitySession.invalidateAssertions(useDelay:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x1B3EA3B30](v1);
  if (v2)
  {
    id v3 = (char *)v2;
    uint64_t v4 = OBJC_IVAR___CPActivitySession_invalidateAssertionsWorkItem;
    if (*(void *)(v2 + OBJC_IVAR___CPActivitySession_invalidateAssertionsWorkItem))
    {
      swift_retain();
      dispatch thunk of DispatchWorkItem.cancel()();
      swift_release();
      *(void *)&v3[v4] = 0;
      swift_release();
    }
    ActivitySession.invalidateDomainAssertion()();
  }
}

Swift::Void __swiftcall ActivitySession.invalidateDomainAssertion()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActivitySession.DomainAssertionWrapper?);
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  os_log_type_t v7 = (char *)v26 - v6;
  uint64_t v8 = type metadata accessor for ActivitySession.DomainAssertionWrapper(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v15 = (id *)((char *)v26 - v14);
  os_log_type_t v16 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1F0))(v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for ActivitySession.DomainAssertionWrapper?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)v15, type metadata accessor for ActivitySession.DomainAssertionWrapper);
    if (objc_msgSend(*v15, sel_isValid))
    {
      if (one-time initialization token for host != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)static Log.host);
      outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v15, (uint64_t)v12, type metadata accessor for ActivitySession.DomainAssertionWrapper);
      id v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v18, v19))
      {
        id v20 = (uint8_t *)swift_slowAlloc();
        uint64_t v28 = swift_slowAlloc();
        uint64_t v30 = v28;
        uint64_t v27 = v20;
        *(_DWORD *)id v20 = 136315138;
        v26[1] = v20 + 4;
        uint64_t v21 = ActivitySession.DomainAssertionWrapper.description.getter();
        uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v30);
        os_log_type_t v16 = (void *)MEMORY[0x1E4FBC8C8];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v12, type metadata accessor for ActivitySession.DomainAssertionWrapper);
        os_log_type_t v23 = v27;
        _os_log_impl(&dword_1B0DF7000, v18, v19, "[Assertion] Invalidating domain assertion for app with %s", v27, 0xCu);
        uint64_t v24 = v28;
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v24, -1, -1);
        MEMORY[0x1B3EA39E0](v23, -1, -1);
      }
      else
      {
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v12, type metadata accessor for ActivitySession.DomainAssertionWrapper);
      }

      id v25 = *v15;
      objc_msgSend(*v15, sel_removeObserver_, v1);
      objc_msgSend(v25, sel_invalidate);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5, 1, 1, v8);
      (*(void (**)(char *))((*v16 & *v1) + 0x1F8))(v5);
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v15, type metadata accessor for ActivitySession.DomainAssertionWrapper);
  }
}

id ActivitySession.DomainAssertionWrapper.assertion.getter()
{
  return *v0;
}

uint64_t ActivitySession.DomainAssertionWrapper.bundleID.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ActivitySession.DomainAssertionWrapper.pid.getter()
{
  return *(unsigned int *)(v0 + 24);
}

uint64_t ActivitySession.DomainAssertionWrapper.activitySessionUUID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ActivitySession.DomainAssertionWrapper(0) + 28);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t ActivitySession.DomainAssertionWrapper.description.getter()
{
  _StringGuts.grow(_:)(55);
  v1._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v1._object = (void *)0x80000001B115AE80;
  String.append(_:)(v1);
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void **)(v0 + 16);
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 0x3A64697020;
  v5._object = (void *)0xE500000000000000;
  String.append(_:)(v5);
  uint64_t v10 = *(unsigned int *)(v0 + 24);
  v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._object = (void *)0x80000001B115AEA0;
  v7._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v7);
  type metadata accessor for ActivitySession.DomainAssertionWrapper(0);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  return HIDWORD(v10);
}

uint64_t ActivitySession.DomainAssertionWrapper.init(assertion:bundleID:pid:activitySessionUUID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = a3;
  *(_DWORD *)(a6 + 24) = a4;
  uint64_t v7 = a6 + *(int *)(type metadata accessor for ActivitySession.DomainAssertionWrapper(0) + 28);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32);
  return v9(v7, a5, v8);
}

uint64_t closure #1 in ActivitySession.assertionWillInvalidate(_:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActivitySession.DomainAssertionWrapper?);
  MEMORY[0x1F4188790](v2 - 8);
  Swift::String v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ActivitySession.DomainAssertionWrapper(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v12 = (char *)&v26 - v11;
  uint64_t v13 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x1F0))(v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1) {
    return outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for ActivitySession.DomainAssertionWrapper?);
  }
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v4, (uint64_t)v12, type metadata accessor for ActivitySession.DomainAssertionWrapper);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.host);
  outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v12, (uint64_t)v9, type metadata accessor for ActivitySession.DomainAssertionWrapper);
  os_log_type_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    id v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    uint64_t v29 = v19;
    *(_DWORD *)id v18 = 136315138;
    uint64_t v20 = ActivitySession.DomainAssertionWrapper.description.getter();
    uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v9, type metadata accessor for ActivitySession.DomainAssertionWrapper);
    _os_log_impl(&dword_1B0DF7000, v16, v17, "[Assertion] DomainAssertionObserver assertionWillInvalidate for app with %s", v18, 0xCu);
    swift_arrayDestroy();
    uint64_t v22 = v19;
    uint64_t v13 = (void *)MEMORY[0x1E4FBC8C8];
    MEMORY[0x1B3EA39E0](v22, -1, -1);
    MEMORY[0x1B3EA39E0](v18, -1, -1);
  }
  else
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v9, type metadata accessor for ActivitySession.DomainAssertionWrapper);
  }

  (*(void (**)(uint64_t *__return_ptr))((*v13 & *a1) + 0x2A0))(&v29);
  unint64_t v23 = v29;
  unint64_t v27 = 0x8000000000000008;
  uint64_t v28 = v29;
  char v24 = static ActivitySession.State.== infix(_:_:)((unint64_t *)&v28, &v27);
  outlined consume of ActivitySession.State(v23);
  if (v24)
  {
    id v25 = a1;
    specialized tryLog<A>(_:_:function:line:)((uint64_t)"[Assertion] Leaving ActivitySession", 35, 2, 0xD00000000000001BLL, 0x80000001B115B480, 1149, v25);
  }
  return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v12, type metadata accessor for ActivitySession.DomainAssertionWrapper);
}

void ActivitySession.assertion(_:didInvalidateWithError:)(uint64_t a1, void *a2)
{
}

Swift::Void __swiftcall ActivitySession.resetSession()()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v1);
  uint64_t v5 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v62 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  unint64_t v68 = (char *)&v62 - v12;
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  uint64_t v14 = *(NSObject **)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  os_log_type_t v16 = (void (**)(char *, char *, uint64_t))((char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  os_log_type_t v17 = *(void (**)(char *, char *, uint64_t))&v0[OBJC_IVAR___CPActivitySession_queue];
  *os_log_type_t v16 = v17;
  Class isa = (void (*)(void))v14[13].isa;
  LODWORD(v74) = *MEMORY[0x1E4FBCBF0];
  uint64_t v75 = v14 + 13;
  uint64_t v73 = (void (*)(void *, void, uint64_t))isa;
  isa(v16);
  uint64_t v71 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  uint64_t v20 = (void (*)(void, void))v14[1].isa;
  uint64_t v19 = v14 + 1;
  uint64_t v72 = v20;
  v20(v16, v13);
  if (v17)
  {
    id v66 = v11;
    char v64 = v5;
    if (one-time initialization token for host == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v21 = type metadata accessor for Logger();
  uint64_t v22 = __swift_project_value_buffer(v21, (uint64_t)static Log.host);
  unint64_t v23 = v0;
  uint64_t v69 = v22;
  char v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  BOOL v26 = os_log_type_enabled(v24, v25);
  uint64_t v67 = v2;
  id v65 = v7;
  unint64_t v70 = v19;
  if (v26)
  {
    unint64_t v27 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    uint64_t v63 = v13;
    *(_DWORD *)unint64_t v27 = 136315138;
    v76[0] = v28;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, v76);
    uint64_t v13 = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v24, v25, "Resetting session %s", v27, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v28, -1, -1);
    MEMORY[0x1B3EA39E0](v27, -1, -1);
  }
  else
  {
  }
  os_log_type_t v31 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v32 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *(void *)v23) + 0x3B8))(0);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))((*v31 & *(void *)v23) + 0x2A0))(v76, v32);
  if (((unint64_t)v76[0] >> 62) <= 1)
  {
    outlined consume of ActivitySession.State(v76[0]);
    return;
  }
  if (v76[0] != 0x8000000000000010)
  {
    char v33 = *(uint64_t (**)(void))((*v31 & *(void *)v23) + 0x2D0);
    uint64_t v34 = (void *)v33();
    unsigned int v35 = objc_msgSend(v34, sel_isScreenSharingActivity);

    if (v35 && ((*(uint64_t (**)(void))((*v31 & *(void *)v23) + 0x2E8))() & 1) != 0)
    {
      uint64_t v36 = v23;
      unint64_t v37 = Logger.logObject.getter();
      int v38 = static os_log_type_t.default.getter();
      uint64_t v75 = v37;
      if (os_log_type_enabled(v37, (os_log_type_t)v38))
      {
        LODWORD(v73) = v38;
        uint64_t v39 = (uint8_t *)swift_slowAlloc();
        uint64_t v72 = (void (*)(void, void))swift_slowAlloc();
        v76[0] = (uint64_t)v72;
        uint64_t v74 = v39;
        *(_DWORD *)uint64_t v39 = 136315138;
        uint64_t v40 = v67;
        uint64_t v41 = (uint64_t)v68;
        uint64_t v71 = *(void (**)(char *, char *, uint64_t))(v67 + 16);
        v71(v68, &v36[OBJC_IVAR___CPActivitySession_id], v1);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v41, 0, 1, v1);
        uint64_t v42 = (uint64_t)v66;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v41, (uint64_t)v66, &demangling cache variable for type metadata for UUID?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v42, 1, v1) == 1)
        {
          unint64_t v43 = 0xE300000000000000;
          uint64_t v44 = 7104878;
        }
        else
        {
          uint64_t v49 = v65;
          (*(void (**)(char *, uint64_t, uint64_t))(v40 + 32))(v65, v42, v1);
          v71(v64, v49, v1);
          uint64_t v44 = String.init<A>(reflecting:)();
          unint64_t v43 = v50;
          id v51 = v49;
          uint64_t v41 = (uint64_t)v68;
          (*(void (**)(char *, uint64_t))(v40 + 8))(v51, v1);
        }
        unint64_t v52 = v74;
        outlined destroy of UUID?(v41, &demangling cache variable for type metadata for UUID?);
        uint64_t v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v43, v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        uint64_t v53 = v75;
        _os_log_impl(&dword_1B0DF7000, v75, (os_log_type_t)v73, "Setting state after reset to invalidated for screen sharing activity with id %s", v52, 0xCu);
        unint64_t v54 = v72;
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v54, -1, -1);
        MEMORY[0x1B3EA39E0](v52, -1, -1);
      }
      else
      {
      }
      uint64_t v55 = swift_allocObject();
      *(void *)(v55 + 16) = 0;
      *(void *)(v55 + 24) = 0;
      v76[0] = v55;
      (*(void (**)(uint64_t *))((*v31 & *(void *)v36) + 0x2A8))(v76);
    }
    else
    {
      (*(void (**)(uint64_t))((*v31 & *(void *)v23) + 0x270))(1);
      v76[0] = 0x8000000000000000;
      (*(void (**)(uint64_t *))((*v31 & *(void *)v23) + 0x2A8))(v76);
      uint64_t v45 = OBJC_IVAR___CPActivitySession_isLocalParticipantActive;
      int v46 = v23[OBJC_IVAR___CPActivitySession_isLocalParticipantActive];
      v23[OBJC_IVAR___CPActivitySession_isLocalParticipantActive] = 0;
      id v47 = v71;
      *os_log_type_t v16 = v71;
      v73(v16, v74, v13);
      id v48 = v47;
      LOBYTE(v47) = _dispatchPreconditionTest(_:)();
      v72(v16, v13);
      if ((v47 & 1) == 0)
      {
        __break(1u);
        goto LABEL_28;
      }
      if (v46 != v23[v45]) {
        ActivitySession.sessionChanged()();
      }
    }
    id v56 = (uint64_t *)&v23[OBJC_IVAR___CPActivitySession_persistentSceneIdentifiers];
    swift_beginAccess();
    uint64_t v57 = *v56;
    *id v56 = MEMORY[0x1E4FBC860];
    ActivitySession.persistentSceneIdentifiers.didset(v57);
    uint64_t v58 = swift_bridgeObjectRelease();
    uint64_t v59 = (void *)((uint64_t (*)(uint64_t))v33)(v58);
    LODWORD(v57) = objc_msgSend(v59, sel_isStaticActivity);

    if (!v57) {
      return;
    }
    id v60 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))((*v31 & *(void *)v23)
                                                                                       + 0x230))(v76);
    if (!__OFADD__(*v61, 1))
    {
      ++*v61;
      v60(v76, 0);
      return;
    }
LABEL_28:
    __break(1u);
  }
}

uint64_t ActivitySession.sendResource(atURL:to:metadata:completion:)(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(void), char *a6)
{
  uint64_t v7 = v6;
  uint64_t v54 = a3;
  unint64_t v55 = a4;
  uint64_t v52 = a2;
  uint64_t v53 = a1;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  id v56 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v57 = *(void (***)(char *, void (*)(void)))(v13 - 8);
  uint64_t v58 = (void (*)(void))v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_group_t v16 = dispatch_group_create();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = MEMORY[0x1E4FBC870];
  id v18 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v6) + 0x2D0))();
  id v19 = objc_msgSend(v18, sel_bundleIdentifier);

  if (v19)
  {
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v50 = v10;
    uint64_t v51 = v11;
    uint64_t v21 = a5;
    uint64_t v22 = v20;
    unint64_t v23 = a6;
    uint64_t v25 = v24;

    BOOL v26 = v16;
    unint64_t v27 = v7;
    swift_bridgeObjectRetain();
    swift_retain();
    specialized Sequence.forEach(_:)(v52, v26, v27, v22, v25, v17);

    swift_bridgeObjectRelease_n();
    swift_release();
    uint64_t v28 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v29 = (void *)swift_allocObject();
    v29[2] = v28;
    v29[3] = v21;
    os_log_type_t v31 = v53;
    uint64_t v30 = v54;
    v29[4] = v23;
    v29[5] = v31;
    v29[6] = v17;
    v29[7] = v30;
    unint64_t v32 = v55;
    v29[8] = v55;
    aBlock[4] = partial apply for closure #2 in ActivitySession.sendResource(atURL:to:metadata:completion:);
    aBlock[5] = v29;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_105;
    char v33 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    id v34 = v31;
    outlined copy of Data._Representation(v30, v32);
    static DispatchQoS.unspecified.getter();
    uint64_t v59 = MEMORY[0x1E4FBC860];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    unsigned int v35 = v56;
    uint64_t v36 = v50;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_group.notify(qos:flags:queue:execute:)();

    _Block_release(v33);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v35, v36);
    v57[1](v15, v58);
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v57 = (void (**)(char *, void (*)(void)))v16;
    uint64_t v58 = a5;
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static Log.default);
    id v38 = v7;
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = swift_slowAlloc();
      id v56 = a6;
      uint64_t v42 = (uint8_t *)v41;
      unint64_t v43 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 138412290;
      aBlock[0] = v38;
      id v44 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v43 = v7;

      _os_log_impl(&dword_1B0DF7000, v39, v40, "Failed to send resource on %@ because of invalid bundleID", v42, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v43, -1, -1);
      MEMORY[0x1B3EA39E0](v42, -1, -1);
    }
    else
    {
    }
    uint64_t v45 = v57;
    lazy protocol witness table accessor for type ActivitySessionErrors and conformance ActivitySessionErrors();
    int v46 = (void *)swift_allocError();
    *id v47 = 2;
    v58();
  }
  return swift_release();
}

void closure #1 in closure #1 in ActivitySession.sendResource(atURL:to:metadata:completion:)(void *a1, NSObject *a2, void *a3)
{
  if (a1)
  {
    swift_beginAccess();
    specialized Set._Variant.insert(_:)(&v13, a1);
    swift_endAccess();
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Log.default);
    id v7 = a3;
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v11 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 138412546;
      id v12 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v11 = v7;

      *(_WORD *)(v10 + 12) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B0DF7000, v8, v9, "sendResource: %@ failed to resolve participant for identifier %llu to send resource", (uint8_t *)v10, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v11, -1, -1);
      MEMORY[0x1B3EA39E0](v10, -1, -1);
    }
    else
    {
    }
  }
  dispatch_group_leave(a2);
}

void closure #2 in ActivitySession.sendResource(atURL:to:metadata:completion:)(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = a1 + 16;
  swift_beginAccess();
  uint64_t v14 = (char *)MEMORY[0x1B3EA3B30](v13);
  if (v14)
  {
    uint64_t v15 = v14;
    if ((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *(void *)v14) + 0x380))())
    {
      uint64_t v17 = v16;
      uint64_t ObjectType = swift_getObjectType();
      swift_beginAccess();
      uint64_t v18 = *(void *)(a5 + 16);
      uint64_t v21 = &v15[OBJC_IVAR___CPActivitySession_id];
      uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, void (*)(void), uint64_t, uint64_t, uint64_t))(v17 + 136);
      swift_bridgeObjectRetain();
      v22(a4, v18, a6, a7, v21, a2, a3, ObjectType, v17);

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
  }
  lazy protocol witness table accessor for type ActivitySessionErrors and conformance ActivitySessionErrors();
  id v19 = (void *)swift_allocError();
  *uint64_t v20 = 2;
  a2();
}

void ActivitySession.receivedResource(atURL:withMetadata:fromParticipantIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  id v7 = objc_allocWithZone(MEMORY[0x1E4FADC60]);
  URL._bridgeToObjectiveC()(v8);
  uint64_t v10 = v9;
  id v15 = objc_msgSend(v7, sel_initWithURL_withExtensionType_, v9, 0);

  uint64_t v11 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v5) + 0x3B0))();
  if (v11)
  {
    id v12 = (void *)v11;
    id v13 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v11
                                                                + direct field offset for XPCHostConnection.connection), sel_remoteObjectProxy));
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActivitySessionXPCClient);
    if (swift_dynamicCast())
    {

      Class isa = Data._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v16, sel_receivedResourceAtURL_withMetadata_fromParticipantWithIdentifier_, v15, isa, a4);

      swift_unknownObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
  }
}

uint64_t ActivitySession.requestEndpoint(with:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  id v12 = (uint64_t *)((char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v13 = *(void **)((char *)v4 + OBJC_IVAR___CPActivitySession_queue);
  void *v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E4FBCBF0], v9);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if (v13)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x380))(result);
    if (result)
    {
      uint64_t v17 = v16;
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 144))(v4, a1, a2, a3, a4, ObjectType, v17);
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ActivitySession.description.getter()
{
  uint64_t v18 = 0;
  unint64_t v19 = 0xE000000000000000;
  _StringGuts.grow(_:)(74);
  v1._object = (void *)0x80000001B115AEC0;
  v1._uint64_t countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v1);
  unint64_t v17 = (unint64_t)v0;
  _print_unlocked<A, B>(_:_:)();
  v2._uint64_t countAndFlagsBits = 0x203A6469202CLL;
  v2._object = (void *)0xE600000000000000;
  String.append(_:)(v2);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 0x3A6574617473202CLL;
  v4._object = (void *)0xE900000000000020;
  String.append(_:)(v4);
  uint64_t v5 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(unint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2A0))(&v17);
  unint64_t v6 = v17;
  if (v17 >> 62)
  {
    if (v17 >> 62 == 1)
    {
      unint64_t v7 = 0xE900000000000066;
      uint64_t v8 = 0x664F6465646E6148;
    }
    else
    {
      unint64_t v9 = 0xE600000000000000;
      uint64_t v10 = 0x64656E696F4ALL;
      if (v17 != 0x8000000000000008)
      {
        uint64_t v10 = 1952867660;
        unint64_t v9 = 0xE400000000000000;
      }
      if (v17 == 0x8000000000000000) {
        uint64_t v8 = 0x676E6974696157;
      }
      else {
        uint64_t v8 = v10;
      }
      if (v17 == 0x8000000000000000) {
        unint64_t v7 = 0xE700000000000000;
      }
      else {
        unint64_t v7 = v9;
      }
    }
  }
  else
  {
    unint64_t v7 = 0xEB00000000646574;
    uint64_t v8 = 0x6164696C61766E49;
  }
  unint64_t v11 = v7;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  outlined consume of ActivitySession.State(v6);
  v12._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  v12._object = (void *)0x80000001B115AEE0;
  String.append(_:)(v12);
  unint64_t v13 = *(void *)((*(uint64_t (**)(void))((*v5 & *v0) + 0x368))() + 16);
  swift_bridgeObjectRelease();
  unint64_t v17 = v13;
  v14._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = 41;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  return v18;
}

uint64_t default argument 1 of AttachmentLedgerClient.sendCreateServerTopic(request:attempt:)()
{
  return 0;
}

uint64_t default argument 1 of PresenceConfiguration.init(presenceIdentifier:isPersonal:clientIdentifier:)()
{
  return 0;
}

uint64_t default argument 0 of ActivityListPresenceContext.init(activityIDs:)()
{
  return MEMORY[0x1E4FBC870];
}

uint64_t default argument 0 of static NSUserDefaults.classProtectedStorage(suiteName:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t default argument 2 of AnyPresentDevice.init(id:handleValue:isCurrentDevice:timestamp:context:)()
{
  return 0;
}

uint64_t default argument 2 of AnyPresentDevice<A>.init(id:handleValue:isCurrentDevice:timestamp:)()
{
  return 0;
}

uint64_t specialized static Set.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  uint64_t v45 = (char *)&v34 - v10;
  uint64_t result = MEMORY[0x1F4188790](v9);
  unint64_t v13 = (char *)&v34 - v12;
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v14 = 0;
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v36 = a1;
  uint64_t v37 = a1 + 56;
  uint64_t v16 = 1 << *(unsigned char *)(a1 + 32);
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v15;
  int64_t v38 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v42 = v5 + 32;
  uint64_t v43 = a2 + 56;
  uint64_t v44 = v5 + 16;
  unint64_t v19 = (void (**)(char *, uint64_t))(v5 + 8);
  id v34 = v13;
  uint64_t v35 = v5;
  if (!v18) {
    goto LABEL_9;
  }
LABEL_7:
  uint64_t v40 = (v18 - 1) & v18;
  int64_t v41 = v14;
  for (unint64_t i = __clz(__rbit64(v18)) | (v14 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v23 << 6))
  {
    uint64_t v25 = *(void *)(v5 + 72);
    BOOL v26 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    v26(v13, *(void *)(a1 + 48) + v25 * i, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v45, v13, v4);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v27 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v28 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v29 = v27 & ~v28;
    if (((*(void *)(v43 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
    {
      (*v19)(v45, v4);
      return 0;
    }
    uint64_t v39 = (unint64_t)v19 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v30 = a2;
    uint64_t v31 = ~v28;
    while (1)
    {
      v26(v8, *(void *)(v30 + 48) + v29 * v25, v4);
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
      char v33 = *v19;
      (*v19)(v8, v4);
      if (v32) {
        break;
      }
      unint64_t v29 = (v29 + 1) & v31;
      if (((*(void *)(v43 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
      {
        v33(v45, v4);
        return 0;
      }
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v33)(v45, v4);
    a2 = v30;
    uint64_t v5 = v35;
    a1 = v36;
    unint64_t v13 = v34;
    unint64_t v18 = v40;
    int64_t v14 = v41;
    if (v40) {
      goto LABEL_7;
    }
LABEL_9:
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v21 >= v38) {
      return 1;
    }
    unint64_t v22 = *(void *)(v37 + 8 * v21);
    int64_t v23 = v14 + 1;
    if (!v22)
    {
      int64_t v23 = v14 + 2;
      if (v14 + 2 >= v38) {
        return 1;
      }
      unint64_t v22 = *(void *)(v37 + 8 * v23);
      if (!v22)
      {
        int64_t v23 = v14 + 3;
        if (v14 + 3 >= v38) {
          return 1;
        }
        unint64_t v22 = *(void *)(v37 + 8 * v23);
        if (!v22)
        {
          int64_t v23 = v14 + 4;
          if (v14 + 4 >= v38) {
            return 1;
          }
          unint64_t v22 = *(void *)(v37 + 8 * v23);
          if (!v22) {
            break;
          }
        }
      }
    }
LABEL_24:
    uint64_t v40 = (v22 - 1) & v22;
    int64_t v41 = v23;
  }
  uint64_t v24 = v14 + 5;
  if (v14 + 5 >= v38) {
    return 1;
  }
  unint64_t v22 = *(void *)(v37 + 8 * v24);
  if (v22)
  {
    int64_t v23 = v14 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v23 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v23 >= v38) {
      return 1;
    }
    unint64_t v22 = *(void *)(v37 + 8 * v23);
    ++v24;
    if (v22) {
      goto LABEL_24;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::Int v19;
  id v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  char v25;
  uint64_t v26;
  id v27;
  char v28;
  uint64_t v30;
  int64_t v31;
  int64_t v32;
  uint64_t vars8;

  uint64_t v4 = a2 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0) {
      uint64_t v5 = a1;
    }
    else {
      uint64_t v5 = a1 & 0xFFFFFFFFFFFFFF8;
    }
    if (v4)
    {
      if (a2 < 0) {
        uint64_t v6 = a2;
      }
      else {
        uint64_t v6 = a2 & 0xFFFFFFFFFFFFFF8;
      }
      return MEMORY[0x1F4184BB8](v6, v5);
    }
    specialized _NativeSet.isEqual(to:)(v5, a2);
    return v8 & 1;
  }
  if (v4)
  {
    if (a2 < 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = a2 & 0xFFFFFFFFFFFFFF8;
    }
    specialized _NativeSet.isEqual(to:)(v7, a1);
    return v8 & 1;
  }
  if (a1 == a2)
  {
LABEL_49:
    uint64_t v8 = 1;
    return v8 & 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16))
  {
LABEL_51:
    uint64_t v8 = 0;
    return v8 & 1;
  }
  uint64_t v30 = a1 + 56;
  uint64_t v9 = 1 << *(unsigned char *)(a1 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(a1 + 56);
  uint64_t v6 = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  uint64_t v12 = 0;
  uint64_t v31 = (unint64_t)(v9 + 63) >> 6;
  unint64_t v13 = a2 + 56;
  while (1)
  {
    if (v11)
    {
      int64_t v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      uint64_t v15 = v14 | (v12 << 6);
      goto LABEL_43;
    }
    uint64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_54;
    }
    if (v16 >= v31) {
      goto LABEL_49;
    }
    uint64_t v17 = *(void *)(v30 + 8 * v16);
    ++v12;
    if (!v17)
    {
      uint64_t v12 = v16 + 1;
      if (v16 + 1 >= v31) {
        goto LABEL_49;
      }
      uint64_t v17 = *(void *)(v30 + 8 * v12);
      if (!v17)
      {
        uint64_t v12 = v16 + 2;
        if (v16 + 2 >= v31) {
          goto LABEL_49;
        }
        uint64_t v17 = *(void *)(v30 + 8 * v12);
        if (!v17)
        {
          uint64_t v12 = v16 + 3;
          if (v16 + 3 >= v31) {
            goto LABEL_49;
          }
          uint64_t v17 = *(void *)(v30 + 8 * v12);
          if (!v17) {
            break;
          }
        }
      }
    }
LABEL_42:
    unint64_t v11 = (v17 - 1) & v17;
    uint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_43:
    unint64_t v19 = *(void *)(a2 + 40);
    uint64_t v20 = *(id *)(*(void *)(a1 + 48) + 8 * v15);
    int64_t v21 = NSObject._rawHashValue(seed:)(v19);
    unint64_t v22 = -1 << *(unsigned char *)(a2 + 32);
    int64_t v23 = v21 & ~v22;
    if (((*(void *)(v13 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
      goto LABEL_50;
    }
    char v32 = v12;
    uint64_t v24 = *(id *)(*(void *)(a2 + 48) + 8 * v23);
    uint64_t v25 = static NSObject.== infix(_:_:)();

    if ((v25 & 1) == 0)
    {
      BOOL v26 = ~v22;
      while (1)
      {
        int64_t v23 = (v23 + 1) & v26;
        if (((*(void *)(v13 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
          break;
        }
        uint64_t v27 = *(id *)(*(void *)(a2 + 48) + 8 * v23);
        uint64_t v28 = static NSObject.== infix(_:_:)();

        if (v28) {
          goto LABEL_24;
        }
      }
LABEL_50:

      goto LABEL_51;
    }
LABEL_24:

    uint64_t v12 = v32;
  }
  unint64_t v18 = v16 + 4;
  if (v18 >= v31) {
    goto LABEL_49;
  }
  uint64_t v17 = *(void *)(v30 + 8 * v18);
  if (v17)
  {
    uint64_t v12 = v18;
    goto LABEL_42;
  }
  while (1)
  {
    uint64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v31) {
      goto LABEL_49;
    }
    uint64_t v17 = *(void *)(v30 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_42;
    }
  }
LABEL_54:
  __break(1u);
  return MEMORY[0x1F4184BB8](v6, v5);
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::Int v19;
  id v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  char v25;
  uint64_t v26;
  id v27;
  char v28;
  uint64_t v30;
  int64_t v31;
  int64_t v32;
  uint64_t vars8;

  uint64_t v4 = a2 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0) {
      uint64_t v5 = a1;
    }
    else {
      uint64_t v5 = a1 & 0xFFFFFFFFFFFFFF8;
    }
    if (v4)
    {
      if (a2 < 0) {
        uint64_t v6 = a2;
      }
      else {
        uint64_t v6 = a2 & 0xFFFFFFFFFFFFFF8;
      }
      return MEMORY[0x1F4184BB8](v6, v5);
    }
    specialized _NativeSet.isEqual(to:)(v5, a2);
    return v8 & 1;
  }
  if (v4)
  {
    if (a2 < 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = a2 & 0xFFFFFFFFFFFFFF8;
    }
    specialized _NativeSet.isEqual(to:)(v7, a1);
    return v8 & 1;
  }
  if (a1 == a2)
  {
LABEL_49:
    uint64_t v8 = 1;
    return v8 & 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16))
  {
LABEL_51:
    uint64_t v8 = 0;
    return v8 & 1;
  }
  uint64_t v30 = a1 + 56;
  uint64_t v9 = 1 << *(unsigned char *)(a1 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(a1 + 56);
  uint64_t v6 = type metadata accessor for AddressableMember();
  uint64_t v12 = 0;
  uint64_t v31 = (unint64_t)(v9 + 63) >> 6;
  unint64_t v13 = a2 + 56;
  while (1)
  {
    if (v11)
    {
      int64_t v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      uint64_t v15 = v14 | (v12 << 6);
      goto LABEL_43;
    }
    uint64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_54;
    }
    if (v16 >= v31) {
      goto LABEL_49;
    }
    uint64_t v17 = *(void *)(v30 + 8 * v16);
    ++v12;
    if (!v17)
    {
      uint64_t v12 = v16 + 1;
      if (v16 + 1 >= v31) {
        goto LABEL_49;
      }
      uint64_t v17 = *(void *)(v30 + 8 * v12);
      if (!v17)
      {
        uint64_t v12 = v16 + 2;
        if (v16 + 2 >= v31) {
          goto LABEL_49;
        }
        uint64_t v17 = *(void *)(v30 + 8 * v12);
        if (!v17)
        {
          uint64_t v12 = v16 + 3;
          if (v16 + 3 >= v31) {
            goto LABEL_49;
          }
          uint64_t v17 = *(void *)(v30 + 8 * v12);
          if (!v17) {
            break;
          }
        }
      }
    }
LABEL_42:
    unint64_t v11 = (v17 - 1) & v17;
    uint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_43:
    unint64_t v19 = *(void *)(a2 + 40);
    uint64_t v20 = *(id *)(*(void *)(a1 + 48) + 8 * v15);
    int64_t v21 = NSObject._rawHashValue(seed:)(v19);
    unint64_t v22 = -1 << *(unsigned char *)(a2 + 32);
    int64_t v23 = v21 & ~v22;
    if (((*(void *)(v13 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
      goto LABEL_50;
    }
    char v32 = v12;
    uint64_t v24 = *(id *)(*(void *)(a2 + 48) + 8 * v23);
    uint64_t v25 = static NSObject.== infix(_:_:)();

    if ((v25 & 1) == 0)
    {
      BOOL v26 = ~v22;
      while (1)
      {
        int64_t v23 = (v23 + 1) & v26;
        if (((*(void *)(v13 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
          break;
        }
        uint64_t v27 = *(id *)(*(void *)(a2 + 48) + 8 * v23);
        uint64_t v28 = static NSObject.== infix(_:_:)();

        if (v28) {
          goto LABEL_24;
        }
      }
LABEL_50:

      goto LABEL_51;
    }
LABEL_24:

    uint64_t v12 = v32;
  }
  unint64_t v18 = v16 + 4;
  if (v18 >= v31) {
    goto LABEL_49;
  }
  uint64_t v17 = *(void *)(v30 + 8 * v18);
  if (v17)
  {
    uint64_t v12 = v18;
    goto LABEL_42;
  }
  while (1)
  {
    uint64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v31) {
      goto LABEL_49;
    }
    uint64_t v17 = *(void *)(v30 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_42;
    }
  }
LABEL_54:
  __break(1u);
  return MEMORY[0x1F4184BB8](v6, v5);
}

uint64_t specialized static Set.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 56;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(result + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v10 = a2 + 56;
  do
  {
LABEL_7:
    if (v8)
    {
      unint64_t v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v12 = v11 | (v4 << 6);
      goto LABEL_25;
    }
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_34:
      __break(1u);
      return result;
    }
    if (v13 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v13);
    ++v4;
    if (v14) {
      goto LABEL_24;
    }
    int64_t v4 = v13 + 1;
    if (v13 + 1 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    if (v14) {
      goto LABEL_24;
    }
    int64_t v4 = v13 + 2;
    if (v13 + 2 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    if (v14) {
      goto LABEL_24;
    }
    int64_t v4 = v13 + 3;
    if (v13 + 3 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    if (v14) {
      goto LABEL_24;
    }
    int64_t v15 = v13 + 4;
    if (v15 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        int64_t v4 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          goto LABEL_34;
        }
        if (v4 >= v9) {
          return 1;
        }
        unint64_t v14 = *(void *)(v5 + 8 * v4);
        ++v15;
        if (v14) {
          goto LABEL_24;
        }
      }
    }
    int64_t v4 = v15;
LABEL_24:
    unint64_t v8 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_25:
    uint64_t v16 = *(void *)(*(void *)(v3 + 48) + 8 * v12);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v17 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v18 = result & ~v17;
    if (((*(void *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
      return 0;
    }
    uint64_t v19 = *(void *)(a2 + 48);
  }
  while (*(void *)(v19 + 8 * v18) == v16);
  uint64_t v20 = ~v17;
  while (1)
  {
    unint64_t v18 = (v18 + 1) & v20;
    if (((*(void *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
      return 0;
    }
    if (*(void *)(v19 + 8 * v18) == v16) {
      goto LABEL_7;
    }
  }
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v113 = result + 64;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 64);
  int64_t v114 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    while (1)
    {
      if (!v7)
      {
        int64_t v10 = v4 + 1;
        if (__OFADD__(v4, 1))
        {
          __break(1u);
        }
        else
        {
          if (v10 >= v114) {
            return 1;
          }
          unint64_t v11 = *(void *)(v113 + 8 * v10);
          ++v4;
          if (v11) {
            goto LABEL_21;
          }
          int64_t v4 = v10 + 1;
          if (v10 + 1 >= v114) {
            return 1;
          }
          unint64_t v11 = *(void *)(v113 + 8 * v4);
          if (v11) {
            goto LABEL_21;
          }
          int64_t v4 = v10 + 2;
          if (v10 + 2 >= v114) {
            return 1;
          }
          unint64_t v11 = *(void *)(v113 + 8 * v4);
          if (v11) {
            goto LABEL_21;
          }
          int64_t v12 = v10 + 3;
          if (v12 >= v114) {
            return 1;
          }
          unint64_t v11 = *(void *)(v113 + 8 * v12);
          if (v11)
          {
            int64_t v4 = v12;
LABEL_21:
            unint64_t v7 = (v11 - 1) & v11;
            unint64_t v9 = __clz(__rbit64(v11)) + (v4 << 6);
            goto LABEL_22;
          }
          while (1)
          {
            int64_t v4 = v12 + 1;
            if (__OFADD__(v12, 1)) {
              break;
            }
            if (v4 >= v114) {
              return 1;
            }
            unint64_t v11 = *(void *)(v113 + 8 * v4);
            ++v12;
            if (v11) {
              goto LABEL_21;
            }
          }
        }
        __break(1u);
        return result;
      }
      unint64_t v8 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v9 = v8 | (v4 << 6);
LABEL_22:
      int64_t v13 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v9);
      uint64_t v14 = *v13;
      uint64_t v15 = v13[1];
      uint64_t v16 = *(void **)(*(void *)(v3 + 56) + 8 * v9);
      swift_bridgeObjectRetain();
      swift_retain();
      unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v15);
      char v19 = v18;
      swift_bridgeObjectRelease();
      if ((v19 & 1) == 0) {
        goto LABEL_121;
      }
      uint64_t v20 = *(void **)(*(void *)(a2 + 56) + 8 * v17);
      BOOL v21 = v20[2] == v16[2] && v20[3] == v16[3];
      if (!v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_121;
      }
      int64_t v115 = v4;
      unint64_t v22 = *(uint64_t (**)(uint64_t))(*v20 + 112);
      uint64_t v23 = swift_retain();
      uint64_t v24 = v22(v23);
      uint64_t v25 = (*(uint64_t (**)(void))(*v16 + 112))();
      uint64_t v26 = v25;
      if (v24)
      {
        if (!v25)
        {
          swift_release();
          swift_release();
          goto LABEL_121;
        }
        uint64_t v27 = *(void **)(v24 + OBJC_IVAR____TtC14CopresenceCore9Histogram_buckets);
        uint64_t v28 = *(void **)(v25 + OBJC_IVAR____TtC14CopresenceCore9Histogram_buckets);
        uint64_t v29 = v27[2];
        if (v29 != v28[2]) {
          goto LABEL_119;
        }
        if (v29) {
          BOOL v30 = v27 == v28;
        }
        else {
          BOOL v30 = 1;
        }
        if (!v30)
        {
          if (v27[4] != v28[4]) {
            goto LABEL_119;
          }
          int v46 = v27 + 5;
          id v47 = v28 + 5;
          uint64_t v48 = v29 - 1;
          while (v48)
          {
            uint64_t v50 = *v46++;
            uint64_t v49 = v50;
            uint64_t v51 = *v47++;
            --v48;
            if (v49 != v51) {
              goto LABEL_119;
            }
          }
        }
        uint64_t v31 = *(uint64_t (**)(uint64_t))(*(void *)v24 + 128);
        uint64_t v32 = swift_retain();
        uint64_t v33 = v31(v32);
        uint64_t v34 = (*(uint64_t (**)(void))(*(void *)v26 + 128))();
        uint64_t v35 = *(void *)(v33 + 16);
        if (v35 != *(void *)(v34 + 16))
        {
          swift_release();
          swift_release();
          swift_release_n();
          goto LABEL_127;
        }
        if (v35 && v33 != v34)
        {
          if (*(void *)(v33 + 32) != *(void *)(v34 + 32))
          {
LABEL_116:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_117:
            swift_release();
            swift_release();
            swift_release_n();
            goto LABEL_121;
          }
          uint64_t v36 = 0;
          uint64_t v37 = v35 - 1;
          while (v37 != v36)
          {
            uint64_t v38 = *(void *)(v33 + 40 + 8 * v36);
            uint64_t v39 = *(void *)(v34 + 8 * v36++ + 40);
            if (v38 != v39) {
              goto LABEL_116;
            }
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v40 = swift_bridgeObjectRelease();
        uint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 184))(v40);
        char v43 = v42;
        uint64_t v44 = (*(uint64_t (**)(void))(*(void *)v26 + 184))();
        if (v43)
        {
          if ((v45 & 1) == 0) {
            goto LABEL_117;
          }
        }
        else if ((v45 & 1) != 0 || v41 != v44)
        {
          goto LABEL_117;
        }
        uint64_t v52 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 208))(v44);
        char v54 = v53;
        uint64_t v55 = (*(uint64_t (**)(void))(*(void *)v26 + 208))();
        if (v54)
        {
          if ((v56 & 1) == 0) {
            goto LABEL_117;
          }
        }
        else if ((v56 & 1) != 0 || v52 != v55)
        {
          goto LABEL_117;
        }
        uint64_t v57 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 232))(v55);
        uint64_t v58 = (*(uint64_t (**)(void))(*(void *)v26 + 232))();
        swift_release_n();
        swift_release();
        if (v57 != v58) {
          goto LABEL_120;
        }
      }
      else if (v25)
      {
        swift_release();
        goto LABEL_120;
      }
      uint64_t v59 = v20[5];
      uint64_t v60 = v16[5];
      if (v59)
      {
        if (!v60
          || !specialized static Array<A>.== infix(_:_:)(*(void **)(v59 + OBJC_IVAR____TtC14CopresenceCore9Histogram_buckets), *(void **)(v60 + OBJC_IVAR____TtC14CopresenceCore9Histogram_buckets)))
        {
          goto LABEL_120;
        }
        int v61 = *(uint64_t (**)(uint64_t))(*(void *)v59 + 128);
        swift_retain();
        uint64_t v62 = swift_retain();
        uint64_t v63 = (void *)v61(v62);
        char v64 = (void *)(*(uint64_t (**)(void))(*(void *)v60 + 128))();
        BOOL v65 = specialized static Array<A>.== infix(_:_:)(v63, v64);
        swift_bridgeObjectRelease();
        uint64_t v66 = swift_bridgeObjectRelease();
        if (!v65) {
          goto LABEL_119;
        }
        uint64_t v67 = (*(uint64_t (**)(uint64_t))(*(void *)v59 + 184))(v66);
        char v69 = v68;
        uint64_t v70 = (*(uint64_t (**)(void))(*(void *)v60 + 184))();
        if (v69)
        {
          if ((v71 & 1) == 0) {
            goto LABEL_119;
          }
        }
        else if ((v71 & 1) != 0 || v67 != v70)
        {
          goto LABEL_119;
        }
        uint64_t v72 = (*(uint64_t (**)(uint64_t))(*(void *)v59 + 208))(v70);
        char v74 = v73;
        uint64_t v75 = (*(uint64_t (**)(void))(*(void *)v60 + 208))();
        if (v74)
        {
          if ((v76 & 1) == 0) {
            goto LABEL_119;
          }
        }
        else if ((v76 & 1) != 0 || v72 != v75)
        {
          goto LABEL_119;
        }
        uint64_t v77 = (*(uint64_t (**)(uint64_t))(*(void *)v59 + 232))(v75);
        uint64_t v78 = (*(uint64_t (**)(void))(*(void *)v60 + 232))();
        swift_release();
        swift_release();
        if (v77 != v78) {
          goto LABEL_120;
        }
      }
      else if (v60)
      {
        goto LABEL_120;
      }
      uint64_t v79 = v20[6];
      uint64_t v80 = v16[6];
      if (v79) {
        break;
      }
      swift_release();
      swift_release();
      uint64_t result = 0;
      int64_t v4 = v115;
      if (v80) {
        return result;
      }
    }
    if (!v80) {
      goto LABEL_120;
    }
    uint64_t v81 = *(void **)(v79 + OBJC_IVAR____TtC14CopresenceCore9Histogram_buckets);
    id v82 = *(void **)(v80 + OBJC_IVAR____TtC14CopresenceCore9Histogram_buckets);
    uint64_t v83 = v81[2];
    if (v83 != v82[2]) {
      goto LABEL_120;
    }
    if (v83) {
      BOOL v84 = v81 == v82;
    }
    else {
      BOOL v84 = 1;
    }
    if (!v84)
    {
      if (v81[4] != v82[4]) {
        goto LABEL_120;
      }
      uint64_t v100 = v81 + 5;
      unint64_t v101 = v82 + 5;
      uint64_t v102 = v83 - 1;
      while (v102)
      {
        uint64_t v104 = *v100++;
        uint64_t v103 = v104;
        uint64_t v105 = *v101++;
        --v102;
        if (v103 != v105) {
          goto LABEL_120;
        }
      }
    }
    int v85 = *(uint64_t (**)(uint64_t))(*(void *)v79 + 128);
    swift_retain();
    uint64_t v86 = swift_retain();
    uint64_t v87 = v85(v86);
    uint64_t v88 = (*(uint64_t (**)(void))(*(void *)v80 + 128))();
    uint64_t v89 = *(void *)(v87 + 16);
    if (v89 != *(void *)(v88 + 16)) {
      break;
    }
    if (!v89 || v87 == v88) {
      goto LABEL_97;
    }
    if (*(void *)(v87 + 32) != *(void *)(v88 + 32))
    {
LABEL_118:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_119:
      swift_release();
      swift_release();
LABEL_120:
      swift_release();
LABEL_121:
      swift_release();
      return 0;
    }
    uint64_t v90 = 0;
    uint64_t v91 = v89 - 1;
    while (v91 != v90)
    {
      uint64_t v92 = *(void *)(v87 + 40 + 8 * v90);
      uint64_t v93 = *(void *)(v88 + 8 * v90++ + 40);
      if (v92 != v93) {
        goto LABEL_118;
      }
    }
LABEL_97:
    swift_bridgeObjectRelease();
    uint64_t v94 = swift_bridgeObjectRelease();
    uint64_t v95 = (*(uint64_t (**)(uint64_t))(*(void *)v79 + 184))(v94);
    char v97 = v96;
    uint64_t v98 = (*(uint64_t (**)(void))(*(void *)v80 + 184))();
    if (v97)
    {
      if ((v99 & 1) == 0) {
        goto LABEL_119;
      }
    }
    else if ((v99 & 1) != 0 || v95 != v98)
    {
      goto LABEL_119;
    }
    uint64_t v106 = (*(uint64_t (**)(uint64_t))(*(void *)v79 + 208))(v98);
    char v108 = v107;
    uint64_t v109 = (*(uint64_t (**)(void))(*(void *)v80 + 208))();
    if (v108)
    {
      if ((v110 & 1) == 0) {
        goto LABEL_119;
      }
    }
    else if ((v110 & 1) != 0 || v106 != v109)
    {
      goto LABEL_119;
    }
    uint64_t v111 = (*(uint64_t (**)(uint64_t))(*(void *)v79 + 232))(v109);
    uint64_t v112 = (*(uint64_t (**)(void))(*(void *)v80 + 232))();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    uint64_t result = 0;
    int64_t v4 = v115;
    if (v111 != v112) {
      return result;
    }
  }
  swift_release();
  swift_release();
  swift_release();
LABEL_127:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

unint64_t specialized static Dictionary<>.== infix(_:_:)(unint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  unint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  unint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    uint64_t v15 = 8 * v11;
    uint64_t v16 = *(void *)(*(void *)(v3 + 56) + v15);
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(*(void *)(v3 + 48) + v15));
    if ((v17 & 1) == 0 || *(void *)(*(void *)(a2 + 56) + 8 * result) != v16) {
      return 0;
    }
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  __s1[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  v205 = (uint64_t *)((char *)&v192 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v206 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_EncryptionID?, AttachmentLedger_EncryptionID?));
  MEMORY[0x1F4188790](v206);
  unint64_t v8 = (char *)&v192 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  int64_t v12 = (uint64_t *)((char *)&v192 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v213 = (uint64_t)&v192 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v212 = (uint64_t)&v192 - v15;
  uint64_t v211 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  uint64_t v16 = *(void *)(v211 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v211);
  char v19 = (uint64_t *)((char *)&v192 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v17);
  BOOL v21 = (uint64_t *)((char *)&v192 - v20);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UInt64, value: AttachmentLedger_AttachmentEncryption)?);
  uint64_t v23 = MEMORY[0x1F4188790](v22 - 8);
  uint64_t v25 = (uint64_t *)((char *)&v192 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v23);
  v209 = (uint64_t *)((char *)&v192 - v26);
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  v202 = v12;
  uint64_t v207 = v4;
  v208 = v8;
  int64_t v204 = 0;
  uint64_t v27 = *(void *)(a1 + 64);
  uint64_t v196 = a1 + 64;
  uint64_t v28 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v29 = -1;
  if (v28 < 64) {
    uint64_t v29 = ~(-1 << v28);
  }
  unint64_t v30 = v29 & v27;
  v203 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  int64_t v198 = (unint64_t)(v28 + 63) >> 6;
  int64_t v195 = v198 - 1;
  uint64_t v197 = a2;
  uint64_t v199 = a1;
  v200 = v25;
  uint64_t v201 = v16;
  if (!v30) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v210 = (v30 - 1) & v30;
  unint64_t v31 = __clz(__rbit64(v30)) | (v204 << 6);
  uint64_t v32 = v207;
  uint64_t v33 = (uint64_t)v208;
LABEL_7:
  uint64_t v34 = *(void *)(a1 + 56);
  *uint64_t v25 = *(void *)(*(void *)(a1 + 48) + 8 * v31);
  uint64_t v35 = v34 + *(void *)(v16 + 72) * v31;
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UInt64, value: AttachmentLedger_AttachmentEncryption));
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v35, (uint64_t)v25 + *(int *)(v36 + 48), type metadata accessor for AttachmentLedger_AttachmentEncryption);
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v25, 0, 1, v36);
  while (1)
  {
    uint64_t v41 = (uint64_t)v25;
    char v42 = v209;
    outlined init with take of (key: UInt64, value: AttachmentLedger_AttachmentEncryption)?(v41, (uint64_t)v209);
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UInt64, value: AttachmentLedger_AttachmentEncryption));
    uint64_t v44 = 1;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v43 - 8) + 48))(v42, 1, v43) == 1) {
      return v44;
    }
    uint64_t v45 = *v42;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v42 + *(int *)(v43 + 48), (uint64_t)v21, type metadata accessor for AttachmentLedger_AttachmentEncryption);
    unint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)(v45);
    if ((v47 & 1) == 0) {
      goto LABEL_272;
    }
    outlined init with copy of ActivitySession.DomainAssertionWrapper(*(void *)(a2 + 56) + *(void *)(v16 + 72) * v46, (uint64_t)v19, type metadata accessor for AttachmentLedger_AttachmentEncryption);
    uint64_t v48 = v211;
    uint64_t v49 = v212;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v19 + *(int *)(v211 + 28), v212, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    uint64_t v50 = v213;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21 + *(int *)(v48 + 28), v213, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    uint64_t v51 = v33 + *(int *)(v206 + 48);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v49, v33, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v50, v51, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    uint64_t v52 = *v203;
    if ((*v203)(v33, 1, v32) != 1) {
      break;
    }
    if (v52(v51, 1, v32) != 1)
    {
      v190 = &demangling cache variable for type metadata for (AttachmentLedger_EncryptionID?, AttachmentLedger_EncryptionID?);
      goto LABEL_270;
    }
    outlined destroy of UUID?(v33, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    outlined destroy of UUID?(v213, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    outlined destroy of UUID?(v212, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
LABEL_147:
    uint64_t v125 = *v19;
    unint64_t v126 = v19[1];
    uint64_t v127 = *v21;
    unint64_t v128 = v21[1];
    uint64_t v129 = 0;
    switch(v126 >> 62)
    {
      case 1uLL:
        LODWORD(v129) = HIDWORD(v125) - v125;
        if (__OFSUB__(HIDWORD(v125), v125)) {
          goto LABEL_276;
        }
        uint64_t v129 = (int)v129;
LABEL_152:
        unint64_t v132 = v128 >> 62;
        switch(v128 >> 62)
        {
          case 1uLL:
            LODWORD(v133) = HIDWORD(v127) - v127;
            if (__OFSUB__(HIDWORD(v127), v127)) {
              goto LABEL_279;
            }
            uint64_t v133 = (int)v133;
LABEL_159:
            if (v129 != v133) {
              goto LABEL_271;
            }
            if (v129 < 1) {
              goto LABEL_261;
            }
            break;
          case 2uLL:
            uint64_t v135 = *(void *)(v127 + 16);
            uint64_t v134 = *(void *)(v127 + 24);
            BOOL v63 = __OFSUB__(v134, v135);
            uint64_t v133 = v134 - v135;
            if (!v63) {
              goto LABEL_159;
            }
            goto LABEL_278;
          case 3uLL:
            if (v129) {
              goto LABEL_271;
            }
            goto LABEL_261;
          default:
            uint64_t v133 = BYTE6(v128);
            goto LABEL_159;
        }
        break;
      case 2uLL:
        uint64_t v131 = *(void *)(v125 + 16);
        uint64_t v130 = *(void *)(v125 + 24);
        BOOL v63 = __OFSUB__(v130, v131);
        uint64_t v129 = v130 - v131;
        if (!v63) {
          goto LABEL_152;
        }
        goto LABEL_277;
      case 3uLL:
        goto LABEL_152;
      default:
        uint64_t v129 = BYTE6(v126);
        goto LABEL_152;
    }
    switch(v126 >> 62)
    {
      case 1uLL:
        if ((int)v125 > v125 >> 32) {
          goto LABEL_284;
        }
        outlined copy of Data._Representation(*v19, v19[1]);
        uint64_t v141 = __DataStorage._bytes.getter();
        if (v141)
        {
          uint64_t v142 = v141;
          uint64_t v143 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v125, v143)) {
            goto LABEL_286;
          }
          v194 = (const void *)(v142 + (int)v125 - v143);
        }
        else
        {
          v194 = 0;
        }
        a2 = v197;
        a1 = v199;
        __DataStorage._length.getter();
        if (v132)
        {
          if (v132 == 1)
          {
            if (v127 >> 32 < (int)v127) {
              goto LABEL_296;
            }
            swift_retain();
            v158 = (char *)__DataStorage._bytes.getter();
            if (v158)
            {
              uint64_t v159 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v127, v159)) {
                goto LABEL_305;
              }
              v158 += (int)v127 - v159;
            }
            a1 = v199;
            uint64_t v160 = __DataStorage._length.getter();
            if (v160 >= (v127 >> 32) - (int)v127) {
              size_t v161 = (v127 >> 32) - (int)v127;
            }
            else {
              size_t v161 = v160;
            }
            if (!v194) {
              goto LABEL_327;
            }
            a2 = v197;
            if (!v158) {
              goto LABEL_328;
            }
            int v162 = memcmp(v194, v158, v161);
            outlined consume of Data._Representation(v127, v128);
            outlined consume of Data._Representation(v125, v126);
            if (v162) {
              goto LABEL_271;
            }
          }
          else
          {
            uint64_t v183 = *(void *)(v127 + 16);
            uint64_t v184 = *(void *)(v127 + 24);
            swift_retain();
            swift_retain();
            v185 = (char *)__DataStorage._bytes.getter();
            if (v185)
            {
              uint64_t v186 = __DataStorage._offset.getter();
              if (__OFSUB__(v183, v186)) {
                goto LABEL_304;
              }
              v185 += v183 - v186;
            }
            if (__OFSUB__(v184, v183)) {
              goto LABEL_297;
            }
            uint64_t v187 = __DataStorage._length.getter();
            if (v187 >= v184 - v183) {
              size_t v188 = v184 - v183;
            }
            else {
              size_t v188 = v187;
            }
            a2 = v197;
            if (!v194) {
              goto LABEL_335;
            }
            a1 = v199;
            if (!v185) {
              goto LABEL_336;
            }
            int v189 = memcmp(v194, v185, v188);
            swift_release();
            swift_release();
            outlined consume of Data._Representation(v125, v126);
            if (v189) {
              goto LABEL_271;
            }
          }
        }
        else
        {
          __s1[0] = v127;
          LOWORD(__s1[1]) = v128;
          BYTE2(__s1[1]) = BYTE2(v128);
          BYTE3(__s1[1]) = BYTE3(v128);
          BYTE4(__s1[1]) = BYTE4(v128);
          BYTE5(__s1[1]) = BYTE5(v128);
          if (!v194) {
            goto LABEL_334;
          }
          int v182 = memcmp(v194, __s1, BYTE6(v128));
          outlined consume of Data._Representation(v125, v126);
          if (v182) {
            goto LABEL_271;
          }
        }
LABEL_261:
        if (v19[2] != v21[2]) {
          goto LABEL_271;
        }
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
          goto LABEL_271;
        }
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v19, type metadata accessor for AttachmentLedger_AttachmentEncryption);
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v21, type metadata accessor for AttachmentLedger_AttachmentEncryption);
        uint64_t v25 = v200;
        uint64_t v16 = v201;
        unint64_t v30 = v210;
        if (v210) {
          goto LABEL_6;
        }
LABEL_8:
        int64_t v37 = v204 + 1;
        if (__OFADD__(v204, 1))
        {
          __break(1u);
LABEL_276:
          __break(1u);
LABEL_277:
          __break(1u);
LABEL_278:
          __break(1u);
LABEL_279:
          __break(1u);
LABEL_280:
          __break(1u);
LABEL_281:
          __break(1u);
LABEL_282:
          __break(1u);
LABEL_283:
          __break(1u);
LABEL_284:
          __break(1u);
LABEL_285:
          __break(1u);
LABEL_286:
          __break(1u);
LABEL_287:
          __break(1u);
LABEL_288:
          __break(1u);
LABEL_289:
          __break(1u);
LABEL_290:
          __break(1u);
LABEL_291:
          __break(1u);
LABEL_292:
          __break(1u);
LABEL_293:
          __break(1u);
LABEL_294:
          __break(1u);
LABEL_295:
          __break(1u);
LABEL_296:
          __break(1u);
LABEL_297:
          __break(1u);
LABEL_298:
          __break(1u);
LABEL_299:
          __break(1u);
LABEL_300:
          __break(1u);
LABEL_301:
          __break(1u);
LABEL_302:
          __break(1u);
LABEL_303:
          __break(1u);
LABEL_304:
          __break(1u);
LABEL_305:
          __break(1u);
LABEL_306:
          __break(1u);
LABEL_307:
          __break(1u);
LABEL_308:
          __break(1u);
LABEL_309:
          __break(1u);
LABEL_310:
          __break(1u);
LABEL_311:
          __break(1u);
LABEL_312:
          __break(1u);
LABEL_313:
          __break(1u);
LABEL_314:
          __break(1u);
LABEL_315:
          __break(1u);
LABEL_316:
          __break(1u);
LABEL_317:
          __break(1u);
LABEL_318:
          __break(1u);
LABEL_319:
          __break(1u);
LABEL_320:
          __break(1u);
LABEL_321:
          __break(1u);
LABEL_322:
          __break(1u);
        }
        uint64_t v32 = v207;
        uint64_t v33 = (uint64_t)v208;
        if (v37 >= v198) {
          goto LABEL_28;
        }
        unint64_t v38 = *(void *)(v196 + 8 * v37);
        if (v38) {
          goto LABEL_11;
        }
        int64_t v39 = v204 + 2;
        ++v204;
        if (v37 + 1 >= v198) {
          goto LABEL_28;
        }
        unint64_t v38 = *(void *)(v196 + 8 * v39);
        if (v38) {
          goto LABEL_14;
        }
        int64_t v204 = v37 + 1;
        if (v37 + 2 >= v198) {
          goto LABEL_28;
        }
        unint64_t v38 = *(void *)(v196 + 8 * (v37 + 2));
        if (v38)
        {
          v37 += 2;
          goto LABEL_11;
        }
        int64_t v204 = v37 + 2;
        if (v37 + 3 < v198)
        {
          unint64_t v38 = *(void *)(v196 + 8 * (v37 + 3));
          if (v38)
          {
            v37 += 3;
            goto LABEL_11;
          }
          int64_t v39 = v37 + 4;
          int64_t v204 = v37 + 3;
          if (v37 + 4 < v198)
          {
            unint64_t v38 = *(void *)(v196 + 8 * v39);
            if (v38)
            {
LABEL_14:
              int64_t v37 = v39;
LABEL_11:
              uint64_t v210 = (v38 - 1) & v38;
              unint64_t v31 = __clz(__rbit64(v38)) + (v37 << 6);
              int64_t v204 = v37;
              goto LABEL_7;
            }
            while (1)
            {
              int64_t v37 = v39 + 1;
              if (__OFADD__(v39, 1)) {
                goto LABEL_322;
              }
              if (v37 >= v198) {
                break;
              }
              unint64_t v38 = *(void *)(v196 + 8 * v37);
              ++v39;
              if (v38) {
                goto LABEL_11;
              }
            }
            int64_t v204 = v195;
          }
        }
LABEL_28:
        uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UInt64, value: AttachmentLedger_AttachmentEncryption));
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v25, 1, 1, v40);
        uint64_t v210 = 0;
        break;
      case 2uLL:
        uint64_t v144 = *(void *)(v125 + 16);
        swift_retain();
        swift_retain();
        uint64_t v145 = __DataStorage._bytes.getter();
        if (v145)
        {
          uint64_t v146 = v145;
          uint64_t v147 = __DataStorage._offset.getter();
          if (__OFSUB__(v144, v147)) {
            goto LABEL_285;
          }
          v194 = (const void *)(v146 + v144 - v147);
        }
        else
        {
          v194 = 0;
        }
        a1 = v199;
        __DataStorage._length.getter();
        a2 = v197;
        if (v132)
        {
          if (v132 == 1)
          {
            if (v127 >> 32 < (int)v127) {
              goto LABEL_290;
            }
            swift_retain();
            v153 = (char *)__DataStorage._bytes.getter();
            if (v153)
            {
              uint64_t v154 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v127, v154)) {
                goto LABEL_303;
              }
              v153 += (int)v127 - v154;
            }
            a1 = v199;
            uint64_t v155 = __DataStorage._length.getter();
            if (v155 >= (v127 >> 32) - (int)v127) {
              size_t v156 = (v127 >> 32) - (int)v127;
            }
            else {
              size_t v156 = v155;
            }
            if (!v194) {
              goto LABEL_325;
            }
            a2 = v197;
            if (!v153) {
              goto LABEL_326;
            }
            int v157 = memcmp(v194, v153, v156);
            outlined consume of Data._Representation(v127, v128);
            swift_release();
            swift_release();
            if (v157) {
              goto LABEL_271;
            }
          }
          else
          {
            uint64_t v175 = *(void *)(v127 + 16);
            uint64_t v176 = *(void *)(v127 + 24);
            swift_retain();
            swift_retain();
            v177 = (char *)__DataStorage._bytes.getter();
            if (v177)
            {
              uint64_t v178 = __DataStorage._offset.getter();
              if (__OFSUB__(v175, v178)) {
                goto LABEL_302;
              }
              v177 += v175 - v178;
            }
            if (__OFSUB__(v176, v175)) {
              goto LABEL_295;
            }
            uint64_t v179 = __DataStorage._length.getter();
            if (v179 >= v176 - v175) {
              size_t v180 = v176 - v175;
            }
            else {
              size_t v180 = v179;
            }
            a2 = v197;
            if (!v194) {
              goto LABEL_332;
            }
            a1 = v199;
            if (!v177) {
              goto LABEL_333;
            }
            int v181 = memcmp(v194, v177, v180);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            if (v181) {
              goto LABEL_271;
            }
          }
        }
        else
        {
          __s1[0] = v127;
          LOWORD(__s1[1]) = v128;
          BYTE2(__s1[1]) = BYTE2(v128);
          BYTE3(__s1[1]) = BYTE3(v128);
          BYTE4(__s1[1]) = BYTE4(v128);
          BYTE5(__s1[1]) = BYTE5(v128);
          if (!v194) {
            goto LABEL_331;
          }
          int v174 = memcmp(v194, __s1, BYTE6(v128));
          swift_release();
          swift_release();
          if (v174) {
            goto LABEL_271;
          }
        }
        goto LABEL_261;
      case 3uLL:
        memset(__s1, 0, 14);
        if (!v132) {
          goto LABEL_188;
        }
        if (v132 == 1)
        {
          uint64_t v136 = (v127 >> 32) - (int)v127;
          if (v127 >> 32 < (int)v127) {
            goto LABEL_289;
          }
          swift_retain();
          uint64_t v148 = __DataStorage._bytes.getter();
          if (!v148) {
            goto LABEL_324;
          }
          uint64_t v138 = v148;
          uint64_t v149 = __DataStorage._offset.getter();
          uint64_t v140 = (int)v127 - v149;
          if (__OFSUB__((int)v127, v149)) {
            goto LABEL_294;
          }
LABEL_183:
          uint64_t v150 = __DataStorage._length.getter();
          if (v150 >= v136) {
            size_t v151 = v136;
          }
          else {
            size_t v151 = v150;
          }
          int v152 = memcmp(__s1, (const void *)(v138 + v140), v151);
          outlined consume of Data._Representation(v127, v128);
          a1 = v199;
          if (v152) {
            goto LABEL_271;
          }
        }
        else
        {
          uint64_t v169 = *(void *)(v127 + 16);
          uint64_t v170 = *(void *)(v127 + 24);
          swift_retain();
          swift_retain();
          v165 = (char *)__DataStorage._bytes.getter();
          if (v165)
          {
            uint64_t v171 = __DataStorage._offset.getter();
            if (__OFSUB__(v169, v171)) {
              goto LABEL_301;
            }
            v165 += v169 - v171;
          }
          int64_t v167 = v170 - v169;
          if (__OFSUB__(v170, v169)) {
            goto LABEL_292;
          }
          uint64_t v168 = __DataStorage._length.getter();
          if (!v165) {
            goto LABEL_330;
          }
LABEL_229:
          if (v168 >= v167) {
            size_t v172 = v167;
          }
          else {
            size_t v172 = v168;
          }
          int v173 = memcmp(__s1, v165, v172);
          swift_release();
          swift_release();
          a1 = v199;
          if (v173) {
            goto LABEL_271;
          }
        }
        goto LABEL_261;
      default:
        __s1[0] = *v19;
        LOWORD(__s1[1]) = v126;
        BYTE2(__s1[1]) = BYTE2(v126);
        BYTE3(__s1[1]) = BYTE3(v126);
        BYTE4(__s1[1]) = BYTE4(v126);
        BYTE5(__s1[1]) = BYTE5(v126);
        if (!v132)
        {
LABEL_188:
          uint64_t __s2 = v127;
          __int16 v215 = v128;
          char v216 = BYTE2(v128);
          char v217 = BYTE3(v128);
          char v218 = BYTE4(v128);
          char v219 = BYTE5(v128);
          if (memcmp(__s1, &__s2, BYTE6(v128))) {
            goto LABEL_271;
          }
          goto LABEL_261;
        }
        if (v132 == 1)
        {
          uint64_t v136 = (v127 >> 32) - (int)v127;
          if (v127 >> 32 < (int)v127) {
            goto LABEL_288;
          }
          swift_retain();
          uint64_t v137 = __DataStorage._bytes.getter();
          if (!v137)
          {
            __DataStorage._length.getter();
            __break(1u);
LABEL_324:
            __DataStorage._length.getter();
            __break(1u);
LABEL_325:
            __break(1u);
LABEL_326:
            __break(1u);
LABEL_327:
            __break(1u);
LABEL_328:
            __break(1u);
LABEL_329:
            __break(1u);
LABEL_330:
            __break(1u);
LABEL_331:
            __break(1u);
LABEL_332:
            __break(1u);
LABEL_333:
            __break(1u);
LABEL_334:
            __break(1u);
LABEL_335:
            __break(1u);
LABEL_336:
            __break(1u);
LABEL_337:
            __DataStorage._length.getter();
            __break(1u);
LABEL_338:
            __break(1u);
LABEL_339:
            __break(1u);
LABEL_340:
            __DataStorage._length.getter();
            __break(1u);
LABEL_341:
            __break(1u);
LABEL_342:
            __break(1u);
LABEL_343:
            __break(1u);
LABEL_344:
            __break(1u);
LABEL_345:
            __break(1u);
LABEL_346:
            __break(1u);
LABEL_347:
            __break(1u);
LABEL_348:
            __break(1u);
LABEL_349:
            __break(1u);
LABEL_350:
            __break(1u);
            JUMPOUT(0x1B0E1CB50);
          }
          uint64_t v138 = v137;
          uint64_t v139 = __DataStorage._offset.getter();
          uint64_t v140 = (int)v127 - v139;
          if (__OFSUB__((int)v127, v139)) {
            goto LABEL_293;
          }
          goto LABEL_183;
        }
        uint64_t v163 = *(void *)(v127 + 16);
        uint64_t v164 = *(void *)(v127 + 24);
        swift_retain();
        swift_retain();
        v165 = (char *)__DataStorage._bytes.getter();
        if (v165)
        {
          uint64_t v166 = __DataStorage._offset.getter();
          if (__OFSUB__(v163, v166)) {
            goto LABEL_300;
          }
          v165 += v163 - v166;
        }
        int64_t v167 = v164 - v163;
        if (__OFSUB__(v164, v163)) {
          goto LABEL_291;
        }
        uint64_t v168 = __DataStorage._length.getter();
        if (!v165) {
          goto LABEL_329;
        }
        goto LABEL_229;
    }
  }
  char v53 = v202;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v33, (uint64_t)v202, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  if (v52(v51, 1, v32) != 1)
  {
    char v54 = v205;
    outlined init with take of ActivitySession.DomainAssertionWrapper(v51, (uint64_t)v205, type metadata accessor for AttachmentLedger_EncryptionID);
    uint64_t v55 = v53;
    uint64_t v56 = *v53;
    unint64_t v57 = v55[1];
    uint64_t v58 = *v54;
    unint64_t v59 = v54[1];
    uint64_t v60 = 0;
    switch(v57 >> 62)
    {
      case 1uLL:
        LODWORD(v60) = HIDWORD(v56) - v56;
        if (__OFSUB__(HIDWORD(v56), v56)) {
          goto LABEL_280;
        }
        uint64_t v60 = (int)v60;
LABEL_40:
        unint64_t v64 = v59 >> 62;
        switch(v59 >> 62)
        {
          case 1uLL:
            LODWORD(v65) = HIDWORD(v58) - v58;
            if (__OFSUB__(HIDWORD(v58), v58)) {
              goto LABEL_282;
            }
            uint64_t v65 = (int)v65;
LABEL_45:
            if (v60 != v65) {
              goto LABEL_266;
            }
            if (v60 < 1) {
              goto LABEL_146;
            }
            break;
          case 2uLL:
            uint64_t v67 = *(void *)(v58 + 16);
            uint64_t v66 = *(void *)(v58 + 24);
            BOOL v63 = __OFSUB__(v66, v67);
            uint64_t v65 = v66 - v67;
            if (!v63) {
              goto LABEL_45;
            }
            goto LABEL_283;
          case 3uLL:
            if (v60) {
              goto LABEL_266;
            }
            goto LABEL_146;
          default:
            uint64_t v65 = BYTE6(v59);
            goto LABEL_45;
        }
        break;
      case 2uLL:
        uint64_t v62 = *(void *)(v56 + 16);
        uint64_t v61 = *(void *)(v56 + 24);
        BOOL v63 = __OFSUB__(v61, v62);
        uint64_t v60 = v61 - v62;
        if (!v63) {
          goto LABEL_40;
        }
        goto LABEL_281;
      case 3uLL:
        goto LABEL_40;
      default:
        uint64_t v60 = BYTE6(v57);
        goto LABEL_40;
    }
    switch(v57 >> 62)
    {
      case 1uLL:
        if ((int)v56 > v56 >> 32) {
          goto LABEL_287;
        }
        outlined copy of Data._Representation(v56, v57);
        uint64_t v73 = __DataStorage._bytes.getter();
        if (v73)
        {
          uint64_t v74 = v73;
          uint64_t v75 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v56, v75)) {
            goto LABEL_299;
          }
          v194 = (const void *)(v74 + (int)v56 - v75);
        }
        else
        {
          v194 = 0;
        }
        a2 = v197;
        a1 = v199;
        __DataStorage._length.getter();
        if (v64)
        {
          if (v64 == 1)
          {
            if (v58 >> 32 < (int)v58) {
              goto LABEL_314;
            }
            swift_retain();
            uint64_t v90 = (char *)__DataStorage._bytes.getter();
            if (v90)
            {
              uint64_t v91 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v58, v91)) {
                goto LABEL_321;
              }
              v90 += (int)v58 - v91;
            }
            a1 = v199;
            uint64_t v92 = __DataStorage._length.getter();
            if (v92 >= (v58 >> 32) - (int)v58) {
              size_t v93 = (v58 >> 32) - (int)v58;
            }
            else {
              size_t v93 = v92;
            }
            if (!v194) {
              goto LABEL_341;
            }
            a2 = v197;
            if (!v90) {
              goto LABEL_342;
            }
            int v94 = memcmp(v194, v90, v93);
            outlined consume of Data._Representation(v58, v59);
            outlined consume of Data._Representation(v56, v57);
            if (v94) {
              goto LABEL_266;
            }
          }
          else
          {
            uint64_t v115 = *(void *)(v58 + 16);
            uint64_t v116 = *(void *)(v58 + 24);
            swift_retain();
            swift_retain();
            id v117 = (char *)__DataStorage._bytes.getter();
            if (v117)
            {
              uint64_t v118 = __DataStorage._offset.getter();
              if (__OFSUB__(v115, v118)) {
                goto LABEL_320;
              }
              v117 += v115 - v118;
            }
            if (__OFSUB__(v116, v115)) {
              goto LABEL_315;
            }
            uint64_t v119 = __DataStorage._length.getter();
            if (v119 >= v116 - v115) {
              size_t v120 = v116 - v115;
            }
            else {
              size_t v120 = v119;
            }
            a2 = v197;
            if (!v194) {
              goto LABEL_349;
            }
            a1 = v199;
            if (!v117) {
              goto LABEL_350;
            }
            int v121 = memcmp(v194, v117, v120);
            swift_release();
            swift_release();
            outlined consume of Data._Representation(v56, v57);
            if (v121)
            {
LABEL_266:
              outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v205, type metadata accessor for AttachmentLedger_EncryptionID);
              v190 = &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?;
              uint64_t v33 = (uint64_t)v208;
              char v53 = v202;
              goto LABEL_269;
            }
          }
        }
        else
        {
          __s1[0] = v58;
          LOWORD(__s1[1]) = v59;
          BYTE2(__s1[1]) = BYTE2(v59);
          BYTE3(__s1[1]) = BYTE3(v59);
          BYTE4(__s1[1]) = BYTE4(v59);
          BYTE5(__s1[1]) = BYTE5(v59);
          if (!v194) {
            goto LABEL_348;
          }
          int v114 = memcmp(v194, __s1, BYTE6(v59));
          outlined consume of Data._Representation(v56, v57);
          if (v114) {
            goto LABEL_266;
          }
        }
LABEL_146:
        uint64_t v122 = (uint64_t)v202;
        uint64_t v123 = (uint64_t)v205;
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v124 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of ActivitySession.DomainAssertionWrapper(v123, type metadata accessor for AttachmentLedger_EncryptionID);
        outlined destroy of ActivitySession.DomainAssertionWrapper(v122, type metadata accessor for AttachmentLedger_EncryptionID);
        outlined destroy of UUID?((uint64_t)v208, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        outlined destroy of UUID?(v213, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        outlined destroy of UUID?(v212, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        if ((v124 & 1) == 0) {
          goto LABEL_271;
        }
        break;
      case 2uLL:
        char v76 = (const void *)(v57 & 0x3FFFFFFFFFFFFFFFLL);
        uint64_t v77 = *(void *)(v56 + 16);
        swift_retain();
        swift_retain();
        uint64_t v78 = (char *)__DataStorage._bytes.getter();
        v194 = v76;
        if (!v78) {
          goto LABEL_64;
        }
        uint64_t v79 = __DataStorage._offset.getter();
        if (__OFSUB__(v77, v79)) {
          goto LABEL_298;
        }
        v78 += v77 - v79;
LABEL_64:
        a1 = v199;
        __DataStorage._length.getter();
        if (v64)
        {
          v193 = v78;
          if (v64 == 1)
          {
            if (v58 >> 32 < (int)v58) {
              goto LABEL_308;
            }
            swift_retain();
            uint64_t v80 = (char *)__DataStorage._bytes.getter();
            if (v80)
            {
              uint64_t v81 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v58, v81)) {
                goto LABEL_319;
              }
              v80 += (int)v58 - v81;
            }
            a2 = v197;
            uint64_t v82 = __DataStorage._length.getter();
            if (v82 >= (v58 >> 32) - (int)v58) {
              size_t v83 = (v58 >> 32) - (int)v58;
            }
            else {
              size_t v83 = v82;
            }
            if (!v193) {
              goto LABEL_338;
            }
            if (!v80) {
              goto LABEL_339;
            }
            int v84 = memcmp(v193, v80, v83);
            outlined consume of Data._Representation(v58, v59);
            swift_release();
            swift_release();
            if (v84) {
              goto LABEL_266;
            }
          }
          else
          {
            uint64_t v107 = *(void *)(v58 + 16);
            uint64_t v108 = *(void *)(v58 + 24);
            swift_retain();
            swift_retain();
            uint64_t v109 = (char *)__DataStorage._bytes.getter();
            if (v109)
            {
              uint64_t v110 = __DataStorage._offset.getter();
              if (__OFSUB__(v107, v110)) {
                goto LABEL_318;
              }
              v109 += v107 - v110;
            }
            if (__OFSUB__(v108, v107)) {
              goto LABEL_313;
            }
            uint64_t v111 = __DataStorage._length.getter();
            if (v111 >= v108 - v107) {
              size_t v112 = v108 - v107;
            }
            else {
              size_t v112 = v111;
            }
            if (!v193) {
              goto LABEL_346;
            }
            a1 = v199;
            if (!v109) {
              goto LABEL_347;
            }
            int v113 = memcmp(v193, v109, v112);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            if (v113) {
              goto LABEL_266;
            }
          }
        }
        else
        {
          __s1[0] = v58;
          LOWORD(__s1[1]) = v59;
          BYTE2(__s1[1]) = BYTE2(v59);
          BYTE3(__s1[1]) = BYTE3(v59);
          BYTE4(__s1[1]) = BYTE4(v59);
          BYTE5(__s1[1]) = BYTE5(v59);
          if (!v78) {
            goto LABEL_345;
          }
          int v106 = memcmp(v78, __s1, BYTE6(v59));
          swift_release();
          swift_release();
          if (v106) {
            goto LABEL_266;
          }
        }
        goto LABEL_146;
      case 3uLL:
        memset(__s1, 0, 14);
        if (!v64) {
          goto LABEL_87;
        }
        if (v64 == 1)
        {
          uint64_t v68 = (v58 >> 32) - (int)v58;
          if (v58 >> 32 < (int)v58) {
            goto LABEL_307;
          }
          swift_retain();
          uint64_t v85 = __DataStorage._bytes.getter();
          if (!v85) {
            goto LABEL_340;
          }
          uint64_t v70 = v85;
          uint64_t v86 = __DataStorage._offset.getter();
          uint64_t v72 = (int)v58 - v86;
          if (__OFSUB__((int)v58, v86)) {
            goto LABEL_309;
          }
LABEL_82:
          uint64_t v87 = __DataStorage._length.getter();
          if (v87 >= v68) {
            size_t v88 = v68;
          }
          else {
            size_t v88 = v87;
          }
          int v89 = memcmp(__s1, (const void *)(v70 + v72), v88);
          outlined consume of Data._Representation(v58, v59);
          a1 = v199;
          if (v89) {
            goto LABEL_266;
          }
        }
        else
        {
          uint64_t v101 = *(void *)(v58 + 16);
          uint64_t v102 = *(void *)(v58 + 24);
          swift_retain();
          swift_retain();
          char v97 = (char *)__DataStorage._bytes.getter();
          if (v97)
          {
            uint64_t v103 = __DataStorage._offset.getter();
            if (__OFSUB__(v101, v103)) {
              goto LABEL_317;
            }
            v97 += v101 - v103;
          }
          int64_t v99 = v102 - v101;
          if (__OFSUB__(v102, v101)) {
            goto LABEL_311;
          }
          uint64_t v100 = __DataStorage._length.getter();
          if (!v97) {
            goto LABEL_344;
          }
LABEL_114:
          if (v100 >= v99) {
            size_t v104 = v99;
          }
          else {
            size_t v104 = v100;
          }
          int v105 = memcmp(__s1, v97, v104);
          swift_release();
          swift_release();
          a1 = v199;
          if (v105) {
            goto LABEL_266;
          }
        }
        goto LABEL_146;
      default:
        __s1[0] = v56;
        LOWORD(__s1[1]) = v57;
        BYTE2(__s1[1]) = BYTE2(v57);
        BYTE3(__s1[1]) = BYTE3(v57);
        BYTE4(__s1[1]) = BYTE4(v57);
        BYTE5(__s1[1]) = BYTE5(v57);
        if (!v64)
        {
LABEL_87:
          uint64_t __s2 = v58;
          __int16 v215 = v59;
          char v216 = BYTE2(v59);
          char v217 = BYTE3(v59);
          char v218 = BYTE4(v59);
          char v219 = BYTE5(v59);
          if (memcmp(__s1, &__s2, BYTE6(v59))) {
            goto LABEL_266;
          }
          goto LABEL_146;
        }
        if (v64 == 1)
        {
          uint64_t v68 = (v58 >> 32) - (int)v58;
          if (v58 >> 32 < (int)v58) {
            goto LABEL_306;
          }
          swift_retain();
          uint64_t v69 = __DataStorage._bytes.getter();
          if (!v69) {
            goto LABEL_337;
          }
          uint64_t v70 = v69;
          uint64_t v71 = __DataStorage._offset.getter();
          uint64_t v72 = (int)v58 - v71;
          if (__OFSUB__((int)v58, v71)) {
            goto LABEL_312;
          }
          goto LABEL_82;
        }
        uint64_t v95 = *(void *)(v58 + 16);
        uint64_t v96 = *(void *)(v58 + 24);
        swift_retain();
        swift_retain();
        char v97 = (char *)__DataStorage._bytes.getter();
        if (v97)
        {
          uint64_t v98 = __DataStorage._offset.getter();
          if (__OFSUB__(v95, v98)) {
            goto LABEL_316;
          }
          v97 += v95 - v98;
        }
        int64_t v99 = v96 - v95;
        if (__OFSUB__(v96, v95)) {
          goto LABEL_310;
        }
        uint64_t v100 = __DataStorage._length.getter();
        if (!v97) {
          goto LABEL_343;
        }
        goto LABEL_114;
    }
    goto LABEL_147;
  }
  v190 = &demangling cache variable for type metadata for (AttachmentLedger_EncryptionID?, AttachmentLedger_EncryptionID?);
LABEL_269:
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v53, type metadata accessor for AttachmentLedger_EncryptionID);
LABEL_270:
  outlined destroy of UUID?(v33, v190);
  outlined destroy of UUID?(v213, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  outlined destroy of UUID?(v212, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
LABEL_271:
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v19, type metadata accessor for AttachmentLedger_AttachmentEncryption);
LABEL_272:
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v21, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  return 0;
}

uint64_t default argument 0 of DatagramChannelStream.close(error:)()
{
  type metadata accessor for DatagramChannelError(0);
  return swift_storeEnumTagMultiPayload();
}

id default argument 5 of BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)()
{
  id v0 = objc_allocWithZone((Class)CPSharedConversationServerBag);
  return objc_msgSend(v0, sel_init);
}

id default argument 9 of BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)()
{
  id v0 = objc_allocWithZone((Class)CPFeatureFlags);
  return objc_msgSend(v0, sel_init);
}

uint64_t default argument 0 of DatagramClient._close(error:)()
{
  type metadata accessor for DatagramChannelError(0);
  return swift_storeEnumTagMultiPayload();
}

unint64_t default argument 3 of UnencryptedAttachment.init(key:metadata:mmcsMetadata:encryptionSlots:)()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
}

uint64_t default argument 5 of UnreliableMessenger.init(name:config:localParticipantID:delegate:dataCryptorProvider:startImmediately:retainRefOnStart:serviceProvider:)()
{
  return 1;
}

unint64_t default argument 0 of BackgroundSession.leave(endState:)()
{
  return 0xC000000000000000;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed String) -> (@out Bool)(uint64_t a1, uint64_t a2, void (*a3)(unsigned __int8 *__return_ptr, void *))
{
  v5[0] = a1;
  v5[1] = a2;
  a3(&v4, v5);
  return v4;
}

uint64_t default argument 0 of PresenceHostSession._leave(endState:)()
{
  return 0;
}

uint64_t default argument 0 of Histogram.intervalDescription(omitEmptyBins:)()
{
  return 0;
}

uint64_t default argument 1 of DarwinNotification.init(name:queue:)()
{
  return static OS_dispatch_queue.main.getter();
}

uint64_t default argument 1 of PubSubClient.init(serviceProvider:createTopicMaxAttempts:createTopicRpcRetryIntervalSeconds:topicReporter:topicReporterTag:)()
{
  return 3;
}

double default argument 2 of PubSubClient.init(serviceProvider:createTopicMaxAttempts:createTopicRpcRetryIntervalSeconds:topicReporter:topicReporterTag:)()
{
  return 1.0;
}

uint64_t default argument 1 of PubSubTopicsObserver.init(serviceProvider:rpcMaxAttempts:rpcRetryIntervalSeconds:)()
{
  return 3;
}

double default argument 2 of PubSubTopicsObserver.init(serviceProvider:rpcMaxAttempts:rpcRetryIntervalSeconds:)()
{
  return 1.0;
}

uint64_t default argument 5 of CPSystemStateObserver.init(queue:carplayObserver:managedConfigObserver:audioRoutePolicyManager:displayCloneStateObserver:isLockdownModeEnabled:)()
{
  return TULockdownModeEnabled();
}

id @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(uint64_t a1, uint64_t a2, char a3)
{
  v10[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v5 = (void *)MEMORY[0x1B3EA1B00]();
  swift_bridgeObjectRelease();
  v10[0] = 0;
  id v6 = objc_msgSend(v3, sel_initWithBundleIdentifier_allowPlaceholder_error_, v5, a3 & 1, v10);

  if (v6)
  {
    id v7 = v10[0];
  }
  else
  {
    id v8 = v10[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

void protocol witness for Hashable.hash(into:) in conformance TUConversationActivityEventType()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TUConversationActivityEventType()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TUConversationActivityEventType()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance CPApplicationLauncherOptions@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  uint64_t vars8;

  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  uint64_t v2;
  uint64_t vars8;

  type metadata accessor for CodingUserInfoKey();
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;
  uint64_t vars8;

  type metadata accessor for UUID();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  uint64_t vars8;

  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  unsigned char v9[40];

  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    unint64_t v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      uint64_t v7 = MEMORY[0x1B3EA2520](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if (v7) {
        break;
      }
      uint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, unint64_t, uint64_t);
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  void (**v15)(char *, uint64_t);
  uint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  BOOL v21 = a1;
  uint64_t v4 = type metadata accessor for CodingUserInfoKey();
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v9 = a2 & ~v8;
  uint64_t v20 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    BOOL v11 = v5 + 16;
    uint64_t v12 = v13;
    BOOL v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      uint64_t v16 = v11;
      v12(v7, *(void *)(v22 + 48) + v14 * v9, v4);
      uint64_t v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v15)(v7, v4);
      if (v17) {
        break;
      }
      uint64_t v9 = (v9 + 1) & v10;
      BOOL v11 = v16;
    }
    while (((*(void *)(v20 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void (*v11)(char *, unint64_t, uint64_t);
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  char v19 = a1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    BOOL v11 = v13;
    BOOL v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      uint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    unint64_t v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    uint64_t v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        uint64_t v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        uint64_t v10 = static NSObject.== infix(_:_:)();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

void specialized _NativeSet.isEqual(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3 != __CocoaSet.count.getter()) {
    return;
  }
  int64_t v4 = 0;
  uint64_t v5 = a2 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a2 + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    unint64_t v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v11 = v10 | (v4 << 6);
LABEL_6:
    id v12 = *(id *)(*(void *)(a2 + 48) + 8 * v11);
    char v13 = __CocoaSet.contains(_:)();

    if ((v13 & 1) == 0) {
      return;
    }
  }
  int64_t v14 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v14 >= v9) {
    return;
  }
  unint64_t v15 = *(void *)(v5 + 8 * v14);
  ++v4;
  if (v15) {
    goto LABEL_19;
  }
  int64_t v4 = v14 + 1;
  if (v14 + 1 >= v9) {
    return;
  }
  unint64_t v15 = *(void *)(v5 + 8 * v4);
  if (v15)
  {
LABEL_19:
    unint64_t v8 = (v15 - 1) & v15;
    unint64_t v11 = __clz(__rbit64(v15)) + (v4 << 6);
    goto LABEL_6;
  }
  int64_t v16 = v14 + 2;
  if (v16 >= v9) {
    return;
  }
  unint64_t v15 = *(void *)(v5 + 8 * v16);
  if (v15)
  {
    int64_t v4 = v16;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v4 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v4 >= v9) {
      return;
    }
    unint64_t v15 = *(void *)(v5 + 8 * v4);
    ++v16;
    if (v15) {
      goto LABEL_19;
    }
  }
LABEL_23:
  __break(1u);
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      unint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      id v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      char v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      char v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
      unint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      id v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      char v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      char v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      unint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      id v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<[String : Any]>);
      unint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      id v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      char v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      char v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      unint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      id v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      char v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      char v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IDSGroupSessionProvider.CurrentSessionInfo>);
      unint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      id v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      char v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      char v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IDSGroupSessionProvider.Participant>);
      unint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      id v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TopicInfo>);
      unint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      id v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
      unint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 29;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 2);
      char v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
      char v13 = (char *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32]) {
          memmove(v13, a4 + 32, 4 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  char v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>, MEMORY[0x1E4F27990], MEMORY[0x1E4F27990]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<AttachmentLedger_AttachmentMetadata>, type metadata accessor for AttachmentLedger_AttachmentMetadata, type metadata accessor for AttachmentLedger_AttachmentMetadata);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<NWEndpoint>, MEMORY[0x1E4F38980], MEMORY[0x1E4F38980]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationManagerHost.EndpointRequest>, (uint64_t (*)(void))type metadata accessor for ConversationManagerHost.EndpointRequest, (uint64_t (*)(void))type metadata accessor for ConversationManagerHost.EndpointRequest);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(UUID, TUConversationActivitySessionContainer)>, &demangling cache variable for type metadata for (UUID, TUConversationActivitySessionContainer));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CP_Record>, type metadata accessor for CP_Record, type metadata accessor for CP_Record);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(UInt64, UUID)>, &demangling cache variable for type metadata for (UInt64, UUID));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CP_SequenceNumber>, type metadata accessor for CP_SequenceNumber, type metadata accessor for CP_SequenceNumber);
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *a1, int64_t a2, char a3, void *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<()>, &demangling cache variable for type metadata for ());
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ApplicationLaunchBehavior>, &demangling cache variable for type metadata for ApplicationLaunchBehavior);
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      char v13 = (void *)swift_allocObject();
      int64_t v14 = _swift_stdlib_malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 17;
      }
      void v13[2] = v11;
      v13[3] = 2 * (v15 >> 4);
      int64_t v16 = v13 + 4;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      char v13 = (void *)MEMORY[0x1E4FBC860];
      int64_t v16 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[2 * v11 + 4]) {
          memmove(v16, a4 + 4, 16 * v11);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = _swift_stdlib_malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, unint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *(void *)(a4 + 24);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *(void *)(a4 + 16);
    if (v7 <= v8) {
      uint64_t v9 = *(void *)(a4 + 16);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PubSubTopic.ReceivedRecord>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 + 31;
      }
      id v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      unint64_t v13 = (unint64_t)(v10 + 4);
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      unint64_t v13 = MEMORY[0x1E4FBC860] + 32;
      if (result)
      {
LABEL_15:
        if ((unint64_t)v10 < a4 || v13 >= a4 + 32 + (v8 << 6))
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v10 != (void *)a4)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        *(void *)(a4 + 16) = 0;
        goto LABEL_26;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, a4);
LABEL_26:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = *(void *)(a4 + 24);
    uint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v10 = a2;
      }
    }
  }
  else
  {
    uint64_t v10 = a2;
  }
  uint64_t v11 = *(void *)(a4 + 16);
  if (v10 <= v11) {
    uint64_t v12 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (BOOL v18 = v14 == -1) : (BOOL v18 = 0), v18))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (unint64_t)v16 + v20;
  if (a1)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(void *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return MEMORY[0x1E4FBC860];
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, UInt64>);
  uint64_t result = (void *)static _DictionaryStorage.copy(original:)();
  unint64_t v3 = result;
  int64_t v4 = 0;
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v20 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & v5;
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v10 = (char *)(result + 8);
  if ((v7 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v11 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 8 * i);
    uint64_t result = objc_msgSend(*(id *)(*(void *)(a1 + 56) + 8 * i), sel_identifier);
    *(void *)&v10[(i >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << i;
    *(void *)(v3[6] + 8 * i) = v16;
    *(void *)(v3[7] + 8 * i) = result;
    uint64_t v17 = v3[2];
    BOOL v18 = __OFADD__(v17, 1);
    uint64_t v19 = v17 + 1;
    if (v18)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v19;
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_24;
    }
    if (v13 >= v9) {
      return v3;
    }
    unint64_t v14 = *(void *)(v20 + 8 * v13);
    ++v4;
    if (!v14)
    {
      int64_t v4 = v13 + 1;
      if (v13 + 1 >= v9) {
        return v3;
      }
      unint64_t v14 = *(void *)(v20 + 8 * v4);
      if (!v14)
      {
        int64_t v4 = v13 + 2;
        if (v13 + 2 >= v9) {
          return v3;
        }
        unint64_t v14 = *(void *)(v20 + 8 * v4);
        if (!v14) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v8 = (v14 - 1) & v14;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v9) {
    return v3;
  }
  unint64_t v14 = *(void *)(v20 + 8 * v15);
  if (v14)
  {
    int64_t v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v4 >= v9) {
      return v3;
    }
    unint64_t v14 = *(void *)(v20 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  void *result;
  void *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, NSNumber>);
  uint64_t result = (void *)static _DictionaryStorage.copy(original:)();
  unint64_t v3 = result;
  int64_t v4 = 0;
  uint64_t v26 = a1;
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v24 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & v5;
  uint64_t v25 = (unint64_t)(v6 + 63) >> 6;
  int64_t v9 = (char *)(result + 8);
  if ((v7 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v10 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v4 << 6))
  {
    int64_t v15 = (uint64_t *)(*(void *)(v26 + 48) + 16 * i);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    BOOL v18 = *(unsigned __int8 *)(*(void *)(v26 + 56) + 40 * i + 24);
    uint64_t v19 = objc_allocWithZone(NSNumber);
    swift_bridgeObjectRetain();
    uint64_t result = objc_msgSend(v19, sel_initWithBool_, v18);
    *(void *)&v9[(i >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << i;
    uint64_t v20 = (void *)(v3[6] + 16 * i);
    *uint64_t v20 = v16;
    v20[1] = v17;
    *(void *)(v3[7] + 8 * i) = result;
    unint64_t v21 = v3[2];
    unint64_t v22 = __OFADD__(v21, 1);
    unint64_t v23 = v21 + 1;
    if (v22)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v23;
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    uint64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_24;
    }
    if (v12 >= v25) {
      return v3;
    }
    int64_t v13 = *(void *)(v24 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v25) {
        return v3;
      }
      int64_t v13 = *(void *)(v24 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v25) {
          return v3;
        }
        int64_t v13 = *(void *)(v24 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v8 = (v13 - 1) & v13;
  }
  unint64_t v14 = v12 + 3;
  if (v14 >= v25) {
    return v3;
  }
  int64_t v13 = *(void *)(v24 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v25) {
      return v3;
    }
    int64_t v13 = *(void *)(v24 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t specialized Set._Variant.remove(_:)(void *a1)
{
  return specialized Set._Variant.remove(_:)(a1, (void (*)(void))type metadata accessor for ActivitySession, (void (*)(void))specialized _NativeSet.copy(), specialized _NativeSet.init(_:capacity:), (void (*)(void))type metadata accessor for ActivitySession);
}

{
  return specialized Set._Variant.remove(_:)(a1, (void (*)(void))type metadata accessor for AddressableMember, (void (*)(void))specialized _NativeSet.copy(), specialized _NativeSet.init(_:capacity:), (void (*)(void))type metadata accessor for AddressableMember);
}

{
  return specialized Set._Variant.remove(_:)(a1, (void (*)(void))type metadata accessor for PresenceHostSession, (void (*)(void))specialized _NativeSet.copy(), specialized _NativeSet.init(_:capacity:), (void (*)(void))type metadata accessor for PresenceHostSession);
}

{
  return specialized Set._Variant.remove(_:)(a1, (void (*)(void))type metadata accessor for ConversationManagerHostConnection, (void (*)(void))specialized _NativeSet.copy(), specialized _NativeSet.init(_:capacity:), (void (*)(void))type metadata accessor for ConversationManagerHostConnection);
}

uint64_t specialized Set._Variant.remove(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = static Hasher._hash(seed:_:)();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(v4 + 48);
  if (*(void *)(v8 + 8 * v7) != a1)
  {
    uint64_t v9 = ~v6;
    do
    {
      unint64_t v7 = (v7 + 1) & v9;
      if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
        return 0;
      }
    }
    while (*(void *)(v8 + 8 * v7) != a1);
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v2;
  uint64_t v14 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    uint64_t v11 = v14;
  }
  uint64_t v12 = *(void *)(*(void *)(v11 + 48) + 8 * v7);
  specialized _NativeSet._delete(at:)(v7);
  *uint64_t v2 = v14;
  swift_bridgeObjectRelease();
  return v12;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  void *v8;
  id v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v19;

  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v4 < 0) {
      uint64_t v5 = *v2;
    }
    else {
      uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v6 = __CocoaSet.contains(_:)();
    swift_release();
    if (v6)
    {
      unint64_t v7 = specialized Set._Variant._migrateToNative(_:removing:)(v5, a1);
      swift_bridgeObjectRelease();
      return v7;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    return 0;
  }
  Hasher.init(_seed:)();
  uint64_t v8 = *(void **)(a1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
  swift_bridgeObjectRetain();
  uint64_t v9 = v8;
  NSObject.hash(into:)();

  uint64_t v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v4 + 32);
  uint64_t v12 = v10 & ~v11;
  if (((*(void *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
    goto LABEL_15;
  }
  type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for NSObject);
  swift_retain();
  int64_t v13 = static NSObject.== infix(_:_:)();
  swift_release();
  if ((v13 & 1) == 0)
  {
    uint64_t v14 = ~v11;
    do
    {
      uint64_t v12 = (v12 + 1) & v14;
      if (((*(void *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
        goto LABEL_15;
      }
      swift_retain();
      int64_t v15 = static NSObject.== infix(_:_:)();
      swift_release();
    }
    while ((v15 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v17 = *v2;
  uint64_t v19 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    uint64_t v17 = v19;
  }
  unint64_t v7 = *(void *)(*(void *)(v17 + 48) + 8 * v12);
  specialized _NativeSet._delete(at:)(v12);
  *uint64_t v2 = v19;
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t specialized Set._Variant.remove(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  swift_bridgeObjectRetain();
  uint64_t v31 = a1;
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  uint64_t v13 = v9;
  uint64_t v30 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    uint64_t v26 = v2;
    uint64_t v27 = v6;
    uint64_t v28 = a2;
    uint64_t v29 = ~v11;
    uint64_t v16 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v15 = v6 + 16;
    uint64_t v14 = v16;
    uint64_t v17 = *(void *)(v15 + 56);
    while (1)
    {
      uint64_t v18 = v13;
      v14(v8, *(void *)(v13 + 48) + v17 * v12, v5);
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v15 - 8))(v8, v5);
      if (v19) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v29;
      uint64_t v13 = v18;
      if (((*(void *)(v30 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = 1;
        uint64_t v6 = v27;
        a2 = v28;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v21 = v26;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v21;
    uint64_t v32 = *v21;
    *unint64_t v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()();
      uint64_t v23 = v32;
    }
    uint64_t v6 = v27;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 32))(v28, *(void *)(v23 + 48) + v17 * v12, v5);
    specialized _NativeSet._delete(at:)(v12);
    *unint64_t v21 = v32;
    swift_bridgeObjectRelease();
    uint64_t v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
}

uint64_t specialized Set._Variant.remove(_:)(void *a1, void (*a2)(void), void (*a3)(void), uint64_t (*a4)(uint64_t, uint64_t), void (*a5)(void))
{
  uint64_t v6 = v5;
  uint64_t v8 = *v5;
  if ((*v5 & 0xC000000000000001) != 0)
  {
    if (v8 < 0) {
      uint64_t v11 = *v5;
    }
    else {
      uint64_t v11 = v8 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v12 = a1;
    char v13 = __CocoaSet.contains(_:)();

    if (v13)
    {
      uint64_t v14 = specialized Set._Variant._migrateToNative(_:removing:)(v11, (uint64_t)v12, a4, a5);
      swift_bridgeObjectRelease();
      return v14;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    return 0;
  }
  Swift::Int v17 = *(void *)(v8 + 40);
  swift_bridgeObjectRetain();
  Swift::Int v18 = NSObject._rawHashValue(seed:)(v17);
  uint64_t v19 = -1 << *(unsigned char *)(v8 + 32);
  unint64_t v20 = v18 & ~v19;
  if (((*(void *)(v8 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
    goto LABEL_15;
  }
  a2(0);
  id v21 = *(id *)(*(void *)(v8 + 48) + 8 * v20);
  char v22 = static NSObject.== infix(_:_:)();

  if ((v22 & 1) == 0)
  {
    uint64_t v23 = ~v19;
    do
    {
      unint64_t v20 = (v20 + 1) & v23;
      if (((*(void *)(v8 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
        goto LABEL_15;
      }
      id v24 = *(id *)(*(void *)(v8 + 48) + 8 * v20);
      char v25 = static NSObject.== infix(_:_:)();
    }
    while ((v25 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v27 = *v6;
  uint64_t v29 = *v6;
  uint64_t *v6 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a3();
    uint64_t v27 = v29;
  }
  uint64_t v14 = *(void *)(*(void *)(v27 + 48) + 8 * v20);
  specialized _NativeSet._delete(at:)(v20);
  uint64_t *v6 = v29;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t specialized Set._Variant.remove(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  uint64_t v10 = (void *)(v9 + 16 * v8);
  BOOL v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v15 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v15;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      uint64_t v16 = (void *)(v9 + 16 * v8);
      BOOL v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v2;
  uint64_t v19 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    uint64_t v13 = v19;
  }
  uint64_t v14 = *(void *)(*(void *)(v13 + 48) + 16 * v8);
  specialized _NativeSet._delete(at:)(v8);
  *uint64_t v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t specialized Set._Variant._migrateToNative(_:removing:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), void (*a4)(void))
{
  uint64_t v7 = v4;
  swift_bridgeObjectRelease();
  uint64_t v8 = __CocoaSet.count.getter();
  uint64_t v9 = swift_unknownObjectRetain();
  uint64_t v10 = a3(v9, v8);
  uint64_t v22 = v10;
  Swift::Int v11 = *(void *)(v10 + 40);
  swift_retain();
  Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
  uint64_t v13 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v14 = v12 & ~v13;
  if ((*(void *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    a4(0);
    id v15 = *(id *)(*(void *)(v10 + 48) + 8 * v14);
    char v16 = static NSObject.== infix(_:_:)();

    if (v16)
    {
LABEL_6:
      swift_release();
      uint64_t v20 = *(void *)(*(void *)(v10 + 48) + 8 * v14);
      specialized _NativeSet._delete(at:)(v14);
      if (static NSObject.== infix(_:_:)())
      {
        uint64_t *v7 = v22;
        return v20;
      }
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v10 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_6;
        }
      }
    }
    swift_release();
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t specialized Set._Variant._migrateToNative(_:removing:)(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  swift_bridgeObjectRelease();
  uint64_t v5 = __CocoaSet.count.getter();
  uint64_t v6 = swift_unknownObjectRetain();
  Swift::Int v7 = specialized _NativeSet.init(_:capacity:)(v6, v5);
  Swift::Int v18 = v7;
  Hasher.init(_seed:)();
  uint64_t v8 = *(void **)(a2 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
  swift_retain();
  id v9 = v8;
  NSObject.hash(into:)();

  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v12 = v10 & ~v11;
  if ((*(void *)(v7 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for NSObject);
    swift_retain();
    char v13 = static NSObject.== infix(_:_:)();
    swift_release();
    if (v13)
    {
LABEL_6:
      swift_release();
      uint64_t v16 = *(void *)(*(void *)(v7 + 48) + 8 * v12);
      specialized _NativeSet._delete(at:)(v12);
      if (static NSObject.== infix(_:_:)())
      {
        Swift::Int *v3 = v18;
        return v16;
      }
      __break(1u);
    }
    else
    {
      uint64_t v14 = ~v11;
      while (1)
      {
        unint64_t v12 = (v12 + 1) & v14;
        if (((*(void *)(v7 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
          break;
        }
        swift_retain();
        char v15 = static NSObject.== infix(_:_:)();
        swift_release();
        if (v15) {
          goto LABEL_6;
        }
      }
    }
    swift_release();
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(v3 + 48);
        uint64_t v11 = (void *)(v10 + 8 * v6);
        uint64_t v12 = static Hasher._hash(seed:_:)() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_16:
            char v15 = (void *)(v10 + 8 * v2);
            if (v2 != v6 || (int64_t v2 = v6, v15 >= v11 + 1))
            {
              *char v15 = *v11;
              int64_t v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v16 = *(void *)(v3 + 16);
  BOOL v17 = __OFSUB__(v16, 1);
  uint64_t v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v18;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(*(void *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        uint64_t v11 = *(void **)(v10 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
        swift_retain();
        uint64_t v12 = v11;
        NSObject.hash(into:)();

        char v13 = Hasher._finalize()();
        swift_release();
        uint64_t v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9) {
            goto LABEL_5;
          }
        }
        else if (v14 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          char v15 = *(void *)(v3 + 48);
          uint64_t v16 = (void *)(v15 + 8 * v2);
          BOOL v17 = (void *)(v15 + 8 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v16 >= v17 + 1))
          {
            *uint64_t v16 = *v17;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v18 = *(void *)(v3 + 16);
  char v19 = __OFSUB__(v18, 1);
  uint64_t v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(v3 + 40);
        uint64_t v11 = *(id *)(*(void *)(v3 + 48) + 8 * v6);
        uint64_t v12 = NSObject._rawHashValue(seed:)(v10);

        char v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(v3 + 48);
            BOOL v17 = (void *)(v16 + 8 * v2);
            uint64_t v18 = (void *)(v16 + 8 * v6);
            if (v2 != v6 || (int64_t v2 = v6, v17 >= v18 + 1))
            {
              *BOOL v17 = *v18;
              int64_t v2 = v6;
            }
          }
        }
        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  char v19 = *(void *)(v3 + 16);
  uint64_t v20 = __OFSUB__(v19, 1);
  id v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        uint64_t v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        uint64_t v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          char v13 = (_OWORD *)(v12 + 16 * v2);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            *char v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  char v15 = *(void *)(v3 + 16);
  uint64_t v16 = __OFSUB__(v15, 1);
  BOOL v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t specialized _NativeSet._delete(at:)(int64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  unint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = *v1;
  uint64_t v8 = *v1 + 56;
  uint64_t v9 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(v8 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v31 = v1;
    uint64_t v11 = ~v9;
    uint64_t v35 = result;
    swift_retain();
    uint64_t v12 = _HashTable.previousHole(before:)();
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v33 = (v12 + 1) & v11;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
      uint64_t v13 = v4 + 16;
      uint64_t v32 = v14;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v34 = v13;
      uint64_t v16 = (void (**)(char *, uint64_t))(v13 - 8);
      uint64_t v17 = v35;
      do
      {
        uint64_t v18 = v8;
        uint64_t v19 = v15;
        int64_t v20 = v15 * v10;
        v32(v6, *(void *)(v17 + 48) + v15 * v10, v3);
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        uint64_t v21 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v16)(v6, v3);
        unint64_t v22 = v21 & v11;
        if (a1 >= (uint64_t)v33)
        {
          if (v22 < v33 || a1 < (uint64_t)v22)
          {
LABEL_4:
            uint64_t v8 = v18;
            uint64_t v15 = v19;
            uint64_t v17 = v35;
            goto LABEL_5;
          }
        }
        else if (v22 < v33 && a1 < (uint64_t)v22)
        {
          goto LABEL_4;
        }
        uint64_t v17 = v35;
        int64_t v25 = v19 * a1;
        uint64_t v8 = v18;
        if (v19 * a1 < v20
          || (uint64_t v15 = v19, *(void *)(v35 + 48) + v19 * a1 >= (unint64_t)(*(void *)(v35 + 48) + v20 + v19)))
        {
          swift_arrayInitWithTakeFrontToBack();
          goto LABEL_21;
        }
        a1 = v10;
        if (v25 != v20)
        {
          swift_arrayInitWithTakeBackToFront();
LABEL_21:
          uint64_t v17 = v35;
          uint64_t v15 = v19;
          a1 = v10;
        }
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    *(void *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    uint64_t result = swift_release();
    Swift::UInt v1 = v31;
  }
  else
  {
    *(void *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  uint64_t v26 = *v1;
  uint64_t v27 = *(void *)(*v1 + 16);
  BOOL v28 = __OFSUB__(v27, 1);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v26 + 16) = v29;
    ++*(_DWORD *)(v26 + 36);
  }
  return result;
}

Swift::Int specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 3);
  unint64_t v6 = specialized Sequence._copySequenceContents(initializing:)(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : ()].Iterator._Variant();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v3;
}

{
  uint64_t v1;
  void *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: String, value: ())>);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 1;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 5);
  unint64_t v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : ()].Iterator._Variant();
  if (v6 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v3;
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))specialized Sequence._copySequenceContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))specialized Sequence._copySequenceContents(initializing:));
}

{
  uint64_t v1;
  void *v3;
  int64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 3);
  unint64_t v6 = specialized Sequence._copySequenceContents(initializing:)(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : ()].Iterator._Variant();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v3;
}

{
  uint64_t v1;
  void *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  unint64_t v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : ()].Iterator._Variant();
  if (v6 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v3;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 24);
  if (v1 >> 62)
  {
    __break(1u);
    goto LABEL_10;
  }
  if ((2 * v1 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v2 = 16 * v1;
  unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFE0;
  if ((v2 & 0x8000000000000000) == 0)
  {
    if (v3)
    {
      uint64_t v4 = result;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Bool>);
      uint64_t v5 = swift_allocObject();
      size_t v6 = _swift_stdlib_malloc_size((const void *)v5);
      *(void *)(v5 + 16) = v3;
      *(void *)(v5 + 24) = 2 * v6 - 64;
      uint64_t v7 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, (unsigned char *)(v5 + 32), v3, v4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v7 == v3) {
        return v5;
      }
      __break(1u);
    }
    return MEMORY[0x1E4FBC860];
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return MEMORY[0x1E4FBC860];
    }
    uint64_t v8 = 2 * v5;
    if (v5 <= 0)
    {
      uint64_t v9 = (void *)MEMORY[0x1E4FBC860];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        unint64_t v12 = a2 + 16 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8) {
          goto LABEL_19;
        }
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v9 = (void *)swift_allocObject();
      int64_t v10 = _swift_stdlib_malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 17;
      }
      v9[2] = v5;
      v9[3] = 2 * (v11 >> 4);
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = __CocoaSet.count.getter();
    if (v2) {
      goto LABEL_3;
    }
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return MEMORY[0x1E4FBC860];
  }
LABEL_3:
  if (v2 <= 0)
  {
    unint64_t v3 = (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    unint64_t v3 = (void *)swift_allocObject();
    int64_t v4 = _swift_stdlib_malloc_size(v3);
    uint64_t v5 = v4 - 32;
    if (v4 < 32) {
      uint64_t v5 = v4 - 25;
    }
    v3[2] = v2;
    v3[3] = (2 * (v5 >> 3)) | 1;
  }
  swift_bridgeObjectRetain();
  size_t v6 = specialized Sequence._copySequenceContents(initializing:)(&v8, v3 + 4, v2, a1);
  uint64_t result = outlined consume of [String : ()].Iterator._Variant();
  if (v6 == (void *)v2) {
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t (*a2)(uint64_t *, void *, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = (void *)swift_allocObject();
  int64_t v6 = _swift_stdlib_malloc_size(v5);
  uint64_t v7 = v6 - 32;
  if (v6 < 32) {
    uint64_t v7 = v6 - 25;
  }
  void v5[2] = v2;
  v5[3] = (2 * (v7 >> 3)) | 1;
  uint64_t v8 = a2(&v10, v5 + 4, v2, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : ()].Iterator._Variant();
  if (v8 != v2)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v5;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(void *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v78 = 0;
      uint64_t v79 = *v2;
      for (uint64_t i = 1; i != v3; ++i)
      {
        unint64_t v81 = *(void *)(v79 + 8 * i);
        uint64_t v82 = v78;
        do
        {
          unint64_t v83 = *(void *)(v79 + v82);
          if (v81 >= v83) {
            break;
          }
          if (!v79) {
            goto LABEL_141;
          }
          *(void *)(v79 + v82 + 8) = v83;
          *(void *)(v79 + v82) = v81;
          v82 -= 8;
        }
        while (v82 != -8);
        v78 += 8;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  Swift::Int v95 = result;
  Swift::Int v96 = v3;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x1E4FBC860];
    __dst = (char *)(MEMORY[0x1E4FBC860] + 32);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      uint64_t v11 = (char *)MEMORY[0x1E4FBC860];
LABEL_103:
      uint64_t v94 = v8;
      if (v12 >= 2)
      {
        uint64_t v84 = *v2;
        do
        {
          unint64_t v85 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_132;
          }
          if (!v84) {
            goto LABEL_145;
          }
          uint64_t v86 = v11;
          uint64_t v87 = v11 + 32;
          uint64_t v88 = *(void *)&v11[16 * v85 + 32];
          uint64_t v89 = *(void *)&v11[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v84 + 8 * v88), (char *)(v84 + 8 * *(void *)&v87[16 * v12 - 16]), v84 + 8 * v89, __dst);
          if (v1) {
            break;
          }
          if (v89 < v88) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v86 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v86);
          }
          if (v85 >= *((void *)v86 + 2)) {
            goto LABEL_134;
          }
          uint64_t v90 = &v86[16 * v85 + 32];
          *(void *)uint64_t v90 = v88;
          *((void *)v90 + 1) = v89;
          unint64_t v91 = *((void *)v86 + 2);
          if (v12 > v91) {
            goto LABEL_135;
          }
          memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v91 - v12));
          uint64_t v11 = v86;
          *((void *)v86 + 2) = v91 - 1;
          unint64_t v12 = v91 - 1;
        }
        while (v91 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      *(void *)(v94 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v94 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    Swift::Int v3 = v96;
    uint64_t v94 = v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *v2;
  uint64_t v92 = v2;
  uint64_t v93 = *v2 - 8;
  uint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v97 = *v2;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 < v3)
    {
      unint64_t v14 = *(void *)(v10 + 8 * v9);
      unint64_t v15 = *(void *)(v10 + 8 * v13);
      Swift::Int v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        unint64_t v16 = v14;
        while (1)
        {
          unint64_t v17 = *(void *)(v10 + 8 * v9);
          if (v14 < v15 == v17 >= v16) {
            break;
          }
          ++v9;
          unint64_t v16 = v17;
          if (v3 == v9)
          {
            Swift::Int v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13) {
          goto LABEL_138;
        }
        if (v13 < v9)
        {
          Swift::Int v18 = v9 - 1;
          Swift::Int v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10) {
                goto LABEL_144;
              }
              uint64_t v20 = *(void *)(v10 + 8 * v19);
              *(void *)(v10 + 8 * v19) = *(void *)(v10 + 8 * v18);
              *(void *)(v10 + 8 * v18) = v20;
            }
            BOOL v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_47;
    }
    if (__OFSUB__(v9, v13)) {
      goto LABEL_136;
    }
    if (v9 - v13 >= v95) {
      goto LABEL_47;
    }
    Swift::Int v21 = v13 + v95;
    if (__OFADD__(v13, v95)) {
      goto LABEL_139;
    }
    if (v21 >= v3) {
      Swift::Int v21 = v3;
    }
    if (v21 < v13) {
      break;
    }
    if (v9 != v21)
    {
      unint64_t v22 = (unint64_t *)(v93 + 8 * v9);
      do
      {
        unint64_t v23 = *(void *)(v10 + 8 * v9);
        Swift::Int v24 = v13;
        int64_t v25 = v22;
        do
        {
          unint64_t v26 = *v25;
          if (v23 >= *v25) {
            break;
          }
          if (!v10) {
            goto LABEL_142;
          }
          *int64_t v25 = v23;
          v25[1] = v26;
          --v25;
          ++v24;
        }
        while (v9 != v24);
        ++v9;
        ++v22;
      }
      while (v9 != v21);
      Swift::Int v9 = v21;
    }
LABEL_47:
    if (v9 < v13) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v28 = *((void *)v11 + 2);
    unint64_t v27 = *((void *)v11 + 3);
    unint64_t v12 = v28 + 1;
    uint64_t v10 = v97;
    if (v28 >= v27 >> 1)
    {
      uint64_t v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, v11);
      uint64_t v10 = v97;
      uint64_t v11 = v77;
    }
    *((void *)v11 + 2) = v12;
    uint64_t v29 = v11 + 32;
    uint64_t v30 = &v11[16 * v28 + 32];
    *(void *)uint64_t v30 = v13;
    *((void *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        unint64_t v31 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v36 = &v29[16 * v12];
          uint64_t v37 = *((void *)v36 - 8);
          uint64_t v38 = *((void *)v36 - 7);
          BOOL v42 = __OFSUB__(v38, v37);
          uint64_t v39 = v38 - v37;
          if (v42) {
            goto LABEL_120;
          }
          uint64_t v41 = *((void *)v36 - 6);
          uint64_t v40 = *((void *)v36 - 5);
          BOOL v42 = __OFSUB__(v40, v41);
          uint64_t v34 = v40 - v41;
          char v35 = v42;
          if (v42) {
            goto LABEL_121;
          }
          unint64_t v43 = v12 - 2;
          uint64_t v44 = &v29[16 * v12 - 32];
          uint64_t v46 = *(void *)v44;
          uint64_t v45 = *((void *)v44 + 1);
          BOOL v42 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          if (v42) {
            goto LABEL_123;
          }
          BOOL v42 = __OFADD__(v34, v47);
          uint64_t v48 = v34 + v47;
          if (v42) {
            goto LABEL_126;
          }
          if (v48 >= v39)
          {
            uint64_t v66 = &v29[16 * v31];
            uint64_t v68 = *(void *)v66;
            uint64_t v67 = *((void *)v66 + 1);
            BOOL v42 = __OFSUB__(v67, v68);
            uint64_t v69 = v67 - v68;
            if (v42) {
              goto LABEL_130;
            }
            BOOL v59 = v34 < v69;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v60 = *((void *)v11 + 4);
            uint64_t v61 = *((void *)v11 + 5);
            BOOL v42 = __OFSUB__(v61, v60);
            uint64_t v53 = v61 - v60;
            char v54 = v42;
            goto LABEL_78;
          }
          uint64_t v33 = *((void *)v11 + 4);
          uint64_t v32 = *((void *)v11 + 5);
          BOOL v42 = __OFSUB__(v32, v33);
          uint64_t v34 = v32 - v33;
          char v35 = v42;
        }
        if (v35) {
          goto LABEL_122;
        }
        unint64_t v43 = v12 - 2;
        uint64_t v49 = &v29[16 * v12 - 32];
        uint64_t v51 = *(void *)v49;
        uint64_t v50 = *((void *)v49 + 1);
        BOOL v52 = __OFSUB__(v50, v51);
        uint64_t v53 = v50 - v51;
        char v54 = v52;
        if (v52) {
          goto LABEL_125;
        }
        uint64_t v55 = &v29[16 * v31];
        uint64_t v57 = *(void *)v55;
        uint64_t v56 = *((void *)v55 + 1);
        BOOL v42 = __OFSUB__(v56, v57);
        uint64_t v58 = v56 - v57;
        if (v42) {
          goto LABEL_128;
        }
        if (__OFADD__(v53, v58)) {
          goto LABEL_129;
        }
        if (v53 + v58 >= v34)
        {
          BOOL v59 = v34 < v58;
LABEL_84:
          if (v59) {
            unint64_t v31 = v43;
          }
          goto LABEL_86;
        }
LABEL_78:
        if (v54) {
          goto LABEL_124;
        }
        uint64_t v62 = &v29[16 * v31];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v42 = __OFSUB__(v63, v64);
        uint64_t v65 = v63 - v64;
        if (v42) {
          goto LABEL_127;
        }
        if (v65 < v53) {
          goto LABEL_15;
        }
LABEL_86:
        unint64_t v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v10) {
          goto LABEL_143;
        }
        uint64_t v71 = &v29[16 * v70];
        uint64_t v72 = *(void *)v71;
        uint64_t v73 = v29;
        uint64_t v74 = &v29[16 * v31];
        uint64_t v75 = *((void *)v74 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v10 + 8 * *(void *)v71), (char *)(v10 + 8 * *(void *)v74), v10 + 8 * v75, __dst);
        if (v1) {
          goto LABEL_114;
        }
        if (v75 < v72) {
          goto LABEL_117;
        }
        if (v31 > *((void *)v11 + 2)) {
          goto LABEL_118;
        }
        *(void *)uint64_t v71 = v72;
        *(void *)&v73[16 * v70 + 8] = v75;
        unint64_t v76 = *((void *)v11 + 2);
        if (v31 >= v76) {
          goto LABEL_119;
        }
        unint64_t v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        uint64_t v29 = v73;
        *((void *)v11 + 2) = v76 - 1;
        uint64_t v10 = v97;
        if (v76 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v96;
    if (v9 >= v96)
    {
      uint64_t v8 = v94;
      uint64_t v2 = v92;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst)
{
  int64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 7;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 3;
  Swift::Int v24 = __src;
  unint64_t v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst) {
        memmove(__dst, a2, 8 * v13);
      }
      unint64_t v16 = &v4[8 * v13];
      unint64_t v22 = v16;
      Swift::Int v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        unint64_t v17 = (unint64_t *)(a3 - 8);
        while (1)
        {
          Swift::Int v18 = (char *)(v17 + 1);
          Swift::Int v19 = v6 - 8;
          unint64_t v20 = *((void *)v6 - 1);
          if (*((void *)v16 - 1) >= v20)
          {
            unint64_t v22 = v16 - 8;
            if (v18 < v16 || v17 >= (unint64_t *)v16 || v18 != v16) {
              *unint64_t v17 = *((void *)v16 - 1);
            }
            v16 -= 8;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v18 != v6 || v17 >= (unint64_t *)v6) {
              *unint64_t v17 = v20;
            }
            Swift::Int v24 = v6 - 8;
            v6 -= 8;
            if (v19 <= v7) {
              goto LABEL_42;
            }
          }
          --v17;
          if (v16 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    unint64_t v14 = &v4[8 * v10];
    unint64_t v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*(void *)v6 >= *(void *)v4)
        {
          if (v7 != v4) {
            *(void *)uint64_t v7 = *(void *)v4;
          }
          v4 += 8;
          unint64_t v23 = v4;
          unint64_t v15 = v6;
        }
        else
        {
          unint64_t v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            *(void *)uint64_t v7 = *(void *)v6;
          }
        }
        v7 += 8;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      Swift::Int v24 = v7;
    }
LABEL_42:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *v16;
  long long v17;
  long long v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  long long v26;
  long long v27;
  uint64_t result;
  char *v29;
  char *v30;
  char *v31;

  int64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a3 - (void)a2;
  uint64_t v10 = a2 - __src + 31;
  if (a2 - __src >= 0) {
    uint64_t v10 = a2 - __src;
  }
  uint64_t v11 = v10 >> 5;
  uint64_t v12 = v9 + 31;
  if (v9 >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 5;
  unint64_t v31 = __src;
  uint64_t v30 = __dst;
  if (v11 >= v12 >> 5)
  {
    if (v9 >= -31)
    {
      if (__dst != a2 || &a2[32 * v13] <= __dst) {
        memmove(__dst, a2, 32 * v13);
      }
      Swift::Int v19 = &v4[32 * v13];
      uint64_t v29 = v19;
      unint64_t v31 = v6;
      if (v7 < v6 && v9 >= 32)
      {
        unint64_t v20 = (char *)(a3 - 32);
        Swift::Int v21 = v6;
        while (1)
        {
          unint64_t v22 = v20 + 32;
          unint64_t v23 = *((void *)v21 - 4);
          Swift::Int v24 = *((void *)v21 - 3);
          v21 -= 32;
          int64_t v25 = *((void *)v19 - 4) == v23 && *((void *)v19 - 3) == v24;
          if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            uint64_t v29 = v19 - 32;
            if (v22 < v19 || v20 >= v19 || v22 != v19)
            {
              unint64_t v27 = *((_OWORD *)v19 - 1);
              *(_OWORD *)unint64_t v20 = *((_OWORD *)v19 - 2);
              *((_OWORD *)v20 + 1) = v27;
            }
            Swift::Int v21 = v6;
            v19 -= 32;
            if (v6 <= v7) {
              goto LABEL_50;
            }
          }
          else
          {
            if (v22 != v6 || v20 >= v6)
            {
              unint64_t v26 = *((_OWORD *)v21 + 1);
              *(_OWORD *)unint64_t v20 = *(_OWORD *)v21;
              *((_OWORD *)v20 + 1) = v26;
            }
            unint64_t v31 = v21;
            if (v21 <= v7) {
              goto LABEL_50;
            }
          }
          v20 -= 32;
          uint64_t v6 = v21;
          if (v19 <= v4) {
            goto LABEL_50;
          }
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -31)
  {
    if (__dst != __src || &__src[32 * v11] <= __dst) {
      memmove(__dst, __src, 32 * v11);
    }
    unint64_t v14 = &v4[32 * v11];
    uint64_t v29 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 32)
    {
      do
      {
        unint64_t v15 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v7 != v4)
          {
            Swift::Int v18 = *((_OWORD *)v4 + 1);
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
            *((_OWORD *)v7 + 1) = v18;
          }
          v4 += 32;
          uint64_t v30 = v4;
          unint64_t v16 = v6;
        }
        else
        {
          unint64_t v16 = v6 + 32;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
          {
            unint64_t v17 = *((_OWORD *)v6 + 1);
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
            *((_OWORD *)v7 + 1) = v17;
          }
        }
        v7 += 32;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      unint64_t v31 = v7;
    }
LABEL_50:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v31, (const void **)&v30, &v29);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized BidirectionalCollection.lastIndex(where:)(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (v4)
  {
    uint64_t v6 = (uint64_t *)(a3 + 16 * v4 + 24);
    do
    {
      uint64_t v7 = *v6;
      v10[0] = *(v6 - 1);
      v10[1] = v7;
      swift_bridgeObjectRetain();
      char v8 = a1(v10);
      swift_bridgeObjectRelease();
      if (v3) {
        break;
      }
      v6 -= 2;
      --v4;
    }
    while (!(v8 & 1 | (v4 == 0)));
  }
  return v4;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 56;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(void *)(*(void *)(a4 + 48) + 8 * v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }
  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  int64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;

  uint64_t v4 = a4;
  uint64_t v6 = a2;
  Swift::Int v24 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    uint64_t result = (void *)Set.Iterator.init(_cocoa:)();
    uint64_t v4 = v27;
    unint64_t v7 = v28;
    int64_t v8 = v29;
    uint64_t v9 = v30;
    int64_t v10 = v31;
    if (v6) {
      goto LABEL_3;
    }
LABEL_36:
    unint64_t v11 = 0;
    goto LABEL_38;
  }
  uint64_t v9 = 0;
  Swift::Int v19 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v7 = a4 + 56;
  int64_t v8 = ~v19;
  unint64_t v20 = -v19;
  if (v20 < 64) {
    Swift::Int v21 = ~(-1 << v20);
  }
  else {
    Swift::Int v21 = -1;
  }
  int64_t v10 = v21 & *(void *)(a4 + 56);
  if (!a2) {
    goto LABEL_36;
  }
LABEL_3:
  if (!a3)
  {
    unint64_t v11 = 0;
LABEL_38:
    unint64_t v22 = v24;
LABEL_41:
    *unint64_t v22 = v4;
    v22[1] = v7;
    v22[2] = v8;
    v22[3] = v9;
    v22[4] = v10;
    return (void *)v11;
  }
  if (a3 < 0) {
    goto LABEL_48;
  }
  unint64_t v11 = 0;
  int64_t v25 = (unint64_t)(v8 + 64) >> 6;
  unint64_t v23 = v8;
  while (1)
  {
    if (v4 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_40;
      }
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      unint64_t v14 = v26;
      uint64_t result = (void *)swift_unknownObjectRelease();
      if (!v26) {
        goto LABEL_40;
      }
      goto LABEL_8;
    }
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v13 = v12 | (v9 << 6);
      goto LABEL_7;
    }
    int64_t v15 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      break;
    }
    if (v15 >= v25)
    {
      int64_t v10 = 0;
      goto LABEL_40;
    }
    unint64_t v16 = *(void *)(v7 + 8 * v15);
    if (v16) {
      goto LABEL_23;
    }
    unint64_t v17 = v9 + 2;
    if (v9 + 2 >= v25)
    {
      int64_t v10 = 0;
      ++v9;
      goto LABEL_40;
    }
    unint64_t v16 = *(void *)(v7 + 8 * v17);
    if (!v16)
    {
      if (v9 + 3 >= v25) {
        goto LABEL_44;
      }
      unint64_t v16 = *(void *)(v7 + 8 * (v9 + 3));
      if (v16)
      {
        int64_t v15 = v9 + 3;
        goto LABEL_23;
      }
      unint64_t v17 = v9 + 4;
      if (v9 + 4 >= v25)
      {
        int64_t v10 = 0;
        v9 += 3;
        goto LABEL_40;
      }
      unint64_t v16 = *(void *)(v7 + 8 * v17);
      if (!v16)
      {
        int64_t v15 = v9 + 5;
        if (v9 + 5 >= v25)
        {
LABEL_44:
          int64_t v10 = 0;
          uint64_t v9 = v17;
          goto LABEL_40;
        }
        unint64_t v16 = *(void *)(v7 + 8 * v15);
        if (!v16)
        {
          Swift::Int v18 = v9 + 6;
          while (v25 != v18)
          {
            unint64_t v16 = *(void *)(v7 + 8 * v18++);
            if (v16)
            {
              int64_t v15 = v18 - 1;
              goto LABEL_23;
            }
          }
          int64_t v10 = 0;
          uint64_t v9 = v25 - 1;
          goto LABEL_40;
        }
        goto LABEL_23;
      }
    }
    int64_t v15 = v17;
LABEL_23:
    int64_t v10 = (v16 - 1) & v16;
    int64_t v13 = __clz(__rbit64(v16)) + (v15 << 6);
    uint64_t v9 = v15;
LABEL_7:
    uint64_t result = *(id *)(*(void *)(v4 + 48) + 8 * v13);
    unint64_t v14 = result;
    if (!result) {
      goto LABEL_40;
    }
LABEL_8:
    ++v11;
    *v6++ = v14;
    if (v11 == a3)
    {
      unint64_t v11 = a3;
LABEL_40:
      int64_t v8 = v23;
      unint64_t v22 = v24;
      goto LABEL_41;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  id v21;

  uint64_t v5 = result;
  uint64_t v6 = a4 + 64;
  unint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    int64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    int64_t v8 = -1;
  }
  uint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    unint64_t v12 = 0;
    int64_t v10 = 0;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    void v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (void *)v10;
  }
  int64_t v10 = a3;
  if (!a3)
  {
    unint64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v11 = a2;
  unint64_t v12 = 0;
  int64_t v13 = 0;
  unint64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  int64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    unint64_t v20 = *(void **)(*(void *)(a4 + 56) + 8 * v16);
    *unint64_t v11 = v20;
    if (v13 == v10)
    {
      Swift::Int v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    uint64_t result = v20;
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    unint64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    Swift::Int v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    uint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    unint64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    uint64_t v9 = 0;
    unint64_t v12 = v17;
    goto LABEL_37;
  }
  Swift::Int v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  Swift::Int v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  Swift::Int v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  unint64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    uint64_t v9 = 0;
    unint64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  Swift::Int v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    unint64_t v17 = v12;
    goto LABEL_18;
  }
  Swift::Int v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    uint64_t v9 = 0;
LABEL_37:
    int64_t v10 = v13;
    goto LABEL_38;
  }
  Swift::Int v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    unint64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    unint64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      uint64_t v9 = 0;
      unint64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    Swift::Int v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(void *)(*(void *)(a4 + 48) + 8 * v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }
  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, unsigned char *a2, int64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  if (!a2)
  {
    int64_t v6 = 0;
    goto LABEL_17;
  }
  int64_t v6 = a3;
  if (!a3)
  {
LABEL_17:
    void *v5 = a4;
    v5[1] = v6;
    return v6;
  }
  if (a3 < 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  unint64_t v7 = *(void *)(a4 + 24);
  if (v7 >> 62)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if ((2 * v7 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  int64_t v8 = (16 * v7) & 0xFFFFFFFFFFFFFFE0;
  if (!v8)
  {
LABEL_16:
    int64_t v6 = v8;
    goto LABEL_17;
  }
  uint64_t result = FixedBitArray.subscript.getter(0, a4);
  if (v8 >= 1)
  {
    *a2 = result & 1;
    if (v6 != 1)
    {
      unint64_t v10 = 1;
      while (v6 != v10)
      {
        if (v8 == v10) {
          goto LABEL_16;
        }
        if (v10 >> 5 >= *(void *)(a4 + 16)) {
          goto LABEL_19;
        }
        a2[v10] = (*(_DWORD *)(a4 + 32 + 4 * (v10 >> 5)) >> v10) & 1;
        if (v6 == ++v10) {
          goto LABEL_17;
        }
      }
      __break(1u);
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    goto LABEL_17;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_39:
    void *v5 = a4;
    v5[1] = v6;
    void v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  uint64_t v24 = -1 << *(unsigned char *)(a4 + 32);
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = 16 * v16;
    Swift::Int v21 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v22 = v21[1];
    long long v23 = *(_OWORD *)(*(void *)(a4 + 56) + v20);
    *(void *)uint64_t v11 = *v21;
    *(void *)(v11 + 8) = v22;
    *(_OWORD *)(v11 + 16) = v23;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      goto LABEL_38;
    }
    v11 += 32;
    swift_bridgeObjectRetain();
    uint64_t result = swift_retain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        unint64_t v9 = 0;
        int64_t v12 = v17;
      }
      else
      {
        unint64_t v18 = *(void *)(v6 + 8 * v12);
        if (v18) {
          goto LABEL_14;
        }
        int64_t v19 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          int64_t v17 = v19;
          goto LABEL_18;
        }
        int64_t v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          unint64_t v18 = *(void *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            int64_t v17 = v12;
            goto LABEL_18;
          }
          int64_t v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            unint64_t v9 = 0;
            goto LABEL_37;
          }
          unint64_t v18 = *(void *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              int64_t v17 = v19 + 1;
              if (__OFADD__(v19, 1)) {
                goto LABEL_42;
              }
              if (v17 >= v14)
              {
                unint64_t v9 = 0;
                int64_t v12 = v14 - 1;
                goto LABEL_37;
              }
              unint64_t v18 = *(void *)(v6 + 8 * v17);
              ++v19;
              if (v18) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v9 = 0;
        int64_t v12 = v17 + 2;
      }
LABEL_37:
      uint64_t v10 = v13;
LABEL_38:
      uint64_t v7 = v24;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    void v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    *uint64_t v11 = *(void *)(*(void *)(a4 + 56) + 8 * v16);
    if (v13 == v10)
    {
      swift_retain();
      goto LABEL_38;
    }
    ++v11;
    uint64_t result = swift_retain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  uint64_t v21;

  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    void v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    Swift::Int v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

char *specialized ActivitySession.__allocating_init(activitySession:manager:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v26 = a5;
  uint64_t v8 = type metadata accessor for Date();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v25 = objc_msgSend(a1, sel_activity);
  id v14 = objc_msgSend(a1, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  swift_unknownObjectRetain();
  id v15 = objc_msgSend(a1, sel_timestamp);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  id v16 = objc_msgSend(a1, sel_isLocallyInitiated);
  id v17 = objc_msgSend(a1, sel_isLightweightPrimaryInitiated);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  unint64_t v18 = (void *)static IMUserNotificationCenter.shared;
  v27[3] = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for IMUserNotificationCenter);
  v27[4] = &protocol witness table for IMUserNotificationCenter;
  v27[0] = v18;
  int64_t v19 = *(uint64_t (**)(id, char *, uint64_t, uint64_t, char *, id, id, void *))(a3 + 1080);
  id v20 = v18;
  Swift::Int v21 = (char *)(id)v19(v25, v13, a2, v26, v10, v16, v17, v27);
  unsigned __int8 v22 = objc_msgSend(a1, sel_isUsingAirplay);

  swift_unknownObjectRelease();
  long long v23 = (unsigned __int8 *)&v21[OBJC_IVAR___CPActivitySession_isUsingAirplay];
  swift_beginAccess();
  unsigned __int8 *v23 = v22;

  return v21;
}

char *specialized ActivitySession.init(activity:id:manager:timestamp:locallyInitiated:lightweightPrimaryInitiated:notificationCenter:)(void (**a1)(void, void), uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  LODWORD(v91) = a6;
  int v89 = a5;
  uint64_t v97 = a4;
  uint64_t v96 = a3;
  uint64_t v90 = a1;
  uint64_t v92 = a9;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v88 = (char *)v83 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  unint64_t v85 = (char *)v83 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103[3] = a10;
  v103[4] = a12;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v103);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a10 - 8) + 32))(boxed_opaque_existential_1, a7, a10);
  Swift::Int v21 = a8;
  DateInterval.init()();
  *(void *)&v21[OBJC_IVAR___CPActivitySession_terminatingHandle] = 0;
  v21[OBJC_IVAR___CPActivitySession_isFirstJoin] = 1;
  unsigned __int8 v22 = (void *)MEMORY[0x1E4FBC860];
  *(void *)&v21[OBJC_IVAR___CPActivitySession_persistentSceneIdentifiers] = MEMORY[0x1E4FBC860];
  v21[OBJC_IVAR___CPActivitySession_persistentSceneIsEligibleForAutoClose] = 0;
  long long v23 = &v21[OBJC_IVAR___CPActivitySession_audioSessionID];
  *(_DWORD *)long long v23 = 0;
  v23[4] = 1;
  uint64_t v24 = &v21[OBJC_IVAR___CPActivitySession_domainAssertion];
  uint64_t v25 = type metadata accessor for ActivitySession.DomainAssertionWrapper(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 1, 1, v25);
  *(void *)&v21[OBJC_IVAR___CPActivitySession_invalidateAssertionsWorkItem] = 0;
  *(void *)&v21[OBJC_IVAR___CPActivitySession_distributionCount] = 0;
  v21[OBJC_IVAR___CPActivitySession_isLocalParticipantActive] = 0;
  *(void *)&v21[OBJC_IVAR___CPActivitySession_activeParticipantIDs] = MEMORY[0x1E4FBC870];
  *(void *)&v21[OBJC_IVAR___CPActivitySession_applicationState] = 1;
  uint64_t v26 = OBJC_IVAR___CPActivitySession_foregroundPresentationSubject;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  swift_allocObject();
  *(void *)&v21[v26] = PassthroughSubject.init()();
  *(void *)&v21[OBJC_IVAR___CPActivitySession_capabilities] = 0;
  Date.init()();
  unint64_t v27 = &v21[OBJC_IVAR___CPActivitySession_permittedJoinTimestamp];
  uint64_t v28 = type metadata accessor for Date();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(void (**)(void, void, void, void))(v29 + 56);
  uint64_t v87 = v29 + 56;
  uint64_t v86 = v30;
  v30(v27, 1, 1, v28);
  *(void *)&v21[OBJC_IVAR___CPActivitySession_activeParticipantsUpdateItem] = 0;
  uint64_t v31 = OBJC_IVAR___CPActivitySession_activeParticipants;
  *(void *)&v21[v31] = specialized Dictionary.init(dictionaryLiteral:)(v22);
  uint64_t v32 = &v21[OBJC_IVAR___CPActivitySession_sessionManager];
  *(void *)&v21[OBJC_IVAR___CPActivitySession_sessionManager + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v21[OBJC_IVAR___CPActivitySession_rtcReporter] = 0;
  *(void *)&v21[OBJC_IVAR___CPActivitySession_connection] = 0;
  uint64_t v93 = v18;
  uint64_t v33 = *(void (**)(void, void, void))(v18 + 16);
  uint64_t v95 = a2;
  uint64_t v94 = v17;
  uint64_t v84 = (void (*)(char *, uint64_t, uint64_t))v33;
  v33(&v21[OBJC_IVAR___CPActivitySession_id], a2, v17);
  uint64_t v34 = (id *)&v21[OBJC_IVAR___CPActivitySession_activity];
  char v35 = v90;
  *(void *)&v21[OBJC_IVAR___CPActivitySession_activity] = v90;
  uint64_t v36 = v35;
  id v37 = objc_msgSend(v36, sel_metadata);
  objc_msgSend(v37, sel_saveImageToDisk);

  swift_beginAccess();
  *((void *)v32 + 1) = a11;
  swift_unknownObjectWeakAssign();
  *(void *)&v21[OBJC_IVAR___CPActivitySession_queue] = (*(uint64_t (**)(uint64_t, uint64_t))(a11 + 8))(v92, a11);
  uint64_t v90 = (void (**)(void, void))v29;
  uint64_t v38 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v29 + 16);
  uint64_t v92 = v28;
  uint64_t v39 = v28;
  char v40 = v89;
  v38(&v21[OBJC_IVAR___CPActivitySession_timestamp], v97, v39);
  id v41 = objc_msgSend(self, sel_anonymousListener);
  *(void *)&v21[OBJC_IVAR___CPActivitySession_listener] = v41;
  id v42 = objc_msgSend(v41, sel_endpoint);
  *(void *)&v21[OBJC_IVAR___CPActivitySession_endpoint] = v42;
  if (v40) {
    unint64_t v43 = 0x8000000000000000;
  }
  else {
    unint64_t v43 = 0x8000000000000010;
  }
  uint64_t v44 = &v21[OBJC_IVAR___CPActivitySession__state];
  swift_beginAccess();
  v101[0] = v43;
  Published.init(initialValue:)();
  swift_endAccess();
  swift_beginAccess();
  uint64_t v45 = &unk_1EB7CC000;
  if (objc_msgSend(*v34, sel_isScreenSharingActivity))
  {
    swift_beginAccess();
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<ActivitySession.State>);
    (*(void (**)(char *, uint64_t))(*(void *)(v46 - 8) + 8))(v44, v46);
    v98[0] = 0x8000000000000000;
    Published.init(initialValue:)();
    swift_endAccess();
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for Logger();
    __swift_project_value_buffer(v47, (uint64_t)static Log.host);
    uint64_t v48 = v85;
    uint64_t v49 = v94;
    v84(v85, v95, v94);
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v50, v51))
    {
      BOOL v52 = (uint8_t *)swift_slowAlloc();
      uint64_t v53 = swift_slowAlloc();
      uint64_t v84 = (void (*)(char *, uint64_t, uint64_t))v36;
      char v54 = v48;
      uint64_t v55 = v53;
      v101[0] = v53;
      *(_DWORD *)BOOL v52 = 136315138;
      v83[1] = v52 + 4;
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
      v98[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, (uint64_t *)v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v36 = v84;
      (*(void (**)(char *, uint64_t))(v93 + 8))(v54, v49);
      _os_log_impl(&dword_1B0DF7000, v50, v51, "Setting initial ActivitySession(%s) state to waiting for screen sharing activity", v52, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v55, -1, -1);
      uint64_t v58 = v52;
      uint64_t v45 = (void *)&unk_1EB7CC000;
      MEMORY[0x1B3EA39E0](v58, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v93 + 8))(v48, v49);
    }
  }
  v21[OBJC_IVAR___CPActivitySession_isLocallyInitiated] = v40 & 1;
  v21[OBJC_IVAR___CPActivitySession_isLightweightPrimaryInitiated] = v91 & 1;
  outlined init with copy of UserNotificationCenter((uint64_t)v103, (uint64_t)&v21[OBJC_IVAR___CPActivitySession_notificationCenter]);
  v21[OBJC_IVAR___CPActivitySession_isUsingAirplay] = 0;

  BOOL v59 = (objc_class *)type metadata accessor for ActivitySession(0);
  v102.receiver = v21;
  v102.super_class = v59;
  uint64_t v60 = (char *)objc_msgSendSuper2(&v102, sel_init);
  uint64_t v61 = *(void **)&v60[OBJC_IVAR___CPActivitySession_listener];
  uint64_t v62 = v60;
  objc_msgSend(v61, sel_setDelegate_, v62);
  objc_msgSend(v61, sel_resume);
  type metadata accessor for RTCReporter();
  swift_allocObject();
  uint64_t v63 = v62;
  uint64_t v64 = RTCReporter.init(session:)(v63);
  uint64_t v65 = &v63[OBJC_IVAR___CPActivitySession_rtcReporter];
  swift_beginAccess();
  *(void *)uint64_t v65 = v64;
  uint64_t v66 = swift_release();
  (*(void (**)(uint64_t *__return_ptr, uint64_t))((*MEMORY[0x1E4FBC8C8] & *(void *)v63) + 0x2A0))(v98, v66);
  unint64_t v67 = v98[0];
  unint64_t v99 = 0x8000000000000000;
  uint64_t v100 = v98[0];
  LOBYTE(v65) = static ActivitySession.State.== infix(_:_:)((unint64_t *)&v100, &v99);
  outlined consume of ActivitySession.State(v67);
  if (v65)
  {
    uint64_t v68 = (uint64_t)v88;
    Date.init()();
    v86(v68, 0, 1, v92);
    uint64_t v69 = (uint64_t)&v63[OBJC_IVAR___CPActivitySession_permittedJoinTimestamp];
    swift_beginAccess();
    outlined assign with take of ActivitySession.DomainAssertionWrapper?(v68, v69, (uint64_t *)&demangling cache variable for type metadata for Date?);
    swift_endAccess();
  }
  if (v45[408] != -1) {
    swift_once();
  }
  uint64_t v70 = type metadata accessor for Logger();
  __swift_project_value_buffer(v70, (uint64_t)static Log.host);
  id v71 = v36;
  uint64_t v72 = v63;
  id v73 = v71;
  uint64_t v74 = v72;
  uint64_t v75 = Logger.logObject.getter();
  os_log_type_t v76 = static os_log_type_t.default.getter();
  unint64_t v91 = v75;
  if (os_log_type_enabled(v75, v76))
  {
    uint64_t v77 = swift_slowAlloc();
    uint64_t v78 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v77 = 138412546;
    v98[0] = (uint64_t)v74;
    uint64_t v79 = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v78 = v60;

    *(_WORD *)(v77 + 12) = 2112;
    v98[0] = (uint64_t)v73;
    id v80 = v73;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v78[1] = v73;

    _os_log_impl(&dword_1B0DF7000, v91, v76, "Initialized %@ activity: %@", (uint8_t *)v77, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v78, -1, -1);
    MEMORY[0x1B3EA39E0](v77, -1, -1);
    swift_unknownObjectRelease();
  }
  else
  {

    swift_unknownObjectRelease();
  }
  uint64_t v81 = v94;

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v103);
  v90[1](v97, v92);
  (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v95, v81);
  return v74;
}

uint64_t specialized static ActivitySession.State.InvalidationReason.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a2[1];
  if (!v3)
  {
    if (!v4)
    {
      swift_bridgeObjectRelease_n();
      return 1;
    }
    return 0;
  }
  if (!v4) {
    return 0;
  }
  if (*a1 == *a2 && v3 == v4) {
    return 1;
  }
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

unint64_t outlined copy of ActivitySession.State(unint64_t result)
{
  if ((result >> 62) <= 1) {
    return swift_retain();
  }
  return result;
}

unint64_t outlined consume of ActivitySession.State(unint64_t result)
{
  if ((result >> 62) <= 1) {
    return swift_release();
  }
  return result;
}

uint64_t sub_1B0E23B40()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in ActivitySession.logDurationMetric(_:)()
{
  return swift_bridgeObjectRetain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_1B0E23B88()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void partial apply for closure #1 in ActivitySession.invalidateAssertions(useDelay:)()
{
  closure #1 in ActivitySession.invalidateAssertions(useDelay:)(v0);
}

uint64_t outlined init with copy of UserNotificationCenter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1B0E23C2C()
{
  swift_release();
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #2 in ActivitySession.updateActiveParticipants(with:fromCache:)()
{
  closure #2 in ActivitySession.updateActiveParticipants(with:fromCache:)(*(void *)(v0 + 16));
}

uint64_t sub_1B0E23C74()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

void partial apply for closure #1 in closure #3 in ActivitySession.updateActiveParticipants(with:fromCache:)(void *a1)
{
  closure #1 in closure #3 in ActivitySession.updateActiveParticipants(with:fromCache:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(NSObject **)(v1 + 32));
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : Any]);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodingKey);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 6) + 32;
    unint64_t v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static Data.== infix(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x1B0E2401CLL);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_27;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v17 = 1;
            }
            else
            {
              switch(a2 >> 62)
              {
                case 1uLL:
                  if (a1 >> 32 < (int)a1) {
                    goto LABEL_29;
                  }
                  outlined copy of Data._Representation(a3, a4);
                  outlined copy of Data._Representation(a1, a2);
                  char v17 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
                  outlined consume of Data._Representation(a3, a4);
                  uint64_t v18 = a1;
                  unint64_t v19 = a2;
                  break;
                case 2uLL:
                  uint64_t v20 = a2 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v21 = *(void *)(a1 + 16);
                  uint64_t v22 = *(void *)(a1 + 24);
                  outlined copy of Data._Representation(a3, a4);
                  swift_retain();
                  swift_retain();
                  char v17 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v21, v22, v20, a3, a4);
                  outlined consume of Data._Representation(a3, a4);
                  swift_release();
                  swift_release();
                  return v17 & 1;
                case 3uLL:
                  outlined copy of Data._Representation(a3, a4);
                  uint64_t v16 = 0;
                  uint64_t v15 = 0;
                  goto LABEL_22;
                default:
                  outlined copy of Data._Representation(a3, a4);
                  uint64_t v15 = a2 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v16 = a1;
LABEL_22:
                  char v17 = specialized Data.InlineData.withUnsafeBytes<A>(_:)(v16, v15, a3, a4);
                  uint64_t v18 = a3;
                  unint64_t v19 = a4;
                  break;
              }
              outlined consume of Data._Representation(v18, v19);
            }
          }
          else
          {
            char v17 = 0;
          }
          return v17 & 1;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_28;
        case 3uLL:
          char v17 = v8 == 0;
          return v17 & 1;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t specialized Set.init<A>(_:)(unint64_t a1)
{
  return specialized Set.init<A>(_:)(a1, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession, 0x1E4FADB58, (unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (void (*)(id *, uint64_t))specialized Set._Variant.insert(_:));
}

{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void **v7;
  void *v8;
  id v9;
  uint64_t v10;

  uint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for AddressableMember();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AddressableMember and conformance NSObject, (void (*)(uint64_t))type metadata accessor for AddressableMember);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v4) {
      return v10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      return v10;
    }
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        uint64_t v6 = (void *)MEMORY[0x1B3EA25C0](i, a1);
        specialized Set._Variant.insert(_:)(&v9, v6);
      }
    }
    else
    {
      uint64_t v7 = (void **)(a1 + 32);
      do
      {
        uint64_t v8 = *v7++;
        specialized Set._Variant.insert(_:)(&v9, v8);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

{
  return specialized Set.init<A>(_:)(a1, (unint64_t *)&lazy cache variable for type metadata for TUHandle, 0x1E4FADBD8, (unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (void (*)(id *, uint64_t))specialized Set._Variant.insert(_:));
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return MEMORY[0x1E4FBC868];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, TUConversationParticipant>);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = a1[4];
  uint64_t v5 = (void *)a1[5];
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    id v17 = v5;
    return (unint64_t)v3;
  }
  uint64_t v8 = (void **)(a1 + 7);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v3[6] + v9) = v4;
    *(void *)(v3[7] + v9) = v5;
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      break;
    }
    v3[2] = v12;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v13 = v8 + 2;
    uint64_t v4 = (uint64_t)*(v8 - 1);
    uint64_t v14 = *v8;
    id v15 = v5;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    uint64_t v8 = v13;
    uint64_t v5 = v14;
    if (v16) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Set.init<A>(_:)(unint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4, void (*a5)(id *, uint64_t))
{
  unint64_t v9 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for TUConversationActivity(0, a2);
  lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject(a4, a2);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v17 = result;
  if (v9)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v11) {
      return v17;
    }
  }
  else
  {
    uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v11) {
      return v17;
    }
  }
  if (v11 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        uint64_t v13 = MEMORY[0x1B3EA25C0](i, a1);
        a5(&v16, v13);
      }
    }
    else
    {
      uint64_t v14 = (void **)(a1 + 32);
      do
      {
        id v15 = *v14++;
        a5(&v16, (uint64_t)v15);

        --v11;
      }
      while (v11);
    }
    return v17;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence.first(where:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a1 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a1 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v12 << 6);
      goto LABEL_21;
    }
    int64_t v15 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v15 >= v10) {
      goto LABEL_24;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v12;
    if (!v16)
    {
      int64_t v12 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_24;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v12);
      if (!v16)
      {
        int64_t v12 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_24;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v12);
        if (!v16)
        {
          int64_t v12 = v15 + 3;
          if (v15 + 3 >= v10) {
            goto LABEL_24;
          }
          unint64_t v16 = *(void *)(v6 + 8 * v12);
          if (!v16)
          {
            int64_t v17 = v15 + 4;
            if (v17 >= v10)
            {
LABEL_24:
              swift_release();
              return 0;
            }
            unint64_t v16 = *(void *)(v6 + 8 * v17);
            int64_t v12 = v17;
            if (!v16) {
              break;
            }
          }
        }
      }
    }
LABEL_20:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v12 << 6);
LABEL_21:
    uint64_t v18 = *(void *)(*(void *)(a1 + 48) + 8 * v14);
    uint64_t result = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a2) + 0x380))(result);
    if (result)
    {
      uint64_t v20 = v19;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 24))(v18, a3, a4, ObjectType, v20);
      uint64_t result = swift_unknownObjectRelease();
      if (v22)
      {
        swift_release();

        return v18;
      }
    }
  }
  while (1)
  {
    int64_t v12 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v12 >= v10) {
      goto LABEL_24;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v12);
    ++v17;
    if (v16) {
      goto LABEL_20;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, NSObject *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a1 + 56);
  int64_t v28 = (unint64_t)(v8 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  while (v10)
  {
    unint64_t v13 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v14 = v13 | (v12 << 6);
LABEL_22:
    uint64_t v18 = *(void *)(*(void *)(a1 + 48) + 8 * v14);
    dispatch_group_enter(a2);
    uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a3) + 0x380))();
    if (result)
    {
      uint64_t v20 = v19;
      uint64_t ObjectType = swift_getObjectType();
      unint64_t v32 = v10;
      uint64_t v21 = (void *)swift_allocObject();
      v21[2] = a2;
      v21[3] = a3;
      v21[4] = v18;
      v21[5] = a6;
      uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t, void (*)(void *), void *, uint64_t, uint64_t))(v20 + 40);
      uint64_t v22 = a2;
      long long v23 = a3;
      swift_retain();
      v30(v18, a4, a5, partial apply for closure #1 in closure #1 in ActivitySession.sendResource(atURL:to:metadata:completion:), v21, ObjectType, v20);
      unint64_t v10 = v32;
      swift_release();
      uint64_t result = swift_unknownObjectRelease();
    }
  }
  int64_t v15 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v15 >= v28) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v24 + 8 * v15);
  ++v12;
  if (v16) {
    goto LABEL_21;
  }
  int64_t v12 = v15 + 1;
  if (v15 + 1 >= v28) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v24 + 8 * v12);
  if (v16) {
    goto LABEL_21;
  }
  int64_t v12 = v15 + 2;
  if (v15 + 2 >= v28) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v24 + 8 * v12);
  if (v16) {
    goto LABEL_21;
  }
  int64_t v12 = v15 + 3;
  if (v15 + 3 >= v28) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v24 + 8 * v12);
  if (v16)
  {
LABEL_21:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v12 << 6);
    goto LABEL_22;
  }
  int64_t v17 = v15 + 4;
  if (v17 >= v28) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v24 + 8 * v17);
  if (v16)
  {
    int64_t v12 = v17;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v12 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v12 >= v28) {
      return swift_release();
    }
    unint64_t v16 = *(void *)(v24 + 8 * v12);
    ++v17;
    if (v16) {
      goto LABEL_21;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized ActivitySession.invalidationBlock(execute:)(void *a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = closure #1 in ActivitySession.join(audioSessionID:completion:)(a2, a3 | ((HIDWORD(a3) & 1) << 32), a4, a5);
  if (v5)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Log.default);
    id v9 = a1;
    id v10 = v5;
    id v11 = v9;
    id v12 = v5;
    unint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      log = v13;
      unint64_t v16 = (void *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      uint64_t v24 = v23;
      *(_DWORD *)uint64_t v15 = 138412546;
      id v17 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v18 = v16;
      *unint64_t v16 = v11;

      *(_WORD *)(v15 + 12) = 2080;
      id v19 = v5;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v20 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      unint64_t v13 = log;
      _os_log_impl(&dword_1B0DF7000, log, v14, "%@ was invalidated with error: %s", (uint8_t *)v15, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v18, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v23, -1, -1);
      MEMORY[0x1B3EA39E0](v15, -1, -1);
    }
    else
    {
    }
    objc_msgSend(v11, sel_resetSession);
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1B0E251EC()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t specialized ActivitySession.invalidationBlock(execute:)(void *a1, uint64_t a2)
{
  return specialized ActivitySession.invalidationBlock(execute:)(a1, a2, (uint64_t (*)(uint64_t))closure #1 in FastSyncActivitySession.leave());
}

uint64_t specialized ActivitySession.invalidationBlock(execute:)(void *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = a3(a2);
  if (v3)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Log.default);
    id v7 = a1;
    id v8 = v3;
    id v9 = v7;
    id v10 = v3;
    id v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      log = v11;
      os_log_type_t v14 = (void *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v22 = v21;
      *(_DWORD *)uint64_t v13 = 138412546;
      id v15 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      unint64_t v16 = v14;
      *os_log_type_t v14 = v9;

      *(_WORD *)(v13 + 12) = 2080;
      id v17 = v3;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v18 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      id v11 = log;
      _os_log_impl(&dword_1B0DF7000, log, v12, "%@ was invalidated with error: %s", (uint8_t *)v13, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v16, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v21, -1, -1);
      MEMORY[0x1B3EA39E0](v13, -1, -1);
    }
    else
    {
    }
    objc_msgSend(v9, sel_resetSession);
    return swift_willThrow();
  }
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    id v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    size_t v6 = 4 * v4;
    id v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  id v15 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a2) + 0x368);
  uint64_t isUniquelyReferenced_nonNull_native = swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  size_t v6 = (void *)MEMORY[0x1E4FBC860];
  do
  {
    id v7 = *(id *)(a1 + 8 * v5 + 32);
    uint64_t v8 = v15(isUniquelyReferenced_nonNull_native);
    if (*(void *)(v8 + 16) && (unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v7), (v10 & 1) != 0))
    {
      id v11 = *(id *)(*(void *)(v8 + 56) + 8 * v9);
      swift_bridgeObjectRelease();
      id v7 = objc_msgSend(v11, sel_identifier);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
      size_t v6 = (void *)isUniquelyReferenced_nonNull_native;
    }
    unint64_t v13 = v6[2];
    unint64_t v12 = v6[3];
    if (v13 >= v12 >> 1)
    {
      uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v6);
      size_t v6 = (void *)isUniquelyReferenced_nonNull_native;
    }
    ++v5;
    v6[2] = v13 + 1;
    v6[v13 + 4] = v7;
  }
  while (v2 != v5);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t type metadata accessor for ActivitySession(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for ActivitySession);
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_1B0E257EC()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in ActivitySession.presentSessionDismissalAlert(for:allowingCancellation:completion:)(uint64_t a1)
{
  return closure #1 in ActivitySession.presentSessionDismissalAlert(for:allowingCancellation:completion:)(a1, *(unsigned char *)(v1 + 16), *(void **)(v1 + 24), *(uint64_t (**)(uint64_t))(v1 + 32), *(void *)(v1 + 40));
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t partial apply for closure #1 in ActivitySession.endSessionForAll(completion:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 16)) + 0x3E0))();
}

uint64_t partial apply for closure #1 in ActivitySession.endSessionForLocal(completion:)()
{
  return closure #1 in ActivitySession.endSessionForLocal(completion:)(*(void **)(v0 + 16));
}

void type metadata accessor for TUConversationActivityLifetimePolicy(uint64_t a1)
{
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t partial apply for closure #1 in ActivitySession.refreshDataCryptor()(uint64_t a1)
{
  return closure #1 in ActivitySession.refreshDataCryptor()(a1, *(void **)(v1 + 16));
}

uint64_t sub_1B0E25974()
{
  return objectdestroy_80Tm(MEMORY[0x1E4FBC8D0]);
}

uint64_t partial apply for closure #1 in ActivitySession.fetchDataCryptor(completion:)(uint64_t a1)
{
  return closure #1 in ActivitySession.fetchDataCryptor(completion:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a5) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    size_t v6 = a4 + 16 * a1 + 32;
    id v7 = a3 + 16 * v5;
    if (v6 >= v7 || v6 + 16 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized ActivitySession.listener(_:shouldAcceptNewConnection:)(void *a1)
{
  void (*v17)(unint64_t *__return_ptr, uint64_t);
  unint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  char *v23;
  char *v24;
  NSObject *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  char *v33;
  NSObject *v34;
  id v35;
  NSObject *v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  void *v41;
  NSObject *v42;
  id v43;
  uint64_t v44;
  NSObject *v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  os_log_type_t type;
  os_log_t log;
  unint64_t v51[3];
  unint64_t v52;
  unint64_t aBlock;
  uint64_t v54;
  uint64_t (*v55)(uint64_t);
  void *v56;
  uint64_t (*v57)();
  uint64_t v58;
  char v59;

  uint64_t v2 = v1;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.host);
  uint64_t v5 = a1;
  size_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    aBlock = (unint64_t)v5;
    uint64_t v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v5;

    _os_log_impl(&dword_1B0DF7000, v6, v7, "Asked to accept new connection from %@", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v9, -1, -1);
    MEMORY[0x1B3EA39E0](v8, -1, -1);
  }
  else
  {
  }
  BOOL v59 = 0;
  uint64_t v11 = *(NSObject **)&v2[OBJC_IVAR___CPActivitySession_queue];
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = &v59;
  *(void *)(v12 + 24) = v2;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = partial apply for closure #1 in ActivitySession.listener(_:shouldAcceptNewConnection:);
  *(void *)(v13 + 24) = v12;
  unint64_t v57 = thunk for @callee_guaranteed () -> ()partial apply;
  uint64_t v58 = v13;
  aBlock = MEMORY[0x1E4F143A8];
  char v54 = 1107296256;
  uint64_t v55 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v56 = &block_descriptor_167;
  os_log_type_t v14 = _Block_copy(&aBlock);
  uint64_t isEscapingClosureAtFileLocation = v2;
  swift_retain();
  swift_release();
  dispatch_sync(v11, v14);
  _Block_release(v14);
  LOBYTE(v14) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v14 & 1) == 0)
  {
    id v17 = *(void (**)(unint64_t *__return_ptr, uint64_t))((*MEMORY[0x1E4FBC8C8] & *(void *)isEscapingClosureAtFileLocation)
                                                                         + 0x2A0);
    v17(&aBlock, result);
    uint64_t v18 = aBlock;
    v51[0] = aBlock;
    BOOL v52 = 0x8000000000000008;
    unint64_t v19 = static ActivitySession.State.== infix(_:_:)(v51, &v52);
    uint64_t v20 = outlined consume of ActivitySession.State(v18);
    if ((v19 & 1) != 0
      || (v17(&aBlock, v20),
          uint64_t v21 = aBlock,
          v51[0] = aBlock,
          BOOL v52 = 0x8000000000000000,
          uint64_t v22 = static ActivitySession.State.== infix(_:_:)(v51, &v52),
          outlined consume of ActivitySession.State(v21),
          (v22 & 1) != 0))
    {
      if (v59 == 1)
      {
        uint64_t v23 = (char *)objc_allocWithZone((Class)type metadata accessor for ActivitySessionHostConnection());
        swift_unknownObjectWeakInit();
        uint64_t v24 = &v23[direct field offset for ActivitySessionHostConnection.__isAppProcess];
        *(void *)uint64_t v24 = specialized thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@unowned Bool);
        *((void *)v24 + 1) = 0;
        uint64_t v25 = v5;
        uint64_t v5 = v11;
        uint64_t v26 = specialized XPCHostConnection.init(connection:queue:)(v25, v5);
        if (!v26)
        {
          uint64_t v45 = v25;
          uint64_t v46 = Logger.logObject.getter();
          uint64_t v47 = static os_log_type_t.default.getter();
          log = v46;
          if (!os_log_type_enabled(v46, v47))
          {

            log = v45;
            goto LABEL_17;
          }
          uint64_t v48 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v48 = 67109120;
          LODWORD(aBlock) = [v45 processIdentifier];
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          _os_log_impl(&dword_1B0DF7000, v46, v47, "ActivitySessionHostConnection could not be created; rejecting connection from PID %d.",
            v48,
            8u);
          uint64_t v44 = (uint64_t)v48;
          goto LABEL_15;
        }
        unint64_t v27 = v26;
        int64_t v28 = 1;
        swift_beginAccess();
        swift_unknownObjectWeakAssign();
        uint64_t v29 = swift_allocObject();
        *(void *)(v29 + 16) = isEscapingClosureAtFileLocation;
        *(void *)(v29 + 24) = v27;
        uint64_t v30 = swift_allocObject();
        *(void *)(v30 + 16) = partial apply for closure #2 in ActivitySession.listener(_:shouldAcceptNewConnection:);
        *(void *)(v30 + 24) = v29;
        unint64_t v57 = thunk for @callee_guaranteed () -> ()partial apply;
        uint64_t v58 = v30;
        aBlock = MEMORY[0x1E4F143A8];
        char v54 = 1107296256;
        uint64_t v55 = thunk for @escaping @callee_guaranteed () -> ();
        uint64_t v56 = &block_descriptor_177;
        uint64_t v31 = _Block_copy(&aBlock);
        unint64_t v32 = (id)isEscapingClosureAtFileLocation;
        uint64_t v33 = v27;
        swift_retain();
        swift_release();
        dispatch_sync(v5, v31);

        _Block_release(v31);
        uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
        swift_release();
        swift_release();
        swift_release();
        if ((isEscapingClosureAtFileLocation & 1) == 0) {
          return v28;
        }
        __break(1u);
      }
    }
    uint64_t v34 = v5;
    char v35 = (id)isEscapingClosureAtFileLocation;
    uint64_t v36 = v34;
    id v37 = v35;
    uint64_t v38 = Logger.logObject.getter();
    uint64_t v39 = static os_log_type_t.default.getter();
    log = v38;
    if (!os_log_type_enabled(v38, v39))
    {

      log = v36;
      goto LABEL_17;
    }
    char v40 = swift_slowAlloc();
    id v41 = (void *)swift_slowAlloc();
    *(_DWORD *)char v40 = 138412546;
    aBlock = (unint64_t)v36;
    os_log_type_t type = v39;
    id v42 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t *v41 = v36;

    *(_WORD *)(v40 + 12) = 2112;
    aBlock = (unint64_t)v37;
    unint64_t v43 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v41[1] = isEscapingClosureAtFileLocation;

    _os_log_impl(&dword_1B0DF7000, v38, type, "Dropping new connection %@ because state isn't accepting new connections %@", (uint8_t *)v40, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v41, -1, -1);
    uint64_t v44 = v40;
LABEL_15:
    MEMORY[0x1B3EA39E0](v44, -1, -1);
LABEL_17:
    swift_release();

    return 0;
  }
  __break(1u);
  return result;
}

uint64_t sub_1B0E26590()
{
  return objectdestroy_80Tm(MEMORY[0x1E4FBC898]);
}

uint64_t partial apply for closure #1 in ActivitySession.associateScene(sceneID:)()
{
  return (*(uint64_t (**)(void, void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 16)) + 0x490))(*(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:)(void *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(result + 16);
  if (!v3) {
    return MEMORY[0x1E4FBC860];
  }
  unint64_t v6 = 0;
  uint64_t v7 = result + 40;
  uint64_t v8 = -(uint64_t)v3;
  uint64_t v9 = MEMORY[0x1E4FBC860];
  uint64_t v19 = result + 40;
  do
  {
    if (v6 <= v3) {
      unint64_t v10 = v3;
    }
    else {
      unint64_t v10 = v6;
    }
    uint64_t v11 = -(uint64_t)v10;
    for (uint64_t i = (uint64_t *)(v7 + 16 * v6++); ; i += 2)
    {
      if (v11 + v6 == 1)
      {
        __break(1u);
        return result;
      }
      uint64_t v13 = *(i - 1);
      uint64_t v14 = *i;
      if (v13 != a2 || v14 != a3)
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0) {
          break;
        }
      }
      ++v6;
      if (v8 + v6 == 1) {
        return v9;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0) {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1);
    }
    unint64_t v17 = *(void *)(v9 + 16);
    unint64_t v16 = *(void *)(v9 + 24);
    if (v17 >= v16 >> 1) {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
    }
    *(void *)(v9 + 16) = v17 + 1;
    uint64_t v18 = v9 + 16 * v17;
    *(void *)(v18 + 32) = v13;
    *(void *)(v18 + 40) = v14;
    unint64_t v3 = v20;
    uint64_t v7 = v19;
  }
  while (v8 + v6);
  return v9;
}

{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(long long *);
  uint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(long long *);
  long long v15[2];
  long long v16[2];
  unint64_t v17;

  uint64_t v5 = MEMORY[0x1E4FBC860];
  unint64_t v17 = MEMORY[0x1E4FBC860];
  unint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    uint64_t v7 = (uint64_t (*)(long long *))result;
    uint64_t v5 = 0;
    uint64_t v8 = a3 + 32;
    uint64_t v9 = MEMORY[0x1E4FBC860];
    uint64_t v13 = *(void *)(a3 + 16);
    uint64_t v14 = (uint64_t (*)(long long *))result;
    while (v5 < *(void *)(a3 + 16))
    {
      outlined init with copy of UserNotificationCenter(v8, (uint64_t)v16);
      unint64_t v10 = v7(v16);
      if (v3)
      {
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
        swift_release();
        swift_bridgeObjectRelease();
        return v5;
      }
      if (v10)
      {
        outlined init with take of BackgroundSessionManagerDataSource(v16, (uint64_t)v15);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1);
        }
        uint64_t v9 = v17;
        uint64_t v12 = *(void *)(v17 + 16);
        uint64_t v11 = *(void *)(v17 + 24);
        if (v12 >= v11 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
          uint64_t v9 = v17;
        }
        *(void *)(v9 + 16) = v12 + 1;
        uint64_t result = outlined init with take of BackgroundSessionManagerDataSource(v15, v9 + 40 * v12 + 32);
        unint64_t v6 = v13;
        uint64_t v7 = v14;
      }
      else
      {
        uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
      }
      ++v5;
      v8 += 40;
      if (v6 == v5)
      {
        uint64_t v5 = v17;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return v5;
  }
  return result;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

void partial apply for closure #1 in ActivitySession.updateActivity(_:)(uint64_t a1, uint64_t a2)
{
  closure #1 in ActivitySession.updateActivity(_:)(a1, a2, *(void **)(v2 + 16));
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined copy of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

uint64_t type metadata accessor for ActivitySession.DomainAssertionWrapper(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for ActivitySession.DomainAssertionWrapper);
}

uint64_t type metadata accessor for ActivitySession(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t specialized ActivitySession.assertionWillInvalidate(_:)()
{
  uint64_t v1 = *(NSObject **)&v0[OBJC_IVAR___CPActivitySession_queue];
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for closure #1 in ActivitySession.assertionWillInvalidate(_:);
  *(void *)(v3 + 24) = v2;
  v8[4] = partial apply for thunk for @callee_guaranteed () -> ();
  v8[5] = v3;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1107296256;
  v8[2] = thunk for @escaping @callee_guaranteed () -> ();
  v8[3] = &block_descriptor_157;
  uint64_t v4 = _Block_copy(v8);
  uint64_t v5 = v0;
  swift_retain();
  swift_release();
  dispatch_sync(v1, v4);
  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

void specialized ActivitySession.assertion(_:didInvalidateWithError:)(void *a1)
{
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.host);
  id v3 = a1;
  id v4 = a1;
  oslog = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v5))
  {
    unint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v13 = v7;
    *(_DWORD *)unint64_t v6 = 136315138;
    if (a1)
    {
      id v8 = a1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v9 = String.init<A>(reflecting:)();
      unint64_t v11 = v10;
    }
    else
    {
      unint64_t v11 = 0xE300000000000000;
      uint64_t v9 = 7104878;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, oslog, v5, "[Assertion] DomainAssertionObserver didInvalidateWithError for app with error:%s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v7, -1, -1);
    MEMORY[0x1B3EA39E0](v6, -1, -1);
  }
  else
  {
  }
}

unint64_t lazy protocol witness table accessor for type ActivitySessionErrors and conformance ActivitySessionErrors()
{
  unint64_t result = lazy protocol witness table cache variable for type ActivitySessionErrors and conformance ActivitySessionErrors;
  if (!lazy protocol witness table cache variable for type ActivitySessionErrors and conformance ActivitySessionErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActivitySessionErrors and conformance ActivitySessionErrors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ActivitySessionErrors and conformance ActivitySessionErrors;
  if (!lazy protocol witness table cache variable for type ActivitySessionErrors and conformance ActivitySessionErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActivitySessionErrors and conformance ActivitySessionErrors);
  }
  return result;
}

uint64_t sub_1B0E26CB4()
{
  swift_release();
  swift_release();

  swift_release();
  outlined consume of Data._Representation(*(void *)(v0 + 56), *(void *)(v0 + 64));
  return MEMORY[0x1F4186498](v0, 72, 7);
}

void partial apply for closure #2 in ActivitySession.sendResource(atURL:to:metadata:completion:)()
{
  closure #2 in ActivitySession.sendResource(atURL:to:metadata:completion:)(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64));
}

unint64_t lazy protocol witness table accessor for type ActivitySession.Errors and conformance ActivitySession.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type ActivitySession.Errors and conformance ActivitySession.Errors;
  if (!lazy protocol witness table cache variable for type ActivitySession.Errors and conformance ActivitySession.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActivitySession.Errors and conformance ActivitySession.Errors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ActivitySession.Errors and conformance ActivitySession.Errors;
  if (!lazy protocol witness table cache variable for type ActivitySession.Errors and conformance ActivitySession.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActivitySession.Errors and conformance ActivitySession.Errors);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ActivitySession.Capabilities and conformance ActivitySession.Capabilities()
{
  unint64_t result = lazy protocol witness table cache variable for type ActivitySession.Capabilities and conformance ActivitySession.Capabilities;
  if (!lazy protocol witness table cache variable for type ActivitySession.Capabilities and conformance ActivitySession.Capabilities)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActivitySession.Capabilities and conformance ActivitySession.Capabilities);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ActivitySession.Capabilities and conformance ActivitySession.Capabilities;
  if (!lazy protocol witness table cache variable for type ActivitySession.Capabilities and conformance ActivitySession.Capabilities)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActivitySession.Capabilities and conformance ActivitySession.Capabilities);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ActivitySession.Capabilities and conformance ActivitySession.Capabilities;
  if (!lazy protocol witness table cache variable for type ActivitySession.Capabilities and conformance ActivitySession.Capabilities)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActivitySession.Capabilities and conformance ActivitySession.Capabilities);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ActivitySession.Capabilities and conformance ActivitySession.Capabilities;
  if (!lazy protocol witness table cache variable for type ActivitySession.Capabilities and conformance ActivitySession.Capabilities)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActivitySession.Capabilities and conformance ActivitySession.Capabilities);
  }
  return result;
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in ActivitySession()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.queue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.applicationLauncher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.localParticipant(with:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.activeRemoteParticipant(with:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.activeRemoteParticipant(with:for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 40))();
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.sessionChanged(session:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.sessionIsJoinable(session:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.session(session:receivedEvent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.session(session:fetchDataCryptorForTopic:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 72))();
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.session(session:requestEncryptionKeysForParticipants:topicName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 80))();
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.sessionActivityChanged(session:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.session(session:stateChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 96))();
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.sessionUnjoined(session:startDate:endDate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 104))();
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.requestForegroundPresentationFor(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.session(session:associatedScene:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 120))();
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.session(session:disassociatedScene:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 128))();
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.sendResource(atURL:to:metadata:activitySessionUUID:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(a9 + 136))();
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.session(session:requestedEndpointWith:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 144))();
}

uint64_t dispatch thunk of ActivitySessionManagerProtocol.sessionCapabilitiesUpdated(session:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 152))();
}

uint64_t ObjC metadata update function for ActivitySession()
{
  return type metadata accessor for ActivitySession(0);
}

void type metadata completion function for ActivitySession()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for DateInterval();
    if (v1 <= 0x3F)
    {
      type metadata accessor for ActivitySession.DomainAssertionWrapper?(319, &lazy cache variable for type metadata for ActivitySession.DomainAssertionWrapper?, (void (*)(uint64_t))type metadata accessor for ActivitySession.DomainAssertionWrapper);
      if (v2 <= 0x3F)
      {
        type metadata accessor for TUConversationActivityLifetimePolicy(319, &lazy cache variable for type metadata for Published<ActivitySession.State>, (uint64_t)&type metadata for ActivitySession.State, MEMORY[0x1E4F1AC70]);
        if (v3 <= 0x3F)
        {
          type metadata accessor for Date();
          if (v4 <= 0x3F)
          {
            type metadata accessor for ActivitySession.DomainAssertionWrapper?(319, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928]);
            if (v5 <= 0x3F) {
              swift_updateClassMetadata2();
            }
          }
        }
      }
    }
  }
}

uint64_t method lookup function for ActivitySession(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ActivitySession);
}

uint64_t dispatch thunk of ActivitySession.activityInterval.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x150))();
}

uint64_t dispatch thunk of ActivitySession.activityInterval.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x158))();
}

uint64_t dispatch thunk of ActivitySession.activityInterval.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x160))();
}

uint64_t dispatch thunk of ActivitySession.terminatingHandle.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x168))();
}

uint64_t dispatch thunk of ActivitySession.terminatingHandle.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x170))();
}

uint64_t dispatch thunk of ActivitySession.terminatingHandle.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x178))();
}

uint64_t dispatch thunk of ActivitySession.isFirstJoin.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x180))();
}

uint64_t dispatch thunk of ActivitySession.isFirstJoin.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x188))();
}

uint64_t dispatch thunk of ActivitySession.isFirstJoin.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x190))();
}

uint64_t dispatch thunk of ActivitySession.isPermittedToJoin.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x198))();
}

uint64_t dispatch thunk of ActivitySession.persistentSceneIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of ActivitySession.persistentSceneIdentifiers.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of ActivitySession.persistentSceneIsEligibleForAutoClose.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of ActivitySession.audioSessionID.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1D8))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ActivitySession.audioSessionID.setter(unint64_t a1)
{
  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x1E0))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ActivitySession.audioSessionID.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of ActivitySession.domainAssertion.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of ActivitySession.domainAssertion.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of ActivitySession.domainAssertion.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x200))();
}

uint64_t dispatch thunk of ActivitySession.distributionCount.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x220))();
}

uint64_t dispatch thunk of ActivitySession.distributionCount.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x228))();
}

uint64_t dispatch thunk of ActivitySession.distributionCount.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x230))();
}

uint64_t dispatch thunk of ActivitySession.applicationState.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x268))();
}

uint64_t dispatch thunk of ActivitySession.applicationState.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x270))();
}

uint64_t dispatch thunk of ActivitySession.applicationState.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x278))();
}

uint64_t dispatch thunk of ActivitySession.capabilities.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x280))();
}

uint64_t dispatch thunk of ActivitySession.capabilities.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x288))();
}

uint64_t dispatch thunk of ActivitySession.capabilities.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x290))();
}

uint64_t dispatch thunk of ActivitySession.logDurationMetric(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x298))();
}

uint64_t dispatch thunk of ActivitySession.state.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2A0))();
}

uint64_t dispatch thunk of ActivitySession.state.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2A8))();
}

uint64_t dispatch thunk of ActivitySession.state.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2B0))();
}

uint64_t dispatch thunk of ActivitySession.$state.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2B8))();
}

uint64_t dispatch thunk of ActivitySession.$state.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2C0))();
}

uint64_t dispatch thunk of ActivitySession.$state.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2C8))();
}

uint64_t dispatch thunk of ActivitySession.activity.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2D0))();
}

uint64_t dispatch thunk of ActivitySession.activity.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2D8))();
}

uint64_t dispatch thunk of ActivitySession.activity.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2E0))();
}

uint64_t dispatch thunk of ActivitySession.isLocallyInitiated.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2E8))();
}

uint64_t dispatch thunk of ActivitySession.isUsingAirplay.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x318))();
}

uint64_t dispatch thunk of ActivitySession.isUsingAirplay.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x320))();
}

uint64_t dispatch thunk of ActivitySession.isUsingAirplay.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x328))();
}

uint64_t dispatch thunk of ActivitySession.tuConversationActivitySession.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x330))();
}

uint64_t dispatch thunk of ActivitySession.activeParticipantsUpdateItem.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x350))();
}

uint64_t dispatch thunk of ActivitySession.activeParticipantsUpdateItem.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x358))();
}

uint64_t dispatch thunk of ActivitySession.activeParticipantsUpdateItem.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x360))();
}

uint64_t dispatch thunk of ActivitySession.activeParticipants.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x368))();
}

uint64_t dispatch thunk of ActivitySession.activeParticipants.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x370))();
}

uint64_t dispatch thunk of ActivitySession.activeParticipants.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x378))();
}

uint64_t dispatch thunk of ActivitySession.sessionManager.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x380))();
}

uint64_t dispatch thunk of ActivitySession.sessionManager.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x388))();
}

uint64_t dispatch thunk of ActivitySession.sessionManager.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x390))();
}

uint64_t dispatch thunk of ActivitySession.rtcReporter.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x398))();
}

uint64_t dispatch thunk of ActivitySession.rtcReporter.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3A0))();
}

uint64_t dispatch thunk of ActivitySession.rtcReporter.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3A8))();
}

uint64_t dispatch thunk of ActivitySession.connection.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3B0))();
}

uint64_t dispatch thunk of ActivitySession.connection.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3B8))();
}

uint64_t dispatch thunk of ActivitySession.connection.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3C0))();
}

uint64_t dispatch thunk of ActivitySession.updateActiveParticipants(with:fromCache:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3C8))();
}

uint64_t dispatch thunk of ActivitySession.join(audioSessionID:completion:)(unint64_t a1)
{
  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x3D0))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ActivitySession.leave()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3D8))();
}

uint64_t dispatch thunk of ActivitySession.end()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3E0))();
}

uint64_t dispatch thunk of ActivitySession.permitJoin()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3E8))();
}

uint64_t dispatch thunk of ActivitySession.logAttachmentEvent(report:reportEvent:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3F0))();
}

uint64_t dispatch thunk of ActivitySession.postEvent(event:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3F8))();
}

uint64_t dispatch thunk of ActivitySession.requestEncryptionKeys(for:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x400))();
}

uint64_t dispatch thunk of ActivitySession.activeRemoteParticipant(with:completion:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x408))();
}

uint64_t dispatch thunk of ActivitySession.presentSessionDismissalAlert(for:allowingCancellation:completion:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x410))();
}

uint64_t dispatch thunk of ActivitySession.endSessionForAll(completion:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x418))();
}

uint64_t dispatch thunk of ActivitySession.endSessionForLocal(completion:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x420))();
}

uint64_t dispatch thunk of ActivitySession.terminateSessionIfAtEndOfLifetime()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x428))();
}

uint64_t dispatch thunk of ActivitySession.__allocating_init(activity:id:manager:timestamp:locallyInitiated:lightweightPrimaryInitiated:notificationCenter:)()
{
  return (*(uint64_t (**)(void))(v0 + 1080))();
}

uint64_t dispatch thunk of ActivitySession.refreshDataCryptor()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x440))();
}

uint64_t dispatch thunk of ActivitySession.topicName.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x450))();
}

uint64_t dispatch thunk of ActivitySession.invalidate(replacementBundleIdentifier:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x458))();
}

uint64_t dispatch thunk of ActivitySession.rbsAssertion(for:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x460))();
}

uint64_t dispatch thunk of ActivitySession.updateApplicationState(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x468))();
}

uint64_t dispatch thunk of ActivitySession.refreshActiveParticipants()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x470))();
}

uint64_t dispatch thunk of ActivitySession.listener(_:shouldAcceptNewConnection:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x478))();
}

uint64_t dispatch thunk of ActivitySession.requestForegroundPresentation()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x480))();
}

uint64_t dispatch thunk of ActivitySession.associateScene(sceneID:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x488))();
}

uint64_t dispatch thunk of ActivitySession._associateScene(sceneID:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x490))();
}

uint64_t dispatch thunk of ActivitySession._disassociateScene()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x498))();
}

uint64_t dispatch thunk of ActivitySession._disassociateScene(sceneID:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4A0))();
}

void type metadata accessor for ActivitySession.DomainAssertionWrapper?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ActivitySession.Errors(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ActivitySession.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B0E28934);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for ActivitySession.Errors(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for ActivitySession.Errors(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ActivitySession.Errors()
{
  return &type metadata for ActivitySession.Errors;
}

unint64_t *initializeBufferWithCopyOfBuffer for ActivitySession.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  outlined copy of ActivitySession.State(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for ActivitySession.State(unint64_t *a1)
{
  return outlined consume of ActivitySession.State(*a1);
}

unint64_t *assignWithCopy for ActivitySession.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  outlined copy of ActivitySession.State(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  outlined consume of ActivitySession.State(v4);
  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

unint64_t *assignWithTake for ActivitySession.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  outlined consume of ActivitySession.State(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActivitySession.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7E && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 126);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ActivitySession.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(void *)unint64_t result = a2 - 126;
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)unint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for ActivitySession.State(void *a1)
{
  uint64_t v1 = *a1 >> 62;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return (*a1 >> 3) + 2;
  }
}

void *destructiveProjectEnumData for ActivitySession.State(void *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *destructiveInjectEnumTag for ActivitySession.State(unint64_t *result, uint64_t a2)
{
  if (a2 < 2)
  {
    uint64_t v2 = *result & 0xFFFFFFFFFFFFFF8;
    unint64_t v3 = a2 << 62;
  }
  else
  {
    uint64_t v2 = 8 * (a2 - 2);
    unint64_t v3 = 0x8000000000000000;
  }
  *unint64_t result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for ActivitySession.State()
{
  return &type metadata for ActivitySession.State;
}

void *initializeBufferWithCopyOfBuffer for ActivitySession.State.InvalidationReason(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for ActivitySession.State.InvalidationReason()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for ActivitySession.State.InvalidationReason(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for ActivitySession.State.InvalidationReason(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ActivitySession.State.InvalidationReason(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ActivitySession.State.InvalidationReason(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t getEnumTag for ActivitySession.State.InvalidationReason(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for ActivitySession.State.InvalidationReason(void *result, int a2)
{
  if (a2 < 0)
  {
    *__n128 result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for ActivitySession.State.InvalidationReason()
{
  return &type metadata for ActivitySession.State.InvalidationReason;
}

ValueMetadata *type metadata accessor for ActivitySession.Capabilities()
{
  return &type metadata for ActivitySession.Capabilities;
}

char *initializeBufferWithCopyOfBuffer for ActivitySession.DomainAssertionWrapper(char *a1, char **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  unint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    unsigned int v6 = a2[2];
    *((void *)a1 + 1) = a2[1];
    *((void *)a1 + 2) = v6;
    *((_DWORD *)a1 + 6) = *((_DWORD *)a2 + 6);
    uint64_t v7 = *(int *)(a3 + 28);
    int v8 = &a1[v7];
    uint64_t v9 = (uint64_t)a2 + v7;
    uint64_t v10 = type metadata accessor for UUID();
    unint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    uint64_t v12 = v4;
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v5;
}

uint64_t destroy for ActivitySession.DomainAssertionWrapper(id *a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  unint64_t v4 = (char *)a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UUID();
  unsigned int v6 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t initializeWithCopy for ActivitySession.DomainAssertionWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  id v11 = v5;
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  return a1;
}

uint64_t assignWithCopy for ActivitySession.DomainAssertionWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v9 = *(int *)(a3 + 28);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

uint64_t initializeWithTake for ActivitySession.DomainAssertionWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for ActivitySession.DomainAssertionWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v7 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v7;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActivitySession.DomainAssertionWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0E29124);
}

uint64_t sub_1B0E29124(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ActivitySession.DomainAssertionWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0E291E8);
}

void *sub_1B0E291E8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *__n128 result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 28);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for ActivitySession.DomainAssertionWrapper()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void type metadata accessor for TUConversationActivityEventQueueItemType(uint64_t a1)
{
}

void type metadata accessor for TUConversationActivityEventType(uint64_t a1)
{
}

void type metadata accessor for CPActivitySessionState(uint64_t a1)
{
}

void type metadata accessor for CPApplicationType(uint64_t a1)
{
}

void type metadata accessor for TUConversationActivitySessionApplicationState(uint64_t a1)
{
}

void type metadata accessor for CARTransportType(uint64_t a1)
{
}

void type metadata accessor for IDSSessionEndedReason(uint64_t a1)
{
}

void type metadata accessor for PGBackgroundPIPAuthorizationState(uint64_t a1)
{
}

void type metadata accessor for CFErrorRef(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for CPApplicationLauncherOptions(uint64_t a1)
{
}

uint64_t base witness table accessor for Equatable in CPApplicationLauncherOptions()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CPApplicationLauncherOptions and conformance CPApplicationLauncherOptions, type metadata accessor for CPApplicationLauncherOptions);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in CPApplicationLauncherOptions()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CPApplicationLauncherOptions and conformance CPApplicationLauncherOptions, type metadata accessor for CPApplicationLauncherOptions);
}

uint64_t base witness table accessor for RawRepresentable in CPApplicationLauncherOptions()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CPApplicationLauncherOptions and conformance CPApplicationLauncherOptions, type metadata accessor for CPApplicationLauncherOptions);
}

uint64_t base witness table accessor for SetAlgebra in CPApplicationLauncherOptions()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CPApplicationLauncherOptions and conformance CPApplicationLauncherOptions, type metadata accessor for CPApplicationLauncherOptions);
}

uint64_t base witness table accessor for Equatable in TUConversationActivityEventType()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type TUConversationActivityEventType and conformance TUConversationActivityEventType, type metadata accessor for TUConversationActivityEventType);
}

uint64_t base witness table accessor for Equatable in TUConversationActivityEventQueueItemType()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type TUConversationActivityEventQueueItemType and conformance TUConversationActivityEventQueueItemType, type metadata accessor for TUConversationActivityEventQueueItemType);
}

uint64_t outlined destroy of weak ActivitySessionManagerProtocol?(uint64_t a1)
{
  return a1;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type IDSGroupSessionProvider.Participant and conformance IDSGroupSessionProvider.Participant()
{
  unint64_t result = lazy protocol witness table cache variable for type IDSGroupSessionProvider.Participant and conformance IDSGroupSessionProvider.Participant;
  if (!lazy protocol witness table cache variable for type IDSGroupSessionProvider.Participant and conformance IDSGroupSessionProvider.Participant)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IDSGroupSessionProvider.Participant and conformance IDSGroupSessionProvider.Participant);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IDSGroupSessionProvider.Participant and conformance IDSGroupSessionProvider.Participant;
  if (!lazy protocol witness table cache variable for type IDSGroupSessionProvider.Participant and conformance IDSGroupSessionProvider.Participant)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IDSGroupSessionProvider.Participant and conformance IDSGroupSessionProvider.Participant);
  }
  return result;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t outlined init with take of BackgroundSessionManagerDataSource(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t outlined init with copy of ActivitySession.DomainAssertionWrapper(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of (key: UInt64, value: AttachmentLedger_AttachmentEncryption)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UInt64, value: AttachmentLedger_AttachmentEncryption)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of ActivitySession.DomainAssertionWrapper(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of ActivitySession.DomainAssertionWrapper(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1B0E2A0E4()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

void partial apply for closure #1 in closure #1 in ActivitySession.sendResource(atURL:to:metadata:completion:)(void *a1)
{
  closure #1 in closure #1 in ActivitySession.sendResource(atURL:to:metadata:completion:)(a1, *(NSObject **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1B0E2A138()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in ActivitySession.assertionWillInvalidate(_:)()
{
  return closure #1 in ActivitySession.assertionWillInvalidate(_:)(*(void **)(v0 + 16));
}

uint64_t sub_1B0E2A178()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed () -> ()()
{
  return thunk for @callee_guaranteed () -> ()(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1B0E2A190()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in ActivitySession.listener(_:shouldAcceptNewConnection:)()
{
  return closure #1 in ActivitySession.listener(_:shouldAcceptNewConnection:)(*(unsigned char **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1B0E2A1D0()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B0E2A1E0()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #2 in ActivitySession.listener(_:shouldAcceptNewConnection:)()
{
  uint64_t v1 = *(void **)(v0 + 16);
  long long v2 = *(void **)(v0 + 24);
  uint64_t v3 = *(uint64_t (**)(void *))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x3B8);
  id v4 = v2;
  return v3(v2);
}

uint64_t sub_1B0E2A290()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B0E2A2A0()
{
  swift_release();
  swift_unknownObjectRelease();
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #1 in closure #1 in ActivitySession.fetchDataCryptor(completion:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(void *)(v0 + 32));
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t outlined assign with take of ActivitySession.DomainAssertionWrapper?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of ActivitySession.DomainAssertionWrapper?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1B0E2A490()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in closure #1 in ActivitySession.join(audioSessionID:completion:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(v1 + 16))(a1, 0);
}

uint64_t sub_1B0E2A4F4()
{
  return objectdestroy_80Tm(MEMORY[0x1E4FBC8D0]);
}

uint64_t objectdestroy_80Tm(void (*a1)(void))
{
  a1(*(void *)(v1 + 32));
  return MEMORY[0x1F4186498](v1, 40, 7);
}

void type metadata accessor for nw_group_membership_changed_type_t(uint64_t a1)
{
}

void type metadata accessor for IMUserNotificationResponse(uint64_t a1)
{
}

void type metadata accessor for IDSGroupSessionEncryptionControllerRejectionReason(uint64_t a1)
{
}

void type metadata accessor for TUConversationActivityLifetimePolicy(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void RunningBoardAppVisibilityMonitor.visibleBundleIdentifiers.setter()
{
}

uint64_t OneShotCancellationBox.__deallocating_deinit()
{
  MEMORY[0x1B3EA39E0](*(void *)(v0 + 16), -1, -1);
  outlined consume of OneShotCancellationBox.State(*(void *)(v0 + 24));
  return swift_deallocClassInstance();
}

uint64_t OneShotCancellationBox.cancel()()
{
  uint64_t v1 = v0;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + 16));
  unint64_t v2 = *(void *)(v0 + 24);
  if (!v2) {
    goto LABEL_5;
  }
  if (v2 != 1)
  {
    swift_retain();
    AnyCancellable.cancel()();
    outlined consume of OneShotCancellationBox.State(v2);
    unint64_t v2 = *(void *)(v1 + 24);
LABEL_5:
    uint64_t v3 = 1;
    *(void *)(v1 + 24) = 1;
    goto LABEL_6;
  }
  uint64_t v3 = 0;
LABEL_6:
  outlined consume of OneShotCancellationBox.State(v2);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 16));
  return v3;
}

uint64_t Publisher.sinkOnce(_:onError:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  type metadata accessor for OneShotCancellationBox();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 24) = 0;
  unint64_t v13 = (_DWORD *)swift_slowAlloc();
  *(void *)(v12 + 16) = v13;
  *unint64_t v13 = 0;
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = a5;
  v14[3] = a6;
  v14[4] = v12;
  v14[5] = a3;
  v14[6] = a4;
  id v15 = (void *)swift_allocObject();
  void v15[2] = a5;
  v15[3] = a6;
  v15[4] = v12;
  v15[5] = a1;
  v15[6] = a2;
  swift_retain_n();
  swift_retain();
  swift_retain();
  uint64_t v16 = Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v12 + 16));
  uint64_t v17 = *(void *)(v12 + 24);
  if (v17)
  {
    if (v17 != 1)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  else
  {
    *(void *)(v12 + 24) = v16;
    outlined consume of OneShotCancellationBox.State(0);
    swift_retain();
  }
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 16));
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for OneShotCancellationBox()
{
  return self;
}

uint64_t closure #1 in Publisher.sinkOnce(_:onError:)(uint64_t a1, uint64_t a2, void (*a3)(char *))
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = type metadata accessor for Subscribers.Completion();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v15 - v9;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v8);
  unint64_t v13 = (char *)&v15 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v10, AssociatedTypeWitness);
  if (OneShotCancellationBox.cancel()()) {
    a3(v13);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
}

uint64_t partial apply for closure #1 in Publisher.sinkOnce(_:onError:)(uint64_t a1)
{
  return closure #1 in Publisher.sinkOnce(_:onError:)(a1, *(void *)(v1 + 32), *(void (**)(char *))(v1 + 40));
}

unint64_t outlined consume of OneShotCancellationBox.State(unint64_t result)
{
  if (result >= 2) {
    return swift_release();
  }
  return result;
}

uint64_t Publisher<>.sinkOnce(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for OneShotCancellationBox();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 24) = 0;
  uint64_t v9 = (_DWORD *)swift_slowAlloc();
  *(void *)(v8 + 16) = v9;
  *uint64_t v9 = 0;
  uint64_t v10 = (void *)swift_allocObject();
  void v10[2] = a3;
  v10[3] = a4;
  v10[4] = v8;
  v10[5] = a1;
  v10[6] = a2;
  swift_retain();
  swift_retain();
  uint64_t v11 = Publisher<>.sink(receiveValue:)();
  swift_release();
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v8 + 16));
  uint64_t v12 = *(void *)(v8 + 24);
  if (v12)
  {
    if (v12 != 1)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  else
  {
    *(void *)(v8 + 24) = v11;
    outlined consume of OneShotCancellationBox.State(0);
    swift_retain();
  }
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v8 + 16));
  swift_release();
  return swift_release();
}

uint64_t objectdestroyTm()
{
  swift_release();
  swift_release();
  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for closure #2 in Publisher.sinkOnce(_:onError:)(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v1 + 40);
  uint64_t result = OneShotCancellationBox.cancel()();
  if (result) {
    return v3(a1);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for OneShotCancellationBox.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    uint64_t v3 = swift_retain();
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for OneShotCancellationBox.State(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_release();
  }
  return result;
}

unint64_t *assignWithCopy for OneShotCancellationBox.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF) {
      swift_retain();
    }
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_retain();
    swift_release();
  }
  return a1;
}

unint64_t *assignWithTake for OneShotCancellationBox.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF) {
    goto LABEL_6;
  }
  if (v3 < 0xFFFFFFFF)
  {
    swift_release();
LABEL_6:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for OneShotCancellationBox.State(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for OneShotCancellationBox.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

uint64_t getEnumTag for OneShotCancellationBox.State(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for OneShotCancellationBox.State(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *unint64_t result = v2;
  return result;
}

void *type metadata accessor for OneShotCancellationBox.State()
{
  return &unk_1F09AD628;
}

id PresenceSessionConnectionInfo.endpoint.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore29PresenceSessionConnectionInfo_endpoint);
}

id PresenceSessionConnectionInfo.__allocating_init(endpoint:)(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR____TtC14CopresenceCore29PresenceSessionConnectionInfo_endpoint] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

id PresenceSessionConnectionInfo.init(endpoint:)(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR____TtC14CopresenceCore29PresenceSessionConnectionInfo_endpoint] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for PresenceSessionConnectionInfo();
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t type metadata accessor for PresenceSessionConnectionInfo()
{
  return self;
}

unint64_t PresenceSessionConnectionInfo.description.getter()
{
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  id v1 = *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore29PresenceSessionConnectionInfo_endpoint);
  id v2 = objc_msgSend(v1, sel_description);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  objc_super v5 = v4;

  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);

  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 41;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0xD000000000000028;
}

uint64_t static PresenceSessionConnectionInfo.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall PresenceSessionConnectionInfo.encode(with:)(NSCoder with)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC14CopresenceCore29PresenceSessionConnectionInfo_endpoint);
  id v4 = (id)MEMORY[0x1B3EA1B00](0x746E696F70646E65, 0xE800000000000000);
  [(objc_class *)with.super.isa encodeObject:v3 forKey:v4];
}

id PresenceSessionConnectionInfo.__allocating_init(coder:)(void *a1)
{
  id v2 = v1;
  id v4 = objc_allocWithZone(v2);
  type metadata accessor for NSXPCListenerEndpoint();
  objc_super v5 = (char *)v4;
  uint64_t v6 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v6)
  {
    *(void *)&v5[OBJC_IVAR____TtC14CopresenceCore29PresenceSessionConnectionInfo_endpoint] = v6;

    v9.receiver = v5;
    v9.super_class = v2;
    id v7 = objc_msgSendSuper2(&v9, sel_init);
  }
  else
  {

    swift_deallocPartialClassInstance();
    return 0;
  }
  return v7;
}

id PresenceSessionConnectionInfo.init(coder:)(void *a1)
{
  type metadata accessor for NSXPCListenerEndpoint();
  uint64_t v3 = v1;
  uint64_t v4 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v4)
  {
    *(void *)&v3[OBJC_IVAR____TtC14CopresenceCore29PresenceSessionConnectionInfo_endpoint] = v4;

    v7.receiver = v3;
    v7.super_class = (Class)type metadata accessor for PresenceSessionConnectionInfo();
    id v5 = objc_msgSendSuper2(&v7, sel_init);
  }
  else
  {

    type metadata accessor for PresenceSessionConnectionInfo();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v5;
}

unint64_t type metadata accessor for NSXPCListenerEndpoint()
{
  unint64_t result = lazy cache variable for type metadata for NSXPCListenerEndpoint;
  if (!lazy cache variable for type metadata for NSXPCListenerEndpoint)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSXPCListenerEndpoint);
  }
  return result;
}

id PresenceSessionConnectionInfo.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void PresenceSessionConnectionInfo.init()()
{
}

id PresenceSessionConnectionInfo.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PresenceSessionConnectionInfo();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for PresenceSessionConnectionInfo(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PresenceSessionConnectionInfo);
}

uint64_t dispatch thunk of PresenceSessionConnectionInfo.__allocating_init(endpoint:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of PresenceSessionConnectionInfo.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of PresenceSessionConnectionInfo.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

id PresenceSessionParticipant.id.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_id);
}

id PresenceSessionParticipant.handle.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_handle);
}

uint64_t PresenceSessionParticipant.isCurrentDevice.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_isCurrentDevice);
}

id PresenceSessionParticipant.__allocating_init(id:handle:isCurrentDevice:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  id v5 = v4;
  uint64_t v10 = objc_allocWithZone(v5);
  *(NSUUID *)&v10[OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_id] = UUID._bridgeToObjectiveC()();
  uint64_t v11 = MEMORY[0x1B3EA1B00](a2, a3);
  swift_bridgeObjectRelease();
  *(void *)&v10[OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_handle] = v11;
  v10[OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_isCurrentDevice] = a4;

  v15.receiver = v10;
  v15.super_class = v5;
  id v12 = objc_msgSendSuper2(&v15, sel_init);
  uint64_t v13 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a1, v13);
  return v12;
}

id PresenceSessionParticipant.init(id:handle:isCurrentDevice:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  objc_super v9 = v4;
  *(NSUUID *)&v9[OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_id] = UUID._bridgeToObjectiveC()();
  uint64_t v10 = MEMORY[0x1B3EA1B00](a2, a3);
  swift_bridgeObjectRelease();
  *(void *)&v9[OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_handle] = v10;
  v9[OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_isCurrentDevice] = a4;

  v14.receiver = v9;
  v14.super_class = (Class)type metadata accessor for PresenceSessionParticipant();
  id v11 = objc_msgSendSuper2(&v14, sel_init);
  uint64_t v12 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(a1, v12);
  return v11;
}

uint64_t type metadata accessor for PresenceSessionParticipant()
{
  return self;
}

uint64_t PresenceSessionParticipant.description.getter()
{
  uint64_t v1 = v0;
  _StringGuts.grow(_:)(67);
  v2._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  v2._object = (void *)0x80000001B115C260;
  String.append(_:)(v2);
  id v3 = *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_id);
  id v4 = objc_msgSend(v3, sel_description);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  objc_super v7 = v6;

  v8._uint64_t countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);

  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 0x656C646E6168202CLL;
  v9._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v9);
  id v10 = *(id *)(v1 + OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_handle);
  id v11 = objc_msgSend(v10, sel_description);
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  objc_super v14 = v13;

  v15._uint64_t countAndFlagsBits = v12;
  v15._object = v14;
  String.append(_:)(v15);

  swift_bridgeObjectRelease();
  v16._object = (void *)0x80000001B115C280;
  v16._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v16);
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_isCurrentDevice)) {
    uint64_t v17 = 1702195828;
  }
  else {
    uint64_t v17 = 0x65736C6166;
  }
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_isCurrentDevice)) {
    unint64_t v18 = 0xE400000000000000;
  }
  else {
    unint64_t v18 = 0xE500000000000000;
  }
  unint64_t v19 = v18;
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 41;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  return 0;
}

uint64_t static PresenceSessionParticipant.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall PresenceSessionParticipant.encode(with:)(NSCoder with)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_id);
  id v4 = (void *)MEMORY[0x1B3EA1B00](25705, 0xE200000000000000);
  [(objc_class *)with.super.isa encodeObject:v3 forKey:v4];

  uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_handle);
  uint64_t v6 = (void *)MEMORY[0x1B3EA1B00](0x656C646E6168, 0xE600000000000000);
  [(objc_class *)with.super.isa encodeObject:v5 forKey:v6];

  uint64_t v7 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_isCurrentDevice);
  id v8 = (id)MEMORY[0x1B3EA1B00](0x6E65727275437369, 0xEF65636976654474);
  [(objc_class *)with.super.isa encodeBool:v7 forKey:v8];
}

id PresenceSessionParticipant.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return PresenceSessionParticipant.init(coder:)(a1);
}

id PresenceSessionParticipant.init(coder:)(void *a1)
{
  Swift::String v2 = v1;
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSUUID);
  id v4 = v2;
  uint64_t v5 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v5) {
    goto LABEL_7;
  }
  uint64_t v6 = (void *)v5;
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  uint64_t v7 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v7)
  {
LABEL_6:

LABEL_7:
    type metadata accessor for PresenceSessionParticipant();
    swift_deallocPartialClassInstance();
    return 0;
  }
  id v8 = (void *)v7;
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  Swift::String v9 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v9)
  {

    uint64_t v6 = v8;
    goto LABEL_6;
  }
  id v10 = v9;
  *(void *)&v4[OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_id] = v6;
  *(void *)&v4[OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_handle] = v8;
  unsigned __int8 v11 = objc_msgSend(v9, sel_BOOLValue);

  v4[OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_isCurrentDevice] = v11;
  v14.receiver = v4;
  v14.super_class = (Class)type metadata accessor for PresenceSessionParticipant();
  id v12 = objc_msgSendSuper2(&v14, sel_init);

  return v12;
}

id PresenceSessionParticipant.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void PresenceSessionParticipant.init()()
{
}

id PresenceSessionParticipant.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PresenceSessionParticipant();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for PresenceSessionParticipant(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PresenceSessionParticipant);
}

uint64_t dispatch thunk of PresenceSessionParticipant.__allocating_init(id:handle:isCurrentDevice:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of PresenceSessionParticipant.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of PresenceSessionParticipant.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t AttachmentLedgerClient.Config.participantIDSalt.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AttachmentLedgerClient.Config.createTopicMaxAttempts.getter()
{
  return *(void *)(v0 + 16);
}

double AttachmentLedgerClient.Config.createTopicRpcRetryIntervalSeconds.getter()
{
  return *(double *)(v0 + 24);
}

CopresenceCore::AttachmentLedgerClient::Config __swiftcall AttachmentLedgerClient.Config.init(participantIDSalt:createTopicMaxAttempts:createTopicRpcRetryIntervalSeconds:)(Swift::String participantIDSalt, Swift::Int createTopicMaxAttempts, Swift::Double createTopicRpcRetryIntervalSeconds)
{
  *(Swift::String *)uint64_t v3 = participantIDSalt;
  *(void *)(v3 + 16) = createTopicMaxAttempts;
  *(Swift::Double *)(v3 + 24) = createTopicRpcRetryIntervalSeconds;
  result.participantIDSalt = participantIDSalt;
  result.createTopicRpcRetryIntervalSeconds = createTopicRpcRetryIntervalSeconds;
  result.createTopicMaxAttempts = createTopicMaxAttempts;
  return result;
}

uint64_t AttachmentLedgerClient.config.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[4];
  uint64_t v3 = v1[5];
  uint64_t v4 = v1[6];
  *a1 = v1[3];
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t AttachmentLedgerClient.serviceProvider.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of UserNotificationCenter(v1 + 56, a1);
}

uint64_t AttachmentLedgerClient.localParticipantID.getter()
{
  return *(void *)(v0 + 96);
}

uint64_t AttachmentLedgerClient.__allocating_init(serviceProvider:config:localParticipantID:)(long long *a1, long long *a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  long long v10 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  uint64_t v8 = *((void *)a2 + 3);
  *(void *)(v6 + 16) = MEMORY[0x1E4FBC868];
  outlined init with take of BackgroundSessionManagerDataSource(a1, v6 + 56);
  *(_OWORD *)(v6 + 24) = v10;
  *(void *)(v6 + 40) = v7;
  *(void *)(v6 + 48) = v8;
  *(void *)(v6 + 96) = a3;
  return v6;
}

uint64_t AttachmentLedgerClient.init(serviceProvider:config:localParticipantID:)(long long *a1, long long *a2, uint64_t a3)
{
  long long v8 = *a2;
  uint64_t v5 = *((void *)a2 + 2);
  uint64_t v6 = *((void *)a2 + 3);
  *(void *)(v3 + 16) = MEMORY[0x1E4FBC868];
  outlined init with take of BackgroundSessionManagerDataSource(a1, v3 + 56);
  *(_OWORD *)(v3 + 24) = v8;
  *(void *)(v3 + 40) = v5;
  *(void *)(v3 + 48) = v6;
  *(void *)(v3 + 96) = a3;
  return v3;
}

uint64_t AttachmentLedgerClient.__allocating_init(client:config:localParticipantID:)(uint64_t a1, long long *a2, uint64_t a3)
{
  long long v11 = *a2;
  uint64_t v6 = *((void *)a2 + 2);
  uint64_t v7 = *((void *)a2 + 3);
  uint64_t v8 = type metadata accessor for PluginAttachmentLedgerServiceProvider();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  v15[3] = v8;
  v15[4] = &protocol witness table for PluginAttachmentLedgerServiceProvider;
  v15[0] = v9;
  long long v12 = v11;
  uint64_t v13 = v6;
  uint64_t v14 = v7;
  return (*(uint64_t (**)(void *, long long *, uint64_t))(v3 + 136))(v15, &v12, a3);
}

uint64_t AttachmentLedgerClient.updateVirtualParticipant(_:localParticipantID:)(void *a1, uint64_t a2)
{
  uint64_t v5 = v2[10];
  uint64_t v6 = v2[11];
  __swift_project_boxed_opaque_existential_1(v2 + 7, v5);
  return (*(uint64_t (**)(id, uint64_t, uint64_t, uint64_t))(v6 + 56))(objc_msgSend(a1, sel_identifier), a2, v5, v6);
}

uint64_t AttachmentLedgerClient.sendCreateServerTopic(request:attempt:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v17 = a1;
  uint64_t v18 = a2;
  uint64_t TopicRequest = type metadata accessor for AttachmentLedger_CreateTopicRequest(0);
  uint64_t v5 = *(void *)(TopicRequest - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](TopicRequest - 8);
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  long long v10 = (uint64_t *)((char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = v2[10];
  uint64_t v11 = v2[11];
  __swift_project_boxed_opaque_existential_1(v2 + 7, v12);
  *long long v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v12, v11);
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E4FBCBF0], v7);
  char v13 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  if (v13)
  {
    outlined init with copy of AttachmentLedger_CreateTopicRequest(v17, (uint64_t)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AttachmentLedger_CreateTopicRequest);
    unint64_t v15 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v3;
    outlined init with take of AttachmentLedger_CreateTopicRequest((uint64_t)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15, type metadata accessor for AttachmentLedger_CreateTopicRequest);
    *(void *)(v16 + ((v6 + v15 + 7) & 0xFFFFFFFFFFFFFFF8)) = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<PluginAttachmentLedgerTopic.Configuration?, Error>);
    swift_allocObject();
    swift_retain();
    return Future.init(_:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:)(void (*a1)(long long *), void (*a2)(long long *), void *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t TopicRequest = type metadata accessor for AttachmentLedger_CreateTopicRequest(0);
  uint64_t v11 = *(void *)(TopicRequest - 8);
  MEMORY[0x1F4188790](TopicRequest - 8);
  uint64_t v45 = v12;
  char v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *a4;
  uint64_t v14 = a4[1];
  swift_beginAccess();
  uint64_t v16 = a3[2];
  uint64_t v17 = *(void *)(v16 + 16);
  uint64_t v46 = a3;
  if (!v17) {
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v14);
  if ((v19 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  uint64_t v44 = v11;
  Swift::String v20 = v13;
  uint64_t v21 = *(void *)(*(void *)(v16 + 56) + 8 * v18);
  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t v22 = swift_bridgeObjectRelease();
  (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v21 + 288))(&v47, v22);
  uint64_t v23 = v47;
  uint64_t v24 = *((void *)&v48 + 1);
  unint64_t v25 = v50;
  if (!(v50 >> 62)) {
    goto LABEL_12;
  }
  if (v50 >> 62 != 1)
  {
    uint64_t v40 = v48 | *((void *)&v47 + 1);
    if (v50 != 0x8000000000000000 || v40 | (unint64_t)v47 | *((void *)&v48 + 1) | v49 | v51)
    {
      uint64_t v43 = v49 | v51;
      outlined consume of PluginAttachmentLedgerTopic.State(v47, *((uint64_t *)&v47 + 1), v48, *((uint64_t *)&v48 + 1), v49, v50);
      if (v25 != 0x8000000000000000 || v23 != 1 || v40 | v24 | v43) {
        goto LABEL_6;
      }
LABEL_13:
      uint64_t v49 = 0;
      long long v47 = 0u;
      long long v48 = 0u;
      LOWORD(v50) = 1;
      a1(&v47);
      return swift_release();
    }
LABEL_12:
    outlined consume of PluginAttachmentLedgerTopic.State(v47, *((uint64_t *)&v47 + 1), v48, *((uint64_t *)&v48 + 1), v49, v50);
    goto LABEL_13;
  }
  outlined consume of PluginAttachmentLedgerTopic.State(v47, *((uint64_t *)&v47 + 1), v48, *((uint64_t *)&v48 + 1), v49, v50);
LABEL_6:
  swift_release();
  char v13 = v20;
  a3 = v46;
  uint64_t v11 = v44;
LABEL_8:
  uint64_t v26 = a3[10];
  uint64_t v27 = a3[11];
  __swift_project_boxed_opaque_existential_1(a3 + 7, v26);
  uint64_t v44 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v27 + 24))(a4, v26, v27);
  outlined init with copy of AttachmentLedger_CreateTopicRequest((uint64_t)a4, (uint64_t)v13, type metadata accessor for AttachmentLedger_CreateTopicRequest);
  id v42 = a1;
  uint64_t v43 = a5;
  int64_t v28 = a2;
  uint64_t v29 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v30 = (uint64_t)v13;
  uint64_t v31 = (v29 + 16) & ~v29;
  uint64_t v32 = (uint64_t)a4;
  unint64_t v33 = (v45 + v31 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v34 = swift_allocObject();
  outlined init with take of AttachmentLedger_CreateTopicRequest(v30, v34 + v31, type metadata accessor for AttachmentLedger_CreateTopicRequest);
  char v35 = (void (**)(long long *))(v34 + v33);
  uint64_t v36 = v42;
  *char v35 = v42;
  v35[1] = v28;
  outlined init with copy of AttachmentLedger_CreateTopicRequest(v32, v30, type metadata accessor for AttachmentLedger_CreateTopicRequest);
  id v37 = (void *)swift_allocObject();
  uint64_t v38 = v46;
  v37[2] = v43;
  v37[3] = v38;
  v37[4] = v36;
  v37[5] = v28;
  outlined init with take of AttachmentLedger_CreateTopicRequest(v30, (uint64_t)v37 + ((v29 + 48) & ~v29), type metadata accessor for AttachmentLedger_CreateTopicRequest);
  swift_retain_n();
  swift_retain();
  specialized Publisher.sinkOnce(_:onError:)((uint64_t)partial apply for closure #1 in closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:), v34, (uint64_t)partial apply for closure #2 in closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:), (uint64_t)v37);
  swift_release();
  swift_release();
  return swift_release();
}

void closure #1 in closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:)(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *), uint64_t a4)
{
  uint64_t v77 = a4;
  uint64_t v78 = a3;
  uint64_t v74 = a2;
  uint64_t TopicResponse = type metadata accessor for AttachmentLedger_CreateTopicResponse(0);
  MEMORY[0x1F4188790](TopicResponse);
  uint64_t v7 = (uint64_t *)((char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_CreateTopicRequest?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v72 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v75 = (uint64_t)&v68 - v11;
  uint64_t TopicRequest = type metadata accessor for AttachmentLedger_CreateTopicRequest(0);
  uint64_t v71 = *(void *)(TopicRequest - 8);
  uint64_t v12 = MEMORY[0x1F4188790](TopicRequest);
  uint64_t v69 = (uint64_t)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v70 = (uint64_t)&v68 - v15;
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v68 - v16;
  uint64_t Topic = type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(0);
  uint64_t v19 = *(void *)(Topic - 8);
  uint64_t v20 = MEMORY[0x1F4188790](Topic);
  os_log_type_t v76 = (unsigned int *)((char *)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v24 = (char *)&v68 - v23;
  MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v68 - v25;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  uint64_t v28 = MEMORY[0x1F4188790](v27 - 8);
  uint64_t v30 = (char *)&v68 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v28);
  uint64_t v32 = (char *)&v68 - v31;
  if (*(unsigned char *)(a1 + 8) == 1 && (unint64_t)(*(void *)a1 - 1) <= 1)
  {
    uint64_t v33 = a1 + *(int *)(TopicResponse + 28);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v33, (uint64_t)&v68 - v31, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
    uint64_t v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
    int v35 = v34(v32, 1, Topic);
    uint64_t v36 = (uint64_t)v32;
    int v37 = v35;
    outlined destroy of UUID?(v36, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
    if (v37 == 1)
    {
      uint64_t v38 = 0;
      long long v39 = 0uLL;
      long long v40 = 0uLL;
    }
    else
    {
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v33, (uint64_t)v30, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
      if (v34(v30, 1, Topic) == 1)
      {
        *(void *)uint64_t v26 = 0;
        *((void *)v26 + 1) = 0;
        *((_DWORD *)v26 + 4) = 0;
        UnknownStorage.init()();
        outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
      }
      else
      {
        outlined init with take of AttachmentLedger_CreateTopicRequest((uint64_t)v30, (uint64_t)v26, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
      }
      uint64_t v48 = (uint64_t)v17;
      if (one-time initialization token for attachmentLedgerService != -1) {
        swift_once();
      }
      uint64_t v49 = type metadata accessor for Logger();
      __swift_project_value_buffer(v49, (uint64_t)static Log.attachmentLedgerService);
      outlined init with copy of AttachmentLedger_CreateTopicRequest((uint64_t)v26, (uint64_t)v24, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
      outlined init with copy of AttachmentLedger_CreateTopicRequest(v74, (uint64_t)v17, type metadata accessor for AttachmentLedger_CreateTopicRequest);
      unint64_t v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v50, v51))
      {
        uint64_t v52 = swift_slowAlloc();
        uint64_t v74 = swift_slowAlloc();
        *(void *)id v80 = v74;
        *(_DWORD *)uint64_t v52 = 136315394;
        lazy protocol witness table accessor for type AttachmentLedger_CreateTopicRequest and conformance AttachmentLedger_CreateTopicRequest(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse.ClientTopicConfig and conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
        uint64_t v53 = Message.debugDescription.getter();
        uint64_t v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, (uint64_t *)v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of AttachmentLedger_CreateTopicRequest((uint64_t)v24, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
        *(_WORD *)(v52 + 12) = 2080;
        uint64_t v55 = v75;
        outlined init with copy of AttachmentLedger_CreateTopicRequest(v48, v75, type metadata accessor for AttachmentLedger_CreateTopicRequest);
        uint64_t v56 = v71;
        uint64_t v57 = TopicRequest;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v71 + 56))(v55, 0, 1, TopicRequest);
        uint64_t v58 = v55;
        uint64_t v59 = (uint64_t)v72;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v58, (uint64_t)v72, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicRequest?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v59, 1, v57) == 1)
        {
          unint64_t v60 = 0xE300000000000000;
          uint64_t v61 = 7104878;
        }
        else
        {
          uint64_t v72 = v80;
          uint64_t v62 = v52;
          uint64_t v63 = v70;
          outlined init with take of AttachmentLedger_CreateTopicRequest(v59, v70, type metadata accessor for AttachmentLedger_CreateTopicRequest);
          outlined init with copy of AttachmentLedger_CreateTopicRequest(v63, v69, type metadata accessor for AttachmentLedger_CreateTopicRequest);
          uint64_t v61 = String.init<A>(reflecting:)();
          unint64_t v60 = v64;
          uint64_t v65 = v63;
          uint64_t v52 = v62;
          outlined destroy of AttachmentLedger_CreateTopicRequest(v65, type metadata accessor for AttachmentLedger_CreateTopicRequest);
        }
        outlined destroy of UUID?(v75, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicRequest?);
        uint64_t v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v60, (uint64_t *)v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of AttachmentLedger_CreateTopicRequest(v48, type metadata accessor for AttachmentLedger_CreateTopicRequest);
        _os_log_impl(&dword_1B0DF7000, v50, v51, "[CreateTopic] Received server-specified topic-config, config=%s for request=%s", (uint8_t *)v52, 0x16u);
        uint64_t v66 = v74;
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v66, -1, -1);
        MEMORY[0x1B3EA39E0](v52, -1, -1);
      }
      else
      {
        outlined destroy of AttachmentLedger_CreateTopicRequest((uint64_t)v24, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
        outlined destroy of AttachmentLedger_CreateTopicRequest(v48, type metadata accessor for AttachmentLedger_CreateTopicRequest);
      }

      unint64_t v67 = v76;
      outlined init with copy of AttachmentLedger_CreateTopicRequest((uint64_t)v26, (uint64_t)v76, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
      PluginAttachmentLedgerTopic.Configuration.init(proto:)(v67, (uint64_t)v80);
      outlined destroy of AttachmentLedger_CreateTopicRequest((uint64_t)v26, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
      long long v39 = *(_OWORD *)v80;
      long long v40 = *(_OWORD *)&v80[16];
      uint64_t v38 = *(void *)&v80[32];
    }
    *(_OWORD *)id v80 = v39;
    *(_OWORD *)&v80[16] = v40;
    *(void *)&v80[32] = v38;
    __int16 v81 = v37 == 1;
    v78(v80);
  }
  else
  {
    if (one-time initialization token for attachmentLedgerService != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    __swift_project_value_buffer(v41, (uint64_t)static Log.attachmentLedgerService);
    outlined init with copy of AttachmentLedger_CreateTopicRequest(a1, (uint64_t)v7, type metadata accessor for AttachmentLedger_CreateTopicResponse);
    id v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v44 = 134217984;
      uint64_t v45 = *v7;
      outlined destroy of AttachmentLedger_CreateTopicRequest((uint64_t)v7, type metadata accessor for AttachmentLedger_CreateTopicResponse);
      *(void *)id v80 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B0DF7000, v42, v43, "[CreateTopic] Failed, unexpected response-status, code=%ld", v44, 0xCu);
      MEMORY[0x1B3EA39E0](v44, -1, -1);
    }
    else
    {
      outlined destroy of AttachmentLedger_CreateTopicRequest((uint64_t)v7, type metadata accessor for AttachmentLedger_CreateTopicResponse);
    }

    type metadata accessor for AttachmentLedgerTopicError(0);
    lazy protocol witness table accessor for type AttachmentLedger_CreateTopicRequest and conformance AttachmentLedger_CreateTopicRequest(&lazy protocol witness table cache variable for type AttachmentLedgerTopicError and conformance AttachmentLedgerTopicError, (void (*)(uint64_t))type metadata accessor for AttachmentLedgerTopicError);
    uint64_t v46 = (void *)swift_allocError();
    *long long v47 = 0xD000000000000017;
    v47[1] = 0x80000001B115C390;
    swift_storeEnumTagMultiPayload();
    *(void *)id v80 = v46;
    memset(&v80[8], 0, 32);
    __int16 v81 = 256;
    v78(v80);
  }
}

void closure #2 in closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:)(uint64_t a1, uint64_t a2, double *a3, void (*a4)(uint64_t *), void (*a5)(void, void), uint64_t a6)
{
  uint64_t v74 = a6;
  uint64_t v87 = a3;
  uint64_t v88 = a5;
  unint64_t v85 = a4;
  uint64_t v86 = a2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v81 = *(void *)(v7 - 8);
  uint64_t v82 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v79 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = type metadata accessor for DispatchQoS();
  uint64_t v78 = *(void *)(v80 - 8);
  MEMORY[0x1F4188790](v80);
  uint64_t v77 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TopicRequest = type metadata accessor for AttachmentLedger_CreateTopicRequest(0);
  uint64_t v71 = *(void *)(TopicRequest - 8);
  MEMORY[0x1F4188790](TopicRequest - 8);
  uint64_t v72 = v11;
  uint64_t v73 = (uint64_t)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for DispatchTimeInterval();
  uint64_t v69 = *(void *)(v70 - 8);
  MEMORY[0x1F4188790](v70);
  uint64_t v68 = (uint64_t *)((char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v83 = type metadata accessor for DispatchTime();
  uint64_t v76 = *(void *)(v83 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v83);
  uint64_t v84 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v75 = (char *)&v65 - v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginRpcError?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v19 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v65 - v20;
  uint64_t v22 = type metadata accessor for PluginRpcError();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v65 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1F4188790](v24);
  uint64_t v29 = (char *)&v65 - v28;
  MEMORY[0x1F4188790](v27);
  uint64_t v31 = (char *)&v65 - v30;
  if (one-time initialization token for attachmentLedgerService != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  __swift_project_value_buffer(v32, (uint64_t)static Log.attachmentLedgerService);
  outlined init with copy of AttachmentLedger_CreateTopicRequest(a1, (uint64_t)v31, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v33, v34))
  {
    unint64_t v67 = (void *)a1;
    int v35 = (uint8_t *)swift_slowAlloc();
    uint64_t v66 = swift_slowAlloc();
    uint64_t aBlock = v66;
    *(_DWORD *)int v35 = 136315138;
    outlined init with copy of AttachmentLedger_CreateTopicRequest((uint64_t)v31, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v21, 0, 1, v22);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, (uint64_t)v19, &demangling cache variable for type metadata for PluginRpcError?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v19, 1, v22) == 1)
    {
      unint64_t v36 = 0xE300000000000000;
      uint64_t v37 = 7104878;
    }
    else
    {
      outlined init with take of AttachmentLedger_CreateTopicRequest((uint64_t)v19, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
      outlined init with copy of AttachmentLedger_CreateTopicRequest((uint64_t)v29, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
      uint64_t v37 = String.init<A>(reflecting:)();
      unint64_t v36 = v39;
      outlined destroy of AttachmentLedger_CreateTopicRequest((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
    }
    outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for PluginRpcError?);
    uint64_t v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v36, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of AttachmentLedger_CreateTopicRequest((uint64_t)v31, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
    _os_log_impl(&dword_1B0DF7000, v33, v34, "Failed to CreateTopic due to error: %s", v35, 0xCu);
    uint64_t v40 = v66;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v40, -1, -1);
    MEMORY[0x1B3EA39E0](v35, -1, -1);

    uint64_t v38 = (void (*)(uint64_t *))v88;
    a1 = (uint64_t)v67;
  }
  else
  {
    outlined destroy of AttachmentLedger_CreateTopicRequest((uint64_t)v31, (uint64_t (*)(void))type metadata accessor for PluginRpcError);

    uint64_t v38 = (void (*)(uint64_t *))v88;
  }
  uint64_t v42 = v86;
  uint64_t v41 = v87;
  if (*((void *)v87 + 5) == v86)
  {
    type metadata accessor for AttachmentLedgerTopicError(0);
    lazy protocol witness table accessor for type AttachmentLedger_CreateTopicRequest and conformance AttachmentLedger_CreateTopicRequest(&lazy protocol witness table cache variable for type AttachmentLedgerTopicError and conformance AttachmentLedgerTopicError, (void (*)(uint64_t))type metadata accessor for AttachmentLedgerTopicError);
    os_log_type_t v43 = (void *)swift_allocError();
    outlined init with copy of AttachmentLedger_CreateTopicRequest(a1, v44, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
    swift_storeEnumTagMultiPayload();
    uint64_t aBlock = (uint64_t)v43;
    long long v91 = 0u;
    long long v92 = 0u;
    LOWORD(v93) = 256;
    v85(&aBlock);

    return;
  }
  uint64_t v45 = *((void *)v87 + 10);
  uint64_t v46 = *((void *)v87 + 11);
  __swift_project_boxed_opaque_existential_1((void *)v87 + 7, v45);
  uint64_t v47 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 8))(v45, v46);
  static DispatchTime.now()();
  double v48 = v41[6];
  if ((~*(void *)&v48 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v48 <= -9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v48 < 9.22337204e18)
  {
    uint64_t v49 = v68;
    *uint64_t v68 = (uint64_t)v48;
    uint64_t v50 = *MEMORY[0x1E4FBCAE8];
    unint64_t v67 = (void *)v47;
    uint64_t v51 = v69;
    uint64_t v52 = v70;
    (*(void (**)(void *, uint64_t, uint64_t))(v69 + 104))(v49, v50, v70);
    uint64_t v53 = v75;
    unint64_t v54 = v84;
    MEMORY[0x1B3EA17B0](v84, v49);
    (*(void (**)(void *, uint64_t))(v51 + 8))(v49, v52);
    uint64_t v88 = *(void (**)(void, void))(v76 + 8);
    v88(v54, v83);
    uint64_t v55 = v73;
    outlined init with copy of AttachmentLedger_CreateTopicRequest(v74, v73, type metadata accessor for AttachmentLedger_CreateTopicRequest);
    unint64_t v56 = (*(unsigned __int8 *)(v71 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
    unint64_t v57 = (v72 + v56 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v58 = swift_allocObject();
    *(void *)(v58 + 16) = v41;
    outlined init with take of AttachmentLedger_CreateTopicRequest(v55, v58 + v56, type metadata accessor for AttachmentLedger_CreateTopicRequest);
    *(void *)(v58 + v57) = v42;
    uint64_t v59 = (void (**)(uint64_t *))(v58 + ((v57 + 15) & 0xFFFFFFFFFFFFFFF8));
    *uint64_t v59 = v85;
    v59[1] = v38;
    *((void *)&v92 + 1) = partial apply for closure #1 in closure #2 in closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:);
    uint64_t v93 = v58;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    *(void *)&long long v91 = 1107296256;
    *((void *)&v91 + 1) = thunk for @escaping @callee_guaranteed () -> ();
    *(void *)&long long v92 = &block_descriptor_2;
    unint64_t v60 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    uint64_t v61 = v77;
    static DispatchQoS.unspecified.getter();
    uint64_t v89 = MEMORY[0x1E4FBC860];
    lazy protocol witness table accessor for type AttachmentLedger_CreateTopicRequest and conformance AttachmentLedger_CreateTopicRequest((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    uint64_t v62 = v79;
    uint64_t v63 = v82;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    unint64_t v64 = v67;
    MEMORY[0x1B3EA2180](v53, v61, v62, v60);
    _Block_release(v60);

    (*(void (**)(char *, uint64_t))(v81 + 8))(v62, v63);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v61, v80);
    v88(v53, v83);
    swift_release();
    return;
  }
LABEL_17:
  __break(1u);
}

uint64_t closure #1 in closure #2 in closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (__OFADD__(a3, 1))
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)result + 152))(a2, a3 + 1);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = a4;
    *(void *)(v8 + 24) = a5;
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = a4;
    *(void *)(v9 + 24) = a5;
    swift_retain_n();
    specialized Publisher.sinkOnce(_:onError:)((uint64_t)partial apply for closure #1 in closure #1 in closure #2 in closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:), v8, (uint64_t)partial apply for closure #2 in closure #1 in closure #2 in closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:), v9);
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t AttachmentLedgerClient.createTopic(name:dataCryptorProvider:initialAttachments:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t TopicRequest = type metadata accessor for AttachmentLedger_CreateTopicRequest(0);
  MEMORY[0x1F4188790](TopicRequest);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v24 = a1;
  uint64_t v25 = a2;
  lazy protocol witness table accessor for type AttachmentLedger_CreateTopicRequest and conformance AttachmentLedger_CreateTopicRequest(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicRequest and conformance AttachmentLedger_CreateTopicRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_CreateTopicRequest);
  static Message.with(_:)();
  uint64_t v13 = *(void *)(v4 + 80);
  uint64_t v14 = *(void *)(v4 + 88);
  __swift_project_boxed_opaque_existential_1((void *)(v5 + 56), *(void *)(v5 + 80));
  uint64_t v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v13, v14);
  uint64_t v18 = v5;
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v21 = v12;
  uint64_t v22 = a3;
  uint64_t v23 = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<PluginAttachmentLedgerTopic, Error>);
  OS_dispatch_queue.sync<A>(execute:)();

  outlined destroy of AttachmentLedger_CreateTopicRequest((uint64_t)v12, type metadata accessor for AttachmentLedger_CreateTopicRequest);
  return v26;
}

uint64_t closure #2 in AttachmentLedgerClient.createTopic(name:dataCryptorProvider:initialAttachments:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v21 = a7;
  uint64_t TopicRequest = type metadata accessor for AttachmentLedger_CreateTopicRequest(0);
  uint64_t v14 = *(void *)(TopicRequest - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  MEMORY[0x1F4188790](TopicRequest - 8);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_CreateTopicRequest(a4, (uint64_t)v16, type metadata accessor for AttachmentLedger_CreateTopicRequest);
  outlined init with copy of UserNotificationCenter(a5, (uint64_t)v22);
  unint64_t v17 = (*(unsigned __int8 *)(v14 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  unint64_t v18 = (v15 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = (void *)swift_allocObject();
  v19[2] = a1;
  uint64_t v19[3] = a2;
  v19[4] = a3;
  outlined init with take of AttachmentLedger_CreateTopicRequest((uint64_t)v16, (uint64_t)v19 + v17, type metadata accessor for AttachmentLedger_CreateTopicRequest);
  outlined init with take of BackgroundSessionManagerDataSource(v22, (uint64_t)v19 + v18);
  *(void *)((char *)v19 + ((v18 + 47) & 0xFFFFFFFFFFFFFFF8)) = a6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<PluginAttachmentLedgerTopic, Error>);
  swift_allocObject();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = Future.init(_:)();
  *uint64_t v21 = result;
  return result;
}

uint64_t closure #1 in closure #2 in AttachmentLedgerClient.createTopic(name:dataCryptorProvider:initialAttachments:)(void (*a1)(long long *), uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a1;
  *(void *)(v15 + 24) = a2;
  swift_beginAccess();
  uint64_t v16 = a3[2];
  uint64_t v17 = *(void *)(v16 + 16);
  swift_retain();
  if (!v17) {
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a4, a5);
  if ((v19 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  uint64_t v37 = a1;
  uint64_t v20 = *(void *)(*(void *)(v16 + 56) + 8 * v18);
  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t v21 = swift_bridgeObjectRelease();
  uint64_t v38 = v20;
  (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v20 + 288))(&v40, v21);
  uint64_t v22 = v40;
  uint64_t v23 = v42;
  unint64_t v24 = v44;
  if (!(v44 >> 62)) {
    goto LABEL_11;
  }
  if (v44 >> 62 == 1)
  {
    outlined consume of PluginAttachmentLedgerTopic.State(v40, *((uint64_t *)&v40 + 1), v41, v42, v43, v44);
LABEL_6:
    swift_release();
LABEL_8:
    (*(void (**)(uint64_t, void))(*a3 + 152))(a6, 0);
    outlined init with copy of UserNotificationCenter(a7, (uint64_t)&v40);
    uint64_t v25 = (void *)swift_allocObject();
    v25[2] = a3;
    v25[3] = a4;
    v25[4] = a5;
    v25[5] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<PluginAttachmentLedgerTopic, Error>) -> ();
    v25[6] = v15;
    outlined init with take of BackgroundSessionManagerDataSource(&v40, (uint64_t)(v25 + 7));
    v25[12] = a8;
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<PluginAttachmentLedgerTopic, Error>) -> ();
    *(void *)(v26 + 24) = v15;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    specialized Publisher.sinkOnce(_:onError:)((uint64_t)partial apply for closure #1 in closure #1 in closure #2 in AttachmentLedgerClient.createTopic(name:dataCryptorProvider:initialAttachments:), (uint64_t)v25, (uint64_t)partial apply for closure #2 in closure #1 in closure #2 in AttachmentLedgerClient.createTopic(name:dataCryptorProvider:initialAttachments:), v26);
    swift_release();
    swift_release();
    return swift_release();
  }
  if (v44 != 0x8000000000000000 || v41 | *((void *)&v40 + 1) | (unint64_t)v40 | v42 | v43 | v45)
  {
    uint64_t v35 = v43 | v45;
    uint64_t v36 = v41 | *((void *)&v40 + 1);
    outlined consume of PluginAttachmentLedgerTopic.State(v40, *((uint64_t *)&v40 + 1), v41, v42, v43, v44);
    if (v24 != 0x8000000000000000 || v22 != 1 || v36 | v23 | v35) {
      goto LABEL_6;
    }
  }
  else
  {
LABEL_11:
    outlined consume of PluginAttachmentLedgerTopic.State(v40, *((uint64_t *)&v40 + 1), v41, v42, v43, v44);
  }
  swift_release();
  if (one-time initialization token for attachmentLedgerService != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  __swift_project_value_buffer(v28, (uint64_t)static Log.attachmentLedgerService);
  swift_retain_n();
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    *(void *)&long long v40 = v32;
    *(_DWORD *)uint64_t v31 = 136315138;
    uint64_t v33 = PluginAttachmentLedgerTopic.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, (uint64_t *)&v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v29, v30, "[CreateTopic] Topic already exists. Returning %s", v31, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v32, -1, -1);
    MEMORY[0x1B3EA39E0](v31, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  *(void *)&long long v40 = v38;
  BYTE8(v40) = 0;
  swift_retain();
  v37(&v40);
  return swift_release_n();
}

uint64_t closure #1 in closure #1 in closure #2 in AttachmentLedgerClient.createTopic(name:dataCryptorProvider:initialAttachments:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(void, void), uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v13 = *(void *)a1;
  uint64_t v14 = *(void *)(a1 + 8);
  uint64_t v15 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  char v18 = *(unsigned char *)(a1 + 40);
  swift_beginAccess();
  uint64_t v19 = *(void *)(a2 + 16);
  if (!*(void *)(v19 + 16)) {
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a3, (uint64_t)a4);
  if ((v21 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  uint64_t v41 = a8;
  uint64_t v42 = a5;
  uint64_t v22 = *(void *)(*(void *)(v19 + 56) + 8 * v20);
  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t v23 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v22 + 288))(&v44, v23);
  uint64_t v24 = v44;
  unint64_t v25 = v49;
  if (!(v49 >> 62)) {
    goto LABEL_14;
  }
  if (v49 >> 62 == 1)
  {
    outlined consume of PluginAttachmentLedgerTopic.State(v44, v45, v46, v47, v48, v49);
LABEL_6:
    swift_release();
    a8 = v41;
    a5 = v42;
LABEL_8:
    if (v18)
    {
      uint64_t v16 = 10.0;
      uint64_t v14 = 1.0;
      uint64_t v15 = 3;
      uint64_t v13 = 2;
      uint64_t v17 = 1.0;
    }
    outlined init with copy of UserNotificationCenter(a2 + 56, (uint64_t)&v44);
    outlined init with copy of UserNotificationCenter(a7, (uint64_t)v52);
    v51[0] = v13;
    v51[1] = v14;
    v51[2] = v15;
    v51[3] = v17;
    v51[4] = v16;
    unint64_t v26 = *(void *)(a2 + 96);
    type metadata accessor for PluginAttachmentLedgerTopic(0);
    swift_allocObject();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v27 = PluginAttachmentLedgerTopic.init(name:service:dataCryptorProvider:config:localParticipantID:initialAttachments:)(a3, a4, (uint64_t)&v44, (uint64_t)v52, v51, v26, a8);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v52[0] = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v27, a3, (uint64_t)a4, isUniquelyReferenced_nonNull_native);
    *(void *)(a2 + 16) = v52[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    goto LABEL_11;
  }
  if (v49 != 0x8000000000000000 || v46 | v45 | v44 | v47 | v48 | v50)
  {
    uint64_t v38 = v48 | v50;
    uint64_t v39 = v46 | v45;
    uint64_t v40 = v47;
    outlined consume of PluginAttachmentLedgerTopic.State(v44, v45, v46, v47, v48, v49);
    if (v25 != 0x8000000000000000 || v24 != 1 || v39 | v40 | v38) {
      goto LABEL_6;
    }
  }
  else
  {
LABEL_14:
    outlined consume of PluginAttachmentLedgerTopic.State(v44, v45, v46, v47, v48, v49);
  }
  if (one-time initialization token for attachmentLedgerService != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  __swift_project_value_buffer(v31, (uint64_t)static Log.attachmentLedgerService);
  swift_retain_n();
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v32, v33))
  {
    unint64_t v34 = (uint8_t *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    uint64_t v44 = v35;
    *(_DWORD *)unint64_t v34 = 136315138;
    uint64_t v36 = PluginAttachmentLedgerTopic.description.getter();
    v52[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v32, v33, "[CreateTopic] Topic already exists. Returning %s", v34, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v35, -1, -1);
    MEMORY[0x1B3EA39E0](v34, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  a5 = v42;
LABEL_11:
  uint64_t v29 = swift_retain();
  a5(v29, 0);
  return swift_release_n();
}

uint64_t AttachmentLedgerClient.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  return v0;
}

uint64_t AttachmentLedgerClient.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  return swift_deallocClassInstance();
}

uint64_t sub_1B0E2EC78()
{
  uint64_t v1 = (int *)(type metadata accessor for AttachmentLedger_CreateTopicRequest(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[8];
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  return MEMORY[0x1F4186498](v0, v5, v4);
}

uint64_t partial apply for closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:)(void (*a1)(long long *), void (*a2)(long long *))
{
  uint64_t v5 = *(void *)(type metadata accessor for AttachmentLedger_CreateTopicRequest(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void **)(v2 + 16);
  uint64_t v8 = *(void *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  return closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:)(a1, a2, v7, (uint64_t *)(v2 + v6), v8);
}

uint64_t partial apply for closure #1 in AttachmentLedgerClient.createTopic(name:dataCryptorProvider:initialAttachments:)(void *a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v4;
  a1[1] = v3;
  return result;
}

uint64_t partial apply for closure #2 in AttachmentLedgerClient.createTopic(name:dataCryptorProvider:initialAttachments:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #2 in AttachmentLedgerClient.createTopic(name:dataCryptorProvider:initialAttachments:)(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], a1);
}

uint64_t type metadata accessor for AttachmentLedgerClient()
{
  return self;
}

uint64_t method lookup function for AttachmentLedgerClient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AttachmentLedgerClient);
}

uint64_t dispatch thunk of AttachmentLedgerClient.__allocating_init(serviceProvider:config:localParticipantID:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of AttachmentLedgerClient.updateVirtualParticipant(_:localParticipantID:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of AttachmentLedgerClient.sendCreateServerTopic(request:attempt:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of AttachmentLedgerClient.createTopic(name:dataCryptorProvider:initialAttachments:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t initializeBufferWithCopyOfBuffer for AttachmentLedgerClient.Config(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t initializeWithCopy for AttachmentLedgerClient.Config(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AttachmentLedgerClient.Config(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for AttachmentLedgerClient.Config(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedgerClient.Config(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedgerClient.Config(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AttachmentLedgerClient.Config()
{
  return &type metadata for AttachmentLedgerClient.Config;
}

uint64_t sub_1B0E2F11C()
{
  uint64_t v1 = (int *)(type metadata accessor for AttachmentLedger_CreateTopicRequest(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[8];
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + v5);
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, ((v5 + 47) & 0xFFFFFFFFFFFFFFF8) + 8, v4);
}

uint64_t partial apply for closure #1 in closure #2 in AttachmentLedgerClient.createTopic(name:dataCryptorProvider:initialAttachments:)(void (*a1)(long long *), uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for AttachmentLedger_CreateTopicRequest(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = (void *)v2[2];
  uint64_t v9 = v2[3];
  uint64_t v10 = v2[4];
  uint64_t v11 = *(void *)((char *)v2 + ((v7 + 47) & 0xFFFFFFFFFFFFFFF8));
  return closure #1 in closure #2 in AttachmentLedgerClient.createTopic(name:dataCryptorProvider:initialAttachments:)(a1, a2, v8, v9, v10, (uint64_t)v2 + v6, (uint64_t)v2 + v7, v11);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<PluginAttachmentLedgerTopic, Error>) -> ()(uint64_t a1, char a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  uint64_t v5 = a1;
  char v6 = a2 & 1;
  return v3(&v5);
}

uint64_t sub_1B0E2F354()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 104, 7);
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in AttachmentLedgerClient.createTopic(name:dataCryptorProvider:initialAttachments:)(uint64_t a1)
{
  return closure #1 in closure #1 in closure #2 in AttachmentLedgerClient.createTopic(name:dataCryptorProvider:initialAttachments:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void (**)(void, void))(v1 + 40), *(void *)(v1 + 48), v1 + 56, *(void **)(v1 + 96));
}

uint64_t sub_1B0E2F3C4()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #2 in closure #1 in closure #2 in AttachmentLedgerClient.createTopic(name:dataCryptorProvider:initialAttachments:)(void *a1)
{
  return (*(uint64_t (**)(void, uint64_t))(v1 + 16))(*a1, 1);
}

uint64_t outlined consume of PluginAttachmentLedgerTopic.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a6 >> 62 == 1) {
    return swift_bridgeObjectRelease();
  }
  if (!(a6 >> 62)) {
    return swift_release();
  }
  return result;
}

uint64_t sub_1B0E2F450()
{
  uint64_t v1 = (int *)(type metadata accessor for AttachmentLedger_CreateTopicRequest(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v6 = v0 + v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = v6 + v1[8];
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_release();
  return MEMORY[0x1F4186498](v0, v5, v4);
}

void partial apply for closure #1 in closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for AttachmentLedger_CreateTopicRequest(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1 + v4;
  uint64_t v6 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = *(void (**)(unsigned char *))v6;
  uint64_t v8 = *(void *)(v6 + 8);
  closure #1 in closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:)(a1, v5, v7, v8);
}

uint64_t sub_1B0E2F604()
{
  uint64_t v1 = (int *)(type metadata accessor for AttachmentLedger_CreateTopicRequest(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[8];
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  return MEMORY[0x1F4186498](v0, v4, v5);
}

void partial apply for closure #2 in closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for AttachmentLedger_CreateTopicRequest(0) - 8);
  uint64_t v4 = v1[2];
  uint64_t v5 = (double *)v1[3];
  uint64_t v6 = (void (*)(uint64_t *))v1[4];
  uint64_t v7 = (void (*)(void, void))v1[5];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  closure #2 in closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:)(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1B0E2F788()
{
  uint64_t v1 = (int *)(type metadata accessor for AttachmentLedger_CreateTopicRequest(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[8];
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_release();
  return MEMORY[0x1F4186498](v0, v5, v4);
}

uint64_t partial apply for closure #1 in closure #2 in closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for AttachmentLedger_CreateTopicRequest(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = v0 + v2;
  uint64_t v6 = *(void *)(v0 + v3);
  uint64_t v7 = (uint64_t *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  return closure #1 in closure #2 in closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:)(v4, v5, v6, v8, v9);
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:)(uint64_t a1)
{
  unint64_t v2 = *(uint64_t (**)(_OWORD *))(v1 + 16);
  uint64_t v3 = *(void *)(a1 + 32);
  char v4 = *(unsigned char *)(a1 + 40);
  long long v5 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v5;
  uint64_t v8 = v3;
  char v9 = v4;
  char v10 = 0;
  return v2(v7);
}

void partial apply for closure #2 in closure #1 in closure #2 in closure #1 in AttachmentLedgerClient.sendCreateServerTopic(request:attempt:)(void **a1)
{
  unint64_t v2 = *(void (**)(void **))(v1 + 16);
  uint64_t v3 = *a1;
  long long v5 = v3;
  long long v6 = 0u;
  long long v7 = 0u;
  __int16 v8 = 256;
  id v4 = v3;
  v2(&v5);
}

uint64_t outlined init with copy of AttachmentLedger_CreateTopicRequest(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of AttachmentLedger_CreateTopicRequest(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t lazy protocol witness table accessor for type AttachmentLedger_CreateTopicRequest and conformance AttachmentLedger_CreateTopicRequest(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of AttachmentLedger_CreateTopicRequest(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t one-time initialization function for $traceID()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v0 - 8);
  unint64_t v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskLocal<UUID?>);
  swift_allocObject();
  uint64_t result = TaskLocal.init(wrappedValue:)();
  static AsyncSerialQueue.$traceID = result;
  return result;
}

uint64_t *AsyncSerialQueue.$traceID.unsafeMutableAddressor()
{
  if (one-time initialization token for $traceID != -1) {
    swift_once();
  }
  return &static AsyncSerialQueue.$traceID;
}

uint64_t static AsyncSerialQueue.$traceID.getter()
{
  if (one-time initialization token for $traceID != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t static AsyncSerialQueue.traceID.getter()
{
  if (one-time initialization token for $traceID != -1) {
    swift_once();
  }
  return TaskLocal.get()();
}

uint64_t AsyncSerialQueue.traceID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  id v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t AsyncSerialQueue.init(priority:bufferingPolicy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v61 = a1;
  uint64_t v62 = a2;
  uint64_t v59 = a3;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v56 = (uint64_t)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v58 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v58);
  uint64_t v50 = v7;
  uint64_t v51 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  char v9 = (char *)&v45 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.BufferingPolicy);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<@Sendable ()>);
  uint64_t v52 = *(void *)(v54 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v54);
  uint64_t v47 = v15;
  uint64_t v48 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v45 - v16;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation?);
  uint64_t v19 = MEMORY[0x1F4188790](v18 - 8);
  char v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v45 - v22;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
  uint64_t v25 = *(void *)(v24 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56))(v23, 1, 1, v24);
  uint64_t v53 = v11;
  unint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v55 = v10;
  v26(v13, v62, v10);
  uint64_t v63 = v23;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for @Sendable ());
  uint64_t v27 = v17;
  uint64_t v28 = v59;
  AsyncStream.init(_:bufferingPolicy:_:)();
  UUID.init()();
  uint64_t v57 = v5;
  uint64_t v29 = *(void (**)(uint64_t, char *))(v5 + 16);
  unint64_t v60 = v9;
  os_log_type_t v30 = v9;
  uint64_t v31 = v58;
  v29(v28, v30);
  unint64_t v49 = v23;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v23, (uint64_t)v21, &demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation?);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v21, 1, v24);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v33 = type metadata accessor for AsyncSerialQueue();
    (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v28 + *(int *)(v33 + 20), v21, v24);
    uint64_t v34 = v56;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v61, v56, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    uint64_t v35 = v51;
    ((void (*)(char *, char *, uint64_t))v29)(v51, v60, v31);
    uint64_t v36 = v52;
    unint64_t v37 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
    uint64_t v38 = v48;
    uint64_t v39 = v27;
    uint64_t v46 = v27;
    uint64_t v40 = v54;
    v37(v48, v39, v54);
    uint64_t v41 = v57;
    unint64_t v42 = (*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
    unint64_t v43 = (v50 + *(unsigned __int8 *)(v36 + 80) + v42) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
    uint64_t v44 = swift_allocObject();
    *(void *)(v44 + 16) = 0;
    *(void *)(v44 + 24) = 0;
    (*(void (**)(unint64_t, char *, uint64_t))(v41 + 32))(v44 + v42, v35, v31);
    (*(void (**)(unint64_t, char *, uint64_t))(v36 + 32))(v44 + v43, v38, v40);
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v34, (uint64_t)&async function pointer to partial apply for closure #2 in AsyncSerialQueue.init(priority:bufferingPolicy:), v44);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v62, v55);
    outlined destroy of UUID?(v61, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v60, v31);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v46, v40);
    return outlined destroy of UUID?((uint64_t)v49, &demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation?);
  }
  return result;
}

uint64_t closure #1 in AsyncSerialQueue.init(priority:bufferingPolicy:)(uint64_t a1, uint64_t a2)
{
  outlined destroy of UUID?(a2, &demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation?);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
  uint64_t v7 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a2, a1, v4);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56);
  return v5(a2, 0, 1, v4);
}

uint64_t partial apply for closure #1 in AsyncSerialQueue.init(priority:bufferingPolicy:)(uint64_t a1)
{
  return closure #1 in AsyncSerialQueue.init(priority:bufferingPolicy:)(a1, *(void *)(v1 + 16));
}

uint64_t type metadata accessor for AsyncSerialQueue()
{
  uint64_t result = type metadata singleton initialization cache for AsyncSerialQueue;
  if (!type metadata singleton initialization cache for AsyncSerialQueue) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t closure #2 in AsyncSerialQueue.init(priority:bufferingPolicy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  void v5[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v5[5] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #2 in AsyncSerialQueue.init(priority:bufferingPolicy:), 0, 0);
}

uint64_t closure #2 in AsyncSerialQueue.init(priority:bufferingPolicy:)()
{
  if (one-time initialization token for $traceID != -1) {
    swift_once();
  }
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, v3, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v1, 0, 1, v4);
  uint64_t v6 = swift_task_alloc();
  v0[6] = v6;
  *(void *)(v6 + 16) = v2;
  uint64_t v7 = (void *)swift_task_alloc();
  v0[7] = v7;
  void *v7 = v0;
  v7[1] = closure #2 in AsyncSerialQueue.init(priority:bufferingPolicy:);
  uint64_t v8 = v0[5];
  uint64_t v9 = v0[2];
  return MEMORY[0x1F41881B8](v9, v8, &async function pointer to partial apply for closure #1 in closure #2 in AsyncSerialQueue.init(priority:bufferingPolicy:), v6, 0, 0, 0xD000000000000025, 0x80000001B115C3B0);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;

  uint64_t v1 = *(void *)(*v0 + 40);
  uint64_t v4 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  outlined destroy of UUID?(v1, &demangling cache variable for type metadata for UUID?);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v4 + 8);
  return v2();
}

uint64_t sub_1B0E30890()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<@Sendable ()>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return MEMORY[0x1F4186498](v0, v10, v11);
}

uint64_t partial apply for closure #2 in AsyncSerialQueue.init(priority:bufferingPolicy:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = v6 + *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<@Sendable ()>)
                 - 8);
  unint64_t v9 = (v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v1 + 16);
  uint64_t v11 = *(void *)(v1 + 24);
  uint64_t v12 = v1 + v6;
  uint64_t v13 = v1 + v9;
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v14;
  *uint64_t v14 = v3;
  v14[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #2 in AsyncSerialQueue.init(priority:bufferingPolicy:)(a1, v10, v11, v12, v13);
}

uint64_t closure #1 in closure #2 in AsyncSerialQueue.init(priority:bufferingPolicy:)(uint64_t a1, uint64_t a2)
{
  v2[4] = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Iterator);
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in closure #2 in AsyncSerialQueue.init(priority:bufferingPolicy:), 0, 0);
}

uint64_t closure #1 in closure #2 in AsyncSerialQueue.init(priority:bufferingPolicy:)()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<@Sendable ()>);
  AsyncStream.makeAsyncIterator()();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v1;
  void *v1 = v0;
  v1[1] = closure #1 in closure #2 in AsyncSerialQueue.init(priority:bufferingPolicy:);
  uint64_t v2 = *(void *)(v0 + 40);
  return MEMORY[0x1F4187D58](v0 + 16, 0, 0, v2);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in closure #2 in AsyncSerialQueue.init(priority:bufferingPolicy:), 0, 0);
}

{
  void *v0;
  int *v1;
  void *v2;
  uint64_t (*v4)(void);
  uint64_t (*v5)(void);
  uint64_t v6;

  uint64_t v1 = (int *)v0[2];
  v0[9] = v1;
  if (v1)
  {
    v0[10] = v0[3];
    uint64_t v5 = (uint64_t (*)(void))((char *)v1 + *v1);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[11] = v2;
    *uint64_t v2 = v0;
    v2[1] = closure #1 in closure #2 in AsyncSerialQueue.init(priority:bufferingPolicy:);
    return v5();
  }
  else
  {
    (*(void (**)(void, void))(v0[6] + 8))(v0[7], v0[5]);
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 72);
  uint64_t v3 = *v0;
  swift_task_dealloc();
  _sxRi_zRi0_zlyytIseghHr_SgWOe(v2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 64) = v4;
  *uint64_t v4 = v3;
  v4[1] = closure #1 in closure #2 in AsyncSerialQueue.init(priority:bufferingPolicy:);
  uint64_t v5 = *(void *)(v1 + 40);
  return MEMORY[0x1F4187D58](v1 + 16, 0, 0, v5);
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of UUID?(a1, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC7Combine14AnyCancellableC_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of UUID?(a1, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  type metadata accessor for AnyCancellable();
  return swift_task_create();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of UUID?(a1, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ()?);
  return swift_task_create();
}

uint64_t AsyncSerialQueue.perform(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.YieldResult);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AsyncSerialQueue();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2 + *(int *)(v13 + 20), v5);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  *(void *)(v14 + 24) = a2;
  v16[0] = &async function pointer to partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> ();
  v16[1] = v14;
  swift_retain();
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable @async () -> ()(uint64_t a1, int *a2)
{
  uint64_t v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v3;
  void *v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v5();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> ()(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @Sendable @async () -> ()
                                              + async function pointer to thunk for @escaping @callee_guaranteed @Sendable @async () -> ());
  return v6(a1, v4);
}

uint64_t AsyncSerialQueue.performAndWaitFor<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  void v5[2] = a1;
  return MEMORY[0x1F4188298](AsyncSerialQueue.performAndWaitFor<A>(_:), 0, 0);
}

{
  uint64_t v4;
  void *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  void v5[2] = a1;
  return MEMORY[0x1F4188298](AsyncSerialQueue.performAndWaitFor<A>(_:), 0, 0);
}

uint64_t AsyncSerialQueue.performAndWaitFor<A>(_:)()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  long long v2 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v1 + 32) = v2;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to withUnsafeContinuation<A>(isolation:_:)
                                                                           + async function pointer to withUnsafeContinuation<A>(isolation:_:));
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v3;
  void *v3 = v0;
  v3[1] = AsyncSerialQueue.performAndWaitFor<A>(_:);
  uint64_t v4 = *(void *)(v0 + 16);
  return v6(v4, 0, 0, (uint64_t)partial apply for closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:), v1);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  long long v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;

  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  long long v2 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v1 + 32) = v2;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to withUnsafeThrowingContinuation<A>(isolation:_:)
                                                                           + async function pointer to withUnsafeThrowingContinuation<A>(isolation:_:));
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v3;
  void *v3 = v0;
  v3[1] = AsyncSerialQueue.performAndWaitFor<A>(_:);
  uint64_t v4 = *(void *)(v0 + 16);
  return v6(v4, 0, 0, (uint64_t)partial apply for closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:), v1);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  long long v2 = *v1;
  *(void *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](AsyncSerialQueue.performAndWaitFor<A>(_:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v20 = a3;
  uint64_t v21 = a2;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.YieldResult);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = a5;
  v16[3] = a1;
  v16[4] = v20;
  v16[5] = a4;
  uint64_t v17 = type metadata accessor for AsyncSerialQueue();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v21 + *(int *)(v17 + 20), v8);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = &async function pointer to partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  *(void *)(v18 + 24) = v16;
  uint64_t v22 = &thunk for @escaping @callee_guaranteed @Sendable @async () -> ()partial apply;
  uint64_t v23 = v18;
  swift_retain();
  swift_retain();
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release();
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;

  uint64_t v20 = a3;
  uint64_t v21 = a2;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.YieldResult);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = a5;
  v16[3] = a1;
  v16[4] = v20;
  v16[5] = a4;
  uint64_t v17 = type metadata accessor for AsyncSerialQueue();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v21 + *(int *)(v17 + 20), v8);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = &async function pointer to partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  *(void *)(v18 + 24) = v16;
  uint64_t v22 = &thunk for @escaping @callee_guaranteed @Sendable @async () -> ()partial apply;
  uint64_t v23 = v18;
  swift_retain();
  swift_retain();
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release();
}

uint64_t partial apply for closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:)(uint64_t a1)
{
  return closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:)(a1, v1[3], v1[4], v1[5], v1[2]);
}

{
  uint64_t *v1;

  return closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:)(a1, v1[3], v1[4], v1[5], v1[2]);
}

uint64_t closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a1;
  v4[3] = a4;
  uint64_t v6 = swift_task_alloc();
  v4[4] = v6;
  uint64_t v9 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v7 = (void *)swift_task_alloc();
  v4[5] = v7;
  void *v7 = v4;
  v7[1] = closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return v9(v6);
}

{
  void *v4;
  uint64_t v6;
  void *v7;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;

  v4[3] = a1;
  v4[4] = a4;
  v4[5] = *(void *)(a4 - 8);
  uint64_t v6 = swift_task_alloc();
  v4[6] = v6;
  uint64_t v9 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v7 = (void *)swift_task_alloc();
  v4[7] = v7;
  void *v7 = v4;
  v7[1] = closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return v9(v6);
}

uint64_t closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:)()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:), 0, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(*(void *)(v0[3] - 8) + 32))(*(void *)(*(void *)(v0[2] + 64) + 40), v0[4]);
  swift_continuation_resume();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0) {
    long long v2 = closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  }
  else {
    long long v2 = closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[5] + 32))(*(void *)(*(void *)(v0[3] + 64) + 40), v0[6]);
  swift_continuation_throwingResume();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[3];
  long long v2 = v0[4];
  v0[2] = v0[8];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  UnsafeContinuation.resume(throwing:)((uint64_t)(v0 + 2), v1, v2, v3);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t withUnsafeContinuation<A>(isolation:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[11] = a4;
  v5[12] = a5;
  v5[10] = a1;
  if (a2)
  {
    swift_getObjectType();
    uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
  return MEMORY[0x1F4188298](withUnsafeContinuation<A>(isolation:_:), v6, v8);
}

uint64_t withUnsafeContinuation<A>(isolation:_:)()
{
  uint64_t v1 = (void (*)(uint64_t))v0[11];
  uint64_t v2 = v0[10];
  v0[2] = v0;
  v0[7] = v2;
  v0[3] = withUnsafeContinuation<A>(isolation:_:);
  uint64_t v3 = swift_continuation_init();
  v1(v3);
  return MEMORY[0x1F41881E8](v0 + 2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  uint64_t v1 = *(uint64_t (**)(void))(*(void *)v0 + 8);
  return v1();
}

uint64_t UnsafeContinuation.resume(throwing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(v6, a1, a4);
  return swift_continuation_throwingResumeWithError();
}

uint64_t withUnsafeThrowingContinuation<A>(isolation:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[11] = a4;
  v5[12] = a5;
  v5[10] = a1;
  if (a2)
  {
    swift_getObjectType();
    uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
  return MEMORY[0x1F4188298](withUnsafeThrowingContinuation<A>(isolation:_:), v6, v8);
}

uint64_t withUnsafeThrowingContinuation<A>(isolation:_:)()
{
  uint64_t v1 = (void (*)(uint64_t))v0[11];
  uint64_t v2 = v0[10];
  v0[2] = v0;
  v0[7] = v2;
  v0[3] = withUnsafeThrowingContinuation<A>(isolation:_:);
  uint64_t v3 = swift_continuation_init();
  v1(v3);
  return MEMORY[0x1F41881E8](v0 + 2);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *v0;
  if (*(void *)(*v0 + 48)) {
    swift_willThrow();
  }
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 8);
  return v2();
}

BOOL static AsyncSerialQueue.Condition.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void AsyncSerialQueue.Condition.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int AsyncSerialQueue.Condition.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AsyncSerialQueue.Condition(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Void __swiftcall AsyncSerialQueue.precondition(_:)(CopresenceCore::AsyncSerialQueue::Condition a1)
{
  Swift::UInt v1 = (unsigned char *)a1;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v50 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v46 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  uint64_t v4 = MEMORY[0x1F4188790](v49);
  uint64_t v6 = (uint64_t *)((char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v45 - v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v45 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v45 - v13;
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v17 = (char *)&v45 - v16;
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  uint64_t v47 = (char *)&v45 - v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v45 - v21;
  MEMORY[0x1F4188790](v20);
  uint64_t v24 = (uint64_t *)((char *)&v45 - v23);
  uint64_t v25 = type metadata accessor for AsyncSerialQueue();
  uint64_t v26 = MEMORY[0x1F4188790](v25 - 8);
  uint64_t v28 = (char *)&v45 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  os_log_type_t v30 = (char *)&v45 - v29;
  if (*v1)
  {
    outlined init with copy of AsyncSerialQueue(v48, (uint64_t)v28);
    if (one-time initialization token for $traceID != -1) {
      swift_once();
    }
    TaskLocal.get()();
    uint64_t v31 = v50;
    (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v14, v28, v2);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v14, 0, 1, v2);
    uint64_t v32 = (uint64_t)v6 + *(int *)(v49 + 48);
    uint64_t v24 = &demangling cache variable for type metadata for UUID?;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v17, (uint64_t)v6, &demangling cache variable for type metadata for UUID?);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v14, v32, &demangling cache variable for type metadata for UUID?);
    uint64_t v33 = *(char **)(v31 + 48);
    uint64_t v8 = (char *)(v31 + 48);
    uint64_t v22 = v33;
    if (((unsigned int (*)(uint64_t *, uint64_t, uint64_t))v33)(v6, 1, v2) == 1)
    {
      outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for UUID?);
      outlined destroy of UUID?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
      outlined destroy of AsyncSerialQueue((uint64_t)v28);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v22)(v32, 1, v2) == 1)
      {
        outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for UUID?);
        __break(1u);
        goto LABEL_7;
      }
    }
    else
    {
      os_log_type_t v30 = v45;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v6, (uint64_t)v45, &demangling cache variable for type metadata for UUID?);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v22)(v32, 1, v2) != 1) {
        goto LABEL_18;
      }
      outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for UUID?);
      outlined destroy of UUID?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
      outlined destroy of AsyncSerialQueue((uint64_t)v28);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v30, v2);
    }
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for (UUID?, UUID?));
    return;
  }
LABEL_7:
  outlined init with copy of AsyncSerialQueue(v48, (uint64_t)v30);
  if (one-time initialization token for $traceID != -1) {
    swift_once();
  }
  TaskLocal.get()();
  uint64_t v34 = v50;
  (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v22, v30, v2);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v22, 0, 1, v2);
  uint64_t v35 = (uint64_t)&v8[*(int *)(v49 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, (uint64_t)v8, &demangling cache variable for type metadata for UUID?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v22, v35, &demangling cache variable for type metadata for UUID?);
  uint64_t v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  int v37 = v36(v8, 1, v2);
  uint64_t v14 = v47;
  if (v37 == 1)
  {
    outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for UUID?);
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for UUID?);
    outlined destroy of AsyncSerialQueue((uint64_t)v30);
    if (v36((char *)v35, 1, v2) == 1)
    {
      outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for UUID?);
      return;
    }
    goto LABEL_22;
  }
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v8, (uint64_t)v47, &demangling cache variable for type metadata for UUID?);
  if (v36((char *)v35, 1, v2) == 1)
  {
LABEL_21:
    outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for UUID?);
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for UUID?);
    outlined destroy of AsyncSerialQueue((uint64_t)v30);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v14, v2);
LABEL_22:
    outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for (UUID?, UUID?));
    __break(1u);
    return;
  }
  uint64_t v38 = v50;
  uint64_t v39 = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 32))(v46, v35, v2);
  lazy protocol witness table accessor for type UUID and conformance UUID();
  uint64_t v32 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v40 = *(char **)(v38 + 8);
  uint64_t v17 = (char *)(v38 + 8);
  uint64_t v28 = v40;
  ((void (*)(char *, uint64_t))v40)(v39, v2);
  uint64_t v6 = &demangling cache variable for type metadata for UUID?;
  outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for UUID?);
  outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for UUID?);
  outlined destroy of AsyncSerialQueue((uint64_t)v30);
  ((void (*)(char *, uint64_t))v40)(v14, v2);
  outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for UUID?);
  if (v32) {
    return;
  }
  __break(1u);
LABEL_18:
  uint64_t v41 = v50;
  unint64_t v42 = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 32))(v46, v32, v2);
  lazy protocol witness table accessor for type UUID and conformance UUID();
  char v43 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v44 = *(char **)(v41 + 8);
  uint64_t v22 = (char *)(v41 + 8);
  uint64_t v8 = v44;
  ((void (*)(char *, uint64_t))v44)(v42, v2);
  uint64_t v24 = &demangling cache variable for type metadata for UUID?;
  outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for UUID?);
  outlined destroy of UUID?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
  outlined destroy of AsyncSerialQueue((uint64_t)v28);
  ((void (*)(char *, uint64_t))v44)(v30, v2);
  outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for UUID?);
  if (v43)
  {
    __break(1u);
    goto LABEL_21;
  }
}

uint64_t outlined init with copy of AsyncSerialQueue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AsyncSerialQueue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of AsyncSerialQueue(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AsyncSerialQueue();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  unint64_t result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AsyncSerialQueue.Condition and conformance AsyncSerialQueue.Condition()
{
  unint64_t result = lazy protocol witness table cache variable for type AsyncSerialQueue.Condition and conformance AsyncSerialQueue.Condition;
  if (!lazy protocol witness table cache variable for type AsyncSerialQueue.Condition and conformance AsyncSerialQueue.Condition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AsyncSerialQueue.Condition and conformance AsyncSerialQueue.Condition);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncSerialQueue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t destroy for AsyncSerialQueue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  return v7(v5, v6);
}

uint64_t initializeWithCopy for AsyncSerialQueue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for AsyncSerialQueue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for AsyncSerialQueue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for AsyncSerialQueue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncSerialQueue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0E33C10);
}

uint64_t sub_1B0E33C10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for AsyncSerialQueue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0E33D20);
}

uint64_t sub_1B0E33D20(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

void type metadata completion function for AsyncSerialQueue()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AsyncStream<@Sendable ()>.Continuation();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for AsyncStream<@Sendable ()>.Continuation()
{
  if (!lazy cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for @Sendable ());
    unint64_t v0 = type metadata accessor for AsyncStream.Continuation();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
    }
  }
}

uint64_t getEnumTagSinglePayload for AsyncSerialQueue.Condition(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AsyncSerialQueue.Condition(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B0E340A8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for AsyncSerialQueue.Condition(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AsyncSerialQueue.Condition()
{
  return &type metadata for AsyncSerialQueue.Condition;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR7Combine14AnyCancellableC_TG5(uint64_t a1, int *a2)
{
  *(void *)(v2 + 24) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  int v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 32) = v3;
  void *v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR7Combine14AnyCancellableC_TG5TQ0_;
  return v5(v2 + 16);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR7Combine14AnyCancellableC_TG5TQ0_()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void **)(*v0 + 24);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  *uint64_t v2 = *(void *)(v1 + 16);
  int v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

uint64_t sub_1B0E342FC()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR7Combine14AnyCancellableC_TG5TA(uint64_t a1)
{
  unsigned int v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR7Combine14AnyCancellableC_TG5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR7Combine14AnyCancellableC_TG5Tu);
  return v6(a1, v4);
}

uint64_t sub_1B0E343EC()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = (int *)v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  void *v6 = v1;
  v6[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:)(v3, v5, v4, v2);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  void *v6;
  uint64_t v8;

  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = (int *)v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  void *v6 = v1;
  v6[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:)(v3, v5, v4, v2);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu);
  return v6(a1, v4);
}

uint64_t partial apply for closure #1 in closure #2 in AsyncSerialQueue.init(priority:bufferingPolicy:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return closure #1 in closure #2 in AsyncSerialQueue.init(priority:bufferingPolicy:)(a1, v4);
}

uint64_t specialized closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:)(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v3;
  void *v3 = v2;
  v3[1] = specialized closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return v5();
}

{
  uint64_t v2;
  void *v3;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;

  *(void *)(v2 + 24) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 32) = v3;
  void *v3 = v2;
  v3[1] = specialized closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return v5(v2 + 16);
}

uint64_t specialized closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:)()
{
  *(void *)(*(void *)v1 + 32) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  }
  else {
    uint64_t v2 = specialized closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_continuation_throwingResume();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = *(void *)(v0 + 32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_allocError();
  *uint64_t v2 = v1;
  swift_continuation_throwingResumeWithError();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  }
  else {
    uint64_t v2 = specialized closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  **(void **)(*(void *)(v0[3] + 64) + 40) = v0[2];
  swift_continuation_throwingResume();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = *(void *)(v0 + 40);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_allocError();
  *uint64_t v2 = v1;
  swift_continuation_throwingResumeWithError();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t PresenceDataSource.assertPresence()(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  void v3[5] = AssociatedTypeWitness;
  v3[6] = *(void *)(AssociatedTypeWitness - 8);
  v3[7] = swift_task_alloc();
  return MEMORY[0x1F4188298](PresenceDataSource.assertPresence(), 0, 0);
}

uint64_t PresenceDataSource.assertPresence()()
{
  uint64_t v1 = v0[5];
  uint64_t v9 = v0[3];
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(v1, AssociatedConformanceWitness);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 + 64) + **(int **)(v9 + 64));
  uint64_t v3 = (void *)swift_task_alloc();
  v0[8] = v3;
  void *v3 = v0;
  v3[1] = PresenceDataSource.assertPresence();
  uint64_t v4 = v0[7];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[2];
  return v8(v4, v6, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v2 = *(void *)(*v1 + 56);
  uint64_t v3 = *(void *)(*v1 + 48);
  uint64_t v4 = *(void *)(*v1 + 40);
  uint64_t v5 = *v1;
  *(void *)(v5 + 72) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0)
  {
    return MEMORY[0x1F4188298](AsyncSerialQueue.performAndWaitFor<A>(_:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

uint64_t PresenceConfiguration.isPersonal.getter()
{
  return *v0;
}

uint64_t PresenceConfiguration.isPersonal.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

uint64_t (*PresenceConfiguration.isPersonal.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t PresenceConfiguration.presenceIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PresenceConfiguration.presenceIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*PresenceConfiguration.presenceIdentifier.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t PresenceConfiguration.clientIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PresenceConfiguration.clientIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return result;
}

uint64_t (*PresenceConfiguration.clientIdentifier.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

void __swiftcall PresenceConfiguration.init(presenceIdentifier:isPersonal:clientIdentifier:)(CopresenceCore::PresenceConfiguration *__return_ptr retstr, Swift::String presenceIdentifier, Swift::Bool isPersonal, Swift::String clientIdentifier)
{
  retstr->isPersonal = isPersonal;
  retstr->presenceIdentifier = presenceIdentifier;
  retstr->clientIdentifier = clientIdentifier;
}

unint64_t PresenceConfiguration.description.getter()
{
  return specialized PresenceConfiguration.description.getter(*(unsigned char *)v0 & 1, *(void *)(v0 + 8), *(void **)(v0 + 16));
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance PresenceConfiguration()
{
  return specialized PresenceConfiguration.description.getter(*(unsigned char *)v0, *(void *)(v0 + 8), *(void **)(v0 + 16));
}

uint64_t static PresenceConfiguration.meToMe(clientIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0x43654D6F54654D2ELL;
  v6._object = (void *)0xEE006C656E6E6168;
  String.append(_:)(v6);
  *(unsigned char *)a3 = 1;
  *(void *)(a3 + 8) = a1;
  *(void *)(a3 + 16) = a2;
  *(void *)(a3 + 24) = a1;
  *(void *)(a3 + 32) = a2;
  return swift_bridgeObjectRetain();
}

uint64_t SKPresenceDataSource.members.didset(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = (void *)swift_allocObject();
  _OWORD v7[2] = 0;
  v7[3] = 0;
  v7[4] = v1;
  v7[5] = a1;
  id v8 = v1;
  swift_bridgeObjectRetain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v5, (uint64_t)&async function pointer to partial apply for closure #1 in SKPresenceDataSource.members.didset, (uint64_t)v7);
  return swift_release();
}

uint64_t closure #1 in SKPresenceDataSource.members.didset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 160) = a4;
  *(void *)(v5 + 168) = a5;
  return MEMORY[0x1F4188298](closure #1 in SKPresenceDataSource.members.didset, 0, 0);
}

uint64_t closure #1 in SKPresenceDataSource.members.didset()
{
  size_t v120 = v0;
  uint64_t v2 = (char **)(v0 + 20);
  uint64_t v3 = (void *)v0[20];
  uint64_t v4 = v0 + 17;
  uint64_t v5 = v0[21];
  uint64_t v6 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x88))();
  v2[2] = (char *)v6;
  swift_bridgeObjectRetain();
  uint64_t v7 = specialized Set.subtracting(_:)(v6, v5);
  uint64_t v8 = v7;
  unint64_t v114 = v7 & 0xC000000000000001;
  if ((v7 & 0xC000000000000001) != 0)
  {
    if (__CocoaSet.count.getter()) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v1 = (uint64_t *)(v2 - 6);
    swift_bridgeObjectRelease();
    uint64_t v21 = specialized Set.subtracting(_:)(*(void *)(v107 + 168), *(void *)(v107 + 176));
    uint64_t v8 = v21;
    unint64_t v114 = v21 & 0xC000000000000001;
    if ((v21 & 0xC000000000000001) != 0)
    {
      if (__CocoaSet.count.getter()) {
        goto LABEL_10;
      }
    }
    else if (*(void *)(v21 + 16))
    {
LABEL_10:
      if (one-time initialization token for service == -1) {
        goto LABEL_11;
      }
      goto LABEL_74;
    }
    swift_bridgeObjectRelease();
    if (one-time initialization token for service == -1)
    {
LABEL_41:
      uint64_t v66 = *v2;
      uint64_t v67 = type metadata accessor for Logger();
      __swift_project_value_buffer(v67, (uint64_t)static Log.service);
      uint64_t v68 = v66;
      uint64_t v69 = Logger.logObject.getter();
      os_log_type_t v70 = static os_log_type_t.default.getter();
      BOOL v71 = os_log_type_enabled(v69, v70);
      uint64_t v72 = *v2;
      if (v71)
      {
        uint64_t v73 = (uint64_t *)(v2 - 7);
        uint64_t v74 = (uint8_t *)swift_slowAlloc();
        uint64_t v75 = swift_slowAlloc();
        uint64_t v117 = v75;
        *(_DWORD *)uint64_t v74 = 136315138;
        uint64_t v76 = *(void *)&v72[direct field offset for SKPresenceDataSource.presenceIdentifier];
        unint64_t v77 = *(void *)&v72[direct field offset for SKPresenceDataSource.presenceIdentifier + 8];
        swift_bridgeObjectRetain();
        *uint64_t v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, &v117);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1B0DF7000, v69, v70, "Successfully updated members for identifier: %s", v74, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v75, -1, -1);
        MEMORY[0x1B3EA39E0](v74, -1, -1);
      }
      else
      {
      }
      uint64_t v83 = *(uint64_t (**)(void))(v107 + 8);
      return v83();
    }
LABEL_76:
    swift_once();
    goto LABEL_41;
  }
  if (!*(void *)(v7 + 16)) {
    goto LABEL_8;
  }
LABEL_3:
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v9 = *v2;
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.service);
  swift_bridgeObjectRetain_n();
  uint64_t v11 = v9;
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  BOOL v14 = os_log_type_enabled(v12, v13);
  uint64_t v15 = *v2;
  if (v14)
  {
    uint64_t v1 = (uint64_t *)(v2 - 1);
    uint64_t v16 = swift_slowAlloc();
    uint64_t typeb = swift_slowAlloc();
    uint64_t v117 = typeb;
    *(_DWORD *)uint64_t v16 = 136315394;
    *uint64_t v4 = v8;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<AddressableMember>);
    uint64_t v17 = String.init<A>(reflecting:)();
    *(v2 - 2) = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v16 + 12) = 2080;
    uint64_t v19 = *(void *)&v15[direct field offset for SKPresenceDataSource.presenceIdentifier];
    unint64_t v20 = *(void *)&v15[direct field offset for SKPresenceDataSource.presenceIdentifier + 8];
    swift_bridgeObjectRetain();
    *(v2 - 1) = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v12, v13, "Removing members: %s from presence for identifier: %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](typeb, -1, -1);
    MEMORY[0x1B3EA39E0](v16, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  if (v114)
  {
    uint64_t v35 = __CocoaSet.count.getter();
    if (v35) {
      goto LABEL_16;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    uint64_t v39 = MEMORY[0x1E4FBC860];
LABEL_36:
    *(void *)(v107 + 184) = v39;
    *(void *)typec = *(void *)((*MEMORY[0x1E4FBC8C8] & **(void **)(v107 + 160)) + 0xF8)
                     + **(int **)((*MEMORY[0x1E4FBC8C8] & **(void **)(v107 + 160)) + 0xF8);
    uint64_t v63 = (void *)swift_task_alloc();
    *(void *)(v107 + 192) = v63;
    *uint64_t v63 = v107;
    v63[1] = closure #1 in SKPresenceDataSource.members.didset;
    uint64_t v64 = v39;
    uint64_t v65 = *(uint64_t (**)(uint64_t))typec;
    return v65(v64);
  }
  uint64_t v35 = *(void *)(v8 + 16);
  if (!v35) {
    goto LABEL_19;
  }
LABEL_16:
  uint64_t v115 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35 & ~(v35 >> 63), 0);
  if (v114)
  {
    uint64_t v36 = __CocoaSet.startIndex.getter();
    unsigned __int8 v38 = 1;
  }
  else
  {
    uint64_t v36 = specialized _NativeSet.startIndex.getter(v8);
    unsigned __int8 v38 = v40 & 1;
  }
  uint64_t v117 = v36;
  uint64_t v118 = v37;
  unsigned __int8 v119 = v38;
  if (v35 < 0)
  {
    __break(1u);
LABEL_74:
    swift_once();
LABEL_11:
    uint64_t v22 = *v2;
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Log.service);
    uint64_t v24 = v22;
    swift_bridgeObjectRetain_n();
    uint64_t v25 = v24;
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    BOOL v28 = os_log_type_enabled(v26, v27);
    uint64_t v29 = *v2;
    if (v28)
    {
      uint64_t v30 = swift_slowAlloc();
      uint64_t v108 = swift_slowAlloc();
      uint64_t v117 = v108;
      *(_DWORD *)uint64_t v30 = 136315394;
      uint64_t *v1 = v8;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<AddressableMember>);
      uint64_t v31 = String.init<A>(reflecting:)();
      *(v2 - 5) = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v117);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v30 + 12) = 2080;
      uint64_t v33 = *(void *)&v29[direct field offset for SKPresenceDataSource.presenceIdentifier];
      unint64_t v34 = *(void *)&v29[direct field offset for SKPresenceDataSource.presenceIdentifier + 8];
      swift_bridgeObjectRetain();
      *(v2 - 4) = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v117);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B0DF7000, v26, v27, "Adding members: %s to presence for identifier: %s", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v108, -1, -1);
      MEMORY[0x1B3EA39E0](v30, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
    if (v114)
    {
      uint64_t v78 = __CocoaSet.count.getter();
      if (v78)
      {
LABEL_46:
        uint64_t v116 = MEMORY[0x1E4FBC860];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v78 & ~(v78 >> 63), 0);
        if (v114)
        {
          uint64_t v79 = __CocoaSet.startIndex.getter();
          unsigned __int8 v81 = 1;
        }
        else
        {
          uint64_t v79 = specialized _NativeSet.startIndex.getter(v8);
          unsigned __int8 v81 = v84 & 1;
        }
        uint64_t v117 = v79;
        uint64_t v118 = v80;
        unsigned __int8 v119 = v81;
        if ((v78 & 0x8000000000000000) == 0)
        {
          unint64_t v85 = v2 - 14;
          *(void *)typea = v8;
          do
          {
            while (1)
            {
              uint64_t v92 = v117;
              uint64_t v91 = v118;
              uint64_t v93 = v119;
              specialized Set.subscript.getter(v117, v118, v119, v8);
              uint64_t v95 = v94;
              uint64_t v96 = *(void **)&v94[OBJC_IVAR____TtC14CopresenceCore17AddressableMember_handle];
              id v97 = objc_msgSend(v96, sel_normalizedValue);
              if (!v97) {
                id v97 = objc_msgSend(v96, sel_value);
              }
              uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v100 = v99;

              uint64_t v101 = v116;
              uint64_t result = swift_isUniquelyReferenced_nonNull_native();
              if ((result & 1) == 0)
              {
                uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v116 + 16) + 1, 1);
                uint64_t v101 = v116;
              }
              unint64_t v103 = *(void *)(v101 + 16);
              unint64_t v102 = *(void *)(v101 + 24);
              if (v103 >= v102 >> 1)
              {
                uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v102 > 1, v103 + 1, 1);
                uint64_t v101 = v116;
              }
              *(void *)(v101 + 16) = v103 + 1;
              uint64_t v104 = v101 + 16 * v103;
              *(void *)(v104 + 32) = v98;
              *(void *)(v104 + 40) = v100;
              if (v114) {
                break;
              }
              uint64_t v8 = *(void *)typea;
              uint64_t v86 = specialized _NativeSet.index(after:)(v92, v91, v93, *(void *)typea);
              uint64_t v88 = v87;
              char v90 = v89;
              outlined consume of Set<AddressableMember>.Index._Variant(v92, v91, v93);
              uint64_t v117 = v86;
              uint64_t v118 = v88;
              unsigned __int8 v119 = v90 & 1;
              if (!--v78) {
                goto LABEL_69;
              }
            }
            uint64_t v8 = *(void *)typea;
            if ((v93 & 1) == 0) {
              goto LABEL_78;
            }
            if (__CocoaSet.Index.handleBitPattern.getter()) {
              swift_isUniquelyReferenced_nonNull_native();
            }
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<AddressableMember>.Index);
            int v105 = (void (*)(char **, void))Set.Index._asCocoa.modify();
            __CocoaSet.formIndex(after:isUnique:)();
            v105(v85, 0);
            --v78;
          }
          while (v78);
LABEL_69:
          outlined consume of Set<AddressableMember>.Index._Variant(v117, v118, v119);
          swift_bridgeObjectRelease();
          uint64_t v82 = v116;
          goto LABEL_70;
        }
        __break(1u);
        goto LABEL_76;
      }
    }
    else
    {
      uint64_t v78 = *(void *)(v8 + 16);
      if (v78) {
        goto LABEL_46;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v82 = MEMORY[0x1E4FBC860];
LABEL_70:
    *(void *)(v107 + 208) = v82;
    *(void *)typed = *(void *)((*MEMORY[0x1E4FBC8C8] & **(void **)(v107 + 160)) + 0xE8)
                     + **(int **)((*MEMORY[0x1E4FBC8C8] & **(void **)(v107 + 160)) + 0xE8);
    int v106 = (void *)swift_task_alloc();
    *(void *)(v107 + 216) = v106;
    void *v106 = v107;
    v106[1] = closure #1 in SKPresenceDataSource.members.didset;
    uint64_t v64 = v82;
    uint64_t v65 = *(uint64_t (**)(uint64_t))typed;
    return v65(v64);
  }
  uint64_t v41 = v2 - 18;
  *(void *)os_log_type_t type = v8;
  while (1)
  {
    while (1)
    {
      uint64_t v48 = v117;
      uint64_t v47 = v118;
      uint64_t v49 = v119;
      specialized Set.subscript.getter(v117, v118, v119, v8);
      uint64_t v51 = v50;
      uint64_t v52 = *(void **)&v50[OBJC_IVAR____TtC14CopresenceCore17AddressableMember_handle];
      id v53 = objc_msgSend(v52, sel_normalizedValue);
      if (!v53) {
        id v53 = objc_msgSend(v52, sel_value);
      }
      uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v56 = v55;

      uint64_t v57 = v115;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v115 + 16) + 1, 1);
        uint64_t v57 = v115;
      }
      unint64_t v60 = *(void *)(v57 + 16);
      unint64_t v59 = *(void *)(v57 + 24);
      if (v60 >= v59 >> 1)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1, v60 + 1, 1);
        uint64_t v57 = v115;
      }
      *(void *)(v57 + 16) = v60 + 1;
      uint64_t v61 = v57 + 16 * v60;
      *(void *)(v61 + 32) = v54;
      *(void *)(v61 + 40) = v56;
      if (v114) {
        break;
      }
      uint64_t v8 = *(void *)type;
      uint64_t v42 = specialized _NativeSet.index(after:)(v48, v47, v49, *(void *)type);
      uint64_t v44 = v43;
      char v46 = v45;
      outlined consume of Set<AddressableMember>.Index._Variant(v48, v47, v49);
      uint64_t v117 = v42;
      uint64_t v118 = v44;
      unsigned __int8 v119 = v46 & 1;
      if (!--v35) {
        goto LABEL_35;
      }
    }
    uint64_t v8 = *(void *)type;
    if ((v49 & 1) == 0) {
      break;
    }
    if (__CocoaSet.Index.handleBitPattern.getter()) {
      swift_isUniquelyReferenced_nonNull_native();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<AddressableMember>.Index);
    uint64_t v62 = (void (*)(char **, void))Set.Index._asCocoa.modify();
    __CocoaSet.formIndex(after:isUnique:)();
    v62(v41, 0);
    if (!--v35)
    {
LABEL_35:
      outlined consume of Set<AddressableMember>.Index._Variant(v117, v118, v119);
      swift_bridgeObjectRelease();
      uint64_t v39 = v115;
      goto LABEL_36;
    }
  }
  __break(1u);
LABEL_78:
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 200) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = closure #1 in SKPresenceDataSource.members.didset;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = closure #1 in SKPresenceDataSource.members.didset;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  char *v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t (*v34)(void);
  uint64_t result;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void *v46;
  void *v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void (*v56)(void *, void);
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t);
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 v65;
  void *v66;
  uint64_t v67;

  uint64_t v66 = v0;
  uint64_t v1 = specialized Set.subtracting(_:)(v0[21], v0[22]);
  uint64_t v2 = v1;
  uint64_t v61 = v1 & 0xC000000000000001;
  if ((v1 & 0xC000000000000001) != 0)
  {
    if (__CocoaSet.count.getter()) {
      goto LABEL_3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    if (one-time initialization token for service == -1)
    {
LABEL_9:
      unint64_t v18 = (void *)v0[20];
      uint64_t v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)static Log.service);
      unint64_t v20 = v18;
      uint64_t v21 = Logger.logObject.getter();
      uint64_t v22 = static os_log_type_t.default.getter();
      uint64_t v23 = os_log_type_enabled(v21, v22);
      uint64_t v24 = (char *)v0[20];
      if (v23)
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        uint64_t v26 = swift_slowAlloc();
        uint64_t v63 = v26;
        *(_DWORD *)uint64_t v25 = 136315138;
        os_log_type_t v27 = *(void *)&v24[direct field offset for SKPresenceDataSource.presenceIdentifier];
        BOOL v28 = *(void *)&v24[direct field offset for SKPresenceDataSource.presenceIdentifier + 8];
        swift_bridgeObjectRetain();
        v0[13] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1B0DF7000, v21, v22, "Successfully updated members for identifier: %s", v25, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v26, -1, -1);
        MEMORY[0x1B3EA39E0](v25, -1, -1);
      }
      else
      {
      }
      unint64_t v34 = (uint64_t (*)(void))v0[1];
      return v34();
    }
LABEL_42:
    swift_once();
    goto LABEL_9;
  }
  if (!*(void *)(v1 + 16)) {
    goto LABEL_8;
  }
LABEL_3:
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v3 = (void *)v0[20];
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.service);
  uint64_t v5 = v3;
  swift_bridgeObjectRetain_n();
  uint64_t v6 = v5;
  uint64_t v7 = Logger.logObject.getter();
  uint64_t v8 = static os_log_type_t.default.getter();
  uint64_t v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = (char *)v0[20];
  uint64_t v58 = v0;
  unint64_t v59 = v2;
  if (v9)
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v63 = v12;
    *(_DWORD *)uint64_t v11 = 136315394;
    v0[14] = v59;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<AddressableMember>);
    os_log_type_t v13 = String.init<A>(reflecting:)();
    v0[15] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v11 + 12) = 2080;
    uint64_t v0 = (void *)(v11 + 14);
    uint64_t v15 = *(void *)&v10[direct field offset for SKPresenceDataSource.presenceIdentifier];
    uint64_t v16 = *(void *)&v10[direct field offset for SKPresenceDataSource.presenceIdentifier + 8];
    swift_bridgeObjectRetain();
    v58[16] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v7, v8, "Adding members: %s to presence for identifier: %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    uint64_t v17 = v12;
    uint64_t v2 = v59;
    MEMORY[0x1B3EA39E0](v17, -1, -1);
    MEMORY[0x1B3EA39E0](v11, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  if (v61)
  {
    uint64_t v29 = __CocoaSet.count.getter();
    if (v29) {
      goto LABEL_14;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    uint64_t v33 = MEMORY[0x1E4FBC860];
LABEL_38:
    v58[26] = v33;
    unint64_t v60 = (uint64_t (*)(uint64_t))(*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v58[20]) + 0xE8)
                                          + **(int **)((*MEMORY[0x1E4FBC8C8] & *(void *)v58[20]) + 0xE8));
    uint64_t v57 = (void *)swift_task_alloc();
    v58[27] = v57;
    *uint64_t v57 = v58;
    v57[1] = closure #1 in SKPresenceDataSource.members.didset;
    return v60(v33);
  }
  uint64_t v29 = *(void *)(v2 + 16);
  if (!v29) {
    goto LABEL_17;
  }
LABEL_14:
  uint64_t v62 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29 & ~(v29 >> 63), 0);
  if (v61)
  {
    uint64_t v30 = __CocoaSet.startIndex.getter();
    unint64_t v32 = 1;
  }
  else
  {
    uint64_t v30 = specialized _NativeSet.startIndex.getter(v2);
    unint64_t v32 = v36 & 1;
  }
  uint64_t v63 = v30;
  uint64_t v64 = v31;
  uint64_t v65 = v32;
  if (v29 < 0)
  {
    __break(1u);
    goto LABEL_42;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v43 = v63;
      uint64_t v42 = v64;
      uint64_t v44 = v65;
      specialized Set.subscript.getter(v63, v64, v65, v2);
      char v46 = v45;
      uint64_t v47 = *(void **)&v45[OBJC_IVAR____TtC14CopresenceCore17AddressableMember_handle];
      uint64_t v48 = objc_msgSend(v47, sel_normalizedValue);
      if (!v48) {
        uint64_t v48 = objc_msgSend(v47, sel_value);
      }
      uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v51 = v50;

      uint64_t v52 = v62;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v62 + 16) + 1, 1);
        uint64_t v52 = v62;
      }
      uint64_t v54 = *(void *)(v52 + 16);
      id v53 = *(void *)(v52 + 24);
      if (v54 >= v53 >> 1)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1);
        uint64_t v52 = v62;
      }
      *(void *)(v52 + 16) = v54 + 1;
      uint64_t v55 = v52 + 16 * v54;
      *(void *)(v55 + 32) = v49;
      *(void *)(v55 + 40) = v51;
      if (v61) {
        break;
      }
      uint64_t v2 = v59;
      uint64_t v37 = specialized _NativeSet.index(after:)(v43, v42, v44, v59);
      uint64_t v39 = v38;
      uint64_t v41 = v40;
      outlined consume of Set<AddressableMember>.Index._Variant(v43, v42, v44);
      uint64_t v63 = v37;
      uint64_t v64 = v39;
      uint64_t v65 = v41 & 1;
      if (!--v29) {
        goto LABEL_37;
      }
    }
    uint64_t v2 = v59;
    if ((v44 & 1) == 0) {
      break;
    }
    if (__CocoaSet.Index.handleBitPattern.getter()) {
      swift_isUniquelyReferenced_nonNull_native();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<AddressableMember>.Index);
    uint64_t v56 = (void (*)(void *, void))Set.Index._asCocoa.modify();
    __CocoaSet.formIndex(after:isUnique:)();
    v56(v58 + 6, 0);
    if (!--v29)
    {
LABEL_37:
      outlined consume of Set<AddressableMember>.Index._Variant(v63, v64, v65);
      swift_bridgeObjectRelease();
      uint64_t v33 = v62;
      goto LABEL_38;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 224) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = closure #1 in SKPresenceDataSource.members.didset;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = closure #1 in SKPresenceDataSource.members.didset;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  char *v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v14;
  void *v15;
  uint64_t v16;

  uint64_t v15 = v0;
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[20];
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.service);
  uint64_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.default.getter();
  uint64_t v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = (char *)v0[20];
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    BOOL v14 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v10 = *(void *)&v7[direct field offset for SKPresenceDataSource.presenceIdentifier];
    uint64_t v11 = *(void *)&v7[direct field offset for SKPresenceDataSource.presenceIdentifier + 8];
    swift_bridgeObjectRetain();
    v0[13] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v4, v5, "Successfully updated members for identifier: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v9, -1, -1);
    MEMORY[0x1B3EA39E0](v8, -1, -1);
  }
  else
  {
  }
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;

  uint64_t v22 = v0;
  swift_bridgeObjectRelease();
  uint64_t v1 = (void *)v0[25];
  swift_bridgeObjectRelease();
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)v0[20];
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Log.service);
  uint64_t v4 = v2;
  uint64_t v5 = v1;
  uint64_t v6 = v4;
  uint64_t v7 = v1;
  uint64_t v8 = Logger.logObject.getter();
  uint64_t v9 = static os_log_type_t.error.getter();
  uint64_t v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = (char *)v0[20];
  if (v10)
  {
    uint64_t v12 = swift_slowAlloc();
    unint64_t v20 = swift_slowAlloc();
    uint64_t v21 = v20;
    *(_DWORD *)uint64_t v12 = 136315394;
    os_log_type_t v13 = *(void *)&v11[direct field offset for SKPresenceDataSource.presenceIdentifier];
    BOOL v14 = *(void *)&v11[direct field offset for SKPresenceDataSource.presenceIdentifier + 8];
    swift_bridgeObjectRetain();
    v0[12] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v12 + 12) = 2080;
    v0[10] = v1;
    uint64_t v15 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v16 = String.init<A>(reflecting:)();
    v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v8, v9, "Failed to update members for identifier: %s with error: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v20, -1, -1);
    MEMORY[0x1B3EA39E0](v12, -1, -1);
  }
  else
  {
  }
  unint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;

  uint64_t v22 = v0;
  uint64_t v1 = (void *)v0[28];
  swift_bridgeObjectRelease();
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)v0[20];
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Log.service);
  uint64_t v4 = v2;
  uint64_t v5 = v1;
  uint64_t v6 = v4;
  uint64_t v7 = v1;
  uint64_t v8 = Logger.logObject.getter();
  uint64_t v9 = static os_log_type_t.error.getter();
  uint64_t v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = (char *)v0[20];
  if (v10)
  {
    uint64_t v12 = swift_slowAlloc();
    unint64_t v20 = swift_slowAlloc();
    uint64_t v21 = v20;
    *(_DWORD *)uint64_t v12 = 136315394;
    os_log_type_t v13 = *(void *)&v11[direct field offset for SKPresenceDataSource.presenceIdentifier];
    BOOL v14 = *(void *)&v11[direct field offset for SKPresenceDataSource.presenceIdentifier + 8];
    swift_bridgeObjectRetain();
    v0[12] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v12 + 12) = 2080;
    v0[10] = v1;
    uint64_t v15 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v16 = String.init<A>(reflecting:)();
    v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v8, v9, "Failed to update members for identifier: %s with error: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v20, -1, -1);
    MEMORY[0x1B3EA39E0](v12, -1, -1);
  }
  else
  {
  }
  unint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t SKPresenceDataSource.members.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SKPresenceDataSource.members.setter(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + direct field offset for SKPresenceDataSource.members);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t *v3 = a1;
  SKPresenceDataSource.members.didset(v4);
  return swift_bridgeObjectRelease();
}

void (*SKPresenceDataSource.members.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = (void *)(v1 + direct field offset for SKPresenceDataSource.members);
  swift_beginAccess();
  v3[3] = *v4;
  swift_bridgeObjectRetain();
  return SKPresenceDataSource.members.modify;
}

void SKPresenceDataSource.members.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  if (a2)
  {
    uint64_t v4 = swift_bridgeObjectRetain();
    SKPresenceDataSource.members.setter(v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    SKPresenceDataSource.members.setter(v3);
  }
  free(v2);
}

uint64_t property wrapper backing initializer of SKPresenceDataSource.presentDevices@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = a1;
  swift_getExtendedExistentialTypeMetadata();
  uint64_t v3 = type metadata accessor for Array();
  return CurrentSubject.init(wrappedValue:)((uint64_t)&v5, v3, a2);
}

uint64_t SKPresenceDataSource.presentDevices.getter()
{
  uint64_t v2 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x50);
  swift_getExtendedExistentialTypeMetadata();
  type metadata accessor for Array();
  type metadata accessor for CurrentSubject();
  CurrentSubject.wrappedValue.getter();
  return v2;
}

uint64_t SKPresenceDataSource.$presentDevices.getter()
{
  return swift_retain();
}

uint64_t SKPresenceDataSource.presentDevicesPublisher.getter()
{
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
  swift_getExtendedExistentialTypeMetadata();
  type metadata accessor for Array();
  type metadata accessor for CurrentValueSubject();
  swift_getWitnessTable();
  uint64_t v1 = Publisher.eraseToAnyPublisher()();
  swift_release();
  return v1;
}

char *SKPresenceDataSource.__allocating_init(presenceConfiguration:targetQueue:)(uint64_t a1, void *a2)
{
  id v5 = objc_allocWithZone(v2);
  return SKPresenceDataSource.init(presenceConfiguration:targetQueue:)(a1, a2);
}

char *specialized SKPresenceDataSource.init(presenceConfiguration:targetQueue:)(uint64_t a1, void *a2)
{
  return specialized SKPresenceDataSource.init(presenceConfiguration:targetQueue:)(a1, a2, &demangling cache variable for type metadata for CurrentValueSubject<[any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>], Never>, &demangling cache variable for type metadata for SKPresenceDataSource<EmptyPresenceContext>);
}

{
  return specialized SKPresenceDataSource.init(presenceConfiguration:targetQueue:)(a1, a2, &demangling cache variable for type metadata for CurrentValueSubject<[any PresentDevice<Self.PresentDevice.Context == ActivityListPresenceContext>], Never>, (uint64_t *)&demangling cache variable for type metadata for SKPresenceDataSource<ActivityListPresenceContext>);
}

char *specialized SKPresenceDataSource.init(presenceConfiguration:targetQueue:)(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  char v46 = a4;
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v43 = *(void *)(v8 - 8);
  uint64_t v44 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v42 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v40);
  uint64_t v39 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v11 - 8);
  *(void *)&v4[direct field offset for SKPresenceDataSource.members] = MEMORY[0x1E4FBC870];
  uint64_t v12 = direct field offset for SKPresenceDataSource._presentDevices;
  unint64_t v13 = MEMORY[0x1E4FBC860];
  unint64_t v48 = MEMORY[0x1E4FBC860];
  __swift_instantiateConcreteTypeFromMangledName(a3);
  swift_allocObject();
  BOOL v14 = v4;
  *(void *)&v4[v12] = CurrentValueSubject.init(_:)();
  uint64_t v38 = a1;
  uint64_t v15 = *(void *)(a1 + 16);
  uint64_t v41 = *(void *)(a1 + 8);
  uint64_t v16 = (uint64_t *)&v14[direct field offset for SKPresenceDataSource.presenceIdentifier];
  *uint64_t v16 = v41;
  v16[1] = v15;
  uint64_t v37 = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  unint64_t v48 = 0;
  unint64_t v49 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  unint64_t v48 = 0xD000000000000013;
  unint64_t v49 = 0x80000001B115C3E0;
  uint64_t v17 = *v16;
  unint64_t v18 = (void *)v16[1];
  swift_bridgeObjectRetain();
  v19._uint64_t countAndFlagsBits = v17;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  id v45 = a2;
  static DispatchQoS.unspecified.getter();
  unint64_t v48 = v13;
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v43 + 104))(v42, *MEMORY[0x1E4FBCC58], v44);
  *(void *)&v14[direct field offset for SKPresenceDataSource.queue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v21 = *(void *)(v38 + 24);
  uint64_t v20 = *(void *)(v38 + 32);
  uint64_t v22 = (unsigned __int8 *)v38;
  id v23 = objc_allocWithZone(MEMORY[0x1E4FA7FE8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v24 = (void *)MEMORY[0x1B3EA1B00](v21, v20);
  swift_bridgeObjectRelease();
  id v25 = objc_msgSend(v23, sel_initWithServiceIdentifier_, v24);

  objc_msgSend(v25, sel_setIsPersonal_, *v22);
  id v26 = objc_allocWithZone(MEMORY[0x1E4FA7FE0]);
  os_log_type_t v27 = (void *)MEMORY[0x1B3EA1B00](v41, v15);
  swift_bridgeObjectRelease();
  id v28 = objc_msgSend(v26, sel_initWithPresenceIdentifier_options_, v27, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  *(void *)&v14[direct field offset for SKPresenceDataSource.presence] = v28;
  uint64_t v29 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(v46);
  v47.receiver = v14;
  v47.super_class = v29;
  uint64_t v30 = (char *)objc_msgSendSuper2(&v47, sel_init);
  uint64_t v31 = *(void **)&v30[direct field offset for SKPresenceDataSource.presence];
  unint64_t v32 = *(void **)&v30[direct field offset for SKPresenceDataSource.queue];
  uint64_t v33 = v30;
  id v34 = v31;
  id v35 = v32;
  objc_msgSend(v34, sel_addDelegate_queue_, v33, v35);

  return v33;
}

char *SKPresenceDataSource.init(presenceConfiguration:targetQueue:)(uint64_t a1, void *a2)
{
  uint64_t v5 = *MEMORY[0x1E4FBC8C8] & *v2;
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v42 = *(void *)(v6 - 8);
  uint64_t v43 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v41 = (char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v39);
  uint64_t v38 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v9 - 8);
  *(void *)((char *)v2 + direct field offset for SKPresenceDataSource.members) = MEMORY[0x1E4FBC870];
  uint64_t v10 = direct field offset for SKPresenceDataSource._presentDevices;
  uint64_t v11 = *(void *)(v5 + 80);
  uint64_t v12 = v2;
  uint64_t v48 = v11;
  uint64_t v45 = v11;
  swift_getExtendedExistentialTypeMetadata();
  uint64_t v13 = static Array._allocateUninitialized(_:)();
  uint64_t v46 = *(void *)(v5 + 88);
  property wrapper backing initializer of SKPresenceDataSource.presentDevices(v13, &v48);
  *(void *)((char *)v2 + v10) = v48;
  uint64_t v37 = a1;
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v40 = *(void *)(a1 + 8);
  uint64_t v15 = (void *)((char *)v12 + direct field offset for SKPresenceDataSource.presenceIdentifier);
  *uint64_t v15 = v40;
  v15[1] = v14;
  v36[1] = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v48 = 0;
  unint64_t v49 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  uint64_t v48 = 0xD000000000000013;
  unint64_t v49 = 0x80000001B115C3E0;
  uint64_t v16 = *v15;
  uint64_t v17 = (void *)v15[1];
  swift_bridgeObjectRetain();
  v18._uint64_t countAndFlagsBits = v16;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  id v44 = a2;
  static DispatchQoS.unspecified.getter();
  uint64_t v48 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v42 + 104))(v41, *MEMORY[0x1E4FBCC58], v43);
  *(void *)((char *)v12 + direct field offset for SKPresenceDataSource.queue) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v20 = *(void *)(v37 + 24);
  uint64_t v19 = *(void *)(v37 + 32);
  uint64_t v21 = (unsigned __int8 *)v37;
  id v22 = objc_allocWithZone(MEMORY[0x1E4FA7FE8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v23 = (void *)MEMORY[0x1B3EA1B00](v20, v19);
  swift_bridgeObjectRelease();
  id v24 = objc_msgSend(v22, sel_initWithServiceIdentifier_, v23);

  objc_msgSend(v24, sel_setIsPersonal_, *v21);
  id v25 = objc_allocWithZone(MEMORY[0x1E4FA7FE0]);
  id v26 = (void *)MEMORY[0x1B3EA1B00](v40, v14);
  swift_bridgeObjectRelease();
  id v27 = objc_msgSend(v25, sel_initWithPresenceIdentifier_options_, v26, v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  *(void *)((char *)v12 + direct field offset for SKPresenceDataSource.presence) = v27;
  id v28 = (objc_class *)type metadata accessor for SKPresenceDataSource();
  v47.receiver = v12;
  v47.super_class = v28;
  uint64_t v29 = (char *)objc_msgSendSuper2(&v47, sel_init);
  uint64_t v30 = *(void **)&v29[direct field offset for SKPresenceDataSource.presence];
  uint64_t v31 = *(void **)&v29[direct field offset for SKPresenceDataSource.queue];
  unint64_t v32 = v29;
  id v33 = v30;
  id v34 = v31;
  objc_msgSend(v33, sel_addDelegate_queue_, v32, v34);

  return v32;
}

id PresenceConfiguration.options.getter()
{
  uint64_t v1 = *((void *)v0 + 3);
  uint64_t v2 = *((void *)v0 + 4);
  id v3 = objc_allocWithZone(MEMORY[0x1E4FA7FE8]);
  swift_bridgeObjectRetain();
  uint64_t v4 = (void *)MEMORY[0x1B3EA1B00](v1, v2);
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(v3, sel_initWithServiceIdentifier_, v4);

  objc_msgSend(v5, sel_setIsPersonal_, *v0);
  return v5;
}

uint64_t SKPresenceDataSource.assertPresence(using:)(uint64_t a1)
{
  v2[43] = a1;
  v2[44] = v1;
  uint64_t v3 = *MEMORY[0x1E4FBC8C8] & *v1;
  v2[45] = v3;
  uint64_t v4 = *(void *)(v3 + 80);
  v2[46] = v4;
  uint64_t v5 = type metadata accessor for Optional();
  v2[47] = v5;
  v2[48] = *(void *)(v5 - 8);
  v2[49] = swift_task_alloc();
  v2[50] = *(void *)(v4 - 8);
  v2[51] = swift_task_alloc();
  return MEMORY[0x1F4188298](SKPresenceDataSource.assertPresence(using:), 0, 0);
}

uint64_t SKPresenceDataSource.assertPresence(using:)()
{
  uint64_t v38 = v0;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v2 = v0[50];
  uint64_t v1 = v0[51];
  uint64_t v3 = v0[46];
  uint64_t v4 = v0[43];
  uint64_t v5 = (void *)v0[44];
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.host);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v7(v1, v4, v3);
  id v8 = v5;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v12 = v0[50];
  uint64_t v13 = v0[51];
  if (v11)
  {
    uint64_t v14 = v0[49];
    uint64_t v31 = v7;
    uint64_t v32 = v0[48];
    uint64_t v33 = v0[47];
    uint64_t v30 = v0[46];
    os_log_type_t type = v10;
    uint64_t v15 = (char *)v0[44];
    log = v9;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    v37[0] = v35;
    *(_DWORD *)uint64_t v16 = 136315394;
    id v17 = objc_msgSend(*(id *)&v15[direct field offset for SKPresenceDataSource.presence], sel_presenceIdentifier);
    uint64_t v18 = v13;
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v21 = v20;

    v0[41] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v16 + 12) = 2080;
    v31(v14, v18, v30);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v30);
    uint64_t v22 = >> prefix<A>(_:)(v14, v30);
    unint64_t v24 = v23;
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v14, v33);
    v0[42] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v18, v30);
    _os_log_impl(&dword_1B0DF7000, log, type, "Asserting presence for identifier: %s using context: %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v35, -1, -1);
    MEMORY[0x1B3EA39E0](v16, -1, -1);
  }
  else
  {
    uint64_t v25 = v0[46];
    id v26 = (void *)v0[44];

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v25);
  }
  static Task<>.checkCancellation()();
  v0[52] = 0;
  id v27 = *(void **)(v0[44] + direct field offset for SKPresenceDataSource.presence);
  v0[53] = v27;
  v0[2] = v0;
  v0[3] = SKPresenceDataSource.assertPresence(using:);
  uint64_t v28 = swift_continuation_init();
  v0[31] = MEMORY[0x1E4F143A8];
  v0[32] = 0x40000000;
  v0[33] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  v0[34] = &block_descriptor;
  v0[35] = v28;
  objc_msgSend(v27, sel_retainTransientSubscriptionAssertionWithCompletion_, v0 + 31);
  return MEMORY[0x1F41881E8](v0 + 2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 432) = v1;
  if (v1) {
    uint64_t v2 = SKPresenceDataSource.assertPresence(using:);
  }
  else {
    uint64_t v2 = SKPresenceDataSource.assertPresence(using:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  Class isa;
  uint64_t v7;
  uint64_t v9;

  uint64_t v1 = v0[52];
  static Task<>.checkCancellation()();
  if (v1)
  {
    uint64_t v2 = v0 + 18;
    v0[57] = v1;
    uint64_t v3 = (void *)v0[53];
    v0[18] = v0;
    v0[19] = SKPresenceDataSource.assertPresence(using:);
    uint64_t v4 = swift_continuation_init();
    v0[26] = MEMORY[0x1E4F143A8];
    v0[27] = 0x40000000;
    v0[28] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
    v0[29] = &block_descriptor_4;
    v0[30] = v4;
    objc_msgSend(v3, sel_releaseTransientSubscriptionAssertionWithCompletion_, v0 + 26);
  }
  else
  {
    uint64_t v2 = v0 + 10;
    uint64_t v5 = (void *)v0[53];
    (*(void (**)(void))(*(void *)(*(void *)(v0[45] + 88) + 8) + 16))(v0[46]);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    v0[55] = isa;
    swift_bridgeObjectRelease();
    v0[10] = v0;
    v0[11] = SKPresenceDataSource.assertPresence(using:);
    uint64_t v7 = swift_continuation_init();
    v0[36] = MEMORY[0x1E4F143A8];
    v0[37] = 0x40000000;
    v0[38] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
    v0[39] = &block_descriptor_5;
    v0[40] = v7;
    objc_msgSend(v5, sel_assertPresenceWithPresencePayloadDictionary_completion_, isa, v0 + 36);
  }
  return MEMORY[0x1F41881E8](v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  *(void *)(*(void *)v0 + 448) = v1;
  if (v1) {
    uint64_t v2 = SKPresenceDataSource.assertPresence(using:);
  }
  else {
    uint64_t v2 = SKPresenceDataSource.assertPresence(using:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 176);
  *(void *)(*(void *)v0 + 464) = v1;
  if (v1) {
    uint64_t v2 = SKPresenceDataSource.assertPresence(using:);
  }
  else {
    uint64_t v2 = SKPresenceDataSource.assertPresence(using:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = (void *)v0[55];
  swift_willThrow();

  v0[57] = v0[56];
  uint64_t v2 = (void *)v0[53];
  v0[18] = v0;
  v0[19] = SKPresenceDataSource.assertPresence(using:);
  uint64_t v3 = swift_continuation_init();
  v0[26] = MEMORY[0x1E4F143A8];
  v0[27] = 0x40000000;
  v0[28] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  v0[29] = &block_descriptor_4;
  v0[30] = v3;
  objc_msgSend(v2, sel_releaseTransientSubscriptionAssertionWithCompletion_, v0 + 26);
  return MEMORY[0x1F41881E8](v0 + 18);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 464);
  swift_willThrow();

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ()(uint64_t a1, void *a2)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    swift_allocError();
    void *v3 = a2;
    id v4 = a2;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    return swift_continuation_throwingResume();
  }
}

uint64_t SKPresenceDataSource.releasePresence()()
{
  *(void *)(v1 + 184) = v0;
  return MEMORY[0x1F4188298](SKPresenceDataSource.releasePresence(), 0, 0);
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  char *v9;
  void *v10;
  uint8_t *v11;
  void *v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;

  uint64_t v22 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 18;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v3 = (void *)v0[23];
  id v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.host);
  uint64_t v5 = v3;
  uint64_t v6 = Logger.logObject.getter();
  uint64_t v7 = static os_log_type_t.default.getter();
  id v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = (char *)v1[23];
  os_log_type_t v10 = &unk_1E9B55000;
  if (v8)
  {
    BOOL v11 = (uint8_t *)swift_slowAlloc();
    unint64_t v20 = swift_slowAlloc();
    unint64_t v21 = v20;
    *(_DWORD *)BOOL v11 = 136315138;
    uint64_t v12 = v2;
    uint64_t v13 = objc_msgSend(*(id *)&v9[direct field offset for SKPresenceDataSource.presence], sel_presenceIdentifier);
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;

    uint64_t v2 = v12;
    os_log_type_t v10 = (void *)&unk_1E9B55000;
    v1[18] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v6, v7, "Releasing presence for identifier: %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v20, -1, -1);
    MEMORY[0x1B3EA39E0](v11, -1, -1);
  }
  else
  {
  }
  id v17 = *(void **)(v1[23] + v10[303]);
  v1[24] = v17;
  v1[2] = v1;
  v1[3] = SKPresenceDataSource.releasePresence();
  uint64_t v18 = swift_continuation_init();
  v1[18] = MEMORY[0x1E4F143A8];
  v1[19] = 0x40000000;
  v1[20] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  v1[21] = &block_descriptor_7;
  v1[22] = v18;
  objc_msgSend(v17, sel_releasePresenceWithCompletion_, v2);
  return MEMORY[0x1F41881E8](v1 + 2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 200) = v1;
  if (v1) {
    uint64_t v2 = SKPresenceDataSource.releasePresence();
  }
  else {
    uint64_t v2 = SKPresenceDataSource.releasePresence();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v1 = (void *)v0[24];
  v0[10] = v0;
  v0[11] = SKPresenceDataSource.releasePresence();
  uint64_t v2 = swift_continuation_init();
  v0[18] = MEMORY[0x1E4F143A8];
  v0[19] = 0x40000000;
  v0[20] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  v0[21] = &block_descriptor_8;
  v0[22] = v2;
  objc_msgSend(v1, sel_releaseTransientSubscriptionAssertionWithCompletion_, v0 + 18);
  return MEMORY[0x1F41881E8](v0 + 10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  *(void *)(*(void *)v0 + 208) = v1;
  if (v1) {
    uint64_t v2 = SKPresenceDataSource.releasePresence();
  }
  else {
    uint64_t v2 = SKPresenceDataSource.releasePresence();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = (void *)v0[25];
  swift_willThrow();

  uint64_t v2 = (void *)v0[24];
  v0[10] = v0;
  v0[11] = SKPresenceDataSource.releasePresence();
  uint64_t v3 = swift_continuation_init();
  v0[18] = MEMORY[0x1E4F143A8];
  v0[19] = 0x40000000;
  v0[20] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  v0[21] = &block_descriptor_8;
  v0[22] = v3;
  objc_msgSend(v2, sel_releaseTransientSubscriptionAssertionWithCompletion_, v0 + 18);
  return MEMORY[0x1F41881E8](v0 + 10);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 208);
  swift_willThrow();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t SKPresenceDataSource.inviteHandle(_:)(uint64_t a1, uint64_t a2)
{
  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  return MEMORY[0x1F4188298](SKPresenceDataSource.inviteHandle(_:), 0, 0);
}

uint64_t SKPresenceDataSource.inviteHandle(_:)()
{
  uint64_t v29 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 10;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v3 = (void *)v0[17];
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  id v5 = v3;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  unint64_t v10 = v1[16];
  uint64_t v9 = (char *)v1[17];
  if (v8)
  {
    uint64_t v11 = v1[15];
    uint64_t v12 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    uint64_t v28 = v27;
    *(_DWORD *)uint64_t v12 = 136315394;
    swift_bridgeObjectRetain();
    v1[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v10, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 12) = 2080;
    id v13 = objc_msgSend(*(id *)&v9[direct field offset for SKPresenceDataSource.presence], sel_presenceIdentifier);
    uint64_t v14 = v2;
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v17 = v16;

    uint64_t v18 = v15;
    uint64_t v2 = v14;
    v1[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v17, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v6, v7, "Inviting handle %s to presence for identifier: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v27, -1, -1);
    MEMORY[0x1B3EA39E0](v12, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  uint64_t v19 = v1[16];
  uint64_t v20 = v1[15];
  unint64_t v21 = *(void **)(v1[17] + direct field offset for SKPresenceDataSource.presence);
  id v22 = objc_allocWithZone(MEMORY[0x1E4FA7FD8]);
  swift_bridgeObjectRetain();
  unint64_t v23 = (void *)MEMORY[0x1B3EA1B00](v20, v19);
  swift_bridgeObjectRelease();
  id v24 = objc_msgSend(v22, sel_initWithString_, v23);
  v1[18] = v24;

  v1[2] = v1;
  v1[3] = SKPresenceDataSource.inviteHandle(_:);
  uint64_t v25 = swift_continuation_init();
  v1[10] = MEMORY[0x1E4F143A8];
  v1[11] = 0x40000000;
  v1[12] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  v1[13] = &block_descriptor_9;
  v1[14] = v25;
  objc_msgSend(v21, sel_inviteHandleFromPrimaryAccountHandle_completion_, v24, v2);
  return MEMORY[0x1F41881E8](v1 + 2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 152) = v1;
  if (v1) {
    uint64_t v2 = SKPresenceDataSource.inviteHandle(_:);
  }
  else {
    uint64_t v2 = SKPresenceDataSource.inviteHandle(_:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 144);
  swift_willThrow();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t SKPresenceDataSource.inviteHandles(_:)(uint64_t a1)
{
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = v1;
  return MEMORY[0x1F4188298](SKPresenceDataSource.inviteHandles(_:), 0, 0);
}

uint64_t SKPresenceDataSource.inviteHandles(_:)()
{
  uint64_t v35 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 10;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v3 = (void *)v0[16];
  uint64_t v4 = type metadata accessor for Logger();
  v1[17] = __swift_project_value_buffer(v4, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  id v5 = v3;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = (char *)v1[16];
  if (v8)
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    uint64_t v34 = v33;
    *(_DWORD *)uint64_t v10 = 136315394;
    uint64_t v11 = swift_bridgeObjectRetain();
    uint64_t v12 = MEMORY[0x1B3EA1D20](v11, MEMORY[0x1E4FBB1A0]);
    os_log_type_t type = v7;
    id v13 = v2;
    unint64_t v15 = v14;
    swift_bridgeObjectRelease();
    v1[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v15, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v10 + 12) = 2080;
    id v16 = objc_msgSend(*(id *)&v9[direct field offset for SKPresenceDataSource.presence], sel_presenceIdentifier);
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v19 = v18;

    uint64_t v20 = v17;
    uint64_t v2 = v13;
    v1[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v19, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v6, type, "Inviting handles %s to presence for identifier: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v33, -1, -1);
    MEMORY[0x1B3EA39E0](v10, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  uint64_t v21 = v1[15];
  id v22 = *(void **)(v1[16] + direct field offset for SKPresenceDataSource.presence);
  v1[18] = v22;
  uint64_t v23 = *(void *)(v21 + 16);
  if (v23)
  {
    uint64_t v34 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray.reserveCapacity(_:)();
    id v24 = (uint64_t *)(v21 + 40);
    do
    {
      uint64_t v25 = *(v24 - 1);
      uint64_t v26 = *v24;
      id v27 = objc_allocWithZone(MEMORY[0x1E4FA7FD8]);
      swift_bridgeObjectRetain();
      uint64_t v28 = (void *)MEMORY[0x1B3EA1B00](v25, v26);
      swift_bridgeObjectRelease();
      objc_msgSend(v27, sel_initWithString_, v28);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v24 += 2;
      --v23;
    }
    while (v23);
  }
  type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for SKHandle);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  v1[19] = isa;
  swift_bridgeObjectRelease();
  v1[2] = v1;
  v1[3] = SKPresenceDataSource.inviteHandles(_:);
  uint64_t v30 = swift_continuation_init();
  v1[10] = MEMORY[0x1E4F143A8];
  v1[11] = 0x40000000;
  v1[12] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  v1[13] = &block_descriptor_11;
  v1[14] = v30;
  objc_msgSend(v22, sel_inviteHandlesFromPrimaryAccountHandle_completion_, isa, v2);
  return MEMORY[0x1F41881E8](v1 + 2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 160) = v1;
  if (v1) {
    uint64_t v2 = SKPresenceDataSource.inviteHandles(_:);
  }
  else {
    uint64_t v2 = SKPresenceDataSource.inviteHandles(_:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t (*v16)(void);
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  uint64_t v21 = v0;
  uint64_t v1 = *(void **)(v0 + 128);

  swift_bridgeObjectRetain_n();
  uint64_t v2 = v1;
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = *(void **)(v0 + 144);
    unint64_t v18 = *(void **)(v0 + 128);
    uint64_t v6 = swift_slowAlloc();
    unint64_t v19 = swift_slowAlloc();
    uint64_t v20 = v19;
    *(_DWORD *)uint64_t v6 = 136315394;
    os_log_type_t v7 = swift_bridgeObjectRetain();
    BOOL v8 = MEMORY[0x1B3EA1D20](v7, MEMORY[0x1E4FBB1A0]);
    uint64_t v10 = v9;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v6 + 12) = 2080;
    uint64_t v11 = objc_msgSend(v5, sel_presenceIdentifier);
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v14 = v13;

    *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v3, v4, "Successfully invited handles %s to %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v19, -1, -1);
    MEMORY[0x1B3EA39E0](v6, -1, -1);
  }
  else
  {
    unint64_t v15 = *(void **)(v0 + 128);
    swift_bridgeObjectRelease_n();
  }
  id v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 152);
  swift_willThrow();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t SKPresenceDataSource.removeHandle(_:)(uint64_t a1, uint64_t a2)
{
  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  return MEMORY[0x1F4188298](SKPresenceDataSource.removeHandle(_:), 0, 0);
}

uint64_t SKPresenceDataSource.removeHandle(_:)()
{
  uint64_t v29 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 10;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v3 = (void *)v0[17];
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  id v5 = v3;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  unint64_t v10 = v1[16];
  uint64_t v9 = (char *)v1[17];
  if (v8)
  {
    uint64_t v11 = v1[15];
    uint64_t v12 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    uint64_t v28 = v27;
    *(_DWORD *)uint64_t v12 = 136315394;
    swift_bridgeObjectRetain();
    v1[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v10, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 12) = 2080;
    id v13 = objc_msgSend(*(id *)&v9[direct field offset for SKPresenceDataSource.presence], sel_presenceIdentifier);
    unint64_t v14 = v2;
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v17 = v16;

    uint64_t v18 = v15;
    uint64_t v2 = v14;
    v1[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v17, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v6, v7, "Removing handle %s from presence for identifier:  %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v27, -1, -1);
    MEMORY[0x1B3EA39E0](v12, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  uint64_t v19 = v1[16];
  uint64_t v20 = v1[15];
  uint64_t v21 = *(void **)(v1[17] + direct field offset for SKPresenceDataSource.presence);
  id v22 = objc_allocWithZone(MEMORY[0x1E4FA7FD8]);
  swift_bridgeObjectRetain();
  uint64_t v23 = (void *)MEMORY[0x1B3EA1B00](v20, v19);
  swift_bridgeObjectRelease();
  id v24 = objc_msgSend(v22, sel_initWithString_, v23);
  v1[18] = v24;

  v1[2] = v1;
  v1[3] = SKPresenceDataSource.removeHandle(_:);
  uint64_t v25 = swift_continuation_init();
  v1[10] = MEMORY[0x1E4F143A8];
  v1[11] = 0x40000000;
  v1[12] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  v1[13] = &block_descriptor_13;
  v1[14] = v25;
  objc_msgSend(v21, sel_removeInvitedHandle_completion_, v24, v2);
  return MEMORY[0x1F41881E8](v1 + 2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 152) = v1;
  if (v1) {
    uint64_t v2 = SKPresenceDataSource.removeHandle(_:);
  }
  else {
    uint64_t v2 = SKPresenceDataSource.removeHandle(_:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t SKPresenceDataSource.removeHandles(_:)(uint64_t a1)
{
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = v1;
  return MEMORY[0x1F4188298](SKPresenceDataSource.removeHandles(_:), 0, 0);
}

uint64_t SKPresenceDataSource.removeHandles(_:)()
{
  uint64_t v35 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 10;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v3 = (void *)v0[16];
  uint64_t v4 = type metadata accessor for Logger();
  v1[17] = __swift_project_value_buffer(v4, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  id v5 = v3;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = (char *)v1[16];
  if (v8)
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    uint64_t v34 = v33;
    *(_DWORD *)uint64_t v10 = 136315394;
    uint64_t v11 = swift_bridgeObjectRetain();
    uint64_t v12 = MEMORY[0x1B3EA1D20](v11, MEMORY[0x1E4FBB1A0]);
    os_log_type_t type = v7;
    id v13 = v2;
    unint64_t v15 = v14;
    swift_bridgeObjectRelease();
    v1[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v15, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v10 + 12) = 2080;
    id v16 = objc_msgSend(*(id *)&v9[direct field offset for SKPresenceDataSource.presence], sel_presenceIdentifier);
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v19 = v18;

    uint64_t v20 = v17;
    uint64_t v2 = v13;
    v1[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v19, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v6, type, "Removing handles %s from presence for identifier:  %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v33, -1, -1);
    MEMORY[0x1B3EA39E0](v10, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  uint64_t v21 = v1[15];
  id v22 = *(void **)(v1[16] + direct field offset for SKPresenceDataSource.presence);
  v1[18] = v22;
  uint64_t v23 = *(void *)(v21 + 16);
  if (v23)
  {
    uint64_t v34 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray.reserveCapacity(_:)();
    id v24 = (uint64_t *)(v21 + 40);
    do
    {
      uint64_t v25 = *(v24 - 1);
      uint64_t v26 = *v24;
      id v27 = objc_allocWithZone(MEMORY[0x1E4FA7FD8]);
      swift_bridgeObjectRetain();
      uint64_t v28 = (void *)MEMORY[0x1B3EA1B00](v25, v26);
      swift_bridgeObjectRelease();
      objc_msgSend(v27, sel_initWithString_, v28);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v24 += 2;
      --v23;
    }
    while (v23);
  }
  type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for SKHandle);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  v1[19] = isa;
  swift_bridgeObjectRelease();
  v1[2] = v1;
  v1[3] = SKPresenceDataSource.removeHandles(_:);
  uint64_t v30 = swift_continuation_init();
  v1[10] = MEMORY[0x1E4F143A8];
  v1[11] = 0x40000000;
  v1[12] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  v1[13] = &block_descriptor_15;
  v1[14] = v30;
  objc_msgSend(v22, sel_removeInvitedHandles_completion_, isa, v2);
  return MEMORY[0x1F41881E8](v1 + 2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 160) = v1;
  if (v1) {
    uint64_t v2 = SKPresenceDataSource.removeHandles(_:);
  }
  else {
    uint64_t v2 = SKPresenceDataSource.removeHandles(_:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t (*v16)(void);
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  uint64_t v21 = v0;
  uint64_t v1 = *(void **)(v0 + 128);

  swift_bridgeObjectRetain_n();
  uint64_t v2 = v1;
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = *(void **)(v0 + 144);
    unint64_t v18 = *(void **)(v0 + 128);
    uint64_t v6 = swift_slowAlloc();
    unint64_t v19 = swift_slowAlloc();
    uint64_t v20 = v19;
    *(_DWORD *)uint64_t v6 = 136315394;
    os_log_type_t v7 = swift_bridgeObjectRetain();
    BOOL v8 = MEMORY[0x1B3EA1D20](v7, MEMORY[0x1E4FBB1A0]);
    uint64_t v10 = v9;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v6 + 12) = 2080;
    uint64_t v11 = objc_msgSend(v5, sel_presenceIdentifier);
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v14 = v13;

    *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v3, v4, "Successfully removed handles %s to %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v19, -1, -1);
    MEMORY[0x1B3EA39E0](v6, -1, -1);
  }
  else
  {
    unint64_t v15 = *(void **)(v0 + 128);
    swift_bridgeObjectRelease_n();
  }
  id v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

uint64_t SKPresenceDataSource.presentDevicesChanged(for:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_presentDevices);
  type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for SKPresentDevice);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SKPresentDevice]);
  swift_getExtendedExistentialTypeMetadata();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [SKPresentDevice] and conformance [A], &demangling cache variable for type metadata for [SKPresentDevice]);
  Sequence.compactMap<A>(_:)();
  swift_bridgeObjectRelease();
  type metadata accessor for Array();
  swift_getWitnessTable();
  Sequence.sorted(by:)();
  swift_bridgeObjectRelease();
  specialized SKPresenceDataSource.presentDevices.setter();
  return swift_bridgeObjectRelease();
}

uint64_t closure #2 in SKPresenceDataSource.presentDevicesChanged(for:)(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  BOOL v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)v33 - v9;
  uint64_t v12 = a1[3];
  uint64_t v11 = a1[4];
  uint64_t v34 = a1;
  id v13 = __swift_project_boxed_opaque_existential_1(a1, v12);
  unint64_t v14 = *(void (**)(uint64_t, uint64_t))(v11 + 40);
  uint64_t v37 = v13;
  uint64_t v38 = v14;
  uint64_t v39 = v11;
  uint64_t v40 = v12;
  uint64_t v35 = v11 + 40;
  v14(v12, v11);
  uint64_t v16 = a2[3];
  uint64_t v15 = a2[4];
  uint64_t v41 = a2;
  uint64_t v17 = __swift_project_boxed_opaque_existential_1(a2, v16);
  unint64_t v18 = *(void (**)(uint64_t, uint64_t))(v15 + 40);
  v33[1] = v17;
  uint64_t v36 = v16;
  uint64_t v19 = v16;
  uint64_t v20 = v15;
  uint64_t v21 = v18;
  v18(v19, v20);
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1E4F27928]);
  LOBYTE(a1) = dispatch thunk of static Equatable.== infix(_:_:)();
  id v22 = *(void (**)(char *, uint64_t))(v5 + 8);
  v22(v8, v4);
  v22(v10, v4);
  if (a1)
  {
    uint64_t v23 = v34[3];
    uint64_t v24 = v34[4];
    __swift_project_boxed_opaque_existential_1(v34, v23);
    uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 24))(v23, v24);
    uint64_t v27 = v26;
    uint64_t v28 = v41[3];
    uint64_t v29 = v41[4];
    __swift_project_boxed_opaque_existential_1(v41, v28);
    if (v25 == (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 24))(v28, v29) && v27 == v30)
    {
      swift_bridgeObjectRelease_n();
      char v31 = 0;
    }
    else
    {
      char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v38(v40, v39);
    v21(v36, v20);
    char v31 = static Date.< infix(_:_:)();
    v22(v8, v4);
    v22(v10, v4);
  }
  return v31 & 1;
}

void @objc SKPresenceDataSource.presentDevicesChanged(for:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  SKPresenceDataSource.presentDevicesChanged(for:)(v4);
}

void SKPresenceDataSource.invitedHandlesChanged(for:)(void *a1)
{
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Log.host);
  id v4 = a1;
  id v5 = v1;
  id v19 = v4;
  uint64_t v6 = (char *)v5;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v20 = v10;
    *(_DWORD *)uint64_t v9 = 136315394;
    id v11 = objc_msgSend(v19, sel_invitedHandles);
    uint64_t v12 = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for SKHandle);
    uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v14 = MEMORY[0x1B3EA1D20](v13, v12);
    unint64_t v16 = v15;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    uint64_t v17 = *(void *)&v6[direct field offset for SKPresenceDataSource.presenceIdentifier];
    unint64_t v18 = *(void *)&v6[direct field offset for SKPresenceDataSource.presenceIdentifier + 8];
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v7, v8, "Presence updated invited handles: %s for identifier: %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v10, -1, -1);
    MEMORY[0x1B3EA39E0](v9, -1, -1);
  }
  else
  {
  }
}

void @objc SKPresenceDataSource.invitedHandlesChanged(for:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  SKPresenceDataSource.invitedHandlesChanged(for:)(v4);
}

void @objc SKPresenceDataSource.presenceDaemonDisconnected(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  specialized SKPresenceDataSource.presenceDaemonDisconnected(_:)();
}

id SKPresenceDataSource.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void SKPresenceDataSource.init()()
{
}

void @objc SKPresenceDataSource.init()()
{
}

id SKPresenceDataSource.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SKPresenceDataSource();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc SKPresenceDataSource.__ivar_destroyer(uint64_t a1)
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t protocol witness for PresenceDataSource.presentDevicesPublisher.getter in conformance SKPresenceDataSource<A>()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t protocol witness for PresenceDataSource.presentDevices.getter in conformance SKPresenceDataSource<A>()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t protocol witness for PresenceDataSource.members.getter in conformance SKPresenceDataSource<A>()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t protocol witness for PresenceDataSource.members.setter in conformance SKPresenceDataSource<A>()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t (*protocol witness for PresenceDataSource.members.modify in conformance SKPresenceDataSource<A>(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x98))();
  return protocol witness for PresenceDataSource.members.modify in conformance SKPresenceDataSource<A>;
}

uint64_t protocol witness for PresenceDataSource.assertPresence(using:) in conformance SKPresenceDataSource<A>(uint64_t a1)
{
  id v4 = *(int **)((*MEMORY[0x1E4FBC8C8] & *v1) + 0xD0);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  id v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return v7(a1);
}

uint64_t protocol witness for PresenceDataSource.releasePresence() in conformance SKPresenceDataSource<A>()
{
  uint64_t v2 = *(int **)((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8);
  id v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v5();
}

uint64_t SKPresenceDataSource<>.init(config:targetQueue:)()
{
  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t SKPresenceDataSource<>.init(personalPresenceDataSourceUsingClientIdentifier:targetQueue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9[0] = a1;
  v7._uint64_t countAndFlagsBits = 0x43654D6F54654D2ELL;
  v7._object = (void *)0xEE006C656E6E6168;
  String.append(_:)(v7);
  LOBYTE(v9[0]) = 1;
  v9[1] = a1;
  v9[2] = a2;
  v9[3] = a1;
  v9[4] = a2;
  return (*(uint64_t (**)(void *, uint64_t))(v3 + 200))(v9, a3);
}

uint64_t PresenceController.__allocating_init(config:targetQueue:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  id v6 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SKPresenceDataSource<EmptyPresenceContext>));
  id v7 = a2;
  uint64_t v8 = specialized SKPresenceDataSource.init(presenceConfiguration:targetQueue:)(a1, a2, &demangling cache variable for type metadata for CurrentValueSubject<[any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>], Never>, &demangling cache variable for type metadata for SKPresenceDataSource<EmptyPresenceContext>);
  uint64_t v9 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type SKPresenceDataSource<EmptyPresenceContext> and conformance SKPresenceDataSource<A>, &demangling cache variable for type metadata for SKPresenceDataSource<EmptyPresenceContext>);
  uint64_t v10 = *(uint64_t (**)(char *, uint64_t, ValueMetadata *, unint64_t))(v3 + 184);
  unint64_t v11 = lazy protocol witness table accessor for type EmptyPresenceContext and conformance EmptyPresenceContext();
  uint64_t v12 = v10(v8, v9, &type metadata for EmptyPresenceContext, v11);

  return v12;
}

uint64_t PersonalPresenceController.__allocating_init<A>(dataSource:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = swift_allocObject();
  PersonalPresenceController.init<A>(dataSource:)(a1, v6, a3);
  return v5;
}

uint64_t PersonalPresenceController.init<A>(dataSource:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.BufferingPolicy);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AsyncSerialQueue();
  MEMORY[0x1F4188790](v13 - 8);
  unint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v12, 1, 1, v16);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E4FBD028], v6);
  AsyncSerialQueue.init(priority:bufferingPolicy:)((uint64_t)v12, (uint64_t)v9, (uint64_t)v15);
  outlined init with take of AsyncSerialQueue((uint64_t)v15, v3 + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceController_workQueue);
  uint64_t v17 = (void *)(v3 + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceController_personalPresenceDataSource);
  *uint64_t v17 = a1;
  v17[1] = a3;
  *(void *)(v3 + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceController_currentActivityIDs) = MEMORY[0x1E4FBC870];
  return v3;
}

uint64_t PersonalPresenceController.updatePersonalPresenceDataSource()()
{
  *(void *)(v1 + 88) = v0;
  return MEMORY[0x1F4188298](PersonalPresenceController.updatePersonalPresenceDataSource(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  uint64_t v5;
  void *v6;
  uint8_t *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  void *v19;
  void *v21;
  uint64_t (*v22)(void *, uint64_t, uint64_t);
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  void *v25;
  uint64_t v26;

  uint64_t v25 = v0;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.host);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  id v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[11];
  uint64_t v6 = &unk_1EB7C4000;
  if (v4)
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v24 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v9 = (void *)(v5 + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceController_currentActivityIDs);
    swift_beginAccess();
    v0[9] = *v9;
    swift_bridgeObjectRetain();
    uint64_t v10 = String.init<A>(reflecting:)();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B0DF7000, v2, v3, "Update personal presence data source with current activity IDs: %s", v7, 0xCu);
    swift_arrayDestroy();
    uint64_t v12 = v8;
    uint64_t v6 = (void *)&unk_1EB7C4000;
    MEMORY[0x1B3EA39E0](v12, -1, -1);
    MEMORY[0x1B3EA39E0](v7, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  uint64_t v13 = v0[11];
  uint64_t v14 = (uint64_t *)(v13 + v6[509]);
  swift_beginAccess();
  unint64_t v15 = *v14;
  v0[12] = *v14;
  uint64_t v16 = *(void *)(v15 + 16);
  uint64_t v17 = *(void *)(v13 + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceController_personalPresenceDataSource + 8);
  uint64_t ObjectType = swift_getObjectType();
  if (v16)
  {
    v0[8] = v15;
    id v22 = (uint64_t (*)(void *, uint64_t, uint64_t))(*(void *)(v17 + 64) + **(int **)(v17 + 64));
    swift_bridgeObjectRetain();
    uint64_t v19 = (void *)swift_task_alloc();
    v0[14] = v19;
    *uint64_t v19 = v0;
    v19[1] = PersonalPresenceController.updatePersonalPresenceDataSource();
    return v22(v0 + 8, ObjectType, v17);
  }
  else
  {
    uint64_t v23 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v17 + 72) + **(int **)(v17 + 72));
    uint64_t v21 = (void *)swift_task_alloc();
    v0[13] = v21;
    *uint64_t v21 = v0;
    v21[1] = PersonalPresenceController.updatePersonalPresenceDataSource();
    return v23(ObjectType, v17);
  }
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 120) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    return MEMORY[0x1F4188298](PersonalPresenceController.updatePersonalPresenceDataSource(), 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t PersonalPresenceController.presentDevicePublisher(for:)(uint64_t a1)
{
  uint64_t v24 = a1;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.HandleEvents<AnyPublisher<[any PresentDevice<Self.PresentDevice.Context == ActivityListPresenceContext>], Never>>);
  uint64_t v29 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  uint64_t v25 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<Publishers.HandleEvents<AnyPublisher<[any PresentDevice<Self.PresentDevice.Context == ActivityListPresenceContext>], Never>>, [any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>]>);
  uint64_t v30 = *(void *)(v28 - 8);
  MEMORY[0x1F4188790](v28);
  uint64_t v26 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v1 + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceController_personalPresenceDataSource + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 24))(ObjectType, v9);
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v23(v6, a1, v3);
  uint64_t v11 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v12 = (v11 + 16) & ~v11;
  v22[1] = v11 | 7;
  long long v22[2] = v12 + v5;
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = *(void (**)(uint64_t, char *, uint64_t))(v4 + 32);
  v14(v13 + v12, v6, v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[any PresentDevice<Self.PresentDevice.Context == ActivityListPresenceContext>], Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<[any PresentDevice<Self.PresentDevice.Context == ActivityListPresenceContext>], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[any PresentDevice<Self.PresentDevice.Context == ActivityListPresenceContext>], Never>);
  unint64_t v15 = v25;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  swift_release();
  swift_release();
  v23(v6, v24, v3);
  uint64_t v16 = swift_allocObject();
  v14(v16 + v12, v6, v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.HandleEvents<AnyPublisher<[any PresentDevice<Self.PresentDevice.Context == ActivityListPresenceContext>], Never>> and conformance Publishers.HandleEvents<A>, &demangling cache variable for type metadata for Publishers.HandleEvents<AnyPublisher<[any PresentDevice<Self.PresentDevice.Context == ActivityListPresenceContext>], Never>>);
  unint64_t v18 = v26;
  uint64_t v17 = v27;
  Publisher.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v15, v17);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<Publishers.HandleEvents<AnyPublisher<[any PresentDevice<Self.PresentDevice.Context == ActivityListPresenceContext>], Never>>, [any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>]> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<Publishers.HandleEvents<AnyPublisher<[any PresentDevice<Self.PresentDevice.Context == ActivityListPresenceContext>], Never>>, [any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>]>);
  uint64_t v19 = v28;
  uint64_t v20 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v18, v19);
  return v20;
}

void closure #1 in PersonalPresenceController.presentDevicePublisher(for:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *a1;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.host);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  swift_bridgeObjectRetain_n();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    uint64_t v23 = v21;
    *(_DWORD *)uint64_t v12 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for any PresentDevice<Self.PresentDevice.Context == ActivityListPresenceContext>);
    uint64_t v14 = MEMORY[0x1B3EA1D20](v8, v13);
    unint64_t v16 = v15;
    swift_bridgeObjectRelease();
    uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    _os_log_impl(&dword_1B0DF7000, v10, v11, "Filtering multiplexed devices: %s for presence identifier: %s", (uint8_t *)v12, 0x16u);
    uint64_t v19 = v21;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v19, -1, -1);
    MEMORY[0x1B3EA39E0](v12, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t closure #2 in PersonalPresenceController.presentDevicePublisher(for:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *a1;
  v14[2] = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized _ArrayProtocol.filter(_:)((uint64_t)partial apply for closure #1 in closure #2 in PersonalPresenceController.presentDevicePublisher(for:), (uint64_t)v14, v4);
  int64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v19 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    uint64_t v7 = v5 + 32;
    uint64_t v8 = v19;
    do
    {
      outlined init with copy of UserNotificationCenter(v7, (uint64_t)v15);
      uint64_t v9 = v16;
      uint64_t v10 = v17;
      __swift_project_boxed_opaque_existential_1(v15, v16);
      PresentDevice.withoutContext()(v9, v10, (uint64_t *)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v15);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v8 + 16) + 1, 1);
        uint64_t v8 = v19;
      }
      unint64_t v12 = *(void *)(v8 + 16);
      unint64_t v11 = *(void *)(v8 + 24);
      if (v12 >= v11 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        uint64_t v8 = v19;
      }
      *(void *)(v8 + 16) = v12 + 1;
      outlined init with take of BackgroundSessionManagerDataSource(v18, v8 + 40 * v12 + 32);
      v7 += 40;
      --v6;
    }
    while (v6);
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v8 = MEMORY[0x1E4FBC860];
  }
  *a3 = v8;
  return result;
}

uint64_t closure #1 in closure #2 in PersonalPresenceController.presentDevicePublisher(for:)(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 48))(&v8, v3, v4);
  _OWORD v7[2] = a2;
  char v5 = specialized Sequence.contains(where:)((uint64_t (*)(char *))partial apply for specialized closure #1 in Sequence<>.contains(_:), (uint64_t)v7, v8);
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t PersonalPresenceController.assertPresence(for:)(uint64_t a1)
{
  v2[12] = a1;
  v2[13] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.YieldResult);
  v2[14] = v3;
  v2[15] = *(void *)(v3 - 8);
  v2[16] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[17] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[18] = v5;
  v2[19] = *(void *)(v5 + 64);
  v2[20] = swift_task_alloc();
  return MEMORY[0x1F4188298](PersonalPresenceController.assertPresence(for:), 0, 0);
}

uint64_t PersonalPresenceController.assertPresence(for:)()
{
  uint64_t v2 = v0[19];
  uint64_t v1 = v0[20];
  uint64_t v3 = v0[17];
  uint64_t v4 = v0[18];
  uint64_t v5 = v0[12];
  uint64_t v6 = v0[13];
  v0[21] = OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceController_workQueue;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v5, v3);
  unint64_t v7 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v8 = (v2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = swift_allocObject();
  v0[22] = v9;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v9 + v7, v1, v3);
  *(void *)(v9 + v8) = v6;
  swift_retain();
  return MEMORY[0x1F4188298](PersonalPresenceController.assertPresence(for:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v1 = v0[22];
  uint64_t v3 = v0[15];
  uint64_t v2 = v0[16];
  uint64_t v4 = v0[14];
  v0[2] = v0;
  v0[3] = PersonalPresenceController.assertPresence(for:);
  uint64_t v5 = swift_continuation_init();
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = v5;
  v6[3] = &async function pointer to partial apply for closure #1 in PersonalPresenceController.assertPresence(for:);
  v6[4] = v1;
  type metadata accessor for AsyncSerialQueue();
  unint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = &async function pointer to partial apply for specialized closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  *(void *)(v7 + 24) = v6;
  v0[10] = &async function pointer to partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> ();
  v0[11] = v7;
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  return MEMORY[0x1F41881E8](v0 + 2);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 184) = v2;
  if (v2)
  {
    swift_willThrow();
    return MEMORY[0x1F4188298](PersonalPresenceController.assertPresence(for:), 0, 0);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in PersonalPresenceController.assertPresence(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[12] = a2;
  v3[13] = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v3[14] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v3[15] = v4;
  v3[16] = *(void *)(v4 - 8);
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  v3[19] = swift_task_alloc();
  v3[20] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in PersonalPresenceController.assertPresence(for:), 0, 0);
}

uint64_t closure #1 in PersonalPresenceController.assertPresence(for:)()
{
  uint64_t v31 = v0;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v1 = v0[12];
  uint64_t v2 = (char *)v0[20];
  uint64_t v3 = v0[15];
  uint64_t v4 = v0[16];
  uint64_t v5 = type metadata accessor for Logger();
  v0[21] = __swift_project_value_buffer(v5, (uint64_t)static Log.host);
  uint64_t v6 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v0[22] = v6;
  v0[23] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  uint64_t v29 = v6;
  v6(v2, v1, v3);
  unint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[20];
  uint64_t v11 = v0[15];
  uint64_t v12 = v0[16];
  if (v9)
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    uint64_t v30 = v28;
    *(_DWORD *)uint64_t v13 = 136315138;
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    uint64_t v17 = (v12 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v16(v10, v11);
    _os_log_impl(&dword_1B0DF7000, v7, v8, "Asserting presence for activity ID: %s", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v28, -1, -1);
    MEMORY[0x1B3EA39E0](v13, -1, -1);
  }
  else
  {
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    uint64_t v17 = (v12 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v16(v0[20], v0[15]);
  }

  uint64_t v19 = (char *)v0[18];
  uint64_t v18 = v0[19];
  uint64_t v20 = v0[15];
  uint64_t v22 = v0[12];
  uint64_t v21 = v0[13];
  uint64_t v23 = OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceController_currentActivityIDs;
  v0[24] = v16;
  v0[25] = v23;
  uint64_t v24 = (uint64_t *)(v21 + v23);
  swift_beginAccess();
  v29(v19, v22, v20);
  uint64_t v30 = *v24;
  swift_bridgeObjectRetain();
  specialized Set._Variant.insert(_:)(v18, v19);
  v0[26] = v17;
  v16(v18, v20);
  uint64_t v25 = v30;
  ActivityListPresenceContext.activityIDs.willset();
  swift_bridgeObjectRelease();
  *uint64_t v24 = v25;
  swift_endAccess();
  uint64_t v26 = (void *)swift_task_alloc();
  v0[27] = v26;
  *uint64_t v26 = v0;
  v26[1] = closure #1 in PersonalPresenceController.assertPresence(for:);
  v26[11] = v0[13];
  return MEMORY[0x1F4188298](PersonalPresenceController.updatePersonalPresenceDataSource(), 0, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 224) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](closure #1 in PersonalPresenceController.assertPresence(for:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24[2];
  uint64_t v25;
  uint64_t v26;

  uint64_t v25 = v0;
  uint64_t v1 = *(void **)(v0 + 224);
  (*(void (**)(void, void, void))(v0 + 176))(*(void *)(v0 + 136), *(void *)(v0 + 96), *(void *)(v0 + 120));
  uint64_t v2 = v1;
  uint64_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void **)(v0 + 224);
    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v0 + 192);
    unint64_t v7 = *(void *)(v0 + 136);
    os_log_type_t v8 = *(void *)(v0 + 120);
    BOOL v9 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    v24[0] = v23;
    *(_DWORD *)BOOL v9 = 136315394;
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v22(v7, v8);
    *(_WORD *)(v9 + 12) = 2080;
    *(void *)(v0 + 72) = v6;
    uint64_t v12 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v13 = String.init<A>(reflecting:)();
    *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v4, v5, "Error asserting presence for activity ID: %s error: %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v23, -1, -1);
    MEMORY[0x1B3EA39E0](v9, -1, -1);
  }
  else
  {
    unint64_t v15 = *(void **)(v0 + 224);
    (*(void (**)(void, void))(v0 + 192))(*(void *)(v0 + 136), *(void *)(v0 + 120));
  }
  uint64_t v16 = *(void *)(v0 + 112);
  uint64_t v17 = *(void *)(v0 + 96);
  uint64_t v18 = (uint64_t *)(*(void *)(v0 + 104) + *(void *)(v0 + 200));
  swift_beginAccess();
  v24[0] = *v18;
  swift_bridgeObjectRetain();
  specialized Set._Variant.remove(_:)(v17, v16);
  outlined destroy of UUID?(v16);
  uint64_t v19 = v24[0];
  ActivityListPresenceContext.activityIDs.willset();
  swift_bridgeObjectRelease();
  *uint64_t v18 = v19;
  swift_endAccess();
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
  return v20();
}

uint64_t PersonalPresenceController.releasePresence(for:)(uint64_t a1)
{
  v2[12] = a1;
  v2[13] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.YieldResult);
  v2[14] = v3;
  v2[15] = *(void *)(v3 - 8);
  v2[16] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[17] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[18] = v5;
  v2[19] = *(void *)(v5 + 64);
  v2[20] = swift_task_alloc();
  return MEMORY[0x1F4188298](PersonalPresenceController.releasePresence(for:), 0, 0);
}

uint64_t PersonalPresenceController.releasePresence(for:)()
{
  uint64_t v2 = v0[19];
  uint64_t v1 = v0[20];
  uint64_t v3 = v0[17];
  uint64_t v4 = v0[18];
  uint64_t v5 = v0[12];
  uint64_t v6 = v0[13];
  v0[21] = OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceController_workQueue;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v5, v3);
  unint64_t v7 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v8 = (v2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = swift_allocObject();
  v0[22] = v9;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v9 + v7, v1, v3);
  *(void *)(v9 + v8) = v6;
  swift_retain();
  return MEMORY[0x1F4188298](PersonalPresenceController.releasePresence(for:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v1 = v0[22];
  uint64_t v3 = v0[15];
  uint64_t v2 = v0[16];
  uint64_t v4 = v0[14];
  v0[2] = v0;
  v0[3] = PersonalPresenceController.releasePresence(for:);
  uint64_t v5 = swift_continuation_init();
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = v5;
  v6[3] = &async function pointer to partial apply for closure #1 in PersonalPresenceController.releasePresence(for:);
  v6[4] = v1;
  type metadata accessor for AsyncSerialQueue();
  unint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = &closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:)specialized partial apply;
  *(void *)(v7 + 24) = v6;
  v0[10] = &thunk for @escaping @callee_guaranteed @Sendable @async () -> ()partial apply;
  v0[11] = v7;
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  return MEMORY[0x1F41881E8](v0 + 2);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 184) = v2;
  if (v2)
  {
    swift_willThrow();
    return MEMORY[0x1F4188298](PersonalPresenceController.releasePresence(for:), 0, 0);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
    return v3();
  }
}

uint64_t closure #1 in PersonalPresenceController.releasePresence(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[12] = a2;
  v3[13] = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v3[14] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v3[15] = v4;
  v3[16] = *(void *)(v4 - 8);
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  v3[19] = swift_task_alloc();
  v3[20] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in PersonalPresenceController.releasePresence(for:), 0, 0);
}

uint64_t closure #1 in PersonalPresenceController.releasePresence(for:)()
{
  uint64_t v27 = v0;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[15];
  uint64_t v4 = v0[16];
  uint64_t v5 = type metadata accessor for Logger();
  v0[21] = __swift_project_value_buffer(v5, (uint64_t)static Log.host);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[22] = v6;
  v0[23] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v1, v3);
  unint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[20];
  uint64_t v11 = v0[15];
  uint64_t v12 = v0[16];
  if (v9)
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    uint64_t v26 = v25;
    *(_DWORD *)uint64_t v13 = 136315138;
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v10, v11);
    _os_log_impl(&dword_1B0DF7000, v7, v8, "Releasing presence for activity ID: %s", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v25, -1, -1);
    MEMORY[0x1B3EA39E0](v13, -1, -1);
  }
  else
  {
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v0[20], v0[15]);
  }

  uint64_t v17 = v0[13];
  uint64_t v18 = v0[14];
  uint64_t v19 = v0[12];
  uint64_t v20 = OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceController_currentActivityIDs;
  v0[24] = v16;
  v0[25] = v20;
  uint64_t v21 = (uint64_t *)(v17 + v20);
  swift_beginAccess();
  uint64_t v26 = *v21;
  swift_bridgeObjectRetain();
  specialized Set._Variant.remove(_:)(v19, v18);
  outlined destroy of UUID?(v18);
  uint64_t v22 = v26;
  ActivityListPresenceContext.activityIDs.willset();
  swift_bridgeObjectRelease();
  *uint64_t v21 = v22;
  swift_endAccess();
  uint64_t v23 = (void *)swift_task_alloc();
  v0[26] = v23;
  void *v23 = v0;
  v23[1] = closure #1 in PersonalPresenceController.releasePresence(for:);
  v23[11] = v0[13];
  return MEMORY[0x1F4188298](PersonalPresenceController.updatePersonalPresenceDataSource(), 0, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 216) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](closure #1 in PersonalPresenceController.releasePresence(for:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  void (*v16)(uint64_t, uint64_t);
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void);
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28[2];
  uint64_t v29;
  uint64_t v30;

  uint64_t v29 = v0;
  uint64_t v1 = *(void **)(v0 + 216);
  (*(void (**)(void, void, void))(v0 + 176))(*(void *)(v0 + 136), *(void *)(v0 + 96), *(void *)(v0 + 120));
  uint64_t v2 = v1;
  uint64_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void **)(v0 + 216);
    uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v0 + 192);
    unint64_t v7 = *(void *)(v0 + 136);
    os_log_type_t v8 = *(void *)(v0 + 120);
    BOOL v9 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    v28[0] = v27;
    *(_DWORD *)BOOL v9 = 136315394;
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v26(v7, v8);
    *(_WORD *)(v9 + 12) = 2080;
    *(void *)(v0 + 72) = v6;
    uint64_t v12 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v13 = String.init<A>(reflecting:)();
    *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v4, v5, "Error releasing presence for activity ID: %s error: %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v27, -1, -1);
    MEMORY[0x1B3EA39E0](v9, -1, -1);
  }
  else
  {
    unint64_t v15 = *(void **)(v0 + 216);
    (*(void (**)(void, void))(v0 + 192))(*(void *)(v0 + 136), *(void *)(v0 + 120));
  }
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v0 + 192);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 176);
  uint64_t v18 = *(void *)(v0 + 152);
  uint64_t v19 = *(char **)(v0 + 144);
  uint64_t v20 = *(void *)(v0 + 96);
  uint64_t v21 = (uint64_t *)(*(void *)(v0 + 104) + *(void *)(v0 + 200));
  uint64_t v22 = *(void *)(v0 + 120);
  swift_beginAccess();
  v17(v19, v20, v22);
  v28[0] = *v21;
  swift_bridgeObjectRetain();
  specialized Set._Variant.insert(_:)(v18, v19);
  v16(v18, v22);
  uint64_t v23 = v28[0];
  ActivityListPresenceContext.activityIDs.willset();
  swift_bridgeObjectRelease();
  *uint64_t v21 = v23;
  swift_endAccess();
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

uint64_t PersonalPresenceController.deinit()
{
  outlined destroy of AsyncSerialQueue(v0 + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceController_workQueue);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PersonalPresenceController.__deallocating_deinit()
{
  outlined destroy of AsyncSerialQueue(v0 + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceController_workQueue);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

void PersonalPresenceDataSource.members.getter()
{
  if ((MEMORY[0x1E4FBC860] & 0xC000000000000000) != 0)
  {
    if (_CocoaArrayWrapper.endIndex.getter()) {
      specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860], (uint64_t *)&demangling cache variable for type metadata for _SetStorage<AddressableMember>, (void (*)(void))type metadata accessor for AddressableMember);
    }
  }
}

void (*PersonalPresenceDataSource.members.modify(void *a1))(uint64_t a1, char a2)
{
  if ((MEMORY[0x1E4FBC860] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860], (uint64_t *)&demangling cache variable for type metadata for _SetStorage<AddressableMember>, (void (*)(void))type metadata accessor for AddressableMember);
  }
  else {
    uint64_t v2 = MEMORY[0x1E4FBC870];
  }
  *a1 = v2;
  return PersonalPresenceDataSource.members.modify;
}

void PersonalPresenceDataSource.members.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    specialized PersonalPresenceDataSource.members.setter();
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized PersonalPresenceDataSource.members.setter();
  }
}

uint64_t PersonalPresenceDataSource.presentDevices.getter()
{
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  return v1;
}

uint64_t PersonalPresenceDataSource.presentDevices.setter()
{
  return swift_bridgeObjectRelease();
}

uint64_t (*PersonalPresenceDataSource.presentDevices.modify(uint64_t a1))(void *a1, char a2)
{
  *(void *)(a1 + 16) = *(void *)(v1 + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceDataSource__presentDevices);
  swift_retain();
  CurrentValueSubject.value.getter();
  return PersonalPresenceDataSource.presentDevices.modify;
}

uint64_t PersonalPresenceDataSource.presentDevices.modify(void *a1, char a2)
{
  a1[1] = *a1;
  if (a2)
  {
    swift_bridgeObjectRetain();
    CurrentValueSubject.send(_:)();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    CurrentValueSubject.send(_:)();
    swift_bridgeObjectRelease();
    return swift_release();
  }
}

uint64_t PersonalPresenceDataSource.$presentDevices.getter()
{
  return swift_retain();
}

uint64_t PersonalPresenceDataSource.presentDevicesPublisher.getter()
{
  (*(void (**)(void))(*(void *)v0 + 160))();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<[any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>], Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<[any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>], Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<[any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>], Never>);
  uint64_t v1 = Publisher.eraseToAnyPublisher()();
  swift_release();
  return v1;
}

uint64_t PersonalPresenceDataSource.cancellables.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PersonalPresenceDataSource.cancellables.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceDataSource_cancellables);
  swift_beginAccess();
  void *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*PersonalPresenceDataSource.cancellables.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

uint64_t PersonalPresenceDataSource.__allocating_init(activityID:personalPresenceController:)(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  uint64_t v4 = specialized PersonalPresenceDataSource.init(activityID:personalPresenceController:)(a1, a2);
  swift_release();
  return v4;
}

uint64_t PersonalPresenceDataSource.init(activityID:personalPresenceController:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = specialized PersonalPresenceDataSource.init(activityID:personalPresenceController:)(a1, a2);
  swift_release();
  return v2;
}

uint64_t PersonalPresenceDataSource.assertPresence(using:)()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x1F4188298](PersonalPresenceDataSource.assertPresence(using:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 16) + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceDataSource_activityID;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v2;
  *uint64_t v2 = v0;
  v2[1] = PersonalPresenceDataSource.assertPresence(using:);
  return PersonalPresenceController.assertPresence(for:)(v1);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t PersonalPresenceDataSource.releasePresence()()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x1F4188298](PersonalPresenceDataSource.releasePresence(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 16) + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceDataSource_activityID;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v2;
  *uint64_t v2 = v0;
  v2[1] = PersonalPresenceDataSource.releasePresence();
  return PersonalPresenceController.releasePresence(for:)(v1);
}

uint64_t PersonalPresenceDataSource.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceDataSource_activityID;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PersonalPresenceDataSource.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceDataSource_activityID;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for PresenceDataSource.presentDevicesPublisher.getter in conformance PersonalPresenceDataSource()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t protocol witness for PresenceDataSource.presentDevices.getter in conformance PersonalPresenceDataSource()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t protocol witness for PresenceDataSource.members.getter in conformance PersonalPresenceDataSource()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t protocol witness for PresenceDataSource.members.setter in conformance PersonalPresenceDataSource()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t (*protocol witness for PresenceDataSource.members.modify in conformance PersonalPresenceDataSource(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(void *)v1 + 128))();
  return protocol witness for PresenceDataSource.members.modify in conformance SKPresenceDataSource<A>;
}

void protocol witness for PresenceDataSource.members.modify in conformance SKPresenceDataSource<A>(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t protocol witness for PresenceDataSource.assertPresence(using:) in conformance PersonalPresenceDataSource()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 208) + **(int **)(*(void *)v0 + 208));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v4();
}

uint64_t protocol witness for PresenceDataSource.releasePresence() in conformance PersonalPresenceDataSource()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 216) + **(int **)(*(void *)v0 + 216));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v4();
}

unint64_t specialized PresenceConfiguration.description.getter(char a1, uint64_t a2, void *a3)
{
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v6._uint64_t countAndFlagsBits = a2;
  v6._object = a3;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 0x737265507369202CLL;
  v7._object = (void *)0xEE00203A6C616E6FLL;
  String.append(_:)(v7);
  if (a1) {
    uint64_t v8 = 1702195828;
  }
  else {
    uint64_t v8 = 0x65736C6166;
  }
  if (a1) {
    unint64_t v9 = 0xE400000000000000;
  }
  else {
    unint64_t v9 = 0xE500000000000000;
  }
  unint64_t v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  return 0xD000000000000014;
}

uint64_t specialized SKPresenceDataSource.presentDevices.setter()
{
  return specialized CurrentSubject.wrappedValue.setter();
}

uint64_t type metadata accessor for SKPresenceDataSource()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in SKPresenceDataSource.presentDevicesChanged(for:)@<X0>(uint64_t a1@<X8>)
{
  return SKPresentDevice.context<A>(as:)(*(void *)(v1 + 16), *(void *)(*(void *)(v1 + 24) + 8), a1);
}

uint64_t partial apply for closure #2 in SKPresenceDataSource.presentDevicesChanged(for:)(void *a1, void *a2)
{
  return closure #2 in SKPresenceDataSource.presentDevicesChanged(for:)(a1, a2) & 1;
}

void specialized SKPresenceDataSource.presenceDaemonDisconnected(_:)()
{
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.host);
  uint64_t v8 = v0;
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    uint64_t v9 = v5;
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v6 = *(void *)&v8[direct field offset for SKPresenceDataSource.presenceIdentifier];
    unint64_t v7 = *(void *)&v8[direct field offset for SKPresenceDataSource.presenceIdentifier + 8];
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v2, v3, "Presence daemon disconnected for identifier: %s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v5, -1, -1);
    MEMORY[0x1B3EA39E0](v4, -1, -1);
  }
  else
  {
  }
}

void specialized SKPresenceDataSource.init()()
{
}

unint64_t lazy protocol witness table accessor for type EmptyPresenceContext and conformance EmptyPresenceContext()
{
  unint64_t result = lazy protocol witness table cache variable for type EmptyPresenceContext and conformance EmptyPresenceContext;
  if (!lazy protocol witness table cache variable for type EmptyPresenceContext and conformance EmptyPresenceContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyPresenceContext and conformance EmptyPresenceContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EmptyPresenceContext and conformance EmptyPresenceContext;
  if (!lazy protocol witness table cache variable for type EmptyPresenceContext and conformance EmptyPresenceContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyPresenceContext and conformance EmptyPresenceContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EmptyPresenceContext and conformance EmptyPresenceContext;
  if (!lazy protocol witness table cache variable for type EmptyPresenceContext and conformance EmptyPresenceContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyPresenceContext and conformance EmptyPresenceContext);
  }
  return result;
}

uint64_t outlined init with take of AsyncSerialQueue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AsyncSerialQueue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in PersonalPresenceController.presentDevicePublisher(for:)(uint64_t *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  closure #1 in PersonalPresenceController.presentDevicePublisher(for:)(a1, v4);
}

uint64_t objectdestroyTm_0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #2 in PersonalPresenceController.presentDevicePublisher(for:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return closure #2 in PersonalPresenceController.presentDevicePublisher(for:)(a1, v6, a2);
}

uint64_t partial apply for closure #1 in PersonalPresenceController.assertPresence(for:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1 + v5;
  uint64_t v7 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in PersonalPresenceController.assertPresence(for:)(a1, v6, v7);
}

uint64_t sub_1B0E408A4()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for specialized closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(int **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return specialized closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:)(v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  void *v4;
  uint64_t v6;

  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(int **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return specialized closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:)(v2, v3);
}

uint64_t sub_1B0E40984()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t objectdestroy_21Tm()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return MEMORY[0x1F4186498](v0, v6, v5);
}

uint64_t partial apply for closure #1 in PersonalPresenceController.releasePresence(for:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1 + v5;
  uint64_t v7 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in PersonalPresenceController.releasePresence(for:)(a1, v6, v7);
}

uint64_t closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:)specialized partial apply()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(int **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return specialized closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:)(v2, v3);
}

void specialized PersonalPresenceDataSource.members.setter()
{
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Log.host);
  swift_bridgeObjectRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v8 = v4;
    *(_DWORD *)uint64_t v3 = 136315138;
    type metadata accessor for AddressableMember();
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type AddressableMember and conformance NSObject, (void (*)(uint64_t))type metadata accessor for AddressableMember);
    swift_bridgeObjectRetain();
    uint64_t v5 = Set.description.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v1, v2, "Not adding additional remote members to personal presence data source: %s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v4, -1, -1);
    MEMORY[0x1B3EA39E0](v3, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t specialized PersonalPresenceDataSource.init(activityID:personalPresenceController:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceDataSource__presentDevices;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<[any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>], Never>);
  swift_allocObject();
  *(void *)(v2 + v6) = CurrentValueSubject.init(_:)();
  *(void *)(v2 + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceDataSource_cancellables) = MEMORY[0x1E4FBC870];
  uint64_t v7 = v2 + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceDataSource_activityID;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, a1, v8);
  *(void *)(v3 + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceDataSource_personalPresenceController) = a2;
  swift_retain();
  PersonalPresenceController.presentDevicePublisher(for:)(a1);
  (*(void (**)(void))(*(void *)v3 + 160))();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>], Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<[any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>], Never>);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
  return v3;
}

uint64_t associated type witness table accessor for PresenceDataSource.Context : PresenceContext in SKPresenceDataSource<A>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 88);
}

uint64_t sub_1B0E41048@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x88))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0E410A4(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x90);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B0E41108()
{
  return 16;
}

__n128 sub_1B0E41114(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1B0E41120@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xA0))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0E4117C()
{
  swift_bridgeObjectRetain();
  specialized SKPresenceDataSource.presentDevices.setter();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B0E411C0()
{
  return 16;
}

__n128 sub_1B0E411CC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1B0E411D8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 112))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0E41224(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 120);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B0E41278@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 136))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0E412C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 144);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B0E41318@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 176))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0E41364(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 184);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t dispatch thunk of PresenceDataSource.presentDevicesPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of PresenceDataSource.presentDevices.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of PresenceDataSource.members.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of PresenceDataSource.members.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of PresenceDataSource.members.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of PresenceDataSource.assertPresence(using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 64) + **(int **)(a3 + 64));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of PresenceDataSource.releasePresence()(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(a2 + 72) + **(int **)(a2 + 72));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v7(a1, a2);
}

uint64_t destroy for PresenceConfiguration()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PresenceConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PresenceConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for PresenceConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PresenceConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PresenceConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PresenceConfiguration()
{
  return &type metadata for PresenceConfiguration;
}

uint64_t type metadata completion function for SKPresenceDataSource()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for SKPresenceDataSource(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SKPresenceDataSource);
}

uint64_t dispatch thunk of SKPresenceDataSource.members.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of SKPresenceDataSource.members.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of SKPresenceDataSource.members.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of SKPresenceDataSource.presentDevices.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of SKPresenceDataSource.$presentDevices.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of SKPresenceDataSource.presentDevicesPublisher.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of SKPresenceDataSource.__allocating_init(presenceConfiguration:targetQueue:)(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(uint64_t (**)(unsigned char *))(v1 + 200);
  v7[0] = *(unsigned char *)a1;
  long long v8 = v2;
  uint64_t v9 = v3;
  uint64_t v10 = v4;
  return v5(v7);
}

uint64_t dispatch thunk of SKPresenceDataSource.assertPresence(using:)(uint64_t a1)
{
  uint64_t v4 = *(int **)((*MEMORY[0x1E4FBC8C8] & *v1) + 0xD0);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v7(a1);
}

uint64_t dispatch thunk of SKPresenceDataSource.releasePresence()()
{
  uint64_t v2 = *(int **)((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v5();
}

uint64_t dispatch thunk of SKPresenceDataSource.inviteHandle(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)((*MEMORY[0x1E4FBC8C8] & *v2) + 0xE0);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v9(a1, a2);
}

uint64_t dispatch thunk of SKPresenceDataSource.inviteHandles(_:)(uint64_t a1)
{
  uint64_t v4 = *(int **)((*MEMORY[0x1E4FBC8C8] & *v1) + 0xE8);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v7(a1);
}

uint64_t dispatch thunk of SKPresenceDataSource.removeHandle(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)((*MEMORY[0x1E4FBC8C8] & *v2) + 0xF0);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v9(a1, a2);
}

uint64_t dispatch thunk of SKPresenceDataSource.removeHandles(_:)(uint64_t a1)
{
  uint64_t v4 = *(int **)((*MEMORY[0x1E4FBC8C8] & *v1) + 0xF8);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v7(a1);
}

uint64_t dispatch thunk of SKPresenceDataSource.presentDevicesChanged(for:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of SKPresenceDataSource.invitedHandlesChanged(for:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of SKPresenceDataSource.presenceDaemonDisconnected(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();
}

uint64_t ObjC metadata update function for PersonalPresenceController()
{
  return type metadata accessor for PersonalPresenceController(0);
}

uint64_t type metadata accessor for PersonalPresenceController(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for PersonalPresenceController);
}

uint64_t type metadata completion function for PersonalPresenceController()
{
  uint64_t result = type metadata accessor for AsyncSerialQueue();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for PersonalPresenceController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PersonalPresenceController);
}

uint64_t dispatch thunk of PersonalPresenceController.__allocating_init<A>(dataSource:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t ObjC metadata update function for PersonalPresenceDataSource()
{
  return type metadata accessor for PersonalPresenceDataSource(0);
}

uint64_t type metadata accessor for PersonalPresenceDataSource(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for PersonalPresenceDataSource);
}

uint64_t type metadata completion function for PersonalPresenceDataSource()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for PersonalPresenceDataSource(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PersonalPresenceDataSource);
}

uint64_t dispatch thunk of PersonalPresenceDataSource.members.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of PersonalPresenceDataSource.members.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of PersonalPresenceDataSource.members.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of PersonalPresenceDataSource.presentDevices.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of PersonalPresenceDataSource.presentDevices.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of PersonalPresenceDataSource.presentDevices.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of PersonalPresenceDataSource.$presentDevices.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of PersonalPresenceDataSource.presentDevicesPublisher.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of PersonalPresenceDataSource.cancellables.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of PersonalPresenceDataSource.cancellables.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of PersonalPresenceDataSource.cancellables.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of PersonalPresenceDataSource.__allocating_init(activityID:personalPresenceController:)()
{
  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of PersonalPresenceDataSource.assertPresence(using:)()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 208) + **(int **)(*(void *)v0 + 208));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v4();
}

uint64_t dispatch thunk of PersonalPresenceDataSource.releasePresence()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 216) + **(int **)(*(void *)v0 + 216));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v4();
}

void specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t a1)
{
}

{
  specialized Set.init(_nonEmptyArrayLiteral:)(a1, &demangling cache variable for type metadata for _SetStorage<TUConversationVirtualParticipant>, &lazy cache variable for type metadata for TUConversationVirtualParticipant);
}

{
  specialized Set.init(_nonEmptyArrayLiteral:)(a1, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<BackgroundSessionManagerHostConnection>, (void (*)(void))type metadata accessor for BackgroundSessionManagerHostConnection);
}

{
  specialized Set.init(_nonEmptyArrayLiteral:)(a1, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<ConversationManagerHostConnection>, (void (*)(void))type metadata accessor for ConversationManagerHostConnection);
}

{
  specialized Set.init(_nonEmptyArrayLiteral:)(a1, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<TUConversationParticipant>, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
}

{
  specialized Set.init(_nonEmptyArrayLiteral:)(a1, &demangling cache variable for type metadata for _SetStorage<RBSProcessIdentifier>, &lazy cache variable for type metadata for RBSProcessIdentifier);
}

void specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v4 = a1;
  unint64_t v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(a2);
      uint64_t v6 = static _SetStorage.allocate(capacity:)();
      uint64_t v7 = v4 & 0xFFFFFFFFFFFFFF8;
      if (!v5) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v8) {
        return;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v6 = MEMORY[0x1E4FBC870];
  uint64_t v7 = v4 & 0xFFFFFFFFFFFFFF8;
  if (v5) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8) {
    return;
  }
LABEL_9:
  uint64_t v10 = v6 + 56;
  uint64_t v47 = v8;
  if ((v4 & 0xC000000000000001) != 0)
  {
    uint64_t v11 = 0;
    unint64_t v44 = v4;
    while (1)
    {
      uint64_t v12 = MEMORY[0x1B3EA25C0](v11, v4);
      BOOL v13 = __OFADD__(v11++, 1);
      if (v13)
      {
        __break(1u);
        goto LABEL_37;
      }
      uint64_t v14 = v12;
      Swift::Int v15 = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
      uint64_t v16 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v17 = v15 & ~v16;
      unint64_t v18 = v17 >> 6;
      uint64_t v19 = *(void *)(v10 + 8 * (v17 >> 6));
      uint64_t v20 = 1 << v17;
      if (((1 << v17) & v19) != 0)
      {
        type metadata accessor for TUConversationActivity(0, a3);
        id v21 = *(id *)(*(void *)(v6 + 48) + 8 * v17);
        char v22 = static NSObject.== infix(_:_:)();

        if (v22)
        {
LABEL_11:
          swift_unknownObjectRelease();
          unint64_t v4 = v44;
          goto LABEL_12;
        }
        uint64_t v23 = ~v16;
        while (1)
        {
          unint64_t v17 = (v17 + 1) & v23;
          unint64_t v18 = v17 >> 6;
          uint64_t v19 = *(void *)(v10 + 8 * (v17 >> 6));
          uint64_t v20 = 1 << v17;
          if ((v19 & (1 << v17)) == 0) {
            break;
          }
          id v24 = *(id *)(*(void *)(v6 + 48) + 8 * v17);
          char v25 = static NSObject.== infix(_:_:)();

          if (v25) {
            goto LABEL_11;
          }
        }
        unint64_t v4 = v44;
      }
      *(void *)(v10 + 8 * v18) = v20 | v19;
      *(void *)(*(void *)(v6 + 48) + 8 * v17) = v14;
      uint64_t v26 = *(void *)(v6 + 16);
      BOOL v13 = __OFADD__(v26, 1);
      uint64_t v27 = v26 + 1;
      if (v13) {
        goto LABEL_38;
      }
      *(void *)(v6 + 16) = v27;
LABEL_12:
      if (v11 == v47) {
        return;
      }
    }
  }
  uint64_t v28 = 0;
  uint64_t v45 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v28 != v45)
  {
    Swift::Int v29 = *(void *)(v6 + 40);
    id v30 = *(id *)(v4 + 32 + 8 * v28);
    Swift::Int v31 = NSObject._rawHashValue(seed:)(v29);
    uint64_t v32 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v33 = v31 & ~v32;
    unint64_t v34 = v33 >> 6;
    uint64_t v35 = *(void *)(v10 + 8 * (v33 >> 6));
    uint64_t v36 = 1 << v33;
    if (((1 << v33) & v35) != 0)
    {
      type metadata accessor for TUConversationActivity(0, a3);
      id v37 = *(id *)(*(void *)(v6 + 48) + 8 * v33);
      char v38 = static NSObject.== infix(_:_:)();

      if (v38) {
        goto LABEL_24;
      }
      uint64_t v39 = ~v32;
      unint64_t v33 = (v33 + 1) & v39;
      unint64_t v34 = v33 >> 6;
      uint64_t v35 = *(void *)(v10 + 8 * (v33 >> 6));
      uint64_t v36 = 1 << v33;
      if ((v35 & (1 << v33)) != 0)
      {
        while (1)
        {
          id v40 = *(id *)(*(void *)(v6 + 48) + 8 * v33);
          char v41 = static NSObject.== infix(_:_:)();

          if (v41) {
            break;
          }
          unint64_t v33 = (v33 + 1) & v39;
          unint64_t v34 = v33 >> 6;
          uint64_t v35 = *(void *)(v10 + 8 * (v33 >> 6));
          uint64_t v36 = 1 << v33;
          if ((v35 & (1 << v33)) == 0) {
            goto LABEL_32;
          }
        }
LABEL_24:

        uint64_t v8 = v47;
        goto LABEL_25;
      }
LABEL_32:
      uint64_t v8 = v47;
    }
    *(void *)(v10 + 8 * v34) = v36 | v35;
    *(void *)(*(void *)(v6 + 48) + 8 * v33) = v30;
    uint64_t v42 = *(void *)(v6 + 16);
    BOOL v13 = __OFADD__(v42, 1);
    uint64_t v43 = v42 + 1;
    if (v13) {
      goto LABEL_39;
    }
    *(void *)(v6 + 16) = v43;
LABEL_25:
    if (++v28 == v8) {
      return;
    }
  }
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
}

void specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t a1, uint64_t *a2, void (*a3)(void))
{
  unint64_t v4 = a1;
  unint64_t v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(a2);
      uint64_t v6 = static _SetStorage.allocate(capacity:)();
      uint64_t v7 = v4 & 0xFFFFFFFFFFFFFF8;
      if (!v5) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v8) {
        return;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v6 = MEMORY[0x1E4FBC870];
  uint64_t v7 = v4 & 0xFFFFFFFFFFFFFF8;
  if (v5) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8) {
    return;
  }
LABEL_9:
  uint64_t v10 = v6 + 56;
  uint64_t v47 = v8;
  if ((v4 & 0xC000000000000001) != 0)
  {
    uint64_t v11 = 0;
    unint64_t v44 = v4;
    while (1)
    {
      uint64_t v12 = MEMORY[0x1B3EA25C0](v11, v4);
      BOOL v13 = __OFADD__(v11++, 1);
      if (v13)
      {
        __break(1u);
        goto LABEL_37;
      }
      uint64_t v14 = v12;
      Swift::Int v15 = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
      uint64_t v16 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v17 = v15 & ~v16;
      unint64_t v18 = v17 >> 6;
      uint64_t v19 = *(void *)(v10 + 8 * (v17 >> 6));
      uint64_t v20 = 1 << v17;
      if (((1 << v17) & v19) != 0)
      {
        a3(0);
        id v21 = *(id *)(*(void *)(v6 + 48) + 8 * v17);
        char v22 = static NSObject.== infix(_:_:)();

        if (v22)
        {
LABEL_11:
          swift_unknownObjectRelease();
          unint64_t v4 = v44;
          goto LABEL_12;
        }
        uint64_t v23 = ~v16;
        while (1)
        {
          unint64_t v17 = (v17 + 1) & v23;
          unint64_t v18 = v17 >> 6;
          uint64_t v19 = *(void *)(v10 + 8 * (v17 >> 6));
          uint64_t v20 = 1 << v17;
          if ((v19 & (1 << v17)) == 0) {
            break;
          }
          id v24 = *(id *)(*(void *)(v6 + 48) + 8 * v17);
          char v25 = static NSObject.== infix(_:_:)();

          if (v25) {
            goto LABEL_11;
          }
        }
        unint64_t v4 = v44;
      }
      *(void *)(v10 + 8 * v18) = v20 | v19;
      *(void *)(*(void *)(v6 + 48) + 8 * v17) = v14;
      uint64_t v26 = *(void *)(v6 + 16);
      BOOL v13 = __OFADD__(v26, 1);
      uint64_t v27 = v26 + 1;
      if (v13) {
        goto LABEL_38;
      }
      *(void *)(v6 + 16) = v27;
LABEL_12:
      if (v11 == v47) {
        return;
      }
    }
  }
  uint64_t v28 = 0;
  uint64_t v45 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v28 != v45)
  {
    Swift::Int v29 = *(void *)(v6 + 40);
    id v30 = *(id *)(v4 + 32 + 8 * v28);
    Swift::Int v31 = NSObject._rawHashValue(seed:)(v29);
    uint64_t v32 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v33 = v31 & ~v32;
    unint64_t v34 = v33 >> 6;
    uint64_t v35 = *(void *)(v10 + 8 * (v33 >> 6));
    uint64_t v36 = 1 << v33;
    if (((1 << v33) & v35) != 0)
    {
      a3(0);
      id v37 = *(id *)(*(void *)(v6 + 48) + 8 * v33);
      char v38 = static NSObject.== infix(_:_:)();

      if (v38) {
        goto LABEL_24;
      }
      uint64_t v39 = ~v32;
      unint64_t v33 = (v33 + 1) & v39;
      unint64_t v34 = v33 >> 6;
      uint64_t v35 = *(void *)(v10 + 8 * (v33 >> 6));
      uint64_t v36 = 1 << v33;
      if ((v35 & (1 << v33)) != 0)
      {
        while (1)
        {
          id v40 = *(id *)(*(void *)(v6 + 48) + 8 * v33);
          char v41 = static NSObject.== infix(_:_:)();

          if (v41) {
            break;
          }
          unint64_t v33 = (v33 + 1) & v39;
          unint64_t v34 = v33 >> 6;
          uint64_t v35 = *(void *)(v10 + 8 * (v33 >> 6));
          uint64_t v36 = 1 << v33;
          if ((v35 & (1 << v33)) == 0) {
            goto LABEL_32;
          }
        }
LABEL_24:

        uint64_t v8 = v47;
        goto LABEL_25;
      }
LABEL_32:
      uint64_t v8 = v47;
    }
    *(void *)(v10 + 8 * v34) = v36 | v35;
    *(void *)(*(void *)(v6 + 48) + 8 * v33) = v30;
    uint64_t v42 = *(void *)(v6 + 16);
    BOOL v13 = __OFADD__(v42, 1);
    uint64_t v43 = v42 + 1;
    if (v13) {
      goto LABEL_39;
    }
    *(void *)(v6 + 16) = v43;
LABEL_25:
    if (++v28 == v8) {
      return;
    }
  }
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
}

uint64_t partial apply for closure #1 in PersonalPresenceDataSource.init(activityID:personalPresenceController:)()
{
  return CurrentValueSubject.send(_:)();
}

uint64_t outlined destroy of UUID?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in closure #2 in PersonalPresenceController.presentDevicePublisher(for:)(void *a1)
{
  return closure #1 in closure #2 in PersonalPresenceController.presentDevicePublisher(for:)(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t partial apply for specialized closure #1 in Sequence<>.contains(_:)()
{
  return specialized closure #1 in Sequence<>.contains(_:)() & 1;
}

{
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B0E42F4C()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in SKPresenceDataSource.members.didset()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_OWORD *)(v2 + 160) = v3;
  return MEMORY[0x1F4188298](closure #1 in SKPresenceDataSource.members.didset, 0, 0);
}

uint64_t outlined consume of Set<AddressableMember>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t SharableObjectIdentifierEncoder.userInfo.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SharableObjectIdentifierEncoder.userInfo.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*SharableObjectIdentifierEncoder.userInfo.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

uint64_t SharableObjectIdentifierEncoder.encode<A>(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)v1 + 88))();
  uint64_t v5 = type metadata accessor for _SharableObjectIdentifierEncoder();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = MEMORY[0x1E4FBC860];
  *(void *)(v6 + 24) = v4;
  uint64_t v7 = v6
     + OBJC_IVAR____TtC14CopresenceCoreP33_E889BDE102B72D706F1FB007A250847732_SharableObjectIdentifierEncoder_output;
  SHA256.init()();
  v9[3] = v5;
  v9[4] = lazy protocol witness table accessor for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder(&lazy protocol witness table cache variable for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder, (void (*)(uint64_t))type metadata accessor for _SharableObjectIdentifierEncoder);
  v9[0] = v6;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v9, v5);
  swift_retain();
  _SharableObjectIdentifierEncoder.encode<A>(_:)();
  if (!v2)
  {
    swift_beginAccess();
    outlined init with copy of SharableObjectIdentifier(v7, a1);
  }
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v9);
}

uint64_t type metadata accessor for _SharableObjectIdentifierEncoder()
{
  uint64_t result = type metadata singleton initialization cache for _SharableObjectIdentifierEncoder;
  if (!type metadata singleton initialization cache for _SharableObjectIdentifierEncoder) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t SharableObjectIdentifierEncoder.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SharableObjectIdentifierEncoder.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t SharableObjectIdentifierEncoder.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  return v0;
}

uint64_t SharableObjectIdentifierEncoder.init()()
{
  *(void *)(v0 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  return v0;
}

uint64_t _SharableObjectIdentifierEncoder.container<A>(keyedBy:)()
{
  type metadata accessor for _SharableObjectIdentifierKeyedEncodingContainer();
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (void *)swift_allocObject();
  swift_retain();
  swift_bridgeObjectRetain();
  unint64_t v3 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  v2[3] = v1;
  v2[4] = v3;
  v2[2] = v0;
  swift_getWitnessTable();
  return KeyedEncodingContainer.init<A>(_:)();
}

void *_SharableObjectIdentifierKeyedEncodingContainer.__allocating_init(referencing:codingPath:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_allocObject();
  unint64_t v5 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  v4[3] = a2;
  v4[4] = v5;
  v4[2] = a1;
  return v4;
}

uint64_t _SharableObjectIdentifierEncoder.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of SharableObjectIdentifier(v0 + OBJC_IVAR____TtC14CopresenceCoreP33_E889BDE102B72D706F1FB007A250847732_SharableObjectIdentifierEncoder_output);
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Encoder.userInfo.getter in conformance _SharableObjectIdentifierEncoder()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Encoder.container<A>(keyedBy:) in conformance _SharableObjectIdentifierEncoder()
{
  return _SharableObjectIdentifierEncoder.container<A>(keyedBy:)();
}

uint64_t protocol witness for Encoder.unkeyedContainer() in conformance _SharableObjectIdentifierEncoder@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 16);
  a1[3] = &unk_1F09AEB70;
  a1[4] = lazy protocol witness table accessor for type _SharableObjectIdentifierUnkeyedEncodingContainer and conformance _SharableObjectIdentifierUnkeyedEncodingContainer();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = 0;
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Encoder.singleValueContainer() in conformance _SharableObjectIdentifierEncoder@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  a1[3] = type metadata accessor for _SharableObjectIdentifierEncoder();
  a1[4] = lazy protocol witness table accessor for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder(&lazy protocol witness table cache variable for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder, (void (*)(uint64_t))type metadata accessor for _SharableObjectIdentifierEncoder);
  *a1 = v3;
  return swift_retain();
}

uint64_t _SharableObjectIdentifierKeyedEncodingContainer.deinit()
{
  _SharableObjectIdentifierKeyedEncodingContainer.finalize()();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t _SharableObjectIdentifierKeyedEncodingContainer.__deallocating_deinit()
{
  _SharableObjectIdentifierKeyedEncodingContainer.deinit();
  return swift_deallocClassInstance();
}

uint64_t _SharableObjectIdentifierKeyedEncodingContainer.finalize()()
{
  uint64_t v2 = (void *)(v0 + 32);
  swift_beginAccess();
  uint64_t v3 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain_n();
  uint64_t v4 = specialized _copyCollectionToContiguousArray<A>(_:)(v3);
  swift_bridgeObjectRelease();
  uint64_t v11 = v4;
  specialized MutableCollection<>.sort(by:)(&v11);
  if (v1)
  {
    uint64_t result = swift_release();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v5 = v11;
    uint64_t v6 = v11[2];
    if (v6)
    {
      swift_retain();
      uint64_t v7 = v5 + 7;
      do
      {
        uint64_t v8 = (void (*)(uint64_t))*(v7 - 1);
        swift_retain_n();
        uint64_t v9 = swift_bridgeObjectRetain();
        v8(v9);
        swift_bridgeObjectRelease();
        swift_release_n();
        v7 += 4;
        --v6;
      }
      while (v6);
      swift_release();
    }
    swift_release();
    *uint64_t v2 = MEMORY[0x1E4FBC868];
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  *(unsigned char *)(v8 + 24) = a1;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = partial apply for closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:);
  *(void *)(v9 + 24) = v8;
  swift_beginAccess();
  swift_retain_n();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = *(void *)(v2 + 32);
  *(void *)(v2 + 32) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply, v9, v4, v6, isUniquelyReferenced_nonNull_native);
  *(void *)(v2 + 32) = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_release();
}

uint64_t _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v2 + 16);
  uint64_t v10 = (void *)swift_allocObject();
  void v10[2] = v9;
  v10[3] = a1;
  v10[4] = a2;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = partial apply for closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:);
  *(void *)(v11 + 24) = v10;
  swift_beginAccess();
  swift_retain_n();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v14 = *(void *)(v3 + 32);
  *(void *)(v3 + 32) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply, v11, v6, v8, isUniquelyReferenced_nonNull_native);
  *(void *)(v3 + 32) = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_release();
}

{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2, (uint64_t)&unk_1F09B26B8, (uint64_t)&unk_1F09B26E0, (uint64_t)partial apply for closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2, (uint64_t)&unk_1F09B2578, (uint64_t)&unk_1F09B25A0, (uint64_t)partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2, (uint64_t)&unk_1F09B2528, (uint64_t)&unk_1F09B2550, (uint64_t)partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2, (uint64_t)&unk_1F09B23E8, (uint64_t)&unk_1F09B2410, (uint64_t)partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

uint64_t _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  *(double *)(v8 + 24) = a1;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = partial apply for closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:);
  *(void *)(v9 + 24) = v8;
  swift_beginAccess();
  swift_retain_n();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = *(void *)(v2 + 32);
  *(void *)(v2 + 32) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply, v9, v4, v6, isUniquelyReferenced_nonNull_native);
  *(void *)(v2 + 32) = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_release();
}

uint64_t _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  *(float *)(v8 + 24) = a1;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = partial apply for closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:);
  *(void *)(v9 + 24) = v8;
  swift_beginAccess();
  swift_retain_n();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = *(void *)(v2 + 32);
  *(void *)(v2 + 32) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply, v9, v4, v6, isUniquelyReferenced_nonNull_native);
  *(void *)(v2 + 32) = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_release();
}

uint64_t _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(char a1, uint64_t a2)
{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2, (uint64_t)&unk_1F09B2668, (uint64_t)&unk_1F09B2690, (uint64_t)partial apply for closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2, (uint64_t)&unk_1F09B24D8, (uint64_t)&unk_1F09B2500, (uint64_t)partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

uint64_t _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(__int16 a1, uint64_t a2)
{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2, (uint64_t)&unk_1F09B2618, (uint64_t)&unk_1F09B2640, (uint64_t)partial apply for closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2, (uint64_t)&unk_1F09B2488, (uint64_t)&unk_1F09B24B0, (uint64_t)partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

uint64_t _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(int a1, uint64_t a2)
{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2, (uint64_t)&unk_1F09B25C8, (uint64_t)&unk_1F09B25F0, (uint64_t)partial apply for closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2, (uint64_t)&unk_1F09B2438, (uint64_t)&unk_1F09B2460, (uint64_t)partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

uint64_t closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  swift_beginAccess();
  uint64_t v4 = a2;
  MEMORY[0x1B3EA1CC0](&v4, v5);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x1E4F25170]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  return swift_endAccess();
}

uint64_t _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v6 + 16);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v12;
  *(unsigned char *)(v13 + 24) = a1;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a5;
  *(void *)(v14 + 24) = v13;
  swift_beginAccess();
  swift_retain_n();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v18 = *(void *)(v6 + 32);
  *(void *)(v6 + 32) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a6, v14, v9, v11, isUniquelyReferenced_nonNull_native);
  *(void *)(v6 + 32) = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_release();
}

uint64_t closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(uint64_t a1, char a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  swift_beginAccess();
  char v4 = a2;
  MEMORY[0x1B3EA1CC0](&v4, v5);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x1E4F25170]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  return swift_endAccess();
}

uint64_t _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v6 + 16);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v12;
  *(_WORD *)(v13 + 24) = a1;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a5;
  *(void *)(v14 + 24) = v13;
  swift_beginAccess();
  swift_retain_n();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v18 = *(void *)(v6 + 32);
  *(void *)(v6 + 32) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a6, v14, v9, v11, isUniquelyReferenced_nonNull_native);
  *(void *)(v6 + 32) = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_release();
}

uint64_t closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(uint64_t a1, __int16 a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  swift_beginAccess();
  __int16 v4 = a2;
  MEMORY[0x1B3EA1CC0](&v4, v5);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x1E4F25170]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  return swift_endAccess();
}

uint64_t _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v6 + 16);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v12;
  *(_DWORD *)(v13 + 24) = a1;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a5;
  *(void *)(v14 + 24) = v13;
  swift_beginAccess();
  swift_retain_n();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v18 = *(void *)(v6 + 32);
  *(void *)(v6 + 32) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a6, v14, v9, v11, isUniquelyReferenced_nonNull_native);
  *(void *)(v6 + 32) = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_release();
}

uint64_t closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(uint64_t a1, int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  swift_beginAccess();
  int v4 = a2;
  MEMORY[0x1B3EA1CC0](&v4, v5);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x1E4F25170]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  return swift_endAccess();
}

uint64_t _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v6 + 16);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v12;
  *(void *)(v13 + 24) = a1;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a5;
  *(void *)(v14 + 24) = v13;
  swift_beginAccess();
  swift_retain_n();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v18 = *(void *)(v6 + 32);
  *(void *)(v6 + 32) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a6, v14, v9, v11, isUniquelyReferenced_nonNull_native);
  *(void *)(v6 + 32) = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_release();
}

uint64_t _SharableObjectIdentifierKeyedEncodingContainer.encode<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = a3;
  uint64_t v5 = v4;
  uint64_t v30 = a1;
  uint64_t v31 = a4;
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  Swift::Int v29 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v10 + 80);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x1F4188790](v9);
  Swift::Int v15 = (char *)&v27 - v14;
  uint64_t v28 = *(void *)(v16 + 88);
  uint64_t v17 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v32 = v18;
  uint64_t v33 = v17;
  uint64_t v27 = *(void *)(v5 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, v11);
  uint64_t v19 = v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v30, v34);
  unint64_t v20 = (*(unsigned __int8 *)(v12 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v21 = (v13 + *(unsigned __int8 *)(v7 + 80) + v20) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  char v22 = (char *)swift_allocObject();
  *((void *)v22 + 2) = v11;
  *((void *)v22 + 3) = v19;
  uint64_t v23 = v27;
  uint64_t v24 = v31;
  *((void *)v22 + 4) = v28;
  *((void *)v22 + 5) = v24;
  *((void *)v22 + 6) = v23;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v22[v20], v15, v11);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v22[v21], v29, v34);
  swift_beginAccess();
  swift_retain_n();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v35 = *(void *)(v5 + 32);
  *(void *)(v5 + 32) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)partial apply for closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode<A>(_:forKey:), (uint64_t)v22, v33, v32, isUniquelyReferenced_nonNull_native);
  *(void *)(v5 + 32) = v35;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_release();
}

uint64_t closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v29 = a5;
  v31[6] = a7;
  uint64_t v27 = a6;
  uint64_t v28 = a3;
  uint64_t v9 = *(void *)(a4 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v26 - v13;
  uint64_t v26 = *(void (**)(char *))(v9 + 16);
  v26((char *)&v26 - v13);
  swift_beginAccess();
  Swift::Int v15 = *(void **)(a1 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a1 + 16) = v15;
  if (isUniquelyReferenced_nonNull_native)
  {
    uint64_t v17 = (uint64_t *)(a1 + 16);
  }
  else
  {
    Swift::Int v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
    uint64_t v17 = (uint64_t *)(a1 + 16);
    *(void *)(a1 + 16) = v15;
  }
  unint64_t v19 = v15[2];
  unint64_t v18 = v15[3];
  if (v19 >= v18 >> 1) {
    *uint64_t v17 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v15);
  }
  ((void (*)(char *, char *, uint64_t))v26)(v12, v14, a4);
  unint64_t v20 = v17;
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, (uint64_t)v12, v17, a4, v27);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v14, a4);
  swift_endAccess();
  v31[3] = type metadata accessor for _SharableObjectIdentifierEncoder();
  v31[4] = lazy protocol witness table accessor for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder(&lazy protocol witness table cache variable for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder, (void (*)(uint64_t))type metadata accessor for _SharableObjectIdentifierEncoder);
  v31[0] = a1;
  swift_retain();
  uint64_t v21 = v30;
  dispatch thunk of Encodable.encode(to:)();
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v31);
  if (!v21)
  {
    swift_beginAccess();
    uint64_t v23 = (void *)*v17;
    if (*(void *)(*v17 + 16))
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result)
      {
        uint64_t v24 = v23[2];
        if (v24)
        {
LABEL_9:
          uint64_t v25 = v24 - 1;
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v23[5 * v24 - 1]);
          v23[2] = v25;
          *unint64_t v20 = (uint64_t)v23;
          return swift_endAccess();
        }
LABEL_14:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v23);
    uint64_t v23 = (void *)result;
    uint64_t v24 = *(void *)(result + 16);
    if (v24) {
      goto LABEL_9;
    }
    goto LABEL_14;
  }
  return result;
}

uint64_t _SharableObjectIdentifierKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  uint64_t v34 = a4;
  uint64_t v32 = *v4;
  uint64_t v6 = *(void *)(v32 + 80);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v31 - v11;
  uint64_t v13 = *(void (**)(char *))(v7 + 16);
  uint64_t v33 = v14;
  v13((char *)&v31 - v11);
  Swift::Int v15 = v5 + 3;
  swift_beginAccess();
  uint64_t v16 = (void *)v5[3];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v5[3] = v16;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    *Swift::Int v15 = v16;
  }
  unint64_t v19 = v16[2];
  unint64_t v18 = v16[3];
  if (v19 >= v18 >> 1) {
    *Swift::Int v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v16);
  }
  ((void (*)(char *, char *, uint64_t))v13)(v10, v12, v6);
  uint64_t v20 = *(void *)(v32 + 88);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, (uint64_t)v10, v5 + 3, v6, v20);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  uint64_t v21 = v5[3];
  swift_endAccess();
  type metadata accessor for _SharableObjectIdentifierKeyedEncodingContainer();
  uint64_t v22 = v5[2];
  uint64_t v23 = (void *)swift_allocObject();
  swift_retain();
  swift_bridgeObjectRetain();
  unint64_t v24 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  v23[3] = v21;
  v23[4] = v24;
  v23[2] = v22;
  uint64_t v25 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v27 = v26;
  uint64_t v28 = (void *)swift_allocObject();
  v28[2] = v6;
  v28[3] = v20;
  v28[4] = v23;
  swift_beginAccess();
  swift_retain();
  char v29 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v37 = v5[4];
  v5[4] = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)partial apply for closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:), (uint64_t)v28, v25, v27, v29);
  v5[4] = v37;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  char v38 = v23;
  swift_getWitnessTable();
  KeyedEncodingContainer.init<A>(_:)();
  return $defer #1 <A><A1>() in _SharableObjectIdentifierKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)((uint64_t)v5);
}

uint64_t $defer #1 <A><A1>() in _SharableObjectIdentifierKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 24);
  swift_beginAccess();
  uint64_t v3 = *(void **)(a1 + 24);
  if (!v3[2])
  {
    __break(1u);
LABEL_6:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    uint64_t v3 = (void *)result;
    uint64_t v5 = *(void *)(result + 16);
    if (v5) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_6;
  }
  uint64_t v5 = v3[2];
  if (v5)
  {
LABEL_4:
    uint64_t v6 = v5 - 1;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v3[5 * v5 - 1]);
    v3[2] = v6;
    *uint64_t v2 = v3;
    return swift_endAccess();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t _SharableObjectIdentifierKeyedEncodingContainer.nestedUnkeyedContainer(forKey:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v32 = a2;
  uint64_t v30 = *v2;
  uint64_t v4 = *(void *)(v30 + 80);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v29 - v9;
  uint64_t v11 = *(void (**)(char *))(v5 + 16);
  uint64_t v31 = v12;
  v11((char *)&v29 - v9);
  uint64_t v13 = v3 + 3;
  swift_beginAccess();
  uint64_t v14 = (void *)v3[3];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v3[3] = v14;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
    *uint64_t v13 = v14;
  }
  unint64_t v17 = v14[2];
  unint64_t v16 = v14[3];
  if (v17 >= v16 >> 1) {
    *uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v14);
  }
  ((void (*)(char *, char *, uint64_t))v11)(v8, v10, v4);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, (uint64_t)v8, v3 + 3, v4, *(void *)(v30 + 88));
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  uint64_t v18 = v3[3];
  swift_endAccess();
  uint64_t v19 = v3[2];
  uint64_t v20 = type metadata accessor for _DeferredSharableObjectIdentifierUnkeyedEncodingContainer();
  uint64_t v21 = (void *)swift_allocObject();
  uint64_t v22 = MEMORY[0x1E4FBC860];
  v21[3] = v18;
  v21[4] = v22;
  v21[2] = v19;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v23 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v25 = v24;
  swift_beginAccess();
  swift_retain();
  char v26 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v33 = v3[4];
  v3[4] = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.nestedUnkeyedContainer(), (uint64_t)v21, v23, v25, v26);
  v3[4] = v33;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t v27 = v32;
  v32[3] = v20;
  v27[4] = lazy protocol witness table accessor for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder(&lazy protocol witness table cache variable for type _DeferredSharableObjectIdentifierUnkeyedEncodingContainer and conformance _DeferredSharableObjectIdentifierUnkeyedEncodingContainer, (void (*)(uint64_t))type metadata accessor for _DeferredSharableObjectIdentifierUnkeyedEncodingContainer);
  *uint64_t v27 = v21;
  return $defer #1 <A><A1>() in _SharableObjectIdentifierKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)((uint64_t)v3);
}

uint64_t _SharableObjectIdentifierKeyedEncodingContainer.superEncoder()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  a1[3] = type metadata accessor for _SharableObjectIdentifierEncoder();
  a1[4] = lazy protocol witness table accessor for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder(&lazy protocol witness table cache variable for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder, (void (*)(uint64_t))type metadata accessor for _SharableObjectIdentifierEncoder);
  *a1 = v3;
  return swift_retain();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.codingPath.getter in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(char a1)
{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2)
{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2);
}

{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2);
}

{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2);
}

{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2);
}

{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(double a1)
{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(float a1)
{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(char a1, uint64_t a2)
{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2);
}

{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(__int16 a1, uint64_t a2)
{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2);
}

{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(int a1, uint64_t a2)
{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2);
}

{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(a1, a2);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(a1, a2, a3, a4, a5, MEMORY[0x1E4FBC058]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(a1, a2, a3, a4, a5, MEMORY[0x1E4FBC060]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v11 = type metadata accessor for _SharableObjectIdentifierKeyedEncodingContainer();
  return a6(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode<A>(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _SharableObjectIdentifierKeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeConditional<A>(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>()
{
  return KeyedEncodingContainerProtocol.encodeConditional<A>(_:forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  type metadata accessor for _SharableObjectIdentifierKeyedEncodingContainer();
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(a1, a2, a3, a4, a5, MEMORY[0x1E4FBBFE8]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(a1, a2, a3, a4, a5, MEMORY[0x1E4FBBFF8]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(a1, a2, a3, a4, a5, MEMORY[0x1E4FBC020]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(a1, a2, a3, a4, a5, MEMORY[0x1E4FBC000]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(a1, a2, a3, a4, a5, MEMORY[0x1E4FBC048]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E4FBBFF0]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E4FBC018]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E4FBC040]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E4FBC008]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E4FBC028]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E4FBC010]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E4FBC038]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(a1, a2, a3, a4, a5, a6, MEMORY[0x1E4FBC030]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(a1, a2, a3, a4, a5, a6, MEMORY[0x1E4FBC050]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = type metadata accessor for _SharableObjectIdentifierKeyedEncodingContainer();
  return a5(a1 & 0x1FF, a2, v9, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = type metadata accessor for _SharableObjectIdentifierKeyedEncodingContainer();
  return a5(a1 & 0x1FFFF, a2, v9, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = type metadata accessor for _SharableObjectIdentifierKeyedEncodingContainer();
  return a5(a1 | ((HIDWORD(a1) & 1) << 32), a2, v9, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10 = a2 & 1;
  uint64_t v11 = type metadata accessor for _SharableObjectIdentifierKeyedEncodingContainer();
  return a6(a1, v10, a3, v11, a5);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v12 = a3 & 1;
  uint64_t v13 = type metadata accessor for _SharableObjectIdentifierKeyedEncodingContainer();
  return a7(a1, a2, v12, a4, v13, a6);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.nestedContainer<A>(keyedBy:forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return _SharableObjectIdentifierKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, a3, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return _SharableObjectIdentifierKeyedEncodingContainer.nestedUnkeyedContainer(forKey:)(a1, a2);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.superEncoder() in conformance _SharableObjectIdentifierKeyedEncodingContainer<A>@<X0>(void *a1@<X8>)
{
  return _SharableObjectIdentifierKeyedEncodingContainer.superEncoder()(a1);
}

uint64_t _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(char a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  *(unsigned char *)(v4 + 24) = a1;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:);
  *(void *)(v5 + 24) = v4;
  uint64_t v6 = (void *)(v1 + 32);
  swift_beginAccess();
  uint64_t v7 = *(void **)(v1 + 32);
  swift_retain_n();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v1 + 32) = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    void *v6 = v7;
  }
  unint64_t v10 = v7[2];
  unint64_t v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v7);
    void *v6 = v7;
  }
  _OWORD v7[2] = v10 + 1;
  uint64_t v11 = &v7[2 * v10];
  v11[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  v11[5] = v5;
  swift_endAccess();
  return swift_release();
}

{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1, (uint64_t)&unk_1F09B21B8, (uint64_t)&unk_1F09B21E0, (uint64_t)partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1, (uint64_t)&unk_1F09B2028, (uint64_t)&unk_1F09B2050, (uint64_t)partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

uint64_t _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = v5;
  v6[3] = a1;
  v6[4] = a2;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:);
  *(void *)(v7 + 24) = v6;
  uint64_t v8 = (void *)(v2 + 32);
  swift_beginAccess();
  unint64_t v9 = *(void **)(v2 + 32);
  swift_retain_n();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v2 + 32) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    *uint64_t v8 = v9;
  }
  unint64_t v12 = v9[2];
  unint64_t v11 = v9[3];
  if (v12 >= v11 >> 1)
  {
    unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v9);
    *uint64_t v8 = v9;
  }
  v9[2] = v12 + 1;
  uint64_t v13 = &v9[2 * v12];
  v13[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  v13[5] = v7;
  swift_endAccess();
  return swift_release();
}

uint64_t closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_endAccess();
}

uint64_t _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(double a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  *(double *)(v4 + 24) = a1;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:);
  *(void *)(v5 + 24) = v4;
  uint64_t v6 = (void *)(v1 + 32);
  swift_beginAccess();
  uint64_t v7 = *(void **)(v1 + 32);
  swift_retain_n();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v1 + 32) = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    void *v6 = v7;
  }
  unint64_t v10 = v7[2];
  unint64_t v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v7);
    void *v6 = v7;
  }
  _OWORD v7[2] = v10 + 1;
  unint64_t v11 = &v7[2 * v10];
  v11[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  v11[5] = v5;
  swift_endAccess();
  return swift_release();
}

uint64_t closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(double a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  swift_beginAccess();
  double v3 = a1;
  MEMORY[0x1B3EA1CC0](&v3, v4);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x1E4F25170]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  return swift_endAccess();
}

uint64_t _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(float a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  *(float *)(v4 + 24) = a1;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:);
  *(void *)(v5 + 24) = v4;
  uint64_t v6 = (void *)(v1 + 32);
  swift_beginAccess();
  uint64_t v7 = *(void **)(v1 + 32);
  swift_retain_n();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v1 + 32) = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    void *v6 = v7;
  }
  unint64_t v10 = v7[2];
  unint64_t v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v7);
    void *v6 = v7;
  }
  _OWORD v7[2] = v10 + 1;
  unint64_t v11 = &v7[2 * v10];
  v11[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  v11[5] = v5;
  swift_endAccess();
  return swift_release();
}

uint64_t closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(float a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  swift_beginAccess();
  float v3 = a1;
  MEMORY[0x1B3EA1CC0](&v3, v4);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x1E4F25170]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  return swift_endAccess();
}

uint64_t _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(uint64_t a1)
{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1, (uint64_t)&unk_1F09B2208, (uint64_t)&unk_1F09B2230, (uint64_t)partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1, (uint64_t)&unk_1F09B20C8, (uint64_t)&unk_1F09B20F0, (uint64_t)partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1, (uint64_t)&unk_1F09B2078, (uint64_t)&unk_1F09B20A0, (uint64_t)partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1, (uint64_t)&unk_1F09B1F38, (uint64_t)&unk_1F09B1F60, (uint64_t)partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:), (uint64_t)partial apply for thunk for @escaping @callee_guaranteed () -> ());
}

uint64_t _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(__int16 a1)
{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1, (uint64_t)&unk_1F09B2168, (uint64_t)&unk_1F09B2190, (uint64_t)partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1, (uint64_t)&unk_1F09B1FD8, (uint64_t)&unk_1F09B2000, (uint64_t)partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

uint64_t _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(int a1)
{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1, (uint64_t)&unk_1F09B2118, (uint64_t)&unk_1F09B2140, (uint64_t)partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1, (uint64_t)&unk_1F09B1F88, (uint64_t)&unk_1F09B1FB0, (uint64_t)partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:), (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
}

uint64_t _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(v5 + 16);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v9;
  *(unsigned char *)(v10 + 24) = a1;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a4;
  *(void *)(v11 + 24) = v10;
  unint64_t v12 = (void *)(v5 + 32);
  swift_beginAccess();
  uint64_t v13 = *(void **)(v5 + 32);
  swift_retain_n();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v5 + 32) = v13;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    void *v12 = v13;
  }
  unint64_t v16 = v13[2];
  unint64_t v15 = v13[3];
  if (v16 >= v15 >> 1)
  {
    uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v13);
    void *v12 = v13;
  }
  void v13[2] = v16 + 1;
  unint64_t v17 = &v13[2 * v16];
  v17[4] = a5;
  v17[5] = v11;
  swift_endAccess();
  return swift_release();
}

uint64_t _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(v5 + 16);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v9;
  *(_WORD *)(v10 + 24) = a1;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a4;
  *(void *)(v11 + 24) = v10;
  unint64_t v12 = (void *)(v5 + 32);
  swift_beginAccess();
  uint64_t v13 = *(void **)(v5 + 32);
  swift_retain_n();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v5 + 32) = v13;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    void *v12 = v13;
  }
  unint64_t v16 = v13[2];
  unint64_t v15 = v13[3];
  if (v16 >= v15 >> 1)
  {
    uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v13);
    void *v12 = v13;
  }
  void v13[2] = v16 + 1;
  unint64_t v17 = &v13[2 * v16];
  v17[4] = a5;
  v17[5] = v11;
  swift_endAccess();
  return swift_release();
}

uint64_t _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(v5 + 16);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v9;
  *(_DWORD *)(v10 + 24) = a1;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a4;
  *(void *)(v11 + 24) = v10;
  unint64_t v12 = (void *)(v5 + 32);
  swift_beginAccess();
  uint64_t v13 = *(void **)(v5 + 32);
  swift_retain_n();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v5 + 32) = v13;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    void *v12 = v13;
  }
  unint64_t v16 = v13[2];
  unint64_t v15 = v13[3];
  if (v16 >= v15 >> 1)
  {
    uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v13);
    void *v12 = v13;
  }
  void v13[2] = v16 + 1;
  unint64_t v17 = &v13[2 * v16];
  v17[4] = a5;
  v17[5] = v11;
  swift_endAccess();
  return swift_release();
}

uint64_t _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(v5 + 16);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v9;
  *(void *)(v10 + 24) = a1;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a4;
  *(void *)(v11 + 24) = v10;
  unint64_t v12 = (void *)(v5 + 32);
  swift_beginAccess();
  uint64_t v13 = *(void **)(v5 + 32);
  swift_retain_n();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v5 + 32) = v13;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    void *v12 = v13;
  }
  unint64_t v16 = v13[2];
  unint64_t v15 = v13[3];
  if (v16 >= v15 >> 1)
  {
    uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v13);
    void *v12 = v13;
  }
  void v13[2] = v16 + 1;
  unint64_t v17 = &v13[2 * v16];
  v17[4] = a5;
  v17[5] = v11;
  swift_endAccess();
  return swift_release();
}

uint64_t _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v3 + 16);
  (*(void (**)(char *))(v6 + 16))(v8);
  unint64_t v10 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v11 = (v7 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a2;
  *(void *)(v12 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v12 + v10, v8, a2);
  *(void *)(v12 + v11) = v9;
  uint64_t v13 = (void *)(v3 + 32);
  swift_beginAccess();
  uint64_t v14 = *(void **)(v3 + 32);
  swift_retain_n();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v3 + 32) = v14;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
    *uint64_t v13 = v14;
  }
  unint64_t v17 = v14[2];
  unint64_t v16 = v14[3];
  if (v17 >= v16 >> 1)
  {
    uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v14);
    *uint64_t v13 = v14;
  }
  v14[2] = v17 + 1;
  uint64_t v18 = &v14[2 * v17];
  v18[4] = partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode<A>(_:);
  v18[5] = v12;
  swift_endAccess();
  return swift_release();
}

uint64_t closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode<A>(_:)(uint64_t a1, uint64_t a2)
{
  v4[3] = type metadata accessor for _SharableObjectIdentifierEncoder();
  v4[4] = lazy protocol witness table accessor for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder(&lazy protocol witness table cache variable for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder, (void (*)(uint64_t))type metadata accessor for _SharableObjectIdentifierEncoder);
  v4[0] = a2;
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v4);
}

uint64_t _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)()
{
  type metadata accessor for _SharableObjectIdentifierKeyedEncodingContainer();
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = (void *)swift_allocObject();
  swift_retain();
  swift_bridgeObjectRetain();
  unint64_t v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  v3[3] = v2;
  v3[4] = v4;
  v3[2] = v1;
  uint64_t v5 = v0 + 4;
  swift_beginAccess();
  uint64_t v6 = (void *)v0[4];
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v0[4] = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
    void *v5 = v6;
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1)
  {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v6);
    void *v5 = v6;
  }
  v6[2] = v9 + 1;
  unint64_t v10 = &v6[2 * v9];
  v10[4] = partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.nestedContainer<A>(keyedBy:);
  v10[5] = v3;
  swift_endAccess();
  swift_getWitnessTable();
  return KeyedEncodingContainer.init<A>(_:)();
}

uint64_t _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.nestedUnkeyedContainer()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = type metadata accessor for _DeferredSharableObjectIdentifierUnkeyedEncodingContainer();
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t v7 = MEMORY[0x1E4FBC860];
  v6[3] = v4;
  v6[4] = v7;
  v6[2] = v3;
  unint64_t v8 = v1 + 4;
  swift_beginAccess();
  unint64_t v9 = (void *)v1[4];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v1[4] = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    *unint64_t v8 = v9;
  }
  unint64_t v12 = v9[2];
  unint64_t v11 = v9[3];
  if (v12 >= v11 >> 1)
  {
    unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v9);
    *unint64_t v8 = v9;
  }
  v9[2] = v12 + 1;
  uint64_t v13 = &v9[2 * v12];
  v13[4] = partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.nestedUnkeyedContainer();
  v13[5] = v6;
  swift_endAccess();
  a1[3] = v5;
  uint64_t result = lazy protocol witness table accessor for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder(&lazy protocol witness table cache variable for type _DeferredSharableObjectIdentifierUnkeyedEncodingContainer and conformance _DeferredSharableObjectIdentifierUnkeyedEncodingContainer, (void (*)(uint64_t))type metadata accessor for _DeferredSharableObjectIdentifierUnkeyedEncodingContainer);
  a1[4] = result;
  *a1 = v6;
  return result;
}

uint64_t closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.nestedUnkeyedContainer(forKey:)(uint64_t a1)
{
  uint64_t v3 = (void *)(a1 + 32);
  swift_beginAccess();
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v6 = v4 + 40;
    while (1)
    {
      uint64_t v7 = *(void (**)(uint64_t))(v6 - 8);
      uint64_t v8 = swift_retain();
      v7(v8);
      if (v1) {
        break;
      }
      swift_release();
      v6 += 16;
      if (!--v5)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease_n();
    return swift_release();
  }
  else
  {
LABEL_6:
    void *v3 = MEMORY[0x1E4FBC860];
    return swift_bridgeObjectRelease();
  }
}

uint64_t _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for UnkeyedEncodingContainer.count.getter in conformance _DeferredSharableObjectIdentifierUnkeyedEncodingContainer()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(void *)(*(void *)(v1 + 32) + 16);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _DeferredSharableObjectIdentifierUnkeyedEncodingContainer(char a1)
{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1);
}

{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1);
}

{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _DeferredSharableObjectIdentifierUnkeyedEncodingContainer(uint64_t a1, uint64_t a2)
{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1, a2);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _DeferredSharableObjectIdentifierUnkeyedEncodingContainer(double a1)
{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _DeferredSharableObjectIdentifierUnkeyedEncodingContainer(float a1)
{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _DeferredSharableObjectIdentifierUnkeyedEncodingContainer(uint64_t a1)
{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1);
}

{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1);
}

{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1);
}

{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _DeferredSharableObjectIdentifierUnkeyedEncodingContainer(__int16 a1)
{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1);
}

{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _DeferredSharableObjectIdentifierUnkeyedEncodingContainer(int a1)
{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1);
}

{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode(_:)(a1);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _DeferredSharableObjectIdentifierUnkeyedEncodingContainer()
{
  return UnkeyedEncodingContainer.encode(_:)();
}

{
  return UnkeyedEncodingContainer.encode(_:)();
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode<A>(_:) in conformance _DeferredSharableObjectIdentifierUnkeyedEncodingContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode<A>(_:)(a1, a2, a3);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encodeConditional<A>(_:) in conformance _DeferredSharableObjectIdentifierUnkeyedEncodingContainer()
{
  return UnkeyedEncodingContainer.encodeConditional<A>(_:)();
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode<A>(contentsOf:) in conformance _DeferredSharableObjectIdentifierUnkeyedEncodingContainer()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t protocol witness for UnkeyedEncodingContainer.nestedContainer<A>(keyedBy:) in conformance _DeferredSharableObjectIdentifierUnkeyedEncodingContainer()
{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)();
}

uint64_t protocol witness for UnkeyedEncodingContainer.nestedUnkeyedContainer() in conformance _DeferredSharableObjectIdentifierUnkeyedEncodingContainer@<X0>(void *a1@<X8>)
{
  return _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.nestedUnkeyedContainer()(a1);
}

uint64_t protocol witness for UnkeyedEncodingContainer.superEncoder() in conformance _DeferredSharableObjectIdentifierUnkeyedEncodingContainer@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 16);
  a1[3] = type metadata accessor for _SharableObjectIdentifierEncoder();
  a1[4] = lazy protocol witness table accessor for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder(&lazy protocol witness table cache variable for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder, (void (*)(uint64_t))type metadata accessor for _SharableObjectIdentifierEncoder);
  *a1 = v3;
  return swift_retain();
}

uint64_t _SharableObjectIdentifierUnkeyedEncodingContainer.encode<A>(_:)()
{
  uint64_t v2 = *v0;
  v7[3] = type metadata accessor for _SharableObjectIdentifierEncoder();
  void v7[4] = lazy protocol witness table accessor for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder(&lazy protocol witness table cache variable for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder, (void (*)(uint64_t))type metadata accessor for _SharableObjectIdentifierEncoder);
  v7[0] = v2;
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
  if (!v1)
  {
    uint64_t v4 = v0[2];
    BOOL v5 = __OFADD__(v4, 1);
    uint64_t v6 = v4 + 1;
    if (v5) {
      __break(1u);
    }
    else {
      v0[2] = v6;
    }
  }
  return result;
}

void _SharableObjectIdentifierUnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)()
{
  uint64_t v1 = v0[2];
  BOOL v2 = __OFADD__(v1, 1);
  uint64_t v3 = v1 + 1;
  if (v2)
  {
    __break(1u);
  }
  else
  {
    v0[2] = v3;
    type metadata accessor for _SharableObjectIdentifierKeyedEncodingContainer();
    uint64_t v5 = *v0;
    uint64_t v4 = v0[1];
    uint64_t v6 = (void *)swift_allocObject();
    swift_retain();
    swift_bridgeObjectRetain();
    unint64_t v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    v6[3] = v4;
    v6[4] = v7;
    v6[2] = v5;
    swift_getWitnessTable();
    KeyedEncodingContainer.init<A>(_:)();
  }
}

uint64_t protocol witness for UnkeyedEncodingContainer.codingPath.getter in conformance _SharableObjectIdentifierUnkeyedEncodingContainer()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for UnkeyedEncodingContainer.count.getter in conformance _SharableObjectIdentifierUnkeyedEncodingContainer()
{
  return *(void *)(v0 + 16);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierUnkeyedEncodingContainer(char a1)
{
  uint64_t v2 = v1;
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  swift_beginAccess();
  char v8 = a1;
  MEMORY[0x1B3EA1CC0](&v8, v9);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x1E4F25170]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  uint64_t result = swift_endAccess();
  uint64_t v5 = *(void *)(v2 + 16);
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(1u);
  }
  *(void *)(v2 + 16) = v7;
  return result;
}

{
  return protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierUnkeyedEncodingContainer(a1);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierUnkeyedEncodingContainer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_beginAccess();
  specialized SharableObjectIdentifier.update<A>(_:)(a1, a2);
  uint64_t result = swift_endAccess();
  uint64_t v7 = *(void *)(v3 + 16);
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    *(void *)(v3 + 16) = v9;
  }
  return result;
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierUnkeyedEncodingContainer(double a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  swift_beginAccess();
  double v7 = a1;
  MEMORY[0x1B3EA1CC0](&v7, v8);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x1E4F25170]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  uint64_t result = swift_endAccess();
  uint64_t v4 = *(void *)(v1 + 16);
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  *(void *)(v1 + 16) = v6;
  return result;
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierUnkeyedEncodingContainer(float a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  swift_beginAccess();
  float v7 = a1;
  MEMORY[0x1B3EA1CC0](&v7, v8);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x1E4F25170]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  uint64_t result = swift_endAccess();
  uint64_t v4 = *(void *)(v1 + 16);
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  *(void *)(v1 + 16) = v6;
  return result;
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierUnkeyedEncodingContainer(uint64_t a1)
{
  return protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierUnkeyedEncodingContainer(a1);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  unsigned char v9[24];
  uint64_t v10;

  uint64_t v2 = v1;
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  swift_beginAccess();
  BOOL v8 = a1;
  MEMORY[0x1B3EA1CC0](&v8, v9);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x1E4F25170]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  uint64_t result = swift_endAccess();
  BOOL v5 = *(void *)(v2 + 16);
  uint64_t v6 = __OFADD__(v5, 1);
  float v7 = v5 + 1;
  if (v6) {
    __break(1u);
  }
  *(void *)(v2 + 16) = v7;
  return result;
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierUnkeyedEncodingContainer(__int16 a1)
{
  return protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierUnkeyedEncodingContainer(a1);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  __int16 v8;
  unsigned char v9[24];
  uint64_t v10;

  uint64_t v2 = v1;
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  swift_beginAccess();
  BOOL v8 = a1;
  MEMORY[0x1B3EA1CC0](&v8, v9);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x1E4F25170]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  uint64_t result = swift_endAccess();
  BOOL v5 = *(void *)(v2 + 16);
  uint64_t v6 = __OFADD__(v5, 1);
  float v7 = v5 + 1;
  if (v6) {
    __break(1u);
  }
  *(void *)(v2 + 16) = v7;
  return result;
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierUnkeyedEncodingContainer(int a1)
{
  return protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierUnkeyedEncodingContainer(a1);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  int v8;
  unsigned char v9[24];
  uint64_t v10;

  uint64_t v2 = v1;
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  swift_beginAccess();
  BOOL v8 = a1;
  MEMORY[0x1B3EA1CC0](&v8, v9);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x1E4F25170]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  uint64_t result = swift_endAccess();
  BOOL v5 = *(void *)(v2 + 16);
  uint64_t v6 = __OFADD__(v5, 1);
  float v7 = v5 + 1;
  if (v6) {
    __break(1u);
  }
  *(void *)(v2 + 16) = v7;
  return result;
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode<A>(_:) in conformance _SharableObjectIdentifierUnkeyedEncodingContainer()
{
  return _SharableObjectIdentifierUnkeyedEncodingContainer.encode<A>(_:)();
}

uint64_t protocol witness for UnkeyedEncodingContainer.nestedUnkeyedContainer() in conformance _SharableObjectIdentifierUnkeyedEncodingContainer@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5)
  {
    __break(1u);
  }
  else
  {
    v3[2] = v6;
    uint64_t v7 = *v3;
    uint64_t v8 = v3[1];
    a3[3] = result;
    a3[4] = a2;
    *a3 = v7;
    a3[1] = v8;
    a3[2] = 0;
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t protocol witness for UnkeyedEncodingContainer.superEncoder() in conformance _SharableObjectIdentifierUnkeyedEncodingContainer@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  a1[3] = type metadata accessor for _SharableObjectIdentifierEncoder();
  a1[4] = lazy protocol witness table accessor for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder(&lazy protocol witness table cache variable for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder, (void (*)(uint64_t))type metadata accessor for _SharableObjectIdentifierEncoder);
  *a1 = v3;
  return swift_retain();
}

uint64_t _SharableObjectIdentifierEncoder.encode<A>(_:)()
{
  v2[3] = type metadata accessor for _SharableObjectIdentifierEncoder();
  v2[4] = lazy protocol witness table accessor for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder(&lazy protocol witness table cache variable for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder, (void (*)(uint64_t))type metadata accessor for _SharableObjectIdentifierEncoder);
  v2[0] = v0;
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v2);
}

uint64_t protocol witness for Encoder.codingPath.getter in conformance _SharableObjectIdentifierEncoder()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierEncoder(char a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  swift_beginAccess();
  char v3 = a1;
  MEMORY[0x1B3EA1CC0](&v3, v4);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x1E4F25170]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  return swift_endAccess();
}

{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierEncoder(a1);
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierEncoder(uint64_t a1, uint64_t a2)
{
  return swift_endAccess();
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierEncoder(double a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  swift_beginAccess();
  double v3 = a1;
  MEMORY[0x1B3EA1CC0](&v3, v4);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x1E4F25170]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  return swift_endAccess();
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierEncoder(float a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  swift_beginAccess();
  float v3 = a1;
  MEMORY[0x1B3EA1CC0](&v3, v4);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x1E4F25170]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  return swift_endAccess();
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierEncoder(uint64_t a1)
{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierEncoder(a1);
}

{
  uint64_t v3;
  unsigned char v4[24];
  uint64_t v5;

  uint64_t v5 = *MEMORY[0x1E4F143B8];
  swift_beginAccess();
  float v3 = a1;
  MEMORY[0x1B3EA1CC0](&v3, v4);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x1E4F25170]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  return swift_endAccess();
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierEncoder(__int16 a1)
{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierEncoder(a1);
}

{
  __int16 v3;
  unsigned char v4[24];
  uint64_t v5;

  uint64_t v5 = *MEMORY[0x1E4F143B8];
  swift_beginAccess();
  float v3 = a1;
  MEMORY[0x1B3EA1CC0](&v3, v4);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x1E4F25170]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  return swift_endAccess();
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierEncoder(int a1)
{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierEncoder(a1);
}

{
  int v3;
  unsigned char v4[24];
  uint64_t v5;

  uint64_t v5 = *MEMORY[0x1E4F143B8];
  swift_beginAccess();
  float v3 = a1;
  MEMORY[0x1B3EA1CC0](&v3, v4);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x1E4F25170]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  return swift_endAccess();
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance _SharableObjectIdentifierEncoder()
{
  return SingleValueEncodingContainer.encode(_:)();
}

{
  return SingleValueEncodingContainer.encode(_:)();
}

uint64_t protocol witness for SingleValueEncodingContainer.encode<A>(_:) in conformance _SharableObjectIdentifierEncoder()
{
  return _SharableObjectIdentifierEncoder.encode<A>(_:)();
}

uint64_t outlined init with copy of SharableObjectIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SharableObjectIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B0E49470@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 88))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0E494BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 96);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t type metadata accessor for SharableObjectIdentifierEncoder()
{
  return self;
}

uint64_t method lookup function for SharableObjectIdentifierEncoder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SharableObjectIdentifierEncoder);
}

uint64_t dispatch thunk of SharableObjectIdentifierEncoder.userInfo.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of SharableObjectIdentifierEncoder.userInfo.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of SharableObjectIdentifierEncoder.userInfo.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of SharableObjectIdentifierEncoder.encode<A>(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of SharableObjectIdentifierEncoder.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t ObjC metadata update function for _SharableObjectIdentifierEncoder()
{
  return type metadata accessor for _SharableObjectIdentifierEncoder();
}

uint64_t type metadata completion function for _SharableObjectIdentifierEncoder()
{
  uint64_t result = type metadata accessor for SHA256();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for _SharableObjectIdentifierKeyedEncodingContainer()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for _SharableObjectIdentifierKeyedEncodingContainer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for _DeferredSharableObjectIdentifierUnkeyedEncodingContainer()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type _SharableObjectIdentifierUnkeyedEncodingContainer and conformance _SharableObjectIdentifierUnkeyedEncodingContainer()
{
  unint64_t result = lazy protocol witness table cache variable for type _SharableObjectIdentifierUnkeyedEncodingContainer and conformance _SharableObjectIdentifierUnkeyedEncodingContainer;
  if (!lazy protocol witness table cache variable for type _SharableObjectIdentifierUnkeyedEncodingContainer and conformance _SharableObjectIdentifierUnkeyedEncodingContainer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _SharableObjectIdentifierUnkeyedEncodingContainer and conformance _SharableObjectIdentifierUnkeyedEncodingContainer);
  }
  return result;
}

uint64_t partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.nestedUnkeyedContainer()()
{
  return closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.nestedUnkeyedContainer(forKey:)(v0);
}

uint64_t lazy protocol witness table accessor for type _SharableObjectIdentifierEncoder and conformance _SharableObjectIdentifierEncoder(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)()
{
  return _SharableObjectIdentifierKeyedEncodingContainer.finalize()();
}

uint64_t sub_1B0E49810()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  swift_release();
  return MEMORY[0x1F4186498](v0, v5 + 8, v4);
}

uint64_t partial apply for closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode<A>(_:)()
{
  unint64_t v1 = (*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80);
  return closure #1 in _DeferredSharableObjectIdentifierUnkeyedEncodingContainer.encode<A>(_:)(v0 + v1, *(void *)(v0+ ((*(void *)(*(void *)(*(void *)(v0 + 16) - 8) + 64) + v1 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1B0E49958()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B0E49990()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B0E499C8()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 28, 7);
}

uint64_t sub_1B0E49A04()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 25, 7);
}

Swift::Int specialized MutableCollection<>.sort(by:)(void **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_152;
    }
    if (v3) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_160;
  }
  Swift::Int v108 = result;
  int v105 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x1E4FBC860];
    __dst = (char *)(MEMORY[0x1E4FBC860] + 32);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      unint64_t v11 = (char *)MEMORY[0x1E4FBC860];
LABEL_118:
      uint64_t v96 = v11;
      uint64_t v107 = v8;
      if (v12 >= 2)
      {
        uint64_t v97 = *v105;
        do
        {
          unint64_t v98 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_147;
          }
          if (!v97) {
            goto LABEL_159;
          }
          uint64_t v99 = v96;
          uint64_t v100 = *(void *)&v96[16 * v98 + 32];
          uint64_t v101 = *(void *)&v96[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v97 + 32 * v100), (char *)(v97 + 32 * *(void *)&v96[16 * v12 + 16]), v97 + 32 * v101, __dst);
          if (v1) {
            break;
          }
          if (v101 < v100) {
            goto LABEL_148;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v99 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v99);
          }
          if (v98 >= *((void *)v99 + 2)) {
            goto LABEL_149;
          }
          unint64_t v102 = &v99[16 * v98 + 32];
          *(void *)unint64_t v102 = v100;
          *((void *)v102 + 1) = v101;
          unint64_t v103 = *((void *)v99 + 2);
          if (v12 > v103) {
            goto LABEL_150;
          }
          memmove(&v99[16 * v12 + 16], &v99[16 * v12 + 32], 16 * (v103 - v12));
          uint64_t v96 = v99;
          *((void *)v99 + 2) = v103 - 1;
          unint64_t v12 = v103 - 1;
        }
        while (v103 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(void *)(v107 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v107 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: ()));
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    uint64_t v107 = v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v106 = *a1 + 8;
  uint64_t v104 = *a1 - 32;
  unint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  Swift::Int v109 = v3;
  uint64_t v110 = v10;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 >= v3) {
      goto LABEL_46;
    }
    uint64_t v14 = (uint64_t *)(v10 + 32 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    unint64_t v17 = (void *)(v10 + 32 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_45;
      }
      int v19 = 0;
    }
    else
    {
      int v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_36;
      }
    }
    uint64_t v21 = (void *)(v106 + 32 * v20);
    do
    {
      uint64_t v23 = (void *)(v10 + 32 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if (v19) {
          goto LABEL_37;
        }
      }
      else if ((v19 ^ _stringCompareWithSmolCheck(_:_:expecting:)()))
      {
        goto LABEL_36;
      }
      v21 += 4;
      Swift::Int v22 = v20 + 1;
      Swift::Int v9 = v20;
      Swift::Int v20 = v22;
    }
    while (v22 < v3);
    Swift::Int v20 = v22;
LABEL_36:
    Swift::Int v9 = v20;
    if (v19)
    {
LABEL_37:
      if (v20 < v13) {
        goto LABEL_155;
      }
      if (v13 < v20)
      {
        uint64_t v25 = 32 * v20;
        uint64_t v26 = 32 * v13;
        Swift::Int v27 = v20;
        Swift::Int v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10) {
              goto LABEL_158;
            }
            uint64_t v29 = (_OWORD *)(v10 + v26);
            uint64_t v30 = v10 + v25;
            uint64_t v31 = *(void *)(v10 + v26);
            uint64_t v32 = *(void *)(v10 + v26 + 24);
            long long v33 = *(_OWORD *)(v10 + v26 + 8);
            long long v34 = *(_OWORD *)(v10 + v25 - 16);
            _OWORD *v29 = *(_OWORD *)(v10 + v25 - 32);
            v29[1] = v34;
            *(void *)(v30 - 32) = v31;
            *(_OWORD *)(v30 - 24) = v33;
            *(void *)(v30 - 8) = v32;
          }
          ++v28;
          v25 -= 32;
          v26 += 32;
        }
        while (v28 < v27);
      }
LABEL_45:
      Swift::Int v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_151;
      }
      if (v9 - v13 < v108) {
        break;
      }
    }
LABEL_67:
    if (v9 < v13) {
      goto LABEL_146;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v47 = *((void *)v11 + 2);
    unint64_t v46 = *((void *)v11 + 3);
    unint64_t v12 = v47 + 1;
    if (v47 >= v46 >> 1) {
      unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v46 > 1), v47 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    uint64_t v48 = v11 + 32;
    unint64_t v49 = &v11[16 * v47 + 32];
    *(void *)unint64_t v49 = v13;
    *((void *)v49 + 1) = v9;
    if (v47)
    {
      uint64_t v10 = v110;
      while (1)
      {
        unint64_t v50 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v55 = &v48[16 * v12];
          uint64_t v56 = *((void *)v55 - 8);
          uint64_t v57 = *((void *)v55 - 7);
          BOOL v61 = __OFSUB__(v57, v56);
          uint64_t v58 = v57 - v56;
          if (v61) {
            goto LABEL_135;
          }
          uint64_t v60 = *((void *)v55 - 6);
          uint64_t v59 = *((void *)v55 - 5);
          BOOL v61 = __OFSUB__(v59, v60);
          uint64_t v53 = v59 - v60;
          char v54 = v61;
          if (v61) {
            goto LABEL_136;
          }
          unint64_t v62 = v12 - 2;
          uint64_t v63 = &v48[16 * v12 - 32];
          uint64_t v65 = *(void *)v63;
          uint64_t v64 = *((void *)v63 + 1);
          BOOL v61 = __OFSUB__(v64, v65);
          uint64_t v66 = v64 - v65;
          if (v61) {
            goto LABEL_138;
          }
          BOOL v61 = __OFADD__(v53, v66);
          uint64_t v67 = v53 + v66;
          if (v61) {
            goto LABEL_141;
          }
          if (v67 >= v58)
          {
            unint64_t v85 = &v48[16 * v50];
            uint64_t v87 = *(void *)v85;
            uint64_t v86 = *((void *)v85 + 1);
            BOOL v61 = __OFSUB__(v86, v87);
            uint64_t v88 = v86 - v87;
            if (v61) {
              goto LABEL_145;
            }
            BOOL v78 = v53 < v88;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v79 = *((void *)v11 + 4);
            uint64_t v80 = *((void *)v11 + 5);
            BOOL v61 = __OFSUB__(v80, v79);
            uint64_t v72 = v80 - v79;
            char v73 = v61;
            goto LABEL_99;
          }
          uint64_t v52 = *((void *)v11 + 4);
          uint64_t v51 = *((void *)v11 + 5);
          BOOL v61 = __OFSUB__(v51, v52);
          uint64_t v53 = v51 - v52;
          char v54 = v61;
        }
        if (v54) {
          goto LABEL_137;
        }
        unint64_t v62 = v12 - 2;
        uint64_t v68 = &v48[16 * v12 - 32];
        uint64_t v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        BOOL v71 = __OFSUB__(v69, v70);
        uint64_t v72 = v69 - v70;
        char v73 = v71;
        if (v71) {
          goto LABEL_140;
        }
        uint64_t v74 = &v48[16 * v50];
        uint64_t v76 = *(void *)v74;
        uint64_t v75 = *((void *)v74 + 1);
        BOOL v61 = __OFSUB__(v75, v76);
        uint64_t v77 = v75 - v76;
        if (v61) {
          goto LABEL_143;
        }
        if (__OFADD__(v72, v77)) {
          goto LABEL_144;
        }
        if (v72 + v77 >= v53)
        {
          BOOL v78 = v53 < v77;
LABEL_105:
          if (v78) {
            unint64_t v50 = v62;
          }
          goto LABEL_107;
        }
LABEL_99:
        if (v73) {
          goto LABEL_139;
        }
        unsigned __int8 v81 = &v48[16 * v50];
        uint64_t v83 = *(void *)v81;
        uint64_t v82 = *((void *)v81 + 1);
        BOOL v61 = __OFSUB__(v82, v83);
        uint64_t v84 = v82 - v83;
        if (v61) {
          goto LABEL_142;
        }
        if (v84 < v72) {
          goto LABEL_15;
        }
LABEL_107:
        unint64_t v89 = v50 - 1;
        if (v50 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        if (!v10) {
          goto LABEL_157;
        }
        uint64_t v90 = v10;
        uint64_t v91 = &v48[16 * v89];
        uint64_t v92 = *(void *)v91;
        uint64_t v93 = &v48[16 * v50];
        uint64_t v94 = *((void *)v93 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v90 + 32 * *(void *)v91), (char *)(v90 + 32 * *(void *)v93), v90 + 32 * v94, __dst);
        if (v1) {
          goto LABEL_115;
        }
        if (v94 < v92) {
          goto LABEL_132;
        }
        if (v50 > *((void *)v11 + 2)) {
          goto LABEL_133;
        }
        *(void *)uint64_t v91 = v92;
        *(void *)&v48[16 * v89 + 8] = v94;
        unint64_t v95 = *((void *)v11 + 2);
        if (v50 >= v95) {
          goto LABEL_134;
        }
        unint64_t v12 = v95 - 1;
        memmove(&v48[16 * v50], v93 + 16, 16 * (v95 - 1 - v50));
        *((void *)v11 + 2) = v95 - 1;
        BOOL v78 = v95 > 2;
        uint64_t v10 = v110;
        if (!v78) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
    uint64_t v10 = v110;
LABEL_15:
    Swift::Int v3 = v109;
    if (v9 >= v109)
    {
      uint64_t v8 = v107;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v108)) {
    goto LABEL_153;
  }
  if (v13 + v108 >= v3) {
    Swift::Int v35 = v3;
  }
  else {
    Swift::Int v35 = v13 + v108;
  }
  if (v35 >= v13)
  {
    if (v9 != v35)
    {
      uint64_t v36 = v104 + 32 * v9;
      do
      {
        uint64_t v37 = (uint64_t *)(v10 + 32 * v9);
        uint64_t v38 = *v37;
        uint64_t v39 = v37[1];
        Swift::Int v40 = v13;
        uint64_t v41 = v36;
        do
        {
          BOOL v42 = v38 == *(void *)v41 && v39 == *(void *)(v41 + 8);
          if (v42 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            break;
          }
          if (!v10) {
            goto LABEL_156;
          }
          uint64_t v38 = *(void *)(v41 + 32);
          uint64_t v43 = *(void *)(v41 + 56);
          long long v44 = *(_OWORD *)(v41 + 40);
          long long v45 = *(_OWORD *)(v41 + 16);
          *(_OWORD *)(v41 + 32) = *(_OWORD *)v41;
          *(_OWORD *)(v41 + 48) = v45;
          *(void *)uint64_t v41 = v38;
          *(_OWORD *)(v41 + 8) = v44;
          *(void *)(v41 + 24) = v43;
          uint64_t v39 = v44;
          v41 -= 32;
          ++v40;
        }
        while (v9 != v40);
        ++v9;
        v36 += 32;
      }
      while (v9 != v35);
      Swift::Int v9 = v35;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 32 * a3 - 32;
LABEL_5:
    Swift::Int v9 = (uint64_t *)(v7 + 32 * v4);
    Swift::Int result = *v9;
    uint64_t v10 = v9[1];
    uint64_t v11 = v6;
    uint64_t v12 = v8;
    while (1)
    {
      BOOL v13 = result == *(void *)v12 && v10 == *(void *)(v12 + 8);
      if (v13 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 32;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      Swift::Int result = *(void *)(v12 + 32);
      uint64_t v14 = *(void *)(v12 + 56);
      long long v15 = *(_OWORD *)(v12 + 40);
      long long v16 = *(_OWORD *)(v12 + 16);
      *(_OWORD *)(v12 + 32) = *(_OWORD *)v12;
      *(_OWORD *)(v12 + 48) = v16;
      *(void *)uint64_t v12 = result;
      *(_OWORD *)(v12 + 8) = v15;
      *(void *)(v12 + 24) = v14;
      uint64_t v10 = v15;
      v12 -= 32;
      if (v4 == ++v11) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    Swift::Int result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    Swift::Int result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  uint64_t vars8;

  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 31;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -32)
  {
    Swift::Int result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    Swift::Int result = (char *)*a1;
    uint64_t v7 = v5 >> 5;
    if (result != v3 || result >= &v3[32 * v7])
    {
      return (char *)memmove(result, v3, 32 * v7);
    }
  }
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  BOOL v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  BOOL v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  BOOL v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IDSGroupSessionProvider.CurrentSessionInfo>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  BOOL v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PubSubTopic.Message>);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UInt64, UInt64)>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  BOOL v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<TopicInfo>);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>>, &demangling cache variable for type metadata for any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<any PresentDevice<Self.PresentDevice.Context == ActivityListPresenceContext>>, &demangling cache variable for type metadata for any PresentDevice<Self.PresentDevice.Context == ActivityListPresenceContext>);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: String, value: ())>);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    void v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  BOOL v13 = (unint64_t)(v10 + 4);
  uint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8) {
      memmove(v10 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: ()));
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  size_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    BOOL v13 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UInt64, UUID)>);
  uint64_t v10 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt64, UUID))
                  - 8);
  int64_t v11 = *(void *)(v10 + 72);
  uint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  BOOL v13 = (void *)swift_allocObject();
  uint64_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_34;
  }
  void v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  long long v16 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt64, UUID))
                  - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = (char *)v13 + v17;
  int v19 = (char *)a4 + v17;
  if (a1)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  Swift::Int v20 = *(void *)(v16 + 72) * v8;
  uint64_t v21 = &v18[v20];
  Swift::Int v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<AttachmentLedger_EncryptionID>, type metadata accessor for AttachmentLedger_EncryptionID);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PresentDevice>, &demangling cache variable for type metadata for PresentDevice);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>, MEMORY[0x1E4F27990]);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_34;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PubSubTopic.ReceivedRecord>);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 + 31;
    }
    void v10[2] = v8;
    v10[3] = 2 * (v12 >> 6);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  BOOL v13 = v10 + 4;
  uint64_t v14 = a4 + 4;
  if (a1)
  {
    if (v10 < a4 || v13 >= &v14[8 * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_34:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Data)>);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    void v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  BOOL v13 = (unint64_t)(v10 + 4);
  uint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8) {
      memmove(v10 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Data));
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CP_KeyValue>, type metadata accessor for CP_KeyValue);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CP_EncryptionID>, type metadata accessor for CP_EncryptionID);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CP_SequenceNumber>, type metadata accessor for CP_SequenceNumber);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    BOOL v13 = (void *)swift_allocObject();
    size_t v14 = _swift_stdlib_malloc_size(v13);
    void v13[2] = v11;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
  }
  else
  {
    BOOL v13 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v15 = (unint64_t)(v13 + 4);
  unint64_t v16 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v15 >= v16 + 40 * v11) {
      memmove(v13 + 4, a4 + 4, 40 * v11);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v16 >= v15 + 40 * v11 || v15 >= v16 + 40 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    unint64_t v16 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  void v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  Swift::Int v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  uint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v11 = (char *)swift_allocObject();
    size_t v12 = _swift_stdlib_malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    uint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  size_t v15 = 40 * v9;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(boxed_opaque_existential_1, a2, a4);
  uint64_t v10 = *a3;
  *(void *)(v10 + 16) = a1 + 1;
  return outlined init with take of BackgroundSessionManagerDataSource(&v12, v10 + 40 * a1 + 32);
}

uint64_t sub_1B0E4BCDC()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return _SharableObjectIdentifierKeyedEncodingContainer.finalize()();
}

uint64_t sub_1B0E4BD38()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v1 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 56) & ~v4;
  uint64_t v6 = *(void *)(v2 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v5 + *(void *)(v3 + 64) + v7) & ~v7;
  uint64_t v9 = v8 + *(void *)(v6 + 64);
  uint64_t v10 = v4 | v7 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v5, v1);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v8, v2);
  return MEMORY[0x1F4186498](v0, v9, v10);
}

uint64_t partial apply for closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode<A>(_:forKey:)()
{
  unint64_t v1 = (*(unsigned __int8 *)(*(void *)(v0[2] - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v0[2] - 8) + 80);
  return closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode<A>(_:forKey:)(v0[6], (uint64_t)v0 + v1, (uint64_t)v0+ ((v1 + *(void *)(*(void *)(v0[2] - 8) + 64) + *(unsigned __int8 *)(*(void *)(v0[3] - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v0[3] - 8) + 80)), v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_1B0E4BF2C()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 26, 7);
}

uint64_t partial apply for closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)()
{
  return closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(*(void *)(v0 + 16), *(_DWORD *)(v0 + 24));
}

{
  uint64_t v0;

  return closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(*(void *)(v0 + 16), *(_WORD *)(v0 + 24));
}

{
  uint64_t v0;

  return closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

{
  uint64_t v0;

  return closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

{
  uint64_t v0;

  return closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(*(float *)(v0 + 24));
}

{
  uint64_t v0;

  return closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(*(double *)(v0 + 24));
}

{
  uint64_t *v0;

  return closure #1 in _SharableObjectIdentifierKeyedEncodingContainer.encode(_:forKey:)(v0[2], v0[3], v0[4]);
}

uint64_t objectdestroy_122Tm()
{
  swift_release();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t outlined destroy of SharableObjectIdentifier(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SharableObjectIdentifier();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for _SharableObjectIdentifierUnkeyedEncodingContainer()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for _SharableObjectIdentifierUnkeyedEncodingContainer(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for _SharableObjectIdentifierUnkeyedEncodingContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for _SharableObjectIdentifierUnkeyedEncodingContainer(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for _SharableObjectIdentifierUnkeyedEncodingContainer(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _SharableObjectIdentifierUnkeyedEncodingContainer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for _SharableObjectIdentifierUnkeyedEncodingContainer()
{
  return &unk_1F09AEB70;
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()partial apply()
{
  return partial apply for thunk for @escaping @callee_guaranteed () -> ()();
}

unint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (a1)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v13;
  }
  else
  {
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v8 & 1) == 0) {
      return result;
    }
    unint64_t v9 = result;
    int v10 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v2;
    uint64_t v14 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    if (!v10)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v14;
    }
    long long v12 = *(void **)(*(void *)(v11 + 56) + 8 * v9);
    specialized _NativeDictionary._delete(at:)(v9, v11);
    uint64_t *v3 = v11;
  }
  return swift_bridgeObjectRelease();
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of UUID?(a1, (uint64_t *)&demangling cache variable for type metadata for Any?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, v9);
    swift_bridgeObjectRelease();
    return outlined destroy of UUID?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
}

{
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unsigned char v9[40];

  if (*(void *)(a1 + 24))
  {
    outlined init with take of BackgroundSessionManagerDataSource((long long *)a1, (uint64_t)v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v9, a2, a3, isUniquelyReferenced_nonNull_native, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(uint64_t, uint64_t))outlined init with take of BackgroundSessionManagerDataSource, (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
    uint64_t *v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of UUID?(a1, (uint64_t *)&demangling cache variable for type metadata for ProcessAssertion?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, (uint64_t)v9);
    swift_bridgeObjectRelease();
    return outlined destroy of UUID?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for ProcessAssertion?);
  }
}

{
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unsigned char v9[40];

  if (*(void *)(a1 + 24))
  {
    outlined init with take of BackgroundSessionManagerDataSource((long long *)a1, (uint64_t)v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v9, a2, a3, isUniquelyReferenced_nonNull_native, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(uint64_t, uint64_t))outlined init with take of BackgroundSessionManagerDataSource, (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
    uint64_t *v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of UUID?(a1, &demangling cache variable for type metadata for BackgroundSessionManagerDataSource?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, (uint64_t)v9);
    swift_bridgeObjectRelease();
    return outlined destroy of UUID?((uint64_t)v9, &demangling cache variable for type metadata for BackgroundSessionManagerDataSource?);
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWEndpoint?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for NWEndpoint();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  long long v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    outlined destroy of UUID?(a1, &demangling cache variable for type metadata for NWEndpoint?);
    unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v14)
    {
      unint64_t v15 = v13;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v17 = *v3;
      uint64_t v21 = *v3;
      uint64_t *v3 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v17 = v21;
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 32))(v8, *(void *)(v17 + 56) + *(void *)(v10 + 72) * v15, v9);
      specialized _NativeDictionary._delete(at:)(v15, v17);
      uint64_t *v3 = v17;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    }
    return outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for NWEndpoint?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    char v18 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v12, a2, v18, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), MEMORY[0x1E4F38980], (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
    uint64_t *v3 = v21;
    return swift_bridgeObjectRelease();
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;

  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  long long v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    outlined destroy of UUID?(a1, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
    unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v14)
    {
      unint64_t v15 = v13;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v17 = *v3;
      uint64_t v21 = *v3;
      uint64_t *v3 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v17 = v21;
      }
      outlined init with take of AttachmentLedger_AttachmentEncryption(*(void *)(v17 + 56) + *(void *)(v10 + 72) * v15, (uint64_t)v8);
      specialized _NativeDictionary._delete(at:)(v15, v17);
      uint64_t *v3 = v17;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    }
    return outlined destroy of UUID?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  }
  else
  {
    outlined init with take of AttachmentLedger_AttachmentEncryption(a1, (uint64_t)v12);
    char v18 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v12, a2, v18);
    uint64_t *v3 = v21;
    return swift_bridgeObjectRelease();
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;

  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  long long v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    outlined destroy of UUID?(a1, &demangling cache variable for type metadata for UUID?);
    unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v14)
    {
      unint64_t v15 = v13;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v17 = *v3;
      uint64_t v21 = *v3;
      uint64_t *v3 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v17 = v21;
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 32))(v8, *(void *)(v17 + 56) + *(void *)(v10 + 72) * v15, v9);
      specialized _NativeDictionary._delete(at:)(v15, v17);
      uint64_t *v3 = v17;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    }
    return outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for UUID?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    char v18 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v12, a2, v18, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), MEMORY[0x1E4F27990], (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
    uint64_t *v3 = v21;
    return swift_bridgeObjectRelease();
  }
}

void RTCReporter.reportAttachmentEvent(report:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  swift_beginAccess();
  uint64_t v4 = (void *)MEMORY[0x1B3EA3B30](v1 + 24);
  if (!v4
    || (uint64_t v5 = v4,
        uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8],
        uint64_t v7 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x2D0))(),
        v5,
        id v8 = objc_msgSend(v7, sel_bundleIdentifier),
        v7,
        !v8))
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Log.default);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v29, v30)) {
      goto LABEL_27;
    }
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v31 = 0;
    _os_log_impl(&dword_1B0DF7000, v29, v30, "RTC Reporting: reportAttachmentEvent failed - no bundleID found", v31, 2u);
    uint64_t v32 = v31;
LABEL_26:
    MEMORY[0x1B3EA39E0](v32, -1, -1);
LABEL_27:

    return;
  }
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  long long v12 = *(uint64_t (**)(void))((*v6 & *a1) + 0x1D8);
  uint64_t v13 = v12();
  if ((v14 & 1) == 0 && v13 == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_allocObject();
    *(_OWORD *)(inited + 16) = xmmword_1B113A070;
    strcpy((char *)(inited + 32), "app_bundle_id");
    *(_WORD *)(inited + 46) = -4864;
    uint64_t v16 = MEMORY[0x1E4FBB1A0];
    *(void *)(inited + 48) = v9;
    *(void *)(inited + 56) = v11;
    *(void *)(inited + 72) = v16;
    *(void *)(inited + 80) = 0x616F6C70755F7369;
    *(void *)(inited + 88) = 0xE900000000000064;
    char v17 = (*(uint64_t (**)(void))((*v6 & *a1) + 0xB8))();
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bool?);
    *(unsigned char *)(inited + 96) = v17;
    *(void *)(inited + 120) = v18;
    *(void *)(inited + 128) = 0xD000000000000010;
    *(void *)(inited + 136) = 0x80000001B115C750;
    uint64_t v19 = (*(uint64_t (**)(void))((*v6 & *a1) + 0xD0))();
    char v21 = v20;
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
    *(void *)(inited + 144) = v19;
    *(unsigned char *)(inited + 152) = v21 & 1;
    *(void *)(inited + 168) = v22;
    *(void *)(inited + 176) = 0xD000000000000011;
    *(void *)(inited + 184) = 0x80000001B115C770;
    *(unsigned char *)(inited + 192) = (*(uint64_t (**)(void))((*v6 & *a1) + 0xE8))();
    *(void *)(inited + 216) = v18;
    *(void *)(inited + 224) = 0xD000000000000012;
    *(void *)(inited + 232) = 0x80000001B115C790;
    uint64_t v23 = (*(uint64_t (**)(void))((*v6 & *a1) + 0x130))();
    LOBYTE(v18) = v24;
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double?);
    *(void *)(inited + 240) = v23;
    *(unsigned char *)(inited + 248) = v18 & 1;
    *(void *)(inited + 264) = v25;
    *(void *)(inited + 272) = 0x6D69745F64616F6CLL;
    *(void *)(inited + 280) = 0xE900000000000065;
    uint64_t v26 = (*(uint64_t (**)(void))((*v6 & *a1) + 0x148))();
    *(void *)(inited + 312) = v25;
LABEL_16:
    *(void *)(inited + 288) = v26;
    *(unsigned char *)(inited + 296) = v27 & 1;
    goto LABEL_17;
  }
  uint64_t v33 = ((uint64_t (*)(uint64_t))v12)(v13);
  if ((v34 & 1) == 0 && v33 == 2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1B113A080;
    strcpy((char *)(inited + 32), "app_bundle_id");
    *(_WORD *)(inited + 46) = -4864;
    uint64_t v35 = MEMORY[0x1E4FBB1A0];
    *(void *)(inited + 48) = v9;
    *(void *)(inited + 56) = v11;
    *(void *)(inited + 72) = v35;
    strcpy((char *)(inited + 80), "is_subscribe");
    *(unsigned char *)(inited + 93) = 0;
    *(_WORD *)(inited + 94) = -5120;
    char v36 = (*(uint64_t (**)(void))((*v6 & *a1) + 0x100))();
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bool?);
    *(unsigned char *)(inited + 96) = v36;
    *(void *)(inited + 120) = v37;
    strcpy((char *)(inited + 128), "response_time");
    *(_WORD *)(inited + 142) = -4864;
    uint64_t v38 = (*(uint64_t (**)(void))((*v6 & *a1) + 0x118))();
    char v40 = v39;
    *(void *)(inited + 168) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double?);
    *(void *)(inited + 144) = v38;
    *(unsigned char *)(inited + 152) = v40 & 1;
LABEL_17:
    unint64_t v54 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    swift_beginAccess();
    *(void *)(v2 + 48) = v54;
    goto LABEL_18;
  }
  uint64_t v41 = ((uint64_t (*)(uint64_t))v12)(v33);
  if ((v42 & 1) == 0 && v41 == 3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1B113A070;
    strcpy((char *)(inited + 32), "app_bundle_id");
    *(_WORD *)(inited + 46) = -4864;
    uint64_t v43 = MEMORY[0x1E4FBB1A0];
    *(void *)(inited + 48) = v9;
    *(void *)(inited + 56) = v11;
    *(void *)(inited + 72) = v43;
    *(void *)(inited + 80) = 0xD000000000000011;
    *(void *)(inited + 88) = 0x80000001B115C6F0;
    uint64_t v44 = (*(uint64_t (**)(void))((*v6 & *a1) + 0x160))();
    char v46 = v45;
    uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
    *(void *)(inited + 96) = v44;
    *(unsigned char *)(inited + 104) = v46 & 1;
    *(void *)(inited + 120) = v47;
    *(void *)(inited + 128) = 0xD000000000000016;
    *(void *)(inited + 136) = 0x80000001B115C710;
    uint64_t v48 = (*(uint64_t (**)(void))((*v6 & *a1) + 0x178))();
    char v50 = v49;
    uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double?);
    *(void *)(inited + 144) = v48;
    *(unsigned char *)(inited + 152) = v50 & 1;
    *(void *)(inited + 168) = v51;
    *(void *)(inited + 176) = 0xD000000000000014;
    *(void *)(inited + 184) = 0x80000001B115C730;
    *(void *)(inited + 192) = (*(uint64_t (**)(void))((*v6 & *a1) + 0x190))();
    *(unsigned char *)(inited + 200) = v52 & 1;
    *(void *)(inited + 216) = v51;
    strcpy((char *)(inited + 224), "download_speed");
    *(unsigned char *)(inited + 239) = -18;
    *(void *)(inited + 240) = (*(uint64_t (**)(void))((*v6 & *a1) + 0x1A8))();
    *(unsigned char *)(inited + 248) = v53 & 1;
    *(void *)(inited + 264) = v51;
    strcpy((char *)(inited + 272), "upload_speed");
    *(unsigned char *)(inited + 285) = 0;
    *(_WORD *)(inited + 286) = -5120;
    uint64_t v26 = (*(uint64_t (**)(void))((*v6 & *a1) + 0x1C0))();
    *(void *)(inited + 312) = v51;
    goto LABEL_16;
  }
LABEL_18:
  swift_bridgeObjectRelease();
  if (!*MEMORY[0x1E4F94628])
  {
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v57 = v56;
  uint64_t v58 = MEMORY[0x1E4FBB550];
  uint64_t v97 = MEMORY[0x1E4FBB550];
  v96[0] = 0;
  outlined init with take of Any(v96, v95);
  uint64_t v59 = MEMORY[0x1E4FBC868];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v95, v55, v57, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*MEMORY[0x1E4F94640])
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v63 = v62;
  uint64_t v97 = v58;
  v96[0] = 0;
  outlined init with take of Any(v96, v95);
  char v64 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v95, v61, v63, v64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*MEMORY[0x1E4F94638])
  {
LABEL_36:
    __break(1u);
    return;
  }
  uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v67 = v66;
  swift_beginAccess();
  uint64_t v68 = *(void *)(v2 + 48);
  uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : Any]);
  v96[0] = v68;
  outlined init with take of Any(v96, v95);
  swift_bridgeObjectRetain();
  char v69 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v95, v65, v67, v69);
  uint64_t v70 = v59;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v71 = *(id *)(v2 + 16);
  uint64_t v72 = swift_bridgeObjectRetain();
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v72);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v96[0] = 0;
  unsigned int v74 = objc_msgSend(v71, sel_sendMessageWithDictionary_error_, isa, v96);

  if (v74)
  {
    uint64_t v75 = one-time initialization token for default;
    id v76 = (id)v96[0];
    if (v75 != -1) {
      swift_once();
    }
    uint64_t v77 = type metadata accessor for Logger();
    __swift_project_value_buffer(v77, (uint64_t)static Log.default);
    swift_bridgeObjectRetain();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v78 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v78))
    {
      uint64_t v79 = (uint8_t *)swift_slowAlloc();
      uint64_t v80 = swift_slowAlloc();
      v96[0] = v80;
      *(_DWORD *)uint64_t v79 = 136315138;
      *(void *)&v95[0] = v70;
      swift_bridgeObjectRetain();
      uint64_t v81 = String.init<A>(reflecting:)();
      *(void *)&v95[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v29, v78, "Sent attachment data to RTC reporting %s", v79, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v80, -1, -1);
      uint64_t v32 = v79;
      goto LABEL_26;
    }

    swift_bridgeObjectRelease_n();
  }
  else
  {
    id v83 = (id)v96[0];
    swift_bridgeObjectRelease();
    uint64_t v84 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v85 = type metadata accessor for Logger();
    __swift_project_value_buffer(v85, (uint64_t)static Log.default);
    id v86 = v84;
    id v87 = v84;
    uint64_t v88 = Logger.logObject.getter();
    os_log_type_t v89 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v88, v89))
    {
      uint64_t v90 = (uint8_t *)swift_slowAlloc();
      uint64_t v91 = swift_slowAlloc();
      v96[0] = v91;
      *(_DWORD *)uint64_t v90 = 136315138;
      *(void *)&v95[0] = v84;
      id v92 = v84;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v93 = String.init<A>(reflecting:)();
      *(void *)&v95[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v94, v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B0DF7000, v88, v89, "Could not report attachment event: %s", v90, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v91, -1, -1);
      MEMORY[0x1B3EA39E0](v90, -1, -1);
    }
    else
    {
    }
  }
}

void *RTCReporter.__allocating_init(session:)(void *a1)
{
  return RTCReporter.init(session:)(a1);
}

uint64_t RTCReporterCategory.rawValue.getter()
{
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RTCReporterCategory()
{
  return 1;
}

void protocol witness for Hashable.hash(into:) in conformance RTCReporterCategory()
{
}

BOOL RTCReporterType.init(rawValue:)(uint64_t a1)
{
  return a1 != 0;
}

uint64_t RTCReporterType.rawValue.getter()
{
  return 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RTCReporterCategory()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RTCReporterCategory()
{
  return Hasher._finalize()();
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance RTCReporterType@<X0>(void *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 0;
  return result;
}

uint64_t AttachmentDataReport.isUpload.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isUpload);
  swift_beginAccess();
  return *v1;
}

uint64_t AttachmentDataReport.isUpload.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isUpload);
  uint64_t result = swift_beginAccess();
  unsigned char *v3 = a1;
  return result;
}

uint64_t (*AttachmentDataReport.isUpload.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t AttachmentDataReport.assetTotalSize.getter()
{
  return AttachmentDataReport.assetTotalSize.getter(&OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_assetTotalSize);
}

uint64_t AttachmentDataReport.assetTotalSize.setter(uint64_t a1, char a2)
{
  return AttachmentDataReport.assetTotalSize.setter(a1, a2, &OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_assetTotalSize);
}

uint64_t (*AttachmentDataReport.assetTotalSize.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t AttachmentDataReport.isServerBlocked.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isServerBlocked);
  swift_beginAccess();
  return *v1;
}

uint64_t AttachmentDataReport.isServerBlocked.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isServerBlocked);
  uint64_t result = swift_beginAccess();
  unsigned char *v3 = a1;
  return result;
}

uint64_t (*AttachmentDataReport.isServerBlocked.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t AttachmentDataReport.isSubscribe.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isSubscribe);
  swift_beginAccess();
  return *v1;
}

uint64_t AttachmentDataReport.isSubscribe.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isSubscribe);
  uint64_t result = swift_beginAccess();
  unsigned char *v3 = a1;
  return result;
}

uint64_t (*AttachmentDataReport.isSubscribe.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t AttachmentDataReport.responseTime.getter()
{
  return AttachmentDataReport.assetTotalSize.getter(&OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_responseTime);
}

uint64_t AttachmentDataReport.responseTime.setter(uint64_t a1, char a2)
{
  return AttachmentDataReport.assetTotalSize.setter(a1, a2, &OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_responseTime);
}

uint64_t (*AttachmentDataReport.responseTime.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t AttachmentDataReport.endToEndAttachmentLatency.getter()
{
  return AttachmentDataReport.assetTotalSize.getter(&OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_endToEndAttachmentLatency);
}

uint64_t AttachmentDataReport.endToEndAttachmentLatency.setter(uint64_t a1, char a2)
{
  return AttachmentDataReport.assetTotalSize.setter(a1, a2, &OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_endToEndAttachmentLatency);
}

uint64_t (*AttachmentDataReport.endToEndAttachmentLatency.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t AttachmentDataReport.loadTime.getter()
{
  return AttachmentDataReport.assetTotalSize.getter(&OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_loadTime);
}

uint64_t AttachmentDataReport.loadTime.setter(uint64_t a1, char a2)
{
  return AttachmentDataReport.assetTotalSize.setter(a1, a2, &OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_loadTime);
}

uint64_t (*AttachmentDataReport.loadTime.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t AttachmentDataReport.totalAttachments.getter()
{
  return AttachmentDataReport.assetTotalSize.getter(&OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_totalAttachments);
}

uint64_t AttachmentDataReport.totalAttachments.setter(uint64_t a1, char a2)
{
  return AttachmentDataReport.assetTotalSize.setter(a1, a2, &OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_totalAttachments);
}

uint64_t (*AttachmentDataReport.totalAttachments.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t AttachmentDataReport.totalDownloadBytes.getter()
{
  return AttachmentDataReport.assetTotalSize.getter(&OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_totalDownloadBytes);
}

uint64_t AttachmentDataReport.totalDownloadBytes.setter(uint64_t a1, char a2)
{
  return AttachmentDataReport.assetTotalSize.setter(a1, a2, &OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_totalDownloadBytes);
}

uint64_t (*AttachmentDataReport.totalDownloadBytes.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t AttachmentDataReport.totalUploadBytes.getter()
{
  return AttachmentDataReport.assetTotalSize.getter(&OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_totalUploadBytes);
}

uint64_t AttachmentDataReport.totalUploadBytes.setter(uint64_t a1, char a2)
{
  return AttachmentDataReport.assetTotalSize.setter(a1, a2, &OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_totalUploadBytes);
}

uint64_t (*AttachmentDataReport.totalUploadBytes.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t AttachmentDataReport.downloadSpeed.getter()
{
  return AttachmentDataReport.assetTotalSize.getter(&OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_downloadSpeed);
}

uint64_t AttachmentDataReport.downloadSpeed.setter(uint64_t a1, char a2)
{
  return AttachmentDataReport.assetTotalSize.setter(a1, a2, &OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_downloadSpeed);
}

uint64_t (*AttachmentDataReport.downloadSpeed.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t AttachmentDataReport.uploadSpeed.getter()
{
  return AttachmentDataReport.assetTotalSize.getter(&OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_uploadSpeed);
}

uint64_t AttachmentDataReport.uploadSpeed.setter(uint64_t a1, char a2)
{
  return AttachmentDataReport.assetTotalSize.setter(a1, a2, &OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_uploadSpeed);
}

uint64_t (*AttachmentDataReport.uploadSpeed.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t AttachmentDataReport.reportType.getter()
{
  return AttachmentDataReport.assetTotalSize.getter(&OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_reportType);
}

uint64_t AttachmentDataReport.assetTotalSize.getter(void *a1)
{
  uint64_t v2 = v1 + *a1;
  swift_beginAccess();
  return *(void *)v2;
}

uint64_t AttachmentDataReport.reportType.setter(uint64_t a1, char a2)
{
  return AttachmentDataReport.assetTotalSize.setter(a1, a2, &OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_reportType);
}

uint64_t AttachmentDataReport.assetTotalSize.setter(uint64_t a1, char a2, void *a3)
{
  uint64_t v6 = v3 + *a3;
  uint64_t result = swift_beginAccess();
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*AttachmentDataReport.reportType.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t static AttachmentDataReport.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall AttachmentDataReport.encode(with:)(NSCoder with)
{
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  if ((*(unsigned __int8 (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xB8))() == 2) {
    Class isa = 0;
  }
  else {
    Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  }
  uint64_t v5 = (void *)MEMORY[0x1B3EA1B00](0x64616F6C70557369, 0xE800000000000000);
  [(objc_class *)with.super.isa encodeObject:isa forKey:v5];
  swift_unknownObjectRelease();

  (*(void (**)(void))((*v3 & *v1) + 0xD0))();
  if (v6) {
    v7.super.super.Class isa = 0;
  }
  else {
    v7.super.super.Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  }
  id v8 = (void *)MEMORY[0x1B3EA1B00](0x746F547465737361, 0xEE00657A69536C61);
  [(objc_class *)with.super.isa encodeObject:v7.super.super.isa forKey:v8];
  swift_unknownObjectRelease();

  if ((*(unsigned __int8 (**)(void))((*v3 & *v1) + 0xE8))() == 2) {
    Class v9 = 0;
  }
  else {
    Class v9 = Bool._bridgeToObjectiveC()().super.super.isa;
  }
  uint64_t v10 = (void *)MEMORY[0x1B3EA1B00](0x7265767265537369, 0xEF64656B636F6C42);
  [(objc_class *)with.super.isa encodeObject:v9 forKey:v10];
  swift_unknownObjectRelease();

  if ((*(unsigned __int8 (**)(void))((*v3 & *v1) + 0x100))() == 2) {
    Class v11 = 0;
  }
  else {
    Class v11 = Bool._bridgeToObjectiveC()().super.super.isa;
  }
  long long v12 = (void *)MEMORY[0x1B3EA1B00](0x7263736275537369, 0xEB00000000656269);
  [(objc_class *)with.super.isa encodeObject:v11 forKey:v12];
  swift_unknownObjectRelease();

  double v13 = COERCE_DOUBLE((*(uint64_t (**)(void))((*v3 & *v1) + 0x118))());
  if (v14) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = MEMORY[0x1B3EA1FD0](v13);
  }
  uint64_t v16 = (void *)MEMORY[0x1B3EA1B00](0x65736E6F70736572, 0xEC000000656D6954);
  [(objc_class *)with.super.isa encodeObject:v15 forKey:v16];
  swift_unknownObjectRelease();

  double v17 = COERCE_DOUBLE((*(uint64_t (**)(void))((*v3 & *v1) + 0x130))());
  if (v18) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = MEMORY[0x1B3EA1FD0](v17);
  }
  char v20 = (void *)MEMORY[0x1B3EA1B00](0xD000000000000019, 0x80000001B115C7B0);
  [(objc_class *)with.super.isa encodeObject:v19 forKey:v20];
  swift_unknownObjectRelease();

  double v21 = COERCE_DOUBLE((*(uint64_t (**)(void))((*v3 & *v1) + 0x148))());
  if (v22) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = MEMORY[0x1B3EA1FD0](v21);
  }
  char v24 = (void *)MEMORY[0x1B3EA1B00](0x656D695464616F6CLL, 0xE800000000000000);
  [(objc_class *)with.super.isa encodeObject:v23 forKey:v24];
  swift_unknownObjectRelease();

  (*(void (**)(void))((*v3 & *v1) + 0x160))();
  if (v25) {
    v26.super.super.Class isa = 0;
  }
  else {
    v26.super.super.Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  }
  char v27 = (void *)MEMORY[0x1B3EA1B00](0xD000000000000010, 0x80000001B115C7D0);
  [(objc_class *)with.super.isa encodeObject:v26.super.super.isa forKey:v27];
  swift_unknownObjectRelease();

  double v28 = COERCE_DOUBLE((*(uint64_t (**)(void))((*v3 & *v1) + 0x178))());
  if (v29) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = MEMORY[0x1B3EA1FD0](v28);
  }
  uint64_t v31 = (void *)MEMORY[0x1B3EA1B00](0xD000000000000012, 0x80000001B115C7F0);
  [(objc_class *)with.super.isa encodeObject:v30 forKey:v31];
  swift_unknownObjectRelease();

  double v32 = COERCE_DOUBLE((*(uint64_t (**)(void))((*v3 & *v1) + 0x190))());
  if (v33) {
    uint64_t v34 = 0;
  }
  else {
    uint64_t v34 = MEMORY[0x1B3EA1FD0](v32);
  }
  uint64_t v35 = (void *)MEMORY[0x1B3EA1B00](0xD000000000000010, 0x80000001B115C810);
  [(objc_class *)with.super.isa encodeObject:v34 forKey:v35];
  swift_unknownObjectRelease();

  double v36 = COERCE_DOUBLE((*(uint64_t (**)(void))((*v3 & *v1) + 0x1A8))());
  if (v37) {
    uint64_t v38 = 0;
  }
  else {
    uint64_t v38 = MEMORY[0x1B3EA1FD0](v36);
  }
  char v39 = (void *)MEMORY[0x1B3EA1B00](0x64616F6C6E776F64, 0xED00006465657053);
  [(objc_class *)with.super.isa encodeObject:v38 forKey:v39];
  swift_unknownObjectRelease();

  double v40 = COERCE_DOUBLE((*(uint64_t (**)(void))((*v3 & *v1) + 0x1C0))());
  if (v41) {
    uint64_t v42 = 0;
  }
  else {
    uint64_t v42 = MEMORY[0x1B3EA1FD0](v40);
  }
  uint64_t v43 = (void *)MEMORY[0x1B3EA1B00](0x705364616F6C7075, 0xEB00000000646565);
  [(objc_class *)with.super.isa encodeObject:v42 forKey:v43];
  swift_unknownObjectRelease();

  (*(void (**)(void))((*v3 & *v1) + 0x1D8))();
  if (v44) {
    v45.super.super.Class isa = 0;
  }
  else {
    v45.super.super.Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  }
  id v46 = (id)MEMORY[0x1B3EA1B00](0x795474726F706572, 0xEA00000000006570);
  [(objc_class *)with.super.isa encodeObject:v45.super.super.isa forKey:v46];
  swift_unknownObjectRelease();
}

id AttachmentDataReport.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  id v4 = specialized AttachmentDataReport.init(coder:)(a1);

  return v4;
}

id AttachmentDataReport.init(coder:)(void *a1)
{
  id v2 = specialized AttachmentDataReport.init(coder:)(a1);

  return v2;
}

id AttachmentDataReport.__allocating_init(isUpload:assetTotalSize:isServerBlocked:endToEndAttachmentLatency:loadTime:)(char a1, uint64_t a2, char a3, double a4, double a5)
{
  id v11 = objc_allocWithZone(v5);
  return AttachmentDataReport.init(isUpload:assetTotalSize:isServerBlocked:endToEndAttachmentLatency:loadTime:)(a1, a2, a3, a4, a5);
}

id AttachmentDataReport.init(isUpload:assetTotalSize:isServerBlocked:endToEndAttachmentLatency:loadTime:)(char a1, uint64_t a2, char a3, double a4, double a5)
{
  uint64_t v10 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isUpload];
  v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isUpload] = 2;
  id v11 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_assetTotalSize];
  *(void *)id v11 = 0;
  v11[8] = 1;
  long long v12 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isServerBlocked];
  v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isServerBlocked] = 2;
  v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isSubscribe] = 2;
  double v13 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_responseTime];
  *(void *)double v13 = 0;
  v13[8] = 1;
  char v14 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_endToEndAttachmentLatency];
  *(void *)char v14 = 0;
  v14[8] = 1;
  uint64_t v15 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_loadTime];
  *(void *)uint64_t v15 = 0;
  v15[8] = 1;
  uint64_t v16 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_totalAttachments];
  *(void *)uint64_t v16 = 0;
  v16[8] = 1;
  double v17 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_totalDownloadBytes];
  *(void *)double v17 = 0;
  v17[8] = 1;
  char v18 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_totalUploadBytes];
  *(void *)char v18 = 0;
  v18[8] = 1;
  uint64_t v19 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_downloadSpeed];
  *(void *)uint64_t v19 = 0;
  v19[8] = 1;
  char v20 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_uploadSpeed];
  *(void *)char v20 = 0;
  v20[8] = 1;
  double v21 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_reportType];
  *(void *)double v21 = 0;
  v21[8] = 1;
  swift_beginAccess();
  *uint64_t v10 = a1;
  swift_beginAccess();
  *(void *)id v11 = a2;
  v11[8] = 0;
  swift_beginAccess();
  unsigned char *v12 = a3;
  swift_beginAccess();
  *(double *)char v14 = a4;
  v14[8] = 0;
  swift_beginAccess();
  *(double *)uint64_t v15 = a5;
  v15[8] = 0;
  swift_beginAccess();
  *(void *)double v21 = 1;
  v21[8] = 0;
  v24.receiver = v5;
  v24.super_class = (Class)type metadata accessor for AttachmentDataReport();
  return objc_msgSendSuper2(&v24, sel_init);
}

id AttachmentDataReport.__allocating_init(isSubscribe:responseTime:)(char a1, double a2)
{
  id v5 = objc_allocWithZone(v2);
  return AttachmentDataReport.init(isSubscribe:responseTime:)(a1, a2);
}

id AttachmentDataReport.init(isSubscribe:responseTime:)(char a1, double a2)
{
  v2[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isUpload] = 2;
  id v5 = &v2[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_assetTotalSize];
  *(void *)id v5 = 0;
  v5[8] = 1;
  v2[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isServerBlocked] = 2;
  char v6 = &v2[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isSubscribe];
  v2[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isSubscribe] = 2;
  NSNumber v7 = &v2[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_responseTime];
  *(void *)NSNumber v7 = 0;
  unsigned char v7[8] = 1;
  id v8 = &v2[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_endToEndAttachmentLatency];
  *(void *)id v8 = 0;
  v8[8] = 1;
  Class v9 = &v2[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_loadTime];
  *(void *)Class v9 = 0;
  v9[8] = 1;
  uint64_t v10 = &v2[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_totalAttachments];
  *(void *)uint64_t v10 = 0;
  v10[8] = 1;
  id v11 = &v2[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_totalDownloadBytes];
  *(void *)id v11 = 0;
  v11[8] = 1;
  long long v12 = &v2[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_totalUploadBytes];
  *(void *)long long v12 = 0;
  v12[8] = 1;
  double v13 = &v2[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_downloadSpeed];
  *(void *)double v13 = 0;
  v13[8] = 1;
  char v14 = &v2[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_uploadSpeed];
  *(void *)char v14 = 0;
  v14[8] = 1;
  uint64_t v15 = &v2[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_reportType];
  *(void *)uint64_t v15 = 0;
  v15[8] = 1;
  swift_beginAccess();
  unsigned char *v6 = a1;
  swift_beginAccess();
  *(double *)NSNumber v7 = a2;
  unsigned char v7[8] = 0;
  swift_beginAccess();
  *(void *)uint64_t v15 = 2;
  v15[8] = 0;
  v17.receiver = v2;
  v17.super_class = (Class)type metadata accessor for AttachmentDataReport();
  return objc_msgSendSuper2(&v17, sel_init);
}

id AttachmentDataReport.__allocating_init(totalAttachments:totalDownloadBytes:totalUploadBytes:downloadSpeed:uploadSpeed:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  id v11 = objc_allocWithZone(v5);
  return AttachmentDataReport.init(totalAttachments:totalDownloadBytes:totalUploadBytes:downloadSpeed:uploadSpeed:)(a1, a2, a3, a4, a5);
}

id AttachmentDataReport.init(totalAttachments:totalDownloadBytes:totalUploadBytes:downloadSpeed:uploadSpeed:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isUpload] = 2;
  id v11 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_assetTotalSize];
  *(void *)id v11 = 0;
  v11[8] = 1;
  v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isServerBlocked] = 2;
  v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isSubscribe] = 2;
  long long v12 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_responseTime];
  *(void *)long long v12 = 0;
  v12[8] = 1;
  double v13 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_endToEndAttachmentLatency];
  *(void *)double v13 = 0;
  v13[8] = 1;
  char v14 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_loadTime];
  *(void *)char v14 = 0;
  v14[8] = 1;
  uint64_t v15 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_totalAttachments];
  *(void *)uint64_t v15 = 0;
  v15[8] = 1;
  uint64_t v16 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_totalDownloadBytes];
  *(void *)uint64_t v16 = 0;
  v16[8] = 1;
  objc_super v17 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_totalUploadBytes];
  *(void *)objc_super v17 = 0;
  v17[8] = 1;
  char v18 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_downloadSpeed];
  *(void *)char v18 = 0;
  v18[8] = 1;
  uint64_t v19 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_uploadSpeed];
  *(void *)uint64_t v19 = 0;
  v19[8] = 1;
  char v20 = &v5[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_reportType];
  *(void *)char v20 = 0;
  v20[8] = 1;
  swift_beginAccess();
  *(void *)uint64_t v15 = a1;
  v15[8] = 0;
  swift_beginAccess();
  *(double *)uint64_t v16 = a2;
  v16[8] = 0;
  swift_beginAccess();
  *(double *)objc_super v17 = a3;
  v17[8] = 0;
  swift_beginAccess();
  *(double *)char v18 = a4;
  v18[8] = 0;
  swift_beginAccess();
  *(double *)uint64_t v19 = a5;
  v19[8] = 0;
  swift_beginAccess();
  *(void *)char v20 = 3;
  v20[8] = 0;
  v22.receiver = v5;
  v22.super_class = (Class)type metadata accessor for AttachmentDataReport();
  return objc_msgSendSuper2(&v22, sel_init);
}

id AttachmentDataReport.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void AttachmentDataReport.init()()
{
}

id AttachmentDataReport.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AttachmentDataReport();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t RTCReporter.activitySession.getter()
{
  swift_beginAccess();
  return MEMORY[0x1B3EA3B30](v0 + 24);
}

void RTCReporter.activitySession.setter(void *a1)
{
}

void (*RTCReporter.activitySession.modify(void *a1))(id **a1, char a2)
{
  id v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess();
  v3[3] = MEMORY[0x1B3EA3B30](v1 + 24);
  return RTCReporter.activitySession.modify;
}

void RTCReporter.activitySession.modify(id **a1, char a2)
{
  id v3 = *a1;
  id v4 = (*a1)[3];
  swift_unknownObjectWeakAssign();
  if (a2)
  {

    swift_endAccess();
  }
  else
  {
    swift_endAccess();
  }
  free(v3);
}

uint64_t RTCReporter.reportSessionInfo.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RTCReporter.reportSessionInfo.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 32) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*RTCReporter.reportSessionInfo.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t RTCReporter.userInfo.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RTCReporter.userInfo.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 40) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*RTCReporter.userInfo.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t RTCReporter.attachmentData.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RTCReporter.attachmentData.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 48) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*RTCReporter.attachmentData.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

void *RTCReporter.init(session:)(void *a1)
{
  objc_super v2 = v1;
  uint64_t v30 = *v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  NSNumber v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B1138A90;
  uint64_t result = (void *)*MEMORY[0x1E4F94658];
  if (!*MEMORY[0x1E4F94658])
  {
    __break(1u);
    goto LABEL_10;
  }
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v10;
  id v11 = objc_allocWithZone(NSNumber);
  id v12 = objc_msgSend(v11, sel_initWithChar_, 56, v30);
  unint64_t v13 = type metadata accessor for NSNumber();
  *(void *)(inited + 72) = v13;
  *(void *)(inited + 48) = v12;
  uint64_t result = (void *)*MEMORY[0x1E4F94660];
  if (!*MEMORY[0x1E4F94660])
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  id v31 = a1;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v14;
  *(void *)(inited + 120) = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 96) = 3223088;
  *(void *)(inited + 104) = 0xE300000000000000;
  uint64_t result = (void *)*MEMORY[0x1E4F94680];
  if (!*MEMORY[0x1E4F94680])
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 136) = v15;
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v16 = String.hashValue.getter();
  swift_bridgeObjectRelease();
  id v17 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v16);
  *(void *)(inited + 168) = v13;
  *(void *)(inited + 144) = v17;
  uint64_t result = (void *)*MEMORY[0x1E4F94648];
  if (!*MEMORY[0x1E4F94648])
  {
LABEL_12:
    __break(1u);
    return result;
  }
  *(void *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 184) = v18;
  id v19 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, 1);
  *(void *)(inited + 216) = v13;
  *(void *)(inited + 192) = v19;
  v2[4] = specialized Dictionary.init(dictionaryLiteral:)(inited);
  uint64_t v20 = MEMORY[0x1E4FBC868];
  void v2[5] = MEMORY[0x1E4FBC868];
  v2[6] = v20;
  swift_beginAccess();
  uint64_t v21 = swift_bridgeObjectRetain();
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v21);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v22 = swift_bridgeObjectRetain();
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v22);
  swift_bridgeObjectRelease();
  id v23 = objc_allocWithZone(MEMORY[0x1E4F94620]);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v25 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v26 = Array._bridgeToObjectiveC()().super.isa;
  id v27 = objc_msgSend(v23, sel_initWithSessionInfo_userInfo_frameworksToCheck_, isa, v25, v26);

  if (v27)
  {
    swift_beginAccess();
    id v28 = v31;
    swift_unknownObjectWeakAssign();
    v2[2] = v27;
    id v29 = v27;
    objc_msgSend(v29, sel_startConfigurationWithCompletionHandler_, 0);
  }
  else
  {

    swift_unknownObjectWeakDestroy();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v2;
}

uint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4FBC868];
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v28 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    id v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(void *)&long long v39 = v19;
    *((void *)&v39 + 1) = v18;
    uint64_t v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(void *)&v37[0] = v19;
    *((void *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v38, v32);
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    outlined init with take of Any(v32, v36);
    long long v29 = v33;
    long long v30 = v34;
    uint64_t v31 = v35;
    outlined init with take of Any(v36, v37);
    outlined init with take of Any(v37, &v33);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
    uint64_t v20 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v6 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~*(void *)(v6 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v6 + 8 * v22);
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    uint64_t v10 = *(void *)(v2 + 48) + 40 * v9;
    *(_OWORD *)uint64_t v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(void *)(v10 + 32) = v31;
    uint64_t result = (uint64_t)outlined init with take of Any(&v33, (_OWORD *)(*(void *)(v2 + 56) + 32 * v9));
    ++*(void *)(v2 + 16);
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    outlined consume of [String : ()].Iterator._Variant();
    return v2;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t RTCReporter.deinit()
{
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t RTCReporter.__deallocating_deinit()
{
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  int64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    int64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];

      *(void *)(v17 + 8 * v10) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v19 & 1))
  {
LABEL_15:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v10 = v18;
  int64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      unint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    char v19 = (_OWORD *)(v18[7] + 32 * v12);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v19);
    return outlined init with take of Any(a1, v19);
  }
LABEL_13:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
  return (_OWORD *)swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  void *v4;
  void **v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  void *v21;
  uint64_t *v22;
  uint64_t result;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  unint64_t v5 = (void **)v4;
  uint64_t v28 = a2;
  char v9 = type metadata accessor for UUID();
  unint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  unint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)*v4;
  uint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  char v16 = v13[2];
  uint64_t v17 = (v14 & 1) == 0;
  unint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    unint64_t v21 = *v5;
    if (v19)
    {
LABEL_8:
      char v22 = (uint64_t *)(v21[7] + 16 * v15);
      uint64_t result = swift_release();
      unint64_t v24 = v28;
      *char v22 = a1;
      v22[1] = v24;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1);
  BOOL v25 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v19 & 1) != (v26 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  uint64_t v15 = v25;
  unint64_t v21 = *v5;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  return specialized _NativeDictionary._insert(at:key:value:)(v15, (uint64_t)v12, a1, v28, v21);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, a5, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t vars8;

  uint64_t v6 = v5;
  unint64_t v12 = *v5;
  BOOL v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  char v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v18 = v13;
  char v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v6;
    if (v18)
    {
LABEL_8:
      unint64_t v21 = (void *)(*(void *)(v20 + 56) + 16 * v14);
      uint64_t result = swift_unknownObjectRelease();
      *unint64_t v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
  char v23 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  BOOL v14 = v23;
  uint64_t v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v14, a3, a4, a1, a2, v20);
  return swift_bridgeObjectRetain();
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, a5, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  void *v5;
  void **v6;
  void *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t vars8;

  uint64_t v6 = (void **)v5;
  unint64_t v12 = (void *)*v5;
  BOOL v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  uint64_t v15 = v12[2];
  char v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v18 = v13;
  char v19 = v12[3];
  if (v19 >= v17 && (a5 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v6;
    if (v18)
    {
LABEL_8:
      unint64_t v21 = v20[7] + 16 * v14;
      uint64_t result = outlined consume of Data._Representation(*(void *)v21, *(void *)(v21 + 8));
      *(void *)unint64_t v21 = a1;
      *(void *)(v21 + 8) = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
  char v23 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  BOOL v14 = v23;
  uint64_t v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v14, a3, a4, a1, a2, v20);
  return swift_bridgeObjectRetain();
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  int64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
LABEL_13:
      outlined init with copy of AnyHashable(a2, (uint64_t)v21);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v21, a1, v16);
    }
LABEL_15:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v16 = *v4;
  if ((v14 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
  return outlined init with take of Any(a1, v17);
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = *(void *)(v18 + 56);

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_15:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v12 = v20;
  uint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
  swift_bridgeObjectRetain();
}

{
  void *v4;
  void **v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  unint64_t v5 = (void **)v4;
  uint64_t v28 = a2;
  char v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  unint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)*v4;
  uint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  char v16 = v13[2];
  uint64_t v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v19 = v14;
  unint64_t v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    char v21 = *v5;
    if (v19)
    {
LABEL_8:
      char v22 = v21[7] + 16 * v15;
      char v23 = *(void **)v22;

      unint64_t v24 = v28;
      *(void *)char v22 = a1;
      *(void *)(v22 + 8) = v24;
      return;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1);
  BOOL v25 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v19 & 1) != (v26 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  uint64_t v15 = v25;
  char v21 = *v5;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  specialized _NativeDictionary._insert(at:key:value:)(v15, (uint64_t)v12, a1, v28, v21);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  char v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_release();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  unint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  void *v16;
  char v17;
  uint64_t vars8;

  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  uint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  char v11 = v8[2];
  unint64_t v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    BOOL v16 = *v4;
    if (v14)
    {
LABEL_8:
      *(void *)(v16[7] + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  uint64_t v10 = result;
  BOOL v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  char v21;
  uint64_t vars8;

  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  uint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  char v11 = v8[2];
  unint64_t v12 = (v9 & 1) == 0;
  char v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  unint64_t v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v21 & 1))
    {
      uint64_t v10 = v20;
      BOOL v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  BOOL v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7];
    char v18 = v17
        + *(void *)(*(void *)(type metadata accessor for AttachmentLedger_AttachmentEncryption(0) - 8) + 72)
        * v10;
    return outlined assign with take of AttachmentLedger_AttachmentEncryption(a1, v18);
  }
LABEL_13:
  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  void *v16;
  char v17;
  uint64_t vars8;

  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  uint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  char v11 = v8[2];
  unint64_t v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    BOOL v16 = *v4;
    if (v14)
    {
LABEL_8:
      *(void *)(v16[7] + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  uint64_t v10 = result;
  BOOL v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void (*a6)(void), void (*a7)(void), void (*a8)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  char v11 = v8;
  uint64_t v16 = *v8;
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  uint64_t v19 = *(void *)(v16 + 16);
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v22 = v17;
  uint64_t v23 = *(void *)(v16 + 24);
  if (v23 >= v21 && (a5 & 1) != 0)
  {
LABEL_7:
    uint64_t v24 = *v11;
    if (v22)
    {
LABEL_8:
      uint64_t v25 = (void *)(*(void *)(v24 + 56) + 16 * v18);
      uint64_t result = swift_release();
      *uint64_t v25 = a1;
      v25[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v23 >= v21 && (a5 & 1) == 0)
  {
    a6();
    goto LABEL_7;
  }
  a7();
  unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  if ((v22 & 1) != (v28 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v18 = v27;
  uint64_t v24 = *v11;
  if (v22) {
    goto LABEL_8;
  }
LABEL_11:
  a8(v18, a3, a4, a1, a2, v24);
  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void), uint64_t (*a7)(uint64_t, uint64_t), void (*a8)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  char v11 = v8;
  uint64_t v16 = *v8;
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v19 = *(void *)(v16 + 16);
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v22 = v17;
  uint64_t v23 = *(void *)(v16 + 24);
  if (v23 < v21 || (a4 & 1) == 0)
  {
    if (v23 >= v21 && (a4 & 1) == 0)
    {
      a5();
      goto LABEL_7;
    }
    a6();
    unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v22 & 1) == (v28 & 1))
    {
      unint64_t v18 = v27;
      uint64_t v24 = *v11;
      if (v22) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v24 = *v11;
  if (v22)
  {
LABEL_8:
    uint64_t v25 = *(void *)(v24 + 56) + 40 * v18;
    __swift_destroy_boxed_opaque_existential_1Tm(v25);
    return a7(a1, v25);
  }
LABEL_13:
  a8(v18, a2, a3, a1, v24);
  return swift_bridgeObjectRetain();
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      unint64_t result = swift_bridgeObjectRelease();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void), uint64_t (*a6)(void), uint64_t (*a7)(unint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v11 = v7;
  uint64_t v15 = *v7;
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v18 = *(void *)(v15 + 16);
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v21 = v16;
  uint64_t v22 = *(void *)(v15 + 24);
  if (v22 < v20 || (a3 & 1) == 0)
  {
    if (v22 >= v20 && (a3 & 1) == 0)
    {
      a4();
      goto LABEL_7;
    }
    a5();
    unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v21 & 1) == (v32 & 1))
    {
      unint64_t v17 = v31;
      uint64_t v23 = *v11;
      if (v21) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v23 = *v11;
  if (v21)
  {
LABEL_8:
    uint64_t v24 = *(void *)(v23 + 56);
    uint64_t v25 = a6(0);
    uint64_t v26 = *(void *)(v25 - 8);
    unint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 40);
    uint64_t v28 = v25;
    uint64_t v29 = v24 + *(void *)(v26 + 72) * v17;
    return v27(v29, a1, v28);
  }
LABEL_13:
  return a7(v17, a2, a1, v23);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  unint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= result && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7] + 16 * v12;
      *(void *)uint64_t v19 = a1;
      *(unsigned char *)(v19 + 8) = a2 & 1;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v16 & 1) != (v20 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  uint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2 & 1, v18);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void), void (*a7)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  unint64_t v10 = v7;
  uint64_t v15 = *v7;
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v18 = *(void *)(v15 + 16);
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v21 = v16;
  uint64_t v22 = *(void *)(v15 + 24);
  if (v22 >= v20 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v23 = *v10;
    if (v21)
    {
LABEL_8:
      uint64_t v24 = *(void *)(v23 + 56);
      uint64_t result = swift_release();
      *(void *)(v24 + 8 * v17) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v22 >= v20 && (a4 & 1) == 0)
  {
    a5();
    goto LABEL_7;
  }
  a6();
  unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v21 & 1) != (v27 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v17 = v26;
  uint64_t v23 = *v10;
  if (v21) {
    goto LABEL_8;
  }
LABEL_11:
  a7(v17, a2, a3, a1, v23);
  return swift_bridgeObjectRetain();
}

id specialized AttachmentDataReport.init(coder:)(void *a1)
{
  uint64_t v3 = &v1[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isUpload];
  v1[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isUpload] = 2;
  uint64_t v4 = &v1[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_assetTotalSize];
  *(void *)uint64_t v4 = 0;
  v4[8] = 1;
  uint64_t v42 = &v1[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isServerBlocked];
  v1[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isServerBlocked] = 2;
  unint64_t v5 = &v1[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_isSubscribe];
  unsigned __int8 *v5 = 2;
  uint64_t v6 = &v1[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_responseTime];
  *(void *)uint64_t v6 = 0;
  v6[8] = 1;
  NSNumber v7 = &v1[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_endToEndAttachmentLatency];
  *(void *)NSNumber v7 = 0;
  unsigned char v7[8] = 1;
  uint64_t v8 = &v1[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_loadTime];
  *(void *)uint64_t v8 = 0;
  v8[8] = 1;
  uint64_t v43 = v5;
  char v44 = &v1[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_totalAttachments];
  *(void *)char v44 = 0;
  v44[8] = 1;
  NSNumber v45 = &v1[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_totalDownloadBytes];
  *(void *)NSNumber v45 = 0;
  v45[8] = 1;
  id v46 = &v1[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_totalUploadBytes];
  *(void *)id v46 = 0;
  v46[8] = 1;
  uint64_t v47 = &v1[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_downloadSpeed];
  *(void *)uint64_t v47 = 0;
  v47[8] = 1;
  uint64_t v48 = &v1[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_uploadSpeed];
  *(void *)uint64_t v48 = 0;
  v48[8] = 1;
  char v49 = &v1[OBJC_IVAR____TtC14CopresenceCore20AttachmentDataReport_reportType];
  *(void *)char v49 = 0;
  v49[8] = 1;
  char v50 = v1;
  char v9 = (void *)MEMORY[0x1B3EA1B00](0x64616F6C70557369, 0xE800000000000000);
  unsigned __int8 v41 = objc_msgSend(a1, sel_decodeBoolForKey_, v9);

  unint64_t v10 = (void *)MEMORY[0x1B3EA1B00](0x746F547465737361, 0xEE00657A69536C61);
  id v40 = objc_msgSend(a1, sel_decodeIntegerForKey_, v10);

  char v11 = (void *)MEMORY[0x1B3EA1B00](0x7265767265537369, 0xEF64656B636F6C42);
  LOBYTE(v10) = objc_msgSend(a1, sel_decodeBoolForKey_, v11);

  unint64_t v12 = (void *)MEMORY[0x1B3EA1B00](0xD000000000000019, 0x80000001B115C7B0);
  objc_msgSend(a1, sel_decodeDoubleForKey_, v12);
  uint64_t v14 = v13;

  uint64_t v15 = (void *)MEMORY[0x1B3EA1B00](0x656D695464616F6CLL, 0xE800000000000000);
  objc_msgSend(a1, sel_decodeDoubleForKey_, v15);
  uint64_t v17 = v16;

  swift_beginAccess();
  unsigned __int8 *v3 = v41;
  swift_beginAccess();
  *(void *)uint64_t v4 = v40;
  v4[8] = 0;
  swift_beginAccess();
  unsigned char *v42 = (_BYTE)v10;
  swift_beginAccess();
  *(void *)NSNumber v7 = v14;
  unsigned char v7[8] = 0;
  swift_beginAccess();
  *(void *)uint64_t v8 = v17;
  v8[8] = 0;
  uint64_t v18 = (void *)MEMORY[0x1B3EA1B00](0x7263736275537369, 0xEB00000000656269);
  unsigned __int8 v19 = objc_msgSend(a1, sel_decodeBoolForKey_, v18);

  uint64_t v20 = (void *)MEMORY[0x1B3EA1B00](0x65736E6F70736572, 0xEC000000656D6954);
  objc_msgSend(a1, sel_decodeDoubleForKey_, v20);
  uint64_t v22 = v21;

  swift_beginAccess();
  *uint64_t v43 = v19;
  swift_beginAccess();
  *(void *)uint64_t v6 = v22;
  v6[8] = 0;
  uint64_t v23 = (void *)MEMORY[0x1B3EA1B00](0xD000000000000010, 0x80000001B115C7D0);
  id v24 = objc_msgSend(a1, sel_decodeIntegerForKey_, v23);

  uint64_t v25 = (void *)MEMORY[0x1B3EA1B00](0xD000000000000012, 0x80000001B115C7F0);
  objc_msgSend(a1, sel_decodeDoubleForKey_, v25);
  uint64_t v27 = v26;

  uint64_t v28 = (void *)MEMORY[0x1B3EA1B00](0xD000000000000010, 0x80000001B115C810);
  objc_msgSend(a1, sel_decodeDoubleForKey_, v28);
  uint64_t v30 = v29;

  unint64_t v31 = (void *)MEMORY[0x1B3EA1B00](0x64616F6C6E776F64, 0xED00006465657053);
  objc_msgSend(a1, sel_decodeDoubleForKey_, v31);
  uint64_t v33 = v32;

  long long v34 = (void *)MEMORY[0x1B3EA1B00](0x705364616F6C7075, 0xEB00000000646565);
  objc_msgSend(a1, sel_decodeDoubleForKey_, v34);
  uint64_t v36 = v35;

  swift_beginAccess();
  *(void *)char v44 = v24;
  v44[8] = 0;
  swift_beginAccess();
  *(void *)NSNumber v45 = v27;
  v45[8] = 0;
  swift_beginAccess();
  *(void *)id v46 = v30;
  v46[8] = 0;
  swift_beginAccess();
  *(void *)uint64_t v47 = v33;
  v47[8] = 0;
  swift_beginAccess();
  *(void *)uint64_t v48 = v36;
  v48[8] = 0;
  char v37 = (void *)MEMORY[0x1B3EA1B00](0x795474726F706572, 0xEA00000000006570);
  id v38 = objc_msgSend(a1, sel_decodeIntegerForKey_, v37);

  swift_beginAccess();
  *(void *)char v49 = v38;
  v49[8] = 0;

  v51.receiver = v50;
  v51.super_class = (Class)type metadata accessor for AttachmentDataReport();
  return objc_msgSendSuper2(&v51, sel_init);
}

uint64_t type metadata accessor for AttachmentDataReport()
{
  return self;
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RTCReporterCategory and conformance RTCReporterCategory()
{
  unint64_t result = lazy protocol witness table cache variable for type RTCReporterCategory and conformance RTCReporterCategory;
  if (!lazy protocol witness table cache variable for type RTCReporterCategory and conformance RTCReporterCategory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RTCReporterCategory and conformance RTCReporterCategory);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RTCReporterType and conformance RTCReporterType()
{
  unint64_t result = lazy protocol witness table cache variable for type RTCReporterType and conformance RTCReporterType;
  if (!lazy protocol witness table cache variable for type RTCReporterType and conformance RTCReporterType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RTCReporterType and conformance RTCReporterType);
  }
  return result;
}

uint64_t sub_1B0E525B8@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xB8))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0E52614(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xC0))(*a1);
}

uint64_t sub_1B0E5266C@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xD0))();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1B0E526D0(uint64_t a1, void **a2)
{
  return (*(uint64_t (**)(void, void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xD8))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1B0E52734@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xE8))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0E52790(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xF0))(*a1);
}

uint64_t sub_1B0E527E8@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x100))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0E5284C(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x108))(*a1);
}

uint64_t sub_1B0E528AC@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x118))();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1B0E52918(uint64_t a1, void **a2)
{
  return (*(uint64_t (**)(void, void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x120))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1B0E52984@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x130))();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1B0E529F0(uint64_t a1, void **a2)
{
  return (*(uint64_t (**)(void, void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x138))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1B0E52A5C@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x148))();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1B0E52AC8(uint64_t a1, void **a2)
{
  return (*(uint64_t (**)(void, void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x150))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1B0E52B34@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x160))();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1B0E52BA0(uint64_t a1, void **a2)
{
  return (*(uint64_t (**)(void, void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x168))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1B0E52C0C@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x178))();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1B0E52C78(uint64_t a1, void **a2)
{
  return (*(uint64_t (**)(void, void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x180))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1B0E52CE4@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x190))();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1B0E52D50(uint64_t a1, void **a2)
{
  return (*(uint64_t (**)(void, void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x198))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1B0E52DBC@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1A8))();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1B0E52E28(uint64_t a1, void **a2)
{
  return (*(uint64_t (**)(void, void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x1B0))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1B0E52E94@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1C0))();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1B0E52F00(uint64_t a1, void **a2)
{
  return (*(uint64_t (**)(void, void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x1C8))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1B0E52F6C@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1D8))();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1B0E52FD8(uint64_t a1, void **a2)
{
  return (*(uint64_t (**)(void, void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x1E0))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1B0E53044@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + 24;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1B3EA3B30](v3);
  *a2 = result;
  return result;
}

uint64_t sub_1B0E53094()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t getEnumTag for RTCReporterCategory()
{
  return 0;
}

ValueMetadata *type metadata accessor for RTCReporterCategory()
{
  return &type metadata for RTCReporterCategory;
}

uint64_t getEnumTagSinglePayload for RTCReporterCategory(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for RTCReporterCategory(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B0E531F4);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for RTCReporterType()
{
  return &type metadata for RTCReporterType;
}

uint64_t method lookup function for AttachmentDataReport(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AttachmentDataReport);
}

uint64_t dispatch thunk of AttachmentDataReport.isUpload.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of AttachmentDataReport.isUpload.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of AttachmentDataReport.isUpload.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of AttachmentDataReport.assetTotalSize.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of AttachmentDataReport.assetTotalSize.setter(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0xD8))(a1, a2 & 1);
}

uint64_t dispatch thunk of AttachmentDataReport.assetTotalSize.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of AttachmentDataReport.isServerBlocked.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of AttachmentDataReport.isServerBlocked.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of AttachmentDataReport.isServerBlocked.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of AttachmentDataReport.isSubscribe.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of AttachmentDataReport.isSubscribe.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of AttachmentDataReport.isSubscribe.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of AttachmentDataReport.responseTime.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of AttachmentDataReport.responseTime.setter(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x120))(a1, a2 & 1);
}

uint64_t dispatch thunk of AttachmentDataReport.responseTime.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of AttachmentDataReport.endToEndAttachmentLatency.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of AttachmentDataReport.endToEndAttachmentLatency.setter(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x138))(a1, a2 & 1);
}

uint64_t dispatch thunk of AttachmentDataReport.endToEndAttachmentLatency.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of AttachmentDataReport.loadTime.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x148))();
}

uint64_t dispatch thunk of AttachmentDataReport.loadTime.setter(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x150))(a1, a2 & 1);
}

uint64_t dispatch thunk of AttachmentDataReport.loadTime.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x158))();
}

uint64_t dispatch thunk of AttachmentDataReport.totalAttachments.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x160))();
}

uint64_t dispatch thunk of AttachmentDataReport.totalAttachments.setter(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x168))(a1, a2 & 1);
}

uint64_t dispatch thunk of AttachmentDataReport.totalAttachments.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x170))();
}

uint64_t dispatch thunk of AttachmentDataReport.totalDownloadBytes.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x178))();
}

uint64_t dispatch thunk of AttachmentDataReport.totalDownloadBytes.setter(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x180))(a1, a2 & 1);
}

uint64_t dispatch thunk of AttachmentDataReport.totalDownloadBytes.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x188))();
}

uint64_t dispatch thunk of AttachmentDataReport.totalUploadBytes.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x190))();
}

uint64_t dispatch thunk of AttachmentDataReport.totalUploadBytes.setter(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x198))(a1, a2 & 1);
}

uint64_t dispatch thunk of AttachmentDataReport.totalUploadBytes.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of AttachmentDataReport.downloadSpeed.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of AttachmentDataReport.downloadSpeed.setter(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x1B0))(a1, a2 & 1);
}

uint64_t dispatch thunk of AttachmentDataReport.downloadSpeed.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of AttachmentDataReport.uploadSpeed.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of AttachmentDataReport.uploadSpeed.setter(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x1C8))(a1, a2 & 1);
}

uint64_t dispatch thunk of AttachmentDataReport.uploadSpeed.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of AttachmentDataReport.reportType.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of AttachmentDataReport.reportType.setter(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x1E0))(a1, a2 & 1);
}

uint64_t dispatch thunk of AttachmentDataReport.reportType.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of AttachmentDataReport.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of AttachmentDataReport.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 504))();
}

uint64_t dispatch thunk of AttachmentDataReport.__allocating_init(isUpload:assetTotalSize:isServerBlocked:endToEndAttachmentLatency:loadTime:)()
{
  return (*(uint64_t (**)(void))(v0 + 512))();
}

uint64_t dispatch thunk of AttachmentDataReport.__allocating_init(isSubscribe:responseTime:)()
{
  return (*(uint64_t (**)(void))(v0 + 520))();
}

uint64_t dispatch thunk of AttachmentDataReport.__allocating_init(totalAttachments:totalDownloadBytes:totalUploadBytes:downloadSpeed:uploadSpeed:)()
{
  return (*(uint64_t (**)(void))(v0 + 528))();
}

uint64_t type metadata accessor for RTCReporter()
{
  return self;
}

uint64_t method lookup function for RTCReporter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RTCReporter);
}

uint64_t dispatch thunk of RTCReporter.__allocating_init(session:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t outlined init with take of AttachmentLedger_AttachmentEncryption(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of AttachmentLedger_AttachmentEncryption(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t Double.milliseconds.getter(double a1)
{
  if (a1 <= 0.0) {
    return 0;
  }
  double v2 = a1 * 1000.0;
  if ((~COERCE__INT64(a1 * 1000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 <= -1.0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v2 >= 1.84467441e19)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  return (unint64_t)v2;
}

uint64_t one-time initialization function for log()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, log);
  __swift_project_value_buffer(v0, (uint64_t)log);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, log);
  __swift_project_value_buffer(v0, (uint64_t)log);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, log);
  __swift_project_value_buffer(v0, (uint64_t)log);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, log);
  __swift_project_value_buffer(v0, (uint64_t)log);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, log);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)log);
  if (one-time initialization token for pubSubReporter != -1) {
    swift_once();
  }
  double v2 = __swift_project_value_buffer(v0, (uint64_t)static Log.pubSubReporter);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);
  return v3(v1, v2, v0);
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, log);
  __swift_project_value_buffer(v0, (uint64_t)log);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, log);
  __swift_project_value_buffer(v0, (uint64_t)log);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, log);
  __swift_project_value_buffer(v0, (uint64_t)log);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, log);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)log);
  if (one-time initialization token for unreliableMessenger != -1) {
    swift_once();
  }
  double v2 = __swift_project_value_buffer(v0, (uint64_t)static Log.unreliableMessenger);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);
  return v3(v1, v2, v0);
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, log);
  __swift_project_value_buffer(v0, (uint64_t)log);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, log);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)log);
  if (one-time initialization token for pubsub != -1) {
    swift_once();
  }
  double v2 = __swift_project_value_buffer(v0, (uint64_t)static Log.pubsub);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);
  return v3(v1, v2, v0);
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, log);
  __swift_project_value_buffer(v0, (uint64_t)log);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, log);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)log);
  if (one-time initialization token for pubsub != -1) {
    swift_once();
  }
  double v2 = __swift_project_value_buffer(v0, (uint64_t)static Log.pubsub);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);
  return v3(v1, v2, v0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, log);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)log);
  if (one-time initialization token for pubsub != -1) {
    swift_once();
  }
  double v2 = __swift_project_value_buffer(v0, (uint64_t)static Log.pubsub);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);
  return v3(v1, v2, v0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, log);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)log);
  if (one-time initialization token for cryptor != -1) {
    swift_once();
  }
  double v2 = __swift_project_value_buffer(v0, (uint64_t)static Log.cryptor);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);
  return v3(v1, v2, v0);
}

uint64_t PluginRpcStream.definition.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 24);
  *a1 = *(void *)(v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t PluginRpcStream.traceId.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + direct field offset for PluginRpcStream.traceId, a1, &demangling cache variable for type metadata for UUID?);
}

uint64_t PluginRpcStream.output.getter()
{
  return swift_retain();
}

uint64_t PluginRpcStream.InputSubscriber.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  PluginRpcStream.InputSubscriber.init()();
  return v0;
}

uint64_t PluginRpcStream.inputSubscriber.getter()
{
  return swift_retain();
}

uint64_t PluginRpcStream.cancellable.getter()
{
  return ActivitySession.activeParticipantsUpdateItem.getter();
}

uint64_t PluginRpcStream.cancellable.setter(uint64_t a1)
{
  return ActivitySession.activeParticipantsUpdateItem.setter(a1, &direct field offset for PluginRpcStream.cancellable);
}

uint64_t (*PluginRpcStream.cancellable.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

uint64_t PluginRpcStream.stream.getter()
{
  return ActivitySession.activeParticipantsUpdateItem.getter();
}

uint64_t PluginRpcStream.stream.setter(uint64_t a1)
{
  return ActivitySession.activeParticipantsUpdateItem.setter(a1, &direct field offset for PluginRpcStream.stream);
}

uint64_t (*PluginRpcStream.stream.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t PluginRpcStream.__allocating_init(definition:input:traceId:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = specialized PluginRpcStream.__allocating_init(definition:input:traceId:)(a1, a2, a3);
  swift_release();
  return v3;
}

uint64_t PluginRpcStream.init(definition:input:traceId:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = specialized PluginRpcStream.init(definition:input:traceId:)(a1, a2, a3);
  swift_release();
  return v3;
}

uint64_t PluginRpcStream.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for NWConnection.SendCompletion();
  uint64_t v20 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (uint64_t *)((char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for NWConnection.State();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  char v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  unint64_t v12 = (char *)&v19 - v11;
  uint64_t v21 = direct field offset for PluginRpcStream.inputSubscriber;
  (*(void (**)(uint64_t))(**(void **)(v0 + direct field offset for PluginRpcStream.inputSubscriber) + 216))(v10);
  uint64_t v13 = (void *)(v0 + direct field offset for PluginRpcStream.stream);
  swift_beginAccess();
  if (*v13)
  {
    uint64_t v19 = v2;
    swift_retain();
    NWConnection.state.getter();
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v9, *MEMORY[0x1E4F389E8], v5);
    char v14 = MEMORY[0x1B3EA13D0](v12, v9);
    uint64_t v15 = *(void (**)(char *, uint64_t))(v6 + 8);
    v15(v9, v5);
    v15(v12, v5);
    if (v14)
    {
      type metadata accessor for NWConnection.ContentContext();
      static NWConnection.ContentContext.finalMessage.getter();
      *uint64_t v4 = destructiveProjectEnumData for ActivitySession.Errors;
      v4[1] = 0;
      uint64_t v16 = v19;
      uint64_t v17 = v20;
      (*(void (**)(void *, void, uint64_t))(v20 + 104))(v4, *MEMORY[0x1E4F389D8], v19);
      NWConnection.send(content:contentContext:isComplete:completion:)();
      swift_release();
      swift_release();
      (*(void (**)(void *, uint64_t))(v17 + 8))(v4, v16);
    }
    else
    {
      swift_release();
    }
  }
  swift_bridgeObjectRelease();
  outlined destroy of UUID?(v1 + direct field offset for PluginRpcStream.traceId, &demangling cache variable for type metadata for UUID?);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v1;
}

uint64_t PluginRpcStream.__deallocating_deinit()
{
  PluginRpcStream.deinit();
  return swift_deallocClassInstance();
}

void PluginRpcStream.start(stream:)()
{
  uint64_t v1 = *(void (**)(uint64_t))(*(void *)v0 + 192);
  uint64_t v2 = *(void *)v0 + 192;
  uint64_t v3 = swift_retain();
  v1(v3);
  uint64_t v4 = swift_allocObject();
  swift_weakInit();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = *(void *)(v2 - 112);
  *(_OWORD *)(v5 + 24) = *(_OWORD *)(v2 - 104);
  *(void *)(v5 + 40) = *(void *)(v2 - 88);
  *(void *)(v5 + 48) = v4;
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?((uint64_t)partial apply for closure #1 in PluginRpcStream.start(stream:));
  NWConnection.stateUpdateHandler.setter();
  swift_release();
  swift_release();
  PluginRpcStream.sendPath()();
}

uint64_t closure #1 in PluginRpcStream.start(stream:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PluginRpcError();
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NWConnection.State();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for NWError();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  unint64_t v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
    if ((*(unsigned int (**)(char *, uint64_t))(v6 + 88))(v8, v5) == *MEMORY[0x1E4F38A08])
    {
      (*(void (**)(char *, uint64_t))(v6 + 96))(v8, v5);
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v4, v12, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v4, 0, 3, v9);
      swift_storeEnumTagMultiPayload();
      PluginRpcStream.terminate(error:)((uint64_t)v4);
      swift_release();
      outlined destroy of PluginRpcError((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    }
    else
    {
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }
  return result;
}

void PluginRpcStream.sendPath()()
{
  uint64_t v1 = v0;
  uint64_t v36 = type metadata accessor for NWConnection.SendCompletion();
  uint64_t v2 = *(void *)(v36 - 8);
  MEMORY[0x1F4188790](v36);
  uint64_t v4 = (void (**)(uint64_t))((char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v34 = type metadata accessor for PluginProtocolHeader();
  MEMORY[0x1F4188790](v34);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)log);
  swift_retain();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v35 = v6;
  if (v10)
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v33 = v4;
    unint64_t v12 = (uint8_t *)v11;
    uint64_t v13 = swift_slowAlloc();
    v38[0] = v13;
    *(_DWORD *)unint64_t v12 = 136315138;
    uint64_t v14 = PluginRpcStream.description.getter();
    uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v8, v9, "RPC %s sending path", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v13, -1, -1);
    uint64_t v16 = v12;
    uint64_t v4 = v33;
    MEMORY[0x1B3EA39E0](v16, -1, -1);
  }
  else
  {

    uint64_t v17 = swift_release();
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)v0 + 184))(v17))
  {
    unint64_t v18 = *((void *)v0 + 2);
    unint64_t v19 = *((void *)v0 + 3);
    swift_bridgeObjectRetain();
    uint64_t v20 = specialized Data.init<A>(_:)(v18, v19);
    unint64_t v22 = v21;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_1B1138AA0;
    type metadata accessor for NWProtocolFramer.Message();
    uint64_t v24 = (uint64_t)v35;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v1 + direct field offset for PluginRpcStream.traceId, (uint64_t)v35, &demangling cache variable for type metadata for UUID?);
    uint64_t v25 = v34;
    swift_storeEnumTagMultiPayload();
    if (one-time initialization token for definition != -1) {
      swift_once();
    }
    swift_retain();
    uint64_t v26 = dispatch thunk of NWProtocolFramer.Message.__allocating_init(definition:)();
    v38[3] = v25;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v38);
    outlined init with copy of PluginRpcError(v24, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(void))type metadata accessor for PluginProtocolHeader);
    swift_retain();
    dispatch thunk of NWProtocolFramer.Message.subscript.setter();
    swift_release();
    outlined destroy of PluginRpcError(v24, (uint64_t (*)(void))type metadata accessor for PluginProtocolHeader);
    *(void *)(v23 + 32) = v26;
    v38[0] = v23;
    specialized Array._endMutation()();
    if ((unint64_t)v38[0] >> 62)
    {
      outlined copy of Data._Representation(v20, v22);
      type metadata accessor for NWProtocolMetadata();
      swift_bridgeObjectRetain();
      _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      outlined copy of Data._Representation(v20, v22);
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for NWProtocolMetadata();
      swift_bridgeObjectRelease();
    }
    type metadata accessor for NWConnection.ContentContext();
    swift_allocObject();
    NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)();
    *uint64_t v4 = partial apply for closure #1 in PluginRpcStream.sendPath();
    v4[1] = v1;
    uint64_t v28 = v36;
    (*(void (**)(void (**)(uint64_t), void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4F389D8], v36);
    swift_retain();
    NWConnection.send(content:contentContext:isComplete:completion:)();
    swift_release();
    outlined consume of Data._Representation(v20, v22);
    swift_release();
    outlined consume of Data._Representation(v20, v22);
    (*(void (**)(void (**)(uint64_t), uint64_t))(v2 + 8))(v4, v28);
  }
  else
  {
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      unint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v31 = 0;
      _os_log_impl(&dword_1B0DF7000, v29, v30, "PluginRpcStream.sendPath: Stream not yet started", v31, 2u);
      MEMORY[0x1B3EA39E0](v31, -1, -1);
    }
  }
}

void closure #1 in PluginRpcStream.sendPath()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for NWError();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  BOOL v10 = &v14[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v6, &demangling cache variable for type metadata for NWError?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    uint64_t v11 = outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for NWError?);
    (*(void (**)(uint64_t))(**(void **)(a2 + direct field offset for PluginRpcStream.inputSubscriber) + 208))(v11);
    PluginRpcStream.receiveNextResponse()();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type NWError and conformance NWError, MEMORY[0x1E4F38B50]);
    unint64_t v12 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(v13, v10, v7);
    v14[0] = 13;
    unint64_t v15 = v12;
    unint64_t v16 = 0xD000000000000013;
    unint64_t v17 = 0x80000001B115CB00;
    PluginRpcStream.terminate(status:)(v14);

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
}

void PluginRpcStream.sendNextRequest(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v50 = *(void *)v2;
  uint64_t v4 = v50;
  uint64_t v5 = type metadata accessor for NWConnection.SendCompletion();
  uint64_t v48 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v47 = (uint64_t (**)(uint64_t))((char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v45 = type metadata accessor for PluginProtocolHeader();
  uint64_t v7 = MEMORY[0x1F4188790](v45);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v4 + 80);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v13 = (char *)&v41 - v12;
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = __swift_project_value_buffer(v14, (uint64_t)log);
  unint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v49 = a1;
  v16(v13, a1, v10);
  swift_retain();
  unint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  id v46 = v9;
  if (v19)
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v44 = v5;
    uint64_t v21 = v20;
    uint64_t v42 = swift_slowAlloc();
    v52[0] = v42;
    *(_DWORD *)uint64_t v21 = 136315395;
    uint64_t v22 = PluginRpcStream.description.getter();
    uint64_t v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v52);
    uint64_t v43 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 12) = 2081;
    uint64_t v24 = dispatch thunk of CustomDebugStringConvertible.debugDescription.getter();
    uint64_t v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    _os_log_impl(&dword_1B0DF7000, v17, v18, "RPC %s sending request message %{private}s", (uint8_t *)v21, 0x16u);
    uint64_t v26 = v42;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v26, -1, -1);
    uint64_t v27 = v21;
    uint64_t v5 = v44;
    MEMORY[0x1B3EA39E0](v27, -1, -1);
  }
  else
  {
    swift_release();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }

  if ((*(uint64_t (**)(void))(*(void *)v2 + 184))())
  {
    uint64_t v31 = Message.serializedData(partial:)();
    unint64_t v33 = v32;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = xmmword_1B1138AA0;
    type metadata accessor for NWProtocolFramer.Message();
    uint64_t v35 = v45;
    uint64_t v36 = (uint64_t)v46;
    swift_storeEnumTagMultiPayload();
    if (one-time initialization token for definition != -1) {
      swift_once();
    }
    swift_retain();
    uint64_t v37 = dispatch thunk of NWProtocolFramer.Message.__allocating_init(definition:)();
    v52[3] = v35;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v52);
    outlined init with copy of PluginRpcError(v36, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(void))type metadata accessor for PluginProtocolHeader);
    swift_retain();
    dispatch thunk of NWProtocolFramer.Message.subscript.setter();
    swift_release();
    outlined destroy of PluginRpcError(v36, (uint64_t (*)(void))type metadata accessor for PluginProtocolHeader);
    *(void *)(v34 + 32) = v37;
    v52[0] = v34;
    specialized Array._endMutation()();
    if ((unint64_t)v52[0] >> 62)
    {
      outlined copy of Data._Representation(v31, v33);
      type metadata accessor for NWProtocolMetadata();
      swift_bridgeObjectRetain();
      _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      outlined copy of Data._Representation(v31, v33);
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for NWProtocolMetadata();
      swift_bridgeObjectRelease();
    }
    type metadata accessor for NWConnection.ContentContext();
    swift_allocObject();
    NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)();
    id v40 = v47;
    uint64_t v39 = v48;
    *uint64_t v47 = partial apply for closure #1 in PluginRpcStream.sendNextRequest(_:);
    v40[1] = v2;
    (*(void (**)(uint64_t (**)(uint64_t), void, uint64_t))(v39 + 104))(v40, *MEMORY[0x1E4F389D8], v5);
    swift_retain();
    NWConnection.send(content:contentContext:isComplete:completion:)();
    swift_release();
    outlined consume of Data._Representation(v31, v33);
    swift_release();
    outlined consume of Data._Representation(v31, v33);
    (*(void (**)(uint64_t (**)(uint64_t), uint64_t))(v39 + 8))(v40, v5);
  }
  else
  {
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      os_log_type_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v30 = 0;
      _os_log_impl(&dword_1B0DF7000, v28, v29, "PluginRpcStream.sendNextRequest: Stream not yet started", v30, 2u);
      MEMORY[0x1B3EA39E0](v30, -1, -1);
    }
  }
}

uint64_t closure #1 in PluginRpcStream.sendNextRequest(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for NWError();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v6, &demangling cache variable for type metadata for NWError?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    uint64_t v11 = outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for NWError?);
    return (*(uint64_t (**)(uint64_t))(**(void **)(a2
                                                            + direct field offset for PluginRpcStream.inputSubscriber)
                                              + 208))(v11);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type NWError and conformance NWError, MEMORY[0x1E4F38B50]);
    uint64_t v13 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(v14, v10, v7);
    v15[0] = 13;
    unint64_t v16 = v13;
    unint64_t v17 = 0xD00000000000001ELL;
    unint64_t v18 = 0x80000001B115CAE0;
    PluginRpcStream.terminate(status:)(v15);

    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
}

void PluginRpcStream.receiveNextResponse()()
{
  uint64_t v1 = *v0;
  if ((*(uint64_t (**)(void))(*v0 + 184))())
  {
    uint64_t v2 = swift_allocObject();
    swift_weakInit();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = *(void *)(v1 + 80);
    *(_OWORD *)(v3 + 24) = *(_OWORD *)(v1 + 88);
    *(void *)(v3 + 40) = *(void *)(v1 + 104);
    *(void *)(v3 + 48) = v2;
    swift_retain();
    NWConnection.receiveMessage(completion:)();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)log);
    oslog = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_1B0DF7000, oslog, v5, "PluginRpcStream.receiveNextResponse: Stream not yet started", v6, 2u);
      MEMORY[0x1B3EA39E0](v6, -1, -1);
    }
  }
}

uint64_t closure #1 in PluginRpcStream.receiveNextResponse()(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v86 = a3;
  uint64_t v81 = a1;
  unint64_t v82 = a2;
  uint64_t v12 = type metadata accessor for String.Encoding();
  MEMORY[0x1F4188790](v12 - 8);
  v72[1] = (char *)v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v77 = (char *)v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = type metadata accessor for Optional();
  uint64_t v75 = *(void *)(v76 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v76);
  os_log_type_t v78 = (char *)v72 - v17;
  uint64_t v80 = a8;
  uint64_t v79 = *(void *)(a8 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  char v73 = (char *)v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  unsigned int v74 = (char *)v72 - v20;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginProtocolHeader?);
  MEMORY[0x1F4188790](v21 - 8);
  unint64_t v23 = (char *)v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for PluginProtocolHeader();
  uint64_t v85 = *(void *)(v24 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v24);
  id v83 = (char *)v72 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  uint64_t v84 = (uint64_t)v72 - v27;
  uint64_t v28 = type metadata accessor for PluginRpcError();
  MEMORY[0x1F4188790](v28);
  os_log_type_t v30 = (char *)v72 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  MEMORY[0x1F4188790](v31 - 8);
  unint64_t v33 = (char *)v72 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for NWError();
  uint64_t v35 = *(void *)(v34 - 8);
  MEMORY[0x1F4188790](v34);
  uint64_t v37 = (char *)v72 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a5, (uint64_t)v33, &demangling cache variable for type metadata for NWError?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v37, v33, v34);
    (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v30, v37, v34);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v30, 0, 3, v34);
    swift_storeEnumTagMultiPayload();
    PluginRpcStream.terminate(error:)((uint64_t)v30);
    swift_release();
    outlined destroy of PluginRpcError((uint64_t)v30, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v37, v34);
  }
  outlined destroy of UUID?((uint64_t)v33, &demangling cache variable for type metadata for NWError?);
  if (!v86) {
    goto LABEL_18;
  }
  if (one-time initialization token for definition != -1) {
    swift_once();
  }
  uint64_t v39 = dispatch thunk of NWConnection.ContentContext.protocolMetadata(definition:)();
  if (!v39)
  {
LABEL_18:
    LOBYTE(v88[0]) = 13;
    *(_OWORD *)((char *)v88 + 8) = xmmword_1B113A2C0;
    *((void *)&v88[1] + 1) = 0x80000001B115CA40;
    PluginRpcStream.terminate(status:)((char *)v88);
    return swift_release();
  }
  uint64_t v40 = v39;
  type metadata accessor for NWProtocolFramer.Message();
  if (!swift_dynamicCastClass())
  {
    swift_release();
    goto LABEL_18;
  }
  dispatch thunk of NWProtocolFramer.Message.subscript.getter();
  if (!*((void *)&v88[1] + 1))
  {
    outlined destroy of UUID?((uint64_t)v88, (uint64_t *)&demangling cache variable for type metadata for Any?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v85 + 56))(v23, 1, 1, v24);
    goto LABEL_17;
  }
  int v41 = swift_dynamicCast();
  uint64_t v42 = v85;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v85 + 56))(v23, v41 ^ 1u, 1, v24);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v23, 1, v24) == 1)
  {
LABEL_17:
    swift_release();
    outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for PluginProtocolHeader?);
    goto LABEL_18;
  }
  uint64_t v43 = v84;
  outlined init with take of PluginRpcError((uint64_t)v23, v84, (uint64_t (*)(void))type metadata accessor for PluginProtocolHeader);
  uint64_t v44 = v83;
  outlined init with copy of PluginRpcError(v43, (uint64_t)v83, (uint64_t (*)(void))type metadata accessor for PluginProtocolHeader);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      char v46 = *v44;
      unint64_t v47 = v82;
      if (v82 >> 60 == 15)
      {
        uint64_t v48 = 0;
        uint64_t v49 = 0;
      }
      else
      {
        uint64_t v52 = v81;
        outlined copy of Data._Representation(v81, v82);
        static String.Encoding.utf8.getter();
        uint64_t v48 = String.init(data:encoding:)();
        uint64_t v49 = v53;
        outlined consume of Data?(v52, v47);
      }
      LOBYTE(v88[0]) = v46;
      *((void *)&v88[0] + 1) = 0;
      *(void *)&v88[1] = v48;
      *((void *)&v88[1] + 1) = v49;
      id v54 = 0;
      swift_bridgeObjectRetain();
      PluginRpcStream.terminate(status:)((char *)v88);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return outlined destroy of PluginRpcError(v43, (uint64_t (*)(void))type metadata accessor for PluginProtocolHeader);
    }
    else
    {
      uint64_t v89 = 0;
      memset(v88, 0, sizeof(v88));
      outlined copy of Data?(v81, v82);
      uint64_t v50 = v80;
      default argument 3 of Message.init(serializedData:extensions:partial:options:)(v80, a10);
      uint64_t v51 = v78;
      Message.init(serializedData:extensions:partial:options:)();
      uint64_t v55 = v79;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v79 + 56))(v51, 0, 1, v50);
      uint64_t v56 = v74;
      (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v74, v51, v50);
      if (one-time initialization token for log != -1) {
        swift_once();
      }
      uint64_t v57 = type metadata accessor for Logger();
      __swift_project_value_buffer(v57, (uint64_t)log);
      uint64_t v58 = v73;
      (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v73, v56, v50);
      swift_retain();
      uint64_t v59 = Logger.logObject.getter();
      os_log_type_t v60 = static os_log_type_t.debug.getter();
      int v61 = v60;
      if (os_log_type_enabled(v59, v60))
      {
        uint64_t v62 = swift_slowAlloc();
        uint64_t v85 = swift_slowAlloc();
        *(void *)&v88[0] = v85;
        *(_DWORD *)uint64_t v62 = 136315395;
        LODWORD(v83) = v61;
        uint64_t v63 = PluginRpcStream.description.getter();
        uint64_t v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v64, (uint64_t *)v88);
        uint64_t v86 = v40;
        uint64_t v87 = v65;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v62 + 12) = 2081;
        uint64_t v50 = v80;
        uint64_t v66 = dispatch thunk of CustomDebugStringConvertible.debugDescription.getter();
        uint64_t v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v67, (uint64_t *)v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v68 = *(void (**)(char *, uint64_t))(v55 + 8);
        v68(v73, v50);
        _os_log_impl(&dword_1B0DF7000, v59, (os_log_type_t)v83, "RPC %s received response message %{private}s", (uint8_t *)v62, 0x16u);
        uint64_t v69 = v85;
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v69, -1, -1);
        uint64_t v70 = v62;
        uint64_t v56 = v74;
        MEMORY[0x1B3EA39E0](v70, -1, -1);
      }
      else
      {
        swift_release();
        uint64_t v68 = *(void (**)(char *, uint64_t))(v55 + 8);
        v68(v58, v50);
      }

      swift_retain();
      PassthroughSubject.send(_:)();
      uint64_t v71 = swift_release();
      PluginRpcStream.receiveNextResponse()(v71);
      swift_release();
      swift_release();
      v68(v56, v50);
      return outlined destroy of PluginRpcError(v84, (uint64_t (*)(void))type metadata accessor for PluginProtocolHeader);
    }
  }
  else
  {
    LOBYTE(v88[0]) = 13;
    *(_OWORD *)((char *)v88 + 8) = xmmword_1B113A2B0;
    *((void *)&v88[1] + 1) = 0x80000001B115CA90;
    PluginRpcStream.terminate(status:)((char *)v88);
    swift_release();
    swift_release();
    outlined destroy of PluginRpcError(v43, (uint64_t (*)(void))type metadata accessor for PluginProtocolHeader);
    return outlined destroy of PluginRpcError((uint64_t)v44, (uint64_t (*)(void))type metadata accessor for PluginProtocolHeader);
  }
}

uint64_t PluginRpcStream.terminate(status:)(char *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for PluginRpcError();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a1)
  {
    uint64_t v11 = *((void *)a1 + 3);
    char *v7 = *a1;
    long long v23 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(v7 + 8) = v23;
    *((void *)v7 + 3) = v11;
    swift_storeEnumTagMultiPayload();
    id v12 = (id)v23;
    swift_bridgeObjectRetain();
    PluginRpcStream.terminate(error:)((uint64_t)v7);
    return outlined destroy of PluginRpcError((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
  }
  else
  {
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)log);
    swift_retain();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      uint64_t v25 = v18;
      *(_DWORD *)uint64_t v17 = 136315138;
      *(void *)&long long v23 = v17 + 4;
      uint64_t v19 = PluginRpcStream.description.getter();
      uint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v15, v16, "RPC %s terminating successfully", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v18, -1, -1);
      MEMORY[0x1B3EA39E0](v17, -1, -1);
    }
    else
    {

      swift_release();
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, 1, 1, v4);
    PassthroughSubject.send(completion:)();
    uint64_t v21 = outlined destroy of UUID?((uint64_t)v10, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
    uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 160))(v21);
    if (v22)
    {
      AnyCancellable.cancel()();
      uint64_t v22 = swift_release();
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 184))(v22);
    if (result)
    {
      NWConnection.cancel()();
      return swift_release();
    }
  }
  return result;
}

uint64_t PluginRpcStream.terminate(error:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginRpcError?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v46 = (uint64_t)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v37 - v10;
  uint64_t v12 = type metadata accessor for PluginRpcError();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  os_log_type_t v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  uint64_t v19 = (char *)&v37 - v18;
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v37 - v20;
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)log);
  outlined init with copy of PluginRpcError(a1, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
  swift_retain();
  long long v23 = Logger.logObject.getter();
  int v45 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, (os_log_type_t)v45))
  {
    id v38 = v16;
    os_log_t v42 = v23;
    uint64_t v44 = a1;
    uint64_t v24 = swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    uint64_t v48 = v40;
    *(_DWORD *)uint64_t v24 = 136315394;
    uint64_t v25 = PluginRpcStream.description.getter();
    uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v48);
    uint64_t v39 = &v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2080;
    outlined init with copy of PluginRpcError((uint64_t)v21, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
    uint64_t v27 = v46;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v11, v46, &demangling cache variable for type metadata for PluginRpcError?);
    uint64_t v41 = v13;
    int v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v27, 1, v12);
    uint64_t v43 = v12;
    if (v28 == 1)
    {
      unint64_t v29 = 0xE300000000000000;
      uint64_t v30 = 7104878;
    }
    else
    {
      outlined init with take of PluginRpcError(v27, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
      outlined init with copy of PluginRpcError((uint64_t)v19, (uint64_t)v38, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
      uint64_t v30 = String.init<A>(reflecting:)();
      unint64_t v29 = v31;
      outlined destroy of PluginRpcError((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
    }
    outlined destroy of UUID?((uint64_t)v11, &demangling cache variable for type metadata for PluginRpcError?);
    uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v29, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of PluginRpcError((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
    os_log_t v32 = v42;
    _os_log_impl(&dword_1B0DF7000, v42, (os_log_type_t)v45, "RPC %s terminating with failure: %s", (uint8_t *)v24, 0x16u);
    uint64_t v33 = v40;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v33, -1, -1);
    MEMORY[0x1B3EA39E0](v24, -1, -1);

    uint64_t v12 = v43;
    a1 = v44;
    uint64_t v13 = v41;
  }
  else
  {
    swift_release();
    outlined destroy of PluginRpcError((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
  }
  outlined init with copy of PluginRpcError(a1, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v6, 0, 1, v12);
  PassthroughSubject.send(completion:)();
  uint64_t v34 = outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 160))(v34);
  if (v35)
  {
    AnyCancellable.cancel()();
    uint64_t v35 = swift_release();
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 184))(v35);
  if (result)
  {
    NWConnection.cancel()();
    return swift_release();
  }
  return result;
}

uint64_t PluginRpcStream.InputSubscriber.rpcStream.getter()
{
  return swift_weakLoadStrong();
}

uint64_t PluginRpcStream.InputSubscriber.rpcStream.setter()
{
  return swift_release();
}

void (*PluginRpcStream.InputSubscriber.rpcStream.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess();
  v3[3] = swift_weakLoadStrong();
  return PluginRpcStream.InputSubscriber.rpcStream.modify;
}

void PluginRpcStream.InputSubscriber.rpcStream.modify(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_weakAssign();
  if (a2)
  {
    swift_release();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_release();
  }
  free(v3);
}

void PluginRpcStream.InputSubscriber.receive(subscription:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v3 + 16));
  closure #1 in PluginRpcStream.InputSubscriber.receive(subscription:)(v1, a1);
  uint64_t v4 = *(os_unfair_lock_s **)(v3 + 16);
  os_unfair_lock_unlock(v4);
}

uint64_t closure #1 in PluginRpcStream.InputSubscriber.receive(subscription:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of UserNotificationCenter(a2, (uint64_t)v5);
  outlined init with take of Subscription?((uint64_t)v5, (uint64_t)v4);
  swift_beginAccess();
  outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v4, a1 + 24, &demangling cache variable for type metadata for Subscription?);
  return swift_endAccess();
}

uint64_t PluginRpcStream.InputSubscriber.receive(_:)(uint64_t a1)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v1 + 160))();
  if (v3)
  {
    PluginRpcStream.sendNextRequest(_:)(a1);
    uint64_t v3 = swift_release();
  }
  return MEMORY[0x1F40D6900](v3);
}

uint64_t PluginRpcStream.InputSubscriber.receive(completion:)()
{
  uint64_t v1 = type metadata accessor for NWConnection.SendCompletion();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v1);
  uint64_t v5 = (uint64_t *)((char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 160))(v3);
  if (v6)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 184))(v6);
    uint64_t v6 = swift_release();
    if (v7)
    {
      type metadata accessor for NWConnection.ContentContext();
      static NWConnection.ContentContext.finalMessage.getter();
      void *v5 = destructiveProjectEnumData for ActivitySession.Errors;
      v5[1] = 0;
      (*(void (**)(void *, void, uint64_t))(v2 + 104))(v5, *MEMORY[0x1E4F389D8], v1);
      NWConnection.send(content:contentContext:isComplete:completion:)();
      swift_release();
      swift_release();
      uint64_t v6 = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v5, v1);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v0 + 216))(v6);
}

Swift::Void __swiftcall PluginRpcStream.InputSubscriber.requestNextMessage()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 16));
  swift_beginAccess();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0 + 24, (uint64_t)&v2, &demangling cache variable for type metadata for Subscription?);
  if (v3)
  {
    outlined init with take of BackgroundSessionManagerDataSource(&v2, (uint64_t)v4);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 16));
    __swift_project_boxed_opaque_existential_1(v4, v4[3]);
    dispatch thunk of Subscription.request(_:)();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v4);
  }
  else
  {
    outlined destroy of UUID?((uint64_t)&v2, &demangling cache variable for type metadata for Subscription?);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 16));
  }
}

Swift::Void __swiftcall PluginRpcStream.InputSubscriber.resetSubscription()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 16));
  closure #1 in PluginRpcStream.InputSubscriber.resetSubscription()(v0);
  long long v2 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_unlock(v2);
}

uint64_t closure #1 in PluginRpcStream.InputSubscriber.resetSubscription()(uint64_t a1)
{
  uint64_t v1 = a1 + 24;
  uint64_t v4 = 0;
  memset(v3, 0, sizeof(v3));
  swift_beginAccess();
  outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v3, v1, &demangling cache variable for type metadata for Subscription?);
  return swift_endAccess();
}

uint64_t PluginRpcStream.InputSubscriber.deinit()
{
  swift_release();
  outlined destroy of UUID?(v0 + 24, &demangling cache variable for type metadata for Subscription?);
  swift_weakDestroy();
  return v0;
}

uint64_t PluginRpcStream.InputSubscriber.__deallocating_deinit()
{
  PluginRpcStream.InputSubscriber.deinit();
  return swift_deallocClassInstance();
}

uint64_t PluginRpcStream.InputSubscriber.init()()
{
  type metadata accessor for Lock();
  uint64_t v1 = swift_allocObject();
  long long v2 = (_DWORD *)swift_slowAlloc();
  *(void *)(v1 + 16) = v2;
  *long long v2 = 0;
  *(void *)(v0 + 16) = v1;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(void *)(v0 + 56) = 0;
  swift_weakInit();
  return v0;
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance PluginRpcStream<A, B>.InputSubscriber()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 184))();
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance PluginRpcStream<A, B>.InputSubscriber()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192))();
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance PluginRpcStream<A, B>.InputSubscriber(unsigned __int8 *a1)
{
  return (*(uint64_t (**)(void))(**(void **)v1 + 200))(*a1);
}

uint64_t protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance PluginRpcStream<A1, B1>.InputSubscriber()
{
  return CustomCombineIdentifierConvertible<>.combineIdentifier.getter();
}

uint64_t PluginRpcStream.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v7 = *(_OWORD *)(*(void *)v3 + 96);
  long long v12 = *(_OWORD *)(*(void *)v3 + 80);
  uint64_t v13 = v7;
  uint64_t v8 = type metadata accessor for PluginRpcStream.OutputSubscription();
  swift_allocObject();
  uint64_t v9 = swift_retain();
  uint64_t v10 = specialized PluginRpcStream.OutputSubscription.init<A>(stream:subscriber:)(v9, a1, a2, a3);
  uint64_t v14 = v8;
  uint64_t WitnessTable = swift_getWitnessTable();
  *(void *)&long long v12 = v10;
  dispatch thunk of Subscriber.receive(subscription:)();
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v12);
}

uint64_t PluginRpcStream.OutputSubscription.cancel()()
{
  uint64_t v3 = 0;
  memset(v2, 0, sizeof(v2));
  swift_beginAccess();
  outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v2, v0 + 24, &demangling cache variable for type metadata for Cancellable?);
  return swift_endAccess();
}

uint64_t PluginRpcStream.OutputSubscription.__deallocating_deinit()
{
  swift_release();
  outlined destroy of UUID?(v0 + 24, &demangling cache variable for type metadata for Cancellable?);
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Cancellable.cancel() in conformance PluginRpcStream<A, B>.OutputSubscription()
{
  return PluginRpcStream.OutputSubscription.cancel()();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance PluginRpcStream<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PluginRpcStream.receive<A>(subscriber:)(a1, a2, a3);
}

uint64_t PluginRpcStream.description.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  long long v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0 + direct field offset for PluginRpcStream.traceId, (uint64_t)v3, &demangling cache variable for type metadata for UUID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    outlined destroy of UUID?((uint64_t)v3, &demangling cache variable for type metadata for UUID?);
    uint64_t v8 = *(void *)(v0 + 16);
    swift_bridgeObjectRetain();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
    uint64_t v9 = *(void *)(v0 + 24);
    v14[0] = *(void *)(v0 + 16);
    v14[1] = v9;
    swift_bridgeObjectRetain();
    v10._uint64_t countAndFlagsBits = 10272;
    v10._object = (void *)0xE200000000000000;
    String.append(_:)(v10);
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._uint64_t countAndFlagsBits = 41;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    uint64_t v8 = v14[0];
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return v8;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PluginRpcStream<A, B>()
{
  return PluginRpcStream.description.getter();
}

uint64_t specialized PluginRpcStream.init(definition:input:traceId:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = direct field offset for PluginRpcStream.output;
  type metadata accessor for PluginRpcError();
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PluginRpcError and conformance PluginRpcError, (void (*)(uint64_t))type metadata accessor for PluginRpcError);
  type metadata accessor for PassthroughSubject();
  *(void *)(v3 + v7) = PassthroughSubject.__allocating_init()();
  uint64_t v8 = direct field offset for PluginRpcStream.inputSubscriber;
  type metadata accessor for PluginRpcStream.InputSubscriber();
  uint64_t v9 = swift_allocObject();
  PluginRpcStream.InputSubscriber.init()();
  *(void *)(v4 + v8) = v9;
  *(void *)(v4 + direct field offset for PluginRpcStream.cancellable) = 0;
  *(void *)(v4 + direct field offset for PluginRpcStream.stream) = 0;
  *(void *)(v4 + 16) = v5;
  *(void *)(v4 + 24) = v6;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a3, v4 + direct field offset for PluginRpcStream.traceId, &demangling cache variable for type metadata for UUID?);
  Swift::String v10 = *(void (**)(uint64_t))(**(void **)(v4 + direct field offset for PluginRpcStream.inputSubscriber)
                                       + 168);
  swift_retain();
  uint64_t v11 = swift_retain();
  v10(v11);
  swift_release();
  type metadata accessor for AnyPublisher();
  swift_retain();
  swift_getWitnessTable();
  swift_getWitnessTable();
  Publisher.subscribe<A>(_:)();
  outlined destroy of UUID?(a3, &demangling cache variable for type metadata for UUID?);
  swift_release();
  return v4;
}

uint64_t specialized PluginRpcStream.__allocating_init(definition:input:traceId:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return specialized PluginRpcStream.init(definition:input:traceId:)(a1, a2, a3);
}

uint64_t sub_1B0E58138()
{
  swift_weakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in PluginRpcStream.start(stream:)(uint64_t a1)
{
  return closure #1 in PluginRpcStream.start(stream:)(a1);
}

uint64_t outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t type metadata accessor for PluginRpcStream.OutputSubscription()
{
  return swift_getGenericMetadata();
}

uint64_t specialized PluginRpcStream.OutputSubscription.init<A>(stream:subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = a2;
  uint64_t v7 = *(void **)v4;
  uint64_t v8 = *(void *)(a3 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v4 + 56) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  uint64_t v35 = v4 + 24;
  *(void *)(v4 + 16) = v10;
  uint64_t v12 = *(void *)(v10 + direct field offset for PluginRpcStream.output);
  uint64_t v32 = v10;
  uint64_t v33 = v12;
  v36[0] = v12;
  uint64_t v30 = *(void (**)(char *))(v8 + 16);
  v30(v11);
  uint64_t v13 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v14 = (v13 + 64) & ~v13;
  uint64_t v25 = v14;
  uint64_t v28 = v13 | 7;
  uint64_t v29 = v14 + v9;
  uint64_t v15 = (char *)swift_allocObject();
  uint64_t v34 = v4;
  uint64_t v27 = v7[10];
  *((void *)v15 + 2) = v27;
  uint64_t v26 = v7[11];
  *((void *)v15 + 3) = v26;
  *((void *)v15 + 4) = a3;
  uint64_t v16 = v7[12];
  *((void *)v15 + 5) = v16;
  uint64_t v17 = v7[13];
  *((void *)v15 + 6) = v17;
  *((void *)v15 + 7) = a4;
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v18(&v15[v14], v11, a3);
  ((void (*)(char *, uint64_t, uint64_t))v30)(v11, v31, a3);
  uint64_t v19 = (void *)swift_allocObject();
  uint64_t v20 = v26;
  v19[2] = v27;
  uint64_t v19[3] = v20;
  v19[4] = a3;
  v19[5] = v16;
  uint64_t v21 = (char *)v19 + v25;
  v19[6] = v17;
  v19[7] = a4;
  v18(v21, v11, a3);
  type metadata accessor for PluginRpcError();
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PluginRpcError and conformance PluginRpcError, (void (*)(uint64_t))type metadata accessor for PluginRpcError);
  type metadata accessor for PassthroughSubject();
  swift_retain();
  swift_retain();
  swift_getWitnessTable();
  uint64_t v22 = Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  swift_release();
  v36[3] = type metadata accessor for AnyCancellable();
  v36[4] = MEMORY[0x1E4F1AB08];
  swift_release();
  v36[0] = v22;
  uint64_t v23 = v35;
  swift_beginAccess();
  outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v36, v23, &demangling cache variable for type metadata for Cancellable?);
  swift_endAccess();
  return v34;
}

uint64_t base witness table accessor for CustomCombineIdentifierConvertible in PluginRpcStream<A, B>.InputSubscriber()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in PluginRpcStream<A, B>.InputSubscriber()
{
  return MEMORY[0x1E4FBC278];
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in PluginRpcStream<A, B>()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PluginRpcError and conformance PluginRpcError, (void (*)(uint64_t))type metadata accessor for PluginRpcError);
}

uint64_t sub_1B0E5856C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 160))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0E585B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 168);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1B0E5860C()
{
  return 32;
}

__n128 sub_1B0E58618(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1B0E58624@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 184))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0E58670(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 192);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1B0E586C4()
{
  return 32;
}

__n128 sub_1B0E586D0(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1B0E586DC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 160))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0E58728(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 168);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1B0E5877C()
{
  return 32;
}

__n128 sub_1B0E58788(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void type metadata completion function for PluginRpcStream()
{
  type metadata accessor for UUID?();
  if (v0 <= 0x3F) {
    swift_initClassMetadata2();
  }
}

uint64_t type metadata accessor for PluginRpcStream()
{
  return swift_getGenericMetadata();
}

uint64_t method lookup function for PluginRpcStream(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PluginRpcStream);
}

uint64_t dispatch thunk of PluginRpcStream.cancellable.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of PluginRpcStream.cancellable.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of PluginRpcStream.cancellable.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of PluginRpcStream.stream.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of PluginRpcStream.stream.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of PluginRpcStream.stream.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of PluginRpcStream.__allocating_init(definition:input:traceId:)()
{
  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t dispatch thunk of PluginRpcStream.start(stream:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

void type metadata accessor for UUID?()
{
  if (!lazy cache variable for type metadata for UUID?)
  {
    type metadata accessor for UUID();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UUID?);
    }
  }
}

uint64_t type metadata completion function for PluginRpcStream.InputSubscriber()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for PluginRpcStream.InputSubscriber()
{
  return swift_getGenericMetadata();
}

uint64_t method lookup function for PluginRpcStream.InputSubscriber(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PluginRpcStream.InputSubscriber);
}

uint64_t dispatch thunk of PluginRpcStream.InputSubscriber.rpcStream.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of PluginRpcStream.InputSubscriber.rpcStream.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of PluginRpcStream.InputSubscriber.rpcStream.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of PluginRpcStream.InputSubscriber.receive(subscription:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of PluginRpcStream.InputSubscriber.receive(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of PluginRpcStream.InputSubscriber.receive(completion:)(char a1)
{
  return (*(uint64_t (**)(void))(*(void *)v1 + 200))(a1 & 1);
}

uint64_t dispatch thunk of PluginRpcStream.InputSubscriber.requestNextMessage()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of PluginRpcStream.InputSubscriber.resetSubscription()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of PluginRpcStream.InputSubscriber.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t type metadata completion function for PluginRpcStream.OutputSubscription()
{
  return swift_initClassMetadata2();
}

uint64_t base witness table accessor for Cancellable in PluginRpcStream<A, B>.OutputSubscription()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomCombineIdentifierConvertible in PluginRpcStream<A, B>.OutputSubscription()
{
  return swift_getWitnessTable();
}

uint64_t sub_1B0E58C30()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for closure #1 in PluginRpcStream.receiveNextResponse()(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return closure #1 in PluginRpcStream.receiveNextResponse()(a1, a2, a3, a4, a5, v5[6], v5[2], v5[3], v5[4], v5[5]);
}

uint64_t outlined init with take of PluginRpcError(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of PluginRpcError(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of PluginRpcError(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t partial apply for closure #1 in PluginRpcStream.OutputSubscription.init<A>(stream:subscriber:)()
{
  return dispatch thunk of Subscriber.receive(completion:)();
}

uint64_t objectdestroy_19Tm()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 32) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 64) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  return MEMORY[0x1F4186498](v0, v4, v5);
}

uint64_t partial apply for closure #2 in PluginRpcStream.OutputSubscription.init<A>(stream:subscriber:)()
{
  return dispatch thunk of Subscriber.receive(_:)();
}

uint64_t partial apply for closure #1 in PluginRpcStream.sendNextRequest(_:)(uint64_t a1)
{
  return closure #1 in PluginRpcStream.sendNextRequest(_:)(a1, v1);
}

uint64_t lazy protocol witness table accessor for type UUID and conformance UUID(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of Subscription?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in PluginRpcStream.sendPath()(uint64_t a1)
{
  closure #1 in PluginRpcStream.sendPath()(a1, v1);
}

Swift::Void __swiftcall SharableObjectIdentifier.update(_:)(Swift::Bool a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  Swift::Bool v1 = a1;
  MEMORY[0x1B3EA1CC0](&v1, &v2);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type SHA256 and conformance SHA256(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x1E4F25170]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
}

uint64_t specialized SharableObjectIdentifier.update<A>(_:)(uint64_t a1, uint64_t a2)
{
  v14[5] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = type metadata accessor for String.Encoding();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[3] = a1;
  void v14[4] = a2;
  static String.Encoding.utf8.getter();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v8 = StringProtocol.data(using:allowLossyConversion:)();
  unint64_t v10 = v9;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (v10 >> 60 == 15) {
LABEL_11:
  }
    __break(1u);
  switch(v10 >> 62)
  {
    case 1uLL:
      if (v8 >> 32 < (int)v8)
      {
        __break(1u);
        goto LABEL_11;
      }
      outlined copy of Data._Representation(v8, v10);
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v8, v8 >> 32);
LABEL_9:
      outlined consume of Data?(v8, v10);
      return outlined consume of Data?(v8, v10);
    case 2uLL:
      uint64_t v11 = *(void *)(v8 + 16);
      uint64_t v12 = *(void *)(v8 + 24);
      outlined copy of Data?(v8, v10);
      swift_retain();
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v11, v12);
      swift_release();
      swift_release();
      goto LABEL_9;
    case 3uLL:
      type metadata accessor for SHA256();
      lazy protocol witness table accessor for type SHA256 and conformance SHA256(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x1E4F25170]);
      memset(v14, 0, 14);
      goto LABEL_8;
    default:
      v14[0] = v8;
      LOWORD(v14[1]) = v10;
      BYTE2(v14[1]) = BYTE2(v10);
      BYTE3(v14[1]) = BYTE3(v10);
      BYTE4(v14[1]) = BYTE4(v10);
      BYTE5(v14[1]) = BYTE5(v10);
      type metadata accessor for SHA256();
      lazy protocol witness table accessor for type SHA256 and conformance SHA256(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x1E4F25170]);
LABEL_8:
      dispatch thunk of HashFunction.update(bufferPointer:)();
      goto LABEL_9;
  }
}

uint64_t SharableObjectIdentifier.update<A>(_:)()
{
  v10[3] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = type metadata accessor for String.Encoding();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter();
  uint64_t v4 = StringProtocol.data(using:allowLossyConversion:)();
  unint64_t v6 = v5;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v6 >> 60 == 15) {
LABEL_11:
  }
    __break(1u);
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v4 >> 32 < (int)v4)
      {
        __break(1u);
        goto LABEL_11;
      }
      outlined copy of Data._Representation(v4, v6);
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v4, v4 >> 32);
LABEL_9:
      outlined consume of Data?(v4, v6);
      return outlined consume of Data?(v4, v6);
    case 2uLL:
      uint64_t v7 = *(void *)(v4 + 16);
      uint64_t v8 = *(void *)(v4 + 24);
      outlined copy of Data?(v4, v6);
      swift_retain();
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v7, v8);
      swift_release();
      swift_release();
      goto LABEL_9;
    case 3uLL:
      type metadata accessor for SHA256();
      lazy protocol witness table accessor for type SHA256 and conformance SHA256(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x1E4F25170]);
      memset(v10, 0, 14);
      goto LABEL_8;
    default:
      v10[0] = v4;
      LOWORD(v10[1]) = v6;
      BYTE2(v10[1]) = BYTE2(v6);
      BYTE3(v10[1]) = BYTE3(v6);
      BYTE4(v10[1]) = BYTE4(v6);
      BYTE5(v10[1]) = BYTE5(v6);
      type metadata accessor for SHA256();
      lazy protocol witness table accessor for type SHA256 and conformance SHA256(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x1E4F25170]);
LABEL_8:
      dispatch thunk of HashFunction.update(bufferPointer:)();
      goto LABEL_9;
  }
}

Swift::Void __swiftcall SharableObjectIdentifier.update(_:)(Swift::Double a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  Swift::Double v1 = a1;
  MEMORY[0x1B3EA1CC0](&v1, &v2);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type SHA256 and conformance SHA256(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x1E4F25170]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
}

Swift::Void __swiftcall SharableObjectIdentifier.update(_:)(Swift::Float a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  Swift::Float v1 = a1;
  MEMORY[0x1B3EA1CC0](&v1, &v2);
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type SHA256 and conformance SHA256(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x1E4F25170]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
}

uint64_t SharableObjectIdentifier.update<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in SharableObjectIdentifier.update<A>(_:), (uint64_t)&v9, a2, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], a8);
}

uint64_t static SharableObjectIdentifier.identifier<A>(ofType:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for SharableObjectIdentifier();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  SHA256.init()();
  specialized SharableObjectIdentifier.update<A>(_:)(a2, a3);
  SharableObjectIdentifier.finalize<A>()(a4, a5);
  return outlined destroy of SharableObjectIdentifier((uint64_t)v11);
}

uint64_t SharableObjectIdentifier.finalize<A>()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SHA256Digest();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v12 - v9;
  SHA256.finalize()();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
  (*(void (**)(char *, uint64_t, uint64_t))(a2 + 8))(v8, a1, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
}

uint64_t static SharableObjectIdentifier.identifier<A, B>(ofType:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = type metadata accessor for SharableObjectIdentifier();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SharableObjectIdentifierEncoder();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  SharableObjectIdentifierEncoder.encode<A>(_:)((uint64_t)v11);
  uint64_t result = swift_release();
  if (!v6)
  {
    SharableObjectIdentifier.finalize<A>()(a4, a6);
    return outlined destroy of SharableObjectIdentifier((uint64_t)v11);
  }
  return result;
}

uint64_t SharableObjectIdentifier.update<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SHA256();
  uint64_t v7 = lazy protocol witness table accessor for type SHA256 and conformance SHA256(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x1E4F25170]);
  return MEMORY[0x1F40DFF50](a1, v6, a2, v7, a3);
}

uint64_t closure #1 in SharableObjectIdentifier.update<A>(_:)()
{
  return dispatch thunk of HashFunction.update(bufferPointer:)();
}

uint64_t _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = MEMORY[0x1F4188790]();
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v16(v12, v12 + *(void *)(*(void *)(v15 - 8) + 64), v14);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  }
  return result;
}

uint64_t UUID.init(digest:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8));
  SHA256Digest.withUnsafeBytes<A>(_:)();
  UUID.init(uuid:)();
  uint64_t v2 = type metadata accessor for SHA256Digest();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
}

_OWORD *closure #1 in UUID.init(digest:)@<X0>(_OWORD *result@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (result)
  {
    if (a2 - (uint64_t)result >= 16)
    {
      *a3 = *result;
      return result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t SecureHashTruncatable<>.init(digest:)(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  dispatch thunk of static FixedWidthInteger.bitWidth.getter();
  SHA256Digest.withUnsafeBytes<A>(_:)();
  uint64_t v3 = type metadata accessor for SHA256Digest();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
}

uint64_t specialized closure #1 in SecureHashTruncatable<>.init(digest:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a4 == a5)
  {
    uint64_t v5 = a2 - result;
    if (!result) {
      uint64_t v5 = 0;
    }
    if (v5 >= a4)
    {
      lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer();
      return DataProtocol.copyBytes(to:count:)();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;

  if (a4 == a5)
  {
    uint64_t v5 = a2 - result;
    if (!result) {
      uint64_t v5 = 0;
    }
    if (v5 >= a4)
    {
      lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer();
      return DataProtocol.copyBytes(to:count:)();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;

  if (a4 == a5)
  {
    uint64_t v5 = a2 - result;
    if (!result) {
      uint64_t v5 = 0;
    }
    if (v5 >= a4)
    {
      lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer();
      return DataProtocol.copyBytes(to:count:)();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;

  if (a4 == a5)
  {
    uint64_t v5 = a2 - result;
    if (!result) {
      uint64_t v5 = 0;
    }
    if (v5 >= a4)
    {
      lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer();
      return DataProtocol.copyBytes(to:count:)();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in SecureHashTruncatable<>.init(digest:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a3 == a4)
  {
    uint64_t v6 = a6 - a5;
    if (!a5) {
      uint64_t v6 = 0;
    }
    if (v6 >= a3)
    {
      lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer();
      return DataProtocol.copyBytes(to:count:)();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t _ss22withUnsafeMutableBytes2of_q0_xz_q0_Swq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = MEMORY[0x1F4188790]();
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v16(v12, v12 + *(void *)(*(void *)(v15 - 8) + 64), v14);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  }
  return result;
}

uint64_t protocol witness for SecureHashTruncatable.init(digest:) in conformance Int@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return protocol witness for SecureHashTruncatable.init(digest:) in conformance Int(a1, a2);
}

{
  uint64_t v4;
  uint64_t result;
  void v6[4];
  int64x2_t v7;
  uint64_t v8;

  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  v6[3] = v6;
  uint64_t v7 = vdupq_n_s64(8uLL);
  SHA256Digest.withUnsafeBytes<A>(_:)();
  uint64_t v4 = type metadata accessor for SHA256Digest();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  *a2 = v6[0];
  return result;
}

uint64_t protocol witness for SecureHashTruncatable.init(digest:) in conformance UInt@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return protocol witness for SecureHashTruncatable.init(digest:) in conformance Int(a1, a2);
}

uint64_t protocol witness for SecureHashTruncatable.init(digest:) in conformance Int8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return protocol witness for SecureHashTruncatable.init(digest:) in conformance Int8(a1, a2);
}

{
  uint64_t v4;
  uint64_t result;
  char v6;
  char *v7;
  int64x2_t v8;
  uint64_t v9;

  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = vdupq_n_s64(1uLL);
  SHA256Digest.withUnsafeBytes<A>(_:)();
  uint64_t v4 = type metadata accessor for SHA256Digest();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  *a2 = v6;
  return result;
}

uint64_t protocol witness for SecureHashTruncatable.init(digest:) in conformance UInt8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return protocol witness for SecureHashTruncatable.init(digest:) in conformance Int8(a1, a2);
}

uint64_t protocol witness for SecureHashTruncatable.init(digest:) in conformance Int16@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  return protocol witness for SecureHashTruncatable.init(digest:) in conformance Int16(a1, a2);
}

{
  uint64_t v4;
  uint64_t result;
  __int16 v6;
  __int16 *v7;
  int64x2_t v8;
  uint64_t v9;

  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = vdupq_n_s64(2uLL);
  SHA256Digest.withUnsafeBytes<A>(_:)();
  uint64_t v4 = type metadata accessor for SHA256Digest();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  *a2 = v6;
  return result;
}

uint64_t protocol witness for SecureHashTruncatable.init(digest:) in conformance UInt16@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  return protocol witness for SecureHashTruncatable.init(digest:) in conformance Int16(a1, a2);
}

uint64_t protocol witness for SecureHashTruncatable.init(digest:) in conformance Int32@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return protocol witness for SecureHashTruncatable.init(digest:) in conformance Int32(a1, a2);
}

{
  uint64_t v4;
  uint64_t result;
  int v6;
  int *v7;
  int64x2_t v8;
  uint64_t v9;

  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = vdupq_n_s64(4uLL);
  SHA256Digest.withUnsafeBytes<A>(_:)();
  uint64_t v4 = type metadata accessor for SHA256Digest();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  *a2 = v6;
  return result;
}

uint64_t protocol witness for SecureHashTruncatable.init(digest:) in conformance UInt32@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return protocol witness for SecureHashTruncatable.init(digest:) in conformance Int32(a1, a2);
}

uint64_t String.init(digest:)(uint64_t a1)
{
  _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF9CryptoKit12SHA256DigestV_SSs5NeverOTg5031_sSS14CopresenceCoreE6digestSS9d5Kit12fG21V_tcfcSSs5UInt8VXEfU_Tf1cn_n(a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v2 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v3 = type metadata accessor for SHA256Digest();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF9CryptoKit12SHA256DigestV_SSs5NeverOTg5031_sSS14CopresenceCoreE6digestSS9d5Kit12fG21V_tcfcSSs5UInt8VXEfU_Tf1cn_n(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SHA256Digest();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type SHA256 and conformance SHA256(&lazy protocol witness table cache variable for type SHA256Digest and conformance SHA256Digest, MEMORY[0x1E4F24F80]);
  uint64_t v6 = dispatch thunk of Sequence.underestimatedCount.getter();
  uint64_t v37 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 & ~(v6 >> 63), 0);
  uint64_t v7 = v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  uint64_t result = dispatch thunk of Sequence.makeIterator()();
  if ((v6 & 0x8000000000000000) == 0)
  {
    unint64_t v9 = v36;
    if (v6)
    {
      uint64_t v10 = *(void *)(v35 + 16);
      uint64_t v33 = v35;
      *(void *)&long long v34 = v10;
      uint64_t v32 = v35 + 32;
      long long v31 = xmmword_1B1138A80;
      unint64_t v11 = v36;
      while ((void)v34 != v11)
      {
        if ((v9 & 0x8000000000000000) != 0) {
          goto LABEL_21;
        }
        if (v11 >= *(void *)(v33 + 16)) {
          goto LABEL_22;
        }
        char v12 = *(unsigned char *)(v32 + v11);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v13 = swift_allocObject();
        *(_OWORD *)(v13 + 16) = v31;
        *(void *)(v13 + 56) = MEMORY[0x1E4FBC358];
        *(void *)(v13 + 64) = MEMORY[0x1E4FBC3B0];
        *(unsigned char *)(v13 + 32) = v12;
        uint64_t result = String.init(format:_:)();
        uint64_t v14 = result;
        uint64_t v16 = v15;
        uint64_t v37 = v7;
        unint64_t v18 = *(void *)(v7 + 16);
        unint64_t v17 = *(void *)(v7 + 24);
        if (v18 >= v17 >> 1)
        {
          uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
          uint64_t v7 = v37;
        }
        *(void *)(v7 + 16) = v18 + 1;
        uint64_t v19 = v7 + 16 * v18;
        *(void *)(v19 + 32) = v14;
        *(void *)(v19 + 40) = v16;
        ++v11;
        if (!--v6)
        {
          unint64_t v36 = v11;
          goto LABEL_12;
        }
      }
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
    }
    else
    {
      unint64_t v11 = v36;
LABEL_12:
      uint64_t v20 = v35;
      unint64_t v21 = *(void *)(v35 + 16);
      if (v11 == v21)
      {
LABEL_13:
        swift_bridgeObjectRelease();
        return v7;
      }
      long long v34 = xmmword_1B1138A80;
      while (v11 < v21)
      {
        char v22 = *(unsigned char *)(v20 + 32 + v11);
        unint64_t v36 = v11 + 1;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v23 = swift_allocObject();
        *(_OWORD *)(v23 + 16) = v34;
        *(void *)(v23 + 56) = MEMORY[0x1E4FBC358];
        *(void *)(v23 + 64) = MEMORY[0x1E4FBC3B0];
        *(unsigned char *)(v23 + 32) = v22;
        uint64_t result = String.init(format:_:)();
        uint64_t v24 = result;
        uint64_t v26 = v25;
        uint64_t v37 = v7;
        unint64_t v28 = *(void *)(v7 + 16);
        unint64_t v27 = *(void *)(v7 + 24);
        if (v28 >= v27 >> 1)
        {
          uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
          uint64_t v7 = v37;
        }
        *(void *)(v7 + 16) = v28 + 1;
        uint64_t v29 = v7 + 16 * v28;
        *(void *)(v29 + 32) = v24;
        *(void *)(v29 + 40) = v26;
        unint64_t v11 = v36;
        unint64_t v21 = *(void *)(v20 + 16);
        if (v36 == v21) {
          goto LABEL_13;
        }
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for SecureHashTruncatable.init(digest:) in conformance String@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF9CryptoKit12SHA256DigestV_SSs5NeverOTg5031_sSS14CopresenceCoreE6digestSS9d5Kit12fG21V_tcfcSSs5UInt8VXEfU_Tf1cn_n(a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v4 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for SHA256Digest();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a1, v7);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  a2[1] = v6;
  return result;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for SHA256();
      lazy protocol witness table accessor for type SHA256 and conformance SHA256(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x1E4F25170]);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t result;

  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for Insecure.MD5();
      lazy protocol witness table accessor for type Insecure.MD5Digest and conformance Insecure.MD5Digest(&lazy protocol witness table cache variable for type Insecure.MD5 and conformance Insecure.MD5, MEMORY[0x1E4F251D8]);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in SharableObjectIdentifier.update<A>(_:)()
{
  return closure #1 in SharableObjectIdentifier.update<A>(_:)();
}

uint64_t type metadata accessor for SharableObjectIdentifier()
{
  uint64_t result = type metadata singleton initialization cache for SharableObjectIdentifier;
  if (!type metadata singleton initialization cache for SharableObjectIdentifier) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t partial apply for closure #1 in SecureHashTruncatable<>.init(digest:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(v8 + 16);
  uint64_t v10 = *(void *)(v8 + 40);
  v12[1] = *(_OWORD *)(v8 + 48);
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  return _ss22withUnsafeMutableBytes2of_q0_xz_q0_Swq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v10, (uint64_t)partial apply for closure #1 in closure #1 in SecureHashTruncatable<>.init(digest:), (uint64_t)v12, v9, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], a8);
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

uint64_t dispatch thunk of SecureHashTruncatable.init(digest:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t initializeBufferWithCopyOfBuffer for SharableObjectIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SHA256();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  return v5(a1, a2, v4);
}

uint64_t destroy for SharableObjectIdentifier(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SHA256();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t initializeWithCopy for SharableObjectIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SHA256();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for SharableObjectIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SHA256();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for SharableObjectIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SHA256();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for SharableObjectIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SHA256();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SharableObjectIdentifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0E5B548);
}

uint64_t sub_1B0E5B548(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SHA256();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for SharableObjectIdentifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0E5B5C8);
}

uint64_t sub_1B0E5B5C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SHA256();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for SharableObjectIdentifier()
{
  uint64_t result = type metadata accessor for SHA256();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer()
{
  unint64_t result = lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer;
  if (!lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer);
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in SecureHashTruncatable<>.init(digest:)(uint64_t a1, uint64_t a2)
{
  return specialized closure #1 in SecureHashTruncatable<>.init(digest:)(a1, a2, v2[2], v2[3], v2[4]);
}

{
  uint64_t *v2;

  return specialized closure #1 in SecureHashTruncatable<>.init(digest:)(a1, a2, v2[2], v2[3], v2[4]);
}

{
  uint64_t *v2;

  return specialized closure #1 in SecureHashTruncatable<>.init(digest:)(a1, a2, v2[2], v2[3], v2[4]);
}

{
  uint64_t *v2;

  return specialized closure #1 in SecureHashTruncatable<>.init(digest:)(a1, a2, v2[2], v2[3], v2[4]);
}

{
  return partial apply for specialized closure #1 in SecureHashTruncatable<>.init(digest:)(a1, a2);
}

{
  return partial apply for specialized closure #1 in SecureHashTruncatable<>.init(digest:)(a1, a2);
}

{
  return partial apply for specialized closure #1 in SecureHashTruncatable<>.init(digest:)(a1, a2);
}

{
  return partial apply for specialized closure #1 in SecureHashTruncatable<>.init(digest:)(a1, a2);
}

uint64_t lazy protocol witness table accessor for type SHA256 and conformance SHA256(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in SecureHashTruncatable<>.init(digest:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in closure #1 in SecureHashTruncatable<>.init(digest:)(a1, a2, v2[2], v2[3], v2[4], v2[5]);
}

uint64_t GroupActivityDescription.id.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GroupActivityDescription.actionDescription.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GroupActivityDescription.ongoingDescription.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GroupActivityDescription.completedDescription.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GroupActivityDescription.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int GroupActivityDescription.hashValue.getter()
{
  return Hasher._finalize()();
}

void __swiftcall GroupActivityDescription.init(id:actionDescription:ongoingDescription:completedDescription:)(CopresenceCore::GroupActivityDescription *__return_ptr retstr, Swift::String id, Swift::String actionDescription, Swift::String ongoingDescription, Swift::String completedDescription)
{
  retstr->id = id;
  retstr->actionDescription = actionDescription;
  retstr->ongoingDescription = ongoingDescription;
  retstr->completedDescription = completedDescription;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GroupActivityDescription()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GroupActivityDescription()
{
  return Hasher._finalize()();
}

void one-time initialization function for generic()
{
  uint64_t v0 = (void *)*MEMORY[0x1E4FADE68];
  type metadata accessor for ConversationManagerHost();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v2 = self;
  id v3 = v0;
  id v4 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v22._object = (void *)0xE000000000000000;
  v5._uint64_t countAndFlagsBits = 0x4F545F4552414853;
  v5._object = (void *)0xEE00524548544547;
  v6.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v6.value._object = (void *)0xEE0065726F436563;
  v7._uint64_t countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v22._uint64_t countAndFlagsBits = 0;
  Swift::String v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v22);

  id v9 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v23._object = (void *)0xE000000000000000;
  v10._object = (void *)0x80000001B115CDF0;
  v10._uint64_t countAndFlagsBits = 0xD000000000000010;
  v11.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v11.value._object = (void *)0xEE0065726F436563;
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v23._uint64_t countAndFlagsBits = 0;
  Swift::String v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v23);

  id v14 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v24._object = (void *)0xE000000000000000;
  v15._uint64_t countAndFlagsBits = 0x545F444552414853;
  v15._object = (void *)0xEF5245485445474FLL;
  v16.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v16.value._object = (void *)0xEE0065726F436563;
  v17._uint64_t countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v24._uint64_t countAndFlagsBits = 0;
  Swift::String v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, (NSBundle)v14, v17, v24);

  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;

  static GroupActivityDescription.generic = v19;
  *(void *)algn_1E9B56028 = v21;
  xmmword_1E9B56030 = (__int128)v8;
  xmmword_1E9B56040 = (__int128)v13;
  xmmword_1E9B56050 = (__int128)v18;
}

void GroupActivityDescription.init(id:actionDescription:ongoingDescription:completedDescription:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  *a8 = v16;
  a8[1] = v18;
  a8[2] = a2;
  a8[3] = a3;
  a8[4] = a4;
  a8[5] = a5;
  a8[6] = a6;
  a8[7] = a7;
}

uint64_t static GroupActivityDescription.generic.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for generic != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_1E9B56028;
  long long v3 = xmmword_1E9B56030;
  long long v4 = xmmword_1E9B56040;
  long long v5 = xmmword_1E9B56050;
  *(void *)a1 = static GroupActivityDescription.generic;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void one-time initialization function for collaboration()
{
  uint64_t v0 = (void *)*MEMORY[0x1E4FADE50];
  type metadata accessor for ConversationManagerHost();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v2 = self;
  id v3 = v0;
  id v4 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v22._object = (void *)0xE000000000000000;
  v5._object = (void *)0x80000001B115CD90;
  v5._uint64_t countAndFlagsBits = 0xD000000000000014;
  v6.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v6.value._object = (void *)0xEE0065726F436563;
  v7._uint64_t countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v22._uint64_t countAndFlagsBits = 0;
  Swift::String v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v22);

  id v9 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v10._uint64_t countAndFlagsBits = 0xD000000000000016;
  v23._object = (void *)0xE000000000000000;
  v10._object = (void *)0x80000001B115CDB0;
  v11.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v11.value._object = (void *)0xEE0065726F436563;
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v23._uint64_t countAndFlagsBits = 0;
  Swift::String v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v23);

  id v14 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v15._uint64_t countAndFlagsBits = 0xD000000000000015;
  v24._object = (void *)0xE000000000000000;
  v15._object = (void *)0x80000001B115CDD0;
  v16.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v16.value._object = (void *)0xEE0065726F436563;
  v17._uint64_t countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v24._uint64_t countAndFlagsBits = 0;
  Swift::String v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, (NSBundle)v14, v17, v24);

  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;

  static GroupActivityDescription.collaboration = v19;
  *(void *)algn_1E9B56068 = v21;
  xmmword_1E9B56070 = (__int128)v8;
  xmmword_1E9B56080 = (__int128)v13;
  xmmword_1E9B56090 = (__int128)v18;
}

uint64_t static GroupActivityDescription.collaboration.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for collaboration != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_1E9B56068;
  long long v3 = xmmword_1E9B56070;
  long long v4 = xmmword_1E9B56080;
  long long v5 = xmmword_1E9B56090;
  *(void *)a1 = static GroupActivityDescription.collaboration;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void one-time initialization function for listenTogether()
{
  uint64_t v0 = (void *)*MEMORY[0x1E4FADE78];
  type metadata accessor for ConversationManagerHost();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v2 = self;
  id v3 = v0;
  id v4 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v22._object = (void *)0xE000000000000000;
  v5._uint64_t countAndFlagsBits = 0x545F4E455453494CLL;
  v5._object = (void *)0xEF5245485445474FLL;
  v6.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v6.value._object = (void *)0xEE0065726F436563;
  v7._uint64_t countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v22._uint64_t countAndFlagsBits = 0;
  Swift::String v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v22);

  id v9 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v10._uint64_t countAndFlagsBits = 0xD000000000000012;
  v23._object = (void *)0xE000000000000000;
  v10._object = (void *)0x80000001B115CD50;
  v11.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v11.value._object = (void *)0xEE0065726F436563;
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v23._uint64_t countAndFlagsBits = 0;
  Swift::String v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v23);

  id v14 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v24._object = (void *)0xE000000000000000;
  v15._object = (void *)0x80000001B115CD70;
  v15._uint64_t countAndFlagsBits = 0xD000000000000011;
  v16.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v16.value._object = (void *)0xEE0065726F436563;
  v17._uint64_t countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v24._uint64_t countAndFlagsBits = 0;
  Swift::String v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, (NSBundle)v14, v17, v24);

  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;

  static GroupActivityDescription.listenTogether = v19;
  *(void *)algn_1E9B560A8 = v21;
  xmmword_1E9B560B0 = (__int128)v8;
  xmmword_1E9B560C0 = (__int128)v13;
  xmmword_1E9B560D0 = (__int128)v18;
}

uint64_t static GroupActivityDescription.listenTogether.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for listenTogether != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_1E9B560A8;
  long long v3 = xmmword_1E9B560B0;
  long long v4 = xmmword_1E9B560C0;
  long long v5 = xmmword_1E9B560D0;
  *(void *)a1 = static GroupActivityDescription.listenTogether;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void one-time initialization function for watchTogether()
{
  uint64_t v0 = (void *)*MEMORY[0x1E4FADEA0];
  type metadata accessor for ConversationManagerHost();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v2 = self;
  id v3 = v0;
  id v4 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v22._object = (void *)0xE000000000000000;
  v5._uint64_t countAndFlagsBits = 0x4F545F4843544157;
  v5._object = (void *)0xEE00524548544547;
  v6.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v6.value._object = (void *)0xEE0065726F436563;
  v7._uint64_t countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v22._uint64_t countAndFlagsBits = 0;
  Swift::String v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v22);

  id v9 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v10._uint64_t countAndFlagsBits = 0xD000000000000011;
  v23._object = (void *)0xE000000000000000;
  v10._object = (void *)0x80000001B115CD10;
  v11.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v11.value._object = (void *)0xEE0065726F436563;
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v23._uint64_t countAndFlagsBits = 0;
  Swift::String v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v23);

  id v14 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v24._object = (void *)0xE000000000000000;
  v15._object = (void *)0x80000001B115CD30;
  v15._uint64_t countAndFlagsBits = 0xD000000000000010;
  v16.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v16.value._object = (void *)0xEE0065726F436563;
  v17._uint64_t countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v24._uint64_t countAndFlagsBits = 0;
  Swift::String v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, (NSBundle)v14, v17, v24);

  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;

  static GroupActivityDescription.watchTogether = v19;
  *(void *)algn_1E9B560E8 = v21;
  xmmword_1E9B560F0 = (__int128)v8;
  xmmword_1E9B56100 = (__int128)v13;
  xmmword_1E9B56110 = (__int128)v18;
}

uint64_t static GroupActivityDescription.watchTogether.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for watchTogether != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_1E9B560E8;
  long long v3 = xmmword_1E9B560F0;
  long long v4 = xmmword_1E9B56100;
  long long v5 = xmmword_1E9B56110;
  *(void *)a1 = static GroupActivityDescription.watchTogether;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void one-time initialization function for playTogether()
{
  uint64_t v0 = (void *)*MEMORY[0x1E4FADE80];
  type metadata accessor for ConversationManagerHost();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v2 = self;
  id v3 = v0;
  id v4 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v22._object = (void *)0xE000000000000000;
  v5._uint64_t countAndFlagsBits = 0x474F545F59414C50;
  v5._object = (void *)0xED00005245485445;
  v6.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v6.value._object = (void *)0xEE0065726F436563;
  v7._uint64_t countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v22._uint64_t countAndFlagsBits = 0;
  Swift::String v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v22);

  id v9 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v23._object = (void *)0xE000000000000000;
  v10._object = (void *)0x80000001B115CCF0;
  v10._uint64_t countAndFlagsBits = 0xD000000000000010;
  v11.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v11.value._object = (void *)0xEE0065726F436563;
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v23._uint64_t countAndFlagsBits = 0;
  Swift::String v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v23);

  id v14 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v24._object = (void *)0xE000000000000000;
  v15._uint64_t countAndFlagsBits = 0x545F444559414C50;
  v15._object = (void *)0xEF5245485445474FLL;
  v16.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v16.value._object = (void *)0xEE0065726F436563;
  v17._uint64_t countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v24._uint64_t countAndFlagsBits = 0;
  Swift::String v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, (NSBundle)v14, v17, v24);

  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;

  static GroupActivityDescription.playTogether = v19;
  *(void *)algn_1E9B56128 = v21;
  xmmword_1E9B56130 = (__int128)v8;
  xmmword_1E9B56140 = (__int128)v13;
  xmmword_1E9B56150 = (__int128)v18;
}

uint64_t static GroupActivityDescription.playTogether.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for playTogether != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_1E9B56128;
  long long v3 = xmmword_1E9B56130;
  long long v4 = xmmword_1E9B56140;
  long long v5 = xmmword_1E9B56150;
  *(void *)a1 = static GroupActivityDescription.playTogether;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void one-time initialization function for workoutTogether()
{
  uint64_t v0 = (void *)*MEMORY[0x1E4FADEA8];
  type metadata accessor for ConversationManagerHost();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v2 = self;
  id v3 = v0;
  id v4 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v22._object = (void *)0xE000000000000000;
  v5._object = (void *)0x80000001B115CC90;
  v5._uint64_t countAndFlagsBits = 0xD000000000000011;
  v6.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v6.value._object = (void *)0xEE0065726F436563;
  v7._uint64_t countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v22._uint64_t countAndFlagsBits = 0;
  Swift::String v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v22);

  id v9 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v10._uint64_t countAndFlagsBits = 0xD000000000000013;
  v23._object = (void *)0xE000000000000000;
  v10._object = (void *)0x80000001B115CCB0;
  v11.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v11.value._object = (void *)0xEE0065726F436563;
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v23._uint64_t countAndFlagsBits = 0;
  Swift::String v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v23);

  id v14 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v15._uint64_t countAndFlagsBits = 0xD000000000000012;
  v24._object = (void *)0xE000000000000000;
  v15._object = (void *)0x80000001B115CCD0;
  v16.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v16.value._object = (void *)0xEE0065726F436563;
  v17._uint64_t countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v24._uint64_t countAndFlagsBits = 0;
  Swift::String v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, (NSBundle)v14, v17, v24);

  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;

  static GroupActivityDescription.workoutTogether = v19;
  *(void *)algn_1E9B56168 = v21;
  xmmword_1E9B56170 = (__int128)v8;
  xmmword_1E9B56180 = (__int128)v13;
  xmmword_1E9B56190 = (__int128)v18;
}

uint64_t static GroupActivityDescription.workoutTogether.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for workoutTogether != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_1E9B56168;
  long long v3 = xmmword_1E9B56170;
  long long v4 = xmmword_1E9B56180;
  long long v5 = xmmword_1E9B56190;
  *(void *)a1 = static GroupActivityDescription.workoutTogether;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void one-time initialization function for shopTogether()
{
  uint64_t v0 = (void *)*MEMORY[0x1E4FADE98];
  type metadata accessor for ConversationManagerHost();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v2 = self;
  id v3 = v0;
  id v4 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v22._object = (void *)0xE000000000000000;
  v5._uint64_t countAndFlagsBits = 0x474F545F504F4853;
  v5._object = (void *)0xED00005245485445;
  v6.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v6.value._object = (void *)0xEE0065726F436563;
  v7._uint64_t countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v22._uint64_t countAndFlagsBits = 0;
  Swift::String v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v22);

  id v9 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v10._uint64_t countAndFlagsBits = 0xD000000000000011;
  v23._object = (void *)0xE000000000000000;
  v10._object = (void *)0x80000001B115CC50;
  v11.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v11.value._object = (void *)0xEE0065726F436563;
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v23._uint64_t countAndFlagsBits = 0;
  Swift::String v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v23);

  id v14 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v24._object = (void *)0xE000000000000000;
  v15._object = (void *)0x80000001B115CC70;
  v15._uint64_t countAndFlagsBits = 0xD000000000000010;
  v16.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v16.value._object = (void *)0xEE0065726F436563;
  v17._uint64_t countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v24._uint64_t countAndFlagsBits = 0;
  Swift::String v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, (NSBundle)v14, v17, v24);

  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;

  static GroupActivityDescription.shopTogether = v19;
  *(void *)algn_1E9B561A8 = v21;
  xmmword_1E9B561B0 = (__int128)v8;
  xmmword_1E9B561C0 = (__int128)v13;
  xmmword_1E9B561D0 = (__int128)v18;
}

uint64_t static GroupActivityDescription.shopTogether.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for shopTogether != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_1E9B561A8;
  long long v3 = xmmword_1E9B561B0;
  long long v4 = xmmword_1E9B561C0;
  long long v5 = xmmword_1E9B561D0;
  *(void *)a1 = static GroupActivityDescription.shopTogether;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void one-time initialization function for readTogether()
{
  uint64_t v0 = (void *)*MEMORY[0x1E4FADE88];
  type metadata accessor for ConversationManagerHost();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v2 = self;
  id v3 = v0;
  id v4 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v22._object = (void *)0xE000000000000000;
  v5._uint64_t countAndFlagsBits = 0x474F545F44414552;
  v5._object = (void *)0xED00005245485445;
  v6.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v6.value._object = (void *)0xEE0065726F436563;
  v7._uint64_t countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v22._uint64_t countAndFlagsBits = 0;
  Swift::String v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v22);

  id v9 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v23._object = (void *)0xE000000000000000;
  v10._object = (void *)0x80000001B115CC10;
  v10._uint64_t countAndFlagsBits = 0xD000000000000010;
  v11.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v11.value._object = (void *)0xEE0065726F436563;
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v23._uint64_t countAndFlagsBits = 0;
  Swift::String v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v23);

  id v14 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v15._uint64_t countAndFlagsBits = 0xD000000000000017;
  v24._object = (void *)0xE000000000000000;
  v15._object = (void *)0x80000001B115CC30;
  v16.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v16.value._object = (void *)0xEE0065726F436563;
  v17._uint64_t countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v24._uint64_t countAndFlagsBits = 0;
  Swift::String v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, (NSBundle)v14, v17, v24);

  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;

  static GroupActivityDescription.readTogether = v19;
  *(void *)algn_1E9B561E8 = v21;
  xmmword_1E9B561F0 = (__int128)v8;
  xmmword_1E9B56200 = (__int128)v13;
  xmmword_1E9B56210 = (__int128)v18;
}

uint64_t static GroupActivityDescription.readTogether.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for readTogether != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_1E9B561E8;
  long long v3 = xmmword_1E9B561F0;
  long long v4 = xmmword_1E9B56200;
  long long v5 = xmmword_1E9B56210;
  *(void *)a1 = static GroupActivityDescription.readTogether;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void one-time initialization function for exploreTogether()
{
  uint64_t v0 = (void *)*MEMORY[0x1E4FADE60];
  type metadata accessor for ConversationManagerHost();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v2 = self;
  id v3 = v0;
  id v4 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v22._object = (void *)0xE000000000000000;
  v5._object = (void *)0x80000001B115CBB0;
  v5._uint64_t countAndFlagsBits = 0xD000000000000010;
  v6.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v6.value._object = (void *)0xEE0065726F436563;
  v7._uint64_t countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v22._uint64_t countAndFlagsBits = 0;
  Swift::String v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v22);

  id v9 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v10._uint64_t countAndFlagsBits = 0xD000000000000012;
  v23._object = (void *)0xE000000000000000;
  v10._object = (void *)0x80000001B115CBD0;
  v11.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v11.value._object = (void *)0xEE0065726F436563;
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v23._uint64_t countAndFlagsBits = 0;
  Swift::String v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v23);

  id v14 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v15._uint64_t countAndFlagsBits = 0xD000000000000011;
  v24._object = (void *)0xE000000000000000;
  v15._object = (void *)0x80000001B115CBF0;
  v16.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v16.value._object = (void *)0xEE0065726F436563;
  v17._uint64_t countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v24._uint64_t countAndFlagsBits = 0;
  Swift::String v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, (NSBundle)v14, v17, v24);

  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;

  static GroupActivityDescription.exploreTogether = v19;
  *(void *)algn_1E9B56228 = v21;
  xmmword_1E9B56230 = (__int128)v8;
  xmmword_1E9B56240 = (__int128)v13;
  xmmword_1E9B56250 = (__int128)v18;
}

uint64_t static GroupActivityDescription.exploreTogether.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for exploreTogether != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_1E9B56228;
  long long v3 = xmmword_1E9B56230;
  long long v4 = xmmword_1E9B56240;
  long long v5 = xmmword_1E9B56250;
  *(void *)a1 = static GroupActivityDescription.exploreTogether;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void one-time initialization function for learnTogether()
{
  uint64_t v0 = (void *)*MEMORY[0x1E4FADE70];
  type metadata accessor for ConversationManagerHost();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v2 = self;
  id v3 = v0;
  id v4 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v22._object = (void *)0xE000000000000000;
  v5._uint64_t countAndFlagsBits = 0x4F545F4E5241454CLL;
  v5._object = (void *)0xEE00524548544547;
  v6.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v6.value._object = (void *)0xEE0065726F436563;
  v7._uint64_t countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v22._uint64_t countAndFlagsBits = 0;
  Swift::String v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v22);

  id v9 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v10._uint64_t countAndFlagsBits = 0xD000000000000011;
  v23._object = (void *)0xE000000000000000;
  v10._object = (void *)0x80000001B115CB70;
  v11.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v11.value._object = (void *)0xEE0065726F436563;
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v23._uint64_t countAndFlagsBits = 0;
  Swift::String v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v23);

  id v14 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v24._object = (void *)0xE000000000000000;
  v15._object = (void *)0x80000001B115CB90;
  v15._uint64_t countAndFlagsBits = 0xD000000000000010;
  v16.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v16.value._object = (void *)0xEE0065726F436563;
  v17._uint64_t countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v24._uint64_t countAndFlagsBits = 0;
  Swift::String v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, (NSBundle)v14, v17, v24);

  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;

  static GroupActivityDescription.learnTogether = v19;
  *(void *)algn_1E9B56268 = v21;
  xmmword_1E9B56270 = (__int128)v8;
  xmmword_1E9B56280 = (__int128)v13;
  xmmword_1E9B56290 = (__int128)v18;
}

uint64_t static GroupActivityDescription.learnTogether.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for learnTogether != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_1E9B56268;
  long long v3 = xmmword_1E9B56270;
  long long v4 = xmmword_1E9B56280;
  long long v5 = xmmword_1E9B56290;
  *(void *)a1 = static GroupActivityDescription.learnTogether;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void one-time initialization function for createTogether()
{
  uint64_t v0 = (void *)*MEMORY[0x1E4FADE58];
  type metadata accessor for ConversationManagerHost();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v2 = self;
  id v3 = v0;
  id v4 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v22._object = (void *)0xE000000000000000;
  v5._uint64_t countAndFlagsBits = 0x545F455441455243;
  v5._object = (void *)0xEF5245485445474FLL;
  v6.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v6.value._object = (void *)0xEE0065726F436563;
  v7._uint64_t countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v22._uint64_t countAndFlagsBits = 0;
  Swift::String v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v22);

  id v9 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v10._uint64_t countAndFlagsBits = 0xD000000000000011;
  v23._object = (void *)0xE000000000000000;
  v10._object = (void *)0x80000001B115CB30;
  v11.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v11.value._object = (void *)0xEE0065726F436563;
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v23._uint64_t countAndFlagsBits = 0;
  Swift::String v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v23);

  id v14 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v24._object = (void *)0xE000000000000000;
  v15._object = (void *)0x80000001B115CB50;
  v15._uint64_t countAndFlagsBits = 0xD000000000000010;
  v16.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v16.value._object = (void *)0xEE0065726F436563;
  v17._uint64_t countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v24._uint64_t countAndFlagsBits = 0;
  Swift::String v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, (NSBundle)v14, v17, v24);

  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;

  static GroupActivityDescription.createTogether = v19;
  *(void *)algn_1E9B562A8 = v21;
  xmmword_1E9B562B0 = (__int128)v8;
  xmmword_1E9B562C0 = (__int128)v13;
  xmmword_1E9B562D0 = (__int128)v18;
}

uint64_t static GroupActivityDescription.createTogether.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for createTogether != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_1E9B562A8;
  long long v3 = xmmword_1E9B562B0;
  long long v4 = xmmword_1E9B562C0;
  long long v5 = xmmword_1E9B562D0;
  *(void *)a1 = static GroupActivityDescription.createTogether;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void one-time initialization function for screenSharing()
{
  uint64_t v0 = (void *)*MEMORY[0x1E4FADE90];
  type metadata accessor for ConversationManagerHost();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v2 = self;
  id v3 = v0;
  id v4 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v22._object = (void *)0xE000000000000000;
  v5._uint64_t countAndFlagsBits = 0x535F4E4545524353;
  v5._object = (void *)0xEC00000045524148;
  v6.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v6.value._object = (void *)0xEE0065726F436563;
  v7._uint64_t countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v22._uint64_t countAndFlagsBits = 0;
  Swift::String v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v22);

  id v9 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v23._object = (void *)0xE000000000000000;
  v10._uint64_t countAndFlagsBits = 0x535F4E4545524353;
  v10._object = (void *)0xEE00474E49524148;
  v11.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v11.value._object = (void *)0xEE0065726F436563;
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v23._uint64_t countAndFlagsBits = 0;
  Swift::String v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v23);

  id v14 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v24._object = (void *)0xE000000000000000;
  v15._uint64_t countAndFlagsBits = 0x535F4E4545524353;
  v15._object = (void *)0xED00004445524148;
  v16.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v16.value._object = (void *)0xEE0065726F436563;
  v17._uint64_t countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v24._uint64_t countAndFlagsBits = 0;
  Swift::String v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, (NSBundle)v14, v17, v24);

  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;

  static GroupActivityDescription.screenSharing = v19;
  *(void *)algn_1E9B562E8 = v21;
  xmmword_1E9B562F0 = (__int128)v8;
  xmmword_1E9B56300 = (__int128)v13;
  xmmword_1E9B56310 = (__int128)v18;
}

uint64_t static GroupActivityDescription.screenSharing.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for screenSharing != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_1E9B562E8;
  long long v3 = xmmword_1E9B562F0;
  long long v4 = xmmword_1E9B56300;
  long long v5 = xmmword_1E9B56310;
  *(void *)a1 = static GroupActivityDescription.screenSharing;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t one-time initialization function for allCases()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<GroupActivityDescription>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B113A670;
  if (one-time initialization token for generic != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)algn_1E9B56028;
  long long v2 = xmmword_1E9B56030;
  long long v3 = xmmword_1E9B56040;
  long long v4 = xmmword_1E9B56050;
  *(void *)(v0 + 32) = static GroupActivityDescription.generic;
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v0 + 48) = v2;
  *(_OWORD *)(v0 + 64) = v3;
  *(_OWORD *)(v0 + 80) = v4;
  uint64_t v5 = one-time initialization token for watchTogether;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v6 = *(void *)algn_1E9B560E8;
  long long v7 = xmmword_1E9B560F0;
  long long v8 = xmmword_1E9B56100;
  long long v9 = xmmword_1E9B56110;
  *(void *)(v0 + 96) = static GroupActivityDescription.watchTogether;
  *(void *)(v0 + 104) = v6;
  *(_OWORD *)(v0 + 112) = v7;
  *(_OWORD *)(v0 + 128) = v8;
  *(_OWORD *)(v0 + 144) = v9;
  uint64_t v10 = one-time initialization token for listenTogether;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v10 != -1) {
    swift_once();
  }
  uint64_t v11 = *(void *)algn_1E9B560A8;
  long long v12 = xmmword_1E9B560B0;
  long long v13 = xmmword_1E9B560C0;
  long long v14 = xmmword_1E9B560D0;
  *(void *)(v0 + 160) = static GroupActivityDescription.listenTogether;
  *(void *)(v0 + 168) = v11;
  *(_OWORD *)(v0 + 176) = v12;
  *(_OWORD *)(v0 + 192) = v13;
  *(_OWORD *)(v0 + 208) = v14;
  uint64_t v15 = one-time initialization token for playTogether;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v15 != -1) {
    swift_once();
  }
  uint64_t v16 = *(void *)algn_1E9B56128;
  long long v17 = xmmword_1E9B56130;
  long long v18 = xmmword_1E9B56140;
  long long v19 = xmmword_1E9B56150;
  *(void *)(v0 + 224) = static GroupActivityDescription.playTogether;
  *(void *)(v0 + 232) = v16;
  *(_OWORD *)(v0 + 240) = v17;
  *(_OWORD *)(v0 + 256) = v18;
  *(_OWORD *)(v0 + 272) = v19;
  uint64_t v20 = one-time initialization token for workoutTogether;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v20 != -1) {
    swift_once();
  }
  uint64_t v21 = *(void *)algn_1E9B56168;
  long long v22 = xmmword_1E9B56170;
  long long v23 = xmmword_1E9B56180;
  long long v24 = xmmword_1E9B56190;
  *(void *)(v0 + 288) = static GroupActivityDescription.workoutTogether;
  *(void *)(v0 + 296) = v21;
  *(_OWORD *)(v0 + 304) = v22;
  *(_OWORD *)(v0 + 320) = v23;
  *(_OWORD *)(v0 + 336) = v24;
  uint64_t v25 = one-time initialization token for screenSharing;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v25 != -1) {
    swift_once();
  }
  uint64_t v26 = *(void *)algn_1E9B562E8;
  long long v27 = xmmword_1E9B562F0;
  long long v28 = xmmword_1E9B56300;
  long long v29 = xmmword_1E9B56310;
  *(void *)(v0 + 352) = static GroupActivityDescription.screenSharing;
  *(void *)(v0 + 360) = v26;
  *(_OWORD *)(v0 + 368) = v27;
  *(_OWORD *)(v0 + 384) = v28;
  *(_OWORD *)(v0 + 400) = v29;
  uint64_t v30 = one-time initialization token for shopTogether;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v30 != -1) {
    swift_once();
  }
  uint64_t v31 = *(void *)algn_1E9B561A8;
  long long v32 = xmmword_1E9B561B0;
  long long v33 = xmmword_1E9B561C0;
  long long v34 = xmmword_1E9B561D0;
  *(void *)(v0 + 416) = static GroupActivityDescription.shopTogether;
  *(void *)(v0 + 424) = v31;
  *(_OWORD *)(v0 + 432) = v32;
  *(_OWORD *)(v0 + 448) = v33;
  *(_OWORD *)(v0 + 464) = v34;
  uint64_t v35 = one-time initialization token for readTogether;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v35 != -1) {
    swift_once();
  }
  uint64_t v36 = *(void *)algn_1E9B561E8;
  long long v37 = xmmword_1E9B561F0;
  long long v38 = xmmword_1E9B56200;
  long long v39 = xmmword_1E9B56210;
  *(void *)(v0 + 480) = static GroupActivityDescription.readTogether;
  *(void *)(v0 + 488) = v36;
  *(_OWORD *)(v0 + 496) = v37;
  *(_OWORD *)(v0 + 512) = v38;
  *(_OWORD *)(v0 + 528) = v39;
  uint64_t v40 = one-time initialization token for exploreTogether;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v40 != -1) {
    swift_once();
  }
  uint64_t v41 = *(void *)algn_1E9B56228;
  long long v42 = xmmword_1E9B56230;
  long long v43 = xmmword_1E9B56240;
  long long v44 = xmmword_1E9B56250;
  *(void *)(v0 + 544) = static GroupActivityDescription.exploreTogether;
  *(void *)(v0 + 552) = v41;
  *(_OWORD *)(v0 + 560) = v42;
  *(_OWORD *)(v0 + 576) = v43;
  *(_OWORD *)(v0 + 592) = v44;
  uint64_t v45 = one-time initialization token for learnTogether;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v45 != -1) {
    swift_once();
  }
  uint64_t v46 = *(void *)algn_1E9B56268;
  long long v47 = xmmword_1E9B56270;
  long long v48 = xmmword_1E9B56280;
  long long v49 = xmmword_1E9B56290;
  *(void *)(v0 + 608) = static GroupActivityDescription.learnTogether;
  *(void *)(v0 + 616) = v46;
  *(_OWORD *)(v0 + 624) = v47;
  *(_OWORD *)(v0 + 640) = v48;
  *(_OWORD *)(v0 + 656) = v49;
  uint64_t v50 = one-time initialization token for createTogether;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v50 != -1) {
    swift_once();
  }
  uint64_t v51 = *(void *)algn_1E9B562A8;
  long long v52 = xmmword_1E9B562B0;
  long long v53 = xmmword_1E9B562C0;
  long long v54 = xmmword_1E9B562D0;
  *(void *)(v0 + 672) = static GroupActivityDescription.createTogether;
  *(void *)(v0 + 680) = v51;
  *(_OWORD *)(v0 + 688) = v52;
  *(_OWORD *)(v0 + 704) = v53;
  *(_OWORD *)(v0 + 720) = v54;
  static GroupActivityDescription.allCases = (_UNKNOWN *)v0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static GroupActivityDescription.allCases.getter()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static GroupActivityDescription.allCases.setter(void *a1)
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  static GroupActivityDescription.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static GroupActivityDescription.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance GroupActivityDescription@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  *a1 = static GroupActivityDescription.allCases;
  return swift_bridgeObjectRetain();
}

void __swiftcall GroupActivityDescription.init(id:)(CopresenceCore::GroupActivityDescription_optional *__return_ptr retstr, Swift::String id)
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v2 = *((void *)static GroupActivityDescription.allCases + 2);
  if (v2)
  {
    long long v3 = (uint64_t *)((char *)static GroupActivityDescription.allCases + 48);
    while (1)
    {
      uint64_t countAndFlagsBits = *(v3 - 2);
      object = (void *)*(v3 - 1);
      uint64_t v7 = *v3;
      uint64_t v6 = (void *)v3[1];
      uint64_t v9 = v3[2];
      long long v8 = (void *)v3[3];
      uint64_t v10 = v3[4];
      uint64_t v11 = (void *)v3[5];
      if (countAndFlagsBits == id._countAndFlagsBits && object == id._object) {
        break;
      }
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        goto LABEL_13;
      }
      v3 += 8;
      if (!--v2) {
        goto LABEL_11;
      }
    }
    uint64_t countAndFlagsBits = id._countAndFlagsBits;
    object = id._object;
LABEL_13:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    retstr->value.id._uint64_t countAndFlagsBits = countAndFlagsBits;
    retstr->value.id._object = object;
    retstr->value.actionDescription._uint64_t countAndFlagsBits = v7;
    retstr->value.actionDescription._object = v6;
    retstr->value.ongoingDescription._uint64_t countAndFlagsBits = v9;
    retstr->value.ongoingDescription._object = v8;
    retstr->value.completedDescription._uint64_t countAndFlagsBits = v10;
    retstr->value.completedDescription._object = v11;
  }
  else
  {
LABEL_11:
    swift_bridgeObjectRelease();
    retstr->value.ongoingDescription = 0u;
    retstr->value.completedDescription = 0u;
    retstr->value.id = 0u;
    retstr->value.actionDescription = 0u;
  }
}

uint64_t GroupActivityDescription.init(id:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v2;
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v3 = *((void *)static GroupActivityDescription.allCases + 2);
  if (v3)
  {
    long long v4 = (uint64_t *)((char *)static GroupActivityDescription.allCases + 48);
    while (1)
    {
      uint64_t v5 = *(v4 - 2);
      uint64_t v6 = *(v4 - 1);
      uint64_t v8 = *v4;
      uint64_t v7 = v4[1];
      uint64_t v9 = v4[2];
      uint64_t v10 = v4[3];
      uint64_t v11 = v4[4];
      uint64_t v12 = v4[5];
      if (v5 == v17 && v6 == v18) {
        break;
      }
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        goto LABEL_13;
      }
      v4 += 8;
      if (!--v3) {
        goto LABEL_11;
      }
    }
    uint64_t v5 = v17;
    uint64_t v6 = v18;
LABEL_13:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();

    uint64_t result = swift_bridgeObjectRelease();
    *a2 = v5;
    a2[1] = v6;
    a2[2] = v8;
    a2[3] = v7;
    a2[4] = v9;
    a2[5] = v10;
    a2[6] = v11;
    a2[7] = v12;
  }
  else
  {
LABEL_11:

    uint64_t result = swift_bridgeObjectRelease();
    *((_OWORD *)a2 + 2) = 0u;
    *((_OWORD *)a2 + 3) = 0u;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  return result;
}

uint64_t TUConversationActivityContextIdentifier.isMedia.getter()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    goto LABEL_12;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) == 0)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
    if (v7 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v9 != v10)
    {
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
LABEL_13:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v6 & 1;
    }
LABEL_12:
    char v6 = 1;
    goto LABEL_13;
  }
  char v6 = 1;
  return v6 & 1;
}

id GroupActivityDescription.tuActivityContext.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v6 = v0[5];
  uint64_t v8 = v0[6];
  uint64_t v7 = v0[7];
  id v9 = objc_allocWithZone(MEMORY[0x1E4FADB30]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v10 = (void *)MEMORY[0x1B3EA1B00](v1, v2);
  swift_bridgeObjectRelease();
  uint64_t v11 = (void *)MEMORY[0x1B3EA1B00](v3, v4);
  swift_bridgeObjectRelease();
  uint64_t v12 = (void *)MEMORY[0x1B3EA1B00](v5, v6);
  swift_bridgeObjectRelease();
  long long v13 = (void *)MEMORY[0x1B3EA1B00](v8, v7);
  swift_bridgeObjectRelease();
  id v14 = objc_msgSend(v9, sel_initWithContextIdentifier_actionDescription_ongoingDescription_completedDescription_, v10, v11, v12, v13);

  return v14;
}

id CPGroupActivityDescription.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id CPGroupActivityDescription.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CPGroupActivityDescription();
  return objc_msgSendSuper2(&v2, sel_init);
}

id CPGroupActivityDescription.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CPGroupActivityDescription();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t specialized static GroupActivityDescription.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v16 = a1[6];
  uint64_t v17 = a1[7];
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v11 = a2[6];
  uint64_t v10 = a2[7];
  if (*a1 == *a2 && a1[1] == a2[1]
    || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v12 & 1) != 0))
  {
    if (v2 == v6 && v4 == v7 || (v14 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v14 & 1) != 0))
    {
      if (v3 == v8 && v5 == v9 || (v15 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v15 & 1) != 0))
      {
        if (v16 == v11 && v17 == v10)
        {
          return 1;
        }
        else
        {
          return _stringCompareWithSmolCheck(_:_:expecting:)();
        }
      }
    }
  }
  return result;
}

id specialized static CPGroupActivityDescription.activityContext(with:)(void *a1)
{
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v2;
  uint64_t v3 = one-time initialization token for allCases;
  id v4 = a1;
  if (v3 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v5 = *((void *)static GroupActivityDescription.allCases + 2);
  if (v5)
  {
    long long v23 = v4;
    uint64_t v6 = (uint64_t *)((char *)static GroupActivityDescription.allCases + 48);
    while (1)
    {
      uint64_t v8 = *(v6 - 2);
      uint64_t v7 = *(v6 - 1);
      uint64_t v10 = *v6;
      uint64_t v9 = v6[1];
      uint64_t v12 = v6[2];
      uint64_t v11 = v6[3];
      uint64_t v14 = v6[4];
      uint64_t v13 = v6[5];
      if (v8 == v24 && v7 == v25) {
        break;
      }
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        goto LABEL_15;
      }
      v6 += 8;
      if (!--v5)
      {

        goto LABEL_13;
      }
    }
    uint64_t v8 = v24;
    uint64_t v7 = v25;
LABEL_15:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();

    swift_bridgeObjectRelease();
    id v17 = objc_allocWithZone(MEMORY[0x1E4FADB30]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v18 = (void *)MEMORY[0x1B3EA1B00](v8, v7);
    swift_bridgeObjectRelease();
    long long v19 = (void *)MEMORY[0x1B3EA1B00](v10, v9);
    swift_bridgeObjectRelease();
    uint64_t v20 = (void *)MEMORY[0x1B3EA1B00](v12, v11);
    swift_bridgeObjectRelease();
    uint64_t v21 = (void *)MEMORY[0x1B3EA1B00](v14, v13);
    swift_bridgeObjectRelease();
    id v16 = objc_msgSend(v17, sel_initWithContextIdentifier_actionDescription_ongoingDescription_completedDescription_, v18, v19, v20, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {

LABEL_13:
    swift_bridgeObjectRelease();
    return 0;
  }
  return v16;
}

uint64_t type metadata accessor for CPGroupActivityDescription()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type GroupActivityDescription and conformance GroupActivityDescription()
{
  unint64_t result = lazy protocol witness table cache variable for type GroupActivityDescription and conformance GroupActivityDescription;
  if (!lazy protocol witness table cache variable for type GroupActivityDescription and conformance GroupActivityDescription)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupActivityDescription and conformance GroupActivityDescription);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [GroupActivityDescription] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [GroupActivityDescription] and conformance [A];
  if (!lazy protocol witness table cache variable for type [GroupActivityDescription] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GroupActivityDescription]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [GroupActivityDescription] and conformance [A]);
  }
  return result;
}

uint64_t destroy for GroupActivityDescription()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for GroupActivityDescription(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for GroupActivityDescription(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void *assignWithTake for GroupActivityDescription(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupActivityDescription(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GroupActivityDescription(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t method lookup function for CPGroupActivityDescription(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CPGroupActivityDescription);
}

uint64_t dispatch thunk of static CPGroupActivityDescription.activityContext(with:)()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t SimulatedDataCryptor.encryptionKeyID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR___CPSimulatedDataCryptor_encryptionKeyID;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SimulatedDataCryptor.encryptionKeyID.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR___CPSimulatedDataCryptor_encryptionKeyID;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t key path setter for SimulatedDataCryptor.encryptionKeyID : SimulatedDataCryptor(uint64_t a1, void **a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x68))(v6);
}

uint64_t (*SimulatedDataCryptor.encryptionKeyID.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

uint64_t SimulatedDataCryptor.decryptionKeyIDSet.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SimulatedDataCryptor.decryptionKeyIDSet.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___CPSimulatedDataCryptor_decryptionKeyIDSet);
  swift_beginAccess();
  void *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*SimulatedDataCryptor.decryptionKeyIDSet.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t SimulatedDataCryptor.encryptData(_:seqNum:)(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = result;
    outlined copy of Data._Representation(result, a2);
    return v2;
  }
  return result;
}

id SimulatedDataCryptor.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id SimulatedDataCryptor.init()()
{
  id v1 = v0;
  UUID.init()();
  uint64_t v2 = OBJC_IVAR___CPSimulatedDataCryptor_decryptionKeyIDSet;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>);
  type metadata accessor for UUID();
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B1138A80;
  UUID.init()();
  *(void *)&v1[v2] = v3;

  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for SimulatedDataCryptor();
  return objc_msgSendSuper2(&v5, sel_init);
}

uint64_t type metadata accessor for SimulatedDataCryptor()
{
  uint64_t result = type metadata singleton initialization cache for SimulatedDataCryptor;
  if (!type metadata singleton initialization cache for SimulatedDataCryptor) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t static SimulatedDataCryptor.supportsSecureCoding.getter()
{
  return static SimulatedDataCryptor.supportsSecureCoding;
}

uint64_t static SimulatedDataCryptor.supportsSecureCoding.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  static SimulatedDataCryptor.supportsSecureCoding = a1;
  return result;
}

uint64_t (*static SimulatedDataCryptor.supportsSecureCoding.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

id SimulatedDataCryptor.__allocating_init(coder:)(void *a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  UUID.init()();
  uint64_t v4 = OBJC_IVAR___CPSimulatedDataCryptor_decryptionKeyIDSet;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>);
  type metadata accessor for UUID();
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1B1138A80;
  UUID.init()();
  *(void *)&v3[v4] = v5;

  v8.receiver = v3;
  v8.super_class = v1;
  id v6 = objc_msgSendSuper2(&v8, sel_init);

  return v6;
}

id SimulatedDataCryptor.init(coder:)(void *a1)
{
  uint64_t v3 = v1;
  UUID.init()();
  uint64_t v4 = OBJC_IVAR___CPSimulatedDataCryptor_decryptionKeyIDSet;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>);
  type metadata accessor for UUID();
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1B1138A80;
  UUID.init()();
  *(void *)&v3[v4] = v5;

  v8.receiver = v3;
  v8.super_class = (Class)type metadata accessor for SimulatedDataCryptor();
  id v6 = objc_msgSendSuper2(&v8, sel_init);

  return v6;
}

id SimulatedDataCryptor.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SimulatedDataCryptor();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1B0E60400(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x60))();
}

uint64_t sub_1B0E60458@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x78))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0E604B4(uint64_t a1, void **a2)
{
  objc_super v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x80);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t ObjC metadata update function for SimulatedDataCryptor()
{
  return type metadata accessor for SimulatedDataCryptor();
}

uint64_t type metadata completion function for SimulatedDataCryptor()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for SimulatedDataCryptor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SimulatedDataCryptor);
}

uint64_t dispatch thunk of SimulatedDataCryptor.encryptionKeyID.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of SimulatedDataCryptor.encryptionKeyID.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of SimulatedDataCryptor.encryptionKeyID.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of SimulatedDataCryptor.decryptionKeyIDSet.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of SimulatedDataCryptor.decryptionKeyIDSet.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of SimulatedDataCryptor.decryptionKeyIDSet.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of SimulatedDataCryptor.encryptData(_:seqNum:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of SimulatedDataCryptor.decryptData(_:keyID:seqNum:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of SimulatedDataCryptor.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of SimulatedDataCryptor.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t String.localized.getter(uint64_t a1, void *a2)
{
  type metadata accessor for ConversationManagerHost();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v5 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  v11._object = (void *)0xE000000000000000;
  v6._uint64_t countAndFlagsBits = a1;
  v6._object = a2;
  v7.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v7.value._object = (void *)0xEE0065726F436563;
  v8._uint64_t countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v11._uint64_t countAndFlagsBits = 0;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, v7, (NSBundle)v5, v8, v11)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t PluginEndpoint.description.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for NWEndpoint();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  id v5 = (char *)v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PluginEndpoint();
  MEMORY[0x1F4188790](v6);
  Swift::String v8 = (void *)((char *)v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of PluginEndpoint(v1, (uint64_t)v8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = *v8;
    uint64_t v9 = (void *)v8[1];
    uint64_t v11 = v8[2];
    unint64_t v12 = v8[4];
    uint64_t v13 = v8[5];
    if (v12 >> 60 == 15)
    {
      v42[0] = 0;
      v42[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease();
      strcpy((char *)v42, "RelaySession(");
      HIWORD(v42[1]) = -4864;
      v14._uint64_t countAndFlagsBits = v10;
      v14._object = v9;
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      v15._uint64_t countAndFlagsBits = 8236;
      v15._object = (void *)0xE200000000000000;
      String.append(_:)(v15);
      v41[0] = v11;
      v16._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      v17._uint64_t countAndFlagsBits = 8236;
      v17._object = (void *)0xE200000000000000;
      String.append(_:)(v17);
      v41[0] = v13;
      v18._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      v19._uint64_t countAndFlagsBits = 41;
      v19._object = (void *)0xE100000000000000;
      String.append(_:)(v19);
    }
    else
    {
      uint64_t v23 = v8[3];
      v42[0] = 0;
      v42[1] = 0xE000000000000000;
      outlined copy of Data._Representation(v23, v12);
      _StringGuts.grow(_:)(28);
      swift_bridgeObjectRelease();
      strcpy((char *)v42, "RelaySession(");
      HIWORD(v42[1]) = -4864;
      v24._uint64_t countAndFlagsBits = v10;
      v24._object = v9;
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      v25._uint64_t countAndFlagsBits = 8236;
      v25._object = (void *)0xE200000000000000;
      String.append(_:)(v25);
      v41[0] = v11;
      v26._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._uint64_t countAndFlagsBits = 8236;
      v27._object = (void *)0xE200000000000000;
      String.append(_:)(v27);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      id v29 = [(objc_class *)isa tu_URLSafeBase64EncodedString];

      if (v29)
      {
        uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v32 = v31;

        v41[0] = v30;
        v41[1] = v32;
        uint64_t v33 = String.init<A>(reflecting:)();
        unint64_t v35 = v34;
      }
      else
      {
        unint64_t v35 = 0xE300000000000000;
        uint64_t v33 = 7104878;
      }
      unint64_t v36 = v35;
      String.append(_:)(*(Swift::String *)&v33);
      swift_bridgeObjectRelease();
      v37._uint64_t countAndFlagsBits = 8236;
      v37._object = (void *)0xE200000000000000;
      String.append(_:)(v37);
      v41[0] = v13;
      v38._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v38);
      swift_bridgeObjectRelease();
      v39._uint64_t countAndFlagsBits = 41;
      v39._object = (void *)0xE100000000000000;
      String.append(_:)(v39);
      outlined consume of Data?(v23, v12);
      outlined consume of Data?(v23, v12);
    }
    return v42[0];
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v3 + 32))(v5, v8, v2);
    strcpy((char *)v42, "Direct(");
    v42[1] = 0xE700000000000000;
    v20._uint64_t countAndFlagsBits = NWEndpoint.debugDescription.getter();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._uint64_t countAndFlagsBits = 41;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    uint64_t v22 = v42[0];
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return v22;
}

uint64_t type metadata accessor for PluginEndpoint()
{
  uint64_t result = type metadata singleton initialization cache for PluginEndpoint;
  if (!type metadata singleton initialization cache for PluginEndpoint) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with copy of PluginEndpoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PluginEndpoint();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

Swift::Void __swiftcall PluginEndpoint.updateVirtualParticipant(_:localParticipantID:)(Swift::UInt64 _, Swift::UInt64 localParticipantID)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for PluginEndpoint();
  MEMORY[0x1F4188790](v6);
  Swift::String v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PluginEndpoint(v3, (uint64_t)v8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of PluginEndpoint(v3);
    uint64_t v9 = *(void *)v8;
    uint64_t v10 = *((void *)v8 + 1);
    Swift::UInt64 v11 = *((void *)v8 + 2);
    long long v12 = *(_OWORD *)(v8 + 24);
    Swift::UInt64 v13 = *((void *)v8 + 5);
    if (v11 != _ || v13 != localParticipantID)
    {
      long long v23 = *(_OWORD *)(v8 + 24);
      if (one-time initialization token for log != -1) {
        swift_once();
      }
      uint64_t v15 = type metadata accessor for Logger();
      __swift_project_value_buffer(v15, (uint64_t)log);
      Swift::String v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        Swift::String v18 = (_DWORD *)swift_slowAlloc();
        uint64_t v22 = v9;
        Swift::String v19 = v18;
        *Swift::String v18 = 134218752;
        Swift::UInt64 v24 = v11;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *((_WORD *)v19 + 6) = 2048;
        Swift::UInt64 v24 = v13;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *((_WORD *)v19 + 11) = 2048;
        Swift::UInt64 v24 = _;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *((_WORD *)v19 + 16) = 2048;
        Swift::UInt64 v24 = v13;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1B0DF7000, v16, v17, "Updating virtualParticipant, old: [virtualParticipant: %llu, localParticipantID: %llu], new: [virtualParticipant: %llu, localParticipantID: %llu]", (uint8_t *)v19, 0x2Au);
        Swift::String v20 = v19;
        uint64_t v9 = v22;
        MEMORY[0x1B3EA39E0](v20, -1, -1);
      }

      long long v12 = v23;
    }
    *(void *)uint64_t v3 = v9;
    *(void *)(v3 + 8) = v10;
    *(void *)(v3 + 16) = _;
    *(_OWORD *)(v3 + 24) = v12;
    *(void *)(v3 + 40) = localParticipantID;
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    outlined destroy of PluginEndpoint((uint64_t)v8);
  }
}

uint64_t outlined destroy of PluginEndpoint(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PluginEndpoint();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for PluginEndpoint(uint64_t a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    a1 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v6;
      *(void *)(a1 + 16) = a2[2];
      uint64_t v7 = a2 + 3;
      unint64_t v8 = a2[4];
      swift_bridgeObjectRetain();
      if (v8 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 24) = *v7;
      }
      else
      {
        uint64_t v11 = *(void *)v7;
        outlined copy of Data._Representation(v11, v8);
        *(void *)(a1 + 24) = v11;
        *(void *)(a1 + 32) = v8;
      }
      *(void *)(a1 + 40) = a2[5];
    }
    else
    {
      uint64_t v10 = type metadata accessor for NWEndpoint();
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for PluginEndpoint(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v3 = *(void *)(a1 + 32);
    if (v3 >> 60 != 15)
    {
      uint64_t v6 = *(void *)(a1 + 24);
      return outlined consume of Data._Representation(v6, v3);
    }
  }
  else
  {
    uint64_t v4 = type metadata accessor for NWEndpoint();
    int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    return v5(a1, v4);
  }
  return result;
}

uint64_t initializeWithCopy for PluginEndpoint(uint64_t a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = a2[2];
    int v5 = a2 + 3;
    unint64_t v6 = a2[4];
    swift_bridgeObjectRetain();
    if (v6 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 24) = *v5;
    }
    else
    {
      uint64_t v8 = *(void *)v5;
      outlined copy of Data._Representation(v8, v6);
      *(void *)(a1 + 24) = v8;
      *(void *)(a1 + 32) = v6;
    }
    *(void *)(a1 + 40) = a2[5];
  }
  else
  {
    uint64_t v7 = type metadata accessor for NWEndpoint();
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for PluginEndpoint(uint64_t a1, void *a2)
{
  if ((void *)a1 != a2)
  {
    outlined destroy of PluginEndpoint(a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = a2[1];
      *(void *)(a1 + 16) = a2[2];
      uint64_t v4 = a2 + 3;
      unint64_t v5 = a2[4];
      swift_bridgeObjectRetain();
      if (v5 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 24) = *v4;
      }
      else
      {
        uint64_t v7 = *(void *)v4;
        outlined copy of Data._Representation(v7, v5);
        *(void *)(a1 + 24) = v7;
        *(void *)(a1 + 32) = v5;
      }
      *(void *)(a1 + 40) = a2[5];
    }
    else
    {
      uint64_t v6 = type metadata accessor for NWEndpoint();
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for PluginEndpoint(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for NWEndpoint();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for PluginEndpoint(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of PluginEndpoint((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for NWEndpoint();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for PluginEndpoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for PluginEndpoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t destructiveInjectEnumTag for PluginEndpoint()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for PluginEndpoint()
{
  uint64_t result = type metadata accessor for NWEndpoint();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> FastSyncActivitySession.leave()()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (uint64_t *)((char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v5 = *(void **)&v0[OBJC_IVAR___CPActivitySession_queue];
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBCBF0], v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    uint64_t v7 = v0;
    specialized ActivitySession.invalidationBlock(execute:)(v7, (uint64_t)v7);
  }
  else
  {
    __break(1u);
  }
}

uint64_t closure #1 in FastSyncActivitySession.leave()(void *a1)
{
  uint64_t v2 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(unint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x2A0))(&v15);
  uint64_t result = v15;
  if (v15 >> 62 != 2)
  {
LABEL_12:
    outlined consume of ActivitySession.State(v15);
    lazy protocol witness table accessor for type ActivitySession.Errors and conformance ActivitySession.Errors();
    swift_allocError();
    *Swift::UInt64 v13 = 1;
    return swift_willThrow();
  }
  if (v15 != 0x8000000000000000 && v15 != 0x8000000000000008)
  {
    if (v15 == 0x8000000000000010) {
      return result;
    }
    goto LABEL_12;
  }
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Log.host);
  id v6 = a1;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    unint64_t v15 = v14;
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type UUID and conformance UUID();
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, (uint64_t *)&v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v7, v8, "Leaving activity session with identifier %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v14, -1, -1);
    long long v12 = v9;
    uint64_t v2 = (void *)MEMORY[0x1E4FBC8C8];
    MEMORY[0x1B3EA39E0](v12, -1, -1);
  }
  else
  {
  }
  unint64_t v15 = 0x8000000000000010;
  return (*(uint64_t (**)(unint64_t *))((*v2 & *v6) + 0x2A8))(&v15);
}

void FastSyncActivitySession.assertionWillInvalidate(_:)()
{
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Log.host);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_1B0DF7000, oslog, v1, "[Assertion] DomainAssertionObserver assertionWillInvalidate for app.", v2, 2u);
    MEMORY[0x1B3EA39E0](v2, -1, -1);
  }
}

id FastSyncActivitySession.rbsAssertion(for:)(uint64_t a1)
{
  id v1 = objc_msgSend(self, sel_targetWithPid_, a1);
  uint64_t v2 = (void *)MEMORY[0x1B3EA1B00](0xD00000000000001DLL, 0x80000001B115CEE0);
  uint64_t v3 = (void *)MEMORY[0x1B3EA1B00](0x636E795374736146, 0xE800000000000000);
  id v4 = objc_msgSend(self, sel_attributeWithDomain_name_, v2, v3);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1B1138AA0;
  *(void *)(v5 + 32) = v4;
  specialized Array._endMutation()();
  id v6 = objc_allocWithZone(MEMORY[0x1E4F96318]);
  id v7 = v4;
  os_log_type_t v8 = (void *)MEMORY[0x1B3EA1B00](0xD000000000000024, 0x80000001B115AE10);
  type metadata accessor for RBSAttribute();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v10 = objc_msgSend(v6, sel_initWithExplanation_target_attributes_, v8, v1, isa);

  return v10;
}

uint64_t FastSyncActivitySession.activeRemoteParticipant(with:completion:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  id v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  unint64_t v11 = (uint64_t *)((char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  long long v12 = *(void **)((char *)v4 + OBJC_IVAR___CPActivitySession_queue);
  *unint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E4FBCBF0], v8);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  uint64_t v14 = (*(uint64_t (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) == 0)
  {
    __break(1u);
LABEL_16:
    swift_once();
    goto LABEL_6;
  }
  unint64_t v15 = (void *)MEMORY[0x1E4FBC8C8];
  Swift::String v16 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x2D0))(v14);
  id v17 = objc_msgSend(v16, sel_bundleIdentifier);

  if (v17)
  {
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;

    if ((*(uint64_t (**)(void))((*v15 & *v4) + 0x380))())
    {
      uint64_t v22 = v21;
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)(void), uint64_t, uint64_t, uint64_t))(v22 + 40))(a1, v18, v20, a2, a3, ObjectType, v22);
      swift_bridgeObjectRelease();
      return swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Log.default);
    Swift::String v26 = v4;
    Swift::String v27 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v34))
    {
      id v29 = (uint8_t *)swift_slowAlloc();
      unint64_t v35 = (void *)swift_slowAlloc();
      uint64_t v37 = a3;
      Swift::String v38 = v26;
      *(_DWORD *)id v29 = 138412290;
      unint64_t v36 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v35 = v4;

      _os_log_impl(&dword_1B0DF7000, v27, v34, "[Translation] Invalid sessionManager on session: %@", v29, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      uint64_t v32 = v35;
      goto LABEL_12;
    }
LABEL_13:

    Swift::String v27 = v26;
    goto LABEL_14;
  }
  if (one-time initialization token for default != -1) {
    goto LABEL_16;
  }
LABEL_6:
  uint64_t v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Log.default);
  Swift::String v26 = v4;
  Swift::String v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v27, v28)) {
    goto LABEL_13;
  }
  uint64_t v37 = a3;
  id v29 = (uint8_t *)swift_slowAlloc();
  uint64_t v30 = (void *)swift_slowAlloc();
  *(_DWORD *)id v29 = 138412290;
  Swift::String v38 = v26;
  uint64_t v31 = v26;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  void *v30 = v4;

  _os_log_impl(&dword_1B0DF7000, v27, v28, "[Translation] Failed to find bundleIdentifier from activity on session: %@", v29, 0xCu);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  swift_arrayDestroy();
  uint64_t v32 = v30;
LABEL_12:
  MEMORY[0x1B3EA39E0](v32, -1, -1);
  MEMORY[0x1B3EA39E0](v29, -1, -1);
LABEL_14:

  return a2(0);
}

char *FastSyncActivitySession.__allocating_init(activity:id:manager:timestamp:locallyInitiated:lightweightPrimaryInitiated:notificationCenter:)(void (**a1)(void, void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v31 = a8;
  int v39 = a6;
  int v40 = a7;
  uint64_t v35 = a5;
  uint64_t v36 = a2;
  uint64_t v37 = a4;
  Swift::String v38 = a1;
  uint64_t v33 = a3;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v34 = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  Swift::String v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v32 = objc_allocWithZone(v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, a2, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a5, v13);
  outlined init with copy of UserNotificationCenter(a8, (uint64_t)v41);
  uint64_t v21 = v33;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v23 = v42;
  uint64_t v24 = v43;
  uint64_t v25 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v41, v42);
  MEMORY[0x1F4188790](v25);
  Swift::String v27 = (char *)&v31 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v28 + 16))(v27);
  id v29 = specialized ActivitySession.init(activity:id:manager:timestamp:locallyInitiated:lightweightPrimaryInitiated:notificationCenter:)(v38, (uint64_t)v20, v21, (uint64_t)v16, v39, v40, (uint64_t)v27, v32, ObjectType, v23, v37, v24);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v41);
  __swift_destroy_boxed_opaque_existential_1Tm(v31);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v35, v34);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v36, v17);
  return v29;
}

char *FastSyncActivitySession.init(activity:id:manager:timestamp:locallyInitiated:lightweightPrimaryInitiated:notificationCenter:)(void (**a1)(void, void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8)
{
  uint64_t v31 = a8;
  int v37 = a6;
  int v38 = a7;
  uint64_t v33 = a5;
  uint64_t v34 = a2;
  uint64_t v35 = a4;
  uint64_t v36 = a1;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v32 = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a2, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a5, v12);
  outlined init with copy of UserNotificationCenter(a8, (uint64_t)v40);
  uint64_t v20 = a3;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v23 = v41;
  uint64_t v22 = v42;
  uint64_t v24 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v40, v41);
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)&v30 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v27 + 16))(v26);
  uint64_t v28 = specialized ActivitySession.init(activity:id:manager:timestamp:locallyInitiated:lightweightPrimaryInitiated:notificationCenter:)(v36, (uint64_t)v19, v20, (uint64_t)v15, v37, v38, (uint64_t)v26, v39, ObjectType, v23, v35, v22);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v40);
  __swift_destroy_boxed_opaque_existential_1Tm(v31);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v33, v32);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v34, v16);
  return v28;
}

id FastSyncActivitySession.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FastSyncActivitySession();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t type metadata accessor for RBSAttribute()
{
  unint64_t result = lazy cache variable for type metadata for RBSAttribute;
  if (!lazy cache variable for type metadata for RBSAttribute)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for RBSAttribute);
  }
  return result;
}

uint64_t type metadata accessor for FastSyncActivitySession()
{
  uint64_t result = type metadata singleton initialization cache for FastSyncActivitySession;
  if (!type metadata singleton initialization cache for FastSyncActivitySession) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t ObjC metadata update function for FastSyncActivitySession()
{
  return type metadata accessor for FastSyncActivitySession();
}

uint64_t type metadata completion function for FastSyncActivitySession()
{
  return swift_updateClassMetadata2();
}

uint64_t PluginClientMetrics.ConnectionEstablishment.attemptStartedAfterMillis.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t PluginClientMetrics.ConnectionEstablishment.quicHandshakeDurationMillis.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t PluginClientMetrics.ConnectionEstablishment.quicHandshakeRTTMillis.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t PluginClientMetrics.ConnectionEstablishment.init(report:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  specialized PluginClientMetrics.ConnectionEstablishment.init(report:)(a1, (uint64_t)v4);
  return outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)v4, a2, &demangling cache variable for type metadata for PluginClientMetrics.ConnectionEstablishment?);
}

uint64_t PluginClientMetrics.ConnectionEstablishment.rtcReport.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = MEMORY[0x1E4FBC538];
  uint64_t v16 = MEMORY[0x1E4FBC538];
  *(void *)&long long v15 = a1;
  outlined init with take of Any(&v15, v14);
  uint64_t v8 = MEMORY[0x1E4FBC868];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v14, 0xD00000000000001BLL, 0x80000001B115A950, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  uint64_t v16 = v7;
  *(void *)&long long v15 = a2;
  outlined init with take of Any(&v15, v14);
  char v10 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v14, 0xD000000000000018, 0x80000001B115A970, v10);
  swift_bridgeObjectRelease();
  uint64_t v16 = v7;
  *(void *)&long long v15 = a3;
  outlined init with take of Any(&v15, v14);
  char v11 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v14, 0xD000000000000024, 0x80000001B115A990, v11);
  swift_bridgeObjectRelease();
  uint64_t v16 = v7;
  *(void *)&long long v15 = a4;
  outlined init with take of Any(&v15, v14);
  char v12 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v14, 0xD00000000000001FLL, 0x80000001B115A9C0, v12);
  swift_bridgeObjectRelease();
  return v8;
}

unint64_t PluginClientMetrics.ConnectionEstablishment.debugDescription.getter()
{
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 0xD000000000000014;
  v4._object = (void *)0x80000001B115CF30;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 32;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  v6._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  v6._object = (void *)0x80000001B115CF50;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 32;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  v8._object = (void *)0x80000001B115CF70;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 32;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = 0xD000000000000017;
  v10._object = (void *)0x80000001B115CF90;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  return 0xD000000000000019;
}

BOOL static PluginClientMetrics.ConnectionEstablishment.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1 == a5 && a2 == a6 && a3 == a7 && a4 == a8;
}

unint64_t PluginClientMetrics.ConnectionEstablishment.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0xD000000000000013;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000019;
      break;
    case 2:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 3:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys()
{
  return PluginClientMetrics.ConnectionEstablishment.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PluginClientMetrics.ConnectionEstablishment.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PluginClientMetrics.ConnectionEstablishment.CodingKeys and conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PluginClientMetrics.ConnectionEstablishment.CodingKeys and conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t PluginClientMetrics.ConnectionEstablishment.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v12[0] = a5;
  v12[1] = a3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PluginClientMetrics.ConnectionEstablishment.CodingKeys>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  Swift::String v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PluginClientMetrics.ConnectionEstablishment.CodingKeys and conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v16 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    char v15 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v14 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v13 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t PluginClientMetrics.ConnectionEstablishment.init(from:)(void *a1)
{
  uint64_t result = specialized PluginClientMetrics.ConnectionEstablishment.init(from:)(a1);
  if (v1) {
    return v3;
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance PluginClientMetrics.ConnectionEstablishment@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized PluginClientMetrics.ConnectionEstablishment.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PluginClientMetrics.ConnectionEstablishment(void *a1)
{
  return PluginClientMetrics.ConnectionEstablishment.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PluginClientMetrics.ConnectionEstablishment(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PluginClientMetrics.ConnectionEstablishment()
{
  return PluginClientMetrics.ConnectionEstablishment.debugDescription.getter();
}

uint64_t PluginClientMetrics.ConnectionDataTransfer.totalDurationMillis.getter()
{
  return *(void *)v0;
}

uint64_t PluginClientMetrics.ConnectionDataTransfer.receivedQUICByteCount.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t PluginClientMetrics.ConnectionDataTransfer.sentQUICByteCount.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t PluginClientMetrics.ConnectionDataTransfer.receivedApplicationByteCount.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t PluginClientMetrics.ConnectionDataTransfer.sentApplicationByteCount.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t PluginClientMetrics.ConnectionDataTransfer.retransmittedQUICByteCount.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t PluginClientMetrics.ConnectionDataTransfer.quicSmoothedRTTMillis.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t PluginClientMetrics.ConnectionDataTransfer.quicMinimumRTTMillis.getter()
{
  return *(void *)(v0 + 56);
}

uint64_t PluginClientMetrics.ConnectionDataTransfer.quicRTTVarianceMillis.getter()
{
  return *(void *)(v0 + 64);
}

uint64_t PluginClientMetrics.ConnectionDataTransfer.init(report:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  specialized PluginClientMetrics.ConnectionDataTransfer.init(report:)(a1, (uint64_t)v4);
  return outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)v4, a2, &demangling cache variable for type metadata for PluginClientMetrics.ConnectionDataTransfer?);
}

uint64_t PluginClientMetrics.ConnectionDataTransfer.rtcReport.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = MEMORY[0x1E4FBC538];
  uint64_t v25 = MEMORY[0x1E4FBC538];
  *(void *)&long long v24 = v2;
  outlined init with take of Any(&v24, v23);
  uint64_t v4 = MEMORY[0x1E4FBC868];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v23, 0x617275642D707271, 0xEC0000006E6F6974, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  uint64_t v6 = v1[1];
  uint64_t v25 = v3;
  *(void *)&long long v24 = v6;
  outlined init with take of Any(&v24, v23);
  char v7 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v23, 0xD000000000000013, 0x80000001B115A890, v7);
  swift_bridgeObjectRelease();
  uint64_t v8 = v1[2];
  uint64_t v25 = v3;
  *(void *)&long long v24 = v8;
  outlined init with take of Any(&v24, v23);
  char v9 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v23, 0xD000000000000013, 0x80000001B115A8B0, v9);
  swift_bridgeObjectRelease();
  uint64_t v10 = v1[4];
  uint64_t v25 = v3;
  *(void *)&long long v24 = v10;
  outlined init with take of Any(&v24, v23);
  char v11 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v23, 0xD000000000000012, 0x80000001B115A870, v11);
  swift_bridgeObjectRelease();
  uint64_t v12 = v1[3];
  uint64_t v25 = v3;
  *(void *)&long long v24 = v12;
  outlined init with take of Any(&v24, v23);
  char v13 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v23, 0xD000000000000012, 0x80000001B115A850, v13);
  swift_bridgeObjectRelease();
  uint64_t v14 = v1[5];
  uint64_t v25 = v3;
  *(void *)&long long v24 = v14;
  outlined init with take of Any(&v24, v23);
  char v15 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v23, 0xD000000000000015, 0x80000001B115A8D0, v15);
  swift_bridgeObjectRelease();
  uint64_t v16 = v1[6];
  uint64_t v25 = v3;
  *(void *)&long long v24 = v16;
  outlined init with take of Any(&v24, v23);
  char v17 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v23, 0xD000000000000015, 0x80000001B115A8F0, v17);
  swift_bridgeObjectRelease();
  uint64_t v18 = v1[7];
  uint64_t v25 = v3;
  *(void *)&long long v24 = v18;
  outlined init with take of Any(&v24, v23);
  char v19 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v23, 0xD000000000000010, 0x80000001B115A910, v19);
  swift_bridgeObjectRelease();
  uint64_t v20 = v1[8];
  uint64_t v25 = v3;
  *(void *)&long long v24 = v20;
  outlined init with take of Any(&v24, v23);
  char v21 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v23, 0xD000000000000010, 0x80000001B115A930, v21);
  swift_bridgeObjectRelease();
  return v4;
}

unint64_t PluginClientMetrics.ConnectionDataTransfer.debugDescription.getter()
{
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(50);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 0xD000000000000014;
  v9._object = (void *)0x80000001B115CF30;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 32;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = 0xD000000000000016;
  v11._object = (void *)0x80000001B115CFD0;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 32;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v13._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  v13._object = (void *)0x80000001B115D010;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 32;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  v15._uint64_t countAndFlagsBits = 0xD000000000000019;
  v15._object = (void *)0x80000001B115D030;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 32;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  v17._uint64_t countAndFlagsBits = 0xD000000000000012;
  v17._object = (void *)0x80000001B115CFF0;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._uint64_t countAndFlagsBits = 32;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  v19._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v19._object = (void *)0x80000001B115D050;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 32;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  v21._uint64_t countAndFlagsBits = 0xD000000000000016;
  v21._object = (void *)0x80000001B115D070;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._uint64_t countAndFlagsBits = 32;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  v23._uint64_t countAndFlagsBits = 0xD000000000000015;
  v23._object = (void *)0x80000001B115D090;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._uint64_t countAndFlagsBits = 32;
  v24._object = (void *)0xE100000000000000;
  String.append(_:)(v24);
  v25._uint64_t countAndFlagsBits = 0xD000000000000016;
  v25._object = (void *)0x80000001B115D0B0;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  return 0xD000000000000018;
}

unint64_t PluginClientMetrics.ConnectionDataTransfer.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0xD000000000000013;
  switch(a1)
  {
    case 1:
    case 6:
    case 8:
      unint64_t result = 0xD000000000000015;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 4:
      unint64_t result = 0xD000000000000018;
      break;
    case 5:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 7:
      unint64_t result = 0xD000000000000014;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys()
{
  return PluginClientMetrics.ConnectionDataTransfer.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PluginClientMetrics.ConnectionDataTransfer.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PluginClientMetrics.ConnectionDataTransfer.CodingKeys and conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PluginClientMetrics.ConnectionDataTransfer.CodingKeys and conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t PluginClientMetrics.ConnectionDataTransfer.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PluginClientMetrics.ConnectionDataTransfer.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  Swift::String v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PluginClientMetrics.ConnectionDataTransfer.CodingKeys and conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[10] = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[9] = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[8] = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[7] = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

__n128 PluginClientMetrics.ConnectionDataTransfer.init(from:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized PluginClientMetrics.ConnectionDataTransfer.init(from:)(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(void *)(a2 + 64) = v7;
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

__n128 protocol witness for Decodable.init(from:) in conformance PluginClientMetrics.ConnectionDataTransfer@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized PluginClientMetrics.ConnectionDataTransfer.init(from:)(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(void *)(a2 + 64) = v7;
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PluginClientMetrics.ConnectionDataTransfer(void *a1)
{
  return PluginClientMetrics.ConnectionDataTransfer.encode(to:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PluginClientMetrics.ConnectionDataTransfer(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  _OWORD v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  uint64_t v8 = *(void *)(a1 + 64);
  long long v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  uint64_t v10 = *(void *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return specialized static PluginClientMetrics.ConnectionDataTransfer.== infix(_:_:)(v7, v9);
}

id PluginClientReporter.queue.getter()
{
  return *(id *)(v0 + 16);
}

uint64_t PluginClientReporter.reportReadyCallback.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_retain();
  return v1;
}

uint64_t PluginClientReporter.receivedConnectionEstablishmentReportCount.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PluginClientReporter.receivedConnectionEstablishmentReportCount.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 40) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*PluginClientReporter.receivedConnectionEstablishmentReportCount.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t PluginClientReporter.receivedDataTransferReportCount.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PluginClientReporter.receivedDataTransferReportCount.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 48) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*PluginClientReporter.receivedDataTransferReportCount.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

void *PluginClientReporter.__allocating_init(queue:reportReadyCallback:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = (void *)swift_allocObject();
  uint64_t v7 = MEMORY[0x1E4FBC868];
  result[5] = MEMORY[0x1E4FBC868];
  result[6] = v7;
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  return result;
}

void *PluginClientReporter.init(queue:reportReadyCallback:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = MEMORY[0x1E4FBC868];
  void v3[5] = MEMORY[0x1E4FBC868];
  v3[6] = v4;
  _OWORD v3[2] = a1;
  v3[3] = a2;
  v3[4] = a3;
  return v3;
}

void PluginClientReporter.includeConnectionEstablishmentReport(_:withTag:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v73 = a2;
  unint64_t v74 = a3;
  uint64_t v6 = type metadata accessor for NWConnection.EstablishmentReport();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  Swift::String v12 = (char *)&v67 - v11;
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  Swift::String v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v17 = (void *)v4[2];
  *(void *)Swift::String v16 = v17;
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v16, *MEMORY[0x1E4FBCBF0], v13);
  id v18 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  if ((v17 & 1) == 0)
  {
    __break(1u);
LABEL_23:
    swift_once();
LABEL_4:
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)log);
    ((void (*)(char *, uint64_t, uint64_t))v16)(v10, a1, v6);
    unint64_t v20 = v74;
    swift_bridgeObjectRetain_n();
    Swift::String v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v72 = swift_slowAlloc();
      v75[0] = v72;
      *(_DWORD *)uint64_t v23 = 136315394;
      uint64_t v24 = NWConnection.EstablishmentReport.debugDescription.getter();
      uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      *(_WORD *)(v23 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v20, v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B0DF7000, v21, v22, "[Reporter] Dropping connection-establishment-report, could not parse report=%s tag=%s", (uint8_t *)v23, 0x16u);
      uint64_t v26 = v72;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v26, -1, -1);
      MEMORY[0x1B3EA39E0](v23, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);

      swift_bridgeObjectRelease_n();
    }
    return;
  }
  Swift::String v16 = *(char **)(v7 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v16)(v12, a1, v6);
  specialized PluginClientMetrics.ConnectionEstablishment.init(report:)((uint64_t)v12, (uint64_t)v77);
  outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)v77, (uint64_t)v78, &demangling cache variable for type metadata for PluginClientMetrics.ConnectionEstablishment?);
  if (v79)
  {
    if (one-time initialization token for log == -1) {
      goto LABEL_4;
    }
    goto LABEL_23;
  }
  uint64_t v71 = v78[1];
  uint64_t v72 = v78[0];
  uint64_t v69 = v78[3];
  uint64_t v70 = v78[2];
  uint64_t v27 = *(uint64_t (**)(uint64_t *))(*v4 + 128);
  unint64_t v28 = v74;
  swift_bridgeObjectRetain();
  id v29 = (void (*)(uint64_t *, void))v27(v75);
  uint64_t v31 = v30;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v76 = *v31;
  uint64_t v33 = v76;
  *uint64_t v31 = 0x8000000000000000;
  uint64_t v34 = v73;
  unint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)(v73, v28);
  uint64_t v37 = *(void *)(v33 + 16);
  BOOL v38 = (v35 & 1) == 0;
  uint64_t v39 = v37 + v38;
  if (__OFADD__(v37, v38))
  {
    __break(1u);
    goto LABEL_25;
  }
  char v40 = v35;
  if (*(void *)(v33 + 24) >= v39)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      specialized _NativeDictionary.copy()();
    }
  }
  else
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v39, isUniquelyReferenced_nonNull_native);
    unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(v34, v28);
    if ((v40 & 1) != (v42 & 1))
    {
LABEL_28:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return;
    }
    unint64_t v36 = v41;
  }
  *uint64_t v31 = v76;
  swift_bridgeObjectRelease();
  uint64_t v43 = (void *)*v31;
  if (v40) {
    goto LABEL_16;
  }
  v43[(v36 >> 6) + 8] |= 1 << v36;
  long long v44 = (uint64_t *)(v43[6] + 16 * v36);
  *long long v44 = v34;
  v44[1] = v28;
  *(void *)(v43[7] + 8 * v36) = 0;
  uint64_t v45 = v43[2];
  swift_bridgeObjectRetain();
  if (__OFADD__(v45, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  v43[2] = v45 + 1;
LABEL_16:
  swift_bridgeObjectRetain();
  uint64_t v46 = v43[7];
  swift_bridgeObjectRelease();
  uint64_t v47 = *(void *)(v46 + 8 * v36);
  BOOL v48 = __OFADD__(v47, 1);
  uint64_t v49 = v47 + 1;
  if (v48)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  *(void *)(v46 + 8 * v36) = v49;
  swift_bridgeObjectRelease();
  v29(v75, 0);
  if (one-time initialization token for log != -1) {
LABEL_26:
  }
    swift_once();
  uint64_t v50 = type metadata accessor for Logger();
  __swift_project_value_buffer(v50, (uint64_t)log);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  uint64_t v51 = Logger.logObject.getter();
  os_log_type_t v52 = static os_log_type_t.default.getter();
  BOOL v53 = os_log_type_enabled(v51, v52);
  uint64_t v55 = v71;
  uint64_t v54 = v72;
  if (v53)
  {
    uint64_t v56 = swift_slowAlloc();
    uint64_t v68 = swift_slowAlloc();
    v75[0] = v68;
    *(_DWORD *)uint64_t v56 = 136315650;
    unint64_t v57 = PluginClientMetrics.ConnectionEstablishment.debugDescription.getter();
    uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v59 = swift_bridgeObjectRelease();
    *(_WORD *)(v56 + 12) = 2080;
    (*(void (**)(uint64_t))(*v4 + 112))(v59);
    uint64_t v60 = v34;
    uint64_t v61 = Dictionary.description.getter();
    unint64_t v63 = v62;
    swift_bridgeObjectRelease();
    uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v63, v75);
    unint64_t v28 = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    uint64_t v54 = v72;
    swift_bridgeObjectRelease();
    *(_WORD *)(v56 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v28, v75);
    uint64_t v55 = v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v51, v52, "[Reporter] Received connection-establishment-report=%s counts=%s tag=%s", (uint8_t *)v56, 0x20u);
    uint64_t v64 = v68;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v64, -1, -1);
    MEMORY[0x1B3EA39E0](v56, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
    uint64_t v60 = v34;
  }
  uint64_t v65 = (void (*)(uint64_t, unint64_t, uint64_t))v4[3];
  uint64_t v66 = PluginClientMetrics.ConnectionEstablishment.rtcReport.getter(v54, v55, v70, v69);
  v65(v60, v28, v66);
  swift_bridgeObjectRelease();
}

void PluginClientReporter.includeConnectionDataTransferReport(_:withTag:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v74 = a2;
  unint64_t v75 = a3;
  uint64_t v5 = type metadata accessor for NWConnection.DataTransferReport();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v73 = &v71[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = &v71[-v9];
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = &v71[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v76 = v3;
  uint64_t v15 = *(void **)(v3 + 16);
  *(void *)uint64_t v14 = v15;
  (*(void (**)(unsigned char *, void, uint64_t))(v12 + 104))(v14, *MEMORY[0x1E4FBCBF0], v11);
  id v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  id v18 = *(void (**)(unsigned char *, uint64_t))(v12 + 8);
  unint64_t v17 = v12 + 8;
  v18(v14, v11);
  if ((v15 & 1) == 0)
  {
    __break(1u);
LABEL_23:
    swift_once();
LABEL_4:
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)log);
    unint64_t v20 = v73;
    ((void (*)(unsigned char *, uint64_t, uint64_t))v14)(v73, a1, v5);
    swift_bridgeObjectRetain_n();
    unint64_t v21 = v17;
    os_log_type_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    int v24 = v23;
    if (os_log_type_enabled(v22, v23))
    {
      unint64_t v25 = v20;
      uint64_t v26 = swift_slowAlloc();
      uint64_t v76 = swift_slowAlloc();
      *(void *)&v83[0] = v76;
      *(_DWORD *)uint64_t v26 = 136315394;
      int v72 = v24;
      uint64_t v27 = NWConnection.DataTransferReport.debugDescription.getter();
      v78[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, (uint64_t *)v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v25, v5);
      *(_WORD *)(v26 + 12) = 2080;
      swift_bridgeObjectRetain();
      v78[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v21, (uint64_t *)v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B0DF7000, v22, (os_log_type_t)v72, "[Reporter] Dropping data-transfer-report, could not parse report=%s tag=%s", (uint8_t *)v26, 0x16u);
      uint64_t v29 = v76;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v29, -1, -1);
      MEMORY[0x1B3EA39E0](v26, -1, -1);
    }
    else
    {
      (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v20, v5);

      swift_bridgeObjectRelease_n();
    }
    return;
  }
  uint64_t v14 = *(unsigned char **)(v6 + 16);
  ((void (*)(unsigned char *, uint64_t, uint64_t))v14)(v10, a1, v5);
  specialized PluginClientMetrics.ConnectionDataTransfer.init(report:)((uint64_t)v10, (uint64_t)v79);
  outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)v79, (uint64_t)v80, &demangling cache variable for type metadata for PluginClientMetrics.ConnectionDataTransfer?);
  if (v82)
  {
    unint64_t v17 = v75;
    if (one-time initialization token for log == -1) {
      goto LABEL_4;
    }
    goto LABEL_23;
  }
  void v83[2] = v80[2];
  v83[3] = v80[3];
  uint64_t v84 = v81;
  v83[0] = v80[0];
  v83[1] = v80[1];
  unint64_t v30 = v75;
  uint64_t v31 = *(uint64_t (**)(uint64_t *))(*(void *)v76 + 152);
  swift_bridgeObjectRetain();
  uint64_t v32 = (void (*)(uint64_t *, void))v31(v78);
  uint64_t v34 = v33;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v77 = *v34;
  uint64_t v36 = v77;
  uint64_t *v34 = 0x8000000000000000;
  uint64_t v37 = v74;
  unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v74, v30);
  uint64_t v40 = *(void *)(v36 + 16);
  BOOL v41 = (v38 & 1) == 0;
  uint64_t v42 = v40 + v41;
  if (__OFADD__(v40, v41))
  {
    __break(1u);
    goto LABEL_25;
  }
  char v43 = v38;
  if (*(void *)(v36 + 24) >= v42)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      specialized _NativeDictionary.copy()();
    }
  }
  else
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v42, isUniquelyReferenced_nonNull_native);
    unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v37, v30);
    if ((v43 & 1) != (v45 & 1))
    {
LABEL_28:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return;
    }
    unint64_t v39 = v44;
  }
  uint64_t *v34 = v77;
  swift_bridgeObjectRelease();
  uint64_t v46 = (void *)*v34;
  if (v43) {
    goto LABEL_16;
  }
  v46[(v39 >> 6) + 8] |= 1 << v39;
  uint64_t v47 = (uint64_t *)(v46[6] + 16 * v39);
  *uint64_t v47 = v37;
  v47[1] = v30;
  *(void *)(v46[7] + 8 * v39) = 0;
  uint64_t v48 = v46[2];
  swift_bridgeObjectRetain();
  if (__OFADD__(v48, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  unint64_t v46[2] = v48 + 1;
LABEL_16:
  swift_bridgeObjectRetain();
  uint64_t v49 = v46[7];
  swift_bridgeObjectRelease();
  uint64_t v50 = *(void *)(v49 + 8 * v39);
  BOOL v51 = __OFADD__(v50, 1);
  uint64_t v52 = v50 + 1;
  if (v51)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  *(void *)(v49 + 8 * v39) = v52;
  swift_bridgeObjectRelease();
  v32(v78, 0);
  if (one-time initialization token for log != -1) {
LABEL_26:
  }
    swift_once();
  uint64_t v53 = type metadata accessor for Logger();
  __swift_project_value_buffer(v53, (uint64_t)log);
  swift_bridgeObjectRetain_n();
  uint64_t v54 = (void *)v76;
  swift_retain_n();
  uint64_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.default.getter();
  int v57 = v56;
  if (os_log_type_enabled(v55, v56))
  {
    uint64_t v58 = swift_slowAlloc();
    uint64_t v73 = (unsigned char *)swift_slowAlloc();
    v78[0] = (uint64_t)v73;
    *(_DWORD *)uint64_t v58 = 136315650;
    int v72 = v57;
    unint64_t v59 = PluginClientMetrics.ConnectionDataTransfer.debugDescription.getter();
    uint64_t v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v61 = swift_bridgeObjectRelease();
    *(_WORD *)(v58 + 12) = 2080;
    (*(void (**)(uint64_t))(*v54 + 136))(v61);
    uint64_t v62 = Dictionary.description.getter();
    unint64_t v64 = v63;
    swift_bridgeObjectRelease();
    uint64_t v65 = v62;
    uint64_t v54 = (void *)v76;
    uint64_t v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v64, v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    uint64_t v66 = v74;
    swift_bridgeObjectRelease();
    *(_WORD *)(v58 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v30, v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v55, (os_log_type_t)v72, "[Reporter] Received data-transfer-report=%s count=%s tag=%s", (uint8_t *)v58, 0x20u);
    uint64_t v67 = v73;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v67, -1, -1);
    MEMORY[0x1B3EA39E0](v58, -1, -1);

    unint64_t v68 = v30;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
    unint64_t v68 = v30;
    uint64_t v66 = v37;
  }
  uint64_t v69 = (void (*)(uint64_t, unint64_t, uint64_t))v54[3];
  uint64_t v70 = PluginClientMetrics.ConnectionDataTransfer.rtcReport.getter();
  v69(v66, v68, v70);
  swift_bridgeObjectRelease();
}

uint64_t PluginClientReporter.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PluginClientReporter.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, TUConversationParticipant>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = -1 << v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = v3;
    int64_t v35 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v21 >= v35) {
          goto LABEL_33;
        }
        unint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v35) {
            goto LABEL_33;
          }
          unint64_t v22 = v9[v8];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v35)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v34;
                goto LABEL_40;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v35);
              }
              else {
                *uint64_t v9 = v32;
              }
              uint64_t v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v35) {
                  goto LABEL_33;
                }
                unint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      uint64_t v28 = 8 * v20;
      uint64_t v29 = *(void *)(*(void *)(v5 + 48) + v28);
      unint64_t v30 = *(void **)(*(void *)(v5 + 56) + v28);
      if ((a2 & 1) == 0) {
        id v31 = v30;
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = 8 * v17;
      *(void *)(*(void *)(v7 + 48) + v18) = v29;
      *(void *)(*(void *)(v7 + 56) + v18) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  void *v34;
  _OWORD v35[2];

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    uint64_t v10 = v9 & *(void *)(v5 + 64);
    uint64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    uint64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        uint64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          uint64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            unint64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  uint64_t *v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                uint64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            uint64_t v13 = v20;
          }
        }
LABEL_21:
        uint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      int64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      int64_t v23 = *v21;
      unint64_t v22 = v21[1];
      char v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        outlined init with take of Any(v24, v35);
      }
      else
      {
        outlined init with copy of Any((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      unint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      BOOL v26 = result & ~v25;
      uint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v28 = 0;
        uint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          unint64_t v30 = v27 == v29;
          if (v27 == v29) {
            uint64_t v27 = 0;
          }
          v28 |= v30;
          id v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        uint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *unint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)outlined init with take of Any(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, PluginAttachmentLedgerTopic>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, ()>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
  uint64_t v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    int64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      uint64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      int64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        char v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        int64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            uint64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            int64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v13 = v24;
      }
    }
LABEL_30:
    uint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    id v31 = *v29;
    unint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v25 = 0;
      BOOL v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  unint64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, CustomEndpointProvider>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  long long v17;
  long long v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  long long v26;
  long long v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[2];
  long long v38;
  long long v39;
  uint64_t v40;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    int64_t v23 = *(void *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      uint64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_34;
      }
      int64_t v23 = *(void *)(v36 + 8 * v14);
      if (!v23)
      {
        char v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        int64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            uint64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            int64_t v23 = *(void *)(v36 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        uint64_t v14 = v24;
      }
    }
LABEL_21:
    uint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    unint64_t v25 = *(void *)(v5 + 48) + 40 * v20;
    if (a2)
    {
      BOOL v26 = *(_OWORD *)v25;
      uint64_t v27 = *(_OWORD *)(v25 + 16);
      uint64_t v40 = *(void *)(v25 + 32);
      char v38 = v26;
      unint64_t v39 = v27;
      outlined init with take of Any((_OWORD *)(*(void *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      outlined init with copy of AnyHashable(v25, (uint64_t)&v38);
      outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      id v31 = 0;
      uint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    unint64_t v16 = *(void *)(v7 + 48) + 40 * v15;
    unint64_t v17 = v38;
    uint64_t v18 = v39;
    *(void *)(v16 + 32) = v40;
    *(_OWORD *)unint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    uint64_t result = (uint64_t)outlined init with take of Any(v37, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  int64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, ProcessAssertion>, (void (*)(uint64_t, unsigned char *))outlined init with take of BackgroundSessionManagerDataSource);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PGBackgroundPIPAuthorization>);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v35 = v2;
  uint64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    int64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      uint64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      int64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        char v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        int64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            uint64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            int64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v13 = v24;
      }
    }
LABEL_30:
    uint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    id v31 = *v29;
    unint64_t v30 = v29[1];
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v25 = 0;
      BOOL v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  unint64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, PluginAttachmentLedgerTopic.Participant>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v35 = a2;
    uint64_t v34 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = -1 << v10;
    uint64_t v33 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        uint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        unint64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13) {
          goto LABEL_31;
        }
        unint64_t v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v20 = v9[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v32;
              }
              uint64_t v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_21:
        unint64_t v12 = (v20 - 1) & v20;
        uint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      unint64_t v22 = 8 * v18;
      int64_t v23 = *(void *)(*(void *)(v5 + 48) + v22);
      char v24 = *(void *)(*(void *)(v5 + 56) + v22);
      uint64_t result = static Hasher._hash(seed:_:)();
      unint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      BOOL v26 = result & ~v25;
      uint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v28 = 0;
        uint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          unint64_t v30 = v27 == v29;
          if (v27 == v29) {
            uint64_t v27 = 0;
          }
          v28 |= v30;
          id v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      unint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v7 + 48) + v16) = v23;
      *(void *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  uint64_t *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, PubSubTopicReporter.ConversationReport>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, PubSubTopicReporter.PubSubTopicReport>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<UInt64, [UInt64]>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, ()>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, BackgroundSessionManagerDataSource>, (void (*)(uint64_t, unsigned char *))outlined init with take of BackgroundSessionManagerDataSource);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, AnyDatagramChannelStream>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  void *v37;
  uint64_t v38;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  char v38 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, AttachmentLedger_AttachmentEncryption>);
  uint64_t v9 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = result;
  if (*(void *)(v8 + 16))
  {
    int64_t v35 = v3;
    unint64_t v12 = 0;
    uint64_t v13 = *(void *)(v8 + 64);
    uint64_t v37 = (void *)(v8 + 64);
    uint64_t v14 = 1 << *(unsigned char *)(v8 + 32);
    if (v14 < 64) {
      unint64_t v15 = ~(-1 << v14);
    }
    else {
      unint64_t v15 = -1;
    }
    unint64_t v16 = v15 & v13;
    uint64_t v36 = (unint64_t)(v14 + 63) >> 6;
    unint64_t v17 = result + 64;
    while (1)
    {
      if (v16)
      {
        unint64_t v19 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        unint64_t v20 = v19 | (v12 << 6);
      }
      else
      {
        int64_t v21 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v37;
        if (v21 >= v36) {
          goto LABEL_34;
        }
        unint64_t v22 = v37[v21];
        ++v12;
        if (!v22)
        {
          unint64_t v12 = v21 + 1;
          if (v21 + 1 >= v36) {
            goto LABEL_34;
          }
          unint64_t v22 = v37[v12];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v36)
            {
LABEL_34:
              if ((v9 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v35;
                goto LABEL_41;
              }
              uint64_t v34 = 1 << *(unsigned char *)(v8 + 32);
              if (v34 >= 64) {
                bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v37 = -1 << v34;
              }
              uint64_t v3 = v35;
              *(void *)(v8 + 16) = 0;
              break;
            }
            unint64_t v22 = v37[v23];
            if (!v22)
            {
              while (1)
              {
                unint64_t v12 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_43;
                }
                if (v12 >= v36) {
                  goto LABEL_34;
                }
                unint64_t v22 = v37[v12];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            unint64_t v12 = v23;
          }
        }
LABEL_21:
        unint64_t v16 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v12 << 6);
      }
      char v24 = *(void *)(*(void *)(v8 + 48) + 8 * v20);
      unint64_t v25 = *(void *)(v38 + 72);
      BOOL v26 = *(void *)(v8 + 56) + v25 * v20;
      if (v9) {
        outlined init with take of AttachmentLedger_AttachmentEncryption(v26, (uint64_t)v7);
      }
      else {
        outlined init with copy of AttachmentLedger_AttachmentEncryption(v26, (uint64_t)v7);
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v27 = -1 << *(unsigned char *)(v11 + 32);
      uint64_t v28 = result & ~v27;
      uint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v17 + 8 * (v28 >> 6))) != 0)
      {
        uint64_t v18 = __clz(__rbit64((-1 << v28) & ~*(void *)(v17 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v30 = 0;
        id v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          uint64_t v32 = v29 == v31;
          if (v29 == v31) {
            uint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v17 + 8 * v29);
        }
        while (v33 == -1);
        uint64_t v18 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(void *)(*(void *)(v11 + 48) + 8 * v18) = v24;
      uint64_t result = outlined init with take of AttachmentLedger_AttachmentEncryption((uint64_t)v7, *(void *)(v11 + 56) + v25 * v18);
      ++*(void *)(v11 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  uint64_t *v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  uint64_t *v34;
  long long v35;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, SeqNumReceivedBuffer>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v34 = (uint64_t *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    unint64_t v30 = -1 << v9;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    id v31 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = v3;
    uint64_t v33 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        uint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        unint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v33) {
          goto LABEL_33;
        }
        int64_t v21 = v34[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v33) {
            goto LABEL_33;
          }
          int64_t v21 = v34[v8];
          if (!v21)
          {
            unint64_t v22 = v20 + 2;
            if (v22 >= v33)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v32;
                goto LABEL_40;
              }
              if (v31 >= 64) {
                bzero(v34, 8 * v33);
              }
              else {
                uint64_t *v34 = v30;
              }
              uint64_t v3 = v32;
              *(void *)(v5 + 16) = 0;
              break;
            }
            int64_t v21 = v34[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                int64_t v21 = v34[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        uint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      uint64_t v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      uint64_t v28 = *(void *)(v5 + 56) + 24 * v19;
      int64_t v35 = *(_OWORD *)v28;
      uint64_t v29 = *(void *)(v28 + 16);
      if ((a2 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        int64_t v23 = 0;
        char v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          unint64_t v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          BOOL v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v27;
      unint64_t v17 = *(void *)(v7 + 56) + 24 * v16;
      *(_OWORD *)unint64_t v17 = v35;
      *(void *)(v17 + 16) = v29;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, UInt64>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v35 = a2;
    uint64_t v34 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = -1 << v10;
    uint64_t v33 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        uint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        unint64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13) {
          goto LABEL_31;
        }
        unint64_t v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v20 = v9[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v32;
              }
              uint64_t v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_21:
        unint64_t v12 = (v20 - 1) & v20;
        uint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      unint64_t v22 = 8 * v18;
      int64_t v23 = *(void *)(*(void *)(v5 + 48) + v22);
      char v24 = *(void *)(*(void *)(v5 + 56) + v22);
      uint64_t result = static Hasher._hash(seed:_:)();
      unint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      BOOL v26 = result & ~v25;
      uint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v28 = 0;
        uint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          unint64_t v30 = v27 == v29;
          if (v27 == v29) {
            uint64_t v27 = 0;
          }
          v28 |= v30;
          id v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      unint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v7 + 48) + v16) = v23;
      *(void *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  uint64_t *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<UInt64, [CP_Record]>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  void *v36;
  long long v37;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  uint64_t v6 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  int64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    uint64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        int64_t v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v22 = v21 | (v14 << 6);
      }
      else
      {
        int64_t v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v35) {
          goto LABEL_33;
        }
        char v24 = v36[v23];
        ++v14;
        if (!v24)
        {
          uint64_t v14 = v23 + 1;
          if (v23 + 1 >= v35) {
            goto LABEL_33;
          }
          char v24 = v36[v14];
          if (!v24)
          {
            unint64_t v25 = v23 + 2;
            if (v25 >= v35)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v6)
              {
                uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
                if (v34 >= 64) {
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v36 = -1 << v34;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            char v24 = v36[v25];
            if (!v24)
            {
              while (1)
              {
                uint64_t v14 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_40;
                }
                if (v14 >= v35) {
                  goto LABEL_33;
                }
                char v24 = v36[v14];
                ++v25;
                if (v24) {
                  goto LABEL_30;
                }
              }
            }
            uint64_t v14 = v25;
          }
        }
LABEL_30:
        uint64_t v11 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      unint64_t v30 = 16 * v22;
      id v31 = (uint64_t *)(*(void *)(v5 + 48) + v30);
      uint64_t v33 = *v31;
      uint64_t v32 = v31[1];
      uint64_t v37 = *(_OWORD *)(*(void *)(v5 + 56) + v30);
      if ((v6 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v37, *((unint64_t *)&v37 + 1));
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      unint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        uint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        BOOL v26 = 0;
        uint64_t v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          uint64_t v28 = v17 == v27;
          if (v17 == v27) {
            unint64_t v17 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      unint64_t v19 = 16 * v18;
      unint64_t v20 = (void *)(*(void *)(v8 + 48) + v19);
      *unint64_t v20 = v33;
      v20[1] = v32;
      *(_OWORD *)(*(void *)(v8 + 56) + v19) = v37;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v8;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;
  int64_t v36;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, PubSubTopic.Participant>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v35 = a2;
    uint64_t v34 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = -1 << v10;
    uint64_t v33 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v36 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        uint64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v36) {
          goto LABEL_31;
        }
        unint64_t v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v36) {
            goto LABEL_31;
          }
          unint64_t v19 = v9[v8];
          if (!v19)
          {
            unint64_t v20 = v18 + 2;
            if (v20 >= v36)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v36);
              }
              else {
                *uint64_t v9 = v32;
              }
              uint64_t v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v36) {
                  goto LABEL_31;
                }
                unint64_t v19 = v9[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        unint64_t v12 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      int64_t v21 = *(void *)(v5 + 56) + 16 * v17;
      unint64_t v22 = *(void *)(*(void *)(v5 + 48) + 8 * v17);
      int64_t v23 = *(unsigned char *)(v21 + 8);
      char v24 = *(void *)v21;
      uint64_t result = static Hasher._hash(seed:_:)();
      unint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      BOOL v26 = result & ~v25;
      uint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v13 + 8 * (v26 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v13 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v28 = 0;
        uint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          unint64_t v30 = v27 == v29;
          if (v27 == v29) {
            uint64_t v27 = 0;
          }
          v28 |= v30;
          id v31 = *(void *)(v13 + 8 * v27);
        }
        while (v31 == -1);
        uint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(void *)(*(void *)(v7 + 48) + 8 * v14) = v22;
      unint64_t v15 = *(void *)(v7 + 56) + 16 * v14;
      *(void *)unint64_t v15 = v24;
      *(unsigned char *)(v15 + 8) = v23;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  void *v40;
  uint64_t i;
  char v42;
  char v43;
  uint64_t v44;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, CPAppPolicy.AuthorizedBundles>);
  uint64_t v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v40 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  char v38 = v2;
  unint64_t v39 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    unint64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v39) {
      break;
    }
    int64_t v23 = v40;
    char v24 = v40[v22];
    ++v13;
    if (!v24)
    {
      uint64_t v13 = v22 + 1;
      if (v22 + 1 >= v39) {
        goto LABEL_33;
      }
      char v24 = v40[v13];
      if (!v24)
      {
        unint64_t v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v38;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        char v24 = v40[v25];
        if (!v24)
        {
          while (1)
          {
            uint64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v39) {
              goto LABEL_33;
            }
            char v24 = v40[v13];
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v13 = v25;
      }
    }
LABEL_30:
    uint64_t v10 = (v24 - 1) & v24;
    int64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    unint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    id v31 = v30[1];
    uint64_t v33 = *(void *)(v5 + 56) + 40 * v21;
    uint64_t v34 = *(unsigned char *)v33;
    int64_t v35 = *(void *)(v33 + 16);
    unint64_t v44 = *(void *)(v33 + 8);
    char v43 = *(unsigned char *)(v33 + 24);
    uint64_t v36 = *(void *)(v33 + 32);
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      BOOL v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v28 = v16 == v27;
        if (v16 == v27) {
          unint64_t v16 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      unint64_t v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v32;
    v18[1] = v31;
    unint64_t v19 = *(void *)(v7 + 56) + 40 * v17;
    *(unsigned char *)unint64_t v19 = v34;
    *(void *)(v19 + 8) = v44;
    *(void *)(v19 + 16) = v35;
    *(unsigned char *)(v19 + 24) = v43;
    *(void *)(v19 + 32) = v36;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v38;
  int64_t v23 = v40;
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v37 = 1 << *(unsigned char *)(v5 + 32);
  if (v37 >= 64) {
    bzero(v23, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v37;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [TUHandle]>);
  uint64_t v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  int64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    int64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      uint64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      int64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        char v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        int64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            uint64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            int64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v13 = v24;
      }
    }
LABEL_30:
    uint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    id v31 = *v29;
    unint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v25 = 0;
      BOOL v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, PubSubTopic>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  char v39;
  long long v40;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, CPAppPolicy.ContactHandles>);
  unint64_t v39 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_37;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v2;
  char v38 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      int64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v14 << 6);
      goto LABEL_20;
    }
    if (__OFADD__(v14++, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v11) {
      break;
    }
    char v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v38 + 8 * v14);
    if (!v25)
    {
      BOOL v26 = v14 + 1;
      if (v14 + 1 >= v11)
      {
LABEL_30:
        swift_release();
        uint64_t v3 = v37;
        if ((v39 & 1) == 0) {
          goto LABEL_37;
        }
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v38 + 8 * v26);
      ++v14;
      if (!v25)
      {
        while (1)
        {
          uint64_t v14 = v26 + 1;
          if (__OFADD__(v26, 1)) {
            break;
          }
          if (v14 >= v11) {
            goto LABEL_30;
          }
          unint64_t v25 = *(void *)(v38 + 8 * v14);
          ++v26;
          if (v25) {
            goto LABEL_19;
          }
        }
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
    }
LABEL_19:
    uint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_20:
    uint64_t v27 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v22);
    uint64_t v29 = *v27;
    uint64_t v28 = v27[1];
    unint64_t v30 = *(void *)(v5 + 56) + 24 * v22;
    id v31 = *(void *)v30;
    uint64_t v40 = *(_OWORD *)(v30 + 8);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v32 = 0;
      uint64_t v33 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        uint64_t v34 = v17 == v33;
        if (v17 == v33) {
          unint64_t v17 = 0;
        }
        v32 |= v34;
        int64_t v35 = *(void *)(v12 + 8 * v17);
      }
      while (v35 == -1);
      uint64_t v18 = __clz(__rbit64(~v35)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + 16 * v18);
    *unint64_t v19 = v29;
    v19[1] = v28;
    unint64_t v20 = *(void *)(v7 + 56) + 24 * v18;
    *(void *)unint64_t v20 = v31;
    *(_OWORD *)(v20 + 8) = v40;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v37;
  char v24 = (void *)(v5 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_37;
  }
LABEL_33:
  uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v24 = -1 << v36;
  }
  *(void *)(v5 + 16) = 0;
LABEL_37:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  char v34;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, EmptyPresenceContext>);
  uint64_t v34 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    unint64_t v12 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v13 = v6 + 64;
    uint64_t result = swift_retain();
    unint64_t v15 = 0;
    while (1)
    {
      if (v11)
      {
        int64_t v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v22 = v21 | (v15 << 6);
      }
      else
      {
        if (__OFADD__(v15++, 1)) {
          goto LABEL_37;
        }
        if (v15 >= v12)
        {
LABEL_30:
          swift_release();
          uint64_t v3 = v2;
          if (v34)
          {
            uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
            if (v33 >= 64) {
              bzero((void *)(v5 + 64), ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
            }
            else {
              *uint64_t v9 = -1 << v33;
            }
            *(void *)(v5 + 16) = 0;
          }
          break;
        }
        char v24 = v9[v15];
        if (!v24)
        {
          unint64_t v25 = v15 + 1;
          if (v15 + 1 >= v12) {
            goto LABEL_30;
          }
          char v24 = v9[v25];
          ++v15;
          if (!v24)
          {
            while (1)
            {
              unint64_t v15 = v25 + 1;
              if (__OFADD__(v25, 1)) {
                break;
              }
              if (v15 >= v12) {
                goto LABEL_30;
              }
              char v24 = v9[v15];
              ++v25;
              if (v24) {
                goto LABEL_19;
              }
            }
LABEL_36:
            __break(1u);
LABEL_37:
            __break(1u);
            return result;
          }
        }
LABEL_19:
        uint64_t v11 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v15 << 6);
      }
      BOOL v26 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v22);
      uint64_t v27 = *v26;
      uint64_t v28 = v26[1];
      if ((v34 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      unint64_t v16 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v17 = result & ~v16;
      uint64_t v18 = v17 >> 6;
      if (((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v29 = 0;
        unint64_t v30 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_36;
          }
          id v31 = v18 == v30;
          if (v18 == v30) {
            uint64_t v18 = 0;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v13 + 8 * v18);
        }
        while (v32 == -1);
        unint64_t v19 = __clz(__rbit64(~v32)) + (v18 << 6);
      }
      *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      unint64_t v20 = (void *)(*(void *)(v7 + 48) + 16 * v19);
      *unint64_t v20 = v27;
      v20[1] = v28;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  void *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ActivityListPresenceContext>);
  uint64_t v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_37;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  int64_t v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v21 = v20 | (v14 << 6);
      goto LABEL_20;
    }
    if (__OFADD__(v14++, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v11) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    char v24 = *(void *)(v36 + 8 * v14);
    if (!v24)
    {
      unint64_t v25 = v14 + 1;
      if (v14 + 1 >= v11)
      {
LABEL_30:
        swift_release();
        uint64_t v3 = v35;
        if ((v37 & 1) == 0) {
          goto LABEL_37;
        }
        goto LABEL_33;
      }
      char v24 = *(void *)(v36 + 8 * v25);
      ++v14;
      if (!v24)
      {
        while (1)
        {
          uint64_t v14 = v25 + 1;
          if (__OFADD__(v25, 1)) {
            break;
          }
          if (v14 >= v11) {
            goto LABEL_30;
          }
          char v24 = *(void *)(v36 + 8 * v14);
          ++v25;
          if (v24) {
            goto LABEL_19;
          }
        }
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
    }
LABEL_19:
    uint64_t v10 = (v24 - 1) & v24;
    int64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_20:
    BOOL v26 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v28 = *v26;
    uint64_t v27 = v26[1];
    uint64_t v29 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v30 = 0;
      id v31 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        uint64_t v32 = v17 == v31;
        if (v17 == v31) {
          unint64_t v17 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v12 + 8 * v17);
      }
      while (v33 == -1);
      uint64_t v18 = __clz(__rbit64(~v33)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + 16 * v18);
    *unint64_t v19 = v28;
    v19[1] = v27;
    *(void *)(*(void *)(v7 + 56) + 8 * v18) = v29;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  int64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_37;
  }
LABEL_33:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_37:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  int64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Attachment>);
  int v45 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  BOOL v41 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1 << v12);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v13;
  unint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v42 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v44 = v6;
  unint64_t v16 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v17 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v19 = 0;
  for (i = v9; ; uint64_t v9 = i)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v19 << 6);
      goto LABEL_22;
    }
    int64_t v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    char v24 = v41;
    unint64_t v25 = v41[v23];
    ++v19;
    if (!v25)
    {
      int64_t v19 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_34;
      }
      unint64_t v25 = v41[v19];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v39;
          if ((v45 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v25 = v41[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v19 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_43;
            }
            if (v19 >= v40) {
              goto LABEL_34;
            }
            unint64_t v25 = v41[v19];
            ++v26;
            if (v25) {
              goto LABEL_21;
            }
          }
        }
        int64_t v19 = v26;
      }
    }
LABEL_21:
    unint64_t v15 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_22:
    uint64_t v27 = *(void *)(v44 + 72);
    unint64_t v28 = *(void *)(v9 + 48) + v27 * v22;
    if (v45)
    {
      (*v16)(v8, v28, v5);
      uint64_t v29 = *(void *)(*(void *)(v9 + 56) + 8 * v22);
    }
    else
    {
      (*v42)(v8, v28, v5);
      uint64_t v29 = *(void *)(*(void *)(v9 + 56) + 8 * v22);
      swift_retain();
    }
    lazy protocol witness table accessor for type UUID and conformance UUID();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v30 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v31 = result & ~v30;
    unint64_t v32 = v31 >> 6;
    if (((-1 << v31) & ~*(void *)(v17 + 8 * (v31 >> 6))) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1 << v31) & ~*(void *)(v17 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v33 = 0;
      unint64_t v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v35 = v32 == v34;
        if (v32 == v34) {
          unint64_t v32 = 0;
        }
        v33 |= v35;
        uint64_t v36 = *(void *)(v17 + 8 * v32);
      }
      while (v36 == -1);
      unint64_t v20 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v16)(*(void *)(v11 + 48) + v27 * v20, v8, v5);
    *(void *)(*(void *)(v11 + 56) + 8 * v20) = v29;
    ++*(void *)(v11 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  char v24 = v41;
  if ((v45 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v37 = 1 << *(unsigned char *)(v9 + 32);
  if (v37 >= 64) {
    bzero(v24, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v24 = -1 << v37;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  void *v40;
  void (**v41)(char *, unint64_t, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  int v45;
  void (**v46)(char *, unint64_t, uint64_t);
  long long v47;

  uint64_t v3 = v2;
  uint64_t v44 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v44 - 8);
  MEMORY[0x1F4188790](v44);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, (_:)>);
  int v45 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (*(void *)(v8 + 16))
  {
    uint64_t v38 = v2;
    uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 64);
    int64_t v40 = (void *)(v8 + 64);
    if (v11 < 64) {
      uint64_t v13 = ~(-1 << v11);
    }
    else {
      uint64_t v13 = -1;
    }
    uint64_t v14 = v13 & v12;
    unint64_t v39 = (unint64_t)(v11 + 63) >> 6;
    BOOL v41 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v46 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    unint64_t v15 = v9 + 64;
    uint64_t result = swift_retain();
    uint64_t v17 = 0;
    uint64_t v42 = v8;
    char v43 = v7;
    while (1)
    {
      if (v14)
      {
        int64_t v19 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v20 = v19 | (v17 << 6);
      }
      else
      {
        unint64_t v21 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v39) {
          goto LABEL_34;
        }
        unint64_t v22 = v40[v21];
        ++v17;
        if (!v22)
        {
          uint64_t v17 = v21 + 1;
          if (v21 + 1 >= v39) {
            goto LABEL_34;
          }
          unint64_t v22 = v40[v17];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v39)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v38;
              if (v45)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v8 + 32);
                if (v36 >= 64) {
                  bzero(v40, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v40 = -1 << v36;
                }
                *(void *)(v8 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v40[v23];
            if (!v22)
            {
              while (1)
              {
                uint64_t v17 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v17 >= v39) {
                  goto LABEL_34;
                }
                unint64_t v22 = v40[v17];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            uint64_t v17 = v23;
          }
        }
LABEL_21:
        uint64_t v14 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      char v24 = v5;
      unint64_t v25 = *(void *)(v5 + 72);
      int64_t v26 = *(void *)(v8 + 48) + v25 * v20;
      uint64_t v27 = v43;
      unint64_t v28 = v44;
      if (v45)
      {
        (*v46)(v43, v26, v44);
        uint64_t v47 = *(_OWORD *)(*(void *)(v8 + 56) + 16 * v20);
      }
      else
      {
        (*v41)(v43, v26, v44);
        uint64_t v47 = *(_OWORD *)(*(void *)(v8 + 56) + 16 * v20);
        swift_retain();
      }
      lazy protocol witness table accessor for type UUID and conformance UUID();
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v29 = -1 << *(unsigned char *)(v10 + 32);
      uint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6))) != 0)
      {
        uint64_t v18 = __clz(__rbit64((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v32 = 0;
        char v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          unint64_t v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          BOOL v35 = *(void *)(v15 + 8 * v31);
        }
        while (v35 == -1);
        uint64_t v18 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v46)(*(void *)(v10 + 48) + v25 * v18, v27, v28);
      *(_OWORD *)(*(void *)(v10 + 56) + 16 * v18) = v47;
      ++*(void *)(v10 + 16);
      uint64_t v5 = v24;
      int64_t v8 = v42;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v10;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (**v16)(char *, unint64_t, uint64_t);
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  void *v41;
  void (**v42)(char *, unint64_t, uint64_t);
  uint64_t i;
  uint64_t v44;
  int v45;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  int64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Set<AnyCancellable>>);
  int v45 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  BOOL v41 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1 << v12);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v13;
  unint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v42 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v44 = v6;
  unint64_t v16 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v17 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v19 = 0;
  for (i = v9; ; uint64_t v9 = i)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v19 << 6);
      goto LABEL_22;
    }
    int64_t v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    char v24 = v41;
    unint64_t v25 = v41[v23];
    ++v19;
    if (!v25)
    {
      int64_t v19 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_34;
      }
      unint64_t v25 = v41[v19];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v39;
          if ((v45 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v25 = v41[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v19 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_43;
            }
            if (v19 >= v40) {
              goto LABEL_34;
            }
            unint64_t v25 = v41[v19];
            ++v26;
            if (v25) {
              goto LABEL_21;
            }
          }
        }
        int64_t v19 = v26;
      }
    }
LABEL_21:
    unint64_t v15 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_22:
    uint64_t v27 = *(void *)(v44 + 72);
    unint64_t v28 = *(void *)(v9 + 48) + v27 * v22;
    if (v45)
    {
      (*v16)(v8, v28, v5);
      uint64_t v29 = *(void *)(*(void *)(v9 + 56) + 8 * v22);
    }
    else
    {
      (*v42)(v8, v28, v5);
      uint64_t v29 = *(void *)(*(void *)(v9 + 56) + 8 * v22);
      swift_bridgeObjectRetain();
    }
    lazy protocol witness table accessor for type UUID and conformance UUID();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v30 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v31 = result & ~v30;
    unint64_t v32 = v31 >> 6;
    if (((-1 << v31) & ~*(void *)(v17 + 8 * (v31 >> 6))) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1 << v31) & ~*(void *)(v17 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v33 = 0;
      unint64_t v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v35 = v32 == v34;
        if (v32 == v34) {
          unint64_t v32 = 0;
        }
        v33 |= v35;
        uint64_t v36 = *(void *)(v17 + 8 * v32);
      }
      while (v36 == -1);
      unint64_t v20 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v16)(*(void *)(v11 + 48) + v27 * v20, v8, v5);
    *(void *)(*(void *)(v11 + 56) + 8 * v20) = v29;
    ++*(void *)(v11 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  char v24 = v41;
  if ((v45 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v37 = 1 << *(unsigned char *)(v9 + 32);
  if (v37 >= 64) {
    bzero(v24, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v24 = -1 << v37;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v11;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, MEMORY[0x1E4F38980], &demangling cache variable for type metadata for _DictionaryStorage<UInt64, NWEndpoint>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (**v16)(char *, unint64_t, uint64_t);
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  void *v41;
  void (**v42)(char *, unint64_t, uint64_t);
  uint64_t i;
  uint64_t v44;
  int v45;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  int64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, TUConversationActivitySessionContainer>);
  int v45 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  BOOL v41 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1 << v12);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v13;
  unint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v42 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v44 = v6;
  unint64_t v16 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v17 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v19 = 0;
  for (i = v9; ; uint64_t v9 = i)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v19 << 6);
      goto LABEL_22;
    }
    int64_t v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    char v24 = v41;
    unint64_t v25 = v41[v23];
    ++v19;
    if (!v25)
    {
      int64_t v19 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_34;
      }
      unint64_t v25 = v41[v19];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v39;
          if ((v45 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v25 = v41[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v19 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_43;
            }
            if (v19 >= v40) {
              goto LABEL_34;
            }
            unint64_t v25 = v41[v19];
            ++v26;
            if (v25) {
              goto LABEL_21;
            }
          }
        }
        int64_t v19 = v26;
      }
    }
LABEL_21:
    unint64_t v15 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_22:
    uint64_t v27 = *(void *)(v44 + 72);
    unint64_t v28 = *(void *)(v9 + 48) + v27 * v22;
    if (v45)
    {
      (*v16)(v8, v28, v5);
      uint64_t v29 = *(id *)(*(void *)(v9 + 56) + 8 * v22);
    }
    else
    {
      (*v42)(v8, v28, v5);
      uint64_t v29 = *(id *)(*(void *)(v9 + 56) + 8 * v22);
    }
    lazy protocol witness table accessor for type UUID and conformance UUID();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v30 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v31 = result & ~v30;
    unint64_t v32 = v31 >> 6;
    if (((-1 << v31) & ~*(void *)(v17 + 8 * (v31 >> 6))) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1 << v31) & ~*(void *)(v17 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v33 = 0;
      unint64_t v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v35 = v32 == v34;
        if (v32 == v34) {
          unint64_t v32 = 0;
        }
        v33 |= v35;
        uint64_t v36 = *(void *)(v17 + 8 * v32);
      }
      while (v36 == -1);
      unint64_t v20 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v16)(*(void *)(v11 + 48) + v27 * v20, v8, v5);
    *(void *)(*(void *)(v11 + 56) + 8 * v20) = v29;
    ++*(void *)(v11 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  char v24 = v41;
  if ((v45 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v37 = 1 << *(unsigned char *)(v9 + 32);
  if (v37 >= 64) {
    bzero(v24, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v24 = -1 << v37;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  void *v42;
  void (**v43)(char *, unint64_t, uint64_t);
  uint64_t v44;
  char *v45;
  uint64_t v46;
  int v47;
  void (**v48)(char *, unint64_t, uint64_t);
  long long v49;

  uint64_t v3 = v2;
  uint64_t v46 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v46 - 8);
  MEMORY[0x1F4188790](v46);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, ConversationManagerHostConnection.ConversationContainerWrapper>);
  uint64_t v47 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (*(void *)(v8 + 16))
  {
    int64_t v40 = v2;
    uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 64);
    uint64_t v42 = (void *)(v8 + 64);
    if (v11 < 64) {
      uint64_t v13 = ~(-1 << v11);
    }
    else {
      uint64_t v13 = -1;
    }
    uint64_t v14 = v13 & v12;
    BOOL v41 = (unint64_t)(v11 + 63) >> 6;
    char v43 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v48 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    unint64_t v15 = v9 + 64;
    uint64_t result = swift_retain();
    uint64_t v17 = 0;
    uint64_t v44 = v8;
    int v45 = v7;
    while (1)
    {
      if (v14)
      {
        int64_t v19 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v20 = v19 | (v17 << 6);
      }
      else
      {
        unint64_t v21 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v41) {
          goto LABEL_34;
        }
        unint64_t v22 = v42[v21];
        ++v17;
        if (!v22)
        {
          uint64_t v17 = v21 + 1;
          if (v21 + 1 >= v41) {
            goto LABEL_34;
          }
          unint64_t v22 = v42[v17];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v41)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v40;
              if (v47)
              {
                uint64_t v38 = 1 << *(unsigned char *)(v8 + 32);
                if (v38 >= 64) {
                  bzero(v42, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  unsigned char *v42 = -1 << v38;
                }
                *(void *)(v8 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v42[v23];
            if (!v22)
            {
              while (1)
              {
                uint64_t v17 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v17 >= v41) {
                  goto LABEL_34;
                }
                unint64_t v22 = v42[v17];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            uint64_t v17 = v23;
          }
        }
LABEL_21:
        uint64_t v14 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      char v24 = v5;
      unint64_t v25 = *(void *)(v5 + 72);
      int64_t v26 = *(void *)(v8 + 48) + v25 * v20;
      uint64_t v27 = v45;
      unint64_t v28 = v46;
      if (v47)
      {
        (*v48)(v45, v26, v46);
        uint64_t v49 = *(_OWORD *)(*(void *)(v8 + 56) + 16 * v20);
      }
      else
      {
        (*v43)(v45, v26, v46);
        uint64_t v49 = *(_OWORD *)(*(void *)(v8 + 56) + 16 * v20);
        uint64_t v29 = (id)v49;
        uint64_t v30 = *((id *)&v49 + 1);
      }
      lazy protocol witness table accessor for type UUID and conformance UUID();
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      unint64_t v31 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v32 = result & ~v31;
      char v33 = v32 >> 6;
      if (((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6))) != 0)
      {
        uint64_t v18 = __clz(__rbit64((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v34 = 0;
        BOOL v35 = (unint64_t)(63 - v31) >> 6;
        do
        {
          if (++v33 == v35 && (v34 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          uint64_t v36 = v33 == v35;
          if (v33 == v35) {
            char v33 = 0;
          }
          v34 |= v36;
          uint64_t v37 = *(void *)(v15 + 8 * v33);
        }
        while (v37 == -1);
        uint64_t v18 = __clz(__rbit64(~v37)) + (v33 << 6);
      }
      *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v48)(*(void *)(v10 + 48) + v25 * v18, v27, v28);
      *(_OWORD *)(*(void *)(v10 + 56) + 16 * v18) = v49;
      ++*(void *)(v10 + 16);
      uint64_t v5 = v24;
      int64_t v8 = v44;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v10;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, MEMORY[0x1E4F27990], &demangling cache variable for type metadata for _DictionaryStorage<UInt64, UUID>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (**v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  void *v44;
  void (**v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  int v47;
  char *v48;
  uint64_t v49;

  uint64_t v3 = v2;
  uint64_t v49 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v49 - 8);
  MEMORY[0x1F4188790](v49);
  uint64_t v48 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Date>);
  uint64_t v47 = a2;
  int64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_41;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 64);
  uint64_t v44 = (void *)(v7 + 64);
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  uint64_t v13 = v12 & v11;
  uint64_t v42 = v2;
  char v43 = (unint64_t)(v10 + 63) >> 6;
  int v45 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v46 = v5;
  uint64_t v14 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  unint64_t v15 = v8 + 64;
  uint64_t result = swift_retain();
  uint64_t v17 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v20 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    unint64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v43) {
      break;
    }
    int64_t v23 = v44;
    char v24 = v44[v22];
    ++v17;
    if (!v24)
    {
      uint64_t v17 = v22 + 1;
      if (v22 + 1 >= v43) {
        goto LABEL_34;
      }
      char v24 = v44[v17];
      if (!v24)
      {
        unint64_t v25 = v22 + 2;
        if (v25 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v42;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        char v24 = v44[v25];
        if (!v24)
        {
          while (1)
          {
            uint64_t v17 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v43) {
              goto LABEL_34;
            }
            char v24 = v44[v17];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        uint64_t v17 = v25;
      }
    }
LABEL_21:
    uint64_t v13 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    int64_t v26 = *(void *)(v7 + 56);
    uint64_t v27 = v7;
    unint64_t v28 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v21);
    uint64_t v29 = *v28;
    uint64_t v30 = v28[1];
    unint64_t v31 = *(void *)(v46 + 72);
    unint64_t v32 = v26 + v31 * v21;
    if (v47)
    {
      (*v14)(v48, v32, v49);
    }
    else
    {
      (*v45)(v48, v32, v49);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    char v33 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v34 = result & ~v33;
    BOOL v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v15 + 8 * (v34 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1 << v34) & ~*(void *)(v15 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v36 = 0;
      uint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v38 = v35 == v37;
        if (v35 == v37) {
          BOOL v35 = 0;
        }
        v36 |= v38;
        unint64_t v39 = *(void *)(v15 + 8 * v35);
      }
      while (v39 == -1);
      uint64_t v18 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    int64_t v19 = (void *)(*(void *)(v9 + 48) + 16 * v18);
    *int64_t v19 = v29;
    v19[1] = v30;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v14)(*(void *)(v9 + 56) + v31 * v18, v48, v49);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v27;
  }
  swift_release();
  uint64_t v3 = v42;
  int64_t v23 = v44;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  int64_t v40 = 1 << *(unsigned char *)(v7 + 32);
  if (v40 >= 64) {
    bzero(v23, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v40;
  }
  *(void *)(v7 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v9;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  char v7 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (*(void *)(v6 + 16))
  {
    uint64_t v10 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v37 = (void *)(v6 + 64);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v6 + 64);
    int64_t v36 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = v8 + 64;
    uint64_t result = swift_retain();
    int64_t v15 = 0;
    while (1)
    {
      if (v12)
      {
        unint64_t v22 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v23 = v22 | (v15 << 6);
      }
      else
      {
        int64_t v24 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v24 >= v36) {
          goto LABEL_33;
        }
        unint64_t v25 = v37[v24];
        ++v15;
        if (!v25)
        {
          int64_t v15 = v24 + 1;
          if (v24 + 1 >= v36) {
            goto LABEL_33;
          }
          unint64_t v25 = v37[v15];
          if (!v25)
          {
            int64_t v26 = v24 + 2;
            if (v26 >= v36)
            {
LABEL_33:
              swift_release();
              uint64_t v4 = v3;
              if (v7)
              {
                uint64_t v35 = 1 << *(unsigned char *)(v6 + 32);
                if (v35 >= 64) {
                  bzero(v37, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v35;
                }
                *(void *)(v6 + 16) = 0;
              }
              break;
            }
            unint64_t v25 = v37[v26];
            if (!v25)
            {
              while (1)
              {
                int64_t v15 = v26 + 1;
                if (__OFADD__(v26, 1)) {
                  goto LABEL_40;
                }
                if (v15 >= v36) {
                  goto LABEL_33;
                }
                unint64_t v25 = v37[v15];
                ++v26;
                if (v25) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v15 = v26;
          }
        }
LABEL_30:
        unint64_t v12 = (v25 - 1) & v25;
        unint64_t v23 = __clz(__rbit64(v25)) + (v15 << 6);
      }
      uint64_t v31 = 16 * v23;
      unint64_t v32 = (uint64_t *)(*(void *)(v6 + 48) + v31);
      uint64_t v34 = *v32;
      uint64_t v33 = v32[1];
      long long v38 = *(_OWORD *)(*(void *)(v6 + 56) + v31);
      if ((v7 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_retain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v16 = -1 << *(unsigned char *)(v9 + 32);
      unint64_t v17 = result & ~v16;
      unint64_t v18 = v17 >> 6;
      if (((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v29 = v18 == v28;
          if (v18 == v28) {
            unint64_t v18 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v13 + 8 * v18);
        }
        while (v30 == -1);
        unint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }
      *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t v20 = 16 * v19;
      unint64_t v21 = (void *)(*(void *)(v9 + 48) + v20);
      *unint64_t v21 = v34;
      v21[1] = v33;
      *(_OWORD *)(*(void *)(v9 + 56) + v20) = v38;
      ++*(void *)(v9 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v4 = v9;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  void *v37;
  long long v38;

  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  char v7 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (*(void *)(v6 + 16))
  {
    uint64_t v10 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v37 = (void *)(v6 + 64);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v6 + 64);
    int64_t v36 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = v8 + 64;
    uint64_t result = swift_retain();
    int64_t v15 = 0;
    while (1)
    {
      if (v12)
      {
        unint64_t v22 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v23 = v22 | (v15 << 6);
      }
      else
      {
        int64_t v24 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v24 >= v36) {
          goto LABEL_33;
        }
        unint64_t v25 = v37[v24];
        ++v15;
        if (!v25)
        {
          int64_t v15 = v24 + 1;
          if (v24 + 1 >= v36) {
            goto LABEL_33;
          }
          unint64_t v25 = v37[v15];
          if (!v25)
          {
            int64_t v26 = v24 + 2;
            if (v26 >= v36)
            {
LABEL_33:
              swift_release();
              uint64_t v4 = v3;
              if (v7)
              {
                uint64_t v35 = 1 << *(unsigned char *)(v6 + 32);
                if (v35 >= 64) {
                  bzero(v37, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v35;
                }
                *(void *)(v6 + 16) = 0;
              }
              break;
            }
            unint64_t v25 = v37[v26];
            if (!v25)
            {
              while (1)
              {
                int64_t v15 = v26 + 1;
                if (__OFADD__(v26, 1)) {
                  goto LABEL_40;
                }
                if (v15 >= v36) {
                  goto LABEL_33;
                }
                unint64_t v25 = v37[v15];
                ++v26;
                if (v25) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v15 = v26;
          }
        }
LABEL_30:
        unint64_t v12 = (v25 - 1) & v25;
        unint64_t v23 = __clz(__rbit64(v25)) + (v15 << 6);
      }
      uint64_t v31 = 16 * v23;
      unint64_t v32 = (uint64_t *)(*(void *)(v6 + 48) + v31);
      uint64_t v34 = *v32;
      uint64_t v33 = v32[1];
      long long v38 = *(_OWORD *)(*(void *)(v6 + 56) + v31);
      if ((v7 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v16 = -1 << *(unsigned char *)(v9 + 32);
      unint64_t v17 = result & ~v16;
      unint64_t v18 = v17 >> 6;
      if (((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v29 = v18 == v28;
          if (v18 == v28) {
            unint64_t v18 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v13 + 8 * v18);
        }
        while (v30 == -1);
        unint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }
      *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t v20 = 16 * v19;
      unint64_t v21 = (void *)(*(void *)(v9 + 48) + v20);
      *unint64_t v21 = v34;
      v21[1] = v33;
      *(_OWORD *)(*(void *)(v9 + 56) + v20) = v38;
      ++*(void *)(v9 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v4 = v9;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;

  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = result;
  if (*(void *)(v6 + 16))
  {
    uint64_t v9 = 0;
    uint64_t v10 = (uint64_t *)(v6 + 64);
    uint64_t v11 = 1 << *(unsigned char *)(v6 + 32);
    unint64_t v32 = -1 << v11;
    uint64_t v33 = v11;
    if (v11 < 64) {
      unint64_t v12 = ~(-1 << v11);
    }
    else {
      unint64_t v12 = -1;
    }
    uint64_t v13 = v12 & *(void *)(v6 + 64);
    uint64_t v34 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v13)
      {
        uint64_t v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v21 = v20 | (v9 << 6);
      }
      else
      {
        unint64_t v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v34) {
          goto LABEL_33;
        }
        unint64_t v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          uint64_t v9 = v22 + 1;
          if (v22 + 1 >= v34) {
            goto LABEL_33;
          }
          unint64_t v23 = v10[v9];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v34)
            {
LABEL_33:
              if (a2)
              {
                if (v33 >= 64) {
                  bzero((void *)(v6 + 64), 8 * v34);
                }
                else {
                  *uint64_t v10 = v32;
                }
                *(void *)(v6 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                uint64_t v9 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v9 >= v34) {
                  goto LABEL_33;
                }
                unint64_t v23 = v10[v9];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            uint64_t v9 = v24;
          }
        }
LABEL_30:
        uint64_t v13 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      BOOL v29 = 8 * v21;
      uint64_t v30 = *(void *)(*(void *)(v6 + 48) + v29);
      uint64_t v31 = *(void *)(*(void *)(v6 + 56) + v29);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      int64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      uint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v25 = 0;
        int64_t v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          char v27 = v17 == v26;
          if (v17 == v26) {
            unint64_t v17 = 0;
          }
          v25 |= v27;
          unint64_t v28 = *(void *)(v14 + 8 * v17);
        }
        while (v28 == -1);
        unint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      unint64_t v19 = 8 * v18;
      *(void *)(*(void *)(v8 + 48) + v19) = v30;
      *(void *)(*(void *)(v8 + 56) + v19) = v31;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v37 = a2;
  char v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  int64_t v36 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  uint64_t v11 = v10 & *(void *)(v6 + 64);
  uint64_t v35 = (unint64_t)(v9 + 63) >> 6;
  unint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  uint64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      uint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    unint64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35) {
      break;
    }
    unint64_t v23 = (void *)(v6 + 64);
    int64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      uint64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      int64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        unint64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        int64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            uint64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v35) {
              goto LABEL_33;
            }
            int64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v14 = v25;
      }
    }
LABEL_30:
    uint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    unint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    int64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      int64_t v26 = 0;
      char v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        unint64_t v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        BOOL v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  unint64_t v23 = (void *)(v6 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, uint64_t *a3, void (*a4)(uint64_t, unsigned char *))
{
  uint64_t v6 = v4;
  uint64_t v8 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  char v38 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (*(void *)(v8 + 16))
  {
    uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v37 = (void *)(v8 + 64);
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v13 = v12 & *(void *)(v8 + 64);
    int64_t v36 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v14 = v9 + 64;
    uint64_t result = swift_retain();
    int64_t v16 = 0;
    while (1)
    {
      if (v13)
      {
        unint64_t v19 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v20 = v19 | (v16 << 6);
      }
      else
      {
        int64_t v21 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v36) {
          goto LABEL_34;
        }
        unint64_t v22 = v37[v21];
        ++v16;
        if (!v22)
        {
          int64_t v16 = v21 + 1;
          if (v21 + 1 >= v36) {
            goto LABEL_34;
          }
          unint64_t v22 = v37[v16];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v36)
            {
LABEL_34:
              swift_release();
              uint64_t v6 = v4;
              if (v38)
              {
                uint64_t v35 = 1 << *(unsigned char *)(v8 + 32);
                if (v35 >= 64) {
                  bzero(v37, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v35;
                }
                *(void *)(v8 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v37[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v16 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v16 >= v36) {
                  goto LABEL_34;
                }
                unint64_t v22 = v37[v16];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v16 = v23;
          }
        }
LABEL_21:
        unint64_t v13 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v16 << 6);
      }
      int64_t v24 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v20);
      uint64_t v26 = *v24;
      uint64_t v25 = v24[1];
      uint64_t v27 = *(void *)(v8 + 56) + 40 * v20;
      if (v38)
      {
        a4(v27, v39);
      }
      else
      {
        outlined init with copy of UserNotificationCenter(v27, (uint64_t)v39);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v28 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v29 = result & ~v28;
      unint64_t v30 = v29 >> 6;
      if (((-1 << v29) & ~*(void *)(v14 + 8 * (v29 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v29) & ~*(void *)(v14 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v33 = v30 == v32;
          if (v30 == v32) {
            unint64_t v30 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v14 + 8 * v30);
        }
        while (v34 == -1);
        unint64_t v17 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(void *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      unint64_t v18 = (void *)(*(void *)(v10 + 48) + 16 * v17);
      *unint64_t v18 = v26;
      v18[1] = v25;
      uint64_t result = ((uint64_t (*)(unsigned char *, unint64_t))a4)(v39, *(void *)(v10 + 56) + 40 * v17);
      ++*(void *)(v10 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v6 = v10;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2, uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t v6 = v4;
  uint64_t v8 = a3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v39 - v10;
  uint64_t v12 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(a4);
  int v44 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v14 = result;
  if (*(void *)(v12 + 16))
  {
    unint64_t v39 = v6;
    int64_t v15 = 0;
    uint64_t v16 = *(void *)(v12 + 64);
    BOOL v41 = (void *)(v12 + 64);
    uint64_t v17 = 1 << *(unsigned char *)(v12 + 32);
    if (v17 < 64) {
      uint64_t v18 = ~(-1 << v17);
    }
    else {
      uint64_t v18 = -1;
    }
    unint64_t v19 = v18 & v16;
    int64_t v40 = (unint64_t)(v17 + 63) >> 6;
    uint64_t v42 = (void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    uint64_t v43 = v9;
    unint64_t v20 = (void (**)(char *, unint64_t, uint64_t))(v9 + 32);
    uint64_t v21 = result + 64;
    while (1)
    {
      if (v19)
      {
        unint64_t v23 = __clz(__rbit64(v19));
        v19 &= v19 - 1;
        unint64_t v24 = v23 | (v15 << 6);
      }
      else
      {
        int64_t v25 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v41;
        if (v25 >= v40) {
          goto LABEL_34;
        }
        unint64_t v26 = v41[v25];
        ++v15;
        if (!v26)
        {
          int64_t v15 = v25 + 1;
          if (v25 + 1 >= v40) {
            goto LABEL_34;
          }
          unint64_t v26 = v41[v15];
          if (!v26)
          {
            int64_t v27 = v25 + 2;
            if (v27 >= v40)
            {
LABEL_34:
              if ((v44 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v6 = v39;
                goto LABEL_41;
              }
              uint64_t v38 = 1 << *(unsigned char *)(v12 + 32);
              if (v38 >= 64) {
                bzero(v41, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                void *v41 = -1 << v38;
              }
              uint64_t v6 = v39;
              *(void *)(v12 + 16) = 0;
              break;
            }
            unint64_t v26 = v41[v27];
            if (!v26)
            {
              while (1)
              {
                int64_t v15 = v27 + 1;
                if (__OFADD__(v27, 1)) {
                  goto LABEL_43;
                }
                if (v15 >= v40) {
                  goto LABEL_34;
                }
                unint64_t v26 = v41[v15];
                ++v27;
                if (v26) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v15 = v27;
          }
        }
LABEL_21:
        unint64_t v19 = (v26 - 1) & v26;
        unint64_t v24 = __clz(__rbit64(v26)) + (v15 << 6);
      }
      uint64_t v28 = *(void *)(*(void *)(v12 + 48) + 8 * v24);
      uint64_t v29 = *(void *)(v43 + 72);
      unint64_t v30 = *(void *)(v12 + 56) + v29 * v24;
      if (v44) {
        (*v20)(v11, v30, v8);
      }
      else {
        (*v42)(v11, v30, v8);
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v31 = -1 << *(unsigned char *)(v14 + 32);
      unint64_t v32 = result & ~v31;
      unint64_t v33 = v32 >> 6;
      if (((-1 << v32) & ~*(void *)(v21 + 8 * (v32 >> 6))) != 0)
      {
        unint64_t v22 = __clz(__rbit64((-1 << v32) & ~*(void *)(v21 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v34 = 0;
        unint64_t v35 = (unint64_t)(63 - v31) >> 6;
        do
        {
          if (++v33 == v35 && (v34 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v36 = v33 == v35;
          if (v33 == v35) {
            unint64_t v33 = 0;
          }
          v34 |= v36;
          uint64_t v37 = *(void *)(v21 + 8 * v33);
        }
        while (v37 == -1);
        unint64_t v22 = __clz(__rbit64(~v37)) + (v33 << 6);
      }
      *(void *)(v21 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      *(void *)(*(void *)(v14 + 48) + 8 * v22) = v28;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v20)(*(void *)(v14 + 56) + v29 * v22, v11, v8);
      ++*(void *)(v14 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  uint64_t *v6 = v14;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = 8 * result;
  *(void *)(a4[6] + v4) = a2;
  *(void *)(a4[7] + v4) = a3;
  uint64_t v5 = a4[2];
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(1u);
  }
  else {
    a4[2] = v7;
  }
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  BOOL v6 = (void *)(a5[6] + 16 * a1);
  void *v6 = a2;
  v6[1] = a3;
  uint64_t result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  return specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t))outlined init with take of BackgroundSessionManagerDataSource);
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  void *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a5[6];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a2, v11);
  unint64_t v13 = (void *)(a5[7] + 16 * a1);
  *unint64_t v13 = a3;
  v13[1] = a4;
  uint64_t v14 = a5[2];
  int64_t v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2] = v16;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

{
  return specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, a4, MEMORY[0x1E4F38980]);
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t v7 = a4[7];
  uint64_t v8 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  uint64_t result = outlined init with take of AttachmentLedger_AttachmentEncryption(a3, v7 + *(void *)(*(void *)(v8 - 8) + 72) * a1);
  uint64_t v10 = a4[2];
  uint64_t v11 = __OFADD__(v10, 1);
  BOOL v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

{
  return specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, a4, MEMORY[0x1E4F27990]);
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  long long v6 = (void *)(a6[6] + 16 * result);
  void *v6 = a2;
  v6[1] = a3;
  uint64_t v7 = (void *)(a6[7] + 16 * result);
  void *v7 = a4;
  v7[1] = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

{
  void *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  a6[(result >> 6) + 8] |= 1 << result;
  *(void *)(a6[6] + 8 * result) = a2;
  long long v6 = (void *)(a6[7] + 24 * result);
  void *v6 = a3;
  v6[1] = a4;
  v6[2] = a5;
  uint64_t v7 = a6[2];
  uint64_t v8 = __OFADD__(v7, 1);
  BOOL v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a6[2] = v9;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t (*a6)(uint64_t, uint64_t))
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v7 = (void *)(a5[6] + 16 * a1);
  void *v7 = a2;
  v7[1] = a3;
  uint64_t result = a6(a4, a5[7] + 40 * a1);
  uint64_t v9 = a5[2];
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a5[2] = v11;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(void))
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t v8 = a4[7];
  uint64_t v9 = a5(0);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a3, v9);
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  *(void *)(a5[6] + 8 * result) = a2;
  uint64_t v5 = a5[7] + 16 * result;
  *(void *)uint64_t v5 = a3;
  *(unsigned char *)(v5 + 8) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  void *v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

id specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, TUConversationParticipant>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PGBackgroundPIPAuthorization>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    int64_t v18 = v17[1];
    unint64_t v19 = 8 * v15;
    int64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  unint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;

  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, TUConversationActivitySessionContainer>);
  unint64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  unint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (id)swift_release();
    void *v23 = v7;
    return result;
  }
  id result = (id)(v6 + 64);
  int64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  unint64_t v24 = v5 + 64;
  uint64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v12 = -1;
  if (v11 < 64) {
    unint64_t v12 = ~(-1 << v11);
  }
  int64_t v13 = v12 & *(void *)(v5 + 64);
  int64_t v27 = v2 + 16;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  unint64_t v26 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    unint64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    int64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      uint64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      int64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    int64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    uint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    int64_t v18 = *(void **)(*(void *)(v5 + 56) + v17);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
    id result = v18;
  }
  uint64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  int64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    uint64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    int64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id result;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void (*v20)(unint64_t, char *, uint64_t);
  void *v21;
  id v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  long long v30;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, ConversationManagerHostConnection.ConversationContainerWrapper>);
  uint64_t v6 = *v0;
  unint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    id result = (id)swift_release();
LABEL_25:
    uint64_t *v1 = v8;
    return result;
  }
  unint64_t v26 = v1;
  id result = (id)(v7 + 64);
  uint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    id result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  int64_t v27 = v6 + 64;
  uint64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  unint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  int64_t v13 = -1;
  if (v12 < 64) {
    int64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  uint64_t v28 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v29 = v3 + 16;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      uint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    unint64_t v23 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v23 >= v28) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v27 + 8 * v23);
    ++v11;
    if (!v24)
    {
      uint64_t v11 = v23 + 1;
      if (v23 + 1 >= v28) {
        goto LABEL_23;
      }
      unint64_t v24 = *(void *)(v27 + 8 * v11);
      if (!v24) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v24 - 1) & v24;
    uint64_t v16 = __clz(__rbit64(v24)) + (v11 << 6);
LABEL_9:
    uint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    int64_t v18 = 16 * v16;
    unint64_t v19 = *(void *)(v8 + 48) + v17;
    int64_t v20 = *(void (**)(unint64_t, char *, uint64_t))(v3 + 32);
    unint64_t v30 = *(_OWORD *)(*(void *)(v6 + 56) + v18);
    v20(v19, v5, v2);
    uint64_t v21 = (void *)v30;
    *(_OWORD *)(*(void *)(v8 + 56) + v18) = v30;
    unint64_t v22 = v21;
    id result = *((id *)&v30 + 1);
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v28)
  {
LABEL_23:
    id result = (id)swift_release();
    uint64_t v1 = v26;
    goto LABEL_25;
  }
  unint64_t v24 = *(void *)(v27 + 8 * v25);
  if (v24)
  {
    uint64_t v11 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v11 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v11 >= v28) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v27 + 8 * v11);
    ++v25;
    if (v24) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }
  int64_t v25 = v1;
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    outlined init with take of Any(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, PluginAttachmentLedgerTopic>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, ()>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    int64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 8 * v15;
    uint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v22 = v19;
    v22[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  int64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, CustomEndpointProvider>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  long long v19;
  long long v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    int64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    uint64_t v17 = 32 * v15;
    outlined init with copy of Any(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    uint64_t v19 = v25[0];
    uint64_t v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    id result = outlined init with take of Any(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }
  unint64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  int64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, ProcessAssertion>, (void (*)(unsigned char *, uint64_t))outlined init with take of BackgroundSessionManagerDataSource);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;

  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Attachment>);
  unint64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  unint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    void *v23 = v7;
    return result;
  }
  id result = (void *)(v6 + 64);
  int64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v12 = -1;
  if (v11 < 64) {
    unint64_t v12 = ~(-1 << v11);
  }
  int64_t v13 = v12 & *(void *)(v5 + 64);
  int64_t v24 = v5 + 64;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  unint64_t v26 = v2 + 32;
  int64_t v27 = v2 + 16;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    uint64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    uint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      uint64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      uint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    int64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    uint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v5 + 56) + 8 * v15);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
    id result = (void *)swift_retain();
  }
  uint64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  uint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    uint64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    uint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void (*v20)(unint64_t, char *, uint64_t);
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  long long v28;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, (_:)>);
  uint64_t v6 = *v0;
  unint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    uint64_t *v1 = v8;
    return result;
  }
  int64_t v24 = v1;
  id result = (void *)(v7 + 64);
  uint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    id result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  int64_t v25 = v6 + 64;
  uint64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  unint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  int64_t v13 = -1;
  if (v12 < 64) {
    int64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  unint64_t v26 = (unint64_t)(v12 + 63) >> 6;
  int64_t v27 = v3 + 16;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      uint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    uint64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v26) {
      goto LABEL_23;
    }
    int64_t v22 = *(void *)(v25 + 8 * v21);
    ++v11;
    if (!v22)
    {
      uint64_t v11 = v21 + 1;
      if (v21 + 1 >= v26) {
        goto LABEL_23;
      }
      int64_t v22 = *(void *)(v25 + 8 * v11);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v22 - 1) & v22;
    uint64_t v16 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_9:
    uint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t v18 = 16 * v16;
    uint64_t v19 = *(void *)(v8 + 48) + v17;
    uint64_t v20 = *(void (**)(unint64_t, char *, uint64_t))(v3 + 32);
    uint64_t v28 = *(_OWORD *)(*(void *)(v6 + 56) + v18);
    v20(v19, v5, v2);
    *(_OWORD *)(*(void *)(v8 + 56) + v18) = v28;
    id result = (void *)swift_retain();
  }
  unint64_t v23 = v21 + 2;
  if (v23 >= v26)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v24;
    goto LABEL_25;
  }
  int64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    uint64_t v11 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v11 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_23;
    }
    int64_t v22 = *(void *)(v25 + 8 * v11);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, PluginAttachmentLedgerTopic.Participant>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    uint64_t v21 = __clz(__rbit64(v19));
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
  }
  uint64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;

  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Set<AnyCancellable>>);
  unint64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  unint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    void *v23 = v7;
    return result;
  }
  id result = (void *)(v6 + 64);
  int64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v12 = -1;
  if (v11 < 64) {
    unint64_t v12 = ~(-1 << v11);
  }
  int64_t v13 = v12 & *(void *)(v5 + 64);
  int64_t v24 = v5 + 64;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  unint64_t v26 = v2 + 32;
  int64_t v27 = v2 + 16;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    uint64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    uint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      uint64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      uint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    int64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    uint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v5 + 56) + 8 * v15);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
    id result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  uint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    uint64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    uint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, PubSubTopicReporter.ConversationReport>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, PubSubTopicReporter.PubSubTopicReport>);
}

{
  return specialized _NativeDictionary.copy()(MEMORY[0x1E4F38980], &demangling cache variable for type metadata for _DictionaryStorage<UInt64, NWEndpoint>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, ()>);
}

{
  return specialized _NativeDictionary.copy()((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, BackgroundSessionManagerDataSource>, (void (*)(unsigned char *, uint64_t))outlined init with take of BackgroundSessionManagerDataSource);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, AnyDatagramChannelStream>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  int64_t v25 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, AttachmentLedger_AttachmentEncryption>);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  unint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    uint64_t *v1 = v7;
    return result;
  }
  int64_t v24 = v1;
  id result = (void *)(v6 + 64);
  int64_t v9 = v5 + 64;
  uint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v9 + 8 * v10) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v10);
  }
  uint64_t v11 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  unint64_t v12 = 1 << *(unsigned char *)(v5 + 32);
  int64_t v13 = -1;
  if (v12 < 64) {
    int64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  unint64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      uint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      uint64_t v17 = v16 | (v11 << 6);
      goto LABEL_9;
    }
    uint64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v15) {
      goto LABEL_23;
    }
    int64_t v22 = *(void *)(v9 + 8 * v21);
    ++v11;
    if (!v22)
    {
      uint64_t v11 = v21 + 1;
      if (v21 + 1 >= v15) {
        goto LABEL_23;
      }
      int64_t v22 = *(void *)(v9 + 8 * v11);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v22 - 1) & v22;
    uint64_t v17 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_9:
    uint64_t v18 = 8 * v17;
    uint64_t v19 = *(void *)(*(void *)(v5 + 48) + 8 * v17);
    uint64_t v20 = *(void *)(v25 + 72) * v17;
    outlined init with copy of AttachmentLedger_AttachmentEncryption(*(void *)(v5 + 56) + v20, (uint64_t)v4);
    *(void *)(*(void *)(v7 + 48) + v18) = v19;
    id result = (void *)outlined init with take of AttachmentLedger_AttachmentEncryption((uint64_t)v4, *(void *)(v7 + 56) + v20);
  }
  unint64_t v23 = v21 + 2;
  if (v23 >= v15)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v24;
    goto LABEL_25;
  }
  int64_t v22 = *(void *)(v9 + 8 * v23);
  if (v22)
  {
    uint64_t v11 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v11 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_23;
    }
    int64_t v22 = *(void *)(v9 + 8 * v11);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  long long v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, SeqNumReceivedBuffer>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    int64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 24 * v15;
    uint64_t v19 = *(void *)(v2 + 56) + v18;
    uint64_t v20 = *(void *)(v19 + 16);
    uint64_t v21 = *(_OWORD *)v19;
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    int64_t v22 = *(void *)(v4 + 56) + v18;
    *(_OWORD *)int64_t v22 = v21;
    *(void *)(v22 + 16) = v20;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  int64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, UInt64>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    uint64_t v21 = __clz(__rbit64(v19));
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
  }
  uint64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, [CP_Record]>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    id result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(MEMORY[0x1E4F27990], &demangling cache variable for type metadata for _DictionaryStorage<UInt64, UUID>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  long long v24;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    int64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    int64_t v24 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    uint64_t v20 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(void *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain();
    id result = (void *)outlined copy of Data._Representation(v24, *((unint64_t *)&v24 + 1));
  }
  unint64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  int64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, PubSubTopic.Participant>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    int64_t v25 = __clz(__rbit64(v23));
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = v25 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    uint64_t v19 = *(void *)(v2 + 56) + v18;
    uint64_t v20 = *(void *)v19;
    LOBYTE(v19) = *(unsigned char *)(v19 + 8);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v21 = *(void *)(v4 + 56) + v18;
    *(void *)uint64_t v21 = v20;
    *(unsigned char *)(v21 + 8) = v19;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  unint64_t v35 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v35 - 8);
  MEMORY[0x1F4188790](v35);
  uint64_t v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Date>);
  unint64_t v30 = v0;
  uint64_t v4 = *v0;
  uint64_t v5 = static _DictionaryStorage.copy(original:)();
  uint64_t v6 = *(void *)(v4 + 16);
  BOOL v36 = v5;
  if (!v6)
  {
    id result = (void *)swift_release();
    uint64_t v28 = v36;
    int64_t v27 = v30;
LABEL_25:
    *int64_t v27 = v28;
    return result;
  }
  unint64_t v7 = v5;
  id result = (void *)(v5 + 64);
  int64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    id result = memmove(result, (const void *)(v4 + 64), 8 * v9);
    unint64_t v7 = v36;
  }
  uint64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v4 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v4 + 32);
  unint64_t v12 = -1;
  if (v11 < 64) {
    unint64_t v12 = ~(-1 << v11);
  }
  int64_t v13 = v12 & *(void *)(v4 + 64);
  uint64_t v31 = v4 + 64;
  unint64_t v32 = (unint64_t)(v11 + 63) >> 6;
  unint64_t v33 = v1 + 32;
  char v34 = v1 + 16;
  unint64_t v14 = v35;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      uint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v24 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v24 >= v32) {
      goto LABEL_23;
    }
    int64_t v25 = *(void *)(v31 + 8 * v24);
    ++v10;
    if (!v25)
    {
      uint64_t v10 = v24 + 1;
      if (v24 + 1 >= v32) {
        goto LABEL_23;
      }
      int64_t v25 = *(void *)(v31 + 8 * v10);
      if (!v25) {
        break;
      }
    }
LABEL_22:
    int64_t v13 = (v25 - 1) & v25;
    uint64_t v16 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_9:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v16);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    uint64_t v21 = *(void *)(v1 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(void *)(v4 + 56) + v21, v14);
    int64_t v22 = v36;
    unint64_t v23 = (void *)(*(void *)(v36 + 48) + v17);
    void *v23 = v19;
    v23[1] = v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v22 + 56) + v21, v3, v14);
    id result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v26 = v24 + 2;
  if (v26 >= v32)
  {
LABEL_23:
    id result = (void *)swift_release();
    int64_t v27 = v30;
    uint64_t v28 = v36;
    goto LABEL_25;
  }
  int64_t v25 = *(void *)(v31 + 8 * v26);
  if (v25)
  {
    uint64_t v10 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v10 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v10 >= v32) {
      goto LABEL_23;
    }
    int64_t v25 = *(void *)(v31 + 8 * v10);
    ++v26;
    if (v25) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [TUHandle]>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, PubSubTopic>);
}

void *specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (uint64_t *)(*(void *)(v3 + 48) + v17);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    long long v21 = *(_OWORD *)(*(void *)(v3 + 56) + v17);
    int64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *int64_t v22 = v20;
    v22[1] = v19;
    *(_OWORD *)(*(void *)(v5 + 56) + v17) = v21;
    swift_bridgeObjectRetain();
    id result = (void *)swift_retain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  long long v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (uint64_t *)(*(void *)(v3 + 48) + v17);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    long long v21 = *(_OWORD *)(*(void *)(v3 + 56) + v17);
    int64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *int64_t v22 = v20;
    v22[1] = v19;
    *(_OWORD *)(*(void *)(v5 + 56) + v17) = v21;
    swift_bridgeObjectRetain();
    id result = (void *)swift_unknownObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    long long v21 = *(void *)(*(void *)(v3 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *int64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id result = (void *)swift_retain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(uint64_t *a1, void (*a2)(unsigned char *, uint64_t))
{
  uint64_t v4 = v2;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v5 = *v2;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    *uint64_t v4 = v7;
    return result;
  }
  int64_t v27 = v4;
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v28 = v5 + 64;
  int64_t v11 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v15) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v28 + 8 * v24);
    ++v11;
    if (!v25)
    {
      int64_t v11 = v24 + 1;
      if (v24 + 1 >= v15) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v28 + 8 * v11);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v14 = (v25 - 1) & v25;
    unint64_t v17 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_12:
    uint64_t v18 = 16 * v17;
    uint64_t v19 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    uint64_t v22 = 40 * v17;
    outlined init with copy of UserNotificationCenter(*(void *)(v5 + 56) + 40 * v17, (uint64_t)v29);
    int64_t v23 = (void *)(*(void *)(v7 + 48) + v18);
    void *v23 = v20;
    v23[1] = v21;
    a2(v29, *(void *)(v7 + 56) + v22);
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v15)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v4 = v27;
    goto LABEL_28;
  }
  unint64_t v25 = *(void *)(v28 + 8 * v26);
  if (v25)
  {
    int64_t v11 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v11 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v28 + 8 * v11);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v4 = a1(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v26 - v6;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  int64_t v27 = v2;
  uint64_t v8 = *v2;
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *int64_t v27 = v10;
    return result;
  }
  id result = (void *)(v9 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12) {
    id result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  }
  uint64_t v28 = v8 + 64;
  int64_t v14 = 0;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v15 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v8 + 64);
  uint64_t v31 = v5 + 16;
  int64_t v29 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v30 = v5 + 32;
  while (1)
  {
    if (v17)
    {
      unint64_t v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v29) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v23);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v23 + 1;
      if (v23 + 1 >= v29) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v28 + 8 * v14);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v17 = (v24 - 1) & v24;
    unint64_t v19 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_12:
    uint64_t v20 = 8 * v19;
    uint64_t v21 = *(void *)(*(void *)(v8 + 48) + 8 * v19);
    unint64_t v22 = *(void *)(v5 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(void *)(v8 + 56) + v22, v4);
    *(void *)(*(void *)(v10 + 48) + v20) = v21;
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(void *)(v10 + 56) + v22, v7, v4);
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v29) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v28 + 8 * v25);
  if (v24)
  {
    int64_t v14 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v14 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v14 >= v29) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v14);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

BOOL specialized static PluginClientMetrics.ConnectionDataTransfer.== infix(_:_:)(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 0x48uLL) == 0;
}

uint64_t specialized PluginClientMetrics.ConnectionEstablishment.init(report:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for NWConnection.EstablishmentReport();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWConnection.EstablishmentReport.Handshake?);
  MEMORY[0x1F4188790](v9 - 8);
  unint64_t v64 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = type metadata accessor for NWConnection.EstablishmentReport.Handshake();
  uint64_t v11 = *(void *)(v65 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v65);
  int64_t v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  unint64_t v17 = (char *)&v56 - v16;
  double v18 = MEMORY[0x1B3EA1320](v15) * 1000.0;
  if ((~*(void *)&v18 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v18 <= -1.0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v18 >= 1.84467441e19)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  NWConnection.EstablishmentReport.attemptStartedAfterInterval.getter();
  double v20 = v19 * 1000.0;
  if ((~COERCE__INT64(v19 * 1000.0) & 0x7FF0000000000000) == 0)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v20 <= -1.0)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (v20 >= 1.84467441e19)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v21 = NWConnection.EstablishmentReport.handshakes.getter();
  uint64_t v22 = *(void *)(v21 + 16);
  if (v22)
  {
    int v57 = v17;
    unint64_t v59 = v8;
    uint64_t v60 = v6;
    uint64_t v62 = v5;
    uint64_t v63 = a1;
    uint64_t v61 = a2;
    uint64_t v68 = type metadata accessor for NWProtocolDefinition();
    uint64_t v23 = type metadata accessor for NWProtocolQUICConnection();
    uint64_t v58 = v11;
    uint64_t v24 = v11 + 16;
    uint64_t v66 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
    uint64_t v67 = v23;
    unint64_t v25 = v21 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v26 = (void (**)(char *, uint64_t))(v11 + 8);
    uint64_t v27 = *(void *)(v24 + 56);
    uint64_t v56 = v21;
    swift_bridgeObjectRetain();
    uint64_t v28 = v65;
    while (1)
    {
      v66(v14, v25, v28);
      uint64_t v29 = v28;
      NWConnection.EstablishmentReport.Handshake.definition.getter();
      static NWProtocolQUICConnection.definition.getter();
      char v30 = static NWProtocolDefinition.== infix(_:_:)();
      swift_release();
      swift_release();
      if (v30) {
        break;
      }
      (*v26)(v14, v29);
      v25 += v27;
      --v22;
      uint64_t v28 = v29;
      if (!v22)
      {
        swift_bridgeObjectRelease();
        uint64_t v31 = 1;
        a2 = v61;
        uint64_t v5 = v62;
        a1 = v63;
        uint64_t v8 = v59;
        uint64_t v6 = v60;
        unint64_t v17 = v57;
        uint64_t v11 = v58;
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v11 = v58;
    (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v64, v14, v29);
    uint64_t v31 = 0;
    a2 = v61;
    uint64_t v5 = v62;
    a1 = v63;
    uint64_t v8 = v59;
    uint64_t v6 = v60;
    uint64_t v28 = v29;
    unint64_t v17 = v57;
  }
  else
  {
    uint64_t v31 = 1;
    uint64_t v28 = v65;
  }
LABEL_14:
  uint64_t v32 = (uint64_t)v64;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v64, v31, 1, v28);
  swift_bridgeObjectRelease();
  int v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v32, 1, v28);
  if (v2 == 1)
  {
    outlined destroy of NWConnection.EstablishmentReport.Handshake?(v32);
    if (one-time initialization token for log == -1)
    {
LABEL_16:
      uint64_t v33 = type metadata accessor for Logger();
      __swift_project_value_buffer(v33, (uint64_t)log);
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
      char v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = swift_slowAlloc();
        LODWORD(v68) = v2;
        uint64_t v37 = v6;
        uint64_t v38 = (uint8_t *)v36;
        uint64_t v39 = swift_slowAlloc();
        uint64_t v62 = v5;
        uint64_t v40 = v39;
        uint64_t v70 = v39;
        *(_DWORD *)uint64_t v38 = 136315138;
        uint64_t v63 = a1;
        uint64_t v41 = NWConnection.EstablishmentReport.debugDescription.getter();
        uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v70);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v43 = *(void (**)(char *, uint64_t))(v37 + 8);
        uint64_t v44 = v62;
        v43(v8, v62);
        _os_log_impl(&dword_1B0DF7000, v34, v35, "Could not find QUIC handshake info in establishment report, report=%s", v38, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v40, -1, -1);
        MEMORY[0x1B3EA39E0](v38, -1, -1);

        uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v43)(v63, v44);
        int v2 = v68;
      }
      else
      {

        uint64_t v55 = *(void (**)(char *, uint64_t))(v6 + 8);
        v55(v8, v5);
        uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v55)(a1, v5);
      }
      unint64_t v51 = 0;
      unint64_t v52 = 0;
      unint64_t v53 = 0;
      unint64_t v54 = 0;
      goto LABEL_27;
    }
LABEL_34:
    swift_once();
    goto LABEL_16;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v17, v32, v28);
  uint64_t result = NWConnection.EstablishmentReport.Handshake.handshakeDuration.getter();
  double v47 = v46 * 1000.0;
  if ((~COERCE__INT64(v46 * 1000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v47 <= -1.0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v47 >= 1.84467441e19)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  NWConnection.EstablishmentReport.Handshake.handshakeRTT.getter();
  double v49 = v48;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v17, v65);
  double v50 = v49 * 1000.0;
  if ((~COERCE__INT64(v49 * 1000.0) & 0x7FF0000000000000) == 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (v50 <= -1.0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (v50 < 1.84467441e19)
  {
    unint64_t v51 = (unint64_t)v18;
    unint64_t v52 = (unint64_t)v20;
    unint64_t v53 = (unint64_t)v47;
    unint64_t v54 = (unint64_t)v50;
LABEL_27:
    *(void *)a2 = v51;
    *(void *)(a2 + 8) = v52;
    *(void *)(a2 + 16) = v53;
    *(void *)(a2 + 24) = v54;
    *(unsigned char *)(a2 + 32) = v2 == 1;
    return result;
  }
LABEL_40:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type PluginClientMetrics.ConnectionEstablishment.CodingKeys and conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionEstablishment.CodingKeys and conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys;
  if (!lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionEstablishment.CodingKeys and conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionEstablishment.CodingKeys and conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionEstablishment.CodingKeys and conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys;
  if (!lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionEstablishment.CodingKeys and conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionEstablishment.CodingKeys and conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionEstablishment.CodingKeys and conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys;
  if (!lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionEstablishment.CodingKeys and conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionEstablishment.CodingKeys and conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionEstablishment.CodingKeys and conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys;
  if (!lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionEstablishment.CodingKeys and conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionEstablishment.CodingKeys and conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys);
  }
  return result;
}

uint64_t specialized PluginClientMetrics.ConnectionEstablishment.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000013 && a2 == 0x80000001B115D190
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x80000001B115D1B0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x80000001B115D1D0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001B115D1F0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t specialized PluginClientMetrics.ConnectionEstablishment.init(from:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PluginClientMetrics.ConnectionEstablishment.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  char v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PluginClientMetrics.ConnectionEstablishment.CodingKeys and conformance PluginClientMetrics.ConnectionEstablishment.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  char v12 = 0;
  uint64_t v6 = KeyedDecodingContainer.decode(_:forKey:)();
  char v11 = 1;
  KeyedDecodingContainer.decode(_:forKey:)();
  char v10 = 2;
  KeyedDecodingContainer.decode(_:forKey:)();
  char v9 = 3;
  KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return v6;
}

uint64_t specialized PluginClientMetrics.ConnectionDataTransfer.init(report:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for NWConnection.DataTransferReport.PathReport();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = NWConnection.DataTransferReport.duration.getter();
  double v10 = v9 * 1000.0;
  if ((~COERCE__INT64(v9 * 1000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v10 <= -1.0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v10 >= 1.84467441e19)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  NWConnection.DataTransferReport.aggregatePathReport.getter();
  uint64_t v24 = NWConnection.DataTransferReport.PathReport.receivedTransportByteCount.getter();
  uint64_t v11 = NWConnection.DataTransferReport.PathReport.sentTransportByteCount.getter();
  uint64_t v12 = NWConnection.DataTransferReport.PathReport.receivedApplicationByteCount.getter();
  uint64_t v13 = NWConnection.DataTransferReport.PathReport.sentApplicationByteCount.getter();
  uint64_t v14 = NWConnection.DataTransferReport.PathReport.retransmittedTransportByteCount.getter();
  uint64_t result = NWConnection.DataTransferReport.PathReport.transportSmoothedRTT.getter();
  double v16 = v15 * 1000.0;
  if ((~COERCE__INT64(v15 * 1000.0) & 0x7FF0000000000000) == 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v16 <= -1.0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v16 >= 1.84467441e19)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t result = NWConnection.DataTransferReport.PathReport.transportMinimumRTT.getter();
  double v18 = v17 * 1000.0;
  if ((~COERCE__INT64(v17 * 1000.0) & 0x7FF0000000000000) == 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v18 <= -1.0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v18 >= 1.84467441e19)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  NWConnection.DataTransferReport.PathReport.transportRTTVariance.getter();
  double v20 = v19;
  uint64_t v21 = type metadata accessor for NWConnection.DataTransferReport();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(a1, v21);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  double v22 = v20 * 1000.0;
  if ((~COERCE__INT64(v20 * 1000.0) & 0x7FF0000000000000) == 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v22 <= -1.0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v22 < 1.84467441e19)
  {
    *(void *)a2 = (unint64_t)v10;
    *(void *)(a2 + 8) = v24;
    *(void *)(a2 + 16) = v11;
    *(void *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(void *)(a2 + 40) = v14;
    *(void *)(a2 + 48) = (unint64_t)v16;
    *(void *)(a2 + 56) = (unint64_t)v18;
    *(void *)(a2 + 64) = (unint64_t)v22;
    *(unsigned char *)(a2 + 72) = 0;
    return result;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t outlined init with take of PluginClientMetrics.ConnectionEstablishment?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type PluginClientMetrics.ConnectionDataTransfer.CodingKeys and conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionDataTransfer.CodingKeys and conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys;
  if (!lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionDataTransfer.CodingKeys and conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionDataTransfer.CodingKeys and conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionDataTransfer.CodingKeys and conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys;
  if (!lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionDataTransfer.CodingKeys and conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionDataTransfer.CodingKeys and conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionDataTransfer.CodingKeys and conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys;
  if (!lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionDataTransfer.CodingKeys and conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionDataTransfer.CodingKeys and conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionDataTransfer.CodingKeys and conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys;
  if (!lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionDataTransfer.CodingKeys and conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginClientMetrics.ConnectionDataTransfer.CodingKeys and conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys);
  }
  return result;
}

uint64_t specialized PluginClientMetrics.ConnectionDataTransfer.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000013 && a2 == 0x80000001B115D190
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001B115D210 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001B115D230 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x80000001B115D250 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001B115D270 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x80000001B115D290 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001B115D2B0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001B115D2D0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001B115D2F0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 8;
    }
    else {
      return 9;
    }
  }
}

uint64_t specialized PluginClientMetrics.ConnectionDataTransfer.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PluginClientMetrics.ConnectionDataTransfer.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PluginClientMetrics.ConnectionDataTransfer.CodingKeys and conformance PluginClientMetrics.ConnectionDataTransfer.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  char v31 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  char v30 = 1;
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  char v29 = 2;
  uint64_t v22 = KeyedDecodingContainer.decode(_:forKey:)();
  char v28 = 3;
  uint64_t v21 = KeyedDecodingContainer.decode(_:forKey:)();
  char v27 = 4;
  uint64_t v20 = KeyedDecodingContainer.decode(_:forKey:)();
  char v26 = 5;
  uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)();
  char v25 = 6;
  uint64_t v18 = KeyedDecodingContainer.decode(_:forKey:)();
  char v24 = 7;
  uint64_t v17 = KeyedDecodingContainer.decode(_:forKey:)();
  char v23 = 8;
  uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  *a2 = v9;
  a2[1] = v10;
  uint64_t v13 = v21;
  a2[2] = v22;
  a2[3] = v13;
  uint64_t v14 = v19;
  a2[4] = v20;
  a2[5] = v14;
  uint64_t v15 = v17;
  a2[6] = v18;
  a2[7] = v15;
  a2[8] = v11;
  return result;
}

uint64_t sub_1B0E6FD88@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 112))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0E6FDD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 120);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B0E6FE28@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 136))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0E6FE74(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 144);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

ValueMetadata *type metadata accessor for PluginClientMetrics()
{
  return &type metadata for PluginClientMetrics;
}

uint64_t getEnumTagSinglePayload for PluginClientMetrics.ConnectionEstablishment(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PluginClientMetrics.ConnectionEstablishment(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PluginClientMetrics.ConnectionEstablishment()
{
  return &type metadata for PluginClientMetrics.ConnectionEstablishment;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for PluginClientMetrics.ConnectionDataTransfer(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 72)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PluginClientMetrics.ConnectionDataTransfer(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 72) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PluginClientMetrics.ConnectionDataTransfer()
{
  return &type metadata for PluginClientMetrics.ConnectionDataTransfer;
}

uint64_t method lookup function for PluginClientReporter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PluginClientReporter);
}

uint64_t dispatch thunk of PluginClientReporter.receivedConnectionEstablishmentReportCount.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of PluginClientReporter.receivedConnectionEstablishmentReportCount.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of PluginClientReporter.receivedConnectionEstablishmentReportCount.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of PluginClientReporter.receivedDataTransferReportCount.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of PluginClientReporter.receivedDataTransferReportCount.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of PluginClientReporter.receivedDataTransferReportCount.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of PluginClientReporter.__allocating_init(queue:reportReadyCallback:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of PluginClientReporter.includeConnectionEstablishmentReport(_:withTag:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of PluginClientReporter.includeConnectionDataTransferReport(_:withTag:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t getEnumTagSinglePayload for PluginClientMetrics.ConnectionDataTransfer.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for PluginClientMetrics.ConnectionDataTransfer.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *__n128 result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B0E7026CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 8;
        break;
    }
  }
  return result;
}

void *type metadata accessor for PluginClientMetrics.ConnectionDataTransfer.CodingKeys()
{
  return &unk_1F09AC8F8;
}

uint64_t getEnumTagSinglePayload for PluginClientMetrics.ConnectionEstablishment.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for PluginClientMetrics.ConnectionEstablishment.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B0E70400);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for PluginClientMetrics.ConnectionEstablishment.CodingKeys()
{
  return &unk_1F09ACA28;
}

uint64_t outlined init with copy of AttachmentLedger_AttachmentEncryption(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of NWConnection.EstablishmentReport.Handshake?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWConnection.EstablishmentReport.Handshake?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t static TaskError.== infix(_:_:)()
{
  return 1;
}

void TaskError.hash(into:)()
{
}

Swift::Int TaskError.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t Task<>.init(priority:timeout:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TaskPriority?(a1, (uint64_t)v14);
  uint64_t v15 = (void *)swift_allocObject();
  void v15[2] = 0;
  void v15[3] = 0;
  v15[4] = a6;
  void v15[5] = a4;
  v15[6] = a5;
  v15[7] = a2;
  char v15[8] = a3;
  uint64_t v16 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in Task<>.init(priority:timeout:operation:), (uint64_t)v15);
  outlined destroy of TaskPriority?(a1);
  return v16;
}

uint64_t outlined init with copy of TaskPriority?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t closure #1 in Task<>.init(priority:timeout:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void v8[6] = a7;
  v8[7] = a8;
  v8[4] = a5;
  v8[5] = a6;
  v8[2] = a1;
  v8[3] = a4;
  return MEMORY[0x1F4188298](closure #1 in Task<>.init(priority:timeout:operation:), 0, 0);
}

uint64_t closure #1 in Task<>.init(priority:timeout:operation:)()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  long long v5 = *(_OWORD *)(v0 + 24);
  *(void *)(v4 + 16) = v1;
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)(v4 + 40) = v3;
  *(void *)(v4 + 48) = v2;
  unsigned int v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v6;
  void *v6 = v0;
  v6[1] = closure #1 in Task<>.init(priority:timeout:operation:);
  uint64_t v7 = *(void *)(v0 + 16);
  return MEMORY[0x1F4188080](v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](closure #1 in Task<>.init(priority:timeout:operation:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1B0E70C14()
{
  return objectdestroyTm_1(72);
}

uint64_t partial apply for closure #1 in Task<>.init(priority:timeout:operation:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  long long v8 = *(_OWORD *)(v1 + 56);
  uint64_t v5 = swift_task_alloc();
  long long v6 = *(_OWORD *)(v1 + 40);
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  *(void *)(v5 + 56) = v4;
  *(_OWORD *)(v5 + 40) = v8;
  *(_OWORD *)(v5 + 24) = v6;
  *(void *)(v5 + 16) = a1;
  return MEMORY[0x1F4188298](closure #1 in Task<>.init(priority:timeout:operation:), 0, 0);
}

uint64_t closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  unsigned char v7[8] = a7;
  void v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  _OWORD v7[4] = a3;
  _OWORD v7[2] = a1;
  uint64_t v8 = type metadata accessor for Optional();
  v7[9] = v8;
  v7[10] = *(void *)(v8 - 8);
  v7[11] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v7[12] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in Task<>.init(priority:timeout:operation:), 0, 0);
}

uint64_t closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[5];
  uint64_t v13 = v0[6];
  uint64_t v14 = v0[7];
  uint64_t v4 = v0[4];
  uint64_t v5 = type metadata accessor for TaskPriority();
  long long v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v1, 1, 1, v5);
  uint64_t v7 = (void *)swift_allocObject();
  _OWORD v7[2] = 0;
  v7[3] = 0;
  _OWORD v7[4] = v2;
  void v7[5] = v4;
  v7[6] = v3;
  swift_retain();
  v0[13] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v8 = type metadata accessor for ThrowingTaskGroup();
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF(v1, (uint64_t)&_sxs5Error_pIeghHrzo_xsAA_pIeAgHrzo_s8SendableRzsAA_pRs_r0_lTRTATu, (uint64_t)v7);
  outlined destroy of TaskPriority?(v1);
  v6(v1, 1, 1, v5);
  uint64_t v9 = (void *)swift_allocObject();
  _OWORD v9[2] = 0;
  v9[3] = 0;
  _OWORD v9[4] = v2;
  void v9[5] = v13;
  v9[6] = v14;
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF(v1, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:), (uint64_t)v9);
  outlined destroy of TaskPriority?(v1);
  uint64_t v10 = (void *)swift_task_alloc();
  v0[14] = v10;
  *uint64_t v10 = v0;
  v10[1] = closure #1 in closure #1 in Task<>.init(priority:timeout:operation:);
  uint64_t v11 = v0[11];
  return MEMORY[0x1F4187E30](v11, 0, 0, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in closure #1 in Task<>.init(priority:timeout:operation:);
  }
  else {
    uint64_t v2 = closure #1 in closure #1 in Task<>.init(priority:timeout:operation:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v5;
  void *v6;
  uint64_t v8;

  uint64_t v1 = v0[11];
  uint64_t v2 = v0[8];
  uint64_t v3 = *(void *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(uint64_t, void))(v0[10] + 8))(v1, v0[9]);
    type metadata accessor for CancellationError();
    lazy protocol witness table accessor for type CancellationError and conformance CancellationError();
    swift_allocError();
    CancellationError.init()();
    swift_willThrow();
  }
  else
  {
    uint64_t v5 = v0[13];
    long long v6 = (void *)v0[3];
    (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(v0[2], v1, v2);
    MEMORY[0x1B3EA1F80](*v6, v2, v5, MEMORY[0x1E4FBC0F0]);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t _sxs5Error_pIeghHrzo_xsAA_pIeAgHrzo_s8SendableRzsAA_pRs_r0_lTR(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  long long v6 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v6;
  void *v6 = v4;
  v6[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return v8(a1);
}

uint64_t _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TaskPriority?(a1, (uint64_t)v9);
  uint64_t v10 = type metadata accessor for TaskPriority();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v9);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v12 = 0;
  uint64_t v14 = 0;
LABEL_6:
  uint64_t v15 = *v4;
  uint64_t v16 = (void *)(v14 | v12);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    uint64_t v16 = v19;
    v19[2] = v12;
    uint64_t v19[3] = v14;
  }
  v18[1] = 1;
  long long v18[2] = v16;
  v18[3] = v15;
  swift_task_create();
  return swift_release();
}

uint64_t closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5[2] = a4;
  v5[3] = a5;
  uint64_t v6 = type metadata accessor for ContinuousClock();
  v5[4] = v6;
  v5[5] = *(void *)(v6 - 8);
  v5[6] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:), 0, 0);
}

uint64_t closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)()
{
  ContinuousClock.init()();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&async function pointer to specialized Clock.sleep(for:tolerance:)
                                                                        + async function pointer to specialized Clock.sleep(for:tolerance:));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[7] = v1;
  void *v1 = v0;
  v1[1] = closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:);
  uint64_t v3 = v0[2];
  uint64_t v2 = v0[3];
  return v5(v3, v2, 0, 0, 1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *(void *)(*(void *)v1 + 48);
  uint64_t v3 = *(void *)(*(void *)v1 + 40);
  uint64_t v4 = *(void *)(*(void *)v1 + 32);
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0) {
    uint64_t v5 = closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:);
  }
  else {
    uint64_t v5 = closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:);
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  lazy protocol witness table accessor for type TaskError and conformance TaskError();
  swift_allocError();
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type TaskError and conformance TaskError()
{
  unint64_t result = lazy protocol witness table cache variable for type TaskError and conformance TaskError;
  if (!lazy protocol witness table cache variable for type TaskError and conformance TaskError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskError and conformance TaskError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaskError and conformance TaskError;
  if (!lazy protocol witness table cache variable for type TaskError and conformance TaskError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskError and conformance TaskError);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for TaskError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B0E71C80);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for TaskError()
{
  return &type metadata for TaskError;
}

uint64_t partial apply for closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = v2[5];
  uint64_t v10 = v2[6];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v11;
  *uint64_t v11 = v3;
  v11[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)(a1, a2, v7, v8, v9, v10, v6);
}

uint64_t sub_1B0E71D90()
{
  return objectdestroyTm_1(56);
}

uint64_t objectdestroyTm_1(uint64_t a1)
{
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x1F4186498](v1, a1, 7);
}

uint64_t _sxs5Error_pIeghHrzo_xsAA_pIeAgHrzo_s8SendableRzsAA_pRs_r0_lTRTA(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[5];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&_sxs5Error_pIeghHrzo_xsAA_pIeAgHrzo_s8SendableRzsAA_pRs_r0_lTRTu
                                                                + _sxs5Error_pIeghHrzo_xsAA_pIeAgHrzo_s8SendableRzsAA_pRs_r0_lTRTu);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_1B0E71EC0()
{
  swift_unknownObjectRelease();
  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)(a1, v4, v5, v6, v7);
}

unint64_t lazy protocol witness table accessor for type CancellationError and conformance CancellationError()
{
  unint64_t result = lazy protocol witness table cache variable for type CancellationError and conformance CancellationError;
  if (!lazy protocol witness table cache variable for type CancellationError and conformance CancellationError)
  {
    type metadata accessor for CancellationError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError);
  }
  return result;
}

uint64_t thunk for @callee_guaranteed () -> ()(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t HostConnectionNotificationObserver.__deallocating_deinit()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

id ConversationManagerClient.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

uint64_t ConversationManagerClient.pluginClientReporter.getter()
{
  return ActivitySession.activeParticipantsUpdateItem.getter();
}

uint64_t key path setter for ConversationManagerClient.pluginClientReporter : ConversationManagerClient(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = *a1;
  uint64_t v6 = (void *)(*a2 + *a5);
  swift_beginAccess();
  void *v6 = v5;
  swift_retain();
  return swift_release();
}

uint64_t ConversationManagerClient.pubSubTopicReporter.getter()
{
  return ActivitySession.activeParticipantsUpdateItem.getter();
}

uint64_t ConversationManagerClient.customEndpointProvider.getter()
{
  uint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x140))();
  specialized Collection.first.getter(v1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  if (!v3) {
    return 0;
  }
  swift_bridgeObjectRelease();
  return v5;
}

_OWORD *specialized Collection.first.getter(uint64_t a1)
{
  unint64_t result = (_OWORD *)specialized Dictionary.startIndex.getter();
  if (v4) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == (_OWORD *)(1 << *(unsigned char *)(a1 + 32))) {
    return 0;
  }
  else {
    return specialized Dictionary.subscript.getter(&v5, (uint64_t)result, v3, 0, a1);
  }
}

uint64_t specialized Collection.first.getter(uint64_t a1)
{
  uint64_t result = specialized Set.startIndex.getter(a1);
  if (v4) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32)) {
    return 0;
  }
  uint64_t v5 = specialized Set.subscript.getter(result, v3, 0, a1);
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t ConversationManagerClient.customEndpointProvider.setter(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    ConversationManagerClient.registerEndpointProvider(_:)(a1, a2);
    return swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v4 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x140))();
    uint64_t v5 = specialized Collection.first.getter(v4);
    uint64_t v7 = v6;
    uint64_t result = swift_bridgeObjectRelease();
    if (v7)
    {
      swift_unknownObjectRelease();
      v8._uint64_t countAndFlagsBits = (uint64_t)v5;
      v8._object = v7;
      ConversationManagerClient.unregisterEndpointProvider(identifier:)(v8);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t ConversationManagerClient.registerEndpointProvider(_:)(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v35 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  Swift::String v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v33 = *(void *)(v9 - 8);
  uint64_t v34 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getObjectType();
  uint64_t v12 = *(uint64_t (**)(void))(a2 + 8);
  uint64_t v32 = a2;
  uint64_t v13 = v12();
  unint64_t v15 = v14;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Log.client);
  swift_bridgeObjectRetain_n();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    char v30 = v8;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v31 = v6;
    uint64_t v20 = (uint8_t *)v19;
    uint64_t v21 = swift_slowAlloc();
    char v29 = v3;
    uint64_t v22 = v21;
    aBlock[0] = v21;
    *(_DWORD *)uint64_t v20 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, aBlock);
    Swift::String v8 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v17, v18, "Registering custom endpoint provider: %s", v20, 0xCu);
    swift_arrayDestroy();
    uint64_t v23 = v22;
    int v3 = v29;
    MEMORY[0x1B3EA39E0](v23, -1, -1);
    char v24 = v20;
    uint64_t v6 = v31;
    MEMORY[0x1B3EA39E0](v24, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  char v25 = (void *)swift_allocObject();
  v25[2] = v3;
  v25[3] = v13;
  v25[4] = v15;
  v25[5] = a1;
  v25[6] = v32;
  aBlock[4] = (uint64_t)partial apply for closure #1 in ConversationManagerClient.registerEndpointProvider(_:);
  aBlock[5] = (uint64_t)v25;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_3;
  char v26 = _Block_copy(aBlock);
  id v27 = v3;
  swift_unknownObjectRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v36 = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v11, v8, v26);
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v34);
  return swift_release();
}

Swift::Void __swiftcall ConversationManagerClient.unregisterEndpointProvider(identifier:)(Swift::String identifier)
{
  uint64_t v2 = v1;
  object = identifier._object;
  uint64_t countAndFlagsBits = identifier._countAndFlagsBits;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v25 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v23 = *(void *)(v8 - 8);
  uint64_t v24 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.client);
  swift_bridgeObjectRetain_n();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v21 = v5;
    unint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    uint64_t v22 = v2;
    uint64_t v16 = v15;
    aBlock[0] = v15;
    *(_DWORD *)unint64_t v14 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, aBlock);
    uint64_t v5 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v12, v13, "Unregistering custom endpoint provider: %s", v14, 0xCu);
    swift_arrayDestroy();
    uint64_t v17 = v16;
    uint64_t v2 = v22;
    MEMORY[0x1B3EA39E0](v17, -1, -1);
    MEMORY[0x1B3EA39E0](v14, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  os_log_type_t v18 = (void *)swift_allocObject();
  long long v18[2] = v2;
  v18[3] = countAndFlagsBits;
  void v18[4] = object;
  aBlock[4] = (uint64_t)partial apply for closure #1 in ConversationManagerClient.unregisterEndpointProvider(identifier:);
  aBlock[5] = (uint64_t)v18;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_6;
  uint64_t v19 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  id v20 = v2;
  static DispatchQoS.unspecified.getter();
  uint64_t v26 = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v10, v7, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v24);
  swift_release();
}

void (*ConversationManagerClient.customEndpointProvider.modify(void *a1))(uint64_t **a1, char a2)
{
  int v3 = malloc(0x28uLL);
  *a1 = v3;
  _OWORD v3[2] = v1;
  uint64_t v4 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x140);
  unint64_t v5 = ((*MEMORY[0x1E4FBC8C8] & *v1) + 320) & 0xFFFFFFFFFFFFLL | 0xD5EB000000000000;
  v3[3] = v4;
  v3[4] = v5;
  uint64_t v6 = v4();
  specialized Collection.first.getter(v6);
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();
  if (v8)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v12 = 0;
  }
  void *v3 = v10;
  v3[1] = v12;
  return ConversationManagerClient.customEndpointProvider.modify;
}

void ConversationManagerClient.customEndpointProvider.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  if (a2)
  {
    if (v3)
    {
      uint64_t v4 = v2[1];
      uint64_t v5 = swift_unknownObjectRetain();
      ConversationManagerClient.registerEndpointProvider(_:)(v5, v4);
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v6 = ((uint64_t (*)(void))v2[3])();
      uint64_t v7 = specialized Collection.first.getter(v6);
      uint64_t v9 = v8;
      swift_bridgeObjectRelease();
      if (v9)
      {
        swift_unknownObjectRelease();
        v10._uint64_t countAndFlagsBits = (uint64_t)v7;
        v10._object = v9;
        ConversationManagerClient.unregisterEndpointProvider(identifier:)(v10);
        swift_bridgeObjectRelease();
      }
    }
    goto LABEL_8;
  }
  if (v3)
  {
    ConversationManagerClient.registerEndpointProvider(_:)(**a1, v2[1]);
LABEL_8:
    swift_unknownObjectRelease();
    goto LABEL_9;
  }
  uint64_t v11 = ((uint64_t (*)(void))v2[3])();
  uint64_t v12 = specialized Collection.first.getter(v11);
  unint64_t v14 = v13;
  swift_bridgeObjectRelease();
  if (v14)
  {
    swift_unknownObjectRelease();
    v15._uint64_t countAndFlagsBits = (uint64_t)v12;
    v15._object = v14;
    ConversationManagerClient.unregisterEndpointProvider(identifier:)(v15);
    swift_bridgeObjectRelease();
  }
LABEL_9:
  free(v2);
}

uint64_t ConversationManagerClient.customEndpointProviders.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ConversationManagerClient.customEndpointProviders.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + direct field offset for ConversationManagerClient.customEndpointProviders);
  swift_beginAccess();
  void *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*ConversationManagerClient.customEndpointProviders.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t ConversationManagerClient.hasInitialState.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + direct field offset for ConversationManagerClient.hasInitialState);
  swift_beginAccess();
  return *v1;
}

uint64_t ConversationManagerClient.hasInitialState.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + direct field offset for ConversationManagerClient.hasInitialState);
  uint64_t result = swift_beginAccess();
  unsigned char *v3 = a1;
  return result;
}

uint64_t (*ConversationManagerClient.hasInitialState.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

uint64_t key path getter for ConversationManagerClient.activeSessionContainer : ConversationManagerClient@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1B8))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ConversationManagerClient.activeSessionContainer : ConversationManagerClient(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x1C0);
  id v4 = *a1;
  return v3(v2);
}

uint64_t ConversationManagerClient.activeSessionContainer.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t ConversationManagerClient.activeSessionContainer.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v1 = v0;
  return static Published.subscript.setter();
}

void (*ConversationManagerClient.activeSessionContainer.modify(void *a1))(void *a1)
{
  id v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  void v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return ConversationManagerClient.activeSessionContainer.modify;
}

void ConversationManagerClient.activeSessionContainer.modify(void *a1)
{
  id v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 48))(*a1, 0);
  swift_release();
  swift_release();
  free(v1);
}

uint64_t key path setter for ConversationManagerClient.$activeSessionContainer : ConversationManagerClient(uint64_t a1, void **a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<TUConversationActivitySessionContainer?>.Publisher);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x1D8))(v6);
}

uint64_t ConversationManagerClient.$activeSessionContainer.getter()
{
  return swift_endAccess();
}

uint64_t ConversationManagerClient.$activeSessionContainer.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<TUConversationActivitySessionContainer?>.Publisher);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<TUConversationActivitySessionContainer?>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t ConversationManagerClient.includeMetricsReport(_:conversationUUID:)(uint64_t a1, uint64_t a2)
{
  return ConversationManagerClient.includeMetricsReport(_:conversationUUID:)(a1, a2, (uint64_t)&unk_1F09B2AE0, (uint64_t)partial apply for closure #1 in ConversationManagerClient.includeMetricsReport(_:conversationUUID:), (uint64_t)&block_descriptor_23);
}

void closure #1 in ConversationManagerClient.init()(uint64_t a1, unint64_t a2, uint64_t a3, const char *a4, const char *a5, const char *a6)
{
  uint64_t v44 = a6;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v11 - 8);
  os_log_type_t v13 = &v39[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  os_log_type_t v18 = &v39[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v16);
  id v20 = &v39[-v19];
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for client != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Log.client);
    swift_bridgeObjectRetain_n();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v46 = v25;
      *(_DWORD *)uint64_t v24 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B0DF7000, v22, v23, v44, v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v25, -1, -1);
      MEMORY[0x1B3EA39E0](v24, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    uint64_t v44 = a4;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v15 + 32))(v20, v13, v14);
    if (one-time initialization token for client != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Log.client);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v15 + 16))(v18, v20, v14);
    swift_bridgeObjectRetain_n();
    id v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.info.getter();
    int v29 = v28;
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v30 = swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      uint64_t v46 = v43;
      *(_DWORD *)uint64_t v30 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v42 = MEMORY[0x1E4FBC840] + 8;
      uint64_t v31 = Dictionary.description.getter();
      int v40 = v29;
      uint64_t v32 = v31;
      uint64_t v41 = a5;
      unint64_t v34 = v33;
      swift_bridgeObjectRelease();
      uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v34, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v30 + 12) = 2080;
      _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v37 = *(void (**)(unsigned char *, uint64_t))(v15 + 8);
      v37(v18, v14);
      _os_log_impl(&dword_1B0DF7000, v27, (os_log_type_t)v40, v41, (uint8_t *)v30, 0x16u);
      uint64_t v38 = v43;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v38, -1, -1);
      MEMORY[0x1B3EA39E0](v30, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      uint64_t v37 = *(void (**)(unsigned char *, uint64_t))(v15 + 8);
      v37(v18, v14);
    }

    ConversationManagerClient.includeMetricsReport(_:conversationUUID:)(a3, (uint64_t)v20);
    v37(v20, v14);
  }
}

uint64_t closure #5 in ConversationManagerClient.init()(void **a1, void **a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unint64_t v34 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  os_log_type_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v16 = (char *)&v33 - v15;
  MEMORY[0x1F4188790](v14);
  os_log_type_t v18 = (char *)&v33 - v17;
  uint64_t v19 = *a1;
  id v20 = *a2;
  if (v19)
  {
    id v21 = objc_msgSend(v19, sel_UUID);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v22(v18, 0, 1, v4);
  }
  else
  {
    uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v22((char *)&v33 - v17, 1, 1, v4);
  }
  if (v20)
  {
    id v23 = objc_msgSend(v20, sel_UUID);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v24 = 0;
  }
  else
  {
    uint64_t v24 = 1;
  }
  v22(v16, v24, 1, v4);
  uint64_t v25 = (uint64_t)&v9[*(int *)(v7 + 48)];
  outlined init with copy of UUID?((uint64_t)v18, (uint64_t)v9);
  outlined init with copy of UUID?((uint64_t)v16, v25);
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v26((uint64_t)v9, 1, v4) == 1)
  {
    outlined destroy of UUID?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
    outlined destroy of UUID?((uint64_t)v18, &demangling cache variable for type metadata for UUID?);
    int v27 = v26(v25, 1, v4);
    if (v27 == 1) {
      os_log_type_t v28 = &demangling cache variable for type metadata for UUID?;
    }
    else {
      os_log_type_t v28 = &demangling cache variable for type metadata for (UUID?, UUID?);
    }
    if (v27 == 1) {
      char v29 = -1;
    }
    else {
      char v29 = 0;
    }
  }
  else
  {
    outlined init with copy of UUID?((uint64_t)v9, (uint64_t)v13);
    if (v26(v25, 1, v4) == 1)
    {
      outlined destroy of UUID?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
      outlined destroy of UUID?((uint64_t)v18, &demangling cache variable for type metadata for UUID?);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
      char v29 = 0;
      os_log_type_t v28 = &demangling cache variable for type metadata for (UUID?, UUID?);
    }
    else
    {
      uint64_t v30 = v34;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v34, v25, v4);
      _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v31 = *(void (**)(char *, uint64_t))(v5 + 8);
      v31(v30, v4);
      os_log_type_t v28 = &demangling cache variable for type metadata for UUID?;
      outlined destroy of UUID?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
      outlined destroy of UUID?((uint64_t)v18, &demangling cache variable for type metadata for UUID?);
      v31(v13, v4);
    }
  }
  outlined destroy of UUID?((uint64_t)v9, v28);
  return v29 & 1;
}

Swift::Void __swiftcall ConversationManagerClient.fetchInitialStateIfNeeded()()
{
  id v1 = v0;
  uint64_t v38[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (uint64_t *)((char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)((char *)v1 + direct field offset for XPCClient.queue);
  void *v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FBCBF0], v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v5 = ConversationManagerClient.notification.getter();
  uint64_t v8 = v5[2];
  state64[0] = 0;
  swift_beginAccess();
  if (notify_get_state(*(_DWORD *)(v8 + 32), state64))
  {
    if (one-time initialization token for default == -1)
    {
LABEL_4:
      uint64_t v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static Log.default);
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl(&dword_1B0DF7000, v10, v11, "Could not get current state.", v12, 2u);
        MEMORY[0x1B3EA39E0](v12, -1, -1);
      }

      goto LABEL_7;
    }
LABEL_35:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v18 = state64[0];
  if (state64[0])
  {
    uint64_t v19 = swift_release();
    if (v18 != 1) {
      return;
    }
    goto LABEL_19;
  }
LABEL_7:
  uint64_t v13 = v5[3];
  if (!v13)
  {
    swift_release();
    return;
  }
  v38[0] = 0;
  swift_beginAccess();
  if (notify_get_state(*(_DWORD *)(v13 + 32), v38))
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Log.default);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_1B0DF7000, v15, v16, "Could not get current state.", v17, 2u);
      MEMORY[0x1B3EA39E0](v17, -1, -1);
    }

    swift_release();
    return;
  }
  uint64_t v19 = swift_release();
  if (v38[0] != 1) {
    return;
  }
LABEL_19:
  if (((*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x1A0))(v19) & 1) == 0)
  {
    id v20 = objc_msgSend(self, sel_processInfo);
    char v21 = specialized NSProcessInfo.isAllowedToConnect<A>(to:)();

    if (v21)
    {
      MEMORY[0x1F4188790](v22);
      *(&v35 - 2) = (uint64_t)v1;
      uint64_t v23 = swift_allocObject();
      *(void *)(v23 + 16) = v1;
      uint64_t v24 = v1;
      specialized XPCClient.withSynchronousHost<A>(body:errorHandler:)((void (*)(uint64_t *))partial apply for closure #1 in ConversationManagerClient.fetchInitialStateIfNeeded(), (uint64_t)(&v35 - 4), (uint64_t)partial apply for closure #2 in ConversationManagerClient.fetchInitialStateIfNeeded(), v23, (uint64_t)&block_descriptor_175, &demangling cache variable for type metadata for ConversationManagerXPCHost);
      swift_release();
    }
    else
    {
      if (one-time initialization token for client != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      __swift_project_value_buffer(v25, (uint64_t)static Log.client);
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v26, v27))
      {
        os_log_type_t v28 = (uint8_t *)swift_slowAlloc();
        uint64_t v29 = swift_slowAlloc();
        v38[0] = v29;
        *(_DWORD *)os_log_type_t v28 = 136315138;
        if (one-time initialization token for identity != -1) {
          swift_once();
        }
        LOBYTE(v36) = static ConversationManagerInterface.identity;
        uint64_t v30 = String.init<A>(reflecting:)();
        uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, (uint64_t *)v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v26, v27, "ConversationManagerClient not requesting initial state since the sandbox does not have access to %s", v28, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v29, -1, -1);
        MEMORY[0x1B3EA39E0](v28, -1, -1);
      }

      if (one-time initialization token for runtimeIssues != -1) {
        swift_once();
      }
      __swift_project_value_buffer(v25, (uint64_t)static Log.runtimeIssues);
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v32, v33))
      {
        unint64_t v34 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v34 = 0;
        _os_log_impl(&dword_1B0DF7000, v32, v33, "Using SharePlay requires that you add the Group Activities capability to your application's target.", v34, 2u);
        MEMORY[0x1B3EA39E0](v34, -1, -1);
      }
    }
  }
}

uint64_t specialized NSProcessInfo.isAllowedToConnect<A>(to:)()
{
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  if ((static ConversationManagerInterface.identity & 0xFE) == 4) {
    return 1;
  }
  objc_msgSend(v0, sel_processIdentifier);
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  BOOL v1 = _cp_sandbox_check();
  swift_release();
  return v1;
}

uint64_t closure #1 in ConversationManagerClient.fetchInitialStateIfNeeded()(void **a1, void *a2)
{
  uint64_t v3 = *a1;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.client);
  uint64_t v5 = a2;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    uint64_t v9 = aBlock[0];
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v21 = (uint64_t)v5;
    type metadata accessor for ConversationManagerClient();
    uint64_t v10 = v5;
    uint64_t v11 = String.init<A>(reflecting:)();
    uint64_t v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v6, v7, "ConversationManagerClient requesting initial state %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v9, -1, -1);
    MEMORY[0x1B3EA39E0](v8, -1, -1);
  }
  else
  {
  }
  uint64_t v13 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v5) + 0x1A8))(1);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v5;
  aBlock[4] = (uint64_t)partial apply for closure #1 in closure #1 in ConversationManagerClient.fetchInitialStateIfNeeded();
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed [UUID : TUConversationActivitySessionContainer]) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_181;
  uint64_t v15 = _Block_copy(aBlock);
  os_log_type_t v16 = v5;
  swift_release();
  objc_msgSend(v3, sel_requestConversationContainersByGroupUUIDWithReply_, v15);
  _Block_release(v15);
  uint64_t v17 = (*(uint64_t (**)(void))((*v13 & *v16) + 0x140))();
  uint64_t v18 = MEMORY[0x1F4188790](v17);
  specialized Sequence.forEach(_:)(v18, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))partial apply for closure #2 in closure #1 in ConversationManagerClient.fetchInitialStateIfNeeded());
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #1 in ConversationManagerClient.fetchInitialStateIfNeeded()(uint64_t a1)
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.client);
  swift_bridgeObjectRetain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v11 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    type metadata accessor for UUID();
    type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for TUConversationActivitySessionContainer);
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    swift_bridgeObjectRetain();
    uint64_t v7 = Dictionary.description.getter();
    unint64_t v9 = v8;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v3, v4, "ConversationManagerClient got initial state %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v6, -1, -1);
    MEMORY[0x1B3EA39E0](v5, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v11 = a1;
  swift_retain();
  CurrentValueSubject.send(_:)();
  return swift_release();
}

uint64_t closure #2 in ConversationManagerClient.fetchInitialStateIfNeeded()(void *a1, void *a2)
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.client);
  id v5 = a1;
  id v6 = a1;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    unint64_t v15 = v10;
    *(_DWORD *)unint64_t v9 = 136315138;
    id v11 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v12 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, (uint64_t *)&v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v7, v8, "Error requesting initial state: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v10, -1, -1);
    MEMORY[0x1B3EA39E0](v9, -1, -1);
  }
  else
  {
  }
  swift_retain();
  unint64_t v15 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  CurrentValueSubject.send(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a2) + 0x1A8))(0);
}

uint64_t specialized XPCClient.withSynchronousHost<A>(body:errorHandler:)(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized XPCClient.withSynchronousHost<A>(body:errorHandler:)(a1, a2, a3, a4, (uint64_t)&block_descriptor_133, &demangling cache variable for type metadata for BackgroundSessionManagerXPCClient);
}

{
  return specialized XPCClient.withSynchronousHost<A>(body:errorHandler:)(a1, a2, a3, a4, (uint64_t)&block_descriptor_130, &demangling cache variable for type metadata for ActivitySessionXPCHost);
}

uint64_t specialized XPCClient.withSynchronousHost<A>(body:errorHandler:)(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  id v11 = (void *)specialized XPCClient.connection.getter();
  aBlock[4] = a3;
  aBlock[5] = a4;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  aBlock[3] = a5;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  id v13 = objc_msgSend(v11, sel_synchronousRemoteObjectProxyWithErrorHandler_, v12);
  _Block_release(v12);

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(a6);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    uint64_t v17 = v15;
    a1(&v17);
    return swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall ConversationManagerClient.handleServerDisconnect()()
{
  v45[3] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (uint64_t *)((char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v5 = *(void **)&v0[direct field offset for XPCClient.queue];
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBCBF0], v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    if (one-time initialization token for client == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = __swift_project_value_buffer(v7, (uint64_t)static Log.client);
  unint64_t v9 = v0;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v10, v11))
  {

    goto LABEL_23;
  }
  uint64_t v12 = (uint8_t *)swift_slowAlloc();
  uint64_t v13 = swift_slowAlloc();
  v45[0] = v13;
  *(_DWORD *)uint64_t v12 = 136315138;
  uint64_t v14 = ConversationManagerClient.notification.getter();
  uint64_t v15 = v14[2];
  state64[0] = 0;
  swift_beginAccess();
  if (notify_get_state(*(_DWORD *)(v15 + 32), state64))
  {
    uint64_t v42 = v13;
    uint64_t v16 = v8;
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v7, (uint64_t)static Log.default);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl(&dword_1B0DF7000, v17, v18, "Could not get current state.", v19, 2u);
      MEMORY[0x1B3EA39E0](v19, -1, -1);
    }

    uint64_t v8 = v16;
    uint64_t v13 = v42;
    goto LABEL_10;
  }
  uint64_t v24 = state64[0];
  if (!state64[0])
  {
LABEL_10:
    uint64_t v20 = v14[3];
    if (v20)
    {
      state64[0] = 0;
      swift_beginAccess();
      if (notify_get_state(*(_DWORD *)(v20 + 32), state64))
      {
        uint64_t v42 = v8;
        if (one-time initialization token for default != -1) {
          swift_once();
        }
        __swift_project_value_buffer(v7, (uint64_t)static Log.default);
        uint64_t v21 = Logger.logObject.getter();
        os_log_type_t v22 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v21, v22))
        {
          uint64_t v23 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v23 = 0;
          _os_log_impl(&dword_1B0DF7000, v21, v22, "Could not get current state.", v23, 2u);
          MEMORY[0x1B3EA39E0](v23, -1, -1);
        }
        swift_release();

        uint64_t v24 = 0;
      }
      else
      {
        swift_release();
        uint64_t v24 = state64[0];
      }
    }
    else
    {
      swift_release();
      uint64_t v24 = 0;
    }
    goto LABEL_22;
  }
  swift_release();
LABEL_22:
  state64[0] = v24;
  uint64_t v25 = String.init<A>(reflecting:)();
  state64[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v45);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  _os_log_impl(&dword_1B0DF7000, v10, v11, "Server disconnected for ConversationManagerClient notification state %s", v12, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1B3EA39E0](v13, -1, -1);
  MEMORY[0x1B3EA39E0](v12, -1, -1);

LABEL_23:
  swift_retain();
  v45[0] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  CurrentValueSubject.send(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  Subject<>.send()();
  swift_release();
  os_log_type_t v27 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *(void *)v9) + 0x1A8))(0);
  os_log_type_t v28 = ConversationManagerClient.notification.getter();
  uint64_t v29 = v28[2];
  state64[0] = 0;
  swift_beginAccess();
  if (notify_get_state(*(_DWORD *)(v29 + 32), state64))
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v7, (uint64_t)static Log.default);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl(&dword_1B0DF7000, v30, v31, "Could not get current state.", v32, 2u);
      MEMORY[0x1B3EA39E0](v32, -1, -1);
    }
  }
  else
  {
    uint64_t v37 = state64[0];
    if (state64[0])
    {
      swift_release();
      if (v37 != 1) {
        return;
      }
      goto LABEL_41;
    }
  }
  uint64_t v33 = v28[3];
  if (!v33)
  {
    swift_release();
    return;
  }
  uint64_t v43 = 0;
  swift_beginAccess();
  if (notify_get_state(*(_DWORD *)(v33 + 32), &v43))
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v7, (uint64_t)static Log.default);
    unint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl(&dword_1B0DF7000, v34, v35, "Could not get current state.", v36, 2u);
      MEMORY[0x1B3EA39E0](v36, -1, -1);
    }
    swift_release();

    return;
  }
  swift_release();
  if (v43 != 1) {
    return;
  }
LABEL_41:
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v38, v39))
  {
    int v40 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v40 = 0;
    _os_log_impl(&dword_1B0DF7000, v38, v39, "Re-fetching initial state as we are told there are changed conversations", v40, 2u);
    MEMORY[0x1B3EA39E0](v40, -1, -1);
  }

  (*(void (**)(void))((*v27 & *(void *)v9) + 0x1E8))();
}

uint64_t ConversationManagerClient.__ivar_destroyer()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v1 = v0 + direct field offset for ConversationManagerClient._activeSessionContainer;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<TUConversationActivitySessionContainer?>);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(v1, v2);
}

id ConversationManagerClient.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationManagerClient();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc ConversationManagerClient.__ivar_destroyer(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v2 = a1 + direct field offset for ConversationManagerClient._activeSessionContainer;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<TUConversationActivitySessionContainer?>);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(v2, v3);
}

uint64_t specialized XPCClient.connection.getter()
{
  void (*v5)(void **__return_ptr, uint64_t);
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;

  uint64_t v1 = v0 + direct field offset for XPCClient._connection;
  uint64_t result = swift_beginAccess();
  id v3 = *(id *)v1;
  if (*(void *)v1)
  {
    id v4 = *(id *)v1;
LABEL_5:
    swift_endAccess();
    uint64_t v8 = v3;
    return (uint64_t)v4;
  }
  id v5 = *(void (**)(void **__return_ptr, uint64_t))(v1 + 8);
  if (v5)
  {
    id v6 = swift_retain();
    v5(&v9, v6);
    _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v5);
    uint64_t v7 = v9;
    *(void *)uint64_t v1 = v9;
    id v4 = v7;
    id v3 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t ConversationManagerClient.activitySessions.getter()
{
  uint64_t v1 = *(NSObject **)&v0[direct field offset for XPCClient.queue];
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for closure #1 in ConversationManagerClient.activitySessions.getter;
  *(void *)(v3 + 24) = v2;
  _OWORD v6[4] = _sIg_Ieg_TRTA_0;
  v6[5] = v3;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 1107296256;
  v6[2] = thunk for @escaping @callee_guaranteed () -> ();
  v6[3] = &block_descriptor_35;
  id v4 = _Block_copy(v6);
  v0;
  swift_retain();
  swift_release();
  dispatch_sync(v1, v4);
  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v1)
  {
    __break(1u);
  }
  else
  {
    swift_retain();
    CurrentValueSubject.value.getter();
    swift_release();
    swift_release();
    return v6[0];
  }
  return result;
}

uint64_t ConversationManagerClient.topicCategory(groupUUID:name:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v3;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v11 + v10, (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  uint64_t v12 = (void *)(v11 + ((v9 + v10 + 7) & 0xFFFFFFFFFFFFFFF8));
  void *v12 = a2;
  v12[1] = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<PubSubClient.TopicCategory, Never>);
  swift_allocObject();
  id v13 = v3;
  swift_bridgeObjectRetain();
  v16[1] = Future.init(_:)();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Future<PubSubClient.TopicCategory, Never> and conformance Future<A, B>, &demangling cache variable for type metadata for Future<PubSubClient.TopicCategory, Never>);
  uint64_t v14 = Publisher.eraseToAnyPublisher()();
  swift_release();
  return v14;
}

uint64_t closure #1 in ConversationManagerClient.topicCategory(groupUUID:name:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v30 = a2;
  uint64_t v31 = a6;
  uint64_t v28 = a1;
  uint64_t v29 = a5;
  uint64_t v33 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v36 = *(void *)(v33 - 8);
  MEMORY[0x1F4188790](v33);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v34 = *(void *)(v10 - 8);
  uint64_t v35 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = *(void *)&a3[direct field offset for XPCClient.queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a4, v13);
  unint64_t v17 = (*(unsigned __int8 *)(v14 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  unint64_t v18 = (v15 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v19 + v17, v16, v13);
  uint64_t v20 = (void *)(v19 + v18);
  uint64_t v21 = v31;
  *uint64_t v20 = v29;
  v20[1] = v21;
  os_log_type_t v22 = (void *)(v19 + ((v18 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v23 = v30;
  *os_log_type_t v22 = v28;
  v22[1] = v23;
  aBlock[4] = partial apply for closure #1 in closure #1 in ConversationManagerClient.topicCategory(groupUUID:name:);
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_172;
  uint64_t v24 = _Block_copy(aBlock);
  uint64_t v25 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v37 = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v26 = v33;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v12, v9, v24);
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v26);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v35);
  return swift_release();
}

void closure #1 in closure #1 in ConversationManagerClient.topicCategory(groupUUID:name:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(uint64_t *), uint64_t a6)
{
  uint64_t v52 = a3;
  unint64_t v53 = a4;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = &v48[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = &v48[-v14];
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  uint64_t v57 = a2;
  specialized Sequence.first(where:)(partial apply for closure #1 in closure #1 in closure #1 in ConversationManagerClient.topicCategory(groupUUID:name:), (uint64_t)v56, v59[2]);
  unint64_t v17 = v16;
  uint64_t v51 = 0;
  swift_bridgeObjectRelease();
  uint64_t v54 = a6;
  uint64_t v55 = a5;
  if (v17)
  {
    id v18 = objc_msgSend(v17, sel_activitySessions);

    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    _sSo29TUConversationActivitySessionCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    uint64_t v19 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v19 = MEMORY[0x1E4FBC870];
  }
  int64_t v20 = specialized _copyCollectionToContiguousArray<A>(_:)(v19);
  swift_bridgeObjectRelease();
  BOOL v21 = v20 < 0 || (v20 & 0x4000000000000000) != 0;
  if (v21)
  {
    swift_bridgeObjectRetain();
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (v22 != 1)
    {
LABEL_9:
      if (!v22)
      {
        swift_release();
        unint64_t v23 = v53;
        if (one-time initialization token for client != -1) {
          swift_once();
        }
        uint64_t v24 = type metadata accessor for Logger();
        __swift_project_value_buffer(v24, (uint64_t)static Log.client);
        (*(void (**)(unsigned char *, uint64_t, uint64_t))(v10 + 16))(v15, a2, v9);
        swift_bridgeObjectRetain_n();
        uint64_t v25 = Logger.logObject.getter();
        os_log_type_t v26 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v25, v26))
        {
          uint64_t v27 = swift_slowAlloc();
          uint64_t v51 = swift_slowAlloc();
          v59[0] = v51;
          *(_DWORD *)uint64_t v27 = 136315650;
          uint64_t v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ELL, 0x80000001B115D550, v59);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v27 + 12) = 2080;
          _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
          uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, v59);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v15, v9);
          *(_WORD *)(v27 + 22) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v23, v59);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B0DF7000, v25, v26, "ConversationManagerClient.%s did not find matching PubSubClient.TopicCategory for group=%s name=%s", (uint8_t *)v27, 0x20u);
          uint64_t v30 = v51;
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v30, -1, -1);
          MEMORY[0x1B3EA39E0](v27, -1, -1);
        }
        else
        {
          (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v15, v9);

          swift_bridgeObjectRelease_n();
        }
        unsigned __int8 v41 = 0;
        id v42 = 0;
        goto LABEL_36;
      }
      unint64_t v31 = v53;
      if (one-time initialization token for client != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      __swift_project_value_buffer(v32, (uint64_t)static Log.client);
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v10 + 16))(v13, a2, v9);
      swift_bridgeObjectRetain_n();
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.default.getter();
      int v35 = v34;
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v36 = swift_slowAlloc();
        uint64_t v50 = swift_slowAlloc();
        v59[0] = v50;
        *(_DWORD *)uint64_t v36 = 136315650;
        int v49 = v35;
        uint64_t v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ELL, 0x80000001B115D550, v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v36 + 12) = 2080;
        _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, v59);
        unint64_t v31 = v53;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v13, v9);
        *(_WORD *)(v36 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v39 = v52;
        uint64_t v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v31, v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B0DF7000, v33, (os_log_type_t)v49, "ConversationManagerClient.%s found multiple activities for group=%s, filtering for topic=%s", (uint8_t *)v36, 0x20u);
        uint64_t v40 = v50;
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v40, -1, -1);
        MEMORY[0x1B3EA39E0](v36, -1, -1);
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v13, v9);

        swift_bridgeObjectRelease_n();
        uint64_t v39 = v52;
      }
      swift_bridgeObjectRetain();
      id v42 = specialized Sequence.first(where:)(v20, v39, v31);
      swift_release();
      swift_bridgeObjectRelease();
      if (v42)
      {
        id v43 = objc_msgSend(v42, sel_activity);
        goto LABEL_30;
      }
LABEL_35:
      unsigned __int8 v41 = 0;
LABEL_36:
      uint64_t v45 = v55;
LABEL_41:
      LOWORD(v59[0]) = v41;
      v45(v59);

      return;
    }
  }
  else
  {
    uint64_t v22 = *(void *)(v20 + 16);
    if (v22 != 1) {
      goto LABEL_9;
    }
  }
  if (v21)
  {
    swift_bridgeObjectRetain();
    id v42 = (id)_CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (v42) {
      goto LABEL_26;
    }
LABEL_34:
    swift_release();
    goto LABEL_35;
  }
  id v42 = *(id *)(v20 + 16);
  if (!v42) {
    goto LABEL_34;
  }
LABEL_26:
  if ((v20 & 0xC000000000000001) != 0)
  {
    id v44 = (id)MEMORY[0x1B3EA25C0](0, v20);
    goto LABEL_29;
  }
  if (*(void *)(v20 + 16))
  {
    id v44 = *(id *)(v20 + 32);
LABEL_29:
    id v42 = v44;
    swift_release();
    id v43 = objc_msgSend(v42, sel_activity);
LABEL_30:
    uint64_t v45 = v55;
    id v46 = v43;

    if (v46)
    {
      id v42 = v46;
      if (objc_msgSend(v42, sel_isSystemActivity))
      {

        unsigned __int8 v41 = 2;
      }
      else
      {
        unsigned int v47 = objc_msgSend(v42, sel_isScreenSharingActivity);

        if (v47) {
          unsigned __int8 v41 = 3;
        }
        else {
          unsigned __int8 v41 = 1;
        }
      }
    }
    else
    {
      unsigned __int8 v41 = 0;
      id v42 = 0;
    }
    goto LABEL_41;
  }
  __break(1u);
}

uint64_t closure #1 in closure #1 in closure #1 in ConversationManagerClient.topicCategory(groupUUID:name:)(id *a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  id v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = objc_msgSend(*a1, sel_groupUUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  char v7 = static UUID.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v7 & 1;
}

uint64_t ConversationManagerClient.onHostProcessDisconnected.getter()
{
  uint64_t v1 = *(void *)(v0 + direct field offset for ConversationManagerClient.publishers + 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<PassthroughSubject<(), Never>>);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v1;
  swift_retain();
  return v2;
}

uint64_t ConversationManagerClient.addRemoteMembers(_:toConversationWithUUID:)(uint64_t a1, uint64_t a2)
{
  return ConversationManagerClient.includeMetricsReport(_:conversationUUID:)(a1, a2, (uint64_t)&unk_1F09B2BA8, (uint64_t)partial apply for closure #1 in ConversationManagerClient.addRemoteMembers(_:toConversationWithUUID:), (uint64_t)&block_descriptor_44);
}

uint64_t ConversationManagerClient.includeMetricsReport(_:conversationUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = a5;
  uint64_t v24 = a1;
  uint64_t v25 = a4;
  v23[1] = a3;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v30 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v28 = *(void *)(v10 - 8);
  uint64_t v29 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = *(void *)&v5[direct field offset for XPCClient.queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a2, v13);
  unint64_t v17 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = v24;
  *(void *)(v18 + 16) = v5;
  *(void *)(v18 + 24) = v19;
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v18 + v17, v16, v13);
  aBlock[4] = v25;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = v27;
  int64_t v20 = _Block_copy(aBlock);
  BOOL v21 = v5;
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v31 = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v12, v9, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v29);
  return swift_release();
}

void closure #1 in closure #1 in ConversationManagerClient.addRemoteMembers(_:toConversationWithUUID:)(void **a1)
{
  uint64_t v1 = *a1;
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  _sSo29TUConversationActivitySessionCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  Class v3 = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v1, sel_addRemoteMembers_toConversationWithUUID_, isa, v3);
}

void closure #2 in closure #1 in ConversationManagerClient.addRemoteMembers(_:toConversationWithUUID:)(void *a1)
{
}

uint64_t ConversationManagerClient.prepareForGroupActivity(overrides:completionHandler:)(void *a1, uint64_t (*a2)(void, void), uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v38 = a2;
  uint64_t v39 = a3;
  uint64_t v36 = a1;
  state64[12] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v37 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = ConversationManagerClient.notification.getter();
  uint64_t v13 = v12[2];
  state64[0] = 0;
  swift_beginAccess();
  if (notify_get_state(*(_DWORD *)(v13 + 32), state64))
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Log.default);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v15, v16))
    {
      unint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v17 = 0;
      _os_log_impl(&dword_1B0DF7000, v15, v16, "Could not get current state.", v17, 2u);
      MEMORY[0x1B3EA39E0](v17, -1, -1);
    }
  }
  else
  {
    uint64_t v23 = state64[0];
    if (state64[0])
    {
      swift_release();
      if (v23 == 1) {
        goto LABEL_19;
      }
      goto LABEL_20;
    }
  }
  uint64_t v18 = v12[3];
  if (v18)
  {
    state64[0] = 0;
    swift_beginAccess();
    if (notify_get_state(*(_DWORD *)(v18 + 32), state64))
    {
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)static Log.default);
      int64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v22 = 0;
        _os_log_impl(&dword_1B0DF7000, v20, v21, "Could not get current state.", v22, 2u);
        MEMORY[0x1B3EA39E0](v22, -1, -1);
      }
      swift_release();

      goto LABEL_20;
    }
    swift_release();
    if (state64[0] == 1)
    {
LABEL_19:
      uint64_t v24 = (void *)swift_allocObject();
      uint64_t v25 = v36;
      v24[2] = v4;
      v24[3] = v25;
      uint64_t v26 = v39;
      v24[4] = v38;
      v24[5] = v26;
      state64[4] = (uint64_t)partial apply for closure #1 in ConversationManagerClient.prepareForGroupActivity(overrides:completionHandler:);
      state64[5] = (uint64_t)v24;
      state64[0] = MEMORY[0x1E4F143A8];
      state64[1] = 1107296256;
      uint64_t state64[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
      uint64_t state64[3] = (uint64_t)&block_descriptor_50;
      uint64_t v27 = _Block_copy(state64);
      id v28 = v25;
      swift_retain();
      id v29 = v4;
      static DispatchQoS.unspecified.getter();
      uint64_t v40 = MEMORY[0x1E4FBC860];
      _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x1B3EA2200](0, v11, v7, v27);
      _Block_release(v27);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v7, v5);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      return swift_release();
    }
  }
  else
  {
    swift_release();
  }
LABEL_20:
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  __swift_project_value_buffer(v31, (uint64_t)static Log.client);
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v32, v33))
  {
    os_log_type_t v34 = (uint8_t *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    state64[0] = v35;
    *(_DWORD *)os_log_type_t v34 = 136315138;
    uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000003ALL, 0x80000001B115A680, (uint64_t *)state64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B0DF7000, v32, v33, "Short circuiting prepare for activation since %s is reporting no active conversations.", v34, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v35, -1, -1);
    MEMORY[0x1B3EA39E0](v34, -1, -1);
  }

  return v38(0, 0);
}

uint64_t closure #1 in ConversationManagerClient.prepareForGroupActivity(overrides:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  swift_retain();
  specialized XPCClient.withHost(body:errorHandler:)((void (*)(uint64_t *))partial apply for closure #1 in closure #1 in ConversationManagerClient.prepareForGroupActivity(overrides:completionHandler:), (uint64_t)v8, (uint64_t)partial apply for closure #2 in closure #1 in ConversationManagerClient.prepareForGroupActivity(overrides:completionHandler:), v6);
  return swift_release();
}

void closure #1 in closure #1 in ConversationManagerClient.prepareForGroupActivity(overrides:completionHandler:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *a1;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a3;
  *(void *)(v8 + 24) = a4;
  void v10[4] = partial apply for closure #1 in closure #1 in closure #1 in ConversationManagerClient.prepareForGroupActivity(overrides:completionHandler:);
  v10[5] = v8;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1107296256;
  void v10[2] = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
  v10[3] = &block_descriptor_166;
  uint64_t v9 = _Block_copy(v10);
  swift_retain();
  swift_release();
  objc_msgSend(v7, sel_prepareForGroupActivityWithOverrides_completionHandler_, a2, v9);
  _Block_release(v9);
}

uint64_t closure #1 in closure #1 in closure #1 in ConversationManagerClient.prepareForGroupActivity(overrides:completionHandler:)(char a1, void *a2, uint64_t (*a3)(void, void))
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.client);
  id v7 = a2;
  id v8 = a2;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v19 = v12;
    *(_DWORD *)uint64_t v11 = 67109378;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 8) = 2080;
    uint64_t v18 = a3;
    if (a2)
    {
      id v13 = a2;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v14 = String.init<A>(reflecting:)();
      unint64_t v16 = v15;
    }
    else
    {
      unint64_t v16 = 0xE300000000000000;
      uint64_t v14 = 7104878;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v9, v10, "ConversationManagerClient prepareForGroupActivity success: %{BOOL}d, error: %s", (uint8_t *)v11, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v12, -1, -1);
    MEMORY[0x1B3EA39E0](v11, -1, -1);

    a3 = v18;
  }
  else
  {
  }
  return a3(a1 & 1, a2);
}

uint64_t closure #2 in closure #1 in ConversationManagerClient.prepareForGroupActivity(overrides:completionHandler:)(void *a1, uint64_t (*a2)(void, void))
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.client);
  id v5 = a1;
  id v6 = a1;
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v15 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    id v11 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v12 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v7, v8, "Encountered connection error with prepareForGroupActivity: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v10, -1, -1);
    MEMORY[0x1B3EA39E0](v9, -1, -1);
  }
  else
  {
  }
  return a2(0, 0);
}

Swift::Void __swiftcall ConversationManagerClient.setActivityAuthorization(_:forBundleIdentifier:)(Swift::Bool _, Swift::String forBundleIdentifier)
{
  object = forBundleIdentifier._object;
  uint64_t countAndFlagsBits = forBundleIdentifier._countAndFlagsBits;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  unint64_t v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = *(void *)&v2[direct field offset for XPCClient.queue];
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v2;
  *(unsigned char *)(v14 + 24) = _;
  *(void *)(v14 + 32) = countAndFlagsBits;
  *(void *)(v14 + 40) = object;
  aBlock[4] = partial apply for closure #1 in ConversationManagerClient.setActivityAuthorization(_:forBundleIdentifier:);
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_56;
  uint64_t v15 = _Block_copy(aBlock);
  unint64_t v16 = v2;
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  v17[1] = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_release();
}

void closure #1 in ConversationManagerClient.setActivityAuthorization(_:forBundleIdentifier:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (void *)specialized XPCClient.connection.getter();
  aBlock[4] = closure #2 in closure #1 in ConversationManagerClient.setActivityAuthorization(_:forBundleIdentifier:);
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  aBlock[3] = &block_descriptor_157_0;
  uint64_t v8 = _Block_copy(aBlock);
  swift_release();
  id v9 = objc_msgSend(v7, sel_synchronousRemoteObjectProxyWithErrorHandler_, v8);
  _Block_release(v8);

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConversationManagerXPCHost);
  if (swift_dynamicCast())
  {
    uint64_t v10 = (void *)MEMORY[0x1B3EA1B00](a3, a4);
    objc_msgSend(v11, sel_setActivityAuthorization_forBundleIdentifier_, a2 & 1, v10);
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void closure #2 in closure #1 in ConversationManagerClient.setActivityAuthorization(_:forBundleIdentifier:)(void *a1)
{
}

uint64_t ConversationManagerClient.createActivitySession(with:onConversationWithUUID:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  _OWORD v3[2] = a1;
  return MEMORY[0x1F4188298](ConversationManagerClient.createActivitySession(with:onConversationWithUUID:), 0, 0);
}

uint64_t ConversationManagerClient.createActivitySession(with:onConversationWithUUID:)()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 40) = v2;
  long long v3 = *(_OWORD *)(v0 + 16);
  *(void *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v4;
  *uint64_t v4 = v0;
  v4[1] = ConversationManagerClient.createActivitySession(with:onConversationWithUUID:);
  uint64_t v5 = MEMORY[0x1E4FBB390];
  return MEMORY[0x1F4188160](v0 + 64, 0, 0, 0xD000000000000033, 0x80000001B115D320, partial apply for closure #1 in ConversationManagerClient.createActivitySession(with:onConversationWithUUID:), v2, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = ConversationManagerClient.createActivitySession(with:onConversationWithUUID:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = ConversationManagerClient.createActivitySession(with:onConversationWithUUID:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))(*(unsigned __int8 *)(v0 + 64));
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t closure #1 in ConversationManagerClient.createActivitySession(with:onConversationWithUUID:)(uint64_t a1, char *a2, void *a3, uint64_t a4)
{
  uint64_t v29 = a4;
  uint64_t v30 = a1;
  uint64_t v31 = a3;
  uint64_t v35 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v38 = *(void *)(v35 - 8);
  MEMORY[0x1F4188790](v35);
  os_log_type_t v34 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v36 = *(void *)(v6 - 8);
  uint64_t v37 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v32 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v16 = a2;
  id v28 = a2;
  uint64_t v33 = *(void *)&a2[direct field offset for XPCClient.queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v29, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v30, v8);
  unint64_t v17 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v18 = (v14 + *(unsigned __int8 *)(v9 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v16;
  int64_t v20 = v31;
  *(void *)(v19 + 24) = v31;
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v19 + v17, v15, v12);
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v19 + v18, v11, v8);
  aBlock[4] = partial apply for closure #1 in closure #1 in ConversationManagerClient.createActivitySession(with:onConversationWithUUID:);
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_145;
  os_log_type_t v21 = _Block_copy(aBlock);
  id v22 = v28;
  id v23 = v20;
  uint64_t v24 = v32;
  static DispatchQoS.unspecified.getter();
  uint64_t v39 = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v26 = v34;
  uint64_t v25 = v35;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v24, v26, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v26, v25);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v24, v37);
  return swift_release();
}

uint64_t closure #1 in closure #1 in ConversationManagerClient.createActivitySession(with:onConversationWithUUID:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](v7);
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 16))(&v14[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], a4, v7);
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v8 + 32))(v11 + v10, &v14[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], v7);
  id v12 = a2;
  specialized XPCClient.withSynchronousHost<A>(body:errorHandler:)((void (*)(uint64_t *))partial apply for closure #1 in closure #1 in closure #1 in ConversationManagerClient.createActivitySession(with:onConversationWithUUID:), (uint64_t)v14, (uint64_t)partial apply for closure #2 in closure #1 in closure #1 in ConversationManagerClient.createActivitySession(with:onConversationWithUUID:), v11, (uint64_t)&block_descriptor_175, &demangling cache variable for type metadata for ConversationManagerXPCHost);
  return swift_release();
}

void closure #1 in closure #1 in closure #1 in ConversationManagerClient.createActivitySession(with:onConversationWithUUID:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](v7);
  unint64_t v10 = *a1;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a4, v7);
  unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v13 + v12, (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in closure #1 in ConversationManagerClient.createActivitySession(with:onConversationWithUUID:);
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  aBlock[3] = &block_descriptor_154;
  uint64_t v14 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v10, sel_createActivitySessionWith_onConversationWithUUID_completion_, a2, isa, v14);
  _Block_release(v14);
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()(uint64_t a1, uint64_t a2)
{
  long long v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

uint64_t closure #2 in closure #1 in closure #1 in ConversationManagerClient.createActivitySession(with:onConversationWithUUID:)(void *a1, void *a2)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.default);
  id v5 = a2;
  id v6 = a1;
  id v7 = v5;
  id v8 = a1;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    unint64_t v12 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    uint64_t v20 = v19;
    *(_DWORD *)uint64_t v11 = 138412546;
    id v13 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v12 = v7;

    *(_WORD *)(v11 + 12) = 2080;
    id v14 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v15 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v9, v10, "Error creating activitySession with request %@, error: %s", (uint8_t *)v11, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v12, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v19, -1, -1);
    MEMORY[0x1B3EA39E0](v11, -1, -1);
  }
  else
  {
  }
  uint64_t v20 = (uint64_t)a1;
  id v17 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
  return CheckedContinuation.resume(throwing:)();
}

uint64_t ConversationManagerClient.buzzMember(_:conversationUUID:)(void *a1, uint64_t a2)
{
  return ConversationManagerClient.buzzMember(_:conversationUUID:)(a1, a2, (uint64_t)&unk_1F09B2C20, (uint64_t)partial apply for closure #1 in ConversationManagerClient.buzzMember(_:conversationUUID:), (uint64_t)&block_descriptor_64);
}

void closure #2 in closure #1 in ConversationManagerClient.buzzMember(_:conversationUUID:)(void *a1)
{
}

uint64_t ConversationManagerClient.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:)(int a1, uint64_t a2)
{
  int v19 = a1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v23 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  id v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v21 = *(void *)(v7 - 8);
  uint64_t v22 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x1F4188790](v10);
  uint64_t v20 = *(void *)&v2[direct field offset for XPCClient.queue];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v11 + 16))(&v18[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)], a2, v10);
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 25) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v2;
  *(unsigned char *)(v14 + 24) = v19;
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v11 + 32))(v14 + v13, &v18[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)], v10);
  aBlock[4] = partial apply for closure #1 in ConversationManagerClient.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:);
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_70;
  uint64_t v15 = _Block_copy(aBlock);
  unint64_t v16 = v2;
  static DispatchQoS.unspecified.getter();
  uint64_t v24 = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v9, v6, v15);
  _Block_release(v15);
  (*(void (**)(unsigned char *, uint64_t))(v23 + 8))(v6, v4);
  (*(void (**)(unsigned char *, uint64_t))(v21 + 8))(v9, v22);
  return swift_release();
}

uint64_t closure #1 in ConversationManagerClient.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x1F4188790](v5);
  v11[16] = a2;
  uint64_t v12 = a3;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(&v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)], a3, v5);
  unint64_t v8 = (*(unsigned __int8 *)(v6 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = swift_allocObject();
  *(unsigned char *)(v9 + 16) = a2;
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v6 + 32))(v9 + v8, &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)], v5);
  specialized XPCClient.withSynchronousHost<A>(body:errorHandler:)((void (*)(uint64_t *))partial apply for closure #1 in closure #1 in ConversationManagerClient.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:), (uint64_t)v11, (uint64_t)partial apply for closure #2 in closure #1 in ConversationManagerClient.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:), v9, (uint64_t)&block_descriptor_175, &demangling cache variable for type metadata for ConversationManagerXPCHost);
  return swift_release();
}

void closure #2 in closure #1 in ConversationManagerClient.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:)(void *a1, char a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.client);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
  id v11 = a1;
  id v12 = a1;
  unint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    uint64_t v23 = v16;
    *(_DWORD *)uint64_t v15 = 67109634;
    LODWORD(v22) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 8) = 2080;
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *(_WORD *)(v15 + 18) = 2080;
    uint64_t v22 = (uint64_t)a1;
    id v19 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v20 = String.init<A>(reflecting:)();
    uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v13, v14, "Error setting downlink muted: (%{BOOL}d) for remote participants in conversation: %s with error: %s", (uint8_t *)v15, 0x1Cu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v16, -1, -1);
    MEMORY[0x1B3EA39E0](v15, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

uint64_t ConversationManagerClient.kickMember(_:conversationUUID:)(void *a1, uint64_t a2)
{
  return ConversationManagerClient.buzzMember(_:conversationUUID:)(a1, a2, (uint64_t)&unk_1F09B2C70, (uint64_t)partial apply for closure #1 in ConversationManagerClient.kickMember(_:conversationUUID:), (uint64_t)&block_descriptor_76);
}

uint64_t ConversationManagerClient.buzzMember(_:conversationUUID:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v28 = a5;
  uint64_t v25 = a1;
  uint64_t v26 = a4;
  v24[1] = a3;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v31 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v29 = *(void *)(v10 - 8);
  uint64_t v30 = v10;
  MEMORY[0x1F4188790](v10);
  id v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = *(void *)&v5[direct field offset for XPCClient.queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a2, v13);
  unint64_t v17 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v18 = swift_allocObject();
  id v19 = v25;
  *(void *)(v18 + 16) = v5;
  *(void *)(v18 + 24) = v19;
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v18 + v17, v16, v13);
  aBlock[4] = v26;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = v28;
  uint64_t v20 = _Block_copy(aBlock);
  unint64_t v21 = v5;
  id v22 = v19;
  static DispatchQoS.unspecified.getter();
  uint64_t v32 = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v12, v9, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v30);
  return swift_release();
}

void closure #2 in closure #1 in ConversationManagerClient.kickMember(_:conversationUUID:)(void *a1)
{
}

void closure #1 in closure #1 in ConversationManagerClient.includeMetricsReport(_:conversationUUID:)(void **a1)
{
  uint64_t v1 = *a1;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  Class v3 = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v1, sel_includeMetricsReport_onConversationWithUUID_, isa, v3);
}

void closure #2 in closure #1 in ConversationManagerClient.includeMetricsReport(_:conversationUUID:)(void *a1)
{
}

uint64_t closure #1 in ConversationManagerClient.registerEndpointProvider(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v11 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x140);
  uint64_t v12 = swift_bridgeObjectRetain();
  if (*(void *)(v11(v12) + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a2, a3), (v13 & 1) != 0))
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v15 = *(uint64_t (**)(unsigned char *))((*v10 & *a1) + 0x150);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v16 = (uint64_t (*)(unsigned char *, void))v15(v23);
    uint64_t v18 = v17;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v22 = *v18;
    *uint64_t v18 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a4, a5, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v18 = v22;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v20 = v16(v23, 0);
    uint64_t result = (*(uint64_t (**)(uint64_t))((*v10 & *a1) + 0x1A0))(v20);
    if (result)
    {
      MEMORY[0x1F4188790](result);
      v21[2] = a2;
      v21[3] = a3;
      return specialized XPCClient.withSynchronousHost<A>(body:errorHandler:)((void (*)(uint64_t *))partial apply for closure #1 in closure #1 in ConversationManagerClient.registerEndpointProvider(_:), (uint64_t)v21, (uint64_t)closure #2 in closure #1 in ConversationManagerClient.registerEndpointProvider(_:), 0, (uint64_t)&block_descriptor_175, &demangling cache variable for type metadata for ConversationManagerXPCHost);
    }
  }
  return result;
}

void closure #2 in closure #1 in ConversationManagerClient.registerEndpointProvider(_:)(void *a1)
{
}

uint64_t closure #1 in ConversationManagerClient.unregisterEndpointProvider(identifier:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v7 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x140);
  uint64_t v8 = swift_bridgeObjectRetain();
  if (*(void *)(v7(v8) + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    char v10 = v9;
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v10)
    {
      uint64_t v12 = *(uint64_t (**)(unsigned char *))((*v6 & *a1) + 0x150);
      swift_bridgeObjectRetain();
      char v13 = (uint64_t (*)(unsigned char *, void))v12(v16);
      specialized Dictionary._Variant.removeValue(forKey:)(a2, a3);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v14 = v13(v16, 0);
      uint64_t result = (*(uint64_t (**)(uint64_t))((*v6 & *a1) + 0x1A0))(v14);
      if (result)
      {
        MEMORY[0x1F4188790](result);
        void v15[2] = a2;
        void v15[3] = a3;
        return specialized XPCClient.withSynchronousHost<A>(body:errorHandler:)((void (*)(uint64_t *))partial apply for closure #1 in closure #1 in ConversationManagerClient.unregisterEndpointProvider(identifier:), (uint64_t)v15, (uint64_t)closure #2 in closure #1 in ConversationManagerClient.unregisterEndpointProvider(identifier:), 0, (uint64_t)&block_descriptor_175, &demangling cache variable for type metadata for ConversationManagerXPCHost);
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void closure #2 in closure #1 in ConversationManagerClient.unregisterEndpointProvider(identifier:)(void *a1)
{
}

uint64_t ConversationManagerClient.fetchEndpoint(for:activitySession:completionHandler:)(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v37 = a4;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v41 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v39 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for DispatchQoS();
  uint64_t v38 = *(void *)(v40 - 8);
  MEMORY[0x1F4188790](v40);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.client);
  swift_bridgeObjectRetain_n();
  id v16 = a3;
  unint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    aBlock[0] = v33;
    *(_DWORD *)uint64_t v19 = 136315394;
    uint64_t v36 = v11;
    swift_bridgeObjectRetain();
    uint64_t v32 = a1;
    uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v19 + 12) = 2080;
    uint64_t v42 = (uint64_t)v16;
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    uint64_t v34 = a5;
    uint64_t v35 = v14;
    uint64_t v20 = v6;
    id v21 = v16;
    uint64_t v22 = String.init<A>(reflecting:)();
    uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, aBlock);
    uint64_t v11 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v6 = v20;
    a1 = v32;
    a5 = v34;
    uint64_t v14 = v35;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v17, v18, "Fetching endpoint: %s for activity session: %s", (uint8_t *)v19, 0x16u);
    uint64_t v24 = v33;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v24, -1, -1);
    MEMORY[0x1B3EA39E0](v19, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v25 = (void *)swift_allocObject();
  v25[2] = v6;
  v25[3] = a1;
  v25[4] = a2;
  v25[5] = v16;
  v25[6] = v37;
  v25[7] = a5;
  aBlock[4] = (uint64_t)partial apply for closure #1 in ConversationManagerClient.fetchEndpoint(for:activitySession:completionHandler:);
  aBlock[5] = (uint64_t)v25;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_82;
  uint64_t v26 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  id v27 = v16;
  id v28 = v6;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v42 = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v29 = v39;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v14, v29, v26);
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v29, v11);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v14, v40);
  return swift_release();
}

void closure #1 in closure #1 in ConversationManagerClient.fetchEndpoint(for:activitySession:completionHandler:)(void **a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)aBlock - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v16 = *a1;
  unint64_t v17 = (void *)MEMORY[0x1B3EA1B00](a2, a3);
  id v18 = objc_msgSend(a4, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  id v20 = objc_msgSend(a4, sel_activity);
  aBlock[4] = a5;
  aBlock[5] = a6;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSXPCListenerEndpoint?) -> ();
  aBlock[3] = &block_descriptor_136;
  id v21 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v16, sel_fetchEndpointWith_activitySessionUUID_activity_completion_, v17, isa, v20, v21);
  _Block_release(v21);
}

void closure #2 in closure #1 in ConversationManagerClient.fetchEndpoint(for:activitySession:completionHandler:)(void *a1)
{
}

void closure #2 in closure #1 in ConversationManagerClient.addRemoteMembers(_:toConversationWithUUID:)(void *a1, const char *a2)
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.client);
  id v5 = a1;
  id v6 = a1;
  oslog = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v14 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    id v10 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v11 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, oslog, v7, a2, v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v9, -1, -1);
    MEMORY[0x1B3EA39E0](v8, -1, -1);
  }
  else
  {
  }
}

uint64_t protocol witness for ConversationManagerClientProtocol.onHostProcessDisconnected.getter in conformance ConversationManagerClient()
{
  uint64_t v1 = *(void *)(*v0 + direct field offset for ConversationManagerClient.publishers + 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<PassthroughSubject<(), Never>>);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v1;
  swift_retain();
  return v2;
}

uint64_t protocol witness for ConversationManagerClientProtocol.prepareForGroupActivity(overrides:completionHandler:) in conformance ConversationManagerClient(void *a1, uint64_t (*a2)(void, void), uint64_t a3)
{
  return ConversationManagerClient.prepareForGroupActivity(overrides:completionHandler:)(a1, a2, a3);
}

void protocol witness for ConversationManagerClientProtocol.setActivityAuthorization(_:forBundleIdentifier:) in conformance ConversationManagerClient(Swift::Bool a1, uint64_t a2, uint64_t a3)
{
}

uint64_t protocol witness for ConversationManagerClientProtocol.createActivitySession(with:onConversationWithUUID:) in conformance ConversationManagerClient(uint64_t a1, uint64_t a2)
{
  _OWORD v3[2] = a1;
  v3[3] = a2;
  v3[4] = *v2;
  return MEMORY[0x1F4188298](protocol witness for ConversationManagerClientProtocol.createActivitySession(with:onConversationWithUUID:) in conformance ConversationManagerClient, 0, 0);
}

uint64_t protocol witness for ConversationManagerClientProtocol.createActivitySession(with:onConversationWithUUID:) in conformance ConversationManagerClient()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 40) = v2;
  long long v3 = *(_OWORD *)(v0 + 16);
  *(void *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v4;
  *uint64_t v4 = v0;
  v4[1] = ConversationManagerClient.createActivitySession(with:onConversationWithUUID:);
  uint64_t v5 = MEMORY[0x1E4FBB390];
  return MEMORY[0x1F4188160](v0 + 64, 0, 0, 0xD000000000000033, 0x80000001B115D320, closure #1 in ConversationManagerClient.createActivitySession(with:onConversationWithUUID:)partial apply, v2, v5);
}

uint64_t protocol witness for ConversationManagerClientProtocol.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:) in conformance ConversationManagerClient(int a1, uint64_t a2)
{
  return ConversationManagerClient.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:)(a1, a2);
}

uint64_t protocol witness for ConversationManagerClientProtocol.includeMetricsReport(_:conversationUUID:) in conformance ConversationManagerClient(uint64_t a1, uint64_t a2)
{
  return ConversationManagerClient.includeMetricsReport(_:conversationUUID:)(a1, a2);
}

uint64_t protocol witness for ActivitySessionContainerProvider.activitySessions.getter in conformance ConversationManagerClient()
{
  return ConversationManagerClient.activitySessions.getter();
}

uint64_t protocol witness for ActivitySessionContainerProvider.pluginClientReporter.getter in conformance ConversationManagerClient()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0xF8))();
}

uint64_t protocol witness for ActivitySessionContainerProvider.pubSubTopicReporter.getter in conformance ConversationManagerClient()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0x110))();
}

uint64_t protocol witness for ActivitySessionContainerProvider.topicCategory(groupUUID:name:) in conformance ConversationManagerClient(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](v7);
  id v10 = *v3;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  unint64_t v11 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v10;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v12 + v11, (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  uint64_t v13 = (void *)(v12 + ((v9 + v11 + 7) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v13 = a2;
  v13[1] = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<PubSubClient.TopicCategory, Never>);
  swift_allocObject();
  id v14 = v10;
  swift_bridgeObjectRetain();
  v17[1] = Future.init(_:)();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Future<PubSubClient.TopicCategory, Never> and conformance Future<A, B>, &demangling cache variable for type metadata for Future<PubSubClient.TopicCategory, Never>);
  uint64_t v15 = Publisher.eraseToAnyPublisher()();
  swift_release();
  return v15;
}

Swift::Void __swiftcall ConversationManagerClient.updateConversationContainers(conversationContainersByGroupUUID:)(Swift::OpaquePointer conversationContainersByGroupUUID)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  id v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  id v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[0] = *(void *)&v1[direct field offset for XPCClient.queue];
  unint64_t v11 = (Swift::OpaquePointer *)swift_allocObject();
  v11[2]._rawValue = v1;
  v11[3]._rawValue = conversationContainersByGroupUUID._rawValue;
  aBlock[4] = partial apply for closure #1 in ConversationManagerClient.updateConversationContainers(conversationContainersByGroupUUID:);
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_88_0;
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v13 = v1;
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  v14[1] = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v10, v6, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_release();
}

uint64_t closure #1 in ConversationManagerClient.updateConversationContainers(conversationContainersByGroupUUID:)()
{
  return swift_release();
}

void ConversationManagerClient.requestEndpoint(with:activitySessionUUID:activity:completion:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  uint64_t v35 = a4;
  uint64_t v37 = a1;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Log.client);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, v10);
  swift_bridgeObjectRetain_n();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v34 = a3;
  if (v17)
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    uint64_t v39 = v31;
    *(_DWORD *)uint64_t v18 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, a2, &v39);
    uint64_t v33 = a5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v18 + 12) = 2080;
    uint64_t v32 = a6;
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v39);
    a5 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    _os_log_impl(&dword_1B0DF7000, v15, v16, "Requesting endpoint for identifier=%s activitySessionUUID=%s", (uint8_t *)v18, 0x16u);
    uint64_t v21 = v31;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v21, -1, -1);
    MEMORY[0x1B3EA39E0](v18, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }

  uint64_t v22 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v36) + 0x140);
  uint64_t v23 = swift_bridgeObjectRetain();
  uint64_t v24 = v22(v23);
  if (*(void *)(v24 + 16) && (unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v37, a2), (v26 & 1) != 0))
  {
    uint64_t v27 = *(void *)(*(void *)(v24 + 56) + 16 * v25 + 8);
    swift_unknownObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v29 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 16))(v34, v35, ObjectType, v27);
    a5();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    ((void (*)(void))a5)(0);
  }
}

uint64_t sub_1B0E7BB78()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for closure #1 in ConversationManagerClient.registerEndpointProvider(_:)()
{
  return closure #1 in ConversationManagerClient.registerEndpointProvider(_:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t sub_1B0E7BBD8()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #1 in ConversationManagerClient.unregisterEndpointProvider(identifier:)()
{
  return closure #1 in ConversationManagerClient.unregisterEndpointProvider(identifier:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1B0E7BC24@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1B8))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0E7BC88(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x1C0);
  id v4 = *a1;
  return v3(v2);
}

uint64_t sub_1B0E7BCF8()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void partial apply for closure #1 in ConversationManagerClient.init()(uint64_t a1, unint64_t a2, uint64_t a3)
{
  closure #1 in ConversationManagerClient.init()(a1, a2, a3, *(const char **)(v3 + 16), "Received PluginClientReport report=%s conversationUUID=%s", "PluginClientReporter could not convert parse conversation UUID from tag=%s, dropping report");
}

void partial apply for closure #2 in ConversationManagerClient.init()(uint64_t a1, unint64_t a2, uint64_t a3)
{
  closure #1 in ConversationManagerClient.init()(a1, a2, a3, *(const char **)(v3 + 16), "Received PubSubTopicReport report=%s conversationUUID=%s", "PubSubTopicReporter could not convert parse conversation UUID from tag=%s, dropping report");
}

uint64_t sub_1B0E7BD88()
{
  swift_unknownObjectUnownedDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in ConversationManagerClient.includeMetricsReport(_:conversationUUID:)()
{
  return partial apply for closure #1 in ConversationManagerClient.includeMetricsReport(_:conversationUUID:)((void (*)(uint64_t *))partial apply for closure #1 in closure #1 in ConversationManagerClient.includeMetricsReport(_:conversationUUID:), (uint64_t)closure #2 in closure #1 in ConversationManagerClient.includeMetricsReport(_:conversationUUID:));
}

uint64_t partial apply for closure #1 in ConversationManagerClient.fetchInitialStateIfNeeded()(void **a1)
{
  return closure #1 in ConversationManagerClient.fetchInitialStateIfNeeded()(a1, *(void **)(v1 + 16));
}

uint64_t partial apply for closure #2 in ConversationManagerClient.fetchInitialStateIfNeeded()(void *a1)
{
  return closure #2 in ConversationManagerClient.fetchInitialStateIfNeeded()(a1, *(void **)(v1 + 16));
}

uint64_t partial apply for closure #1 in ConversationManagerClient.activitySessions.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 16)) + 0x1E8))();
}

uint64_t sub_1B0E7BE70()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t _sIg_Ieg_TRTA_0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t objectdestroy_19Tm_0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #1 in ConversationManagerClient.addRemoteMembers(_:toConversationWithUUID:)()
{
  return partial apply for closure #1 in ConversationManagerClient.includeMetricsReport(_:conversationUUID:)((void (*)(uint64_t *))partial apply for closure #1 in closure #1 in ConversationManagerClient.addRemoteMembers(_:toConversationWithUUID:), (uint64_t)closure #2 in closure #1 in ConversationManagerClient.addRemoteMembers(_:toConversationWithUUID:));
}

uint64_t sub_1B0E7BFB4()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in ConversationManagerClient.prepareForGroupActivity(overrides:completionHandler:)()
{
  return closure #1 in ConversationManagerClient.prepareForGroupActivity(overrides:completionHandler:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_1B0E7C008()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

void partial apply for closure #1 in ConversationManagerClient.setActivityAuthorization(_:forBundleIdentifier:)()
{
  closure #1 in ConversationManagerClient.setActivityAuthorization(_:forBundleIdentifier:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t partial apply for closure #1 in ConversationManagerClient.createActivitySession(with:onConversationWithUUID:)(uint64_t a1)
{
  return closure #1 in ConversationManagerClient.createActivitySession(with:onConversationWithUUID:)(a1, *(char **)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t partial apply for closure #1 in ConversationManagerClient.buzzMember(_:conversationUUID:)()
{
  return partial apply for closure #1 in ConversationManagerClient.includeMetricsReport(_:conversationUUID:)((void (*)(uint64_t *))partial apply for closure #1 in closure #1 in ConversationManagerClient.buzzMember(_:conversationUUID:), (uint64_t)closure #2 in closure #1 in ConversationManagerClient.buzzMember(_:conversationUUID:));
}

uint64_t sub_1B0E7C094()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 25) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #1 in ConversationManagerClient.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = *(unsigned char *)(v0 + 24);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 25) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  return closure #1 in ConversationManagerClient.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:)(v2, v3, v4);
}

uint64_t objectdestroy_60Tm()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #1 in ConversationManagerClient.kickMember(_:conversationUUID:)()
{
  return partial apply for closure #1 in ConversationManagerClient.includeMetricsReport(_:conversationUUID:)((void (*)(uint64_t *))partial apply for closure #1 in closure #1 in ConversationManagerClient.kickMember(_:conversationUUID:), (uint64_t)closure #2 in closure #1 in ConversationManagerClient.kickMember(_:conversationUUID:));
}

uint64_t partial apply for closure #1 in ConversationManagerClient.includeMetricsReport(_:conversationUUID:)(void (*a1)(uint64_t *), uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  v8[2] = *(void *)(v2 + 24);
  v8[3] = v6;
  return specialized XPCClient.withSynchronousHost<A>(body:errorHandler:)(a1, (uint64_t)v8, a2, 0, (uint64_t)&block_descriptor_175, &demangling cache variable for type metadata for ConversationManagerXPCHost);
}

uint64_t sub_1B0E7C370()
{
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t partial apply for closure #1 in ConversationManagerClient.fetchEndpoint(for:activitySession:completionHandler:)()
{
  _OWORD v3[2] = *(void *)(v0 + 24);
  long long v1 = *(_OWORD *)(v0 + 48);
  long long v4 = *(_OWORD *)(v0 + 32);
  long long v5 = v1;
  return specialized XPCClient.withHost(body:errorHandler:)((void (*)(uint64_t *))partial apply for closure #1 in closure #1 in ConversationManagerClient.fetchEndpoint(for:activitySession:completionHandler:), (uint64_t)v3, (uint64_t)closure #2 in closure #1 in ConversationManagerClient.fetchEndpoint(for:activitySession:completionHandler:), 0);
}

uint64_t sub_1B0E7C43C()
{
  return objectdestroy_84Tm(MEMORY[0x1E4FBC898]);
}

uint64_t partial apply for closure #1 in ConversationManagerClient.updateConversationContainers(conversationContainersByGroupUUID:)()
{
  return closure #1 in ConversationManagerClient.updateConversationContainers(conversationContainersByGroupUUID:)();
}

uint64_t sub_1B0E7C45C@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xF8))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0E7C4B8(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for ConversationManagerClient.pluginClientReporter : ConversationManagerClient(a1, a2, a3, a4, &direct field offset for ConversationManagerClient.pluginClientReporter);
}

uint64_t sub_1B0E7C4D8@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x110))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0E7C53C(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for ConversationManagerClient.pluginClientReporter : ConversationManagerClient(a1, a2, a3, a4, &direct field offset for ConversationManagerClient.pubSubTopicReporter);
}

uint64_t sub_1B0E7C55C@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x128))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B0E7C5C0(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x130);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t sub_1B0E7C63C@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x140))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0E7C6A0(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x148);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B0E7C70C@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1A0))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B0E7C774(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x1A8))(*a1);
}

uint64_t sub_1B0E7C7D4(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1D0))();
}

uint64_t dispatch thunk of ConversationManagerClientProtocol.onHostProcessDisconnected.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ConversationManagerClientProtocol.prepareForGroupActivity(overrides:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of ConversationManagerClientProtocol.setActivityAuthorization(_:forBundleIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of ConversationManagerClientProtocol.createActivitySession(with:onConversationWithUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 + 40) + **(int **)(a4 + 40));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = dispatch thunk of ConversationManagerClientProtocol.createActivitySession(with:onConversationWithUUID:);
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of ConversationManagerClientProtocol.createActivitySession(with:onConversationWithUUID:)(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t dispatch thunk of ConversationManagerClientProtocol.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of ConversationManagerClientProtocol.includeMetricsReport(_:conversationUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t method lookup function for ConversationManagerClient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationManagerClient);
}

uint64_t dispatch thunk of ConversationManagerClient.pluginClientReporter.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of ConversationManagerClient.pubSubTopicReporter.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of ConversationManagerClient.customEndpointProvider.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of ConversationManagerClient.customEndpointProvider.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of ConversationManagerClient.customEndpointProvider.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of ConversationManagerClient.customEndpointProviders.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of ConversationManagerClient.customEndpointProviders.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x148))();
}

uint64_t dispatch thunk of ConversationManagerClient.customEndpointProviders.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x150))();
}

uint64_t dispatch thunk of ConversationManagerClient.hasInitialState.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of ConversationManagerClient.hasInitialState.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of ConversationManagerClient.hasInitialState.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of ConversationManagerClient.activeSessionContainer.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of ConversationManagerClient.activeSessionContainer.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of ConversationManagerClient.activeSessionContainer.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of ConversationManagerClient.$activeSessionContainer.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of ConversationManagerClient.$activeSessionContainer.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of ConversationManagerClient.$activeSessionContainer.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of ConversationManagerClient.fetchInitialStateIfNeeded()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1E8))();
}

uint64_t ObjC metadata update function for ConversationManagerClient()
{
  return type metadata accessor for ConversationManagerClient();
}

uint64_t destroy for ConversationManagerClient.Publishers()
{
  swift_release();
  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for ConversationManagerClient.Publishers(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for ConversationManagerClient.Publishers(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for ConversationManagerClient.Publishers(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ConversationManagerClient.Publishers(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConversationManagerClient.Publishers(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for ConversationManagerClient.Publishers()
{
  return &unk_1F09ADA90;
}

_OWORD *specialized Dictionary.subscript.getter(_OWORD *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v5 = *(void *)(*(void *)(a5 + 48) + 16 * a2);
    *uint64_t result = *(_OWORD *)(*(void *)(a5 + 56) + 16 * a2);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    return (_OWORD *)v5;
  }
LABEL_8:
  __break(1u);
  return result;
}

void (**specialized Sequence.first(where:)(unint64_t a1, uint64_t a2, uint64_t a3))(char *, uint64_t)
{
  uint64_t v4 = v3;
  uint64_t v24 = a3;
  uint64_t v23 = type metadata accessor for UUID();
  uint64_t v7 = *(void (***)(char *, uint64_t))(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v10; uint64_t v10 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v20 = v4;
    uint64_t v21 = v10;
    unint64_t v22 = a1 & 0xC000000000000001;
    uint64_t v11 = v7 + 1;
    uint64_t v12 = 4;
    while (1)
    {
      uint64_t v13 = v22
          ? (void (**)(char *, uint64_t))MEMORY[0x1B3EA25C0](v12 - 4, a1)
          : (void (**)(char *, uint64_t))*(id *)(a1 + 8 * v12);
      uint64_t v7 = v13;
      uint64_t v14 = v12 - 3;
      if (__OFADD__(v12 - 4, 1)) {
        break;
      }
      id v15 = objc_msgSend(v13, sel_UUID);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v16 = UUID.uuidString.getter();
      uint64_t v18 = v17;
      (*v11)(v9, v23);
      if (v16 == a2 && v18 == v24)
      {
        swift_bridgeObjectRelease();
LABEL_14:
        swift_bridgeObjectRelease();
        return v7;
      }
      uint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v4) {
        goto LABEL_14;
      }

      ++v12;
      if (v14 == v21) {
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_17:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v22 = a1 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v7) {
      return swift_release();
    }
    unint64_t v20 = *(void *)(v22 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v7) {
        return swift_release();
      }
      unint64_t v20 = *(void *)(v22 + 8 * v9);
      if (!v20)
      {
        int64_t v9 = v19 + 2;
        if (v19 + 2 >= v7) {
          return swift_release();
        }
        unint64_t v20 = *(void *)(v22 + 8 * v9);
        if (!v20)
        {
          int64_t v9 = v19 + 3;
          if (v19 + 3 >= v7) {
            return swift_release();
          }
          unint64_t v20 = *(void *)(v22 + 8 * v9);
          if (!v20) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v20 - 1) & v20;
    unint64_t v11 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_5:
    uint64_t v12 = 16 * v11;
    uint64_t v13 = (uint64_t *)(*(void *)(a1 + 48) + v12);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    uint64_t v16 = (uint64_t *)(*(void *)(a1 + 56) + v12);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    a2(v14, v15, v17, v18);
    swift_unknownObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v21 = v19 + 4;
  if (v21 >= v7) {
    return swift_release();
  }
  unint64_t v20 = *(void *)(v22 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v7) {
      return swift_release();
    }
    unint64_t v20 = *(void *)(v22 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void specialized ConversationManagerClient.requestEndpoint(with:activitySessionUUID:activity:completion:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v32 = a4;
  uint64_t v33 = a5;
  uint64_t v34 = a1;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Log.client);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  swift_bridgeObjectRetain_n();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v31 = a3;
  if (v16)
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    uint64_t v36 = v29;
    *(_DWORD *)uint64_t v17 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, a2, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v17 + 12) = 2080;
    uint64_t v30 = a6;
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v36);
    a6 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    _os_log_impl(&dword_1B0DF7000, v14, v15, "Requesting endpoint for identifier=%s activitySessionUUID=%s", (uint8_t *)v17, 0x16u);
    uint64_t v20 = v29;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v20, -1, -1);
    MEMORY[0x1B3EA39E0](v17, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }

  int64_t v21 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v33) + 0x140);
  uint64_t v22 = swift_bridgeObjectRetain();
  uint64_t v23 = v21(v22);
  if (*(void *)(v23 + 16) && (unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v34, a2), (v25 & 1) != 0))
  {
    uint64_t v26 = *(void *)(*(void *)(v23 + 56) + 16 * v24 + 8);
    swift_unknownObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t ObjectType = swift_getObjectType();
    id v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 16))(v31, v32, ObjectType, v26);
    (*(void (**)(uint64_t, void *))(a6 + 16))(a6, v28);
    swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void))(a6 + 16))(a6, 0);
  }
}

uint64_t objectdestroy_37Tm()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, v6 + 16, v5);
}

uint64_t partial apply for closure #1 in ConversationManagerClient.topicCategory(groupUUID:name:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  int64_t v7 = *(char **)(v2 + 16);
  uint64_t v8 = v2 + v6;
  uint64_t v9 = (uint64_t *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  return closure #1 in ConversationManagerClient.topicCategory(groupUUID:name:)(a1, a2, v7, v8, v10, v11);
}

void partial apply for closure #1 in closure #1 in ConversationManagerClient.fetchEndpoint(for:activitySession:completionHandler:)(void **a1)
{
  closure #1 in closure #1 in ConversationManagerClient.fetchEndpoint(for:activitySession:completionHandler:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

void partial apply for closure #1 in closure #1 in ConversationManagerClient.kickMember(_:conversationUUID:)(void **a1)
{
}

void partial apply for closure #1 in closure #1 in ConversationManagerClient.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:)(void **a1)
{
  uint64_t v2 = *(unsigned __int8 *)(v1 + 16);
  uint64_t v3 = *a1;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v3, sel_setDownlinkMuted_forRemoteParticipantsInConversationWithUUID_, v2, isa);
}

uint64_t sub_1B0E7DB84()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 17) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x1F4186498](v0, v5, v6);
}

void partial apply for closure #2 in closure #1 in ConversationManagerClient.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:)(void *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  char v4 = *(unsigned char *)(v1 + 16);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  closure #2 in closure #1 in ConversationManagerClient.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:)(a1, v4, v5);
}

void partial apply for closure #1 in closure #1 in ConversationManagerClient.buzzMember(_:conversationUUID:)(void **a1)
{
}

void partial apply for closure #1 in closure #1 in ConversationManagerClient.kickMember(_:conversationUUID:)(void **a1, SEL *a2)
{
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *a1;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v5, *a2, v4, isa);
}

uint64_t sub_1B0E7DD08()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return MEMORY[0x1F4186498](v0, v10, v11);
}

uint64_t partial apply for closure #1 in closure #1 in ConversationManagerClient.createActivitySession(with:onConversationWithUUID:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = v2 + *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>)
                 - 8);
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = *(void **)(v0 + 24);
  uint64_t v7 = v0 + ((v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return closure #1 in closure #1 in ConversationManagerClient.createActivitySession(with:onConversationWithUUID:)(v5, v6, v0 + v2, v7);
}

void partial apply for closure #1 in closure #1 in closure #1 in ConversationManagerClient.createActivitySession(with:onConversationWithUUID:)(void **a1)
{
  closure #1 in closure #1 in closure #1 in ConversationManagerClient.createActivitySession(with:onConversationWithUUID:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1B0E7DF60()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in ConversationManagerClient.createActivitySession(with:onConversationWithUUID:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
  uint64_t v3 = *(void **)(v1 + 16);
  return closure #2 in closure #1 in closure #1 in ConversationManagerClient.createActivitySession(with:onConversationWithUUID:)(a1, v3);
}

uint64_t sub_1B0E7E0A8()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in ConversationManagerClient.createActivitySession(with:onConversationWithUUID:)()
{
  return CheckedContinuation.resume(returning:)();
}

void partial apply for closure #1 in closure #1 in ConversationManagerClient.prepareForGroupActivity(overrides:completionHandler:)(void **a1)
{
  closure #1 in closure #1 in ConversationManagerClient.prepareForGroupActivity(overrides:completionHandler:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1B0E7E1E8()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #2 in closure #1 in ConversationManagerClient.prepareForGroupActivity(overrides:completionHandler:)(void *a1)
{
  return closure #2 in closure #1 in ConversationManagerClient.prepareForGroupActivity(overrides:completionHandler:)(a1, *(uint64_t (**)(void, void))(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in ConversationManagerClient.prepareForGroupActivity(overrides:completionHandler:)(char a1, void *a2)
{
  return closure #1 in closure #1 in closure #1 in ConversationManagerClient.prepareForGroupActivity(overrides:completionHandler:)(a1, a2, *(uint64_t (**)(void, void))(v2 + 16));
}

void partial apply for closure #1 in closure #1 in ConversationManagerClient.addRemoteMembers(_:toConversationWithUUID:)(void **a1)
{
}

uint64_t sub_1B0E7E24C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x1F4186498](v0, v6 + 16, v5);
}

void partial apply for closure #1 in closure #1 in ConversationManagerClient.topicCategory(groupUUID:name:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = v0 + v2;
  uint64_t v6 = *(void *)(v0 + v3);
  unint64_t v7 = *(void *)(v0 + v3 + 8);
  uint64_t v8 = v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = *(void (**)(uint64_t *))v8;
  uint64_t v10 = *(void *)(v8 + 8);
  closure #1 in closure #1 in ConversationManagerClient.topicCategory(groupUUID:name:)(v4, v5, v6, v7, v9, v10);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in ConversationManagerClient.topicCategory(groupUUID:name:)(id *a1)
{
  return closure #1 in closure #1 in closure #1 in ConversationManagerClient.topicCategory(groupUUID:name:)(a1) & 1;
}

uint64_t partial apply for closure #1 in closure #1 in ConversationManagerClient.fetchInitialStateIfNeeded()(uint64_t a1)
{
  return closure #1 in closure #1 in ConversationManagerClient.fetchInitialStateIfNeeded()(a1);
}

void partial apply for closure #2 in closure #1 in ConversationManagerClient.fetchInitialStateIfNeeded()()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = (id)MEMORY[0x1B3EA1B00]();
  objc_msgSend(v1, sel_registerIdentifierForCustomEndpoint_, v2);
}

BOOL _cp_sandbox_check()
{
  return sandbox_check() == 0;
}

void partial apply for closure #1 in closure #1 in ConversationManagerClient.includeMetricsReport(_:conversationUUID:)(void **a1)
{
}

uint64_t outlined init with copy of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B0E7E52C()
{
  swift_weakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B0E7E564()
{
  return objectdestroy_84Tm(MEMORY[0x1E4FBC8D0]);
}

uint64_t sub_1B0E7E57C()
{
  return objectdestroy_84Tm(MEMORY[0x1E4FBC8D0]);
}

uint64_t objectdestroy_84Tm(void (*a1)(void))
{
  a1(*(void *)(v1 + 24));
  return MEMORY[0x1F4186498](v1, 32, 7);
}

void partial apply for closure #1 in closure #1 in ConversationManagerClient.unregisterEndpointProvider(identifier:)(void **a1)
{
}

void partial apply for closure #1 in closure #1 in ConversationManagerClient.registerEndpointProvider(_:)(void **a1)
{
}

void partial apply for closure #1 in closure #1 in ConversationManagerClient.unregisterEndpointProvider(identifier:)(void **a1, SEL *a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v4 = *(void *)(v2 + 24);
  uint64_t v6 = *a1;
  unint64_t v7 = (void *)MEMORY[0x1B3EA1B00](v5, v4);
  objc_msgSend(v6, *a2, v7);
}

uint64_t PowerLogReporter.streamPayload.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PowerLogReporter.streamPayload.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*PowerLogReporter.streamPayload.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

uint64_t PowerLogReporter.streamID.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return outlined init with copy of Any?(v1 + 24, a1);
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t PowerLogReporter.streamID.setter(uint64_t a1)
{
  swift_beginAccess();
  outlined assign with take of Any?(a1, v1 + 24);
  return swift_endAccess();
}

uint64_t outlined assign with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*PowerLogReporter.streamID.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t PowerLogReporter.category.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PowerLogReporter.category.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*PowerLogReporter.category.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t PowerLogReporter.subsystem.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PowerLogReporter.subsystem.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 72) = a1;
  *(void *)(v2 + 80) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*PowerLogReporter.subsystem.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t PowerLogReporter.__allocating_init(subsystem:category:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  PowerLogReporter.init(subsystem:category:)(a1, a2, a3, a4);
  return v8;
}

uint64_t PowerLogReporter.init(subsystem:category:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v9 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(void *)(v4 + 56) = a3;
  *(void *)(v4 + 16) = v9;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(void *)(v4 + 72) = a1;
  *(void *)(v4 + 80) = a2;
  *(void *)(v4 + 64) = a4;
  swift_beginAccess();
  uint64_t v10 = *(void *)(v4 + 72);
  uint64_t v11 = *(void *)(v4 + 80);
  swift_bridgeObjectRetain();
  uint64_t v12 = (void *)MEMORY[0x1B3EA1B00](v10, v11);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v13 = *(void *)(v4 + 56);
  uint64_t v14 = *(void *)(v4 + 64);
  swift_bridgeObjectRetain();
  os_log_type_t v15 = (void *)MEMORY[0x1B3EA1B00](v13, v14);
  swift_bridgeObjectRelease();
  uint64_t v16 = PPSCreateTelemetryIdentifier();

  if (v16)
  {
    *((void *)&v19 + 1) = MEMORY[0x1E4FBBAB8];
    *(void *)&long long v18 = v16;
  }
  else
  {
    long long v18 = 0u;
    long long v19 = 0u;
  }
  swift_beginAccess();
  outlined assign with take of Any?((uint64_t)&v18, v4 + 24);
  swift_endAccess();
  return v4;
}

Swift::OpaquePointer_optional __swiftcall PowerLogReporter.report(withStreamPayload:)(Swift::OpaquePointer withStreamPayload)
{
  (*(void (**)(long long *__return_ptr, void *))(*(void *)v1 + 136))(&v13, withStreamPayload._rawValue);
  if (v14)
  {
    outlined init with take of Any(&v13, v15);
    outlined init with copy of Any((uint64_t)v15, (uint64_t)&v13);
    uint64_t v2 = swift_dynamicCast();
    unint64_t v3 = *(uint64_t (**)(void))(*(void *)v1 + 112);
    uint64_t v4 = ((uint64_t (*)(uint64_t))v3)(v2);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v4);
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    PPSSendTelemetry();

    uint64_t v6 = v3();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v15);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v13);
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Log.default);
    unint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_1B0DF7000, v9, v10, "Could not unwrap streamID of current activity", v11, 2u);
      MEMORY[0x1B3EA39E0](v11, -1, -1);
    }

    uint64_t v6 = 0;
  }
  uint64_t v12 = (void *)v6;
  result.value._rawValue = v12;
  result.is_nil = v7;
  return result;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t PowerLogReporter.deinit()
{
  swift_bridgeObjectRelease();
  outlined destroy of Any?(v0 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PowerLogReporter.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  outlined destroy of Any?(v0 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for PowerReportingProcotol.streamID.getter in conformance PowerLogReporter()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

uint64_t protocol witness for PowerReportingProcotol.streamID.setter in conformance PowerLogReporter()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

uint64_t (*protocol witness for PowerReportingProcotol.streamID.modify in conformance PowerLogReporter(void *a1))()
{
  unint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 152))();
  return protocol witness for PresenceDataSource.members.modify in conformance SKPresenceDataSource<A>;
}

uint64_t protocol witness for PowerReportingProcotol.category.getter in conformance PowerLogReporter()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160))();
}

uint64_t protocol witness for PowerReportingProcotol.category.setter in conformance PowerLogReporter()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168))();
}

uint64_t (*protocol witness for PowerReportingProcotol.category.modify in conformance PowerLogReporter(void *a1))()
{
  unint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 176))();
  return protocol witness for PresenceDataSource.members.modify in conformance SKPresenceDataSource<A>;
}

uint64_t protocol witness for PowerReportingProcotol.subsystem.getter in conformance PowerLogReporter()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 184))();
}

uint64_t protocol witness for PowerReportingProcotol.subsystem.setter in conformance PowerLogReporter()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192))();
}

uint64_t (*protocol witness for PowerReportingProcotol.subsystem.modify in conformance PowerLogReporter(void *a1))()
{
  unint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 200))();
  return protocol witness for PresenceDataSource.members.modify in conformance SKPresenceDataSource<A>;
}

uint64_t protocol witness for PowerReportingProcotol.streamPayload.getter in conformance PowerLogReporter()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t protocol witness for PowerReportingProcotol.streamPayload.setter in conformance PowerLogReporter()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t (*protocol witness for PowerReportingProcotol.streamPayload.modify in conformance PowerLogReporter(void *a1))()
{
  unint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 128))();
  return protocol witness for PresenceDataSource.members.modify in conformance SKPresenceDataSource<A>;
}

uint64_t protocol witness for PowerReportingProcotol.init(subsystem:category:) in conformance PowerLogReporter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 208))();
  *a1 = result;
  return result;
}

uint64_t protocol witness for PowerReportingProcotol.report(withStreamPayload:) in conformance PowerLogReporter()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 216))();
}

uint64_t sub_1B0E7F4F4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 112))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0E7F540(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 120);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B0E7F594(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 136))();
}

uint64_t sub_1B0E7F5D8(uint64_t a1, uint64_t a2)
{
  outlined init with copy of Any?(a1, (uint64_t)v4);
  return (*(uint64_t (**)(unsigned char *))(**(void **)a2 + 144))(v4);
}

uint64_t sub_1B0E7F634@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 160))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B0E7F680(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 168);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1B0E7F6E8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 184))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B0E7F734(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 192);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t dispatch thunk of PowerReportingProcotol.streamID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PowerReportingProcotol.streamID.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of PowerReportingProcotol.streamID.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PowerReportingProcotol.category.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of PowerReportingProcotol.category.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of PowerReportingProcotol.category.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of PowerReportingProcotol.subsystem.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of PowerReportingProcotol.subsystem.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t dispatch thunk of PowerReportingProcotol.subsystem.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of PowerReportingProcotol.streamPayload.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of PowerReportingProcotol.streamPayload.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of PowerReportingProcotol.streamPayload.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of PowerReportingProcotol.init(subsystem:category:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 104))();
}

uint64_t dispatch thunk of PowerReportingProcotol.report(withStreamPayload:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t type metadata accessor for PowerLogReporter()
{
  return self;
}

uint64_t method lookup function for PowerLogReporter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PowerLogReporter);
}

uint64_t dispatch thunk of PowerLogReporter.streamPayload.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of PowerLogReporter.streamPayload.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of PowerLogReporter.streamPayload.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of PowerLogReporter.streamID.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of PowerLogReporter.streamID.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of PowerLogReporter.streamID.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of PowerLogReporter.category.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of PowerLogReporter.category.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of PowerLogReporter.category.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of PowerLogReporter.subsystem.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of PowerLogReporter.subsystem.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of PowerLogReporter.subsystem.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of PowerLogReporter.__allocating_init(subsystem:category:)()
{
  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t dispatch thunk of PowerLogReporter.report(withStreamPayload:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t DatagramClient.doCreateChannelGroup(topic:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *(void *)(v2 + 24);
  uint64_t v5 = *(void *)(v2 + 32);
  if (*(unsigned char *)(v2 + 48))
  {
    unint64_t v8 = *(void *)(v2 + 40);
    uint64_t v27 = destructiveProjectEnumData for ActivitySession.Errors;
    uint64_t v28 = 0;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v24 = 1107296256;
    char v25 = thunk for @escaping @callee_guaranteed (@guaranteed OS_nw_protocol_options) -> ();
    uint64_t v26 = &block_descriptor_13_0;
    unint64_t v9 = _Block_copy(&aBlock);
    uint64_t v27 = destructiveProjectEnumData for ActivitySession.Errors;
    uint64_t v28 = 0;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v24 = 1107296256;
    char v25 = thunk for @escaping @callee_guaranteed (@guaranteed OS_nw_protocol_options) -> ();
    uint64_t v26 = &block_descriptor_16;
    os_log_type_t v10 = _Block_copy(&aBlock);
    swift_bridgeObjectRetain();
    outlined copy of Data?(v5, v8);
    secure_udp = nw_parameters_create_secure_udp(v9, v10);
    _Block_release(v10);
    _Block_release(v9);
    uint64_t v12 = nw_parameters_copy_default_protocol_stack(secure_udp);
    nw_protocol_stack_clear_application_protocols(v12);
    long long v13 = self;
    objc_msgSend(v13, sel_augmentConnectionGroupNetworkParameters_, secure_udp);
    uint64_t v14 = (void *)MEMORY[0x1B3EA1B00](v3, v4);
    swift_bridgeObjectRelease();
    os_log_type_t v15 = (void *)MEMORY[0x1B3EA1B00](a1, a2);
    if (v8 >> 60 == 15) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = v5;
    }
    if (v8 >> 60 == 15) {
      unint64_t v17 = 0xC000000000000000;
    }
    else {
      unint64_t v17 = v8;
    }
    outlined copy of Data?(v5, v8);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v16, v17);
    long long v19 = objc_msgSend(v13, sel_createGroupDescriptorForSessionIDAlias_topic_salt_, v14, v15, isa);

    nw_connection_group_create(v19, secure_udp);
    uint64_t v27 = closure #3 in DatagramClient.doCreateChannelGroup(topic:);
    uint64_t v28 = 0;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v24 = 1107296256;
    char v25 = thunk for @escaping @callee_guaranteed (@guaranteed OS_nw_endpoint, @unowned nw_group_membership_changed_type_t, @unowned Bool) -> (@unowned Bool);
    uint64_t v26 = &block_descriptor_19;
    uint64_t v20 = _Block_copy(&aBlock);
    nw_connection_group_set_membership_changed_handler();
    _Block_release(v20);
    type metadata accessor for NWConnectionGroup();
    uint64_t v21 = NWConnectionGroup.__allocating_init(_:)();
    outlined consume of Data?(v5, v8);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    type metadata accessor for NWConnectionGroup();
    swift_allocObject();
    swift_unknownObjectRetain();
    swift_retain();
    return NWConnectionGroup.init(with:using:)();
  }
  return v21;
}

uint64_t closure #3 in DatagramClient.doCreateChannelGroup(topic:)()
{
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)log);
  swift_unknownObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v12 = v4;
    *(_DWORD *)uint64_t v3 = 136315650;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_nw_endpoint);
    uint64_t v5 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v3 + 12) = 2080;
    type metadata accessor for nw_group_membership_changed_type_t(0);
    uint64_t v7 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v3 + 22) = 2080;
    uint64_t v9 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v1, v2, "Set the membership change handler %s %s %s", (uint8_t *)v3, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v4, -1, -1);
    MEMORY[0x1B3EA39E0](v3, -1, -1);
  }
  else
  {

    swift_unknownObjectRelease_n();
  }
  return 0;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed OS_nw_endpoint, @unowned nw_group_membership_changed_type_t, @unowned Bool) -> (@unowned Bool)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v7 = swift_unknownObjectRetain();
  LOBYTE(a4) = v6(v7, a3, a4);
  swift_release();
  swift_unknownObjectRelease();
  return a4 & 1;
}

uint64_t closure #1 in DatagramClient.handleChannelConnectError(error:channelStream:attempt:promise:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a4 + 1;
  if (__OFADD__(a4, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v11 = result;
    uint64_t ObjectType = swift_getObjectType();
    return specialized DatagramClient.createChannelGroup(channelStream:attempt:promise:)(a2, v6, a5, a6, v11, ObjectType, a3);
  }
  return result;
}

uint64_t DatagramClient.createChannelGroup(channelStream:attempt:promise:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t ObjectType = swift_getObjectType();
  return specialized DatagramClient.createChannelGroup(channelStream:attempt:promise:)(a1, a3, a4, a5, v5, ObjectType, a2);
}

void closure #1 in DatagramClient.createChannelGroup(channelStream:attempt:promise:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, void (*a8)(uint64_t), uint64_t a9, uint64_t a10)
{
  v177 = a8;
  uint64_t v176 = (char *)a7;
  uint64_t v186 = a4;
  unint64_t v187 = a6;
  uint64_t v179 = a5;
  v185 = a3;
  uint64_t v188 = a1;
  uint64_t v10 = type metadata accessor for DatagramChannelConnectError();
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v175 = (void (*)(char *, uint64_t))((char *)&v153 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v168 = (uint64_t)&v153 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v170 = (char *)&v153 - v16;
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v162 = (uint64_t)&v153 - v18;
  MEMORY[0x1F4188790](v17);
  uint64_t v163 = (char *)&v153 - v19;
  uint64_t v178 = type metadata accessor for NWError();
  uint64_t v181 = *(void *)(v178 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v178);
  int v174 = ((char *)&v153 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  os_log_t v180 = (os_log_t)((char *)&v153 - v23);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v164 = (char *)&v153 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  v165 = (char *)&v153 - v27;
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v171 = (char *)&v153 - v29;
  MEMORY[0x1F4188790](v28);
  size_t v172 = (char *)&v153 - v30;
  uint64_t v160 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<NWConnectionGroup, DatagramChannelConnectError>);
  MEMORY[0x1F4188790](v160);
  size_t v161 = (uint64_t *)((char *)&v153 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWConnectionGroup.State?);
  uint64_t v33 = MEMORY[0x1F4188790](v32 - 8);
  uint64_t v35 = (char *)&v153 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v33);
  uint64_t v37 = (char *)&v153 - v36;
  uint64_t v38 = type metadata accessor for NWConnectionGroup.State();
  uint64_t v183 = *(void *)(v38 - 8);
  uint64_t v184 = (void (*)(void, void, void))v38;
  uint64_t v39 = MEMORY[0x1F4188790](v38);
  int v182 = (char *)&v153 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  id v43 = (char *)&v153 - v42;
  uint64_t v44 = MEMORY[0x1F4188790](v41);
  id v46 = (char *)&v153 - v45;
  MEMORY[0x1F4188790](v44);
  double v48 = (char *)&v153 - v47;
  uint64_t v49 = type metadata accessor for DispatchPredicate();
  uint64_t v50 = *(void *)(v49 - 8);
  MEMORY[0x1F4188790](v49);
  uint64_t v52 = (uint64_t *)((char *)&v153 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return;
  }
  uint64_t v173 = Strong;
  uint64_t v54 = *(void **)(Strong + 80);
  *uint64_t v52 = v54;
  (*(void (**)(void *, void, uint64_t))(v50 + 104))(v52, *MEMORY[0x1E4FBCBF0], v49);
  id v55 = v54;
  LOBYTE(v54) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v50 + 8))(v52, v49);
  if (v54)
  {
    int v157 = v43;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v57 = *(uint64_t (**)(void))(v186 + 16);
    uint64_t v166 = ObjectType;
    uint64_t v158 = v57();
    if (one-time initialization token for log == -1) {
      goto LABEL_4;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_4:
  uint64_t v167 = a9;
  uint64_t v58 = type metadata accessor for Logger();
  uint64_t v59 = __swift_project_value_buffer(v58, (uint64_t)log);
  uint64_t v60 = v183;
  uint64_t v61 = v184;
  uint64_t v62 = v183 + 16;
  uint64_t v63 = *(void (**)(char *, uint64_t, void))(v183 + 16);
  v63(v48, v188, v184);
  unint64_t v64 = v187;
  swift_bridgeObjectRetain_n();
  uint64_t v169 = (char *)v59;
  uint64_t v65 = Logger.logObject.getter();
  int v159 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v65, (os_log_type_t)v159))
  {
    uint64_t v66 = swift_slowAlloc();
    uint64_t v154 = swift_slowAlloc();
    *(void *)&v189[0] = v154;
    *(_DWORD *)uint64_t v66 = 136315650;
    v63(v37, (uint64_t)v48, v61);
    (*(void (**)(char *, void, uint64_t, void (*)(void, void, void)))(v60 + 56))(v37, 0, 1, v61);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v37, (uint64_t)v35, &demangling cache variable for type metadata for NWConnectionGroup.State?);
    int v67 = (*(uint64_t (**)(char *, uint64_t, void))(v60 + 48))(v35, 1, v61);
    size_t v156 = v63;
    uint64_t v155 = v62;
    if (v67 == 1)
    {
      uint64_t v68 = 7104878;
      unint64_t v69 = 0xE300000000000000;
    }
    else
    {
      (*(void (**)(char *, char *, void))(v60 + 32))(v46, v35, v61);
      v63(v157, (uint64_t)v46, v61);
      uint64_t v68 = String.init<A>(reflecting:)();
      unint64_t v69 = v72;
      (*(void (**)(char *, void (*)(void, void, void)))(v60 + 8))(v46, v61);
    }
    outlined destroy of UUID?((uint64_t)v37, &demangling cache variable for type metadata for NWConnectionGroup.State?);
    v191 = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v69, (uint64_t *)v189);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v70 = *(void (**)(void, void))(v60 + 8);
    v70(v48, v61);
    *(_WORD *)(v66 + 12) = 2080;
    unint64_t v73 = 0xE700000000000000;
    uint64_t v74 = 0x6C616974696E69;
    uint64_t v63 = v156;
    switch((char)v158)
    {
      case 1:
        unint64_t v73 = 0xEC000000676E6968;
        goto LABEL_12;
      case 2:
        unint64_t v73 = 0xEB00000000646568;
LABEL_12:
        uint64_t v74 = 0x73696C6261747365;
        break;
      case 3:
        unint64_t v73 = 0xE600000000000000;
        uint64_t v74 = 0x6465736F6C63;
        break;
      default:
        break;
    }
    v191 = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v73, (uint64_t *)v189);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v66 + 22) = 2080;
    unint64_t v75 = v187;
    swift_bridgeObjectRetain();
    v191 = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v179, v75, (uint64_t *)v189);
    unint64_t v71 = v75;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v65, (os_log_type_t)v159, "NWConnectionGroup changed state, state=%s channel-state=%s, topic=%s", (uint8_t *)v66, 0x20u);
    uint64_t v76 = v154;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v76, -1, -1);
    MEMORY[0x1B3EA39E0](v66, -1, -1);

    uint64_t v60 = v183;
    uint64_t v61 = v184;
  }
  else
  {
    uint64_t v70 = *(void (**)(void, void))(v60 + 8);
    v70(v48, v61);

    swift_bridgeObjectRelease_n();
    unint64_t v71 = v64;
  }
  uint64_t v77 = v182;
  v63(v182, v188, v61);
  int v78 = (*(uint64_t (**)(char *, void (*)(void, void, void)))(v60 + 88))(v77, v61);
  if (v78 == *MEMORY[0x1E4F38AD8])
  {
    uint64_t v188 = a10;
    (*(void (**)(char *, void (*)(void, void, void)))(v60 + 96))(v77, v61);
    os_log_t v79 = v180;
    uint64_t v80 = v181;
    uint64_t v81 = *(void (**)(os_log_t, char *, uint64_t))(v181 + 32);
    uint64_t v82 = v178;
    v81(v180, v77, v178);
    id v83 = *(void (**)(char *, os_log_t, uint64_t))(v80 + 16);
    uint64_t v84 = v174;
    v83((char *)v174, v79, v82);
    swift_bridgeObjectRetain_n();
    uint64_t v85 = Logger.logObject.getter();
    int v86 = static os_log_type_t.default.getter();
    BOOL v87 = os_log_type_enabled(v85, (os_log_type_t)v86);
    uint64_t v184 = (void (*)(void, void, void))v83;
    if (v87)
    {
      LODWORD(v183) = v86;
      uint64_t v88 = swift_slowAlloc();
      int v182 = (char *)swift_slowAlloc();
      *(void *)&v189[0] = v182;
      *(_DWORD *)uint64_t v88 = 136315394;
      uint64_t v89 = (uint64_t)v170;
      v83(v170, v84, v82);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v80 + 56))(v89, 0, 1, v82);
      uint64_t v90 = (void (*)(char *, char *, uint64_t))v83;
      uint64_t v91 = v168;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v89, v168, &demangling cache variable for type metadata for NWError?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48))(v91, 1, v82) == 1)
      {
        uint64_t v92 = 7104878;
        unint64_t v93 = 0xE300000000000000;
      }
      else
      {
        uint64_t v123 = v165;
        v81((os_log_t)v165, (char *)v91, v82);
        v90(v164, v123, v82);
        uint64_t v92 = String.init<A>(reflecting:)();
        unint64_t v93 = v124;
        (*(void (**)(char *, uint64_t))(v80 + 8))(v123, v82);
      }
      outlined destroy of UUID?((uint64_t)v170, &demangling cache variable for type metadata for NWError?);
      v191 = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, v93, (uint64_t *)v189);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v117 = *(void (**)(char *, uint64_t))(v80 + 8);
      v117((char *)v174, v82);
      *(_WORD *)(v88 + 12) = 2080;
      unint64_t v125 = v187;
      swift_bridgeObjectRetain();
      v191 = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v179, v125, (uint64_t *)v189);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B0DF7000, v85, (os_log_type_t)v183, "NWConnectionGroup in waiting state, error: %s, topic=%s", (uint8_t *)v88, 0x16u);
      unint64_t v126 = v182;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v126, -1, -1);
      MEMORY[0x1B3EA39E0](v88, -1, -1);
    }
    else
    {
      uint64_t v117 = *(void (**)(char *, uint64_t))(v80 + 8);
      v117((char *)v84, v82);

      swift_bridgeObjectRelease_n();
    }
    uint64_t v127 = v175;
    os_log_t v128 = v180;
    v184(v175, v180, v82);
    (*(void (**)(void (*)(char *, uint64_t), void, uint64_t, uint64_t))(v80 + 56))(v127, 0, 2, v82);
    specialized DatagramClient.handleChannelConnectError(error:channelStream:attempt:promise:)(v127, v185, (uint64_t)v176, v177, v167, v173, v166, v186);
    outlined destroy of DatagramChannelConnectError((uint64_t)v127, (uint64_t (*)(void))type metadata accessor for DatagramChannelConnectError);
    NWConnectionGroup.cancel()();
    swift_release();
    v117((char *)v128, v82);
  }
  else
  {
    int v94 = v78;
    uint64_t v95 = v181;
    if (v78 != *MEMORY[0x1E4F38AC8])
    {
      if (v78 == *MEMORY[0x1E4F38AC0])
      {
        swift_bridgeObjectRetain_n();
        uint64_t v118 = Logger.logObject.getter();
        os_log_type_t v119 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v118, v119))
        {
          size_t v120 = (uint8_t *)swift_slowAlloc();
          unint64_t v121 = v71;
          uint64_t v122 = swift_slowAlloc();
          *(void *)&v189[0] = v122;
          *(_DWORD *)size_t v120 = 136315138;
          swift_bridgeObjectRetain();
          v191 = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v179, v121, (uint64_t *)v189);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B0DF7000, v118, v119, "NWConnectionGroup waiting to be started, topic=%s", v120, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v122, -1, -1);
          MEMORY[0x1B3EA39E0](v120, -1, -1);
          swift_release();
        }
        else
        {

          swift_release();
          swift_bridgeObjectRelease_n();
        }
        return;
      }
      if (v78 == *MEMORY[0x1E4F38AA8])
      {
        swift_bridgeObjectRetain_n();
        uint64_t v130 = Logger.logObject.getter();
        os_log_type_t v131 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v130, v131))
        {
          uint64_t v132 = swift_slowAlloc();
          unint64_t v133 = v71;
          uint64_t v134 = swift_slowAlloc();
          *(void *)&v189[0] = v134;
          *(_DWORD *)uint64_t v132 = 134218242;
          v191 = v176;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v132 + 12) = 2080;
          swift_bridgeObjectRetain();
          v191 = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v179, v133, (uint64_t *)v189);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B0DF7000, v130, v131, "NWConnectionGroup in ready state, channel attempt #%ld succeeded, topic=%s", (uint8_t *)v132, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v134, -1, -1);
          MEMORY[0x1B3EA39E0](v132, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        (*(void (**)(uint64_t, uint64_t))(v186 + 24))(2, v166);
        uint64_t v148 = (uint64_t)v161;
        *size_t v161 = a10;
        swift_storeEnumTagMultiPayload();
        swift_retain();
      }
      else
      {
        int v142 = *MEMORY[0x1E4F38AF0];
        swift_bridgeObjectRetain_n();
        uint64_t v143 = Logger.logObject.getter();
        if (v94 != v142)
        {
          os_log_type_t v149 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v143, v149))
          {
            uint64_t v150 = (uint8_t *)swift_slowAlloc();
            uint64_t v151 = swift_slowAlloc();
            *(void *)&v189[0] = v151;
            *(_DWORD *)uint64_t v150 = 136315138;
            unint64_t v152 = v187;
            swift_bridgeObjectRetain();
            v191 = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v179, v152, (uint64_t *)v189);
            uint64_t v77 = v182;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1B0DF7000, v143, v149, "NWConnectionGroup in unknown state, topic=%s", v150, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1B3EA39E0](v151, -1, -1);
            MEMORY[0x1B3EA39E0](v150, -1, -1);
            swift_release();
          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_release();
          }
          v70(v77, v184);
          return;
        }
        os_log_type_t v144 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v143, v144))
        {
          uint64_t v145 = (uint8_t *)swift_slowAlloc();
          uint64_t v146 = swift_slowAlloc();
          *(void *)&v189[0] = v146;
          *(_DWORD *)uint64_t v145 = 136315138;
          unint64_t v147 = v187;
          swift_bridgeObjectRetain();
          v191 = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v179, v147, (uint64_t *)v189);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B0DF7000, v143, v144, "NWConnectionGroup in cancelled state, topic=%s", v145, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v146, -1, -1);
          MEMORY[0x1B3EA39E0](v145, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v148 = (uint64_t)v161;
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v95 + 56))(v161, 2, 2, v178);
        swift_storeEnumTagMultiPayload();
      }
      v177(v148);
      swift_release();
      outlined destroy of UUID?(v148, &demangling cache variable for type metadata for Result<NWConnectionGroup, DatagramChannelConnectError>);
      return;
    }
    uint64_t v188 = a10;
    (*(void (**)(char *, void (*)(void, void, void)))(v60 + 96))(v77, v61);
    uint64_t v96 = v172;
    uint64_t v97 = v178;
    uint64_t v183 = *(void *)(v95 + 32);
    ((void (*)(char *, char *, uint64_t))v183)(v172, v77, v178);
    uint64_t v99 = (char *)(v95 + 16);
    uint64_t v98 = *(void (**)(char *, char *, uint64_t))(v95 + 16);
    uint64_t v100 = v171;
    v98(v171, v96, v97);
    swift_bridgeObjectRetain_n();
    uint64_t v101 = v95;
    uint64_t v102 = v173;
    swift_retain_n();
    unint64_t v103 = Logger.logObject.getter();
    int v104 = static os_log_type_t.error.getter();
    BOOL v105 = os_log_type_enabled(v103, (os_log_type_t)v104);
    uint64_t v184 = (void (*)(void, void, void))v98;
    if (v105)
    {
      LODWORD(v174) = v104;
      os_log_t v180 = v103;
      uint64_t v106 = swift_slowAlloc();
      uint64_t v170 = (char *)swift_slowAlloc();
      v191 = v170;
      *(_DWORD *)uint64_t v106 = 136315650;
      char v107 = *(unsigned char *)(v102 + 48);
      long long v108 = *(_OWORD *)(v102 + 32);
      v189[0] = *(_OWORD *)(v102 + 16);
      v189[1] = v108;
      char v190 = v107;
      uint64_t v109 = DatagramEndpoint.description.getter();
      *(void *)&v189[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v109, v110, (uint64_t *)&v191);
      uint64_t v169 = (char *)v189 + 8;
      uint64_t v97 = v178;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v106 + 12) = 2080;
      uint64_t v111 = (uint64_t)v163;
      size_t v112 = v99;
      v98(v163, v171, v97);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v101 + 56))(v111, 0, 1, v97);
      uint64_t v113 = v162;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v111, v162, &demangling cache variable for type metadata for NWError?);
      int v114 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v101 + 48))(v113, 1, v97);
      int v182 = v112;
      if (v114 == 1)
      {
        uint64_t v115 = 7104878;
        unint64_t v116 = 0xE300000000000000;
      }
      else
      {
        uint64_t v135 = v165;
        ((void (*)(char *, uint64_t, uint64_t))v183)(v165, v113, v97);
        v98(v164, v135, v97);
        uint64_t v115 = String.init<A>(reflecting:)();
        unint64_t v116 = v136;
        (*(void (**)(char *, uint64_t))(v101 + 8))(v135, v97);
      }
      unint64_t v137 = v187;
      outlined destroy of UUID?(v111, &demangling cache variable for type metadata for NWError?);
      *(void *)&v189[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v115, v116, (uint64_t *)&v191);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v129 = *(void (**)(char *, uint64_t))(v101 + 8);
      v129(v171, v97);
      *(_WORD *)(v106 + 22) = 2080;
      swift_bridgeObjectRetain();
      *(void *)&v189[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v179, v137, (uint64_t *)&v191);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      os_log_t v138 = v180;
      _os_log_impl(&dword_1B0DF7000, v180, (os_log_type_t)v174, "NWConnectionGroup to %s failed, error: %s, topic=%s", (uint8_t *)v106, 0x20u);
      uint64_t v139 = (uint64_t)v170;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v139, -1, -1);
      MEMORY[0x1B3EA39E0](v106, -1, -1);

      uint64_t v102 = v173;
    }
    else
    {
      swift_release_n();
      uint64_t v129 = *(void (**)(char *, uint64_t))(v101 + 8);
      v129(v100, v97);

      swift_bridgeObjectRelease_n();
    }
    uint64_t v140 = v175;
    uint64_t v141 = v172;
    v184(v175, v172, v97);
    (*(void (**)(void (*)(char *, uint64_t), void, uint64_t, uint64_t))(v101 + 56))(v140, 0, 2, v97);
    specialized DatagramClient.handleChannelConnectError(error:channelStream:attempt:promise:)(v140, v185, (uint64_t)v176, v177, v167, v102, v166, v186);
    outlined destroy of DatagramChannelConnectError((uint64_t)v140, (uint64_t (*)(void))type metadata accessor for DatagramChannelConnectError);
    NWConnectionGroup.cancel()();
    swift_release();
    v129(v141, v97);
  }
}

uint64_t specialized DatagramClient.createChannelGroup(channelStream:attempt:promise:)(void *a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v64 = a2;
  uint64_t v13 = type metadata accessor for DatagramChannelConnectError();
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v59 = (void (*)(char *, uint64_t))((char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (uint64_t *)((char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = *(void **)(a5 + 80);
  *uint64_t v18 = v19;
  (*(void (**)(void *, void, uint64_t))(v16 + 104))(v18, *MEMORY[0x1E4FBCBF0], v15);
  id v61 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  uint64_t v21 = *(void (**)(void *, uint64_t))(v16 + 8);
  uint64_t v20 = v16 + 8;
  v21(v18, v15);
  if (v19)
  {
    uint64_t v63 = a3;
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 8))(a6, a7);
    a3 = v22;
    uint64_t v60 = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 16))(a6, a7);
    if (one-time initialization token for log == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v23 = type metadata accessor for Logger();
  uint64_t v24 = __swift_project_value_buffer(v23, (uint64_t)log);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v58 = v24;
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v55 = v20;
    uint64_t v56 = a1;
    uint64_t v62 = a4;
    uint64_t v57 = a6;
    uint64_t v27 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    uint64_t v68 = v28;
    *(_DWORD *)uint64_t v27 = 136315906;
    char v29 = *(unsigned char *)(a5 + 48);
    long long v30 = *(_OWORD *)(a5 + 32);
    long long v65 = *(_OWORD *)(a5 + 16);
    long long v66 = v30;
    char v67 = v29;
    uint64_t v31 = DatagramEndpoint.description.getter();
    *(void *)&long long v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2048;
    *(void *)&long long v65 = v64;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v27 + 22) = 2080;
    unint64_t v33 = 0xE700000000000000;
    uint64_t v34 = 0x6C616974696E69;
    switch((char)v60)
    {
      case 1:
        unint64_t v33 = 0xEC000000676E6968;
        goto LABEL_8;
      case 2:
        unint64_t v33 = 0xEB00000000646568;
LABEL_8:
        uint64_t v34 = 0x73696C6261747365;
        break;
      case 3:
        unint64_t v33 = 0xE600000000000000;
        uint64_t v34 = 0x6465736F6C63;
        break;
      default:
        break;
    }
    *(void *)&long long v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v33, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 32) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v20 = v55;
    *(void *)&long long v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, (unint64_t)a3, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v25, v26, "Creating datagram-channel to endpoint=%s, attempt=%ld channel-state=%s, topic=%s", (uint8_t *)v27, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v28, -1, -1);
    MEMORY[0x1B3EA39E0](v27, -1, -1);

    a1 = v56;
    a6 = v57;
    a4 = v62;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  uint64_t v35 = DatagramClient.doCreateChannelGroup(topic:)(v20, (uint64_t)a3);
  if (v35)
  {
    uint64_t v36 = v35;
    uint64_t v37 = v20;
    uint64_t v38 = swift_allocObject();
    swift_weakInit();
    uint64_t v39 = (void *)swift_allocObject();
    v39[2] = v38;
    v39[3] = a1;
    v39[4] = a7;
    v39[5] = v37;
    uint64_t v40 = v64;
    v39[6] = a3;
    v39[7] = v40;
    v39[8] = v63;
    v39[9] = a4;
    v39[10] = v36;
    swift_retain();
    swift_unknownObjectRetain();
    swift_retain();
    swift_retain();
    outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?((uint64_t)partial apply for closure #1 in DatagramClient.createChannelGroup(channelStream:attempt:promise:));
    NWConnectionGroup.stateUpdateHandler.setter();
    swift_release();
    swift_release();
    uint64_t v41 = swift_allocObject();
    *(void *)(v41 + 16) = a1;
    *(void *)(v41 + 24) = a7;
    swift_unknownObjectRetain();
    NWConnectionGroup.setReceiveHandler(maximumMessageSize:rejectOversizedMessages:handler:)();
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a7 + 24))(1, a6, a7);
    NWConnectionGroup.start(queue:)();
    return swift_release();
  }
  else
  {
    uint64_t v62 = a4;
    swift_retain_n();
    swift_bridgeObjectRetain();
    id v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      uint64_t v57 = a6;
      uint64_t v47 = v46;
      uint64_t v68 = v46;
      *(_DWORD *)uint64_t v45 = 136315394;
      uint64_t v55 = v20;
      uint64_t v56 = a1;
      char v48 = *(unsigned char *)(a5 + 48);
      long long v49 = *(_OWORD *)(a5 + 32);
      long long v65 = *(_OWORD *)(a5 + 16);
      long long v66 = v49;
      char v67 = v48;
      uint64_t v50 = DatagramEndpoint.description.getter();
      *(void *)&long long v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v45 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)&long long v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, (unint64_t)a3, &v68);
      a1 = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B0DF7000, v43, v44, "Failed to create NWConnectionGroup for datagram-channel to %s, topic=%s", (uint8_t *)v45, 0x16u);
      swift_arrayDestroy();
      uint64_t v52 = v47;
      a6 = v57;
      MEMORY[0x1B3EA39E0](v52, -1, -1);
      MEMORY[0x1B3EA39E0](v45, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_release_n();
    }
    unint64_t v53 = v59;
    uint64_t v54 = type metadata accessor for NWError();
    (*(void (**)(void (*)(char *, uint64_t), uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v53, 1, 2, v54);
    specialized DatagramClient.handleChannelConnectError(error:channelStream:attempt:promise:)(v53, a1, v64, v63, v62, a5, a6, a7);
    return outlined destroy of DatagramChannelConnectError((uint64_t)v53, (uint64_t (*)(void))type metadata accessor for DatagramChannelConnectError);
  }
}

void specialized DatagramClient.handleChannelConnectError(error:channelStream:attempt:promise:)(void (*a1)(char *, uint64_t), void *a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v165 = a4;
  uint64_t v166 = a5;
  uint64_t v170 = a3;
  uint64_t v171 = a1;
  uint64_t v152 = type metadata accessor for DatagramChannelError(0);
  MEMORY[0x1F4188790](v152);
  uint64_t v153 = (char *)&v136 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v150 = type metadata accessor for NWError();
  uint64_t v149 = *(void *)(v150 - 8);
  MEMORY[0x1F4188790](v150);
  unint64_t v137 = (char *)&v136 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v161 = *(void *)(v14 - 8);
  uint64_t v162 = v14;
  MEMORY[0x1F4188790](v14);
  int v159 = (char *)&v136 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v160 = type metadata accessor for DispatchQoS();
  uint64_t v158 = *(void *)(v160 - 8);
  MEMORY[0x1F4188790](v160);
  int v157 = (char *)&v136 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v156 = type metadata accessor for DispatchTime();
  uint64_t v155 = *(void *)(v156 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v156);
  uint64_t v151 = (char *)&v136 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v154 = (char *)&v136 - v19;
  uint64_t v145 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<NWConnectionGroup, DatagramChannelConnectError>);
  MEMORY[0x1F4188790](v145);
  uint64_t v144 = (uint64_t)&v136 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DatagramChannelConnectError?);
  uint64_t v22 = MEMORY[0x1F4188790](v21 - 8);
  uint64_t v138 = (uint64_t)&v136 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v141 = (uint64_t)&v136 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v139 = (uint64_t)&v136 - v27;
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v142 = (uint64_t)&v136 - v29;
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  unint64_t v32 = (char *)&v136 - v31;
  MEMORY[0x1F4188790](v30);
  uint64_t v34 = (char *)&v136 - v33;
  uint64_t v168 = type metadata accessor for DatagramChannelConnectError();
  uint64_t v164 = *(void *)(v168 - 8);
  uint64_t v35 = MEMORY[0x1F4188790](v168);
  uint64_t v143 = (uint64_t)&v136 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = MEMORY[0x1F4188790](v35);
  uint64_t v146 = (uint64_t)&v136 - v38;
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  uint64_t v147 = (uint64_t)&v136 - v40;
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  id v43 = (char *)&v136 - v42;
  uint64_t v44 = MEMORY[0x1F4188790](v41);
  uint64_t v140 = (uint64_t)&v136 - v45;
  MEMORY[0x1F4188790](v44);
  uint64_t v163 = (uint64_t)&v136 - v46;
  uint64_t v47 = type metadata accessor for DispatchPredicate();
  uint64_t v48 = *(void *)(v47 - 8);
  MEMORY[0x1F4188790](v47);
  uint64_t v50 = (void **)((char *)&v136 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v169 = a6;
  unint64_t v51 = *(void **)(a6 + 80);
  *uint64_t v50 = v51;
  (*(void (**)(void *, void, uint64_t))(v48 + 104))(v50, *MEMORY[0x1E4FBCBF0], v47);
  id v148 = v51;
  LOBYTE(v51) = _dispatchPreconditionTest(_:)();
  unint64_t v53 = *(void (**)(void *, uint64_t))(v48 + 8);
  uint64_t v52 = v48 + 8;
  v53(v50, v47);
  if ((v51 & 1) == 0)
  {
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v167 = (*(uint64_t (**)(uint64_t, uint64_t))(a8 + 8))(a7, a8);
  uint64_t v52 = v54;
  unsigned int v55 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(a8 + 16))(a7, a8);
  uint64_t v50 = a2;
  if (v55 < 2)
  {
    uint64_t v141 = a8;
    if (one-time initialization token for log == -1)
    {
LABEL_4:
      uint64_t v56 = type metadata accessor for Logger();
      uint64_t v57 = __swift_project_value_buffer(v56, (uint64_t)log);
      outlined init with copy of DatagramChannelConnectError((uint64_t)v171, (uint64_t)v43);
      swift_bridgeObjectRetain_n();
      uint64_t v163 = v57;
      uint64_t v58 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.error.getter();
      BOOL v60 = os_log_type_enabled(v58, v59);
      unint64_t v136 = v50;
      if (v60)
      {
        uint64_t v140 = v52;
        uint64_t v61 = swift_slowAlloc();
        uint64_t v153 = (char *)swift_slowAlloc();
        *(void *)&long long aBlock = v153;
        *(_DWORD *)uint64_t v61 = 134218498;
        uint64_t v176 = v170;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v61 + 12) = 2080;
        outlined init with copy of DatagramChannelConnectError((uint64_t)v43, (uint64_t)v34);
        uint64_t v62 = v164;
        uint64_t v63 = v168;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v164 + 56))(v34, 0, 1, v168);
        outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v34, (uint64_t)v32, (uint64_t *)&demangling cache variable for type metadata for DatagramChannelConnectError?);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v32, 1, v63) == 1)
        {
          uint64_t v64 = 7104878;
          unint64_t v65 = 0xE300000000000000;
        }
        else
        {
          uint64_t v101 = v147;
          outlined init with take of DatagramChannelConnectError((uint64_t)v32, v147);
          outlined init with copy of DatagramChannelConnectError(v101, v146);
          uint64_t v64 = String.init<A>(reflecting:)();
          unint64_t v65 = v102;
          outlined destroy of DatagramChannelConnectError(v101, (uint64_t (*)(void))type metadata accessor for DatagramChannelConnectError);
        }
        outlined destroy of UUID?((uint64_t)v34, (uint64_t *)&demangling cache variable for type metadata for DatagramChannelConnectError?);
        uint64_t v176 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of DatagramChannelConnectError((uint64_t)v43, (uint64_t (*)(void))type metadata accessor for DatagramChannelConnectError);
        *(_WORD *)(v61 + 22) = 2080;
        unint64_t v103 = v140;
        swift_bridgeObjectRetain();
        uint64_t v176 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v167, v103, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B0DF7000, v58, v59, "Establishing channel attempt #%ld failed: %s, topic=%s", (uint8_t *)v61, 0x20u);
        int v104 = v153;
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v104, -1, -1);
        uint64_t v105 = v61;
        uint64_t v52 = v103;
        MEMORY[0x1B3EA39E0](v105, -1, -1);
      }
      else
      {
        outlined destroy of DatagramChannelConnectError((uint64_t)v43, (uint64_t (*)(void))type metadata accessor for DatagramChannelConnectError);

        swift_bridgeObjectRelease_n();
      }
      uint64_t v106 = v169;
      uint64_t v107 = v141;
      if (*(void *)(v169 + 64) == v170)
      {
        swift_bridgeObjectRelease();
        uint64_t v108 = v144;
        outlined init with copy of DatagramChannelConnectError((uint64_t)v171, v144);
        swift_storeEnumTagMultiPayload();
        v165(v108);
        outlined destroy of UUID?(v108, &demangling cache variable for type metadata for Result<NWConnectionGroup, DatagramChannelConnectError>);
      }
      else
      {
        swift_retain_n();
        swift_bridgeObjectRetain();
        uint64_t v109 = Logger.logObject.getter();
        unint64_t v110 = v52;
        os_log_type_t v111 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v109, v111))
        {
          uint64_t v112 = swift_slowAlloc();
          uint64_t v113 = swift_slowAlloc();
          *(void *)&long long aBlock = v113;
          *(_DWORD *)uint64_t v112 = 134218242;
          uint64_t v176 = *(void *)(v106 + 72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          *(_WORD *)(v112 + 12) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v176 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v167, v110, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B0DF7000, v109, v111, "Will retry establishing channel in %f seconds, topic=%s", (uint8_t *)v112, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v113, -1, -1);
          MEMORY[0x1B3EA39E0](v112, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_release_n();
        }
        int v114 = v151;
        static DispatchTime.now()();
        uint64_t v115 = v154;
        MEMORY[0x1B3EA17C0](v114, *(double *)(v106 + 72));
        uint64_t v171 = *(void (**)(char *, uint64_t))(v155 + 8);
        uint64_t v116 = v156;
        v171(v114, v156);
        uint64_t v117 = (void *)swift_allocObject();
        uint64_t v118 = v136;
        v117[2] = v106;
        v117[3] = v118;
        uint64_t v119 = v170;
        v117[4] = v107;
        v117[5] = v119;
        uint64_t v120 = v166;
        v117[6] = v165;
        v117[7] = v120;
        int v174 = partial apply for closure #1 in DatagramClient.handleChannelConnectError(error:channelStream:attempt:promise:);
        uint64_t v175 = v117;
        *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
        *((void *)&aBlock + 1) = 1107296256;
        *(void *)&long long v173 = thunk for @escaping @callee_guaranteed () -> ();
        *((void *)&v173 + 1) = &block_descriptor_4;
        unint64_t v121 = _Block_copy(&aBlock);
        swift_retain();
        swift_unknownObjectRetain();
        swift_retain();
        uint64_t v122 = v157;
        static DispatchQoS.unspecified.getter();
        uint64_t v176 = MEMORY[0x1E4FBC860];
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
        uint64_t v123 = v159;
        uint64_t v124 = v162;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        MEMORY[0x1B3EA2180](v115, v122, v123, v121);
        _Block_release(v121);
        (*(void (**)(char *, uint64_t))(v161 + 8))(v123, v124);
        (*(void (**)(char *, uint64_t))(v158 + 8))(v122, v160);
        v171(v115, v116);
        swift_release();
      }
      return;
    }
LABEL_38:
    swift_once();
    goto LABEL_4;
  }
  if (v55 == 2)
  {
    uint64_t v66 = a7;
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v67 = type metadata accessor for Logger();
    __swift_project_value_buffer(v67, (uint64_t)log);
    uint64_t v68 = v163;
    outlined init with copy of DatagramChannelConnectError((uint64_t)v171, v163);
    uint64_t v69 = v169;
    swift_retain_n();
    swift_bridgeObjectRetain();
    uint64_t v70 = v52;
    unint64_t v71 = Logger.logObject.getter();
    os_log_type_t v72 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v71, v72))
    {
      uint64_t v170 = v66;
      uint64_t v140 = v70;
      uint64_t v141 = a8;
      unint64_t v136 = v50;
      uint64_t v73 = swift_slowAlloc();
      uint64_t v74 = swift_slowAlloc();
      uint64_t v176 = v74;
      *(_DWORD *)uint64_t v73 = 136315650;
      char v75 = *(unsigned char *)(v69 + 48);
      long long v76 = *(_OWORD *)(v69 + 32);
      long long aBlock = *(_OWORD *)(v69 + 16);
      long long v173 = v76;
      LOBYTE(v174) = v75;
      uint64_t v77 = DatagramEndpoint.description.getter();
      *(void *)&long long aBlock = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, &v176);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v73 + 12) = 2080;
      uint64_t v79 = v142;
      outlined init with copy of DatagramChannelConnectError(v68, v142);
      uint64_t v80 = v164;
      uint64_t v81 = v168;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v164 + 56))(v79, 0, 1, v168);
      uint64_t v82 = v79;
      uint64_t v83 = v139;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v82, v139, (uint64_t *)&demangling cache variable for type metadata for DatagramChannelConnectError?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48))(v83, 1, v81) == 1)
      {
        uint64_t v84 = 7104878;
        unint64_t v85 = 0xE300000000000000;
      }
      else
      {
        uint64_t v125 = v147;
        outlined init with take of DatagramChannelConnectError(v83, v147);
        outlined init with copy of DatagramChannelConnectError(v125, v146);
        uint64_t v84 = String.init<A>(reflecting:)();
        unint64_t v85 = v126;
        outlined destroy of DatagramChannelConnectError(v125, (uint64_t (*)(void))type metadata accessor for DatagramChannelConnectError);
      }
      outlined destroy of UUID?(v142, (uint64_t *)&demangling cache variable for type metadata for DatagramChannelConnectError?);
      *(void *)&long long aBlock = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v85, &v176);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of DatagramChannelConnectError(v163, (uint64_t (*)(void))type metadata accessor for DatagramChannelConnectError);
      *(_WORD *)(v73 + 22) = 2080;
      unint64_t v127 = v140;
      swift_bridgeObjectRetain();
      *(void *)&long long aBlock = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v167, v127, &v176);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B0DF7000, v71, v72, "DatagramClient %s disconnected due to network failure: %s, topic=%s", (uint8_t *)v73, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v74, -1, -1);
      MEMORY[0x1B3EA39E0](v73, -1, -1);

      a8 = v141;
      uint64_t v66 = v170;
    }
    else
    {
      swift_release_n();
      outlined destroy of DatagramChannelConnectError(v68, (uint64_t (*)(void))type metadata accessor for DatagramChannelConnectError);

      swift_bridgeObjectRelease_n();
    }
    uint64_t v128 = v150;
    uint64_t v129 = v143;
    outlined init with copy of DatagramChannelConnectError((uint64_t)v171, v143);
    uint64_t v130 = v149;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v149 + 48))(v129, 2, v128))
    {
      outlined destroy of DatagramChannelConnectError(v129, (uint64_t (*)(void))type metadata accessor for DatagramChannelConnectError);
      uint64_t v131 = (uint64_t)v153;
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(a8 + 64))(v131, v66, a8);
      outlined destroy of DatagramChannelConnectError(v131, type metadata accessor for DatagramChannelError);
    }
    else
    {
      uint64_t v132 = v137;
      (*(void (**)(char *, uint64_t, uint64_t))(v130 + 32))(v137, v129, v128);
      uint64_t v133 = (uint64_t)v153;
      (*(void (**)(char *, char *, uint64_t))(v130 + 16))(v153, v132, v128);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(a8 + 64))(v133, v66, a8);
      outlined destroy of DatagramChannelConnectError(v133, type metadata accessor for DatagramChannelError);
      (*(void (**)(char *, uint64_t))(v130 + 8))(v132, v128);
    }
  }
  else
  {
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v86 = type metadata accessor for Logger();
    __swift_project_value_buffer(v86, (uint64_t)log);
    uint64_t v87 = v140;
    outlined init with copy of DatagramChannelConnectError((uint64_t)v171, v140);
    swift_bridgeObjectRetain();
    uint64_t v88 = Logger.logObject.getter();
    os_log_type_t v89 = static os_log_type_t.error.getter();
    BOOL v90 = os_log_type_enabled(v88, v89);
    uint64_t v91 = v168;
    if (v90)
    {
      uint64_t v92 = swift_slowAlloc();
      uint64_t v93 = swift_slowAlloc();
      *(void *)&long long aBlock = v93;
      *(_DWORD *)uint64_t v92 = 136315394;
      uint64_t v94 = v141;
      outlined init with copy of DatagramChannelConnectError(v87, v141);
      uint64_t v95 = v164;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v164 + 56))(v94, 0, 1, v91);
      uint64_t v96 = v94;
      uint64_t v97 = v138;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v96, v138, (uint64_t *)&demangling cache variable for type metadata for DatagramChannelConnectError?);
      unint64_t v98 = v52;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v95 + 48))(v97, 1, v91) == 1)
      {
        uint64_t v99 = 7104878;
        unint64_t v100 = 0xE300000000000000;
      }
      else
      {
        uint64_t v134 = v147;
        outlined init with take of DatagramChannelConnectError(v97, v147);
        outlined init with copy of DatagramChannelConnectError(v134, v146);
        uint64_t v99 = String.init<A>(reflecting:)();
        unint64_t v100 = v135;
        outlined destroy of DatagramChannelConnectError(v134, (uint64_t (*)(void))type metadata accessor for DatagramChannelConnectError);
      }
      outlined destroy of UUID?(v141, (uint64_t *)&demangling cache variable for type metadata for DatagramChannelConnectError?);
      uint64_t v176 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, v100, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of DatagramChannelConnectError(v87, (uint64_t (*)(void))type metadata accessor for DatagramChannelConnectError);
      *(_WORD *)(v92 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v176 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v167, v98, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B0DF7000, v88, v89, "DatagramClient channel is in closed state, but channel-group got an unexpected failure: %s, topic=%s", (uint8_t *)v92, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v93, -1, -1);
      MEMORY[0x1B3EA39E0](v92, -1, -1);
    }
    else
    {
      outlined destroy of DatagramChannelConnectError(v87, (uint64_t (*)(void))type metadata accessor for DatagramChannelConnectError);

      swift_bridgeObjectRelease_n();
    }
  }
}

uint64_t specialized static DatagramChannelConnectError.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NWError();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DatagramChannelConnectError();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DatagramChannelConnectError, DatagramChannelConnectError));
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of DatagramChannelConnectError(a1, (uint64_t)v14);
  outlined init with copy of DatagramChannelConnectError(a2, v15);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  int v17 = v16(v14, 2, v4);
  if (!v17)
  {
    outlined init with copy of DatagramChannelConnectError((uint64_t)v14, (uint64_t)v10);
    if (!v16((char *)v15, 2, v4))
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v15, v4);
      char v18 = MEMORY[0x1B3EA16F0](v10, v7);
      uint64_t v19 = *(void (**)(char *, uint64_t))(v5 + 8);
      v19(v7, v4);
      v19(v10, v4);
      outlined destroy of DatagramChannelConnectError((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for DatagramChannelConnectError);
      return v18 & 1;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    goto LABEL_9;
  }
  if (v17 == 1)
  {
    if (v16((char *)v15, 2, v4) != 1) {
      goto LABEL_9;
    }
  }
  else if (v16((char *)v15, 2, v4) != 2)
  {
LABEL_9:
    outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for (DatagramChannelConnectError, DatagramChannelConnectError));
    char v18 = 0;
    return v18 & 1;
  }
  outlined destroy of DatagramChannelConnectError((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for DatagramChannelConnectError);
  char v18 = 1;
  return v18 & 1;
}

uint64_t *initializeBufferWithCopyOfBuffer for DatagramChannelConnectError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = type metadata accessor for NWError();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
    }
  }
  return a1;
}

uint64_t destroy for DatagramChannelConnectError(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NWError();
  uint64_t v5 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 2, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v2);
  }
  return result;
}

void *initializeWithCopy for DatagramChannelConnectError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NWError();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *assignWithCopy for DatagramChannelConnectError(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NWError();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 2, v6);
  int v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

void *initializeWithTake for DatagramChannelConnectError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NWError();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *assignWithTake for DatagramChannelConnectError(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NWError();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 2, v6);
  int v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for DatagramChannelConnectError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0E84320);
}

uint64_t sub_1B0E84320(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NWError();
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 3) {
    return v5 - 2;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DatagramChannelConnectError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0E843A0);
}

uint64_t sub_1B0E843A0(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 2);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = type metadata accessor for NWError();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(a1, v5, a3, v6);
}

uint64_t getEnumTag for DatagramChannelConnectError(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NWError();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);
  return v3(a1, 2, v2);
}

uint64_t destructiveInjectEnumTag for DatagramChannelConnectError(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NWError();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, 2, v4);
}

uint64_t type metadata accessor for DatagramChannelConnectError()
{
  uint64_t result = type metadata singleton initialization cache for DatagramChannelConnectError;
  if (!type metadata singleton initialization cache for DatagramChannelConnectError) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for DatagramChannelConnectError()
{
  uint64_t result = type metadata accessor for NWError();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t sub_1B0E845C0()
{
  swift_weakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B0E845F8()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return MEMORY[0x1F4186498](v0, 88, 7);
}

void partial apply for closure #1 in DatagramClient.createChannelGroup(channelStream:attempt:promise:)(uint64_t a1)
{
  closure #1 in DatagramClient.createChannelGroup(channelStream:attempt:promise:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void (**)(uint64_t))(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80));
}

uint64_t sub_1B0E84688()
{
  swift_unknownObjectRelease();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #2 in DatagramClient.createChannelGroup(channelStream:attempt:promise:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(v4 + 24);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a3, a4, ObjectType, v9);
}

uint64_t outlined init with copy of DatagramChannelConnectError(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DatagramChannelConnectError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of DatagramChannelConnectError(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DatagramChannelConnectError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of DatagramChannelConnectError(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1B0E84868()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t partial apply for closure #1 in DatagramClient.handleChannelConnectError(error:channelStream:attempt:promise:)()
{
  return closure #1 in DatagramClient.handleChannelConnectError(error:channelStream:attempt:promise:)(v0[2], v0[3], v0[4], v0[5], v0[6], v0[7]);
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags;
  if (!lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
  }
  return result;
}

uint64_t specialized tryLog<A>(_:_:function:line:)(uint64_t (*a1)(void))
{
  return a1();
}

void static NSUserDefaults.classProtectedStorage(suiteName:)(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v18 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v7, v8, "Enabling file protection class for conversation persistence storage %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v10, -1, -1);
    MEMORY[0x1B3EA39E0](v9, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v11 = (void *)MEMORY[0x1B3EA1B00](a1, a2);
  _CFPreferencesSetFileProtectionClass();
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == a1 && v12 == a2)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v14 & 1) == 0) {
      _CFPreferencesSetBackupDisabled();
    }
  }
  id v15 = objc_allocWithZone(MEMORY[0x1E4F1CB18]);
  swift_bridgeObjectRetain();
  uint64_t v16 = (void *)MEMORY[0x1B3EA1B00](a1, a2);
  swift_bridgeObjectRelease();
  id v17 = objc_msgSend(v15, sel_initWithSuiteName_, v16);

  a3[3] = type metadata accessor for NSUserDefaults();
  a3[4] = &protocol witness table for NSUserDefaults;
  if (!v17) {
    id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CB18]), sel_init);
  }

  *a3 = v17;
}

uint64_t NSUserDefaults.setCodable<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = specialized tryLog<A>(_:_:function:line:)((uint64_t (*)(void))partial apply for implicit closure #1 in NSUserDefaults.setCodable<A>(_:forKey:));
  if (v10 >> 60 != 15)
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    os_log_type_t v8 = (void *)MEMORY[0x1B3EA1B00](a2, a3);
    objc_msgSend(v3, sel_setObject_forKey_, isa, v8);

    return outlined consume of Data?(v9, v10);
  }
  return result;
}

uint64_t implicit closure #1 in NSUserDefaults.setCodable<A>(_:forKey:)@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  uint64_t v3 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  uint64_t v5 = v4;
  uint64_t result = swift_release();
  if (!v1)
  {
    *a1 = v3;
    a1[1] = v5;
  }
  return result;
}

uint64_t NSUserDefaults.get<A>(_:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v54 = a5;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v63 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v58 = (char *)&v51 - v18;
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v51 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v51 - v22;
  uint64_t v24 = (void *)MEMORY[0x1B3EA1B00](a2, a3);
  id v25 = objc_msgSend(v7, sel_valueForKey_, v24);

  if (v25)
  {
    uint64_t v53 = a1;
    uint64_t v57 = a6;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v70, &v71);
    outlined init with copy of Any((uint64_t)&v71, (uint64_t)&v70);
    int v26 = swift_dynamicCast();
    uint64_t v27 = *(void *)(a4 - 8);
    uint64_t v28 = *(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56);
    uint64_t v62 = v27 + 56;
    uint64_t v61 = v28;
    v28(v23, v26 ^ 1u, 1, a4);
    uint64_t v56 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
    v56(v21, v23, v13);
    unsigned int v55 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
    int v29 = v55(v21, 1, a4);
    uint64_t v51 = v14;
    uint64_t v30 = *(uint64_t (**)(char *, uint64_t))(v14 + 8);
    uint64_t v60 = v14 + 8;
    os_log_type_t v59 = v30;
    v30(v21, v13);
    uint64_t v31 = v63;
    if (v29 == 1)
    {
      outlined init with copy of Any((uint64_t)&v71, (uint64_t)&v70);
      if (swift_dynamicCast())
      {
        uint64_t v52 = v13;
        uint64_t v33 = v68[0];
        unint64_t v32 = v68[1];
        type metadata accessor for JSONDecoder();
        swift_allocObject();
        JSONDecoder.init()();
        dispatch thunk of JSONDecoder.decode<A>(_:from:)();
        outlined consume of Data._Representation(v33, v32);
        swift_release();
        uint64_t v34 = v58;
        v61(v58, 0, 1, a4);
        uint64_t v13 = v52;
        (*(void (**)(char *, char *, uint64_t))(v51 + 40))(v23, v34, v52);
      }
    }
    v56(v31, v23, v13);
    if (v55(v31, 1, a4) == 1)
    {
      uint64_t v58 = v23;
      uint64_t v52 = v13;
      uint64_t v35 = v59;
      v59(v31, v13);
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      __swift_project_value_buffer(v36, (uint64_t)static Log.default);
      outlined init with copy of Any((uint64_t)&v71, (uint64_t)&v70);
      uint64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v39 = swift_slowAlloc();
        uint64_t v40 = swift_slowAlloc();
        uint64_t v69 = v40;
        *(_DWORD *)uint64_t v39 = 136315394;
        outlined init with copy of Any((uint64_t)&v70, (uint64_t)v68);
        outlined init with copy of Any?((uint64_t)v68, (uint64_t)&v66);
        if (v67)
        {
          outlined init with take of Any(&v66, v65);
          outlined init with copy of Any((uint64_t)v65, (uint64_t)v64);
          uint64_t v41 = String.init<A>(reflecting:)();
          unint64_t v43 = v42;
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v65);
        }
        else
        {
          unint64_t v43 = 0xE300000000000000;
          uint64_t v41 = 7104878;
        }
        outlined destroy of Any?((uint64_t)v68);
        v68[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v43, &v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v70);
        *(_WORD *)(v39 + 12) = 2080;
        v68[0] = v53;
        uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
        uint64_t v49 = >> prefix<A>(_:)((uint64_t)v68, MetatypeMetadata);
        v68[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, &v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v37, v38, "Failed to cast value: %s to type: %s", (uint8_t *)v39, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v40, -1, -1);
        MEMORY[0x1B3EA39E0](v39, -1, -1);

        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v71);
        uint64_t v47 = v58;
        uint64_t v35 = v59;
      }
      else
      {

        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v70);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v71);
        uint64_t v47 = v58;
      }
      v61(v57, 1, 1, a4);
      return v35(v47, v52);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v71);
      uint64_t v46 = v57;
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v57, v31, a4);
      v61(v46, 0, 1, a4);
      return v59(v23, v13);
    }
  }
  else
  {
    uint64_t v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56);
    return v44((uint64_t)a6, 1, 1, a4);
  }
}

uint64_t NSUserDefaults.getGenericType<A>(_:forKey:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v21 - v12;
  uint64_t v14 = (void *)MEMORY[0x1B3EA1B00](a1, a2);
  id v15 = objc_msgSend(v5, sel_valueForKey_, v14);

  if (v15)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(v21, v22);
  }
  else
  {
    memset(v22, 0, sizeof(v22));
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  int v16 = swift_dynamicCast();
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56);
  if (v16)
  {
    uint64_t v18 = *(void *)(a3 - 8);
    v17(v13, 0, 1, a3);
    (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(a4, v13, a3);
    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v19 = 1;
    v17(v13, 1, 1, a3);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v17)(a4, v19, 1, a3);
}

uint64_t NSUserDefaults.getAll<A>(of:)()
{
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  id v1 = objc_msgSend(v0, sel_dictionaryRepresentation);
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v2 = Dictionary.compactMapValues<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t closure #1 in NSUserDefaults.getAll<A>(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v35 = a5;
  uint64_t v36 = a2;
  uint64_t v40 = a3;
  uint64_t v45 = a1;
  uint64_t v49 = type metadata accessor for Optional();
  os_log_type_t v8 = *(void **)(v49 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v49);
  uint64_t v39 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  unint64_t v43 = (char *)v33 - v12;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v33 - v13;
  uint64_t v15 = *(void *)(a4 - 8);
  int v16 = (char *)(v15 + 56);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
  v17(a6, 1, 1, a4);
  uint64_t v44 = (void (*)(uint64_t, uint64_t))v8[1];
  v44(a6, v49);
  outlined init with copy of Any(v45, (uint64_t)v48);
  uint64_t v38 = MEMORY[0x1E4FBC840] + 8;
  int v18 = swift_dynamicCast();
  uint64_t v37 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v17;
  v17((uint64_t)v14, v18 ^ 1u, 1, a4);
  uint64_t v19 = v49;
  uint64_t v34 = (void (*)(uint64_t, char *, uint64_t))v8[4];
  v34(a6, v14, v49);
  uint64_t v20 = (void (*)(char *, uint64_t, uint64_t))v8[2];
  uint64_t v21 = v43;
  uint64_t v41 = a6;
  v20(v43, a6, v19);
  uint64_t v22 = v21;
  int v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v21, 1, a4);
  uint64_t v24 = v19;
  LODWORD(v21) = v23;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v44)(v22, v19);
  if (v21 == 1)
  {
    v33[1] = v8 + 4;
    unint64_t v43 = v16;
    int v26 = v39;
    uint64_t v27 = v41;
    outlined init with copy of Any(v45, (uint64_t)v48);
    uint64_t result = swift_dynamicCast();
    if (result)
    {
      uint64_t v28 = v46;
      unint64_t v29 = v47;
      uint64_t v30 = v42;
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      if (v30)
      {
        outlined consume of Data._Representation(v28, v29);

        uint64_t v31 = v27;
        v44(v27, v24);
        uint64_t v32 = 1;
      }
      else
      {
        uint64_t v31 = v27;
        v44(v27, v24);
        outlined consume of Data._Representation(v28, v29);
        uint64_t v32 = 0;
      }
      v37(v26, v32, 1, a4);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v34)(v31, v26, v24);
    }
  }
  return result;
}

uint64_t NSUserDefaults.getAllOfGenericType<A>(of:)()
{
  id v1 = objc_msgSend(v0, sel_dictionaryRepresentation);
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v2 = Dictionary.compactMapValues<A>(_:)();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t closure #1 in NSUserDefaults.getAllOfGenericType<A>(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = &v15[-v8];
  outlined init with copy of Any(a1, (uint64_t)v15);
  char v10 = swift_dynamicCast();
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56);
  if (v10)
  {
    uint64_t v12 = *(void *)(a2 - 8);
    v11((uint64_t)v9, 0, 1, a2);
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v12 + 32))(a3, v9, a2);
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = 1;
    v11((uint64_t)v9, 1, 1, a2);
    (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
  }
  return v11(a3, v13, 1, a2);
}

Swift::Void __swiftcall NSUserDefaults.remove(key:)(Swift::String key)
{
  id v2 = (id)MEMORY[0x1B3EA1B00](key._countAndFlagsBits, key._object);
  objc_msgSend(v1, sel_removeObjectForKey_, v2);
}

Swift::Void __swiftcall NSUserDefaults.commit()()
{
  objc_msgSend(v0, sel_synchronize);
}

void protocol witness for ProtectedStorage.set(_:forKey:) in conformance NSUserDefaults(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void @nonobjc NSUserDefaults.set(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  outlined init with copy of Any?(a1, (uint64_t)v13);
  uint64_t v6 = v14;
  if (v14)
  {
    uint64_t v7 = __swift_project_boxed_opaque_existential_1(v13, v14);
    uint64_t v8 = *(void *)(v6 - 8);
    MEMORY[0x1F4188790](v7);
    char v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v8 + 16))(v10);
    uint64_t v11 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v6);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v13);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v12 = (void *)MEMORY[0x1B3EA1B00](a2, a3);
  objc_msgSend(v3, sel_setObject_forKey_, v11, v12);
  swift_unknownObjectRelease();
}

uint64_t protocol witness for ProtectedStorage.setCodable<A>(_:forKey:) in conformance NSUserDefaults(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NSUserDefaults.setCodable<A>(_:forKey:)(a1, a2, a3);
}

void protocol witness for ProtectedStorage.remove(key:) in conformance NSUserDefaults()
{
  id v1 = *v0;
  id v2 = (id)MEMORY[0x1B3EA1B00]();
  objc_msgSend(v1, sel_removeObjectForKey_, v2);
}

uint64_t protocol witness for ProtectedStorage.get<A>(_:forKey:) in conformance NSUserDefaults@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  return NSUserDefaults.get<A>(_:forKey:)(a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for ProtectedStorage.getGenericType<A>(_:forKey:) in conformance NSUserDefaults@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return NSUserDefaults.getGenericType<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t protocol witness for ProtectedStorage.getAll<A>(of:) in conformance NSUserDefaults()
{
  return NSUserDefaults.getAll<A>(of:)();
}

uint64_t protocol witness for ProtectedStorage.getAllOfGenericType<A>(of:) in conformance NSUserDefaults()
{
  return NSUserDefaults.getAllOfGenericType<A>(of:)();
}

id protocol witness for ProtectedStorage.commit() in conformance NSUserDefaults()
{
  return objc_msgSend(*v0, sel_synchronize);
}

void protocol witness for static ProtectedStorage.classProtectedStorage(suiteName:) in conformance NSUserDefaults(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
}

unint64_t type metadata accessor for NSUserDefaults()
{
  unint64_t result = lazy cache variable for type metadata for NSUserDefaults;
  if (!lazy cache variable for type metadata for NSUserDefaults)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSUserDefaults);
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in NSUserDefaults.setCodable<A>(_:forKey:)@<X0>(uint64_t *a1@<X8>)
{
  return implicit closure #1 in NSUserDefaults.setCodable<A>(_:forKey:)(a1);
}

uint64_t partial apply for closure #1 in NSUserDefaults.getAll<A>(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in NSUserDefaults.getAll<A>(of:)(a1, v2[5], v2[6], v2[2], v2[3], a2);
}

uint64_t partial apply for closure #1 in NSUserDefaults.getAllOfGenericType<A>(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in NSUserDefaults.getAllOfGenericType<A>(of:)(a1, *(void *)(v2 + 16), a2);
}

uint64_t dispatch thunk of ProtectedStorage.set(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of ProtectedStorage.setCodable<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 16))();
}

uint64_t dispatch thunk of ProtectedStorage.remove(key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of ProtectedStorage.get<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 32))();
}

uint64_t dispatch thunk of ProtectedStorage.getGenericType<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 40))();
}

uint64_t dispatch thunk of ProtectedStorage.getAll<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 48))();
}

uint64_t dispatch thunk of ProtectedStorage.getAllOfGenericType<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of ProtectedStorage.commit()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of static ProtectedStorage.classProtectedStorage(suiteName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t PresenceSessionCreationRequest.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR___CPPresenceSessionCreationRequest_id;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t PresenceSessionCreationRequest.isCrossAccount.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___CPPresenceSessionCreationRequest_isCrossAccount);
}

id PresenceSessionCreationRequest.__allocating_init(id:isCrossAccount:)(uint64_t a1, char a2)
{
  uint64_t v5 = objc_allocWithZone(v2);
  uint64_t v6 = &v5[OBJC_IVAR___CPPresenceSessionCreationRequest_id];
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  v5[OBJC_IVAR___CPPresenceSessionCreationRequest_isCrossAccount] = a2;
  v11.receiver = v5;
  v11.super_class = v2;
  id v9 = objc_msgSendSuper2(&v11, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  return v9;
}

id PresenceSessionCreationRequest.init(id:isCrossAccount:)(uint64_t a1, char a2)
{
  uint64_t v5 = &v2[OBJC_IVAR___CPPresenceSessionCreationRequest_id];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v5, a1, v6);
  v2[OBJC_IVAR___CPPresenceSessionCreationRequest_isCrossAccount] = a2;
  v10.receiver = v2;
  v10.super_class = (Class)type metadata accessor for PresenceSessionCreationRequest();
  id v8 = objc_msgSendSuper2(&v10, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
  return v8;
}

uint64_t type metadata accessor for PresenceSessionCreationRequest()
{
  uint64_t result = type metadata singleton initialization cache for PresenceSessionCreationRequest;
  if (!type metadata singleton initialization cache for PresenceSessionCreationRequest) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t PresenceSessionCreationRequest.isEqual(_:)(uint64_t a1)
{
  outlined init with copy of Any?(a1, (uint64_t)v7);
  if (!v8)
  {
    outlined destroy of UUID?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_7;
  }
  type metadata accessor for PresenceSessionCreationRequest();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_7:
    char v4 = 0;
    return v4 & 1;
  }
  if ((static UUID.== infix(_:_:)() & 1) == 0)
  {

    goto LABEL_7;
  }
  char v2 = *(unsigned char *)(v1 + OBJC_IVAR___CPPresenceSessionCreationRequest_isCrossAccount);
  char v3 = *((unsigned char *)v6 + OBJC_IVAR___CPPresenceSessionCreationRequest_isCrossAccount);

  char v4 = v2 ^ v3 ^ 1;
  return v4 & 1;
}

uint64_t static PresenceSessionCreationRequest.supportsSecureCoding.getter()
{
  return 1;
}

id PresenceSessionCreationRequest.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return PresenceSessionCreationRequest.init(coder:)(a1);
}

id PresenceSessionCreationRequest.init(coder:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v25 - v7;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSUUID();
  uint64_t v13 = v1;
  uint64_t v14 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v14)
  {
    uint64_t v15 = (void *)v14;
    uint64_t v28 = a1;
    int v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v16(v6, 1, 1, v9);
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID);
    dispatch thunk of static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:)();

    uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
    if (v17(v6, 1, v9) == 1)
    {
      v16(v8, 1, 1, v9);
      a1 = v28;
    }
    else
    {
      uint64_t v27 = v12;
      int v26 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
      v26(v8, v6, v9);
      v16(v8, 0, 1, v9);
      int v18 = v17(v8, 1, v9);
      a1 = v28;
      if (v18 != 1)
      {
        uint64_t v21 = v27;
        v26(v27, v8, v9);
        (*(void (**)(unsigned char *, char *, uint64_t))(v10 + 16))(&v13[OBJC_IVAR___CPPresenceSessionCreationRequest_id], v21, v9);
        uint64_t v22 = (void *)MEMORY[0x1B3EA1B00](0x4173736F72437369, 0xEE00746E756F6363);
        unsigned __int8 v23 = objc_msgSend(a1, sel_decodeBoolForKey_, v22);

        (*(void (**)(char *, uint64_t))(v10 + 8))(v21, v9);
        v13[OBJC_IVAR___CPPresenceSessionCreationRequest_isCrossAccount] = v23;

        uint64_t v24 = (objc_class *)type metadata accessor for PresenceSessionCreationRequest();
        v29.receiver = v13;
        v29.super_class = v24;
        id v19 = objc_msgSendSuper2(&v29, sel_init);

        return v19;
      }
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
  }

  outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for UUID?);
  type metadata accessor for PresenceSessionCreationRequest();
  swift_deallocPartialClassInstance();
  return 0;
}

unint64_t type metadata accessor for NSUUID()
{
  unint64_t result = lazy cache variable for type metadata for NSUUID;
  if (!lazy cache variable for type metadata for NSUUID)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSUUID);
  }
  return result;
}

Swift::Void __swiftcall PresenceSessionCreationRequest.encode(with:)(NSCoder with)
{
  uint64_t v2 = v1;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v5 = (void *)MEMORY[0x1B3EA1B00](25705, 0xE200000000000000);
  [(objc_class *)with.super.isa encodeObject:isa forKey:v5];

  uint64_t v6 = *(unsigned __int8 *)(v2 + OBJC_IVAR___CPPresenceSessionCreationRequest_isCrossAccount);
  id v7 = (id)MEMORY[0x1B3EA1B00](0x4173736F72437369, 0xEE00746E756F6363);
  [(objc_class *)with.super.isa encodeBool:v6 forKey:v7];
}

uint64_t PresenceSessionCreationRequest.description.getter()
{
  swift_getObjectType();
  v0._uint64_t countAndFlagsBits = 60;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  v1._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0x203A666C657320;
  v2._object = (void *)0xE700000000000000;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 1029990688;
  v4._object = (void *)0xE400000000000000;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0xD000000000000010;
  v6._object = (void *)0x80000001B115D6A0;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 62;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0;
}

uint64_t lazy protocol witness table accessor for type UUID and conformance UUID(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for UUID();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id PresenceSessionCreationRequest.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void PresenceSessionCreationRequest.init()()
{
}

id PresenceSessionCreationRequest.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PresenceSessionCreationRequest();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for PresenceSessionCreationRequest()
{
  return type metadata accessor for PresenceSessionCreationRequest();
}

uint64_t type metadata completion function for PresenceSessionCreationRequest()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for PresenceSessionCreationRequest(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PresenceSessionCreationRequest);
}

uint64_t dispatch thunk of PresenceSessionCreationRequest.__allocating_init(id:isCrossAccount:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of PresenceSessionCreationRequest.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of PresenceSessionCreationRequest.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t specialized BinaryInteger.bit(at:)(uint64_t a1, unsigned int a2)
{
  if (a1 < -32) {
    return 0;
  }
  if (a1 > 32) {
    return 0;
  }
  if (a1 < 0)
  {
    int v3 = a2 << -(char)a1;
    if ((unint64_t)a1 <= 0xFFFFFFFFFFFFFFE0) {
      LOBYTE(v3) = 0;
    }
    return v3 & 1;
  }
  else
  {
    if ((unint64_t)a1 >= 0x20) {
      return 0;
    }
    return (a2 >> a1) & 1;
  }
}

Swift::Bool __swiftcall BinaryInteger.bit(at:)(Swift::Int at)
{
  uint64_t v3 = v1;
  uint64_t v5 = *(void *)(*(void *)(v2 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v39 - v8;
  uint64_t v47 = *(void *)(v3 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v40 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v39 - v13;
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v17 = (char *)&v39 - v16;
  MEMORY[0x1F4188790](v15);
  id v19 = (char *)&v39 - v18;
  Swift::Int v48 = at;
  unint64_t v41 = lazy protocol witness table accessor for type Int and conformance Int();
  dispatch thunk of static BinaryInteger.>> infix<A>(_:_:)();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  unint64_t v42 = v9;
  uint64_t v43 = v5;
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  dispatch thunk of static BinaryInteger.& infix(_:_:)();
  uint64_t v21 = v47 + 8;
  uint64_t v20 = *(void (**)(char *, uint64_t))(v47 + 8);
  v20(v14, v3);
  uint64_t v44 = v17;
  uint64_t v45 = v21;
  uint64_t v46 = v20;
  v20(v17, v3);
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
  {
    char v24 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v39 = v19;
    uint64_t v25 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v24)
    {
      if (v25 <= 64)
      {
        dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
        int v26 = v44;
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
        uint64_t v27 = v39;
        char v28 = dispatch thunk of static Comparable.>= infix(_:_:)();
        objc_super v29 = v46;
        v46(v26, v3);
        uint64_t v30 = v40;
        (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v40, v27, v3);
        char v31 = (v28 & 1) != 0 && dispatch thunk of BinaryInteger._lowWord.getter() == 1;
        v29(v30, v3);
        v29(v27, v3);
        return v31 & 1;
      }
    }
    else if (v25 < 64)
    {
      uint64_t v34 = v39;
      uint64_t v22 = dispatch thunk of BinaryInteger._lowWord.getter();
      unsigned __int8 v23 = v34;
      goto LABEL_11;
    }
    Swift::Int v48 = 1;
    uint64_t v35 = v44;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    uint64_t v36 = v39;
    char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v37 = v46;
    v46(v35, v3);
    v37(v36, v3);
    return v31 & 1;
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
  {
    uint64_t v22 = dispatch thunk of BinaryInteger._lowWord.getter();
    unsigned __int8 v23 = v19;
LABEL_11:
    v46(v23, v3);
    char v31 = v22 == 1;
    return v31 & 1;
  }
  Swift::Int v48 = 1;
  uint64_t v32 = v44;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v33 = v46;
  v46(v32, v3);
  v33(v19, v3);
  return v31 & 1;
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

Swift::Void __swiftcall BinaryInteger.setBit(at:to:)(Swift::Int at, Swift::Bool to)
{
  Swift::Int v20 = at;
  uint64_t v3 = v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v7 = *(void *)(v3 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v13 = (char *)&v19 - v12;
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v19 - v14;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  uint64_t v16 = (void (**)(char *, uint64_t))(v7 + 8);
  if (to)
  {
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    Swift::Int v21 = v20;
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)();
    uint64_t v17 = *v16;
    (*v16)(v13, v3);
    dispatch thunk of static BinaryInteger.|= infix(_:_:)();
    v17(v15, v3);
  }
  else
  {
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    Swift::Int v21 = v20;
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)();
    uint64_t v18 = *v16;
    (*v16)(v10, v3);
    dispatch thunk of static BinaryInteger.~ prefix(_:)();
    v18(v13, v3);
    dispatch thunk of static BinaryInteger.&= infix(_:_:)();
    v18(v15, v3);
  }
}

Swift::Bool __swiftcall Bool.init(exactly:)(Swift::UInt64 exactly)
{
  return exactly == 1;
}

uint64_t FixedBitArray.words.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*FixedBitArray.words.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t FixedBitArray.init(bitCapacity:)(uint64_t result)
{
  double v1 = ceil((double)result * 0.03125);
  if ((~*(void *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 9.22337204e18) {
    return specialized Array.init(repeating:count:)(0, (uint64_t)v1);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t specialized Array.init(repeating:count:)(unsigned int a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a2) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(result + 16) = a2;
  uint64_t v5 = (unsigned int *)(result + 32);
  if (a2 < 8)
  {
    unint64_t v6 = 0;
LABEL_9:
    unint64_t v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  v5 += a2 & 0xFFFFFFFFFFFFFFF8;
  int32x4_t v7 = vdupq_n_s32(a1);
  uint64_t v8 = (int32x4_t *)(result + 48);
  unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v8[-1] = v7;
    *uint64_t v8 = v7;
    v8 += 2;
    v9 -= 8;
  }
  while (v9);
  if (v6 != a2) {
    goto LABEL_9;
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a2) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(result + 16) = a2;
  uint64_t v5 = (unint64_t *)(result + 32);
  if (a2 < 4)
  {
    unint64_t v6 = 0;
LABEL_9:
    unint64_t v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v5 += a2 & 0xFFFFFFFFFFFFFFFCLL;
  int64x2_t v7 = vdupq_n_s64(a1);
  uint64_t v8 = (int64x2_t *)(result + 48);
  unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *uint64_t v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v6 != a2) {
    goto LABEL_9;
  }
  return result;
}

uint64_t FixedBitArray.subscript.getter(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a2 + 24);
  int64_t v3 = (unint64_t)v2 >> 62;
  if ((unint64_t)v2 >> 62)
  {
    __break(1u);
    goto LABEL_11;
  }
  int64_t v3 = (unint64_t)(2 * v2 - 0x1000000000000000) >> 61;
  if (v3 != 7)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  int64_t v2 = (16 * v2) & 0xFFFFFFFFFFFFFFE0;
  if (v2 <= a1)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  int64_t v2 = a1 + 31;
  if (a1 >= 0) {
    int64_t v2 = a1;
  }
  if (a1 < -31) {
    goto LABEL_13;
  }
  int64_t v3 = v2 >> 5;
  int64_t v2 = *(void *)(a2 + 16);
  if (v3 >= v2)
  {
LABEL_14:
    __break(1u);
    return (v3 << -(char)v2) & 1;
  }
  LOBYTE(v2) = a1 - 32 * v3;
  BOOL v4 = a1 - 32 * v3 < 0;
  LODWORD(v3) = *(_DWORD *)(a2 + 4 * v3 + 32);
  if (!v4) {
    return (v3 >> v2) & 1;
  }
  return (v3 << -(char)v2) & 1;
}

uint64_t key path getter for FixedBitArray.subscript(_:) : FixedBitArray@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v4 = *(void *)result;
  unint64_t v5 = *(void *)(*(void *)result + 24);
  if (v5 >> 62)
  {
    __break(1u);
    goto LABEL_10;
  }
  if ((2 * v5 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v6 = *a2;
  if (*a2 >= (uint64_t)(32 * (v5 >> 1)))
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v7 = v6 + 31;
  if (v6 >= 0) {
    uint64_t v7 = *a2;
  }
  if (v6 < -31) {
    goto LABEL_12;
  }
  uint64_t v8 = v7 >> 5;
  if (v8 < *(void *)(v4 + 16))
  {
    uint64_t result = specialized BinaryInteger.bit(at:)(v6 - 32 * v8, *(_DWORD *)(v4 + 4 * v8 + 32));
    *a3 = result & 1;
    return result;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t FixedBitArray.subscript.setter(char a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  unint64_t v7 = *(void *)(*v2 + 24);
  if (v7 >> 62)
  {
    __break(1u);
    goto LABEL_21;
  }
  if ((2 * v7 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = a2;
  if ((uint64_t)((16 * v7) & 0xFFFFFFFFFFFFFFE0) <= a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  char v3 = a1;
  if (a2 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = a2 + 31;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    if (v4 >= -31) {
      goto LABEL_9;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
LABEL_23:
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
  uint64_t v6 = result;
  if (v4 < -31) {
    goto LABEL_24;
  }
LABEL_9:
  uint64_t v9 = v5 >> 5;
  if (v5 >> 5 >= *(void *)(v6 + 16))
  {
LABEL_25:
    __break(1u);
    return result;
  }
  unint64_t v10 = v4 - 32 * v9;
  uint64_t v11 = v6 + 32;
  if (v3)
  {
    if (v10 >= 0x20) {
      int v12 = 0;
    }
    else {
      int v12 = 1 << v10;
    }
    int v13 = *(_DWORD *)(v11 + 4 * v9) | v12;
  }
  else
  {
    if (v10 < 0x20) {
      int v14 = ~(1 << v10);
    }
    else {
      int v14 = -1;
    }
    int v13 = *(_DWORD *)(v11 + 4 * v9) & v14;
  }
  *(_DWORD *)(v11 + 4 * v9) = v13;
  *int64_t v2 = v6;
  return result;
}

Swift::tuple_word_Int_bit_Int __swiftcall FixedBitArray.index(for:)(Swift::Int a1)
{
  unint64_t v2 = *(void *)(v1 + 24);
  if (v2 >> 62)
  {
    __break(1u);
    goto LABEL_9;
  }
  if ((2 * v2 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((uint64_t)((16 * v2) & 0xFFFFFFFFFFFFFFE0) <= a1)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (a1 >= 0) {
    Swift::Int v3 = a1;
  }
  else {
    Swift::Int v3 = a1 + 31;
  }
  Swift::Int v1 = a1 - (v3 & 0xFFFFFFFFFFFFFFE0);
  a1 = v3 >> 5;
LABEL_11:
  result.bit = v1;
  result.word = a1;
  return result;
}

uint64_t (*FixedBitArray.subscript.modify(uint64_t a1, uint64_t a2))(uint64_t a1)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = FixedBitArray.subscript.getter(a2, *v2) & 1;
  return FixedBitArray.subscript.modify;
}

uint64_t FixedBitArray.subscript.modify(uint64_t a1)
{
  return FixedBitArray.subscript.setter(*(unsigned char *)(a1 + 16), *(void *)a1);
}

unint64_t FixedBitArray.endIndex.getter(unint64_t result)
{
  unint64_t v1 = *(void *)(result + 24);
  if (v1 >> 62)
  {
    __break(1u);
  }
  else if ((2 * v1 - 0x1000000000000000) >> 61 == 7)
  {
    return (16 * v1) & 0xFFFFFFFFFFFFFFE0;
  }
  __break(1u);
  return result;
}

uint64_t FixedBitArray.startIndex.getter()
{
  return 0;
}

unint64_t FixedBitArray.capacity.getter(unint64_t result)
{
  unint64_t v1 = *(void *)(result + 24);
  if (v1 >> 62)
  {
    __break(1u);
  }
  else if ((2 * v1 - 0x1000000000000000) >> 61 == 7)
  {
    return (16 * v1) & 0xFFFFFFFFFFFFFFE0;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance FixedBitArray(char *a1, uint64_t *a2)
{
  return FixedBitArray.subscript.setter(*a1, *a2);
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance FixedBitArray(uint64_t a1, uint64_t *a2))(uint64_t a1)
{
  uint64_t v4 = *a2;
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = FixedBitArray.subscript.getter(v4, *v2) & 1;
  return protocol witness for MutableCollection.subscript.modify in conformance FixedBitArray;
}

uint64_t protocol witness for MutableCollection.subscript.modify in conformance FixedBitArray(uint64_t a1)
{
  return FixedBitArray.subscript.setter(*(unsigned char *)(a1 + 16), *(void *)(a1 + 8));
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance FixedBitArray(uint64_t *a1, int64_t *a2)
{
  specialized _writeBackMutableSlice<A, B>(_:bounds:slice:)(v2, *a2, a2[1], *a1, a1[1], a1[2]);
  return swift_bridgeObjectRelease();
}

void (*protocol witness for MutableCollection.subscript.modify in conformance FixedBitArray(void *a1, uint64_t *a2))(void *a1)
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  void v4[4] = specialized MutableCollection<>.subscript.modify(v4, *a2, a2[1]);
  return protocol witness for PresenceDataSource.members.modify in conformance SKPresenceDataSource<A>;
}

void (*specialized MutableCollection<>.subscript.modify(void *a1, uint64_t a2, int64_t a3))(uint64_t **a1, char a2)
{
  unint64_t v7 = malloc(0x30uLL);
  *a1 = v7;
  _OWORD v7[4] = a3;
  void v7[5] = v3;
  v7[3] = a2;
  Swift::tuple_word_Int_bit_Int result = *v3;
  unint64_t v9 = *((void *)*v3 + 3);
  if (v9 >> 62)
  {
    __break(1u);
    goto LABEL_8;
  }
  if ((2 * v9 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  int64_t v10 = (16 * v9) & 0xFFFFFFFFFFFFFFE0;
  if (v10 < 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (a2 < 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v10 >= a3)
  {
    void *v7 = a2;
    v7[1] = a3;
    _OWORD v7[2] = result;
    swift_bridgeObjectRetain();
    return MutableCollection<>.subscript.modifyspecialized ;
  }
LABEL_11:
  __break(1u);
  return result;
}

void MutableCollection<>.subscript.modifyspecialized (uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = (*a1)[1];
  int64_t v5 = (*a1)[4];
  uint64_t v6 = (*a1)[5];
  uint64_t v7 = (*a1)[2];
  int64_t v8 = (*a1)[3];
  if (a2)
  {
    swift_bridgeObjectRetain();
    specialized _writeBackMutableSlice<A, B>(_:bounds:slice:)(v6, v8, v5, v3, v4, v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized _writeBackMutableSlice<A, B>(_:bounds:slice:)((*a1)[5], v8, v5, v3, v4, v7);
  }
  swift_bridgeObjectRelease();
  free(v2);
}

uint64_t protocol witness for MutableCollection.partition(by:) in conformance FixedBitArray@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized MutableCollection<>._partitionImpl(by:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t *protocol witness for MutableCollection.swapAt(_:_:) in conformance FixedBitArray(uint64_t *result, uint64_t *a2)
{
  uint64_t v3 = *result;
  uint64_t v4 = *a2;
  if (*result != *a2)
  {
    uint64_t v5 = *v2;
    char v6 = FixedBitArray.subscript.getter(*result, *v2);
    char v7 = FixedBitArray.subscript.getter(v4, v5);
    FixedBitArray.subscript.setter(v7 & 1, v3);
    return (uint64_t *)FixedBitArray.subscript.setter(v6 & 1, v4);
  }
  return result;
}

uint64_t protocol witness for MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:) in conformance FixedBitArray()
{
  return MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:)();
}

uint64_t protocol witness for MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:) in conformance FixedBitArray()
{
  return MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:)();
}

int64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(int64_t result, uint64_t a2, int64_t a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a4 + 24);
  if (v4 >> 62)
  {
    __break(1u);
    goto LABEL_18;
  }
  if ((2 * v4 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  int64_t v5 = (16 * v4) & 0xFFFFFFFFFFFFFFE0;
  if (v5 < a3 || (a3 | result) < 0 || v5 < result) {
    goto LABEL_19;
  }
  uint64_t v6 = a3 - result;
  if (a2 >= 1)
  {
    if (v6 < 0 || v6 >= a2) {
      goto LABEL_13;
    }
    return 0;
  }
  if (v6 <= 0 && v6 > a2) {
    return 0;
  }
LABEL_13:
  BOOL v7 = __OFADD__(result, a2);
  result += a2;
  if (v7)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    return result;
  }
  if (result < 0 || v5 < result) {
    goto LABEL_21;
  }
  return result;
}

void protocol witness for Collection.endIndex.getter in conformance FixedBitArray(unint64_t *a1@<X8>)
{
  unint64_t v2 = *(void *)(*(void *)v1 + 24);
  if (v2 >> 62)
  {
    __break(1u);
  }
  else if ((2 * v2 - 0x1000000000000000) >> 61 == 7)
  {
    *a1 = (16 * v2) & 0xFFFFFFFFFFFFFFE0;
    return;
  }
  __break(1u);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance FixedBitArray(unsigned char *a1, uint64_t *a2))()
{
  *a1 = FixedBitArray.subscript.getter(*a2, *v2) & 1;
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t protocol witness for Collection.subscript.getter in conformance FixedBitArray@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *v2;
  unint64_t v5 = *(void *)(*v2 + 24);
  if (v5 >> 62)
  {
    __break(1u);
    goto LABEL_8;
  }
  if ((2 * v5 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v6 = 16 * v5;
  int64_t v7 = v6 & 0xFFFFFFFFFFFFFFE0;
  if (v6 < 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v8 = *a1;
  if (*a1 < 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  int64_t v9 = a1[1];
  if (v7 >= v9)
  {
    *a2 = v8;
    a2[1] = v9;
    a2[2] = result;
    return swift_bridgeObjectRetain();
  }
LABEL_11:
  __break(1u);
  return result;
}

void protocol witness for Collection.indices.getter in conformance FixedBitArray(void *a1@<X8>)
{
  unint64_t v2 = *(void *)(*(void *)v1 + 24);
  if (v2 >> 62)
  {
    __break(1u);
    goto LABEL_6;
  }
  if ((2 * v2 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  unint64_t v3 = (16 * v2) & 0xFFFFFFFFFFFFFFE0;
  if ((v3 & 0x8000000000000000) == 0)
  {
    *a1 = 0;
    a1[1] = v3;
    return;
  }
LABEL_7:
  __break(1u);
}

BOOL protocol witness for Collection.isEmpty.getter in conformance FixedBitArray()
{
  unint64_t v1 = *(void *)(*(void *)v0 + 24);
  if (v1 >> 62)
  {
    __break(1u);
  }
  else if ((2 * v1 - 0x1000000000000000) >> 61 == 7)
  {
    return (v1 & 0xFFFFFFFFFFFFFFELL) == 0;
  }
  __break(1u);
  return result;
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance FixedBitArray(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance FixedBitArray(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = a2[1];
  if (*result >= *a2)
  {
    BOOL v5 = __OFSUB__(v2, v3);
    BOOL v4 = v2 - v3 < 0;
  }
  else
  {
    BOOL v5 = 0;
    BOOL v4 = 0;
  }
  if (v4 == v5) {
    __break(1u);
  }
  return result;
}

void *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance FixedBitArray(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < *result) {
    __break(1u);
  }
  return result;
}

{
  if (*result < *a2 || a2[1] < result[1]) {
    __break(1u);
  }
  return result;
}

int64_t *protocol witness for Collection.index(after:) in conformance FixedBitArray@<X0>(int64_t *result@<X0>, void *a2@<X8>)
{
  unint64_t v3 = *(void *)(*(void *)v2 + 24);
  if (v3 >> 62)
  {
    __break(1u);
    goto LABEL_7;
  }
  if ((2 * v3 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  int64_t v4 = *result;
  if ((*result & 0x8000000000000000) == 0 && v4 < (uint64_t)((16 * v3) & 0xFFFFFFFFFFFFFFE0))
  {
    *a2 = v4 + 1;
    return result;
  }
LABEL_8:
  __break(1u);
  return result;
}

int64_t *protocol witness for Collection.formIndex(after:) in conformance FixedBitArray(int64_t *result)
{
  unint64_t v2 = *(void *)(*(void *)v1 + 24);
  if (v2 >> 62)
  {
    __break(1u);
    goto LABEL_7;
  }
  if ((2 * v2 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  int64_t v3 = *result;
  if ((*result & 0x8000000000000000) == 0 && v3 < (uint64_t)((16 * v2) & 0xFFFFFFFFFFFFFFE0))
  {
    *BOOL result = v3 + 1;
    return result;
  }
LABEL_8:
  __break(1u);
  return result;
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance FixedBitArray@<X0>(void *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
    goto LABEL_8;
  }
  unint64_t v4 = *(void *)(*(void *)v2 + 24);
  if (v4 >> 62)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if ((2 * v4 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v3 & 0x8000000000000000) == 0 && v3 < (uint64_t)((16 * v4) & 0xFFFFFFFFFFFFFFE0))
  {
    *a2 = v3;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance FixedBitArray(uint64_t *result)
{
  uint64_t v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
    goto LABEL_8;
  }
  unint64_t v3 = *(void *)(*(void *)v1 + 24);
  if (v3 >> 62)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if ((2 * v3 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x8000000000000000) == 0 && v2 < (uint64_t)((16 * v3) & 0xFFFFFFFFFFFFFFE0))
  {
    *BOOL result = v2;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

void *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance FixedBitArray@<X0>(void *result@<X0>, uint64_t a2@<X1>, int64_t *a3@<X8>)
{
  int64_t v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
    goto LABEL_8;
  }
  unint64_t v5 = *(void *)(*(void *)v3 + 24);
  if (v5 >> 62)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if ((2 * v5 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v4 & 0x8000000000000000) == 0 && (uint64_t)((16 * v5) & 0xFFFFFFFFFFFFFFE0) >= v4)
  {
    *a3 = v4;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

int64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance FixedBitArray@<X0>(int64_t *a1@<X0>, uint64_t a2@<X1>, int64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, *v4);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v7 & 1;
  return result;
}

int64_t *protocol witness for RandomAccessCollection.distance(from:to:) in conformance FixedBitArray(int64_t *result, int64_t *a2)
{
  unint64_t v3 = *(void *)(*(void *)v2 + 24);
  if (v3 >> 62)
  {
    __break(1u);
    goto LABEL_8;
  }
  if ((2 * v3 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  int64_t v4 = *a2;
  int64_t v5 = (16 * v3) & 0xFFFFFFFFFFFFFFE0;
  if (v5 >= *a2)
  {
    int64_t v6 = *result;
    if (((v4 | *result) & 0x8000000000000000) == 0 && v5 >= v6) {
      return (int64_t *)(v4 - v6);
    }
  }
LABEL_9:
  __break(1u);
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance FixedBitArray(void *a1@<X8>)
{
  *a1 = *v1;
  a1[1] = 0;
}

unint64_t protocol witness for Collection.count.getter in conformance FixedBitArray()
{
  unint64_t v1 = *(void *)(*(void *)v0 + 24);
  if (v1 >> 62)
  {
    __break(1u);
    goto LABEL_6;
  }
  if ((2 * v1 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v2 = 16 * v1;
  unint64_t result = v2 & 0xFFFFFFFFFFFFFFE0;
  if (v2 < 0) {
LABEL_7:
  }
    __break(1u);
  return result;
}

uint64_t protocol witness for Sequence._customContainsEquatableElement(_:) in conformance FixedBitArray()
{
  return 2;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance FixedBitArray()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance FixedBitArray(uint64_t a1, unsigned char *a2, int64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance FixedBitArray()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t SeqNumReceivedBuffer.parityFlag.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SeqNumReceivedBuffer.parityFlag.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*SeqNumReceivedBuffer.parityFlag.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t SeqNumReceivedBuffer.processedFlag.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SeqNumReceivedBuffer.processedFlag.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*SeqNumReceivedBuffer.processedFlag.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t SeqNumReceivedBuffer.largestSeqNum.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t SeqNumReceivedBuffer.largestSeqNum.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*SeqNumReceivedBuffer.largestSeqNum.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t SeqNumReceivedBuffer.init(seqNumCapacity:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  double v3 = ceil((double)result * 0.03125);
  if ((~*(void *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v3 < 9.22337204e18)
  {
    unint64_t v4 = (uint64_t)v3;
    uint64_t v5 = specialized Array.init(repeating:count:)(0, (uint64_t)v3);
    uint64_t result = specialized Array.init(repeating:count:)(0, v4);
    *a2 = v5;
    a2[1] = result;
    a2[2] = 0;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

unint64_t SeqNumReceivedBuffer.capacity.getter()
{
  unint64_t v1 = *(void *)(*(void *)(v0 + 8) + 24);
  if (v1 >> 62)
  {
    __break(1u);
  }
  else if ((2 * v1 - 0x1000000000000000) >> 61 == 7)
  {
    return (16 * v1) & 0xFFFFFFFFFFFFFFE0;
  }
  __break(1u);
  return result;
}

Swift::Bool __swiftcall SeqNumReceivedBuffer.process(seqNum:)(Swift::UInt64 seqNum)
{
  uint64_t v8 = v2[1];
  Swift::UInt64 v7 = (Swift::UInt64)v2[2];
  if (v7 <= seqNum) {
    Swift::UInt64 v7 = seqNum;
  }
  _OWORD v2[2] = (char *)v7;
  unint64_t v9 = *((void *)v8 + 3);
  if (v9 >> 62)
  {
    __break(1u);
    goto LABEL_32;
  }
  if ((2 * v9 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  unint64_t v10 = (16 * v9) & 0xFFFFFFFFFFFFFFE0;
  if ((v10 & 0x8000000000000000) != 0) {
    goto LABEL_48;
  }
  if (!v10) {
    goto LABEL_33;
  }
  unint64_t v1 = *v2;
  unint64_t v11 = *((void *)*v2 + 3);
  if (v11 >> 62)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if ((2 * v11 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  Swift::UInt64 v5 = seqNum / v10;
  Swift::UInt64 v6 = seqNum % v10;
  if ((uint64_t)(seqNum % v10) >= (uint64_t)(32 * (v11 >> 1)))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  Swift::UInt64 v3 = v6 >> 5;
  if (v6 >> 5 >= *((void *)v1 + 2))
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int v4 = 1 << v6;
  if ((v5 ^ ((*(_DWORD *)&v1[4 * v3 + 32] & (1 << v6)) != 0)))
  {
    if ((v5 & 1) != (((v7 / v10) & 1) == 0))
    {
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_14;
      }
      goto LABEL_39;
    }
    return 0;
  }
  if (v3 >= *((void *)v8 + 2))
  {
LABEL_38:
    __break(1u);
LABEL_39:
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v8);
LABEL_14:
    if (v3 >= *((void *)v8 + 2))
    {
      __break(1u);
    }
    else
    {
      *(_DWORD *)&v8[4 * v3 + 32] |= v4;
      v2[1] = v8;
      unint64_t v12 = *((void *)v1 + 3);
      if (!(v12 >> 62))
      {
        if ((2 * v12 - 0x1000000000000000) >> 61 == 7)
        {
          if ((uint64_t)v6 < (uint64_t)(32 * (v12 >> 1)))
          {
            if (swift_isUniquelyReferenced_nonNull_native())
            {
LABEL_19:
              if (v3 < *((void *)v1 + 2))
              {
                int v13 = v1 + 32;
                if (v5) {
                  int v14 = *(_DWORD *)&v13[4 * v3] | v4;
                }
                else {
                  int v14 = *(_DWORD *)&v13[4 * v3] & ~v4;
                }
                *(_DWORD *)&v13[4 * v3] = v14;
                *uint64_t v2 = v1;
                return 1;
              }
              __break(1u);
              goto LABEL_46;
            }
LABEL_44:
            unint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v1);
            goto LABEL_19;
          }
LABEL_43:
          __break(1u);
          goto LABEL_44;
        }
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
    }
    __break(1u);
    goto LABEL_42;
  }
  if ((*(_DWORD *)&v8[4 * v3 + 32] & v4) != 0) {
    return 0;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_46:
  }
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v8);
  if (v3 < *((void *)v8 + 2))
  {
    *(_DWORD *)&v8[4 * v3 + 32] |= v4;
    v2[1] = v8;
    return 1;
  }
  __break(1u);
LABEL_48:
  Swift::Bool result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _writeBackMutableSlice<A, B>(_:bounds:slice:)(uint64_t result, int64_t a2, int64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)result;
  unint64_t v7 = *(void *)(*(void *)result + 24);
  if (v7 >> 62)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if ((2 * v7 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (((16 * v7) & 0x8000000000000000) != 0)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  if (a2 < 0)
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  if ((uint64_t)((16 * v7) & 0xFFFFFFFFFFFFFFE0) < a3)
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  uint64_t v9 = a4;
  if (a2 != a3)
  {
    uint64_t v31 = a4 - a5;
    if (a4 == a5)
    {
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    if (a2 >= a3)
    {
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }
    unint64_t v10 = *(void *)(a6 + 24);
    if (v10 >> 62)
    {
LABEL_70:
      __break(1u);
      goto LABEL_71;
    }
    if ((2 * v10 - 0x1000000000000000) >> 61 != 7)
    {
LABEL_71:
      __break(1u);
      return result;
    }
    uint64_t v11 = 0;
    uint64_t v32 = a6 + 32;
    int64_t v12 = (16 * v10) & 0xFFFFFFFFFFFFFFE0;
    uint64_t v33 = *(void *)(a6 + 16);
    uint64_t v29 = a4 + a3 - a2;
    uint64_t v30 = (void *)result;
    if (a4 > v12) {
      int64_t v12 = a4;
    }
    int v13 = -(int)a4;
    uint64_t v34 = a4 - v12;
    uint64_t v14 = a2 - a3 + 1;
    while (1)
    {
      uint64_t v15 = v9 + v11;
      if (v9 + v11 >= a5) {
        break;
      }
      if (!(v34 + v11)) {
        goto LABEL_52;
      }
      if (v15 >= 0) {
        uint64_t v16 = v9 + v11;
      }
      else {
        uint64_t v16 = v15 + 31;
      }
      if (v9 < -31) {
        goto LABEL_53;
      }
      uint64_t v17 = v16 >> 5;
      if (v16 >> 5 >= v33) {
        goto LABEL_54;
      }
      unint64_t v18 = v9 + v11 - (v16 & 0xFFFFFFFFFFFFFFE0);
      unsigned int v19 = *(_DWORD *)(v32 + 4 * v17);
      if ((v18 & 0x8000000000000000) != 0) {
        unsigned int v20 = v19 << (v13 + 32 * v17);
      }
      else {
        unsigned int v20 = v19 >> (v9 + v11 - 32 * v17);
      }
      if ((2 * v7 - 0x1000000000000000) >> 61 != 7) {
        goto LABEL_55;
      }
      uint64_t v21 = a2 + v11;
      if (a2 + v11 >= (uint64_t)(32 * (v7 >> 1))) {
        goto LABEL_56;
      }
      if (v21 >= 0) {
        uint64_t v22 = a2 + v11;
      }
      else {
        uint64_t v22 = v21 + 31;
      }
      Swift::Bool result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        Swift::Bool result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
        uint64_t v6 = result;
      }
      uint64_t v23 = v22 >> 5;
      if ((unint64_t)(v22 >> 5) >= *(void *)(v6 + 16)) {
        goto LABEL_57;
      }
      int64_t v24 = a2 + v11 - (v22 & 0xFFFFFFFFFFFFFFE0);
      uint64_t v25 = v6 + 32;
      if (v20)
      {
        if (v24 >= 0) {
          int v28 = 1 << (a2 + v11 - 32 * v23);
        }
        else {
          int v28 = 0;
        }
        int v27 = *(_DWORD *)(v25 + 4 * v23) | v28;
      }
      else
      {
        if (v24 >= 0) {
          int v26 = ~(1 << (a2 + v11 - 32 * v23));
        }
        else {
          int v26 = -1;
        }
        int v27 = *(_DWORD *)(v25 + 4 * v23) & v26;
      }
      *(_DWORD *)(v25 + 4 * v23) = v27;
      unint64_t v7 = *(void *)(v6 + 24);
      if (v7 >> 62) {
        goto LABEL_58;
      }
      if ((2 * v7 - 0x1000000000000000) >> 61 != 7) {
        goto LABEL_59;
      }
      if ((v21 | v15) < 0 || v21 >= (uint64_t)((16 * v7) & 0xFFFFFFFFFFFFFFE0)) {
        goto LABEL_60;
      }
      if (!(v14 + v11))
      {
        uint64_t v9 = v29;
        void *v30 = v6;
        goto LABEL_49;
      }
      ++v11;
      LOBYTE(v13) = v13 - 1;
      if (!(v31 + v11)) {
        goto LABEL_61;
      }
    }
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
LABEL_49:
  if (v9 != a5)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FixedBitArray and conformance FixedBitArray()
{
  unint64_t result = lazy protocol witness table cache variable for type FixedBitArray and conformance FixedBitArray;
  if (!lazy protocol witness table cache variable for type FixedBitArray and conformance FixedBitArray)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FixedBitArray and conformance FixedBitArray);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FixedBitArray and conformance FixedBitArray;
  if (!lazy protocol witness table cache variable for type FixedBitArray and conformance FixedBitArray)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FixedBitArray and conformance FixedBitArray);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FixedBitArray and conformance FixedBitArray;
  if (!lazy protocol witness table cache variable for type FixedBitArray and conformance FixedBitArray)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FixedBitArray and conformance FixedBitArray);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FixedBitArray and conformance FixedBitArray;
  if (!lazy protocol witness table cache variable for type FixedBitArray and conformance FixedBitArray)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FixedBitArray and conformance FixedBitArray);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FixedBitArray and conformance FixedBitArray;
  if (!lazy protocol witness table cache variable for type FixedBitArray and conformance FixedBitArray)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FixedBitArray and conformance FixedBitArray);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : MutableCollection in FixedBitArray()
{
  return lazy protocol witness table accessor for type Slice<FixedBitArray> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<FixedBitArray> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type FixedBitArray and conformance FixedBitArray);
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in FixedBitArray()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in FixedBitArray()
{
  return lazy protocol witness table accessor for type Slice<FixedBitArray> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<FixedBitArray> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type FixedBitArray and conformance FixedBitArray);
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in FixedBitArray()
{
  return MEMORY[0x1E4FBB568];
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in FixedBitArray()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in FixedBitArray()
{
  return lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Slice<FixedBitArray> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<FixedBitArray>);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in FixedBitArray()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in FixedBitArray()
{
  return lazy protocol witness table accessor for type Slice<FixedBitArray> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<FixedBitArray> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type FixedBitArray and conformance FixedBitArray);
}

uint64_t lazy protocol witness table accessor for type Slice<FixedBitArray> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<FixedBitArray>);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in FixedBitArray()
{
  return lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type IndexingIterator<FixedBitArray> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<FixedBitArray>);
}

uint64_t sub_1B0E89A20(char *a1, uint64_t a2, uint64_t *a3)
{
  return FixedBitArray.subscript.setter(*a1, *a3);
}

uint64_t sub_1B0E89A4C()
{
  return 0;
}

ValueMetadata *type metadata accessor for FixedBitArray()
{
  return &type metadata for FixedBitArray;
}

uint64_t destroy for SeqNumReceivedBuffer()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for SeqNumReceivedBuffer(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SeqNumReceivedBuffer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for SeqNumReceivedBuffer(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for SeqNumReceivedBuffer()
{
  return &type metadata for SeqNumReceivedBuffer;
}

void *specialized _ArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

void specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x1B3EA25D0);
}

uint64_t specialized MutableCollection<>._partitionImpl(by:)(uint64_t result)
{
  uint64_t v3 = *v1;
  unint64_t v4 = *(void *)(*v1 + 24);
  if (v4 >> 62)
  {
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if ((2 * v4 - 0x1000000000000000) >> 61 != 7) {
    goto LABEL_48;
  }
  int64_t v5 = (16 * v4) & 0xFFFFFFFFFFFFFFE0;
  if (v5 < 1) {
    return 0;
  }
  uint64_t v6 = (uint64_t (*)(char *))result;
  uint64_t v7 = 0;
  while (1)
  {
    unint64_t v8 = *(void *)(v3 + 24);
    if (v8 >> 62)
    {
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    if ((2 * v8 - 0x1000000000000000) >> 61 != 7) {
      goto LABEL_44;
    }
    if (v7 >= (uint64_t)(32 * (v8 >> 1))) {
      goto LABEL_45;
    }
    if ((unint64_t)v7 >> 5 >= *(void *)(v3 + 16)) {
      goto LABEL_46;
    }
    char v15 = (*(_DWORD *)(v3 + 32 + 4 * ((unint64_t)v7 >> 5)) >> v7) & 1;
    uint64_t result = v6(&v15);
    if (v2) {
      return v7;
    }
    if (result) {
      break;
    }
    unint64_t v10 = *(void *)(v3 + 24);
    if (v10 >> 62) {
      goto LABEL_52;
    }
    if ((2 * v10 - 0x1000000000000000) >> 61 != 7) {
      goto LABEL_53;
    }
    if (v7 >= (uint64_t)(32 * (v10 >> 1))) {
      goto LABEL_54;
    }
LABEL_33:
    if (++v7 >= v5) {
      return v7;
    }
  }
  unint64_t v9 = *(void *)(v3 + 24);
  if (v9 >> 62) {
    goto LABEL_49;
  }
  if ((2 * v9 - 0x1000000000000000) >> 61 != 7) {
    goto LABEL_50;
  }
  if (v5 >= 1 && v5 <= (uint64_t)((16 * v9) & 0xFFFFFFFFFFFFFFE0))
  {
    while (v7 < --v5)
    {
      if ((2 * v9 - 0x1000000000000000) >> 61 != 7)
      {
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
      if (v5 >= (uint64_t)(32 * (v9 >> 1))) {
        goto LABEL_38;
      }
      if ((unint64_t)v5 >> 5 >= *(void *)(v3 + 16)) {
        goto LABEL_39;
      }
      char v14 = (*(_DWORD *)(v3 + 32 + 4 * ((unint64_t)v5 >> 5)) >> v5) & 1;
      uint64_t result = v6(&v14);
      if ((result & 1) == 0)
      {
        char v11 = FixedBitArray.subscript.getter(v7, v3);
        char v12 = FixedBitArray.subscript.getter(v5, v3);
        FixedBitArray.subscript.setter(v12 & 1, v7);
        uint64_t result = FixedBitArray.subscript.setter(v11 & 1, v5);
        uint64_t v3 = *v1;
        unint64_t v13 = *(void *)(*v1 + 24);
        if (v13 >> 62) {
          goto LABEL_55;
        }
        if ((2 * v13 - 0x1000000000000000) >> 61 != 7) {
          goto LABEL_56;
        }
        if (v7 >= (uint64_t)(32 * (v13 >> 1))) {
          goto LABEL_57;
        }
        goto LABEL_33;
      }
      unint64_t v9 = *(void *)(v3 + 24);
      if (v9 >> 62) {
        goto LABEL_40;
      }
      if ((2 * v9 - 0x1000000000000000) >> 61 != 7) {
        goto LABEL_41;
      }
      if (!v5 || v5 > (uint64_t)((16 * v9) & 0xFFFFFFFFFFFFFFE0)) {
        goto LABEL_42;
      }
    }
    return v7;
  }
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
  return result;
}

uint64_t _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFyt_s5Error_pTg5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = v3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v7 - 8);
  unint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v10 = type metadata accessor for TaskPriority();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of UUID?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v12 = 0;
  uint64_t v14 = 0;
LABEL_6:
  uint64_t v15 = *v4;
  uint64_t v16 = (void *)(v14 | v12);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    uint64_t v16 = v19;
    v19[2] = v12;
    uint64_t v19[3] = v14;
  }
  v18[1] = 1;
  long long v18[2] = v16;
  v18[3] = v15;
  swift_task_create();
  return swift_release();
}

uint64_t _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFSay10Foundation4UUIDVG_s5Error_pTg5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = v3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v7 - 8);
  unint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v10 = type metadata accessor for TaskPriority();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of UUID?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v12 = 0;
  uint64_t v14 = 0;
LABEL_6:
  uint64_t v15 = *v4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UUID]);
  uint64_t v16 = (void *)(v14 | v12);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    uint64_t v16 = v19;
    v19[2] = v12;
    uint64_t v19[3] = v14;
  }
  v18[1] = 1;
  long long v18[2] = v16;
  v18[3] = v15;
  swift_task_create();
  return swift_release();
}

uint64_t ApplicationLauncher.behaviors.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ApplicationLauncher.featureFlags.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ApplicationLauncher.pegasusLaunchBehavior.getter()
{
  return swift_retain();
}

uint64_t ApplicationLauncher.placementSceneIdentifier.getter()
{
  unint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR___CPApplicationLauncherSwift_placementSceneIdentifier);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t ApplicationLauncher.placementSceneIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<String>.Continuation.YieldResult);
  uint64_t v23 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<String>.Continuation?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<String>.Continuation);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (void *)((char *)v2 + OBJC_IVAR___CPApplicationLauncherSwift_placementSceneIdentifier);
  swift_beginAccess();
  *uint64_t v15 = a1;
  v15[1] = a2;
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v17 = v15[1];
  if (v17)
  {
    uint64_t v22 = v5;
    uint64_t v18 = *v15;
    unsigned int v19 = *(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x90);
    uint64_t v20 = swift_bridgeObjectRetain();
    v19(v20);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    {
      swift_bridgeObjectRelease();
      return outlined destroy of UUID?((uint64_t)v10, &demangling cache variable for type metadata for AsyncStream<String>.Continuation?);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
      uint64_t v24 = v18;
      uint64_t v25 = v17;
      AsyncStream.Continuation.yield(_:)();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v22);
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    }
  }
  return result;
}

void (*ApplicationLauncher.placementSceneIdentifier.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x70uLL);
  *a1 = v3;
  void v3[5] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<String>.Continuation.YieldResult);
  v3[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[7] = v5;
  v3[8] = malloc(*(void *)(v5 + 64));
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<String>.Continuation?);
  v3[9] = malloc(*(void *)(*(void *)(v6 - 8) + 64));
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<String>.Continuation);
  v3[10] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[11] = v8;
  uint64_t v9 = malloc(*(void *)(v8 + 64));
  uint64_t v10 = OBJC_IVAR___CPApplicationLauncherSwift_placementSceneIdentifier;
  v3[12] = v9;
  v3[13] = v10;
  swift_beginAccess();
  return ApplicationLauncher.placementSceneIdentifier.modify;
}

void ApplicationLauncher.placementSceneIdentifier.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    uint64_t v4 = *(void **)(v3 + 40);
    uint64_t v5 = (void *)((char *)v4 + *(void *)(v3 + 104));
    uint64_t v6 = v5[1];
    if (v6)
    {
      uint64_t v7 = *v5;
      uint64_t v8 = *(void *)(v3 + 80);
      uint64_t v9 = *(void *)(v3 + 88);
      uint64_t v10 = *(void *)(v3 + 72);
      uint64_t v11 = *(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x90);
      uint64_t v12 = swift_bridgeObjectRetain();
      v11(v12);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v10, 1, v8) == 1)
      {
        uint64_t v13 = *(void *)(v3 + 72);
        swift_bridgeObjectRelease();
        outlined destroy of UUID?(v13, &demangling cache variable for type metadata for AsyncStream<String>.Continuation?);
      }
      else
      {
        uint64_t v15 = *(void *)(v3 + 88);
        uint64_t v14 = *(void *)(v3 + 96);
        uint64_t v16 = *(void *)(v3 + 80);
        uint64_t v18 = *(void *)(v3 + 56);
        uint64_t v17 = *(void *)(v3 + 64);
        uint64_t v19 = *(void *)(v3 + 48);
        (*(void (**)(uint64_t, void, uint64_t))(v15 + 32))(v14, *(void *)(v3 + 72), v16);
        *(void *)(v3 + 24) = v7;
        *(void *)(v3 + 32) = v6;
        AsyncStream.Continuation.yield(_:)();
        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
        (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
      }
    }
  }
  uint64_t v21 = *(void **)(v3 + 64);
  uint64_t v20 = *(void **)(v3 + 72);
  free(*(void **)(v3 + 96));
  free(v20);
  free(v21);
  free((void *)v3);
}

uint64_t key path setter for ApplicationLauncher.placementSceneIdentifierContinuation : ApplicationLauncher(uint64_t a1, void **a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<String>.Continuation?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v6, &demangling cache variable for type metadata for AsyncStream<String>.Continuation?);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x98))(v6);
}

uint64_t ApplicationLauncher.placementSceneIdentifierContinuation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR___CPApplicationLauncherSwift_placementSceneIdentifierContinuation;
  swift_beginAccess();
  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3, a1, &demangling cache variable for type metadata for AsyncStream<String>.Continuation?);
}

uint64_t ApplicationLauncher.placementSceneIdentifierContinuation.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR___CPApplicationLauncherSwift_placementSceneIdentifierContinuation;
  swift_beginAccess();
  outlined assign with take of AsyncStream<String>.Continuation?(a1, v3);
  return swift_endAccess();
}

uint64_t outlined assign with take of AsyncStream<String>.Continuation?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<String>.Continuation?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*ApplicationLauncher.placementSceneIdentifierContinuation.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

id ApplicationLauncher.__allocating_init(behaviors:featureFlags:)(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return ApplicationLauncher.init(behaviors:featureFlags:)(a1, a2);
}

id ApplicationLauncher.init(behaviors:featureFlags:)(uint64_t a1, uint64_t a2)
{
  id v5 = &v2[OBJC_IVAR___CPApplicationLauncherSwift_placementSceneIdentifier];
  *(void *)id v5 = 0;
  *((void *)v5 + 1) = 0;
  uint64_t v6 = &v2[OBJC_IVAR___CPApplicationLauncherSwift_placementSceneIdentifierContinuation];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<String>.Continuation);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(void *)&v2[OBJC_IVAR___CPApplicationLauncherSwift_behaviors] = a1;
  *(void *)&v2[OBJC_IVAR___CPApplicationLauncherSwift_featureFlags] = a2;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    uint64_t v9 = a1 + 32;
    type metadata accessor for PegasusApplicationLaunchBehavior();
    while (1)
    {
      uint64_t v10 = swift_dynamicCastClass();
      if (v10) {
        break;
      }
      v9 += 16;
      if (!--v8) {
        goto LABEL_5;
      }
    }
    uint64_t v11 = v10;
    swift_unknownObjectRetain();
  }
  else
  {
LABEL_5:
    uint64_t v11 = 0;
  }
  *(void *)&v2[OBJC_IVAR___CPApplicationLauncherSwift_pegasusLaunchBehavior] = v11;
  v13.receiver = v2;
  v13.super_class = (Class)type metadata accessor for ApplicationLauncher();
  return objc_msgSendSuper2(&v13, sel_init);
}

uint64_t type metadata accessor for ApplicationLauncher()
{
  uint64_t result = type metadata singleton initialization cache for ApplicationLauncher;
  if (!type metadata singleton initialization cache for ApplicationLauncher) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id ApplicationLauncher.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

uint64_t ApplicationLauncher.init()()
{
  type metadata accessor for PegasusApplicationLaunchBehavior();
  uint64_t v1 = swift_allocObject();
  type metadata accessor for PegasusApplicationLaunchBehavior.AuthorizationManager();
  uint64_t v2 = swift_allocObject();
  id v3 = v0;
  swift_retain();
  swift_defaultActor_initialize();
  uint64_t v4 = MEMORY[0x1E4FBC868];
  *(void *)(v2 + 112) = MEMORY[0x1E4FBC868];
  *(void *)(v1 + 24) = v2;
  swift_release();
  type metadata accessor for BackgroundApplicationLaunchBehavior.AssertionStore();
  uint64_t v5 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v5 + 112) = v4;
  *(void *)(v1 + 16) = v5;
  uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
  unint64_t v8 = v6[2];
  unint64_t v7 = v6[3];
  if (v8 >= v7 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v6);
  }
  v6[2] = v8 + 1;
  uint64_t v9 = &v6[2 * v8];
  _OWORD v9[4] = v1;
  void v9[5] = &protocol witness table for BackgroundApplicationLaunchBehavior;
  type metadata accessor for BackgroundApplicationLaunchBehavior();
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v11 + 112) = v4;
  *(void *)(v10 + 16) = v11;
  unint64_t v13 = v6[2];
  unint64_t v12 = v6[3];
  unint64_t v14 = v13 + 1;
  if (v13 >= v12 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v6);
  }
  v6[2] = v14;
  uint64_t v15 = &v6[2 * v13];
  v15[4] = v10;
  void v15[5] = &protocol witness table for BackgroundApplicationLaunchBehavior;
  type metadata accessor for ForegroundApplicationLaunchBehavior();
  uint64_t v16 = swift_allocObject();
  unint64_t v17 = v6[3];
  if (v14 >= v17 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v13 + 2, 1, v6);
  }
  v6[2] = v13 + 2;
  uint64_t v18 = &v6[2 * v14];
  void v18[4] = v16;
  v18[5] = &protocol witness table for ForegroundApplicationLaunchBehavior;
  uint64_t ObjectType = swift_getObjectType();

  uint64_t v20 = (*(uint64_t (**)(void *, id))(ObjectType + 168))(v6, objc_msgSend(objc_allocWithZone((Class)CPFeatureFlags), sel_init));
  swift_deallocPartialClassInstance();
  return v20;
}

uint64_t ApplicationLauncher.launchApplication(for:options:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  unint64_t v13 = (void *)swift_allocObject();
  void v13[2] = 0;
  void v13[3] = 0;
  v13[4] = v4;
  v13[5] = a1;
  v13[6] = a2;
  v13[7] = a3;
  v13[8] = a4;
  id v14 = v4;
  swift_unknownObjectRetain();
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(a3);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v11, (uint64_t)&async function pointer to partial apply for closure #1 in ApplicationLauncher.launchApplication(for:options:completion:), (uint64_t)v13);
  return swift_release();
}

uint64_t closure #1 in ApplicationLauncher.launchApplication(for:options:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[2] = a7;
  v8[3] = a8;
  uint64_t v12 = (void *)swift_task_alloc();
  v8[4] = v12;
  void *v12 = v8;
  uint64_t v12[3] = a6;
  v12[4] = a4;
  v12[1] = closure #1 in ApplicationLauncher.launchApplication(for:options:completion:);
  void v12[2] = a5;
  v12[5] = swift_getObjectType();
  return MEMORY[0x1F4188298](ApplicationLauncher.launchApplication(for:options:), 0, 0);
}

uint64_t closure #1 in ApplicationLauncher.launchApplication(for:options:completion:)()
{
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in ApplicationLauncher.launchApplication(for:options:completion:);
  }
  else {
    uint64_t v2 = closure #1 in ApplicationLauncher.launchApplication(for:options:completion:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  void (*v1)(uint64_t, void);
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void (**)(uint64_t, void))(v0 + 16);
  if (v1) {
    v1(1, 0);
  }
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  void *v0;
  void (*v1)(void, void *);
  void *v2;
  id v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = (void (*)(void, void *))v0[2];
  uint64_t v2 = (void *)v0[5];
  if (v1)
  {
    id v3 = v2;
    v1(0, v2);
  }
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t ApplicationLauncher.launchApplication(for:options:)(uint64_t a1, uint64_t a2)
{
  void v3[3] = a2;
  v3[4] = v2;
  _OWORD v3[2] = a1;
  void v3[5] = swift_getObjectType();
  return MEMORY[0x1F4188298](ApplicationLauncher.launchApplication(for:options:), 0, 0);
}

uint64_t ApplicationLauncher.launchApplication(for:options:)()
{
  uint64_t v1 = *(void *)(v0[4] + OBJC_IVAR___CPApplicationLauncherSwift_behaviors);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain_n();
    id v3 = (uint64_t *)(v1 + 40);
    while (1)
    {
      uint64_t v5 = v0[2];
      uint64_t v4 = v0[3];
      uint64_t v6 = *(v3 - 1);
      v0[6] = v6;
      uint64_t v7 = *v3;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 8);
      swift_unknownObjectRetain();
      if (v9(v5, v4, ObjectType, v7)) {
        break;
      }
      swift_unknownObjectRelease();
      v3 += 2;
      if (!--v2)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_6;
      }
    }
    uint64_t v18 = v0[2];
    uint64_t v17 = v0[3];
    long long v21 = *((_OWORD *)v0 + 2);
    swift_bridgeObjectRelease_n();
    uint64_t v19 = swift_task_alloc();
    v0[7] = v19;
    *(void *)(v19 + 16) = v6;
    *(void *)(v19 + 24) = v7;
    *(void *)(v19 + 32) = v18;
    *(void *)(v19 + 40) = v17;
    *(_OWORD *)(v19 + 48) = v21;
    uint64_t v20 = (void *)swift_task_alloc();
    v0[8] = v20;
    *uint64_t v20 = v0;
    v20[1] = ApplicationLauncher.launchApplication(for:options:);
    return MEMORY[0x1F4188080](v20);
  }
  else
  {
LABEL_6:
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Log.default);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      unint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v13 = 0;
      _os_log_impl(&dword_1B0DF7000, v11, v12, "Unable to launch application due to missing launch behavior", v13, 2u);
      MEMORY[0x1B3EA39E0](v13, -1, -1);
    }

    lazy protocol witness table accessor for type ApplicationLauncher.LaunchError and conformance ApplicationLauncher.LaunchError();
    swift_allocError();
    *uint64_t v14 = 0;
    swift_willThrow();
    uint64_t v15 = (uint64_t (*)(void))v0[1];
    return v15();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = ApplicationLauncher.launchApplication(for:options:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = ApplicationLauncher.launchApplication(for:options:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_unknownObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_unknownObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #2 in ApplicationLauncher.launchApplication(for:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[7] = a7;
  v8[8] = a8;
  v8[5] = a5;
  void v8[6] = a6;
  v8[3] = a3;
  v8[4] = a4;
  v8[2] = a2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v8[9] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #2 in ApplicationLauncher.launchApplication(for:options:), 0, 0);
}

uint64_t closure #2 in ApplicationLauncher.launchApplication(for:options:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0[9];
  uint64_t v16 = v0[8];
  uint64_t v17 = v0 + 12;
  id v3 = (void *)v0[7];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v15 = v0[6];
  uint64_t v6 = v0[3];
  uint64_t v7 = type metadata accessor for TaskPriority();
  unint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  v8(v2, 1, 1, v7);
  uint64_t v9 = (void *)swift_allocObject();
  _OWORD v9[2] = 0;
  v9[3] = 0;
  _OWORD v9[4] = v6;
  void v9[5] = v4;
  v9[6] = v5;
  v9[7] = v15;
  v9[8] = v3;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  id v10 = v3;
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFyt_s5Error_pTg5(v2, (uint64_t)&async function pointer to partial apply for closure #1 in closure #2 in ApplicationLauncher.launchApplication(for:options:), (uint64_t)v9);
  outlined destroy of UUID?(v2, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v8(v2, 1, 1, v7);
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = v5;
  v11[5] = v6;
  v11[6] = v4;
  v11[7] = v16;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFyt_s5Error_pTg5(v2, (uint64_t)&async function pointer to partial apply for closure #2 in closure #2 in ApplicationLauncher.launchApplication(for:options:), (uint64_t)v11);
  outlined destroy of UUID?(v2, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  os_log_type_t v12 = (void *)swift_task_alloc();
  v1[10] = v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ThrowingTaskGroup<(), Error>);
  void *v12 = v1;
  v12[1] = closure #2 in ApplicationLauncher.launchApplication(for:options:);
  return MEMORY[0x1F4187E30](v17, 0, 0, v13);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #2 in ApplicationLauncher.launchApplication(for:options:);
  }
  else {
    uint64_t v2 = closure #2 in ApplicationLauncher.launchApplication(for:options:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = **(void **)(v0 + 16);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  MEMORY[0x1B3EA1F80](v1, MEMORY[0x1E4FBC848] + 8, v2, MEMORY[0x1E4FBC0F0]);
  swift_task_dealloc();
  id v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in closure #2 in ApplicationLauncher.launchApplication(for:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[10] = a7;
  v8[11] = a8;
  v8[8] = a5;
  v8[9] = a6;
  v8[7] = a4;
  return MEMORY[0x1F4188298](closure #1 in closure #2 in ApplicationLauncher.launchApplication(for:options:), 0, 0);
}

uint64_t closure #1 in closure #2 in ApplicationLauncher.launchApplication(for:options:)()
{
  uint64_t v1 = (void *)v0[11];
  uint64_t v10 = v0[8];
  uint64_t ObjectType = swift_getObjectType();
  v0[5] = type metadata accessor for ApplicationLauncher();
  v0[6] = &protocol witness table for ApplicationLauncher;
  v0[2] = v1;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t, uint64_t))(*(void *)(v10 + 16)
                                                                            + **(int **)(v10 + 16));
  id v3 = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in closure #2 in ApplicationLauncher.launchApplication(for:options:);
  uint64_t v6 = v0[9];
  uint64_t v5 = v0[10];
  uint64_t v7 = v0[8];
  return v9(v6, v5, v0 + 2, ObjectType, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](closure #1 in closure #2 in ApplicationLauncher.launchApplication(for:options:), 0, 0);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v2 + 16);
    id v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #2 in closure #2 in ApplicationLauncher.launchApplication(for:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = a5;
  v6[9] = a6;
  v6[7] = a4;
  return MEMORY[0x1F4188298](closure #2 in closure #2 in ApplicationLauncher.launchApplication(for:options:), 0, 0);
}

uint64_t closure #2 in closure #2 in ApplicationLauncher.launchApplication(for:options:)()
{
  uint64_t v1 = swift_beginAccess();
  if (is_mul_ok(static ApplicationLauncher._applicationLaunchTimeout, 0x3B9ACA00uLL))
  {
    uint64_t v2 = 1000000000 * static ApplicationLauncher._applicationLaunchTimeout;
    id v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 80) = v3;
    void *v3 = v0;
    v3[1] = closure #2 in closure #2 in ApplicationLauncher.launchApplication(for:options:);
    uint64_t v1 = v2;
  }
  else
  {
    __break(1u);
  }
  return MEMORY[0x1F4187DE0](v1);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return MEMORY[0x1F4188298](closure #2 in closure #2 in ApplicationLauncher.launchApplication(for:options:), 0, 0);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  unsigned char *v13;
  uint64_t (*v14)(void);
  uint64_t v16;
  void *v17;
  uint64_t v18;

  uint64_t v17 = v0;
  uint64_t v1 = v0[11];
  static Task<>.checkCancellation()();
  if (v1) {
    goto LABEL_9;
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.default);
  swift_unknownObjectRetain_n();
  id v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.error.getter();
  uint64_t v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = v0[7];
  if (v5)
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    unint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v16 = v8;
    v0[5] = v6;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CPLaunchableActivitySession);
    uint64_t v9 = String.init<A>(reflecting:)();
    v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v3, v4, "Timed out launching app for activity session %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v8, -1, -1);
    MEMORY[0x1B3EA39E0](v7, -1, -1);
  }
  else
  {

    swift_unknownObjectRelease_n();
  }
  uint64_t v11 = v0[9];
  uint64_t ObjectType = swift_getObjectType();
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v11 + 32))(ObjectType, v11))
  {
    lazy protocol witness table accessor for type ApplicationLauncher.LaunchError and conformance ApplicationLauncher.LaunchError();
    swift_allocError();
    *uint64_t v13 = 4;
    swift_willThrow();
LABEL_9:
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    goto LABEL_10;
  }
  uint64_t v14 = (uint64_t (*)(void))v0[1];
LABEL_10:
  return v14();
}

uint64_t static ApplicationLauncher.applicationLaunchTimeout.getter()
{
  return static ApplicationLauncher._applicationLaunchTimeout;
}

Swift::Void __swiftcall ApplicationLauncher.revokeBackgroundAuthorization(for:)(Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  unint64_t v8 = (void *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v1;
  v8[5] = countAndFlagsBits;
  void v8[6] = object;
  id v9 = v1;
  swift_bridgeObjectRetain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #1 in ApplicationLauncher.revokeBackgroundAuthorization(for:), (uint64_t)v8);
  swift_release();
}

uint64_t closure #1 in ApplicationLauncher.revokeBackgroundAuthorization(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  _OWORD v6[4] = a6;
  v6[2] = a4;
  return MEMORY[0x1F4188298](closure #1 in ApplicationLauncher.revokeBackgroundAuthorization(for:), 0, 0);
}

uint64_t closure #1 in ApplicationLauncher.revokeBackgroundAuthorization(for:)()
{
  uint64_t v1 = *(void **)(v0[2] + OBJC_IVAR___CPApplicationLauncherSwift_behaviors);
  v0[5] = v1;
  uint64_t v2 = v1[2];
  v0[6] = v2;
  if (v2)
  {
    v0[7] = 0;
    v0[8] = v1[4];
    uint64_t v3 = v1[5];
    swift_bridgeObjectRetain();
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 24) + **(int **)(v3 + 24));
    swift_unknownObjectRetain();
    uint64_t v5 = (void *)swift_task_alloc();
    v0[9] = v5;
    void *v5 = v0;
    v5[1] = closure #1 in ApplicationLauncher.revokeBackgroundAuthorization(for:);
    uint64_t v7 = v0[3];
    uint64_t v6 = v0[4];
    return v10(v7, v6, ObjectType, v3);
  }
  else
  {
    id v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in ApplicationLauncher.revokeBackgroundAuthorization(for:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  uint64_t v1 = v0[7];
  uint64_t v2 = v0[6];
  swift_unknownObjectRelease();
  if (v1 + 1 == v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
  else
  {
    uint64_t v5 = v0[7] + 1;
    v0[7] = v5;
    uint64_t v6 = v0[5] + 16 * v5;
    v0[8] = *(void *)(v6 + 32);
    uint64_t v7 = *(void *)(v6 + 40);
    uint64_t ObjectType = swift_getObjectType();
    os_log_type_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 24) + **(int **)(v7 + 24));
    swift_unknownObjectRetain();
    id v9 = (void *)swift_task_alloc();
    v0[9] = v9;
    *id v9 = v0;
    v9[1] = closure #1 in ApplicationLauncher.revokeBackgroundAuthorization(for:);
    uint64_t v11 = v0[3];
    uint64_t v10 = v0[4];
    return v12(v11, v10, ObjectType, v7);
  }
}

void ApplicationLauncher.revokeBackgroundAuthorization(for:)(void *a1)
{
  id v2 = objc_msgSend(a1, sel_activity);
  id v3 = objc_msgSend(v2, sel_bundleIdentifier);

  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;

    (*(void (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xC0))(v4, v6);
    swift_bridgeObjectRelease();
  }
}

uint64_t ApplicationLauncher.authorizePiP(for:completion:)(uint64_t a1, uint64_t (*a2)(void, void), uint64_t a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v7 - 8);
  id v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v3 + OBJC_IVAR___CPApplicationLauncherSwift_pegasusLaunchBehavior);
  if (!v10) {
    return a2(0, 0);
  }
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v9, 1, 1, v11);
  os_log_type_t v12 = (void *)swift_allocObject();
  void v12[2] = 0;
  uint64_t v12[3] = 0;
  v12[4] = v10;
  v12[5] = a1;
  v12[6] = a2;
  v12[7] = a3;
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in ApplicationLauncher.authorizePiP(for:completion:), (uint64_t)v12);
  return swift_release();
}

uint64_t closure #1 in ApplicationLauncher.authorizePiP(for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _OWORD v7[2] = a6;
  v7[3] = a7;
  uint64_t v11 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)a4 + 216) + **(int **)(*(void *)a4 + 216));
  id v9 = (void *)swift_task_alloc();
  _OWORD v7[4] = v9;
  *id v9 = v7;
  v9[1] = closure #1 in ApplicationLauncher.authorizePiP(for:completion:);
  return v11(a5);
}

uint64_t closure #1 in ApplicationLauncher.authorizePiP(for:completion:)()
{
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = closure #1 in ApplicationLauncher.authorizePiP(for:completion:);
  }
  else {
    id v2 = closure #1 in ApplicationLauncher.authorizePiP(for:completion:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(uint64_t, void))(v0 + 16))(1, 0);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  void *v1;
  void (*v2)(void, void *);
  id v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = (void *)v0[5];
  id v2 = (void (*)(void, void *))v0[2];
  uint64_t v3 = v1;
  v2(0, v1);

  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

BOOL static ApplicationLauncher.LaunchError.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void ApplicationLauncher.LaunchError.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int ApplicationLauncher.LaunchError.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t ApplicationLauncher.openApplicationOptions(for:options:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 120) = a2;
  return MEMORY[0x1F4188298](ApplicationLauncher.openApplicationOptions(for:options:), 0, 0);
}

void ApplicationLauncher.openApplicationOptions(for:options:)()
{
  uint64_t v13 = v0;
  if (*(unsigned char *)(v0 + 120))
  {
    *(void *)(v0 + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v0 + 64) = v6;
    AnyHashable.init<A>(_:)();
    *(void *)(v0 + 80) = MEMORY[0x1E4FBB390];
    *(unsigned char *)(v0 + 56) = 1;
    outlined init with take of Any((_OWORD *)(v0 + 56), (_OWORD *)(v0 + 88));
    uint64_t v7 = MEMORY[0x1E4FBC868];
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = v7;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((_OWORD *)(v0 + 88), v0 + 16, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable(v0 + 16);
  }
  else
  {
    id v1 = (id)TUUnlockDeviceWithPromptFrontBoardOptionsDictionary();
    uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v3 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v2);
    swift_bridgeObjectRelease();
    uint64_t v4 = MEMORY[0x1E4FBC868];
    char v5 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = v4;
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v3, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v5, &v12);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v10 = objc_msgSend(self, sel_optionsWithDictionary_, isa);

  if (v10)
  {
    swift_bridgeObjectRelease();
    uint64_t v11 = *(void (**)(id))(v0 + 8);
    v11(v10);
  }
  else
  {
    __break(1u);
  }
}

void static ApplicationLauncher.applicationLaunchTimeout.setter(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v2 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v3 = NSClassFromString(v2);

  if (v3
    || (uint64_t v4 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
        Class v5 = NSClassFromString(v4),
        v4,
        v5))
  {
    static ApplicationLauncher._applicationLaunchTimeout = a1;
    swift_endAccess();
  }
  else
  {
    __break(1u);
  }
}

void (*static ApplicationLauncher.applicationLaunchTimeout.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = static ApplicationLauncher._applicationLaunchTimeout;
  return static ApplicationLauncher.applicationLaunchTimeout.modify;
}

void static ApplicationLauncher.applicationLaunchTimeout.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v5 = (NSString *)NSClassFromString(v4);

  if (a2)
  {
    if (v5) {
      goto LABEL_7;
    }
    Class v5 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL);
    Class v6 = NSClassFromString(v5);

    if (v6) {
      goto LABEL_7;
    }
    __break(1u);
  }
  if (!v5)
  {
    uint64_t v7 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL);
    Class v8 = NSClassFromString(v7);

    if (!v8)
    {
      __break(1u);
      return;
    }
  }
LABEL_7:
  static ApplicationLauncher._applicationLaunchTimeout = v3;
  swift_endAccess();
}

id ApplicationLauncher.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ApplicationLauncher();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ApplicationLauncher.launchApp(for:options:)(uint64_t a1, uint64_t a2)
{
  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  return MEMORY[0x1F4188298](ApplicationLauncher.launchApp(for:options:), 0, 0);
}

uint64_t ApplicationLauncher.launchApp(for:options:)()
{
  id v1 = objc_msgSend(*(id *)(v0 + 128), sel_activity);
  id v2 = objc_msgSend(v1, sel_representativeBundleIdentifier);
  *(void *)(v0 + 152) = v2;

  if (v2)
  {
    id v9 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 144)) + 0xD8)
                                                  + **(int **)((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 144)) + 0xD8));
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 160) = v3;
    void *v3 = v0;
    v3[1] = ApplicationLauncher.launchApp(for:options:);
    uint64_t v4 = *(void *)(v0 + 136);
    uint64_t v5 = *(void *)(v0 + 128);
    return v9(v5, v4);
  }
  else
  {
    lazy protocol witness table accessor for type ApplicationLauncher.LaunchError and conformance ApplicationLauncher.LaunchError();
    swift_allocError();
    unsigned char *v7 = 3;
    swift_willThrow();
    Class v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
}

{
  uint64_t v0;
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  id v1 = objc_msgSend(self, sel_serviceWithDefaultShellEndpoint);
  *(void *)(v0 + 176) = v1;
  if (v1)
  {
    id v2 = v1;
    uint64_t v3 = *(void **)(v0 + 168);
    uint64_t v4 = *(void *)(v0 + 152);
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 56) = v0 + 120;
    *(void *)(v0 + 24) = ApplicationLauncher.launchApp(for:options:);
    uint64_t v5 = swift_continuation_init();
    *(void *)(v0 + 80) = MEMORY[0x1E4F143A8];
    *(void *)(v0 + 88) = 0x40000000;
    *(void *)(v0 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned BSProcessHandle?, @unowned NSError?) -> () with result type BSProcessHandle;
    *(void *)(v0 + 104) = &block_descriptor_0;
    *(void *)(v0 + 112) = v5;
    objc_msgSend(v2, sel_openApplication_withOptions_completion_, v4, v3, v0 + 80);
    return MEMORY[0x1F41881E8](v0 + 16);
  }
  else
  {
    Class v6 = *(void **)(v0 + 168);

    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  id v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 184) = v1;
  if (v1) {
    id v2 = ApplicationLauncher.launchApp(for:options:);
  }
  else {
    id v2 = ApplicationLauncher.launchApp(for:options:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  id v1 = *(void **)(v0 + 168);
  id v2 = *(void **)(v0 + 176);
  uint64_t v3 = *(void **)(v0 + 152);

  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  id v1 = (void *)v0[22];
  id v2 = (void *)v0[21];
  uint64_t v3 = (void *)v0[19];
  swift_willThrow();

  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t ApplicationLauncher.launchApp(for:options:)(uint64_t a1)
{
  *(void *)(*(void *)v1 + 168) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](ApplicationLauncher.launchApp(for:options:), 0, 0);
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned BSProcessHandle?, @unowned NSError?) -> () with result type BSProcessHandle(uint64_t result, void *a2, void *a3)
{
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    swift_allocError();
    *uint64_t v4 = a3;
    id v5 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else if (a2)
  {
    **(void **)(*(void *)(*(void *)(result + 32) + 64) + 40) = a2;
    id v6 = a2;
    return swift_continuation_throwingResume();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for ApplicationLaunchProviding.launchApp(for:options:) in conformance ApplicationLauncher(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  v7[17] = a2;
  v7[18] = v6;
  v7[16] = a1;
  return MEMORY[0x1F4188298](ApplicationLauncher.launchApp(for:options:), 0, 0);
}

uint64_t partial apply for closure #1 in ApplicationLauncher.launchApplication(for:options:completion:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in ApplicationLauncher.launchApplication(for:options:completion:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t partial apply for closure #1 in ApplicationLauncher.revokeBackgroundAuthorization(for:)()
{
  long long v5 = *(_OWORD *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(void *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v5;
  return MEMORY[0x1F4188298](closure #1 in ApplicationLauncher.revokeBackgroundAuthorization(for:), 0, 0);
}

uint64_t partial apply for closure #1 in ApplicationLauncher.authorizePiP(for:completion:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in ApplicationLauncher.authorizePiP(for:completion:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1 + 40;
  uint64_t v3 = a2 + 40;
  outlined init with copy of AnyHashable(a1, a2);
  return outlined init with copy of Any(v2, v3);
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  uint64_t v39 = a1;
  uint64_t v40 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  uint64_t v41 = v8;
  uint64_t v42 = 0;
  uint64_t v43 = v11 & v9;
  uint64_t v44 = a2;
  uint64_t v45 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)&v35);
  if (!*((void *)&v36 + 1))
  {
LABEL_19:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [String : ()].Iterator._Variant();
    return swift_release();
  }
  while (1)
  {
    long long v32 = v35;
    long long v33 = v36;
    uint64_t v34 = v37;
    outlined init with take of Any(&v38, v31);
    uint64_t v13 = *a5;
    unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v32);
    uint64_t v16 = *(void *)(v13 + 16);
    BOOL v17 = (v14 & 1) == 0;
    uint64_t v18 = v16 + v17;
    if (__OFADD__(v16, v17)) {
      break;
    }
    char v19 = v14;
    if (*(void *)(v13 + 24) >= v18)
    {
      if (a4)
      {
        if (v14) {
          goto LABEL_6;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if (v19) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1);
      unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v32);
      if ((v19 & 1) != (v21 & 1)) {
        goto LABEL_22;
      }
      unint64_t v15 = v20;
      if (v19)
      {
LABEL_6:
        outlined init with copy of Any((uint64_t)v31, (uint64_t)v30);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v31);
        outlined destroy of AnyHashable((uint64_t)&v32);
        uint64_t v12 = (_OWORD *)(*(void *)(*a5 + 56) + 32 * v15);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
        outlined init with take of Any(v30, v12);
        goto LABEL_7;
      }
    }
    uint64_t v22 = (void *)*a5;
    *(void *)(*a5 + 8 * (v15 >> 6) + 64) |= 1 << v15;
    uint64_t v23 = v22[6] + 40 * v15;
    long long v24 = v32;
    long long v25 = v33;
    *(void *)(v23 + 32) = v34;
    *(_OWORD *)uint64_t v23 = v24;
    *(_OWORD *)(v23 + 16) = v25;
    outlined init with take of Any(v31, (_OWORD *)(v22[7] + 32 * v15));
    uint64_t v26 = v22[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27) {
      goto LABEL_21;
    }
    _OWORD v22[2] = v28;
LABEL_7:
    specialized LazyMapSequence.Iterator.next()((uint64_t)&v35);
    a4 = 1;
    if (!*((void *)&v36 + 1)) {
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type ApplicationLauncher.LaunchError and conformance ApplicationLauncher.LaunchError()
{
  unint64_t result = lazy protocol witness table cache variable for type ApplicationLauncher.LaunchError and conformance ApplicationLauncher.LaunchError;
  if (!lazy protocol witness table cache variable for type ApplicationLauncher.LaunchError and conformance ApplicationLauncher.LaunchError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ApplicationLauncher.LaunchError and conformance ApplicationLauncher.LaunchError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ApplicationLauncher.LaunchError and conformance ApplicationLauncher.LaunchError;
  if (!lazy protocol witness table cache variable for type ApplicationLauncher.LaunchError and conformance ApplicationLauncher.LaunchError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ApplicationLauncher.LaunchError and conformance ApplicationLauncher.LaunchError);
  }
  return result;
}

uint64_t sub_1B0E8EBA4@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x78))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B0E8EC00(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x80);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1B0E8EC78(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x90))();
}

uint64_t ObjC metadata update function for ApplicationLauncher()
{
  return type metadata accessor for ApplicationLauncher();
}

void type metadata completion function for ApplicationLauncher()
{
  type metadata accessor for AsyncStream<String>.Continuation?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for ApplicationLauncher(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ApplicationLauncher);
}

uint64_t dispatch thunk of ApplicationLauncher.placementSceneIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of ApplicationLauncher.placementSceneIdentifier.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of ApplicationLauncher.placementSceneIdentifier.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of ApplicationLauncher.placementSceneIdentifierContinuation.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of ApplicationLauncher.placementSceneIdentifierContinuation.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of ApplicationLauncher.placementSceneIdentifierContinuation.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of ApplicationLauncher.__allocating_init(behaviors:featureFlags:)()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of ApplicationLauncher.launchApplication(for:options:completion:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of ApplicationLauncher.revokeBackgroundAuthorization(for:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

{
  void *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of ApplicationLauncher.authorizePiP(for:completion:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of ApplicationLauncher.openApplicationOptions(for:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)((*MEMORY[0x1E4FBC8C8] & *v2) + 0xD8);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = dispatch thunk of ApplicationLauncher.openApplicationOptions(for:options:);
  return v9(a1, a2);
}

uint64_t dispatch thunk of ApplicationLauncher.openApplicationOptions(for:options:)(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

void type metadata accessor for AsyncStream<String>.Continuation?()
{
  if (!lazy cache variable for type metadata for AsyncStream<String>.Continuation?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for AsyncStream<String>.Continuation);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AsyncStream<String>.Continuation?);
    }
  }
}

uint64_t getEnumTagSinglePayload for ApplicationLauncher.LaunchError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ApplicationLauncher.LaunchError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B0E8F398);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ApplicationLauncher.LaunchError()
{
  return &type metadata for ApplicationLauncher.LaunchError;
}

uint64_t partial apply for closure #2 in ApplicationLauncher.launchApplication(for:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = v2[5];
  uint64_t v11 = v2[6];
  uint64_t v10 = v2[7];
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v12;
  void *v12 = v3;
  v12[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return closure #2 in ApplicationLauncher.launchApplication(for:options:)(a1, a2, v6, v7, v8, v9, v11, v10);
}

uint64_t sub_1B0E8F4AC()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t partial apply for closure #1 in closure #2 in ApplicationLauncher.launchApplication(for:options:)()
{
  long long v6 = *(_OWORD *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(void *)(v3 + 88) = v2;
  *(_OWORD *)(v3 + 72) = v6;
  *(_OWORD *)(v3 + 56) = v4;
  return MEMORY[0x1F4188298](closure #1 in closure #2 in ApplicationLauncher.launchApplication(for:options:), 0, 0);
}

uint64_t sub_1B0E8F5C8()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t partial apply for closure #2 in closure #2 in ApplicationLauncher.launchApplication(for:options:)()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(void *)(v3 + 72) = v2;
  *(_OWORD *)(v3 + 56) = v4;
  return MEMORY[0x1F4188298](closure #2 in closure #2 in ApplicationLauncher.launchApplication(for:options:), 0, 0);
}

uint64_t sub_1B0E8F6C4()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned ObjCBool, @unowned NSError?) -> ()(char a1, uint64_t a2)
{
  thunk for @escaping @callee_unowned @convention(block) (@unowned ObjCBool, @unowned NSError?) -> ()(a1, a2, *(void *)(v2 + 16));
}

uint64_t objectdestroy_7Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t objectdestroy_3Tm()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t objectdestroyTm_2()
{
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  if (*(void *)(v0 + 56)) {
    swift_release();
  }
  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t closure #1 in ApplicationLauncher.launchApplication(for:options:completion:)partial apply(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return closure #1 in ApplicationLauncher.launchApplication(for:options:completion:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t specialized XPCClient.withHost(body:errorHandler:)(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized XPCClient.withHost(body:errorHandler:)(a1, a2, a3, a4, specialized XPCClient.connection.getter, (uint64_t)&block_descriptor_79, &demangling cache variable for type metadata for ConversationManagerXPCHost);
}

uint64_t specialized XPCClient.withHost(body:errorHandler:)(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6, uint64_t *a7)
{
  uint64_t v12 = (void *)a5();
  aBlock[4] = a3;
  aBlock[5] = a4;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  aBlock[3] = a6;
  uint64_t v13 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  id v14 = objc_msgSend(v12, sel_remoteObjectProxyWithErrorHandler_, v13);
  _Block_release(v13);

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(a7);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    uint64_t v18 = v16;
    a1(&v18);
    return swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t BackgroundSessionManagerClient.delegate.getter()
{
  uint64_t v1 = v0 + direct field offset for BackgroundSessionManagerClient.delegate;
  swift_beginAccess();
  return MEMORY[0x1B3EA3B30](v1);
}

uint64_t BackgroundSessionManagerClient.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + direct field offset for BackgroundSessionManagerClient.delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*BackgroundSessionManagerClient.delegate.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = direct field offset for BackgroundSessionManagerClient.delegate;
  void v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1B3EA3B30](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  void v3[3] = v6;
  v3[4] = v7;
  return BackgroundSessionManagerClient.delegate.modify;
}

uint64_t BackgroundSessionManagerClient.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + direct field offset for BackgroundSessionManagerClient.id;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

id BackgroundSessionManagerClient.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

char *BackgroundSessionManagerClient.init()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v0[direct field offset for BackgroundSessionManagerClient.delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  UUID.init()();
  v6.receiver = v0;
  v6.super_class = ObjectType;
  uint64_t v2 = (char *)objc_msgSendSuper2(&v6, sel_init);
  uint64_t v3 = (uint64_t *)&v2[direct field offset for XPCClient.connectionClosure];
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t *v3 = (uint64_t)closure #1 in BackgroundSessionManagerClient.init();
  v3[1] = 0;
  _sxRi_zRi0_zlyytIseghHr_SgWOe(v4);
  return v2;
}

id closure #1 in BackgroundSessionManagerClient.init()()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F29268]);
  id v1 = (void *)MEMORY[0x1B3EA1B00](0xD000000000000027, 0x80000001B115A7B0);
  id v2 = objc_msgSend(v0, sel_initWithServiceName_, v1);

  return v2;
}

char *@objc BackgroundSessionManagerClient.init()(char *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&a1[direct field offset for BackgroundSessionManagerClient.delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  UUID.init()();
  v7.receiver = a1;
  v7.super_class = ObjectType;
  uint64_t v3 = (char *)objc_msgSendSuper2(&v7, sel_init);
  uint64_t v4 = (uint64_t *)&v3[direct field offset for XPCClient.connectionClosure];
  swift_beginAccess();
  uint64_t v5 = *v4;
  *uint64_t v4 = (uint64_t)closure #1 in BackgroundSessionManagerClient.init();
  v4[1] = 0;
  _sxRi_zRi0_zlyytIseghHr_SgWOe(v5);
  return v3;
}

Swift::Void __swiftcall BackgroundSessionManagerClient.handleServerDisconnect()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (uint64_t *)((char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  objc_super v6 = *(void **)(v1 + direct field offset for XPCClient.queue);
  void *v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FBCBF0], v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    if (one-time initialization token for client == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.client);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_1B0DF7000, v9, v10, "Server disconnected", v11, 2u);
    MEMORY[0x1B3EA39E0](v11, -1, -1);
  }

  uint64_t v12 = v1 + direct field offset for BackgroundSessionManagerClient.delegate;
  swift_beginAccess();
  if (MEMORY[0x1B3EA3B30](v12))
  {
    uint64_t v13 = *(void *)(v12 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v13 + 8))(v1, &protocol witness table for BackgroundSessionManagerClient, ObjectType, v13);
    swift_unknownObjectRelease();
  }
}

uint64_t BackgroundSessionManagerClient.__ivar_destroyer()
{
  outlined destroy of weak ActivitySessionManagerProtocol?(v0 + direct field offset for BackgroundSessionManagerClient.delegate);
  uint64_t v1 = v0 + direct field offset for BackgroundSessionManagerClient.id;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(v1, v2);
}

id BackgroundSessionManagerClient.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc BackgroundSessionManagerClient.__ivar_destroyer(uint64_t a1)
{
  outlined destroy of weak ActivitySessionManagerProtocol?(a1 + direct field offset for BackgroundSessionManagerClient.delegate);
  uint64_t v2 = a1 + direct field offset for BackgroundSessionManagerClient.id;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(v2, v3);
}

uint64_t protocol witness for Identifiable.id.getter in conformance BackgroundSessionManagerClient@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + direct field offset for BackgroundSessionManagerClient.id;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t BackgroundSessionManagerClient.begin(request:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  return BackgroundSessionManagerClient.begin(request:completion:)(a1, a2, a3, (uint64_t)&unk_1F09B3210, (uint64_t)partial apply for closure #1 in BackgroundSessionManagerClient.begin(request:completion:), (uint64_t)&block_descriptor_5);
}

uint64_t closure #1 in BackgroundSessionManagerClient.begin(request:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  swift_retain();
  specialized XPCClient.withHost(body:errorHandler:)((void (*)(uint64_t *))partial apply for closure #1 in closure #1 in BackgroundSessionManagerClient.begin(request:completion:), (uint64_t)v8, (uint64_t)partial apply for closure #2 in closure #1 in BackgroundSessionManagerClient.begin(request:completion:), v6, specialized XPCClient.connection.getter, (uint64_t)&block_descriptor_67, &demangling cache variable for type metadata for BackgroundSessionManagerXPCClient);
  return swift_release();
}

void closure #1 in closure #1 in BackgroundSessionManagerClient.begin(request:completion:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v7[5] = a4;
  uint64_t v5 = *a1;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1107296256;
  _OWORD v7[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  v7[3] = &block_descriptor_76_0;
  _OWORD v7[4] = a3;
  uint64_t v6 = _Block_copy(v7);
  swift_retain();
  swift_release();
  objc_msgSend(v5, sel_beginWithRequest_completion_, a2, v6);
  _Block_release(v6);
}

uint64_t BackgroundSessionManagerClient.leave(identifier:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v29 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  id v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v27 = *(void *)(v8 - 8);
  uint64_t v28 = v8;
  MEMORY[0x1F4188790](v8);
  os_log_type_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x1F4188790](v11);
  id v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = *(void *)&v3[direct field offset for XPCClient.queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  unint64_t v15 = (*(unsigned __int8 *)(v12 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v16 = (v13 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v3;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v17 + v15, v14, v11);
  uint64_t v18 = (void *)(v17 + v16);
  uint64_t v19 = v25;
  *uint64_t v18 = v24;
  v18[1] = v19;
  aBlock[4] = partial apply for closure #1 in BackgroundSessionManagerClient.leave(identifier:completion:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_6_0;
  unint64_t v20 = _Block_copy(aBlock);
  char v21 = v3;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v30 = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v10, v7, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v28);
  return swift_release();
}

uint64_t closure #1 in BackgroundSessionManagerClient.leave(identifier:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](v7);
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 16))(&v14[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], a2, v7);
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = swift_allocObject();
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v8 + 32))(v11 + v10, &v14[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], v7);
  uint64_t v12 = (void *)(v11 + ((v9 + v10 + 7) & 0xFFFFFFFFFFFFFFF8));
  void *v12 = a3;
  v12[1] = a4;
  swift_retain();
  specialized XPCClient.withHost(body:errorHandler:)((void (*)(uint64_t *))partial apply for closure #1 in closure #1 in BackgroundSessionManagerClient.leave(identifier:completion:), (uint64_t)v14, (uint64_t)partial apply for closure #2 in closure #1 in BackgroundSessionManagerClient.leave(identifier:completion:), v11, specialized XPCClient.connection.getter, (uint64_t)&block_descriptor_67, &demangling cache variable for type metadata for BackgroundSessionManagerXPCClient);
  return swift_release();
}

void closure #1 in closure #1 in BackgroundSessionManagerClient.leave(identifier:completion:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a1;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  _OWORD v9[4] = a3;
  void v9[5] = a4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1107296256;
  _OWORD v9[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  v9[3] = &block_descriptor_70_0;
  uint64_t v8 = _Block_copy(v9);
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_leaveWithIdentifier_completion_, isa, v8);
  _Block_release(v8);
}

uint64_t closure #2 in closure #1 in BackgroundSessionManagerClient.leave(identifier:completion:)(void *a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.client);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  id v13 = a1;
  id v14 = a1;
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v26 = a4;
    uint64_t v18 = v17;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v29 = v19;
    *(_DWORD *)uint64_t v18 = 136315394;
    uint64_t v27 = a3;
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    *(_WORD *)(v18 + 12) = 2080;
    uint64_t v28 = (uint64_t)a1;
    id v22 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v23 = String.init<A>(reflecting:)();
    uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v29);
    a3 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v15, v16, "Error leaving identifier %s: %s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v19, -1, -1);
    MEMORY[0x1B3EA39E0](v18, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  return a3(a1);
}

uint64_t BackgroundSessionManagerClient.updateMembers(identifier:members:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v26 = a2;
  uint64_t v30 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v33 = *(void *)(v30 - 8);
  MEMORY[0x1F4188790](v30);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v31 = *(void *)(v8 - 8);
  uint64_t v32 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x1F4188790](v11);
  id v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = *(void *)&v4[direct field offset for XPCClient.queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  unint64_t v15 = (*(unsigned __int8 *)(v12 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v16 = (v13 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v4;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v17 + v15, v14, v11);
  uint64_t v18 = v27;
  *(void *)(v17 + v16) = v26;
  uint64_t v19 = (void *)(v17 + ((v16 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v20 = v28;
  *uint64_t v19 = v18;
  v19[1] = v20;
  aBlock[4] = partial apply for closure #1 in BackgroundSessionManagerClient.updateMembers(identifier:members:completion:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_12;
  unint64_t v21 = _Block_copy(aBlock);
  id v22 = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v34 = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  uint64_t v23 = v30;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v10, v7, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v7, v23);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v32);
  return swift_release();
}

uint64_t closure #1 in BackgroundSessionManagerClient.updateMembers(identifier:members:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v18[1] = a1;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  uint64_t v23 = a5;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  unint64_t v13 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v14 = (v11 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v15 + v13, v12, v9);
  *(void *)(v15 + v14) = a3;
  unint64_t v16 = (void *)(v15 + ((v14 + 15) & 0xFFFFFFFFFFFFFFF8));
  *unint64_t v16 = a4;
  v16[1] = a5;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized XPCClient.withSynchronousHost<A>(body:errorHandler:)((void (*)(uint64_t *))partial apply for closure #1 in closure #1 in BackgroundSessionManagerClient.updateMembers(identifier:members:completion:), (uint64_t)v19, (uint64_t)partial apply for closure #2 in closure #1 in BackgroundSessionManagerClient.updateMembers(identifier:members:completion:), v15);
  return swift_release();
}

void closure #1 in closure #1 in BackgroundSessionManagerClient.updateMembers(identifier:members:completion:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *a1;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  lazy protocol witness table accessor for type TUHandle and conformance NSObject();
  Class v9 = Set._bridgeToObjectiveC()().super.isa;
  v11[4] = a4;
  v11[5] = a5;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  v11[3] = &block_descriptor_61;
  uint64_t v10 = _Block_copy(v11);
  swift_retain();
  swift_release();
  objc_msgSend(v7, sel_updateMembersWithIdentifier_members_completion_, isa, v9, v10);
  _Block_release(v10);
}

uint64_t closure #2 in closure #1 in BackgroundSessionManagerClient.updateMembers(identifier:members:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Log.client);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  swift_bridgeObjectRetain();
  id v14 = a1;
  swift_bridgeObjectRetain();
  id v15 = a1;
  unint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  int v18 = v17;
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v33 = a5;
    uint64_t v20 = v19;
    uint64_t v32 = swift_slowAlloc();
    uint64_t v36 = v32;
    *(_DWORD *)uint64_t v20 = 136315650;
    uint64_t v34 = a4;
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    HIDWORD(v31) = v18;
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    *(_WORD *)(v20 + 12) = 2080;
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    lazy protocol witness table accessor for type TUHandle and conformance NSObject();
    swift_bridgeObjectRetain();
    uint64_t v23 = Set.description.getter();
    unint64_t v25 = v24;
    swift_bridgeObjectRelease();
    uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 22) = 2080;
    uint64_t v35 = (uint64_t)a1;
    id v26 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v27 = String.init<A>(reflecting:)();
    uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v36);
    a4 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v16, BYTE4(v31), "Error updating members identifier %s: with members: %s error: %s", (uint8_t *)v20, 0x20u);
    uint64_t v29 = v32;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v29, -1, -1);
    MEMORY[0x1B3EA39E0](v20, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    swift_bridgeObjectRelease_n();
  }
  return a4(a1);
}

uint64_t BackgroundSessionManagerClient.updateShare(_:activityID:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v29 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v32 = *(void *)(v29 - 8);
  MEMORY[0x1F4188790](v29);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v30 = *(void *)(v9 - 8);
  uint64_t v31 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x1F4188790](v12);
  id v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = *(void *)&v4[direct field offset for XPCClient.queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, v12);
  unint64_t v16 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v17 = (v14 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v4;
  *(void *)(v18 + 24) = a1;
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v18 + v16, v15, v12);
  uint64_t v19 = (void *)(v18 + v17);
  uint64_t v20 = v27;
  *uint64_t v19 = v26;
  v19[1] = v20;
  aBlock[4] = partial apply for closure #1 in BackgroundSessionManagerClient.updateShare(_:activityID:completion:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_18;
  uint64_t v21 = _Block_copy(aBlock);
  unint64_t v22 = v4;
  id v23 = a1;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v33 = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  uint64_t v24 = v29;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v11, v8, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v8, v24);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v31);
  return swift_release();
}

uint64_t closure #1 in BackgroundSessionManagerClient.updateShare(_:activityID:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _OWORD v9[2] = a2;
  v9[3] = a3;
  _OWORD v9[4] = a4;
  void v9[5] = a5;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a4;
  *(void *)(v7 + 24) = a5;
  swift_retain();
  specialized XPCClient.withSynchronousHost<A>(body:errorHandler:)((void (*)(uint64_t *))partial apply for closure #1 in closure #1 in BackgroundSessionManagerClient.updateShare(_:activityID:completion:), (uint64_t)v9, (uint64_t)partial apply for closure #2 in closure #1 in BackgroundSessionManagerClient.updateShare(_:activityID:completion:), v7);
  return swift_release();
}

void closure #1 in closure #1 in BackgroundSessionManagerClient.updateShare(_:activityID:completion:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *a1;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  v11[4] = a4;
  v11[5] = a5;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  v11[3] = &block_descriptor_55;
  uint64_t v10 = _Block_copy(v11);
  swift_retain();
  swift_release();
  objc_msgSend(v8, sel_updateShare_activityID_completion_, a2, isa, v10);
  _Block_release(v10);
}

uint64_t closure #2 in closure #1 in BackgroundSessionManagerClient.begin(request:completion:)(void *a1, uint64_t (*a2)(void *), uint64_t a3, const char *a4)
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.client);
  id v8 = a1;
  id v9 = a1;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v18 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    id v14 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v15 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v10, v11, a4, v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v13, -1, -1);
    MEMORY[0x1B3EA39E0](v12, -1, -1);
  }
  else
  {
  }
  return a2(a1);
}

uint64_t protocol witness for BackgroundSessionManagerClientProtocol.delegate.getter in conformance BackgroundSessionManagerClient()
{
  uint64_t v1 = v0 + direct field offset for BackgroundSessionManagerClient.delegate;
  swift_beginAccess();
  return MEMORY[0x1B3EA3B30](v1);
}

uint64_t protocol witness for BackgroundSessionManagerClientProtocol.delegate.setter in conformance BackgroundSessionManagerClient(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + direct field offset for BackgroundSessionManagerClient.delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*protocol witness for BackgroundSessionManagerClientProtocol.delegate.modify in conformance BackgroundSessionManagerClient(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = direct field offset for BackgroundSessionManagerClient.delegate;
  void v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1B3EA3B30](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  void v3[3] = v6;
  v3[4] = v7;
  return BackgroundSessionManagerClient.delegate.modify;
}

uint64_t BackgroundSessionManagerClient.createPresenceSession(with:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  return BackgroundSessionManagerClient.begin(request:completion:)(a1, a2, a3, (uint64_t)&unk_1F09B32B0, (uint64_t)partial apply for closure #1 in BackgroundSessionManagerClient.createPresenceSession(with:completion:), (uint64_t)&block_descriptor_24);
}

uint64_t BackgroundSessionManagerClient.begin(request:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26);
  unint64_t v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = *(void *)&v6[direct field offset for XPCClient.queue];
  unint64_t v17 = (void *)swift_allocObject();
  void v17[2] = v6;
  v17[3] = a1;
  v17[4] = a2;
  v17[5] = a3;
  aBlock[4] = v23;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = v24;
  uint64_t v18 = _Block_copy(aBlock);
  uint64_t v19 = v6;
  id v20 = a1;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v27 = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v16, v13, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v26);
  return swift_release();
}

uint64_t closure #1 in BackgroundSessionManagerClient.createPresenceSession(with:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  swift_retain();
  specialized XPCClient.withSynchronousHost<A>(body:errorHandler:)((void (*)(uint64_t *))partial apply for closure #1 in closure #1 in BackgroundSessionManagerClient.createPresenceSession(with:completion:), (uint64_t)v8, (uint64_t)partial apply for closure #2 in closure #1 in BackgroundSessionManagerClient.createPresenceSession(with:completion:), v6);
  return swift_release();
}

void closure #1 in closure #1 in BackgroundSessionManagerClient.createPresenceSession(with:completion:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v7[5] = a4;
  uint64_t v5 = *a1;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1107296256;
  _OWORD v7[2] = thunk for @escaping @callee_guaranteed (@guaranteed PresenceSessionConnectionInfo?, @guaranteed Error?) -> ();
  v7[3] = &block_descriptor_49;
  _OWORD v7[4] = a3;
  uint64_t v6 = _Block_copy(v7);
  swift_retain();
  swift_release();
  objc_msgSend(v5, sel_createPresenceSessionWith_completion_, a2, v6);
  _Block_release(v6);
}

uint64_t closure #2 in closure #1 in BackgroundSessionManagerClient.createPresenceSession(with:completion:)(void *a1, uint64_t (*a2)(void, void *))
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.client);
  id v5 = a1;
  id v6 = a1;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v15 = v10;
    *(_DWORD *)id v9 = 136315138;
    id v11 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v12 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v7, v8, "Error creating presence session: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v10, -1, -1);
    MEMORY[0x1B3EA39E0](v9, -1, -1);
  }
  else
  {
  }
  return a2(0, a1);
}

uint64_t @objc BackgroundSessionManagerClient.begin(request:completion:)(void *a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t a6, void (*a7)(id, uint64_t, uint64_t))
{
  id v11 = _Block_copy(aBlock);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  id v13 = a3;
  id v14 = a1;
  a7(v13, a6, v12);

  return swift_release();
}

Swift::Void __swiftcall BackgroundSessionManagerClient.update(activitySessions:)(Swift::OpaquePointer activitySessions)
{
  uint64_t v3 = v1 + direct field offset for BackgroundSessionManagerClient.delegate;
  swift_beginAccess();
  if (MEMORY[0x1B3EA3B30](v3))
  {
    uint64_t v4 = *(void *)(v3 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, _UNKNOWN **, void *, uint64_t, uint64_t))(v4 + 16))(v1, &protocol witness table for BackgroundSessionManagerClient, activitySessions._rawValue, ObjectType, v4);
    swift_unknownObjectRelease();
  }
}

uint64_t BackgroundSessionManagerClient.sessionDidRejectKeyRecoveryRequest(sessionID:)(uint64_t a1)
{
  uint64_t v3 = v1 + direct field offset for BackgroundSessionManagerClient.delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1B3EA3B30](v3);
  if (result)
  {
    uint64_t v5 = *(void *)(v3 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, ObjectType, v5);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t BackgroundSessionManagerClient.sessionDidReceiveUpdatedUnknownParticipantList(sessionID:unknownParticipants:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + direct field offset for BackgroundSessionManagerClient.delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1B3EA3B30](v5);
  if (result)
  {
    uint64_t v7 = *(void *)(v5 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, ObjectType, v7);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t partial apply for closure #1 in BackgroundSessionManagerClient.begin(request:completion:)()
{
  return closure #1 in BackgroundSessionManagerClient.begin(request:completion:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t sub_1B0E9317C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return MEMORY[0x1F4186498](v0, v6 + 16, v5);
}

uint64_t partial apply for closure #1 in BackgroundSessionManagerClient.leave(identifier:completion:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + v2;
  uint64_t v5 = (uint64_t *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  return closure #1 in BackgroundSessionManagerClient.leave(identifier:completion:)(v3, v4, v6, v7);
}

uint64_t sub_1B0E932FC()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x1F4186498](v0, v6 + 16, v5);
}

uint64_t partial apply for closure #1 in BackgroundSessionManagerClient.updateMembers(identifier:members:completion:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = v0 + v2;
  uint64_t v6 = *(void *)(v0 + v3);
  uint64_t v7 = (uint64_t *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  return closure #1 in BackgroundSessionManagerClient.updateMembers(identifier:members:completion:)(v4, v5, v6, v8, v9);
}

uint64_t sub_1B0E93498()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return MEMORY[0x1F4186498](v0, v6 + 16, v5);
}

uint64_t partial apply for closure #1 in BackgroundSessionManagerClient.updateShare(_:activityID:completion:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = v0 + v2;
  unint64_t v6 = (uint64_t *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  return closure #1 in BackgroundSessionManagerClient.updateShare(_:activityID:completion:)(v3, v4, v5, v7, v8);
}

uint64_t objectdestroyTm_3()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in BackgroundSessionManagerClient.createPresenceSession(with:completion:)()
{
  return closure #1 in BackgroundSessionManagerClient.createPresenceSession(with:completion:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in BackgroundSessionManagerClient()
{
  return _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
}

uint64_t sub_1B0E936C0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + direct field offset for BackgroundSessionManagerClient.delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1B3EA3B30](v3);
  uint64_t v5 = *(void *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t sub_1B0E9371C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2 + direct field offset for BackgroundSessionManagerClient.delegate;
  swift_beginAccess();
  *(void *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t dispatch thunk of BackgroundSessionManagerClientProtocol.delegate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of BackgroundSessionManagerClientProtocol.delegate.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of BackgroundSessionManagerClientProtocol.delegate.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of BackGroundSessionManagerClientDelegate.didDisconnect(client:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of BackGroundSessionManagerClientDelegate.didUpdateContainers(client:containers:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of BackGroundSessionManagerClientDelegate.sessionDidRejectKeyRecoveryRequest(sessionID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of BackGroundSessionManagerClientDelegate.sessionDidReceiveUpdatedUnknownParticipantList(sessionID:unknownParticipants:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t type metadata accessor for BackgroundSessionManagerClient()
{
  uint64_t result = type metadata singleton initialization cache for BackgroundSessionManagerClient;
  if (!type metadata singleton initialization cache for BackgroundSessionManagerClient) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for BackgroundSessionManagerClient()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t ObjC metadata update function for BackgroundSessionManagerClient()
{
  return type metadata accessor for BackgroundSessionManagerClient();
}

unint64_t lazy protocol witness table accessor for type TUHandle and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type TUHandle and conformance NSObject;
  if (!lazy protocol witness table cache variable for type TUHandle and conformance NSObject)
  {
    type metadata accessor for TUConversationActivity(255, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject);
  }
  return result;
}

uint64_t sub_1B0E93964()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned PresenceSessionConnectionInfo?, @unowned NSError?) -> ()(uint64_t a1, uint64_t a2)
{
  thunk for @escaping @callee_unowned @convention(block) (@unowned PresenceSessionConnectionInfo?, @unowned NSError?) -> ()(a1, a2, *(void *)(v2 + 16));
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()(uint64_t a1)
{
  thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()(a1, *(void *)(v1 + 16));
}

void partial apply for closure #1 in closure #1 in BackgroundSessionManagerClient.createPresenceSession(with:completion:)(void **a1)
{
  closure #1 in closure #1 in BackgroundSessionManagerClient.createPresenceSession(with:completion:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1B0E939CC()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #2 in closure #1 in BackgroundSessionManagerClient.createPresenceSession(with:completion:)(void *a1)
{
  return closure #2 in closure #1 in BackgroundSessionManagerClient.createPresenceSession(with:completion:)(a1, *(uint64_t (**)(void, void *))(v1 + 16));
}

void partial apply for closure #1 in closure #1 in BackgroundSessionManagerClient.updateShare(_:activityID:completion:)(void **a1)
{
  closure #1 in closure #1 in BackgroundSessionManagerClient.updateShare(_:activityID:completion:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t partial apply for closure #2 in closure #1 in BackgroundSessionManagerClient.updateShare(_:activityID:completion:)(void *a1)
{
  return closure #2 in closure #1 in BackgroundSessionManagerClient.begin(request:completion:)(a1, *(uint64_t (**)(void *))(v1 + 16), *(void *)(v1 + 24), "Error updating host share: %s");
}

void partial apply for closure #1 in closure #1 in BackgroundSessionManagerClient.updateMembers(identifier:members:completion:)(void **a1)
{
  closure #1 in closure #1 in BackgroundSessionManagerClient.updateMembers(identifier:members:completion:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1B0E93A70()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x1F4186498](v0, v6 + 16, v5);
}

uint64_t partial apply for closure #2 in closure #1 in BackgroundSessionManagerClient.updateMembers(identifier:members:completion:)(void *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v1 + v4;
  uint64_t v7 = *(void *)(v1 + v5);
  uint64_t v8 = v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = *(uint64_t (**)(void))v8;
  uint64_t v10 = *(void *)(v8 + 8);
  return closure #2 in closure #1 in BackgroundSessionManagerClient.updateMembers(identifier:members:completion:)(a1, v6, v7, v9, v10);
}

void partial apply for closure #1 in closure #1 in BackgroundSessionManagerClient.leave(identifier:completion:)(void **a1)
{
  closure #1 in closure #1 in BackgroundSessionManagerClient.leave(identifier:completion:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1B0E93BFC()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return MEMORY[0x1F4186498](v0, v6, v5);
}

uint64_t partial apply for closure #2 in closure #1 in BackgroundSessionManagerClient.leave(identifier:completion:)(void *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1 + v4;
  uint64_t v6 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = *(uint64_t (**)(void))v6;
  uint64_t v8 = *(void *)(v6 + 8);
  return closure #2 in closure #1 in BackgroundSessionManagerClient.leave(identifier:completion:)(a1, v5, v7, v8);
}

void partial apply for closure #1 in closure #1 in BackgroundSessionManagerClient.begin(request:completion:)(void **a1)
{
  closure #1 in closure #1 in BackgroundSessionManagerClient.begin(request:completion:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t partial apply for closure #2 in closure #1 in BackgroundSessionManagerClient.begin(request:completion:)(void *a1)
{
  return closure #2 in closure #1 in BackgroundSessionManagerClient.begin(request:completion:)(a1, *(uint64_t (**)(void *))(v1 + 16), *(void *)(v1 + 24), "Error beginning activity: %s");
}

uint64_t static PresenceStatus<A>.present.getter()
{
  return 0;
}

uint64_t type metadata instantiation function for PresenceStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 8);
}

uint64_t type metadata completion function for PresenceStatus()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PresenceStatus(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v7 = *(void *)(v6 + 64);
  }
  else {
    size_t v7 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v7 > 0x18)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v8 + 16) & ~v8));
    swift_retain();
  }
  else if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

uint64_t destroy for PresenceStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v3);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v5(a1, v3);
  }
  return result;
}

void *initializeWithCopy for PresenceStatus(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1;
    }
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *assignWithCopy for PresenceStatus(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    id v13 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v12 = v6 + 8;
    v13(a1, v5);
    int v10 = *(_DWORD *)(v12 + 76);
    size_t v11 = *(void *)(v12 + 56);
  }
  if (v10) {
    size_t v14 = v11;
  }
  else {
    size_t v14 = v11 + 1;
  }
  memcpy(a1, a2, v14);
  return a1;
}

void *initializeWithTake for PresenceStatus(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1;
    }
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *assignWithTake for PresenceStatus(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    id v13 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v12 = v6 + 8;
    v13(a1, v5);
    int v10 = *(_DWORD *)(v12 + 76);
    size_t v11 = *(void *)(v12 + 56);
  }
  if (v10) {
    size_t v14 = v11;
  }
  else {
    size_t v14 = v11 + 1;
  }
  memcpy(a1, a2, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for PresenceStatus(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v6;
  if (a2 > v6)
  {
    char v9 = 8 * v7;
    if (v7 > 3) {
      goto LABEL_8;
    }
    unsigned int v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v7);
      if (v10) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2) {
          goto LABEL_25;
        }
LABEL_8:
        int v10 = *((unsigned __int8 *)a1 + v7);
        if (!*((unsigned char *)a1 + v7)) {
          goto LABEL_25;
        }
LABEL_15:
        int v12 = (v10 - 1) << v9;
        if (v7 > 3) {
          int v12 = 0;
        }
        if (v7)
        {
          if (v7 <= 3) {
            int v13 = v7;
          }
          else {
            int v13 = 4;
          }
          switch(v13)
          {
            case 2:
              int v14 = *a1;
              break;
            case 3:
              int v14 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              int v14 = *(_DWORD *)a1;
              break;
            default:
              int v14 = *(unsigned __int8 *)a1;
              break;
          }
        }
        else
        {
          int v14 = 0;
        }
        return v6 + (v14 | v12) + 1;
      }
      int v10 = *(unsigned __int16 *)((char *)a1 + v7);
      if (*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_15;
      }
    }
  }
LABEL_25:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v16 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v16 >= 2) {
    return v16 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for PresenceStatus(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (v8)
  {
    size_t v10 = *(void *)(v7 + 64);
  }
  else
  {
    unsigned int v9 = 0;
    size_t v10 = *(void *)(v7 + 64) + 1;
  }
  BOOL v11 = a3 >= v9;
  unsigned int v12 = a3 - v9;
  if (v12 == 0 || !v11)
  {
LABEL_13:
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  if (v10 > 3)
  {
    int v6 = 1;
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  unsigned int v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
  if (!HIWORD(v13))
  {
    if (v13 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v13 > 1;
    }
    goto LABEL_13;
  }
  int v6 = 4;
  if (v9 < a2)
  {
LABEL_14:
    unsigned int v14 = ~v9 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v16 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
LABEL_21:
  switch(v6)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x1B0E9492CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v8 >= 2)
        {
          unint64_t v17 = *(void (**)(void))(v7 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t getEnumTag for PresenceStatus(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 48))(a1, 1);
}

uint64_t destructiveInjectEnumTag for PresenceStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 56))(a1, a2, 1);
}

uint64_t type metadata accessor for PresenceStatus()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t FastSyncAnalyticsReporter.maxPartcipantsInSession.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*FastSyncAnalyticsReporter.maxPartcipantsInSession.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t protocol witness for FastSyncAnalyticsReporterProtocol.maxPartcipantsInSession.getter in conformance FastSyncAnalyticsReporter()
{
  return *(void *)v0;
}

uint64_t protocol witness for FastSyncAnalyticsReporterProtocol.maxPartcipantsInSession.setter in conformance FastSyncAnalyticsReporter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*protocol witness for FastSyncAnalyticsReporterProtocol.maxPartcipantsInSession.modify in conformance FastSyncAnalyticsReporter())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

void specialized FastSyncAnalyticsReporter.logEvent(viewName:coreAnalyticsDictionary:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    aBlock[0] = v10;
    *(_DWORD *)uint64_t v9 = 136315394;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2080;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : NSObject]);
    uint64_t v11 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v7, v8, "Logged coreanalytics event %s %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v10, -1, -1);
    MEMORY[0x1B3EA39E0](v9, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  unsigned int v13 = (void *)MEMORY[0x1B3EA1B00](a1, a2);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a3;
  aBlock[4] = (uint64_t)partial apply for closure #1 in ActivitySession.logDurationMetric(_:);
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  aBlock[3] = (uint64_t)&block_descriptor_6;
  int v15 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v15);
}

uint64_t specialized FastSyncAnalyticsReporter.collectPresentParticipants(_:_:_:maxAllowedParticipants:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, char a6)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B1138A90;
  *(void *)(inited + 32) = 0x5F6E6F6973736573;
  *(void *)(inited + 40) = 0xEA00000000006469;
  id v13 = objc_allocWithZone(NSString);
  swift_bridgeObjectRetain();
  uint64_t v14 = (void *)MEMORY[0x1B3EA1B00](a1, a2);
  swift_bridgeObjectRelease();
  id v15 = objc_msgSend(v13, sel_initWithString_, v14);

  *(void *)(inited + 48) = v15;
  *(void *)(inited + 56) = 0x695F656C646E7562;
  *(void *)(inited + 64) = 0xE900000000000064;
  id v16 = objc_allocWithZone(NSString);
  swift_bridgeObjectRetain();
  unint64_t v17 = (void *)MEMORY[0x1B3EA1B00](a3, a4);
  swift_bridgeObjectRelease();
  id v18 = objc_msgSend(v16, sel_initWithString_, v17);

  *(void *)(inited + 72) = v18;
  *(void *)(inited + 80) = 0xD00000000000001ALL;
  *(void *)(inited + 88) = 0x80000001B115D940;
  *(void *)(inited + 96) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, a5);
  *(void *)(inited + 104) = 0xD000000000000019;
  *(void *)(inited + 112) = 0x80000001B115D960;
  BOOL v19 = (a6 & 1) == 0;
  if (a6) {
    uint64_t v20 = 7562585;
  }
  else {
    uint64_t v20 = 28494;
  }
  if (v19) {
    unint64_t v21 = 0xE200000000000000;
  }
  else {
    unint64_t v21 = 0xE300000000000000;
  }
  id v22 = objc_allocWithZone(NSString);
  uint64_t v23 = (void *)MEMORY[0x1B3EA1B00](v20, v21);
  swift_bridgeObjectRelease();
  id v24 = objc_msgSend(v22, sel_initWithString_, v23);

  *(void *)(inited + 120) = v24;
  unint64_t v25 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  specialized FastSyncAnalyticsReporter.logEvent(viewName:coreAnalyticsDictionary:)(a3, a4, v25);
  return swift_bridgeObjectRelease();
}

uint64_t specialized FastSyncAnalyticsReporter.collectInvitedMembers(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((a5 & 0xC000000000000001) != 0) {
    uint64_t v9 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v9 = *(void *)(a5 + 16);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B113A080;
  *(void *)(inited + 32) = 0x5F6E6F6973736573;
  *(void *)(inited + 40) = 0xEA00000000006469;
  id v11 = objc_allocWithZone(NSString);
  swift_bridgeObjectRetain();
  unint64_t v12 = (void *)MEMORY[0x1B3EA1B00](a1, a2);
  swift_bridgeObjectRelease();
  id v13 = objc_msgSend(v11, sel_initWithString_, v12);

  *(void *)(inited + 48) = v13;
  *(void *)(inited + 56) = 0x695F656C646E7562;
  *(void *)(inited + 64) = 0xE900000000000064;
  id v14 = objc_allocWithZone(NSString);
  swift_bridgeObjectRetain();
  id v15 = (void *)MEMORY[0x1B3EA1B00](a3, a4);
  swift_bridgeObjectRelease();
  id v16 = objc_msgSend(v14, sel_initWithString_, v15);

  *(void *)(inited + 72) = v16;
  *(void *)(inited + 80) = 0xD00000000000001ALL;
  *(void *)(inited + 88) = 0x80000001B115D920;
  *(void *)(inited + 96) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v9);
  unint64_t v17 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  specialized FastSyncAnalyticsReporter.logEvent(viewName:coreAnalyticsDictionary:)(a3, a4, v17);
  return swift_bridgeObjectRelease();
}

uint64_t dispatch thunk of FastSyncAnalyticsReporterProtocol.maxPartcipantsInSession.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of FastSyncAnalyticsReporterProtocol.maxPartcipantsInSession.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of FastSyncAnalyticsReporterProtocol.maxPartcipantsInSession.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of FastSyncAnalyticsReporterProtocol.collectPresentParticipants(_:_:_:maxAllowedParticipants:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 32))();
}

uint64_t dispatch thunk of FastSyncAnalyticsReporterProtocol.collectInvitedMembers(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 40))();
}

ValueMetadata *type metadata accessor for FastSyncAnalyticsReporter()
{
  return &type metadata for FastSyncAnalyticsReporter;
}

uint64_t sub_1B0E9518C()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

BOOL static PluginAttachmentLedgerTopic.State.< infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = a1[5];
  unint64_t v3 = a2[5];
  if (v2 >> 62)
  {
    if (v2 >> 62 == 1)
    {
      unint64_t v4 = 4;
      unint64_t v5 = v3 >> 62;
      if (!(v3 >> 62)) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v6 = *a1;
      uint64_t v7 = a1[3];
      uint64_t v8 = a1[4] | a1[6];
      uint64_t v9 = a1[2] | a1[1];
      if (v2 != 0x8000000000000000 || v8 | v6 | v7 | v9)
      {
        if (v8 | v7 | v9) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v6 == 1;
        }
        BOOL v16 = v15 && v2 == 0x8000000000000000;
        unint64_t v4 = 2;
        if (!v16) {
          unint64_t v4 = 3;
        }
        unint64_t v5 = v3 >> 62;
        if (!(v3 >> 62)) {
          goto LABEL_24;
        }
      }
      else
      {
        unint64_t v4 = 0;
        unint64_t v5 = v3 >> 62;
        if (!(v3 >> 62))
        {
LABEL_24:
          unint64_t v10 = 1;
          return v4 < v10;
        }
      }
    }
  }
  else
  {
    unint64_t v4 = 1;
    unint64_t v5 = v3 >> 62;
    if (!(v3 >> 62)) {
      goto LABEL_24;
    }
  }
  if (v5 == 1)
  {
    unint64_t v10 = 4;
  }
  else
  {
    uint64_t v11 = *a2;
    uint64_t v12 = a2[3];
    uint64_t v13 = a2[2] | a2[1];
    uint64_t v14 = a2[4] | a2[6];
    if (v3 != 0x8000000000000000 || v13 | v11 | v12 | v14)
    {
      if (v13 | v12 | v14) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v11 == 1;
      }
      BOOL v18 = v17 && v3 == 0x8000000000000000;
      unint64_t v10 = 2;
      if (!v18) {
        unint64_t v10 = 3;
      }
    }
    else
    {
      unint64_t v10 = 0;
    }
  }
  return v4 < v10;
}

uint64_t PluginAttachmentLedgerTopic.Configuration.init(proto:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4 = *a1;
  unsigned int v3 = a1[1];
  double v5 = 1.0;
  if (v3) {
    double v5 = (double)v3 / 1000.0;
  }
  unsigned int v7 = a1[2];
  unsigned int v6 = a1[3];
  if (v6) {
    double v8 = (double)v6;
  }
  else {
    double v8 = 1.0;
  }
  uint64_t result = outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)a1, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
  if (v7) {
    uint64_t v10 = v7;
  }
  else {
    uint64_t v10 = 3;
  }
  if (v4) {
    uint64_t v11 = v4;
  }
  else {
    uint64_t v11 = 2;
  }
  *(void *)a2 = v11;
  *(double *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v10;
  *(double *)(a2 + 24) = v8;
  *(void *)(a2 + 32) = 0x4024000000000000;
  return result;
}

uint64_t PluginAttachmentLedgerTopic.description.getter()
{
  unint64_t v17 = 0xE000000000000000;
  _StringGuts.grow(_:)(55);
  uint64_t v22 = 0;
  unint64_t v23 = 0xE000000000000000;
  v1._object = (void *)0x80000001B115D980;
  v1._uint64_t countAndFlagsBits = 0xD000000000000022;
  String.append(_:)(v1);
  BOOL v16 = v0;
  v2._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 0x3D6574617473202CLL;
  v3._object = (void *)0xE800000000000000;
  String.append(_:)(v3);
  (*(void (**)(void **__return_ptr))(*v0 + 288))(&v16);
  uint64_t v4 = (uint64_t)v16;
  uint64_t v5 = v17;
  uint64_t v6 = v18;
  uint64_t v7 = v19;
  uint64_t v8 = v20;
  unint64_t v9 = v21;
  v10._uint64_t countAndFlagsBits = PluginAttachmentLedgerTopic.State.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  outlined consume of PluginAttachmentLedgerTopic.State(v4, v5, v6, v7, v8, v9);
  v11._uint64_t countAndFlagsBits = 0x3D656D616E202CLL;
  v11._object = (void *)0xE700000000000000;
  String.append(_:)(v11);
  uint64_t v13 = v0[14];
  uint64_t v12 = (void *)v0[15];
  swift_bridgeObjectRetain();
  v14._uint64_t countAndFlagsBits = v13;
  v14._object = v12;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  return v22;
}

void __swiftcall PluginAttachmentLedgerTopic.Configuration.init(maxSubscribeRetries:subscribeRetryInterval:maxDataCryptorRetries:dataCryptorRetryInterval:gracefulShutdownWindowInterval:)(CopresenceCore::PluginAttachmentLedgerTopic::Configuration *__return_ptr retstr, Swift::Int maxSubscribeRetries, Swift::Double subscribeRetryInterval, Swift::Int maxDataCryptorRetries, Swift::Double dataCryptorRetryInterval, Swift::Double gracefulShutdownWindowInterval)
{
  retstr->maxSubscribeRetries = maxSubscribeRetries;
  retstr->subscribeRetryInterval = subscribeRetryInterval;
  retstr->maxDataCryptorRetries = maxDataCryptorRetries;
  retstr->dataCryptorRetryInterval = dataCryptorRetryInterval;
  retstr->gracefulShutdownWindowInterval = gracefulShutdownWindowInterval;
}

uint64_t PluginAttachmentLedgerTopic.__allocating_init(name:service:dataCryptorProvider:config:localParticipantID:initialAttachments:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t *a5, unint64_t a6, void *a7)
{
  uint64_t v14 = swift_allocObject();
  PluginAttachmentLedgerTopic.init(name:service:dataCryptorProvider:config:localParticipantID:initialAttachments:)(a1, a2, a3, a4, a5, a6, a7);
  return v14;
}

uint64_t specialized Task<>.init(priority:timeout:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v13 = (void *)swift_allocObject();
  void v13[2] = 0;
  void v13[3] = 0;
  v13[4] = a4;
  v13[5] = a5;
  v13[6] = a2;
  v13[7] = a3;
  uint64_t v14 = type metadata accessor for TaskPriority();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14) == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
    if (v13[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v16 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v17 = v18;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UUID]);
  if (v17 | v16)
  {
    v21[0] = 0;
    v21[1] = 0;
    _OWORD v21[2] = v16;
    v21[3] = v17;
  }
  uint64_t v19 = swift_task_create();
  outlined destroy of UUID?(a1, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  return v19;
}

uint64_t specialized closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v5[8] = swift_task_alloc();
  return MEMORY[0x1F4188298](specialized closure #1 in closure #1 in Task<>.init(priority:timeout:operation:), 0, 0);
}

uint64_t specialized closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)()
{
  Swift::String v1 = v0;
  uint64_t v2 = v0[8];
  uint64_t v13 = v0[7];
  uint64_t v14 = v0 + 2;
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[4];
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  v7(v2, 1, 1, v6);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v5;
  v8[5] = v3;
  swift_retain();
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFSay10Foundation4UUIDVG_s5Error_pTg5(v2, (uint64_t)&_sxs5Error_pIeghHrzo_xsAA_pIeAgHrzo_s8SendableRzsAA_pRs_r0_lTRSay10Foundation4UUIDVG_TG5TATu, (uint64_t)v8);
  outlined destroy of UUID?(v2, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v7(v2, 1, 1, v6);
  unint64_t v9 = (void *)swift_allocObject();
  _OWORD v9[2] = 0;
  v9[3] = 0;
  _OWORD v9[4] = v4;
  void v9[5] = v13;
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFSay10Foundation4UUIDVG_s5Error_pTg5(v2, (uint64_t)&async function pointer to partial apply for specialized closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:), (uint64_t)v9);
  outlined destroy of UUID?(v2, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v10 = (void *)swift_task_alloc();
  v1[9] = v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThrowingTaskGroup<[UUID], Error>);
  *uint64_t v10 = v1;
  v10[1] = specialized closure #1 in closure #1 in Task<>.init(priority:timeout:operation:);
  return MEMORY[0x1F4187E30](v14, 0, 0, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized closure #1 in closure #1 in Task<>.init(priority:timeout:operation:);
  }
  else {
    uint64_t v2 = specialized closure #1 in closure #1 in Task<>.init(priority:timeout:operation:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t (*v7)(void);
  uint64_t v8;

  Swift::String v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = **(void **)(v0 + 24);
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UUID]);
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    MEMORY[0x1B3EA1F80](v2, v3, v4, MEMORY[0x1E4FBC0F0]);
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v5(v1);
  }
  else
  {
    type metadata accessor for CancellationError();
    lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata((unint64_t *)&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, MEMORY[0x1E4FBCF50]);
    swift_allocError();
    CancellationError.init()();
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  Swift::String v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5Tm(a1, a2, a3);
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14CopresenceCore23IDSGroupSessionProviderC11ParticipantV_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5Tm(a1, a2, a3);
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  outlined destroy of UUID?(a1, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCytSg_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of UUID?(a1, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ()?);
  return swift_task_create();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC7Combine14AnyCancellableC_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14CopresenceCore11UploadTokenV_Tgm5Tm(a1, a2, a3, MEMORY[0x1E4F1AB18]);
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14CopresenceCore11UploadTokenV_Tgm5Tm(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v7 = type metadata accessor for TaskPriority();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(a1, 1, v7) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of UUID?(a1, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  a4(0);
  return swift_task_create();
}

uint64_t UploadToken.token.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UploadToken.expirationDate.getter@<X0>(uint64_t a1@<X8>)
{
  return UploadToken.expirationDate.getter(type metadata accessor for UploadToken, a1);
}

uint64_t UploadToken.storageLocation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for UploadToken(0) + 24);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t UploadToken.accountID.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for UploadToken(0) + 28));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UploadToken.init(token:expirationDate:storageLocation:accountID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  *a7 = a1;
  a7[1] = a2;
  uint64_t v12 = (int *)type metadata accessor for UploadToken(0);
  uint64_t v13 = (char *)a7 + v12[5];
  uint64_t v14 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v13, a3, v14);
  uint64_t v15 = (char *)a7 + v12[6];
  uint64_t v16 = type metadata accessor for URL();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(v15, a4, v16);
  uint64_t v18 = (void *)((char *)a7 + v12[7]);
  *uint64_t v18 = a5;
  v18[1] = a6;
  return result;
}

uint64_t protocol witness for Token.token.getter in conformance UploadToken()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for Token.accountID.getter in conformance UploadToken(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 28));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t DownloadToken.expirationDate.getter@<X0>(uint64_t a1@<X8>)
{
  return UploadToken.expirationDate.getter(type metadata accessor for DownloadToken, a1);
}

uint64_t UploadToken.expirationDate.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 20);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t DownloadToken.accountID.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for DownloadToken(0) + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DownloadToken.init(token:expirationDate:accountID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  *a6 = a1;
  a6[1] = a2;
  uint64_t v10 = type metadata accessor for DownloadToken(0);
  uint64_t v11 = (char *)a6 + *(int *)(v10 + 20);
  uint64_t v12 = type metadata accessor for Date();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v11, a3, v12);
  uint64_t v14 = (void *)((char *)a6 + *(int *)(v10 + 24));
  *uint64_t v14 = a4;
  v14[1] = a5;
  return result;
}

uint64_t protocol witness for Token.expirationDate.getter in conformance UploadToken@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t protocol witness for Token.accountID.getter in conformance DownloadToken(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 24));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t UploadToken.init(from:requestTime:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v45 = a3;
  uint64_t v48 = a2;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v49 = *(void *)(v4 - 8);
  uint64_t v50 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v43 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v44 = (char *)&v40 - v7;
  uint64_t v8 = type metadata accessor for URL.DirectoryHint();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v40 - v16;
  uint64_t v18 = type metadata accessor for URL();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v42 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.init(string:)();
  uint64_t v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  uint64_t v47 = v18;
  if (v46(v15, 1, v18) == 1)
  {
    outlined destroy of UUID?((uint64_t)v15, &demangling cache variable for type metadata for URL?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, v47);
LABEL_4:
    outlined destroy of UUID?((uint64_t)v17, &demangling cache variable for type metadata for URL?);
    lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
    swift_allocError();
    *unint64_t v25 = 1;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v50);
    return outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(a1, type metadata accessor for AttachmentLedger_AuthPutMaterials);
  }
  uint64_t v21 = a1;
  uint64_t v22 = *(void *)(a1 + 16);
  uint64_t v23 = *(void *)(a1 + 24);
  uint64_t v51 = v22;
  uint64_t v52 = v23;
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E4F276C0], v8);
  lazy protocol witness table accessor for type String and conformance String();
  a1 = v21;
  swift_bridgeObjectRetain();
  URL.appending<A>(component:directoryHint:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRelease();
  uint64_t v24 = v47;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v15, v47);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v17, 0, 1, v24);
  if (v46(v17, 1, v24) == 1) {
    goto LABEL_4;
  }
  uint64_t v27 = v21;
  uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
  uint64_t v28 = v42;
  v41(v42, v17, v24);
  uint64_t v29 = *(void *)(v21 + 8);
  uint64_t v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))v21;
  uint64_t v40 = v29;
  uint64_t v30 = v48;
  uint64_t v31 = v49;
  uint64_t v32 = v50;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v43, v48, v50);
  swift_bridgeObjectRetain();
  uint64_t v33 = v44;
  Date.init(timeInterval:since:)();
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
  uint64_t v34 = (int *)type metadata accessor for UploadToken(0);
  uint64_t v35 = v45;
  v41(&v45[v34[6]], v28, v24);
  uint64_t v36 = *(void *)(v27 + 16);
  uint64_t v37 = *(void *)(v27 + 24);
  uint64_t v38 = v40;
  *(void *)uint64_t v35 = v46;
  *((void *)v35 + 1) = v38;
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(&v35[v34[5]], v33, v32);
  uint64_t v39 = &v35[v34[7]];
  *(void *)uint64_t v39 = v36;
  *((void *)v39 + 1) = v37;
  swift_bridgeObjectRetain();
  return outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v27, type metadata accessor for AttachmentLedger_AuthPutMaterials);
}

uint64_t DownloadToken.init(from:requestTime:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v20 - v11;
  uint64_t v14 = a1[2];
  uint64_t v13 = a1[3];
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
  swift_bridgeObjectRetain();
  Date.init(timeInterval:since:)();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  uint64_t v16 = a1[4];
  uint64_t v15 = a1[5];
  swift_bridgeObjectRetain();
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)a1, type metadata accessor for AttachmentLedger_AttachmentAuthGetToken);
  *(void *)a3 = v14;
  *((void *)a3 + 1) = v13;
  uint64_t v17 = type metadata accessor for DownloadToken(0);
  uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 32))(&a3[*(int *)(v17 + 20)], v12, v6);
  uint64_t v19 = &a3[*(int *)(v17 + 24)];
  *(void *)uint64_t v19 = v16;
  *((void *)v19 + 1) = v15;
  return result;
}

uint64_t Attachment.attachment.getter()
{
  return static Message.with(_:)();
}

uint64_t closure #1 in Attachment.attachment.getter(uint64_t *a1)
{
  v29[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  uint64_t v27 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UnencryptedAttachment(0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v28 = UUID.uuid.getter();
  WORD4(v28) = v9;
  BYTE10(v28) = v10;
  BYTE11(v28) = v11;
  BYTE12(v28) = v12;
  BYTE13(v28) = v13;
  BYTE14(v28) = v14;
  HIBYTE(v28) = v15;
  uint64_t v16 = specialized Data.init<A>(_:)((uint64_t)&v28, (uint64_t)v29);
  uint64_t v18 = v17;
  outlined consume of Data._Representation(*a1, a1[1]);
  *a1 = v16;
  a1[1] = v18;
  uint64_t result = OS_dispatch_queue.sync<A>(execute:)();
  if (!v1)
  {
    MEMORY[0x1F4188790](result);
    *(&v26 - 2) = v20;
    lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_MMCSMetadata);
    static Message.with(_:)();
    uint64_t v21 = (uint64_t)a1 + *(int *)(type metadata accessor for AttachmentLedger_AttachmentMetadata(0) + 36);
    outlined destroy of UUID?(v21, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
    outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate((uint64_t)v5, v21, type metadata accessor for AttachmentLedger_MMCSMetadata);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v27 + 56))(v21, 0, 1, v3);
    long long v28 = *(_OWORD *)&v8[*(int *)(v6 + 20)];
    uint64_t v22 = Attachment.Metadata.sealedMetadata(with:)((uint64_t)v8);
    uint64_t v24 = v23;
    outlined consume of Data._Representation(a1[5], a1[6]);
    a1[5] = (uint64_t)v22;
    a1[6] = v24;
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v25 = v28;
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v8, type metadata accessor for UnencryptedAttachment);
    uint64_t result = swift_bridgeObjectRelease();
    a1[2] = v25;
  }
  return result;
}

uint64_t Attachment.MMCSMetadata.metadata.getter()
{
  return static Message.with(_:)();
}

char *Attachment.Metadata.sealedMetadata(with:)(uint64_t a1)
{
  uint64_t v64 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AES.GCM.SealedBox?);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v60 = (uint64_t)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v62 = (char *)&v53 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AES.GCM.Nonce?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v63 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AES.GCM.SealedBox();
  uint64_t v61 = *(void *)(v9 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  char v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  char v15 = (char *)&v53 - v14;
  uint64_t v16 = MEMORY[0x1F4188790](v13);
  uint64_t v18 = (char *)&v53 - v17;
  MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v53 - v19;
  uint64_t v21 = type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata();
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v65 = *v1;
  lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedgerMetadata_AttachmentMetadata and conformance AttachmentLedgerMetadata_AttachmentMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata);
  static Message.with(_:)();
  uint64_t v24 = Message.serializedData(partial:)();
  unint64_t v26 = v25;
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata);
  if (!v2)
  {
    uint64_t v57 = v12;
    uint64_t v58 = v15;
    os_log_type_t v59 = v18;
    uint64_t v28 = v61;
    uint64_t v27 = v62;
    v66[0] = v24;
    v66[1] = v26;
    uint64_t v29 = type metadata accessor for AES.GCM.Nonce();
    uint64_t v30 = (uint64_t)v63;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v63, 1, 1, v29);
    lazy protocol witness table accessor for type Data and conformance Data();
    static AES.GCM.seal<A>(_:using:nonce:)();
    outlined destroy of UUID?(v30, &demangling cache variable for type metadata for AES.GCM.Nonce?);
    uint64_t v64 = v24;
    uint64_t v31 = AES.GCM.SealedBox.combined.getter();
    if (v32 >> 60 == 15)
    {
      unint64_t v56 = v26;
      uint64_t v63 = v20;
      uint64_t v18 = (char *)v9;
      if (one-time initialization token for attachmentLedgerTopic != -1) {
        swift_once();
      }
      uint64_t v33 = type metadata accessor for Logger();
      __swift_project_value_buffer(v33, (uint64_t)static Log.attachmentLedgerTopic);
      uint64_t v34 = v28;
      uint64_t v35 = *(void (**)(char *, char *, char *))(v28 + 16);
      uint64_t v36 = v59;
      v35(v59, v63, v18);
      uint64_t v37 = Logger.logObject.getter();
      int v38 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, (os_log_type_t)v38))
      {
        uint64_t v39 = (uint64_t)v27;
        int v55 = v38;
        uint64_t v40 = v36;
        uint64_t v41 = (uint8_t *)swift_slowAlloc();
        uint64_t v42 = swift_slowAlloc();
        v66[0] = v42;
        *(_DWORD *)uint64_t v41 = 136315138;
        v35((char *)v39, v40, v18);
        (*(void (**)(uint64_t, void, uint64_t, char *))(v34 + 56))(v39, 0, 1, v18);
        uint64_t v43 = v60;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v39, v60, &demangling cache variable for type metadata for AES.GCM.SealedBox?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, char *))(v34 + 48))(v43, 1, v18) == 1)
        {
          unint64_t v44 = 0xE300000000000000;
          uint64_t v45 = 7104878;
        }
        else
        {
          uint64_t v47 = *(void (**)(char *, uint64_t, char *))(v34 + 32);
          uint64_t v54 = v42;
          uint64_t v48 = v58;
          v47(v58, v43, v18);
          v35(v57, v48, v18);
          uint64_t v45 = String.init<A>(reflecting:)();
          unint64_t v44 = v49;
          uint64_t v50 = v48;
          uint64_t v42 = v54;
          (*(void (**)(char *, char *))(v34 + 8))(v50, v18);
        }
        outlined destroy of UUID?(v39, &demangling cache variable for type metadata for AES.GCM.SealedBox?);
        v66[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v44, v66);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v46 = *(void (**)(char *, char *))(v34 + 8);
        v46(v59, v18);
        _os_log_impl(&dword_1B0DF7000, v37, (os_log_type_t)v55, "Failed to get combined data from serializedMetadata SealedBox %s", v41, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v42, -1, -1);
        MEMORY[0x1B3EA39E0](v41, -1, -1);
      }
      else
      {
        uint64_t v46 = *(void (**)(char *, char *))(v34 + 8);
        v46(v36, v18);
      }

      lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
      swift_allocError();
      *uint64_t v51 = 3;
      swift_willThrow();
      outlined consume of Data._Representation(v64, v56);
      v46(v63, v18);
    }
    else
    {
      uint64_t v18 = (char *)v31;
      (*(void (**)(char *, uint64_t))(v28 + 8))(v20, v9);
      outlined consume of Data._Representation(v64, v26);
    }
  }
  return v18;
}

uint64_t closure #1 in Attachment.MMCSMetadata.metadata.getter(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)v39 - v10;
  uint64_t v44 = a2;
  lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata.BlobData and conformance AttachmentLedger_MMCSMetadata.BlobData, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  uint64_t result = static Message.with(_:)();
  if (!v2)
  {
    uint64_t v42 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    uint64_t v13 = (uint64_t)a1 + *(int *)(v42 + 36);
    outlined destroy of UUID?(v13, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate((uint64_t)v11, v13, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
    uint64_t v14 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56);
    uint64_t v45 = v6 + 56;
    uint64_t v43 = v14;
    v14(v13, 0, 1, v5);
    char v15 = (int *)type metadata accessor for Attachment.MMCSMetadata(0);
    uint64_t v16 = (uint64_t *)(a2 + v15[6]);
    unint64_t v17 = v16[2];
    if (v17 >> 60 != 15 && (v17 & 0xF000000000000000) != 0xB000000000000000)
    {
      v39[1] = v39;
      uint64_t v19 = v16[1];
      uint64_t v41 = *v16;
      uint64_t v20 = MEMORY[0x1F4188790](v19);
      v39[-4] = v21;
      v39[-3] = v20;
      uint64_t v40 = v20;
      v39[-2] = v17;
      outlined copy of Data._Representation(v20, v17);
      static Message.with(_:)();
      uint64_t v22 = (uint64_t)a1 + *(int *)(v42 + 40);
      outlined destroy of UUID?(v22, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate((uint64_t)v9, v22, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
      v43(v22, 0, 1, v5);
      outlined consume of Attachment.MMCSMetadata.UploadStatus(v41, v40, v17);
    }
    uint64_t v23 = (uint64_t *)(a2 + v15[7]);
    uint64_t v25 = *v23;
    uint64_t v24 = v23[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *a1 = v25;
    a1[1] = v24;
    uint64_t v26 = URL.absoluteString.getter();
    uint64_t v28 = v27;
    swift_bridgeObjectRelease();
    a1[2] = v26;
    a1[3] = v28;
    uint64_t v29 = (uint64_t *)(a2 + v15[9]);
    uint64_t v30 = *v29;
    unint64_t v31 = v29[1];
    uint64_t v32 = a1[4];
    unint64_t v33 = a1[5];
    outlined copy of Data._Representation(*v29, v31);
    outlined consume of Data._Representation(v32, v33);
    a1[4] = v30;
    a1[5] = v31;
    uint64_t v34 = (uint64_t *)(a2 + v15[10]);
    uint64_t v35 = *v34;
    unint64_t v36 = v34[1];
    uint64_t v37 = a1[6];
    unint64_t v38 = a1[7];
    outlined copy of Data._Representation(*v34, v36);
    uint64_t result = outlined consume of Data._Representation(v37, v38);
    a1[6] = v35;
    a1[7] = v36;
  }
  return result;
}

uint64_t closure #1 in closure #1 in Attachment.MMCSMetadata.metadata.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AES.GCM.SealedBox();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v41 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v42 = (char *)&v37 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AES.GCM.SealedBox?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v37 - v12;
  uint64_t v14 = type metadata accessor for Attachment.MMCSMetadata(0);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = AES.GCM.SealedBox.combined.getter();
  if (v18 >> 60 == 15)
  {
    if (one-time initialization token for attachmentLedgerTopic != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Log.attachmentLedgerTopic);
    outlined init with copy of Attachment.MMCSMetadata(a2, (uint64_t)v16, type metadata accessor for Attachment.MMCSMetadata);
    uint64_t v20 = Logger.logObject.getter();
    int v21 = static os_log_type_t.error.getter();
    BOOL v22 = os_log_type_enabled(v20, (os_log_type_t)v21);
    uint64_t v23 = v43;
    if (v22)
    {
      int v40 = v21;
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      uint64_t v45 = v39;
      *(_DWORD *)uint64_t v24 = 136315138;
      uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
      v25(v13, v16, v4);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v13, 0, 1, v4);
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v13, (uint64_t)v11, &demangling cache variable for type metadata for AES.GCM.SealedBox?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v11, 1, v4) == 1)
      {
        unint64_t v26 = 0xE300000000000000;
        uint64_t v27 = 7104878;
      }
      else
      {
        unint64_t v31 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
        unint64_t v38 = v20;
        uint64_t v32 = v42;
        v31(v42, v11, v4);
        v25(v41, v32, v4);
        uint64_t v27 = String.init<A>(reflecting:)();
        unint64_t v26 = v33;
        uint64_t v34 = v32;
        uint64_t v20 = v38;
        (*(void (**)(char *, uint64_t))(v23 + 8))(v34, v4);
      }
      outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for AES.GCM.SealedBox?);
      uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v26, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v16, type metadata accessor for Attachment.MMCSMetadata);
      _os_log_impl(&dword_1B0DF7000, v20, (os_log_type_t)v40, "Failed to get combined data from encryptedAssetSkeleton SealedBox %s", v24, 0xCu);
      uint64_t v35 = v39;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v35, -1, -1);
      MEMORY[0x1B3EA39E0](v24, -1, -1);
    }
    else
    {
      outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v16, type metadata accessor for Attachment.MMCSMetadata);
    }

    lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
    swift_allocError();
    *unint64_t v36 = 3;
    return swift_willThrow();
  }
  else
  {
    uint64_t v28 = v17;
    unint64_t v29 = v18;
    uint64_t result = outlined consume of Data._Representation(*(void *)(a1 + 8), *(void *)(a1 + 16));
    *(void *)(a1 + 8) = v28;
    *(void *)(a1 + 16) = v29;
  }
  return result;
}

uint64_t Attachment.MMCSMetadata.UploadStatus.status.getter()
{
  uint64_t v1 = 2;
  if (*(void *)(v0 + 16) >> 60 == 11) {
    uint64_t v1 = 3;
  }
  if (*(void *)(v0 + 16) >> 60 == 15) {
    return 1;
  }
  else {
    return v1;
  }
}

BOOL static PluginAttachmentLedgerTopic.RetryErrors.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void PluginAttachmentLedgerTopic.RetryErrors.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int PluginAttachmentLedgerTopic.RetryErrors.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t PluginAttachmentLedgerTopic.ServerError.reason.getter(uint64_t a1)
{
  return a1;
}

uint64_t PluginAttachmentLedgerTopic.ServerError.reason.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*PluginAttachmentLedgerTopic.ServerError.reason.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

unint64_t PluginAttachmentLedgerTopic.ServerError.description.getter(uint64_t a1, void *a2)
{
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 41;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 0xD000000000000014;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance PluginAttachmentLedgerTopic.ServerError()
{
  return PluginAttachmentLedgerTopic.ServerError.description.getter(*(void *)v0, *(void **)(v0 + 8));
}

uint64_t PluginAttachmentLedgerTopic.Configuration.maxSubscribeRetries.getter()
{
  return *(void *)v0;
}

uint64_t PluginAttachmentLedgerTopic.Configuration.maxSubscribeRetries.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*PluginAttachmentLedgerTopic.Configuration.maxSubscribeRetries.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

double PluginAttachmentLedgerTopic.Configuration.subscribeRetryInterval.getter()
{
  return *(double *)(v0 + 8);
}

void PluginAttachmentLedgerTopic.Configuration.subscribeRetryInterval.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*PluginAttachmentLedgerTopic.Configuration.subscribeRetryInterval.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t PluginAttachmentLedgerTopic.Configuration.maxDataCryptorRetries.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t PluginAttachmentLedgerTopic.Configuration.maxDataCryptorRetries.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*PluginAttachmentLedgerTopic.Configuration.maxDataCryptorRetries.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

double PluginAttachmentLedgerTopic.Configuration.dataCryptorRetryInterval.getter()
{
  return *(double *)(v0 + 24);
}

void PluginAttachmentLedgerTopic.Configuration.dataCryptorRetryInterval.setter(double a1)
{
  *(double *)(v1 + 24) = a1;
}

uint64_t (*PluginAttachmentLedgerTopic.Configuration.dataCryptorRetryInterval.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

double PluginAttachmentLedgerTopic.Configuration.gracefulShutdownWindowInterval.getter()
{
  return *(double *)(v0 + 32);
}

void PluginAttachmentLedgerTopic.Configuration.gracefulShutdownWindowInterval.setter(double a1)
{
  *(double *)(v1 + 32) = a1;
}

uint64_t (*PluginAttachmentLedgerTopic.Configuration.gracefulShutdownWindowInterval.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

void PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

BOOL static PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason.< infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

Swift::Int PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

__n128 PluginAttachmentLedgerTopic.State.ShutdownInfo.config.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  __n128 result = *(__n128 *)(v1 + 24);
  *(__n128 *)(a1 + 24) = result;
  return result;
}

void PluginAttachmentLedgerTopic.State.ShutdownInfo.reason.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 40);
}

uint64_t PluginAttachmentLedgerTopic.State.ShutdownInfo.pendingAttachments.getter()
{
  return swift_bridgeObjectRetain();
}

void __swiftcall PluginAttachmentLedgerTopic.State.ShutdownInfo.init(reason:pendingAttachments:config:)(CopresenceCore::PluginAttachmentLedgerTopic::State::ShutdownInfo *__return_ptr retstr, CopresenceCore::PluginAttachmentLedgerTopic::State::ShutdownInfo::Reason reason, Swift::OpaquePointer pendingAttachments, CopresenceCore::PluginAttachmentLedgerTopic::Configuration *config)
{
  CopresenceCore::PluginAttachmentLedgerTopic::State::ShutdownInfo::Reason v4 = *(unsigned char *)reason;
  Swift::Double subscribeRetryInterval = config->subscribeRetryInterval;
  Swift::Int maxDataCryptorRetries = config->maxDataCryptorRetries;
  retstr->config.maxSubscribeRetries = config->maxSubscribeRetries;
  retstr->config.Swift::Double subscribeRetryInterval = subscribeRetryInterval;
  retstr->config.Swift::Int maxDataCryptorRetries = maxDataCryptorRetries;
  *(_OWORD *)&retstr->config.dataCryptorRetryInterval = *(_OWORD *)&config->dataCryptorRetryInterval;
  retstr->reason = v4;
  retstr->pendingAttachments = pendingAttachments;
}

uint64_t PluginAttachmentLedgerTopic.State.RetryInfo.attempt.getter()
{
  return *(void *)v0;
}

uint64_t PluginAttachmentLedgerTopic.State.RetryInfo.attempt.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*PluginAttachmentLedgerTopic.State.RetryInfo.attempt.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t PluginAttachmentLedgerTopic.State.RetryInfo.retryTask.getter()
{
  return swift_retain();
}

uint64_t PluginAttachmentLedgerTopic.State.RetryInfo.retryTask.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*PluginAttachmentLedgerTopic.State.RetryInfo.retryTask.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

void PluginAttachmentLedgerTopic.State.RetryInfo.init()(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t default argument 0 of PluginAttachmentLedgerTopic.State.RetryInfo.init(attempt:retryTask:)()
{
  return 0;
}

uint64_t PluginAttachmentLedgerTopic.State.RetryInfo.init(attempt:retryTask:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t PluginAttachmentLedgerTopic.State.comparativeResult.getter()
{
  unint64_t v1 = v0[5];
  if (!(v1 >> 62)) {
    return 1;
  }
  if (v1 >> 62 == 1) {
    return 4;
  }
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4] | v0[6];
  uint64_t v5 = v0[2] | v0[1];
  if (v1 == 0x8000000000000000 && (v4 | *v0 | v3 | v5) == 0) {
    return 0;
  }
  if (v4 | v3 | v5) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = *v0 == 1;
  }
  if (v7 && v1 == 0x8000000000000000) {
    return 2;
  }
  else {
    return 3;
  }
}

BOOL static PluginAttachmentLedgerTopic.State.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = a1[5];
  unint64_t v3 = a2[5];
  if (v2 >> 62)
  {
    if (v2 >> 62 == 1)
    {
      uint64_t v4 = 4;
      unint64_t v5 = v3 >> 62;
      if (!(v3 >> 62)) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v6 = *a1;
      uint64_t v7 = a1[3];
      uint64_t v8 = a1[4] | a1[6];
      uint64_t v9 = a1[2] | a1[1];
      if (v2 != 0x8000000000000000 || v8 | v6 | v7 | v9)
      {
        if (v8 | v7 | v9) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v6 == 1;
        }
        BOOL v16 = v15 && v2 == 0x8000000000000000;
        uint64_t v4 = 2;
        if (!v16) {
          uint64_t v4 = 3;
        }
        unint64_t v5 = v3 >> 62;
        if (!(v3 >> 62)) {
          goto LABEL_24;
        }
      }
      else
      {
        uint64_t v4 = 0;
        unint64_t v5 = v3 >> 62;
        if (!(v3 >> 62))
        {
LABEL_24:
          uint64_t v10 = 1;
          return v4 == v10;
        }
      }
    }
  }
  else
  {
    uint64_t v4 = 1;
    unint64_t v5 = v3 >> 62;
    if (!(v3 >> 62)) {
      goto LABEL_24;
    }
  }
  if (v5 == 1)
  {
    uint64_t v10 = 4;
  }
  else
  {
    uint64_t v11 = *a2;
    uint64_t v12 = a2[3];
    uint64_t v13 = a2[2] | a2[1];
    uint64_t v14 = a2[4] | a2[6];
    if (v3 != 0x8000000000000000 || v13 | v11 | v12 | v14)
    {
      if (v13 | v12 | v14) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v11 == 1;
      }
      BOOL v18 = v17 && v3 == 0x8000000000000000;
      uint64_t v10 = 2;
      if (!v18) {
        uint64_t v10 = 3;
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
  }
  return v4 == v10;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance PluginAttachmentLedgerTopic.State(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = a1[5];
  unint64_t v3 = a2[5];
  if (v2 >> 62)
  {
    if (v2 >> 62 == 1)
    {
      unint64_t v4 = 4;
      unint64_t v5 = v3 >> 62;
      if (!(v3 >> 62)) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v6 = *a1;
      uint64_t v7 = a1[3];
      uint64_t v8 = a1[4] | a1[6];
      uint64_t v9 = a1[2] | a1[1];
      if (v2 != 0x8000000000000000 || v8 | v6 | v7 | v9)
      {
        if (v8 | v7 | v9) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v6 == 1;
        }
        BOOL v16 = v15 && v2 == 0x8000000000000000;
        unint64_t v4 = 2;
        if (!v16) {
          unint64_t v4 = 3;
        }
        unint64_t v5 = v3 >> 62;
        if (!(v3 >> 62)) {
          goto LABEL_24;
        }
      }
      else
      {
        unint64_t v4 = 0;
        unint64_t v5 = v3 >> 62;
        if (!(v3 >> 62))
        {
LABEL_24:
          unint64_t v10 = 1;
          return v4 < v10;
        }
      }
    }
  }
  else
  {
    unint64_t v4 = 1;
    unint64_t v5 = v3 >> 62;
    if (!(v3 >> 62)) {
      goto LABEL_24;
    }
  }
  if (v5 == 1)
  {
    unint64_t v10 = 4;
  }
  else
  {
    uint64_t v11 = *a2;
    uint64_t v12 = a2[3];
    uint64_t v13 = a2[2] | a2[1];
    uint64_t v14 = a2[4] | a2[6];
    if (v3 != 0x8000000000000000 || v13 | v11 | v12 | v14)
    {
      if (v13 | v12 | v14) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v11 == 1;
      }
      BOOL v18 = v17 && v3 == 0x8000000000000000;
      unint64_t v10 = 2;
      if (!v18) {
        unint64_t v10 = 3;
      }
    }
    else
    {
      unint64_t v10 = 0;
    }
  }
  return v4 < v10;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance PluginAttachmentLedgerTopic.State(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = a1[5];
  unint64_t v3 = a2[5];
  if (v3 >> 62)
  {
    if (v3 >> 62 == 1)
    {
      unint64_t v4 = 4;
      unint64_t v5 = v2 >> 62;
      if (!(v2 >> 62)) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v6 = *a2;
      uint64_t v7 = a2[3];
      uint64_t v8 = a2[4] | a2[6];
      uint64_t v9 = a2[2] | a2[1];
      if (v3 != 0x8000000000000000 || v8 | v6 | v7 | v9)
      {
        if (v8 | v7 | v9) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v6 == 1;
        }
        BOOL v16 = v15 && v3 == 0x8000000000000000;
        unint64_t v4 = 2;
        if (!v16) {
          unint64_t v4 = 3;
        }
        unint64_t v5 = v2 >> 62;
        if (!(v2 >> 62)) {
          goto LABEL_24;
        }
      }
      else
      {
        unint64_t v4 = 0;
        unint64_t v5 = v2 >> 62;
        if (!(v2 >> 62))
        {
LABEL_24:
          unint64_t v10 = 1;
          return v4 >= v10;
        }
      }
    }
  }
  else
  {
    unint64_t v4 = 1;
    unint64_t v5 = v2 >> 62;
    if (!(v2 >> 62)) {
      goto LABEL_24;
    }
  }
  if (v5 == 1)
  {
    unint64_t v10 = 4;
  }
  else
  {
    uint64_t v11 = *a1;
    uint64_t v12 = a1[3];
    uint64_t v13 = a1[2] | a1[1];
    uint64_t v14 = a1[4] | a1[6];
    if (v2 != 0x8000000000000000 || v13 | v11 | v12 | v14)
    {
      if (v13 | v12 | v14) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v11 == 1;
      }
      BOOL v18 = v17 && v2 == 0x8000000000000000;
      unint64_t v10 = 2;
      if (!v18) {
        unint64_t v10 = 3;
      }
    }
    else
    {
      unint64_t v10 = 0;
    }
  }
  return v4 >= v10;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance PluginAttachmentLedgerTopic.State(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = a1[5];
  unint64_t v3 = a2[5];
  if (v2 >> 62)
  {
    if (v2 >> 62 == 1)
    {
      unint64_t v4 = 4;
      unint64_t v5 = v3 >> 62;
      if (!(v3 >> 62)) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v6 = *a1;
      uint64_t v7 = a1[3];
      uint64_t v8 = a1[4] | a1[6];
      uint64_t v9 = a1[2] | a1[1];
      if (v2 != 0x8000000000000000 || v8 | v6 | v7 | v9)
      {
        if (v8 | v7 | v9) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v6 == 1;
        }
        BOOL v16 = v15 && v2 == 0x8000000000000000;
        unint64_t v4 = 2;
        if (!v16) {
          unint64_t v4 = 3;
        }
        unint64_t v5 = v3 >> 62;
        if (!(v3 >> 62)) {
          goto LABEL_24;
        }
      }
      else
      {
        unint64_t v4 = 0;
        unint64_t v5 = v3 >> 62;
        if (!(v3 >> 62))
        {
LABEL_24:
          unint64_t v10 = 1;
          return v4 >= v10;
        }
      }
    }
  }
  else
  {
    unint64_t v4 = 1;
    unint64_t v5 = v3 >> 62;
    if (!(v3 >> 62)) {
      goto LABEL_24;
    }
  }
  if (v5 == 1)
  {
    unint64_t v10 = 4;
  }
  else
  {
    uint64_t v11 = *a2;
    uint64_t v12 = a2[3];
    uint64_t v13 = a2[2] | a2[1];
    uint64_t v14 = a2[4] | a2[6];
    if (v3 != 0x8000000000000000 || v13 | v11 | v12 | v14)
    {
      if (v13 | v12 | v14) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v11 == 1;
      }
      BOOL v18 = v17 && v3 == 0x8000000000000000;
      unint64_t v10 = 2;
      if (!v18) {
        unint64_t v10 = 3;
      }
    }
    else
    {
      unint64_t v10 = 0;
    }
  }
  return v4 >= v10;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance PluginAttachmentLedgerTopic.State(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = a1[5];
  unint64_t v3 = a2[5];
  if (v3 >> 62)
  {
    if (v3 >> 62 == 1)
    {
      unint64_t v4 = 4;
      unint64_t v5 = v2 >> 62;
      if (!(v2 >> 62)) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v6 = *a2;
      uint64_t v7 = a2[3];
      uint64_t v8 = a2[4] | a2[6];
      uint64_t v9 = a2[2] | a2[1];
      if (v3 != 0x8000000000000000 || v8 | v6 | v7 | v9)
      {
        if (v8 | v7 | v9) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v6 == 1;
        }
        BOOL v16 = v15 && v3 == 0x8000000000000000;
        unint64_t v4 = 2;
        if (!v16) {
          unint64_t v4 = 3;
        }
        unint64_t v5 = v2 >> 62;
        if (!(v2 >> 62)) {
          goto LABEL_24;
        }
      }
      else
      {
        unint64_t v4 = 0;
        unint64_t v5 = v2 >> 62;
        if (!(v2 >> 62))
        {
LABEL_24:
          unint64_t v10 = 1;
          return v4 < v10;
        }
      }
    }
  }
  else
  {
    unint64_t v4 = 1;
    unint64_t v5 = v2 >> 62;
    if (!(v2 >> 62)) {
      goto LABEL_24;
    }
  }
  if (v5 == 1)
  {
    unint64_t v10 = 4;
  }
  else
  {
    uint64_t v11 = *a1;
    uint64_t v12 = a1[3];
    uint64_t v13 = a1[2] | a1[1];
    uint64_t v14 = a1[4] | a1[6];
    if (v2 != 0x8000000000000000 || v13 | v11 | v12 | v14)
    {
      if (v13 | v12 | v14) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v11 == 1;
      }
      BOOL v18 = v17 && v2 == 0x8000000000000000;
      unint64_t v10 = 2;
      if (!v18) {
        unint64_t v10 = 3;
      }
    }
    else
    {
      unint64_t v10 = 0;
    }
  }
  return v4 < v10;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PluginAttachmentLedgerTopic.State(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = a1[5];
  unint64_t v3 = a2[5];
  if (v2 >> 62)
  {
    if (v2 >> 62 == 1)
    {
      uint64_t v4 = 4;
      unint64_t v5 = v3 >> 62;
      if (!(v3 >> 62)) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v6 = *a1;
      uint64_t v7 = a1[3];
      uint64_t v8 = a1[4] | a1[6];
      uint64_t v9 = a1[2] | a1[1];
      if (v2 != 0x8000000000000000 || v8 | v6 | v7 | v9)
      {
        if (v8 | v7 | v9) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v6 == 1;
        }
        BOOL v16 = v15 && v2 == 0x8000000000000000;
        uint64_t v4 = 2;
        if (!v16) {
          uint64_t v4 = 3;
        }
        unint64_t v5 = v3 >> 62;
        if (!(v3 >> 62)) {
          goto LABEL_24;
        }
      }
      else
      {
        uint64_t v4 = 0;
        unint64_t v5 = v3 >> 62;
        if (!(v3 >> 62))
        {
LABEL_24:
          uint64_t v10 = 1;
          return v4 == v10;
        }
      }
    }
  }
  else
  {
    uint64_t v4 = 1;
    unint64_t v5 = v3 >> 62;
    if (!(v3 >> 62)) {
      goto LABEL_24;
    }
  }
  if (v5 == 1)
  {
    uint64_t v10 = 4;
  }
  else
  {
    uint64_t v11 = *a2;
    uint64_t v12 = a2[3];
    uint64_t v13 = a2[2] | a2[1];
    uint64_t v14 = a2[4] | a2[6];
    if (v3 != 0x8000000000000000 || v13 | v11 | v12 | v14)
    {
      if (v13 | v12 | v14) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v11 == 1;
      }
      BOOL v18 = v17 && v3 == 0x8000000000000000;
      uint64_t v10 = 2;
      if (!v18) {
        uint64_t v10 = 3;
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
  }
  return v4 == v10;
}