uint64_t destroy for CP_SystemEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t vars8;

  if (*(unsigned __int8 *)(a1 + 16) != 255) {
    outlined consume of CP_SystemEvent.OneOf_Event();
  }
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t initializeWithCopy for CP_SystemEvent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v6 = *((unsigned __int8 *)a2 + 16);
  if (v6 == 255)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  }
  else
  {
    char v7 = v6 & 1;
    uint64_t v8 = *a2;
    uint64_t v9 = a2[1];
    outlined copy of CP_SystemEvent.OneOf_Event();
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v9;
    *(unsigned char *)(a1 + 16) = v7;
  }
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = (uint64_t)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t assignWithCopy for CP_SystemEvent(uint64_t a1, long long *a2, uint64_t a3)
{
  int v6 = *((unsigned __int8 *)a2 + 16);
  if (*(unsigned __int8 *)(a1 + 16) == 255)
  {
    if (v6 == 255)
    {
      long long v8 = *a2;
      *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
      *(_OWORD *)a1 = v8;
    }
    else
    {
      char v12 = v6 & 1;
      uint64_t v13 = *(void *)a2;
      uint64_t v14 = *((void *)a2 + 1);
      outlined copy of CP_SystemEvent.OneOf_Event();
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v14;
      *(unsigned char *)(a1 + 16) = v12;
    }
  }
  else if (v6 == 255)
  {
    outlined destroy of CP_SystemEvent.OneOf_Event(a1);
    char v7 = *((unsigned char *)a2 + 16);
    *(_OWORD *)a1 = *a2;
    *(unsigned char *)(a1 + 16) = v7;
  }
  else
  {
    char v9 = v6 & 1;
    uint64_t v10 = *(void *)a2;
    uint64_t v11 = *((void *)a2 + 1);
    outlined copy of CP_SystemEvent.OneOf_Event();
    *(void *)a1 = v10;
    *(void *)(a1 + 8) = v11;
    *(unsigned char *)(a1 + 16) = v9;
    outlined consume of CP_SystemEvent.OneOf_Event();
  }
  uint64_t v15 = *(int *)(a3 + 20);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = (uint64_t)a2 + v15;
  uint64_t v18 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t outlined destroy of CP_SystemEvent.OneOf_Event(uint64_t a1)
{
  return a1;
}

uint64_t initializeWithTake for CP_SystemEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for CP_SystemEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned __int8 *)(a1 + 16) != 255)
  {
    int v6 = *(unsigned __int8 *)(a2 + 16);
    if (v6 != 255)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 16) = v6 & 1;
      outlined consume of CP_SystemEvent.OneOf_Event();
      goto LABEL_6;
    }
    outlined destroy of CP_SystemEvent.OneOf_Event(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
LABEL_6:
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_SystemEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0FF3FBC);
}

uint64_t sub_1B0FF3FBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 253)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 16);
    if (v4 <= 1) {
      return 0;
    }
    else {
      return v4 ^ 0xFF;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CP_SystemEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0FF4078);
}

uint64_t sub_1B0FF4078(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 253)
  {
    *(unsigned char *)(result + 16) = ~(_BYTE)a2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for CP_SystemEvent()
{
  return type metadata completion function for CP_EncryptionID();
}

uint64_t destroy for CP_SystemEvent.OneOf_Event()
{
  return outlined consume of CP_SystemEvent.OneOf_Event();
}

uint64_t initializeBufferWithCopyOfBuffer for CP_SystemEvent.OneOf_Event(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  outlined copy of CP_SystemEvent.OneOf_Event();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for CP_SystemEvent.OneOf_Event(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  outlined copy of CP_SystemEvent.OneOf_Event();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of CP_SystemEvent.OneOf_Event();
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for CP_SystemEvent.OneOf_Event(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of CP_SystemEvent.OneOf_Event();
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_SystemEvent.OneOf_Event(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CP_SystemEvent.OneOf_Event(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for CP_SystemEvent.OneOf_Event(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for CP_SystemEvent.OneOf_Event(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for CP_SystemEvent.OneOf_Event()
{
  return &type metadata for CP_SystemEvent.OneOf_Event;
}

uint64_t *initializeBufferWithCopyOfBuffer for CP_SubscribeRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *a1 = *a2;
        uint64_t v11 = *(int *)(type metadata accessor for CP_SubscribeRequest.RecordAck(0) + 20);
        v39 = (char *)a1 + v11;
        char v12 = (char *)a2 + v11;
        uint64_t v13 = type metadata accessor for UnknownStorage();
        uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
        swift_bridgeObjectRetain();
        v14(v39, v12, v13);
      }
      else
      {
        uint64_t v15 = a2[1];
        *a1 = *a2;
        a1[1] = v15;
        uint64_t v16 = a2[3];
        a1[2] = a2[2];
        a1[3] = v16;
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        uint64_t v17 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
        uint64_t v18 = *(int *)(v17 + 36);
        v35 = (char *)a1 + v18;
        uint64_t v37 = v17;
        v34 = (char *)a2 + v18;
        uint64_t v19 = type metadata accessor for UnknownStorage();
        v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v21 = v35;
        uint64_t v40 = v19;
        v36 = v20;
        v20(v21, v34, v19);
        uint64_t v22 = *(int *)(v37 + 40);
        v23 = (uint64_t *)((char *)a1 + v22);
        v24 = (uint64_t *)((char *)a2 + v22);
        uint64_t v25 = type metadata accessor for CP_EncryptionID(0);
        uint64_t v26 = *(void *)(v25 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
        {
          uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
          memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
        }
        else
        {
          unint64_t v28 = v24[1];
          uint64_t v38 = *v24;
          outlined copy of Data._Representation(*v24, v28);
          void *v23 = v38;
          v23[1] = v28;
          v36((char *)v23 + *(int *)(v25 + 20), (char *)v24 + *(int *)(v25 + 20), v40);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v29 = *(int *)(a3 + 20);
    v30 = (char *)a1 + v29;
    v31 = (char *)a2 + v29;
    uint64_t v32 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16))(v30, v31, v32);
  }
  return a1;
}

uint64_t destroy for CP_SubscribeRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4))
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v5 = a1 + *(int *)(type metadata accessor for CP_SubscribeRequest.RecordAck(0) + 20);
      uint64_t v6 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v7 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
      uint64_t v8 = a1 + *(int *)(v7 + 36);
      uint64_t v9 = type metadata accessor for UnknownStorage();
      uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
      v10(v8, v9);
      uint64_t v11 = a1 + *(int *)(v7 + 40);
      uint64_t v12 = type metadata accessor for CP_EncryptionID(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12))
      {
        outlined consume of Data._Representation(*(void *)v11, *(void *)(v11 + 8));
        v10(v11 + *(int *)(v12 + 20), v9);
      }
    }
  }
  uint64_t v13 = a1 + *(int *)(a2 + 20);
  uint64_t v14 = type metadata accessor for UnknownStorage();
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8);
  return v15(v13, v14);
}

void *initializeWithCopy for CP_SubscribeRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    uint64_t v39 = a3;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      uint64_t v9 = *(int *)(type metadata accessor for CP_SubscribeRequest.RecordAck(0) + 20);
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for UnknownStorage();
      uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
      swift_bridgeObjectRetain();
      v13(v10, v11, v12);
    }
    else
    {
      uint64_t v14 = a2[1];
      *a1 = *a2;
      a1[1] = v14;
      uint64_t v15 = a2[3];
      a1[2] = a2[2];
      a1[3] = v15;
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      uint64_t v16 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
      uint64_t v17 = *(int *)(v16 + 36);
      v35 = (char *)a2 + v17;
      uint64_t v37 = (char *)a1 + v17;
      uint64_t v18 = type metadata accessor for UnknownStorage();
      uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v21 = v35;
      v20 = v37;
      v36 = v19;
      uint64_t v38 = v18;
      v19(v20, v21, v18);
      uint64_t v22 = *(int *)(v16 + 40);
      v23 = (void *)((char *)a1 + v22);
      v24 = (void *)((char *)a2 + v22);
      uint64_t v25 = type metadata accessor for CP_EncryptionID(0);
      uint64_t v26 = *(void *)(v25 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
      }
      else
      {
        uint64_t v28 = *v24;
        unint64_t v29 = v24[1];
        outlined copy of Data._Representation(*v24, v29);
        void *v23 = v28;
        v23[1] = v29;
        v36((char *)v23 + *(int *)(v25 + 20), (char *)v24 + *(int *)(v25 + 20), v38);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      }
      a3 = v39;
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v30 = *(int *)(a3 + 20);
  v31 = (char *)a1 + v30;
  uint64_t v32 = (char *)a2 + v30;
  uint64_t v33 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16))(v31, v32, v33);
  return a1;
}

void *assignWithCopy for CP_SubscribeRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *a1 = *a2;
        uint64_t v11 = *(int *)(type metadata accessor for CP_SubscribeRequest.RecordAck(0) + 20);
        v63 = (char *)a1 + v11;
        uint64_t v12 = (char *)a2 + v11;
        uint64_t v13 = a3;
        uint64_t v14 = type metadata accessor for UnknownStorage();
        uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
        swift_bridgeObjectRetain();
        uint64_t v16 = v14;
        a3 = v13;
        v15(v63, v12, v16);
      }
      else
      {
        uint64_t v65 = a3;
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        uint64_t v23 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
        uint64_t v24 = *(int *)(v23 + 36);
        v56 = (char *)a2 + v24;
        v57 = (char *)a1 + v24;
        uint64_t v25 = type metadata accessor for UnknownStorage();
        uint64_t v26 = *(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v27 = v57;
        v58 = v26;
        uint64_t v60 = v25;
        v26(v27, v56, v25);
        uint64_t v28 = *(int *)(v23 + 40);
        unint64_t v29 = (void *)((char *)a1 + v28);
        uint64_t v30 = (void *)((char *)a2 + v28);
        uint64_t v31 = type metadata accessor for CP_EncryptionID(0);
        uint64_t v32 = *(void *)(v31 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
        {
          uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
          memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
        }
        else
        {
          uint64_t v47 = *v30;
          unint64_t v48 = v30[1];
          outlined copy of Data._Representation(*v30, v48);
          *unint64_t v29 = v47;
          v29[1] = v48;
          v58((char *)v29 + *(int *)(v31 + 20), (char *)v30 + *(int *)(v31 + 20), v60);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
        }
        a3 = v65;
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_20;
    }
LABEL_7:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
    memcpy(a1, a2, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_20;
  }
  if (v10)
  {
    outlined destroy of CP_SequenceNumber((uint64_t)a1, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    uint64_t v64 = a3;
    outlined destroy of CP_SequenceNumber((uint64_t)a1, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      uint64_t v18 = *(int *)(type metadata accessor for CP_SubscribeRequest.RecordAck(0) + 20);
      uint64_t v19 = (char *)a1 + v18;
      v20 = (char *)a2 + v18;
      uint64_t v21 = type metadata accessor for UnknownStorage();
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16);
      swift_bridgeObjectRetain();
      v22(v19, v20, v21);
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      uint64_t v34 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
      uint64_t v35 = *(int *)(v34 + 36);
      v59 = (char *)a2 + v35;
      v61 = (char *)a1 + v35;
      uint64_t v36 = type metadata accessor for UnknownStorage();
      uint64_t v37 = *(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v38 = v61;
      uint64_t v62 = v36;
      uint64_t v39 = v36;
      uint64_t v40 = v37;
      v37(v38, v59, v39);
      uint64_t v41 = *(int *)(v34 + 40);
      v42 = (void *)((char *)a1 + v41);
      v43 = (void *)((char *)a2 + v41);
      uint64_t v44 = type metadata accessor for CP_EncryptionID(0);
      uint64_t v45 = *(void *)(v44 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
      {
        uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
      }
      else
      {
        uint64_t v49 = *v43;
        unint64_t v50 = v43[1];
        outlined copy of Data._Representation(*v43, v50);
        void *v42 = v49;
        v42[1] = v50;
        v40((char *)v42 + *(int *)(v44 + 20), (char *)v43 + *(int *)(v44 + 20), v62);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
      }
    }
    swift_storeEnumTagMultiPayload();
    a3 = v64;
  }
LABEL_20:
  uint64_t v51 = *(int *)(a3 + 20);
  v52 = (char *)a1 + v51;
  v53 = (char *)a2 + v51;
  uint64_t v54 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 24))(v52, v53, v54);
  return a1;
}

_OWORD *initializeWithTake for CP_SubscribeRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(void *)a1 = *(void *)a2;
      uint64_t v9 = *(int *)(type metadata accessor for CP_SubscribeRequest.RecordAck(0) + 20);
      int v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
    }
    else
    {
      long long v13 = a2[1];
      *a1 = *a2;
      a1[1] = v13;
      a1[2] = a2[2];
      uint64_t v14 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
      uint64_t v15 = *(int *)(v14 + 36);
      uint64_t v16 = (char *)a1 + v15;
      uint64_t v17 = (char *)a2 + v15;
      uint64_t v18 = type metadata accessor for UnknownStorage();
      uint64_t v30 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32);
      v30(v16, v17, v18);
      uint64_t v19 = *(int *)(v14 + 40);
      v20 = (_OWORD *)((char *)a1 + v19);
      uint64_t v21 = (_OWORD *)((char *)a2 + v19);
      uint64_t v22 = type metadata accessor for CP_EncryptionID(0);
      uint64_t v23 = *(void *)(v22 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
      }
      else
      {
        _OWORD *v20 = *v21;
        v30((char *)v20 + *(int *)(v22 + 20), (char *)v21 + *(int *)(v22 + 20), v18);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v25 = *(int *)(a3 + 20);
  uint64_t v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  uint64_t v28 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v26, v27, v28);
  return a1;
}

_OWORD *assignWithTake for CP_SubscribeRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *(void *)a1 = *(void *)a2;
        uint64_t v11 = *(int *)(type metadata accessor for CP_SubscribeRequest.RecordAck(0) + 20);
        uint64_t v12 = (char *)a1 + v11;
        long long v13 = (char *)a2 + v11;
        uint64_t v14 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
      }
      else
      {
        long long v20 = a2[1];
        *a1 = *a2;
        a1[1] = v20;
        a1[2] = a2[2];
        uint64_t v21 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
        uint64_t v22 = *(int *)(v21 + 36);
        uint64_t v23 = (char *)a1 + v22;
        uint64_t v24 = (char *)a2 + v22;
        uint64_t v25 = type metadata accessor for UnknownStorage();
        unint64_t v50 = *(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 32);
        v50(v23, v24, v25);
        uint64_t v26 = *(int *)(v21 + 40);
        uint64_t v27 = (_OWORD *)((char *)a1 + v26);
        uint64_t v28 = (_OWORD *)((char *)a2 + v26);
        uint64_t v29 = type metadata accessor for CP_EncryptionID(0);
        uint64_t v30 = *(void *)(v29 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
        {
          uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
          memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
        }
        else
        {
          *uint64_t v27 = *v28;
          v50((char *)v27 + *(int *)(v29 + 20), (char *)v28 + *(int *)(v29 + 20), v25);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_17;
    }
LABEL_7:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
    memcpy(a1, a2, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_17;
  }
  if (v10)
  {
    outlined destroy of CP_SequenceNumber((uint64_t)a1, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of CP_SequenceNumber((uint64_t)a1, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(void *)a1 = *(void *)a2;
      uint64_t v16 = *(int *)(type metadata accessor for CP_SubscribeRequest.RecordAck(0) + 20);
      uint64_t v17 = (char *)a1 + v16;
      uint64_t v18 = (char *)a2 + v16;
      uint64_t v19 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      long long v32 = a2[1];
      *a1 = *a2;
      a1[1] = v32;
      a1[2] = a2[2];
      uint64_t v33 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
      uint64_t v34 = *(int *)(v33 + 36);
      uint64_t v35 = (char *)a1 + v34;
      uint64_t v36 = (char *)a2 + v34;
      uint64_t v37 = type metadata accessor for UnknownStorage();
      uint64_t v38 = (void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32);
      uint64_t v51 = *v38;
      (*v38)(v35, v36, v37);
      uint64_t v39 = *(int *)(v33 + 40);
      uint64_t v40 = (_OWORD *)((char *)a1 + v39);
      uint64_t v41 = (_OWORD *)((char *)a2 + v39);
      uint64_t v42 = type metadata accessor for CP_EncryptionID(0);
      uint64_t v43 = *(void *)(v42 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
      }
      else
      {
        *uint64_t v40 = *v41;
        v51((char *)v40 + *(int *)(v42 + 20), (char *)v41 + *(int *)(v42 + 20), v37);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_17:
  uint64_t v45 = *(int *)(a3 + 20);
  uint64_t v46 = (char *)a1 + v45;
  uint64_t v47 = (char *)a2 + v45;
  uint64_t v48 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 40))(v46, v47, v48);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_SubscribeRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0FF5B1C);
}

uint64_t sub_1B0FF5B1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_149Tm(a1, a2, a3, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
}

uint64_t storeEnumTagSinglePayload for CP_SubscribeRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0FF5B3C);
}

uint64_t sub_1B0FF5B3C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_150Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
}

void type metadata completion function for CP_SubscribeRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t initializeBufferWithCopyOfBuffer for CP_SubscribeRequest.OneOf_Operation(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *(void *)a1 = *a2;
    a1 = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(void *)a1 = *a2;
      uint64_t v6 = *(int *)(type metadata accessor for CP_SubscribeRequest.RecordAck(0) + 20);
      uint64_t v7 = a1 + v6;
      uint64_t v8 = (uint64_t)a2 + v6;
      uint64_t v9 = type metadata accessor for UnknownStorage();
      int v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
      swift_bridgeObjectRetain();
      v10(v7, v8, v9);
    }
    else
    {
      uint64_t v12 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v12;
      uint64_t v13 = a2[3];
      *(void *)(a1 + 16) = a2[2];
      *(void *)(a1 + 24) = v13;
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      uint64_t v14 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
      uint64_t v15 = *(int *)(v14 + 36);
      uint64_t v27 = (char *)a2 + v15;
      uint64_t v28 = (char *)(a1 + v15);
      uint64_t v16 = type metadata accessor for UnknownStorage();
      uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v17(v28, v27, v16);
      uint64_t v18 = *(int *)(v14 + 40);
      uint64_t v19 = (void *)(a1 + v18);
      long long v20 = (uint64_t *)((char *)a2 + v18);
      uint64_t v21 = type metadata accessor for CP_EncryptionID(0);
      uint64_t v22 = *(void *)(v21 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      {
        uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        uint64_t v24 = *v20;
        unint64_t v25 = v20[1];
        outlined copy of Data._Representation(*v20, v25);
        *uint64_t v19 = v24;
        v19[1] = v25;
        v17((char *)v19 + *(int *)(v21 + 20), (char *)v20 + *(int *)(v21 + 20), v16);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for CP_SubscribeRequest.OneOf_Operation(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = a1 + *(int *)(type metadata accessor for CP_SubscribeRequest.RecordAck(0) + 20);
    uint64_t v3 = type metadata accessor for UnknownStorage();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    uint64_t v5 = v3;
    uint64_t v6 = v2;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v7 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
    uint64_t v8 = a1 + *(int *)(v7 + 36);
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
    v13(v8, v9);
    uint64_t v10 = a1 + *(int *)(v7 + 40);
    uint64_t v11 = type metadata accessor for CP_EncryptionID(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11);
    if (result) {
      return result;
    }
    outlined consume of Data._Representation(*(void *)v10, *(void *)(v10 + 8));
    uint64_t v6 = v10 + *(int *)(v11 + 20);
    uint64_t v5 = v9;
    uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))v13;
  }
  return v4(v6, v5);
}

uint64_t initializeWithCopy for CP_SubscribeRequest.OneOf_Operation(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(void *)a1 = *(void *)a2;
    uint64_t v4 = *(int *)(type metadata accessor for CP_SubscribeRequest.RecordAck(0) + 20);
    uint64_t v5 = a1 + v4;
    uint64_t v6 = a2 + v4;
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
    swift_bridgeObjectRetain();
    v8(v5, v6, v7);
  }
  else
  {
    uint64_t v9 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v9;
    uint64_t v10 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v10;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    uint64_t v11 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
    uint64_t v12 = *(int *)(v11 + 36);
    uint64_t v13 = (char *)(a1 + v12);
    unint64_t v25 = (char *)(a2 + v12);
    uint64_t v14 = type metadata accessor for UnknownStorage();
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15(v13, v25, v14);
    uint64_t v16 = *(int *)(v11 + 40);
    uint64_t v17 = (void *)(a1 + v16);
    uint64_t v18 = (uint64_t *)(a2 + v16);
    uint64_t v19 = type metadata accessor for CP_EncryptionID(0);
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      uint64_t v22 = *v18;
      unint64_t v23 = v18[1];
      outlined copy of Data._Representation(*v18, v23);
      *uint64_t v17 = v22;
      v17[1] = v23;
      v15((char *)v17 + *(int *)(v19 + 20), (char *)v18 + *(int *)(v19 + 20), v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for CP_SubscribeRequest.OneOf_Operation(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of CP_SequenceNumber((uint64_t)a1, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      uint64_t v4 = *(int *)(type metadata accessor for CP_SubscribeRequest.RecordAck(0) + 20);
      uint64_t v5 = (char *)a1 + v4;
      uint64_t v6 = (char *)a2 + v4;
      uint64_t v7 = type metadata accessor for UnknownStorage();
      uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
      swift_bridgeObjectRetain();
      v8(v5, v6, v7);
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      uint64_t v9 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
      uint64_t v10 = *(int *)(v9 + 36);
      uint64_t v11 = (char *)a1 + v10;
      unint64_t v23 = (char *)a2 + v10;
      uint64_t v12 = type metadata accessor for UnknownStorage();
      uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v13(v11, v23, v12);
      uint64_t v14 = *(int *)(v9 + 40);
      uint64_t v15 = (void *)((char *)a1 + v14);
      uint64_t v16 = (void *)((char *)a2 + v14);
      uint64_t v17 = type metadata accessor for CP_EncryptionID(0);
      uint64_t v18 = *(void *)(v17 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
      }
      else
      {
        uint64_t v20 = *v16;
        unint64_t v21 = v16[1];
        outlined copy of Data._Representation(*v16, v21);
        *uint64_t v15 = v20;
        v15[1] = v21;
        v13((char *)v15 + *(int *)(v17 + 20), (char *)v16 + *(int *)(v17 + 20), v12);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for CP_SubscribeRequest.OneOf_Operation(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(void *)a1 = *(void *)a2;
    uint64_t v4 = *(int *)(type metadata accessor for CP_SubscribeRequest.RecordAck(0) + 20);
    uint64_t v5 = a1 + v4;
    uint64_t v6 = a2 + v4;
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    uint64_t v9 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
    uint64_t v10 = *(int *)(v9 + 36);
    uint64_t v11 = (char *)(a1 + v10);
    uint64_t v12 = (char *)(a2 + v10);
    uint64_t v13 = type metadata accessor for UnknownStorage();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32);
    v14(v11, v12, v13);
    uint64_t v15 = *(int *)(v9 + 40);
    uint64_t v16 = (_OWORD *)(a1 + v15);
    uint64_t v17 = (_OWORD *)(a2 + v15);
    uint64_t v18 = type metadata accessor for CP_EncryptionID(0);
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      *uint64_t v16 = *v17;
      v14((char *)v16 + *(int *)(v18 + 20), (char *)v17 + *(int *)(v18 + 20), v13);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for CP_SubscribeRequest.OneOf_Operation(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of CP_SequenceNumber(a1, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(void *)a1 = *(void *)a2;
      uint64_t v4 = *(int *)(type metadata accessor for CP_SubscribeRequest.RecordAck(0) + 20);
      uint64_t v5 = a1 + v4;
      uint64_t v6 = a2 + v4;
      uint64_t v7 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
    }
    else
    {
      long long v8 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v8;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      uint64_t v9 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
      uint64_t v10 = *(int *)(v9 + 36);
      uint64_t v11 = a1 + v10;
      uint64_t v12 = a2 + v10;
      uint64_t v13 = type metadata accessor for UnknownStorage();
      uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32);
      v14(v11, v12, v13);
      uint64_t v15 = *(int *)(v9 + 40);
      uint64_t v16 = (_OWORD *)(a1 + v15);
      uint64_t v17 = (_OWORD *)(a2 + v15);
      uint64_t v18 = type metadata accessor for CP_EncryptionID(0);
      uint64_t v19 = *(void *)(v18 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        *uint64_t v16 = *v17;
        v14((uint64_t)v16 + *(int *)(v18 + 20), (uint64_t)v17 + *(int *)(v18 + 20), v13);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for CP_SubscribeRequest.OneOf_Operation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for CP_TopicSubscribersRequest.OneOf_Operation(a1, a2, a3, type metadata accessor for CP_SubscribeRequest.Initialize, type metadata accessor for CP_SubscribeRequest.RecordAck);
}

uint64_t type metadata completion function for CP_TopicSubscribersRequest.OneOf_Operation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t))
{
  uint64_t result = a4(319);
  if (v7 <= 0x3F)
  {
    uint64_t result = a5(319);
    if (v8 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for CP_SubscribeRequest.Initialize(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = *(int *)(a3 + 36);
    uint64_t v10 = a1 + v9;
    uint64_t v23 = (uint64_t)a2 + v9;
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v10, v23, v11);
    uint64_t v13 = *(int *)(a3 + 40);
    uint64_t v14 = (void *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = type metadata accessor for CP_EncryptionID(0);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v20 = *v15;
      unint64_t v21 = v15[1];
      outlined copy of Data._Representation(*v15, v21);
      *uint64_t v14 = v20;
      v14[1] = v21;
      v12((uint64_t)v14 + *(int *)(v16 + 20), (uint64_t)v15 + *(int *)(v16 + 20), v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
  }
  return v4;
}

uint64_t destroy for CP_SubscribeRequest.Initialize(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 40);
  uint64_t v7 = type metadata accessor for CP_EncryptionID(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    outlined consume of Data._Representation(*(void *)v6, *(void *)(v6 + 8));
    uint64_t v9 = v6 + *(int *)(v7 + 20);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

uint64_t initializeWithCopy for CP_SubscribeRequest.Initialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = (char *)(a1 + v8);
  unint64_t v21 = (char *)(a2 + v8);
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v9, v21, v10);
  uint64_t v12 = *(int *)(a3 + 40);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v15 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v18 = *v14;
    unint64_t v19 = v14[1];
    outlined copy of Data._Representation(*v14, v19);
    *uint64_t v13 = v18;
    v13[1] = v19;
    v11((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

void *assignWithCopy for CP_SubscribeRequest.Initialize(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v26 = *(void *)(v9 - 8);
  uint64_t v27 = v9;
  uint64_t v10 = *(void (**)(char *, char *))(v26 + 24);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 40);
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, v14);
  int v17 = v16(v13, 1, v14);
  if (!v8)
  {
    if (!v17)
    {
      uint64_t v22 = *v13;
      unint64_t v23 = v13[1];
      outlined copy of Data._Representation(*v13, v23);
      uint64_t v24 = *v12;
      unint64_t v25 = v12[1];
      *uint64_t v12 = v22;
      v12[1] = v23;
      outlined consume of Data._Representation(v24, v25);
      ((void (*)(char *, char *, uint64_t))v10)((char *)v12 + *(int *)(v14 + 20), (char *)v13 + *(int *)(v14 + 20), v27);
      return a1;
    }
    outlined destroy of CP_SequenceNumber((uint64_t)v12, type metadata accessor for CP_EncryptionID);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
    memcpy(v12, v13, *(void *)(*(void *)(v20 - 8) + 64));
    return a1;
  }
  uint64_t v18 = *v13;
  unint64_t v19 = v13[1];
  outlined copy of Data._Representation(*v13, v19);
  *uint64_t v12 = v18;
  v12[1] = v19;
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))((char *)v12 + *(int *)(v14 + 20), (char *)v13 + *(int *)(v14 + 20), v27);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return a1;
}

_OWORD *initializeWithTake for CP_SubscribeRequest.Initialize(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 40);
  uint64_t v13 = (_OWORD *)((char *)a1 + v12);
  uint64_t v14 = (_OWORD *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    *uint64_t v13 = *v14;
    v11((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v10);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

uint64_t assignWithTake for CP_SubscribeRequest.Initialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v23 = *(void *)(v10 - 8);
  uint64_t v24 = v10;
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v23 + 40);
  ((void (*)(uint64_t, uint64_t))v11)(v8, v9);
  uint64_t v12 = *(int *)(a3 + 40);
  uint64_t v13 = (uint64_t *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v15 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v9) = v17(v13, 1, v15);
  int v18 = v17(v14, 1, v15);
  if (!v9)
  {
    if (!v18)
    {
      uint64_t v21 = *v13;
      unint64_t v22 = v13[1];
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
      outlined consume of Data._Representation(v21, v22);
      v11((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v24);
      return a1;
    }
    outlined destroy of CP_SequenceNumber((uint64_t)v13, type metadata accessor for CP_EncryptionID);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
    memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64));
    return a1;
  }
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v24);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_SubscribeRequest.Initialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0FF7520);
}

uint64_t sub_1B0FF7520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 36);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 40);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for CP_SubscribeRequest.Initialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0FF7664);
}

uint64_t sub_1B0FF7664(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 36);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 40);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for CP_SubscribeRequest.Initialize()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CP_SequenceNumber?(319, &lazy cache variable for type metadata for CP_EncryptionID?, (void (*)(uint64_t))type metadata accessor for CP_EncryptionID);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for CP_SubscribeRequest.RecordAck(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for CP_SubscribeRequest.RecordAck(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for CP_SubscribeRequest.RecordAck(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

void *assignWithCopy for CP_SubscribeRequest.RecordAck(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *initializeWithTake for CP_SubscribeRequest.RecordAck(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for CP_SubscribeRequest.RecordAck(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_SubscribeRequest.RecordAck(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0FF7C48);
}

uint64_t sub_1B0FF7C48(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CP_SubscribeRequest.RecordAck(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0FF7D0C);
}

void *sub_1B0FF7D0C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for CP_SubscribeRequest.RecordAck()
{
  return type metadata completion function for CP_EncryptionID();
}

uint64_t *initializeBufferWithCopyOfBuffer for CP_SubscribeResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        *a1 = *a2;
        *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
        uint64_t v27 = a2[3];
        a1[2] = a2[2];
        a1[3] = v27;
        *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
        uint64_t v28 = *(int *)(type metadata accessor for CP_SubscribeResponse.TopicUpdate(0) + 32);
        v77 = (char *)a1 + v28;
        uint64_t v29 = (char *)a2 + v28;
        uint64_t v30 = type metadata accessor for UnknownStorage();
        uint64_t v31 = *(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16);
        swift_bridgeObjectRetain();
        v31(v77, v29, v30);
      }
      else if (EnumCaseMultiPayload == 1)
      {
        uint64_t v12 = a2[1];
        *a1 = *a2;
        a1[1] = v12;
        uint64_t v13 = a2[2];
        unint64_t v14 = a2[3];
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v13, v14);
        a1[2] = v13;
        a1[3] = v14;
        uint64_t v15 = a2[5];
        a1[4] = a2[4];
        a1[5] = v15;
        uint64_t v16 = type metadata accessor for CP_Record(0);
        uint64_t v17 = *(int *)(v16 + 32);
        v72 = (char *)a2 + v17;
        v75 = (char *)a1 + v17;
        uint64_t v18 = type metadata accessor for UnknownStorage();
        uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16);
        swift_bridgeObjectRetain();
        uint64_t v20 = v72;
        v73 = v19;
        v19(v75, v20, v18);
        uint64_t v76 = v16;
        uint64_t v21 = *(int *)(v16 + 36);
        unint64_t v22 = (_OWORD *)((char *)a1 + v21);
        uint64_t v23 = (_OWORD *)((char *)a2 + v21);
        uint64_t v24 = type metadata accessor for CP_SequenceNumber(0);
        uint64_t v25 = *(void *)(v24 - 8);
        uint64_t v69 = v18;
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
        {
          uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
          memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
        }
        else
        {
          *unint64_t v22 = *v23;
          v73((char *)v22 + *(int *)(v24 + 24), (char *)v23 + *(int *)(v24 + 24), v18);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
        }
        uint64_t v43 = *(int *)(v76 + 40);
        uint64_t v44 = (uint64_t *)((char *)a1 + v43);
        uint64_t v45 = (uint64_t *)((char *)a2 + v43);
        uint64_t v46 = type metadata accessor for CP_EncryptionID(0);
        uint64_t v47 = *(void *)(v46 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
        {
          uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
          memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64));
        }
        else
        {
          uint64_t v79 = v8;
          uint64_t v58 = *v45;
          unint64_t v59 = v45[1];
          outlined copy of Data._Representation(*v45, v59);
          *uint64_t v44 = v58;
          v44[1] = v59;
          uint64_t v8 = v79;
          v73((char *)v44 + *(int *)(v46 + 20), (char *)v45 + *(int *)(v46 + 20), v69);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
        }
      }
      else
      {
        uint64_t v78 = v8;
        *a1 = *a2;
        *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
        uint64_t v32 = a2[3];
        a1[2] = a2[2];
        a1[3] = v32;
        uint64_t v33 = a2[5];
        a1[4] = a2[4];
        a1[5] = v33;
        uint64_t v70 = a2[7];
        a1[6] = a2[6];
        a1[7] = v70;
        uint64_t v34 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
        uint64_t v35 = *(int *)(v34 + 40);
        v66 = (char *)a2 + v35;
        v67 = (char *)a1 + v35;
        uint64_t v36 = type metadata accessor for UnknownStorage();
        v74 = *(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v74(v67, v66, v36);
        uint64_t v71 = v34;
        uint64_t v37 = *(int *)(v34 + 44);
        uint64_t v38 = (uint64_t *)((char *)a1 + v37);
        uint64_t v39 = (uint64_t *)((char *)a2 + v37);
        uint64_t v40 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
        uint64_t v41 = *(void *)(v40 - 8);
        uint64_t v65 = v36;
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
        {
          uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
          memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
        }
        else
        {
          uint64_t v49 = v39[1];
          *uint64_t v38 = *v39;
          v38[1] = v49;
          uint64_t v50 = *(int *)(v40 + 24);
          v68 = (char *)v38 + v50;
          uint64_t v51 = (char *)v39 + v50;
          swift_bridgeObjectRetain();
          v74(v68, v51, v36);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
        }
        uint64_t v8 = v78;
        uint64_t v52 = *(int *)(v71 + 48);
        v53 = (_OWORD *)((char *)a1 + v52);
        uint64_t v54 = (_OWORD *)((char *)a2 + v52);
        uint64_t v55 = type metadata accessor for CP_SequenceNumber(0);
        uint64_t v56 = *(void *)(v55 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
        {
          uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
          memcpy(v53, v54, *(void *)(*(void *)(v57 - 8) + 64));
        }
        else
        {
          _OWORD *v53 = *v54;
          v74((char *)v53 + *(int *)(v55 + 24), (char *)v54 + *(int *)(v55 + 24), v65);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v60 = *(int *)(a3 + 20);
    v61 = (char *)a1 + v60;
    uint64_t v62 = (char *)a2 + v60;
    uint64_t v63 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 16))(v61, v62, v63);
  }
  return a1;
}

uint64_t destroy for CP_SubscribeResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4)) {
    goto LABEL_2;
  }
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      swift_bridgeObjectRelease();
      uint64_t v19 = a1 + *(int *)(type metadata accessor for CP_SubscribeResponse.TopicUpdate(0) + 32);
      uint64_t v20 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
      break;
    case 1:
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(*(void *)(a1 + 16), *(void *)(a1 + 24));
      swift_bridgeObjectRelease();
      uint64_t v21 = (int *)type metadata accessor for CP_Record(0);
      uint64_t v22 = a1 + v21[8];
      uint64_t v12 = type metadata accessor for UnknownStorage();
      uint64_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);
      v13(v22, v12);
      uint64_t v23 = a1 + v21[9];
      uint64_t v24 = type metadata accessor for CP_SequenceNumber(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v23, 1, v24)) {
        v13(v23 + *(int *)(v24 + 24), v12);
      }
      uint64_t v16 = a1 + v21[10];
      uint64_t v25 = type metadata accessor for CP_EncryptionID(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v16, 1, v25))
      {
        outlined consume of Data._Representation(*(void *)v16, *(void *)(v16 + 8));
        uint64_t v18 = *(int *)(v25 + 20);
        goto LABEL_17;
      }
      break;
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v10 = (int *)type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
      uint64_t v11 = a1 + v10[10];
      uint64_t v12 = type metadata accessor for UnknownStorage();
      uint64_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);
      v13(v11, v12);
      uint64_t v14 = a1 + v10[11];
      uint64_t v15 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
      {
        swift_bridgeObjectRelease();
        v13(v14 + *(int *)(v15 + 24), v12);
      }
      uint64_t v16 = a1 + v10[12];
      uint64_t v17 = type metadata accessor for CP_SequenceNumber(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v16, 1, v17))
      {
        uint64_t v18 = *(int *)(v17 + 24);
LABEL_17:
        v13(v16 + v18, v12);
      }
      break;
  }
LABEL_2:
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  return v7(v5, v6);
}

void *initializeWithCopy for CP_SubscribeResponse(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v79 = v7;
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
      uint64_t v26 = a2[3];
      a1[2] = a2[2];
      a1[3] = v26;
      *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
      uint64_t v27 = *(int *)(type metadata accessor for CP_SubscribeResponse.TopicUpdate(0) + 32);
      uint64_t v28 = (char *)a1 + v27;
      uint64_t v29 = (char *)a2 + v27;
      uint64_t v30 = type metadata accessor for UnknownStorage();
      uint64_t v31 = *(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16);
      swift_bridgeObjectRetain();
      uint64_t v32 = v28;
      uint64_t v33 = v79;
      v31(v32, v29, v30);
    }
    else
    {
      uint64_t v78 = a3;
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v10 = a2[1];
        *a1 = *a2;
        a1[1] = v10;
        uint64_t v11 = a2[2];
        unint64_t v12 = a2[3];
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v11, v12);
        a1[2] = v11;
        a1[3] = v12;
        uint64_t v13 = a2[5];
        a1[4] = a2[4];
        a1[5] = v13;
        uint64_t v14 = type metadata accessor for CP_Record(0);
        uint64_t v15 = *(int *)(v14 + 32);
        v77 = (char *)a1 + v15;
        uint64_t v16 = (char *)a2 + v15;
        uint64_t v17 = type metadata accessor for UnknownStorage();
        uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
        swift_bridgeObjectRetain();
        v18(v77, v16, v17);
        uint64_t v19 = v18;
        uint64_t v75 = v14;
        uint64_t v20 = *(int *)(v14 + 36);
        uint64_t v21 = (_OWORD *)((char *)a1 + v20);
        uint64_t v22 = (_OWORD *)((char *)a2 + v20);
        uint64_t v23 = type metadata accessor for CP_SequenceNumber(0);
        uint64_t v24 = *(void *)(v23 - 8);
        uint64_t v71 = v17;
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
        {
          uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
          memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
        }
        else
        {
          _OWORD *v21 = *v22;
          v19((char *)v21 + *(int *)(v23 + 24), (char *)v22 + *(int *)(v23 + 24), v17);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
        }
        uint64_t v47 = *(int *)(v75 + 40);
        uint64_t v48 = (void *)((char *)a1 + v47);
        uint64_t v49 = (void *)((char *)a2 + v47);
        uint64_t v50 = type metadata accessor for CP_EncryptionID(0);
        uint64_t v51 = *(void *)(v50 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
        {
          uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
          memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64));
        }
        else
        {
          uint64_t v53 = *v49;
          unint64_t v54 = v49[1];
          outlined copy of Data._Representation(*v49, v54);
          *uint64_t v48 = v53;
          v48[1] = v54;
          v19((char *)v48 + *(int *)(v50 + 20), (char *)v49 + *(int *)(v50 + 20), v71);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
        }
        a3 = v78;
        uint64_t v33 = v79;
      }
      else
      {
        *a1 = *a2;
        *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
        uint64_t v34 = a2[3];
        a1[2] = a2[2];
        a1[3] = v34;
        uint64_t v35 = a2[5];
        a1[4] = a2[4];
        a1[5] = v35;
        uint64_t v36 = a2[7];
        a1[6] = a2[6];
        a1[7] = v36;
        uint64_t v37 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
        uint64_t v38 = *(int *)(v37 + 40);
        v72 = (char *)a2 + v38;
        v73 = (char *)a1 + v38;
        uint64_t v39 = type metadata accessor for UnknownStorage();
        uint64_t v40 = *(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v40(v73, v72, v39);
        uint64_t v76 = v37;
        uint64_t v41 = *(int *)(v37 + 44);
        uint64_t v42 = (void *)((char *)a1 + v41);
        uint64_t v43 = (void *)((char *)a2 + v41);
        uint64_t v44 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
        uint64_t v45 = *(void *)(v44 - 8);
        uint64_t v69 = v40;
        uint64_t v70 = v39;
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
        {
          uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
          memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
        }
        else
        {
          uint64_t v55 = v43[1];
          void *v42 = *v43;
          v42[1] = v55;
          uint64_t v56 = *(int *)(v44 + 24);
          v74 = (char *)v42 + v56;
          uint64_t v57 = (char *)v43 + v56;
          swift_bridgeObjectRetain();
          v40(v74, v57, v39);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
        }
        a3 = v78;
        uint64_t v33 = v79;
        uint64_t v58 = *(int *)(v76 + 48);
        unint64_t v59 = (_OWORD *)((char *)a1 + v58);
        uint64_t v60 = (_OWORD *)((char *)a2 + v58);
        uint64_t v61 = type metadata accessor for CP_SequenceNumber(0);
        uint64_t v62 = *(void *)(v61 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
        {
          uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
          memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
        }
        else
        {
          _OWORD *v59 = *v60;
          v69((char *)v59 + *(int *)(v61 + 24), (char *)v60 + *(int *)(v61 + 24), v70);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
        }
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(a1, 0, 1, v6);
  }
  uint64_t v64 = *(int *)(a3 + 20);
  uint64_t v65 = (char *)a1 + v64;
  v66 = (char *)a2 + v64;
  uint64_t v67 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 16))(v65, v66, v67);
  return a1;
}

uint64_t assignWithCopy for CP_SubscribeResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8((uint64_t)a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        uint64_t v42 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        *(void *)a1 = v42;
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
        uint64_t v43 = *(int *)(type metadata accessor for CP_SubscribeResponse.TopicUpdate(0) + 32);
        uint64_t v128 = a1 + v43;
        uint64_t v44 = (uint64_t)a2 + v43;
        uint64_t v45 = a3;
        uint64_t v46 = v7;
        uint64_t v47 = type metadata accessor for UnknownStorage();
        uint64_t v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 16);
        swift_bridgeObjectRetain();
        uint64_t v49 = v46;
        a3 = v45;
        v48(v128, v44, v47);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        uint64_t v130 = v7;
        uint64_t v134 = a3;
        if (EnumCaseMultiPayload == 1)
        {
          *(void *)a1 = *a2;
          *(void *)(a1 + 8) = a2[1];
          uint64_t v12 = a2[2];
          unint64_t v13 = a2[3];
          swift_bridgeObjectRetain();
          outlined copy of Data._Representation(v12, v13);
          *(void *)(a1 + 16) = v12;
          *(void *)(a1 + 24) = v13;
          *(void *)(a1 + 32) = a2[4];
          *(void *)(a1 + 40) = a2[5];
          uint64_t v14 = type metadata accessor for CP_Record(0);
          uint64_t v15 = *(int *)(v14 + 32);
          uint64_t v125 = a1 + v15;
          uint64_t v16 = (uint64_t)a2 + v15;
          uint64_t v17 = type metadata accessor for UnknownStorage();
          uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16);
          swift_bridgeObjectRetain();
          v18(v125, v16, v17);
          uint64_t v19 = (void (*)(char *, char *, uint64_t))v18;
          uint64_t v126 = v14;
          uint64_t v20 = *(int *)(v14 + 36);
          uint64_t v21 = (void *)(a1 + v20);
          uint64_t v22 = (uint64_t *)((char *)a2 + v20);
          uint64_t v23 = type metadata accessor for CP_SequenceNumber(0);
          uint64_t v24 = *(void *)(v23 - 8);
          uint64_t v115 = v17;
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
          {
            uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
            memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
          }
          else
          {
            void *v21 = *v22;
            v21[1] = v22[1];
            v19((char *)v21 + *(int *)(v23 + 24), (char *)v22 + *(int *)(v23 + 24), v17);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
          }
          uint64_t v60 = *(int *)(v126 + 40);
          uint64_t v61 = (void *)(a1 + v60);
          uint64_t v62 = (uint64_t *)((char *)a2 + v60);
          uint64_t v63 = type metadata accessor for CP_EncryptionID(0);
          uint64_t v64 = *(void *)(v63 - 8);
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
          {
            uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
            memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
          }
          else
          {
            uint64_t v91 = *v62;
            unint64_t v92 = v62[1];
            outlined copy of Data._Representation(*v62, v92);
            void *v61 = v91;
            v61[1] = v92;
            v19((char *)v61 + *(int *)(v63 + 20), (char *)v62 + *(int *)(v63 + 20), v115);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
          }
          a3 = v134;
        }
        else
        {
          uint64_t v50 = *a2;
          *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
          *(void *)a1 = v50;
          *(void *)(a1 + 16) = a2[2];
          *(void *)(a1 + 24) = a2[3];
          *(void *)(a1 + 32) = a2[4];
          *(void *)(a1 + 40) = a2[5];
          *(void *)(a1 + 48) = a2[6];
          *(void *)(a1 + 56) = a2[7];
          uint64_t v51 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
          uint64_t v52 = *(int *)(v51 + 40);
          uint64_t v116 = (uint64_t)a2 + v52;
          uint64_t v119 = a1 + v52;
          uint64_t v53 = type metadata accessor for UnknownStorage();
          v129 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v129(v119, v116, v53);
          uint64_t v123 = v51;
          uint64_t v54 = *(int *)(v51 + 44);
          uint64_t v55 = (void *)(a1 + v54);
          uint64_t v56 = (uint64_t *)((char *)a2 + v54);
          uint64_t v57 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
          uint64_t v58 = *(void *)(v57 - 8);
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
          {
            uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
            memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
          }
          else
          {
            *uint64_t v55 = *v56;
            v55[1] = v56[1];
            uint64_t v82 = *(int *)(v57 + 24);
            v118 = (char *)v55 + v82;
            uint64_t v121 = v53;
            v83 = (char *)v56 + v82;
            swift_bridgeObjectRetain();
            v84 = v83;
            uint64_t v53 = v121;
            v129((uint64_t)v118, (uint64_t)v84, v121);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
          }
          uint64_t v85 = *(int *)(v123 + 48);
          v86 = (void *)(a1 + v85);
          v87 = (uint64_t *)((char *)a2 + v85);
          uint64_t v88 = type metadata accessor for CP_SequenceNumber(0);
          uint64_t v89 = *(void *)(v88 - 8);
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v89 + 48))(v87, 1, v88))
          {
            uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
            memcpy(v86, v87, *(void *)(*(void *)(v90 - 8) + 64));
          }
          else
          {
            void *v86 = *v87;
            v86[1] = v87[1];
            v129((uint64_t)v86 + *(int *)(v88 + 24), (uint64_t)v87 + *(int *)(v88 + 24), v53);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v89 + 56))(v86, 0, 1, v88);
          }
        }
        swift_storeEnumTagMultiPayload();
        uint64_t v49 = v130;
      }
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v49 + 56))(a1, 0, 1, v6);
      goto LABEL_32;
    }
LABEL_9:
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
    memcpy((void *)a1, a2, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_32;
  }
  if (v10)
  {
    outlined destroy of CP_SequenceNumber(a1, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
    goto LABEL_9;
  }
  if ((uint64_t *)a1 != a2)
  {
    outlined destroy of CP_SequenceNumber(a1, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
    int v27 = swift_getEnumCaseMultiPayload();
    if (v27 == 2)
    {
      uint64_t v66 = *a2;
      *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
      *(void *)a1 = v66;
      *(void *)(a1 + 16) = a2[2];
      *(void *)(a1 + 24) = a2[3];
      *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
      uint64_t v67 = *(int *)(type metadata accessor for CP_SubscribeResponse.TopicUpdate(0) + 32);
      uint64_t v68 = a1 + v67;
      uint64_t v69 = (uint64_t)a2 + v67;
      uint64_t v70 = type metadata accessor for UnknownStorage();
      uint64_t v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 16);
      swift_bridgeObjectRetain();
      v71(v68, v69, v70);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      if (v27 == 1)
      {
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        uint64_t v28 = a2[2];
        unint64_t v29 = a2[3];
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v28, v29);
        *(void *)(a1 + 16) = v28;
        *(void *)(a1 + 24) = v29;
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = a2[5];
        uint64_t v30 = (int *)type metadata accessor for CP_Record(0);
        uint64_t v31 = v30[8];
        v131 = (char *)(a1 + v31);
        uint64_t v32 = (char *)a2 + v31;
        uint64_t v33 = type metadata accessor for UnknownStorage();
        uint64_t v34 = *(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16);
        swift_bridgeObjectRetain();
        uint64_t v35 = v131;
        uint64_t v127 = v33;
        v132 = v34;
        v34(v35, v32, v33);
        uint64_t v36 = v30[9];
        uint64_t v37 = (void *)(a1 + v36);
        uint64_t v38 = (uint64_t *)((char *)a2 + v36);
        uint64_t v39 = type metadata accessor for CP_SequenceNumber(0);
        uint64_t v40 = *(void *)(v39 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
        {
          uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
          memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
        }
        else
        {
          *uint64_t v37 = *v38;
          v37[1] = v38[1];
          v132((char *)v37 + *(int *)(v39 + 24), (char *)v38 + *(int *)(v39 + 24), v127);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
        }
        uint64_t v98 = v30[10];
        v99 = (void *)(a1 + v98);
        v100 = (uint64_t *)((char *)a2 + v98);
        uint64_t v101 = type metadata accessor for CP_EncryptionID(0);
        uint64_t v102 = *(void *)(v101 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v102 + 48))(v100, 1, v101))
        {
          uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
          memcpy(v99, v100, *(void *)(*(void *)(v103 - 8) + 64));
        }
        else
        {
          uint64_t v112 = a3;
          uint64_t v113 = *v100;
          unint64_t v114 = v100[1];
          outlined copy of Data._Representation(*v100, v114);
          void *v99 = v113;
          v99[1] = v114;
          a3 = v112;
          v132((char *)v99 + *(int *)(v101 + 20), (char *)v100 + *(int *)(v101 + 20), v127);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v102 + 56))(v99, 0, 1, v101);
        }
      }
      else
      {
        uint64_t v135 = a3;
        uint64_t v72 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        *(void *)a1 = v72;
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = a2[5];
        *(void *)(a1 + 48) = a2[6];
        *(void *)(a1 + 56) = a2[7];
        v73 = (int *)type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
        uint64_t v74 = v73[10];
        uint64_t v120 = (uint64_t)a2 + v74;
        uint64_t v124 = a1 + v74;
        uint64_t v75 = type metadata accessor for UnknownStorage();
        v133 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v75 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v133(v124, v120, v75);
        uint64_t v76 = v73[11];
        v77 = (void *)(a1 + v76);
        uint64_t v78 = (uint64_t *)((char *)a2 + v76);
        uint64_t v79 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
        uint64_t v80 = *(void *)(v79 - 8);
        uint64_t v117 = v75;
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
        {
          uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
          memcpy(v77, v78, *(void *)(*(void *)(v81 - 8) + 64));
        }
        else
        {
          void *v77 = *v78;
          v77[1] = v78[1];
          uint64_t v104 = *(int *)(v79 + 24);
          v122 = (char *)v77 + v104;
          v105 = (char *)v78 + v104;
          swift_bridgeObjectRetain();
          v133((uint64_t)v122, (uint64_t)v105, v75);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
        }
        a3 = v135;
        uint64_t v106 = v73[12];
        v107 = (void *)(a1 + v106);
        v108 = (uint64_t *)((char *)a2 + v106);
        uint64_t v109 = type metadata accessor for CP_SequenceNumber(0);
        uint64_t v110 = *(void *)(v109 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v110 + 48))(v108, 1, v109))
        {
          uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
          memcpy(v107, v108, *(void *)(*(void *)(v111 - 8) + 64));
        }
        else
        {
          void *v107 = *v108;
          v107[1] = v108[1];
          v133((uint64_t)v107 + *(int *)(v109 + 24), (uint64_t)v108 + *(int *)(v109 + 24), v117);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v110 + 56))(v107, 0, 1, v109);
        }
      }
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_32:
  uint64_t v93 = *(int *)(a3 + 20);
  uint64_t v94 = a1 + v93;
  uint64_t v95 = (uint64_t)a2 + v93;
  uint64_t v96 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v96 - 8) + 24))(v94, v95, v96);
  return a1;
}

void *initializeWithTake for CP_SubscribeResponse(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
      uint64_t v23 = *(int *)(type metadata accessor for CP_SubscribeResponse.TopicUpdate(0) + 32);
      uint64_t v24 = (char *)a1 + v23;
      uint64_t v25 = (char *)a2 + v23;
      uint64_t v26 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v24, v25, v26);
    }
    else
    {
      uint64_t v64 = a3;
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v62 = v7;
        long long v10 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v10;
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        uint64_t v11 = type metadata accessor for CP_Record(0);
        uint64_t v12 = *(int *)(v11 + 32);
        unint64_t v13 = (char *)a1 + v12;
        uint64_t v14 = (char *)a2 + v12;
        uint64_t v15 = type metadata accessor for UnknownStorage();
        uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32);
        v16(v13, v14, v15);
        uint64_t v60 = v11;
        uint64_t v17 = *(int *)(v11 + 36);
        uint64_t v18 = (_OWORD *)((char *)a1 + v17);
        uint64_t v19 = (_OWORD *)((char *)a2 + v17);
        uint64_t v20 = type metadata accessor for CP_SequenceNumber(0);
        uint64_t v21 = *(void *)(v20 - 8);
        uint64_t v57 = v16;
        uint64_t v58 = v15;
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
        {
          uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
          memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
        }
        else
        {
          *uint64_t v18 = *v19;
          v16((char *)v18 + *(int *)(v20 + 24), (char *)v19 + *(int *)(v20 + 24), v15);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
        }
        uint64_t v40 = *(int *)(v60 + 40);
        uint64_t v41 = (_OWORD *)((char *)a1 + v40);
        uint64_t v42 = (_OWORD *)((char *)a2 + v40);
        uint64_t v43 = type metadata accessor for CP_EncryptionID(0);
        uint64_t v44 = *(void *)(v43 - 8);
        uint64_t v7 = v62;
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
        {
          uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
          memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
        }
        else
        {
          *uint64_t v41 = *v42;
          v57((char *)v41 + *(int *)(v43 + 20), (char *)v42 + *(int *)(v43 + 20), v58);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
        }
      }
      else
      {
        *a1 = *a2;
        *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
        long long v27 = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((_OWORD *)a1 + 2) = v27;
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        uint64_t v28 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
        uint64_t v29 = *(int *)(v28 + 40);
        uint64_t v30 = (char *)a1 + v29;
        uint64_t v31 = (char *)a2 + v29;
        uint64_t v32 = type metadata accessor for UnknownStorage();
        uint64_t v33 = (void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 32);
        uint64_t v61 = *v33;
        (*v33)(v30, v31, v32);
        uint64_t v63 = v28;
        uint64_t v34 = *(int *)(v28 + 44);
        uint64_t v35 = (_OWORD *)((char *)a1 + v34);
        uint64_t v36 = (_OWORD *)((char *)a2 + v34);
        uint64_t v37 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
        uint64_t v38 = *(void *)(v37 - 8);
        uint64_t v59 = v32;
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
        {
          uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
          memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
        }
        else
        {
          _OWORD *v35 = *v36;
          v61((char *)v35 + *(int *)(v37 + 24), (char *)v36 + *(int *)(v37 + 24), v32);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
        }
        a3 = v64;
        uint64_t v46 = *(int *)(v63 + 48);
        uint64_t v47 = (_OWORD *)((char *)a1 + v46);
        uint64_t v48 = (_OWORD *)((char *)a2 + v46);
        uint64_t v49 = type metadata accessor for CP_SequenceNumber(0);
        uint64_t v50 = *(void *)(v49 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
        {
          uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
          memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
        }
        else
        {
          *uint64_t v47 = *v48;
          v61((char *)v47 + *(int *)(v49 + 24), (char *)v48 + *(int *)(v49 + 24), v59);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
        }
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v52 = *(int *)(a3 + 20);
  uint64_t v53 = (char *)a1 + v52;
  uint64_t v54 = (char *)a2 + v52;
  uint64_t v55 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 32))(v53, v54, v55);
  return a1;
}

uint64_t assignWithTake for CP_SubscribeResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
        uint64_t v40 = *(int *)(type metadata accessor for CP_SubscribeResponse.TopicUpdate(0) + 32);
        uint64_t v41 = a1 + v40;
        uint64_t v42 = a2 + v40;
        uint64_t v43 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 32))(v41, v42, v43);
      }
      else
      {
        uint64_t v113 = a3;
        if (EnumCaseMultiPayload == 1)
        {
          long long v12 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v12;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          uint64_t v13 = type metadata accessor for CP_Record(0);
          uint64_t v14 = *(int *)(v13 + 32);
          uint64_t v15 = (char *)(a1 + v14);
          uint64_t v16 = (char *)(a2 + v14);
          uint64_t v17 = type metadata accessor for UnknownStorage();
          uint64_t v18 = (void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32);
          v108 = *v18;
          (*v18)(v15, v16, v17);
          uint64_t v112 = v13;
          uint64_t v19 = *(int *)(v13 + 36);
          uint64_t v20 = (_OWORD *)(a1 + v19);
          uint64_t v21 = (_OWORD *)(a2 + v19);
          uint64_t v22 = type metadata accessor for CP_SequenceNumber(0);
          uint64_t v23 = *(void *)(v22 - 8);
          uint64_t v106 = v17;
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
          {
            uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
            memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
          }
          else
          {
            _OWORD *v20 = *v21;
            v108((char *)v20 + *(int *)(v22 + 24), (char *)v21 + *(int *)(v22 + 24), v17);
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
          }
          uint64_t v57 = *(int *)(v112 + 40);
          uint64_t v58 = (_OWORD *)(a1 + v57);
          uint64_t v59 = (_OWORD *)(a2 + v57);
          uint64_t v60 = type metadata accessor for CP_EncryptionID(0);
          uint64_t v61 = *(void *)(v60 - 8);
          a3 = v113;
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
          {
            uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
            memcpy(v58, v59, *(void *)(*(void *)(v62 - 8) + 64));
          }
          else
          {
            *uint64_t v58 = *v59;
            v108((char *)v58 + *(int *)(v60 + 20), (char *)v59 + *(int *)(v60 + 20), v106);
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
          }
        }
        else
        {
          *(void *)a1 = *(void *)a2;
          *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
          long long v44 = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
          *(_OWORD *)(a1 + 32) = v44;
          *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
          uint64_t v45 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
          uint64_t v46 = *(int *)(v45 + 40);
          uint64_t v47 = (char *)(a1 + v46);
          uint64_t v48 = (char *)(a2 + v46);
          uint64_t v49 = type metadata accessor for UnknownStorage();
          uint64_t v50 = *(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 32);
          v50(v47, v48, v49);
          uint64_t v110 = v45;
          uint64_t v51 = *(int *)(v45 + 44);
          uint64_t v52 = (_OWORD *)(a1 + v51);
          uint64_t v53 = (_OWORD *)(a2 + v51);
          uint64_t v54 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
          uint64_t v55 = *(void *)(v54 - 8);
          uint64_t v104 = v50;
          uint64_t v107 = v49;
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
          {
            uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
            memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
          }
          else
          {
            _OWORD *v52 = *v53;
            v50((char *)v52 + *(int *)(v54 + 24), (char *)v53 + *(int *)(v54 + 24), v49);
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
          }
          uint64_t v80 = *(int *)(v110 + 48);
          uint64_t v81 = (_OWORD *)(a1 + v80);
          uint64_t v82 = (_OWORD *)(a2 + v80);
          uint64_t v83 = type metadata accessor for CP_SequenceNumber(0);
          uint64_t v84 = *(void *)(v83 - 8);
          a3 = v113;
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83))
          {
            uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
            memcpy(v81, v82, *(void *)(*(void *)(v85 - 8) + 64));
          }
          else
          {
            *uint64_t v81 = *v82;
            v104((char *)v81 + *(int *)(v83 + 24), (char *)v82 + *(int *)(v83 + 24), v107);
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v84 + 56))(v81, 0, 1, v83);
          }
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_30;
    }
LABEL_9:
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_30;
  }
  if (v10)
  {
    outlined destroy of CP_SequenceNumber(a1, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
    goto LABEL_9;
  }
  if (a1 != a2)
  {
    outlined destroy of CP_SequenceNumber(a1, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
    int v26 = swift_getEnumCaseMultiPayload();
    if (v26 == 2)
    {
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      uint64_t v63 = *(int *)(type metadata accessor for CP_SubscribeResponse.TopicUpdate(0) + 32);
      uint64_t v64 = a1 + v63;
      uint64_t v65 = a2 + v63;
      uint64_t v66 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 32))(v64, v65, v66);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      if (v26 == 1)
      {
        long long v27 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v27;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        uint64_t v28 = type metadata accessor for CP_Record(0);
        uint64_t v29 = *(int *)(v28 + 32);
        uint64_t v30 = a1 + v29;
        uint64_t v31 = a2 + v29;
        uint64_t v32 = type metadata accessor for UnknownStorage();
        uint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 32);
        v33(v30, v31, v32);
        uint64_t v109 = v28;
        uint64_t v34 = *(int *)(v28 + 36);
        uint64_t v35 = (_OWORD *)(a1 + v34);
        uint64_t v36 = (_OWORD *)(a2 + v34);
        uint64_t v37 = type metadata accessor for CP_SequenceNumber(0);
        uint64_t v38 = *(void *)(v37 - 8);
        uint64_t v103 = v32;
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
        {
          uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
          memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
        }
        else
        {
          _OWORD *v35 = *v36;
          v33((uint64_t)v35 + *(int *)(v37 + 24), (uint64_t)v36 + *(int *)(v37 + 24), v32);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
        }
        uint64_t v91 = *(int *)(v109 + 40);
        unint64_t v92 = (_OWORD *)(a1 + v91);
        uint64_t v93 = (_OWORD *)(a2 + v91);
        uint64_t v94 = type metadata accessor for CP_EncryptionID(0);
        uint64_t v95 = *(void *)(v94 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v95 + 48))(v93, 1, v94))
        {
          uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
          memcpy(v92, v93, *(void *)(*(void *)(v96 - 8) + 64));
        }
        else
        {
          *unint64_t v92 = *v93;
          v33((uint64_t)v92 + *(int *)(v94 + 20), (uint64_t)v93 + *(int *)(v94 + 20), v103);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v95 + 56))(v92, 0, 1, v94);
        }
      }
      else
      {
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
        long long v67 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 32) = v67;
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
        uint64_t v68 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
        uint64_t v69 = *(int *)(v68 + 40);
        uint64_t v70 = a1 + v69;
        uint64_t v71 = a2 + v69;
        uint64_t v72 = type metadata accessor for UnknownStorage();
        v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 32);
        v73(v70, v71, v72);
        uint64_t v111 = v68;
        uint64_t v74 = *(int *)(v68 + 44);
        uint64_t v75 = (_OWORD *)(a1 + v74);
        uint64_t v76 = (_OWORD *)(a2 + v74);
        uint64_t v77 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
        uint64_t v78 = *(void *)(v77 - 8);
        uint64_t v105 = v72;
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77))
        {
          uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
          memcpy(v75, v76, *(void *)(*(void *)(v79 - 8) + 64));
        }
        else
        {
          _OWORD *v75 = *v76;
          v73((uint64_t)v75 + *(int *)(v77 + 24), (uint64_t)v76 + *(int *)(v77 + 24), v72);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v78 + 56))(v75, 0, 1, v77);
        }
        uint64_t v97 = *(int *)(v111 + 48);
        uint64_t v98 = (_OWORD *)(a1 + v97);
        v99 = (_OWORD *)(a2 + v97);
        uint64_t v100 = type metadata accessor for CP_SequenceNumber(0);
        uint64_t v101 = *(void *)(v100 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v101 + 48))(v99, 1, v100))
        {
          uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
          memcpy(v98, v99, *(void *)(*(void *)(v102 - 8) + 64));
        }
        else
        {
          *uint64_t v98 = *v99;
          v73((uint64_t)v98 + *(int *)(v100 + 24), (uint64_t)v99 + *(int *)(v100 + 24), v105);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v101 + 56))(v98, 0, 1, v100);
        }
      }
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_30:
  uint64_t v86 = *(int *)(a3 + 20);
  uint64_t v87 = a1 + v86;
  uint64_t v88 = a2 + v86;
  uint64_t v89 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v89 - 8) + 40))(v87, v88, v89);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_SubscribeResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0FFB2E8);
}

uint64_t sub_1B0FFB2E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_149Tm(a1, a2, a3, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
}

uint64_t storeEnumTagSinglePayload for CP_SubscribeResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0FFB308);
}

uint64_t sub_1B0FFB308(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_150Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
}

void type metadata completion function for CP_SubscribeResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t initializeBufferWithCopyOfBuffer for CP_SubscribeResponse.OneOf_Operation(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *a2;
    *(void *)a1 = *a2;
    a1 = v23 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(void *)a1 = *a2;
      *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
      uint64_t v24 = a2[3];
      *(void *)(a1 + 16) = a2[2];
      *(void *)(a1 + 24) = v24;
      *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
      uint64_t v25 = *(int *)(type metadata accessor for CP_SubscribeResponse.TopicUpdate(0) + 32);
      uint64_t v26 = a1 + v25;
      uint64_t v27 = (uint64_t)a2 + v25;
      uint64_t v28 = type metadata accessor for UnknownStorage();
      uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16);
      swift_bridgeObjectRetain();
      v29(v26, v27, v28);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v7;
      uint64_t v8 = a2[2];
      unint64_t v9 = a2[3];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v8, v9);
      *(void *)(a1 + 16) = v8;
      *(void *)(a1 + 24) = v9;
      uint64_t v10 = a2[5];
      *(void *)(a1 + 32) = a2[4];
      *(void *)(a1 + 40) = v10;
      uint64_t v11 = (int *)type metadata accessor for CP_Record(0);
      uint64_t v12 = v11[8];
      uint64_t v13 = a1 + v12;
      uint64_t v14 = (uint64_t)a2 + v12;
      uint64_t v15 = type metadata accessor for UnknownStorage();
      uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16);
      swift_bridgeObjectRetain();
      v16(v13, v14, v15);
      uint64_t v17 = v11[9];
      uint64_t v18 = (_OWORD *)(a1 + v17);
      uint64_t v19 = (_OWORD *)((char *)a2 + v17);
      uint64_t v20 = type metadata accessor for CP_SequenceNumber(0);
      uint64_t v21 = *(void *)(v20 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
      {
        uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
        memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
      }
      else
      {
        *uint64_t v18 = *v19;
        v16((uint64_t)v18 + *(int *)(v20 + 24), (uint64_t)v19 + *(int *)(v20 + 24), v15);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      }
      uint64_t v43 = v15;
      uint64_t v44 = v11[10];
      uint64_t v45 = (void *)(a1 + v44);
      uint64_t v46 = (uint64_t *)((char *)a2 + v44);
      uint64_t v47 = type metadata accessor for CP_EncryptionID(0);
      uint64_t v48 = *(void *)(v47 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
      {
        uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64));
      }
      else
      {
        uint64_t v50 = v43;
        uint64_t v51 = *v46;
        unint64_t v52 = v46[1];
        outlined copy of Data._Representation(*v46, v52);
        *uint64_t v45 = v51;
        v45[1] = v52;
        v16((uint64_t)v45 + *(int *)(v47 + 20), (uint64_t)v46 + *(int *)(v47 + 20), v50);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
      }
    }
    else
    {
      *(void *)a1 = *a2;
      *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
      uint64_t v30 = a2[3];
      *(void *)(a1 + 16) = a2[2];
      *(void *)(a1 + 24) = v30;
      uint64_t v31 = a2[5];
      *(void *)(a1 + 32) = a2[4];
      *(void *)(a1 + 40) = v31;
      uint64_t v32 = a2[7];
      *(void *)(a1 + 48) = a2[6];
      *(void *)(a1 + 56) = v32;
      uint64_t v33 = (int *)type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
      uint64_t v34 = v33[10];
      uint64_t v65 = (uint64_t)a2 + v34;
      uint64_t v66 = a1 + v34;
      uint64_t v35 = type metadata accessor for UnknownStorage();
      uint64_t v64 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v36 = v66;
      uint64_t v67 = v35;
      v64(v36, v65, v35);
      uint64_t v37 = v33[11];
      uint64_t v38 = (void *)(a1 + v37);
      uint64_t v39 = (uint64_t *)((char *)a2 + v37);
      uint64_t v40 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
      uint64_t v41 = *(void *)(v40 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
      {
        uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
        memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
      }
      else
      {
        uint64_t v53 = v39[1];
        *uint64_t v38 = *v39;
        v38[1] = v53;
        uint64_t v54 = *(int *)(v40 + 24);
        uint64_t v55 = (char *)v38 + v54;
        uint64_t v56 = (char *)v39 + v54;
        swift_bridgeObjectRetain();
        v64((uint64_t)v55, (uint64_t)v56, v67);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
      }
      uint64_t v57 = v33[12];
      uint64_t v58 = (_OWORD *)(a1 + v57);
      uint64_t v59 = (_OWORD *)((char *)a2 + v57);
      uint64_t v60 = type metadata accessor for CP_SequenceNumber(0);
      uint64_t v61 = *(void *)(v60 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
      {
        uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
        memcpy(v58, v59, *(void *)(*(void *)(v62 - 8) + 64));
      }
      else
      {
        *uint64_t v58 = *v59;
        v64((uint64_t)v58 + *(int *)(v60 + 24), (uint64_t)v59 + *(int *)(v60 + 24), v67);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for CP_SubscribeResponse.OneOf_Operation(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch(result)
  {
    case 2:
      swift_bridgeObjectRelease();
      uint64_t v11 = a1 + *(int *)(type metadata accessor for CP_SubscribeResponse.TopicUpdate(0) + 32);
      uint64_t v12 = type metadata accessor for UnknownStorage();
      uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);
      uint64_t v14 = v12;
      uint64_t v15 = v11;
LABEL_15:
      return v13(v15, v14);
    case 1:
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(*(void *)(a1 + 16), *(void *)(a1 + 24));
      swift_bridgeObjectRelease();
      uint64_t v16 = (int *)type metadata accessor for CP_Record(0);
      uint64_t v17 = a1 + v16[8];
      uint64_t v5 = type metadata accessor for UnknownStorage();
      uint64_t v21 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
      v21(v17, v5);
      uint64_t v18 = a1 + v16[9];
      uint64_t v19 = type metadata accessor for CP_SequenceNumber(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48))(v18, 1, v19)) {
        v21(v18 + *(int *)(v19 + 24), v5);
      }
      uint64_t v8 = a1 + v16[10];
      uint64_t v20 = type metadata accessor for CP_EncryptionID(0);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v8, 1, v20);
      if (!result)
      {
        outlined consume of Data._Representation(*(void *)v8, *(void *)(v8 + 8));
        uint64_t v10 = *(int *)(v20 + 20);
        goto LABEL_14;
      }
      break;
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int v3 = (int *)type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
      uint64_t v4 = a1 + v3[10];
      uint64_t v5 = type metadata accessor for UnknownStorage();
      uint64_t v21 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
      v21(v4, v5);
      uint64_t v6 = a1 + v3[11];
      uint64_t v7 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
      {
        swift_bridgeObjectRelease();
        v21(v6 + *(int *)(v7 + 24), v5);
      }
      uint64_t v8 = a1 + v3[12];
      uint64_t v9 = type metadata accessor for CP_SequenceNumber(0);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
      if (!result)
      {
        uint64_t v10 = *(int *)(v9 + 24);
LABEL_14:
        uint64_t v15 = v8 + v10;
        uint64_t v14 = v5;
        uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t))v21;
        goto LABEL_15;
      }
      break;
  }
  return result;
}

uint64_t initializeWithCopy for CP_SubscribeResponse.OneOf_Operation(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    uint64_t v21 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v21;
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
    uint64_t v22 = *(int *)(type metadata accessor for CP_SubscribeResponse.TopicUpdate(0) + 32);
    uint64_t v23 = a1 + v22;
    uint64_t v24 = a2 + v22;
    uint64_t v25 = type metadata accessor for UnknownStorage();
    uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16);
    swift_bridgeObjectRetain();
    v26(v23, v24, v25);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v5;
    uint64_t v6 = *(void *)(a2 + 16);
    unint64_t v7 = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v6, v7);
    *(void *)(a1 + 16) = v6;
    *(void *)(a1 + 24) = v7;
    uint64_t v8 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = v8;
    uint64_t v9 = (int *)type metadata accessor for CP_Record(0);
    uint64_t v10 = v9[8];
    uint64_t v11 = a1 + v10;
    uint64_t v12 = a2 + v10;
    uint64_t v13 = type metadata accessor for UnknownStorage();
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    v14(v11, v12, v13);
    uint64_t v15 = v9[9];
    uint64_t v16 = (_OWORD *)(a1 + v15);
    uint64_t v17 = (_OWORD *)(a2 + v15);
    uint64_t v18 = type metadata accessor for CP_SequenceNumber(0);
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      *uint64_t v16 = *v17;
      v14((uint64_t)v16 + *(int *)(v18 + 24), (uint64_t)v17 + *(int *)(v18 + 24), v13);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    uint64_t v40 = v9[10];
    uint64_t v41 = (void *)(a1 + v40);
    uint64_t v42 = (uint64_t *)(a2 + v40);
    uint64_t v43 = type metadata accessor for CP_EncryptionID(0);
    uint64_t v44 = *(void *)(v43 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
    {
      uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
      memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
    }
    else
    {
      uint64_t v46 = *v42;
      unint64_t v47 = v42[1];
      outlined copy of Data._Representation(*v42, v47);
      *uint64_t v41 = v46;
      v41[1] = v47;
      v14((uint64_t)v41 + *(int *)(v43 + 20), (uint64_t)v42 + *(int *)(v43 + 20), v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
    }
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    uint64_t v27 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v27;
    uint64_t v28 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = v28;
    uint64_t v29 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = v29;
    uint64_t v30 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
    uint64_t v31 = *(int *)(v30 + 40);
    uint64_t v61 = a2 + v31;
    uint64_t v63 = a1 + v31;
    uint64_t v32 = type metadata accessor for UnknownStorage();
    uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v33 = v30;
    swift_bridgeObjectRetain();
    v60(v63, v61, v32);
    uint64_t v34 = *(int *)(v30 + 44);
    uint64_t v35 = (void *)(a1 + v34);
    uint64_t v36 = (void *)(a2 + v34);
    uint64_t v37 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
    uint64_t v38 = *(void *)(v37 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    {
      uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
      memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      uint64_t v48 = v36[1];
      void *v35 = *v36;
      v35[1] = v48;
      uint64_t v49 = *(int *)(v37 + 24);
      uint64_t v62 = v30;
      uint64_t v50 = (char *)v35 + v49;
      uint64_t v51 = (char *)v36 + v49;
      swift_bridgeObjectRetain();
      unint64_t v52 = v50;
      uint64_t v33 = v62;
      v60((uint64_t)v52, (uint64_t)v51, v32);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
    }
    uint64_t v53 = *(int *)(v33 + 48);
    uint64_t v54 = (_OWORD *)(a1 + v53);
    uint64_t v55 = (_OWORD *)(a2 + v53);
    uint64_t v56 = type metadata accessor for CP_SequenceNumber(0);
    uint64_t v57 = *(void *)(v56 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
    {
      uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
      memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
    }
    else
    {
      *uint64_t v54 = *v55;
      v60((uint64_t)v54 + *(int *)(v56 + 24), (uint64_t)v55 + *(int *)(v56 + 24), v32);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for CP_SubscribeResponse.OneOf_Operation(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    outlined destroy of CP_SequenceNumber(a1, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v19 = *a2;
      *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
      *(void *)a1 = v19;
      *(void *)(a1 + 16) = a2[2];
      *(void *)(a1 + 24) = a2[3];
      *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
      uint64_t v20 = *(int *)(type metadata accessor for CP_SubscribeResponse.TopicUpdate(0) + 32);
      uint64_t v21 = a1 + v20;
      uint64_t v22 = (uint64_t)a2 + v20;
      uint64_t v23 = type metadata accessor for UnknownStorage();
      uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16);
      swift_bridgeObjectRetain();
      v24(v21, v22, v23);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = a2[1];
      uint64_t v5 = a2[2];
      unint64_t v6 = a2[3];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v5, v6);
      *(void *)(a1 + 16) = v5;
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = a2[4];
      *(void *)(a1 + 40) = a2[5];
      unint64_t v7 = (int *)type metadata accessor for CP_Record(0);
      uint64_t v8 = v7[8];
      uint64_t v9 = a1 + v8;
      uint64_t v10 = (uint64_t)a2 + v8;
      uint64_t v11 = type metadata accessor for UnknownStorage();
      uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
      swift_bridgeObjectRetain();
      v12(v9, v10, v11);
      uint64_t v13 = v7[9];
      uint64_t v14 = (void *)(a1 + v13);
      uint64_t v15 = (uint64_t *)((char *)a2 + v13);
      uint64_t v16 = type metadata accessor for CP_SequenceNumber(0);
      uint64_t v17 = *(void *)(v16 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      {
        uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
        memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        *uint64_t v14 = *v15;
        v14[1] = v15[1];
        v12((uint64_t)v14 + *(int *)(v16 + 24), (uint64_t)v15 + *(int *)(v16 + 24), v11);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      }
      uint64_t v36 = v7[10];
      uint64_t v37 = (void *)(a1 + v36);
      uint64_t v38 = (uint64_t *)((char *)a2 + v36);
      uint64_t v39 = type metadata accessor for CP_EncryptionID(0);
      uint64_t v40 = *(void *)(v39 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
      {
        uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
      }
      else
      {
        uint64_t v52 = *v38;
        unint64_t v53 = v38[1];
        outlined copy of Data._Representation(*v38, v53);
        *uint64_t v37 = v52;
        v37[1] = v53;
        v12((uint64_t)v37 + *(int *)(v39 + 20), (uint64_t)v38 + *(int *)(v39 + 20), v11);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
      }
    }
    else
    {
      uint64_t v25 = *a2;
      *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
      *(void *)a1 = v25;
      *(void *)(a1 + 16) = a2[2];
      *(void *)(a1 + 24) = a2[3];
      *(void *)(a1 + 32) = a2[4];
      *(void *)(a1 + 40) = a2[5];
      *(void *)(a1 + 48) = a2[6];
      *(void *)(a1 + 56) = a2[7];
      uint64_t v26 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
      uint64_t v27 = *(int *)(v26 + 40);
      uint64_t v56 = (uint64_t)a2 + v27;
      uint64_t v58 = a1 + v27;
      uint64_t v28 = type metadata accessor for UnknownStorage();
      uint64_t v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v29 = v26;
      swift_bridgeObjectRetain();
      v55(v58, v56, v28);
      uint64_t v30 = *(int *)(v26 + 44);
      uint64_t v31 = (void *)(a1 + v30);
      uint64_t v32 = (uint64_t *)((char *)a2 + v30);
      uint64_t v33 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
      uint64_t v34 = *(void *)(v33 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      {
        uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
        memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
      }
      else
      {
        void *v31 = *v32;
        v31[1] = v32[1];
        uint64_t v42 = *(int *)(v33 + 24);
        uint64_t v57 = v26;
        uint64_t v43 = (char *)v31 + v42;
        uint64_t v44 = (char *)v32 + v42;
        swift_bridgeObjectRetain();
        uint64_t v45 = v43;
        uint64_t v29 = v57;
        v55((uint64_t)v45, (uint64_t)v44, v28);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      }
      uint64_t v46 = *(int *)(v29 + 48);
      unint64_t v47 = (void *)(a1 + v46);
      uint64_t v48 = (uint64_t *)((char *)a2 + v46);
      uint64_t v49 = type metadata accessor for CP_SequenceNumber(0);
      uint64_t v50 = *(void *)(v49 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
      {
        uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
        memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
      }
      else
      {
        *unint64_t v47 = *v48;
        v47[1] = v48[1];
        v55((uint64_t)v47 + *(int *)(v49 + 24), (uint64_t)v48 + *(int *)(v49 + 24), v28);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for CP_SubscribeResponse.OneOf_Operation(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
    uint64_t v18 = *(int *)(type metadata accessor for CP_SubscribeResponse.TopicUpdate(0) + 32);
    uint64_t v19 = a1 + v18;
    uint64_t v20 = a2 + v18;
    uint64_t v21 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    unint64_t v6 = (int *)type metadata accessor for CP_Record(0);
    uint64_t v7 = v6[8];
    uint64_t v8 = a1 + v7;
    uint64_t v9 = a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32);
    v11(v8, v9, v10);
    uint64_t v12 = v6[9];
    uint64_t v13 = (_OWORD *)(a1 + v12);
    uint64_t v14 = (_OWORD *)(a2 + v12);
    uint64_t v15 = type metadata accessor for CP_SequenceNumber(0);
    uint64_t v16 = *(void *)(v15 - 8);
    uint64_t v48 = v10;
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      *uint64_t v13 = *v14;
      v11((uint64_t)v13 + *(int *)(v15 + 24), (uint64_t)v14 + *(int *)(v15 + 24), v10);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    uint64_t v35 = v6[10];
    uint64_t v36 = (_OWORD *)(a1 + v35);
    uint64_t v37 = (_OWORD *)(a2 + v35);
    uint64_t v38 = type metadata accessor for CP_EncryptionID(0);
    uint64_t v39 = *(void *)(v38 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
    {
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
      memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
    }
    else
    {
      *uint64_t v36 = *v37;
      v11((uint64_t)v36 + *(int *)(v38 + 20), (uint64_t)v37 + *(int *)(v38 + 20), v48);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
    }
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    long long v22 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v22;
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    uint64_t v23 = (int *)type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
    uint64_t v24 = v23[10];
    uint64_t v25 = a1 + v24;
    uint64_t v26 = a2 + v24;
    uint64_t v27 = type metadata accessor for UnknownStorage();
    uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 32);
    v28(v25, v26, v27);
    uint64_t v29 = v23[11];
    uint64_t v30 = (_OWORD *)(a1 + v29);
    uint64_t v31 = (_OWORD *)(a2 + v29);
    uint64_t v32 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
    uint64_t v33 = *(void *)(v32 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    {
      uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
      memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
    }
    else
    {
      _OWORD *v30 = *v31;
      v28((uint64_t)v30 + *(int *)(v32 + 24), (uint64_t)v31 + *(int *)(v32 + 24), v27);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
    }
    uint64_t v41 = v23[12];
    uint64_t v42 = (_OWORD *)(a1 + v41);
    uint64_t v43 = (_OWORD *)(a2 + v41);
    uint64_t v44 = type metadata accessor for CP_SequenceNumber(0);
    uint64_t v45 = *(void *)(v44 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
    {
      uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
      memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
    }
    else
    {
      _OWORD *v42 = *v43;
      v28((uint64_t)v42 + *(int *)(v44 + 24), (uint64_t)v43 + *(int *)(v44 + 24), v27);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for CP_SubscribeResponse.OneOf_Operation(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of CP_SequenceNumber(a1, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      uint64_t v18 = *(int *)(type metadata accessor for CP_SubscribeResponse.TopicUpdate(0) + 32);
      uint64_t v19 = a1 + v18;
      uint64_t v20 = a2 + v18;
      uint64_t v21 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      long long v5 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v5;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      unint64_t v6 = (int *)type metadata accessor for CP_Record(0);
      uint64_t v7 = v6[8];
      uint64_t v8 = a1 + v7;
      uint64_t v9 = a2 + v7;
      uint64_t v10 = type metadata accessor for UnknownStorage();
      uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32);
      v11(v8, v9, v10);
      uint64_t v12 = v6[9];
      uint64_t v13 = (_OWORD *)(a1 + v12);
      uint64_t v14 = (_OWORD *)(a2 + v12);
      uint64_t v15 = type metadata accessor for CP_SequenceNumber(0);
      uint64_t v16 = *(void *)(v15 - 8);
      uint64_t v48 = v10;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
      {
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
        memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        *uint64_t v13 = *v14;
        v11((uint64_t)v13 + *(int *)(v15 + 24), (uint64_t)v14 + *(int *)(v15 + 24), v10);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      }
      uint64_t v35 = v6[10];
      uint64_t v36 = (_OWORD *)(a1 + v35);
      uint64_t v37 = (_OWORD *)(a2 + v35);
      uint64_t v38 = type metadata accessor for CP_EncryptionID(0);
      uint64_t v39 = *(void *)(v38 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
      {
        uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
      }
      else
      {
        *uint64_t v36 = *v37;
        v11((uint64_t)v36 + *(int *)(v38 + 20), (uint64_t)v37 + *(int *)(v38 + 20), v48);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
      }
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      long long v22 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 32) = v22;
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      uint64_t v23 = (int *)type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
      uint64_t v24 = v23[10];
      uint64_t v25 = a1 + v24;
      uint64_t v26 = a2 + v24;
      uint64_t v27 = type metadata accessor for UnknownStorage();
      uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 32);
      v28(v25, v26, v27);
      uint64_t v29 = v23[11];
      uint64_t v30 = (_OWORD *)(a1 + v29);
      uint64_t v31 = (_OWORD *)(a2 + v29);
      uint64_t v32 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
      uint64_t v33 = *(void *)(v32 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
      {
        uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
        memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        _OWORD *v30 = *v31;
        v28((uint64_t)v30 + *(int *)(v32 + 24), (uint64_t)v31 + *(int *)(v32 + 24), v27);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      }
      uint64_t v41 = v23[12];
      uint64_t v42 = (_OWORD *)(a1 + v41);
      uint64_t v43 = (_OWORD *)(a2 + v41);
      uint64_t v44 = type metadata accessor for CP_SequenceNumber(0);
      uint64_t v45 = *(void *)(v44 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
      {
        uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
        memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
      }
      else
      {
        _OWORD *v42 = *v43;
        v28((uint64_t)v42 + *(int *)(v44 + 24), (uint64_t)v43 + *(int *)(v44 + 24), v27);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for CP_SubscribeResponse.OneOf_Operation()
{
  uint64_t result = type metadata accessor for CP_SubscribeResponse.InitializeAck(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for CP_Record(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for CP_SubscribeResponse.TopicUpdate(319);
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for CP_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v7 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v7;
    uint64_t v8 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v8;
    uint64_t v9 = a2[7];
    uint64_t v10 = a3[10];
    uint64_t v30 = (uint64_t)a2 + v10;
    uint64_t v31 = a1 + v10;
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v9;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v32(v31, v30, v11);
    uint64_t v12 = a3[11];
    uint64_t v13 = (void *)((char *)v4 + v12);
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    uint64_t v15 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      uint64_t v19 = v14[1];
      *uint64_t v13 = *v14;
      v13[1] = v19;
      uint64_t v20 = *(int *)(v15 + 24);
      uint64_t v21 = (char *)v13 + v20;
      long long v22 = (char *)v14 + v20;
      swift_bridgeObjectRetain();
      v32((uint64_t)v21, (uint64_t)v22, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    uint64_t v23 = a3[12];
    uint64_t v24 = (_OWORD *)((char *)v4 + v23);
    uint64_t v25 = (_OWORD *)((char *)a2 + v23);
    uint64_t v26 = type metadata accessor for CP_SequenceNumber(0);
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      _OWORD *v24 = *v25;
      v32((uint64_t)v24 + *(int *)(v26 + 24), (uint64_t)v25 + *(int *)(v26 + 24), v11);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
  }
  return v4;
}

uint64_t destroy for CP_SubscribeResponse.InitializeAck(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[10];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v12(v4, v5);
  uint64_t v6 = a1 + a2[11];
  uint64_t v7 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v12(v6 + *(int *)(v7 + 24), v5);
  }
  uint64_t v8 = a1 + a2[12];
  uint64_t v9 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
  if (!result)
  {
    uint64_t v11 = v8 + *(int *)(v9 + 24);
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v5);
  }
  return result;
}

uint64_t initializeWithCopy for CP_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  uint64_t v8 = a3[10];
  uint64_t v29 = a2 + v8;
  uint64_t v30 = a1 + v8;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v30, v29, v9);
  uint64_t v11 = a3[11];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    uint64_t v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    uint64_t v18 = *(int *)(v14 + 24);
    uint64_t v19 = (char *)v12 + v18;
    uint64_t v20 = (char *)v13 + v18;
    swift_bridgeObjectRetain();
    v10((uint64_t)v19, (uint64_t)v20, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v21 = a3[12];
  long long v22 = (_OWORD *)(a1 + v21);
  uint64_t v23 = (_OWORD *)(a2 + v21);
  uint64_t v24 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    *long long v22 = *v23;
    v10((uint64_t)v22 + *(int *)(v24 + 24), (uint64_t)v23 + *(int *)(v24 + 24), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  return a1;
}

uint64_t assignWithCopy for CP_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 40);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v35 = *(void *)(v10 - 8);
  uint64_t v36 = v10;
  uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v35 + 24);
  ((void (*)(uint64_t, uint64_t))v34)(v8, v9);
  uint64_t v37 = a3;
  uint64_t v11 = *(int *)(a3 + 44);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (uint64_t *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      *uint64_t v12 = *v13;
      v12[1] = v13[1];
      uint64_t v19 = *(int *)(v14 + 24);
      uint64_t v20 = (char *)v12 + v19;
      uint64_t v21 = (char *)v13 + v19;
      long long v22 = *(void (**)(char *, char *, uint64_t))(v35 + 16);
      swift_bridgeObjectRetain();
      v22(v20, v21, v36);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    outlined destroy of CP_SequenceNumber((uint64_t)v12, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
LABEL_6:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
    memcpy(v12, v13, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v34((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v36);
LABEL_7:
  uint64_t v24 = *(int *)(v37 + 48);
  uint64_t v25 = (char *)(a1 + v24);
  uint64_t v26 = (char *)a2 + v24;
  uint64_t v27 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  int v30 = v29(v25, 1, v27);
  int v31 = v29(v26, 1, v27);
  if (!v30)
  {
    if (!v31)
    {
      *(void *)uint64_t v25 = *(void *)v26;
      *((void *)v25 + 1) = *((void *)v26 + 1);
      v34(&v25[*(int *)(v27 + 24)], &v26[*(int *)(v27 + 24)], v36);
      return a1;
    }
    outlined destroy of CP_SequenceNumber((uint64_t)v25, type metadata accessor for CP_SequenceNumber);
    goto LABEL_12;
  }
  if (v31)
  {
LABEL_12:
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
    memcpy(v25, v26, *(void *)(*(void *)(v32 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v25 = *(void *)v26;
  *((void *)v25 + 1) = *((void *)v26 + 1);
  (*(void (**)(char *, char *, uint64_t))(v35 + 16))(&v25[*(int *)(v27 + 24)], &v26[*(int *)(v27 + 24)], v36);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  return a1;
}

uint64_t initializeWithTake for CP_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v7 = a3[10];
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  uint64_t v12 = a3[11];
  uint64_t v13 = (_OWORD *)(a1 + v12);
  uint64_t v14 = (_OWORD *)(a2 + v12);
  uint64_t v15 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    *uint64_t v13 = *v14;
    v11((char *)v13 + *(int *)(v15 + 24), (char *)v14 + *(int *)(v15 + 24), v10);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v18 = a3[12];
  uint64_t v19 = (_OWORD *)(a1 + v18);
  uint64_t v20 = (_OWORD *)(a2 + v18);
  uint64_t v21 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    *uint64_t v19 = *v20;
    v11((char *)v19 + *(int *)(v21 + 24), (char *)v20 + *(int *)(v21 + 24), v10);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  return a1;
}

uint64_t assignWithTake for CP_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 40);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v32 = *(void *)(v10 - 8);
  uint64_t v33 = v10;
  int v31 = *(void (**)(uint64_t, uint64_t))(v32 + 40);
  v31(v8, v9);
  uint64_t v34 = a3;
  uint64_t v11 = *(int *)(a3 + 44);
  uint64_t v12 = (char *)(a1 + v11);
  uint64_t v13 = (char *)(a2 + v11);
  uint64_t v14 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
      (*(void (**)(char *, char *, uint64_t))(v32 + 32))(&v12[*(int *)(v14 + 24)], &v13[*(int *)(v14 + 24)], v33);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    outlined destroy of CP_SequenceNumber((uint64_t)v12, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v30 = *((void *)v13 + 1);
  *(void *)uint64_t v12 = *(void *)v13;
  *((void *)v12 + 1) = v30;
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v31)(&v12[*(int *)(v14 + 24)], &v13[*(int *)(v14 + 24)], v33);
LABEL_7:
  uint64_t v20 = *(int *)(v34 + 48);
  uint64_t v21 = (_OWORD *)(a1 + v20);
  uint64_t v22 = (_OWORD *)(a2 + v20);
  uint64_t v23 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v24 + 48);
  int v26 = v25(v21, 1, v23);
  int v27 = v25(v22, 1, v23);
  if (!v26)
  {
    if (!v27)
    {
      _OWORD *v21 = *v22;
      ((void (*)(char *, char *, uint64_t))v31)((char *)v21 + *(int *)(v23 + 24), (char *)v22 + *(int *)(v23 + 24), v33);
      return a1;
    }
    outlined destroy of CP_SequenceNumber((uint64_t)v21, type metadata accessor for CP_SequenceNumber);
    goto LABEL_12;
  }
  if (v27)
  {
LABEL_12:
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
    memcpy(v21, v22, *(void *)(*(void *)(v28 - 8) + 64));
    return a1;
  }
  _OWORD *v21 = *v22;
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))((char *)v21 + *(int *)(v23 + 24), (char *)v22 + *(int *)(v23 + 24), v33);
  (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0FFE878);
}

uint64_t sub_1B0FFE878(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[10];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v13(a1 + v11, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[11];
    goto LABEL_9;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a3[12];
  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for CP_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0FFEA0C);
}

uint64_t sub_1B0FFEA0C(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
    return result;
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[10];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[11];
    goto LABEL_7;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = v5 + a4[12];
  return v15(v17, a2, a2, v16);
}

void type metadata completion function for CP_SubscribeResponse.InitializeAck()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CP_SequenceNumber?(319, &lazy cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CP_SequenceNumber?(319, &lazy cache variable for type metadata for CP_SequenceNumber?, (void (*)(uint64_t))type metadata accessor for CP_SequenceNumber);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for CP_TopicSubscribersRequest.TopicTerminationRequest(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *assignWithCopy for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *assignWithTake for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_140Tm_4);
}

uint64_t storeEnumTagSinglePayload for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0FFF03C);
}

uint64_t sub_1B0FFF03C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary()
{
  return type metadata completion function for AttachmentLedger_MMCSMetadata.BlobData();
}

uint64_t *initializeBufferWithCopyOfBuffer for CP_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    uint64_t v12 = *(int *)(a3 + 24);
    uint64_t v13 = (uint64_t *)((char *)v4 + v12);
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    uint64_t v15 = type metadata accessor for CP_EncryptionID(0);
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      uint64_t v19 = *v14;
      unint64_t v20 = v14[1];
      outlined copy of Data._Representation(*v14, v20);
      *uint64_t v13 = v19;
      v13[1] = v20;
      v11((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return v4;
}

uint64_t destroy for CP_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for CP_EncryptionID(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    outlined consume of Data._Representation(*(void *)v6, *(void *)(v6 + 8));
    uint64_t v9 = v6 + *(int *)(v7 + 20);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

void *initializeWithCopy for CP_SubscribeResponse.InitializeAck.MissingEncryptionID(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    uint64_t v17 = *v13;
    unint64_t v18 = v13[1];
    outlined copy of Data._Representation(*v13, v18);
    *uint64_t v12 = v17;
    v12[1] = v18;
    v10((char *)v12 + *(int *)(v14 + 20), (char *)v13 + *(int *)(v14 + 20), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

void *assignWithCopy for CP_SubscribeResponse.InitializeAck.MissingEncryptionID(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(char *, char *))(v10 + 24);
  uint64_t v27 = v9;
  v11(v7, v8);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v28 = a1;
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  int v18 = v17(v14, 1, v15);
  if (!v8)
  {
    if (!v18)
    {
      uint64_t v23 = *v14;
      unint64_t v24 = v14[1];
      outlined copy of Data._Representation(*v14, v24);
      uint64_t v25 = *v13;
      unint64_t v26 = v13[1];
      *uint64_t v13 = v23;
      v13[1] = v24;
      outlined consume of Data._Representation(v25, v26);
      ((void (*)(char *, char *, uint64_t))v11)((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v27);
      return v28;
    }
    outlined destroy of CP_SequenceNumber((uint64_t)v13, type metadata accessor for CP_EncryptionID);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
    memcpy(v13, v14, *(void *)(*(void *)(v21 - 8) + 64));
    return v28;
  }
  uint64_t v19 = *v14;
  unint64_t v20 = v14[1];
  outlined copy of Data._Representation(*v14, v20);
  *uint64_t v13 = v19;
  v13[1] = v20;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v27);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return v28;
}

void *initializeWithTake for CP_SubscribeResponse.InitializeAck.MissingEncryptionID(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (_OWORD *)((char *)a1 + v11);
  uint64_t v13 = (_OWORD *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    v10((char *)v12 + *(int *)(v14 + 20), (char *)v13 + *(int *)(v14 + 20), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

void *assignWithTake for CP_SubscribeResponse.InitializeAck.MissingEncryptionID(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(char *, char *))(v10 + 40);
  uint64_t v23 = v9;
  v11(v7, v8);
  uint64_t v12 = *(int *)(a3 + 24);
  unint64_t v24 = a1;
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  int v18 = v17(v14, 1, v15);
  if (!v8)
  {
    if (!v18)
    {
      uint64_t v21 = *v13;
      unint64_t v22 = v13[1];
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
      outlined consume of Data._Representation(v21, v22);
      ((void (*)(char *, char *, uint64_t))v11)((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v23);
      return v24;
    }
    outlined destroy of CP_SequenceNumber((uint64_t)v13, type metadata accessor for CP_EncryptionID);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
    memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64));
    return v24;
  }
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v23);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return v24;
}

uint64_t getEnumTagSinglePayload for CP_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0FFFB34);
}

uint64_t sub_1B0FFFB34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a3 + 24);
    return v13(v15, a2, v14);
  }
}

uint64_t storeEnumTagSinglePayload for CP_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0FFFC48);
}

uint64_t sub_1B0FFFC48(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    uint64_t v16 = v14;
    uint64_t v17 = a1 + *(int *)(a4 + 24);
    return v15(v17, a2, a2, v16);
  }
}

void type metadata completion function for CP_SubscribeResponse.InitializeAck.MissingEncryptionID()
{
}

{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CP_SequenceNumber?(319, &lazy cache variable for type metadata for CP_EncryptionID?, (void (*)(uint64_t))type metadata accessor for CP_EncryptionID);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void *initializeBufferWithCopyOfBuffer for CP_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (void *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v5 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v5;
    uint64_t v6 = *(int *)(a3 + 32);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for CP_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t initializeWithCopy for CP_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 32);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for CP_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = a2[3];
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for CP_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for CP_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B1000194);
}

uint64_t sub_1B1000194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CP_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B1000258);
}

uint64_t sub_1B1000258(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for CP_SubscribeResponse.TopicUpdate()
{
  return type metadata completion function for CP_SubscribeResponse.TopicUpdate();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CP_SubscribeResponse.TopicUpdate.UpdateEvent()
{
  return &type metadata for CP_SubscribeResponse.TopicUpdate.UpdateEvent;
}

uint64_t *initializeBufferWithCopyOfBuffer for CP_PublishRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
    uint64_t v60 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v60 + 48))(a2, 1, v7))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v12 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
        uint64_t v13 = *(int *)(v12 + 20);
        uint64_t v57 = (char *)a1 + v13;
        uint64_t v14 = (char *)a2 + v13;
        uint64_t v15 = type metadata accessor for UnknownStorage();
        uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
        swift_bridgeObjectRetain();
        uint64_t v54 = v15;
        uint64_t v56 = v16;
        v16(v57, v14, v15);
        uint64_t v17 = *(int *)(v12 + 24);
        int v18 = (uint64_t *)((char *)a1 + v17);
        uint64_t v19 = (uint64_t *)((char *)a2 + v17);
        uint64_t v20 = type metadata accessor for CP_EncryptionID(0);
        uint64_t v21 = *(void *)(v20 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
        {
          uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
          memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
        }
        else
        {
          uint64_t v38 = *v19;
          unint64_t v39 = v19[1];
          outlined copy of Data._Representation(*v19, v39);
          *int v18 = v38;
          v18[1] = v39;
          v56((char *)v18 + *(int *)(v20 + 20), (char *)v19 + *(int *)(v20 + 20), v54);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
        }
      }
      else
      {
        uint64_t v23 = a2[2];
        unint64_t v24 = a2[3];
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v23, v24);
        a1[2] = v23;
        a1[3] = v24;
        uint64_t v25 = a2[5];
        a1[4] = a2[4];
        a1[5] = v25;
        uint64_t v26 = type metadata accessor for CP_Record(0);
        uint64_t v27 = *(int *)(v26 + 32);
        uint64_t v58 = (char *)a1 + v27;
        uint64_t v28 = (char *)a2 + v27;
        uint64_t v29 = type metadata accessor for UnknownStorage();
        uint64_t v30 = *(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16);
        swift_bridgeObjectRetain();
        v30(v58, v28, v29);
        int v31 = v30;
        uint64_t v59 = v26;
        uint64_t v32 = *(int *)(v26 + 36);
        uint64_t v33 = (_OWORD *)((char *)a1 + v32);
        uint64_t v34 = (_OWORD *)((char *)a2 + v32);
        uint64_t v35 = type metadata accessor for CP_SequenceNumber(0);
        uint64_t v36 = *(void *)(v35 - 8);
        unint64_t v53 = v31;
        uint64_t v55 = v29;
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
        {
          uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
          memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
        }
        else
        {
          *uint64_t v33 = *v34;
          v31((char *)v33 + *(int *)(v35 + 24), (char *)v34 + *(int *)(v35 + 24), v29);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
        }
        uint64_t v40 = *(int *)(v59 + 40);
        uint64_t v41 = (uint64_t *)((char *)a1 + v40);
        uint64_t v42 = (uint64_t *)((char *)a2 + v40);
        uint64_t v43 = type metadata accessor for CP_EncryptionID(0);
        uint64_t v44 = *(void *)(v43 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
        {
          uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
          memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
        }
        else
        {
          uint64_t v46 = *v42;
          unint64_t v47 = v42[1];
          outlined copy of Data._Representation(*v42, v47);
          *uint64_t v41 = v46;
          v41[1] = v47;
          v53((char *)v41 + *(int *)(v43 + 20), (char *)v42 + *(int *)(v43 + 20), v55);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v60 + 56))(a1, 0, 1, v7);
    }
    uint64_t v48 = *(int *)(a3 + 20);
    uint64_t v49 = (char *)a1 + v48;
    uint64_t v50 = (char *)a2 + v48;
    uint64_t v51 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 16))(v49, v50, v51);
  }
  return a1;
}

uint64_t destroy for CP_PublishRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4))
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    swift_bridgeObjectRelease();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
      uint64_t v11 = a1 + *(int *)(v10 + 20);
      uint64_t v12 = type metadata accessor for UnknownStorage();
      uint64_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);
      v13(v11, v12);
      uint64_t v14 = a1 + *(int *)(v10 + 24);
      uint64_t v15 = type metadata accessor for CP_EncryptionID(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
      {
        outlined consume of Data._Representation(*(void *)v14, *(void *)(v14 + 8));
        v13(v14 + *(int *)(v15 + 20), v12);
      }
    }
    else
    {
      outlined consume of Data._Representation(*(void *)(a1 + 16), *(void *)(a1 + 24));
      swift_bridgeObjectRelease();
      uint64_t v16 = (int *)type metadata accessor for CP_Record(0);
      uint64_t v17 = a1 + v16[8];
      uint64_t v18 = type metadata accessor for UnknownStorage();
      uint64_t v19 = *(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8);
      v19(v17, v18);
      uint64_t v20 = a1 + v16[9];
      uint64_t v21 = type metadata accessor for CP_SequenceNumber(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v20, 1, v21)) {
        v19(v20 + *(int *)(v21 + 24), v18);
      }
      uint64_t v22 = a1 + v16[10];
      uint64_t v23 = type metadata accessor for CP_EncryptionID(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v22, 1, v23))
      {
        outlined consume of Data._Representation(*(void *)v22, *(void *)(v22 + 8));
        v19(v22 + *(int *)(v23 + 20), v18);
      }
    }
  }
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  return v7(v5, v6);
}

void *initializeWithCopy for CP_PublishRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    uint64_t v54 = v6;
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
      uint64_t v11 = *(int *)(v10 + 20);
      uint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for UnknownStorage();
      uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
      swift_bridgeObjectRetain();
      v15(v12, v13, v14);
      uint64_t v16 = *(int *)(v10 + 24);
      uint64_t v17 = (void *)((char *)a1 + v16);
      uint64_t v18 = (void *)((char *)a2 + v16);
      uint64_t v19 = type metadata accessor for CP_EncryptionID(0);
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        unint64_t v53 = v15;
        uint64_t v37 = *v18;
        unint64_t v38 = v18[1];
        outlined copy of Data._Representation(*v18, v38);
        *uint64_t v17 = v37;
        v17[1] = v38;
        v53((char *)v17 + *(int *)(v19 + 20), (char *)v18 + *(int *)(v19 + 20), v14);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
    }
    else
    {
      uint64_t v22 = a2[2];
      unint64_t v23 = a2[3];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v22, v23);
      a1[2] = v22;
      a1[3] = v23;
      uint64_t v24 = a2[5];
      a1[4] = a2[4];
      a1[5] = v24;
      uint64_t v25 = (int *)type metadata accessor for CP_Record(0);
      uint64_t v26 = v25[8];
      uint64_t v27 = (char *)a1 + v26;
      uint64_t v28 = (char *)a2 + v26;
      uint64_t v29 = type metadata accessor for UnknownStorage();
      uint64_t v30 = *(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16);
      swift_bridgeObjectRetain();
      v30(v27, v28, v29);
      uint64_t v31 = v25[9];
      uint64_t v32 = (_OWORD *)((char *)a1 + v31);
      uint64_t v33 = (_OWORD *)((char *)a2 + v31);
      uint64_t v34 = type metadata accessor for CP_SequenceNumber(0);
      uint64_t v35 = *(void *)(v34 - 8);
      uint64_t v52 = v29;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
      {
        uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
        memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
      }
      else
      {
        *uint64_t v32 = *v33;
        v30((char *)v32 + *(int *)(v34 + 24), (char *)v33 + *(int *)(v34 + 24), v29);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      }
      uint64_t v39 = v25[10];
      uint64_t v40 = (void *)((char *)a1 + v39);
      uint64_t v41 = (void *)((char *)a2 + v39);
      uint64_t v42 = type metadata accessor for CP_EncryptionID(0);
      uint64_t v43 = *(void *)(v42 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
      }
      else
      {
        uint64_t v45 = *v41;
        unint64_t v46 = v41[1];
        outlined copy of Data._Representation(*v41, v46);
        *uint64_t v40 = v45;
        v40[1] = v46;
        v30((char *)v40 + *(int *)(v42 + 20), (char *)v41 + *(int *)(v42 + 20), v52);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v54 + 56))(a1, 0, 1, v5);
  }
  uint64_t v47 = *(int *)(a3 + 20);
  uint64_t v48 = (char *)a1 + v47;
  uint64_t v49 = (char *)a2 + v47;
  uint64_t v50 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 16))(v48, v49, v50);
  return a1;
}

void *assignWithCopy for CP_PublishRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      *a1 = *a2;
      a1[1] = a2[1];
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v11 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
        uint64_t v12 = *(int *)(v11 + 20);
        uint64_t v95 = (char *)a1 + v12;
        uint64_t v13 = (char *)a2 + v12;
        uint64_t v14 = type metadata accessor for UnknownStorage();
        uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
        swift_bridgeObjectRetain();
        uint64_t v90 = v14;
        unint64_t v92 = v15;
        v15(v95, v13, v14);
        uint64_t v16 = *(int *)(v11 + 24);
        uint64_t v17 = (void *)((char *)a1 + v16);
        uint64_t v18 = (void *)((char *)a2 + v16);
        uint64_t v19 = type metadata accessor for CP_EncryptionID(0);
        uint64_t v20 = *(void *)(v19 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
        {
          uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
          memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
        }
        else
        {
          uint64_t v50 = *v18;
          unint64_t v51 = v18[1];
          outlined copy of Data._Representation(*v18, v51);
          *uint64_t v17 = v50;
          v17[1] = v51;
          v92((char *)v17 + *(int *)(v19 + 20), (char *)v18 + *(int *)(v19 + 20), v90);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
        }
      }
      else
      {
        uint64_t v93 = v6;
        uint64_t v36 = a2[2];
        unint64_t v37 = a2[3];
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v36, v37);
        a1[2] = v36;
        a1[3] = v37;
        a1[4] = a2[4];
        a1[5] = a2[5];
        uint64_t v38 = type metadata accessor for CP_Record(0);
        uint64_t v39 = *(int *)(v38 + 32);
        uint64_t v40 = (char *)a1 + v39;
        uint64_t v41 = (char *)a2 + v39;
        uint64_t v42 = type metadata accessor for UnknownStorage();
        uint64_t v43 = *(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 16);
        swift_bridgeObjectRetain();
        uint64_t v91 = v43;
        v43(v40, v41, v42);
        uint64_t v96 = v38;
        uint64_t v44 = *(int *)(v38 + 36);
        uint64_t v45 = (void *)((char *)a1 + v44);
        unint64_t v46 = (void *)((char *)a2 + v44);
        uint64_t v47 = type metadata accessor for CP_SequenceNumber(0);
        uint64_t v48 = *(void *)(v47 - 8);
        uint64_t v89 = v42;
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
        {
          uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
          memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64));
        }
        else
        {
          *uint64_t v45 = *v46;
          v45[1] = v46[1];
          v43((char *)v45 + *(int *)(v47 + 24), (char *)v46 + *(int *)(v47 + 24), v42);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
        }
        uint64_t v6 = v93;
        uint64_t v66 = *(int *)(v96 + 40);
        uint64_t v67 = (void *)((char *)a1 + v66);
        uint64_t v68 = (void *)((char *)a2 + v66);
        uint64_t v69 = type metadata accessor for CP_EncryptionID(0);
        uint64_t v70 = *(void *)(v69 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
        {
          uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
          memcpy(v67, v68, *(void *)(*(void *)(v71 - 8) + 64));
        }
        else
        {
          uint64_t v72 = *v68;
          unint64_t v73 = v68[1];
          outlined copy of Data._Representation(*v68, v73);
          void *v67 = v72;
          v67[1] = v73;
          v91((char *)v67 + *(int *)(v69 + 20), (char *)v68 + *(int *)(v69 + 20), v89);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v70 + 56))(v67, 0, 1, v69);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_23;
    }
LABEL_8:
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
    memcpy(a1, a2, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_23;
  }
  if (v9)
  {
    outlined destroy of CP_SequenceNumber((uint64_t)a1, type metadata accessor for CP_PublishRequest.OneOf_Operation);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of CP_SequenceNumber((uint64_t)a1, type metadata accessor for CP_PublishRequest.OneOf_Operation);
    int v23 = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    a1[1] = a2[1];
    if (v23 == 1)
    {
      uint64_t v24 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
      uint64_t v25 = *(int *)(v24 + 20);
      uint64_t v26 = (char *)a1 + v25;
      uint64_t v27 = (char *)a2 + v25;
      uint64_t v28 = type metadata accessor for UnknownStorage();
      uint64_t v29 = *(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16);
      swift_bridgeObjectRetain();
      v29(v26, v27, v28);
      uint64_t v30 = *(int *)(v24 + 24);
      uint64_t v31 = (void *)((char *)a1 + v30);
      uint64_t v32 = (void *)((char *)a2 + v30);
      uint64_t v33 = type metadata accessor for CP_EncryptionID(0);
      uint64_t v34 = *(void *)(v33 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      {
        uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
      }
      else
      {
        uint64_t v94 = v29;
        uint64_t v79 = *v32;
        unint64_t v80 = v32[1];
        outlined copy of Data._Representation(*v32, v80);
        void *v31 = v79;
        v31[1] = v80;
        v94((char *)v31 + *(int *)(v33 + 20), (char *)v32 + *(int *)(v33 + 20), v28);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      }
    }
    else
    {
      uint64_t v52 = a2[2];
      unint64_t v53 = a2[3];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v52, v53);
      a1[2] = v52;
      a1[3] = v53;
      a1[4] = a2[4];
      a1[5] = a2[5];
      uint64_t v54 = (int *)type metadata accessor for CP_Record(0);
      uint64_t v55 = v54[8];
      uint64_t v56 = (char *)a1 + v55;
      uint64_t v57 = (char *)a2 + v55;
      uint64_t v58 = type metadata accessor for UnknownStorage();
      uint64_t v59 = *(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 16);
      swift_bridgeObjectRetain();
      uint64_t v97 = v59;
      v59(v56, v57, v58);
      uint64_t v60 = v54[9];
      uint64_t v61 = (void *)((char *)a1 + v60);
      uint64_t v62 = (void *)((char *)a2 + v60);
      uint64_t v63 = type metadata accessor for CP_SequenceNumber(0);
      uint64_t v64 = *(void *)(v63 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
      {
        uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
        memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
      }
      else
      {
        void *v61 = *v62;
        v61[1] = v62[1];
        v97((char *)v61 + *(int *)(v63 + 24), (char *)v62 + *(int *)(v63 + 24), v58);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
      }
      uint64_t v81 = v54[10];
      uint64_t v82 = (void *)((char *)a1 + v81);
      uint64_t v83 = (void *)((char *)a2 + v81);
      uint64_t v84 = type metadata accessor for CP_EncryptionID(0);
      uint64_t v85 = *(void *)(v84 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v85 + 48))(v83, 1, v84))
      {
        uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v82, v83, *(void *)(*(void *)(v86 - 8) + 64));
      }
      else
      {
        uint64_t v87 = *v83;
        unint64_t v88 = v83[1];
        outlined copy of Data._Representation(*v83, v88);
        *uint64_t v82 = v87;
        v82[1] = v88;
        v97((char *)v82 + *(int *)(v84 + 20), (char *)v83 + *(int *)(v84 + 20), v58);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v85 + 56))(v82, 0, 1, v84);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_23:
  uint64_t v74 = *(int *)(a3 + 20);
  uint64_t v75 = (char *)a1 + v74;
  uint64_t v76 = (char *)a2 + v74;
  uint64_t v77 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v77 - 8) + 24))(v75, v76, v77);
  return a1;
}

_OWORD *initializeWithTake for CP_PublishRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    uint64_t v49 = a3;
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
      uint64_t v11 = *(int *)(v10 + 20);
      uint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for UnknownStorage();
      uint64_t v15 = (void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32);
      uint64_t v47 = *v15;
      (*v15)(v12, v13, v14);
      uint64_t v16 = *(int *)(v10 + 24);
      uint64_t v17 = (_OWORD *)((char *)a1 + v16);
      uint64_t v18 = (_OWORD *)((char *)a2 + v16);
      uint64_t v19 = type metadata accessor for CP_EncryptionID(0);
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        *uint64_t v17 = *v18;
        v47((char *)v17 + *(int *)(v19 + 20), (char *)v18 + *(int *)(v19 + 20), v14);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
    }
    else
    {
      uint64_t v48 = v7;
      long long v22 = a2[2];
      a1[1] = a2[1];
      a1[2] = v22;
      int v23 = (int *)type metadata accessor for CP_Record(0);
      uint64_t v24 = v23[8];
      uint64_t v25 = (char *)a1 + v24;
      uint64_t v26 = (char *)a2 + v24;
      uint64_t v27 = type metadata accessor for UnknownStorage();
      uint64_t v28 = *(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32);
      v28(v25, v26, v27);
      uint64_t v29 = v23[9];
      uint64_t v30 = (_OWORD *)((char *)a1 + v29);
      uint64_t v31 = (_OWORD *)((char *)a2 + v29);
      uint64_t v32 = type metadata accessor for CP_SequenceNumber(0);
      uint64_t v33 = *(void *)(v32 - 8);
      uint64_t v46 = v27;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
      {
        uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
        memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        _OWORD *v30 = *v31;
        v28((char *)v30 + *(int *)(v32 + 24), (char *)v31 + *(int *)(v32 + 24), v27);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      }
      uint64_t v35 = v23[10];
      uint64_t v36 = (_OWORD *)((char *)a1 + v35);
      unint64_t v37 = (_OWORD *)((char *)a2 + v35);
      uint64_t v38 = type metadata accessor for CP_EncryptionID(0);
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v7 = v48;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
      {
        uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
      }
      else
      {
        *uint64_t v36 = *v37;
        v28((char *)v36 + *(int *)(v38 + 20), (char *)v37 + *(int *)(v38 + 20), v46);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
      }
    }
    a3 = v49;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v41 = *(int *)(a3 + 20);
  uint64_t v42 = (char *)a1 + v41;
  uint64_t v43 = (char *)a2 + v41;
  uint64_t v44 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v42, v43, v44);
  return a1;
}

_OWORD *assignWithTake for CP_PublishRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      *a1 = *a2;
      uint64_t v85 = a3;
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v12 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
        uint64_t v13 = *(int *)(v12 + 20);
        uint64_t v14 = (char *)a1 + v13;
        uint64_t v15 = (char *)a2 + v13;
        uint64_t v16 = type metadata accessor for UnknownStorage();
        uint64_t v17 = (void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32);
        uint64_t v83 = *v17;
        (*v17)(v14, v15, v16);
        uint64_t v18 = *(int *)(v12 + 24);
        uint64_t v19 = (_OWORD *)((char *)a1 + v18);
        uint64_t v20 = (_OWORD *)((char *)a2 + v18);
        uint64_t v21 = type metadata accessor for CP_EncryptionID(0);
        uint64_t v22 = *(void *)(v21 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
        {
          uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
          memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
        }
        else
        {
          *uint64_t v19 = *v20;
          v83((char *)v19 + *(int *)(v21 + 20), (char *)v20 + *(int *)(v21 + 20), v16);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
        }
      }
      else
      {
        long long v38 = a2[2];
        a1[1] = a2[1];
        a1[2] = v38;
        uint64_t v39 = type metadata accessor for CP_Record(0);
        uint64_t v40 = *(int *)(v39 + 32);
        uint64_t v41 = (char *)a1 + v40;
        uint64_t v42 = (char *)a2 + v40;
        uint64_t v43 = type metadata accessor for UnknownStorage();
        uint64_t v44 = *(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 32);
        v44(v41, v42, v43);
        uint64_t v84 = v39;
        uint64_t v45 = *(int *)(v39 + 36);
        uint64_t v46 = (_OWORD *)((char *)a1 + v45);
        uint64_t v47 = (_OWORD *)((char *)a2 + v45);
        uint64_t v48 = type metadata accessor for CP_SequenceNumber(0);
        uint64_t v49 = *(void *)(v48 - 8);
        uint64_t v81 = v43;
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
        {
          uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
          memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64));
        }
        else
        {
          *uint64_t v46 = *v47;
          v44((char *)v46 + *(int *)(v48 + 24), (char *)v47 + *(int *)(v48 + 24), v43);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
        }
        uint64_t v64 = *(int *)(v84 + 40);
        uint64_t v65 = (_OWORD *)((char *)a1 + v64);
        uint64_t v66 = (_OWORD *)((char *)a2 + v64);
        uint64_t v67 = type metadata accessor for CP_EncryptionID(0);
        uint64_t v68 = *(void *)(v67 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
        {
          uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
          memcpy(v65, v66, *(void *)(*(void *)(v69 - 8) + 64));
        }
        else
        {
          *uint64_t v65 = *v66;
          v44((char *)v65 + *(int *)(v67 + 20), (char *)v66 + *(int *)(v67 + 20), v81);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
        }
      }
      a3 = v85;
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_29;
    }
LABEL_8:
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
    memcpy(a1, a2, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_29;
  }
  if (v10)
  {
    outlined destroy of CP_SequenceNumber((uint64_t)a1, type metadata accessor for CP_PublishRequest.OneOf_Operation);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    uint64_t v86 = a3;
    outlined destroy of CP_SequenceNumber((uint64_t)a1, type metadata accessor for CP_PublishRequest.OneOf_Operation);
    int v25 = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (v25 == 1)
    {
      uint64_t v26 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
      uint64_t v27 = *(int *)(v26 + 20);
      uint64_t v28 = (char *)a1 + v27;
      uint64_t v29 = (char *)a2 + v27;
      uint64_t v30 = type metadata accessor for UnknownStorage();
      uint64_t v31 = *(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32);
      v31(v28, v29, v30);
      uint64_t v32 = *(int *)(v26 + 24);
      uint64_t v33 = (_OWORD *)((char *)a1 + v32);
      uint64_t v34 = (_OWORD *)((char *)a2 + v32);
      uint64_t v35 = type metadata accessor for CP_EncryptionID(0);
      uint64_t v36 = *(void *)(v35 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
      {
        uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
      }
      else
      {
        *uint64_t v33 = *v34;
        v31((char *)v33 + *(int *)(v35 + 20), (char *)v34 + *(int *)(v35 + 20), v30);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      }
    }
    else
    {
      long long v51 = a2[2];
      a1[1] = a2[1];
      a1[2] = v51;
      uint64_t v52 = (int *)type metadata accessor for CP_Record(0);
      uint64_t v53 = v52[8];
      uint64_t v54 = (char *)a1 + v53;
      uint64_t v55 = (char *)a2 + v53;
      uint64_t v56 = type metadata accessor for UnknownStorage();
      uint64_t v57 = *(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 32);
      v57(v54, v55, v56);
      uint64_t v58 = v52[9];
      uint64_t v59 = (_OWORD *)((char *)a1 + v58);
      uint64_t v60 = (_OWORD *)((char *)a2 + v58);
      uint64_t v61 = type metadata accessor for CP_SequenceNumber(0);
      uint64_t v62 = *(void *)(v61 - 8);
      uint64_t v82 = v56;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
      {
        uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
        memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
      }
      else
      {
        _OWORD *v59 = *v60;
        v57((char *)v59 + *(int *)(v61 + 24), (char *)v60 + *(int *)(v61 + 24), v56);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
      }
      uint64_t v70 = v52[10];
      uint64_t v71 = (_OWORD *)((char *)a1 + v70);
      uint64_t v72 = (_OWORD *)((char *)a2 + v70);
      uint64_t v73 = type metadata accessor for CP_EncryptionID(0);
      uint64_t v74 = *(void *)(v73 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73))
      {
        uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v71, v72, *(void *)(*(void *)(v75 - 8) + 64));
      }
      else
      {
        *uint64_t v71 = *v72;
        v57((char *)v71 + *(int *)(v73 + 20), (char *)v72 + *(int *)(v73 + 20), v82);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
      }
    }
    swift_storeEnumTagMultiPayload();
    a3 = v86;
  }
LABEL_29:
  uint64_t v76 = *(int *)(a3 + 20);
  uint64_t v77 = (char *)a1 + v76;
  uint64_t v78 = (char *)a2 + v76;
  uint64_t v79 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v79 - 8) + 40))(v77, v78, v79);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_PublishRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B10029B8);
}

uint64_t sub_1B10029B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_149Tm(a1, a2, a3, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
}

uint64_t storeEnumTagSinglePayload for CP_PublishRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B10029D8);
}

uint64_t sub_1B10029D8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_150Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
}

void type metadata completion function for CP_PublishRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void type metadata completion function for CP_TopicSubscribersRequest(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  type metadata accessor for CP_SequenceNumber?(319, a4, a5);
  if (v5 <= 0x3F)
  {
    type metadata accessor for UnknownStorage();
    if (v6 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for CP_PublishRequest.OneOf_Operation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
      uint64_t v9 = *(int *)(v8 + 20);
      int v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for UnknownStorage();
      uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
      swift_bridgeObjectRetain();
      uint64_t v49 = v13;
      v13(v10, v11, v12);
      uint64_t v14 = *(int *)(v8 + 24);
      uint64_t v15 = (uint64_t *)((char *)a1 + v14);
      uint64_t v16 = (uint64_t *)((char *)a2 + v14);
      uint64_t v17 = type metadata accessor for CP_EncryptionID(0);
      uint64_t v18 = *(void *)(v17 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
      }
      else
      {
        uint64_t v36 = *v16;
        unint64_t v37 = v16[1];
        outlined copy of Data._Representation(*v16, v37);
        *uint64_t v15 = v36;
        v15[1] = v37;
        v49((char *)v15 + *(int *)(v17 + 20), (char *)v16 + *(int *)(v17 + 20), v12);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
    }
    else
    {
      uint64_t v21 = a2[2];
      unint64_t v22 = a2[3];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v21, v22);
      a1[2] = v21;
      a1[3] = v22;
      uint64_t v23 = a2[5];
      a1[4] = a2[4];
      a1[5] = v23;
      uint64_t v24 = (int *)type metadata accessor for CP_Record(0);
      uint64_t v25 = v24[8];
      uint64_t v26 = (char *)a1 + v25;
      uint64_t v27 = (char *)a2 + v25;
      uint64_t v28 = type metadata accessor for UnknownStorage();
      uint64_t v29 = *(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16);
      swift_bridgeObjectRetain();
      v29(v26, v27, v28);
      uint64_t v30 = v24[9];
      uint64_t v31 = (_OWORD *)((char *)a1 + v30);
      uint64_t v32 = (_OWORD *)((char *)a2 + v30);
      uint64_t v33 = type metadata accessor for CP_SequenceNumber(0);
      uint64_t v34 = *(void *)(v33 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      {
        uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
        memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
      }
      else
      {
        _OWORD *v31 = *v32;
        v29((char *)v31 + *(int *)(v33 + 24), (char *)v32 + *(int *)(v33 + 24), v28);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      }
      uint64_t v38 = v28;
      uint64_t v39 = v24[10];
      uint64_t v40 = (uint64_t *)((char *)a1 + v39);
      uint64_t v41 = (uint64_t *)((char *)a2 + v39);
      uint64_t v42 = type metadata accessor for CP_EncryptionID(0);
      uint64_t v43 = *(void *)(v42 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
      }
      else
      {
        uint64_t v45 = v38;
        uint64_t v46 = *v41;
        unint64_t v47 = v41[1];
        outlined copy of Data._Representation(*v41, v47);
        *uint64_t v40 = v46;
        v40[1] = v47;
        v29((char *)v40 + *(int *)(v42 + 20), (char *)v41 + *(int *)(v42 + 20), v45);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for CP_PublishRequest.OneOf_Operation(uint64_t a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  swift_bridgeObjectRelease();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v3 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
    uint64_t v4 = a1 + *(int *)(v3 + 20);
    uint64_t v5 = type metadata accessor for UnknownStorage();
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    v15(v4, v5);
    uint64_t v6 = *(int *)(v3 + 24);
  }
  else
  {
    outlined consume of Data._Representation(*(void *)(a1 + 16), *(void *)(a1 + 24));
    swift_bridgeObjectRelease();
    uint64_t v7 = (int *)type metadata accessor for CP_Record(0);
    uint64_t v8 = a1 + v7[8];
    uint64_t v5 = type metadata accessor for UnknownStorage();
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    v15(v8, v5);
    uint64_t v9 = a1 + v7[9];
    uint64_t v10 = type metadata accessor for CP_SequenceNumber(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10)) {
      v15(v9 + *(int *)(v10 + 24), v5);
    }
    uint64_t v6 = v7[10];
  }
  uint64_t v11 = a1 + v6;
  uint64_t v12 = type metadata accessor for CP_EncryptionID(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12);
  if (!result)
  {
    outlined consume of Data._Representation(*(void *)v11, *(void *)(v11 + 8));
    uint64_t v14 = v11 + *(int *)(v12 + 20);
    return ((uint64_t (*)(uint64_t, uint64_t))v15)(v14, v5);
  }
  return result;
}

void *initializeWithCopy for CP_PublishRequest.OneOf_Operation(void *a1, void *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v6 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
    uint64_t v7 = *(int *)(v6 + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
    uint64_t v12 = *(int *)(v6 + 24);
    uint64_t v13 = (void *)((char *)a1 + v12);
    uint64_t v14 = (void *)((char *)a2 + v12);
    uint64_t v15 = type metadata accessor for CP_EncryptionID(0);
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      uint64_t v33 = *v14;
      unint64_t v34 = v14[1];
      outlined copy of Data._Representation(*v14, v34);
      *uint64_t v13 = v33;
      v13[1] = v34;
      v11((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  else
  {
    uint64_t v18 = a2[2];
    unint64_t v19 = a2[3];
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v18, v19);
    a1[2] = v18;
    a1[3] = v19;
    uint64_t v20 = a2[5];
    a1[4] = a2[4];
    a1[5] = v20;
    uint64_t v21 = (int *)type metadata accessor for CP_Record(0);
    uint64_t v22 = v21[8];
    uint64_t v23 = (char *)a1 + v22;
    uint64_t v24 = (char *)a2 + v22;
    uint64_t v25 = type metadata accessor for UnknownStorage();
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16);
    swift_bridgeObjectRetain();
    v26(v23, v24, v25);
    uint64_t v27 = v21[9];
    uint64_t v28 = (_OWORD *)((char *)a1 + v27);
    uint64_t v29 = (_OWORD *)((char *)a2 + v27);
    uint64_t v30 = type metadata accessor for CP_SequenceNumber(0);
    uint64_t v31 = *(void *)(v30 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    {
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
      memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      *uint64_t v28 = *v29;
      v26((char *)v28 + *(int *)(v30 + 24), (char *)v29 + *(int *)(v30 + 24), v25);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
    uint64_t v35 = v21[10];
    uint64_t v36 = (void *)((char *)a1 + v35);
    unint64_t v37 = (void *)((char *)a2 + v35);
    uint64_t v38 = type metadata accessor for CP_EncryptionID(0);
    uint64_t v39 = *(void *)(v38 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
    {
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
      memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
    }
    else
    {
      uint64_t v41 = *v37;
      unint64_t v42 = v37[1];
      outlined copy of Data._Representation(*v37, v42);
      *uint64_t v36 = v41;
      v36[1] = v42;
      v26((char *)v36 + *(int *)(v38 + 20), (char *)v37 + *(int *)(v38 + 20), v25);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for CP_PublishRequest.OneOf_Operation(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of CP_SequenceNumber((uint64_t)a1, type metadata accessor for CP_PublishRequest.OneOf_Operation);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    a1[1] = a2[1];
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v5 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
      uint64_t v6 = *(int *)(v5 + 20);
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = type metadata accessor for UnknownStorage();
      uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
      swift_bridgeObjectRetain();
      v10(v7, v8, v9);
      uint64_t v11 = *(int *)(v5 + 24);
      uint64_t v12 = (void *)((char *)a1 + v11);
      uint64_t v13 = (void *)((char *)a2 + v11);
      uint64_t v14 = type metadata accessor for CP_EncryptionID(0);
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        uint64_t v31 = *v13;
        unint64_t v32 = v13[1];
        outlined copy of Data._Representation(*v13, v32);
        *uint64_t v12 = v31;
        v12[1] = v32;
        v10((char *)v12 + *(int *)(v14 + 20), (char *)v13 + *(int *)(v14 + 20), v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
    }
    else
    {
      uint64_t v17 = a2[2];
      unint64_t v18 = a2[3];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v17, v18);
      a1[2] = v17;
      a1[3] = v18;
      a1[4] = a2[4];
      a1[5] = a2[5];
      unint64_t v19 = (int *)type metadata accessor for CP_Record(0);
      uint64_t v20 = v19[8];
      uint64_t v21 = (char *)a1 + v20;
      uint64_t v22 = (char *)a2 + v20;
      uint64_t v23 = type metadata accessor for UnknownStorage();
      uint64_t v24 = *(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16);
      swift_bridgeObjectRetain();
      v24(v21, v22, v23);
      uint64_t v25 = v19[9];
      uint64_t v26 = (void *)((char *)a1 + v25);
      uint64_t v27 = (void *)((char *)a2 + v25);
      uint64_t v28 = type metadata accessor for CP_SequenceNumber(0);
      uint64_t v29 = *(void *)(v28 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
      {
        uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
        memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
      }
      else
      {
        *uint64_t v26 = *v27;
        v26[1] = v27[1];
        v24((char *)v26 + *(int *)(v28 + 24), (char *)v27 + *(int *)(v28 + 24), v23);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      }
      uint64_t v33 = v19[10];
      unint64_t v34 = (void *)((char *)a1 + v33);
      uint64_t v35 = (void *)((char *)a2 + v33);
      uint64_t v36 = type metadata accessor for CP_EncryptionID(0);
      uint64_t v37 = *(void *)(v36 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
      {
        uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
      }
      else
      {
        uint64_t v39 = *v35;
        unint64_t v40 = v35[1];
        outlined copy of Data._Representation(*v35, v40);
        void *v34 = v39;
        v34[1] = v40;
        v24((char *)v34 + *(int *)(v36 + 20), (char *)v35 + *(int *)(v36 + 20), v23);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for CP_PublishRequest.OneOf_Operation(_OWORD *a1, _OWORD *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  *a1 = *a2;
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
    uint64_t v6 = *(int *)(v5 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
    v10(v7, v8, v9);
    uint64_t v11 = *(int *)(v5 + 24);
    uint64_t v12 = (_OWORD *)((char *)a1 + v11);
    uint64_t v13 = (_OWORD *)((char *)a2 + v11);
    uint64_t v14 = type metadata accessor for CP_EncryptionID(0);
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
      memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      *uint64_t v12 = *v13;
      v10((char *)v12 + *(int *)(v14 + 20), (char *)v13 + *(int *)(v14 + 20), v9);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
  }
  else
  {
    long long v17 = a2[2];
    a1[1] = a2[1];
    a1[2] = v17;
    unint64_t v18 = (int *)type metadata accessor for CP_Record(0);
    uint64_t v19 = v18[8];
    uint64_t v20 = (char *)a1 + v19;
    uint64_t v21 = (char *)a2 + v19;
    uint64_t v22 = type metadata accessor for UnknownStorage();
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32);
    v23(v20, v21, v22);
    uint64_t v24 = v18[9];
    uint64_t v25 = (_OWORD *)((char *)a1 + v24);
    uint64_t v26 = (_OWORD *)((char *)a2 + v24);
    uint64_t v27 = type metadata accessor for CP_SequenceNumber(0);
    uint64_t v28 = *(void *)(v27 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
      memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      *uint64_t v25 = *v26;
      v23((char *)v25 + *(int *)(v27 + 24), (char *)v26 + *(int *)(v27 + 24), v22);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
    uint64_t v30 = v18[10];
    uint64_t v31 = (_OWORD *)((char *)a1 + v30);
    unint64_t v32 = (_OWORD *)((char *)a2 + v30);
    uint64_t v33 = type metadata accessor for CP_EncryptionID(0);
    uint64_t v34 = *(void *)(v33 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
    {
      uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
      memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      _OWORD *v31 = *v32;
      v23((char *)v31 + *(int *)(v33 + 20), (char *)v32 + *(int *)(v33 + 20), v22);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for CP_PublishRequest.OneOf_Operation(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    outlined destroy of CP_SequenceNumber((uint64_t)a1, type metadata accessor for CP_PublishRequest.OneOf_Operation);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v5 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
      uint64_t v6 = *(int *)(v5 + 20);
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = type metadata accessor for UnknownStorage();
      uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
      v10(v7, v8, v9);
      uint64_t v11 = *(int *)(v5 + 24);
      uint64_t v12 = (_OWORD *)((char *)a1 + v11);
      uint64_t v13 = (_OWORD *)((char *)a2 + v11);
      uint64_t v14 = type metadata accessor for CP_EncryptionID(0);
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        *uint64_t v12 = *v13;
        v10((char *)v12 + *(int *)(v14 + 20), (char *)v13 + *(int *)(v14 + 20), v9);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
    }
    else
    {
      long long v17 = a2[2];
      a1[1] = a2[1];
      a1[2] = v17;
      unint64_t v18 = (int *)type metadata accessor for CP_Record(0);
      uint64_t v19 = v18[8];
      uint64_t v20 = (char *)a1 + v19;
      uint64_t v21 = (char *)a2 + v19;
      uint64_t v22 = type metadata accessor for UnknownStorage();
      uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32);
      v23(v20, v21, v22);
      uint64_t v24 = v18[9];
      uint64_t v25 = (_OWORD *)((char *)a1 + v24);
      uint64_t v26 = (_OWORD *)((char *)a2 + v24);
      uint64_t v27 = type metadata accessor for CP_SequenceNumber(0);
      uint64_t v28 = *(void *)(v27 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
        memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        *uint64_t v25 = *v26;
        v23((char *)v25 + *(int *)(v27 + 24), (char *)v26 + *(int *)(v27 + 24), v22);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      }
      uint64_t v30 = v18[10];
      uint64_t v31 = (_OWORD *)((char *)a1 + v30);
      unint64_t v32 = (_OWORD *)((char *)a2 + v30);
      uint64_t v33 = type metadata accessor for CP_EncryptionID(0);
      uint64_t v34 = *(void *)(v33 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      {
        uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
        memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
      }
      else
      {
        _OWORD *v31 = *v32;
        v23((char *)v31 + *(int *)(v33 + 20), (char *)v32 + *(int *)(v33 + 20), v22);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for CP_PublishRequest.OneOf_Operation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for CP_TopicSubscribersRequest.OneOf_Operation(a1, a2, a3, type metadata accessor for CP_Record, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
}

uint64_t *initializeBufferWithCopyOfBuffer for CP_PublishRequest.UpdatedEncryptionID(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 24);
    uint64_t v14 = (uint64_t *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = type metadata accessor for CP_EncryptionID(0);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v20 = *v15;
      unint64_t v21 = v15[1];
      outlined copy of Data._Representation(*v15, v21);
      *uint64_t v14 = v20;
      v14[1] = v21;
      v12((char *)v14 + *(int *)(v16 + 20), (char *)v15 + *(int *)(v16 + 20), v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
  }
  return v4;
}

uint64_t destroy for CP_PublishRequest.UpdatedEncryptionID(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for CP_EncryptionID(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    outlined consume of Data._Representation(*(void *)v6, *(void *)(v6 + 8));
    uint64_t v9 = v6 + *(int *)(v7 + 20);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

void *initializeWithCopy for CP_PublishRequest.UpdatedEncryptionID(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v18 = *v14;
    unint64_t v19 = v14[1];
    outlined copy of Data._Representation(*v14, v19);
    *uint64_t v13 = v18;
    v13[1] = v19;
    v11((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

void *assignWithCopy for CP_PublishRequest.UpdatedEncryptionID(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v26 = *(void *)(v9 - 8);
  uint64_t v27 = v9;
  uint64_t v10 = *(void (**)(char *, char *))(v26 + 24);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, v14);
  int v17 = v16(v13, 1, v14);
  if (!v8)
  {
    if (!v17)
    {
      uint64_t v22 = *v13;
      unint64_t v23 = v13[1];
      outlined copy of Data._Representation(*v13, v23);
      uint64_t v24 = *v12;
      unint64_t v25 = v12[1];
      *uint64_t v12 = v22;
      v12[1] = v23;
      outlined consume of Data._Representation(v24, v25);
      ((void (*)(char *, char *, uint64_t))v10)((char *)v12 + *(int *)(v14 + 20), (char *)v13 + *(int *)(v14 + 20), v27);
      return a1;
    }
    outlined destroy of CP_SequenceNumber((uint64_t)v12, type metadata accessor for CP_EncryptionID);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
    memcpy(v12, v13, *(void *)(*(void *)(v20 - 8) + 64));
    return a1;
  }
  uint64_t v18 = *v13;
  unint64_t v19 = v13[1];
  outlined copy of Data._Representation(*v13, v19);
  *uint64_t v12 = v18;
  v12[1] = v19;
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))((char *)v12 + *(int *)(v14 + 20), (char *)v13 + *(int *)(v14 + 20), v27);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return a1;
}

_OWORD *initializeWithTake for CP_PublishRequest.UpdatedEncryptionID(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (_OWORD *)((char *)a1 + v11);
  uint64_t v13 = (_OWORD *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    v10((char *)v12 + *(int *)(v14 + 20), (char *)v13 + *(int *)(v14 + 20), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

void *assignWithTake for CP_PublishRequest.UpdatedEncryptionID(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v23 = *(void *)(v10 - 8);
  uint64_t v24 = v10;
  uint64_t v11 = *(void (**)(char *, char *))(v23 + 40);
  v11(v8, v9);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v16 = *(void *)(v15 - 8);
  int v17 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v9) = v17(v13, 1, v15);
  int v18 = v17(v14, 1, v15);
  if (!v9)
  {
    if (!v18)
    {
      uint64_t v21 = *v13;
      unint64_t v22 = v13[1];
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
      outlined consume of Data._Representation(v21, v22);
      ((void (*)(char *, char *, uint64_t))v11)((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v24);
      return a1;
    }
    outlined destroy of CP_SequenceNumber((uint64_t)v13, type metadata accessor for CP_EncryptionID);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
    memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64));
    return a1;
  }
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v24);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_PublishRequest.UpdatedEncryptionID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B1004CE4);
}

uint64_t sub_1B1004CE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 24);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for CP_PublishRequest.UpdatedEncryptionID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B1004E28);
}

uint64_t sub_1B1004E28(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 24);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for CP_PublishRequest.UpdatedEncryptionID()
{
}

void *initializeBufferWithCopyOfBuffer for CP_PublishResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v7 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v7;
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 28);
    uint64_t v14 = (_OWORD *)((char *)v4 + v13);
    uint64_t v15 = (_OWORD *)((char *)a2 + v13);
    uint64_t v16 = type metadata accessor for CP_SequenceNumber(0);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      *uint64_t v14 = *v15;
      v12((uint64_t)v14 + *(int *)(v16 + 24), (uint64_t)v15 + *(int *)(v16 + 24), v11);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
  }
  return v4;
}

uint64_t destroy for CP_PublishResponse(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t v7 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    uint64_t v9 = v6 + *(int *)(v7 + 24);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

uint64_t initializeWithCopy for CP_PublishResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (_OWORD *)(a1 + v12);
  uint64_t v14 = (_OWORD *)(a2 + v12);
  uint64_t v15 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    *uint64_t v13 = *v14;
    v11((char *)v13 + *(int *)(v15 + 24), (char *)v14 + *(int *)(v15 + 24), v10);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

uint64_t assignWithCopy for CP_PublishResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v21 + 24);
  ((void (*)(uint64_t, uint64_t))v11)(v8, v9);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (char *)(a1 + v12);
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v9) = v17(v13, 1, v15);
  int v18 = v17(v14, 1, v15);
  if (!v9)
  {
    if (!v18)
    {
      *(void *)uint64_t v13 = *(void *)v14;
      *((void *)v13 + 1) = *((void *)v14 + 1);
      v11(&v13[*(int *)(v15 + 24)], &v14[*(int *)(v15 + 24)], v22);
      return a1;
    }
    outlined destroy of CP_SequenceNumber((uint64_t)v13, type metadata accessor for CP_SequenceNumber);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
    memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v13 = *(void *)v14;
  *((void *)v13 + 1) = *((void *)v14 + 1);
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))(&v13[*(int *)(v15 + 24)], &v14[*(int *)(v15 + 24)], v22);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t initializeWithTake for CP_PublishResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithTake for CP_PublishResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v21 + 40);
  ((void (*)(uint64_t, uint64_t))v11)(v8, v9);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (char *)(a1 + v12);
  uint64_t v14 = (char *)(a2 + v12);
  uint64_t v15 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v9) = v17(v13, 1, v15);
  int v18 = v17(v14, 1, v15);
  if (!v9)
  {
    if (!v18)
    {
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
      v11(&v13[*(int *)(v15 + 24)], &v14[*(int *)(v15 + 24)], v22);
      return a1;
    }
    outlined destroy of CP_SequenceNumber((uint64_t)v13, type metadata accessor for CP_SequenceNumber);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
    memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64));
    return a1;
  }
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(&v13[*(int *)(v15 + 24)], &v14[*(int *)(v15 + 24)], v22);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_PublishResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B1005AC8);
}

uint64_t sub_1B1005AC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_131Tm_0(a1, a2, a3, &demangling cache variable for type metadata for CP_SequenceNumber?);
}

uint64_t storeEnumTagSinglePayload for CP_PublishResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B1005AE8);
}

uint64_t sub_1B1005AE8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_132Tm_0(a1, a2, a3, a4, &demangling cache variable for type metadata for CP_SequenceNumber?);
}

void type metadata completion function for CP_PublishResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t *initializeBufferWithCopyOfBuffer for CP_TopicSubscribers.TopicSubscribersInfo(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    a1[2] = a2[2];
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for CP_TopicSubscribers.TopicSubscribersInfo(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for CP_TopicSubscribers.TopicSubscribersInfo(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *assignWithCopy for CP_TopicSubscribers.TopicSubscribersInfo(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *assignWithTake for CP_TopicSubscribers.TopicSubscribersInfo(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_UpsertTopicMetadataRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_140Tm_5);
}

uint64_t storeEnumTagSinglePayload for CP_UpsertTopicMetadataRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_141Tm_4);
}

void *initializeBufferWithCopyOfBuffer for CP_UpsertTopicMetadataResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v5 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v5;
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for CP_UpsertTopicMetadataResponse(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t initializeWithCopy for CP_UpsertTopicMetadataResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for CP_UpsertTopicMetadataResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for CP_UpsertTopicMetadataResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for CP_UpsertTopicMetadataResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_UpsertTopicMetadataResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B10062B4);
}

uint64_t sub_1B10062B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CP_UpsertTopicMetadataResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B1006378);
}

uint64_t sub_1B1006378(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for CP_UpsertTopicMetadataResponse()
{
  return type metadata completion function for AttachmentLedger_MMCSMetadata.BlobData();
}

void *initializeBufferWithCopyOfBuffer for CP_CreateTopicRequest(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    uint64_t v6 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v6;
    uint64_t v7 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v7;
    uint64_t v8 = *(int *)(a3 + 32);
    uint64_t v9 = (uint64_t)a2 + v8;
    uint64_t v10 = a1 + v8;
    *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v10, v9, v11);
  }
  return v3;
}

uint64_t destroy for CP_CreateTopicRequest(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t initializeWithCopy for CP_CreateTopicRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = a2 + v7;
  uint64_t v9 = a1 + v7;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v9, v8, v10);
  return a1;
}

uint64_t assignWithCopy for CP_CreateTopicRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for CP_CreateTopicRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for CP_CreateTopicRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v8 = *(int *)(a3 + 32);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_CreateTopicRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B10068EC);
}

uint64_t sub_1B10068EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CP_CreateTopicRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B10069B0);
}

uint64_t sub_1B10069B0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for CP_CreateTopicRequest()
{
  return type metadata completion function for CP_SubscribeResponse.TopicUpdate();
}

ValueMetadata *type metadata accessor for CP_CreateTopicRequest.TopicCategory()
{
  return &type metadata for CP_CreateTopicRequest.TopicCategory;
}

void *initializeBufferWithCopyOfBuffer for CP_CreateTopicResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v7 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v7;
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 28);
    uint64_t v14 = (_OWORD *)((char *)v4 + v13);
    uint64_t v15 = (_OWORD *)((char *)a2 + v13);
    uint64_t Topic = type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig(0);
    uint64_t v17 = *(void *)(Topic - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, Topic))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      *uint64_t v14 = *v15;
      *((void *)v14 + 2) = *((void *)v15 + 2);
      *(_OWORD *)((char *)v14 + 24) = *(_OWORD *)((char *)v15 + 24);
      *((_DWORD *)v14 + 10) = *((_DWORD *)v15 + 10);
      v12((uint64_t)v14 + *(int *)(Topic + 48), (uint64_t)v15 + *(int *)(Topic + 48), v11);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, Topic);
    }
  }
  return v4;
}

uint64_t destroy for CP_CreateTopicResponse(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t Topic = type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Topic - 8) + 48))(v6, 1, Topic);
  if (!result)
  {
    uint64_t v9 = v6 + *(int *)(Topic + 48);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

uint64_t initializeWithCopy for CP_CreateTopicResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (_OWORD *)(a1 + v12);
  uint64_t v14 = (_OWORD *)(a2 + v12);
  uint64_t Topic = type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig(0);
  uint64_t v16 = *(void *)(Topic - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, Topic))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    *uint64_t v13 = *v14;
    *((void *)v13 + 2) = *((void *)v14 + 2);
    *(_OWORD *)((char *)v13 + 24) = *(_OWORD *)((char *)v14 + 24);
    *((_DWORD *)v13 + 10) = *((_DWORD *)v14 + 10);
    v11((char *)v13 + *(int *)(Topic + 48), (char *)v14 + *(int *)(Topic + 48), v10);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, Topic);
  }
  return a1;
}

uint64_t assignWithCopy for CP_CreateTopicResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v21 + 24);
  v11(v8, v9);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = (uint64_t)a2 + v12;
  uint64_t Topic = type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig(0);
  uint64_t v16 = *(void *)(Topic - 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v9) = v17(v13, 1, Topic);
  int v18 = v17(v14, 1, Topic);
  if (!v9)
  {
    if (!v18)
    {
      *(void *)uint64_t v13 = *(void *)v14;
      *(void *)(v13 + 8) = *(void *)(v14 + 8);
      *(void *)(v13 + 16) = *(void *)(v14 + 16);
      *(_DWORD *)(v13 + 24) = *(_DWORD *)(v14 + 24);
      *(_DWORD *)(v13 + 28) = *(_DWORD *)(v14 + 28);
      *(_DWORD *)(v13 + 32) = *(_DWORD *)(v14 + 32);
      *(_DWORD *)(v13 + 36) = *(_DWORD *)(v14 + 36);
      *(_DWORD *)(v13 + 40) = *(_DWORD *)(v14 + 40);
      ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v13 + *(int *)(Topic + 48), v14 + *(int *)(Topic + 48), v22);
      return a1;
    }
    outlined destroy of CP_SequenceNumber(v13, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
    memcpy((void *)v13, (const void *)v14, *(void *)(*(void *)(v19 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v13 = *(void *)v14;
  *(void *)(v13 + 8) = *(void *)(v14 + 8);
  *(void *)(v13 + 16) = *(void *)(v14 + 16);
  *(_DWORD *)(v13 + 24) = *(_DWORD *)(v14 + 24);
  *(_DWORD *)(v13 + 28) = *(_DWORD *)(v14 + 28);
  *(_DWORD *)(v13 + 32) = *(_DWORD *)(v14 + 32);
  *(_DWORD *)(v13 + 36) = *(_DWORD *)(v14 + 36);
  *(_DWORD *)(v13 + 40) = *(_DWORD *)(v14 + 40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v13 + *(int *)(Topic + 48), v14 + *(int *)(Topic + 48), v22);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, Topic);
  return a1;
}

uint64_t initializeWithTake for CP_CreateTopicResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t Topic = type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig(0);
  uint64_t v15 = *(void *)(Topic - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, Topic))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    *((void *)v12 + 2) = *((void *)v13 + 2);
    *(_OWORD *)((char *)v12 + 24) = *(_OWORD *)((char *)v13 + 24);
    *((_DWORD *)v12 + 10) = *((_DWORD *)v13 + 10);
    v10((char *)v12 + *(int *)(Topic + 48), (char *)v13 + *(int *)(Topic + 48), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, Topic);
  }
  return a1;
}

uint64_t assignWithTake for CP_CreateTopicResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v21 + 40);
  v11(v8, v9);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t Topic = type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig(0);
  uint64_t v16 = *(void *)(Topic - 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v9) = v17(v13, 1, Topic);
  int v18 = v17(v14, 1, Topic);
  if (!v9)
  {
    if (!v18)
    {
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
      *(void *)(v13 + 16) = *(void *)(v14 + 16);
      *(_OWORD *)(v13 + 24) = *(_OWORD *)(v14 + 24);
      *(_DWORD *)(v13 + 40) = *(_DWORD *)(v14 + 40);
      ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v13 + *(int *)(Topic + 48), v14 + *(int *)(Topic + 48), v22);
      return a1;
    }
    outlined destroy of CP_SequenceNumber(v13, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
    memcpy((void *)v13, (const void *)v14, *(void *)(*(void *)(v19 - 8) + 64));
    return a1;
  }
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *(void *)(v13 + 16) = *(void *)(v14 + 16);
  *(_OWORD *)(v13 + 24) = *(_OWORD *)(v14 + 24);
  *(_DWORD *)(v13 + 40) = *(_DWORD *)(v14 + 40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v13 + *(int *)(Topic + 48), v14 + *(int *)(Topic + 48), v22);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, Topic);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_CreateTopicResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B100766C);
}

uint64_t sub_1B100766C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_131Tm_0(a1, a2, a3, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
}

uint64_t __swift_get_extra_inhabitant_index_131Tm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v5 = *(void *)(a1 + 24);
    if (v5 >= 0xFFFFFFFF) {
      LODWORD(v5) = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == a2)
    {
      uint64_t v12 = v10;
      uint64_t v13 = a1 + *(int *)(a3 + 24);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
      return v14(v13, a2, v12);
    }
    else
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(a4);
      uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
      uint64_t v17 = v15;
      uint64_t v18 = a1 + *(int *)(a3 + 28);
      return v16(v18, a2, v17);
    }
  }
}

uint64_t storeEnumTagSinglePayload for CP_CreateTopicResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B10077BC);
}

uint64_t sub_1B10077BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_132Tm_0(a1, a2, a3, a4, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
}

uint64_t __swift_store_extra_inhabitant_index_132Tm_0(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == a3)
    {
      uint64_t v12 = v10;
      uint64_t v13 = v6 + *(int *)(a4 + 24);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
      return v14(v13, a2, a2, v12);
    }
    else
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
      uint64_t v17 = v15;
      uint64_t v18 = v6 + *(int *)(a4 + 28);
      return v16(v18, a2, a2, v17);
    }
  }
  return result;
}

void type metadata completion function for CP_CreateTopicResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void type metadata completion function for CP_PublishResponse(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  type metadata accessor for UnknownStorage();
  if (v7 <= 0x3F)
  {
    type metadata accessor for CP_SequenceNumber?(319, a4, a5);
    if (v8 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void *initializeBufferWithCopyOfBuffer for CP_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = a2[2];
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
    uint64_t v5 = *(int *)(a3 + 48);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for CP_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 48);
  uint64_t v3 = type metadata accessor for UnknownStorage();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(v2, v3);
}

uint64_t initializeWithCopy for CP_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  uint64_t v4 = *(int *)(a3 + 48);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for CP_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  uint64_t v4 = *(int *)(a3 + 48);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t initializeWithTake for CP_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  uint64_t v4 = *(int *)(a3 + 48);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for CP_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  uint64_t v4 = *(int *)(a3 + 48);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B1007DEC);
}

uint64_t sub_1B1007DEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 48);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
  return v6(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for CP_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B1007E70);
}

uint64_t sub_1B1007E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 48);
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, a2, a2, v6);
}

uint64_t type metadata completion function for CP_CreateTopicResponse.ClientTopicConfig()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CP_FetchTopicsRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  return v5(a1, a2, v4);
}

uint64_t destroy for CP_FetchTopicsRequest(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t initializeWithCopy for CP_FetchTopicsRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for CP_FetchTopicsRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for CP_FetchTopicsRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for CP_FetchTopicsRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_FetchTopicsRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B100820C);
}

uint64_t sub_1B100820C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for CP_FetchTopicsRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B100828C);
}

uint64_t sub_1B100828C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for CP_FetchTopicsRequest()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for CP_FetchTopicsResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v5 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v5;
    uint64_t v6 = *(int *)(a3 + 28);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    *(void *)(a1 + 32) = a2[4];
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for CP_FetchTopicsResponse(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t initializeWithCopy for CP_FetchTopicsResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for CP_FetchTopicsResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for CP_FetchTopicsResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for CP_FetchTopicsResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_FetchTopicsResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B10087E0);
}

uint64_t sub_1B10087E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CP_FetchTopicsResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B10088A4);
}

uint64_t sub_1B10088A4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for CP_FetchTopicsResponse()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t Publisher.waitUntilAvailable<A, B>(for:valueTimeout:scheduler:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = v12;
  uint64_t v43 = a8;
  uint64_t v44 = a7;
  v35[1] = a4;
  uint64_t v37 = a1;
  uint64_t v38 = a2;
  uint64_t v42 = a9;
  uint64_t v40 = a3;
  uint64_t v41 = a12;
  uint64_t v16 = *(void *)(a6 - 8);
  uint64_t v39 = a11;
  v35[2] = a10;
  MEMORY[0x1F4188790](a1);
  uint64_t v36 = (char *)v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v19 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v20 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v22 = (char *)v35 - v21;
  uint64_t v23 = *(void *)(a5 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v20);
  uint64_t v26 = (char *)v35 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v28 = (char *)v35 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = v13;
  uint64_t v32 = v31;
  (*(void (**)(char *, uint64_t))(v29 + 16))(v28, v30);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v26, v37, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, v38, AssociatedTypeWitness);
  uint64_t v33 = (uint64_t)v36;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v36, v40, a6);
  return Publishers.WaitUntilAvailable.init(_:_:_:_:)((uint64_t)v28, (uint64_t)v26, (uint64_t)v22, v33, v32, a5, a6, v42);
}

uint64_t Publishers.WaitUntilAvailable.init(_:_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a8, a1, a5);
  uint64_t v12 = (int *)type metadata accessor for Publishers.WaitUntilAvailable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a8 + v12[21], a2, a6);
  uint64_t v13 = a8 + v12[23];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(v13, a3, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(a8 + v12[22], a4, a7);
}

uint64_t type metadata accessor for Publishers.WaitUntilAvailable()
{
  return swift_getGenericMetadata();
}

uint64_t Publishers.WaitUntilAvailable.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.WaitUntilAvailable.available.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 84));
}

uint64_t Publishers.WaitUntilAvailable.scheduler.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 32) - 8) + 16))(a2, v2 + *(int *)(a1 + 88));
}

uint64_t Publishers.WaitUntilAvailable.valueTimeout.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 92);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);
  return v6(a2, v4, AssociatedTypeWitness);
}

uint64_t Publishers.WaitUntilAvailable.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v33 = a3;
  uint64_t v34 = a4;
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v31 = *(void *)(v5 - 8);
  uint64_t v32 = a1;
  MEMORY[0x1F4188790](a1);
  uint64_t v30 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v7 + 56);
  swift_getAssociatedTypeWitness();
  uint64_t v26 = v5;
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v27 = (char *)&v25 - v11;
  uint64_t v12 = *(void *)(a2 + 24);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v10);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(uint64_t **)(a2 + 16);
  uint64_t v18 = *(v17 - 1);
  MEMORY[0x1F4188790](v14);
  uint64_t v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = v17;
  uint64_t v36 = v12;
  uint64_t v37 = v5;
  long long v38 = *(_OWORD *)(a2 + 40);
  uint64_t v39 = v8;
  long long v40 = *(_OWORD *)(a2 + 64);
  type metadata accessor for Publishers.WaitUntilAvailable.Inner();
  uint64_t v21 = v29;
  (*(void (**)(char *, uint64_t, uint64_t *))(v18 + 16))(v20, v29, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v21 + *(int *)(a2 + 84), v12);
  uint64_t v22 = (uint64_t)v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v27, v21 + *(int *)(a2 + 92), AssociatedTypeWitness);
  uint64_t v23 = (uint64_t)v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v30, v21 + *(int *)(a2 + 88), v26);
  swift_allocObject();
  uint64_t v35 = Publishers.WaitUntilAvailable.Inner.init(upstream:available:valueTimeout:scheduler:)((uint64_t)v20, (uint64_t)v16, v22, v23);
  swift_getWitnessTable();
  Publisher.subscribe<A>(_:)();
  return swift_release();
}

uint64_t type metadata accessor for Publishers.WaitUntilAvailable.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t *Publishers.WaitUntilAvailable.Inner.__allocating_init(upstream:available:valueTimeout:scheduler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.WaitUntilAvailable.Inner.init(upstream:available:valueTimeout:scheduler:)(a1, a2, a3, a4);
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.WaitUntilAvailable<A, B, C>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.WaitUntilAvailable<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.WaitUntilAvailable.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t dispatch thunk of IDProviding.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t type metadata instantiation function for Publishers.WaitUntilAvailable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 80);
}

uint64_t type metadata completion function for Publishers.WaitUntilAvailable()
{
  uint64_t AssociatedTypeWitness = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t AssociatedTypeWitness = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t AssociatedTypeWitness = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_getAssociatedTypeWitness();
        swift_getAssociatedConformanceWitness();
        uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.WaitUntilAvailable(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v26 = a3[2];
  uint64_t v28 = *(void *)(v26 - 8);
  uint64_t v27 = a3[3];
  uint64_t v25 = *(void *)(v27 - 8);
  int v3 = *(_DWORD *)(v25 + 80);
  uint64_t v4 = a3[4];
  uint64_t v23 = *(void *)(v28 + 64) + v3;
  uint64_t v24 = *(void *)(v4 - 8);
  int v5 = *(_DWORD *)(v24 + 80);
  uint64_t v22 = *(void *)(v25 + 64) + v5;
  uint64_t v6 = *(void *)(v24 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = (v3 | *(unsigned char *)(v28 + 80) | v5 | *(unsigned char *)(v8 + 80));
  if (v11 <= 7
    && ((v6 + v9 + ((v22 + (v23 & ~(unint64_t)v3)) & ~(unint64_t)v5)) & ~v9)
     + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) <= 0x18
    && ((v3 | *(_DWORD *)(v28 + 80) | v5 | *(_DWORD *)(v8 + 80)) & 0x100000) == 0)
  {
    uint64_t v16 = AssociatedTypeWitness;
    uint64_t v17 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v28 + 16))(a1, a2, v26);
    unint64_t v18 = ((unint64_t)a1 + v23) & ~(unint64_t)v3;
    unint64_t v19 = ((unint64_t)a2 + v23) & ~(unint64_t)v3;
    uint64_t v15 = a1;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v25 + 16))(v18, v19, v27);
    unint64_t v20 = (v19 + v22) & ~(unint64_t)v5;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v24 + 16))((v18 + v22) & ~(unint64_t)v5, v20, v4);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))((((v18 + v22) & ~(unint64_t)v5) + v10) & v17, (v20 + v10) & v17, v16);
  }
  else
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    uint64_t v15 = (uint64_t *)(v14 + ((v11 + 16) & ~v11));
    swift_retain();
  }
  return v15;
}

uint64_t destroy for Publishers.WaitUntilAvailable(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a2[2] - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56) + a1;
  uint64_t v6 = *(void *)(a2[3] - 8);
  uint64_t v7 = v6 + 8;
  unint64_t v8 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v8);
  uint64_t v9 = *(void *)(a2[4] - 8);
  uint64_t v10 = v9 + 8;
  unint64_t v11 = (v8 + *(void *)(v7 + 56) + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  (*(void (**)(unint64_t, void))(v9 + 8))(v11, a2[4]);
  uint64_t v12 = *(void *)(v10 + 56);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v15 = *(uint64_t (**)(unint64_t, uint64_t))(v14 + 8);
  uint64_t v16 = AssociatedTypeWitness;
  unint64_t v17 = (v11 + v12 + *(unsigned __int8 *)(v14 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  return v15(v17, v16);
}

uint64_t initializeWithCopy for Publishers.WaitUntilAvailable(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 16;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 48) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v11, v12);
  uint64_t v13 = *(void *)(a3[4] - 8);
  uint64_t v14 = v13 + 16;
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = *(void *)(v8 + 48) + v15;
  uint64_t v17 = (v16 + v11) & ~v15;
  uint64_t v18 = (v16 + v12) & ~v15;
  (*(void (**)(uint64_t, uint64_t, void))(v13 + 16))(v17, v18, a3[4]);
  uint64_t v19 = *(void *)(v14 + 48);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v21 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v21 + 16))((v19 + *(unsigned __int8 *)(v21 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80), (v19 + *(unsigned __int8 *)(v21 + 80) + v18) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for Publishers.WaitUntilAvailable(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 24;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 40) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v11, v12);
  uint64_t v13 = *(void *)(a3[4] - 8);
  uint64_t v14 = v13 + 24;
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = *(void *)(v8 + 40) + v15;
  uint64_t v17 = (v16 + v11) & ~v15;
  uint64_t v18 = (v16 + v12) & ~v15;
  (*(void (**)(uint64_t, uint64_t, void))(v13 + 24))(v17, v18, a3[4]);
  uint64_t v19 = *(void *)(v14 + 40);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v21 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v21 + 24))((v19 + *(unsigned __int8 *)(v21 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80), (v19 + *(unsigned __int8 *)(v21 + 80) + v18) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for Publishers.WaitUntilAvailable(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 32) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v11, v12);
  uint64_t v13 = *(void *)(a3[4] - 8);
  uint64_t v14 = v13 + 32;
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = *(void *)(v8 + 32) + v15;
  uint64_t v17 = (v16 + v11) & ~v15;
  uint64_t v18 = (v16 + v12) & ~v15;
  (*(void (**)(uint64_t, uint64_t, void))(v13 + 32))(v17, v18, a3[4]);
  uint64_t v19 = *(void *)(v14 + 32);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v21 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v21 + 32))((v19 + *(unsigned __int8 *)(v21 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80), (v19 + *(unsigned __int8 *)(v21 + 80) + v18) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for Publishers.WaitUntilAvailable(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 24) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v11, v12);
  uint64_t v13 = *(void *)(a3[4] - 8);
  uint64_t v14 = v13 + 40;
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = *(void *)(v8 + 24) + v15;
  uint64_t v17 = (v16 + v11) & ~v15;
  uint64_t v18 = (v16 + v12) & ~v15;
  (*(void (**)(uint64_t, uint64_t, void))(v13 + 40))(v17, v18, a3[4]);
  uint64_t v19 = *(void *)(v14 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v21 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v21 + 40))((v19 + *(unsigned __int8 *)(v21 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80), (v19 + *(unsigned __int8 *)(v21 + 80) + v18) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.WaitUntilAvailable(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  uint64_t v33 = a3[2];
  uint64_t v36 = *(void *)(v33 - 8);
  uint64_t v31 = a3[3];
  uint64_t v3 = *(void *)(v31 - 8);
  unsigned int v4 = *(_DWORD *)(v3 + 84);
  unsigned int v32 = v4;
  unsigned int v34 = *(_DWORD *)(v36 + 84);
  if (v4 <= v34) {
    unsigned int v4 = *(_DWORD *)(v36 + 84);
  }
  uint64_t v5 = a3[4];
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned int v30 = *(_DWORD *)(v6 + 84);
  if (v30 <= v4) {
    unsigned int v7 = v4;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v9 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = *(void *)(v3 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v12 = *(void *)(v6 + 64);
  uint64_t v13 = *(unsigned __int8 *)(v8 + 80);
  if (*(_DWORD *)(v8 + 84) <= v7) {
    unsigned int v14 = v7;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v8 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v15 = *(void *)(v36 + 64) + v9;
  uint64_t v16 = a1;
  if (a2 <= v14) {
    goto LABEL_29;
  }
  uint64_t v17 = ((v12 + v13 + ((v10 + v11 + (v15 & ~v9)) & ~v11)) & ~v13) + *(void *)(v8 + 64);
  char v18 = 8 * v17;
  if (v17 > 3) {
    goto LABEL_12;
  }
  unsigned int v20 = ((a2 - v14 + ~(-1 << v18)) >> v18) + 1;
  if (HIWORD(v20))
  {
    int v19 = *(_DWORD *)((char *)a1 + v17);
    if (!v19) {
      goto LABEL_29;
    }
    goto LABEL_19;
  }
  if (v20 > 0xFF)
  {
    int v19 = *(unsigned __int16 *)((char *)a1 + v17);
    if (!*(unsigned __int16 *)((char *)a1 + v17)) {
      goto LABEL_29;
    }
    goto LABEL_19;
  }
  if (v20 >= 2)
  {
LABEL_12:
    int v19 = *((unsigned __int8 *)a1 + v17);
    if (!*((unsigned char *)a1 + v17)) {
      goto LABEL_29;
    }
LABEL_19:
    int v21 = (v19 - 1) << v18;
    if (v17 > 3) {
      int v21 = 0;
    }
    if (v17)
    {
      if (v17 <= 3) {
        int v22 = v17;
      }
      else {
        int v22 = 4;
      }
      switch(v22)
      {
        case 2:
          int v23 = *a1;
          break;
        case 3:
          int v23 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
          break;
        case 4:
          int v23 = *(_DWORD *)a1;
          break;
        default:
          int v23 = *(unsigned __int8 *)a1;
          break;
      }
    }
    else
    {
      int v23 = 0;
    }
    return v14 + (v23 | v21) + 1;
  }
LABEL_29:
  if (!v14) {
    return 0;
  }
  if (v34 == v14)
  {
    uint64_t v24 = v33;
    uint64_t v25 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v36 + 48);
    uint64_t v26 = v34;
    return v25(v16, v26, v24);
  }
  uint64_t v16 = (unsigned __int16 *)(((unint64_t)a1 + v15) & ~v9);
  if (v32 == v14)
  {
    uint64_t v25 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v3 + 48);
    uint64_t v26 = v32;
    uint64_t v24 = v31;
    return v25(v16, v26, v24);
  }
  uint64_t v16 = (unsigned __int16 *)(((unint64_t)v16 + v10 + v11) & ~v11);
  if (v30 == v14)
  {
    uint64_t v25 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
    uint64_t v26 = v30;
    uint64_t v24 = v5;
    return v25(v16, v26, v24);
  }
  unint64_t v28 = ((unint64_t)v16 + v12 + v13) & ~v13;
  uint64_t v29 = *(uint64_t (**)(unint64_t))(v8 + 48);
  return v29(v28);
}

void storeEnumTagSinglePayload for Publishers.WaitUntilAvailable(unsigned char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v4 = *(void *)(a4[2] - 8);
  uint64_t v33 = *(void *)(a4[3] - 8);
  unsigned int v5 = *(_DWORD *)(v33 + 84);
  unsigned int v30 = v5;
  unsigned int v31 = *(_DWORD *)(v4 + 84);
  if (v5 <= v31) {
    unsigned int v5 = *(_DWORD *)(v4 + 84);
  }
  uint64_t v6 = *(void *)(a4[4] - 8);
  uint64_t v32 = v6;
  unsigned int v29 = *(_DWORD *)(v6 + 84);
  if (v29 <= v5) {
    unsigned int v7 = v5;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v9 = v8;
  if (*(_DWORD *)(v8 + 84) <= v7) {
    unsigned int v10 = v7;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v11 = *(unsigned __int8 *)(v33 + 80);
  uint64_t v12 = *(void *)(v4 + 64) + v11;
  uint64_t v13 = *(void *)(v33 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v15 = *(void *)(v6 + 64);
  uint64_t v16 = *(unsigned __int8 *)(v8 + 80);
  size_t v17 = ((v15 + v16 + ((v13 + v14 + (v12 & ~v11)) & ~v14)) & ~v16) + *(void *)(v8 + 64);
  if (a3 <= v10)
  {
    int v20 = 0;
    char v18 = a1;
    unsigned int v19 = a2;
  }
  else
  {
    char v18 = a1;
    unsigned int v19 = a2;
    if (v17 <= 3)
    {
      unsigned int v23 = ((a3 - v10 + ~(-1 << (8 * v17))) >> (8 * v17)) + 1;
      if (HIWORD(v23))
      {
        int v20 = 4;
      }
      else if (v23 >= 0x100)
      {
        int v20 = 2;
      }
      else
      {
        int v20 = v23 > 1;
      }
    }
    else
    {
      int v20 = 1;
    }
  }
  if (v10 < v19)
  {
    unsigned int v21 = ~v10 + v19;
    if (v17 < 4)
    {
      int v22 = (v21 >> (8 * v17)) + 1;
      if (v17)
      {
        int v24 = v21 & ~(-1 << (8 * v17));
        bzero(v18, v17);
        if (v17 == 3)
        {
          *(_WORD *)char v18 = v24;
          v18[2] = BYTE2(v24);
        }
        else if (v17 == 2)
        {
          *(_WORD *)char v18 = v24;
        }
        else
        {
          *char v18 = v24;
        }
      }
    }
    else
    {
      bzero(v18, v17);
      *(_DWORD *)char v18 = v21;
      int v22 = 1;
    }
    switch(v20)
    {
      case 1:
        v18[v17] = v22;
        return;
      case 2:
        *(_WORD *)&v18[v17] = v22;
        return;
      case 3:
        goto LABEL_53;
      case 4:
        *(_DWORD *)&v18[v17] = v22;
        return;
      default:
        return;
    }
  }
  switch(v20)
  {
    case 1:
      v18[v17] = 0;
      if (!v19) {
        return;
      }
      goto LABEL_29;
    case 2:
      *(_WORD *)&v18[v17] = 0;
      if (!v19) {
        return;
      }
      goto LABEL_29;
    case 3:
LABEL_53:
      __break(1u);
      JUMPOUT(0x1B100AD34);
    case 4:
      *(_DWORD *)&v18[v17] = 0;
      goto LABEL_28;
    default:
LABEL_28:
      if (!v19) {
        return;
      }
LABEL_29:
      if (v31 == v10)
      {
        uint64_t v25 = *(void (**)(unsigned char *))(v4 + 56);
        uint64_t v26 = v18;
        goto LABEL_33;
      }
      uint64_t v26 = (unsigned char *)((unint64_t)&v18[v12] & ~v11);
      if (v30 == v10)
      {
        uint64_t v25 = *(void (**)(unsigned char *))(v33 + 56);
LABEL_33:
LABEL_35:
        v25(v26);
        return;
      }
      uint64_t v26 = (unsigned char *)((unint64_t)&v26[v13 + v14] & ~v14);
      if (v29 == v10)
      {
        uint64_t v25 = *(void (**)(unsigned char *))(v32 + 56);
        goto LABEL_35;
      }
      unint64_t v27 = (unint64_t)&v26[v15 + v16] & ~v16;
      unint64_t v28 = *(void (**)(unint64_t))(v9 + 56);
      v28(v27);
      return;
  }
}

uint64_t type metadata completion function for Publishers.WaitUntilAvailable.Inner()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t v0 = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t v3 = swift_checkMetadataState();
      if (v4 > 0x3F)
      {
        return v3;
      }
      else
      {
        swift_getAssociatedTypeWitness();
        swift_getAssociatedConformanceWitness();
        uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        if (v6 > 0x3F)
        {
          return AssociatedTypeWitness;
        }
        else
        {
          swift_getAssociatedTypeWitness();
          uint64_t v0 = type metadata accessor for Optional();
          if (v7 <= 0x3F) {
            return swift_initClassMetadata2();
          }
        }
      }
    }
  }
  return v0;
}

uint64_t *Publishers.WaitUntilAvailable.Inner.init(upstream:available:valueTimeout:scheduler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *v4;
  uint64_t v6 = *(void *)(*v4 + 176);
  uint64_t v7 = *(void *)(*v4 + 80);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  swift_getAssociatedConformanceWitness();
  *(uint64_t *)((char *)v4 + v6) = Dictionary.init()();
  uint64_t v8 = *(void *)(*v4 + 184);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cancellable);
  *(uint64_t *)((char *)v4 + v8) = Dictionary.init()();
  uint64_t v9 = (uint64_t)v4 + *(void *)(*v4 + 192);
  uint64_t v10 = *(void *)(v5 + 88);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v9, 1, 1, AssociatedTypeWitness);
  uint64_t v12 = *(void *)(*v4 + 200);
  type metadata accessor for Lock();
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = (_DWORD *)swift_slowAlloc();
  *(void *)(v13 + 16) = v14;
  *uint64_t v14 = 0;
  *(uint64_t *)((char *)v4 + v12) = v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))((uint64_t)v4 + *(void *)(*v4 + 144), a1, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))((uint64_t)v4 + *(void *)(*v4 + 152), a2, v10);
  uint64_t v15 = (uint64_t)v4 + *(void *)(*v4 + 168);
  uint64_t v16 = *(void *)(v5 + 96);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v17 = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 32))(v15, a3, v17);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))((uint64_t)v4 + *(void *)(*v4 + 160), a4, v16);
  return v4;
}

uint64_t Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v81 = a3;
  uint64_t v91 = a2;
  uint64_t v88 = a1;
  unint64_t v4 = *(void **)v3;
  uint64_t v5 = *(void *)(*(void *)v3 + 80);
  uint64_t v6 = *(void *)(*(void *)v3 + 104);
  uint64_t v7 = type metadata accessor for Publishers.Filter();
  uint64_t v90 = v5;
  swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Array();
  swift_getWitnessTable();
  uint64_t v78 = v8;
  uint64_t v87 = type metadata accessor for Publishers.Sequence();
  uint64_t v92 = v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v103 = v87;
  uint64_t v104 = AssociatedTypeWitness;
  uint64_t v105 = WitnessTable;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v75 = AssociatedConformanceWitness;
  type metadata accessor for Publishers.SetFailureType();
  uint64_t v10 = v4[11];
  uint64_t v62 = v4;
  uint64_t v74 = v4[14];
  uint64_t v11 = v10;
  uint64_t v12 = type metadata accessor for Publishers.SetFailureType();
  uint64_t v77 = swift_getWitnessTable();
  uint64_t v13 = v12;
  uint64_t v64 = v12;
  uint64_t v14 = type metadata accessor for Publishers.Map();
  swift_getWitnessTable();
  uint64_t v80 = swift_getWitnessTable();
  uint64_t v71 = v14;
  uint64_t v15 = type metadata accessor for Publishers.FlatMap();
  uint64_t v84 = swift_getWitnessTable();
  uint64_t v83 = swift_getWitnessTable();
  uint64_t v103 = v7;
  uint64_t v104 = v15;
  uint64_t v16 = v7;
  uint64_t v69 = v7;
  uint64_t v76 = v15;
  uint64_t v105 = v84;
  uint64_t AssociatedConformanceWitness = v83;
  uint64_t v82 = type metadata accessor for Publishers.Merge();
  uint64_t v85 = *(void *)(v82 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v82);
  uint64_t v79 = (char *)&v61 - v18;
  uint64_t v65 = *(void *)(v13 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  unsigned int v21 = (char *)&v61 - v20;
  uint64_t v73 = *(void *)(v14 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v19);
  uint64_t v89 = (char *)&v61 - v23;
  uint64_t v72 = *(void *)(v15 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v70 = (char *)&v61 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v66 = (char *)&v61 - v27;
  uint64_t v68 = *(void *)(v16 - 8);
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v67 = (char *)&v61 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v28);
  uint64_t v63 = (char *)&v61 - v30;
  unsigned int v31 = (void *)swift_allocObject();
  uint64_t v32 = v91;
  uint64_t v33 = v81;
  v31[2] = v91;
  v31[3] = v33;
  v31[4] = v3;
  swift_retain();
  uint64_t v34 = v90;
  Publisher.filter(_:)();
  swift_release();
  uint64_t v61 = v11;
  uint64_t v35 = v74;
  Publisher<>.setFailureType<A>(to:)();
  uint64_t v36 = (void *)swift_allocObject();
  uint64_t v37 = v32;
  v36[2] = v32;
  v36[3] = v33;
  uint64_t v38 = v33;
  v36[4] = v3;
  swift_retain();
  uint64_t v39 = v64;
  Publisher.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v65 + 8))(v21, v39);
  uint64_t v93 = v34;
  uint64_t v94 = v11;
  uint64_t v95 = v62[12];
  uint64_t v40 = v95;
  uint64_t v96 = v37;
  uint64_t v41 = v37;
  uint64_t v42 = v92;
  uint64_t v97 = v92;
  uint64_t v98 = v35;
  uint64_t v99 = v62[15];
  uint64_t v43 = v99;
  uint64_t v100 = v38;
  uint64_t v44 = v38;
  uint64_t v101 = v62[16];
  uint64_t v45 = v101;
  uint64_t v102 = v62[17];
  uint64_t v46 = v102;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v48 = (void *)swift_allocObject();
  uint64_t v49 = v61;
  v48[2] = v90;
  v48[3] = v49;
  v48[4] = v40;
  v48[5] = v41;
  v48[6] = v42;
  v48[7] = v35;
  v48[8] = v43;
  v48[9] = v44;
  v48[10] = v45;
  v48[11] = v46;
  v48[12] = KeyPath;
  static Subscribers.Demand.unlimited.getter();
  uint64_t v50 = v66;
  uint64_t v51 = v71;
  uint64_t v52 = v89;
  Publisher.flatMap<A>(maxPublishers:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v73 + 8))(v52, v51);
  uint64_t v53 = v68;
  uint64_t v54 = v63;
  uint64_t v55 = v69;
  (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v67, v63, v69);
  uint64_t v56 = v72;
  uint64_t v57 = v76;
  (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v70, v50, v76);
  uint64_t v58 = v79;
  Publishers.Merge.init(_:_:)();
  uint64_t v59 = v82;
  swift_getWitnessTable();
  Publisher.subscribe<A>(_:)();
  (*(void (**)(char *, uint64_t))(v85 + 8))(v58, v59);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v50, v57);
  return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v54, v55);
}

uint64_t closure #1 in Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v107 = a4;
  uint64_t v106 = a3;
  uint64_t v109 = a1;
  uint64_t v99 = *(void **)a2;
  uint64_t v5 = v99;
  uint64_t v6 = v99[10];
  uint64_t v105 = v99[13];
  uint64_t v104 = v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v94 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v100 = (char *)&v88 - v8;
  uint64_t v9 = v99[12];
  uint64_t v103 = v99[15];
  uint64_t v93 = v9;
  uint64_t v101 = swift_getAssociatedTypeWitness();
  uint64_t v115 = *(void *)(v101 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v101);
  uint64_t AssociatedConformanceWitness = (uint64_t)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  unint64_t v114 = (char *)&v88 - v12;
  uint64_t v13 = v5[14];
  uint64_t v116 = v5[11];
  uint64_t v117 = v13;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v98 = *(char **)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v96 = (char *)&v88 - v15;
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v88 - v18;
  uint64_t v20 = v5[16];
  uint64_t v112 = swift_getAssociatedTypeWitness();
  uint64_t v108 = *(void *)(v112 - 8);
  uint64_t v21 = *(void *)(v108 + 64);
  uint64_t v22 = MEMORY[0x1F4188790](v112);
  uint64_t v113 = (uint64_t)&v88 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v22);
  uint64_t v92 = (char *)&v88 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v111 = (char *)&v88 - v26;
  MEMORY[0x1F4188790](v25);
  uint64_t v28 = (char *)&v88 - v27;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(*(void *)&a2[v5[25]] + 16));
  uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v20 + 24);
  uint64_t v110 = AssociatedTypeWitness;
  v29(AssociatedTypeWitness, v20);
  uint64_t v30 = &a2[*(void *)(*(void *)a2 + 192)];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v19, v30, v16);
  unsigned int v31 = v98;
  int v32 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v98 + 6))(v19, 1, v14);
  uint64_t v102 = v20;
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  }
  else
  {
    uint64_t v33 = v96;
    (*((void (**)(char *, char *, uint64_t))v31 + 2))(v96, v19, v14);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    swift_getAssociatedConformanceWitness();
    char v34 = Sequence<>.contains(_:)();
    (*((void (**)(char *, uint64_t))v31 + 1))(v33, v14);
    if (v34)
    {
      (*(void (**)(char *, uint64_t))(v108 + 8))(v28, v112);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(*(void *)&a2[*(void *)(*(void *)a2 + 200)] + 16));
      return 1;
    }
  }
  uint64_t v91 = &a2[*(void *)(*(void *)a2 + 160)];
  uint64_t v36 = AssociatedConformanceWitness;
  uint64_t v37 = v93;
  dispatch thunk of Scheduler.now.getter();
  uint64_t v90 = &a2[*(void *)(*(void *)a2 + 168)];
  uint64_t v38 = v37;
  uint64_t v39 = v101;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of Strideable.advanced(by:)();
  uint64_t v40 = *(void (**)(char *, uint64_t))(v115 + 8);
  v115 += 8;
  uint64_t v89 = v40;
  v40((char *)v36, v39);
  uint64_t v41 = v108;
  uint64_t v42 = (char *)(v108 + 16);
  uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v108 + 16);
  uint64_t v44 = v112;
  v43(v111, v28, v112);
  uint64_t v45 = v43;
  uint64_t v95 = (void (*)(uint64_t, char *, uint64_t))v43;
  uint64_t v96 = v42;
  uint64_t v46 = swift_allocObject();
  swift_weakInit();
  unint64_t v47 = v92;
  v45(v92, v28, v44);
  unint64_t v48 = (*(unsigned __int8 *)(v41 + 80) + 104) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
  uint64_t v49 = (char *)swift_allocObject();
  uint64_t v50 = v116;
  *((void *)v49 + 2) = v104;
  *((void *)v49 + 3) = v50;
  uint64_t v98 = v28;
  uint64_t v51 = v38;
  uint64_t v52 = v106;
  *((void *)v49 + 4) = v38;
  *((void *)v49 + 5) = v52;
  uint64_t v53 = v117;
  *((void *)v49 + 6) = v105;
  *((void *)v49 + 7) = v53;
  uint64_t v54 = v103;
  uint64_t v55 = v107;
  *((void *)v49 + 8) = v103;
  *((void *)v49 + 9) = v55;
  uint64_t v56 = v102;
  *((void *)v49 + 10) = v102;
  uint64_t v99 = (void *)v99[17];
  *((void *)v49 + 11) = v99;
  *((void *)v49 + 12) = v46;
  (*(void (**)(char *, char *, uint64_t))(v41 + 32))(&v49[v48], v47, v44);
  swift_retain();
  uint64_t v57 = v51;
  uint64_t v58 = v54;
  Scheduler.schedule(after:interval:_:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Cancellable);
  uint64_t v92 = a2;
  uint64_t v59 = v110;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for Dictionary();
  Dictionary.subscript.setter();
  swift_endAccess();
  v95(v113, v98, v44);
  uint64_t v60 = (void *)swift_allocObject();
  uint64_t v61 = v104;
  uint64_t v62 = v116;
  v60[2] = v104;
  v60[3] = v62;
  uint64_t v63 = v57;
  uint64_t v64 = v106;
  v60[4] = v57;
  v60[5] = v64;
  uint64_t v65 = v105;
  uint64_t v66 = v117;
  v60[6] = v105;
  v60[7] = v66;
  uint64_t v67 = v58;
  v60[8] = v58;
  uint64_t v68 = v107;
  v60[9] = v107;
  v60[10] = v56;
  v60[11] = v99;
  uint64_t v69 = v59;
  uint64_t v70 = v92;
  (*(void (**)(char *, uint64_t, uint64_t))(v94 + 16))(v100, v109, v69);
  uint64_t v71 = (uint64_t *)&v70[*(void *)(*(void *)v70 + 176)];
  swift_beginAccess();
  uint64_t v72 = (void *)swift_allocObject();
  uint64_t v73 = v116;
  v72[2] = v61;
  v72[3] = v73;
  v72[4] = v63;
  v72[5] = v64;
  uint64_t v74 = v117;
  v72[6] = v65;
  v72[7] = v74;
  v72[8] = v67;
  v72[9] = v68;
  uint64_t v75 = v99;
  v72[10] = v102;
  v72[11] = v75;
  v72[12] = partial apply for implicit closure #1 in closure #1 in Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:);
  v72[13] = v60;
  LODWORD(v117) = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v118 = *v71;
  uint64_t v76 = v118;
  *uint64_t v71 = 0x8000000000000000;
  uint64_t v77 = v112;
  __RawDictionaryStorage.find<A>(_:)(v113, v112, AssociatedConformanceWitness);
  uint64_t v79 = *(void *)(v76 + 16);
  BOOL v80 = (v78 & 1) == 0;
  Swift::Int v81 = v79 + v80;
  if (__OFADD__(v79, v80))
  {
    __break(1u);
LABEL_13:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  char v82 = v78;
  uint64_t v116 = type metadata accessor for Array();
  type metadata accessor for _NativeDictionary();
  Swift::Bool v83 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v117, v81);
  uint64_t v84 = v113;
  if (v83)
  {
    __RawDictionaryStorage.find<A>(_:)(v113, v77, AssociatedConformanceWitness);
    if ((v82 & 1) != (v85 & 1)) {
      goto LABEL_13;
    }
  }
  *uint64_t v71 = v118;
  swift_bridgeObjectRelease();
  if (v82)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v86 = swift_bridgeObjectRetain();
    uint64_t v118 = ((uint64_t (*)(uint64_t))v72[12])(v86);
    v95((uint64_t)v111, (char *)v84, v77);
    _NativeDictionary._insert(at:key:value:)();
  }
  swift_bridgeObjectRelease();
  Array.append(_:)();
  uint64_t v87 = *(void (**)(uint64_t, uint64_t))(v108 + 8);
  v87(v84, v77);
  swift_endAccess();
  v89(v114, v101);
  v87((uint64_t)v98, v77);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(*(void *)&v70[*(void *)(*(void *)v70 + 200)] + 16));
  swift_release();
  swift_release();
  return 0;
}

uint64_t closure #1 in closure #1 in Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v5 = *(void *)(result + *(void *)(*(void *)result + 200));
    swift_retain();
    swift_release();
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v5 + 16));
    closure #1 in closure #1 in closure #1 in Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:)(a1, a2);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 16));
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:)(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v6 = &v8[-v5];
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v4 + 16))(v6, a2, AssociatedTypeWitness);
    uint64_t v10 = 0;
    swift_beginAccess();
    type metadata accessor for Array();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for Dictionary();
    Dictionary.subscript.setter();
    swift_endAccess();
    swift_release();
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v4 + 16))(v6, a2, AssociatedTypeWitness);
    uint64_t v9 = 0;
    memset(&v8[32], 0, 32);
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Cancellable);
    swift_getAssociatedConformanceWitness();
    type metadata accessor for Dictionary();
    Dictionary.subscript.setter();
    swift_endAccess();
    return swift_release();
  }
  return result;
}

void closure #2 in Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:)(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v8 = *a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v19 - v15;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(*(uint64_t *)((char *)a2 + *(void *)(v8 + 200)) + 16));
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v16, a1, AssociatedTypeWitness);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v16, 0, 1, AssociatedTypeWitness);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v16, v10);
  uint64_t v18 = (uint64_t)a2 + *(void *)(*a2 + 192);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 40))(v18, v14, v10);
  swift_endAccess();
  uint64_t v21 = a3;
  uint64_t v22 = v19;
  uint64_t v23 = a2;
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  swift_getWitnessTable();
  uint64_t *v20 = Sequence.flatMap<A>(_:)();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(*(uint64_t *)((char *)a2 + *(void *)(*a2 + 200)) + 16));
}

uint64_t closure #1 in closure #2 in Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v18 = a3;
  uint64_t v5 = *a2;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v17 = (char *)&v16 - v7;
  uint64_t v8 = (uint64_t *)((char *)a2 + *(void *)(v5 + 176));
  swift_beginAccess();
  uint64_t v9 = *v8;
  uint64_t v10 = type metadata accessor for Array();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_bridgeObjectRetain();
  uint64_t v12 = a1;
  MEMORY[0x1B3EA1A00](v20, a1, v9, AssociatedTypeWitness, v10, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  if (*(void *)&v20[0])
  {
    uint64_t v13 = v17;
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
    uint64_t v16 = *(void *)&v20[0];
    v14(v17, v12, AssociatedTypeWitness);
    uint64_t v19 = 0;
    swift_beginAccess();
    type metadata accessor for Dictionary();
    Dictionary.subscript.setter();
    swift_endAccess();
    v14(v13, v12, AssociatedTypeWitness);
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Cancellable);
    type metadata accessor for Dictionary();
    Dictionary.subscript.setter();
    swift_endAccess();
    uint64_t result = v16;
  }
  else
  {
    uint64_t result = static Array._allocateUninitialized(_:)();
  }
  *uint64_t v18 = result;
  return result;
}

uint64_t key path getter for Sequence.publisher : <A, B, C><A1>[A.Output]()
{
  return Sequence.publisher.getter();
}

uint64_t *Publishers.WaitUntilAvailable.Inner.deinit()
{
  uint64_t v1 = *v0;
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*v0 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 144));
  (*(void (**)(uint64_t, void))(*(void *)(*(void *)(v1 + 88) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 152), *(void *)(v1 + 88));
  (*(void (**)(uint64_t, void))(*(void *)(*(void *)(v1 + 96) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 160), *(void *)(v1 + 96));
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 168);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v2, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = (uint64_t)v0 + *(void *)(*v0 + 192);
  swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_release();
  return v0;
}

uint64_t Publishers.WaitUntilAvailable.Inner.__deallocating_deinit()
{
  Publishers.WaitUntilAvailable.Inner.deinit();
  return swift_deallocClassInstance();
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.WaitUntilAvailable<A, B, C>.Inner()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.WaitUntilAvailable<A, B, C>.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:)(a1, a2, a3);
}

uint64_t sub_1B100D7C8()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #1 in Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:)(uint64_t a1)
{
  return closure #1 in Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:)(a1, *(char **)(v1 + 32), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void partial apply for closure #2 in Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  closure #2 in Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:)(a1, *(uint64_t **)(v2 + 32), *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_1B100D818()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  return swift_getWitnessTable();
}

uint64_t sub_1B100D884()
{
  return 80;
}

__n128 sub_1B100D890(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a2 = *(_OWORD *)a1;
  __n128 result = *(__n128 *)(a1 + 16);
  long long v3 = *(_OWORD *)(a1 + 32);
  long long v4 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 64) = v4;
  *(__n128 *)(a2 + 16) = result;
  *(_OWORD *)(a2 + 32) = v3;
  return result;
}

uint64_t sub_1B100D8AC()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 104, 7);
}

uint64_t partial apply for implicit closure #1 in Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t partial apply for closure #1 in closure #2 in Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in closure #2 in Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:)(a1, *(uint64_t **)(v2 + 32), a2);
}

unint64_t __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v6, a2, a3);
}

unint64_t __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v21[1] = a1;
  v21[2] = a4;
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = v4;
  uint64_t v9 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v11 = v10 & ~v9;
  v21[0] = v4 + 64;
  if ((*(void *)(v4 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
  {
    uint64_t v12 = ~v9;
    uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v13 = v6 + 16;
    uint64_t v14 = v15;
    uint64_t v16 = *(void *)(v13 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v13 - 8);
    do
    {
      uint64_t v18 = v13;
      v14(v8, *(void *)(v22 + 48) + v16 * v11, a3);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v17)(v8, a3);
      if (v19) {
        break;
      }
      unint64_t v11 = (v11 + 1) & v12;
      uint64_t v13 = v18;
    }
    while (((*(void *)(v21[0] + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  return v11;
}

uint64_t sub_1B100DB44()
{
  swift_weakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B100DB7C()
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 104) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, AssociatedTypeWitness);
  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:)()
{
  swift_getAssociatedTypeWitness();
  uint64_t v1 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  return closure #1 in closure #1 in Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:)(*(void *)(v0 + 96), v0 + ((*(unsigned __int8 *)(v1 + 80) + 104) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
}

uint64_t sub_1B100DD7C()
{
  return MEMORY[0x1F4186498](v0, 96, 7);
}

uint64_t partial apply for implicit closure #1 in closure #1 in Publishers.WaitUntilAvailable.Inner.receive<A>(subscriber:)()
{
  swift_getAssociatedTypeWitness();
  return static Array._allocateUninitialized(_:)();
}

uint64_t sub_1B100DDD8()
{
  return MEMORY[0x1F4186498](v0, 112, 7);
}

uint64_t dispatch thunk of static CustomEndpointProvider.identifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CustomEndpointProvider.customEndpoint(for:activity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

BOOL one-time initialization function for identity()
{
  getpid();
  BOOL result = _cp_sandbox_check_0();
  static ConversationManagerInterface.identity = !result;
  return result;
}

uint64_t static ConversationManagerInterface.identity.getter@<X0>(unsigned char *a1@<X8>)
{
  if (one-time initialization token for identity != -1) {
    uint64_t result = swift_once();
  }
  *a1 = static ConversationManagerInterface.identity;
  return result;
}

id closure #1 in variable initialization expression of static ConversationManagerInterface.hostObjectInterface()
{
  id v0 = objc_msgSend(self, sel_interfaceWithProtocol_, &unk_1F09D0928);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B113A080;
  uint64_t v2 = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for NSDictionary);
  *(void *)(inited + 32) = v2;
  *(void *)(inited + 40) = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSUUID);
  *(void *)(inited + 48) = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for TUConversationActivitySessionContainer);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(inited, (uint64_t)sel_requestConversationContainersByGroupUUIDWithReply_, 0, 1);
  swift_setDeallocating();
  uint64_t v3 = swift_initStackObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B1138A70;
  uint64_t v4 = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for NSSet);
  *(void *)(v3 + 32) = v4;
  *(void *)(v3 + 40) = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v3, (uint64_t)sel_addRemoteMembers_toConversationWithUUID_, 0, 0);
  swift_setDeallocating();
  uint64_t v5 = swift_initStackObject();
  *(_OWORD *)(v5 + 16) = xmmword_1B1138A70;
  *(void *)(v5 + 32) = v4;
  *(void *)(v5 + 40) = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for TUConversationParticipantPresentationContext);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v5, (uint64_t)sel_updateConversationWith_participantPresentationContexts_, 1, 0);
  swift_setDeallocating();
  uint64_t v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B1138A90;
  *(void *)(v6 + 32) = v2;
  *(void *)(v6 + 40) = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSArray);
  *(void *)(v6 + 48) = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  *(void *)(v6 + 56) = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v6, (uint64_t)sel_includeMetricsReport_onConversationWithUUID_, 0, 0);
  swift_setDeallocating();
  return v0;
}

id static ConversationManagerInterface.hostObjectInterface.getter()
{
  return static ConversationManagerInterface.hostObjectInterface.getter(&one-time initialization token for hostObjectInterface, (void **)&static ConversationManagerInterface.hostObjectInterface);
}

id static ConversationManagerInterface.clientObjectInterface.getter()
{
  return static ConversationManagerInterface.hostObjectInterface.getter(&one-time initialization token for clientObjectInterface, (void **)&static ConversationManagerInterface.clientObjectInterface);
}

id static ConversationManagerInterface.hostObjectInterface.getter(void *a1, void **a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = *a2;
  return v3;
}

uint64_t protocol witness for static XPCInterface.identity.getter in conformance ConversationManagerInterface@<X0>(unsigned char *a1@<X8>)
{
  if (one-time initialization token for identity != -1) {
    uint64_t result = swift_once();
  }
  *a1 = static ConversationManagerInterface.identity;
  return result;
}

id protocol witness for static XPCInterface.hostObjectInterface.getter in conformance ConversationManagerInterface(uint64_t a1, uint64_t a2)
{
  return protocol witness for static XPCInterface.hostObjectInterface.getter in conformance ConversationManagerInterface(a1, a2, &one-time initialization token for hostObjectInterface, (void **)&static ConversationManagerInterface.hostObjectInterface);
}

id protocol witness for static XPCInterface.clientObjectInterface.getter in conformance ConversationManagerInterface(uint64_t a1, uint64_t a2)
{
  return protocol witness for static XPCInterface.hostObjectInterface.getter in conformance ConversationManagerInterface(a1, a2, &one-time initialization token for clientObjectInterface, (void **)&static ConversationManagerInterface.clientObjectInterface);
}

id protocol witness for static XPCInterface.hostObjectInterface.getter in conformance ConversationManagerInterface(uint64_t a1, uint64_t a2, void *a3, void **a4)
{
  if (*a3 != -1) {
    swift_once();
  }
  uint64_t v5 = *a4;
  return v5;
}

BOOL _cp_sandbox_check_0()
{
  return sandbox_check() == 0;
}

uint64_t PeoplePickerClient.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + direct field offset for PeoplePickerClient.id;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t PeoplePickerClient.delegate.getter()
{
  uint64_t v1 = v0 + direct field offset for PeoplePickerClient.delegate;
  swift_beginAccess();
  return MEMORY[0x1B3EA3B30](v1);
}

uint64_t PeoplePickerClient.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + direct field offset for PeoplePickerClient.delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*PeoplePickerClient.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = direct field offset for PeoplePickerClient.delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1B3EA3B30](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return ActivitySession.sessionManager.modify;
}

Swift::Void __swiftcall PeoplePickerClient.handleServerDisconnect()()
{
  uint64_t v1 = v0 + direct field offset for PeoplePickerClient.delegate;
  swift_beginAccess();
  if (MEMORY[0x1B3EA3B30](v1))
  {
    uint64_t v2 = *(void *)(v1 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(ObjectType, v2);
    swift_unknownObjectRelease();
  }
}

Swift::Void __swiftcall PeoplePickerClient.dismissViewController(success:)(Swift::Bool success)
{
  uint64_t v3 = v1 + direct field offset for PeoplePickerClient.delegate;
  swift_beginAccess();
  if (MEMORY[0x1B3EA3B30](v3))
  {
    uint64_t v4 = *(void *)(v3 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(Swift::Bool, uint64_t, uint64_t))(v4 + 16))(success, ObjectType, v4);
    swift_unknownObjectRelease();
  }
}

uint64_t @objc PeoplePickerClient.dismissViewController(success:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = &a1[direct field offset for PeoplePickerClient.delegate];
  swift_beginAccess();
  uint64_t result = MEMORY[0x1B3EA3B30](v5);
  if (result)
  {
    uint64_t v7 = *((void *)v5 + 1);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    uint64_t v10 = a1;
    v9(a3, ObjectType, v7);

    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t PeoplePickerClient.requestActivity(completionHandler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = a1;
  v9[5] = a2;
  v9[6] = v2;
  swift_retain();
  id v10 = v2;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in PeoplePickerClient.requestActivity(completionHandler:), (uint64_t)v9);
  return swift_release();
}

uint64_t closure #1 in PeoplePickerClient.requestActivity(completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  return MEMORY[0x1F4188298](closure #1 in PeoplePickerClient.requestActivity(completionHandler:), 0, 0);
}

uint64_t closure #1 in PeoplePickerClient.requestActivity(completionHandler:)()
{
  uint64_t v1 = *(void *)(v0 + 56) + direct field offset for PeoplePickerClient.delegate;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x1B3EA3B30](v1);
  *(void *)(v0 + 64) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v3 + 24) + **(int **)(v3 + 24));
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 72) = v5;
    *uint64_t v5 = v0;
    v5[1] = closure #1 in PeoplePickerClient.requestActivity(completionHandler:);
    return v8(ObjectType, v3);
  }
  else
  {
    (*(void (**)(void))(v0 + 40))();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(void *))(v0 + 40))(v1);

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void))(v0 + 40))(0);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in PeoplePickerClient.requestActivity(completionHandler:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc();
  if (v1)
  {

    swift_unknownObjectRelease();
    uint64_t v5 = closure #1 in PeoplePickerClient.requestActivity(completionHandler:);
  }
  else
  {
    *(void *)(v4 + 80) = a1;
    uint64_t v5 = closure #1 in PeoplePickerClient.requestActivity(completionHandler:);
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

uint64_t partial apply for closure #1 in PeoplePickerClient.requestActivity(completionHandler:)()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(void *)(v3 + 56) = v2;
  *(_OWORD *)(v3 + 40) = v4;
  return MEMORY[0x1F4188298](closure #1 in PeoplePickerClient.requestActivity(completionHandler:), 0, 0);
}

uint64_t @objc PeoplePickerClient.requestActivity(completionHandler:)(void *a1, uint64_t a2, const void *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = _Block_copy(a3);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v7, 1, 1, v10);
  unint64_t v11 = (void *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned TUConversationActivity?) -> ();
  v11[5] = v9;
  v11[6] = a1;
  id v12 = a1;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&closure #1 in PeoplePickerClient.requestActivity(completionHandler:)partial apply, (uint64_t)v11);

  swift_release();
  return swift_release();
}

id PeoplePickerClient.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id PeoplePickerClient.init()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = v0;
  UUID.init()();
  *(void *)&v2[direct field offset for PeoplePickerClient.delegate + 8] = 0;
  swift_unknownObjectWeakInit();

  v4.receiver = v2;
  v4.super_class = ObjectType;
  return objc_msgSendSuper2(&v4, sel_init);
}

id @objc PeoplePickerClient.init()(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = a1;
  UUID.init()();
  *(void *)&v3[direct field offset for PeoplePickerClient.delegate + 8] = 0;
  swift_unknownObjectWeakInit();

  v5.receiver = v3;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, sel_init);
}

uint64_t PeoplePickerClient.__ivar_destroyer()
{
  uint64_t v1 = v0 + direct field offset for PeoplePickerClient.id;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + direct field offset for PeoplePickerClient.delegate;
  return outlined destroy of weak ActivitySessionManagerProtocol?(v3);
}

id PeoplePickerClient.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1B100F034@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + direct field offset for PeoplePickerClient.delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1B3EA3B30](v3);
  uint64_t v5 = *(void *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t sub_1B100F090(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2 + direct field offset for PeoplePickerClient.delegate;
  swift_beginAccess();
  *(void *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t dispatch thunk of PeoplePickerClientDelegate.handleServerDisconnect()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PeoplePickerClientDelegate.dismissViewController(success:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of PeoplePickerClientDelegate.requestActivity()(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(a2 + 24) + **(int **)(a2 + 24));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = dispatch thunk of ConversationManagerClientProtocol.createActivitySession(with:onConversationWithUUID:);
  return v7(a1, a2);
}

uint64_t @objc PeoplePickerClient.__ivar_destroyer(uint64_t a1)
{
  uint64_t v2 = a1 + direct field offset for PeoplePickerClient.id;
  uint64_t v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  uint64_t v4 = a1 + direct field offset for PeoplePickerClient.delegate;
  return outlined destroy of weak ActivitySessionManagerProtocol?(v4);
}

uint64_t type metadata accessor for PeoplePickerClient()
{
  uint64_t result = type metadata singleton initialization cache for PeoplePickerClient;
  if (!type metadata singleton initialization cache for PeoplePickerClient) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for PeoplePickerClient()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t ObjC metadata update function for PeoplePickerClient()
{
  return type metadata accessor for PeoplePickerClient();
}

uint64_t sub_1B100F378()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned TUConversationActivity?) -> ()()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t objectdestroyTm_5()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t closure #1 in PeoplePickerClient.requestActivity(completionHandler:)partial apply()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  *(void *)(v3 + 56) = v2;
  *(_OWORD *)(v3 + 40) = v4;
  return MEMORY[0x1F4188298](closure #1 in PeoplePickerClient.requestActivity(completionHandler:), 0, 0);
}

uint64_t Date.sinceEpochMillis.getter()
{
  uint64_t result = Date.timeIntervalSince1970.getter();
  double v2 = v1 * 1000.0;
  if ((~*(void *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 < 1.84467441e19) {
    return (unint64_t)v2;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t CurrentSubject.wrappedValue.getter()
{
  return CurrentValueSubject.value.getter();
}

uint64_t CurrentSubject.projectedValue.getter()
{
  protocol witness for FastSyncAnalyticsReporterProtocol.maxPartcipantsInSession.getter in conformance FastSyncAnalyticsReporter();
  return swift_retain();
}

uint64_t CurrentSubject.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  specialized CurrentSubject.wrappedValue.setter();
  long long v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8);
  return v4(a1);
}

uint64_t CurrentSubject.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CurrentValueSubject();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  uint64_t v9 = CurrentValueSubject.__allocating_init(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  *a3 = v9;
  return result;
}

void (*CurrentSubject.wrappedValue.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v5 = malloc(0x28uLL);
  *a1 = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  *uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[1] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v5[2] = malloc(v8);
  uint64_t v9 = malloc(v8);
  uint64_t v10 = *v2;
  v5[3] = v9;
  v5[4] = v10;
  CurrentValueSubject.value.getter();
  return CurrentSubject.wrappedValue.modify;
}

void CurrentSubject.wrappedValue.modify(uint64_t **a1, char a2)
{
  double v2 = *a1;
  uint64_t v3 = (void *)(*a1)[3];
  uint64_t v5 = (*a1)[1];
  long long v4 = (void *)(*a1)[2];
  uint64_t v6 = **a1;
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v5 + 16))((*a1)[2], v3, v6);
    CurrentValueSubject.send(_:)();
    uint64_t v7 = *(void (**)(void *, uint64_t))(v5 + 8);
    v7(v4, v6);
    v7(v3, v6);
  }
  else
  {
    CurrentValueSubject.send(_:)();
    (*(void (**)(void *, uint64_t))(v5 + 8))(v3, v6);
  }
  free(v3);
  free(v4);
  free(v2);
}

uint64_t specialized CurrentSubject.wrappedValue.setter()
{
  return CurrentValueSubject.send(_:)();
}

uint64_t sub_1B100F8B8()
{
  return CurrentSubject.wrappedValue.getter();
}

uint64_t sub_1B100F8EC()
{
  return specialized CurrentSubject.wrappedValue.setter();
}

uint64_t sub_1B100F940()
{
  return 8;
}

void *sub_1B100F94C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata accessor for CurrentSubject()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t UserNotificationInstantiable.init(userNotification:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

void IMUserNotification.init(identifier:timeout:alertLevel:displayFlags:displayInformation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v13 = self;
  uint64_t v14 = (void *)MEMORY[0x1B3EA1B00](a1, a2);
  swift_bridgeObjectRelease();
  specialized _dictionaryUpCast<A, B, C, D>(_:)(a5);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v16 = objc_msgSend(v13, sel_userNotificationWithIdentifier_timeout_alertLevel_displayFlags_displayInformation_, v14, a3, a4, isa, a6);

  if (v16)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v18, v19);
    swift_dynamicCast();
    (*(void (**)(_OWORD *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 32))(v19, v17, v6);
  }
  else
  {
    __break(1u);
  }
}

id static IMUserNotificationCenter.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = (void *)static IMUserNotificationCenter.shared;
  return v0;
}

void static IMUserNotificationCenter.shared.setter(uint64_t a1)
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  double v2 = (void *)static IMUserNotificationCenter.shared;
  static IMUserNotificationCenter.shared = a1;
}

uint64_t (*static IMUserNotificationCenter.shared.modify())()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

void thunk for @escaping @callee_guaranteed (@guaranteed IMUserNotification?) -> ()(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  outlined init with copy of Any((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t specialized LazyMapSequence.Iterator.next()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    uint64_t v11 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(void *)&long long v23 = v13;
    *((void *)&v23 + 1) = v12;
    swift_bridgeObjectRetain();
    goto LABEL_23;
  }
  int64_t v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    unint64_t v16 = *(void *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      uint64_t v9 = (v16 - 1) & v16;
      unint64_t v10 = __clz(__rbit64(v16)) + (v14 << 6);
      int64_t v7 = v14;
      goto LABEL_3;
    }
    int64_t v17 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      unint64_t v16 = *(void *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        int64_t v14 = v17;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        unint64_t v16 = *(void *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          int64_t v14 = v5 + 3;
          goto LABEL_7;
        }
        int64_t v17 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          unint64_t v16 = *(void *)(v4 + 8 * v17);
          if (v16) {
            goto LABEL_10;
          }
          int64_t v14 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            unint64_t v16 = *(void *)(v4 + 8 * v14);
            if (v16) {
              goto LABEL_7;
            }
            int64_t v7 = v15 - 1;
            int64_t v18 = v5 + 6;
            while (v15 != v18)
            {
              unint64_t v16 = *(void *)(v4 + 8 * v18++);
              if (v16)
              {
                int64_t v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  memset(v24, 0, sizeof(v24));
  long long v23 = 0u;
LABEL_23:
  *double v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  char v19 = (void (*)(_OWORD *))v1[5];
  uint64_t result = outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)&v23, (uint64_t)v22, &demangling cache variable for type metadata for (key: String, value: Any)?);
  if (*((void *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    v21[2] = v22[2];
    v19(v21);
    return outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for (key: String, value: Any));
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

uint64_t specialized LazyMapSequence.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    outlined init with copy of AnyHashable(*(void *)(v3 + 48) + 40 * v10, (uint64_t)v25);
    outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v10, (uint64_t)&v25[2] + 8);
    goto LABEL_23;
  }
  int64_t v11 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v12 = (unint64_t)(v6 + 64) >> 6;
  if (v11 < v12)
  {
    unint64_t v13 = *(void *)(v4 + 8 * v11);
    if (v13)
    {
LABEL_7:
      uint64_t v9 = (v13 - 1) & v13;
      unint64_t v10 = __clz(__rbit64(v13)) + (v11 << 6);
      int64_t v7 = v11;
      goto LABEL_3;
    }
    int64_t v14 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v12)
    {
      unint64_t v13 = *(void *)(v4 + 8 * v14);
      if (v13)
      {
LABEL_10:
        int64_t v11 = v14;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v12)
      {
        unint64_t v13 = *(void *)(v4 + 8 * (v5 + 3));
        if (v13)
        {
          int64_t v11 = v5 + 3;
          goto LABEL_7;
        }
        int64_t v14 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v12)
        {
          unint64_t v13 = *(void *)(v4 + 8 * v14);
          if (v13) {
            goto LABEL_10;
          }
          int64_t v11 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v12)
          {
            unint64_t v13 = *(void *)(v4 + 8 * v11);
            if (v13) {
              goto LABEL_7;
            }
            int64_t v7 = v12 - 1;
            int64_t v15 = v5 + 6;
            while (v12 != v15)
            {
              unint64_t v13 = *(void *)(v4 + 8 * v15++);
              if (v13)
              {
                int64_t v11 = v15 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  uint64_t v26 = 0;
  memset(v25, 0, sizeof(v25));
LABEL_23:
  *double v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  unint64_t v16 = (void (*)(_OWORD *))v1[5];
  uint64_t result = outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)v25, (uint64_t)&v20, &demangling cache variable for type metadata for (key: AnyHashable, value: Any)?);
  if (*((void *)&v21 + 1))
  {
    v18[2] = v22;
    v18[3] = v23;
    uint64_t v19 = v24;
    v18[0] = v20;
    v18[1] = v21;
    v16(v18);
    return outlined destroy of UUID?((uint64_t)v18, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
  }
  else
  {
    *(void *)(a1 + 64) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

void *specialized IMUserNotificationCenter.notification(withIdentifier:bundleIdentifier:displayInformation:showsIcon:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6)
  {
    type metadata accessor for ActivityAuthorizationManager();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    int64_t v12 = self;
    swift_bridgeObjectRetain();
    id v13 = objc_msgSend(v12, sel_bundleForClass_, ObjCClassFromMetadata);
    int64_t v14 = (void *)MEMORY[0x1B3EA1B00](0x737465737341, 0xE600000000000000);
    int64_t v15 = (void *)MEMORY[0x1B3EA1B00](7496035, 0xE300000000000000);
    id v16 = objc_msgSend(v13, sel_pathForResource_ofType_, v14, v15);

    if (v16)
    {
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v19 = v18;

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1B1138A70;
      *(void *)(inited + 32) = 0xD00000000000002DLL;
      *(void *)(inited + 40) = 0x80000001B1160B30;
      uint64_t v21 = MEMORY[0x1E4FBB1A0];
      *(void *)(inited + 48) = v17;
      *(void *)(inited + 56) = v19;
      *(void *)(inited + 72) = v21;
      *(void *)(inited + 80) = 0xD000000000000031;
      *(void *)(inited + 120) = v21;
      *(void *)(inited + 88) = 0x80000001B1160B60;
      *(void *)(inited + 96) = 0x616C506572616853;
      *(void *)(inited + 104) = 0xE900000000000079;
      unint64_t v22 = specialized Dictionary.init(dictionaryLiteral:)(inited);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v28 = a5;
      specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v22, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v28);
      a5 = v28;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for IMUserNotification);
  swift_bridgeObjectRetain();
  IMUserNotification.init(identifier:timeout:alertLevel:displayFlags:displayInformation:)(a1, a2, 3, 0, a5, 0.0);
  uint64_t v25 = v24;
  objc_msgSend(v24, sel_setUsesNotificationCenter_, 0);
  uint64_t v26 = (void *)MEMORY[0x1B3EA1B00](a3, a4);
  objc_msgSend(v25, sel_setRepresentedApplicationBundle_, v26);

  return v25;
}

void specialized IMUserNotificationCenter.postNotification(withIdentifier:bundleIdentifier:displayInformation:showsIcon:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10 = specialized IMUserNotificationCenter.notification(withIdentifier:bundleIdentifier:displayInformation:showsIcon:)(a1, a2, a3, a4, a5, a6);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  int64_t v11 = (void *)static IMUserNotificationCenter.shared;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a7;
  *(void *)(v12 + 24) = a8;
  aBlock[4] = partial apply for closure #1 in IMUserNotificationCenter.postNotification(withIdentifier:bundleIdentifier:displayInformation:showsIcon:completionHandler:);
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed IMUserNotification?) -> ();
  aBlock[3] = &block_descriptor_20;
  id v13 = _Block_copy(aBlock);
  id v14 = v11;
  id v15 = v10;
  swift_retain();
  swift_release();
  objc_msgSend(v14, sel_addUserNotification_listener_completionHandler_, v15, 0, v13);
  _Block_release(v13);
}

uint64_t dispatch thunk of UserNotificationCenter.postNotification(withIdentifier:bundleIdentifier:displayInformation:showsIcon:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(uint64_t (**)(void))(a10 + 8))();
}

uint64_t sub_1B1010624()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in IMUserNotificationCenter.postNotification(withIdentifier:bundleIdentifier:displayInformation:showsIcon:completionHandler:)(void *a1)
{
  double v2 = *(uint64_t (**)(uint64_t))(v1 + 16);
  if (a1) {
    uint64_t v3 = (uint64_t)objc_msgSend(a1, sel_response);
  }
  else {
    uint64_t v3 = 3;
  }
  return v2(v3);
}

uint64_t block_destroy_helper_18()
{
  return swift_release();
}

uint64_t specialized Set.subtracting(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = __CocoaSet.count.getter();
    if ((v2 & 0xC000000000000001) != 0) {
      goto LABEL_3;
    }
LABEL_9:
    if (v4 > *(void *)(v2 + 16) >> 3) {
      goto LABEL_10;
    }
LABEL_13:
    specialized Set._subtract<A>(_:)(a1);
    return v2;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if ((a2 & 0xC000000000000001) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  if (v2 < 0) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = v2 & 0xFFFFFFFFFFFFFF8;
  }
  if (v4 <= __CocoaSet.count.getter() / 8) {
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = __CocoaSet.count.getter();
  Swift::Int v7 = specialized _NativeSet.init(_:capacity:)(v5, v6);
  swift_bridgeObjectRelease();
  uint64_t v2 = v7;
LABEL_10:
  return specialized _NativeSet.subtracting<A>(_:)(a1, v2);
}

uint64_t specialized closure #1 in Task<>.reportFailure(on:function:process:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[16] = a8;
  v8[17] = v12;
  v8[14] = a6;
  v8[15] = a7;
  v8[12] = a4;
  v8[13] = a5;
  uint64_t v9 = type metadata accessor for Date();
  v8[18] = v9;
  v8[19] = *(void *)(v9 - 8);
  v8[20] = swift_task_alloc();
  v8[21] = swift_task_alloc();
  return MEMORY[0x1F4188298](specialized closure #1 in Task<>.reportFailure(on:function:process:), 0, 0);
}

{
  void *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v8[19] = a8;
  v8[20] = v12;
  v8[17] = a6;
  v8[18] = a7;
  v8[15] = a4;
  v8[16] = a5;
  uint64_t v9 = type metadata accessor for Date();
  v8[21] = v9;
  v8[22] = *(void *)(v9 - 8);
  v8[23] = swift_task_alloc();
  v8[24] = swift_task_alloc();
  return MEMORY[0x1F4188298](specialized closure #1 in Task<>.reportFailure(on:function:process:), 0, 0);
}

uint64_t specialized closure #1 in Task<>.reportFailure(on:function:process:)()
{
  Date.init()();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *uint64_t v1 = v0;
  v1[1] = specialized closure #1 in Task<>.reportFailure(on:function:process:);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v4 = MEMORY[0x1E4FBC848] + 8;
  uint64_t v5 = MEMORY[0x1E4FBC0F0];
  return MEMORY[0x1F4187D90](v2, v3, v4, v2, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized closure #1 in Task<>.reportFailure(on:function:process:);
  }
  else {
    uint64_t v2 = specialized closure #1 in Task<>.reportFailure(on:function:process:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[19] + 8))(v0[21], v0[18]);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  BOOL v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t (*v35)(void);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  void *v45;
  __n128 v46;
  NSObject *v47;
  os_log_type_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  uint64_t v64 = v0;
  if (one-time initialization token for abcReporter != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 192) = __swift_project_value_buffer(v1, (uint64_t)static Log.abcReporter);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.error.getter();
  uint64_t v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = *(void *)(v0 + 112);
  if (v4)
  {
    uint64_t v6 = *(void *)(v0 + 104);
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    unint64_t v8 = swift_slowAlloc();
    uint64_t v63 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v2, v3, "Detected failure on function %s. Reporting!", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v8, -1, -1);
    MEMORY[0x1B3EA39E0](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  if (*(void *)(v0 + 128))
  {
    uint64_t v58 = *(id *)(v0 + 120);
    uint64_t v60 = *(void *)(v0 + 128);
  }
  else
  {
    uint64_t v9 = objc_msgSend(self, sel_mainBundle);
    unint64_t v10 = objc_msgSend(v9, sel_bundleIdentifier);

    if (!v10)
    {
      swift_bridgeObjectRetain_n();
      unint64_t v47 = Logger.logObject.getter();
      unint64_t v48 = static os_log_type_t.error.getter();
      uint64_t v49 = os_log_type_enabled(v47, v48);
      uint64_t v50 = *(void *)(v0 + 168);
      uint64_t v51 = *(void *)(v0 + 144);
      uint64_t v52 = *(void *)(v0 + 152);
      uint64_t v53 = *(void *)(v0 + 112);
      if (v49)
      {
        uint64_t v59 = *(id *)(v0 + 184);
        uint64_t v61 = *(void *)(v0 + 168);
        uint64_t v54 = *(void *)(v0 + 104);
        uint64_t v55 = swift_slowAlloc();
        uint64_t v56 = swift_slowAlloc();
        uint64_t v63 = v56;
        *(_DWORD *)uint64_t v55 = 136315394;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v53, &v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v55 + 12) = 2080;
        *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(7104878, 0xE300000000000000, &v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1B0DF7000, v47, v48, "Can't report failure on function %s because of missing processName %s", (uint8_t *)v55, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v56, -1, -1);
        MEMORY[0x1B3EA39E0](v55, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v61, v51);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v50, v51);
      }
      goto LABEL_16;
    }
    uint64_t v58 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v60 = v11;
  }
  uint64_t v12 = *(void **)(v0 + 136);
  id v14 = *(void *)(v0 + 104);
  id v13 = *(void *)(v0 + 112);
  id v15 = v12[3];
  id v16 = v12[4];
  uint64_t v57 = v12;
  __swift_project_boxed_opaque_existential_1(v12, v15);
  swift_getErrorValue();
  swift_bridgeObjectRetain();
  uint64_t v17 = Error.localizedDescription.getter();
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, id, uint64_t, uint64_t, uint64_t))(v16 + 16))(v14, v13, v17, v18, v58, v60, v15, v16);
  *(void *)(v0 + 200) = v19;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v19)
  {
    swift_bridgeObjectRetain_n();
    long long v20 = Logger.logObject.getter();
    uint64_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      unint64_t v22 = (uint8_t *)swift_slowAlloc();
      long long v23 = swift_slowAlloc();
      uint64_t v63 = v23;
      *(_DWORD *)unint64_t v22 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v24 = Dictionary.description.getter();
      uint64_t v26 = v25;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B0DF7000, v20, v21, "Reporting signature %s", v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v23, -1, -1);
      MEMORY[0x1B3EA39E0](v22, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v37 = *(void *)(v0 + 160);
    uint64_t v38 = *(void *)(v0 + 144);
    uint64_t v39 = *(void *)(v0 + 152);
    uint64_t v40 = v57[3];
    uint64_t v41 = v57[4];
    __swift_project_boxed_opaque_existential_1(*(void **)(v0 + 136), v40);
    Date.init()();
    Date.timeIntervalSince(_:)();
    uint64_t v43 = v42;
    uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    *(void *)(v0 + 208) = v44;
    *(void *)(v0 + 216) = (v39 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v44(v37, v38);
    uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)(v41 + 24) + **(int **)(v41 + 24));
    uint64_t v45 = (void *)swift_task_alloc();
    *(void *)(v0 + 224) = v45;
    *uint64_t v45 = v0;
    v45[1] = specialized closure #1 in Task<>.reportFailure(on:function:process:);
    v46.n128_u64[0] = v43;
    return v62(v19, v40, v41, v46);
  }
  uint64_t v27 = Logger.logObject.getter();
  uint64_t v28 = static os_log_type_t.error.getter();
  uint64_t v29 = os_log_type_enabled(v27, v28);
  uint64_t v30 = *(void **)(v0 + 184);
  unsigned int v31 = *(void *)(v0 + 168);
  int v32 = *(void *)(v0 + 144);
  uint64_t v33 = *(void *)(v0 + 152);
  if (v29)
  {
    char v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v34 = 0;
    _os_log_impl(&dword_1B0DF7000, v27, v28, "Failed to convert signature payload", v34, 2u);
    MEMORY[0x1B3EA39E0](v34, -1, -1);
  }

  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
LABEL_16:
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v35 = *(uint64_t (**)(void))(v0 + 8);
  return v35();
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  void *v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  void *v19;
  uint64_t v20;

  uint64_t v19 = v0;
  swift_bridgeObjectRetain();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[29];
    uint64_t v17 = (void (*)(uint64_t, uint64_t))v0[26];
    uint64_t v4 = (void *)v0[23];
    id v15 = v0[18];
    id v16 = v0[21];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v18 = v6;
    v0[8] = v3;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
    uint64_t v7 = String.init<A>(reflecting:)();
    v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v1, v2, "Received reporting response: %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v6, -1, -1);
    MEMORY[0x1B3EA39E0](v5, -1, -1);

    v17(v16, v15);
  }
  else
  {
    uint64_t v9 = (void (*)(uint64_t, uint64_t))v0[26];
    unint64_t v10 = (void *)v0[23];
    uint64_t v11 = v0[21];
    uint64_t v12 = v0[18];

    swift_bridgeObjectRelease_n();
    v9(v11, v12);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  id v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  Date.init()();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 200) = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *uint64_t v1 = v0;
  v1[1] = specialized closure #1 in Task<>.reportFailure(on:function:process:);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v4 = MEMORY[0x1E4FBC0F0];
  return MEMORY[0x1F4187D90](v0 + 16, v3, &type metadata for IDSGroupSessionProvider.Participant, v2, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 208) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = specialized closure #1 in Task<>.reportFailure(on:function:process:);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = specialized closure #1 in Task<>.reportFailure(on:function:process:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[22] + 8))(v0[24], v0[21]);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  BOOL v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t (*v35)(void);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  void *v45;
  __n128 v46;
  NSObject *v47;
  os_log_type_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  uint64_t v64 = v0;
  if (one-time initialization token for abcReporter != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 216) = __swift_project_value_buffer(v1, (uint64_t)static Log.abcReporter);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.error.getter();
  uint64_t v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = *(void *)(v0 + 136);
  if (v4)
  {
    uint64_t v6 = *(void *)(v0 + 128);
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    unint64_t v8 = swift_slowAlloc();
    uint64_t v63 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v2, v3, "Detected failure on function %s. Reporting!", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v8, -1, -1);
    MEMORY[0x1B3EA39E0](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  if (*(void *)(v0 + 152))
  {
    uint64_t v58 = *(id *)(v0 + 144);
    uint64_t v60 = *(void *)(v0 + 152);
  }
  else
  {
    uint64_t v9 = objc_msgSend(self, sel_mainBundle);
    unint64_t v10 = objc_msgSend(v9, sel_bundleIdentifier);

    if (!v10)
    {
      swift_bridgeObjectRetain_n();
      unint64_t v47 = Logger.logObject.getter();
      unint64_t v48 = static os_log_type_t.error.getter();
      uint64_t v49 = os_log_type_enabled(v47, v48);
      uint64_t v50 = *(void *)(v0 + 192);
      uint64_t v51 = *(void *)(v0 + 168);
      uint64_t v52 = *(void *)(v0 + 176);
      uint64_t v53 = *(void *)(v0 + 136);
      if (v49)
      {
        uint64_t v59 = *(id *)(v0 + 208);
        uint64_t v61 = *(void *)(v0 + 192);
        uint64_t v54 = *(void *)(v0 + 128);
        uint64_t v55 = swift_slowAlloc();
        uint64_t v56 = swift_slowAlloc();
        uint64_t v63 = v56;
        *(_DWORD *)uint64_t v55 = 136315394;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v53, &v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v55 + 12) = 2080;
        *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(7104878, 0xE300000000000000, &v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1B0DF7000, v47, v48, "Can't report failure on function %s because of missing processName %s", (uint8_t *)v55, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v56, -1, -1);
        MEMORY[0x1B3EA39E0](v55, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v61, v51);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v50, v51);
      }
      goto LABEL_16;
    }
    uint64_t v58 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v60 = v11;
  }
  uint64_t v12 = *(void **)(v0 + 160);
  id v14 = *(void *)(v0 + 128);
  id v13 = *(void *)(v0 + 136);
  id v15 = v12[3];
  id v16 = v12[4];
  uint64_t v57 = v12;
  __swift_project_boxed_opaque_existential_1(v12, v15);
  swift_getErrorValue();
  swift_bridgeObjectRetain();
  uint64_t v17 = Error.localizedDescription.getter();
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, id, uint64_t, uint64_t, uint64_t))(v16 + 16))(v14, v13, v17, v18, v58, v60, v15, v16);
  *(void *)(v0 + 224) = v19;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v19)
  {
    swift_bridgeObjectRetain_n();
    long long v20 = Logger.logObject.getter();
    uint64_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      unint64_t v22 = (uint8_t *)swift_slowAlloc();
      long long v23 = swift_slowAlloc();
      uint64_t v63 = v23;
      *(_DWORD *)unint64_t v22 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v24 = Dictionary.description.getter();
      uint64_t v26 = v25;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B0DF7000, v20, v21, "Reporting signature %s", v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v23, -1, -1);
      MEMORY[0x1B3EA39E0](v22, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v37 = *(void *)(v0 + 184);
    uint64_t v38 = *(void *)(v0 + 168);
    uint64_t v39 = *(void *)(v0 + 176);
    uint64_t v40 = v57[3];
    uint64_t v41 = v57[4];
    __swift_project_boxed_opaque_existential_1(*(void **)(v0 + 160), v40);
    Date.init()();
    Date.timeIntervalSince(_:)();
    uint64_t v43 = v42;
    uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    *(void *)(v0 + 232) = v44;
    *(void *)(v0 + 240) = (v39 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v44(v37, v38);
    uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)(v41 + 24) + **(int **)(v41 + 24));
    uint64_t v45 = (void *)swift_task_alloc();
    *(void *)(v0 + 248) = v45;
    *uint64_t v45 = v0;
    v45[1] = specialized closure #1 in Task<>.reportFailure(on:function:process:);
    v46.n128_u64[0] = v43;
    return v62(v19, v40, v41, v46);
  }
  uint64_t v27 = Logger.logObject.getter();
  uint64_t v28 = static os_log_type_t.error.getter();
  uint64_t v29 = os_log_type_enabled(v27, v28);
  uint64_t v30 = *(void **)(v0 + 208);
  unsigned int v31 = *(void *)(v0 + 192);
  int v32 = *(void *)(v0 + 168);
  uint64_t v33 = *(void *)(v0 + 176);
  if (v29)
  {
    char v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v34 = 0;
    _os_log_impl(&dword_1B0DF7000, v27, v28, "Failed to convert signature payload", v34, 2u);
    MEMORY[0x1B3EA39E0](v34, -1, -1);
  }

  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
LABEL_16:
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v35 = *(uint64_t (**)(void))(v0 + 8);
  return v35();
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  void *v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  void *v19;
  uint64_t v20;

  uint64_t v19 = v0;
  swift_bridgeObjectRetain();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[32];
    uint64_t v17 = (void (*)(uint64_t, uint64_t))v0[29];
    uint64_t v4 = (void *)v0[26];
    id v15 = v0[21];
    id v16 = v0[24];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v18 = v6;
    v0[11] = v3;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
    uint64_t v7 = String.init<A>(reflecting:)();
    v0[12] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v1, v2, "Received reporting response: %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v6, -1, -1);
    MEMORY[0x1B3EA39E0](v5, -1, -1);

    v17(v16, v15);
  }
  else
  {
    uint64_t v9 = (void (*)(uint64_t, uint64_t))v0[29];
    unint64_t v10 = (void *)v0[26];
    uint64_t v11 = v0[24];
    uint64_t v12 = v0[21];

    swift_bridgeObjectRelease_n();
    v9(v11, v12);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  id v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t specialized closure #1 in Task<>.reportFailure(on:function:process:)(uint64_t a1)
{
  *(void *)(*(void *)v1 + 232) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4188298](specialized closure #1 in Task<>.reportFailure(on:function:process:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v3;

  *(void *)(*(void *)v1 + 256) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4188298](specialized closure #1 in Task<>.reportFailure(on:function:process:), 0, 0);
}

uint64_t protocol witness for IDSServiceProtocol.accounts.getter in conformance IDSService()
{
  id v1 = objc_msgSend(*v0, sel_accounts);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for IDSAccount);
  lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type IDSAccount and conformance NSObject, &lazy cache variable for type metadata for IDSAccount);
  uint64_t v3 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t protocol witness for IDSServiceProtocol.devices.getter in conformance IDSService()
{
  id v1 = objc_msgSend(*v0, sel_devices);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for IDSDevice);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

id protocol witness for IDSServiceProtocol.iCloudAccount.getter in conformance IDSService()
{
  id v1 = objc_msgSend(*v0, sel_iCloudAccount);
  return v1;
}

uint64_t protocol witness for IDSServiceProtocol.serviceIdentifier.getter in conformance IDSService()
{
  id v1 = objc_msgSend(*v0, sel_serviceIdentifier);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

BOOL static IDSGroupSessionProvider.SessionState.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void IDSGroupSessionProvider.SessionState.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t IDSGroupSessionProvider.Participant.id.setter(uint64_t result)
{
  *id v1 = result;
  return result;
}

uint64_t (*IDSGroupSessionProvider.Participant.id.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t IDSGroupSessionProvider.Participant.handle.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t IDSGroupSessionProvider.Participant.handle.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*IDSGroupSessionProvider.Participant.handle.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

id IDSGroupSessionProvider.Participant.tuConversationParticipant.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = self;
  uint64_t v7 = (void *)MEMORY[0x1B3EA1B00](a2, a3);
  id v8 = objc_msgSend(v6, sel_normalizedHandleWithDestinationID_, v7);

  if (!v8)
  {
    id v9 = objc_allocWithZone(MEMORY[0x1E4FADBD8]);
    swift_bridgeObjectRetain();
    unint64_t v10 = (void *)MEMORY[0x1B3EA1B00](a2, a3);
    swift_bridgeObjectRelease();
    id v8 = objc_msgSend(v9, sel_initWithDestinationID_, v10);
  }
  id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADB90]), sel_initWithIdentifier_handle_, a1, v8);

  return v11;
}

uint64_t IDSGroupSessionProvider.Participant.hash(into:)(int a1, Swift::UInt64 a2)
{
  Hasher._combine(_:)(a2);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t static IDSGroupSessionProvider.Participant.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1 != a4) {
    return 0;
  }
  if (a2 == a5 && a3 == a6) {
    return 1;
  }
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

Swift::Int IDSGroupSessionProvider.Participant.hashValue.getter(Swift::UInt64 a1)
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance IDSGroupSessionProvider.Participant()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance IDSGroupSessionProvider.Participant()
{
  Hasher._combine(_:)(*v0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IDSGroupSessionProvider.Participant()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance IDSGroupSessionProvider.Participant(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  if (a1[1] == a2[1] && a1[2] == a2[2]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t IDSGroupSessionProvider.delegate.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_delegate;
  swift_beginAccess();
  return MEMORY[0x1B3EA3B30](v1);
}

uint64_t IDSGroupSessionProvider.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*IDSGroupSessionProvider.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1B3EA3B30](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return ActivitySession.sessionManager.modify;
}

uint64_t IDSGroupSessionProvider.groupID.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_groupID);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IDSGroupSessionProvider.members.didset(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_members;
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v6 = specialized Set.subtracting(_:)(v5, a1);
  swift_bridgeObjectRelease();
  if ((v6 & 0xC000000000000001) == 0)
  {
    uint64_t v7 = (void *)&type metadata singleton initialization cache for PersonalPresenceController;
    if (*(void *)(v6 + 16)) {
      goto LABEL_3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  uint64_t v7 = &type metadata singleton initialization cache for PersonalPresenceController;
  if (!__CocoaSet.count.getter()) {
    goto LABEL_8;
  }
LABEL_3:
  if (v7[19] != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.service);
  swift_bridgeObjectRetain_n();
  id v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    id v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    v26[0] = v12;
    *(_DWORD *)id v11 = 136315138;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<AddressableMember>);
    uint64_t v13 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v26);
    uint64_t v7 = (void *)&type metadata singleton initialization cache for PersonalPresenceController;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v9, v10, "Removing members: %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v12, -1, -1);
    MEMORY[0x1B3EA39E0](v11, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  IDSGroupSessionProvider.removeMembers(_:)(v6);
  swift_bridgeObjectRelease();
LABEL_11:
  uint64_t v15 = *(void *)(v2 + v4);
  swift_bridgeObjectRetain();
  uint64_t v16 = specialized Set.subtracting(_:)(a1, v15);
  uint64_t v17 = v16;
  if ((v16 & 0xC000000000000001) != 0)
  {
    if (!__CocoaSet.count.getter()) {
      goto LABEL_21;
    }
  }
  else if (!*(void *)(v16 + 16))
  {
    goto LABEL_21;
  }
  if (v7[19] != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Log.service);
  swift_bridgeObjectRetain_n();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    v26[0] = v22;
    *(_DWORD *)uint64_t v21 = 136315138;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<AddressableMember>);
    uint64_t v23 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v19, v20, "Adding members: %s", v21, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v22, -1, -1);
    MEMORY[0x1B3EA39E0](v21, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  IDSGroupSessionProvider.addMembers(_:)(v17);
LABEL_21:
  swift_bridgeObjectRelease();
  return IDSGroupSessionProvider.recomputeUnknownParticipants()();
}

uint64_t IDSGroupSessionProvider.localMember.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t IDSGroupSessionProvider.service.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of UserNotificationCenter(v1 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service, a1);
}

id IDSGroupSessionProvider.queue.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_queue);
}

void *IDSGroupSessionProvider.groupSession.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_groupSession);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void IDSGroupSessionProvider.groupSession.setter(void *a1)
{
}

uint64_t (*IDSGroupSessionProvider.groupSession.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

uint64_t IDSGroupSessionProvider.participantIdentifier.getter()
{
  uint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2) {
    uint64_t v3 = *(void *)(v1 + 16 * v2 + 24);
  }
  else {
    uint64_t v3 = 0;
  }
  swift_bridgeObjectRelease();
  return v3;
}

void IDSGroupSessionProvider.userDefaults.getter(void *a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider____lazy_storage___userDefaults;
  swift_beginAccess();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3, (uint64_t)&v9, (uint64_t *)&demangling cache variable for type metadata for ProtectedStorage?);
  if (v10)
  {
    outlined init with take of BackgroundSessionManagerDataSource(&v9, (uint64_t)a1);
  }
  else
  {
    outlined destroy of UUID?((uint64_t)&v9, (uint64_t *)&demangling cache variable for type metadata for ProtectedStorage?);
    id v4 = objc_msgSend(self, sel_mainBundle);
    id v5 = objc_msgSend(v4, sel_bundleIdentifier);

    if (v5)
    {
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSUserDefaults);
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v8 = v7;

      static NSUserDefaults.classProtectedStorage(suiteName:)(v6, v8, a1);
      swift_bridgeObjectRelease();
      outlined init with copy of UserNotificationCenter((uint64_t)a1, (uint64_t)&v9);
      swift_beginAccess();
      outlined assign with take of ProtectedStorage?((uint64_t)&v9, v3);
      swift_endAccess();
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t outlined assign with take of ProtectedStorage?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ProtectedStorage?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t IDSGroupSessionProvider.userDefaults.setter(long long *a1)
{
  outlined init with take of BackgroundSessionManagerDataSource(a1, (uint64_t)v4);
  uint64_t v2 = v1 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider____lazy_storage___userDefaults;
  swift_beginAccess();
  outlined assign with take of ProtectedStorage?((uint64_t)v4, v2);
  return swift_endAccess();
}

void (*IDSGroupSessionProvider.userDefaults.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x98uLL);
  *a1 = v3;
  v3[18] = v1;
  IDSGroupSessionProvider.userDefaults.getter(v3);
  return IDSGroupSessionProvider.userDefaults.modify;
}

void IDSGroupSessionProvider.userDefaults.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = (long long *)(*a1 + 40);
  uint64_t v4 = *a1 + 80;
  if (a2)
  {
    uint64_t v5 = v2[18];
    outlined init with copy of UserNotificationCenter(*a1, (uint64_t)v3);
    outlined init with take of BackgroundSessionManagerDataSource(v3, v4);
    uint64_t v6 = v5 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider____lazy_storage___userDefaults;
    swift_beginAccess();
    outlined assign with take of ProtectedStorage?(v4, v6);
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v2);
  }
  else
  {
    uint64_t v7 = v2[18];
    outlined init with take of BackgroundSessionManagerDataSource((long long *)*a1, (uint64_t)v3);
    uint64_t v8 = v7 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider____lazy_storage___userDefaults;
    swift_beginAccess();
    outlined assign with take of ProtectedStorage?((uint64_t)v3, v8);
    swift_endAccess();
  }
  free(v2);
}

uint64_t IDSGroupSessionProvider.CurrentSessionInfo.currentParticipantIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t IDSGroupSessionProvider.currentPlugins.didset()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[0] = *(void *)&v0[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_queue];
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v0;
  aBlock[4] = partial apply for closure #1 in IDSGroupSessionProvider.currentPlugins.didset;
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_99;
  uint64_t v10 = _Block_copy(aBlock);
  id v11 = v0;
  static DispatchQoS.unspecified.getter();
  v13[1] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type IDSGroupSessionProvider and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v8, v4, v10);
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release();
}

uint64_t closure #1 in IDSGroupSessionProvider.currentPlugins.didset(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0xC0))();
  if (result)
  {
    uint64_t v4 = v3;
    uint64_t ObjectType = swift_getObjectType();
    v9[3] = type metadata accessor for IDSGroupSessionProvider();
    v9[4] = lazy protocol witness table accessor for type IDSGroupSessionProvider and conformance NSObject(&lazy protocol witness table cache variable for type IDSGroupSessionProvider and conformance IDSGroupSessionProvider, v6, (void (*)(uint64_t))type metadata accessor for IDSGroupSessionProvider);
    v9[0] = a1;
    uint64_t v7 = *(void (**)(void *, uint64_t, uint64_t))(v4 + 40);
    uint64_t v8 = a1;
    v7(v9, ObjectType, v4);
    swift_unknownObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v9);
  }
  return result;
}

uint64_t IDSGroupSessionProvider.currentPlugins.getter()
{
  return ActivitySession.persistentSceneIdentifiers.getter();
}

uint64_t IDSGroupSessionProvider.currentPlugins.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_currentPlugins);
  swift_beginAccess();
  *uint64_t v3 = a1;
  swift_bridgeObjectRelease();
  return IDSGroupSessionProvider.currentPlugins.didset();
}

uint64_t (*IDSGroupSessionProvider.currentPlugins.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return IDSGroupSessionProvider.currentPlugins.modify;
}

uint64_t IDSGroupSessionProvider.currentPlugins.modify(uint64_t a1, char a2)
{
  return IDSGroupSessionProvider.currentPlugins.modify(a1, a2, (uint64_t (*)(uint64_t))IDSGroupSessionProvider.currentPlugins.didset);
}

void *IDSGroupSessionProvider.virtualParticipant.getter()
{
  uint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void **)(v1 + 16 * v2 + 16);
    id v4 = v3;
  }
  else
  {
    uint64_t v3 = 0;
  }
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t IDSGroupSessionProvider.participants.getter()
{
  return ActivitySession.persistentSceneIdentifiers.getter();
}

uint64_t IDSGroupSessionProvider.participants.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_participants);
  swift_beginAccess();
  *uint64_t v3 = a1;
  swift_bridgeObjectRelease();
  return IDSGroupSessionProvider.recomputeUnknownParticipants()();
}

uint64_t (*IDSGroupSessionProvider.participants.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return IDSGroupSessionProvider.participants.modify;
}

uint64_t IDSGroupSessionProvider.participants.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return IDSGroupSessionProvider.recomputeUnknownParticipants()();
  }
  return result;
}

uint64_t IDSGroupSessionProvider.unknownParticipants.didset(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = *(void *)&v1[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_queue];
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = v1;
  aBlock[4] = partial apply for closure #1 in IDSGroupSessionProvider.unknownParticipants.didset;
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_93;
  uint64_t v12 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  uint64_t v13 = v1;
  static DispatchQoS.unspecified.getter();
  v15[1] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type IDSGroupSessionProvider and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v10, v6, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release();
}

void closure #1 in IDSGroupSessionProvider.unknownParticipants.didset(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v5 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a2) + 0x160);
  uint64_t v6 = v5();
  char v7 = specialized static Set.== infix(_:_:)(a1, v6);
  uint64_t v8 = swift_bridgeObjectRelease();
  if (v7)
  {
    if (one-time initialization token for service != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Log.service);
    uint64_t v10 = a2;
    swift_bridgeObjectRetain_n();
    uint64_t v11 = v10;
    oslog = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      unint64_t v14 = (void *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      v31[0] = v29;
      *(_DWORD *)uint64_t v13 = 138412802;
      os_log_type_t type = v12;
      uint64_t v15 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v14 = a2;

      *(_WORD *)(v13 + 12) = 2080;
      v5();
      type metadata accessor for AddressableMember();
      lazy protocol witness table accessor for type IDSGroupSessionProvider and conformance NSObject(&lazy protocol witness table cache variable for type AddressableMember and conformance NSObject, 255, (void (*)(uint64_t))type metadata accessor for AddressableMember);
      uint64_t v16 = Set.description.getter();
      unint64_t v18 = v17;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v13 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v19 = Set.description.getter();
      unint64_t v21 = v20;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B0DF7000, oslog, type, "%@ not notifying delegate of updated unknownParticipant list %s because it's the same as the oldValue: %s", (uint8_t *)v13, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v14, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v29, -1, -1);
      MEMORY[0x1B3EA39E0](v13, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else if ((*(uint64_t (**)(uint64_t))((*v4 & *a2) + 0xC0))(v8))
  {
    uint64_t v23 = v22;
    uint64_t ObjectType = swift_getObjectType();
    v31[3] = type metadata accessor for IDSGroupSessionProvider();
    v31[4] = lazy protocol witness table accessor for type IDSGroupSessionProvider and conformance NSObject(&lazy protocol witness table cache variable for type IDSGroupSessionProvider and conformance IDSGroupSessionProvider, v25, (void (*)(uint64_t))type metadata accessor for IDSGroupSessionProvider);
    v31[0] = (uint64_t)a2;
    uint64_t v26 = a2;
    uint64_t v27 = v5();
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v23 + 32))(v31, v27, ObjectType, v23);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v31);
  }
}

uint64_t IDSGroupSessionProvider.unknownParticipants.getter()
{
  return ActivitySession.persistentSceneIdentifiers.getter();
}

uint64_t IDSGroupSessionProvider.unknownParticipants.setter(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_unknownParticipants);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  IDSGroupSessionProvider.unknownParticipants.didset(v4);
  return swift_bridgeObjectRelease();
}

void (*IDSGroupSessionProvider.unknownParticipants.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_unknownParticipants;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = (void *)(v1 + v4);
  swift_beginAccess();
  v3[3] = *v5;
  swift_bridgeObjectRetain();
  return IDSGroupSessionProvider.unknownParticipants.modify;
}

void IDSGroupSessionProvider.unknownParticipants.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 32);
  uint64_t v3 = *(void *)(*(void *)a1 + 40);
  uint64_t v5 = *(void *)(v4 + v3);
  *(void *)(v4 + v3) = *(void *)(*(void *)a1 + 24);
  if (a2)
  {
    swift_bridgeObjectRetain();
    IDSGroupSessionProvider.unknownParticipants.didset(v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    IDSGroupSessionProvider.unknownParticipants.didset(v5);
  }
  swift_bridgeObjectRelease();
  free(v2);
}

uint64_t IDSGroupSessionProvider.abcReporter.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_abcReporter;
  swift_beginAccess();
  return outlined init with copy of UserNotificationCenter(v3, a1);
}

uint64_t IDSGroupSessionProvider.abcReporter.setter(long long *a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_abcReporter;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  outlined init with take of BackgroundSessionManagerDataSource(a1, v3);
  return swift_endAccess();
}

uint64_t (*IDSGroupSessionProvider.abcReporter.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

void *IDSGroupSessionProvider.powerAssertion.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_powerAssertion);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void IDSGroupSessionProvider.powerAssertion.setter(void *a1)
{
}

void IDSGroupSessionProvider.groupSession.setter(void *a1, void *a2)
{
  uint64_t v4 = (void **)(v2 + *a2);
  swift_beginAccess();
  uint64_t v5 = *v4;
  *uint64_t v4 = a1;
}

uint64_t (*IDSGroupSessionProvider.powerAssertion.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t IDSGroupSessionProvider.state.didset()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (char *)v0 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_state;
  swift_beginAccess();
  if (*v9 != 1)
  {
    if (one-time initialization token for service != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Log.service);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_1B0DF7000, v11, v12, "IDSGroupSessionProvider getting rid of assertion", v13, 2u);
      MEMORY[0x1B3EA39E0](v13, -1, -1);
    }

    (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x198))(0);
  }
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v1;
  aBlock[4] = partial apply for closure #1 in IDSGroupSessionProvider.state.didset;
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_87;
  uint64_t v15 = _Block_copy(aBlock);
  uint64_t v16 = v1;
  static DispatchQoS.unspecified.getter();
  uint64_t v20 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type IDSGroupSessionProvider and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v8, v5, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v19);
  return swift_release();
}

uint64_t closure #1 in IDSGroupSessionProvider.state.didset(void *a1)
{
  uint64_t v2 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0xC0))();
  if (result)
  {
    uint64_t v5 = v4;
    uint64_t ObjectType = swift_getObjectType();
    v11[3] = type metadata accessor for IDSGroupSessionProvider();
    v11[4] = lazy protocol witness table accessor for type IDSGroupSessionProvider and conformance NSObject(&lazy protocol witness table cache variable for type IDSGroupSessionProvider and conformance IDSGroupSessionProvider, v7, (void (*)(uint64_t))type metadata accessor for IDSGroupSessionProvider);
    v11[0] = a1;
    uint64_t v8 = *(uint64_t (**)(void))((*v2 & *a1) + 0x1A8);
    uint64_t v9 = a1;
    uint64_t v10 = v8();
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v5 + 8))(v11, v10, ObjectType, v5);
    swift_unknownObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
  }
  return result;
}

uint64_t IDSGroupSessionProvider.state.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_state);
  swift_beginAccess();
  return *v1;
}

uint64_t IDSGroupSessionProvider.state.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_state);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return IDSGroupSessionProvider.state.didset();
}

uint64_t (*IDSGroupSessionProvider.state.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return IDSGroupSessionProvider.state.modify;
}

uint64_t IDSGroupSessionProvider.state.modify(uint64_t a1, char a2)
{
  return IDSGroupSessionProvider.currentPlugins.modify(a1, a2, (uint64_t (*)(uint64_t))IDSGroupSessionProvider.state.didset);
}

uint64_t IDSGroupSessionProvider.currentPlugins.modify(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return a3(result);
  }
  return result;
}

const char *IDSGroupSessionProvider.kPluginName.unsafeMutableAddressor()
{
  return "PubSub";
}

uint64_t static IDSGroupSessionProvider.kPluginName.getter()
{
  return 0x627553627550;
}

id IDSGroupSessionProvider.__allocating_init(groupID:members:localMember:service:targetQueue:abcReporter:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  id v17 = objc_allocWithZone(v8);
  id v18 = specialized IDSGroupSessionProvider.init(groupID:members:localMember:service:targetQueue:abcReporter:)(a1, a2, a3, a4, a5, a6, a7, a8);

  swift_unknownObjectRelease();
  return v18;
}

id IDSGroupSessionProvider.init(groupID:members:localMember:service:targetQueue:abcReporter:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  id v9 = specialized IDSGroupSessionProvider.init(groupID:members:localMember:service:targetQueue:abcReporter:)(a1, a2, a3, a4, a5, a6, a7, a8);

  swift_unknownObjectRelease();
  return v9;
}

id IDSGroupSessionProvider.__deallocating_deinit()
{
  uint64_t v1 = (id *)&v0[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_groupSession];
  swift_beginAccess();
  if (*v1) {
    objc_msgSend(*v1, sel_invalidate);
  }
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for IDSGroupSessionProvider();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t IDSGroupSessionProvider.recomputeUnknownParticipants()()
{
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v2 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x148))();
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v28 = v0;
    unint64_t v31 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v4 = specialized Set.startIndex.getter(v2);
    uint64_t v6 = v5;
    char v8 = v7 & 1;
    uint64_t result = self;
    id v29 = (id)result;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(unsigned char *)(v2 + 32))
    {
      if (((*(void *)(v2 + 56 + (((unint64_t)v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
        goto LABEL_14;
      }
      if (*(_DWORD *)(v2 + 36) != v6) {
        goto LABEL_15;
      }
      uint64_t v16 = (uint64_t *)(*(void *)(v2 + 48) + 24 * v4);
      uint64_t v17 = *v16;
      uint64_t v18 = v16[1];
      uint64_t v19 = v16[2];
      swift_bridgeObjectRetain();
      uint64_t v20 = (void *)MEMORY[0x1B3EA1B00](v18, v19);
      id v21 = objc_msgSend(v29, sel_normalizedHandleWithDestinationID_, v20);

      if (!v21)
      {
        id v22 = objc_allocWithZone(MEMORY[0x1E4FADBD8]);
        swift_bridgeObjectRetain();
        uint64_t v23 = (void *)MEMORY[0x1B3EA1B00](v18, v19);
        swift_bridgeObjectRelease();
        id v21 = objc_msgSend(v22, sel_initWithDestinationID_, v23);
      }
      id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADB90]), sel_initWithIdentifier_handle_, v17, v21);

      id v11 = objc_msgSend(v10, sel_handle);
      os_log_type_t v12 = (objc_class *)type metadata accessor for AddressableMember();
      uint64_t v13 = (char *)objc_allocWithZone(v12);
      *(void *)&v13[OBJC_IVAR____TtC14CopresenceCore17AddressableMember_handle] = v11;
      v30.receiver = v13;
      v30.super_class = v12;
      objc_msgSendSuper2(&v30, sel_init);
      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      uint64_t result = specialized _NativeSet.index(after:)(v4, v6, v8 & 1, v2);
      uint64_t v4 = result;
      uint64_t v6 = v14;
      char v8 = v15 & 1;
      if (!--v3)
      {
        outlined consume of Set<AddressableMember>.Index._Variant(result, v14, v15 & 1);
        unint64_t v24 = v31;
        swift_bridgeObjectRelease();
        uint64_t v0 = v28;
        uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v24 = MEMORY[0x1E4FBC860];
LABEL_12:
    uint64_t v25 = specialized Set.init<A>(_:)(v24);
    swift_bridgeObjectRelease();
    uint64_t v26 = swift_bridgeObjectRetain();
    uint64_t v27 = specialized Set.subtracting(_:)(v26, v25);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t))((*v1 & *v0) + 0x168))(v27);
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> IDSGroupSessionProvider.start()()
{
  uint64_t v2 = v0;
  uint64_t v3 = IDSGroupSessionProvider.idsAccountForLocalMember()();
  if (!v1)
  {
    uint64_t v4 = (void *)v3;
    uint64_t v5 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v6 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
    swift_unknownObjectRelease();
    if (v6)
    {
      IDSGroupSessionProvider.idsSessionCreationOptions()();
      if (one-time initialization token for service != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      __swift_project_value_buffer(v7, (uint64_t)static Log.service);
      id v8 = v2;
      swift_bridgeObjectRetain_n();
      id v9 = v8;
      id v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        os_log_type_t v64 = v11;
        log = v10;
        uint64_t v12 = swift_slowAlloc();
        uint64_t v63 = swift_slowAlloc();
        unint64_t v70 = v63;
        *(_DWORD *)uint64_t v12 = 136315650;
        uint64_t v69 = *(void *)((char *)v9 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_groupID + 8);
        swift_bridgeObjectRetain();
        uint64_t v13 = String.init<A>(reflecting:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, (uint64_t *)&v70);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        *(_WORD *)(v12 + 12) = 2080;
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : Any]);
        uint64_t v15 = String.init<A>(reflecting:)();
        uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, (uint64_t *)&v70);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v12 + 22) = 2080;
        uint64_t v18 = *(void *)((char *)v9 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service + 24);
        uint64_t v17 = *(void *)((char *)v9 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service + 32);
        __swift_project_boxed_opaque_existential_1((void *)((char *)v9 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service), v18);
        uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 32))(v18, v17);
        if (v20)
        {
          uint64_t v68 = v19;
          uint64_t v69 = v20;
          uint64_t v21 = String.init<A>(reflecting:)();
          unint64_t v23 = v22;
        }
        else
        {
          unint64_t v23 = 0xE300000000000000;
          uint64_t v21 = 7104878;
        }
        uint64_t v5 = (void *)MEMORY[0x1E4FBC8C8];
        uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, (uint64_t *)&v70);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1B0DF7000, log, v64, "Creating IDSGroupSession as LW with UUID %s using options %s on service %s", (uint8_t *)v12, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v63, -1, -1);
        MEMORY[0x1B3EA39E0](v12, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      id v29 = objc_allocWithZone(MEMORY[0x1E4F6AB20]);
      objc_super v30 = v4;
      uint64_t v31 = MEMORY[0x1E4FBB1A0];
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v33 = objc_msgSend(v29, sel_initWithAccount_options_, v30, isa);
      os_log_t loga = v30;

      uint64_t v34 = (*(uint64_t (**)(id))((*v5 & *v9) + 0xF8))(v33);
      uint64_t v65 = *(uint64_t (**)(void))((*v5 & *v9) + 0xF0);
      uint64_t v35 = (void *)((uint64_t (*)(uint64_t))v65)(v34);
      if (v35)
      {
        uint64_t v36 = v35;
        objc_msgSend(v35, sel_setDelegate_queue_, v9, *(void *)((char *)v9 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_queue));
      }
      unint64_t v37 = IDSGroupSessionProvider.idsJoinSessionOptions()();
      id v38 = objc_msgSend(objc_allocWithZone((Class)CPFeatureFlags), sel_init);
      unsigned int v39 = objc_msgSend(v38, sel_wranglerEnabled);

      if (v39)
      {
        uint64_t v40 = v31;
        unint64_t v62 = v37;
        uint64_t v41 = Logger.logObject.getter();
        os_log_type_t v42 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v41, v42))
        {
          uint64_t v43 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v43 = 0;
          _os_log_impl(&dword_1B0DF7000, v41, v42, "Grabbing power assertion", v43, 2u);
          MEMORY[0x1B3EA39E0](v43, -1, -1);
        }

        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1B1138A70;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v45 = v40;
        AnyHashable.init<A>(_:)();
        id v46 = objc_msgSend(self, sel_processInfo);
        objc_msgSend(v46, sel_processIdentifier);

        Class v47 = Int32._bridgeToObjectiveC()().super.super.isa;
        *(void *)(inited + 96) = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
        *(void *)(inited + 72) = v47;
        uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v69 = v48;
        AnyHashable.init<A>(_:)();
        *(void *)(inited + 168) = v45;
        *(void *)(inited + 144) = 0xD000000000000022;
        *(void *)(inited + 152) = 0x80000001B1160BE0;
        specialized Dictionary.init(dictionaryLiteral:)(inited);
        id v49 = objc_allocWithZone(MEMORY[0x1E4F6C3B0]);
        uint64_t v50 = (void *)MEMORY[0x1B3EA1B00](0xD000000000000018, 0x80000001B1160BC0);
        Class v51 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v52 = objc_msgSend(v49, sel_initWithIdentifier_timeoutSec_properties_, v50, v51, 0.0);

        (*(void (**)(id))((*MEMORY[0x1E4FBC8C8] & *v9) + 0x198))(v52);
        unint64_t v37 = v62;
      }
      swift_bridgeObjectRetain_n();
      uint64_t v53 = Logger.logObject.getter();
      os_log_type_t v54 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v53, v54))
      {
        uint64_t v55 = (uint8_t *)swift_slowAlloc();
        uint64_t v56 = swift_slowAlloc();
        uint64_t v68 = v56;
        *(_DWORD *)uint64_t v55 = 136315138;
        unint64_t v70 = v37;
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : Any]);
        uint64_t v57 = String.init<A>(reflecting:)();
        unint64_t v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, &v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B0DF7000, v53, v54, "Joining group session with options %s", v55, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v56, -1, -1);
        MEMORY[0x1B3EA39E0](v55, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }
      uint64_t v59 = v65();
      if (v59)
      {
        uint64_t v60 = (void *)v59;
        specialized _dictionaryUpCast<A, B, C, D>(_:)(v37);
        swift_bridgeObjectRelease();
        Class v61 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v60, sel_joinWithOptions_, v61);
      }
      else
      {

        swift_bridgeObjectRelease();
      }
    }
    else
    {
      if (one-time initialization token for service != -1) {
        swift_once();
      }
      uint64_t v24 = type metadata accessor for Logger();
      __swift_project_value_buffer(v24, (uint64_t)static Log.service);
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v27 = 0;
        _os_log_impl(&dword_1B0DF7000, v25, v26, "IDSGroupSessionProvider start called before setting delegate", v27, 2u);
        MEMORY[0x1B3EA39E0](v27, -1, -1);
      }

      lazy protocol witness table accessor for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError();
      swift_allocError();
      *uint64_t v28 = 2;
      swift_willThrow();
    }
  }
}

Swift::Void __swiftcall IDSGroupSessionProvider.leave()()
{
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.service);
  uint64_t v2 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
  if (v5)
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v14 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    if ((*(uint64_t (**)(void))((*v6 & *v2) + 0xF0))())
    {
      type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for IDSGroupSession);
      uint64_t v9 = String.init<A>(reflecting:)();
      unint64_t v11 = v10;
    }
    else
    {
      unint64_t v11 = 0xE300000000000000;
      uint64_t v9 = 7104878;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v3, v4, "Leaving IDSGroupSession %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v8, -1, -1);
    MEMORY[0x1B3EA39E0](v7, -1, -1);
  }
  else
  {
  }
  uint64_t v13 = (void *)(*(uint64_t (**)(uint64_t))((*v6 & *v2) + 0xF0))(v12);
  objc_msgSend(v13, sel_leaveGroupSession);
}

void IDSGroupSessionProvider.addMembers(_:)(uint64_t a1)
{
}

uint64_t Set<>.idsDestinations.getter(uint64_t a1)
{
  return specialized Sequence.compactMap<A>(_:)(a1);
}

void IDSGroupSessionProvider.removeMembers(_:)(uint64_t a1)
{
}

void IDSGroupSessionProvider.addMembers(_:)(uint64_t a1, unsigned __int16 a2, const char *a3)
{
  uint64_t v8 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v3) + 0xF0))();
  if (v8)
  {
    uint64_t v9 = (void *)v8;
    unint64_t v10 = specialized Sequence.compactMap<A>(_:)(a1);
    if (!v4)
    {
      specialized _arrayForceCast<A, B>(_:)(v10);
      swift_bridgeObjectRelease();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v9, sel_manageDesignatedMembers_withType_, isa, a2);
    }
  }
  else
  {
    if (one-time initialization token for service != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Log.service);
    uint64_t v13 = v3;
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      unint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      uint64_t v25 = v17;
      *(_DWORD *)unint64_t v16 = 136315138;
      uint64_t v18 = *(void *)((char *)v13 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service + 24);
      uint64_t v19 = *(void *)((char *)v13 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service + 32);
      __swift_project_boxed_opaque_existential_1((void *)((char *)v13 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service), v18);
      (*(void (**)(uint64_t, uint64_t))(v19 + 32))(v18, v19);
      if (v20)
      {
        uint64_t v21 = String.init<A>(reflecting:)();
        unint64_t v23 = v22;
      }
      else
      {
        unint64_t v23 = 0xE300000000000000;
        uint64_t v21 = 7104878;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B0DF7000, v14, v15, a3, v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v17, -1, -1);
      MEMORY[0x1B3EA39E0](v16, -1, -1);
    }
    else
    {
    }
    lazy protocol witness table accessor for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError();
    swift_allocError();
    unsigned char *v24 = 4;
    swift_willThrow();
  }
}

void IDSGroupSessionProvider.updateMembers(_:)(uint64_t a1)
{
  uint64_t v4 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xF0))();
  if (v4)
  {
    BOOL v5 = (void *)v4;
    uint64_t v6 = *(void *)((char *)v1 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_members);
    *(void *)((char *)v1 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_members) = a1;
    swift_bridgeObjectRetain();
    IDSGroupSessionProvider.members.didset(v6);
    swift_bridgeObjectRelease();
    uint64_t v7 = specialized Sequence.compactMap<A>(_:)(a1);
    if (!v2)
    {
      unint64_t v8 = v7;
      unint64_t v9 = IDSGroupSessionProvider.idsDestinationsForLocalMember()();
      if (!v9) {
        unint64_t v9 = MEMORY[0x1E4FBC860];
      }
      specialized Array.append<A>(contentsOf:)(v9);
      specialized _arrayForceCast<A, B>(_:)(v8);
      swift_bridgeObjectRelease();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v5, sel_updateMembers_withContext_triggeredLocally_, isa, 0, 1);
    }
  }
  else
  {
    if (one-time initialization token for service != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Log.service);
    unint64_t v11 = v1;
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      uint64_t v24 = v15;
      *(_DWORD *)uint64_t v14 = 136315138;
      uint64_t v16 = *(void *)((char *)v11 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service + 24);
      uint64_t v17 = *(void *)((char *)v11 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service + 32);
      __swift_project_boxed_opaque_existential_1((void *)((char *)v11 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service), v16);
      (*(void (**)(uint64_t, uint64_t))(v17 + 32))(v16, v17);
      if (v18)
      {
        uint64_t v19 = String.init<A>(reflecting:)();
        unint64_t v21 = v20;
      }
      else
      {
        unint64_t v21 = 0xE300000000000000;
        uint64_t v19 = 7104878;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B0DF7000, v12, v13, "Unable to update members, no session for service %s", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v15, -1, -1);
      MEMORY[0x1B3EA39E0](v14, -1, -1);
    }
    else
    {
    }
    lazy protocol witness table accessor for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError();
    swift_allocError();
    unsigned char *v23 = 4;
    swift_willThrow();
  }
}

void IDSGroupSessionProvider.requestDataCryptor(forTopic:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, id a4)
{
  uint64_t v9 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v4) + 0xF0))();
  if (v9)
  {
    uint64_t v10 = (void *)v9;
    if (one-time initialization token for service != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Log.service);
    id v12 = v10;
    swift_bridgeObjectRetain_n();
    id v13 = v12;
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      id v40 = a4;
      uint64_t v16 = swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      uint64_t v48 = v39;
      *(_DWORD *)uint64_t v16 = 136315394;
      id v17 = objc_msgSend(v13, sel_sessionID);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v18 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2080;
      uint64_t v43 = a2;
      swift_bridgeObjectRetain();
      uint64_t v20 = String.init<A>(reflecting:)();
      uint64_t aBlock = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v14, v15, "Session, %s, fetching data cryptor for topic: %s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v39, -1, -1);
      uint64_t v22 = v16;
      a4 = v40;
      MEMORY[0x1B3EA39E0](v22, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v35 = (void *)MEMORY[0x1B3EA1B00](a1, a2);
    uint64_t v36 = (void *)swift_allocObject();
    v36[2] = a1;
    v36[3] = a2;
    v36[4] = v13;
    v36[5] = a3;
    v36[6] = a4;
    id v46 = partial apply for closure #1 in IDSGroupSessionProvider.requestDataCryptor(forTopic:completion:);
    Class v47 = v36;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v43 = 1107296256;
    uint64_t v44 = thunk for @escaping @callee_guaranteed (@guaranteed IDSGroupSessionDataCryptor) -> ();
    uint64_t v45 = &block_descriptor_21;
    unint64_t v37 = _Block_copy(&aBlock);
    id v38 = v13;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    objc_msgSend(v38, sel_requestDataCryptorForTopic_completionHandler_, v35, v37);
    _Block_release(v37);
  }
  else
  {
    if (one-time initialization token for service != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Log.service);
    uint64_t v41 = v4;
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      os_log_type_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      uint64_t v48 = v27;
      *(_DWORD *)os_log_type_t v26 = 136315138;
      uint64_t v28 = *(void *)((char *)v41 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service + 24);
      uint64_t v29 = *(void *)((char *)v41 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service + 32);
      __swift_project_boxed_opaque_existential_1((void *)((char *)v41 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service), v28);
      uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 32))(v28, v29);
      if (v31)
      {
        uint64_t aBlock = v30;
        uint64_t v43 = v31;
        uint64_t v32 = String.init<A>(reflecting:)();
        unint64_t v34 = v33;
      }
      else
      {
        unint64_t v34 = 0xE300000000000000;
        uint64_t v32 = 7104878;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v34, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v24, v25, "Unable to fetch data cryptor, no session for service %s", v26, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v27, -1, -1);
      MEMORY[0x1B3EA39E0](v26, -1, -1);
    }
    else
    {
    }
  }
}

void closure #1 in IDSGroupSessionProvider.requestDataCryptor(forTopic:completion:)(void *a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t))
{
  v34[1] = (uint64_t)&unk_1F09C8550;
  uint64_t v8 = swift_dynamicCastObjCProtocolConditional();
  uint64_t v9 = one-time initialization token for service;
  if (v8)
  {
    uint64_t v10 = v8;
    id v33 = a1;
    if (v9 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Log.service);
    swift_bridgeObjectRetain_n();
    id v12 = a4;
    id v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      v34[0] = v16;
      *(_DWORD *)uint64_t v15 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v17 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 12) = 2080;
      id v19 = objc_msgSend(v12, sel_sessionID);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v20 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v13, v14, "Successfully fetched data cryptor for topic %s on session %s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v16, -1, -1);
      MEMORY[0x1B3EA39E0](v15, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    a5(v10);
  }
  else
  {
    if (one-time initialization token for service != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Log.service);
    swift_bridgeObjectRetain_n();
    id v23 = a4;
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      v34[0] = v27;
      *(_DWORD *)uint64_t v26 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v28 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2080;
      id v30 = objc_msgSend(v23, sel_sessionID);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v31 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v24, v25, "Failed to fetch data cryptor for topic %s on session %s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v27, -1, -1);
      MEMORY[0x1B3EA39E0](v26, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed IDSGroupSessionDataCryptor) -> ()(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

Swift::Void __swiftcall IDSGroupSessionProvider.requestEncryptionKeysForParticipants(_:)(Swift::OpaquePointer_optional a1)
{
  rawValue = a1.value._rawValue;
  uint64_t v3 = (*(uint64_t (**)(void *, void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xF0))(a1.value._rawValue, *(void *)&a1.is_nil);
  if (v3)
  {
    id v4 = (void *)v3;
    if (one-time initialization token for service != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Log.service);
    swift_bridgeObjectRetain_n();
    id v6 = v4;
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v28 = v10;
      *(_DWORD *)uint64_t v9 = 136315394;
      id v11 = objc_msgSend(v6, sel_sessionID);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v12 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2080;
      if (rawValue)
      {
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64]);
        uint64_t v14 = String.init<A>(reflecting:)();
        unint64_t v16 = v15;
      }
      else
      {
        uint64_t v14 = 7104878;
        unint64_t v16 = 0xE300000000000000;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v7, v8, "Session, %s, requesting encryption keys for: %s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v10, -1, -1);
      MEMORY[0x1B3EA39E0](v9, -1, -1);

      if (!rawValue) {
        goto LABEL_20;
      }
    }
    else
    {

      swift_bridgeObjectRelease_n();
      if (!rawValue) {
        goto LABEL_20;
      }
    }
    specialized _arrayForceCast<A, B>(_:)((uint64_t)rawValue);
    rawValue = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
LABEL_20:
    objc_msgSend(v6, sel_requestEncryptionKeyForParticipants_, rawValue);

LABEL_23:
    return;
  }
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Log.service);
  uint64_t v27 = v1;
  rawValue = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(rawValue, v18))
  {
    id v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v28 = v20;
    *(_DWORD *)id v19 = 136315138;
    uint64_t v21 = *(void *)((char *)v27 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service + 24);
    uint64_t v22 = *(void *)((char *)v27 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service + 32);
    __swift_project_boxed_opaque_existential_1((void *)((char *)v27 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service), v21);
    (*(void (**)(uint64_t, uint64_t))(v22 + 32))(v21, v22);
    if (v23)
    {
      uint64_t v24 = String.init<A>(reflecting:)();
      unint64_t v26 = v25;
    }
    else
    {
      uint64_t v24 = 7104878;
      unint64_t v26 = 0xE300000000000000;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, rawValue, v18, "Unable to request encryption keys, no session for service %s", v19, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v20, -1, -1);
    MEMORY[0x1B3EA39E0](v19, -1, -1);
    goto LABEL_23;
  }
}

uint64_t IDSGroupSessionProvider.description.getter()
{
  BYTE8(v7) = 0;
  _StringGuts.grow(_:)(43);
  v1._object = (void *)0x80000001B1160C40;
  v1._countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v1);
  uint64_t v2 = *(void *)((char *)v0 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_groupID);
  uint64_t v3 = *(void **)((char *)v0 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_groupID + 8);
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x3A657461747320;
  v5._object = (void *)0xE700000000000000;
  String.append(_:)(v5);
  *(void *)&long long v7 = (*(unsigned __int8 (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A8))();
  _print_unlocked<A, B>(_:_:)();
  return *(void *)((char *)&v7 + 1);
}

unint64_t IDSGroupSessionProvider.idsJoinSessionOptions()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B1138A70;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v2;
  *(void *)(inited + 72) = MEMORY[0x1E4F277C0];
  *(_OWORD *)(inited + 48) = xmmword_1B113B700;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v3;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  uint64_t v4 = swift_initStackObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A80;
  *(void *)(v4 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v4 + 40) = v5;
  *(void *)(v4 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v4 + 56) = v6;
  unint64_t v7 = specialized Dictionary.init(dictionaryLiteral:)(v4);
  *(void *)(inited + 120) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  *(void *)(inited + 96) = v7;
  unint64_t v8 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  (*(void (**)(long long *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))(&v19);
  uint64_t v9 = v20;
  uint64_t v10 = v21;
  __swift_project_boxed_opaque_existential_1(&v19, v20);
  uint64_t v11 = MEMORY[0x1E4FBB390];
  (*(void (**)(_OWORD *__return_ptr, void, unint64_t, unint64_t, void, void, void, uint64_t, uint64_t))(v10 + 32))(v18, MEMORY[0x1E4FBB390], 0xD000000000000010, 0x80000001B1160FD0, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB3B0], MEMORY[0x1E4FBB398], v9, v10);
  char v12 = v18[0];
  if (LOBYTE(v18[0]) == 2)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v19);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v19);
    if (v12)
    {
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v15 = v14;
      uint64_t v20 = v11;
      LOBYTE(v19) = 1;
      outlined init with take of Any(&v19, v18);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v18, v13, v15, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  return v8;
}

uint64_t IDSGroupSessionProvider.idsSessionCreationOptions()()
{
  uint64_t result = IDSGroupSessionProvider.idsDestinationsForLocalMember()();
  if (v1) {
    return result;
  }
  if (result) {
    unint64_t v3 = result;
  }
  else {
    unint64_t v3 = MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B1138A90;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v5;
  *(void *)(inited + 72) = MEMORY[0x1E4FBB390];
  *(unsigned char *)(inited + 48) = 1;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v6;
  uint64_t v7 = *(void *)(v0 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_groupID);
  uint64_t v8 = *(void *)(v0 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_groupID + 8);
  *(void *)(inited + 120) = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 96) = v7;
  *(void *)(inited + 104) = v8;
  *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 136) = v9;
  swift_bridgeObjectRetain();
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = specialized Sequence.compactMap<A>(_:)(v10);
  swift_bridgeObjectRelease();
  *(void *)&long long v40 = v11;
  unint64_t v12 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v12);
  *(void *)(inited + 168) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [IDSDestinationProtocol]);
  *(void *)(inited + 144) = v11;
  *(void *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 184) = v13;
  *(void *)(inited + 216) = MEMORY[0x1E4FBB390];
  *(unsigned char *)(inited + 192) = 1;
  unint64_t v14 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  unint64_t v42 = v14;
  if (!(v3 >> 62))
  {
    if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_9;
    }
LABEL_22:
    swift_bridgeObjectRelease();
    return v42;
  }
  swift_bridgeObjectRetain();
  uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v38) {
    goto LABEL_22;
  }
LABEL_9:
  if ((v3 & 0xC000000000000001) != 0)
  {
    uint64_t v15 = (void *)MEMORY[0x1B3EA25C0](0, v3);
LABEL_12:
    swift_bridgeObjectRelease();
    id v16 = objc_msgSend(v15, sel_destinationURIs);
    uint64_t v17 = MEMORY[0x1E4FBB1A0];
    uint64_t v18 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v19 = specialized Collection.first.getter(v18);
    uint64_t v21 = v20;
    swift_bridgeObjectRelease();
    if (v21)
    {
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v24 = v23;
      unint64_t v25 = (void *)MEMORY[0x1B3EA1B00](v19, v21);
      swift_bridgeObjectRelease();
      id v26 = objc_msgSend(v25, sel__stripFZIDPrefix);

      if (v26)
      {
        uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v29 = v28;

        uint64_t v41 = v17;
        *(void *)&long long v40 = v27;
        *((void *)&v40 + 1) = v29;
        outlined init with take of Any(&v40, v39);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v42 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v39, v22, v24, isUniquelyReferenced_nonNull_native);
        unint64_t v42 = v14;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        specialized Dictionary._Variant.removeValue(forKey:)(v22, v24, v39);
        swift_bridgeObjectRelease();
        outlined destroy of UUID?((uint64_t)v39, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      goto LABEL_19;
    }
    if (one-time initialization token for service == -1) {
      goto LABEL_16;
    }
    goto LABEL_25;
  }
  if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v15 = *(void **)(v3 + 32);
    swift_unknownObjectRetain();
    goto LABEL_12;
  }
  __break(1u);
LABEL_25:
  swift_once();
LABEL_16:
  uint64_t v31 = type metadata accessor for Logger();
  __swift_project_value_buffer(v31, (uint64_t)static Log.service);
  swift_unknownObjectRetain_n();
  unint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v32, v33))
  {
    unint64_t v34 = (uint8_t *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    *(void *)&long long v40 = v35;
    *(_DWORD *)unint64_t v34 = 136315138;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IDSDestinationProtocol);
    uint64_t v36 = String.init<A>(reflecting:)();
    *(void *)&v39[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, (uint64_t *)&v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v32, v33, "Failed to find destinationURI for localMember's IDSDestination: %s", v34, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v35, -1, -1);
    MEMORY[0x1B3EA39E0](v34, -1, -1);

LABEL_19:
    swift_unknownObjectRelease();
    return v42;
  }
  swift_unknownObjectRelease_n();

  return v42;
}

uint64_t IDSGroupSessionProvider.idsDestinationsForLocalMember()()
{
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_localMember];
  if (!v2) {
    return 0;
  }
  unint64_t v3 = v0;
  uint64_t v4 = *(void *)&v0[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_localMember + 8];
  type metadata accessor for AddressableMember();
  uint64_t v5 = swift_dynamicCastClass();
  if (v5)
  {
    uint64_t v6 = v5;
    swift_unknownObjectRetain();
    uint64_t v7 = AddressableMember.idsDestination.getter();
    if (!v1)
    {
      uint64_t v8 = v7;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_1B1138AA0;
      *(void *)(v9 + 32) = v8;
      unint64_t v113 = v9;
      specialized Array._endMutation()();
      uint64_t v6 = v113;
      swift_unknownObjectRelease();
      return (uint64_t)v6;
    }
LABEL_87:
    swift_unknownObjectRelease();
    return (uint64_t)v6;
  }
  type metadata accessor for AccountMember();
  if (!swift_dynamicCastClass())
  {
    uint64_t v31 = one-time initialization token for service;
    swift_unknownObjectRetain();
    if (v31 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Log.service);
    os_log_type_t v33 = v0;
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v6, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      v112._countAndFlagsBits = v36;
      *(_DWORD *)uint64_t v35 = 136315138;
      unint64_t v113 = v2;
      uint64_t v114 = v4;
      swift_unknownObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Member);
      uint64_t v37 = String.init<A>(reflecting:)();
      unint64_t v113 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, &v112._countAndFlagsBits);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B0DF7000, v6, v34, "Unknown type for localMember: %s", v35, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v36, -1, -1);
      MEMORY[0x1B3EA39E0](v35, -1, -1);
    }
    else
    {
    }
    lazy protocol witness table accessor for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError();
    swift_allocError();
    char v52 = 5;
    goto LABEL_44;
  }
  uint64_t v10 = &v0[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service];
  uint64_t v11 = *(void *)&v0[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service + 24];
  uint64_t v12 = *(void *)&v0[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service + 32];
  __swift_project_boxed_opaque_existential_1(&v0[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service], v11);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 24);
  swift_unknownObjectRetain();
  unint64_t v14 = (void *)v13(v11, v12);
  if (!v14)
  {
    if (one-time initialization token for service != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    uint64_t v6 = __swift_project_value_buffer(v39, (uint64_t)static Log.service);
    id v40 = v3;
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = swift_slowAlloc();
      uint64_t v110 = swift_slowAlloc();
      v112._countAndFlagsBits = v110;
      *(_DWORD *)uint64_t v43 = 136315394;
      uint64_t v44 = *((void *)v10 + 3);
      uint64_t v45 = *((void *)v10 + 4);
      __swift_project_boxed_opaque_existential_1(v10, v44);
      uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 32))(v44, v45);
      if (v47)
      {
        unint64_t v113 = v46;
        uint64_t v114 = v47;
        uint64_t v48 = String.init<A>(reflecting:)();
        unint64_t v50 = v49;
      }
      else
      {
        unint64_t v50 = 0xE300000000000000;
        uint64_t v48 = 7104878;
      }
      unint64_t v113 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v50, &v112._countAndFlagsBits);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v43 + 12) = 2080;
      uint64_t v64 = *((void *)v10 + 3);
      uint64_t v65 = *((void *)v10 + 4);
      __swift_project_boxed_opaque_existential_1(v10, v64);
      uint64_t v66 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 8))(v64, v65);
      if (v66)
      {
        unint64_t v113 = v66;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<IDSAccount>);
        uint64_t v67 = String.init<A>(reflecting:)();
        uint64_t v6 = v68;
      }
      else
      {
        uint64_t v6 = 0xE300000000000000;
        uint64_t v67 = 7104878;
      }
      unint64_t v113 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, (unint64_t)v6, &v112._countAndFlagsBits);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B0DF7000, v41, v42, "No iCloudAccount found while starting IDS Service service %s accounts %s", (uint8_t *)v43, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v110, -1, -1);
      MEMORY[0x1B3EA39E0](v43, -1, -1);
    }
    else
    {
    }
    lazy protocol witness table accessor for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError();
    swift_allocError();
    char v52 = 1;
LABEL_44:
    *Class v51 = v52;
    swift_willThrow();
    goto LABEL_87;
  }
  uint64_t v107 = v14;
  id v15 = objc_msgSend(v14, sel_handles);
  if (!v15)
  {
    if (one-time initialization token for service == -1)
    {
LABEL_33:
      uint64_t v54 = type metadata accessor for Logger();
      __swift_project_value_buffer(v54, (uint64_t)static Log.service);
      id v55 = v107;
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v56 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v6, v56))
      {
        uint64_t v57 = (uint8_t *)swift_slowAlloc();
        uint64_t v58 = swift_slowAlloc();
        unint64_t v113 = v58;
        *(_DWORD *)uint64_t v57 = 136315138;
        type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for IDSAccount);
        id v59 = v55;
        uint64_t v60 = String.init<A>(reflecting:)();
        v112._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, (uint64_t *)&v113);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1B0DF7000, v6, v56, "No handles on iCloudAccount %s", v57, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v58, -1, -1);
        MEMORY[0x1B3EA39E0](v57, -1, -1);
      }
      else
      {
      }
      lazy protocol witness table accessor for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError();
      swift_allocError();
      char v63 = 6;
LABEL_86:
      *unint64_t v62 = v63;
      swift_willThrow();

      goto LABEL_87;
    }
LABEL_90:
    swift_once();
    goto LABEL_33;
  }
  id v16 = v15;
  uint64_t v106 = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for IDSHandle);
  unint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v18 = MEMORY[0x1E4FBC860];
  uint64_t v115 = MEMORY[0x1E4FBC860];
  if (!(v17 >> 62))
  {
    uint64_t v19 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v19) {
      goto LABEL_11;
    }
LABEL_46:
    swift_bridgeObjectRelease();
    uint64_t v53 = MEMORY[0x1E4FBC860];
    goto LABEL_47;
  }
  swift_bridgeObjectRetain();
  uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v19) {
    goto LABEL_46;
  }
LABEL_11:
  if (v19 < 1)
  {
    __break(1u);
    goto LABEL_90;
  }
  uint64_t v20 = 0;
  unint64_t v109 = v17 & 0xC000000000000001;
  unint64_t v21 = v17;
  uint64_t v22 = v19;
  do
  {
    if (v109) {
      id v23 = (id)MEMORY[0x1B3EA25C0](v20, v17);
    }
    else {
      id v23 = *(id *)(v17 + 8 * v20 + 32);
    }
    uint64_t v24 = v23;
    id v25 = objc_msgSend(v23, sel_URI, v106);
    id v26 = objc_msgSend(v25, sel_prefixedURI);

    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v29 = v28;

    unint64_t v113 = v27;
    uint64_t v114 = v29;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v30 = String.lowercased()();
    swift_bridgeObjectRelease();
    Swift::String v112 = v30;
    lazy protocol witness table accessor for type String and conformance String();
    LOBYTE(v26) = StringProtocol.contains<A>(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v26)
    {
    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    ++v20;
    unint64_t v17 = v21;
  }
  while (v22 != v20);
  swift_bridgeObjectRelease();
  uint64_t v53 = v115;
  uint64_t v18 = MEMORY[0x1E4FBC860];
LABEL_47:
  unint64_t v113 = v18;
  BOOL v69 = v53 < 0 || (v53 & 0x4000000000000000) != 0;
  uint64_t v111 = v53;
  BOOL v108 = v69;
  if (!v69)
  {
    uint64_t v70 = *(void *)(v53 + 16);
    swift_retain();
    if (v70) {
      goto LABEL_52;
    }
LABEL_64:
    swift_release();
    unint64_t v84 = MEMORY[0x1E4FBC860];
    goto LABEL_65;
  }
  swift_retain();
  uint64_t v70 = _CocoaArrayWrapper.endIndex.getter();
  if (!v70) {
    goto LABEL_64;
  }
LABEL_52:
  uint64_t result = self;
  if (v70 >= 1)
  {
    uint64_t v72 = (void *)result;
    uint64_t v73 = 0;
    unint64_t v74 = v53 & 0xC000000000000001;
    do
    {
      if (v74) {
        id v75 = (id)MEMORY[0x1B3EA25C0](v73, v53);
      }
      else {
        id v75 = *(id *)(v53 + 8 * v73 + 32);
      }
      uint64_t v76 = v75;
      id v77 = objc_msgSend(v75, sel_URI, v106);
      id v78 = objc_msgSend(v77, sel_prefixedURI);

      uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v81 = v80;

      char v82 = (void *)MEMORY[0x1B3EA1B00](v79, v81);
      swift_bridgeObjectRelease();
      id v83 = objc_msgSend(v72, sel_destinationWithStringURI_isLightWeight_, v82, 1);

      if (v83)
      {
        MEMORY[0x1B3EA1CF0]();
        if (*(void *)((v113 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v113 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        uint64_t v53 = v111;
      }
      ++v73;
    }
    while (v70 != v73);
    swift_release();
    unint64_t v84 = v113;
LABEL_65:
    if (one-time initialization token for service != -1) {
      swift_once();
    }
    uint64_t v85 = type metadata accessor for Logger();
    __swift_project_value_buffer(v85, (uint64_t)static Log.service);
    swift_bridgeObjectRetain_n();
    uint64_t v86 = Logger.logObject.getter();
    os_log_type_t v87 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v86, v87))
    {
      uint64_t v88 = (uint8_t *)swift_slowAlloc();
      uint64_t v89 = swift_slowAlloc();
      unint64_t v113 = v89;
      *(_DWORD *)uint64_t v88 = 136315138;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [IDSDestination]);
      uint64_t v90 = String.init<A>(reflecting:)();
      v112._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v91, (uint64_t *)&v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B0DF7000, v86, v87, "Filtered destinations: %s", v88, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v89, -1, -1);
      MEMORY[0x1B3EA39E0](v88, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    if (v84 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v92 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v108) {
        goto LABEL_72;
      }
    }
    else
    {
      uint64_t v92 = *(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v108)
      {
LABEL_72:
        swift_bridgeObjectRetain();
        uint64_t v93 = _CocoaArrayWrapper.endIndex.getter();
        swift_release();
LABEL_75:
        swift_release();
        if (v92 == v93)
        {
          swift_bridgeObjectRetain();
          if (v84 >> 62)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IDSDestinationProtocol);
            uint64_t v6 = _bridgeCocoaArray<A>(_:)();
            swift_bridgeObjectRelease_n();

            swift_unknownObjectRelease();
          }
          else
          {
            dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
            swift_bridgeObjectRelease();

            swift_unknownObjectRelease();
            return v84;
          }
          return (uint64_t)v6;
        }
        id v94 = v107;
        swift_bridgeObjectRetain();
        id v55 = v94;
        uint64_t v6 = Logger.logObject.getter();
        os_log_type_t v95 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v6, v95))
        {
          uint64_t v96 = swift_slowAlloc();
          uint64_t v97 = swift_slowAlloc();
          unint64_t v113 = v97;
          *(_DWORD *)uint64_t v96 = 136315394;
          id v98 = objc_msgSend(v55, sel_handles);
          if (v98)
          {
            uint64_t v99 = v98;
            uint64_t v100 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            v112._countAndFlagsBits = v100;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [IDSHandle]);
            uint64_t v101 = String.init<A>(reflecting:)();
            unint64_t v103 = v102;
          }
          else
          {
            uint64_t v101 = 7104878;
            unint64_t v103 = 0xE300000000000000;
          }
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v101, v103, (uint64_t *)&v113);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          *(_WORD *)(v96 + 12) = 2080;
          swift_bridgeObjectRetain();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [IDSDestination]);
          uint64_t v104 = String.init<A>(reflecting:)();
          v112._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v104, v105, (uint64_t *)&v113);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B0DF7000, v6, v95, "Mismatch during conversion: %s vs %s", (uint8_t *)v96, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v97, -1, -1);
          MEMORY[0x1B3EA39E0](v96, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        lazy protocol witness table accessor for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError();
        swift_allocError();
        char v63 = 5;
        goto LABEL_86;
      }
    }
    uint64_t v93 = *(void *)(v111 + 16);
    goto LABEL_75;
  }
  __break(1u);
  return result;
}

uint64_t AddressableMember.idsDestination.getter()
{
  id v1 = (id)TUCopyIDSCanonicalAddressForHandle();
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;

    uint64_t v6 = (void *)MEMORY[0x1B3EA1B00](v3, v5);
    swift_bridgeObjectRelease();
    id v7 = objc_msgSend(self, sel_destinationWithStringURI_isLightWeight_, v6, 1);

    return (uint64_t)v7;
  }
  else
  {
    if (one-time initialization token for service != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Log.service);
    id v10 = v0;
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      uint64_t v19 = v14;
      *(_DWORD *)uint64_t v13 = 136315138;
      type metadata accessor for AddressableMember();
      id v15 = v10;
      uint64_t v16 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B0DF7000, v11, v12, "Failed to generate destination for %s", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v14, -1, -1);
      MEMORY[0x1B3EA39E0](v13, -1, -1);
    }
    else
    {
    }
    lazy protocol witness table accessor for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError();
    swift_allocError();
    *uint64_t v18 = 5;
    return swift_willThrow();
  }
}

uint64_t IDSGroupSessionProvider.iCloudAccountForService()()
{
  id v1 = &v0[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service];
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service + 24];
  uint64_t v3 = *(void *)&v0[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service + 32];
  __swift_project_boxed_opaque_existential_1(&v0[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service], v2);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(v2, v3);
  if (!result)
  {
    if (one-time initialization token for service != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Log.service);
    uint64_t v6 = v0;
    id v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v25 = v10;
      *(_DWORD *)uint64_t v9 = 136315394;
      uint64_t v12 = *((void *)v1 + 3);
      uint64_t v11 = *((void *)v1 + 4);
      __swift_project_boxed_opaque_existential_1(v1, v12);
      (*(void (**)(uint64_t, uint64_t))(v11 + 32))(v12, v11);
      uint64_t v24 = v10;
      if (v13)
      {
        uint64_t v14 = String.init<A>(reflecting:)();
        unint64_t v16 = v15;
      }
      else
      {
        unint64_t v16 = 0xE300000000000000;
        uint64_t v14 = 7104878;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v9 + 12) = 2080;
      uint64_t v18 = *((void *)v1 + 3);
      uint64_t v17 = *((void *)v1 + 4);
      __swift_project_boxed_opaque_existential_1(v1, v18);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v18, v17))
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<IDSAccount>);
        uint64_t v19 = String.init<A>(reflecting:)();
        unint64_t v21 = v20;
        uint64_t v22 = v24;
      }
      else
      {
        unint64_t v21 = 0xE300000000000000;
        uint64_t v22 = v24;
        uint64_t v19 = 7104878;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B0DF7000, v7, v8, "No iCloudAccount found while starting session on service: %s accounts: %s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v22, -1, -1);
      MEMORY[0x1B3EA39E0](v9, -1, -1);
    }
    else
    {
    }
    lazy protocol witness table accessor for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError();
    swift_allocError();
    unsigned char *v23 = 1;
    return swift_willThrow();
  }
  return result;
}

uint64_t IDSGroupSessionProvider.idsAccountForLocalMember()()
{
  unint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_localMember];
  if (!v2)
  {
    uint64_t v12 = IDSGroupSessionProvider.iCloudAccountForService()();
    if (!v1) {
      return v12;
    }
    return (uint64_t)v0;
  }
  unint64_t v3 = *(void *)&v0[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_localMember + 8];
  type metadata accessor for AddressableMember();
  unint64_t v92 = v2;
  uint64_t v99 = swift_dynamicCastClass();
  if (v99)
  {
    uint64_t v4 = *(void *)&v0[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service + 24];
    uint64_t v5 = *(void *)&v0[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service + 32];
    uint64_t v88 = v0;
    uint64_t v89 = &v0[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service];
    __swift_project_boxed_opaque_existential_1(&v0[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service], v4);
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    swift_unknownObjectRetain_n();
    uint64_t result = v6(v4, v5);
    if (result)
    {
      uint64_t v8 = result;
      if ((result & 0xC000000000000001) != 0)
      {
        __CocoaSet.makeIterator()();
        type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for IDSAccount);
        lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type IDSAccount and conformance NSObject, &lazy cache variable for type metadata for IDSAccount);
        Set.Iterator.init(_cocoa:)();
        uint64_t v8 = v104[5];
        uint64_t v91 = v104[6];
        uint64_t v9 = v104[7];
        uint64_t v10 = v104[8];
        unint64_t v11 = v104[9];
      }
      else
      {
        uint64_t v10 = 0;
        uint64_t v13 = -1 << *(unsigned char *)(result + 32);
        uint64_t v91 = result + 56;
        uint64_t v14 = ~v13;
        uint64_t v15 = -v13;
        if (v15 < 64) {
          uint64_t v16 = ~(-1 << v15);
        }
        else {
          uint64_t v16 = -1;
        }
        unint64_t v11 = v16 & *(void *)(result + 56);
        uint64_t v9 = v14;
      }
      int64_t v90 = (unint64_t)(v9 + 64) >> 6;
      unint64_t v17 = MEMORY[0x1E4FBC860];
      uint64_t v93 = v8;
      while (1)
      {
        if (v8 < 0)
        {
          uint64_t v20 = __CocoaSet.Iterator.next()();
          if (!v20) {
            goto LABEL_81;
          }
          *(void *)&long long v102 = v20;
          type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for IDSAccount);
          swift_unknownObjectRetain();
          swift_dynamicCast();
          swift_unknownObjectRelease();
          uint64_t v19 = v10;
          id v21 = (id)v104[0];
          uint64_t v95 = v11;
        }
        else
        {
          if (v11)
          {
            uint64_t v95 = (v11 - 1) & v11;
            unint64_t v18 = __clz(__rbit64(v11)) | (v10 << 6);
            uint64_t v19 = v10;
          }
          else
          {
            int64_t v22 = v10 + 1;
            if (__OFADD__(v10, 1)) {
              goto LABEL_97;
            }
            if (v22 >= v90) {
              goto LABEL_81;
            }
            unint64_t v23 = *(void *)(v91 + 8 * v22);
            uint64_t v19 = v10 + 1;
            if (!v23)
            {
              uint64_t v19 = v10 + 2;
              if (v10 + 2 >= v90) {
                goto LABEL_81;
              }
              unint64_t v23 = *(void *)(v91 + 8 * v19);
              if (!v23)
              {
                uint64_t v19 = v10 + 3;
                if (v10 + 3 >= v90) {
                  goto LABEL_81;
                }
                unint64_t v23 = *(void *)(v91 + 8 * v19);
                if (!v23)
                {
                  uint64_t v19 = v10 + 4;
                  if (v10 + 4 >= v90) {
                    goto LABEL_81;
                  }
                  unint64_t v23 = *(void *)(v91 + 8 * v19);
                  if (!v23)
                  {
                    uint64_t v24 = v10 + 5;
                    while (v90 != v24)
                    {
                      unint64_t v23 = *(void *)(v91 + 8 * v24++);
                      if (v23)
                      {
                        uint64_t v19 = v24 - 1;
                        goto LABEL_34;
                      }
                    }
LABEL_81:
                    outlined consume of [String : ()].Iterator._Variant();
                    if (one-time initialization token for service != -1) {
                      swift_once();
                    }
                    uint64_t v67 = type metadata accessor for Logger();
                    uint64_t v0 = (uint8_t *)__swift_project_value_buffer(v67, (uint64_t)static Log.service);
                    uint64_t v68 = v88;
                    swift_unknownObjectRetain_n();
                    BOOL v69 = v68;
                    uint64_t v70 = Logger.logObject.getter();
                    os_log_type_t v71 = static os_log_type_t.default.getter();
                    if (os_log_type_enabled(v70, v71))
                    {
                      uint64_t v72 = swift_slowAlloc();
                      uint64_t v73 = swift_slowAlloc();
                      uint64_t v105 = v73;
                      *(_DWORD *)uint64_t v72 = 136315650;
                      outlined init with copy of UserNotificationCenter((uint64_t)v89, (uint64_t)v104);
                      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v104, (uint64_t)&v102, (uint64_t *)&demangling cache variable for type metadata for IDSServiceProtocol?);
                      uint64_t v98 = v73;
                      if (v103)
                      {
                        outlined init with take of BackgroundSessionManagerDataSource(&v102, (uint64_t)v101);
                        outlined init with copy of UserNotificationCenter((uint64_t)v101, (uint64_t)v100);
                        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IDSServiceProtocol);
                        uint64_t v74 = String.init<A>(reflecting:)();
                        unint64_t v76 = v75;
                        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v101);
                      }
                      else
                      {
                        unint64_t v76 = 0xE300000000000000;
                        uint64_t v74 = 7104878;
                      }
                      outlined destroy of UUID?((uint64_t)v104, (uint64_t *)&demangling cache variable for type metadata for IDSServiceProtocol?);
                      v104[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v76, &v105);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();
                      swift_bridgeObjectRelease();

                      *(_WORD *)(v72 + 12) = 2080;
                      uint64_t v78 = *((void *)v89 + 3);
                      uint64_t v77 = *((void *)v89 + 4);
                      __swift_project_boxed_opaque_existential_1(v89, v78);
                      uint64_t v79 = (*(uint64_t (**)(uint64_t, uint64_t))(v77 + 8))(v78, v77);
                      if (v79)
                      {
                        v104[0] = v79;
                        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<IDSAccount>);
                        uint64_t v80 = String.init<A>(reflecting:)();
                        unint64_t v82 = v81;
                      }
                      else
                      {
                        unint64_t v82 = 0xE300000000000000;
                        uint64_t v80 = 7104878;
                      }
                      v104[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v82, &v105);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();
                      swift_bridgeObjectRelease();

                      *(_WORD *)(v72 + 22) = 2080;
                      v104[0] = *(void *)(v99 + OBJC_IVAR____TtC14CopresenceCore17AddressableMember_handle);
                      id v83 = (void *)v104[0];
                      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
                      id v84 = v83;
                      uint64_t v85 = String.init<A>(reflecting:)();
                      uint64_t v0 = (uint8_t *)v86;
                      v104[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v86, &v105);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();
                      swift_bridgeObjectRelease();
                      swift_unknownObjectRelease_n();
                      _os_log_impl(&dword_1B0DF7000, v70, v71, "No iCloudAccount found while starting IDS Service service %s accounts %s idsDestination: %s", (uint8_t *)v72, 0x20u);
                      swift_arrayDestroy();
                      MEMORY[0x1B3EA39E0](v98, -1, -1);
                      MEMORY[0x1B3EA39E0](v72, -1, -1);
                    }
                    else
                    {

                      swift_unknownObjectRelease_n();
                    }

                    lazy protocol witness table accessor for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError();
                    swift_allocError();
                    unsigned char *v87 = 1;
                    swift_willThrow();
                    swift_unknownObjectRelease();
LABEL_93:
                    swift_unknownObjectRelease();
                    return (uint64_t)v0;
                  }
                }
              }
            }
LABEL_34:
            uint64_t v95 = (v23 - 1) & v23;
            unint64_t v18 = __clz(__rbit64(v23)) + (v19 << 6);
          }
          id v21 = *(id *)(*(void *)(v8 + 48) + 8 * v18);
        }
        if (!v21) {
          goto LABEL_81;
        }
        uint64_t v94 = v19;
        uint64_t result = (uint64_t)objc_msgSend(v21, sel_aliasStrings);
        if (!result)
        {
          __break(1u);
LABEL_100:
          __break(1u);
          break;
        }
        uint64_t v25 = (void *)result;
        uint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        v104[0] = v17;
        uint64_t v27 = *(void *)(v26 + 16);
        if (v27)
        {
          unint64_t v3 = v2;
          id v28 = v21;
          uint64_t v29 = self;
          swift_bridgeObjectRetain();
          Swift::String v30 = (uint64_t *)(v26 + 40);
          do
          {
            uint64_t v32 = *(v30 - 1);
            uint64_t v31 = *v30;
            swift_bridgeObjectRetain();
            os_log_type_t v33 = (void *)MEMORY[0x1B3EA1B00](v32, v31);
            id v34 = objc_msgSend(v29, sel_normalizedHandleWithDestinationID_, v33);

            uint64_t v35 = swift_bridgeObjectRelease();
            if (v34)
            {
              MEMORY[0x1B3EA1CF0](v35);
              if (*(void *)((v104[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v104[0] & 0xFFFFFFFFFFFFFF8)
                                                                                    + 0x18) >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
            }
            v30 += 2;
            --v27;
          }
          while (v27);
          swift_bridgeObjectRelease();
          unint64_t v36 = v104[0];
          unint64_t v17 = MEMORY[0x1E4FBC860];
          id v21 = v28;
          unint64_t v2 = v3;
        }
        else
        {
          unint64_t v36 = v17;
        }
        swift_bridgeObjectRelease();
        uint64_t result = (uint64_t)objc_msgSend(v21, sel_pseudonyms);
        if (!result) {
          goto LABEL_100;
        }
        uint64_t v37 = (void *)result;
        unint64_t v97 = v36;
        type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for IDSPseudonym);
        unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        v104[0] = v17;
        if (v11 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
          uint64_t v96 = v21;
          if (!v38)
          {
LABEL_62:
            swift_bridgeObjectRelease();
            unint64_t v51 = v17;
            goto LABEL_63;
          }
        }
        else
        {
          uint64_t v38 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          uint64_t v96 = v21;
          if (!v38) {
            goto LABEL_62;
          }
        }
        uint64_t v39 = self;
        if (v38 < 1) {
          goto LABEL_96;
        }
        id v40 = (void *)v39;
        uint64_t v41 = 0;
        unint64_t v3 = v11 & 0xC000000000000001;
        do
        {
          if (v3) {
            id v42 = (id)MEMORY[0x1B3EA25C0](v41, v11);
          }
          else {
            id v42 = *(id *)(v11 + 8 * v41 + 32);
          }
          uint64_t v43 = v42;
          id v44 = objc_msgSend(v42, sel_URI);
          id v45 = objc_msgSend(v44, sel_prefixedURI);

          uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v48 = v47;

          unint64_t v49 = (void *)MEMORY[0x1B3EA1B00](v46, v48);
          swift_bridgeObjectRelease();
          id v50 = objc_msgSend(v40, sel_normalizedHandleWithDestinationID_, v49);

          if (v50)
          {
            MEMORY[0x1B3EA1CF0]();
            if (*(void *)((v104[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v104[0] & 0xFFFFFFFFFFFFFF8)
                                                                                  + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          ++v41;
        }
        while (v38 != v41);
        swift_bridgeObjectRelease();
        unint64_t v51 = v104[0];
        unint64_t v2 = v92;
LABEL_63:
        swift_bridgeObjectRelease();
        v104[0] = v97;
        specialized Array.append<A>(contentsOf:)(v51);
        unint64_t v11 = v97;
        if (v97 >> 62)
        {
          swift_bridgeObjectRetain_n();
          uint64_t v52 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v52)
          {
LABEL_65:
            uint64_t v53 = OBJC_IVAR____TtC14CopresenceCore17AddressableMember_handle;
            unint64_t v3 = 4;
            while (1)
            {
              id v54 = (v97 & 0xC000000000000001) != 0
                  ? (id)MEMORY[0x1B3EA25C0](v3 - 4, v97)
                  : *(id *)(v97 + 8 * v3);
              id v55 = v54;
              unint64_t v56 = v3 - 3;
              if (__OFADD__(v3 - 4, 1)) {
                break;
              }
              unsigned int v57 = objc_msgSend(v54, sel_isEquivalentToHandle_, *(void *)(v99 + v53));

              if (v57)
              {
                swift_bridgeObjectRelease_n();
                swift_unknownObjectRelease_n();
                outlined consume of [String : ()].Iterator._Variant();
                return (uint64_t)v96;
              }
              ++v3;
              if (v56 == v52) {
                goto LABEL_15;
              }
            }
            __break(1u);
LABEL_96:
            __break(1u);
LABEL_97:
            __break(1u);
            goto LABEL_98;
          }
        }
        else
        {
          uint64_t v52 = *(void *)((v104[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v52) {
            goto LABEL_65;
          }
        }
LABEL_15:

        swift_bridgeObjectRelease_n();
        uint64_t v10 = v94;
        unint64_t v11 = v95;
        uint64_t v8 = v93;
        unint64_t v17 = MEMORY[0x1E4FBC860];
      }
    }
    __break(1u);
  }
  else
  {
    type metadata accessor for AccountMember();
    if (!swift_dynamicCastClass())
    {
      unint64_t v11 = (unint64_t)v0;
      uint64_t v58 = one-time initialization token for service;
      swift_unknownObjectRetain();
      if (v58 != -1) {
LABEL_98:
      }
        swift_once();
      uint64_t v59 = type metadata accessor for Logger();
      uint64_t v0 = (uint8_t *)__swift_project_value_buffer(v59, (uint64_t)static Log.service);
      id v60 = (id)v11;
      unint64_t v61 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v61, v62))
      {
        uint64_t v0 = (uint8_t *)swift_slowAlloc();
        uint64_t v63 = swift_slowAlloc();
        *(void *)&long long v102 = v63;
        *(_DWORD *)uint64_t v0 = 136315138;
        v104[0] = v2;
        v104[1] = v3;
        swift_unknownObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Member);
        uint64_t v64 = String.init<A>(reflecting:)();
        v104[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, (uint64_t *)&v102);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1B0DF7000, v61, v62, "Unknown type for localMember: %s", v0, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v63, -1, -1);
        MEMORY[0x1B3EA39E0](v0, -1, -1);
      }
      else
      {
      }
      lazy protocol witness table accessor for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError();
      swift_allocError();
      unsigned char *v66 = 5;
      swift_willThrow();
      goto LABEL_93;
    }
    swift_unknownObjectRetain();
    uint64_t v0 = (uint8_t *)IDSGroupSessionProvider.iCloudAccountForService()();
    swift_unknownObjectRelease();
    return (uint64_t)v0;
  }
  return result;
}

void IDSGroupSessionProvider.registerQRPlugin()()
{
  uint64_t v1 = v0;
  unint64_t v2 = (void *)MEMORY[0x1E4FBC8C8];
  unint64_t v3 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x140))();

  if (v3)
  {
    if (one-time initialization token for service != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.service);
    oslog = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_1B0DF7000, oslog, v5, "IDSGroupSessionProvider. We already have a virtual participant identifier. Not re-registering QR plugin", v6, 2u);
      MEMORY[0x1B3EA39E0](v6, -1, -1);
    }
  }
  else
  {
    if (one-time initialization token for service != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.service);
    uint64_t v8 = v1;
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      unint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v29 = v12;
      *(_DWORD *)unint64_t v11 = 136315138;
      uint64_t v13 = (void *)(*(uint64_t (**)(void))((*v2 & *v8) + 0xF0))();
      if (v13)
      {
        uint64_t v14 = v13;
        id v15 = objc_msgSend(v13, sel_sessionID);

        uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v18 = v17;

        uint64_t v30 = v16;
        uint64_t v31 = v18;
        uint64_t v19 = String.init<A>(reflecting:)();
        unint64_t v21 = v20;
      }
      else
      {
        unint64_t v21 = 0xE300000000000000;
        uint64_t v19 = 7104878;
      }
      uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v9, v10, "Registering QR plugin on %s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v12, -1, -1);
      MEMORY[0x1B3EA39E0](v11, -1, -1);
    }
    else
    {
    }
    uint64_t v22 = (*(uint64_t (**)(void))((*v2 & *v8) + 0xF0))();
    if (v22)
    {
      unint64_t v23 = (void *)v22;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1B1138A80;
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v31 = v25;
      uint64_t v26 = MEMORY[0x1E4FBB1A0];
      AnyHashable.init<A>(_:)();
      *(void *)(inited + 96) = v26;
      *(void *)(inited + 72) = 0x627553627550;
      *(void *)(inited + 80) = 0xE600000000000000;
      specialized Dictionary.init(dictionaryLiteral:)(inited);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v23, sel_registerPluginWithOptions_, isa);
    }
  }
}

uint64_t IDSGroupSessionProvider.requestParticipant(for:)(uint64_t a1)
{
  v2[28] = a1;
  v2[29] = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v2[30] = swift_task_alloc();
  return MEMORY[0x1F4188298](IDSGroupSessionProvider.requestParticipant(for:), 0, 0);
}

uint64_t IDSGroupSessionProvider.requestParticipant(for:)()
{
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 248) = __swift_project_value_buffer(v1, (uint64_t)static Log.service);
  unint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void *)(v0 + 224);
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v5 = 134217984;
    *(void *)(v0 + 216) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B0DF7000, v2, v3, "[Translation] Requested translated participant for id %llu", v5, 0xCu);
    MEMORY[0x1B3EA39E0](v5, -1, -1);
  }

  uint64_t v6 = *(void **)(v0 + 232);
  uint64_t v7 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v6) + 0xF0))();
  *(void *)(v0 + 256) = v7;
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1B1138AA0;
    *(NSNumber *)(v9 + 32) = UInt64._bridgeToObjectiveC()();
    specialized Array._endMutation()();
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    *(void *)(v0 + 264) = isa;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 56) = v0 + 208;
    *(void *)(v0 + 24) = IDSGroupSessionProvider.requestParticipant(for:);
    uint64_t v11 = swift_continuation_init();
    *(void *)(v0 + 80) = MEMORY[0x1E4F143A8];
    *(void *)(v0 + 88) = 0x40000000;
    *(void *)(v0 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSDictionary?, @unowned NSError?) -> () with result type [NSNumber : String];
    *(void *)(v0 + 104) = &block_descriptor_1;
    *(void *)(v0 + 112) = v11;
    objc_msgSend(v8, sel_requestURIsForParticipantIDs_completionHandler_, isa, v0 + 80);
    return MEMORY[0x1F41881E8](v0 + 16);
  }
  else
  {
    id v12 = *(id *)(v0 + 232);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.fault.getter();
    BOOL v15 = os_log_type_enabled(v13, v14);
    uint64_t v16 = *(void **)(v0 + 232);
    if (v15)
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 138412290;
      *(void *)(v0 + 200) = v16;
      id v19 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v18 = v6;

      _os_log_impl(&dword_1B0DF7000, v13, v14, "No current GroupSession found on %@", v17, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v18, -1, -1);
      MEMORY[0x1B3EA39E0](v17, -1, -1);
    }
    else
    {
    }
    lazy protocol witness table accessor for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError();
    swift_allocError();
    unsigned char *v20 = 3;
    swift_willThrow();
    swift_task_dealloc();
    unint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
    return v21();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 272) = v1;
  if (v1) {
    unint64_t v2 = IDSGroupSessionProvider.requestParticipant(for:);
  }
  else {
    unint64_t v2 = IDSGroupSessionProvider.requestParticipant(for:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = (void *)v0[33];
  unint64_t v2 = (void *)v0[32];
  swift_willThrow();

  swift_task_dealloc();
  os_log_type_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

void IDSGroupSessionProvider.requestParticipant(for:)()
{
  uint64_t v1 = *(void *)(v0 + 208);

  v2.super.super.Class isa = UInt64._bridgeToObjectiveC()().super.super.isa;
  Class isa = v2.super.super.isa;
  if (!*(void *)(v1 + 16)
    || (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v2.super.super.isa), (v5 & 1) == 0))
  {

    swift_bridgeObjectRelease();
    BOOL v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_1B0DF7000, v15, v16, "[Translation] Checking against stored list of participants for participant incase it is present", v17, 2u);
      MEMORY[0x1B3EA39E0](v17, -1, -1);
    }
    uint64_t v18 = *(void **)(v0 + 232);

    id v19 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v20 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v18) + 0x148))();
    int64_t v21 = 0;
    uint64_t v22 = v20 + 56;
    uint64_t v23 = -1;
    uint64_t v24 = -1 << *(unsigned char *)(v20 + 32);
    if (-v24 < 64) {
      uint64_t v23 = ~(-1 << -(char)v24);
    }
    unint64_t v25 = v23 & *(void *)(v20 + 56);
    int64_t v26 = (unint64_t)(63 - v24) >> 6;
    while (1)
    {
      if (v25)
      {
        unint64_t v27 = __clz(__rbit64(v25));
        v25 &= v25 - 1;
        unint64_t v28 = v27 | (v21 << 6);
      }
      else
      {
        int64_t v30 = v21 + 1;
        if (__OFADD__(v21, 1))
        {
          __break(1u);
LABEL_39:
          __break(1u);
          goto LABEL_40;
        }
        if (v30 >= v26) {
          goto LABEL_35;
        }
        unint64_t v31 = *(void *)(v22 + 8 * v30);
        ++v21;
        if (!v31)
        {
          int64_t v21 = v30 + 1;
          if (v30 + 1 >= v26) {
            goto LABEL_35;
          }
          unint64_t v31 = *(void *)(v22 + 8 * v21);
          if (!v31)
          {
            int64_t v21 = v30 + 2;
            if (v30 + 2 >= v26) {
              goto LABEL_35;
            }
            unint64_t v31 = *(void *)(v22 + 8 * v21);
            if (!v31)
            {
              int64_t v21 = v30 + 3;
              if (v30 + 3 >= v26) {
                goto LABEL_35;
              }
              unint64_t v31 = *(void *)(v22 + 8 * v21);
              if (!v31)
              {
                int64_t v21 = v30 + 4;
                if (v30 + 4 >= v26) {
                  goto LABEL_35;
                }
                unint64_t v31 = *(void *)(v22 + 8 * v21);
                if (!v31)
                {
                  int64_t v32 = v30 + 5;
                  if (v32 >= v26)
                  {
LABEL_35:
                    id v42 = *(void **)(v0 + 256);
                    swift_release();
                    lazy protocol witness table accessor for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError();
                    swift_allocError();
                    unsigned char *v43 = 7;
                    swift_willThrow();

                    swift_task_dealloc();
                    id v44 = *(void (**)(void))(v0 + 8);
                    v44();
                    return;
                  }
                  unint64_t v31 = *(void *)(v22 + 8 * v32);
                  if (!v31)
                  {
                    while (1)
                    {
                      int64_t v21 = v32 + 1;
                      if (__OFADD__(v32, 1)) {
                        goto LABEL_39;
                      }
                      if (v21 >= v26) {
                        goto LABEL_35;
                      }
                      unint64_t v31 = *(void *)(v22 + 8 * v21);
                      ++v32;
                      if (v31) {
                        goto LABEL_30;
                      }
                    }
                  }
                  int64_t v21 = v32;
                }
              }
            }
          }
        }
LABEL_30:
        unint64_t v25 = (v31 - 1) & v31;
        unint64_t v28 = __clz(__rbit64(v31)) + (v21 << 6);
      }
      uint64_t v29 = *(void *)(v20 + 48);
      if (*(void *)(v29 + 24 * v28) == *(void *)(v0 + 224))
      {
        os_log_type_t v33 = *(void **)(v0 + 256);
        id v34 = *(void **)(v0 + 232);
        uint64_t v35 = *(void *)(v0 + 240);
        uint64_t v36 = v29 + 24 * v28;
        uint64_t v12 = *(void *)(v36 + 8);
        uint64_t v14 = *(void *)(v36 + 16);
        swift_bridgeObjectRetain();
        swift_release();
        static TaskPriority.background.getter();
        uint64_t v37 = type metadata accessor for TaskPriority();
        uint64_t v38 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v35, 0, 1, v37);
        (*(void (**)(uint64_t))((*v19 & *v34) + 0x178))(v38);
        outlined init with take of BackgroundSessionManagerDataSource((long long *)(v0 + 160), v0 + 120);
        uint64_t v39 = swift_allocObject();
        *(void *)(v39 + 16) = 0;
        *(void *)(v39 + 24) = 0;
        outlined init with take of BackgroundSessionManagerDataSource((long long *)(v0 + 120), v39 + 32);
        _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v35, (uint64_t)&async function pointer to partial apply for closure #2 in IDSGroupSessionProvider.requestParticipant(for:), v39);
        swift_release();

        goto LABEL_32;
      }
    }
  }
  uint64_t v6 = (uint64_t *)(*(void *)(v1 + 56) + 16 * v4);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  swift_bridgeObjectRetain();

  swift_bridgeObjectRelease();
  uint64_t v9 = (void *)MEMORY[0x1B3EA1B00](v7, v8);
  swift_bridgeObjectRelease();
  id v10 = objc_msgSend(v9, sel__stripFZIDPrefix);

  if (v10)
  {
    uint64_t v11 = *(void **)(v0 + 256);
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;

LABEL_32:
    swift_task_dealloc();
    id v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 8);
    uint64_t v41 = *(void *)(v0 + 224);
    v40(v41, v12, v14);
  }
  else
  {
LABEL_40:
    __break(1u);
  }
}

uint64_t closure #2 in IDSGroupSessionProvider.requestParticipant(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return MEMORY[0x1F4188298](closure #2 in IDSGroupSessionProvider.requestParticipant(for:), 0, 0);
}

uint64_t closure #2 in IDSGroupSessionProvider.requestParticipant(for:)()
{
  uint64_t v1 = (void *)v0[2];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  id v4 = objc_msgSend(self, sel_mainBundle);
  id v5 = objc_msgSend(v4, sel_bundleIdentifier);

  if (v5)
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0xD00000000000001DLL;
    unint64_t v8 = 0x80000001B115CEE0;
  }
  uint64_t v9 = (*(uint64_t (**)(unint64_t, unint64_t, unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v3 + 16))(0xD000000000000016, 0x80000001B1160E60, 0xD000000000000047, 0x80000001B1160F80, v6, v8, v2, v3);
  v0[3] = v9;
  swift_bridgeObjectRelease();
  if (v9)
  {
    uint64_t v11 = v1[3];
    uint64_t v10 = v1[4];
    __swift_project_boxed_opaque_existential_1((void *)v0[2], v11);
    uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)(v10 + 24) + **(int **)(v10 + 24));
    uint64_t v12 = (void *)swift_task_alloc();
    v0[4] = v12;
    *uint64_t v12 = v0;
    v12[1] = closure #2 in IDSGroupSessionProvider.requestParticipant(for:);
    v13.n128_u64[0] = 0;
    return v20(v9, v11, v10, v13);
  }
  else
  {
    if (one-time initialization token for abcReporter != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Log.abcReporter);
    os_log_type_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl(&dword_1B0DF7000, v16, v17, "[Translation] Failed to generate signature for Participant translation", v18, 2u);
      MEMORY[0x1B3EA39E0](v18, -1, -1);
    }

    id v19 = (uint64_t (*)(void))v0[1];
    return v19();
  }
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

id IDSGroupSessionProvider.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void IDSGroupSessionProvider.init()()
{
}

uint64_t protocol witness for IDSGroupSessionProviderProtocol.delegate.getter in conformance IDSGroupSessionProvider()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0xC0))();
}

uint64_t protocol witness for IDSGroupSessionProviderProtocol.delegate.setter in conformance IDSGroupSessionProvider()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0xC8))();
}

void (*protocol witness for IDSGroupSessionProviderProtocol.delegate.modify in conformance IDSGroupSessionProvider(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v1) + 0xD0))();
  return protocol witness for PresenceDataSource.members.modify in conformance SKPresenceDataSource<A>;
}

uint64_t protocol witness for IDSGroupSessionProviderProtocol.participantIdentifier.getter in conformance IDSGroupSessionProvider()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0x108))();
}

uint64_t protocol witness for IDSGroupSessionProviderProtocol.virtualParticipant.getter in conformance IDSGroupSessionProvider()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0x140))();
}

uint64_t protocol witness for IDSGroupSessionProviderProtocol.groupID.getter in conformance IDSGroupSessionProvider()
{
  uint64_t v1 = *(void *)(*v0 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_groupID);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for IDSGroupSessionProviderProtocol.init(groupID:members:localMember:service:targetQueue:abcReporter:) in conformance IDSGroupSessionProvider@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 448))();
  *a1 = result;
  return result;
}

uint64_t protocol witness for IDSGroupSessionProviderProtocol.start() in conformance IDSGroupSessionProvider()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0x1D0))();
}

uint64_t protocol witness for IDSGroupSessionProviderProtocol.leave() in conformance IDSGroupSessionProvider()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0x1D8))();
}

uint64_t protocol witness for IDSGroupSessionProviderProtocol.updateMembers(_:) in conformance IDSGroupSessionProvider()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0x1F0))();
}

uint64_t protocol witness for IDSGroupSessionProviderProtocol.requestDataCryptor(forTopic:completion:) in conformance IDSGroupSessionProvider()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0x1F8))();
}

uint64_t protocol witness for IDSGroupSessionProviderProtocol.requestEncryptionKeysForParticipants(_:) in conformance IDSGroupSessionProvider()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0x200))();
}

uint64_t protocol witness for IDSGroupSessionProviderProtocol.requestParticipant(for:) in conformance IDSGroupSessionProvider(uint64_t a1)
{
  id v4 = *(int **)((*MEMORY[0x1E4FBC8C8] & **v1) + 0x238);
  unint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  id v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *id v5 = v2;
  v5[1] = protocol witness for IDSGroupSessionProviderProtocol.requestParticipant(for:) in conformance IDSGroupSessionProvider;
  return v7(a1);
}

uint64_t protocol witness for IDSGroupSessionProviderProtocol.requestParticipant(for:) in conformance IDSGroupSessionProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = *v4;
  uint64_t v8 = swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 8);
  if (!v3)
  {
    uint64_t v8 = a1;
    uint64_t v9 = a2;
    uint64_t v10 = a3;
  }
  return v11(v8, v9, v10);
}

void IDSGroupSessionProvider.sessionDidJoinGroup(_:participantUpdate:error:)(void *a1, void *a2, void *a3)
{
  id v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v58 = &v53[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = &v53[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = *(void **)&v4[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_queue];
  *uint64_t v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E4FBCBF0], v10);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if (v14)
  {
    if (one-time initialization token for service == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Log.service);
  id v17 = a1;
  id v18 = a2;
  id v19 = a3;
  id v20 = v17;
  id v21 = v18;
  id v22 = a3;
  uint64_t v23 = Logger.logObject.getter();
  int v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, (os_log_type_t)v24))
  {
    int v54 = v24;
    id v55 = v4;
    uint64_t v25 = swift_slowAlloc();
    int64_t v26 = v21;
    unint64_t v27 = (void *)swift_slowAlloc();
    uint64_t v57 = swift_slowAlloc();
    v60[0] = v57;
    *(_DWORD *)uint64_t v25 = 138412802;
    *(void *)&v59[0] = v20;
    id v28 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    unint64_t v56 = v27;
    *unint64_t v27 = v20;
    id v21 = v26;

    *(_WORD *)(v25 + 12) = 2080;
    *(void *)&v59[0] = v26;
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for IDSGroupSessionParticipantUpdate);
    id v29 = v26;
    uint64_t v30 = String.init<A>(reflecting:)();
    *(void *)&v59[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 22) = 2080;
    if (a3)
    {
      *(void *)&v59[0] = a3;
      id v32 = a3;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v33 = String.init<A>(reflecting:)();
      unint64_t v35 = v34;
    }
    else
    {
      unint64_t v35 = 0xE300000000000000;
      uint64_t v33 = 7104878;
    }
    id v4 = v55;
    os_log_type_t v36 = v54;
    *(void *)&v59[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v35, v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v23, v36, "IDSGroupSessionProvider: sessionDidJoinGroup %@ participantUpdate %s error %s", (uint8_t *)v25, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v37 = v56;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v37, -1, -1);
    uint64_t v38 = v57;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v38, -1, -1);
    MEMORY[0x1B3EA39E0](v25, -1, -1);
  }
  else
  {
  }
  if (_TUIsInternalInstall())
  {
    id v39 = objc_msgSend(v21, sel_participantDestinationURI);
    id v40 = objc_msgSend(v39, sel_tokenFreeURI);

    id v41 = objc_msgSend(v40, sel_unprefixedURI);
    uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v44 = v43;

    uint64_t v45 = type metadata accessor for TaskPriority();
    uint64_t v46 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56);
    uint64_t v47 = (uint64_t)v58;
    v46(v58, 1, 1, v45);
    uint64_t v48 = (void *)swift_allocObject();
    v48[2] = 0;
    v48[3] = 0;
    v48[4] = v4;
    v48[5] = v21;
    v48[6] = v42;
    v48[7] = v44;
    id v49 = v21;
    id v50 = v4;
    uint64_t v51 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v47, (uint64_t)&async function pointer to partial apply for closure #1 in IDSGroupSessionProvider.sessionDidJoinGroup(_:participantUpdate:error:), (uint64_t)v48);
    (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *(void *)v50) + 0x178))(v60);
    v46((unsigned char *)v47, 1, 1, v45);
    outlined init with copy of UserNotificationCenter((uint64_t)v60, (uint64_t)v59);
    uint64_t v52 = (void *)swift_allocObject();
    v52[2] = 0;
    v52[3] = 0;
    v52[4] = v51;
    v52[5] = 0xD00000000000002FLL;
    v52[7] = 0;
    v52[8] = 0;
    v52[6] = 0x80000001B1160CD0;
    outlined init with take of BackgroundSessionManagerDataSource(v59, (uint64_t)(v52 + 9));
    swift_retain();
    _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v47, (uint64_t)&async function pointer to partial apply for specialized closure #1 in Task<>.reportFailure(on:function:process:), (uint64_t)v52);
    swift_release();
    outlined destroy of UUID?(v47, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v60);
  }
  IDSGroupSessionProvider.registerQRPlugin()();
}

uint64_t closure #1 in IDSGroupSessionProvider.sessionDidJoinGroup(_:participantUpdate:error:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[6] = a6;
  v7[7] = a7;
  v7[4] = a4;
  v7[5] = a5;
  return MEMORY[0x1F4188298](closure #1 in IDSGroupSessionProvider.sessionDidJoinGroup(_:participantUpdate:error:), 0, 0);
}

uint64_t closure #1 in IDSGroupSessionProvider.sessionDidJoinGroup(_:participantUpdate:error:)()
{
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[8] = __swift_project_value_buffer(v1, (uint64_t)static Log.service);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    id v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v4 = 0;
    _os_log_impl(&dword_1B0DF7000, v2, v3, "[ParticipantID Verification] Verifying that the participantDestinationURI matches the QRParticipantID we joined with", v4, 2u);
    MEMORY[0x1B3EA39E0](v4, -1, -1);
  }
  uint64_t v6 = (void *)v0[4];
  id v5 = (void *)v0[5];

  id v7 = objc_msgSend(v5, sel_participantIdentifier);
  uint64_t v8 = *(int **)((*MEMORY[0x1E4FBC8C8] & *v6) + 0x238);
  uint64_t v11 = (uint64_t (*)(id))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc();
  v0[9] = v9;
  *uint64_t v9 = v0;
  v9[1] = closure #1 in IDSGroupSessionProvider.sessionDidJoinGroup(_:participantUpdate:error:);
  return v11(v7);
}

{
  void *v0;
  BOOL v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t (*v5)(void);
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned char *v14;
  uint64_t v16;
  uint64_t v17[2];
  void *v18;
  uint64_t v19;

  id v18 = v0;
  uint64_t v1 = v0[10] == v0[6] && v0[11] == v0[7];
  if (v1 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      id v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v4 = 0;
      _os_log_impl(&dword_1B0DF7000, v2, v3, "[ParticipantID Verification] Successfully matched.", v4, 2u);
      MEMORY[0x1B3EA39E0](v4, -1, -1);
    }

    id v5 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v6 = Logger.logObject.getter();
    id v7 = static os_log_type_t.fault.getter();
    uint64_t v8 = os_log_type_enabled(v6, v7);
    uint64_t v9 = v0[11];
    if (v8)
    {
      uint64_t v10 = v0[10];
      uint64_t v11 = v0[7];
      uint64_t v16 = v0[6];
      uint64_t v12 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      v17[0] = v13;
      *(_DWORD *)uint64_t v12 = 136315394;
      swift_bridgeObjectRetain();
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v9, v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v12 + 12) = 2080;
      swift_bridgeObjectRetain();
      v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v11, v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B0DF7000, v6, v7, "[ParticipantID Verification] Detected invalid participantID mismatch on local join. Joined with QRParticipantID for %s when trying to join with handle: %s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v13, -1, -1);
      MEMORY[0x1B3EA39E0](v12, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    lazy protocol witness table accessor for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError();
    swift_allocError();
    *uint64_t v14 = 8;
    swift_willThrow();
    id v5 = (uint64_t (*)(void))v0[1];
  }
  return v5();
}

uint64_t closure #1 in IDSGroupSessionProvider.sessionDidJoinGroup(_:participantUpdate:error:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = (void *)*v4;
  v5[10] = a2;
  v5[11] = a3;
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v6 = (uint64_t (*)(void))v5[1];
    return v6();
  }
  else
  {
    return MEMORY[0x1F4188298](closure #1 in IDSGroupSessionProvider.sessionDidJoinGroup(_:participantUpdate:error:), 0, 0);
  }
}

void IDSGroupSessionProvider.session(_:participantDidJoinGroupWithInfo:)(uint64_t a1, uint64_t a2)
{
}

void IDSGroupSessionProvider.session(_:participantDidLeaveGroupWithInfo:)(uint64_t a1, uint64_t a2)
{
}

uint64_t @objc IDSGroupSessionProvider.session(_:participantDidJoinGroupWithInfo:)(void *a1, uint64_t a2, void *a3, uint64_t a4, const char *a5)
{
  uint64_t v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a3;
  id v10 = a1;
  specialized IDSGroupSessionProvider.session(_:participantDidJoinGroupWithInfo:)(v8, a5);

  return swift_bridgeObjectRelease();
}

void IDSGroupSessionProvider.groupSessionDidTerminate(_:)(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (uint64_t *)((char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v7 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_queue);
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4FBCBF0], v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v7)
  {
    if (one-time initialization token for service == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.service);
  id v10 = a1;
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    uint64_t v18 = (uint64_t)v10;
    uint64_t v19 = v14;
    *(_DWORD *)uint64_t v13 = 136315138;
    type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for IDSGroupSession);
    id v15 = v10;
    uint64_t v16 = String.init<A>(reflecting:)();
    uint64_t v18 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v11, v12, "IDSGroupSessionProvider: groupSessionDidTerminate %s", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v14, -1, -1);
    MEMORY[0x1B3EA39E0](v13, -1, -1);
  }
  else
  {
  }
}

void IDSGroupSessionProvider.groupSessionEnded(_:with:error:)(void *a1, int a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (uint64_t *)((char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  os_log_type_t v12 = *(void **)((char *)v4 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_queue);
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E4FBCBF0], v8);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if (v12)
  {
    if (one-time initialization token for service == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Log.service);
  id v15 = a1;
  id v16 = a3;
  id v17 = v15;
  id v18 = a3;
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    uint64_t v36 = (uint64_t)v17;
    uint64_t v37 = v35;
    *(_DWORD *)uint64_t v21 = 136315650;
    type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for IDSGroupSession);
    id v22 = v17;
    uint64_t v23 = String.init<A>(reflecting:)();
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 12) = 2080;
    LODWORD(v36) = a2;
    type metadata accessor for IDSSessionEndedReason(0);
    uint64_t v25 = String.init<A>(reflecting:)();
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 22) = 2080;
    if (a3)
    {
      uint64_t v36 = (uint64_t)a3;
      id v27 = a3;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v28 = String.init<A>(reflecting:)();
      unint64_t v30 = v29;
    }
    else
    {
      unint64_t v30 = 0xE300000000000000;
      uint64_t v28 = 7104878;
    }
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v30, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v19, v20, "IDSGroupSessionProvider: groupSessionEnded %s reason: %s error %s", (uint8_t *)v21, 0x20u);
    uint64_t v31 = v35;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v31, -1, -1);
    MEMORY[0x1B3EA39E0](v21, -1, -1);
  }
  else
  {
  }
  id v32 = *(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x1B0);
  if (a3)
  {
    id v33 = a3;
    v32(3);
  }
  else
  {
    v32(2);
  }
}

void IDSGroupSessionProvider.session(_:didRegisterPluginAllocationInfo:)(uint64_t a1, uint64_t a2)
{
}

uint64_t closure #1 in IDSGroupSessionProvider.session(_:didRegisterPluginAllocationInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return MEMORY[0x1F4188298](closure #1 in IDSGroupSessionProvider.session(_:didRegisterPluginAllocationInfo:), 0, 0);
}

uint64_t closure #1 in IDSGroupSessionProvider.session(_:didRegisterPluginAllocationInfo:)()
{
  uint64_t v1 = (void *)v0[2];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  id v4 = objc_msgSend(self, sel_mainBundle);
  id v5 = objc_msgSend(v4, sel_bundleIdentifier);

  if (v5)
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v8 = v7;
  }
  else
  {
    unint64_t v8 = 0x80000001B115CEE0;
    uint64_t v6 = 0xD00000000000001DLL;
  }
  uint64_t v9 = (*(uint64_t (**)(unint64_t, unint64_t, unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v3 + 16))(0xD000000000000014, 0x80000001B1160ED0, 0xD00000000000001DLL, 0x80000001B1160EF0, v6, v8, v2, v3);
  v0[3] = v9;
  swift_bridgeObjectRelease();
  if (v9)
  {
    uint64_t v11 = v1[3];
    uint64_t v10 = v1[4];
    __swift_project_boxed_opaque_existential_1((void *)v0[2], v11);
    os_log_type_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)(v10 + 24) + **(int **)(v10 + 24));
    os_log_type_t v12 = (void *)swift_task_alloc();
    v0[4] = v12;
    *os_log_type_t v12 = v0;
    v12[1] = closure #1 in IDSGroupSessionProvider.session(_:didRegisterPluginAllocationInfo:);
    v13.n128_u64[0] = 0;
    return v20(v9, v11, v10, v13);
  }
  else
  {
    if (one-time initialization token for abcReporter != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Log.abcReporter);
    id v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      id v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v18 = 0;
      _os_log_impl(&dword_1B0DF7000, v16, v17, "Failed to generate signature for VirtualParticipantID", v18, 2u);
      MEMORY[0x1B3EA39E0](v18, -1, -1);
    }

    uint64_t v19 = (uint64_t (*)(void))v0[1];
    return v19();
  }
}

uint64_t closure #2 in IDSGroupSessionProvider.session(_:didRegisterPluginAllocationInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return MEMORY[0x1F4188298](closure #2 in IDSGroupSessionProvider.session(_:didRegisterPluginAllocationInfo:), 0, 0);
}

uint64_t closure #2 in IDSGroupSessionProvider.session(_:didRegisterPluginAllocationInfo:)()
{
  uint64_t v1 = (void *)v0[2];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  id v4 = objc_msgSend(self, sel_mainBundle);
  id v5 = objc_msgSend(v4, sel_bundleIdentifier);

  if (v5)
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0xD00000000000001DLL;
    unint64_t v8 = 0x80000001B115CEE0;
  }
  uint64_t v9 = (*(uint64_t (**)(unint64_t, unint64_t, unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v3 + 16))(0xD000000000000012, 0x80000001B1160F40, 0xD00000000000001BLL, 0x80000001B1160F60, v6, v8, v2, v3);
  v0[3] = v9;
  swift_bridgeObjectRelease();
  if (v9)
  {
    uint64_t v11 = v1[3];
    uint64_t v10 = v1[4];
    __swift_project_boxed_opaque_existential_1((void *)v0[2], v11);
    os_log_type_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)(v10 + 24) + **(int **)(v10 + 24));
    os_log_type_t v12 = (void *)swift_task_alloc();
    v0[4] = v12;
    *os_log_type_t v12 = v0;
    v12[1] = closure #1 in IDSGroupSessionProvider.session(_:didRegisterPluginAllocationInfo:);
    v13.n128_u64[0] = 0;
    return v20(v9, v11, v10, v13);
  }
  else
  {
    if (one-time initialization token for abcReporter != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Log.abcReporter);
    id v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      id v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v18 = 0;
      _os_log_impl(&dword_1B0DF7000, v16, v17, "Failed to generate signature for LocalParticipantID", v18, 2u);
      MEMORY[0x1B3EA39E0](v18, -1, -1);
    }

    uint64_t v19 = (uint64_t (*)(void))v0[1];
    return v19();
  }
}

uint64_t @objc IDSGroupSessionProvider.session(_:didUnregisterPluginAllocationInfo:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a3;
  id v10 = a1;
  a5(v8);

  return swift_bridgeObjectRelease();
}

uint64_t IDSGroupSessionProvider.sessionDidLeaveGroup(_:error:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  id v9 = (uint64_t *)((char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v10 = *(void **)((char *)v3 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_queue);
  *id v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E4FBCBF0], v6);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if (v10)
  {
    if (one-time initialization token for service == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.service);
  id v13 = a1;
  id v14 = a2;
  id v15 = v13;
  id v16 = a2;
  os_log_type_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v29 = (uint64_t)v15;
    uint64_t v30 = v20;
    *(_DWORD *)uint64_t v19 = 136315394;
    type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for IDSGroupSession);
    id v21 = v15;
    uint64_t v22 = String.init<A>(reflecting:)();
    uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2080;
    if (a2)
    {
      uint64_t v29 = (uint64_t)a2;
      id v24 = a2;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v25 = String.init<A>(reflecting:)();
      unint64_t v27 = v26;
    }
    else
    {
      unint64_t v27 = 0xE300000000000000;
      uint64_t v25 = 7104878;
    }
    uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v17, v18, "IDSGroupSessionProvider: sessionDidLeaveGroup %s, error: %s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v20, -1, -1);
    MEMORY[0x1B3EA39E0](v19, -1, -1);
  }
  else
  {
  }
  return (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x1B0))(2);
}

void IDSGroupSessionProvider.session(_:didUnregisterPluginAllocationInfo:)(uint64_t a1, uint64_t a2)
{
}

uint64_t IDSGroupSessionProvider.session(_:rejectedKeyRecoveryRequestFrom:reason:)(uint64_t a1, void *a2, uint64_t a3)
{
  return specialized IDSGroupSessionProvider.session(_:rejectedKeyRecoveryRequestFrom:reason:)(a2, a3);
}

uint64_t closure #1 in IDSGroupSessionProvider.session(_:rejectedKeyRecoveryRequestFrom:reason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(_DWORD *)(v5 + 60) = a5;
  *(void *)(v5 + 32) = a4;
  return MEMORY[0x1F4188298](closure #1 in IDSGroupSessionProvider.session(_:rejectedKeyRecoveryRequestFrom:reason:), 0, 0);
}

uint64_t closure #1 in IDSGroupSessionProvider.session(_:rejectedKeyRecoveryRequestFrom:reason:)()
{
  uint64_t v1 = 0xD00000000000001DLL;
  int v2 = *(_DWORD *)(v0 + 60);
  uint64_t v3 = *(void **)(v0 + 32);
  uint64_t v4 = v3[3];
  uint64_t v5 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  _StringGuts.grow(_:)(44);
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0xE000000000000000;
  v6._countAndFlagsBits = 0xD00000000000002ALL;
  v6._object = (void *)0x80000001B1160EA0;
  String.append(_:)(v6);
  *(_DWORD *)(v0 + 56) = v2;
  type metadata accessor for IDSGroupSessionEncryptionControllerRejectionReason(0);
  _print_unlocked<A, B>(_:_:)();
  uint64_t v7 = *(void *)(v0 + 16);
  uint64_t v8 = *(void *)(v0 + 24);
  id v9 = objc_msgSend(self, sel_mainBundle);
  id v10 = objc_msgSend(v9, sel_bundleIdentifier);

  if (v10)
  {
    uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v12 = v11;
  }
  else
  {
    unint64_t v12 = 0x80000001B115CEE0;
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v5 + 16))(0x766F63655279654BLL, 0xEB00000000797265, v7, v8, v1, v12, v4, v5);
  *(void *)(v0 + 40) = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v13)
  {
    uint64_t v15 = v3[3];
    uint64_t v14 = v3[4];
    __swift_project_boxed_opaque_existential_1(*(void **)(v0 + 32), v15);
    id v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)(v14 + 24) + **(int **)(v14 + 24));
    id v16 = (void *)swift_task_alloc();
    *(void *)(v0 + 48) = v16;
    *id v16 = v0;
    v16[1] = closure #1 in IDSGroupSessionProvider.session(_:rejectedKeyRecoveryRequestFrom:reason:);
    v17.n128_u64[0] = 0;
    return v24(v13, v15, v14, v17);
  }
  else
  {
    if (one-time initialization token for abcReporter != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Log.abcReporter);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl(&dword_1B0DF7000, v20, v21, "[KeyRecovery] Failed to generate signature for key recovery", v22, 2u);
      MEMORY[0x1B3EA39E0](v22, -1, -1);
    }

    unint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
    return v23();
  }
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

unint64_t IDSGroupSessionProvider.session(_:didReceiveActiveLightweightParticipants:success:)(uint64_t a1, unint64_t a2, char a3)
{
  return specialized IDSGroupSessionProvider.session(_:didReceiveActiveLightweightParticipants:success:)(a2, a3);
}

void closure #2 in IDSGroupSessionProvider.session(_:didReceiveActiveLightweightParticipants:success:)(void **a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = *a1;
  id v10 = objc_msgSend(v9, sel_participantURI);
  if (v10)
  {
    unint64_t v11 = v10;
    id v12 = objc_msgSend(v9, sel_participantIdentifier);
    id v13 = objc_msgSend(v11, sel__stripFZIDPrefix);

    if (v13)
    {
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v16 = v15;

      *a3 = v12;
      a3[1] = v14;
      a3[2] = v16;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (one-time initialization token for service != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Log.service);
    id v18 = v9;
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v19, v20))
    {
      id v33 = a2;
      os_log_type_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = (void *)swift_slowAlloc();
      uint64_t v30 = v21;
      *(_DWORD *)os_log_type_t v21 = 138412290;
      v28[1] = v21 + 4;
      *(void *)&v32[0] = v18;
      id v22 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      unint64_t v23 = v29;
      *uint64_t v29 = v18;

      a2 = v33;
      id v24 = v30;
      _os_log_impl(&dword_1B0DF7000, v19, v20, "Failed to fetch participantURI for %@", v30, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v23, -1, -1);
      MEMORY[0x1B3EA39E0](v24, -1, -1);
    }
    else
    {
    }
    static TaskPriority.background.getter();
    uint64_t v25 = type metadata accessor for TaskPriority();
    uint64_t v26 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v8, 0, 1, v25);
    (*(void (**)(long long *__return_ptr, uint64_t))((*MEMORY[0x1E4FBC8C8] & *a2) + 0x178))(v32, v26);
    outlined init with take of BackgroundSessionManagerDataSource(v32, (uint64_t)v31);
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = 0;
    *(void *)(v27 + 24) = 0;
    outlined init with take of BackgroundSessionManagerDataSource(v31, v27 + 32);
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in closure #2 in IDSGroupSessionProvider.session(_:didReceiveActiveLightweightParticipants:success:), v27);
    swift_release();
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

uint64_t closure #1 in closure #2 in IDSGroupSessionProvider.session(_:didReceiveActiveLightweightParticipants:success:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return MEMORY[0x1F4188298](closure #1 in closure #2 in IDSGroupSessionProvider.session(_:didReceiveActiveLightweightParticipants:success:), 0, 0);
}

uint64_t closure #1 in closure #2 in IDSGroupSessionProvider.session(_:didReceiveActiveLightweightParticipants:success:)()
{
  uint64_t v1 = (void *)v0[2];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  id v4 = objc_msgSend(self, sel_mainBundle);
  id v5 = objc_msgSend(v4, sel_bundleIdentifier);

  if (v5)
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0xD00000000000001DLL;
    unint64_t v8 = 0x80000001B115CEE0;
  }
  uint64_t v9 = (*(uint64_t (**)(unint64_t, unint64_t, unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v3 + 16))(0xD000000000000016, 0x80000001B1160E60, 0xD000000000000018, 0x80000001B1160E80, v6, v8, v2, v3);
  v0[3] = v9;
  swift_bridgeObjectRelease();
  if (v9)
  {
    uint64_t v11 = v1[3];
    uint64_t v10 = v1[4];
    __swift_project_boxed_opaque_existential_1((void *)v0[2], v11);
    os_log_type_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)(v10 + 24) + **(int **)(v10 + 24));
    id v12 = (void *)swift_task_alloc();
    v0[4] = v12;
    *id v12 = v0;
    v12[1] = closure #1 in IDSGroupSessionProvider.session(_:didRegisterPluginAllocationInfo:);
    v13.n128_u64[0] = 0;
    return v20(v9, v11, v10, v13);
  }
  else
  {
    if (one-time initialization token for abcReporter != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Log.abcReporter);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      id v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v18 = 0;
      _os_log_impl(&dword_1B0DF7000, v16, v17, "Failed to generate signature for Participant translation", v18, 2u);
      MEMORY[0x1B3EA39E0](v18, -1, -1);
    }

    uint64_t v19 = (uint64_t (*)(void))v0[1];
    return v19();
  }
}

uint64_t specialized Set.formUnion<A>(_:)(uint64_t result)
{
  uint64_t v1 = result;
  int64_t v2 = 0;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      return result;
    }
    if (v14 >= v7) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v3 + 8 * v14);
    ++v2;
    if (!v15)
    {
      int64_t v2 = v14 + 1;
      if (v14 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v3 + 8 * v2);
      if (!v15)
      {
        int64_t v2 = v14 + 2;
        if (v14 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v3 + 8 * v2);
        if (!v15)
        {
          int64_t v2 = v14 + 3;
          if (v14 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v3 + 8 * v2);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v15 - 1) & v15;
    unint64_t v9 = __clz(__rbit64(v15)) + (v2 << 6);
LABEL_5:
    uint64_t v10 = (Swift::UInt64 *)(*(void *)(v1 + 48) + 24 * v9);
    Swift::UInt64 v11 = *v10;
    Swift::UInt64 v12 = v10[1];
    Swift::UInt64 v13 = v10[2];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)((uint64_t)v17, v11, v12, v13);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 < v7)
  {
    unint64_t v15 = *(void *)(v3 + 8 * v16);
    if (!v15)
    {
      while (1)
      {
        int64_t v2 = v16 + 1;
        if (__OFADD__(v16, 1)) {
          goto LABEL_27;
        }
        if (v2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v3 + 8 * v2);
        ++v16;
        if (v15) {
          goto LABEL_22;
        }
      }
    }
    int64_t v2 = v16;
    goto LABEL_22;
  }
LABEL_23:
  return swift_release();
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v4;
  uint64_t v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_27;
  }
  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain();
    unint64_t v4 = MEMORY[0x1B3EA25D0](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *uint64_t v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = specialized Array._copyContents(initializing:)(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();
  return specialized Array._endMutation()();
}

{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t vars8;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v4;
  uint64_t v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_27;
  }
  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain();
    unint64_t v4 = MEMORY[0x1B3EA25D0](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *uint64_t v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = specialized Array._copyContents(initializing:)(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();
  return specialized Array._endMutation()();
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v23 = v4 + v2;
  }
  else {
    int64_t v23 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = (*(void *)(v3 + 24) >> 1) - v9;
  uint64_t v11 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v14 = v3 + v13 + v12 * v9;
  unint64_t v15 = a1 + v13;
  uint64_t v16 = v12 * v8;
  unint64_t v17 = v14 + v16;
  unint64_t v18 = v15 + v16;
  if (v15 < v17 && v14 < v18) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v20 = *(void *)(v3 + 16);
  BOOL v21 = __OFADD__(v20, v8);
  uint64_t v22 = v20 + v8;
  if (!v21)
  {
    *(void *)(v3 + 16) = v22;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  void *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    unint64_t v14 = v4 + v2;
  }
  else {
    unint64_t v14 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = &v3[v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + 8 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 8 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  uint64_t v12 = __OFADD__(v11, v2);
  unint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  unint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    unint64_t v15 = v4 + v2;
  }
  else {
    unint64_t v15 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v10 = (unint64_t)&v3[5 * v9 + 4];
  if (a1 + 32 < v10 + 40 * v8 && v10 < a1 + 32 + 40 * v8) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  unint64_t v13 = __OFADD__(v12, v8);
  unint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [IDSDestinationProtocol] and conformance [A], &demangling cache variable for type metadata for [IDSDestinationProtocol]);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [IDSDestinationProtocol]);
          uint64_t v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          uint64_t v14 = *v13;
          swift_unknownObjectRetain();
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IDSDestinationProtocol);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  void (*v16[4])(id *);

  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [TUHandle] and conformance [A], &demangling cache variable for type metadata for [TUHandle]);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TUHandle]);
          uint64_t v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          uint64_t v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized Sequence.compactMap<A>(_:)(unint64_t a1, void *a2)
{
  if (a1 >> 62) {
    goto LABEL_19;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    int64_t v5 = (void *)MEMORY[0x1E4FBC860];
    for (uint64_t i = 4; ; ++i)
    {
      id v8 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1B3EA25C0](i - 4, a1) : *(id *)(a1 + 8 * i);
      uint64_t v9 = v8;
      uint64_t v10 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      uint64_t v19 = v8;
      closure #2 in IDSGroupSessionProvider.session(_:didReceiveActiveLightweightParticipants:success:)(&v19, a2, &v17);
      if (v2)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v5;
      }

      uint64_t v11 = v18;
      if (v18)
      {
        long long v16 = v17;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
        }
        unint64_t v13 = v5[2];
        unint64_t v12 = v5[3];
        if (v13 >= v12 >> 1) {
          int64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v5);
        }
        v5[2] = v13 + 1;
        uint64_t v7 = &v5[3 * v13];
        *((_OWORD *)v7 + 2) = v16;
        v7[6] = v11;
      }
      if (v10 == v4)
      {
        swift_bridgeObjectRelease();
        return v5;
      }
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return (void *)MEMORY[0x1E4FBC860];
}

id specialized IDSGroupSessionProvider.init(groupID:members:localMember:service:targetQueue:abcReporter:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  uint64_t v39 = a8;
  uint64_t v40 = a5;
  uint64_t v15 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v37 = *(void *)(v15 - 8);
  uint64_t v38 = v15;
  MEMORY[0x1F4188790](v15);
  uint64_t v36 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v17);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v18 - 8);
  *(void *)&v8[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v8[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_groupSession] = 0;
  uint64_t v19 = &v8[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider____lazy_storage___userDefaults];
  *(_OWORD *)uint64_t v19 = 0u;
  *((_OWORD *)v19 + 1) = 0u;
  *((void *)v19 + 4) = 0;
  *(void *)&v8[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_currentPlugins] = MEMORY[0x1E4FBC860];
  uint64_t v20 = MEMORY[0x1E4FBC870];
  *(void *)&v8[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_participants] = MEMORY[0x1E4FBC870];
  *(void *)&v8[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_unknownParticipants] = v20;
  *(void *)&v8[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_powerAssertion] = 0;
  v8[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_state] = 0;
  BOOL v21 = (uint64_t *)&v8[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_groupID];
  uint64_t *v21 = a1;
  v21[1] = (uint64_t)a2;
  *(void *)&v8[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_members] = a3;
  uint64_t v22 = &v8[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_localMember];
  uint64_t v23 = v40;
  *uint64_t v22 = a4;
  v22[1] = v23;
  outlined init with copy of UserNotificationCenter(a6, (uint64_t)&v8[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_service]);
  uint64_t v35 = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *(void *)&long long v44 = 0;
  *((void *)&v44 + 1) = 0xE000000000000000;
  swift_unknownObjectRetain();
  id v24 = v8;
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(29);
  v25._countAndFlagsBits = 0xD000000000000018;
  v25._object = (void *)0x80000001B1160FF0;
  String.append(_:)(v25);
  v26._countAndFlagsBits = a1;
  v26._object = a2;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = 45;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IDSServiceProtocol);
  uint64_t v40 = a6;
  _print_unlocked<A, B>(_:_:)();
  id v28 = a7;
  static DispatchQoS.unspecified.getter();
  *(void *)&long long v44 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type IDSGroupSessionProvider and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, 255, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  uint64_t v29 = v39;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v37 + 104))(v36, *MEMORY[0x1E4FBCC58], v38);
  *(void *)&v24[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_queue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v29, (uint64_t)&v42, &demangling cache variable for type metadata for ABCReporterProtocol?);
  if (v43)
  {
    outlined init with take of BackgroundSessionManagerDataSource(&v42, (uint64_t)&v44);
  }
  else
  {
    uint64_t v30 = type metadata accessor for ABCReporter();
    uint64_t v31 = (void *)swift_allocObject();
    long long v31[2] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA8AF0]), sel_init);
    v31[3] = 0x636E795374736146;
    v31[4] = 0xE800000000000000;
    uint64_t v31[5] = 0xD000000000000017;
    v31[6] = 0x80000001B1146440;
    uint64_t v45 = v30;
    uint64_t v46 = &protocol witness table for ABCReporter;
    *(void *)&long long v44 = v31;
    outlined destroy of UUID?((uint64_t)&v42, &demangling cache variable for type metadata for ABCReporterProtocol?);
  }
  outlined init with take of BackgroundSessionManagerDataSource(&v44, (uint64_t)&v24[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_abcReporter]);

  id v32 = (objc_class *)type metadata accessor for IDSGroupSessionProvider();
  v41.receiver = v24;
  v41.super_class = v32;
  id v33 = objc_msgSendSuper2(&v41, sel_init);
  outlined destroy of UUID?(v29, &demangling cache variable for type metadata for ABCReporterProtocol?);
  __swift_destroy_boxed_opaque_existential_1Tm(v40);
  return v33;
}

uint64_t type metadata accessor for IDSGroupSessionProvider()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError()
{
  unint64_t result = lazy protocol witness table cache variable for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError;
  if (!lazy protocol witness table cache variable for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError;
  if (!lazy protocol witness table cache variable for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IDSGroupSessionProvider.IDSGroupSessionProviderError and conformance IDSGroupSessionProvider.IDSGroupSessionProviderError);
  }
  return result;
}

uint64_t sub_1B1020A30()
{
  swift_bridgeObjectRelease();

  swift_release();
  return MEMORY[0x1F4186498](v0, 56, 7);
}

void partial apply for closure #1 in IDSGroupSessionProvider.requestDataCryptor(forTopic:completion:)(void *a1)
{
  closure #1 in IDSGroupSessionProvider.requestDataCryptor(forTopic:completion:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void (**)(uint64_t))(v1 + 40));
}

uint64_t block_destroy_helper_19()
{
  return swift_release();
}

uint64_t sub_1B1020A90()
{
  return objectdestroy_3Tm_0(72);
}

uint64_t partial apply for closure #2 in IDSGroupSessionProvider.requestParticipant(for:)()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  v2[2] = v0 + 32;
  return MEMORY[0x1F4188298](closure #2 in IDSGroupSessionProvider.requestParticipant(for:), 0, 0);
}

uint64_t sub_1B1020B40()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t partial apply for closure #1 in IDSGroupSessionProvider.sessionDidJoinGroup(_:participantUpdate:error:)()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  *(void *)(v4 + 48) = v2;
  *(void *)(v4 + 56) = v3;
  *(_OWORD *)(v4 + 32) = v5;
  return MEMORY[0x1F4188298](closure #1 in IDSGroupSessionProvider.sessionDidJoinGroup(_:participantUpdate:error:), 0, 0);
}

uint64_t sub_1B1020C4C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 72);
  return MEMORY[0x1F4186498](v0, 112, 7);
}

uint64_t partial apply for specialized closure #1 in Task<>.reportFailure(on:function:process:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return specialized closure #1 in Task<>.reportFailure(on:function:process:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v13;

  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return specialized closure #1 in Task<>.reportFailure(on:function:process:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

void specialized IDSGroupSessionProvider.session(_:participantDidJoinGroupWithInfo:)(uint64_t a1, const char *a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (uint64_t *)((char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)(v2 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_queue);
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E4FBCBF0], v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if (v9)
  {
    if (one-time initialization token for service == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.service);
  swift_bridgeObjectRetain_n();
  unint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    uint64_t v18 = a1;
    uint64_t v19 = v15;
    *(_DWORD *)uint64_t v14 = 136315138;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : Any]);
    uint64_t v16 = String.init<A>(reflecting:)();
    uint64_t v18 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v12, v13, a2, v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v15, -1, -1);
    MEMORY[0x1B3EA39E0](v14, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

void specialized IDSGroupSessionProvider.session(_:didRegisterPluginAllocationInfo:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  id v10 = (uint8_t **)((char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = *(void **)&v2[OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_queue];
  *id v10 = v11;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E4FBCBF0], v7);
  id v12 = v11;
  char v13 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  if (v13)
  {
    if (one-time initialization token for service == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Log.service);
  swift_bridgeObjectRetain_n();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v66 = v6;
  if (v17)
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(void *)&v71[0] = v19;
    *(_DWORD *)uint64_t v18 = 136315138;
    *(void *)&long long v67 = a1;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
    uint64_t v20 = String.init<A>(reflecting:)();
    *(void *)&long long v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, (uint64_t *)v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v15, v16, "IDSGroupSessionProvider: didRegisterPluginAllocationInfo %s", v18, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v19, -1, -1);
    MEMORY[0x1B3EA39E0](v18, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v70 = v22;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v71), (v24 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v23, (uint64_t)&v67);
  }
  else
  {
    long long v67 = 0u;
    long long v68 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v71);
  if (!*((void *)&v68 + 1))
  {
    outlined destroy of UUID?((uint64_t)&v67, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_16;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_16:
    swift_bridgeObjectRetain_n();
    id v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(void *)&v71[0] = v31;
      *(_DWORD *)uint64_t v30 = 136315138;
      unint64_t v65 = v2;
      swift_bridgeObjectRetain();
      uint64_t v32 = Dictionary.description.getter();
      unint64_t v34 = v33;
      swift_bridgeObjectRelease();
      *(void *)&long long v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v34, (uint64_t *)v71);
      uint64_t v2 = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v28, v29, "Missing virtual participantID, read %s", v30, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v31, -1, -1);
      MEMORY[0x1B3EA39E0](v30, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v35 = (uint64_t)v66;
    static TaskPriority.background.getter();
    uint64_t v36 = type metadata accessor for TaskPriority();
    uint64_t v37 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v35, 0, 1, v36);
    (*(void (**)(long long *__return_ptr, uint64_t))((*MEMORY[0x1E4FBC8C8] & *(void *)v2) + 0x178))(v71, v37);
    outlined init with take of BackgroundSessionManagerDataSource(v71, (uint64_t)&v67);
    uint64_t v38 = swift_allocObject();
    *(void *)(v38 + 16) = 0;
    *(void *)(v38 + 24) = 0;
    outlined init with take of BackgroundSessionManagerDataSource(&v67, v38 + 32);
    uint64_t v39 = &async function pointer to partial apply for closure #1 in IDSGroupSessionProvider.session(_:didRegisterPluginAllocationInfo:);
    goto LABEL_33;
  }
  uint64_t v25 = v69;
  uint64_t v69 = 0xD000000000000023;
  unint64_t v70 = 0x80000001B1160F10;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v71), (v27 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v26, (uint64_t)&v67);
  }
  else
  {
    long long v67 = 0u;
    long long v68 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v71);
  if (!*((void *)&v68 + 1))
  {
    outlined destroy of UUID?((uint64_t)&v67, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_29;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_29:
    swift_bridgeObjectRetain_n();
    id v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = (uint8_t *)swift_slowAlloc();
      uint64_t v58 = swift_slowAlloc();
      *(void *)&v71[0] = v58;
      *(_DWORD *)uint64_t v57 = 136315138;
      unint64_t v65 = v57 + 4;
      swift_bridgeObjectRetain();
      uint64_t v59 = Dictionary.description.getter();
      id v60 = v2;
      unint64_t v62 = v61;
      swift_bridgeObjectRelease();
      *(void *)&long long v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v62, (uint64_t *)v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v2 = v60;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v55, v56, "Missing local participantID, read %s", v57, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v58, -1, -1);
      MEMORY[0x1B3EA39E0](v57, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v35 = (uint64_t)v66;
    static TaskPriority.background.getter();
    uint64_t v63 = type metadata accessor for TaskPriority();
    uint64_t v64 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v35, 0, 1, v63);
    (*(void (**)(long long *__return_ptr, uint64_t))((*MEMORY[0x1E4FBC8C8] & *(void *)v2) + 0x178))(v71, v64);
    outlined init with take of BackgroundSessionManagerDataSource(v71, (uint64_t)&v67);
    uint64_t v38 = swift_allocObject();
    *(void *)(v38 + 16) = 0;
    *(void *)(v38 + 24) = 0;
    outlined init with take of BackgroundSessionManagerDataSource(&v67, v38 + 32);
    uint64_t v39 = &async function pointer to partial apply for closure #2 in IDSGroupSessionProvider.session(_:didRegisterPluginAllocationInfo:);
LABEL_33:
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v35, (uint64_t)v39, v38);
    swift_release();
    return;
  }
  uint64_t v40 = v69;
  id v41 = objc_allocWithZone(MEMORY[0x1E4FADBB0]);
  long long v42 = (void *)MEMORY[0x1B3EA1B00](0x627553627550, 0xE600000000000000);
  id v43 = objc_msgSend(v41, sel_initWithIdentifier_pluginName_, v25, v42);

  long long v44 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v45 = *(uint64_t (**)(long long *))((*MEMORY[0x1E4FBC8C8] & *(void *)v2) + 0x138);
  id v46 = v43;
  uint64_t v47 = (void (*)(long long *, void))v45(v71);
  id v49 = v48;
  id v50 = *v48;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *id v49 = v50;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v50[2] + 1, 1, v50);
    *id v49 = v50;
  }
  unint64_t v53 = v50[2];
  unint64_t v52 = v50[3];
  if (v53 >= v52 >> 1)
  {
    id v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v52 > 1), v53 + 1, 1, v50);
    *id v49 = v50;
  }
  v50[2] = v53 + 1;
  int v54 = &v50[2 * v53];
  v54[4] = v46;
  v54[5] = v40;
  v47(v71, 0);
  (*(void (**)(uint64_t))((*v44 & *(void *)v2) + 0x1B0))(1);
}

void specialized IDSGroupSessionProvider.session(_:didUnregisterPluginAllocationInfo:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (uint64_t (*)(void))((char *)v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  id v10 = (void *)((char *)v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = *(void **)((char *)v2 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_queue);
  *id v10 = v11;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E4FBCBF0], v7);
  id v12 = v11;
  char v13 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  if (v13)
  {
    uint64_t v59 = v6;
    if (one-time initialization token for service == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = __swift_project_value_buffer(v14, (uint64_t)static Log.service);
  swift_bridgeObjectRetain_n();
  os_log_type_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(void *)&v64[0] = v19;
    *(_DWORD *)uint64_t v18 = 136315138;
    *(void *)&long long v60 = a1;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
    uint64_t v20 = String.init<A>(reflecting:)();
    *(void *)&long long v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, (uint64_t *)v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v16, v17, "IDSGroupSessionProvider: didUnregisterPluginAllocationInfo %s", v18, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v19, -1, -1);
    MEMORY[0x1B3EA39E0](v18, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v63 = v22;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v64), (v24 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v23, (uint64_t)&v60);
  }
  else
  {
    long long v60 = 0u;
    long long v61 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v64);
  if (!*((void *)&v61 + 1))
  {
    outlined destroy of UUID?((uint64_t)&v60, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_23;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_23:
    swift_bridgeObjectRetain_n();
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      *(void *)&v64[0] = v41;
      uint64_t v58 = v2;
      *(_DWORD *)uint64_t v40 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v42 = Dictionary.description.getter();
      unint64_t v44 = v43;
      swift_bridgeObjectRelease();
      *(void *)&long long v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v44, (uint64_t *)v64);
      uint64_t v2 = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v38, v39, "Missing virtual participantID, read %s", v40, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v41, -1, -1);
      MEMORY[0x1B3EA39E0](v40, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v45 = (uint64_t)v59;
    static TaskPriority.background.getter();
    uint64_t v46 = type metadata accessor for TaskPriority();
    uint64_t v47 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v45, 0, 1, v46);
    (*(void (**)(long long *__return_ptr, uint64_t))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x178))(v64, v47);
    outlined init with take of BackgroundSessionManagerDataSource(v64, (uint64_t)&v60);
    uint64_t v48 = swift_allocObject();
    *(void *)(v48 + 16) = 0;
    *(void *)(v48 + 24) = 0;
    outlined init with take of BackgroundSessionManagerDataSource(&v60, v48 + 32);
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v45, (uint64_t)&async function pointer to partial apply for closure #1 in IDSGroupSessionProvider.session(_:didUnregisterPluginAllocationInfo:), v48);
    swift_release();
    return;
  }
  id v25 = (id)v62;
  unint64_t v26 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x128);
  uint64_t v27 = (*MEMORY[0x1E4FBC8C8] & *v2) + 296;
  uint64_t v58 = v2;
  uint64_t v59 = v26;
  v57[1] = v27;
  uint64_t v28 = v26();
  uint64_t v29 = *(void *)(v28 + 16);
  v57[0] = v15;
  if (v29)
  {
    uint64_t v30 = (uint64_t *)(v28 + 40);
    uint64_t v31 = MEMORY[0x1E4FBC860];
    do
    {
      uint64_t v32 = *v30;
      id v33 = (id)*(v30 - 1);
      if (objc_msgSend(v33, sel_identifier, v57[0]) == v25)
      {
      }
      else
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&v64[0] = v31;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v31 + 16) + 1, 1);
          uint64_t v31 = *(void *)&v64[0];
        }
        unint64_t v36 = *(void *)(v31 + 16);
        unint64_t v35 = *(void *)(v31 + 24);
        if (v36 >= v35 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
          uint64_t v31 = *(void *)&v64[0];
        }
        *(void *)(v31 + 16) = v36 + 1;
        uint64_t v37 = v31 + 16 * v36;
        *(void *)(v37 + 32) = v33;
        *(void *)(v37 + 40) = v32;
      }
      v30 += 2;
      --v29;
    }
    while (v29);
  }
  else
  {
    uint64_t v31 = MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRelease();
  id v49 = v58;
  id v50 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v51 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v58) + 0x130))(v31);
  uint64_t v52 = *(void *)(((uint64_t (*)(uint64_t))v59)(v51) + 16);
  uint64_t v53 = swift_bridgeObjectRelease();
  if (!v52 && (*(unsigned __int8 (**)(uint64_t))((*v50 & *v49) + 0x1A8))(v53) == 1)
  {
    int v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v54, v55))
    {
      os_log_type_t v56 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v56 = 0;
      _os_log_impl(&dword_1B0DF7000, v54, v55, "IDSGroupSessionProvider: Lost all virtualParticipants, re-registering plugin.", v56, 2u);
      MEMORY[0x1B3EA39E0](v56, -1, -1);
    }

    IDSGroupSessionProvider.registerQRPlugin()();
  }
}

uint64_t specialized IDSGroupSessionProvider.session(_:rejectedKeyRecoveryRequestFrom:reason:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  id v12 = (uint64_t *)((char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  char v13 = *(void **)((char *)v3 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_queue);
  *id v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E4FBCBF0], v9);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if (v13)
  {
    if (one-time initialization token for service == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.service);
  id v16 = a1;
  os_log_type_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(void *)&long long v39 = v20;
    *(_DWORD *)uint64_t v19 = 136315394;
    *(void *)&v38[0] = v16;
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for IDSURI);
    uint64_t v37 = v8;
    id v21 = v16;
    uint64_t v22 = String.init<A>(reflecting:)();
    *(void *)&v38[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, (uint64_t *)&v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v8 = v37;
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 1024;
    LODWORD(v38[0]) = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B0DF7000, v17, v18, "IDSGroupSessionProvider: rejectedKeyRecoveryRequest from: %s, reason: %u", (uint8_t *)v19, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v20, -1, -1);
    MEMORY[0x1B3EA39E0](v19, -1, -1);
  }
  else
  {
  }
  static TaskPriority.background.getter();
  uint64_t v24 = type metadata accessor for TaskPriority();
  uint64_t v25 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v8, 0, 1, v24);
  unint64_t v26 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(long long *__return_ptr, uint64_t))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x178))(&v39, v25);
  outlined init with take of BackgroundSessionManagerDataSource(&v39, (uint64_t)v38);
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = 0;
  *(void *)(v27 + 24) = 0;
  outlined init with take of BackgroundSessionManagerDataSource(v38, v27 + 32);
  *(_DWORD *)(v27 + 72) = a2;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in IDSGroupSessionProvider.session(_:rejectedKeyRecoveryRequestFrom:reason:), v27);
  uint64_t v28 = swift_release();
  uint64_t result = (*(uint64_t (**)(uint64_t))((*v26 & *v3) + 0xC0))(v28);
  if (result)
  {
    uint64_t v31 = v30;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v40 = type metadata accessor for IDSGroupSessionProvider();
    uint64_t v41 = lazy protocol witness table accessor for type IDSGroupSessionProvider and conformance NSObject(&lazy protocol witness table cache variable for type IDSGroupSessionProvider and conformance IDSGroupSessionProvider, v33, (void (*)(uint64_t))type metadata accessor for IDSGroupSessionProvider);
    *(void *)&long long v39 = v3;
    unint64_t v34 = *(void (**)(long long *, id, uint64_t, uint64_t, uint64_t))(v31 + 24);
    unint64_t v35 = v3;
    v34(&v39, v16, a2, ObjectType, v31);
    swift_unknownObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v39);
  }
  return result;
}

uint64_t specialized IDSGroupSessionProvider.sessiondidReceiveKeyUpdate(_:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (void *)((char *)&v20[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)((char *)v1 + OBJC_IVAR____TtC14CopresenceCore23IDSGroupSessionProvider_queue);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FBCBF0], v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    if (one-time initialization token for service == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.service);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_1B0DF7000, v9, v10, "IDSGroupSessionProvider: sessiondidReceiveKeyUpdate", v11, 2u);
    MEMORY[0x1B3EA39E0](v11, -1, -1);
  }

  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xC0))();
  if (result)
  {
    uint64_t v14 = v13;
    uint64_t ObjectType = swift_getObjectType();
    v20[3] = type metadata accessor for IDSGroupSessionProvider();
    v20[4] = lazy protocol witness table accessor for type IDSGroupSessionProvider and conformance NSObject(&lazy protocol witness table cache variable for type IDSGroupSessionProvider and conformance IDSGroupSessionProvider, v16, (void (*)(uint64_t))type metadata accessor for IDSGroupSessionProvider);
    v20[0] = v1;
    os_log_type_t v17 = *(void (**)(void *, uint64_t, uint64_t))(v14 + 16);
    os_log_type_t v18 = v1;
    v17(v20, ObjectType, v14);
    swift_unknownObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
  }
  return result;
}

unint64_t specialized IDSGroupSessionProvider.session(_:didReceiveActiveLightweightParticipants:success:)(unint64_t result, char a2)
{
  if (a2)
  {
    uint64_t v3 = v2;
    unint64_t v4 = result;
    v14[0] = MEMORY[0x1E4FBC860];
    if (result >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v5 = result;
      if (result) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v5 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v5)
      {
LABEL_4:
        if (v5 < 1)
        {
          __break(1u);
          return result;
        }
        for (uint64_t i = 0; i != v5; ++i)
        {
          if ((v4 & 0xC000000000000001) != 0) {
            id v7 = (id)MEMORY[0x1B3EA25C0](i, v4);
          }
          else {
            id v7 = *(id *)(v4 + 8 * i + 32);
          }
          uint64_t v8 = v7;
          if (objc_msgSend(v7, sel_isKnown))
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          else
          {
          }
        }
        swift_bridgeObjectRelease();
        unint64_t v9 = v14[0];
        goto LABEL_16;
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v9 = MEMORY[0x1E4FBC860];
LABEL_16:
    os_log_type_t v10 = v3;
    uint64_t v11 = specialized Sequence.compactMap<A>(_:)(v9, v10);
    swift_release();

    uint64_t v12 = specialized Set.init<A>(_:)((uint64_t)v11);
    swift_bridgeObjectRelease();
    uint64_t v13 = (uint64_t (*)(void *, void))(*(uint64_t (**)(void *))((*MEMORY[0x1E4FBC8C8] & *v10)
                                                                                        + 0x158))(v14);
    specialized Set.formUnion<A>(_:)(v12);
    return v13(v14, 0);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IDSGroupSessionProvider.SessionState and conformance IDSGroupSessionProvider.SessionState()
{
  unint64_t result = lazy protocol witness table cache variable for type IDSGroupSessionProvider.SessionState and conformance IDSGroupSessionProvider.SessionState;
  if (!lazy protocol witness table cache variable for type IDSGroupSessionProvider.SessionState and conformance IDSGroupSessionProvider.SessionState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IDSGroupSessionProvider.SessionState and conformance IDSGroupSessionProvider.SessionState);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for IDSGroupSessionProvider(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type IDSGroupSessionProvider and conformance NSObject(&lazy protocol witness table cache variable for type IDSGroupSessionProvider and conformance NSObject, a2, (void (*)(uint64_t))type metadata accessor for IDSGroupSessionProvider);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1B1022DD8@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xC0))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B1022E34(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xC8);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t sub_1B1022EA8@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xF0))();
  *a2 = result;
  return result;
}

uint64_t sub_1B1022F04(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xF8);
  id v4 = *a1;
  return v3(v2);
}

uint64_t sub_1B1022F6C(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x110))();
}

uint64_t sub_1B1022FC8(uint64_t a1, void **a2)
{
  outlined init with copy of UserNotificationCenter(a1, (uint64_t)v4);
  return (*(uint64_t (**)(unsigned char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x118))(v4);
}

uint64_t sub_1B1023048@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x128))();
  *a2 = result;
  return result;
}

uint64_t sub_1B10230AC(uint64_t a1, void **a2)
{
  id v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x130);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B1023118@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x148))();
  *a2 = result;
  return result;
}

uint64_t sub_1B102317C(uint64_t a1, void **a2)
{
  id v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x150);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B10231E8@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x160))();
  *a2 = result;
  return result;
}

uint64_t sub_1B102324C(uint64_t a1, void **a2)
{
  id v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x168);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B10232B8(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x178))();
}

uint64_t sub_1B1023314(uint64_t a1, void **a2)
{
  outlined init with copy of UserNotificationCenter(a1, (uint64_t)v4);
  return (*(uint64_t (**)(unsigned char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x180))(v4);
}

uint64_t sub_1B1023394@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x190))();
  *a2 = result;
  return result;
}

uint64_t sub_1B10233F8(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x198);
  id v4 = *a1;
  return v3(v2);
}

uint64_t sub_1B1023468@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1A8))();
  *a2 = result;
  return result;
}

uint64_t sub_1B10234CC(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x1B0))(*a1);
}

uint64_t dispatch thunk of IDSServiceProtocol.accounts.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of IDSServiceProtocol.devices.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of IDSServiceProtocol.iCloudAccount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of IDSServiceProtocol.serviceIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of IDSGroupSessionProviderDelegate.didChangeState(sessionProvider:state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of IDSGroupSessionProviderDelegate.didReceiveKeyUpdate(sessionProvider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of IDSGroupSessionProviderDelegate.didRejectKeyRecoveryRequest(sessionProvider:from:reason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of IDSGroupSessionProviderDelegate.didReceiveUpdatedUnknownParticipantList(sessionProvider:unknownParticipants:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of IDSGroupSessionProviderDelegate.didChangePlugins(sessionProvider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of IDSGroupSessionProviderProtocol.delegate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of IDSGroupSessionProviderProtocol.delegate.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of IDSGroupSessionProviderProtocol.delegate.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of IDSGroupSessionProviderProtocol.participantIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of IDSGroupSessionProviderProtocol.virtualParticipant.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of IDSGroupSessionProviderProtocol.groupID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of IDSGroupSessionProviderProtocol.init(groupID:members:localMember:service:targetQueue:abcReporter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(uint64_t (**)(void))(a10 + 64))();
}

uint64_t dispatch thunk of IDSGroupSessionProviderProtocol.start()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of IDSGroupSessionProviderProtocol.leave()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of IDSGroupSessionProviderProtocol.updateMembers(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of IDSGroupSessionProviderProtocol.requestDataCryptor(forTopic:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 96))();
}

uint64_t dispatch thunk of IDSGroupSessionProviderProtocol.requestEncryptionKeysForParticipants(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

uint64_t dispatch thunk of IDSGroupSessionProviderProtocol.requestParticipant(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 112) + **(int **)(a3 + 112));
  id v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *id v7 = v3;
  v7[1] = dispatch thunk of IDSGroupSessionProviderProtocol.requestParticipant(for:);
  return v9(a1, a2, a3);
}

uint64_t method lookup function for IDSGroupSessionProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for IDSGroupSessionProvider);
}

uint64_t dispatch thunk of IDSGroupSessionProvider.delegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.delegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.delegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.groupSession.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.groupSession.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.groupSession.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.participantIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.userDefaults.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.userDefaults.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.userDefaults.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.currentPlugins.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.currentPlugins.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.currentPlugins.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.virtualParticipant.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.participants.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x148))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.participants.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x150))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.participants.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x158))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.unknownParticipants.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x160))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.unknownParticipants.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x168))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.unknownParticipants.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x170))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.abcReporter.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x178))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.abcReporter.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x180))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.abcReporter.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x188))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.powerAssertion.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x190))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.powerAssertion.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x198))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.powerAssertion.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.state.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.state.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.state.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.__allocating_init(groupID:members:localMember:service:targetQueue:abcReporter:)()
{
  return (*(uint64_t (**)(void))(v0 + 448))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.start()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.leave()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.updateMembers(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.requestDataCryptor(forTopic:completion:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.requestEncryptionKeysForParticipants(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x200))();
}

uint64_t dispatch thunk of IDSGroupSessionProvider.requestParticipant(for:)(uint64_t a1)
{
  id v4 = *(int **)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x238);
  id v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = dispatch thunk of IDSGroupSessionProvider.requestParticipant(for:);
  return v7(a1);
}

uint64_t dispatch thunk of IDSGroupSessionProvider.requestParticipant(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *v3;
  swift_task_dealloc();
  id v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 8);
  return v7(a1, a2, a3);
}

unsigned char *storeEnumTagSinglePayload for IDSGroupSessionProvider.IDSGroupSessionProviderError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B1024324);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSGroupSessionProvider.IDSGroupSessionProviderError()
{
  return &type metadata for IDSGroupSessionProvider.IDSGroupSessionProviderError;
}

unsigned char *storeEnumTagSinglePayload for IDSGroupSessionProvider.SessionState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B1024428);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSGroupSessionProvider.SessionState()
{
  return &type metadata for IDSGroupSessionProvider.SessionState;
}

uint64_t initializeBufferWithCopyOfBuffer for IDSGroupSessionProvider.Participant(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for IDSGroupSessionProvider.Participant()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for IDSGroupSessionProvider.Participant(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for IDSGroupSessionProvider.Participant(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSGroupSessionProvider.Participant(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSGroupSessionProvider.Participant(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSGroupSessionProvider.Participant()
{
  return &type metadata for IDSGroupSessionProvider.Participant;
}

void *initializeBufferWithCopyOfBuffer for IDSGroupSessionProvider.CurrentSessionInfo(void *a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  return a1;
}

void destroy for IDSGroupSessionProvider.CurrentSessionInfo(id *a1)
{
}

uint64_t assignWithCopy for IDSGroupSessionProvider.CurrentSessionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for IDSGroupSessionProvider.CurrentSessionInfo(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *a2;

  *(void *)(a1 + 8) = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for IDSGroupSessionProvider.CurrentSessionInfo()
{
  return &type metadata for IDSGroupSessionProvider.CurrentSessionInfo;
}

uint64_t sub_1B1024694()
{
  return objectdestroy_3Tm_0(72);
}

uint64_t partial apply for closure #1 in closure #2 in IDSGroupSessionProvider.session(_:didReceiveActiveLightweightParticipants:success:)()
{
  unint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *unint64_t v2 = v1;
  v2[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  v2[2] = v0 + 32;
  return MEMORY[0x1F4188298](closure #1 in closure #2 in IDSGroupSessionProvider.session(_:didReceiveActiveLightweightParticipants:success:), 0, 0);
}

uint64_t lazy protocol witness table accessor for type IDSGroupSessionProvider and conformance NSObject(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B102478C()
{
  return objectdestroy_3Tm_0(76);
}

uint64_t partial apply for closure #1 in IDSGroupSessionProvider.session(_:rejectedKeyRecoveryRequestFrom:reason:)()
{
  uint64_t v2 = v0 + 32;
  int v3 = *(_DWORD *)(v0 + 72);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_DWORD *)(v4 + 60) = v3;
  *(void *)(v4 + 32) = v2;
  return MEMORY[0x1F4188298](closure #1 in IDSGroupSessionProvider.session(_:rejectedKeyRecoveryRequestFrom:reason:), 0, 0);
}

uint64_t sub_1B1024848()
{
  return objectdestroy_3Tm_0(72);
}

uint64_t partial apply for closure #1 in IDSGroupSessionProvider.session(_:didUnregisterPluginAllocationInfo:)()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  v2[2] = v0 + 32;
  return MEMORY[0x1F4188298](closure #1 in IDSGroupSessionProvider.session(_:didRegisterPluginAllocationInfo:), 0, 0);
}

uint64_t sub_1B10248F8()
{
  return objectdestroy_3Tm_0(72);
}

uint64_t partial apply for closure #1 in IDSGroupSessionProvider.session(_:didRegisterPluginAllocationInfo:)()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  v2[2] = v0 + 32;
  return MEMORY[0x1F4188298](closure #1 in IDSGroupSessionProvider.session(_:didRegisterPluginAllocationInfo:), 0, 0);
}

uint64_t sub_1B10249A8()
{
  return objectdestroy_3Tm_0(72);
}

uint64_t objectdestroy_3Tm_0(uint64_t a1)
{
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v1 + 32);
  return MEMORY[0x1F4186498](v1, a1, 7);
}

uint64_t partial apply for closure #2 in IDSGroupSessionProvider.session(_:didRegisterPluginAllocationInfo:)()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  v2[2] = v0 + 32;
  return MEMORY[0x1F4188298](closure #2 in IDSGroupSessionProvider.session(_:didRegisterPluginAllocationInfo:), 0, 0);
}

uint64_t sub_1B1024AA4()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in IDSGroupSessionProvider.state.didset()
{
  return closure #1 in IDSGroupSessionProvider.state.didset(*(void **)(v0 + 16));
}

uint64_t sub_1B1024AE4()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #1 in IDSGroupSessionProvider.unknownParticipants.didset()
{
  closure #1 in IDSGroupSessionProvider.unknownParticipants.didset(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t partial apply for closure #1 in IDSGroupSessionProvider.currentPlugins.didset()
{
  return closure #1 in IDSGroupSessionProvider.currentPlugins.didset(*(void **)(v0 + 16));
}

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v77 = a2;
  uint64_t v3 = type metadata accessor for UnencryptedAttachment(0);
  uint64_t v75 = *(void *)(v3 - 8);
  uint64_t v76 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v70 = (uint64_t)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  uint64_t v5 = *(void *)(v89 - 8);
  MEMORY[0x1F4188790](v89);
  uint64_t v82 = (uint64_t)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  int64_t v90 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v67 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnencryptedAttachment??);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v73 = (uint64_t)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  os_log_type_t v17 = (char *)&v67 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v71 = (uint64_t)&v67 - v18;
  uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnencryptedAttachment?);
  uint64_t v94 = *(uint64_t (***)(char *, uint64_t, uint64_t))(v92 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v92);
  uint64_t v69 = (uint64_t)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  unint64_t v23 = (char *)&v67 - v22;
  MEMORY[0x1F4188790](v21);
  uint64_t v74 = (char *)&v67 - v24;
  uint64_t v25 = *a1;
  unint64_t v81 = (void (*)(uint64_t))a1[1];
  uint64_t v27 = a1[2];
  unint64_t v26 = (uint64_t (*)(char *))a1[3];
  uint64_t v85 = v25;
  unint64_t v86 = v26;
  uint64_t v95 = v25;
  uint64_t v28 = *(void *)(v25 + 64);
  uint64_t v79 = v25 + 64;
  uint64_t v29 = -1 << *(unsigned char *)(v25 + 32);
  uint64_t v72 = ~v29;
  if (-v29 < 64) {
    uint64_t v30 = ~(-1 << -(char)v29);
  }
  else {
    uint64_t v30 = -1;
  }
  unint64_t v31 = v30 & v28;
  uint64_t v32 = a1[4];
  long long v68 = (void (*)(uint64_t))a1[5];
  uint64_t v33 = a1[6];
  outlined retain of [UInt64 : AttachmentLedger_AttachmentEncryption].Values((uint64_t)&v95);
  uint64_t v84 = v5;
  os_log_type_t v87 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  uint64_t v88 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v93 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v94 + 7);
  v94 += 6;
  int64_t v80 = (unint64_t)(63 - v29) >> 6;
  int64_t v67 = v80 - 1;
  uint64_t v83 = v27;
  swift_retain();
  uint64_t v91 = v32;
  swift_retain();
  uint64_t v78 = v33;
  uint64_t result = swift_retain();
  int64_t v35 = 0;
  uint64_t v36 = (uint64_t)v90;
  if (!v31) {
    goto LABEL_7;
  }
LABEL_5:
  unint64_t v37 = __clz(__rbit64(v31));
  v31 &= v31 - 1;
  int64_t v38 = v35;
  unint64_t v39 = v37 | (v35 << 6);
LABEL_6:
  outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(*(void *)(v85 + 56) + *(void *)(v84 + 72) * v39, (uint64_t)v11, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  for (uint64_t i = 0; ; uint64_t i = 1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
LABEL_13:
          uint64_t v43 = v89;
          (*v88)(v11, i, 1, v89);
          outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)v11, v36, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
          if ((*v87)(v36, 1, v43) == 1)
          {
            unint64_t v44 = *v93;
            uint64_t v45 = v17;
            uint64_t v46 = 1;
          }
          else
          {
            uint64_t v47 = v36;
            uint64_t v48 = v82;
            outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v47, v82, type metadata accessor for AttachmentLedger_AttachmentEncryption);
            v81(v48);
            outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v48, type metadata accessor for AttachmentLedger_AttachmentEncryption);
            unint64_t v44 = *v93;
            uint64_t v45 = v17;
            uint64_t v46 = 0;
          }
          uint64_t v49 = v92;
          v44(v45, v46, 1, v92);
          id v50 = *v94;
          if ((*v94)(v17, 1, v49) == 1)
          {
            outlined destroy of UUID?((uint64_t)v17, &demangling cache variable for type metadata for UnencryptedAttachment??);
            uint64_t v52 = 1;
            uint64_t v53 = v71;
LABEL_43:
            v44((char *)v53, v52, 1, v49);
            uint64_t v55 = v53;
            uint64_t v56 = v73;
            outlined init with take of PluginClientMetrics.ConnectionEstablishment?(v55, v73, &demangling cache variable for type metadata for UnencryptedAttachment??);
            int v57 = v50((char *)v56, 1, v49);
            uint64_t v58 = v76;
            uint64_t v59 = v77;
            uint64_t v60 = v75;
            long long v61 = v74;
            if (v57 == 1)
            {
              uint64_t v62 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v75 + 56);
              v62(v74, 1, 1, v76);
            }
            else
            {
              uint64_t v63 = v69;
              outlined init with take of PluginClientMetrics.ConnectionEstablishment?(v56, v69, &demangling cache variable for type metadata for UnencryptedAttachment?);
              v68(v63);
              outlined destroy of UUID?(v63, &demangling cache variable for type metadata for UnencryptedAttachment?);
              uint64_t v62 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v60 + 56);
              v62(v61, 0, 1, v58);
            }
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v61, 1, v58) == 1)
            {
              outlined consume of [String : ()].Iterator._Variant();
              swift_release();
              swift_release();
              swift_release();
              uint64_t v64 = 1;
            }
            else
            {
              uint64_t v65 = (uint64_t)v61;
              uint64_t v66 = v70;
              outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v65, v70, type metadata accessor for UnencryptedAttachment);
              outlined consume of [String : ()].Iterator._Variant();
              swift_release();
              swift_release();
              swift_release();
              outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v66, v59, type metadata accessor for UnencryptedAttachment);
              uint64_t v64 = 0;
            }
            return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v62)(v59, v64, 1, v58);
          }
          outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)v17, (uint64_t)v23, &demangling cache variable for type metadata for UnencryptedAttachment?);
          if (v86(v23))
          {
            uint64_t v54 = (uint64_t)v23;
            uint64_t v53 = v71;
            outlined init with take of PluginClientMetrics.ConnectionEstablishment?(v54, v71, &demangling cache variable for type metadata for UnencryptedAttachment?);
            uint64_t v52 = 0;
            uint64_t v49 = v92;
            goto LABEL_43;
          }
          uint64_t result = outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for UnencryptedAttachment?);
          int64_t v35 = v38;
          uint64_t v36 = (uint64_t)v90;
          if (v31) {
            goto LABEL_5;
          }
LABEL_7:
          int64_t v41 = v35 + 1;
          if (__OFADD__(v35, 1))
          {
            __break(1u);
            goto LABEL_51;
          }
          if (v41 >= v80)
          {
            int64_t v38 = v35;
            goto LABEL_12;
          }
          unint64_t v42 = *(void *)(v79 + 8 * v41);
          if (v42) {
            goto LABEL_10;
          }
          int64_t v38 = v35 + 2;
          if (v35 + 2 < v80) {
            break;
          }
          unint64_t v31 = 0;
          uint64_t i = 1;
          int64_t v38 = v35 + 1;
        }
        unint64_t v42 = *(void *)(v79 + 8 * v38);
        if (v42) {
          goto LABEL_22;
        }
        int64_t v51 = v35 + 3;
        if (v41 + 2 >= v80) {
          goto LABEL_12;
        }
        unint64_t v42 = *(void *)(v79 + 8 * v51);
        if (v42) {
          goto LABEL_26;
        }
        int64_t v38 = v41 + 3;
        if (v41 + 3 < v80) {
          break;
        }
        unint64_t v31 = 0;
        uint64_t i = 1;
        int64_t v38 = v41 + 2;
      }
      unint64_t v42 = *(void *)(v79 + 8 * v38);
      if (v42)
      {
LABEL_22:
        int64_t v41 = v38;
LABEL_10:
        unint64_t v31 = (v42 - 1) & v42;
        unint64_t v39 = __clz(__rbit64(v42)) + (v41 << 6);
        int64_t v38 = v41;
        goto LABEL_6;
      }
      if (v41 + 4 < v80) {
        break;
      }
LABEL_12:
      unint64_t v31 = 0;
      uint64_t i = 1;
    }
    unint64_t v42 = *(void *)(v79 + 8 * (v41 + 4));
    if (v42)
    {
      v41 += 4;
      goto LABEL_10;
    }
    int64_t v51 = v41 + 5;
    if (v41 + 5 < v80) {
      break;
    }
    unint64_t v31 = 0;
    int64_t v38 = v41 + 4;
  }
  unint64_t v42 = *(void *)(v79 + 8 * v51);
  if (v42)
  {
LABEL_26:
    int64_t v41 = v51;
    goto LABEL_10;
  }
  while (1)
  {
    int64_t v41 = v51 + 1;
    if (__OFADD__(v51, 1)) {
      break;
    }
    if (v41 >= v80)
    {
      unint64_t v31 = 0;
      uint64_t i = 1;
      int64_t v38 = v67;
      goto LABEL_13;
    }
    unint64_t v42 = *(void *)(v79 + 8 * v41);
    ++v51;
    if (v42) {
      goto LABEL_10;
    }
  }
LABEL_51:
  __break(1u);
  return result;
}

uint64_t Attachment.unencryptedAttachment.getter()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t Attachment.encryptionSlots.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

void default argument 2 of Attachment.MMCSMetadata.init(encryptedAssetSkeleton:assetSkeleton:status:ownerID:storageLocation:fileHash:refSignature:)(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0xF000000000000000;
}

uint64_t Attachment.MMCSMetadata.init(encryptedAssetSkeleton:assetSkeleton:status:ownerID:storageLocation:fileHash:refSignature:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, long long *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  long long v30 = *a4;
  uint64_t v19 = *((void *)a4 + 2);
  uint64_t v20 = type metadata accessor for AES.GCM.SealedBox();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(a9, a1, v20);
  uint64_t v21 = (int *)type metadata accessor for Attachment.MMCSMetadata(0);
  uint64_t v22 = (void *)(a9 + v21[5]);
  *uint64_t v22 = a2;
  v22[1] = a3;
  uint64_t v23 = a9 + v21[6];
  *(_OWORD *)uint64_t v23 = v30;
  *(void *)(v23 + 16) = v19;
  uint64_t v24 = (void *)(a9 + v21[7]);
  void *v24 = a5;
  v24[1] = a6;
  uint64_t v25 = a9 + v21[8];
  uint64_t v26 = type metadata accessor for URL();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 32))(v25, a7, v26);
  uint64_t v28 = (void *)(a9 + v21[9]);
  *uint64_t v28 = a8;
  v28[1] = a10;
  uint64_t v29 = (void *)(a9 + v21[10]);
  *uint64_t v29 = a11;
  v29[1] = a12;
  return result;
}

uint64_t Attachment.Metadata.init(developerMetadata:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t Attachment.__allocating_init(id:key:mmcsMetadata:metadata:dataCryptor:localParticipantID:config:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void *a5, uint64_t a6, unint64_t *a7)
{
  uint64_t v14 = swift_allocObject();
  Attachment.init(id:key:mmcsMetadata:metadata:dataCryptor:localParticipantID:config:)(a1, a2, a3, a4, a5, a6, a7);
  return v14;
}

uint64_t Attachment.update(_:)()
{
  if (one-time initialization token for attachment != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Log.attachment);
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    uint64_t v9 = v4;
    type metadata accessor for UUID();
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v1, v2, "Attempting to update attachment %s's MMCSMetadata", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v4, -1, -1);
    MEMORY[0x1B3EA39E0](v3, -1, -1);
  }
  else
  {

    uint64_t v7 = swift_release_n();
  }
  MEMORY[0x1F4188790](v7);
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t Attachment.$encryptionSlots.getter()
{
  return swift_endAccess();
}

uint64_t Attachment.update(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v74 = *(void *)(v2 - 8);
  uint64_t v75 = v2;
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  uint64_t v65 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v66 = (char *)&v60 - v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v71 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v68 = *(void *)(v8 - 8);
  uint64_t v69 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v72 = (uint64_t *)((char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  uint64_t v67 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v70 = (uint64_t)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v73 = (char *)&v60 - v19;
  uint64_t v20 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
  uint64_t v76 = *(void *)(v20 - 8);
  uint64_t v21 = *(void *)(v76 + 64);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v77 = (uint64_t)&v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v60 - v24;
  MEMORY[0x1F4188790](v23);
  uint64_t v27 = (char *)&v60 - v26;
  if (one-time initialization token for attachment != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  __swift_project_value_buffer(v28, (uint64_t)static Log.attachment);
  outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(a1, (uint64_t)v27, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
  uint64_t v78 = a1;
  outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(a1, (uint64_t)v25, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
  uint64_t v29 = Logger.logObject.getter();
  int v30 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v29, (os_log_type_t)v30))
  {
    int v63 = v30;
    os_log_t v64 = v29;
    uint64_t v31 = swift_slowAlloc();
    uint64_t v62 = swift_slowAlloc();
    aBlock[0] = v62;
    *(_DWORD *)uint64_t v31 = 134218242;
    uint64_t v32 = *((void *)v27 + 2);
    outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v27, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
    uint64_t v80 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v31 + 12) = 2080;
    uint64_t v33 = *(int *)(v20 + 28);
    long long v61 = v25;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v25[v33], (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v12, 1, v13) == 1)
    {
      *(_OWORD *)uint64_t v15 = xmmword_1B113B700;
      *((void *)v15 + 2) = 0;
      UnknownStorage.init()();
      uint64_t v34 = v68;
      uint64_t v35 = v69;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v68 + 56))(&v15[*(int *)(v13 + 28)], 1, 1, v69);
      outlined destroy of UUID?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
      uint64_t v36 = (uint64_t)v73;
      uint64_t v37 = (uint64_t)v71;
    }
    else
    {
      outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v12, (uint64_t)v15, type metadata accessor for AttachmentLedger_AttachmentEncryption);
      uint64_t v36 = (uint64_t)v73;
      uint64_t v37 = (uint64_t)v71;
      uint64_t v34 = v68;
      uint64_t v35 = v69;
    }
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v15[*(int *)(v13 + 28)], v37, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    int v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v37, 1, v35);
    uint64_t v39 = v79;
    int64_t v41 = v72;
    if (v40 == 1)
    {
      *(_OWORD *)uint64_t v72 = xmmword_1B113B700;
      UnknownStorage.init()();
      outlined destroy of UUID?(v37, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    }
    else
    {
      outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v37, (uint64_t)v72, type metadata accessor for AttachmentLedger_EncryptionID);
    }
    outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v15, type metadata accessor for AttachmentLedger_AttachmentEncryption);
    uint64_t v42 = *v41;
    unint64_t v43 = v41[1];
    outlined copy of Data._Representation(*v41, v43);
    outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v41, type metadata accessor for AttachmentLedger_EncryptionID);
    UUID.init(data:)(v42, v43, v36);
    uint64_t v44 = v70;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v36, v70, &demangling cache variable for type metadata for UUID?);
    uint64_t v46 = v74;
    uint64_t v45 = v75;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v44, 1, v75) == 1)
    {
      unint64_t v47 = 0xE300000000000000;
      uint64_t v48 = 7104878;
    }
    else
    {
      uint64_t v49 = v66;
      (*(void (**)(char *, uint64_t, uint64_t))(v46 + 32))(v66, v44, v45);
      (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v65, v49, v45);
      uint64_t v48 = String.init<A>(reflecting:)();
      unint64_t v47 = v50;
      (*(void (**)(char *, uint64_t))(v46 + 8))(v49, v45);
    }
    uint64_t v38 = v78;
    outlined destroy of UUID?(v36, &demangling cache variable for type metadata for UUID?);
    uint64_t v80 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v47, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v61, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
    os_log_t v51 = v64;
    _os_log_impl(&dword_1B0DF7000, v64, (os_log_type_t)v63, "Attempting to update attachment's encryption material for participant: %llu to SKI: %s", (uint8_t *)v31, 0x16u);
    uint64_t v52 = v62;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v52, -1, -1);
    MEMORY[0x1B3EA39E0](v31, -1, -1);
  }
  else
  {
    outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v27, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
    outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v25, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);

    uint64_t v38 = v78;
    uint64_t v39 = v79;
  }
  uint64_t v53 = *(NSObject **)(v39 + OBJC_IVAR____TtC14CopresenceCore10Attachment_queue);
  uint64_t v54 = v77;
  outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v38, v77, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
  unint64_t v55 = (*(unsigned __int8 *)(v76 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80);
  uint64_t v56 = swift_allocObject();
  *(void *)(v56 + 16) = v39;
  outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v54, v56 + v55, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
  uint64_t v57 = swift_allocObject();
  *(void *)(v57 + 16) = partial apply for closure #1 in Attachment.update(_:);
  *(void *)(v57 + 24) = v56;
  aBlock[4] = (uint64_t)partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v57;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_22;
  uint64_t v58 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v53, v58);
  _Block_release(v58);
  LOBYTE(v53) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v53) {
    __break(1u);
  }
  return result;
}

uint64_t UnencryptedAttachment.key.getter@<X0>(uint64_t a1@<X8>)
{
  return UnencryptedAttachment.key.getter(MEMORY[0x1E4F25000], a1);
}

uint64_t UnencryptedAttachment.key.setter(uint64_t a1)
{
  return UnencryptedAttachment.key.setter(a1, MEMORY[0x1E4F25000]);
}

uint64_t (*UnencryptedAttachment.key.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t UnencryptedAttachment.metadata.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for UnencryptedAttachment(0) + 20));
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  *a1 = *v3;
  a1[1] = v5;
  return outlined copy of Data?(v4, v5);
}

uint64_t UnencryptedAttachment.metadata.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = v1 + *(int *)(type metadata accessor for UnencryptedAttachment(0) + 20);
  uint64_t result = outlined consume of Data?(*(void *)v4, *(void *)(v4 + 8));
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + 8) = v3;
  return result;
}

uint64_t (*UnencryptedAttachment.metadata.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t UnencryptedAttachment.mmcsMetadata.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UnencryptedAttachment(0);
  return outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v1 + *(int *)(v3 + 24), a1, type metadata accessor for Attachment.MMCSMetadata);
}

uint64_t UnencryptedAttachment.mmcsMetadata.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for UnencryptedAttachment(0) + 24);
  return outlined assign with take of Attachment.MMCSMetadata(a1, v3);
}

uint64_t (*UnencryptedAttachment.mmcsMetadata.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t UnencryptedAttachment.encryptionSlots.getter()
{
  type metadata accessor for UnencryptedAttachment(0);
  return swift_bridgeObjectRetain();
}

uint64_t UnencryptedAttachment.encryptionSlots.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for UnencryptedAttachment(0) + 28);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*UnencryptedAttachment.encryptionSlots.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t UnencryptedAttachment.init(key:metadata:mmcsMetadata:encryptionSlots:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(a5, a1, v11);
  uint64_t v12 = (int *)type metadata accessor for UnencryptedAttachment(0);
  uint64_t result = outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(a3, a5 + v12[6], type metadata accessor for Attachment.MMCSMetadata);
  uint64_t v14 = (void *)(a5 + v12[5]);
  *uint64_t v14 = v9;
  v14[1] = v10;
  *(void *)(a5 + v12[7]) = a4;
  return result;
}

BOOL static Attachment.Errors.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void Attachment.Errors.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int Attachment.Errors.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t Attachment.UpdatingBlob.version.getter()
{
  return *(void *)v0;
}

uint64_t Attachment.UpdatingBlob.version.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*Attachment.UpdatingBlob.version.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t Attachment.UpdatingBlob.data.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  outlined copy of Data._Representation(v1, *(void *)(v0 + 16));
  return v1;
}

uint64_t Attachment.UpdatingBlob.data.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data._Representation(*(void *)(v2 + 8), *(void *)(v2 + 16));
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*Attachment.UpdatingBlob.data.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t Attachment.UpdatingBlob.init(data:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = result;
  a3[2] = a2;
  return result;
}

uint64_t Attachment.UpdatingBlob.init(version:data:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t Attachment.MMCSMetadata.encryptedAssetSkeleton.getter@<X0>(uint64_t a1@<X8>)
{
  return UnencryptedAttachment.key.getter(MEMORY[0x1E4F25088], a1);
}

uint64_t UnencryptedAttachment.key.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1(0);
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a2, v2, v4);
}

uint64_t Attachment.MMCSMetadata.encryptedAssetSkeleton.setter(uint64_t a1)
{
  return UnencryptedAttachment.key.setter(a1, MEMORY[0x1E4F25088]);
}

uint64_t UnencryptedAttachment.key.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = a2(0);
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v2, a1, v4);
}

uint64_t (*Attachment.MMCSMetadata.encryptedAssetSkeleton.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t Attachment.MMCSMetadata.assetSkeleton.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for Attachment.MMCSMetadata(0) + 20);
  uint64_t v2 = *(void *)v1;
  outlined copy of Data._Representation(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t Attachment.MMCSMetadata.assetSkeleton.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for Attachment.MMCSMetadata(0) + 20);
  uint64_t result = outlined consume of Data._Representation(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t (*Attachment.MMCSMetadata.assetSkeleton.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t Attachment.MMCSMetadata.status.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for Attachment.MMCSMetadata(0) + 24));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  unint64_t v6 = v3[2];
  *a1 = *v3;
  a1[1] = v5;
  a1[2] = v6;
  return outlined copy of Attachment.MMCSMetadata.UploadStatus(v4, v5, v6);
}

__n128 Attachment.MMCSMetadata.status.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Attachment.MMCSMetadata(0) + 24);
  outlined consume of Attachment.MMCSMetadata.UploadStatus(*(void *)v3, *(void *)(v3 + 8), *(void *)(v3 + 16));
  __n128 result = v5;
  *(__n128 *)uint64_t v3 = v5;
  *(void *)(v3 + 16) = v2;
  return result;
}

uint64_t (*Attachment.MMCSMetadata.status.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t Attachment.MMCSMetadata.ownerID.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Attachment.MMCSMetadata(0) + 28));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Attachment.MMCSMetadata.ownerID.setter(uint64_t a1, uint64_t a2)
{
  __n128 v5 = (void *)(v2 + *(int *)(type metadata accessor for Attachment.MMCSMetadata(0) + 28));
  uint64_t result = swift_bridgeObjectRelease();
  *__n128 v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*Attachment.MMCSMetadata.ownerID.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t Attachment.MMCSMetadata.storageLocation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Attachment.MMCSMetadata(0) + 32);
  uint64_t v4 = type metadata accessor for URL();
  __n128 v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t Attachment.MMCSMetadata.storageLocation.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Attachment.MMCSMetadata(0) + 32);
  uint64_t v4 = type metadata accessor for URL();
  __n128 v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*Attachment.MMCSMetadata.storageLocation.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t Attachment.MMCSMetadata.fileHash.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for Attachment.MMCSMetadata(0) + 36);
  uint64_t v2 = *(void *)v1;
  outlined copy of Data._Representation(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t Attachment.MMCSMetadata.fileHash.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for Attachment.MMCSMetadata(0) + 36);
  uint64_t result = outlined consume of Data._Representation(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t (*Attachment.MMCSMetadata.fileHash.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t Attachment.MMCSMetadata.refSignature.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for Attachment.MMCSMetadata(0) + 40);
  uint64_t v2 = *(void *)v1;
  outlined copy of Data._Representation(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t Attachment.MMCSMetadata.refSignature.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for Attachment.MMCSMetadata(0) + 40);
  uint64_t result = outlined consume of Data._Representation(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t (*Attachment.MMCSMetadata.refSignature.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t Attachment.Metadata.developerMetadata.getter()
{
  uint64_t v1 = *(void *)v0;
  outlined copy of Data?(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t Attachment.Metadata.developerMetadata.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data?(*(void *)v2, *(void *)(v2 + 8));
  *(void *)uint64_t v2 = a1;
  *(void *)(v2 + 8) = a2;
  return result;
}

uint64_t (*Attachment.Metadata.developerMetadata.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

double Attachment.Metadata.init()@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = xmmword_1B113B080;
  return result;
}

uint64_t Attachment.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14CopresenceCore10Attachment_id;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t Attachment.key.getter(uint64_t a1)
{
  v1[2] = a1;
  type metadata accessor for UnencryptedAttachment(0);
  uint64_t v2 = swift_task_alloc();
  v1[3] = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  v1[4] = v3;
  *uint64_t v3 = v1;
  v3[1] = Attachment.key.getter;
  return Attachment.waitForDecryption()(v2);
}

uint64_t Attachment.key.getter()
{
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = Attachment.key.getter;
  }
  else {
    uint64_t v2 = Attachment.key.getter;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(v1, v2, v3);
  outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v2, type metadata accessor for UnencryptedAttachment);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t Attachment.waitForDecryption()(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  uint64_t v3 = type metadata accessor for Attachment.EncryptedAttachmentStatus(0);
  v2[9] = v3;
  v2[10] = *(void *)(v3 - 8);
  v2[11] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Attachment.EncryptedAttachmentStatus?);
  v2[12] = swift_task_alloc();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>>);
  v2[13] = v4;
  v2[14] = *(void *)(v4 - 8);
  v2[15] = swift_task_alloc();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>>.Iterator);
  v2[16] = v5;
  v2[17] = *(void *)(v5 - 8);
  v2[18] = swift_task_alloc();
  return MEMORY[0x1F4188298](Attachment.waitForDecryption(), 0, 0);
}

uint64_t Attachment.waitForDecryption()()
{
  uint64_t v2 = v0[14];
  uint64_t v1 = v0[15];
  uint64_t v3 = v0[13];
  uint64_t v4 = (void *)(v0[8] + OBJC_IVAR____TtC14CopresenceCore10Attachment__status);
  swift_beginAccess();
  v0[5] = *v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>);
  uint64_t v6 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>);
  MEMORY[0x1B3EA1110](v5, v6);
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v7 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>>.Iterator);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[19] = v8;
  *uint64_t v8 = v0;
  v8[1] = Attachment.waitForDecryption();
  uint64_t v9 = v0[16];
  uint64_t v10 = v0[12];
  return MEMORY[0x1F4187C78](v10, v9, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = Attachment.waitForDecryption();
  }
  else {
    uint64_t v2 = Attachment.waitForDecryption();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  unsigned char *v2;
  int EnumCaseMultiPayload;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned char *v15;
  uint64_t v17;

  uint64_t v1 = v0[12];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[10] + 48))(v1, 1, v0[9]) == 1)
  {
    (*(void (**)(void, void))(v0[17] + 8))(v0[18], v0[16]);
    lazy protocol witness table accessor for type Attachment.Errors and conformance Attachment.Errors();
    swift_allocError();
    *uint64_t v2 = 6;
    swift_willThrow();
    goto LABEL_10;
  }
  outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v1, v0[11], type metadata accessor for Attachment.EncryptedAttachmentStatus);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v4 = v0[11];
      uint64_t v5 = v0[7];
      (*(void (**)(void, void))(v0[17] + 8))(v0[18], v0[16]);
      outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v4, v5, type metadata accessor for UnencryptedAttachment);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v6 = (uint64_t (*)(void))v0[1];
LABEL_11:
      return v6();
    }
    uint64_t v12 = v0[17];
    uint64_t v11 = v0[18];
    uint64_t v13 = v0[16];
    uint64_t v14 = v0[11];
    lazy protocol witness table accessor for type Attachment.Errors and conformance Attachment.Errors();
    swift_allocError();
    *uint64_t v15 = 5;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v14, type metadata accessor for Attachment.EncryptedAttachmentStatus);
LABEL_10:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    goto LABEL_11;
  }
  outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v0[11], type metadata accessor for AttachmentLedger_AttachmentMetadata);
  uint64_t v7 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>>.Iterator);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[19] = v8;
  *uint64_t v8 = v0;
  v8[1] = Attachment.waitForDecryption();
  uint64_t v9 = v0[16];
  uint64_t v10 = v0[12];
  return MEMORY[0x1F4187C78](v10, v9, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  *(void *)(v0 + 48) = *(void *)(v0 + 160);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v1 = MEMORY[0x1E4FBC248];
  uint64_t v2 = swift_dynamicCast();
  uint64_t v3 = MEMORY[0x1E4FBC278];
  return MEMORY[0x1F41868E8](v2, v1, v3);
}

uint64_t Attachment.mmcsMetadata.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Attachment.MMCSMetadata, Error>.Continuation.BufferingPolicy);
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Attachment.MMCSMetadata(0);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E4FBD120], v0);
  return AsyncThrowingStream.init<>(_:bufferingPolicy:_:)();
}

uint64_t closure #1 in Attachment.mmcsMetadata.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Attachment.MMCSMetadata, Error>.Continuation);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v11 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v12 = (char *)swift_allocObject();
  *((void *)v12 + 2) = 0;
  *((void *)v12 + 3) = 0;
  *((void *)v12 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v12[v11], (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in Attachment.mmcsMetadata.getter, (uint64_t)v12);
  return swift_release();
}

uint64_t closure #1 in closure #1 in Attachment.mmcsMetadata.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[9] = a4;
  v5[10] = a5;
  type metadata accessor for Attachment.MMCSMetadata(0);
  v5[11] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Attachment.MMCSMetadata, Error>.Continuation.YieldResult);
  v5[12] = v6;
  v5[13] = *(void *)(v6 - 8);
  v5[14] = swift_task_alloc();
  v5[15] = type metadata accessor for UnencryptedAttachment(0);
  v5[16] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Attachment.EncryptedAttachmentStatus(0);
  v5[17] = v7;
  v5[18] = *(void *)(v7 - 8);
  v5[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Attachment.EncryptedAttachmentStatus?);
  v5[20] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>>);
  v5[21] = v8;
  v5[22] = *(void *)(v8 - 8);
  v5[23] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>>.Iterator);
  v5[24] = v9;
  v5[25] = *(void *)(v9 - 8);
  v5[26] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in Attachment.mmcsMetadata.getter, 0, 0);
}

uint64_t closure #1 in closure #1 in Attachment.mmcsMetadata.getter()
{
  uint64_t v2 = v0[22];
  uint64_t v1 = v0[23];
  uint64_t v3 = v0[21];
  uint64_t v4 = (void *)(v0[9] + OBJC_IVAR____TtC14CopresenceCore10Attachment__status);
  swift_beginAccess();
  v0[5] = *v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>);
  uint64_t v6 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>);
  MEMORY[0x1B3EA1110](v5, v6);
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v7 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>>.Iterator);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[27] = v8;
  *uint64_t v8 = v0;
  v8[1] = closure #1 in closure #1 in Attachment.mmcsMetadata.getter;
  uint64_t v9 = v0[24];
  uint64_t v10 = v0[20];
  return MEMORY[0x1F4187C78](v10, v9, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 224) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in closure #1 in Attachment.mmcsMetadata.getter;
  }
  else {
    uint64_t v2 = closure #1 in closure #1 in Attachment.mmcsMetadata.getter;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned char *v20;
  uint64_t (*v21)(void);
  uint64_t v23;

  uint64_t v1 = v0[20];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[18] + 48))(v1, 1, v0[17]) == 1)
  {
    (*(void (**)(void, void))(v0[25] + 8))(v0[26], v0[24]);
    v0[7] = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Attachment.MMCSMetadata, Error>.Continuation);
LABEL_11:
    AsyncThrowingStream.Continuation.finish(throwing:)();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = (uint64_t (*)(void))v0[1];
    return v21();
  }
  outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v1, v0[19], type metadata accessor for Attachment.EncryptedAttachmentStatus);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      uint64_t v16 = v0[25];
      uint64_t v15 = v0[26];
      uint64_t v17 = v0[24];
      uint64_t v18 = v0[19];
      lazy protocol witness table accessor for type Attachment.Errors and conformance Attachment.Errors();
      uint64_t v19 = swift_allocError();
      NSObject *v20 = 5;
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
      outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v18, type metadata accessor for Attachment.EncryptedAttachmentStatus);
      v0[8] = v19;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Attachment.MMCSMetadata, Error>.Continuation);
      goto LABEL_11;
    }
    uint64_t v4 = v0[15];
    uint64_t v3 = v0[16];
    uint64_t v6 = v0[13];
    uint64_t v5 = v0[14];
    uint64_t v8 = v0[11];
    uint64_t v7 = v0[12];
    outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v0[19], v3, type metadata accessor for UnencryptedAttachment);
    outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v3 + *(int *)(v4 + 24), v8, type metadata accessor for Attachment.MMCSMetadata);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Attachment.MMCSMetadata, Error>.Continuation);
    AsyncThrowingStream.Continuation.yield(_:)();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    uint64_t v9 = type metadata accessor for UnencryptedAttachment;
    uint64_t v10 = v3;
  }
  else
  {
    uint64_t v10 = v0[19];
    uint64_t v9 = type metadata accessor for AttachmentLedger_AttachmentMetadata;
  }
  outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v10, v9);
  uint64_t v11 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>>.Iterator);
  uint64_t v12 = (void *)swift_task_alloc();
  v0[27] = v12;
  *uint64_t v12 = v0;
  v12[1] = closure #1 in closure #1 in Attachment.mmcsMetadata.getter;
  uint64_t v13 = v0[24];
  uint64_t v14 = v0[20];
  return MEMORY[0x1F4187C78](v14, v13, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  *(void *)(v0 + 48) = *(void *)(v0 + 224);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v1 = MEMORY[0x1E4FBC248];
  uint64_t v2 = swift_dynamicCast();
  uint64_t v3 = MEMORY[0x1E4FBC278];
  return MEMORY[0x1F41868E8](v2, v1, v3);
}

uint64_t Attachment.$status.getter()
{
  return swift_retain();
}

uint64_t Attachment.metadata.getter(uint64_t a1)
{
  v1[2] = a1;
  v1[3] = type metadata accessor for UnencryptedAttachment(0);
  uint64_t v2 = swift_task_alloc();
  v1[4] = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  v1[5] = v3;
  *uint64_t v3 = v1;
  v3[1] = Attachment.metadata.getter;
  return Attachment.waitForDecryption()(v2);
}

uint64_t Attachment.metadata.getter()
{
  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = Attachment.metadata.getter;
  }
  else {
    uint64_t v2 = Attachment.metadata.getter;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = v0[4];
  uint64_t v2 = (uint64_t *)v0[2];
  uint64_t v3 = (uint64_t *)(v1 + *(int *)(v0[3] + 20));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  outlined copy of Data?(*v3, v5);
  outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v1, type metadata accessor for UnencryptedAttachment);
  *uint64_t v2 = v4;
  v2[1] = v5;
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in Attachment.unencryptedAttachment.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Attachment.EncryptedAttachmentStatus(0);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v6 = type metadata accessor for AttachmentLedger_AttachmentMetadata;
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1) {
      return outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v4, a1, type metadata accessor for UnencryptedAttachment);
    }
    uint64_t v6 = type metadata accessor for Attachment.EncryptedAttachmentStatus;
  }
  outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v4, v6);
  lazy protocol witness table accessor for type Attachment.Errors and conformance Attachment.Errors();
  swift_allocError();
  *uint64_t v8 = 3;
  return swift_willThrow();
}

uint64_t type metadata accessor for UnencryptedAttachment(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for UnencryptedAttachment);
}

uint64_t Attachment.status.getter()
{
  return swift_release();
}

uint64_t key path getter for Attachment.encryptionSlots : Attachment@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for Attachment.encryptionSlots : Attachment()
{
  return static Published.subscript.setter();
}

uint64_t type metadata accessor for Attachment.MMCSMetadata(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for Attachment.MMCSMetadata);
}

uint64_t Attachment.encryptionSlots.setter()
{
  return static Published.subscript.setter();
}

void (*Attachment.encryptionSlots.modify(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return ConversationManagerClient.activeSessionContainer.modify;
}

uint64_t key path getter for Attachment.$encryptionSlots : Attachment()
{
  return swift_endAccess();
}

uint64_t key path setter for Attachment.$encryptionSlots : Attachment(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>.Publisher);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v11 - v7;
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v11 - v7, a1, v2);
  v9(v6, (uint64_t)v8, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t Attachment.$encryptionSlots.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>.Publisher);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*Attachment.$encryptionSlots.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>.Publisher);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  uint64_t v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC14CopresenceCore10Attachment__encryptionSlots;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>);
  Published.projectedValue.getter();
  swift_endAccess();
  return ActivitySession.$state.modify;
}

id Attachment.queue.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore10Attachment_queue);
}

uint64_t key path getter for Attachment.status : Attachment()
{
  return swift_release();
}

uint64_t key path setter for Attachment.status : Attachment(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Attachment.EncryptedAttachmentStatus(0);
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v9 - v6;
  outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(a1, (uint64_t)&v9 - v6, type metadata accessor for Attachment.EncryptedAttachmentStatus);
  swift_beginAccess();
  outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v7, (uint64_t)v5, type metadata accessor for Attachment.EncryptedAttachmentStatus);
  swift_retain();
  CurrentValueSubject.send(_:)();
  outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v5, type metadata accessor for Attachment.EncryptedAttachmentStatus);
  outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v7, type metadata accessor for Attachment.EncryptedAttachmentStatus);
  return swift_release();
}

uint64_t Attachment.status.setter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Attachment.EncryptedAttachmentStatus(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(a1, (uint64_t)v4, type metadata accessor for Attachment.EncryptedAttachmentStatus);
  swift_retain();
  CurrentValueSubject.send(_:)();
  outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v4, type metadata accessor for Attachment.EncryptedAttachmentStatus);
  outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(a1, type metadata accessor for Attachment.EncryptedAttachmentStatus);
  return swift_release();
}

void (*Attachment.status.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  size_t v4 = *(void *)(*(void *)(type metadata accessor for Attachment.EncryptedAttachmentStatus(0) - 8) + 64);
  v3[3] = malloc(v4);
  v3[4] = malloc(v4);
  uint64_t v5 = (void *)(v1 + OBJC_IVAR____TtC14CopresenceCore10Attachment__status);
  swift_beginAccess();
  v3[5] = *v5;
  swift_retain();
  CurrentValueSubject.value.getter();
  return Attachment.status.modify;
}

void Attachment.status.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 32);
  size_t v4 = *(void **)(*(void *)a1 + 24);
  if (a2)
  {
    outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(*(void *)(*(void *)a1 + 32), (uint64_t)v4, type metadata accessor for Attachment.EncryptedAttachmentStatus);
    CurrentValueSubject.send(_:)();
    outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v4, type metadata accessor for Attachment.EncryptedAttachmentStatus);
    swift_release();
    outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v3, type metadata accessor for Attachment.EncryptedAttachmentStatus);
  }
  else
  {
    CurrentValueSubject.send(_:)();
    outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v3, type metadata accessor for Attachment.EncryptedAttachmentStatus);
    swift_release();
  }
  free(v3);
  free(v4);
  free(v2);
}

uint64_t Attachment.dataCryptor.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of UserNotificationCenter(v1 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor, a1);
}

uint64_t Attachment.localParticipantID.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC14CopresenceCore10Attachment_localParticipantID);
}

__n128 Attachment.config.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1 + OBJC_IVAR____TtC14CopresenceCore10Attachment_config;
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC14CopresenceCore10Attachment_config + 8);
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC14CopresenceCore10Attachment_config + 16);
  *(void *)a1 = *(void *)(v1 + OBJC_IVAR____TtC14CopresenceCore10Attachment_config);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  __n128 result = *(__n128 *)(v2 + 24);
  *(__n128 *)(a1 + 24) = result;
  return result;
}

uint64_t Attachment.cryptorCancellables.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Attachment.cryptorCancellables.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC14CopresenceCore10Attachment_cryptorCancellables);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*Attachment.cryptorCancellables.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

uint64_t Attachment.localEncryptionUpdateTask.getter()
{
  return swift_retain();
}

uint64_t Attachment.localEncryptionUpdateTask.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC14CopresenceCore10Attachment_localEncryptionUpdateTask);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_release();
}

uint64_t (*Attachment.localEncryptionUpdateTask.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t Attachment.__allocating_init(id:attachment:dataCryptor:localParticipantID:config:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t a1), uint64_t *a5)
{
  uint64_t v10 = swift_allocObject();
  Attachment.init(id:attachment:dataCryptor:localParticipantID:config:)(a1, a2, a3, a4, a5);
  return v10;
}

uint64_t Attachment.init(id:attachment:dataCryptor:localParticipantID:config:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t a1), uint64_t *a5)
{
  uint64_t v6 = v5;
  unint64_t v81 = a4;
  uint64_t v82 = (void *)a3;
  uint64_t v101 = a2;
  uint64_t v9 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  uint64_t v99 = *(void *)(v9 - 8);
  uint64_t v98 = *(void *)(v99 + 64);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v97 = (uint64_t)v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v93 = (char *)v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<UUID, Never>, OS_dispatch_queue>);
  uint64_t v96 = *(void *)(v95 - 8);
  MEMORY[0x1F4188790](v95);
  uint64_t v94 = (char *)v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>.Publisher);
  uint64_t v91 = *(void *)(v92 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v92);
  int64_t v90 = (char *)v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v84 = (char *)v69 - v16;
  uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>, [UInt64 : AttachmentLedger_AttachmentEncryption]>);
  uint64_t v86 = *(void *)(v85 - 8);
  MEMORY[0x1F4188790](v85);
  uint64_t v83 = (char *)v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for Attachment.EncryptedAttachmentStatus(0);
  uint64_t v18 = MEMORY[0x1F4188790](v78);
  uint64_t v80 = (uint64_t)v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v79 = (uint64_t)v69 - v21;
  MEMORY[0x1F4188790](v20);
  uint64_t v73 = (uint64_t)v69 - v22;
  uint64_t v89 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v72 = *(void *)(v89 - 8);
  MEMORY[0x1F4188790](v89);
  uint64_t v71 = (char *)v69 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v70);
  v69[1] = (char *)v69 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v25 - 8);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>);
  uint64_t v77 = v26;
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26);
  uint64_t v29 = (char *)v69 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = *a5;
  uint64_t v30 = a5[1];
  uint64_t v74 = a5[2];
  uint64_t v31 = a5[3];
  uint64_t v32 = a5[4];
  uint64_t v33 = v6 + OBJC_IVAR____TtC14CopresenceCore10Attachment__encryptionSlots;
  uint64_t v34 = MEMORY[0x1E4FBC860];
  uint64_t aBlock = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64 : AttachmentLedger_AttachmentEncryption]);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(v33, v29, v26);
  *(void *)(v6 + OBJC_IVAR____TtC14CopresenceCore10Attachment_cryptorCancellables) = MEMORY[0x1E4FBC870];
  *(void *)(v6 + OBJC_IVAR____TtC14CopresenceCore10Attachment_localEncryptionUpdateTask) = 0;
  unint64_t v100 = type metadata accessor for OS_dispatch_queue();
  uint64_t aBlock = _typeName(_:qualified:)();
  uint64_t v103 = v35;
  v36._countAndFlagsBits = 45;
  v36._object = (void *)0xE100000000000000;
  String.append(_:)(v36);
  uint64_t v37 = type metadata accessor for UUID();
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  uint64_t v88 = a1;
  v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  uint64_t aBlock = v34;
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v72 + 104))(v71, *MEMORY[0x1E4FBCC58], v89);
  *(void *)(v6 + OBJC_IVAR____TtC14CopresenceCore10Attachment_queue) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v87 = v37;
  uint64_t v89 = *(void *)(v37 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v89 + 16))(v6 + OBJC_IVAR____TtC14CopresenceCore10Attachment_id, a1, v37);
  *(void *)(v6 + OBJC_IVAR____TtC14CopresenceCore10Attachment_localParticipantID) = v81;
  uint64_t v39 = v82;
  outlined init with copy of UserNotificationCenter((uint64_t)v82, v6 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor);
  uint64_t v40 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_AttachmentMetadata, attempt: Int))
               + 48);
  unint64_t v81 = type metadata accessor for AttachmentLedger_AttachmentMetadata;
  uint64_t v41 = v73;
  outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v101, v73, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  *(void *)(v41 + v40) = 0;
  swift_storeEnumTagMultiPayload();
  uint64_t v42 = (uint64_t *)(v6 + OBJC_IVAR____TtC14CopresenceCore10Attachment__status);
  swift_beginAccess();
  uint64_t v43 = v79;
  outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v41, v79, type metadata accessor for Attachment.EncryptedAttachmentStatus);
  outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v43, v80, type metadata accessor for Attachment.EncryptedAttachmentStatus);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>);
  swift_allocObject();
  uint64_t v44 = CurrentValueSubject.init(_:)();
  outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v43, type metadata accessor for Attachment.EncryptedAttachmentStatus);
  uint64_t *v42 = v44;
  outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v41, type metadata accessor for Attachment.EncryptedAttachmentStatus);
  swift_endAccess();
  uint64_t v45 = (void *)(v6 + OBJC_IVAR____TtC14CopresenceCore10Attachment_config);
  *uint64_t v45 = v75;
  v45[1] = v30;
  v45[2] = v74;
  v45[3] = v31;
  v45[4] = v32;
  uint64_t aBlock = *(void *)(v6 + OBJC_IVAR____TtC14CopresenceCore10Attachment__status);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>);
  swift_retain();
  uint64_t v46 = v83;
  Publisher.compactMap<A>(_:)();
  swift_release();
  swift_beginAccess();
  unint64_t v47 = v84;
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.CompactMap<CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>, [UInt64 : AttachmentLedger_AttachmentEncryption]> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>, [UInt64 : AttachmentLedger_AttachmentEncryption]>);
  uint64_t v48 = v85;
  Publisher<>.assign(to:)();
  (*(void (**)(char *, uint64_t))(v86 + 8))(v46, v48);
  uint64_t v49 = v91;
  uint64_t v50 = v92;
  (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v90, v47, v92);
  swift_beginAccess();
  Published.projectedValue.setter();
  swift_endAccess();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v47, v50);
  uint64_t v51 = v39[3];
  uint64_t v52 = v39[4];
  __swift_project_boxed_opaque_existential_1(v39, v51);
  uint64_t aBlock = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 16))(v51, v52);
  uint64_t v53 = OBJC_IVAR____TtC14CopresenceCore10Attachment_queue;
  *(void *)&long long v108 = *(void *)(v6 + OBJC_IVAR____TtC14CopresenceCore10Attachment_queue);
  uint64_t v54 = (void *)v108;
  uint64_t v55 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v56 = (uint64_t)v93;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v93, 1, 1, v55);
  id v57 = v54;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<UUID, Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<UUID, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<UUID, Never>);
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (void (*)(uint64_t))type metadata accessor for OS_dispatch_queue);
  uint64_t v58 = v94;
  Publisher.receive<A>(on:options:)();
  outlined destroy of UUID?(v56, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  swift_release();
  swift_allocObject();
  swift_weakInit();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<UUID, Never>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<UUID, Never>, OS_dispatch_queue>);
  uint64_t v59 = v95;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v96 + 8))(v58, v59);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v60 = *(NSObject **)(v6 + v53);
  uint64_t v61 = v101;
  uint64_t v62 = v97;
  outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v101, v97, v81);
  outlined init with copy of UserNotificationCenter((uint64_t)v39, (uint64_t)&v108);
  unint64_t v63 = (*(unsigned __int8 *)(v99 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80);
  unint64_t v64 = (v98 + v63 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v65 = swift_allocObject();
  outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v62, v65 + v63, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  *(void *)(v65 + v64) = v6;
  outlined init with take of BackgroundSessionManagerDataSource(&v108, v65 + ((v64 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v66 = swift_allocObject();
  *(void *)(v66 + 16) = partial apply for closure #3 in Attachment.init(id:attachment:dataCryptor:localParticipantID:config:);
  *(void *)(v66 + 24) = v65;
  uint64_t v106 = thunk for @callee_guaranteed () -> ()partial apply;
  uint64_t v107 = v66;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v103 = 1107296256;
  uint64_t v104 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v105 = &block_descriptor_26;
  uint64_t v67 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v60, v67);
  _Block_release(v67);
  outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v61, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v88, v87);
  LOBYTE(v60) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v60)
  {
    __break(1u);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v39);
    swift_release();
    return v6;
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Attachment.updateLocalEncryption()()
{
  uint64_t v2 = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (uint64_t *)((char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = *(void **)(v2 + OBJC_IVAR____TtC14CopresenceCore10Attachment_queue);
  *uint64_t v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E4FBCBF0], v6);
  id v11 = v10;
  char v12 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if (v12)
  {
    if (one-time initialization token for attachment == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Log.attachment);
  swift_retain_n();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    uint64_t v28 = v1;
    v29[0] = v17;
    uint64_t v18 = v17;
    uint64_t v27 = v5;
    *(_DWORD *)uint64_t v16 = 136315138;
    type metadata accessor for UUID();
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    v29[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v29);
    uint64_t v5 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B0DF7000, v14, v15, "Attempting to update local encryption for attachment %s", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v18, -1, -1);
    MEMORY[0x1B3EA39E0](v16, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  uint64_t v21 = (uint64_t *)(v2 + OBJC_IVAR____TtC14CopresenceCore10Attachment_localEncryptionUpdateTask);
  swift_beginAccess();
  uint64_t v22 = *v21;
  if (*v21)
  {
    swift_retain();
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    MEMORY[0x1B3EA1F30](v22, MEMORY[0x1E4FBC848] + 8, v23, MEMORY[0x1E4FBC0F0]);
    swift_release();
    uint64_t v22 = *v21;
  }
  uint64_t v24 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v5, 1, 1, v24);
  uint64_t v25 = (void *)swift_allocObject();
  v25[2] = 0;
  v25[3] = 0;
  _OWORD v25[4] = v22;
  v25[5] = v2;
  swift_retain();
  swift_retain();
  uint64_t *v21 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v5, (uint64_t)&async function pointer to partial apply for closure #1 in Attachment.updateLocalEncryption(), (uint64_t)v25);
  swift_release();
}

void closure #3 in Attachment.init(id:attachment:dataCryptor:localParticipantID:config:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v31 = a3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1F4188790](v4 - 8);
  v29[3] = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<[UUID], Never>, OS_dispatch_queue>);
  uint64_t v29[5] = *(void *)(v30 - 8);
  MEMORY[0x1F4188790](v30);
  v29[4] = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  uint64_t v7 = MEMORY[0x1F4188790](v32);
  uint64_t v9 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  id v11 = (char *)v29 - v10;
  if (one-time initialization token for attachment != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = __swift_project_value_buffer(v12, (uint64_t)static Log.attachment);
  outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(a1, (uint64_t)v11, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    v29[1] = v13;
    uint64_t v17 = (uint8_t *)v16;
    uint64_t v18 = swift_slowAlloc();
    v29[2] = v9;
    uint64_t v19 = v18;
    v34[0] = v18;
    *(_DWORD *)uint64_t v17 = 136315138;
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentMetadata);
    uint64_t v20 = Message.debugDescription.getter();
    uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v11, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    _os_log_impl(&dword_1B0DF7000, v14, v15, "Attempting to unpack attachment %s", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v19, -1, -1);
    MEMORY[0x1B3EA39E0](v17, -1, -1);
  }
  else
  {
    outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v11, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  }

  Attachment.unpack(attachment:)(a1);
  swift_retain_n();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    v34[0] = v25;
    *(_DWORD *)uint64_t v24 = 136315138;
    swift_retain();
    uint64_t v26 = Attachment.description.getter();
    unint64_t v28 = v27;
    swift_release();
    uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B0DF7000, v22, v23, "Successfully unpacked attachment %s", v24, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v25, -1, -1);
    MEMORY[0x1B3EA39E0](v24, -1, -1);
  }
  else
  {
    swift_release_n();
  }
}

uint64_t Attachment.unpack(attachment:)(uint64_t a1)
{
  uint64_t v58 = a1;
  uint64_t v48 = type metadata accessor for Attachment.EncryptedAttachmentStatus(0);
  uint64_t v2 = MEMORY[0x1F4188790](v48);
  uint64_t v51 = (uint64_t)v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2);
  uint64_t v50 = (uint64_t)v46 - v4;
  uint64_t v5 = type metadata accessor for UnencryptedAttachment(0);
  uint64_t v56 = *(void *)(v5 - 8);
  uint64_t v57 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v49 = (uint64_t)v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnencryptedAttachment?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v55 = (uint64_t)v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  id v11 = (char *)v46 - v10;
  uint64_t v47 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  uint64_t v53 = *(void *)(v47 - 8);
  uint64_t v12 = *(void *)(v53 + 64);
  uint64_t v13 = MEMORY[0x1F4188790](v47);
  uint64_t v54 = (uint64_t)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  os_log_type_t v15 = (char *)v46 - v14;
  uint64_t v16 = type metadata accessor for DispatchPredicate();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (void *)((char *)v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore10Attachment_queue);
  *uint64_t v19 = v20;
  (*(void (**)(void *, void, uint64_t))(v17 + 104))(v19, *MEMORY[0x1E4FBCBF0], v16);
  id v21 = v20;
  char v22 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v17 + 8))(v19, v16);
  if (v22)
  {
    uint64_t v52 = v1;
    if (one-time initialization token for attachment == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v23 = type metadata accessor for Logger();
  uint64_t v24 = __swift_project_value_buffer(v23, (uint64_t)static Log.attachment);
  outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v58, (uint64_t)v15, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  v46[1] = v24;
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    unint64_t v27 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    v46[0] = v11;
    uint64_t v29 = v28;
    v59[0] = v28;
    *(_DWORD *)unint64_t v27 = 136315138;
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentMetadata);
    uint64_t v30 = Message.debugDescription.getter();
    v60[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v15, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    _os_log_impl(&dword_1B0DF7000, v25, v26, "Attempting to unpack attachment %s", v27, 0xCu);
    swift_arrayDestroy();
    uint64_t v32 = v29;
    id v11 = (char *)v46[0];
    MEMORY[0x1B3EA39E0](v32, -1, -1);
    MEMORY[0x1B3EA39E0](v27, -1, -1);
  }
  else
  {
    outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v15, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  }

  uint64_t v33 = *(void *)(v58 + 16);
  uint64_t v34 = v54;
  outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v58, v54, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  unint64_t v35 = (*(unsigned __int8 *)(v53 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 16) = v52;
  outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v34, v36 + v35, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  v60[0] = v33;
  v60[1] = (uint64_t)partial apply for closure #1 in Attachment.unpack(attachment:);
  v60[2] = v36;
  v60[3] = (uint64_t)specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
  v60[4] = 0;
  uint64_t v60[5] = (uint64_t)specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
  v60[6] = 0;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized Sequence.first(where:)(v60, (uint64_t)v11);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v37 = v55;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v11, v55, &demangling cache variable for type metadata for UnencryptedAttachment?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v37, 1, v57) == 1)
  {
    outlined destroy of UUID?(v37, &demangling cache variable for type metadata for UnencryptedAttachment?);
    Swift::String v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl(&dword_1B0DF7000, v38, v39, "Failed to decrypt attachment", v40, 2u);
      MEMORY[0x1B3EA39E0](v40, -1, -1);
    }

    lazy protocol witness table accessor for type Attachment.Errors and conformance Attachment.Errors();
    swift_allocError();
    *uint64_t v41 = 0;
    swift_willThrow();
  }
  else
  {
    uint64_t v42 = v49;
    outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v37, v49, type metadata accessor for UnencryptedAttachment);
    uint64_t v43 = v50;
    outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v42, v50, type metadata accessor for UnencryptedAttachment);
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    uint64_t v44 = v51;
    outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v43, v51, type metadata accessor for Attachment.EncryptedAttachmentStatus);
    swift_retain();
    CurrentValueSubject.send(_:)();
    outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v44, type metadata accessor for Attachment.EncryptedAttachmentStatus);
    outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v43, type metadata accessor for Attachment.EncryptedAttachmentStatus);
    swift_release();
    outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v42, type metadata accessor for UnencryptedAttachment);
  }
  return outlined destroy of UUID?((uint64_t)v11, &demangling cache variable for type metadata for UnencryptedAttachment?);
}

uint64_t closure #1 in closure #3 in Attachment.init(id:attachment:dataCryptor:localParticipantID:config:)()
{
  uint64_t v0 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = &v15[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v3 = type metadata accessor for Attachment.EncryptedAttachmentStatus(0);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    id v11 = *(void **)(result + OBJC_IVAR____TtC14CopresenceCore10Attachment_queue);
    *uint64_t v9 = v11;
    (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E4FBCBF0], v6);
    id v12 = v11;
    LOBYTE(v11) = _dispatchPreconditionTest(_:)();
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v7 + 8))(v9, v6);
    if (v11)
    {
      swift_beginAccess();
      swift_retain();
      CurrentValueSubject.value.getter();
      swift_release();
      if (swift_getEnumCaseMultiPayload())
      {
        swift_release();
        uint64_t v13 = type metadata accessor for Attachment.EncryptedAttachmentStatus;
        uint64_t v14 = (uint64_t)v5;
      }
      else
      {
        outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v5, (uint64_t)v2, type metadata accessor for AttachmentLedger_AttachmentMetadata);
        Attachment.unpackAndRetry(attachment:)((uint64_t)v2);
        swift_release();
        uint64_t v13 = type metadata accessor for AttachmentLedger_AttachmentMetadata;
        uint64_t v14 = (uint64_t)v2;
      }
      return outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v14, v13);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

void Attachment.unpackAndRetry(attachment:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v65 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v65 - 8);
  MEMORY[0x1F4188790](v65);
  unint64_t v64 = (char *)v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v63 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v62 = (char *)v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = type metadata accessor for DispatchTime();
  uint64_t v61 = *(void *)(v68 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v68);
  uint64_t v59 = (char *)v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v60 = (char *)v56 - v10;
  uint64_t v69 = (void (*)(char *, uint64_t))type metadata accessor for Attachment.EncryptedAttachmentStatus(0);
  uint64_t v11 = MEMORY[0x1F4188790](v69);
  uint64_t v66 = (uint64_t)v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v67 = (uint64_t)v56 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)v56 - v15;
  uint64_t v17 = type metadata accessor for DispatchPredicate();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (void *)((char *)v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v21 = *(void **)(v2 + OBJC_IVAR____TtC14CopresenceCore10Attachment_queue);
  void *v20 = v21;
  (*(void (**)(void *, void, uint64_t))(v18 + 104))(v20, *MEMORY[0x1E4FBCBF0], v17);
  id v22 = v21;
  char v23 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v18 + 8))(v20, v17);
  if (v23)
  {
    Attachment.unpack(attachment:)(a1);
  }
  else
  {
    __break(1u);
    swift_once();
    uint64_t v24 = type metadata accessor for Logger();
    uint64_t v25 = __swift_project_value_buffer(v24, (uint64_t)static Log.attachment);
    swift_retain();
    os_log_type_t v26 = v20;
    swift_retain();
    unint64_t v27 = v20;
    v56[0] = v25;
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    BOOL v30 = os_log_type_enabled(v28, v29);
    uint64_t v57 = v4;
    uint64_t v58 = a1;
    v56[1] = v22;
    if (v30)
    {
      uint64_t v31 = swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      aBlock[0] = v32;
      *(_DWORD *)uint64_t v31 = 136315394;
      type metadata accessor for UUID();
      _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v31 + 12) = 2080;
      uint64_t v72 = (uint64_t)v20;
      unint64_t v35 = v20;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v36 = String.init<A>(reflecting:)();
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B0DF7000, v28, v29, "Failed to unpack attachment %s, reason: %s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v32, -1, -1);
      MEMORY[0x1B3EA39E0](v31, -1, -1);
    }
    else
    {
      swift_release_n();
    }
    swift_beginAccess();
    swift_retain();
    CurrentValueSubject.value.getter();
    swift_release();
    if (swift_getEnumCaseMultiPayload())
    {

      outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v16, type metadata accessor for Attachment.EncryptedAttachmentStatus);
    }
    else
    {
      uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_AttachmentMetadata, attempt: Int));
      uint64_t v39 = *(void *)&v16[*(int *)(v38 + 48)];
      outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v16, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      uint64_t v40 = v2 + OBJC_IVAR____TtC14CopresenceCore10Attachment_config;
      if (v39 >= *(void *)(v2 + OBJC_IVAR____TtC14CopresenceCore10Attachment_config + 16))
      {
        uint64_t v51 = Logger.logObject.getter();
        os_log_type_t v52 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v51, v52))
        {
          uint64_t v53 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v53 = 0;
          _os_log_impl(&dword_1B0DF7000, v51, v52, "Exceeded retry attempts.", v53, 2u);
          MEMORY[0x1B3EA39E0](v53, -1, -1);
        }

        uint64_t v54 = v67;
        outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v58, v67, type metadata accessor for AttachmentLedger_AttachmentMetadata);
        swift_storeEnumTagMultiPayload();
        uint64_t v55 = v66;
        outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v54, v66, type metadata accessor for Attachment.EncryptedAttachmentStatus);
        swift_retain();
        CurrentValueSubject.send(_:)();
        outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v55, type metadata accessor for Attachment.EncryptedAttachmentStatus);
        outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v54, type metadata accessor for Attachment.EncryptedAttachmentStatus);
        swift_release();
      }
      else
      {
        uint64_t v41 = *(int *)(v38 + 48);
        uint64_t v42 = v67;
        outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v58, v67, type metadata accessor for AttachmentLedger_AttachmentMetadata);
        *(void *)(v42 + v41) = v39 + 1;
        swift_storeEnumTagMultiPayload();
        uint64_t v43 = v66;
        outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v42, v66, type metadata accessor for Attachment.EncryptedAttachmentStatus);
        swift_retain();
        CurrentValueSubject.send(_:)();
        outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v43, type metadata accessor for Attachment.EncryptedAttachmentStatus);
        outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v42, type metadata accessor for Attachment.EncryptedAttachmentStatus);
        swift_release();
        uint64_t v44 = v59;
        static DispatchTime.now()();
        uint64_t v45 = v60;
        MEMORY[0x1B3EA17C0](v44, *(double *)(v40 + 24));
        uint64_t v69 = *(void (**)(char *, uint64_t))(v61 + 8);
        v69(v44, v68);
        uint64_t v46 = swift_allocObject();
        swift_weakInit();
        aBlock[4] = (uint64_t)partial apply for closure #1 in Attachment.unpackAndRetry(attachment:);
        aBlock[5] = v46;
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
        aBlock[3] = (uint64_t)&block_descriptor_37;
        uint64_t v47 = _Block_copy(aBlock);
        swift_retain();
        uint64_t v48 = v62;
        static DispatchQoS.unspecified.getter();
        uint64_t v70 = MEMORY[0x1E4FBC860];
        _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
        uint64_t v49 = v64;
        uint64_t v50 = v65;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        MEMORY[0x1B3EA2180](v45, v48, v49, v47);
        _Block_release(v47);

        (*(void (**)(char *, uint64_t))(v57 + 8))(v49, v50);
        (*(void (**)(char *, void))(v63 + 8))(v48, v56[2]);
        v69(v45, v68);
        swift_release();
        swift_release();
      }
    }
  }
}

void *Attachment.init(id:key:mmcsMetadata:metadata:dataCryptor:localParticipantID:config:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void *a5, uint64_t a6, unint64_t *a7)
{
  uint64_t v8 = v7;
  uint64_t v136 = a2;
  uint64_t v137 = a6;
  v142 = a5;
  uint64_t v143 = a1;
  uint64_t v140 = a3;
  uint64_t v11 = *v8;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v119 = (char *)&v103 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<UUID, Never>, OS_dispatch_queue>);
  uint64_t v121 = *(void *)(v122 - 8);
  MEMORY[0x1F4188790](v122);
  uint64_t v120 = (char *)&v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>.Publisher);
  uint64_t v117 = *(void *)(v118 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v118);
  uint64_t v115 = (char *)&v103 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v116 = (char *)&v103 - v17;
  uint64_t v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>, [UInt64 : AttachmentLedger_AttachmentEncryption]>);
  uint64_t v113 = *(void *)(v114 - 8);
  MEMORY[0x1F4188790](v114);
  Swift::String v112 = (char *)&v103 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Attachment.MMCSMetadata(0);
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v131 = (uint64_t)&v103 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = type metadata accessor for SymmetricKey();
  uint64_t v141 = *(void *)(v139 - 8);
  MEMORY[0x1F4188790](v139);
  uint64_t v130 = (char *)&v103 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v107 = type metadata accessor for Attachment.EncryptedAttachmentStatus(0);
  uint64_t v22 = MEMORY[0x1F4188790](v107);
  uint64_t v109 = (uint64_t)&v103 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v110 = (uint64_t)&v103 - v25;
  MEMORY[0x1F4188790](v24);
  long long v108 = (char *)&v103 - v26;
  uint64_t v27 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v134 = *(void *)(v27 - 8);
  uint64_t v135 = (void *)v27;
  MEMORY[0x1F4188790](v27);
  v133 = (char *)&v103 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v124);
  uint64_t v123 = (char *)&v103 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v30 - 8);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>);
  uint64_t v32 = *(void *)(v31 - 8);
  MEMORY[0x1F4188790](v31);
  unint64_t v34 = (char *)&v103 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = *a4;
  unint64_t v128 = a4[1];
  unint64_t v126 = *a7;
  unint64_t v35 = a7[1];
  uint64_t v125 = (uint64_t *)a7[2];
  unint64_t v36 = a7[3];
  unint64_t v37 = a7[4];
  uint64_t v38 = (char *)v8 + OBJC_IVAR____TtC14CopresenceCore10Attachment__encryptionSlots;
  unint64_t v39 = MEMORY[0x1E4FBC860];
  unint64_t v145 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64 : AttachmentLedger_AttachmentEncryption]);
  Published.init(initialValue:)();
  uint64_t v105 = v32;
  uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
  uint64_t v104 = v38;
  uint64_t v132 = v31;
  v40(v38, v34, v31);
  *(void *)((char *)v8 + OBJC_IVAR____TtC14CopresenceCore10Attachment_cryptorCancellables) = MEMORY[0x1E4FBC870];
  *(void *)((char *)v8 + OBJC_IVAR____TtC14CopresenceCore10Attachment_localEncryptionUpdateTask) = 0;
  unint64_t v138 = type metadata accessor for OS_dispatch_queue();
  uint64_t v111 = v11;
  unint64_t v145 = _typeName(_:qualified:)();
  unint64_t v146 = v41;
  v42._countAndFlagsBits = 45;
  v42._object = (void *)0xE100000000000000;
  String.append(_:)(v42);
  uint64_t v43 = type metadata accessor for UUID();
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  v44._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v44);
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  unint64_t v145 = v39;
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, void *))(v134 + 104))(v133, *MEMORY[0x1E4FBCC58], v135);
  uint64_t v45 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v124 = OBJC_IVAR____TtC14CopresenceCore10Attachment_queue;
  *(void *)((char *)v8 + OBJC_IVAR____TtC14CopresenceCore10Attachment_queue) = v45;
  v133 = *(char **)(v43 - 8);
  uint64_t v46 = (void (*)(void))*((void *)v133 + 2);
  uint64_t v123 = (char *)v8 + OBJC_IVAR____TtC14CopresenceCore10Attachment_id;
  uint64_t v134 = v43;
  v46();
  *(void *)((char *)v8 + OBJC_IVAR____TtC14CopresenceCore10Attachment_localParticipantID) = v137;
  unint64_t v47 = (unint64_t)v8 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor;
  uint64_t v48 = v142;
  outlined init with copy of UserNotificationCenter((uint64_t)v142, (uint64_t)v8 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor);
  uint64_t v135 = v8;
  uint64_t v49 = (void *)((char *)v8 + OBJC_IVAR____TtC14CopresenceCore10Attachment_config);
  *uint64_t v49 = v126;
  v49[1] = v35;
  v49[2] = v125;
  v49[3] = v36;
  v49[4] = v37;
  uint64_t v50 = v48;
  uint64_t v51 = v48[3];
  uint64_t v52 = v50[4];
  __swift_project_boxed_opaque_existential_1(v50, v51);
  uint64_t v53 = v136;
  uint64_t v54 = v129;
  SymmetricKey.withUnsafeBytes<A>(_:)();
  uint64_t v55 = v145;
  unint64_t v56 = v146;
  uint64_t v57 = (*(uint64_t (**)(unint64_t, unint64_t, void, uint64_t, uint64_t))(v52 + 56))(v145, v146, 0, v51, v52);
  unint64_t v59 = v58;
  outlined consume of Data._Representation(v55, v56);
  if (v59 >> 60 == 15)
  {
    unint64_t v138 = v47;
    uint64_t v60 = v139;
    uint64_t v61 = v142;
    uint64_t v62 = v143;
    uint64_t v63 = v135;
    outlined consume of Data?(v127, v128);
    if (one-time initialization token for attachment != -1) {
      swift_once();
    }
    uint64_t v64 = type metadata accessor for Logger();
    __swift_project_value_buffer(v64, (uint64_t)static Log.attachment);
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v67 = 0;
      _os_log_impl(&dword_1B0DF7000, v65, v66, "Failed to encrypt the asset's key", v67, 2u);
      MEMORY[0x1B3EA39E0](v67, -1, -1);
    }

    lazy protocol witness table accessor for type Attachment.Errors and conformance Attachment.Errors();
    uint64_t v68 = swift_allocError();
    *uint64_t v69 = 2;
    uint64_t v137 = v68;
    swift_willThrow();
    outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v140, type metadata accessor for Attachment.MMCSMetadata);
    (*(void (**)(uint64_t, uint64_t))(v141 + 8))(v53, v60);
    uint64_t v70 = v134;
    uint64_t v71 = (void (*)(uint64_t, uint64_t))*((void *)v133 + 1);
    v71(v62, v134);
    v71((uint64_t)v123, v70);
    (*(void (**)(char *, uint64_t))(v105 + 8))(v104, v132);

    __swift_destroy_boxed_opaque_existential_1Tm(v138);
    swift_bridgeObjectRelease();
    swift_release();
    swift_deallocPartialClassInstance();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v61);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v141 + 16))(v130, v53, v139);
    outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v140, v131, type metadata accessor for Attachment.MMCSMetadata);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UInt64, AttachmentLedger_AttachmentEncryption)>);
    uint64_t v129 = v57;
    uint64_t v72 = *(unsigned __int8 *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt64, AttachmentLedger_AttachmentEncryption))
                                         - 8)
                             + 80);
    unint64_t v73 = v59;
    unint64_t v126 = v59;
    uint64_t v74 = (v72 + 32) & ~v72;
    uint64_t v75 = swift_allocObject();
    *(_OWORD *)(v75 + 16) = xmmword_1B1138A80;
    *(void *)(v75 + v74) = v137;
    uint64_t v76 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
    uint64_t v125 = &v103;
    MEMORY[0x1F4188790](v76);
    *(&v103 - 4) = (uint64_t)v142;
    *(&v103 - 3) = v57;
    *(&v103 - 2) = v73;
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentEncryption);
    static Message.with(_:)();
    uint64_t v137 = v54;
    unint64_t v77 = specialized Dictionary.init(dictionaryLiteral:)(v75);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    uint64_t v78 = (uint64_t)v108;
    uint64_t v79 = v139;
    (*(void (**)(char *, char *, uint64_t))(v141 + 32))(v108, v130, v139);
    uint64_t v80 = (int *)type metadata accessor for UnencryptedAttachment(0);
    outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v131, v78 + v80[6], type metadata accessor for Attachment.MMCSMetadata);
    unint64_t v81 = (void *)(v78 + v80[5]);
    unint64_t v82 = v128;
    *unint64_t v81 = v127;
    v81[1] = v82;
    *(void *)(v78 + v80[7]) = v77;
    swift_storeEnumTagMultiPayload();
    uint64_t v83 = v135;
    uint64_t v84 = (void *)((char *)v135 + OBJC_IVAR____TtC14CopresenceCore10Attachment__status);
    swift_beginAccess();
    uint64_t v85 = v110;
    outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v78, v110, type metadata accessor for Attachment.EncryptedAttachmentStatus);
    outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v85, v109, type metadata accessor for Attachment.EncryptedAttachmentStatus);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>);
    swift_allocObject();
    uint64_t v86 = CurrentValueSubject.init(_:)();
    outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v85, type metadata accessor for Attachment.EncryptedAttachmentStatus);
    uint64_t *v84 = v86;
    outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v78, type metadata accessor for Attachment.EncryptedAttachmentStatus);
    swift_endAccess();
    unint64_t v145 = *v84;
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>);
    swift_retain();
    uint64_t v87 = v112;
    Publisher.compactMap<A>(_:)();
    swift_release();
    swift_beginAccess();
    uint64_t v88 = v116;
    Published.projectedValue.getter();
    swift_endAccess();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.CompactMap<CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>, [UInt64 : AttachmentLedger_AttachmentEncryption]> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<CurrentValueSubject<Attachment.EncryptedAttachmentStatus, Never>, [UInt64 : AttachmentLedger_AttachmentEncryption]>);
    uint64_t v89 = v114;
    Publisher<>.assign(to:)();
    (*(void (**)(char *, uint64_t))(v113 + 8))(v87, v89);
    uint64_t v90 = v117;
    uint64_t v91 = v118;
    (*(void (**)(char *, char *, uint64_t))(v117 + 16))(v115, v88, v118);
    swift_beginAccess();
    Published.projectedValue.setter();
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v90 + 8))(v88, v91);
    uint64_t v92 = v142;
    uint64_t v93 = v142[3];
    uint64_t v94 = v142[4];
    __swift_project_boxed_opaque_existential_1(v142, v93);
    uint64_t v95 = (*(uint64_t (**)(uint64_t, uint64_t))(v94 + 16))(v93, v94);
    id v144 = *(id *)((char *)v83 + OBJC_IVAR____TtC14CopresenceCore10Attachment_queue);
    id v96 = v144;
    unint64_t v145 = v95;
    uint64_t v97 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    uint64_t v98 = (uint64_t)v119;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v97 - 8) + 56))(v119, 1, 1, v97);
    id v99 = v96;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<UUID, Never>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<UUID, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<UUID, Never>);
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (void (*)(uint64_t))type metadata accessor for OS_dispatch_queue);
    unint64_t v100 = v120;
    Publisher.receive<A>(on:options:)();
    outlined destroy of UUID?(v98, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

    swift_release();
    swift_allocObject();
    swift_weakInit();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<UUID, Never>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<UUID, Never>, OS_dispatch_queue>);
    uint64_t v101 = v122;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v121 + 8))(v100, v101);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    outlined consume of Data?(v129, v126);
    swift_release();
    outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v140, type metadata accessor for Attachment.MMCSMetadata);
    (*(void (**)(uint64_t, uint64_t))(v141 + 8))(v136, v79);
    (*((void (**)(uint64_t, uint64_t))v133 + 1))(v143, v134);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v92);
    return v83;
  }
  return v63;
}

uint64_t closure #1 in Attachment.init(id:key:mmcsMetadata:metadata:dataCryptor:localParticipantID:config:)(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = &v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = a2;
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_EncryptionID);
  static Message.with(_:)();
  uint64_t v12 = (uint64_t)a1 + *(int *)(type metadata accessor for AttachmentLedger_AttachmentEncryption(0) + 28);
  outlined destroy of UUID?(v12, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v11, v12, type metadata accessor for AttachmentLedger_EncryptionID);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v12, 0, 1, v8);
  uint64_t v13 = *a1;
  unint64_t v14 = a1[1];
  outlined copy of Data._Representation(a3, a4);
  uint64_t result = outlined consume of Data._Representation(v13, v14);
  *a1 = a3;
  a1[1] = a4;
  return result;
}

uint64_t closure #1 in closure #1 in Attachment.init(id:key:mmcsMetadata:metadata:dataCryptor:localParticipantID:config:)(uint64_t a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a2[3];
  uint64_t v9 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v8);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
  uint64_t v23 = UUID.uuid.getter();
  char v24 = v10;
  char v25 = v11;
  char v26 = v12;
  char v27 = v13;
  char v28 = v14;
  char v29 = v15;
  char v30 = v16;
  char v31 = v17;
  uint64_t v18 = specialized Data.init<A>(_:)((uint64_t)&v23, (uint64_t)&v32);
  uint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t result = outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  *(void *)a1 = v18;
  *(void *)(a1 + 8) = v20;
  return result;
}

uint64_t closure #1 in Attachment.init(id:attachment:dataCryptor:localParticipantID:config:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UnencryptedAttachment(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Attachment.EncryptedAttachmentStatus(0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  MEMORY[0x1F4188790](v10 - 8);
  char v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(a1, (uint64_t)v9, type metadata accessor for Attachment.EncryptedAttachmentStatus);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v9, (uint64_t)v6, type metadata accessor for UnencryptedAttachment);
    uint64_t v13 = *(void *)&v6[*(int *)(v4 + 28)];
    swift_bridgeObjectRetain();
    char v14 = type metadata accessor for UnencryptedAttachment;
    uint64_t v15 = (uint64_t)v6;
  }
  else
  {
    outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v9, (uint64_t)v12, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    uint64_t v13 = *((void *)v12 + 2);
    swift_bridgeObjectRetain();
    char v14 = type metadata accessor for AttachmentLedger_AttachmentMetadata;
    uint64_t v15 = (uint64_t)v12;
  }
  uint64_t result = outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v15, v14);
  *a2 = v13;
  return result;
}

void closure #2 in Attachment.init(id:attachment:dataCryptor:localParticipantID:config:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v54 = &v46[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = &v46[-v7];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v52 = &v46[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v53 = &v46[-v14];
  MEMORY[0x1F4188790](v13);
  char v16 = &v46[-v15];
  uint64_t v55 = a2 + 16;
  if (one-time initialization token for attachment != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = __swift_project_value_buffer(v17, (uint64_t)static Log.attachment);
  uint64_t v19 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v10 + 16);
  v19(v16, a1, v9);
  swift_retain_n();
  uint64_t v20 = Logger.logObject.getter();
  int v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, (os_log_type_t)v21))
  {
    os_log_t v49 = v20;
    uint64_t v50 = a2;
    uint64_t v51 = v18;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v48 = swift_slowAlloc();
    v58[0] = v48;
    *(_DWORD *)uint64_t v22 = 136315394;
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v19(v8, Strong + OBJC_IVAR____TtC14CopresenceCore10Attachment_id, v9);
      swift_release();
      uint64_t v24 = 0;
    }
    else
    {
      uint64_t v24 = 1;
    }
    LODWORD(v25) = v21;
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, v24, 1, v9);
    char v26 = v54;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v8, (uint64_t)v54, &demangling cache variable for type metadata for UUID?);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48))(v26, 1, v9) == 1)
    {
      unint64_t v27 = 0xE300000000000000;
      uint64_t v28 = 7104878;
    }
    else
    {
      char v29 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32);
      int v47 = (int)v25;
      char v25 = v53;
      v29(v53, v26, v9);
      v19(v52, (uint64_t)v25, v9);
      uint64_t v28 = String.init<A>(reflecting:)();
      unint64_t v27 = v30;
      char v31 = v25;
      LOBYTE(v25) = v47;
      (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v31, v9);
    }
    outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for UUID?);
    uint64_t v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v27, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v22 + 12) = 2080;
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v16, v9);
    os_log_t v34 = v49;
    _os_log_impl(&dword_1B0DF7000, v49, (os_log_type_t)v25, "%s observed local encryptionID updated to %s", (uint8_t *)v22, 0x16u);
    uint64_t v35 = v48;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v35, -1, -1);
    MEMORY[0x1B3EA39E0](v22, -1, -1);
  }
  else
  {
    swift_release_n();
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v16, v9);
  }
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    Attachment.updateLocalEncryption()();
    if (v36)
    {
      swift_release();
      id v37 = v36;
      id v38 = v36;
      unint64_t v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v39, v40))
      {
        unint64_t v41 = (uint8_t *)swift_slowAlloc();
        uint64_t v42 = swift_slowAlloc();
        uint64_t v56 = (uint64_t)v36;
        uint64_t v57 = v42;
        *(_DWORD *)unint64_t v41 = 136315138;
        id v43 = v36;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        uint64_t v44 = String.init<A>(reflecting:)();
        uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, &v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1B0DF7000, v39, v40, "Failed to update localEncryption, error=%s", v41, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v42, -1, -1);
        MEMORY[0x1B3EA39E0](v41, -1, -1);
      }
      else
      {
      }
    }
    else
    {
      swift_release();
    }
  }
}

uint64_t closure #1 in Attachment.unpackAndRetry(attachment:)()
{
  uint64_t v0 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = &v14[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v3 = type metadata accessor for Attachment.EncryptedAttachmentStatus(0);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v7 = result;
    swift_beginAccess();
    swift_retain();
    CurrentValueSubject.value.getter();
    swift_release();
    if (swift_getEnumCaseMultiPayload())
    {
      swift_release();
      uint64_t v8 = type metadata accessor for Attachment.EncryptedAttachmentStatus;
      uint64_t v9 = (uint64_t)v5;
    }
    else
    {
      outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v5, (uint64_t)v2, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      uint64_t v10 = *(void *)(v7 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor + 24);
      uint64_t v11 = *(void *)(v7 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor + 32);
      __swift_project_boxed_opaque_existential_1((void *)(v7 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor), v10);
      uint64_t v12 = swift_bridgeObjectRetain();
      uint64_t v13 = specialized _copyCollectionToContiguousArray<A>(_:)(v12);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 72))(v13, v10, v11);
      swift_release();
      swift_release();
      uint64_t v8 = type metadata accessor for AttachmentLedger_AttachmentMetadata;
      uint64_t v9 = (uint64_t)v2;
    }
    return outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v9, v8);
  }
  return result;
}

uint64_t closure #1 in Attachment.unpack(attachment:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  v321 = a3;
  uint64_t v332 = a2;
  uint64_t v335 = a4;
  uint64_t v5 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  uint64_t v333 = *(void *)(v5 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v5);
  uint64_t v328 = (uint64_t)&v282 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v329 = (uint64_t)&v282 - v9;
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v330 = (uint64_t)&v282 - v11;
  MEMORY[0x1F4188790](v10);
  v338 = (char *)&v282 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  uint64_t v14 = MEMORY[0x1F4188790](v13 - 8);
  uint64_t v312 = (uint64_t)&v282 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  unint64_t v323 = (unint64_t)&v282 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v331 = (uint64_t)&v282 - v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v334 = (uint64_t)&v282 - v21;
  MEMORY[0x1F4188790](v20);
  v286 = (char *)&v282 - v22;
  uint64_t v23 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1F4188790](v23 - 8);
  v294 = (char *)&v282 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v295 = type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata();
  MEMORY[0x1F4188790](v295);
  uint64_t v298 = (uint64_t)&v282 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v293 = type metadata accessor for Attachment.MMCSMetadata(0);
  MEMORY[0x1F4188790](v293);
  uint64_t v297 = (uint64_t)&v282 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v317 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  MEMORY[0x1F4188790](v317);
  uint64_t v301 = (uint64_t)&v282 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1F4188790](v28 - 8);
  v304 = (char *)&v282 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v307 = type metadata accessor for URL();
  uint64_t v308 = *(void *)(v307 - 8);
  uint64_t v30 = MEMORY[0x1F4188790](v307);
  v300 = (char *)&v282 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  v305 = (char *)&v282 - v32;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  MEMORY[0x1F4188790](v33 - 8);
  uint64_t v315 = (uint64_t)&v282 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v319 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  uint64_t v318 = *(void *)(v319 - 8);
  MEMORY[0x1F4188790](v319);
  v316 = (uint64_t *)((char *)&v282 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  uint64_t v37 = MEMORY[0x1F4188790](v36 - 8);
  uint64_t v299 = (uint64_t)&v282 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  uint64_t v292 = (uint64_t)&v282 - v40;
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  v289 = (char *)&v282 - v42;
  uint64_t v43 = MEMORY[0x1F4188790](v41);
  uint64_t v291 = (uint64_t)&v282 - v44;
  uint64_t v45 = MEMORY[0x1F4188790](v43);
  v306 = (void (*)(char *, uint64_t, uint64_t))((char *)&v282 - v46);
  MEMORY[0x1F4188790](v45);
  uint64_t v322 = (uint64_t)&v282 - v47;
  uint64_t v326 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  uint64_t v325 = *(void *)(v326 - 8);
  uint64_t v48 = MEMORY[0x1F4188790](v326);
  v296 = (uint64_t *)((char *)&v282 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v50 = MEMORY[0x1F4188790](v48);
  v290 = (uint64_t *)((char *)&v282 - v51);
  uint64_t v52 = MEMORY[0x1F4188790](v50);
  v288 = (char *)&v282 - v53;
  uint64_t v54 = MEMORY[0x1F4188790](v52);
  v287 = (uint64_t *)((char *)&v282 - v55);
  uint64_t v56 = MEMORY[0x1F4188790](v54);
  v303 = (uint64_t *)((char *)&v282 - v57);
  MEMORY[0x1F4188790](v56);
  v324 = (uint64_t *)((char *)&v282 - v58);
  uint64_t v311 = type metadata accessor for AES.GCM.SealedBox();
  uint64_t v310 = *(void *)(v311 - 8);
  uint64_t v59 = MEMORY[0x1F4188790](v311);
  v302 = (char *)&v282 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = MEMORY[0x1F4188790](v59);
  v309 = (char *)&v282 - v62;
  MEMORY[0x1F4188790](v61);
  v320 = (char *)&v282 - v63;
  uint64_t v313 = type metadata accessor for SymmetricKey();
  uint64_t v314 = *(void *)(v313 - 8);
  MEMORY[0x1F4188790](v313);
  v327 = (char *)&v282 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  MEMORY[0x1F4188790](v65 - 8);
  uint64_t v67 = (char *)&v282 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v69 = *(void *)(v68 - 8);
  MEMORY[0x1F4188790](v68);
  uint64_t v71 = (uint64_t *)((char *)&v282 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v72 - 8);
  uint64_t v74 = (char *)&v282 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for UUID();
  uint64_t v76 = *(void *)(v75 - 8);
  uint64_t v339 = v75;
  uint64_t v340 = v76;
  uint64_t v77 = MEMORY[0x1F4188790](v75);
  uint64_t v79 = (char *)&v282 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = MEMORY[0x1F4188790](v77);
  unint64_t v82 = (char *)&v282 - v81;
  MEMORY[0x1F4188790](v80);
  v341 = (char *)&v282 - v83;
  uint64_t v336 = v5;
  v337 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a1 + *(int *)(v5 + 28), (uint64_t)v67, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68) == 1)
  {
    *(_OWORD *)uint64_t v71 = xmmword_1B113B700;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v67, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  }
  else
  {
    outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v67, (uint64_t)v71, type metadata accessor for AttachmentLedger_EncryptionID);
  }
  uint64_t v84 = *v71;
  unint64_t v85 = v71[1];
  outlined copy of Data._Representation(*v71, v85);
  outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v71, type metadata accessor for AttachmentLedger_EncryptionID);
  UUID.init(data:)(v84, v85, (uint64_t)v74);
  uint64_t v87 = v339;
  uint64_t v86 = v340;
  int v88 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v340 + 48))(v74, 1, v339);
  unint64_t v89 = 0x1E9B54000uLL;
  uint64_t v90 = (uint64_t)v337;
  uint64_t v91 = (uint64_t)v338;
  if (v88 == 1)
  {
    outlined destroy of UUID?((uint64_t)v74, &demangling cache variable for type metadata for UUID?);
    lazy protocol witness table accessor for type Attachment.Errors and conformance Attachment.Errors();
    uint64_t v92 = (void *)swift_allocError();
    *uint64_t v93 = 1;
    swift_willThrow();
    uint64_t v94 = v336;
  }
  else
  {
    uint64_t v95 = v337;
    id v96 = v341;
    (*(void (**)(char *, char *, uint64_t))(v86 + 32))(v341, v74, v87);
    uint64_t v97 = *(void *)(v332 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor + 24);
    uint64_t v98 = *(void *)(v332 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor + 32);
    v285 = (void *)(v332 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor);
    __swift_project_boxed_opaque_existential_1((void *)(v332 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor), v97);
    uint64_t v99 = (*(uint64_t (**)(uint64_t, uint64_t))(v98 + 24))(v97, v98);
    MEMORY[0x1F4188790](v99);
    *(&v282 - 2) = (uint64_t)v96;
    BOOL v100 = specialized Sequence.contains(where:)((uint64_t (*)(char *))partial apply for specialized closure #1 in Sequence<>.contains(_:), (uint64_t)(&v282 - 4), v99);
    swift_bridgeObjectRelease();
    if (v100)
    {
      if (one-time initialization token for attachment != -1) {
        swift_once();
      }
      uint64_t v101 = type metadata accessor for Logger();
      uint64_t v102 = __swift_project_value_buffer(v101, (uint64_t)static Log.attachment);
      uint64_t v103 = v340;
      (*(void (**)(char *, char *, uint64_t))(v340 + 16))(v82, v341, v87);
      uint64_t v284 = v102;
      uint64_t v104 = Logger.logObject.getter();
      os_log_type_t v105 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v104, v105))
      {
        uint64_t v106 = (uint8_t *)swift_slowAlloc();
        uint64_t v107 = swift_slowAlloc();
        *(void *)&long long v342 = v107;
        *(_DWORD *)uint64_t v106 = 136315138;
        _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        uint64_t v108 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v345 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v108, v109, (uint64_t *)&v342);
        uint64_t v110 = v339;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v283 = *(void (**)(char *, uint64_t))(v103 + 8);
        v283(v82, v110);
        _os_log_impl(&dword_1B0DF7000, v104, v105, "Attempting to decrypt attachment with SKI: %s", v106, 0xCu);
        swift_arrayDestroy();
        uint64_t v111 = v107;
        unint64_t v89 = 0x1E9B54000;
        Swift::String v112 = v337;
        MEMORY[0x1B3EA39E0](v111, -1, -1);
        uint64_t v113 = v106;
        uint64_t v91 = (uint64_t)v338;
        MEMORY[0x1B3EA39E0](v113, -1, -1);
      }
      else
      {
        v283 = *(void (**)(char *, uint64_t))(v103 + 8);
        v283(v82, v87);

        Swift::String v112 = v95;
        uint64_t v91 = (uint64_t)v338;
      }
      uint64_t v123 = v285[3];
      uint64_t v124 = v285[4];
      __swift_project_boxed_opaque_existential_1(v285, v123);
      uint64_t v125 = (*(uint64_t (**)(void, void, char *, void, uint64_t, uint64_t))(v124 + 64))(*v112, v112[1], v341, 0, v123, v124);
      unint64_t v128 = v127;
      uint64_t v328 = v125;
      outlined copy of Data._Representation(v125, v127);
      uint64_t v129 = Logger.logObject.getter();
      os_log_type_t v130 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v129, v130))
      {
        uint64_t v132 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v132 = 0;
        _os_log_impl(&dword_1B0DF7000, v129, v130, "Attempting to create and unpack MMCSMetadata box", v132, 2u);
        MEMORY[0x1B3EA39E0](v132, -1, -1);
      }

      *(void *)&long long v342 = v328;
      *((void *)&v342 + 1) = v128;
      unint64_t v323 = v128;
      outlined copy of Data._Representation(v328, v128);
      SymmetricKey.init<A>(data:)();
      uint64_t v312 = (uint64_t)v321 + *(int *)(v317 + 36);
      uint64_t v133 = v322;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v312, v322, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      uint64_t v134 = *(unsigned int (**)(void, void, void))(v325 + 48);
      uint64_t v135 = v326;
      v325 += 48;
      if (v134(v133, 1, v326) == 1)
      {
        uint64_t v136 = v324;
        void *v324 = 0;
        v136[1] = 0xE000000000000000;
        v136[2] = 0;
        v136[3] = 0xE000000000000000;
        *((_OWORD *)v136 + 2) = xmmword_1B113B700;
        *((_OWORD *)v136 + 3) = xmmword_1B113B700;
        UnknownStorage.init()();
        uint64_t v137 = (char *)v136 + *(int *)(v135 + 36);
        unint64_t v138 = v134;
        uint64_t v139 = v318;
        uint64_t v140 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v318 + 56);
        uint64_t v141 = v319;
        v140(v137, 1, 1, v319);
        v140((char *)v136 + *(int *)(v326 + 40), 1, 1, v141);
        uint64_t v135 = v326;
        uint64_t v142 = v139;
        uint64_t v134 = v138;
        outlined destroy of UUID?(v322, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      }
      else
      {
        uint64_t v136 = v324;
        outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v133, (uint64_t)v324, type metadata accessor for AttachmentLedger_MMCSMetadata);
        uint64_t v141 = v319;
        uint64_t v142 = v318;
      }
      uint64_t v143 = (uint64_t)v136 + *(int *)(v135 + 36);
      uint64_t v144 = v315;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v143, v315, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      int v145 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v142 + 48))(v144, 1, v141);
      unint64_t v146 = v316;
      if (v145 == 1)
      {
        void *v316 = 0;
        v146[1] = 0;
        v146[2] = 0xC000000000000000;
        UnknownStorage.init()();
        outlined destroy of UUID?(v144, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      }
      else
      {
        outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v144, (uint64_t)v316, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
      }
      outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v324, type metadata accessor for AttachmentLedger_MMCSMetadata);
      uint64_t v147 = v146[1];
      unint64_t v148 = v146[2];
      outlined copy of Data._Representation(v147, v148);
      outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v146, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
      specialized AES.GCM.SealedBox.init<A>(combined:)(v147, v148);
      uint64_t v171 = static AES.GCM.open(_:using:)();
      uint64_t v94 = v336;
      uint64_t v322 = v171;
      v324 = v172;
      v173 = Logger.logObject.getter();
      os_log_type_t v174 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v173, v174))
      {
        v176 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v176 = 0;
        _os_log_impl(&dword_1B0DF7000, v173, v174, "Attempting to create and unpack Attachment box", v176, 2u);
        MEMORY[0x1B3EA39E0](v176, -1, -1);
      }

      uint64_t v177 = v321[5];
      unint64_t v178 = v321[6];
      outlined copy of Data._Representation(v177, v178);
      v179 = v309;
      specialized AES.GCM.SealedBox.init<A>(combined:)(v177, v178);
      uint64_t v180 = static AES.GCM.open(_:using:)();
      v182 = v181;
      uint64_t v183 = v180;
      v184 = v306;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v312, (uint64_t)v306, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      uint64_t v185 = v326;
      unsigned int v186 = v134(v184, 1, v326);
      v316 = v182;
      uint64_t v315 = v183;
      v187 = v303;
      if (v186 == 1)
      {
        void *v303 = 0;
        v187[1] = 0xE000000000000000;
        v187[2] = 0;
        v187[3] = 0xE000000000000000;
        *((_OWORD *)v187 + 2) = xmmword_1B113B700;
        *((_OWORD *)v187 + 3) = xmmword_1B113B700;
        UnknownStorage.init()();
        v188 = (char *)v187 + *(int *)(v185 + 36);
        v189 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v318 + 56);
        uint64_t v190 = v319;
        v189(v188, 1, 1, v319);
        v189((char *)v187 + *(int *)(v326 + 40), 1, 1, v190);
        outlined destroy of UUID?((uint64_t)v306, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      }
      else
      {
        outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v184, (uint64_t)v303, type metadata accessor for AttachmentLedger_MMCSMetadata);
      }
      uint64_t v191 = v308;
      swift_bridgeObjectRetain();
      outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v187, type metadata accessor for AttachmentLedger_MMCSMetadata);
      uint64_t v192 = (uint64_t)v304;
      URL.init(string:)();
      swift_bridgeObjectRelease();
      uint64_t v193 = v307;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v191 + 48))(v192, 1, v307) == 1)
      {
        v194 = v134;
        unint64_t v195 = v323;
        outlined consume of Data._Representation(v328, v323);
        outlined destroy of UUID?(v192, &demangling cache variable for type metadata for URL?);
        uint64_t v196 = v301;
        outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v321, v301, type metadata accessor for AttachmentLedger_AttachmentMetadata);
        v197 = Logger.logObject.getter();
        os_log_type_t v198 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v197, v198))
        {
          v199 = (uint8_t *)swift_slowAlloc();
          uint64_t v200 = swift_slowAlloc();
          *(void *)&long long v342 = v200;
          *(_DWORD *)v199 = 136315138;
          uint64_t v201 = v299;
          outlined init with copy of ActivitySession.DomainAssertionWrapper?(v196 + *(int *)(v317 + 36), v299, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
          uint64_t v202 = v326;
          if (v194(v201, 1, v326) == 1)
          {
            v203 = v296;
            void *v296 = 0;
            v203[1] = 0xE000000000000000;
            v203[2] = 0;
            v203[3] = 0xE000000000000000;
            *((_OWORD *)v203 + 2) = xmmword_1B113B700;
            *((_OWORD *)v203 + 3) = xmmword_1B113B700;
            UnknownStorage.init()();
            v204 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v318 + 56);
            uint64_t v205 = v319;
            v204((char *)v203 + *(int *)(v202 + 36), 1, 1, v319);
            v204((char *)v203 + *(int *)(v202 + 40), 1, 1, v205);
            uint64_t v196 = v301;
            outlined destroy of UUID?(v299, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
          }
          else
          {
            v203 = v296;
            outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v201, (uint64_t)v296, type metadata accessor for AttachmentLedger_MMCSMetadata);
          }
          uint64_t v216 = v203[2];
          unint64_t v217 = v203[3];
          swift_bridgeObjectRetain();
          outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v203, type metadata accessor for AttachmentLedger_MMCSMetadata);
          uint64_t v345 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v216, v217, (uint64_t *)&v342);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v196, type metadata accessor for AttachmentLedger_AttachmentMetadata);
          _os_log_impl(&dword_1B0DF7000, v197, v198, "Failed to convert %s to URL", v199, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v200, -1, -1);
          MEMORY[0x1B3EA39E0](v199, -1, -1);

          uint64_t v94 = v336;
          unint64_t v89 = 0x1E9B54000;
          v179 = v309;
          unint64_t v195 = v323;
        }
        else
        {
          outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v196, type metadata accessor for AttachmentLedger_AttachmentMetadata);
        }
        v218 = v316;
        uint64_t v219 = v315;
        lazy protocol witness table accessor for type Attachment.Errors and conformance Attachment.Errors();
        uint64_t v92 = (void *)swift_allocError();
        unsigned char *v220 = 1;
        swift_willThrow();
        outlined consume of Data._Representation(v328, v195);
        outlined consume of Data._Representation(v219, (unint64_t)v218);
        outlined consume of Data._Representation(v322, (unint64_t)v324);
        v221 = *(void (**)(char *, uint64_t))(v310 + 8);
        uint64_t v222 = v311;
        v221(v179, v311);
        v221(v320, v222);
        (*(void (**)(char *, uint64_t))(v314 + 8))(v327, v313);
        v283(v341, v339);
        uint64_t v90 = (uint64_t)v337;
      }
      else
      {
        v206 = *(void (**)(char *, uint64_t, uint64_t))(v191 + 32);
        v206(v305, v192, v193);
        (*(void (**)(char *, char *, uint64_t))(v310 + 16))(v302, v320, v311);
        AttachmentLedger_AttachmentMetadata.uploadStatus.getter(&v342);
        v306 = v206;
        uint64_t v317 = v191 + 32;
        v303 = (void *)*((void *)&v342 + 1);
        v304 = (char *)v342;
        uint64_t v301 = v343;
        uint64_t v207 = v291;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v312, v291, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        uint64_t v208 = v326;
        unsigned int v209 = v134(v207, 1, v326);
        v210 = v287;
        if (v209 == 1)
        {
          void *v287 = 0;
          v210[1] = 0xE000000000000000;
          v210[2] = 0;
          v210[3] = 0xE000000000000000;
          *((_OWORD *)v210 + 2) = xmmword_1B113B700;
          *((_OWORD *)v210 + 3) = xmmword_1B113B700;
          UnknownStorage.init()();
          v211 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v318 + 56);
          uint64_t v212 = v319;
          v211((char *)v210 + *(int *)(v208 + 36), 1, 1, v319);
          v211((char *)v210 + *(int *)(v208 + 40), 1, 1, v212);
          outlined destroy of UUID?(v207, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
          uint64_t v213 = v297;
          uint64_t v214 = v308;
          v215 = v305;
        }
        else
        {
          outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v207, (uint64_t)v287, type metadata accessor for AttachmentLedger_MMCSMetadata);
          uint64_t v213 = v297;
          uint64_t v214 = v308;
          v215 = v305;
          uint64_t v212 = v319;
        }
        uint64_t v223 = (uint64_t)v289;
        uint64_t v224 = (uint64_t)v288;
        uint64_t v225 = v210[1];
        v296 = (void *)*v210;
        uint64_t v299 = v225;
        swift_bridgeObjectRetain();
        outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v210, type metadata accessor for AttachmentLedger_MMCSMetadata);
        (*(void (**)(char *, char *, uint64_t))(v214 + 16))(v300, v215, v307);
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v312, v223, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        if (v134(v223, 1, v208) == 1)
        {
          *(void *)uint64_t v224 = 0;
          *(void *)(v224 + 8) = 0xE000000000000000;
          *(void *)(v224 + 16) = 0;
          *(void *)(v224 + 24) = 0xE000000000000000;
          *(_OWORD *)(v224 + 32) = xmmword_1B113B700;
          *(_OWORD *)(v224 + 48) = xmmword_1B113B700;
          UnknownStorage.init()();
          uint64_t v226 = v224 + *(int *)(v208 + 36);
          uint64_t v227 = v208;
          uint64_t v228 = v212;
          v229 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v318 + 56);
          v229(v226, 1, 1, v228);
          v229(v224 + *(int *)(v227 + 40), 1, 1, v228);
          outlined destroy of UUID?(v223, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        }
        else
        {
          outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v223, v224, type metadata accessor for AttachmentLedger_MMCSMetadata);
          uint64_t v227 = v208;
        }
        uint64_t v230 = *(void *)(v224 + 32);
        unint64_t v231 = *(void *)(v224 + 40);
        outlined copy of Data._Representation(v230, v231);
        outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v224, type metadata accessor for AttachmentLedger_MMCSMetadata);
        uint64_t v232 = v292;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v312, v292, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        if (v134(v232, 1, v227) == 1)
        {
          v233 = v290;
          void *v290 = 0;
          v233[1] = 0xE000000000000000;
          v233[2] = 0;
          v233[3] = 0xE000000000000000;
          *((_OWORD *)v233 + 2) = xmmword_1B113B700;
          *((_OWORD *)v233 + 3) = xmmword_1B113B700;
          UnknownStorage.init()();
          v234 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v318 + 56);
          uint64_t v235 = v319;
          v234((char *)v233 + *(int *)(v227 + 36), 1, 1, v319);
          v234((char *)v233 + *(int *)(v227 + 40), 1, 1, v235);
          outlined destroy of UUID?(v232, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        }
        else
        {
          v233 = v290;
          outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v232, (uint64_t)v290, type metadata accessor for AttachmentLedger_MMCSMetadata);
        }
        uint64_t v236 = v310;
        v237 = v302;
        uint64_t v238 = v233[6];
        unint64_t v239 = v233[7];
        outlined copy of Data._Representation(v238, v239);
        outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v233, type metadata accessor for AttachmentLedger_MMCSMetadata);
        (*(void (**)(uint64_t, char *, uint64_t))(v236 + 32))(v213, v237, v311);
        v240 = (int *)v293;
        v241 = (void *)(v213 + *(int *)(v293 + 20));
        uint64_t v242 = v322;
        v243 = v324;
        void *v241 = v322;
        v241[1] = v243;
        v244 = (void *)(v213 + v240[6]);
        v245 = v303;
        void *v244 = v304;
        v244[1] = v245;
        v244[2] = v301;
        v246 = (void *)(v213 + v240[7]);
        uint64_t v247 = v299;
        void *v246 = v296;
        v246[1] = v247;
        v306((char *)(v213 + v240[8]), (uint64_t)v300, v307);
        v248 = (uint64_t *)(v213 + v240[9]);
        uint64_t *v248 = v230;
        v248[1] = v231;
        v249 = (uint64_t *)(v213 + v240[10]);
        uint64_t *v249 = v238;
        v249[1] = v239;
        uint64_t v344 = 0;
        long long v342 = 0u;
        long long v343 = 0u;
        outlined copy of Data._Representation(v242, (unint64_t)v243);
        outlined copy of Data._Representation(v315, (unint64_t)v316);
        BinaryDecodingOptions.init()();
        _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type AttachmentLedgerMetadata_AttachmentMetadata and conformance AttachmentLedgerMetadata_AttachmentMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata);
        uint64_t v250 = v298;
        uint64_t v251 = v295;
        Message.init(serializedData:extensions:partial:options:)();
        v252 = (uint64_t *)(v250 + *(int *)(v251 + 20));
        uint64_t v253 = *v252;
        unint64_t v254 = v252[1];
        if (v254 >> 60 == 15) {
          uint64_t v255 = 0;
        }
        else {
          uint64_t v255 = *v252;
        }
        uint64_t v326 = v255;
        if (v254 >> 60 == 15) {
          unint64_t v256 = 0xC000000000000000;
        }
        else {
          unint64_t v256 = v254;
        }
        uint64_t v257 = v285[3];
        uint64_t v258 = v285[4];
        __swift_project_boxed_opaque_existential_1(v285, v257);
        v259 = *(uint64_t (**)(uint64_t, unint64_t, void, uint64_t, uint64_t))(v258 + 56);
        outlined copy of Data?(v253, v254);
        uint64_t v260 = v328;
        unint64_t v261 = v323;
        uint64_t v262 = v259(v328, v323, 0, v257, v258);
        unint64_t v264 = v263;
        uint64_t v265 = outlined consume of Data._Representation(v260, v261);
        if (v264 >> 60 != 15)
        {
          *(void *)&long long v342 = v321[2];
          uint64_t v272 = *(void *)(v332 + OBJC_IVAR____TtC14CopresenceCore10Attachment_localParticipantID);
          MEMORY[0x1F4188790](v265);
          *(&v282 - 4) = v273;
          *(&v282 - 3) = v262;
          *(&v282 - 2) = v264;
          _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentEncryption);
          swift_bridgeObjectRetain();
          uint64_t v274 = (uint64_t)v286;
          uint64_t v275 = v336;
          static Message.with(_:)();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v333 + 56))(v274, 0, 1, v275);
          specialized Dictionary.subscript.setter(v274, v272);
          outlined consume of Data._Representation(v328, v323);
          outlined consume of Data?(v262, v264);
          outlined consume of Data._Representation(v315, (unint64_t)v316);
          outlined consume of Data._Representation(v322, (unint64_t)v324);
          outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v298, (uint64_t (*)(void))type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata);
          (*(void (**)(char *, uint64_t))(v308 + 8))(v305, v307);
          v276 = *(void (**)(char *, uint64_t))(v310 + 8);
          uint64_t v277 = v311;
          v276(v309, v311);
          v276(v320, v277);
          v283(v341, v339);
          uint64_t v278 = v335;
          (*(void (**)(uint64_t, char *, uint64_t))(v314 + 32))(v335, v327, v313);
          v279 = (int *)type metadata accessor for UnencryptedAttachment(0);
          outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v297, v278 + v279[6], type metadata accessor for Attachment.MMCSMetadata);
          uint64_t v280 = v342;
          v281 = (void *)(v278 + v279[5]);
          void *v281 = v326;
          v281[1] = v256;
          *(void *)(v278 + v279[7]) = v280;
          return (*(uint64_t (**)(uint64_t, void, uint64_t, int *))(*((void *)v279 - 1) + 56))(v278, 0, 1, v279);
        }
        v266 = Logger.logObject.getter();
        os_log_type_t v267 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v266, v267))
        {
          v268 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v268 = 0;
          _os_log_impl(&dword_1B0DF7000, v266, v267, "Failed to encrypt the asset's key", v268, 2u);
          MEMORY[0x1B3EA39E0](v268, -1, -1);
        }

        lazy protocol witness table accessor for type Attachment.Errors and conformance Attachment.Errors();
        uint64_t v92 = (void *)swift_allocError();
        unsigned char *v269 = 2;
        swift_willThrow();
        outlined consume of Data._Representation(v328, v323);
        outlined consume of Data._Representation(v326, v256);
        outlined consume of Data._Representation(v315, (unint64_t)v316);
        outlined consume of Data._Representation(v322, (unint64_t)v324);
        outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v298, (uint64_t (*)(void))type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata);
        outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v297, type metadata accessor for Attachment.MMCSMetadata);
        (*(void (**)(char *, uint64_t))(v308 + 8))(v305, v307);
        v270 = *(void (**)(char *, uint64_t))(v310 + 8);
        uint64_t v271 = v311;
        v270(v309, v311);
        v270(v320, v271);
        (*(void (**)(char *, uint64_t))(v314 + 8))(v327, v313);
        v283(v341, v339);
        uint64_t v94 = v336;
        uint64_t v90 = (uint64_t)v337;
        uint64_t v91 = (uint64_t)v338;
        unint64_t v89 = 0x1E9B54000;
      }
    }
    else
    {
      if (one-time initialization token for attachment != -1) {
        swift_once();
      }
      uint64_t v114 = type metadata accessor for Logger();
      __swift_project_value_buffer(v114, (uint64_t)static Log.attachment);
      uint64_t v115 = v340;
      (*(void (**)(char *, char *, uint64_t))(v340 + 16))(v79, v341, v87);
      uint64_t v116 = Logger.logObject.getter();
      os_log_type_t v117 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v116, v117))
      {
        uint64_t v118 = (uint8_t *)swift_slowAlloc();
        uint64_t v119 = swift_slowAlloc();
        *(void *)&long long v342 = v119;
        *(_DWORD *)uint64_t v118 = 136315138;
        _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        uint64_t v120 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v345 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v120, v121, (uint64_t *)&v342);
        uint64_t v87 = v339;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v122 = *(void (**)(char *, uint64_t))(v115 + 8);
        v122(v79, v87);
        _os_log_impl(&dword_1B0DF7000, v116, v117, "remoteSKI %s is not known, skipping.", v118, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v119, -1, -1);
        MEMORY[0x1B3EA39E0](v118, -1, -1);
      }
      else
      {
        uint64_t v122 = *(void (**)(char *, uint64_t))(v115 + 8);
        v122(v79, v87);
      }

      uint64_t v94 = v336;
      lazy protocol witness table accessor for type Attachment.Errors and conformance Attachment.Errors();
      uint64_t v92 = (void *)swift_allocError();
      *unint64_t v126 = 0;
      swift_willThrow();
      v122(v341, v87);
      unint64_t v89 = 0x1E9B54000;
      uint64_t v90 = (uint64_t)v95;
      uint64_t v91 = (uint64_t)v338;
    }
  }
  id v149 = v92;
  if (*(void *)(v89 + 3496) != -1) {
    swift_once();
  }
  uint64_t v150 = type metadata accessor for Logger();
  __swift_project_value_buffer(v150, (uint64_t)static Log.attachment);
  outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v90, v91, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  id v151 = v92;
  id v152 = v92;
  v153 = Logger.logObject.getter();
  os_log_type_t v154 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v153, v154))
  {
    uint64_t v155 = swift_slowAlloc();
    uint64_t v156 = swift_slowAlloc();
    *(void *)&long long v342 = v156;
    *(_DWORD *)uint64_t v155 = 136315394;
    uint64_t v157 = v334;
    outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v91, v334, type metadata accessor for AttachmentLedger_AttachmentEncryption);
    uint64_t v158 = v333;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v333 + 56))(v157, 0, 1, v94);
    uint64_t v159 = v157;
    uint64_t v160 = v331;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v159, v331, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v158 + 48))(v160, 1, v94) == 1)
    {
      uint64_t v161 = 7104878;
      unint64_t v162 = 0xE300000000000000;
    }
    else
    {
      uint64_t v163 = v160;
      uint64_t v164 = v330;
      outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v163, v330, type metadata accessor for AttachmentLedger_AttachmentEncryption);
      outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v164, v329, type metadata accessor for AttachmentLedger_AttachmentEncryption);
      uint64_t v161 = String.init<A>(reflecting:)();
      unint64_t v162 = v165;
      outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v164, type metadata accessor for AttachmentLedger_AttachmentEncryption);
    }
    outlined destroy of UUID?(v334, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
    uint64_t v345 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v161, v162, (uint64_t *)&v342);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v91, type metadata accessor for AttachmentLedger_AttachmentEncryption);
    *(_WORD *)(v155 + 12) = 2080;
    uint64_t v345 = (uint64_t)v92;
    id v166 = v92;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v167 = String.init<A>(reflecting:)();
    uint64_t v345 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v167, v168, (uint64_t *)&v342);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v153, v154, "Failed to decrypt symmetricKey with: %s, reason: %s", (uint8_t *)v155, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v156, -1, -1);
    MEMORY[0x1B3EA39E0](v155, -1, -1);
  }
  else
  {

    outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v91, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  }
  uint64_t v169 = type metadata accessor for UnencryptedAttachment(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v169 - 8) + 56))(v335, 1, 1, v169);
}

uint64_t specialized AES.GCM.SealedBox.init<A>(combined:)(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x1B10321D4);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 > 27)
      {
        outlined copy of Data._Representation(a1, a2);
        specialized Data.init<A>(_:)(a1, a2);
        AES.GCM.SealedBox.init(combined:)();
        return outlined consume of Data._Representation(a1, a2);
      }
      else
      {
LABEL_7:
        uint64_t v8 = type metadata accessor for CryptoKitError();
        _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type CryptoKitError and conformance CryptoKitError, MEMORY[0x1E4F24F10]);
        swift_allocError();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v8 - 8) + 104))(v9, *MEMORY[0x1E4F24F08], v8);
        swift_willThrow();
        return outlined consume of Data._Representation(a1, a2);
      }
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t closure #1 in Attachment.updateLocalEncryption()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  type metadata accessor for UnencryptedAttachment(0);
  v5[4] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in Attachment.updateLocalEncryption(), 0, 0);
}

uint64_t closure #1 in Attachment.updateLocalEncryption()()
{
  uint64_t v1 = v0[2];
  if (v1)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    v0[5] = v2;
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    *uint64_t v2 = v0;
    v2[1] = closure #1 in Attachment.updateLocalEncryption();
    uint64_t v4 = MEMORY[0x1E4FBC848] + 8;
    uint64_t v5 = MEMORY[0x1E4FBC0F0];
    return MEMORY[0x1F4187D90](v3, v1, v4, v3, v5);
  }
  else
  {
    static Task<>.checkCancellation()();
    uint64_t v6 = (void *)swift_task_alloc();
    v0[7] = v6;
    *uint64_t v6 = v0;
    v6[1] = closure #1 in Attachment.updateLocalEncryption();
    uint64_t v7 = v0[4];
    return Attachment.waitForDecryption()(v7);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {

    uint64_t v2 = closure #1 in Attachment.updateLocalEncryption();
  }
  else
  {
    uint64_t v2 = closure #1 in Attachment.updateLocalEncryption();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  void *v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v1 = v0[6];
  static Task<>.checkCancellation()();
  if (v1)
  {
    swift_task_dealloc();
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    uint64_t v4 = (void *)swift_task_alloc();
    v0[7] = v4;
    *uint64_t v4 = v0;
    v4[1] = closure #1 in Attachment.updateLocalEncryption();
    uint64_t v5 = v0[4];
    return Attachment.waitForDecryption()(v5);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = closure #1 in Attachment.updateLocalEncryption();
  }
  else
  {
    outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(*(void *)(v2 + 32), type metadata accessor for UnencryptedAttachment);
    uint64_t v3 = closure #1 in Attachment.updateLocalEncryption();
  }
  return MEMORY[0x1F4188298](v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 64);
  static Task<>.checkCancellation()();
  if (!v1) {
    OS_dispatch_queue.sync<A>(execute:)();
  }
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v4;

  static Task<>.checkCancellation()();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in Attachment.updateLocalEncryption();
  uint64_t v2 = *(void *)(v0 + 32);
  return Attachment.waitForDecryption()(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in closure #1 in Attachment.updateLocalEncryption()(uint64_t a1)
{
  uint64_t v29 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UnencryptedAttachment(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Attachment.EncryptedAttachmentStatus(0);
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v26 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v26 - v15;
  uint64_t result = static Task<>.checkCancellation()();
  if (!v1)
  {
    uint64_t v26 = v14;
    uint64_t v27 = v11;
    uint64_t v28 = v7;
    swift_beginAccess();
    swift_retain();
    CurrentValueSubject.value.getter();
    swift_release();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v19 = type metadata accessor for AttachmentLedger_AttachmentMetadata;
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v20 = (uint64_t)v28;
        outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v16, (uint64_t)v28, type metadata accessor for UnencryptedAttachment);
        uint64_t v21 = *(void *)(v29 + OBJC_IVAR____TtC14CopresenceCore10Attachment_localParticipantID);
        Attachment.localEncryptionSlot.getter((uint64_t)v4);
        uint64_t v22 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v4, 0, 1, v22);
        specialized Dictionary.subscript.setter((uint64_t)v4, v21);
        uint64_t v23 = (uint64_t)v26;
        outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v20, (uint64_t)v26, type metadata accessor for UnencryptedAttachment);
        swift_storeEnumTagMultiPayload();
        uint64_t v24 = (uint64_t)v27;
        outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v23, (uint64_t)v27, type metadata accessor for Attachment.EncryptedAttachmentStatus);
        swift_retain();
        CurrentValueSubject.send(_:)();
        outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v24, type metadata accessor for Attachment.EncryptedAttachmentStatus);
        outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v23, type metadata accessor for Attachment.EncryptedAttachmentStatus);
        swift_release();
        return outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v20, type metadata accessor for UnencryptedAttachment);
      }
      uint64_t v19 = type metadata accessor for Attachment.EncryptedAttachmentStatus;
    }
    outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v16, v19);
    lazy protocol witness table accessor for type Attachment.Errors and conformance Attachment.Errors();
    swift_allocError();
    *uint64_t v25 = 3;
    return swift_willThrow();
  }
  return result;
}

uint64_t Attachment.localEncryptionSlot.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v35 = a1;
  uint64_t v3 = type metadata accessor for UnencryptedAttachment(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Attachment.EncryptedAttachmentStatus(0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (uint64_t *)((char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void **)(v2 + OBJC_IVAR____TtC14CopresenceCore10Attachment_queue);
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E4FBCBF0], v9);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    swift_once();
    goto LABEL_6;
  }
  swift_beginAccess();
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v16 = type metadata accessor for AttachmentLedger_AttachmentMetadata;
  if (!EnumCaseMultiPayload)
  {
LABEL_10:
    outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v8, v16);
    lazy protocol witness table accessor for type Attachment.Errors and conformance Attachment.Errors();
    swift_allocError();
    unsigned char *v30 = 3;
    return swift_willThrow();
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v16 = type metadata accessor for Attachment.EncryptedAttachmentStatus;
    goto LABEL_10;
  }
  outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v8, (uint64_t)v5, type metadata accessor for UnencryptedAttachment);
  uint64_t v17 = *(void *)(v2 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor + 24);
  uint64_t v18 = *(void *)(v2 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor + 32);
  __swift_project_boxed_opaque_existential_1((void *)(v2 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor), v17);
  SymmetricKey.withUnsafeBytes<A>(_:)();
  uint64_t v20 = v33;
  unint64_t v19 = v34;
  uint64_t v21 = (*(uint64_t (**)(uint64_t, unint64_t, void, uint64_t, uint64_t))(v18 + 56))(v33, v34, 0, v17, v18);
  unint64_t v23 = v22;
  outlined consume of Data._Representation(v20, v19);
  if (v23 >> 60 != 15)
  {
    uint64_t v31 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
    MEMORY[0x1F4188790](v31);
    *(&v32 - 4) = v2;
    *(&v32 - 3) = v21;
    *(&v32 - 2) = v23;
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentEncryption);
    static Message.with(_:)();
    outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v5, type metadata accessor for UnencryptedAttachment);
    return outlined consume of Data?(v21, v23);
  }
  if (one-time initialization token for attachment != -1) {
    goto LABEL_13;
  }
LABEL_6:
  uint64_t v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Log.attachment);
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v27 = 0;
    _os_log_impl(&dword_1B0DF7000, v25, v26, "Failed to encrypt the asset's key", v27, 2u);
    MEMORY[0x1B3EA39E0](v27, -1, -1);
  }

  lazy protocol witness table accessor for type Attachment.Errors and conformance Attachment.Errors();
  swift_allocError();
  *uint64_t v28 = 2;
  swift_willThrow();
  return outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v5, type metadata accessor for UnencryptedAttachment);
}

uint64_t closure #1 in closure #1 in Attachment.unpack(attachment:)(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_EncryptionID);
  static Message.with(_:)();
  uint64_t v11 = (uint64_t)a1 + *(int *)(type metadata accessor for AttachmentLedger_AttachmentEncryption(0) + 28);
  outlined destroy of UUID?(v11, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v10, v11, type metadata accessor for AttachmentLedger_EncryptionID);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
  uint64_t v12 = *a1;
  unint64_t v13 = a1[1];
  outlined copy of Data._Representation(a3, a4);
  uint64_t result = outlined consume of Data._Representation(v12, v13);
  *a1 = a3;
  a1[1] = a4;
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in Attachment.unpack(attachment:)(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a2 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor + 24);
  uint64_t v9 = *(void *)(a2 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor + 32);
  __swift_project_boxed_opaque_existential_1((void *)(a2 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor), v8);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
  uint64_t v23 = UUID.uuid.getter();
  char v24 = v10;
  char v25 = v11;
  char v26 = v12;
  char v27 = v13;
  char v28 = v14;
  char v29 = v15;
  char v30 = v16;
  char v31 = v17;
  uint64_t v18 = specialized Data.init<A>(_:)((uint64_t)&v23, (uint64_t)&v32);
  uint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t result = outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  *(void *)a1 = v18;
  *(void *)(a1 + 8) = v20;
  return result;
}

uint64_t closure #1 in Attachment.update(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v38 = a4;
  uint64_t v36 = a2;
  uint64_t v37 = a3;
  uint64_t v5 = type metadata accessor for UnencryptedAttachment(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Attachment.EncryptedAttachmentStatus(0);
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  char v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  char v14 = (char *)&v31 - v13;
  MEMORY[0x1F4188790](v12);
  char v16 = (char *)&v31 - v15;
  swift_beginAccess();
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v18 = type metadata accessor for AttachmentLedger_AttachmentMetadata;
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v16, (uint64_t)v7, type metadata accessor for UnencryptedAttachment);
      uint64_t v19 = *(int *)(v5 + 24);
      uint64_t v20 = v19 + *(int *)(type metadata accessor for Attachment.MMCSMetadata(0) + 24);
      unint64_t v34 = v11;
      uint64_t v35 = v4;
      uint64_t v21 = (uint64_t *)&v7[v20];
      uint64_t v22 = *(void *)&v7[v20 + 8];
      uint64_t v32 = *(void *)&v7[v20];
      uint64_t v33 = v7;
      unint64_t v23 = *(void *)&v7[v20 + 16];
      uint64_t v24 = v36;
      uint64_t v25 = v37;
      unint64_t v26 = v38;
      outlined copy of Attachment.MMCSMetadata.UploadStatus(v36, v37, v38);
      outlined consume of Attachment.MMCSMetadata.UploadStatus(v32, v22, v23);
      uint64_t *v21 = v24;
      v21[1] = v25;
      v21[2] = v26;
      uint64_t v27 = (uint64_t)v33;
      outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v33, (uint64_t)v14, type metadata accessor for UnencryptedAttachment);
      swift_storeEnumTagMultiPayload();
      uint64_t v28 = (uint64_t)v34;
      outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v14, (uint64_t)v34, type metadata accessor for Attachment.EncryptedAttachmentStatus);
      swift_retain();
      CurrentValueSubject.send(_:)();
      outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v28, type metadata accessor for Attachment.EncryptedAttachmentStatus);
      outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v14, type metadata accessor for Attachment.EncryptedAttachmentStatus);
      swift_release();
      return outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v27, type metadata accessor for UnencryptedAttachment);
    }
    uint64_t v18 = type metadata accessor for Attachment.EncryptedAttachmentStatus;
  }
  outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v16, v18);
  lazy protocol witness table accessor for type Attachment.Errors and conformance Attachment.Errors();
  swift_allocError();
  unsigned char *v30 = 3;
  return swift_willThrow();
}

uint64_t closure #1 in Attachment.update(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v53 = a2;
  uint64_t v51 = type metadata accessor for UnencryptedAttachment(0);
  MEMORY[0x1F4188790](v51);
  uint64_t v52 = (uint64_t)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v5);
  uint64_t v10 = (char *)&v51 - v9;
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v13 = (char *)&v51 - v12;
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v51 - v14;
  uint64_t v16 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Attachment.EncryptedAttachmentStatus(0);
  uint64_t v20 = MEMORY[0x1F4188790](v19);
  uint64_t v56 = (uint64_t)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v24 = (char *)&v51 - v23;
  MEMORY[0x1F4188790](v22);
  unint64_t v26 = (char *)&v51 - v25;
  uint64_t v27 = a1 + OBJC_IVAR____TtC14CopresenceCore10Attachment__status;
  swift_beginAccess();
  uint64_t v54 = v27;
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  uint64_t v55 = v19;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v29 = v52;
      outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v26, v52, type metadata accessor for UnencryptedAttachment);
      uint64_t v30 = v53;
      uint64_t v31 = *(void *)(v53 + 16);
      uint64_t v32 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v30 + *(int *)(v32 + 28), (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
      uint64_t v33 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
      uint64_t v34 = *(void *)(v33 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v7, 1, v33) == 1)
      {
        *(_OWORD *)uint64_t v10 = xmmword_1B113B700;
        *((void *)v10 + 2) = 0;
        UnknownStorage.init()();
        uint64_t v35 = &v10[*(int *)(v33 + 28)];
        uint64_t v36 = type metadata accessor for AttachmentLedger_EncryptionID(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v35, 1, 1, v36);
        outlined destroy of UUID?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
      }
      else
      {
        outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v7, (uint64_t)v10, type metadata accessor for AttachmentLedger_AttachmentEncryption);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v10, 0, 1, v33);
      specialized Dictionary.subscript.setter((uint64_t)v10, v31);
      outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v29, (uint64_t)v24, type metadata accessor for UnencryptedAttachment);
      swift_storeEnumTagMultiPayload();
      uint64_t v47 = v56;
      outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v24, v56, type metadata accessor for Attachment.EncryptedAttachmentStatus);
      swift_retain();
      CurrentValueSubject.send(_:)();
      outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v47, type metadata accessor for Attachment.EncryptedAttachmentStatus);
      outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v24, type metadata accessor for Attachment.EncryptedAttachmentStatus);
      swift_release();
      uint64_t v45 = type metadata accessor for UnencryptedAttachment;
      uint64_t v46 = v29;
    }
    else
    {
      uint64_t v45 = type metadata accessor for Attachment.EncryptedAttachmentStatus;
      uint64_t v46 = (uint64_t)v26;
    }
  }
  else
  {
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_AttachmentMetadata, attempt: Int));
    uint64_t v52 = *(void *)&v26[*(int *)(v37 + 48)];
    outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v26, (uint64_t)v18, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    uint64_t v38 = v53;
    uint64_t v39 = *(void *)(v53 + 16);
    uint64_t v40 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v38 + *(int *)(v40 + 28), (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
    uint64_t v41 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
    uint64_t v42 = *(void *)(v41 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v13, 1, v41) == 1)
    {
      *(_OWORD *)uint64_t v15 = xmmword_1B113B700;
      *((void *)v15 + 2) = 0;
      UnknownStorage.init()();
      uint64_t v43 = &v15[*(int *)(v41 + 28)];
      uint64_t v44 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v43, 1, 1, v44);
      outlined destroy of UUID?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
    }
    else
    {
      outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v13, (uint64_t)v15, type metadata accessor for AttachmentLedger_AttachmentEncryption);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v15, 0, 1, v41);
    specialized Dictionary.subscript.setter((uint64_t)v15, v39);
    uint64_t v48 = *(int *)(v37 + 48);
    outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v18, (uint64_t)v24, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    *(void *)&v24[v48] = v52;
    swift_storeEnumTagMultiPayload();
    uint64_t v49 = v56;
    outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v24, v56, type metadata accessor for Attachment.EncryptedAttachmentStatus);
    swift_retain();
    CurrentValueSubject.send(_:)();
    outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v49, type metadata accessor for Attachment.EncryptedAttachmentStatus);
    outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v24, type metadata accessor for Attachment.EncryptedAttachmentStatus);
    swift_release();
    Attachment.unpack(attachment:)((uint64_t)v18);
    uint64_t v45 = type metadata accessor for AttachmentLedger_AttachmentMetadata;
    uint64_t v46 = (uint64_t)v18;
  }
  return outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(v46, v45);
}

uint64_t Attachment.description.getter()
{
  uint64_t v1 = type metadata accessor for Attachment.EncryptedAttachmentStatus(0);
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = 0;
  unint64_t v12 = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  uint64_t v13 = v11;
  unint64_t v14 = v12;
  v4._object = (void *)0x80000001B1161010;
  v4._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v4);
  uint64_t v11 = v0;
  _print_unlocked<A, B>(_:_:)();
  v5._countAndFlagsBits = 0x203A6469202CLL;
  v5._object = (void *)0xE600000000000000;
  String.append(_:)(v5);
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x737574617473202CLL;
  v7._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v7);
  swift_beginAccess();
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  _print_unlocked<A, B>(_:_:)();
  outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v3, type metadata accessor for Attachment.EncryptedAttachmentStatus);
  v8._countAndFlagsBits = 41;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return v13;
}

uint64_t Attachment.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14CopresenceCore10Attachment_id;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC14CopresenceCore10Attachment__encryptionSlots;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor);
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t Attachment.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14CopresenceCore10Attachment_id;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC14CopresenceCore10Attachment__encryptionSlots;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC14CopresenceCore10Attachment_dataCryptor);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Identifiable.id.getter in conformance Attachment@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC14CopresenceCore10Attachment_id;
  uint64_t v4 = type metadata accessor for UUID();
  Swift::String v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Attachment()
{
  return Attachment.description.getter();
}

uint64_t partial apply for closure #1 in Attachment.update(_:)()
{
  return closure #1 in Attachment.update(_:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  uint64_t v1 = *(void *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0)
                 - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  return closure #1 in Attachment.update(_:)(v2, v3);
}

uint64_t sub_1B1034684()
{
  uint64_t v1 = (int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0)
             - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  swift_release();
  outlined consume of Data._Representation(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[8];
  uint64_t v6 = type metadata accessor for UnknownStorage();
  Swift::String v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  uint64_t v8 = v0 + v3 + v1[9];
  uint64_t v9 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
  {
    outlined consume of Data._Representation(*(void *)v8, *(void *)(v8 + 8));
    v7(v8 + *(int *)(v9 + 24), v6);
    uint64_t v10 = v8 + *(int *)(v9 + 28);
    uint64_t v11 = type metadata accessor for AttachmentLedger_EncryptionID(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
    {
      outlined consume of Data._Representation(*(void *)v10, *(void *)(v10 + 8));
      v7(v10 + *(int *)(v11 + 20), v6);
    }
  }
  return MEMORY[0x1F4186498](v0, v3 + v4, v2 | 7);
}

uint64_t sub_1B10348C8()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t block_destroy_helper_20()
{
  return swift_release();
}

uint64_t outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined assign with take of Attachment.MMCSMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Attachment.MMCSMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for Attachment.EncryptedAttachmentStatus(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for Attachment.EncryptedAttachmentStatus);
}

unint64_t lazy protocol witness table accessor for type Attachment.Errors and conformance Attachment.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type Attachment.Errors and conformance Attachment.Errors;
  if (!lazy protocol witness table cache variable for type Attachment.Errors and conformance Attachment.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Attachment.Errors and conformance Attachment.Errors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Attachment.Errors and conformance Attachment.Errors;
  if (!lazy protocol witness table cache variable for type Attachment.Errors and conformance Attachment.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Attachment.Errors and conformance Attachment.Errors);
  }
  return result;
}

uint64_t partial apply for closure #1 in Attachment.mmcsMetadata.getter(uint64_t a1)
{
  return closure #1 in Attachment.mmcsMetadata.getter(a1, v1);
}

uint64_t specialized closure #1 in Sequence<>.contains(_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

BOOL specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnencryptedAttachment(0);
  return (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 1, v2) != 1;
}

uint64_t specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnencryptedAttachment?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v6, &demangling cache variable for type metadata for UnencryptedAttachment?);
  uint64_t v7 = type metadata accessor for UnencryptedAttachment(0);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (result != 1) {
    return outlined init with take of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full((uint64_t)v6, a2, type metadata accessor for UnencryptedAttachment);
  }
  __break(1u);
  return result;
}

uint64_t sub_1B1034CD8()
{
  swift_weakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void partial apply for closure #2 in Attachment.init(id:attachment:dataCryptor:localParticipantID:config:)(uint64_t a1)
{
  closure #2 in Attachment.init(id:attachment:dataCryptor:localParticipantID:config:)(a1, v1);
}

uint64_t sub_1B1034D2C()
{
  uint64_t v1 = (int *)(type metadata accessor for AttachmentLedger_AttachmentMetadata(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  outlined consume of Data._Representation(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(void *)(v0 + v3 + 40), *(void *)(v0 + v3 + 48));
  uint64_t v5 = v0 + v3 + v1[10];
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  uint64_t v8 = v0 + v3 + v1[11];
  uint64_t v9 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v9 - 1) + 48))(v8, 1, v9))
  {
    uint64_t v17 = v4;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(*(void *)(v8 + 32), *(void *)(v8 + 40));
    outlined consume of Data._Representation(*(void *)(v8 + 48), *(void *)(v8 + 56));
    v7(v8 + v9[8], v6);
    uint64_t v10 = v8 + v9[9];
    uint64_t v11 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    unint64_t v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    if (!v12(v10, 1, v11))
    {
      outlined consume of Data._Representation(*(void *)(v10 + 8), *(void *)(v10 + 16));
      v7(v10 + *(int *)(v11 + 24), v6);
    }
    uint64_t v13 = v8 + v9[10];
    unsigned int v14 = v12(v13, 1, v11);
    uint64_t v4 = v17;
    uint64_t v3 = (v2 + 16) & ~v2;
    if (!v14)
    {
      outlined consume of Data._Representation(*(void *)(v13 + 8), *(void *)(v13 + 16));
      v7(v13 + *(int *)(v11 + 24), v6);
    }
  }
  unint64_t v15 = (((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + v15);
  return MEMORY[0x1F4186498](v0, v15 + 40, v2 | 7);
}

void partial apply for closure #3 in Attachment.init(id:attachment:dataCryptor:localParticipantID:config:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for AttachmentLedger_AttachmentMetadata(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(v0 + v3);
  closure #3 in Attachment.init(id:attachment:dataCryptor:localParticipantID:config:)(v0 + v2, v4, v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));
}

uint64_t sub_1B1035050()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B1035060()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in Attachment.updateLocalEncryption()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return closure #1 in Attachment.updateLocalEncryption()(a1, v4, v5, v7, v6);
}

uint64_t sub_1B1035168()
{
  uint64_t v1 = (int *)(type metadata accessor for AttachmentLedger_AttachmentMetadata(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  swift_release();
  outlined consume of Data._Representation(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(void *)(v0 + v3 + 40), *(void *)(v0 + v3 + 48));
  uint64_t v5 = v0 + v3 + v1[10];
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  uint64_t v8 = v0 + v3 + v1[11];
  uint64_t v9 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v9 - 1) + 48))(v8, 1, v9))
  {
    uint64_t v16 = v4;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(*(void *)(v8 + 32), *(void *)(v8 + 40));
    outlined consume of Data._Representation(*(void *)(v8 + 48), *(void *)(v8 + 56));
    v7(v8 + v9[8], v6);
    uint64_t v10 = v8 + v9[9];
    uint64_t v11 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    unint64_t v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    if (!v12(v10, 1, v11))
    {
      outlined consume of Data._Representation(*(void *)(v10 + 8), *(void *)(v10 + 16));
      v7(v10 + *(int *)(v11 + 24), v6);
    }
    uint64_t v13 = v8 + v9[10];
    unsigned int v14 = v12(v13, 1, v11);
    uint64_t v4 = v16;
    uint64_t v3 = (v2 + 24) & ~v2;
    if (!v14)
    {
      outlined consume of Data._Representation(*(void *)(v13 + 8), *(void *)(v13 + 16));
      v7(v13 + *(int *)(v11 + 24), v6);
    }
  }
  return MEMORY[0x1F4186498](v0, v3 + v4, v2 | 7);
}

uint64_t partial apply for closure #1 in Attachment.unpack(attachment:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for AttachmentLedger_AttachmentMetadata(0) - 8);
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = (void *)(v2 + ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)));
  return closure #1 in Attachment.unpack(attachment:)(a1, v6, v7, a2);
}

uint64_t partial apply for closure #1 in Attachment.unpackAndRetry(attachment:)()
{
  return closure #1 in Attachment.unpackAndRetry(attachment:)();
}

uint64_t partial apply for closure #1 in Attachment.init(id:key:mmcsMetadata:metadata:dataCryptor:localParticipantID:config:)(uint64_t *a1)
{
  return closure #1 in Attachment.init(id:key:mmcsMetadata:metadata:dataCryptor:localParticipantID:config:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t partial apply for closure #1 in Attachment.localEncryptionSlot.getter(uint64_t *a1)
{
  return closure #1 in closure #1 in Attachment.unpack(attachment:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in Attachment()
{
  return _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
}

void *initializeBufferWithCopyOfBuffer for UnencryptedAttachment(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for SymmetricKey();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    unint64_t v11 = *((void *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    }
    else
    {
      uint64_t v13 = *(void *)v10;
      outlined copy of Data._Representation(*(void *)v10, *((void *)v10 + 1));
      *(void *)uint64_t v9 = v13;
      *((void *)v9 + 1) = v11;
    }
    uint64_t v14 = a3[6];
    unint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = type metadata accessor for AES.GCM.SealedBox();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
    uint64_t v18 = (int *)type metadata accessor for Attachment.MMCSMetadata(0);
    uint64_t v19 = v18[5];
    uint64_t v20 = (uint64_t *)&v15[v19];
    uint64_t v21 = (uint64_t *)&v16[v19];
    uint64_t v22 = *v21;
    unint64_t v23 = v21[1];
    outlined copy of Data._Representation(*v21, v23);
    uint64_t *v20 = v22;
    v20[1] = v23;
    uint64_t v24 = v18[6];
    uint64_t v25 = &v15[v24];
    unint64_t v26 = &v16[v24];
    unint64_t v27 = *((void *)v26 + 2);
    if (v27 >> 60 == 15 || (v27 & 0xF000000000000000) == 0xB000000000000000)
    {
      *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
      *((void *)v25 + 2) = *((void *)v26 + 2);
    }
    else
    {
      uint64_t v29 = *((void *)v26 + 1);
      *(void *)uint64_t v25 = *(void *)v26;
      outlined copy of Data._Representation(v29, v27);
      *((void *)v25 + 1) = v29;
      *((void *)v25 + 2) = v27;
    }
    uint64_t v30 = v18[7];
    uint64_t v31 = &v15[v30];
    uint64_t v32 = &v16[v30];
    uint64_t v33 = *((void *)v32 + 1);
    *(void *)uint64_t v31 = *(void *)v32;
    *((void *)v31 + 1) = v33;
    uint64_t v34 = v18[8];
    uint64_t v35 = &v15[v34];
    uint64_t v36 = &v16[v34];
    uint64_t v37 = type metadata accessor for URL();
    uint64_t v50 = a2;
    uint64_t v38 = *(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16);
    swift_bridgeObjectRetain();
    v38(v35, v36, v37);
    uint64_t v39 = v18[9];
    uint64_t v40 = (uint64_t *)&v15[v39];
    uint64_t v41 = (uint64_t *)&v16[v39];
    uint64_t v42 = *v41;
    unint64_t v43 = v41[1];
    outlined copy of Data._Representation(*v41, v43);
    *uint64_t v40 = v42;
    v40[1] = v43;
    uint64_t v44 = v18[10];
    uint64_t v45 = (uint64_t *)&v15[v44];
    uint64_t v46 = (uint64_t *)&v16[v44];
    uint64_t v47 = *v46;
    unint64_t v48 = v46[1];
    outlined copy of Data._Representation(*v46, v48);
    *uint64_t v45 = v47;
    v45[1] = v48;
    *(void *)((char *)a1 + a3[7]) = *(void *)((char *)v50 + a3[7]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for UnencryptedAttachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  int v5 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  unint64_t v6 = v5[1];
  if (v6 >> 60 != 15) {
    outlined consume of Data._Representation(*v5, v6);
  }
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  uint64_t v8 = type metadata accessor for AES.GCM.SealedBox();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = (int *)type metadata accessor for Attachment.MMCSMetadata(0);
  outlined consume of Data._Representation(*(void *)(v7 + v9[5]), *(void *)(v7 + v9[5] + 8));
  uint64_t v10 = v7 + v9[6];
  unint64_t v11 = *(void *)(v10 + 16);
  if (v11 >> 60 != 15 && (v11 & 0xF000000000000000) != 0xB000000000000000) {
    outlined consume of Data._Representation(*(void *)(v10 + 8), v11);
  }
  swift_bridgeObjectRelease();
  uint64_t v13 = v7 + v9[8];
  uint64_t v14 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  outlined consume of Data._Representation(*(void *)(v7 + v9[9]), *(void *)(v7 + v9[9] + 8));
  outlined consume of Data._Representation(*(void *)(v7 + v9[10]), *(void *)(v7 + v9[10] + 8));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for UnencryptedAttachment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  }
  else
  {
    uint64_t v11 = *v9;
    outlined copy of Data._Representation(*v9, v9[1]);
    *(void *)uint64_t v8 = v11;
    *(void *)(v8 + 8) = v10;
  }
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for AES.GCM.SealedBox();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  uint64_t v16 = (int *)type metadata accessor for Attachment.MMCSMetadata(0);
  uint64_t v17 = v16[5];
  uint64_t v18 = (uint64_t *)(v13 + v17);
  uint64_t v19 = (uint64_t *)(v14 + v17);
  uint64_t v20 = *v19;
  unint64_t v21 = v19[1];
  outlined copy of Data._Representation(*v19, v21);
  *uint64_t v18 = v20;
  v18[1] = v21;
  uint64_t v22 = v16[6];
  uint64_t v23 = v13 + v22;
  uint64_t v24 = v14 + v22;
  unint64_t v25 = *(void *)(v24 + 16);
  BOOL v26 = v25 >> 60 == 15 || (v25 & 0xF000000000000000) == 0xB000000000000000;
  uint64_t v48 = a3;
  uint64_t v49 = a2;
  if (v26)
  {
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
    *(void *)(v23 + 16) = *(void *)(v24 + 16);
  }
  else
  {
    uint64_t v27 = *(void *)(v24 + 8);
    *(void *)uint64_t v23 = *(void *)v24;
    outlined copy of Data._Representation(v27, v25);
    *(void *)(v23 + 8) = v27;
    *(void *)(v23 + 16) = v25;
  }
  uint64_t v28 = v16[7];
  uint64_t v29 = (void *)(v13 + v28);
  uint64_t v30 = (void *)(v14 + v28);
  uint64_t v31 = v30[1];
  *uint64_t v29 = *v30;
  v29[1] = v31;
  uint64_t v32 = v16[8];
  uint64_t v33 = v13 + v32;
  uint64_t v34 = v14 + v32;
  uint64_t v35 = type metadata accessor for URL();
  uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 16);
  swift_bridgeObjectRetain();
  v36(v33, v34, v35);
  uint64_t v37 = v16[9];
  uint64_t v38 = (uint64_t *)(v13 + v37);
  uint64_t v39 = (uint64_t *)(v14 + v37);
  uint64_t v40 = *v39;
  unint64_t v41 = v39[1];
  outlined copy of Data._Representation(*v39, v41);
  *uint64_t v38 = v40;
  v38[1] = v41;
  uint64_t v42 = v16[10];
  unint64_t v43 = (uint64_t *)(v13 + v42);
  uint64_t v44 = (uint64_t *)(v14 + v42);
  uint64_t v45 = *v44;
  unint64_t v46 = v44[1];
  outlined copy of Data._Representation(*v44, v46);
  uint64_t *v43 = v45;
  v43[1] = v46;
  *(void *)(a1 + *(int *)(v48 + 28)) = *(void *)(v49 + *(int *)(v48 + 28));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UnencryptedAttachment(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a2 + v7 + 8);
  if (*(void *)(a1 + v7 + 8) >> 60 == 15)
  {
    if (v10 >> 60 != 15)
    {
      uint64_t v11 = *v9;
      outlined copy of Data._Representation(v11, v10);
      *uint64_t v8 = v11;
      v8[1] = v10;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v8);
LABEL_6:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  uint64_t v12 = *v9;
  outlined copy of Data._Representation(v12, v10);
  uint64_t v13 = *v8;
  unint64_t v14 = v8[1];
  *uint64_t v8 = v12;
  v8[1] = v10;
  outlined consume of Data._Representation(v13, v14);
LABEL_8:
  uint64_t v15 = a3[6];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for AES.GCM.SealedBox();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  uint64_t v19 = (int *)type metadata accessor for Attachment.MMCSMetadata(0);
  uint64_t v20 = v19[5];
  unint64_t v21 = (uint64_t *)(v16 + v20);
  uint64_t v22 = (uint64_t *)(v17 + v20);
  uint64_t v23 = *v22;
  unint64_t v24 = v22[1];
  outlined copy of Data._Representation(*v22, v24);
  uint64_t v25 = *v21;
  unint64_t v26 = v21[1];
  uint64_t *v21 = v23;
  v21[1] = v24;
  outlined consume of Data._Representation(v25, v26);
  uint64_t v27 = v19[6];
  uint64_t v28 = v16 + v27;
  uint64_t v29 = (long long *)(v17 + v27);
  unint64_t v30 = *(void *)(v16 + v27 + 16);
  unint64_t v31 = *(void *)(v17 + v27 + 16) >> 60;
  BOOL v33 = v31 > 0xE || v31 == 11;
  if (v30 >> 60 == 15 || (v30 & 0xF000000000000000) == 0xB000000000000000)
  {
    if (v33)
    {
      long long v35 = *v29;
      *(void *)(v28 + 16) = *((void *)v29 + 2);
      *(_OWORD *)uint64_t v28 = v35;
    }
    else
    {
      *(void *)uint64_t v28 = *(void *)v29;
      uint64_t v40 = *((void *)v29 + 1);
      unint64_t v41 = *((void *)v29 + 2);
      outlined copy of Data._Representation(v40, v41);
      *(void *)(v28 + 8) = v40;
      *(void *)(v28 + 16) = v41;
    }
  }
  else if (v33)
  {
    outlined destroy of Attachment.UpdatingBlob(v28);
    uint64_t v34 = *((void *)v29 + 2);
    *(_OWORD *)uint64_t v28 = *v29;
    *(void *)(v28 + 16) = v34;
  }
  else
  {
    *(void *)uint64_t v28 = *(void *)v29;
    uint64_t v36 = *((void *)v29 + 1);
    unint64_t v37 = *((void *)v29 + 2);
    outlined copy of Data._Representation(v36, v37);
    uint64_t v38 = *(void *)(v28 + 8);
    unint64_t v39 = *(void *)(v28 + 16);
    *(void *)(v28 + 8) = v36;
    *(void *)(v28 + 16) = v37;
    outlined consume of Data._Representation(v38, v39);
  }
  uint64_t v42 = v19[7];
  unint64_t v43 = (void *)(v16 + v42);
  uint64_t v44 = (void *)(v17 + v42);
  void *v43 = *v44;
  v43[1] = v44[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v45 = v19[8];
  uint64_t v46 = v16 + v45;
  uint64_t v47 = v17 + v45;
  uint64_t v48 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 24))(v46, v47, v48);
  uint64_t v49 = v19[9];
  uint64_t v50 = (uint64_t *)(v16 + v49);
  uint64_t v51 = (uint64_t *)(v17 + v49);
  uint64_t v52 = *v51;
  unint64_t v53 = v51[1];
  outlined copy of Data._Representation(*v51, v53);
  uint64_t v54 = *v50;
  unint64_t v55 = v50[1];
  *uint64_t v50 = v52;
  v50[1] = v53;
  outlined consume of Data._Representation(v54, v55);
  uint64_t v56 = v19[10];
  uint64_t v57 = (uint64_t *)(v16 + v56);
  uint64_t v58 = (uint64_t *)(v17 + v56);
  uint64_t v59 = *v58;
  unint64_t v60 = v58[1];
  outlined copy of Data._Representation(*v58, v60);
  uint64_t v61 = *v57;
  unint64_t v62 = v57[1];
  uint64_t *v57 = v59;
  v57[1] = v60;
  outlined consume of Data._Representation(v61, v62);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of Data(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of Attachment.UpdatingBlob(uint64_t a1)
{
  return a1;
}

uint64_t initializeWithTake for UnencryptedAttachment(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for AES.GCM.SealedBox();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = (int *)type metadata accessor for Attachment.MMCSMetadata(0);
  *(_OWORD *)(v8 + v11[5]) = *(_OWORD *)(v9 + v11[5]);
  uint64_t v12 = v11[6];
  uint64_t v13 = v8 + v12;
  uint64_t v14 = v9 + v12;
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *(void *)(v13 + 16) = *(void *)(v14 + 16);
  *(_OWORD *)(v8 + v11[7]) = *(_OWORD *)(v9 + v11[7]);
  uint64_t v15 = v11[8];
  uint64_t v16 = v8 + v15;
  uint64_t v17 = v9 + v15;
  uint64_t v18 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
  *(_OWORD *)(v8 + v11[9]) = *(_OWORD *)(v9 + v11[9]);
  *(_OWORD *)(v8 + v11[10]) = *(_OWORD *)(v9 + v11[10]);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for UnencryptedAttachment(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  unint64_t v10 = *(void *)(a1 + v7 + 8);
  if (v10 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v11 = *(void *)(v9 + 8);
  if (v11 >> 60 == 15)
  {
    outlined destroy of Data(v8);
LABEL_4:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)v8;
  *(void *)uint64_t v8 = *(void *)v9;
  *(void *)(v8 + 8) = v11;
  outlined consume of Data._Representation(v12, v10);
LABEL_6:
  uint64_t v13 = a3[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for AES.GCM.SealedBox();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 40))(v14, v15, v16);
  uint64_t v17 = (int *)type metadata accessor for Attachment.MMCSMetadata(0);
  uint64_t v18 = v17[5];
  uint64_t v19 = *(void *)(v14 + v18);
  unint64_t v20 = *(void *)(v14 + v18 + 8);
  *(_OWORD *)(v14 + v18) = *(_OWORD *)(v15 + v18);
  outlined consume of Data._Representation(v19, v20);
  uint64_t v21 = v17[6];
  uint64_t v22 = v14 + v21;
  uint64_t v23 = v15 + v21;
  unint64_t v24 = *(void *)(v14 + v21 + 16);
  if (v24 >> 60 == 15 || (v24 & 0xF000000000000000) == 0xB000000000000000) {
    goto LABEL_16;
  }
  unint64_t v26 = *(void *)(v23 + 16);
  if (v26 >> 60 == 15 || (v26 & 0xF000000000000000) == 0xB000000000000000)
  {
    outlined destroy of Attachment.UpdatingBlob(v22);
LABEL_16:
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
    *(void *)(v22 + 16) = *(void *)(v23 + 16);
    goto LABEL_17;
  }
  uint64_t v28 = *(void *)(v22 + 8);
  *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
  *(void *)(v22 + 16) = v26;
  outlined consume of Data._Representation(v28, v24);
LABEL_17:
  uint64_t v29 = v17[7];
  unint64_t v30 = (void *)(v14 + v29);
  unint64_t v31 = (uint64_t *)(v15 + v29);
  uint64_t v33 = *v31;
  uint64_t v32 = v31[1];
  void *v30 = v33;
  v30[1] = v32;
  swift_bridgeObjectRelease();
  uint64_t v34 = v17[8];
  uint64_t v35 = v14 + v34;
  uint64_t v36 = v15 + v34;
  uint64_t v37 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 40))(v35, v36, v37);
  uint64_t v38 = v17[9];
  uint64_t v39 = *(void *)(v14 + v38);
  unint64_t v40 = *(void *)(v14 + v38 + 8);
  *(_OWORD *)(v14 + v38) = *(_OWORD *)(v15 + v38);
  outlined consume of Data._Representation(v39, v40);
  uint64_t v41 = v17[10];
  uint64_t v42 = *(void *)(v14 + v41);
  unint64_t v43 = *(void *)(v14 + v41 + 8);
  *(_OWORD *)(v14 + v41) = *(_OWORD *)(v15 + v41);
  outlined consume of Data._Representation(v42, v43);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UnencryptedAttachment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B1036380);
}

uint64_t sub_1B1036380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SymmetricKey();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for Attachment.MMCSMetadata(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 24);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 28));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for UnencryptedAttachment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B10364A8);
}

uint64_t sub_1B10364A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for SymmetricKey();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for Attachment.MMCSMetadata(0);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 24);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata completion function for UnencryptedAttachment()
{
  uint64_t result = type metadata accessor for SymmetricKey();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Attachment.MMCSMetadata(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t ObjC metadata update function for Attachment()
{
  return type metadata accessor for Attachment(0);
}

uint64_t type metadata accessor for Attachment(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for Attachment);
}

void type metadata completion function for Attachment()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for Attachment(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for Attachment);
}

uint64_t dispatch thunk of Attachment.__allocating_init(id:attachment:dataCryptor:localParticipantID:config:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of Attachment.__allocating_init(id:key:mmcsMetadata:metadata:dataCryptor:localParticipantID:config:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t getEnumTagSinglePayload for Attachment.Errors(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Attachment.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B10369E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Attachment.Errors()
{
  return &type metadata for Attachment.Errors;
}

uint64_t destroy for Attachment.UpdatingBlob(uint64_t a1)
{
  return outlined consume of Data._Representation(*(void *)(a1 + 8), *(void *)(a1 + 16));
}

void *initializeBufferWithCopyOfBuffer for Attachment.UpdatingBlob(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  unint64_t v4 = a2[2];
  outlined copy of Data._Representation(v3, v4);
  a1[1] = v3;
  a1[2] = v4;
  return a1;
}

void *assignWithCopy for Attachment.UpdatingBlob(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  unint64_t v4 = a2[2];
  outlined copy of Data._Representation(v3, v4);
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[2];
  a1[1] = v3;
  a1[2] = v4;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

uint64_t assignWithTake for Attachment.UpdatingBlob(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  outlined consume of Data._Representation(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for Attachment.UpdatingBlob(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 16) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 16) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for Attachment.UpdatingBlob(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2)
    {
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Attachment.UpdatingBlob()
{
  return &type metadata for Attachment.UpdatingBlob;
}

uint64_t *initializeBufferWithCopyOfBuffer for Attachment.MMCSMetadata(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AES.GCM.SealedBox();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = *v10;
    unint64_t v12 = v10[1];
    outlined copy of Data._Representation(*v10, v12);
    *uint64_t v9 = v11;
    v9[1] = v12;
    uint64_t v13 = a3[6];
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    unint64_t v16 = *((void *)v15 + 2);
    if (v16 >> 60 == 15 || (v16 & 0xF000000000000000) == 0xB000000000000000)
    {
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      *((void *)v14 + 2) = *((void *)v15 + 2);
    }
    else
    {
      uint64_t v19 = *((void *)v15 + 1);
      *(void *)uint64_t v14 = *(void *)v15;
      outlined copy of Data._Representation(v19, v16);
      *((void *)v14 + 1) = v19;
      *((void *)v14 + 2) = v16;
    }
    uint64_t v20 = a3[7];
    uint64_t v21 = a3[8];
    uint64_t v22 = (uint64_t *)((char *)a1 + v20);
    uint64_t v23 = (uint64_t *)((char *)a2 + v20);
    uint64_t v24 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v24;
    uint64_t v25 = (char *)a1 + v21;
    unint64_t v26 = (char *)a2 + v21;
    uint64_t v27 = type metadata accessor for URL();
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16);
    swift_bridgeObjectRetain();
    v28(v25, v26, v27);
    uint64_t v29 = a3[9];
    unint64_t v30 = (uint64_t *)((char *)a1 + v29);
    unint64_t v31 = (uint64_t *)((char *)a2 + v29);
    uint64_t v32 = *v31;
    unint64_t v33 = v31[1];
    outlined copy of Data._Representation(*v31, v33);
    uint64_t *v30 = v32;
    v30[1] = v33;
    uint64_t v34 = a3[10];
    uint64_t v35 = (uint64_t *)((char *)a1 + v34);
    uint64_t v36 = (uint64_t *)((char *)a2 + v34);
    uint64_t v37 = *v36;
    unint64_t v38 = v36[1];
    outlined copy of Data._Representation(*v36, v38);
    uint64_t *v35 = v37;
    v35[1] = v38;
  }
  return a1;
}

uint64_t destroy for Attachment.MMCSMetadata(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for AES.GCM.SealedBox();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  outlined consume of Data._Representation(*(void *)(a1 + a2[5]), *(void *)(a1 + a2[5] + 8));
  uint64_t v5 = a1 + a2[6];
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 >> 60 != 15 && (v6 & 0xF000000000000000) != 0xB000000000000000) {
    outlined consume of Data._Representation(*(void *)(v5 + 8), v6);
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = a1 + a2[8];
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  outlined consume of Data._Representation(*(void *)(a1 + a2[9]), *(void *)(a1 + a2[9] + 8));
  uint64_t v10 = (uint64_t *)(a1 + a2[10]);
  uint64_t v11 = *v10;
  unint64_t v12 = v10[1];
  return outlined consume of Data._Representation(v11, v12);
}

uint64_t initializeWithCopy for Attachment.MMCSMetadata(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AES.GCM.SealedBox();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  outlined copy of Data._Representation(*v9, v11);
  *uint64_t v8 = v10;
  v8[1] = v11;
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  unint64_t v15 = *(void *)(v14 + 16);
  if (v15 >> 60 == 15 || (v15 & 0xF000000000000000) == 0xB000000000000000)
  {
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
    *(void *)(v13 + 16) = *(void *)(v14 + 16);
  }
  else
  {
    uint64_t v17 = *(void *)(v14 + 8);
    *(void *)uint64_t v13 = *(void *)v14;
    outlined copy of Data._Representation(v17, v15);
    *(void *)(v13 + 8) = v17;
    *(void *)(v13 + 16) = v15;
  }
  uint64_t v18 = a3[7];
  uint64_t v19 = a3[8];
  uint64_t v20 = (void *)(a1 + v18);
  uint64_t v21 = (void *)(a2 + v18);
  uint64_t v22 = v21[1];
  void *v20 = *v21;
  v20[1] = v22;
  uint64_t v23 = a1 + v19;
  uint64_t v24 = a2 + v19;
  uint64_t v25 = type metadata accessor for URL();
  unint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16);
  swift_bridgeObjectRetain();
  v26(v23, v24, v25);
  uint64_t v27 = a3[9];
  uint64_t v28 = (uint64_t *)(a1 + v27);
  uint64_t v29 = (uint64_t *)(a2 + v27);
  uint64_t v30 = *v29;
  unint64_t v31 = v29[1];
  outlined copy of Data._Representation(*v29, v31);
  *uint64_t v28 = v30;
  v28[1] = v31;
  uint64_t v32 = a3[10];
  unint64_t v33 = (uint64_t *)(a1 + v32);
  uint64_t v34 = (uint64_t *)(a2 + v32);
  uint64_t v35 = *v34;
  unint64_t v36 = v34[1];
  outlined copy of Data._Representation(*v34, v36);
  *unint64_t v33 = v35;
  v33[1] = v36;
  return a1;
}

uint64_t assignWithCopy for Attachment.MMCSMetadata(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AES.GCM.SealedBox();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  outlined copy of Data._Representation(*v9, v11);
  uint64_t v12 = *v8;
  unint64_t v13 = v8[1];
  *uint64_t v8 = v10;
  v8[1] = v11;
  outlined consume of Data._Representation(v12, v13);
  uint64_t v14 = a3[6];
  uint64_t v15 = a1 + v14;
  unint64_t v16 = (long long *)(a2 + v14);
  unint64_t v17 = *(void *)(a1 + v14 + 16);
  unint64_t v18 = *(void *)(a2 + v14 + 16) >> 60;
  BOOL v20 = v18 > 0xE || v18 == 11;
  if (v17 >> 60 == 15 || (v17 & 0xF000000000000000) == 0xB000000000000000)
  {
    if (v20)
    {
      long long v22 = *v16;
      *(void *)(v15 + 16) = *((void *)v16 + 2);
      *(_OWORD *)uint64_t v15 = v22;
    }
    else
    {
      *(void *)uint64_t v15 = *(void *)v16;
      uint64_t v24 = *((void *)v16 + 1);
      unint64_t v25 = *((void *)v16 + 2);
      outlined copy of Data._Representation(v24, v25);
      *(void *)(v15 + 8) = v24;
      *(void *)(v15 + 16) = v25;
    }
  }
  else if (v20)
  {
    outlined destroy of Attachment.UpdatingBlob(v15);
    uint64_t v23 = *((void *)v16 + 2);
    *(_OWORD *)uint64_t v15 = *v16;
    *(void *)(v15 + 16) = v23;
  }
  else
  {
    *(void *)uint64_t v15 = *(void *)v16;
    uint64_t v26 = *((void *)v16 + 1);
    unint64_t v27 = *((void *)v16 + 2);
    outlined copy of Data._Representation(v26, v27);
    uint64_t v28 = *(void *)(v15 + 8);
    unint64_t v29 = *(void *)(v15 + 16);
    *(void *)(v15 + 8) = v26;
    *(void *)(v15 + 16) = v27;
    outlined consume of Data._Representation(v28, v29);
  }
  uint64_t v30 = a3[7];
  unint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = (void *)(a2 + v30);
  void *v31 = *v32;
  v31[1] = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v33 = a3[8];
  uint64_t v34 = a1 + v33;
  uint64_t v35 = a2 + v33;
  uint64_t v36 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 24))(v34, v35, v36);
  uint64_t v37 = a3[9];
  unint64_t v38 = (uint64_t *)(a1 + v37);
  uint64_t v39 = (uint64_t *)(a2 + v37);
  uint64_t v40 = *v39;
  unint64_t v41 = v39[1];
  outlined copy of Data._Representation(*v39, v41);
  uint64_t v42 = *v38;
  unint64_t v43 = v38[1];
  *unint64_t v38 = v40;
  v38[1] = v41;
  outlined consume of Data._Representation(v42, v43);
  uint64_t v44 = a3[10];
  uint64_t v45 = (uint64_t *)(a1 + v44);
  uint64_t v46 = (uint64_t *)(a2 + v44);
  uint64_t v47 = *v46;
  unint64_t v48 = v46[1];
  outlined copy of Data._Representation(*v46, v48);
  uint64_t v49 = *v45;
  unint64_t v50 = v45[1];
  *uint64_t v45 = v47;
  v45[1] = v48;
  outlined consume of Data._Representation(v49, v50);
  return a1;
}

uint64_t initializeWithTake for Attachment.MMCSMetadata(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AES.GCM.SealedBox();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  uint64_t v10 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  uint64_t v14 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  return a1;
}

uint64_t assignWithTake for Attachment.MMCSMetadata(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AES.GCM.SealedBox();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void *)(a1 + v7);
  unint64_t v9 = *(void *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  outlined consume of Data._Representation(v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  unint64_t v13 = *(void *)(a1 + v10 + 16);
  if (v13 >> 60 == 15 || (v13 & 0xF000000000000000) == 0xB000000000000000) {
    goto LABEL_11;
  }
  unint64_t v15 = *(void *)(v12 + 16);
  if (v15 >> 60 == 15 || (v15 & 0xF000000000000000) == 0xB000000000000000)
  {
    outlined destroy of Attachment.UpdatingBlob(v11);
LABEL_11:
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    *(void *)(v11 + 16) = *(void *)(v12 + 16);
    goto LABEL_12;
  }
  uint64_t v17 = *(void *)(v11 + 8);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *(void *)(v11 + 16) = v15;
  outlined consume of Data._Representation(v17, v13);
LABEL_12:
  uint64_t v18 = a3[7];
  uint64_t v19 = (void *)(a1 + v18);
  BOOL v20 = (uint64_t *)(a2 + v18);
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  *uint64_t v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[8];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  uint64_t v26 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 40))(v24, v25, v26);
  uint64_t v27 = a3[9];
  uint64_t v28 = *(void *)(a1 + v27);
  unint64_t v29 = *(void *)(a1 + v27 + 8);
  *(_OWORD *)(a1 + v27) = *(_OWORD *)(a2 + v27);
  outlined consume of Data._Representation(v28, v29);
  uint64_t v30 = a3[10];
  uint64_t v31 = *(void *)(a1 + v30);
  unint64_t v32 = *(void *)(a1 + v30 + 8);
  *(_OWORD *)(a1 + v30) = *(_OWORD *)(a2 + v30);
  outlined consume of Data._Representation(v31, v32);
  return a1;
}

uint64_t getEnumTagSinglePayload for Attachment.MMCSMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B103752C);
}

uint64_t sub_1B103752C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AES.GCM.SealedBox();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for URL();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 32);
    return v12(v14, a2, v13);
  }
}

uint64_t storeEnumTagSinglePayload for Attachment.MMCSMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B1037670);
}

uint64_t sub_1B1037670(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for AES.GCM.SealedBox();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for URL();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 32);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t type metadata completion function for Attachment.MMCSMetadata()
{
  uint64_t result = type metadata accessor for AES.GCM.SealedBox();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for URL();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t destroy for Attachment.MMCSMetadata.UploadStatus(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 16);
  if ((v1 & 0x3000000000000000) == 0) {
    return outlined consume of Data._Representation(*(void *)(result + 8), v1);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for Attachment.MMCSMetadata.UploadStatus(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 16);
  if ((v3 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
  }
  else
  {
    uint64_t v4 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    outlined copy of Data._Representation(v4, v3);
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v3;
  }
  return a1;
}

void *assignWithCopy for Attachment.MMCSMetadata.UploadStatus(void *a1, void *a2)
{
  unint64_t v4 = a1[2];
  uint64_t v5 = a2[2] & 0x3000000000000000;
  if ((v4 & 0x3000000000000000) == 0)
  {
    if (!v5)
    {
      *a1 = *a2;
      uint64_t v11 = a2[1];
      unint64_t v10 = a2[2];
      outlined copy of Data._Representation(v11, v10);
      uint64_t v12 = a1[1];
      unint64_t v13 = a1[2];
      a1[1] = v11;
      a1[2] = v10;
      outlined consume of Data._Representation(v12, v13);
      return a1;
    }
    outlined consume of Data._Representation(a1[1], v4);
    goto LABEL_6;
  }
  if (v5)
  {
LABEL_6:
    long long v8 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v8;
    return a1;
  }
  *a1 = *a2;
  uint64_t v7 = a2[1];
  unint64_t v6 = a2[2];
  outlined copy of Data._Representation(v7, v6);
  a1[1] = v7;
  a1[2] = v6;
  return a1;
}

uint64_t assignWithTake for Attachment.MMCSMetadata.UploadStatus(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if ((v4 & 0x3000000000000000) == 0)
  {
    uint64_t v5 = *(void *)(a2 + 16);
    uint64_t v6 = *(void *)(a1 + 8);
    if ((v5 & 0x3000000000000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = v5;
      outlined consume of Data._Representation(v6, v4);
      return a1;
    }
    outlined consume of Data._Representation(v6, v4);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for Attachment.MMCSMetadata.UploadStatus(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xB && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 11);
  }
  uint64_t v3 = *(void *)(a1 + 16) >> 60;
  if (((4 * v3) & 0xC) != 0) {
    unsigned int v4 = 16 - ((4 * v3) & 0xC | (v3 >> 2));
  }
  else {
    unsigned int v4 = 0;
  }
  if (v4 >= 3) {
    return v4 - 2;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Attachment.MMCSMetadata.UploadStatus(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xA)
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)uint64_t result = a2 - 11;
    if (a3 >= 0xB) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xB) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2)
    {
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = (unint64_t)((4 * (14 - a2)) | ((14 - a2) >> 2)) << 60;
    }
  }
  return result;
}

uint64_t getEnumTag for Attachment.MMCSMetadata.UploadStatus(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16) >> 60;
  if (((4 * v1) & 0xC) != 0) {
    return 16 - ((4 * v1) & 0xC | (v1 >> 2));
  }
  else {
    return 0;
  }
}

void *destructiveInjectEnumTag for Attachment.MMCSMetadata.UploadStatus(void *result, unsigned int a2)
{
  if (a2 > 0xC)
  {
    result[1] = 0;
    result[2] = 0;
    *uint64_t result = a2 - 13;
  }
  else if (a2)
  {
    result[1] = 0;
    result[2] = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
  }
  return result;
}

ValueMetadata *type metadata accessor for Attachment.MMCSMetadata.UploadStatus()
{
  return &type metadata for Attachment.MMCSMetadata.UploadStatus;
}

uint64_t *destroy for Attachment.Metadata(uint64_t *result)
{
  unint64_t v1 = result[1];
  if (v1 >> 60 != 15) {
    return (uint64_t *)outlined consume of Data._Representation(*result, v1);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for Attachment.Metadata(uint64_t a1, uint64_t *a2)
{
  unint64_t v3 = a2[1];
  if (v3 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v4 = *a2;
    outlined copy of Data._Representation(*a2, a2[1]);
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t *assignWithCopy for Attachment.Metadata(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      uint64_t v6 = *(void *)a2;
      outlined copy of Data._Representation(*(void *)a2, *(void *)(a2 + 8));
      uint64_t v7 = *a1;
      unint64_t v8 = a1[1];
      *a1 = v6;
      a1[1] = v4;
      outlined consume of Data._Representation(v7, v8);
      return a1;
    }
    outlined destroy of Data((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  uint64_t v5 = *(void *)a2;
  outlined copy of Data._Representation(*(void *)a2, *(void *)(a2 + 8));
  *a1 = v5;
  a1[1] = v4;
  return a1;
}

uint64_t *assignWithTake for Attachment.Metadata(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a1[1];
  if (v4 >> 60 != 15)
  {
    unint64_t v5 = a2[1];
    if (v5 >> 60 != 15)
    {
      uint64_t v6 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      outlined consume of Data._Representation(v6, v4);
      return a1;
    }
    outlined destroy of Data((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for Attachment.Metadata(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xC && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 12);
  }
  uint64_t v3 = *(void *)(a1 + 8) >> 60;
  if (((4 * v3) & 0xC) != 0) {
    int v4 = 14 - ((4 * v3) & 0xC | (v3 >> 2));
  }
  else {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Attachment.Metadata(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(void *)uint64_t result = a2 - 12;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xC) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xC) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Attachment.Metadata()
{
  return &type metadata for Attachment.Metadata;
}

unint64_t initializeBufferWithCopyOfBuffer for Attachment.EncryptedAttachmentStatus(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v14 = *(void *)a2;
      unint64_t v15 = *(void *)(a2 + 8);
      outlined copy of Data._Representation(*(void *)a2, v15);
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v15;
      uint64_t v16 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v16;
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      uint64_t v17 = *(void *)(a2 + 40);
      unint64_t v18 = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v17, v18);
      *(void *)(a1 + 40) = v17;
      *(void *)(a1 + 48) = v18;
      uint64_t v19 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      uint64_t v20 = *(int *)(v19 + 32);
      uint64_t v21 = a1 + v20;
      uint64_t v22 = a2 + v20;
      uint64_t v23 = type metadata accessor for UnknownStorage();
      uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16);
      v24(v21, v22, v23);
      uint64_t v25 = *(int *)(v19 + 36);
      uint64_t v26 = (void *)(a1 + v25);
      uint64_t v27 = (void *)(a2 + v25);
      uint64_t v28 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      uint64_t v29 = *(void *)(v28 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
      {
        uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
      }
      else
      {
        uint64_t v143 = v29;
        uint64_t v146 = v28;
        uint64_t v83 = v27[1];
        *uint64_t v26 = *v27;
        v26[1] = v83;
        uint64_t v84 = v27[3];
        uint64_t v26[2] = v27[2];
        v26[3] = v84;
        uint64_t v85 = v27[4];
        unint64_t v86 = v27[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v85, v86);
        v26[4] = v85;
        v26[5] = v86;
        uint64_t v87 = v27[6];
        unint64_t v88 = v27[7];
        outlined copy of Data._Representation(v87, v88);
        v26[6] = v87;
        v26[7] = v88;
        uint64_t v140 = v23;
        v24((uint64_t)v26 + *(int *)(v146 + 32), (uint64_t)v27 + *(int *)(v146 + 32), v23);
        uint64_t v89 = *(int *)(v28 + 36);
        uint64_t v90 = (void *)((char *)v26 + v89);
        uint64_t v136 = (void (*)(char *, char *, uint64_t))v24;
        uint64_t v91 = (void *)((char *)v27 + v89);
        uint64_t v92 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        uint64_t v93 = *(void *)(v92 - 8);
        unint64_t v138 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v93 + 48);
        uint64_t v134 = v93;
        if (v138(v91, 1, v92))
        {
          uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v90, v91, *(void *)(*(void *)(v94 - 8) + 64));
        }
        else
        {
          uint64_t v110 = v91[1];
          *uint64_t v90 = *v91;
          unint64_t v111 = v91[2];
          outlined copy of Data._Representation(v110, v111);
          v90[1] = v110;
          v90[2] = v111;
          uint64_t v23 = v140;
          v136((char *)v90 + *(int *)(v92 + 24), (char *)v91 + *(int *)(v92 + 24), v140);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v93 + 56))(v90, 0, 1, v92);
        }
        uint64_t v95 = v92;
        uint64_t v112 = *(int *)(v146 + 40);
        uint64_t v113 = (void *)((char *)v26 + v112);
        uint64_t v114 = (void *)((char *)v27 + v112);
        if (v138(v114, 1, v95))
        {
          uint64_t v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v113, v114, *(void *)(*(void *)(v115 - 8) + 64));
        }
        else
        {
          uint64_t v126 = v95;
          uint64_t v127 = v114[1];
          *uint64_t v113 = *v114;
          unint64_t v128 = v114[2];
          outlined copy of Data._Representation(v127, v128);
          v113[1] = v127;
          v113[2] = v128;
          v136((char *)v113 + *(int *)(v126 + 24), (char *)v114 + *(int *)(v126 + 24), v23);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v134 + 56))(v113, 0, 1, v126);
        }
        (*(void (**)(void *, void, uint64_t, uint64_t))(v143 + 56))(v26, 0, 1, v146);
      }
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = type metadata accessor for SymmetricKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      uint64_t v8 = type metadata accessor for UnencryptedAttachment(0);
      uint64_t v9 = *(int *)(v8 + 20);
      uint64_t v10 = a1 + v9;
      uint64_t v11 = (uint64_t *)(a2 + v9);
      unint64_t v12 = v11[1];
      if (v12 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
      }
      else
      {
        uint64_t v48 = *v11;
        outlined copy of Data._Representation(*v11, v11[1]);
        *(void *)uint64_t v10 = v48;
        *(void *)(v10 + 8) = v12;
      }
      uint64_t v49 = *(int *)(v8 + 24);
      uint64_t v50 = a1 + v49;
      uint64_t v51 = a2 + v49;
      uint64_t v52 = type metadata accessor for AES.GCM.SealedBox();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 16))(v50, v51, v52);
      unint64_t v53 = (int *)type metadata accessor for Attachment.MMCSMetadata(0);
      uint64_t v54 = v53[5];
      unint64_t v55 = (uint64_t *)(v50 + v54);
      uint64_t v56 = (uint64_t *)(v51 + v54);
      uint64_t v57 = *v56;
      unint64_t v58 = v56[1];
      outlined copy of Data._Representation(*v56, v58);
      *unint64_t v55 = v57;
      v55[1] = v58;
      uint64_t v59 = v53[6];
      uint64_t v60 = v50 + v59;
      uint64_t v61 = v51 + v59;
      unint64_t v62 = *(void *)(v61 + 16);
      BOOL v63 = v62 >> 60 == 15 || (v62 & 0xF000000000000000) == 0xB000000000000000;
      uint64_t v145 = v8;
      if (v63)
      {
        *(_OWORD *)uint64_t v60 = *(_OWORD *)v61;
        *(void *)(v60 + 16) = *(void *)(v61 + 16);
      }
      else
      {
        uint64_t v64 = *(void *)(v61 + 8);
        *(void *)uint64_t v60 = *(void *)v61;
        outlined copy of Data._Representation(v64, v62);
        *(void *)(v60 + 8) = v64;
        *(void *)(v60 + 16) = v62;
      }
      uint64_t v65 = v53[7];
      uint64_t v66 = (void *)(v50 + v65);
      uint64_t v67 = (void *)(v51 + v65);
      uint64_t v68 = v67[1];
      void *v66 = *v67;
      v66[1] = v68;
      uint64_t v69 = v53[8];
      uint64_t v142 = v50 + v69;
      uint64_t v70 = v51 + v69;
      uint64_t v71 = type metadata accessor for URL();
      uint64_t v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v71 - 8) + 16);
      swift_bridgeObjectRetain();
      v72(v142, v70, v71);
      uint64_t v73 = v53[9];
      uint64_t v74 = (uint64_t *)(v50 + v73);
      uint64_t v75 = (uint64_t *)(v51 + v73);
      uint64_t v76 = *v75;
      unint64_t v77 = v75[1];
      outlined copy of Data._Representation(*v75, v77);
      uint64_t *v74 = v76;
      v74[1] = v77;
      uint64_t v78 = v53[10];
      uint64_t v79 = (uint64_t *)(v50 + v78);
      uint64_t v80 = (uint64_t *)(v51 + v78);
      uint64_t v81 = *v80;
      unint64_t v82 = v80[1];
      outlined copy of Data._Representation(*v80, v82);
      *uint64_t v79 = v81;
      v79[1] = v82;
      *(void *)(a1 + *(int *)(v145 + 28)) = *(void *)(a2 + *(int *)(v145 + 28));
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v31 = *(void *)a2;
      unint64_t v32 = *(void *)(a2 + 8);
      outlined copy of Data._Representation(*(void *)a2, v32);
      *(void *)a1 = v31;
      *(void *)(a1 + 8) = v32;
      uint64_t v33 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v33;
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      uint64_t v34 = *(void *)(a2 + 40);
      unint64_t v35 = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v34, v35);
      *(void *)(a1 + 40) = v34;
      *(void *)(a1 + 48) = v35;
      uint64_t v36 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      uint64_t v37 = *(int *)(v36 + 32);
      uint64_t v38 = a1 + v37;
      uint64_t v39 = a2 + v37;
      uint64_t v40 = type metadata accessor for UnknownStorage();
      unint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 16);
      v41(v38, v39, v40);
      uint64_t v42 = *(int *)(v36 + 36);
      unint64_t v43 = (void *)(a1 + v42);
      uint64_t v44 = (void *)(a2 + v42);
      uint64_t v45 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      uint64_t v46 = *((void *)v45 - 1);
      if ((*(unsigned int (**)(void *, uint64_t, int *))(v46 + 48))(v44, 1, v45))
      {
        uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
      }
      else
      {
        uint64_t v144 = v46;
        uint64_t v147 = (void (*)(char *, char *, uint64_t))v41;
        uint64_t v96 = v44[1];
        void *v43 = *v44;
        v43[1] = v96;
        uint64_t v97 = v44[3];
        v43[2] = v44[2];
        v43[3] = v97;
        uint64_t v98 = v44[4];
        unint64_t v99 = v44[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v98, v99);
        v43[4] = v98;
        v43[5] = v99;
        uint64_t v100 = v44[6];
        unint64_t v101 = v44[7];
        outlined copy of Data._Representation(v100, v101);
        v43[6] = v100;
        v43[7] = v101;
        uint64_t v141 = v40;
        v147((char *)v43 + v45[8], (char *)v44 + v45[8], v40);
        uint64_t v102 = v45[9];
        uint64_t v103 = (void *)((char *)v43 + v102);
        uint64_t v104 = (void *)((char *)v44 + v102);
        uint64_t v105 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        uint64_t v106 = *(void *)(v105 - 8);
        uint64_t v139 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v106 + 48);
        uint64_t v137 = v106;
        if (v139(v104, 1, v105))
        {
          uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v103, v104, *(void *)(*(void *)(v107 - 8) + 64));
          uint64_t v108 = v105;
          uint64_t v109 = v141;
        }
        else
        {
          uint64_t v116 = v104[1];
          *uint64_t v103 = *v104;
          unint64_t v133 = v104[2];
          uint64_t v135 = v45;
          uint64_t v117 = v116;
          outlined copy of Data._Representation(v116, v133);
          v103[1] = v117;
          uint64_t v45 = v135;
          v103[2] = v133;
          uint64_t v118 = *(int *)(v105 + 24);
          uint64_t v119 = (char *)v103 + v118;
          uint64_t v120 = (char *)v104 + v118;
          unint64_t v121 = v103;
          uint64_t v109 = v141;
          v147(v119, v120, v141);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v106 + 56))(v121, 0, 1, v105);
          uint64_t v108 = v105;
        }
        uint64_t v122 = v45[10];
        uint64_t v123 = (void *)((char *)v43 + v122);
        uint64_t v124 = (void *)((char *)v44 + v122);
        if (v139(v124, 1, v108))
        {
          uint64_t v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v123, v124, *(void *)(*(void *)(v125 - 8) + 64));
        }
        else
        {
          uint64_t v129 = v124[1];
          *uint64_t v123 = *v124;
          unint64_t v130 = v124[2];
          outlined copy of Data._Representation(v129, v130);
          v123[1] = v129;
          v123[2] = v130;
          v147((char *)v123 + *(int *)(v108 + 24), (char *)v124 + *(int *)(v108 + 24), v109);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v137 + 56))(v123, 0, 1, v108);
        }
        (*(void (**)(void *, void, uint64_t, int *))(v144 + 56))(v43, 0, 1, v45);
      }
      uint64_t v131 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_AttachmentMetadata, attempt: Int));
      *(void *)(a1 + *(int *)(v131 + 48)) = *(void *)(a2 + *(int *)(v131 + 48));
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for Attachment.EncryptedAttachmentStatus(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
LABEL_4:
    outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(*(void *)(a1 + 40), *(void *)(a1 + 48));
    uint64_t v3 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
    uint64_t v4 = a1 + *(int *)(v3 + 32);
    uint64_t v5 = type metadata accessor for UnknownStorage();
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    v25(v4, v5);
    uint64_t v6 = a1 + *(int *)(v3 + 36);
    uint64_t v7 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((void *)v7 - 1) + 48))(v6, 1, v7);
    if (!result)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(*(void *)(v6 + 32), *(void *)(v6 + 40));
      outlined consume of Data._Representation(*(void *)(v6 + 48), *(void *)(v6 + 56));
      v25(v6 + v7[8], v5);
      uint64_t v8 = v6 + v7[9];
      uint64_t v9 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
      if (!v10(v8, 1, v9))
      {
        outlined consume of Data._Representation(*(void *)(v8 + 8), *(void *)(v8 + 16));
        v25(v8 + *(int *)(v9 + 24), v5);
      }
      uint64_t v11 = v6 + v7[10];
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v10)(v11, 1, v9);
      if (!result)
      {
        outlined consume of Data._Representation(*(void *)(v11 + 8), *(void *)(v11 + 16));
        uint64_t v24 = v11 + *(int *)(v9 + 24);
        return ((uint64_t (*)(uint64_t, uint64_t))v25)(v24, v5);
      }
    }
    return result;
  }
  if (result != 1)
  {
    if (result) {
      return result;
    }
    goto LABEL_4;
  }
  uint64_t v12 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(a1, v12);
  uint64_t v13 = type metadata accessor for UnencryptedAttachment(0);
  uint64_t v14 = (uint64_t *)(a1 + *(int *)(v13 + 20));
  unint64_t v15 = v14[1];
  if (v15 >> 60 != 15) {
    outlined consume of Data._Representation(*v14, v15);
  }
  uint64_t v16 = a1 + *(int *)(v13 + 24);
  uint64_t v17 = type metadata accessor for AES.GCM.SealedBox();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
  unint64_t v18 = (int *)type metadata accessor for Attachment.MMCSMetadata(0);
  outlined consume of Data._Representation(*(void *)(v16 + v18[5]), *(void *)(v16 + v18[5] + 8));
  uint64_t v19 = v16 + v18[6];
  unint64_t v20 = *(void *)(v19 + 16);
  if (v20 >> 60 != 15 && (v20 & 0xF000000000000000) != 0xB000000000000000) {
    outlined consume of Data._Representation(*(void *)(v19 + 8), v20);
  }
  swift_bridgeObjectRelease();
  uint64_t v22 = v16 + v18[8];
  uint64_t v23 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(v22, v23);
  outlined consume of Data._Representation(*(void *)(v16 + v18[9]), *(void *)(v16 + v18[9] + 8));
  outlined consume of Data._Representation(*(void *)(v16 + v18[10]), *(void *)(v16 + v18[10] + 8));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Attachment.EncryptedAttachmentStatus(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v11 = *(void *)a2;
    unint64_t v12 = *(void *)(a2 + 8);
    outlined copy of Data._Representation(*(void *)a2, v12);
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v12;
    uint64_t v13 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v13;
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
    uint64_t v14 = *(void *)(a2 + 40);
    unint64_t v15 = *(void *)(a2 + 48);
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v14, v15);
    *(void *)(a1 + 40) = v14;
    *(void *)(a1 + 48) = v15;
    uint64_t v16 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
    uint64_t v17 = *(int *)(v16 + 32);
    uint64_t v18 = a1 + v17;
    uint64_t v19 = a2 + v17;
    uint64_t v20 = type metadata accessor for UnknownStorage();
    uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16);
    v21(v18, v19, v20);
    uint64_t v22 = *(int *)(v16 + 36);
    uint64_t v23 = (void *)(a1 + v22);
    uint64_t v24 = (void *)(a2 + v22);
    uint64_t v25 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    uint64_t v26 = *(void *)(v25 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      uint64_t v139 = v26;
      uint64_t v81 = v24[1];
      void *v23 = *v24;
      v23[1] = v81;
      uint64_t v82 = v24[3];
      v23[2] = v24[2];
      v23[3] = v82;
      uint64_t v83 = v25;
      uint64_t v84 = v21;
      uint64_t v85 = v24[4];
      unint64_t v86 = v24[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v85, v86);
      v23[4] = v85;
      v23[5] = v86;
      uint64_t v87 = v24[6];
      unint64_t v88 = v24[7];
      outlined copy of Data._Representation(v87, v88);
      v23[6] = v87;
      v23[7] = v88;
      __dst = (void *)v20;
      uint64_t v135 = (void (*)(char *, char *, void *))v84;
      v84((uint64_t)v23 + *(int *)(v83 + 32), (uint64_t)v24 + *(int *)(v83 + 32), v20);
      uint64_t v89 = v83;
      uint64_t v90 = *(int *)(v83 + 36);
      uint64_t v91 = (void *)((char *)v23 + v90);
      uint64_t v92 = (void *)((char *)v24 + v90);
      uint64_t v93 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      uint64_t v94 = *(void *)(v93 - 8);
      uint64_t v137 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v94 + 48);
      uint64_t v133 = v94;
      if (v137(v92, 1, v93))
      {
        uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v91, v92, *(void *)(*(void *)(v95 - 8) + 64));
        uint64_t v96 = __dst;
      }
      else
      {
        uint64_t v108 = v92[1];
        *uint64_t v91 = *v92;
        unint64_t v109 = v92[2];
        uint64_t v110 = v108;
        outlined copy of Data._Representation(v108, v109);
        v91[1] = v110;
        v91[2] = v109;
        uint64_t v89 = v83;
        uint64_t v111 = *(int *)(v93 + 24);
        uint64_t v112 = (char *)v91 + v111;
        uint64_t v113 = (char *)v92 + v111;
        uint64_t v114 = v91;
        uint64_t v96 = __dst;
        v135(v112, v113, __dst);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v94 + 56))(v114, 0, 1, v93);
      }
      uint64_t v115 = *(int *)(v89 + 40);
      uint64_t v116 = (void *)((char *)v23 + v115);
      uint64_t v117 = (void *)((char *)v24 + v115);
      if (v137(v117, 1, v93))
      {
        uint64_t v118 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v116, v117, *(void *)(*(void *)(v118 - 8) + 64));
      }
      else
      {
        uint64_t v124 = v117[1];
        *uint64_t v116 = *v117;
        unint64_t v125 = v117[2];
        outlined copy of Data._Representation(v124, v125);
        v116[1] = v124;
        v116[2] = v125;
        v135((char *)v116 + *(int *)(v93 + 24), (char *)v117 + *(int *)(v93 + 24), v96);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v133 + 56))(v116, 0, 1, v93);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v139 + 56))(v23, 0, 1, v89);
    }
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = type metadata accessor for SymmetricKey();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
    uint64_t v6 = type metadata accessor for UnencryptedAttachment(0);
    uint64_t v7 = *(int *)(v6 + 20);
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t *)(a2 + v7);
    unint64_t v10 = v9[1];
    if (v10 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    }
    else
    {
      uint64_t v45 = *v9;
      outlined copy of Data._Representation(*v9, v10);
      *(void *)uint64_t v8 = v45;
      *(void *)(v8 + 8) = v10;
    }
    uint64_t v46 = *(int *)(v6 + 24);
    uint64_t v47 = a1 + v46;
    uint64_t v48 = a2 + v46;
    uint64_t v49 = type metadata accessor for AES.GCM.SealedBox();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 16))(v47, v48, v49);
    uint64_t v50 = (int *)type metadata accessor for Attachment.MMCSMetadata(0);
    uint64_t v51 = v50[5];
    uint64_t v52 = (uint64_t *)(v47 + v51);
    unint64_t v53 = (uint64_t *)(v48 + v51);
    uint64_t v54 = *v53;
    unint64_t v55 = v53[1];
    outlined copy of Data._Representation(*v53, v55);
    uint64_t *v52 = v54;
    v52[1] = v55;
    uint64_t v56 = v50[6];
    uint64_t v57 = v47 + v56;
    uint64_t v58 = v48 + v56;
    unint64_t v59 = *(void *)(v58 + 16);
    BOOL v60 = v59 >> 60 == 15 || (v59 & 0xF000000000000000) == 0xB000000000000000;
    uint64_t v144 = a1;
    uint64_t v143 = v6;
    if (v60)
    {
      *(_OWORD *)uint64_t v57 = *(_OWORD *)v58;
      *(void *)(v57 + 16) = *(void *)(v58 + 16);
    }
    else
    {
      uint64_t v61 = *(void *)(v58 + 8);
      *(void *)uint64_t v57 = *(void *)v58;
      outlined copy of Data._Representation(v61, v59);
      *(void *)(v57 + 8) = v61;
      *(void *)(v57 + 16) = v59;
    }
    uint64_t v62 = v50[7];
    BOOL v63 = (void *)(v47 + v62);
    uint64_t v64 = (void *)(v48 + v62);
    uint64_t v65 = v64[1];
    void *v63 = *v64;
    v63[1] = v65;
    uint64_t v66 = v50[8];
    uint64_t v67 = v47 + v66;
    uint64_t v68 = v48 + v66;
    uint64_t v69 = type metadata accessor for URL();
    uint64_t v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 16);
    swift_bridgeObjectRetain();
    v70(v67, v68, v69);
    uint64_t v71 = v50[9];
    uint64_t v72 = (uint64_t *)(v47 + v71);
    uint64_t v73 = (uint64_t *)(v48 + v71);
    uint64_t v74 = *v73;
    unint64_t v75 = v73[1];
    outlined copy of Data._Representation(*v73, v75);
    uint64_t *v72 = v74;
    v72[1] = v75;
    uint64_t v76 = v50[10];
    unint64_t v77 = (uint64_t *)(v47 + v76);
    uint64_t v78 = (uint64_t *)(v48 + v76);
    uint64_t v79 = *v78;
    unint64_t v80 = v78[1];
    outlined copy of Data._Representation(*v78, v80);
    uint64_t *v77 = v79;
    v77[1] = v80;
    a1 = v144;
    *(void *)(v144 + *(int *)(v143 + 28)) = *(void *)(a2 + *(int *)(v143 + 28));
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v28 = *(void *)a2;
    unint64_t v29 = *(void *)(a2 + 8);
    outlined copy of Data._Representation(*(void *)a2, v29);
    *(void *)a1 = v28;
    *(void *)(a1 + 8) = v29;
    uint64_t v30 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v30;
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
    uint64_t v31 = *(void *)(a2 + 40);
    unint64_t v32 = *(void *)(a2 + 48);
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v31, v32);
    *(void *)(a1 + 40) = v31;
    *(void *)(a1 + 48) = v32;
    uint64_t v33 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
    uint64_t v34 = *(int *)(v33 + 32);
    uint64_t v35 = a1 + v34;
    uint64_t v36 = a2 + v34;
    uint64_t v37 = type metadata accessor for UnknownStorage();
    uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16);
    v38(v35, v36, v37);
    uint64_t v39 = *(int *)(v33 + 36);
    uint64_t v40 = (void *)(a1 + v39);
    unint64_t v41 = (void *)(a2 + v39);
    uint64_t v42 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    uint64_t v43 = *((void *)v42 - 1);
    if ((*(unsigned int (**)(void *, uint64_t, int *))(v43 + 48))(v41, 1, v42))
    {
      uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
    }
    else
    {
      uint64_t v138 = v43;
      uint64_t v97 = v41[1];
      *uint64_t v40 = *v41;
      v40[1] = v97;
      uint64_t v98 = v41[3];
      v40[2] = v41[2];
      v40[3] = v98;
      uint64_t v99 = v41[4];
      unint64_t v100 = v41[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v99, v100);
      v40[4] = v99;
      v40[5] = v100;
      uint64_t v101 = v41[6];
      unint64_t v102 = v41[7];
      outlined copy of Data._Representation(v101, v102);
      v40[6] = v101;
      v40[7] = v102;
      v38((uint64_t)v40 + v42[8], (uint64_t)v41 + v42[8], v37);
      uint64_t v103 = v42[9];
      __dsta = (void *)((char *)v40 + v103);
      uint64_t v104 = (void *)((char *)v41 + v103);
      uint64_t v105 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      uint64_t v140 = *(void *)(v105 - 8);
      uint64_t v136 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v140 + 48);
      uint64_t v132 = v37;
      uint64_t v134 = (void (*)(char *, char *, uint64_t))v38;
      if (v136(v104, 1, v105))
      {
        uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(__dsta, v104, *(void *)(*(void *)(v106 - 8) + 64));
        uint64_t v107 = v140;
      }
      else
      {
        uint64_t v119 = v104[1];
        uint64_t v131 = v119;
        void *__dsta = *v104;
        unint64_t v130 = v104[2];
        outlined copy of Data._Representation(v119, v130);
        __dsta[1] = v131;
        __dsta[2] = v130;
        v38((uint64_t)__dsta + *(int *)(v105 + 24), (uint64_t)v104 + *(int *)(v105 + 24), v37);
        uint64_t v107 = v140;
        (*(void (**)(void *, void, uint64_t, uint64_t))(v140 + 56))(__dsta, 0, 1, v105);
      }
      uint64_t v120 = v42[10];
      unint64_t v121 = (void *)((char *)v40 + v120);
      uint64_t v122 = (void *)((char *)v41 + v120);
      if (v136(v122, 1, v105))
      {
        uint64_t v123 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v121, v122, *(void *)(*(void *)(v123 - 8) + 64));
      }
      else
      {
        uint64_t v126 = v122[1];
        *unint64_t v121 = *v122;
        unint64_t v127 = v122[2];
        outlined copy of Data._Representation(v126, v127);
        v121[1] = v126;
        v121[2] = v127;
        v134((char *)v121 + *(int *)(v105 + 24), (char *)v122 + *(int *)(v105 + 24), v132);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v107 + 56))(v121, 0, 1, v105);
      }
      (*(void (**)(void *, void, uint64_t, int *))(v138 + 56))(v40, 0, 1, v42);
    }
    uint64_t v128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_AttachmentMetadata, attempt: Int));
    *(void *)(a1 + *(int *)(v128 + 48)) = *(void *)(a2 + *(int *)(v128 + 48));
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for Attachment.EncryptedAttachmentStatus(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(a1, type metadata accessor for Attachment.EncryptedAttachmentStatus);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v11 = *(void *)a2;
      unint64_t v12 = *(void *)(a2 + 8);
      outlined copy of Data._Representation(*(void *)a2, v12);
      *(void *)a1 = v11;
      *(void *)(a1 + 8) = v12;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v13 = *(void *)(a2 + 24);
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      *(void *)(a1 + 24) = v13;
      uint64_t v14 = *(void *)(a2 + 40);
      unint64_t v15 = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v14, v15);
      *(void *)(a1 + 40) = v14;
      *(void *)(a1 + 48) = v15;
      uint64_t v16 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      uint64_t v17 = *(int *)(v16 + 32);
      uint64_t v18 = a1 + v17;
      uint64_t v19 = a2 + v17;
      uint64_t v20 = type metadata accessor for UnknownStorage();
      uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16);
      v21(v18, v19, v20);
      uint64_t v22 = *(int *)(v16 + 36);
      uint64_t v23 = (void *)(a1 + v22);
      uint64_t v24 = (void *)(a2 + v22);
      uint64_t v25 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      uint64_t v26 = *(void *)(v25 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
      }
      else
      {
        uint64_t v136 = v26;
        void *v23 = *v24;
        v23[1] = v24[1];
        v23[2] = v24[2];
        v23[3] = v24[3];
        uint64_t v81 = v25;
        uint64_t v82 = v21;
        uint64_t v83 = v24[4];
        unint64_t v84 = v24[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v83, v84);
        v23[4] = v83;
        v23[5] = v84;
        uint64_t v85 = v24[6];
        unint64_t v86 = v24[7];
        outlined copy of Data._Representation(v85, v86);
        v23[6] = v85;
        v23[7] = v86;
        uint64_t v133 = v20;
        uint64_t v129 = (void (*)(char *, char *, uint64_t))v82;
        v82((uint64_t)v23 + *(int *)(v81 + 32), (uint64_t)v24 + *(int *)(v81 + 32), v20);
        uint64_t v87 = v81;
        uint64_t v88 = *(int *)(v81 + 36);
        uint64_t v89 = (void *)((char *)v23 + v88);
        uint64_t v90 = (void *)((char *)v24 + v88);
        uint64_t v91 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        uint64_t v92 = *(void *)(v91 - 8);
        __dst = *(unsigned int (**)(void *, uint64_t, uint64_t))(v92 + 48);
        uint64_t v127 = v92;
        if (__dst(v90, 1, v91))
        {
          uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v89, v90, *(void *)(*(void *)(v93 - 8) + 64));
          uint64_t v94 = v133;
        }
        else
        {
          *uint64_t v89 = *v90;
          unint64_t v104 = v90[2];
          uint64_t v105 = v90[1];
          outlined copy of Data._Representation(v105, v104);
          v89[1] = v105;
          v89[2] = v104;
          uint64_t v87 = v81;
          uint64_t v106 = *(int *)(v91 + 24);
          uint64_t v107 = (char *)v89 + v106;
          uint64_t v108 = (char *)v90 + v106;
          unint64_t v109 = v89;
          uint64_t v94 = v133;
          v129(v107, v108, v133);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v92 + 56))(v109, 0, 1, v91);
        }
        uint64_t v110 = *(int *)(v87 + 40);
        uint64_t v111 = (void *)((char *)v23 + v110);
        uint64_t v112 = (void *)((char *)v24 + v110);
        if (__dst(v112, 1, v91))
        {
          uint64_t v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v111, v112, *(void *)(*(void *)(v113 - 8) + 64));
        }
        else
        {
          *uint64_t v111 = *v112;
          uint64_t v118 = v112[1];
          unint64_t v119 = v112[2];
          outlined copy of Data._Representation(v118, v119);
          v111[1] = v118;
          v111[2] = v119;
          v129((char *)v111 + *(int *)(v91 + 24), (char *)v112 + *(int *)(v91 + 24), v94);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v127 + 56))(v111, 0, 1, v91);
        }
        (*(void (**)(void *, void, uint64_t, uint64_t))(v136 + 56))(v23, 0, 1, v87);
      }
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v5 = type metadata accessor for SymmetricKey();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
      uint64_t v6 = type metadata accessor for UnencryptedAttachment(0);
      uint64_t v7 = *(int *)(v6 + 20);
      uint64_t v8 = a1 + v7;
      uint64_t v9 = (uint64_t *)(a2 + v7);
      unint64_t v10 = v9[1];
      if (v10 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      }
      else
      {
        uint64_t v45 = *v9;
        outlined copy of Data._Representation(*v9, v10);
        *(void *)uint64_t v8 = v45;
        *(void *)(v8 + 8) = v10;
      }
      uint64_t v46 = *(int *)(v6 + 24);
      uint64_t v47 = a1 + v46;
      uint64_t v48 = a2 + v46;
      uint64_t v49 = type metadata accessor for AES.GCM.SealedBox();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 16))(v47, v48, v49);
      uint64_t v50 = (int *)type metadata accessor for Attachment.MMCSMetadata(0);
      uint64_t v51 = v50[5];
      uint64_t v52 = (uint64_t *)(v47 + v51);
      unint64_t v53 = (uint64_t *)(v48 + v51);
      uint64_t v54 = *v53;
      unint64_t v55 = v53[1];
      outlined copy of Data._Representation(*v53, v55);
      uint64_t *v52 = v54;
      v52[1] = v55;
      uint64_t v56 = v50[6];
      uint64_t v57 = v47 + v56;
      uint64_t v58 = (long long *)(v48 + v56);
      unint64_t v59 = *((void *)v58 + 2);
      BOOL v60 = v59 >> 60 == 15 || (v59 & 0xF000000000000000) == 0xB000000000000000;
      uint64_t v138 = v6;
      if (v60)
      {
        long long v61 = *v58;
        *(void *)(v57 + 16) = *((void *)v58 + 2);
        *(_OWORD *)uint64_t v57 = v61;
      }
      else
      {
        *(void *)uint64_t v57 = *(void *)v58;
        uint64_t v62 = *((void *)v58 + 1);
        unint64_t v63 = *((void *)v58 + 2);
        outlined copy of Data._Representation(v62, v63);
        *(void *)(v57 + 8) = v62;
        *(void *)(v57 + 16) = v63;
      }
      uint64_t v64 = v50[7];
      uint64_t v65 = (void *)(v47 + v64);
      uint64_t v66 = (void *)(v48 + v64);
      *uint64_t v65 = *v66;
      v65[1] = v66[1];
      uint64_t v67 = v50[8];
      uint64_t v135 = v47 + v67;
      uint64_t v68 = v48 + v67;
      uint64_t v69 = type metadata accessor for URL();
      uint64_t v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 16);
      swift_bridgeObjectRetain();
      v70(v135, v68, v69);
      uint64_t v71 = v50[9];
      uint64_t v72 = (uint64_t *)(v47 + v71);
      uint64_t v73 = (uint64_t *)(v48 + v71);
      uint64_t v74 = *v73;
      unint64_t v75 = v73[1];
      outlined copy of Data._Representation(*v73, v75);
      uint64_t *v72 = v74;
      v72[1] = v75;
      uint64_t v76 = v50[10];
      unint64_t v77 = (uint64_t *)(v47 + v76);
      uint64_t v78 = (uint64_t *)(v48 + v76);
      uint64_t v79 = *v78;
      unint64_t v80 = v78[1];
      outlined copy of Data._Representation(*v78, v80);
      uint64_t *v77 = v79;
      v77[1] = v80;
      *(void *)(a1 + *(int *)(v138 + 28)) = *(void *)(a2 + *(int *)(v138 + 28));
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v28 = *(void *)a2;
      unint64_t v29 = *(void *)(a2 + 8);
      outlined copy of Data._Representation(*(void *)a2, v29);
      *(void *)a1 = v28;
      *(void *)(a1 + 8) = v29;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v30 = *(void *)(a2 + 24);
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      *(void *)(a1 + 24) = v30;
      uint64_t v31 = *(void *)(a2 + 40);
      unint64_t v32 = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v31, v32);
      *(void *)(a1 + 40) = v31;
      *(void *)(a1 + 48) = v32;
      uint64_t v33 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      uint64_t v34 = *(int *)(v33 + 32);
      uint64_t v35 = a1 + v34;
      uint64_t v36 = a2 + v34;
      uint64_t v37 = type metadata accessor for UnknownStorage();
      uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16);
      v38(v35, v36, v37);
      uint64_t v39 = *(int *)(v33 + 36);
      uint64_t v40 = (void *)(a1 + v39);
      unint64_t v41 = (void *)(a2 + v39);
      uint64_t v42 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      uint64_t v43 = *((void *)v42 - 1);
      if ((*(unsigned int (**)(void *, uint64_t, int *))(v43 + 48))(v41, 1, v42))
      {
        uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
      }
      else
      {
        uint64_t v137 = v43;
        *uint64_t v40 = *v41;
        v40[1] = v41[1];
        v40[2] = v41[2];
        v40[3] = v41[3];
        uint64_t v95 = v41[4];
        unint64_t v96 = v41[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v95, v96);
        v40[4] = v95;
        v40[5] = v96;
        uint64_t v97 = v41[6];
        unint64_t v98 = v41[7];
        outlined copy of Data._Representation(v97, v98);
        v40[6] = v97;
        v40[7] = v98;
        v38((uint64_t)v40 + v42[8], (uint64_t)v41 + v42[8], v37);
        uint64_t v99 = v42[9];
        __dsta = (void *)((char *)v40 + v99);
        unint64_t v100 = (void *)((char *)v41 + v99);
        uint64_t v101 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        uint64_t v130 = *(void *)(v101 - 8);
        uint64_t v134 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v130 + 48);
        uint64_t v126 = v37;
        uint64_t v128 = (void (*)(char *, char *, uint64_t))v38;
        if (v134(v100, 1, v101))
        {
          uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(__dsta, v100, *(void *)(*(void *)(v102 - 8) + 64));
          uint64_t v103 = v130;
        }
        else
        {
          void *__dsta = *v100;
          unint64_t v124 = v100[2];
          uint64_t v125 = v100[1];
          outlined copy of Data._Representation(v125, v124);
          __dsta[1] = v125;
          __dsta[2] = v124;
          v38((uint64_t)__dsta + *(int *)(v101 + 24), (uint64_t)v100 + *(int *)(v101 + 24), v37);
          uint64_t v103 = v130;
          (*(void (**)(void *, void, uint64_t, uint64_t))(v130 + 56))(__dsta, 0, 1, v101);
        }
        uint64_t v114 = v42[10];
        uint64_t v115 = (void *)((char *)v40 + v114);
        uint64_t v116 = (void *)((char *)v41 + v114);
        if (v134(v116, 1, v101))
        {
          uint64_t v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v115, v116, *(void *)(*(void *)(v117 - 8) + 64));
        }
        else
        {
          *uint64_t v115 = *v116;
          uint64_t v120 = v116[1];
          unint64_t v121 = v116[2];
          outlined copy of Data._Representation(v120, v121);
          v115[1] = v120;
          v115[2] = v121;
          v128((char *)v115 + *(int *)(v101 + 24), (char *)v116 + *(int *)(v101 + 24), v126);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v103 + 56))(v115, 0, 1, v101);
        }
        (*(void (**)(void *, void, uint64_t, int *))(v137 + 56))(v40, 0, 1, v42);
      }
      uint64_t v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_AttachmentMetadata, attempt: Int));
      *(void *)(a1 + *(int *)(v122 + 48)) = *(void *)(a2 + *(int *)(v122 + 48));
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for Attachment.EncryptedAttachmentStatus(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v20 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v20;
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    uint64_t v21 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
    uint64_t v22 = *(int *)(v21 + 32);
    uint64_t v23 = a1 + v22;
    uint64_t v24 = a2 + v22;
    uint64_t v25 = type metadata accessor for UnknownStorage();
    uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 32);
    v26(v23, v24, v25);
    uint64_t v27 = *(int *)(v21 + 36);
    uint64_t v28 = (_OWORD *)(a1 + v27);
    unint64_t v29 = (_OWORD *)(a2 + v27);
    uint64_t v30 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    uint64_t v31 = *((void *)v30 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v31 + 48))(v29, 1, v30))
    {
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      long long v46 = v29[1];
      *uint64_t v28 = *v29;
      v28[1] = v46;
      long long v47 = v29[3];
      void v28[2] = v29[2];
      v28[3] = v47;
      v26((uint64_t)v28 + v30[8], (uint64_t)v29 + v30[8], v25);
      uint64_t v48 = v30[9];
      __dst = (void *)((char *)v28 + v48);
      uint64_t v82 = v26;
      uint64_t v49 = (void *)((char *)v29 + v48);
      uint64_t v50 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      uint64_t v51 = *(void *)(v50 - 8);
      uint64_t v79 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v51 + 48);
      uint64_t v77 = v51;
      if (v79(v49, 1, v50))
      {
        uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(__dst, v49, *(void *)(*(void *)(v52 - 8) + 64));
        unint64_t v53 = (void (*)(char *, char *, uint64_t))v82;
      }
      else
      {
        void *__dst = *v49;
        *(_OWORD *)(__dst + 1) = *(_OWORD *)(v49 + 1);
        uint64_t v63 = *(int *)(v50 + 24);
        uint64_t v64 = (char *)v49 + v63;
        unint64_t v53 = (void (*)(char *, char *, uint64_t))v82;
        v82((uint64_t)__dst + v63, (uint64_t)v64, v25);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(__dst, 0, 1, v50);
      }
      uint64_t v65 = v50;
      uint64_t v66 = v30[10];
      uint64_t v67 = (void *)((char *)v28 + v66);
      uint64_t v68 = (void *)((char *)v29 + v66);
      if (v79(v68, 1, v65))
      {
        uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v67, v68, *(void *)(*(void *)(v69 - 8) + 64));
      }
      else
      {
        void *v67 = *v68;
        *(_OWORD *)(v67 + 1) = *(_OWORD *)(v68 + 1);
        v53((char *)v67 + *(int *)(v65 + 24), (char *)v68 + *(int *)(v65 + 24), v25);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v77 + 56))(v67, 0, 1, v65);
      }
      (*(void (**)(_OWORD *, void, uint64_t, int *))(v31 + 56))(v28, 0, 1, v30);
    }
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v5 = type metadata accessor for SymmetricKey();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
      uint64_t v6 = (int *)type metadata accessor for UnencryptedAttachment(0);
      *(_OWORD *)(a1 + v6[5]) = *(_OWORD *)(a2 + v6[5]);
      uint64_t v7 = v6[6];
      uint64_t v8 = a1 + v7;
      uint64_t v9 = a2 + v7;
      uint64_t v10 = type metadata accessor for AES.GCM.SealedBox();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
      uint64_t v11 = (int *)type metadata accessor for Attachment.MMCSMetadata(0);
      *(_OWORD *)(v8 + v11[5]) = *(_OWORD *)(v9 + v11[5]);
      uint64_t v12 = v11[6];
      uint64_t v13 = v8 + v12;
      uint64_t v14 = v9 + v12;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
      *(void *)(v13 + 16) = *(void *)(v14 + 16);
      *(_OWORD *)(v8 + v11[7]) = *(_OWORD *)(v9 + v11[7]);
      uint64_t v15 = v11[8];
      uint64_t v16 = v8 + v15;
      uint64_t v17 = v9 + v15;
      uint64_t v18 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
      *(_OWORD *)(v8 + v11[9]) = *(_OWORD *)(v9 + v11[9]);
      *(_OWORD *)(v8 + v11[10]) = *(_OWORD *)(v9 + v11[10]);
      uint64_t v19 = v6[7];
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v33 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v33;
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      uint64_t v34 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      uint64_t v35 = *(int *)(v34 + 32);
      uint64_t v36 = a1 + v35;
      uint64_t v37 = a2 + v35;
      uint64_t v38 = type metadata accessor for UnknownStorage();
      uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 32);
      v39(v36, v37, v38);
      uint64_t v40 = *(int *)(v34 + 36);
      unint64_t v41 = (_OWORD *)(a1 + v40);
      uint64_t v42 = (_OWORD *)(a2 + v40);
      uint64_t v43 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      uint64_t v44 = *((void *)v43 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v44 + 48))(v42, 1, v43))
      {
        uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
      }
      else
      {
        long long v54 = v42[1];
        *unint64_t v41 = *v42;
        v41[1] = v54;
        long long v55 = v42[3];
        v41[2] = v42[2];
        v41[3] = v55;
        v39((uint64_t)v41 + v43[8], (uint64_t)v42 + v43[8], v38);
        uint64_t v56 = v43[9];
        uint64_t v83 = (void *)((char *)v41 + v56);
        uint64_t v76 = (void (*)(char *, char *, uint64_t))v39;
        uint64_t v80 = v38;
        uint64_t v57 = (void *)((char *)v42 + v56);
        uint64_t v58 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        uint64_t v59 = *(void *)(v58 - 8);
        uint64_t v81 = (char *)v57;
        uint64_t v78 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v59 + 48);
        uint64_t v75 = v59;
        if (v78(v57, 1, v58))
        {
          uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v83, v57, *(void *)(*(void *)(v60 - 8) + 64));
          uint64_t v61 = v58;
          uint64_t v62 = v80;
        }
        else
        {
          void *v83 = *v57;
          *(_OWORD *)(v83 + 1) = *(_OWORD *)(v57 + 1);
          uint64_t v62 = v80;
          v76((char *)v83 + *(int *)(v58 + 24), &v81[*(int *)(v58 + 24)], v80);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v59 + 56))(v83, 0, 1, v58);
          uint64_t v61 = v58;
        }
        uint64_t v70 = v43[10];
        uint64_t v71 = (void *)((char *)v41 + v70);
        uint64_t v72 = (void *)((char *)v42 + v70);
        if (v78(v72, 1, v61))
        {
          uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v71, v72, *(void *)(*(void *)(v73 - 8) + 64));
        }
        else
        {
          *uint64_t v71 = *v72;
          *(_OWORD *)(v71 + 1) = *(_OWORD *)(v72 + 1);
          v76((char *)v71 + *(int *)(v61 + 24), (char *)v72 + *(int *)(v61 + 24), v62);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v75 + 56))(v71, 0, 1, v61);
        }
        (*(void (**)(_OWORD *, void, uint64_t, int *))(v44 + 56))(v41, 0, 1, v43);
      }
      uint64_t v19 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_AttachmentMetadata, attempt: Int))
                   + 48);
    }
    *(void *)(a1 + v19) = *(void *)(a2 + v19);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for Attachment.EncryptedAttachmentStatus(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(a1, type metadata accessor for Attachment.EncryptedAttachmentStatus);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v20 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v20;
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      uint64_t v21 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      uint64_t v22 = *(int *)(v21 + 32);
      uint64_t v23 = a1 + v22;
      uint64_t v24 = a2 + v22;
      uint64_t v25 = type metadata accessor for UnknownStorage();
      uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 32);
      v26(v23, v24, v25);
      uint64_t v27 = *(int *)(v21 + 36);
      uint64_t v28 = (_OWORD *)(a1 + v27);
      unint64_t v29 = (_OWORD *)(a2 + v27);
      uint64_t v30 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      uint64_t v31 = *((void *)v30 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v31 + 48))(v29, 1, v30))
      {
        uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
      }
      else
      {
        uint64_t v76 = v31;
        long long v46 = v29[1];
        *uint64_t v28 = *v29;
        v28[1] = v46;
        long long v47 = v29[3];
        void v28[2] = v29[2];
        v28[3] = v47;
        v26((uint64_t)v28 + v30[8], (uint64_t)v29 + v30[8], v25);
        uint64_t v48 = v30[9];
        __dst = (void *)((char *)v28 + v48);
        uint64_t v75 = (void (*)(char *, char *, uint64_t))v26;
        uint64_t v49 = (void *)((char *)v29 + v48);
        uint64_t v50 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        uint64_t v51 = *(void *)(v50 - 8);
        uint64_t v80 = v50;
        uint64_t v73 = *(unsigned int (**)(void *, uint64_t))(v51 + 48);
        if (v73(v49, 1))
        {
          uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(__dst, v49, *(void *)(*(void *)(v52 - 8) + 64));
        }
        else
        {
          void *__dst = *v49;
          *(_OWORD *)(__dst + 1) = *(_OWORD *)(v49 + 1);
          v75((char *)__dst + *(int *)(v80 + 24), (char *)v49 + *(int *)(v80 + 24), v25);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(__dst, 0, 1, v80);
        }
        uint64_t v61 = v30[10];
        uint64_t v62 = (void *)((char *)v28 + v61);
        uint64_t v63 = (void *)((char *)v29 + v61);
        if (((unsigned int (*)(void *, uint64_t, uint64_t))v73)(v63, 1, v80))
        {
          uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v62, v63, *(void *)(*(void *)(v64 - 8) + 64));
        }
        else
        {
          *uint64_t v62 = *v63;
          *(_OWORD *)(v62 + 1) = *(_OWORD *)(v63 + 1);
          v75((char *)v62 + *(int *)(v80 + 24), (char *)v63 + *(int *)(v80 + 24), v25);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(v62, 0, 1, v80);
        }
        (*(void (**)(_OWORD *, void, uint64_t, int *))(v76 + 56))(v28, 0, 1, v30);
      }
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v5 = type metadata accessor for SymmetricKey();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
        uint64_t v6 = (int *)type metadata accessor for UnencryptedAttachment(0);
        *(_OWORD *)(a1 + v6[5]) = *(_OWORD *)(a2 + v6[5]);
        uint64_t v7 = v6[6];
        uint64_t v8 = a1 + v7;
        uint64_t v9 = a2 + v7;
        uint64_t v10 = type metadata accessor for AES.GCM.SealedBox();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
        uint64_t v11 = (int *)type metadata accessor for Attachment.MMCSMetadata(0);
        *(_OWORD *)(v8 + v11[5]) = *(_OWORD *)(v9 + v11[5]);
        uint64_t v12 = v11[6];
        uint64_t v13 = v8 + v12;
        uint64_t v14 = v9 + v12;
        *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
        *(void *)(v13 + 16) = *(void *)(v14 + 16);
        *(_OWORD *)(v8 + v11[7]) = *(_OWORD *)(v9 + v11[7]);
        uint64_t v15 = v11[8];
        uint64_t v16 = v8 + v15;
        uint64_t v17 = v9 + v15;
        uint64_t v18 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
        *(_OWORD *)(v8 + v11[9]) = *(_OWORD *)(v9 + v11[9]);
        *(_OWORD *)(v8 + v11[10]) = *(_OWORD *)(v9 + v11[10]);
        uint64_t v19 = v6[7];
      }
      else
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v33 = *(void *)(a2 + 24);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = v33;
        *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        uint64_t v34 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
        uint64_t v35 = *(int *)(v34 + 32);
        uint64_t v36 = a1 + v35;
        uint64_t v37 = a2 + v35;
        uint64_t v38 = type metadata accessor for UnknownStorage();
        uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 32);
        v39(v36, v37, v38);
        uint64_t v40 = *(int *)(v34 + 36);
        unint64_t v41 = (_OWORD *)(a1 + v40);
        uint64_t v42 = (_OWORD *)(a2 + v40);
        uint64_t v43 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
        uint64_t v44 = *((void *)v43 - 1);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v44 + 48))(v42, 1, v43))
        {
          uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
          memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
        }
        else
        {
          uint64_t v77 = v44;
          long long v53 = v42[1];
          *unint64_t v41 = *v42;
          v41[1] = v53;
          long long v54 = v42[3];
          v41[2] = v42[2];
          v41[3] = v54;
          v39((uint64_t)v41 + v43[8], (uint64_t)v42 + v43[8], v38);
          uint64_t v55 = v43[9];
          __dsta = (void *)((char *)v41 + v55);
          uint64_t v71 = v38;
          uint64_t v56 = (char *)v42 + v55;
          uint64_t v57 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
          uint64_t v58 = *(void *)(v57 - 8);
          __src = v56;
          uint64_t v74 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48);
          uint64_t v70 = v58;
          if (v74(v56, 1, v57))
          {
            uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
            memcpy(__dsta, v56, *(void *)(*(void *)(v59 - 8) + 64));
            uint64_t v60 = v71;
          }
          else
          {
            uint64_t v60 = v71;
            void *__dsta = *(void *)__src;
            *(_OWORD *)(__dsta + 1) = *(_OWORD *)(__src + 8);
            v39((uint64_t)__dsta + *(int *)(v57 + 24), (uint64_t)&__src[*(int *)(v57 + 24)], v71);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v58 + 56))(__dsta, 0, 1, v57);
          }
          uint64_t v65 = v43[10];
          uint64_t v66 = (void *)((char *)v41 + v65);
          uint64_t v67 = (void *)((char *)v42 + v65);
          if (v74((char *)v67, 1, v57))
          {
            uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
            memcpy(v66, v67, *(void *)(*(void *)(v68 - 8) + 64));
          }
          else
          {
            void *v66 = *v67;
            *(_OWORD *)(v66 + 1) = *(_OWORD *)(v67 + 1);
            v39((uint64_t)v66 + *(int *)(v57 + 24), (uint64_t)v67 + *(int *)(v57 + 24), v60);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v70 + 56))(v66, 0, 1, v57);
          }
          (*(void (**)(_OWORD *, void, uint64_t, int *))(v77 + 56))(v41, 0, 1, v43);
        }
        uint64_t v19 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_AttachmentMetadata, attempt: Int))
                     + 48);
      }
      *(void *)(a1 + v19) = *(void *)(a2 + v19);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for Attachment.EncryptedAttachmentStatus()
{
  uint64_t result = type metadata accessor for AttachmentLedger_AttachmentMetadata(319);
  if (v1 <= 0x3F)
  {
    uint64_t v2 = *(void *)(result - 8) + 64;
    swift_getTupleTypeLayout2();
    uint64_t v5 = &v4;
    uint64_t result = type metadata accessor for UnencryptedAttachment(319);
    if (v3 <= 0x3F)
    {
      uint64_t v6 = *(void *)(result - 8) + 64;
      uint64_t v7 = v2;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in Attachment.localEncryptionSlot.getter(uint64_t a1)
{
  return closure #1 in closure #1 in closure #1 in Attachment.unpack(attachment:)(a1, v1);
}

uint64_t partial apply for closure #1 in closure #1 in Attachment.init(id:key:mmcsMetadata:metadata:dataCryptor:localParticipantID:config:)(uint64_t a1)
{
  return closure #1 in closure #1 in Attachment.init(id:key:mmcsMetadata:metadata:dataCryptor:localParticipantID:config:)(a1, *(void **)(v1 + 16));
}

uint64_t _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in Attachment.updateLocalEncryption()()
{
  return closure #1 in closure #1 in Attachment.updateLocalEncryption()(v0);
}

uint64_t partial apply for closure #1 in closure #3 in Attachment.init(id:attachment:dataCryptor:localParticipantID:config:)()
{
  return closure #1 in closure #3 in Attachment.init(id:attachment:dataCryptor:localParticipantID:config:)();
}

uint64_t sub_1B103B338()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Attachment.MMCSMetadata, Error>.Continuation);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in Attachment.mmcsMetadata.getter(uint64_t a1)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Attachment.MMCSMetadata, Error>.Continuation)
                 - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return closure #1 in closure #1 in Attachment.mmcsMetadata.getter(a1, v5, v6, v7, v8);
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@out ())(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t PresenceSessionClientConnection.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + direct field offset for PresenceSessionClientConnection.id;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t key path getter for PresenceSessionClientConnection.handleServerDisconnectClosure : PresenceSessionClientConnection@<X0>(void *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = (uint64_t *)(*a1 + direct field offset for PresenceSessionClientConnection.handleServerDisconnectClosure);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    uint64_t v7 = partial apply for thunk for @callee_guaranteed () -> ();
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v4);
}

uint64_t key path setter for PresenceSessionClientConnection.handleServerDisconnectClosure : PresenceSessionClientConnection(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = _sytIegr_Ieg_TRTA_0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = (uint64_t *)(*a2 + direct field offset for PresenceSessionClientConnection.handleServerDisconnectClosure);
  swift_beginAccess();
  uint64_t v8 = *v7;
  *uint64_t v7 = (uint64_t)v6;
  v7[1] = v5;
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v3);
  return _sxRi_zRi0_zlyytIseghHr_SgWOe(v8);
}

uint64_t PresenceSessionClientConnection.handleServerDisconnectClosure.getter()
{
  return PresenceSessionClientConnection.handleServerDisconnectClosure.getter(&direct field offset for PresenceSessionClientConnection.handleServerDisconnectClosure, (void (*)(void, void))outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?);
}

uint64_t PresenceSessionClientConnection.handleServerDisconnectClosure.setter(uint64_t a1, uint64_t a2)
{
  return PresenceSessionClientConnection.handleServerDisconnectClosure.setter(a1, a2, &direct field offset for PresenceSessionClientConnection.handleServerDisconnectClosure, (uint64_t (*)(uint64_t, uint64_t))_sxRi_zRi0_zlyytIseghHr_SgWOe);
}

uint64_t (*PresenceSessionClientConnection.handleServerDisconnectClosure.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

Swift::Void __swiftcall PresenceSessionClientConnection.handleServerDisconnect()()
{
  uint64_t v1 = (void (**)(uint64_t))(v0
                                     + direct field offset for PresenceSessionClientConnection.handleServerDisconnectClosure);
  swift_beginAccess();
  uint64_t v2 = *v1;
  if (*v1)
  {
    uint64_t v3 = swift_retain();
    v2(v3);
    _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v2);
  }
}

uint64_t key path getter for PresenceSessionClientConnection.handleUpdatedPresentDevices : PresenceSessionClientConnection@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(*a1 + direct field offset for PresenceSessionClientConnection.handleUpdatedPresentDevices);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    uint64_t v7 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed [PresenceSessionParticipant]) -> ();
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = v6;
  return outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v4);
}

uint64_t key path setter for PresenceSessionClientConnection.handleUpdatedPresentDevices : PresenceSessionClientConnection(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed BMGroupActivitySessionEvent) -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = (uint64_t *)(*a2 + direct field offset for PresenceSessionClientConnection.handleUpdatedPresentDevices);
  swift_beginAccess();
  uint64_t v8 = *v7;
  *uint64_t v7 = (uint64_t)v6;
  v7[1] = v5;
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v3);
  return _sxRi_zRi0_zlyytIseghHr_SgWOe(v8);
}

uint64_t PresenceSessionClientConnection.handleUpdatedPresentDevices.getter()
{
  return PresenceSessionClientConnection.handleServerDisconnectClosure.getter(&direct field offset for PresenceSessionClientConnection.handleUpdatedPresentDevices, (void (*)(void, void))outlined copy of (@escaping @callee_guaranteed (@unowned CPActivitySessionState, @guaranteed Error?) -> ())?);
}

uint64_t PresenceSessionClientConnection.handleServerDisconnectClosure.getter(void *a1, void (*a2)(void, void))
{
  uint64_t v4 = (void *)(v2 + *a1);
  swift_beginAccess();
  uint64_t v5 = *v4;
  a2(*v4, v4[1]);
  return v5;
}

uint64_t PresenceSessionClientConnection.handleUpdatedPresentDevices.setter(uint64_t a1, uint64_t a2)
{
  return PresenceSessionClientConnection.handleServerDisconnectClosure.setter(a1, a2, &direct field offset for PresenceSessionClientConnection.handleUpdatedPresentDevices, (uint64_t (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned CPActivitySessionState, @guaranteed Error?) -> ())?);
}

uint64_t PresenceSessionClientConnection.handleServerDisconnectClosure.setter(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v8 = (uint64_t *)(v4 + *a3);
  swift_beginAccess();
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  *uint64_t v8 = a1;
  v8[1] = a2;
  return a4(v9, v10);
}

uint64_t (*PresenceSessionClientConnection.handleUpdatedPresentDevices.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

Swift::Void __swiftcall PresenceSessionClientConnection.updatePresentDevices(devices:)(Swift::OpaquePointer devices)
{
  uint64_t v3 = (void (**)(void *))(v1
                                    + direct field offset for PresenceSessionClientConnection.handleUpdatedPresentDevices);
  swift_beginAccess();
  uint64_t v4 = *v3;
  if (*v3)
  {
    swift_retain();
    v4(devices._rawValue);
    _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v4);
  }
}

uint64_t @objc PresenceSessionClientConnection.updatePresentDevices(devices:)(char *a1)
{
  type metadata accessor for PresenceSessionParticipant();
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = &a1[direct field offset for PresenceSessionClientConnection.handleUpdatedPresentDevices];
  swift_beginAccess();
  uint64_t v4 = *(void (**)(uint64_t))v3;
  if (*(void *)v3)
  {
    uint64_t v5 = a1;
    outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?((uint64_t)v4);
    v4(v2);
    _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v4);
  }
  return swift_bridgeObjectRelease();
}

id PresenceSessionClientConnection.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id PresenceSessionClientConnection.init()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = v0;
  UUID.init()();
  uint64_t v3 = &v2[direct field offset for PresenceSessionClientConnection.handleServerDisconnectClosure];
  *(void *)uint64_t v3 = 0;
  *((void *)v3 + 1) = 0;
  uint64_t v4 = &v2[direct field offset for PresenceSessionClientConnection.handleUpdatedPresentDevices];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;

  v6.receiver = v2;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, sel_init);
}

id @objc PresenceSessionClientConnection.init()(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = a1;
  UUID.init()();
  uint64_t v4 = &v3[direct field offset for PresenceSessionClientConnection.handleServerDisconnectClosure];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = &v3[direct field offset for PresenceSessionClientConnection.handleUpdatedPresentDevices];
  *(void *)uint64_t v5 = 0;
  *((void *)v5 + 1) = 0;

  v7.receiver = v3;
  v7.super_class = ObjectType;
  return objc_msgSendSuper2(&v7, sel_init);
}

uint64_t PresenceSessionClientConnection.__ivar_destroyer()
{
  uint64_t v1 = v0 + direct field offset for PresenceSessionClientConnection.id;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  _sxRi_zRi0_zlyytIseghHr_SgWOe(*(void *)(v0
                                          + direct field offset for PresenceSessionClientConnection.handleServerDisconnectClosure));
  uint64_t v3 = *(void *)(v0 + direct field offset for PresenceSessionClientConnection.handleUpdatedPresentDevices);
  return _sxRi_zRi0_zlyytIseghHr_SgWOe(v3);
}

id PresenceSessionClientConnection.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc PresenceSessionClientConnection.__ivar_destroyer(uint64_t a1)
{
  uint64_t v2 = a1 + direct field offset for PresenceSessionClientConnection.id;
  uint64_t v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  _sxRi_zRi0_zlyytIseghHr_SgWOe(*(void *)(a1
                                          + direct field offset for PresenceSessionClientConnection.handleServerDisconnectClosure));
  uint64_t v4 = *(void *)(a1 + direct field offset for PresenceSessionClientConnection.handleUpdatedPresentDevices);
  return _sxRi_zRi0_zlyytIseghHr_SgWOe(v4);
}

uint64_t type metadata accessor for PresenceSessionClientConnection()
{
  uint64_t result = type metadata singleton initialization cache for PresenceSessionClientConnection;
  if (!type metadata singleton initialization cache for PresenceSessionClientConnection) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for PresenceSessionClientConnection()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t ObjC metadata update function for PresenceSessionClientConnection()
{
  return type metadata accessor for PresenceSessionClientConnection();
}

uint64_t sub_1B103BFEC()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed [PresenceSessionParticipant]) -> ()(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t _sytIegr_Ieg_TRTA_0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t ForegroundApplicationLaunchBehavior.__allocating_init()()
{
  return swift_allocObject();
}

BOOL ForegroundApplicationLaunchBehavior.shouldHandleAppLaunch(for:options:)(uint64_t a1, char a2)
{
  return (a2 & 1) == 0;
}

uint64_t ForegroundApplicationLaunchBehavior.handleAppLaunch(for:options:launchProvider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return MEMORY[0x1F4188298](ForegroundApplicationLaunchBehavior.handleAppLaunch(for:options:launchProvider:), 0, 0);
}

uint64_t ForegroundApplicationLaunchBehavior.handleAppLaunch(for:options:launchProvider:)()
{
  uint64_t v1 = (void *)v0[4];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 8) + **(int **)(v3 + 8));
  uint64_t v4 = (void *)swift_task_alloc();
  v0[5] = v4;
  *uint64_t v4 = v0;
  v4[1] = ForegroundApplicationLaunchBehavior.handleAppLaunch(for:options:launchProvider:);
  uint64_t v6 = v0[2];
  uint64_t v5 = v0[3];
  return v8(v6, v5, v2, v3);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t ForegroundApplicationLaunchBehavior.deinit()
{
  return v0;
}

uint64_t ForegroundApplicationLaunchBehavior.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t ForegroundApplicationLaunchBehavior.init()()
{
  return v0;
}

uint64_t protocol witness for ApplicationLaunchBehavior.shouldHandleAppLaunch(for:options:) in conformance ForegroundApplicationLaunchBehavior()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 80))();
}

uint64_t protocol witness for ApplicationLaunchBehavior.handleAppLaunch(for:options:launchProvider:) in conformance ForegroundApplicationLaunchBehavior(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 88)
                                                          + **(int **)(*(void *)v3 + 88));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return v10(a1, a2, a3);
}

uint64_t protocol witness for ApplicationLaunchBehavior.revokeBackgroundAuthorization(for:) in conformance ForegroundApplicationLaunchBehavior()
{
  (*(void (**)(void))(*(void *)v0 + 96))();
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 8);
  return protocol witness for ApplicationLaunchBehavior.revokeBackgroundAuthorization(for:) in conformance ForegroundApplicationLaunchBehavior(v2);
}

uint64_t type metadata accessor for ForegroundApplicationLaunchBehavior()
{
  return self;
}

uint64_t method lookup function for ForegroundApplicationLaunchBehavior(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ForegroundApplicationLaunchBehavior);
}

uint64_t dispatch thunk of ForegroundApplicationLaunchBehavior.shouldHandleAppLaunch(for:options:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 80))();
}

uint64_t dispatch thunk of ForegroundApplicationLaunchBehavior.handleAppLaunch(for:options:launchProvider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 88)
                                                          + **(int **)(*(void *)v3 + 88));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of ForegroundApplicationLaunchBehavior.revokeBackgroundAuthorization(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of ForegroundApplicationLaunchBehavior.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t protocol witness for ApplicationLaunchBehavior.revokeBackgroundAuthorization(for:) in conformance ForegroundApplicationLaunchBehavior(uint64_t (*a1)(void))
{
  return a1();
}

id CPManagedConfigurationObserver.allowed.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC14CopresenceCore30CPManagedConfigurationObserver____lazy_storage___allowed;
  int v2 = *(unsigned __int8 *)(v0
                          + OBJC_IVAR____TtC14CopresenceCore30CPManagedConfigurationObserver____lazy_storage___allowed);
  if (v2 != 2) {
    return (id)(v2 & 1);
  }
  id result = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore30CPManagedConfigurationObserver_profileConnection), sel_isGroupActivityAllowed);
  *(unsigned char *)(v0 + v1) = (_BYTE)result;
  return result;
}

uint64_t CPManagedConfigurationObserver.allowed.setter(uint64_t result)
{
  *(unsigned char *)(v1 + OBJC_IVAR____TtC14CopresenceCore30CPManagedConfigurationObserver____lazy_storage___allowed) = result;
  return result;
}

uint64_t (*CPManagedConfigurationObserver.allowed.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = CPManagedConfigurationObserver.allowed.getter() & 1;
  return CPManagedConfigurationObserver.allowed.modify;
}

uint64_t CPManagedConfigurationObserver.allowed.modify(uint64_t result)
{
  *(unsigned char *)(*(void *)result
           + OBJC_IVAR____TtC14CopresenceCore30CPManagedConfigurationObserver____lazy_storage___allowed) = *(unsigned char *)(result + 8);
  return result;
}

id CPManagedConfigurationObserver.profileConnection.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore30CPManagedConfigurationObserver_profileConnection);
}

uint64_t CPManagedConfigurationObserver.delegate.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14CopresenceCore30CPManagedConfigurationObserver_delegate;
  swift_beginAccess();
  return MEMORY[0x1B3EA3B30](v1);
}

uint64_t CPManagedConfigurationObserver.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC14CopresenceCore30CPManagedConfigurationObserver_delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*CPManagedConfigurationObserver.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC14CopresenceCore30CPManagedConfigurationObserver_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1B3EA3B30](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return ActivitySession.sessionManager.modify;
}

id CPManagedConfigurationObserver.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id CPManagedConfigurationObserver.init()()
{
  v0[OBJC_IVAR____TtC14CopresenceCore30CPManagedConfigurationObserver____lazy_storage___allowed] = 2;
  id v1 = self;
  uint64_t v2 = v0;
  id result = objc_msgSend(v1, sel_sharedConnection);
  if (result)
  {
    *(void *)&v2[OBJC_IVAR____TtC14CopresenceCore30CPManagedConfigurationObserver_profileConnection] = result;
    *(void *)&v2[OBJC_IVAR____TtC14CopresenceCore30CPManagedConfigurationObserver_delegate + 8] = 0;
    swift_unknownObjectWeakInit();

    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.default);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_1B0DF7000, v5, v6, "Initializing CPManagedConfigurationObserver", v7, 2u);
      MEMORY[0x1B3EA39E0](v7, -1, -1);
    }

    v17.receiver = v2;
    v17.super_class = (Class)type metadata accessor for CPManagedConfigurationObserver();
    id v8 = objc_msgSendSuper2(&v17, sel_init);
    uint64_t v9 = self;
    id v10 = v8;
    id v11 = objc_msgSend(v9, sel_defaultCenter);
    uint64_t v12 = *MEMORY[0x1E4F73EC0];
    uint64_t v13 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v16[4] = partial apply for closure #1 in CPManagedConfigurationObserver.init();
    v16[5] = v13;
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 1107296256;
    v16[2] = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
    v16[3] = &block_descriptor_23;
    uint64_t v14 = _Block_copy(v16);
    swift_release();
    id v15 = objc_msgSend(v11, sel_addObserverForName_object_queue_usingBlock_, v12, 0, 0, v14);

    _Block_release(v14);
    swift_unknownObjectRelease();

    return v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void closure #1 in CPManagedConfigurationObserver.init()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x1B3EA3B30](v2);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Log.default);
    os_log_type_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      id v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v8 = 0;
      _os_log_impl(&dword_1B0DF7000, v6, v7, "CPManagedConfigurationObserver got MCEffectiveSettingsChangedNotification notification", v8, 2u);
      MEMORY[0x1B3EA39E0](v8, -1, -1);
    }

    id v9 = objc_msgSend(*(id *)((char *)v4 + OBJC_IVAR____TtC14CopresenceCore30CPManagedConfigurationObserver_profileConnection), sel_isGroupActivityAllowed);
    id v10 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v11 = (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x70))(v9);
    if ((*(uint64_t (**)(uint64_t))((*v10 & *v4) + 0x80))(v11))
    {
      uint64_t v13 = v12;
      uint64_t ObjectType = swift_getObjectType();
      char v15 = (*(uint64_t (**)(void))((*v10 & *v4) + 0x68))();
      (*(void (**)(void, uint64_t, uint64_t))(v13 + 8))(v15 & 1, ObjectType, v13);

      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ()(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Notification();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v6 = *(void (**)(char *))(a1 + 32);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v6(v5);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

id CPManagedConfigurationObserver.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CPManagedConfigurationObserver();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for CPManagedConfigurationObserverProtocol.allowed.getter in conformance CPManagedConfigurationObserver()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t protocol witness for CPManagedConfigurationObserverProtocol.delegate.getter in conformance CPManagedConfigurationObserver()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t protocol witness for CPManagedConfigurationObserverProtocol.delegate.setter in conformance CPManagedConfigurationObserver()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

void (*protocol witness for CPManagedConfigurationObserverProtocol.delegate.modify in conformance CPManagedConfigurationObserver(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x90))();
  return protocol witness for PresenceDataSource.members.modify in conformance SKPresenceDataSource<A>;
}

uint64_t type metadata accessor for CPManagedConfigurationObserver()
{
  return self;
}

uint64_t sub_1B103D038()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void partial apply for closure #1 in CPManagedConfigurationObserver.init()(uint64_t a1)
{
  closure #1 in CPManagedConfigurationObserver.init()(a1, v1);
}

uint64_t block_destroy_helper_21()
{
  return swift_release();
}

uint64_t sub_1B103D080@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x68))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B103D0E0(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x70))(*a1);
}

uint64_t sub_1B103D138@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x80))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B103D194(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x88);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t dispatch thunk of CPManagedConfigurationObserverDelegate.allowedStateChanged(allowed:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of CPManagedConfigurationObserverProtocol.allowed.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CPManagedConfigurationObserverProtocol.delegate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CPManagedConfigurationObserverProtocol.delegate.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of CPManagedConfigurationObserverProtocol.delegate.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t method lookup function for CPManagedConfigurationObserver(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CPManagedConfigurationObserver);
}

uint64_t dispatch thunk of CPManagedConfigurationObserver.allowed.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of CPManagedConfigurationObserver.allowed.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of CPManagedConfigurationObserver.allowed.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of CPManagedConfigurationObserver.delegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of CPManagedConfigurationObserver.delegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of CPManagedConfigurationObserver.delegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

void static PeoplePickerInterface.identity.getter(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

id one-time initialization function for hostObjectInterface(uint64_t a1)
{
  return one-time initialization function for hostObjectInterface(a1, &protocolRef_CPPeoplePickerXPCClient, &static PeoplePickerInterface.hostObjectInterface);
}

id static PeoplePickerInterface.hostObjectInterface.getter()
{
  return static ConversationManagerInterface.hostObjectInterface.getter(&one-time initialization token for hostObjectInterface, (void **)&static PeoplePickerInterface.hostObjectInterface);
}

id one-time initialization function for clientObjectInterface(uint64_t a1)
{
  return one-time initialization function for hostObjectInterface(a1, &protocolRef_CPPeoplePickerXPCHost, &static PeoplePickerInterface.clientObjectInterface);
}

id one-time initialization function for hostObjectInterface(uint64_t a1, void *a2, void *a3)
{
  id result = objc_msgSend(self, sel_interfaceWithProtocol_, *a2);
  *a3 = result;
  return result;
}

id static PeoplePickerInterface.clientObjectInterface.getter()
{
  return static ConversationManagerInterface.hostObjectInterface.getter(&one-time initialization token for clientObjectInterface, (void **)&static PeoplePickerInterface.clientObjectInterface);
}

void protocol witness for static XPCInterface.identity.getter in conformance PeoplePickerInterface(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

id protocol witness for static XPCInterface.hostObjectInterface.getter in conformance PeoplePickerInterface(uint64_t a1, uint64_t a2)
{
  return protocol witness for static XPCInterface.hostObjectInterface.getter in conformance ConversationManagerInterface(a1, a2, &one-time initialization token for hostObjectInterface, (void **)&static PeoplePickerInterface.hostObjectInterface);
}

id protocol witness for static XPCInterface.clientObjectInterface.getter in conformance PeoplePickerInterface(uint64_t a1, uint64_t a2)
{
  return protocol witness for static XPCInterface.hostObjectInterface.getter in conformance ConversationManagerInterface(a1, a2, &one-time initialization token for clientObjectInterface, (void **)&static PeoplePickerInterface.clientObjectInterface);
}

ValueMetadata *type metadata accessor for PeoplePickerInterface()
{
  return &type metadata for PeoplePickerInterface;
}

uint64_t DatagramEndpoint.description.getter()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void **)(v0 + 8);
  if (*(unsigned char *)(v0 + 32))
  {
    unint64_t v3 = *(void *)(v0 + 24);
    if (v3 >> 60 == 15)
    {
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      strcpy((char *)v24, "RelaySession(");
      HIWORD(v24[1]) = -4864;
      v4._countAndFlagsBits = v1;
      v4._object = v2;
      String.append(_:)(v4);
      v5._countAndFlagsBits = 41;
      v5._object = (void *)0xE100000000000000;
      String.append(_:)(v5);
    }
    else
    {
      uint64_t v13 = *(void *)(v0 + 16);
      outlined copy of Data._Representation(v13, v3);
      outlined copy of Data._Representation(v13, v3);
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease();
      strcpy((char *)v24, "RelaySession(");
      HIWORD(v24[1]) = -4864;
      v14._countAndFlagsBits = v1;
      v14._object = v2;
      String.append(_:)(v14);
      v15._countAndFlagsBits = 8236;
      v15._object = (void *)0xE200000000000000;
      String.append(_:)(v15);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      id v17 = [(objc_class *)isa tu_URLSafeBase64EncodedString];

      if (v17)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v18 = String.init<A>(reflecting:)();
        unint64_t v20 = v19;
      }
      else
      {
        unint64_t v20 = 0xE300000000000000;
        uint64_t v18 = 7104878;
      }
      unint64_t v21 = v20;
      String.append(_:)(*(Swift::String *)&v18);
      swift_bridgeObjectRelease();
      v22._countAndFlagsBits = 41;
      v22._object = (void *)0xE100000000000000;
      String.append(_:)(v22);
      outlined consume of Data?(v13, v3);
      outlined consume of Data?(v13, v3);
    }
  }
  else
  {
    strcpy((char *)v24, "Direct(");
    v24[1] = 0xE700000000000000;
    swift_getObjectType();
    swift_unknownObjectRetain();
    uint64_t v6 = dispatch thunk of NWGroupDescriptor.members.getter();
    uint64_t v7 = type metadata accessor for NWEndpoint();
    uint64_t v8 = MEMORY[0x1B3EA1D20](v6, v7);
    id v10 = v9;
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = v8;
    v11._object = v10;
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = 41;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    swift_unknownObjectRelease();
  }
  return v24[0];
}

uint64_t initializeWithCopy for DatagramEndpoint(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  outlined copy of DatagramEndpoint(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for DatagramEndpoint(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  outlined copy of DatagramEndpoint(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = *(void *)(a1 + 24);
  char v12 = *(unsigned char *)(a1 + 32);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  outlined consume of DatagramEndpoint(v8, v9, v10, v11, v12);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DatagramEndpoint(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 32);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 32) = v3;
  outlined consume of DatagramEndpoint(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for DatagramEndpoint(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DatagramEndpoint(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for DatagramEndpoint(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t destructiveInjectEnumTag for DatagramEndpoint(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for DatagramEndpoint()
{
  return &type metadata for DatagramEndpoint;
}

BOOL static UnreliableMessengerError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void UnreliableMessengerError.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int UnreliableMessengerError.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t UnreliableMessenger.Message.data.getter()
{
  uint64_t v1 = *(void *)v0;
  outlined copy of Data._Representation(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t UnreliableMessenger.Message.fromParticipantID.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t UnreliableMessenger.Message.init(data:fromParticipantID:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t UnreliableMessenger.Configuration.datagramPayloadMaxSizeBytes.getter()
{
  return *(void *)v0;
}

uint64_t UnreliableMessenger.Configuration.datagramPayloadMaxSizeBytes.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*UnreliableMessenger.Configuration.datagramPayloadMaxSizeBytes.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t UnreliableMessenger.Configuration.outgoingQueueMaxSize.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t UnreliableMessenger.Configuration.outgoingQueueMaxSize.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*UnreliableMessenger.Configuration.outgoingQueueMaxSize.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t UnreliableMessenger.Configuration.channelStreamMaxTries.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t UnreliableMessenger.Configuration.channelStreamMaxTries.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*UnreliableMessenger.Configuration.channelStreamMaxTries.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

double UnreliableMessenger.Configuration.channelStreamRetryInterval.getter()
{
  return *(double *)(v0 + 24);
}

void UnreliableMessenger.Configuration.channelStreamRetryInterval.setter(double a1)
{
  *(double *)(v1 + 24) = a1;
}

uint64_t (*UnreliableMessenger.Configuration.channelStreamRetryInterval.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t UnreliableMessenger.Configuration.seqNumBufferSize.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t UnreliableMessenger.Configuration.seqNumBufferSize.setter(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t (*UnreliableMessenger.Configuration.seqNumBufferSize.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

void __swiftcall UnreliableMessenger.Configuration.init(datagramPayloadMaxSizeBytes:outgoingQueueMaxSize:channelStreamMaxTries:channelStreamRetryInterval:seqNumBufferSize:)(CopresenceCore::UnreliableMessenger::Configuration *__return_ptr retstr, Swift::Int_optional datagramPayloadMaxSizeBytes, Swift::Int_optional outgoingQueueMaxSize, Swift::Int_optional channelStreamMaxTries, Swift::Double_optional channelStreamRetryInterval, Swift::Int_optional seqNumBufferSize)
{
  Swift::Int v6 = *(void *)&seqNumBufferSize.is_nil;
  Swift::Int value = 1180;
  if (!datagramPayloadMaxSizeBytes.is_nil) {
    Swift::Int value = datagramPayloadMaxSizeBytes.value;
  }
  Swift::Int v8 = 1000;
  if (!outgoingQueueMaxSize.is_nil) {
    Swift::Int v8 = outgoingQueueMaxSize.value;
  }
  Swift::Int v9 = 3;
  if (!channelStreamMaxTries.is_nil) {
    Swift::Int v9 = channelStreamMaxTries.value;
  }
  double v10 = *(double *)&channelStreamRetryInterval.is_nil;
  if (seqNumBufferSize.value) {
    double v10 = 1.0;
  }
  retstr->datagramPayloadMaxSizeBytes = value;
  retstr->outgoingQueueMaxSize = v8;
  retstr->channelStreamMaxTries = v9;
  if (v11) {
    Swift::Int v6 = 1024;
  }
  retstr->channelStreamRetryInterval = v10;
  retstr->seqNumBufferSize = v6;
}

void UnreliableMessenger.ClosedReason.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

BOOL static UnreliableMessenger.ClosedReason.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t UnreliableMessenger.SendItem.data.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  outlined copy of Data._Representation(v1, *(void *)(v0 + 24));
  return v1;
}

uint64_t UnreliableMessenger.SendItem.toParticipantIDs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t UnreliableMessenger.SendItem.completion.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v1);
  return v1;
}

uint64_t UnreliableMessenger.SendItem.sentAt.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 56);
  outlined copy of Data?(v1, *(void *)(v0 + 64));
  return v1;
}

uint64_t UnreliableMessenger.SendItem.sentAt.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 56);
  unint64_t v6 = *(void *)(v2 + 64);
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = a2;
  return outlined consume of Data?(v5, v6);
}

uint64_t (*UnreliableMessenger.SendItem.sentAt.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

double UnreliableMessenger.SendItem.__allocating_init(data:toParticipantIDs:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v10 + 56) = xmmword_1B113B080;
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  *(void *)(v10 + 32) = a3;
  *(void *)(v10 + 40) = a4;
  *(void *)(v10 + 48) = a5;
  return result;
}

uint64_t UnreliableMessenger.SendItem.init(data:toParticipantIDs:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_OWORD *)(v5 + 56) = xmmword_1B113B080;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  *(void *)(v5 + 32) = a3;
  *(void *)(v5 + 40) = a4;
  *(void *)(v5 + 48) = a5;
  return v5;
}

uint64_t UnreliableMessenger.SendItem.deinit()
{
  outlined consume of Data._Representation(*(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_bridgeObjectRelease();
  _sxRi_zRi0_zlyytIseghHr_SgWOe(*(void *)(v0 + 40));
  outlined consume of Data?(*(void *)(v0 + 56), *(void *)(v0 + 64));
  return v0;
}

uint64_t UnreliableMessenger.SendItem.__deallocating_deinit()
{
  outlined consume of Data._Representation(*(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_bridgeObjectRelease();
  _sxRi_zRi0_zlyytIseghHr_SgWOe(*(void *)(v0 + 40));
  outlined consume of Data?(*(void *)(v0 + 56), *(void *)(v0 + 64));
  return swift_deallocClassInstance();
}

uint64_t UnreliableMessenger.State.description.getter(char a1)
{
  uint64_t result = 0x6C616974696E49;
  switch(a1)
  {
    case 1:
      unsigned int v3 = 1918989395;
      goto LABEL_6;
    case 2:
      uint64_t result = 0x7964616552;
      break;
    case 3:
      uint64_t result = 0x63656E6E6F636552;
      break;
    case 4:
      unsigned int v3 = 1953851475;
LABEL_6:
      uint64_t result = v3 | 0x676E697400000000;
      break;
    case 5:
      uint64_t result = 0x6E776F6474756853;
      break;
    default:
      return result;
  }
  return result;
}

BOOL static UnreliableMessenger.State.< infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a1 < a2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance UnreliableMessenger.State()
{
  uint64_t result = 0x6C616974696E49;
  switch(*v0)
  {
    case 1:
      unsigned int v2 = 1918989395;
      goto LABEL_6;
    case 2:
      uint64_t result = 0x7964616552;
      break;
    case 3:
      uint64_t result = 0x63656E6E6F636552;
      break;
    case 4:
      unsigned int v2 = 1953851475;
LABEL_6:
      uint64_t result = v2 | 0x676E697400000000;
      break;
    case 5:
      uint64_t result = 0x6E776F6474756853;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t static UnreliableMessenger.BufferFull.== infix(_:_:)()
{
  return 1;
}

void UnreliableMessenger.BufferFull.hash(into:)()
{
}

Swift::Int UnreliableMessenger.BufferFull.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t UnreliableMessenger.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

double UnreliableMessenger.config.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 48);
  double result = *(double *)(v1 + 56);
  uint64_t v4 = *(void *)(v1 + 64);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 32);
  *(void *)(a1 + 16) = v2;
  *(double *)(a1 + 24) = result;
  *(void *)(a1 + 32) = v4;
  return result;
}

uint64_t UnreliableMessenger.localParticipantID.getter()
{
  return *(void *)(v0 + 72);
}

uint64_t UnreliableMessenger.delegate.getter()
{
  swift_beginAccess();
  return MEMORY[0x1B3EA3B30](v0 + 80);
}

uint64_t UnreliableMessenger.delegate.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 88) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*UnreliableMessenger.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  unsigned int v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1B3EA3B30](v1 + 80);
  uint64_t v5 = *(void *)(v1 + 88);
  v3[3] = v4;
  v3[4] = v5;
  return UnreliableMessenger.delegate.modify;
}

void UnreliableMessenger.delegate.modify(uint64_t a1, char a2)
{
  unsigned int v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 88) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t UnreliableMessenger.serviceProvider.getter()
{
  uint64_t v1 = *(void *)(v0 + 96);
  swift_retain();
  return v1;
}

id UnreliableMessenger.queue.getter()
{
  return *(id *)(v0 + 112);
}

uint64_t UnreliableMessenger.dataCryptorProvider.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + 120, a1, &demangling cache variable for type metadata for TopicCryptorProvider?);
}

uint64_t UnreliableMessenger.activeReliableSubscribers.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t key path getter for UnreliableMessenger.activeReliableSubscribers : UnreliableMessenger@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for UnreliableMessenger.activeReliableSubscribers : UnreliableMessenger()
{
  return static Published.subscript.setter();
}

uint64_t UnreliableMessenger.activeReliableSubscribers.setter()
{
  return static Published.subscript.setter();
}

void (*UnreliableMessenger.activeReliableSubscribers.modify(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return ConversationManagerClient.activeSessionContainer.modify;
}

uint64_t UnreliableMessenger.$activeReliableSubscribers.getter()
{
  return swift_endAccess();
}

uint64_t key path getter for UnreliableMessenger.$activeReliableSubscribers : UnreliableMessenger()
{
  return swift_endAccess();
}

uint64_t key path setter for UnreliableMessenger.$activeReliableSubscribers : UnreliableMessenger(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64]>.Publisher);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  unint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  Swift::Int v8 = (char *)&v11 - v7;
  Swift::Int v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v11 - v7, a1, v2);
  v9(v6, (uint64_t)v8, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64]>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t UnreliableMessenger.$activeReliableSubscribers.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64]>.Publisher);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64]>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*UnreliableMessenger.$activeReliableSubscribers.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64]>.Publisher);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  uint64_t v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC14CopresenceCore19UnreliableMessenger__activeReliableSubscribers;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64]>);
  Published.projectedValue.getter();
  swift_endAccess();
  return ActivitySession.$state.modify;
}

uint64_t UnreliableMessenger.__allocating_init(name:config:localParticipantID:delegate:dataCryptorProvider:retainRefOnStart:serviceProvider:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16 = *(void *)(a3 + 16);
  uint64_t v17 = *(void *)(a3 + 24);
  uint64_t v18 = *(void *)(a3 + 32);
  long long v25 = *(_OWORD *)a3;
  uint64_t v26 = v16;
  uint64_t v27 = v17;
  uint64_t v28 = v18;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a7, (uint64_t)v24, &demangling cache variable for type metadata for TopicCryptorProvider?);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a10;
  *(void *)(v19 + 24) = a11;
  uint64_t v20 = swift_allocObject();
  UnreliableMessenger.init(name:config:localParticipantID:delegate:dataCryptorProvider:startImmediately:retainRefOnStart:serviceProvider:)(a1, a2, &v25, a4, a5, a6, (uint64_t)v24, 0, a8, a9, (uint64_t)partial apply for implicit closure #1 in UnreliableMessenger.init(name:config:localParticipantID:delegate:dataCryptorProvider:retainRefOnStart:serviceProvider:), v19);
  outlined destroy of UUID?(a7, &demangling cache variable for type metadata for TopicCryptorProvider?);
  return v20;
}

uint64_t sub_1B103EBAC()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for implicit closure #1 in UnreliableMessenger.init(name:config:localParticipantID:delegate:dataCryptorProvider:retainRefOnStart:serviceProvider:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t UnreliableMessenger.__allocating_init(name:config:localParticipantID:delegate:dataCryptorProvider:startImmediately:retainRefOnStart:serviceProvider:)(uint64_t a1, void *a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v19 = swift_allocObject();
  UnreliableMessenger.init(name:config:localParticipantID:delegate:dataCryptorProvider:startImmediately:retainRefOnStart:serviceProvider:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  return v19;
}

uint64_t UnreliableMessenger.init(name:config:localParticipantID:delegate:dataCryptorProvider:startImmediately:retainRefOnStart:serviceProvider:)(uint64_t a1, void *a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = v12;
  int v64 = a8;
  uint64_t v65 = a7;
  uint64_t v54 = a6;
  uint64_t v66 = a5;
  uint64_t v53 = a4;
  uint64_t v49 = a2;
  uint64_t v52 = a1;
  uint64_t v68 = a9;
  uint64_t v69 = a10;
  uint64_t v67 = a12;
  uint64_t v55 = a11;
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64]>.Publisher);
  uint64_t v63 = *(void *)(v62 - 8);
  MEMORY[0x1F4188790](v62);
  uint64_t v61 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v59 = *(void *)(v60 - 8);
  MEMORY[0x1F4188790](v60);
  uint64_t v58 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v57);
  uint64_t v56 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v51 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64]>);
  uint64_t v50 = v20;
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v48 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v48 = *a3;
  uint64_t v24 = *((void *)a3 + 2);
  uint64_t v25 = *((void *)a3 + 3);
  uint64_t v26 = *((void *)a3 + 4);
  *(void *)(v13 + 88) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v13 + 152) = 0;
  *(_OWORD *)(v13 + 136) = 0u;
  *(_OWORD *)(v13 + 120) = 0u;
  *(_OWORD *)(v13 + 168) = 0u;
  *(_OWORD *)(v13 + 184) = 0u;
  uint64_t v27 = MEMORY[0x1E4FBC868];
  *(void *)(v13 + 200) = 0;
  *(void *)(v13 + 208) = v27;
  *(void *)(v13 + 216) = v27;
  *(void *)(v13 + 224) = v27;
  unint64_t v28 = MEMORY[0x1E4FBC860];
  *(void *)(v13 + 232) = MEMORY[0x1E4FBC860];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<EgressMessage<DG_Datagram>, Never>);
  swift_allocObject();
  *(void *)(v13 + 240) = PassthroughSubject.init()();
  *(void *)(v13 + 248) = 0;
  *(void *)(v13 + 256) = v27;
  *(void *)(v13 + 264) = 0;
  uint64_t v29 = v13 + OBJC_IVAR____TtC14CopresenceCore19UnreliableMessenger__activeReliableSubscribers;
  unint64_t aBlock = v28;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64]);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v29, v23, v20);
  uint64_t v30 = v52;
  uint64_t v31 = v49;
  *(void *)(v13 + 16) = v52;
  *(void *)(v13 + 24) = v31;
  *(_OWORD *)(v13 + 32) = v48;
  *(void *)(v13 + 48) = v24;
  *(void *)(v13 + 56) = v25;
  uint64_t v32 = v53;
  *(void *)(v13 + 64) = v26;
  *(void *)(v13 + 72) = v32;
  swift_beginAccess();
  *(void *)(v13 + 88) = v54;
  swift_unknownObjectWeakAssign();
  uint64_t v33 = *(void *)(v13 + 184);
  uint64_t v35 = v68;
  uint64_t v34 = v69;
  *(void *)(v13 + 184) = v68;
  *(void *)(v13 + 192) = v34;
  swift_bridgeObjectRetain();
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v35);
  _sxRi_zRi0_zlyytIseghHr_SgWOe(v33);
  uint64_t v36 = v67;
  *(void *)(v13 + 96) = v55;
  *(void *)(v13 + 104) = v36;
  type metadata accessor for OS_dispatch_queue();
  unint64_t aBlock = 0xD000000000000014;
  unint64_t v71 = 0x80000001B1161220;
  v37._countAndFlagsBits = v30;
  v37._object = v31;
  String.append(_:)(v37);
  swift_retain();
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  unint64_t aBlock = v28;
  _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v59 + 104))(v58, *MEMORY[0x1E4FBCC58], v60);
  *(void *)(v13 + 112) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(unsigned char *)(v13 + 160) = 0;
  swift_beginAccess();
  uint64_t v38 = v61;
  Published.projectedValue.getter();
  swift_endAccess();
  swift_allocObject();
  swift_weakInit();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Published<[UInt64]>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[UInt64]>.Publisher);
  uint64_t v39 = v62;
  uint64_t v40 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v63 + 8))(v38, v39);
  *(void *)(v13 + 264) = v40;
  swift_release();
  if ((v64 & 1) == 0) {
    goto LABEL_4;
  }
  unint64_t v41 = *(NSObject **)(v13 + 112);
  uint64_t v42 = v65;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v65, (uint64_t)v76, &demangling cache variable for type metadata for TopicCryptorProvider?);
  uint64_t v43 = swift_allocObject();
  outlined init with take of TopicCryptorProvider?((uint64_t)v76, v43 + 16);
  *(void *)(v43 + 56) = v13;
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = partial apply for closure #2 in UnreliableMessenger.init(name:config:localParticipantID:delegate:dataCryptorProvider:startImmediately:retainRefOnStart:serviceProvider:);
  *(void *)(v44 + 24) = v43;
  uint64_t v74 = partial apply for thunk for @callee_guaranteed () -> ();
  uint64_t v75 = v44;
  unint64_t aBlock = MEMORY[0x1E4F143A8];
  unint64_t v71 = 1107296256;
  uint64_t v72 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v73 = &block_descriptor_24;
  uint64_t v45 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v41, v45);
  _Block_release(v45);
  swift_release();
  _sxRi_zRi0_zlyytIseghHr_SgWOe(v68);
  swift_unknownObjectRelease();
  outlined destroy of UUID?(v42, &demangling cache variable for type metadata for TopicCryptorProvider?);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
LABEL_4:
    swift_release();
    _sxRi_zRi0_zlyytIseghHr_SgWOe(v68);
    swift_unknownObjectRelease();
    outlined destroy of UUID?(v65, &demangling cache variable for type metadata for TopicCryptorProvider?);
  }
  return v13;
}

uint64_t sub_1B103F504()
{
  swift_weakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void closure #1 in UnreliableMessenger.init(name:config:localParticipantID:delegate:dataCryptorProvider:startImmediately:retainRefOnStart:serviceProvider:)(uint64_t *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<UInt64>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *a1;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v8 = Strong;
    uint64_t v59 = v3;
    v65[0] = v6;
    uint64_t v63 = (uint64_t *)(Strong + 256);
    swift_beginAccess();
    v57[3] = v8;
    uint64_t v9 = swift_bridgeObjectRetain();
    uint64_t v10 = specialized _copyCollectionToContiguousArray<A>(_:)(v9);
    swift_bridgeObjectRelease();
    uint64_t v68 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [UInt64] and conformance [A], &demangling cache variable for type metadata for [UInt64]);
    BidirectionalCollection<>.difference<A>(from:)();
    swift_release();
    uint64_t v60 = v2;
    uint64_t v58 = v5;
    uint64_t v11 = *(void *)(CollectionDifference.removals.getter() + 16);
    uint64_t v12 = MEMORY[0x1E4FBC840];
    if (v11)
    {
      void v57[2] = v6;
      uint64_t v13 = swift_bridgeObjectRetain();
      Swift::String v14 = (void *)MEMORY[0x1E4FBC860];
      v57[1] = v13;
      uint64_t v15 = (unsigned char *)(v13 + 57);
      *(void *)&long long v16 = 136315138;
      long long v62 = v16;
      uint64_t v61 = v12 + 8;
      uint64_t v17 = v63;
      do
      {
        uint64_t v18 = *(void *)(v15 - 17);
        if (*v15 == 1)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            Swift::String v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
          }
          unint64_t v20 = v14[2];
          unint64_t v19 = v14[3];
          if (v20 >= v19 >> 1) {
            Swift::String v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v20 + 1, 1, v14);
          }
          v14[2] = v20 + 1;
          v14[v20 + 4] = v18;
        }
        else
        {
          uint64_t v64 = (uint64_t)v14;
          uint64_t v21 = *(void *)(v15 - 25);
          uint64_t v22 = *(void *)(v15 - 9);
          char v23 = *(v15 - 1);
          if (one-time initialization token for log != -1) {
            swift_once();
          }
          uint64_t v24 = type metadata accessor for Logger();
          __swift_project_value_buffer(v24, (uint64_t)log);
          uint64_t v25 = Logger.logObject.getter();
          os_log_type_t v26 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v25, v26))
          {
            uint64_t v27 = swift_slowAlloc();
            uint64_t v28 = swift_slowAlloc();
            uint64_t v68 = v28;
            *(_DWORD *)uint64_t v27 = v62;
            v65[0] = v21;
            v65[1] = v18;
            v65[2] = v22;
            char v66 = v23;
            char v67 = 0;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<UInt64>.Change);
            uint64_t v29 = String.init<A>(reflecting:)();
            *(void *)(v27 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v68);
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1B0DF7000, v25, v26, "Learned about insertion when looking at removals: %s", (uint8_t *)v27, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1B3EA39E0](v28, -1, -1);
            MEMORY[0x1B3EA39E0](v27, -1, -1);
          }

          uint64_t v17 = v63;
          Swift::String v14 = (void *)v64;
        }
        v15 += 32;
        --v11;
      }
      while (v11);
      swift_bridgeObjectRelease();
    }
    else
    {
      Swift::String v14 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v17 = v63;
    }
    swift_bridgeObjectRelease();
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)log);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = swift_slowAlloc();
      uint64_t v64 = swift_slowAlloc();
      v65[0] = v64;
      *(_DWORD *)uint64_t v38 = 136315394;
      uint64_t v39 = swift_bridgeObjectRetain();
      uint64_t v40 = MEMORY[0x1B3EA1D20](v39, MEMORY[0x1E4FBC538]);
      unint64_t v42 = v41;
      swift_bridgeObjectRelease();
      uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v42, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v38 + 12) = 2080;
      uint64_t v43 = swift_bridgeObjectRetain();
      uint64_t v44 = MEMORY[0x1B3EA1D20](v43, MEMORY[0x1E4FBC538]);
      unint64_t v46 = v45;
      swift_bridgeObjectRelease();
      uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v46, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v36, v37, "[UnreliableMessenger] Learned about new subscribers list: %s, removedParticipants: %s", (uint8_t *)v38, 0x16u);
      uint64_t v47 = v64;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v47, -1, -1);
      MEMORY[0x1B3EA39E0](v38, -1, -1);

      uint64_t v48 = v14[2];
      if (!v48) {
        goto LABEL_36;
      }
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      uint64_t v48 = v14[2];
      if (!v48)
      {
LABEL_36:
        (*(void (**)(char *, uint64_t))(v59 + 8))(v58, v60);
        swift_bridgeObjectRelease();
        swift_release();
        return;
      }
    }
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v48; ++i)
    {
      uint64_t v51 = v14[i + 4];
      swift_beginAccess();
      unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(v51);
      uint64_t v50 = 0;
      if (v53)
      {
        unint64_t v54 = v52;
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v56 = *v17;
        uint64_t v68 = *v17;
        *uint64_t v17 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          specialized _NativeDictionary.copy()();
          uint64_t v56 = v68;
        }
        uint64_t v50 = *(void *)(*(void *)(v56 + 56) + 24 * v54);
        specialized _NativeDictionary._delete(at:)(v54, v56);
        *uint64_t v17 = v56;
        swift_bridgeObjectRelease();
      }
      swift_endAccess();
      outlined consume of SeqNumReceivedBuffer?(v50);
    }
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  __swift_project_value_buffer(v31, (uint64_t)log);
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v34 = 0;
    _os_log_impl(&dword_1B0DF7000, v32, v33, "[UnreliableMessenger] Can't clear seqNumBuffers since we lost refernce to self.", v34, 2u);
    MEMORY[0x1B3EA39E0](v34, -1, -1);
  }
}

void partial apply for closure #1 in UnreliableMessenger.init(name:config:localParticipantID:delegate:dataCryptorProvider:startImmediately:retainRefOnStart:serviceProvider:)(uint64_t *a1)
{
}

void closure #2 in UnreliableMessenger.init(name:config:localParticipantID:delegate:dataCryptorProvider:startImmediately:retainRefOnStart:serviceProvider:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)&v10, &demangling cache variable for type metadata for TopicCryptorProvider?);
  if (v11)
  {
    outlined init with take of BackgroundSessionManagerDataSource(&v10, (uint64_t)v12);
    UnreliableMessenger._start(dataCryptorProvider:)((uint64_t)v12);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  }
  else
  {
    outlined destroy of UUID?((uint64_t)&v10, &demangling cache variable for type metadata for TopicCryptorProvider?);
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)log);
    swift_retain();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      v12[0] = v7;
      *(_DWORD *)uint64_t v6 = 136315138;
      uint64_t v8 = *(void *)(a2 + 16);
      unint64_t v9 = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      *(void *)&long long v10 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v4, v5, "dataCryptorProvider required for immediate start, topic=%s", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v7, -1, -1);
      MEMORY[0x1B3EA39E0](v6, -1, -1);
    }
    else
    {

      swift_release();
    }
  }
}

uint64_t sub_1B103FF08()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  }
  swift_release();
  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t outlined init with take of TopicCryptorProvider?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TopicCryptorProvider?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void partial apply for closure #2 in UnreliableMessenger.init(name:config:localParticipantID:delegate:dataCryptorProvider:startImmediately:retainRefOnStart:serviceProvider:)()
{
  closure #2 in UnreliableMessenger.init(name:config:localParticipantID:delegate:dataCryptorProvider:startImmediately:retainRefOnStart:serviceProvider:)(v0 + 16, *(void *)(v0 + 56));
}

uint64_t sub_1B103FFC4()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t block_destroy_helper_22()
{
  return swift_release();
}

void UnreliableMessenger._start(dataCryptorProvider:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (uint64_t *)((char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0) + 8);
  uint64_t v8 = *(void **)(v2 + 112);
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4FBCBF0], v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_12:
    swift_once();
    goto LABEL_6;
  }
  if (*(unsigned char *)(v2 + 160)) {
    return;
  }
  outlined init with copy of UserNotificationCenter(a1, (uint64_t)v21);
  swift_beginAccess();
  outlined assign with take of TopicCryptorProvider?((uint64_t)v21, v2 + 120);
  swift_endAccess();
  *(unsigned char *)(v2 + 160) = 1;
  long long v10 = *(uint64_t (**)(uint64_t))(v2 + 184);
  if (v10)
  {
    uint64_t v11 = swift_retain();
    uint64_t v12 = v10(v11);
    _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v10);
    *(void *)(v2 + 200) = v12;
    swift_unknownObjectRelease();
  }
  if (one-time initialization token for log != -1) {
    goto LABEL_12;
  }
LABEL_6:
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)log);
  swift_retain();
  Swift::String v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    long long v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    v21[0] = v17;
    *(_DWORD *)long long v16 = 136315138;
    uint64_t v18 = *(void *)(v2 + 16);
    unint64_t v19 = *(void *)(v2 + 24);
    swift_bridgeObjectRetain();
    uint64_t v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v14, v15, "Bootstrapping channel-stream=%s", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v17, -1, -1);
    MEMORY[0x1B3EA39E0](v16, -1, -1);
  }
  else
  {

    swift_release();
  }
  UnreliableMessenger.setupChannelStream()();
}

void UnreliableMessenger.setupChannelStream()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v72 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.FlatMap<AnyPublisher<AnyRawIngressDatagram, DatagramChannelError>, Publishers.SetFailureType<AnyPublisher<UnreliableMessengerServiceProvider, Never>, DatagramChannelError>>, OS_dispatch_queue>);
  uint64_t v76 = *(void *)(v78 - 8);
  MEMORY[0x1F4188790](v78);
  uint64_t v74 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.FlatMap<AnyPublisher<AnyRawIngressDatagram, DatagramChannelError>, Publishers.SetFailureType<AnyPublisher<UnreliableMessengerServiceProvider, Never>, DatagramChannelError>>);
  uint64_t v75 = *(void *)(v77 - 8);
  MEMORY[0x1F4188790](v77);
  uint64_t v73 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.BufferingStrategy<UnreliableMessenger.BufferFull>);
  uint64_t v69 = *(void *)(v6 - 8);
  uint64_t v70 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v61 = (void (**)())((char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for Publishers.PrefetchStrategy();
  uint64_t v67 = *(void *)(v8 - 8);
  uint64_t v68 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v58 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.SetFailureType<PassthroughSubject<EgressMessage<DG_Datagram>, Never>, UnreliableMessenger.BufferFull>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<Publishers.SetFailureType<PassthroughSubject<EgressMessage<DG_Datagram>, Never>, UnreliableMessenger.BufferFull>, AnyRawEgressDatagram>);
  uint64_t v60 = *(void *)(v59 - 8);
  MEMORY[0x1F4188790](v59);
  os_log_type_t v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Buffer<Publishers.Map<Publishers.SetFailureType<PassthroughSubject<EgressMessage<DG_Datagram>, Never>, UnreliableMessenger.BufferFull>, AnyRawEgressDatagram>>);
  uint64_t v63 = *(void *)(v65 - 8);
  MEMORY[0x1F4188790](v65);
  uint64_t v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Catch<Publishers.Buffer<Publishers.Map<Publishers.SetFailureType<PassthroughSubject<EgressMessage<DG_Datagram>, Never>, UnreliableMessenger.BufferFull>, AnyRawEgressDatagram>>, Empty<AnyRawEgressDatagram, Never>>);
  uint64_t v64 = *(void *)(v66 - 8);
  MEMORY[0x1F4188790](v66);
  long long v62 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchPredicate();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char **)((char *)&v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  char v23 = *(void **)(v1 + 112);
  *uint64_t v22 = v23;
  (*(void (**)(void *, void, uint64_t))(v20 + 104))(v22, *MEMORY[0x1E4FBCBF0], v19);
  id v71 = v23;
  LOBYTE(v23) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v20 + 8))(v22, v19);
  if ((v23 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_5;
  }
  if (*(unsigned __int8 *)(v1 + 160) <= 3u)
  {
    LOBYTE(v80[0]) = 1;
    swift_retain();
    PassthroughSubject.send(completion:)();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<EgressMessage<DG_Datagram>, Never>);
    swift_allocObject();
    *(void *)(v1 + 240) = PassthroughSubject.init()();
    swift_release();
    v80[0] = *(id *)(v1 + 240);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type PassthroughSubject<EgressMessage<DG_Datagram>, Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<EgressMessage<DG_Datagram>, Never>);
    lazy protocol witness table accessor for type UnreliableMessenger.BufferFull and conformance UnreliableMessenger.BufferFull();
    Publisher<>.setFailureType<A>(to:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyRawEgressDatagram);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.SetFailureType<PassthroughSubject<EgressMessage<DG_Datagram>, Never>, UnreliableMessenger.BufferFull> and conformance Publishers.SetFailureType<A, B>, &demangling cache variable for type metadata for Publishers.SetFailureType<PassthroughSubject<EgressMessage<DG_Datagram>, Never>, UnreliableMessenger.BufferFull>);
    uint64_t v56 = v15;
    Publisher.map<A>(_:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v24 = (void (*)())v1;
    uint64_t v26 = v67;
    uint64_t v25 = v68;
    uint64_t v27 = v58;
    (*(void (**)(char *, void, uint64_t))(v67 + 104))(v58, *MEMORY[0x1E4F1A900], v68);
    uint64_t v28 = v61;
    char *v61 = partial apply for closure #2 in UnreliableMessenger.setupChannelStream();
    v28[1] = v24;
    uint64_t v57 = v24;
    uint64_t v30 = v69;
    uint64_t v29 = v70;
    (*(void (**)(void (**)(), void, uint64_t))(v69 + 104))(v28, *MEMORY[0x1E4F1A920], v70);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<Publishers.SetFailureType<PassthroughSubject<EgressMessage<DG_Datagram>, Never>, UnreliableMessenger.BufferFull>, AnyRawEgressDatagram> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<Publishers.SetFailureType<PassthroughSubject<EgressMessage<DG_Datagram>, Never>, UnreliableMessenger.BufferFull>, AnyRawEgressDatagram>);
    swift_retain();
    uint64_t v31 = v59;
    uint64_t v32 = v56;
    Publisher.buffer(size:prefetch:whenFull:)();
    (*(void (**)(void (**)(), uint64_t))(v30 + 8))(v28, v29);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v25);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v32, v31);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Empty<AnyRawEgressDatagram, Never>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Buffer<Publishers.Map<Publishers.SetFailureType<PassthroughSubject<EgressMessage<DG_Datagram>, Never>, UnreliableMessenger.BufferFull>, AnyRawEgressDatagram>> and conformance Publishers.Buffer<A>, &demangling cache variable for type metadata for Publishers.Buffer<Publishers.Map<Publishers.SetFailureType<PassthroughSubject<EgressMessage<DG_Datagram>, Never>, UnreliableMessenger.BufferFull>, AnyRawEgressDatagram>>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Empty<AnyRawEgressDatagram, Never> and conformance Empty<A, B>, &demangling cache variable for type metadata for Empty<AnyRawEgressDatagram, Never>);
    os_log_type_t v33 = v62;
    uint64_t v34 = v65;
    Publisher.catch<A>(_:)();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v17, v34);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Catch<Publishers.Buffer<Publishers.Map<Publishers.SetFailureType<PassthroughSubject<EgressMessage<DG_Datagram>, Never>, UnreliableMessenger.BufferFull>, AnyRawEgressDatagram>>, Empty<AnyRawEgressDatagram, Never>> and conformance Publishers.Catch<A, B>, &demangling cache variable for type metadata for Publishers.Catch<Publishers.Buffer<Publishers.Map<Publishers.SetFailureType<PassthroughSubject<EgressMessage<DG_Datagram>, Never>, UnreliableMessenger.BufferFull>, AnyRawEgressDatagram>>, Empty<AnyRawEgressDatagram, Never>>);
    uint64_t v35 = v66;
    uint64_t v36 = Publisher.eraseToAnyPublisher()();
    uint64_t v37 = (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v33, v35);
    uint64_t v38 = v57;
    v80[0] = (id)(*((uint64_t (**)(uint64_t))v57 + 12))(v37);
    uint64_t v39 = swift_allocObject();
    *(void *)(v39 + 16) = v38;
    *(void *)(v39 + 24) = v36;
    swift_retain();
    swift_retain();
    static Subscribers.Demand.unlimited.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<UnreliableMessengerServiceProvider, Never>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<AnyRawIngressDatagram, DatagramChannelError>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<UnreliableMessengerServiceProvider, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<UnreliableMessengerServiceProvider, Never>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<AnyRawIngressDatagram, DatagramChannelError> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<AnyRawIngressDatagram, DatagramChannelError>);
    uint64_t v40 = v73;
    Publisher<>.flatMap<A>(maxPublishers:_:)();
    swift_release();
    swift_release();
    unint64_t v41 = v71;
    v80[0] = v71;
    uint64_t v42 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    uint64_t v43 = (uint64_t)v72;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v72, 1, 1, v42);
    type metadata accessor for OS_dispatch_queue();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.FlatMap<AnyPublisher<AnyRawIngressDatagram, DatagramChannelError>, Publishers.SetFailureType<AnyPublisher<UnreliableMessengerServiceProvider, Never>, DatagramChannelError>> and conformance Publishers.FlatMap<A, B>, &demangling cache variable for type metadata for Publishers.FlatMap<AnyPublisher<AnyRawIngressDatagram, DatagramChannelError>, Publishers.SetFailureType<AnyPublisher<UnreliableMessengerServiceProvider, Never>, DatagramChannelError>>);
    _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (void (*)(uint64_t))type metadata accessor for OS_dispatch_queue);
    id v44 = v41;
    unint64_t v45 = v74;
    uint64_t v46 = v77;
    Publisher.receive<A>(on:options:)();
    outlined destroy of UUID?(v43, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<Publishers.FlatMap<AnyPublisher<AnyRawIngressDatagram, DatagramChannelError>, Publishers.SetFailureType<AnyPublisher<UnreliableMessengerServiceProvider, Never>, DatagramChannelError>>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.FlatMap<AnyPublisher<AnyRawIngressDatagram, DatagramChannelError>, Publishers.SetFailureType<AnyPublisher<UnreliableMessengerServiceProvider, Never>, DatagramChannelError>>, OS_dispatch_queue>);
    swift_retain_n();
    uint64_t v47 = v78;
    uint64_t v48 = Publisher.sink(receiveCompletion:receiveValue:)();
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v76 + 8))(v45, v47);
    *((void *)v38 + 31) = v48;
    swift_release();
    *((unsigned char *)v38 + 160) = 2;
    UnreliableMessenger.attemptFlushEgressQueue()();
    swift_release();
    (*(void (**)(char *, uint64_t))(v75 + 8))(v40, v46);
    return;
  }
  if (one-time initialization token for log != -1) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v49 = type metadata accessor for Logger();
  __swift_project_value_buffer(v49, (uint64_t)log);
  swift_retain_n();
  uint64_t v50 = Logger.logObject.getter();
  os_log_type_t v51 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v50, v51))
  {
    unint64_t v52 = (uint8_t *)swift_slowAlloc();
    char v53 = (void *)swift_slowAlloc();
    v80[0] = v53;
    *(_DWORD *)unint64_t v52 = 136315138;
    uint64_t v54 = UnreliableMessenger.description.getter();
    uint64_t v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, (uint64_t *)v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v50, v51, "Skipping channel-stream setup, closing, %s", v52, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v53, -1, -1);
    MEMORY[0x1B3EA39E0](v52, -1, -1);
  }
  else
  {

    swift_release_n();
  }
}

uint64_t UnreliableMessenger.deinit()
{
  uint64_t v1 = v0;
  if (*(void *)(v0 + 248))
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release();
  }
  swift_bridgeObjectRelease();
  outlined destroy of weak ActivitySessionManagerProtocol?(v0 + 80);
  swift_release();

  outlined destroy of UUID?(v0 + 120, &demangling cache variable for type metadata for TopicCryptorProvider?);
  _sxRi_zRi0_zlyytIseghHr_SgWOe(*(void *)(v0 + 184));
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v2 = v0 + OBJC_IVAR____TtC14CopresenceCore19UnreliableMessenger__activeReliableSubscribers;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64]>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  return v1;
}

uint64_t UnreliableMessenger.__deallocating_deinit()
{
  UnreliableMessenger.deinit();
  return swift_deallocClassInstance();
}

uint64_t UnreliableMessenger.description.getter()
{
  unint64_t v1 = 0xE500000000000000;
  v2._countAndFlagsBits = 0x3D666C6573;
  v2._object = (void *)0xE500000000000000;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = v3;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  uint64_t v6 = 0x7964616552;
  switch(*(unsigned char *)(v0 + 160))
  {
    case 1:
      unint64_t v1 = 0xE800000000000000;
      unsigned int v7 = 1918989395;
      goto LABEL_6;
    case 2:
      break;
    case 3:
      unint64_t v1 = 0xEC000000676E6974;
      uint64_t v6 = 0x63656E6E6F636552;
      break;
    case 4:
      unint64_t v1 = 0xEC0000006E776F44;
      unsigned int v7 = 1953851475;
LABEL_6:
      uint64_t v6 = v7 | 0x676E697400000000;
      break;
    case 5:
      unint64_t v1 = 0xE800000000000000;
      uint64_t v6 = 0x6E776F6474756853;
      break;
    default:
      unint64_t v1 = 0xE700000000000000;
      uint64_t v6 = 0x6C616974696E49;
      break;
  }
  unint64_t v8 = v1;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v13._countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (*(void *)(v0 + 232) >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 32;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x3D6369706F74;
  v16._object = (void *)0xE600000000000000;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 32;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x3D6574617473;
  v18._object = (void *)0xE600000000000000;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 32;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0xD000000000000013;
  v20._object = (void *)0x80000001B1161240;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 32;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0x3D6D754E716573;
  v22._object = (void *)0xE700000000000000;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 32;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0xD000000000000016;
  v24._object = (void *)0x80000001B1161260;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 32;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 0xD000000000000021;
  v26._object = (void *)0x80000001B1161280;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = 32;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 0xD000000000000020;
  v28._object = (void *)0x80000001B11612B0;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._countAndFlagsBits = 32;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 0xD00000000000001DLL;
  v30._object = (void *)0x80000001B11612E0;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  return 0;
}

void UnreliableMessenger.updateState(state:)(char a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unint64_t v8 = (uint64_t *)((char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  Swift::String v9 = *(void **)(v3 + 112);
  *unint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E4FBCBF0], v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if (v9)
  {
    uint64_t v2 = *(unsigned __int8 *)(v3 + 160);
    *(unsigned char *)(v3 + 160) = a1;
    if (one-time initialization token for log == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)log);
  swift_retain_n();
  Swift::String v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = 0x6C616974696E49;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    uint64_t v24 = v16;
    *(_DWORD *)uint64_t v15 = 136315650;
    unint64_t v17 = 0xE700000000000000;
    uint64_t v18 = v16;
    uint64_t v19 = 0x6C616974696E49;
    switch(v2)
    {
      case 1:
        unint64_t v17 = 0xE800000000000000;
        uint64_t v19 = 0x676E697472617453;
        break;
      case 2:
        unint64_t v17 = 0xE500000000000000;
        uint64_t v19 = 0x7964616552;
        break;
      case 3:
        uint64_t v19 = 0x63656E6E6F636552;
        unint64_t v17 = 0xEC000000676E6974;
        break;
      case 4:
        uint64_t v19 = 0x676E697474756853;
        unint64_t v17 = 0xEC0000006E776F44;
        break;
      case 5:
        unint64_t v17 = 0xE800000000000000;
        uint64_t v19 = 0x6E776F6474756853;
        break;
      default:
        break;
    }
    uint64_t v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v17, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2080;
    unint64_t v20 = 0xE700000000000000;
    switch(a1)
    {
      case 1:
        unint64_t v20 = 0xE800000000000000;
        uint64_t v14 = 0x676E697472617453;
        break;
      case 2:
        unint64_t v20 = 0xE500000000000000;
        uint64_t v14 = 0x7964616552;
        break;
      case 3:
        uint64_t v14 = 0x63656E6E6F636552;
        unint64_t v20 = 0xEC000000676E6974;
        break;
      case 4:
        uint64_t v14 = 0x676E697474756853;
        unint64_t v20 = 0xEC0000006E776F44;
        break;
      case 5:
        unint64_t v20 = 0xE800000000000000;
        uint64_t v14 = 0x6E776F6474756853;
        break;
      default:
        break;
    }
    uint64_t v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v20, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 2080;
    uint64_t v21 = *(void *)(v3 + 16);
    unint64_t v22 = *(void *)(v3 + 24);
    swift_bridgeObjectRetain();
    uint64_t v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v12, v13, "Updated state old-state=%s new-state=%s topic=%s", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v18, -1, -1);
    MEMORY[0x1B3EA39E0](v15, -1, -1);
  }
  else
  {

    swift_release_n();
  }
}

uint64_t closure #1 in UnreliableMessenger.setupChannelStream()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  a2[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EgressMessage<DG_Datagram>);
  a2[4] = (uint64_t)&protocol witness table for <> EgressMessage<A>;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a2);
  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)boxed_opaque_existential_1, &demangling cache variable for type metadata for EgressMessage<DG_Datagram>);
}

void closure #2 in UnreliableMessenger.setupChannelStream()()
{
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)log);
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v7 = v4;
    *(_DWORD *)uint64_t v3 = 136315138;
    uint64_t v5 = UnreliableMessenger.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v1, v2, "[Send] Unexpected intermediate buffer-filled %s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v4, -1, -1);
    MEMORY[0x1B3EA39E0](v3, -1, -1);
  }
  else
  {

    swift_release_n();
  }
}

uint64_t closure #3 in UnreliableMessenger.setupChannelStream()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyRawEgressDatagram);
  uint64_t v1 = MEMORY[0x1E4FBC248];
  uint64_t v2 = MEMORY[0x1E4FBC278];
  return MEMORY[0x1F40D6B20](1, v0, v1, v2);
}

uint64_t closure #4 in UnreliableMessenger.setupChannelStream()@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v8 - 8);
  id v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  uint64_t v13 = a2[2];
  uint64_t v14 = a2[3];
  uint64_t v15 = a2[5];
  uint64_t v16 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v10, 1, 1, v16);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(v12 + 16))(v13, v14, a3, v15, v10, v11, v12);
  uint64_t result = outlined destroy of UUID?((uint64_t)v10, &demangling cache variable for type metadata for UUID?);
  *a4 = v17;
  return result;
}

void UnreliableMessenger.handleChannelStreamClosed(completedWith:)(uint64_t a1)
{
  uint64_t v93 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v92 = *(void *)(v93 - 8);
  MEMORY[0x1F4188790](v93);
  unint64_t v98 = (char *)v86 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = type metadata accessor for DispatchQoS();
  uint64_t v97 = *(void *)(v99 - 8);
  MEMORY[0x1F4188790](v99);
  unint64_t v96 = (char *)v86 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = type metadata accessor for DispatchTime();
  uint64_t v107 = *(void *)(v101 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v101);
  uint64_t v94 = (char *)v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  unint64_t v100 = (char *)v86 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DatagramChannelError?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v102 = (uint64_t)v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v103 = (uint64_t)v86 - v12;
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v106 = (double *)((char *)v86 - v14);
  MEMORY[0x1F4188790](v13);
  uint64_t v108 = (uint64_t)v86 - v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<DatagramChannelError>);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)v86 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DatagramChannelError(0);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v109 = (uint64_t)v86 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v104 = (uint64_t)v86 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v105 = (uint64_t)v86 - v26;
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  Swift::String v29 = (char *)v86 - v28;
  MEMORY[0x1F4188790](v27);
  uint64_t v110 = (uint64_t)v86 - v30;
  uint64_t v31 = type metadata accessor for DispatchPredicate();
  uint64_t v32 = *(void *)(v31 - 8);
  MEMORY[0x1F4188790](v31);
  uint64_t v34 = (void *)((char *)v86 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v35 = *(void **)(v1 + 112);
  void *v34 = v35;
  (*(void (**)(void *, void, uint64_t))(v32 + 104))(v34, *MEMORY[0x1E4FBCBF0], v31);
  id v95 = v35;
  LOBYTE(v35) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v32 + 8))(v34, v31);
  if ((v35 & 1) == 0)
  {
    __break(1u);
LABEL_31:
    swift_once();
LABEL_4:
    uint64_t v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)log);
    swift_retain_n();
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      double aBlock = *(double *)&v41;
      *(_DWORD *)uint64_t v40 = 136315138;
      uint64_t v42 = UnreliableMessenger.description.getter();
      uint64_t v117 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v38, v39, "Service closed ingress stream, %s", v40, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v41, -1, -1);
      MEMORY[0x1B3EA39E0](v40, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    return;
  }
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v18, &demangling cache variable for type metadata for Subscribers.Completion<DatagramChannelError>);
  uint64_t v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  if (v36(v18, 1, v19) == 1)
  {
    outlined destroy of UUID?((uint64_t)v18, &demangling cache variable for type metadata for Subscribers.Completion<DatagramChannelError>);
    if (one-time initialization token for log == -1) {
      goto LABEL_4;
    }
    goto LABEL_31;
  }
  uint64_t v44 = v110;
  outlined init with take of DG_SequenceNumber((uint64_t)v18, v110, type metadata accessor for DatagramChannelError);
  unint64_t v45 = (double *)v1;
  if (*(unsigned __int8 *)(v1 + 160) > 3u)
  {
    uint64_t v57 = 0xD000000000000025;
    unint64_t v58 = 0x80000001B1161550;
    unsigned int v59 = 2;
LABEL_14:
    UnreliableMessenger._close(reason:description:)(v59, v57, v58);
    outlined destroy of DG_SequenceNumber(v44, type metadata accessor for DatagramChannelError);
  }
  else
  {
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    uint64_t v47 = __swift_project_value_buffer(v46, (uint64_t)log);
    outlined init with copy of DG_SequenceNumber(v44, (uint64_t)v29, type metadata accessor for DatagramChannelError);
    swift_retain();
    uint64_t v48 = Logger.logObject.getter();
    int v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, (os_log_type_t)v49))
    {
      int v88 = v49;
      os_log_t v89 = v48;
      uint64_t v90 = v47;
      uint64_t v50 = swift_slowAlloc();
      uint64_t v87 = swift_slowAlloc();
      double aBlock = *(double *)&v87;
      *(_DWORD *)uint64_t v50 = 134218242;
      uint64_t v117 = *((void *)v45 + 22);
      v86[1] = &v118;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v50 + 12) = 2080;
      uint64_t v51 = v108;
      outlined init with copy of DG_SequenceNumber((uint64_t)v29, v108, type metadata accessor for DatagramChannelError);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(v51, 0, 1, v19);
      uint64_t v52 = v51;
      uint64_t v53 = (uint64_t)v106;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v52, (uint64_t)v106, &demangling cache variable for type metadata for DatagramChannelError?);
      unsigned int v54 = v36((char *)v53, 1, v19);
      uint64_t v91 = v20;
      if (v54 == 1)
      {
        uint64_t v55 = 7104878;
        unint64_t v56 = 0xE300000000000000;
      }
      else
      {
        uint64_t v106 = v45;
        uint64_t v60 = v105;
        outlined init with take of DG_SequenceNumber(v53, v105, type metadata accessor for DatagramChannelError);
        outlined init with copy of DG_SequenceNumber(v60, v104, type metadata accessor for DatagramChannelError);
        uint64_t v55 = String.init<A>(reflecting:)();
        unint64_t v56 = v61;
        uint64_t v62 = v60;
        unint64_t v45 = v106;
        outlined destroy of DG_SequenceNumber(v62, type metadata accessor for DatagramChannelError);
      }
      outlined destroy of UUID?(v108, &demangling cache variable for type metadata for DatagramChannelError?);
      uint64_t v117 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of DG_SequenceNumber((uint64_t)v29, type metadata accessor for DatagramChannelError);
      os_log_t v63 = v89;
      _os_log_impl(&dword_1B0DF7000, v89, (os_log_type_t)v88, "Channel stream attempt #%ld failed, error=%s", (uint8_t *)v50, 0x16u);
      uint64_t v64 = v87;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v64, -1, -1);
      MEMORY[0x1B3EA39E0](v50, -1, -1);

      uint64_t v20 = v91;
    }
    else
    {
      swift_release();
      outlined destroy of DG_SequenceNumber((uint64_t)v29, type metadata accessor for DatagramChannelError);
    }
    uint64_t v65 = v109;
    outlined init with copy of DG_SequenceNumber(v44, v109, type metadata accessor for DatagramChannelError);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
      case 4u:
        double aBlock = 0.0;
        unint64_t v112 = 0xE000000000000000;
        _StringGuts.grow(_:)(23);
        swift_bridgeObjectRelease();
        double aBlock = -2.31584178e77;
        unint64_t v112 = 0x80000001B1161580;
        uint64_t v72 = v103;
        outlined init with copy of DG_SequenceNumber(v44, v103, type metadata accessor for DatagramChannelError);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(v72, 0, 1, v19);
        uint64_t v73 = v102;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v72, v102, &demangling cache variable for type metadata for DatagramChannelError?);
        if (v36((char *)v73, 1, v19) == 1)
        {
          uint64_t v74 = 7104878;
          uint64_t v75 = (void *)0xE300000000000000;
        }
        else
        {
          uint64_t v76 = v105;
          outlined init with take of DG_SequenceNumber(v73, v105, type metadata accessor for DatagramChannelError);
          outlined init with copy of DG_SequenceNumber(v76, v104, type metadata accessor for DatagramChannelError);
          uint64_t v74 = String.init<A>(reflecting:)();
          uint64_t v75 = v77;
          outlined destroy of DG_SequenceNumber(v76, type metadata accessor for DatagramChannelError);
        }
        outlined destroy of UUID?(v72, &demangling cache variable for type metadata for DatagramChannelError?);
        v78._countAndFlagsBits = v74;
        v78._object = v75;
        String.append(_:)(v78);
        swift_bridgeObjectRelease();
        UnreliableMessenger._close(reason:description:)(1u, *(uint64_t *)&aBlock, v112);
        swift_bridgeObjectRelease();
        outlined destroy of DG_SequenceNumber(v110, type metadata accessor for DatagramChannelError);
        return;
      case 3u:
        uint64_t v57 = 0xD000000000000017;
        unint64_t v58 = 0x80000001B11615A0;
        unsigned int v59 = 1;
        goto LABEL_14;
      default:
        outlined destroy of DG_SequenceNumber(v65, type metadata accessor for DatagramChannelError);
        if (*((void *)v45 + 22) >= *((void *)v45 + 6))
        {
          uint64_t v57 = 0xD00000000000001FLL;
          unint64_t v58 = 0x80000001B11615C0;
          unsigned int v59 = 0;
          goto LABEL_14;
        }
        uint64_t v66 = v94;
        static DispatchTime.now()();
        double v67 = v45[7];
        MEMORY[0x1B3EA17C0](v66, v67);
        uint64_t v68 = *(void (**)(char *, uint64_t))(v107 + 8);
        v107 += 8;
        v68(v66, v101);
        swift_retain();
        uint64_t v69 = Logger.logObject.getter();
        os_log_type_t v70 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v69, v70))
        {
          id v71 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)id v71 = 134217984;
          double aBlock = v67;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          _os_log_impl(&dword_1B0DF7000, v69, v70, "Will retry channel-stream in %f seconds", v71, 0xCu);
          MEMORY[0x1B3EA39E0](v71, -1, -1);
        }
        else
        {

          swift_release();
        }
        uint64_t v79 = v93;
        uint64_t v80 = v92;
        UnreliableMessenger.updateState(state:)(3);
        uint64_t v81 = swift_allocObject();
        swift_weakInit();
        uint64_t v115 = partial apply for closure #1 in UnreliableMessenger.handleChannelStreamClosed(completedWith:);
        uint64_t v116 = v81;
        double aBlock = MEMORY[0x1E4F143A8];
        unint64_t v112 = 1107296256;
        uint64_t v113 = thunk for @escaping @callee_guaranteed () -> ();
        uint64_t v114 = &block_descriptor_78;
        uint64_t v82 = _Block_copy(&aBlock);
        swift_retain();
        uint64_t v83 = v96;
        static DispatchQoS.unspecified.getter();
        uint64_t v117 = MEMORY[0x1E4FBC860];
        _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
        unint64_t v84 = v98;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        uint64_t v85 = v100;
        MEMORY[0x1B3EA2180](v100, v83, v84, v82);
        _Block_release(v82);
        (*(void (**)(char *, uint64_t))(v80 + 8))(v84, v79);
        (*(void (**)(char *, uint64_t))(v97 + 8))(v83, v99);
        v68(v85, v101);
        outlined destroy of DG_SequenceNumber(v110, type metadata accessor for DatagramChannelError);
        swift_release();
        swift_release();
        break;
    }
  }
}

void UnreliableMessenger.processIngressDatagram(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v4 - 8);
  unsigned int v186 = &v180[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = &v180[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for OSSignpostID();
  uint64_t v193 = *(void *)(v10 - 8);
  uint64_t v194 = v10;
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  v188 = &v180[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v11);
  uint64_t v191 = &v180[-v13];
  uint64_t v192 = type metadata accessor for OSSignposter();
  unint64_t v195 = *(uint64_t (**)@<X0>(uint64_t *@<X8>))(v192 - 8);
  MEMORY[0x1F4188790](v192);
  uint64_t v190 = &v180[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = &v180[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = (void *)v2[14];
  *uint64_t v18 = v19;
  (*(void (**)(void *, void, uint64_t))(v16 + 104))(v18, *MEMORY[0x1E4FBCBF0], v15);
  id v20 = v19;
  char v21 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v16 + 8))(v18, v15);
  if ((v21 & 1) == 0)
  {
    __break(1u);
    goto LABEL_87;
  }
  uint64_t v22 = a1[3];
  uint64_t v23 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v22);
  uint64_t v19 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
  uint64_t v24 = a1[3];
  uint64_t v25 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v24);
  uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 16))(v24, v25);
  if (v26 == v2[9])
  {
    if (one-time initialization token for log == -1)
    {
LABEL_4:
      uint64_t v27 = type metadata accessor for Logger();
      __swift_project_value_buffer(v27, (uint64_t)log);
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v28, v29))
      {
LABEL_39:

        return;
      }
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 134217984;
      v201[0] = (uint64_t)v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B0DF7000, v28, v29, "[Receive] Datagram has the same participantID, dropping, seqNum=%llu", v30, 0xCu);
      uint64_t v31 = (uint64_t)v30;
LABEL_38:
      MEMORY[0x1B3EA39E0](v31, -1, -1);
      goto LABEL_39;
    }
LABEL_87:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v187 = v26;
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  uint64_t v33 = __swift_project_value_buffer(v32, (uint64_t)log);
  swift_retain();
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  BOOL v36 = os_log_type_enabled(v34, v35);
  uint64_t v183 = v7;
  uint64_t v182 = v6;
  Swift::UInt64 v189 = (Swift::UInt64)v19;
  uint64_t v185 = v9;
  uint64_t v184 = v33;
  if (v36)
  {
    uint64_t v37 = swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    v201[0] = v38;
    *(_DWORD *)uint64_t v37 = 134218498;
    v200[0] = v187;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v37 + 12) = 2048;
    v200[0] = (uint64_t)v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v37 + 22) = 2080;
    uint64_t v40 = v2[2];
    unint64_t v39 = v2[3];
    swift_bridgeObjectRetain();
    v200[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v39, v201);
    uint64_t v9 = v185;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v34, v35, "[Receive] Datagram received fromParticipantID=%llu seqNum=%llu topic=%s", (uint8_t *)v37, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v38, -1, -1);
    MEMORY[0x1B3EA39E0](v37, -1, -1);
  }
  else
  {

    swift_release();
  }
  uint64_t v41 = v192;
  uint64_t v42 = v190;
  if (one-time initialization token for messenger != -1) {
    swift_once();
  }
  uint64_t v43 = __swift_project_value_buffer(v41, (uint64_t)static Signposts.messenger);
  (*((void (**)(unsigned char *, uint64_t, uint64_t))v195 + 2))(v42, v43, v41);
  uint64_t v44 = a1[3];
  uint64_t v45 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v44);
  uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 24))(v44, v45);
  unint64_t v48 = v47;
  if (OSSignposter.isEnabled.getter())
  {
    int v49 = v191;
    specialized OSSignpostID.init<A, B>(hash:using:)(v46, v48, (uint64_t)v191);
  }
  else
  {
    int v49 = v191;
    OSSignpostID.init(_:)();
    outlined consume of Data._Representation(v46, v48);
  }
  outlined init with copy of UserNotificationCenter((uint64_t)a1, (uint64_t)v201);
  lazy protocol witness table accessor for type Int and conformance Int();
  default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
  _sxRi_zRi0_zlyytIseghHr_SgWOe(v50);
  swift_retain_n();
  uint64_t v51 = v42;
  uint64_t v52 = OSSignposter.logHandle.getter();
  int v53 = static os_signpost_type_t.event.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    int v181 = v53;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v193 + 16))(v188, v49, v194);
    uint64_t v46 = swift_slowAlloc();
    uint64_t v54 = swift_slowAlloc();
    v200[0] = v54;
    *(_DWORD *)uint64_t v46 = 134218754;
    uint64_t v55 = v202;
    uint64_t v56 = v203;
    __swift_project_boxed_opaque_existential_1(v201, v202);
    unint64_t v57 = (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 24))(v55, v56);
    uint64_t v9 = (unsigned char *)v57;
    unint64_t v59 = v58;
    switch(v58 >> 62)
    {
      case 1uLL:
        unint64_t v64 = HIDWORD(v57);
        outlined consume of Data._Representation(v57, v58);
        LODWORD(v60) = v64 - v9;
        if (__OFSUB__(v64, v9)) {
          goto LABEL_90;
        }
        uint64_t v60 = (int)v60;
        break;
      case 2uLL:
        uint64_t v63 = *(void *)(v57 + 16);
        uint64_t v62 = *(void *)(v57 + 24);
        outlined consume of Data._Representation(v57, v58);
        uint64_t v60 = v62 - v63;
        if (!__OFSUB__(v62, v63)) {
          break;
        }
        __break(1u);
LABEL_23:
        outlined consume of Data._Representation((uint64_t)v9, v59);
        uint64_t v60 = 0;
        break;
      case 3uLL:
        goto LABEL_23;
      default:
        outlined consume of Data._Representation(v57, v58);
        uint64_t v60 = BYTE6(v59);
        break;
    }
    Swift::UInt64 v196 = v60;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v201);
    *(_WORD *)(v46 + 12) = 2080;
    uint64_t v65 = v2[2];
    unint64_t v66 = v2[3];
    swift_bridgeObjectRetain();
    Swift::UInt64 v196 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v66, v200);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v46 + 22) = 2048;
    uint64_t v56 = v187;
    Swift::UInt64 v196 = v187;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v46 + 32) = 2048;
    uint64_t v61 = v189;
    Swift::UInt64 v196 = v189;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    double v67 = v188;
    os_signpost_id_t v68 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_1B0DF7000, v52, (os_signpost_type_t)v181, v68, "transport-message-received", "payload-size=%{xcode:size-in-bytes}ld topic=%s participantID=%llu seqNum=%llu", (uint8_t *)v46, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v54, -1, -1);
    MEMORY[0x1B3EA39E0](v46, -1, -1);

    uint64_t v69 = v194;
    os_log_type_t v70 = *(void (**)(unsigned char *, uint64_t))(v193 + 8);
    v70(v191, v194);
    (*((void (**)(unsigned char *, uint64_t))v195 + 1))(v190, v192);
    v70(v67, v69);
    uint64_t v9 = v185;
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v201);
    swift_release_n();

    (*(void (**)(unsigned char *, uint64_t))(v193 + 8))(v49, v194);
    (*((void (**)(unsigned char *, uint64_t))v195 + 1))(v51, v41);
    uint64_t v61 = v189;
    uint64_t v56 = v187;
  }
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v200[0] = v2[26];
  v2[26] = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v61, v56, isUniquelyReferenced_nonNull_native);
  v2[26] = v200[0];
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t v54 = (uint64_t)(v2 + 27);
  swift_beginAccess();
  uint64_t v72 = v2[27];
  if (*(void *)(v72 + 16) && (unint64_t v73 = specialized __RawDictionaryStorage.find<A>(_:)(v56), (v74 & 1) != 0)) {
    uint64_t v75 = *(void *)(*(void *)(v72 + 56) + 8 * v73);
  }
  else {
    uint64_t v75 = 0;
  }
  swift_endAccess();
  unint64_t v64 = v75 + 1;
  if (v75 == -1)
  {
    __break(1u);
    __break(1u);
    do
    {
      __break(1u);
LABEL_90:
      __break(1u);
      specialized _NativeDictionary.copy()();
      *(void *)uint64_t v54 = v196;
      swift_bridgeObjectRelease();
      uint64_t v116 = *(void **)v54;
      swift_bridgeObjectRetain();
      if ((v56 & 1) == 0) {
        specialized _NativeDictionary._insert(at:key:value:)(v64, v46, 0, v116);
      }
      uint64_t v117 = v116[7];
      uint64_t v118 = *(void *)(v117 + 8 * v64);
      BOOL v119 = __CFADD__(v118, 1);
      uint64_t v120 = v118 + 1;
    }
    while (v119);
    *(void *)(v117 + 8 * v64) = v120;
    swift_endAccess();
    swift_bridgeObjectRelease();
    v201[0] = 0;
    v201[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    Swift::UInt64 v196 = 0x3D6D754E716573;
    unint64_t v197 = 0xE700000000000000;
    v201[0] = v189;
    v121._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v121);
    swift_bridgeObjectRelease();
    v122._object = (void *)0x80000001B1161530;
    v122._countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v122);
    v201[0] = v46;
    v123._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v123);
    swift_bridgeObjectRelease();
    v124._countAndFlagsBits = 0x3D746E756F6320;
    v124._object = (void *)0xE700000000000000;
    String.append(_:)(v124);
    swift_beginAccess();
    uint64_t v125 = *(void **)v54;
    if (*(void *)(*(void *)v54 + 16)
      && (unint64_t v126 = specialized __RawDictionaryStorage.find<A>(_:)(v46), (v127 & 1) != 0))
    {
      uint64_t v128 = *(void *)(v125[7] + 8 * v126);
    }
    else
    {
      uint64_t v128 = 0;
    }
    swift_endAccess();
    v201[0] = v128;
    v129._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v129);
    swift_bridgeObjectRelease();
    v130._countAndFlagsBits = 34;
    v130._object = (void *)0xE100000000000000;
    String.append(_:)(v130);
    uint64_t v132 = v196;
    unint64_t v131 = v197;
    v201[0] = (uint64_t)a1;
    uint64_t v133 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (swift_dynamicCast())
    {
      char v134 = v196;
      swift_retain_n();
      swift_bridgeObjectRetain();
      uint64_t v135 = Logger.logObject.getter();
      os_log_type_t v136 = static os_log_type_t.error.getter();
      BOOL v137 = os_log_type_enabled(v135, v136);
      if (v134)
      {
        if (v137)
        {
          uint64_t v138 = swift_slowAlloc();
          uint64_t v139 = swift_slowAlloc();
          Swift::UInt64 v196 = v139;
          *(_DWORD *)uint64_t v138 = 136315394;
          swift_bridgeObjectRetain();
          uint64_t v199 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v132, v131, (uint64_t *)&v196);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v138 + 12) = 2080;
          uint64_t v140 = v2[2];
          unint64_t v141 = v2[3];
          swift_bridgeObjectRetain();
          uint64_t v199 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v140, v141, (uint64_t *)&v196);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          os_log_type_t v142 = v136;
          uint64_t v143 = "[Decrypt] Dropping datagram, decryption failed, %s topic=%s";
LABEL_63:
          _os_log_impl(&dword_1B0DF7000, v135, v142, v143, (uint8_t *)v138, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v139, -1, -1);
          uint64_t v154 = v138;
          goto LABEL_64;
        }
      }
      else if (v137)
      {
        uint64_t v138 = swift_slowAlloc();
        uint64_t v139 = swift_slowAlloc();
        Swift::UInt64 v196 = v139;
        *(_DWORD *)uint64_t v138 = 136315394;
        swift_bridgeObjectRetain();
        uint64_t v199 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v132, v131, (uint64_t *)&v196);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v138 + 12) = 2080;
        uint64_t v155 = v2[2];
        unint64_t v156 = v2[3];
        swift_bridgeObjectRetain();
        uint64_t v199 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v155, v156, (uint64_t *)&v196);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        os_log_type_t v142 = v136;
        uint64_t v143 = "[Decrypt] Dropping datagram, missing key, %s topic=%s";
        goto LABEL_63;
      }
      swift_bridgeObjectRelease_n();
      swift_release_n();
    }
    else
    {
      swift_retain();
      uint64_t v144 = a1;
      swift_retain();
      uint64_t v145 = a1;
      swift_bridgeObjectRetain();
      uint64_t v135 = Logger.logObject.getter();
      os_log_type_t v146 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v135, v146))
      {
        uint64_t v147 = swift_slowAlloc();
        uint64_t v148 = swift_slowAlloc();
        Swift::UInt64 v196 = v148;
        *(_DWORD *)uint64_t v147 = 136315650;
        swift_bridgeObjectRetain();
        uint64_t v199 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v132, v131, (uint64_t *)&v196);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v147 + 12) = 2080;
        uint64_t v199 = (uint64_t)a1;
        id v149 = a1;
        uint64_t v150 = String.init<A>(reflecting:)();
        uint64_t v199 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v150, v151, (uint64_t *)&v196);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        *(_WORD *)(v147 + 22) = 2080;
        uint64_t v152 = v2[2];
        unint64_t v153 = v2[3];
        swift_bridgeObjectRetain();
        uint64_t v199 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v152, v153, (uint64_t *)&v196);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v135, v146, "[Decrypt] Dropping datagram, %s unknown error=%s topic=%s", (uint8_t *)v147, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v148, -1, -1);
        uint64_t v154 = v147;
LABEL_64:
        MEMORY[0x1B3EA39E0](v154, -1, -1);

        (*(void (**)(unsigned char *, uint64_t))(v183 + 8))(v185, v182);
        return;
      }
      swift_release_n();

      swift_bridgeObjectRelease_n();
    }

    (*(void (**)(unsigned char *, uint64_t))(v183 + 8))(v9, v182);
    return;
  }
  swift_beginAccess();
  char v76 = swift_isUniquelyReferenced_nonNull_native();
  v200[0] = v2[27];
  v2[27] = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v64, v56, v76);
  v2[27] = v200[0];
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_beginAccess();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)(v2 + 15), (uint64_t)v201, &demangling cache variable for type metadata for TopicCryptorProvider?);
  if (!v202)
  {
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
    goto LABEL_98;
  }
  uint64_t v77 = v203;
  __swift_project_boxed_opaque_existential_1(v201, v202);
  uint64_t v78 = a1[3];
  uint64_t v79 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v78);
  uint64_t v80 = (*(uint64_t (**)(uint64_t, uint64_t))(v79 + 32))(v78, v79);
  unint64_t v82 = v81;
  char v83 = (*(uint64_t (**)(void))(v77 + 40))();
  outlined consume of Data._Representation(v80, v82);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v201);
  uint64_t v84 = v189;
  if ((v83 & 1) == 0)
  {
LABEL_36:
    swift_retain();
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v90 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v90))
    {
      uint64_t v91 = swift_slowAlloc();
      uint64_t v92 = swift_slowAlloc();
      v201[0] = v92;
      *(_DWORD *)uint64_t v91 = 134218242;
      Swift::UInt64 v196 = v84;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v91 + 12) = 2080;
      uint64_t v93 = v2[2];
      unint64_t v94 = v2[3];
      swift_bridgeObjectRetain();
      Swift::UInt64 v196 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v94, v201);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v28, v90, "Datagram has invalid encryptionID, dropping, seqNum=%llu topic=%s", (uint8_t *)v91, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v92, -1, -1);
      uint64_t v31 = v91;
      goto LABEL_38;
    }

    goto LABEL_41;
  }
  uint64_t v85 = a1[3];
  uint64_t v86 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v85);
  uint64_t v87 = v186;
  AnyRawIngressDatagram.decodedEncryptionID.getter(v85, v86, (uint64_t)v186);
  uint64_t v88 = v183;
  uint64_t v89 = v182;
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v183 + 48))(v87, 1, v182) == 1)
  {
    outlined destroy of UUID?((uint64_t)v87, &demangling cache variable for type metadata for UUID?);
    goto LABEL_36;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v88 + 32))(v9, v87, v89);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)(v2 + 15), (uint64_t)v201, &demangling cache variable for type metadata for TopicCryptorProvider?);
  if (!v202) {
    goto LABEL_97;
  }
  uint64_t v95 = v203;
  __swift_project_boxed_opaque_existential_1(v201, v202);
  uint64_t v96 = a1[3];
  uint64_t v97 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v96);
  uint64_t v98 = (*(uint64_t (**)(uint64_t, uint64_t))(v97 + 24))(v96, v97);
  unint64_t v100 = v99;
  uint64_t v101 = (*(uint64_t (**)(void))(v95 + 64))();
  unint64_t v103 = v102;
  outlined consume of Data._Representation(v98, v100);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v201);
  uint64_t v104 = v2[8];
  if (v104)
  {
    uint64_t v105 = v2 + 32;
    swift_beginAccess();
    swift_retain_n();
    char v106 = swift_isUniquelyReferenced_nonNull_native();
    Swift::UInt64 v196 = v2[32];
    uint64_t v107 = v196;
    v2[32] = 0x8000000000000000;
    unint64_t v109 = specialized __RawDictionaryStorage.find<A>(_:)(v187);
    uint64_t v110 = *(void *)(v107 + 16);
    BOOL v111 = (v108 & 1) == 0;
    uint64_t v112 = v110 + v111;
    if (__OFADD__(v110, v111))
    {
      __break(1u);
    }
    else
    {
      LOBYTE(v98) = v108;
      if (*(void *)(v107 + 24) < v112)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v112, v106);
        uint64_t v107 = v196;
        uint64_t v113 = v187;
        unint64_t v114 = specialized __RawDictionaryStorage.find<A>(_:)(v187);
        if ((v98 & 1) != (v115 & 1))
        {
LABEL_98:
          swift_release();
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          JUMPOUT(0x1B1044A44);
        }
        unint64_t v109 = v114;
LABEL_71:
        uint64_t *v105 = v107;
        swift_bridgeObjectRelease();
        uint64_t v160 = (void *)*v105;
        if (v98)
        {
          swift_release();
          swift_bridgeObjectRetain();
          uint64_t v159 = v183;
LABEL_77:
          swift_bridgeObjectRelease();
          Swift::UInt64 v165 = v189;
          Swift::Bool v166 = SeqNumReceivedBuffer.process(seqNum:)(v189);
          swift_endAccess();
          if (!v166)
          {
            os_log_type_t v174 = Logger.logObject.getter();
            os_log_type_t v175 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v174, v175))
            {
              v176 = (_DWORD *)swift_slowAlloc();
              uint64_t v177 = v113;
              uint64_t v178 = v165;
              v179 = v176;
              _DWORD *v176 = 134218240;
              v201[0] = v177;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *((_WORD *)v179 + 6) = 2048;
              v201[0] = v178;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              _os_log_impl(&dword_1B0DF7000, v174, v175, "[Receive] Datagram received fromParticipantID=%llu seqNum=%llu is being dropped as it is a duplicate packet.", (uint8_t *)v179, 0x16u);
              MEMORY[0x1B3EA39E0](v179, -1, -1);
            }

            outlined consume of Data._Representation(v101, v103);
            (*(void (**)(unsigned char *, uint64_t))(v159 + 8))(v9, v182);
LABEL_41:
            swift_release();
            return;
          }
          uint64_t v157 = partial apply for implicit closure #14 in UnreliableMessenger.processIngressDatagram(_:);
          uint64_t v158 = v2;
          goto LABEL_79;
        }
        double v161 = ceil((double)v104 * 0.03125);
        if ((~*(void *)&v161 & 0x7FF0000000000000) != 0)
        {
          if (v161 > -9.22337204e18)
          {
            uint64_t v159 = v183;
            if (v161 < 9.22337204e18)
            {
              unint64_t v162 = (uint64_t)v161;
              swift_bridgeObjectRetain();
              uint64_t v163 = specialized Array.init(repeating:count:)(0, v162);
              uint64_t v164 = specialized Array.init(repeating:count:)(0, v162);
              swift_release();
              specialized _NativeDictionary._insert(at:key:value:)(v109, v113, v163, v164, 0, v160);
              goto LABEL_77;
            }
            goto LABEL_95;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
LABEL_95:
        __break(1u);
        goto LABEL_96;
      }
      if (v106)
      {
LABEL_70:
        uint64_t v113 = v187;
        goto LABEL_71;
      }
    }
    specialized _NativeDictionary.copy()();
    uint64_t v107 = v196;
    goto LABEL_70;
  }
  uint64_t v157 = 0;
  uint64_t v158 = 0;
  uint64_t v159 = v183;
  uint64_t v113 = v187;
LABEL_79:
  swift_beginAccess();
  if (MEMORY[0x1B3EA3B30](v2 + 10))
  {
    uint64_t v167 = v2[11];
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v169 = v113;
    uint64_t v170 = ObjectType;
    Swift::UInt64 v196 = v101;
    unint64_t v197 = v103;
    uint64_t v198 = v169;
    uint64_t v194 = (uint64_t)v158;
    unint64_t v195 = v157;
    uint64_t v171 = v9;
    v172 = *(void (**)(void *, Swift::UInt64 *, uint64_t, uint64_t))(v167 + 8);
    outlined copy of Data._Representation(v101, v103);
    v172(v2, &v196, v170, v167);
    swift_unknownObjectRelease();
    outlined consume of Data._Representation(v101, v103);
    outlined consume of Data._Representation(v101, v103);
    (*(void (**)(unsigned char *, uint64_t))(v159 + 8))(v171, v182);
    uint64_t v173 = (uint64_t)v195;
  }
  else
  {
    outlined consume of Data._Representation(v101, v103);
    (*(void (**)(unsigned char *, uint64_t))(v159 + 8))(v9, v182);
    uint64_t v173 = (uint64_t)v157;
  }
  _sxRi_zRi0_zlyytIseghHr_SgWOe(v173);
}

void UnreliableMessenger.attemptFlushEgressQueue()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (void *)((char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)(v1 + 112);
  *uint64_t v5 = (uint64_t)v6;
  (*(void (**)(uint64_t *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FBCBF0], v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  if (*(unsigned char *)(v1 + 160) == 2)
  {
    uint64_t v5 = (uint64_t *)(v1 + 232);
    swift_beginAccess();
    unint64_t v8 = *(void *)(v1 + 232);
    if (!(v8 >> 62))
    {
      if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        return;
      }
LABEL_5:
      if (one-time initialization token for log != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)log);
      swift_retain_n();
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        uint64_t v13 = swift_slowAlloc();
        uint64_t v30 = v13;
        *(_DWORD *)uint64_t v12 = 136315138;
        uint64_t v14 = UnreliableMessenger.description.getter();
        v28[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v10, v11, "[Flush] Flushing intermediate-egress-queue %s", v12, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v13, -1, -1);
        MEMORY[0x1B3EA39E0](v12, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      uint64_t v23 = *v5;
      if ((unint64_t)*v5 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
        if (v24) {
          goto LABEL_17;
        }
      }
      else
      {
        uint64_t v24 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v24)
        {
LABEL_17:
          if (v24 < 1)
          {
            __break(1u);
            return;
          }
          for (uint64_t i = 0; i != v24; ++i)
          {
            if ((v23 & 0xC000000000000001) != 0)
            {
              uint64_t v26 = (void *)MEMORY[0x1B3EA25C0](i, v23);
            }
            else
            {
              uint64_t v26 = *(void **)(v23 + 8 * i + 32);
              swift_retain();
            }
            UnreliableMessenger._send(_:)(v26);
            swift_release();
          }
        }
      }
      swift_bridgeObjectRelease();
      *uint64_t v5 = MEMORY[0x1E4FBC860];
      swift_bridgeObjectRelease();
      return;
    }
LABEL_24:
    swift_bridgeObjectRetain();
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v27) {
      return;
    }
    goto LABEL_5;
  }
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)log);
  swift_retain_n();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    v29[0] = v20;
    *(_DWORD *)uint64_t v19 = 136315138;
    uint64_t v21 = UnreliableMessenger.description.getter();
    uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v17, v18, "[Flush] Ignored flushing intermediate-egress-queue %s", v19, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v20, -1, -1);
    MEMORY[0x1B3EA39E0](v19, -1, -1);
  }
  else
  {

    swift_release_n();
  }
}

void UnreliableMessenger._close(reason:description:)(unsigned int a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  unsigned int v40 = a1;
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (void **)((char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  os_log_type_t v11 = *(void **)(v4 + 112);
  *uint64_t v10 = v11;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E4FBCBF0], v7);
  id v12 = v11;
  char v13 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_24:
    swift_once();
    goto LABEL_4;
  }
  if (*(unsigned __int8 *)(v4 + 160) > 3u)
  {
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)log);
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    unint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      v42[0] = v25;
      *(_DWORD *)uint64_t v24 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v24 + 12) = 2080;
      uint64_t v26 = *(void *)(v4 + 16);
      unint64_t v27 = *(void *)(v4 + 24);
      swift_bridgeObjectRetain();
      uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v22, v23, "[Close] Ignored, already shutting down, reason='%s' name=%s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v25, -1, -1);
      MEMORY[0x1B3EA39E0](v24, -1, -1);
    }
    else
    {

      swift_release_n();
      swift_bridgeObjectRelease_n();
    }
    return;
  }
  if (one-time initialization token for log != -1) {
    goto LABEL_24;
  }
LABEL_4:
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)log);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  unint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    v42[0] = v18;
    *(_DWORD *)uint64_t v17 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v17 + 12) = 2080;
    uint64_t v19 = UnreliableMessenger.description.getter();
    uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v15, v16, "[Close] Shutting down, reason='%s' %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v18, -1, -1);
    MEMORY[0x1B3EA39E0](v17, -1, -1);
  }
  else
  {

    swift_release_n();
    swift_bridgeObjectRelease_n();
  }
  UnreliableMessenger.updateState(state:)(4);
  swift_beginAccess();
  unint64_t v28 = *(void *)(v4 + 232);
  unint64_t v39 = (void *)v4;
  if (v28 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    if (v29) {
      goto LABEL_13;
    }
LABEL_26:
    swift_bridgeObjectRelease();
    os_log_type_t v35 = v39;
    v39[29] = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRelease();
    LOBYTE(v41) = 1;
    swift_retain();
    PassthroughSubject.send(completion:)();
    swift_release();
    if (v35[31])
    {
      swift_retain();
      AnyCancellable.cancel()();
      swift_release();
    }
    swift_beginAccess();
    if (MEMORY[0x1B3EA3B30](v35 + 10))
    {
      uint64_t v36 = v35[11];
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 16))(v35, v40, ObjectType, v36);
      swift_unknownObjectRelease();
    }
    uint64_t v38 = v35[23];
    v35[23] = 0;
    v35[24] = 0;
    _sxRi_zRi0_zlyytIseghHr_SgWOe(v38);
    v35[25] = 0;
    swift_unknownObjectRelease();
    return;
  }
  uint64_t v29 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v29) {
    goto LABEL_26;
  }
LABEL_13:
  if (v29 >= 1)
  {
    uint64_t v30 = 0;
    while (1)
    {
      if ((v28 & 0xC000000000000001) != 0)
      {
        uint64_t v33 = *(void (**)(void))(MEMORY[0x1B3EA25C0](v30, v28) + 40);
        if (!v33) {
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v34 = *(void *)(v28 + 8 * v30 + 32);
        swift_retain();
        uint64_t v33 = *(void (**)(void))(v34 + 40);
        if (!v33)
        {
LABEL_21:
          swift_release();
          goto LABEL_16;
        }
      }
      lazy protocol witness table accessor for type UnreliableMessengerError and conformance UnreliableMessengerError();
      uint64_t v31 = (void *)swift_allocError();
      *uint64_t v32 = 3;
      v33();
      swift_release();

LABEL_16:
      if (v29 == ++v30) {
        goto LABEL_26;
      }
    }
  }
  __break(1u);
}

uint64_t closure #1 in UnreliableMessenger.handleChannelStreamClosed(completedWith:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = *(void *)(result + 176);
    BOOL v2 = __OFADD__(v1, 1);
    uint64_t v3 = v1 + 1;
    if (v2)
    {
      __break(1u);
    }
    else
    {
      *(void *)(result + 176) = v3;
      UnreliableMessenger.setupChannelStream()();
      return swift_release();
    }
  }
  return result;
}

uint64_t UnreliableMessenger._send(_:)(void *a1)
{
  uint64_t v56 = a1;
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EgressMessage<DG_Datagram>);
  MEMORY[0x1F4188790](v53);
  uint64_t v55 = (uint64_t)&v51 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for DG_Datagram(0);
  MEMORY[0x1F4188790](v51);
  uint64_t v54 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for DG_SequenceNumber(0);
  uint64_t v4 = MEMORY[0x1F4188790](v57);
  uint64_t v52 = (uint64_t)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  unint64_t v59 = (char *)&v51 - v6;
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (uint64_t *)((char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v58 = v1;
  os_log_type_t v11 = *(void **)(v1 + 112);
  *uint64_t v10 = v11;
  uint64_t v12 = *MEMORY[0x1E4FBCBF0];
  char v13 = (void *)(v8 + 104);
  uint64_t v14 = *(void *)(v8 + 104);
  ((void (*)(void *, uint64_t, uint64_t))v14)(v10, v12, v7);
  id v15 = v11;
  char v16 = _dispatchPreconditionTest(_:)();
  uint64_t v17 = *(void (**)(void *, uint64_t))(v8 + 8);
  v17(v10, v7);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  *uint64_t v10 = v15;
  ((void (*)(void *, uint64_t, uint64_t))v14)(v10, v12, v7);
  id v18 = v15;
  char v19 = _dispatchPreconditionTest(_:)();
  v17(v10, v7);
  if ((v19 & 1) == 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v20 = v58;
  uint64_t v21 = *(void *)(v58 + 168);
  BOOL v22 = __CFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  *(void *)(v58 + 168) = v23;
  _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_2(&lazy protocol witness table cache variable for type DG_SequenceNumber and conformance DG_SequenceNumber, (void (*)(uint64_t))type metadata accessor for DG_SequenceNumber);
  uint64_t v14 = (uint64_t)v59;
  static Message.with(_:)();
  swift_beginAccess();
  uint64_t result = outlined init with copy of ActivitySession.DomainAssertionWrapper?(v20 + 120, (uint64_t)v61, &demangling cache variable for type metadata for TopicCryptorProvider?);
  uint64_t v25 = v62;
  if (v62)
  {
    uint64_t v26 = v63;
    __swift_project_boxed_opaque_existential_1(v61, v62);
    char v13 = v56;
    uint64_t v27 = (*(uint64_t (**)(void, void, void, uint64_t, uint64_t))(v26 + 56))(v56[2], v56[3], *(void *)(v14 + 8), v25, v26);
    if (v28 >> 60 != 15)
    {
      uint64_t v40 = v27;
      unint64_t v41 = v28;
      uint64_t v42 = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v61);
      MEMORY[0x1F4188790](v42);
      *(&v51 - 6) = v14;
      *(&v51 - 5) = v40;
      *(&v51 - 4) = v41;
      *(&v51 - 3) = v20;
      *(&v51 - 2) = (uint64_t)v13;
      _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type DG_Datagram and conformance DG_Datagram, (void (*)(uint64_t))type metadata accessor for DG_Datagram);
      uint64_t v43 = (uint64_t)v54;
      static Message.with(_:)();
      uint64_t v44 = v55;
      outlined init with copy of DG_SequenceNumber(v43, v55, type metadata accessor for DG_Datagram);
      uint64_t v45 = v13[5];
      uint64_t v46 = v53;
      *(void *)(v44 + *(int *)(v53 + 36)) = v13[4];
      uint64_t v47 = v13[6];
      unint64_t v48 = (uint64_t *)(v44 + *(int *)(v46 + 40));
      *unint64_t v48 = v45;
      v48[1] = v47;
      swift_bridgeObjectRetain();
      outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v45);
      swift_retain();
      PassthroughSubject.send(_:)();
      outlined consume of Data?(v40, v41);
      swift_release();
      outlined destroy of UUID?(v44, &demangling cache variable for type metadata for EgressMessage<DG_Datagram>);
      outlined destroy of DG_SequenceNumber(v43, type metadata accessor for DG_Datagram);
      return outlined destroy of DG_SequenceNumber(v14, type metadata accessor for DG_SequenceNumber);
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v61);
    if (one-time initialization token for log == -1)
    {
LABEL_7:
      uint64_t v29 = type metadata accessor for Logger();
      __swift_project_value_buffer(v29, (uint64_t)log);
      uint64_t v30 = v52;
      outlined init with copy of DG_SequenceNumber(v14, v52, type metadata accessor for DG_SequenceNumber);
      swift_retain_n();
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = swift_slowAlloc();
        uint64_t v34 = swift_slowAlloc();
        v61[0] = v34;
        *(_DWORD *)uint64_t v33 = 134218242;
        uint64_t v35 = *(void *)(v30 + 8);
        outlined destroy of DG_SequenceNumber(v30, type metadata accessor for DG_SequenceNumber);
        uint64_t v60 = v35;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v33 + 12) = 2080;
        uint64_t v36 = UnreliableMessenger.description.getter();
        uint64_t v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v31, v32, "Unexpected encryption failure, dropping message seqNum=%llu %s", (uint8_t *)v33, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v34, -1, -1);
        uint64_t v38 = v33;
        uint64_t v14 = (uint64_t)v59;
        MEMORY[0x1B3EA39E0](v38, -1, -1);

        unint64_t v39 = (void (*)(void))v13[5];
        if (!v39) {
          return outlined destroy of DG_SequenceNumber(v14, type metadata accessor for DG_SequenceNumber);
        }
        goto LABEL_12;
      }
      outlined destroy of DG_SequenceNumber(v30, type metadata accessor for DG_SequenceNumber);

      swift_release_n();
      unint64_t v39 = (void (*)(void))v13[5];
      if (v39)
      {
LABEL_12:
        lazy protocol witness table accessor for type UnreliableMessengerError and conformance UnreliableMessengerError();
        int v49 = (void *)swift_allocError();
        *uint64_t v50 = 2;
        v39();
      }
      return outlined destroy of DG_SequenceNumber(v14, type metadata accessor for DG_SequenceNumber);
    }
LABEL_17:
    swift_once();
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t AnyRawIngressDatagram.decodedEncryptionID.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  UUID.init(data:)(v9, v10, (uint64_t)v8);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v8, 1, v11) == 1)
  {
    outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for UUID?);
    uint64_t v13 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a3, v8, v11);
    uint64_t v13 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a3, v13, 1, v11);
}

uint64_t implicit closure #14 in UnreliableMessenger.processIngressDatagram(_:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  double v3 = ceil((double)*(uint64_t *)(result + 64) * 0.03125);
  if ((~*(void *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v3 < 9.22337204e18)
  {
    unint64_t v4 = (uint64_t)v3;
    uint64_t v5 = specialized Array.init(repeating:count:)(0, (uint64_t)v3);
    uint64_t result = specialized Array.init(repeating:count:)(0, v4);
    *a2 = v5;
    a2[1] = result;
    a2[2] = 0;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t closure #1 in UnreliableMessenger._send(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v71 = a4;
  uint64_t v75 = a6;
  uint64_t v81 = a5;
  uint64_t v70 = a3;
  uint64_t v8 = type metadata accessor for OSSignpostID();
  uint64_t v77 = *(void *)(v8 - 8);
  uint64_t v78 = v8;
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  os_signpost_id_t v68 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v76 = (uint64_t)&v65 - v11;
  uint64_t v12 = type metadata accessor for OSSignposter();
  uint64_t v79 = *(void *)(v12 - 8);
  uint64_t v80 = v12;
  MEMORY[0x1F4188790](v12);
  unint64_t v73 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v65 = *(void *)(v14 - 8);
  uint64_t v66 = v14;
  MEMORY[0x1F4188790](v14);
  double v67 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DG_EncryptionID(0);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  char v19 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DG_SequenceNumber(0);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v74 = (uint64_t)&v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v65 - v24;
  uint64_t v69 = a2;
  outlined init with copy of DG_SequenceNumber(a2, (uint64_t)&v65 - v24, type metadata accessor for DG_SequenceNumber);
  uint64_t v26 = type metadata accessor for DG_Datagram(0);
  uint64_t v27 = (uint64_t)a1 + *(int *)(v26 + 28);
  outlined destroy of UUID?(v27, &demangling cache variable for type metadata for DG_SequenceNumber?);
  outlined init with take of DG_SequenceNumber((uint64_t)v25, v27, type metadata accessor for DG_SequenceNumber);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v21 + 56))(v27, 0, 1, v20);
  uint64_t v28 = *a1;
  unint64_t v29 = a1[1];
  uint64_t v31 = v70;
  unint64_t v30 = v71;
  outlined copy of Data._Representation(v70, v71);
  outlined consume of Data._Representation(v28, v29);
  *a1 = v31;
  a1[1] = v30;
  _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_2(&lazy protocol witness table cache variable for type DG_EncryptionID and conformance DG_EncryptionID, (void (*)(uint64_t))type metadata accessor for DG_EncryptionID);
  uint64_t v32 = v72;
  static Message.with(_:)();
  uint64_t v33 = (uint64_t)a1 + *(int *)(v26 + 32);
  outlined destroy of UUID?(v33, &demangling cache variable for type metadata for DG_EncryptionID?);
  outlined init with take of DG_SequenceNumber((uint64_t)v19, v33, type metadata accessor for DG_EncryptionID);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(v33, 0, 1, v16);
  if (one-time initialization token for messenger != -1) {
    swift_once();
  }
  uint64_t v34 = v80;
  uint64_t v35 = __swift_project_value_buffer(v80, (uint64_t)static Signposts.messenger);
  char v36 = OSSignposter.isEnabled.getter();
  unint64_t v37 = v73;
  if (v36)
  {
    uint64_t v38 = v67;
    Date.init()();
    Date.timeIntervalSince1970.getter();
    double v40 = v39 * 1000.0;
    if ((~*(void *)&v40 & 0x7FF0000000000000) != 0)
    {
      if (v40 > -1.0)
      {
        if (v40 < 1.84467441e19)
        {
          unint64_t v41 = (unint64_t)v40;
          (*(void (**)(char *, uint64_t))(v65 + 8))(v38, v66);
          a1[2] = v41;
          goto LABEL_8;
        }
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B10468C4);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_21;
  }
LABEL_8:
  uint64_t v72 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v79 + 16))(v37, v35, v34);
  uint64_t v43 = *(void *)(v75 + 16);
  unint64_t v42 = *(void *)(v75 + 24);
  if (OSSignposter.isEnabled.getter())
  {
    outlined copy of Data._Representation(v43, v42);
    uint64_t v44 = v76;
    specialized OSSignpostID.init<A, B>(hash:using:)(v43, v42, v76);
  }
  else
  {
    uint64_t v44 = v76;
    OSSignpostID.init(_:)();
  }
  uint64_t v45 = v74;
  lazy protocol witness table accessor for type Int and conformance Int();
  swift_retain_n();
  default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
  _sxRi_zRi0_zlyytIseghHr_SgWOe(v46);
  outlined init with copy of DG_SequenceNumber(v69, v45, type metadata accessor for DG_SequenceNumber);
  swift_retain_n();
  uint64_t v47 = OSSignposter.logHandle.getter();
  LODWORD(v71) = static os_signpost_type_t.event.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v68, v44, v78);
    uint64_t v48 = swift_slowAlloc();
    uint64_t v49 = swift_slowAlloc();
    uint64_t v83 = v49;
    *(_DWORD *)uint64_t v48 = 134218754;
    uint64_t v50 = v49;
    uint64_t v51 = 0;
    switch(v42 >> 62)
    {
      case 1uLL:
        LODWORD(v51) = HIDWORD(v43) - v43;
        if (__OFSUB__(HIDWORD(v43), v43)) {
          goto LABEL_22;
        }
        uint64_t v51 = (int)v51;
LABEL_18:
        uint64_t v82 = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        *(_WORD *)(v48 + 12) = 2080;
        uint64_t v56 = v81;
        uint64_t v57 = *(void *)(v81 + 16);
        unint64_t v58 = *(void *)(v81 + 24);
        swift_bridgeObjectRetain();
        uint64_t v82 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, &v83);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v48 + 22) = 2048;
        uint64_t v59 = *(void *)(v56 + 72);
        swift_release();
        uint64_t v82 = v59;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        *(_WORD *)(v48 + 32) = 2048;
        uint64_t v60 = *(void *)(v74 + 8);
        outlined destroy of DG_SequenceNumber(v74, type metadata accessor for DG_SequenceNumber);
        uint64_t v82 = v60;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v61 = v68;
        os_signpost_id_t v62 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl(&dword_1B0DF7000, v47, (os_signpost_type_t)v71, v62, "transport-message-sent", "payload-size=%{xcode:size-in-bytes}ld topic=%s participantID=%llu seqNum=%llu", (uint8_t *)v48, 0x2Au);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v50, -1, -1);
        MEMORY[0x1B3EA39E0](v48, -1, -1);

        uint64_t v63 = *(void (**)(uint64_t, uint64_t))(v77 + 8);
        uint64_t v64 = v78;
        v63(v76, v78);
        (*(void (**)(char *, uint64_t))(v79 + 8))(v37, v80);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v63)(v61, v64);
        break;
      case 2uLL:
        uint64_t v54 = *(void *)(v43 + 16);
        uint64_t v53 = *(void *)(v43 + 24);
        BOOL v55 = __OFSUB__(v53, v54);
        uint64_t v51 = v53 - v54;
        if (!v55) {
          goto LABEL_18;
        }
        goto LABEL_23;
      case 3uLL:
        goto LABEL_18;
      default:
        uint64_t v51 = BYTE6(v42);
        goto LABEL_18;
    }
  }
  else
  {
    outlined destroy of DG_SequenceNumber(v45, type metadata accessor for DG_SequenceNumber);

    swift_release_n();
    swift_release_n();
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v44, v78);
    return (*(uint64_t (**)(char *, uint64_t))(v79 + 8))(v37, v80);
  }
  return result;
}

uint64_t closure #1 in closure #1 in UnreliableMessenger._send(_:)(uint64_t a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v8 = a2[18];
  if (!v8) {
    __break(1u);
  }
  uint64_t v9 = a2[19];
  uint64_t v10 = __swift_project_boxed_opaque_existential_1(a2 + 15, a2[18]);
  uint64_t v11 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v11 + 16))(v13);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v8);
  uint64_t v27 = UUID.uuid.getter();
  char v28 = v14;
  char v29 = v15;
  char v30 = v16;
  char v31 = v17;
  char v32 = v18;
  char v33 = v19;
  char v34 = v20;
  char v35 = v21;
  uint64_t v22 = specialized Data.init<A>(_:)((uint64_t)&v27, (uint64_t)v36);
  uint64_t v24 = v23;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t result = outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  *(void *)a1 = v22;
  *(void *)(a1 + 8) = v24;
  return result;
}

uint64_t DG_EncryptionID.toUUID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  unint64_t v6 = v1[1];
  outlined copy of Data._Representation(v7, v6);
  UUID.init(data:)(v7, v6, (uint64_t)v5);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for UUID?);
    uint64_t v10 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a1, v5, v8);
    uint64_t v10 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, v10, 1, v8);
}

Swift::Void __swiftcall UnreliableMessenger.onEncryptionIDsRefreshed()()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (uint64_t *)((char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + 112);
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBCBF0], v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0) {
    __break(1u);
  }
}

uint64_t UnreliableMessenger.onLocalEncryptionIDRotated(encryptionID:)()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (uint64_t *)((char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + 112);
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBCBF0], v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0) {
    __break(1u);
  }
  return result;
}

uint64_t UnreliableMessenger.start(dataCryptorProvider:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  id v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[1] = *(void *)(v1 + 112);
  outlined init with copy of UserNotificationCenter(a1, (uint64_t)v16);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v1;
  outlined init with take of BackgroundSessionManagerDataSource(v16, v11 + 24);
  aBlock[4] = partial apply for closure #1 in UnreliableMessenger.start(dataCryptorProvider:);
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_20;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v14[2] = MEMORY[0x1E4FBC860];
  _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v10, v6, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release();
}

uint64_t sub_1B10471B0()
{
  return objectdestroy_16Tm(64);
}

void partial apply for closure #1 in UnreliableMessenger.start(dataCryptorProvider:)()
{
  UnreliableMessenger._start(dataCryptorProvider:)(v0 + 24);
}

uint64_t UnreliableMessenger.send(_:to:completion:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v24 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  char v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v22 = *(void *)(v15 - 8);
  uint64_t v23 = v15;
  MEMORY[0x1F4188790](v15);
  char v17 = (char *)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[1] = *(void *)(v6 + 112);
  char v18 = (void *)swift_allocObject();
  _OWORD v18[2] = a1;
  v18[3] = a2;
  _OWORD v18[4] = v6;
  v18[5] = a4;
  v18[6] = a5;
  v18[7] = a3;
  aBlock[4] = partial apply for closure #1 in UnreliableMessenger.send(_:to:completion:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_26_0;
  char v19 = _Block_copy(aBlock);
  outlined copy of Data._Representation(a1, a2);
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(a4);
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v25 = MEMORY[0x1E4FBC860];
  _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v17, v14, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v17, v23);
  return swift_release();
}

void closure #1 in UnreliableMessenger.send(_:to:completion:)(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5, uint64_t a6)
{
  uint64_t v13 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v13) = HIDWORD(a1) - a1;
      if (!__OFSUB__(HIDWORD(a1), a1))
      {
        uint64_t v13 = (int)v13;
        goto LABEL_6;
      }
      __break(1u);
      goto LABEL_33;
    case 2uLL:
      uint64_t v15 = *(void *)(a1 + 16);
      uint64_t v14 = *(void *)(a1 + 24);
      BOOL v16 = __OFSUB__(v14, v15);
      uint64_t v13 = v14 - v15;
      if (!v16) {
        goto LABEL_6;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v13 = BYTE6(a2);
LABEL_6:
      if (v13 >= *(void *)(a3 + 32))
      {
        if (!a4) {
          return;
        }
        lazy protocol witness table accessor for type UnreliableMessengerError and conformance UnreliableMessengerError();
        char v20 = (void *)swift_allocError();
        char v21 = 1;
      }
      else
      {
        unsigned int v17 = *(unsigned __int8 *)(a3 + 160);
        if (v17 <= 3)
        {
          type metadata accessor for UnreliableMessenger.SendItem();
          uint64_t v18 = swift_allocObject();
          *(_OWORD *)(v18 + 56) = xmmword_1B113B080;
          *(void *)(v18 + 16) = a1;
          *(void *)(v18 + 24) = a2;
          *(void *)(v18 + 32) = a6;
          *(void *)(v18 + 40) = a4;
          *(void *)(v18 + 48) = a5;
          if (v17 == 2)
          {
            outlined copy of Data._Representation(a1, a2);
            swift_bridgeObjectRetain();
            outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?((uint64_t)a4);
            UnreliableMessenger._send(_:)((void *)v18);
            swift_release();
            return;
          }
          uint64_t v6 = (void *)(a3 + 232);
          swift_beginAccess();
          unint64_t v22 = *(void *)(a3 + 232);
          if (v22 >> 62)
          {
LABEL_34:
            outlined copy of Data._Representation(a1, a2);
            swift_bridgeObjectRetain();
            outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?((uint64_t)a4);
            swift_bridgeObjectRetain();
            uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            uint64_t v24 = v35 + 1;
            if (!__OFADD__(v35, 1))
            {
LABEL_21:
              if (*(void *)(a3 + 40) < v24)
              {
                if (a4)
                {
                  lazy protocol witness table accessor for type UnreliableMessengerError and conformance UnreliableMessengerError();
                  uint64_t v25 = (void *)swift_allocError();
                  *uint64_t v26 = 0;
                  a4();
                  swift_release();

                  return;
                }
LABEL_30:
                swift_release();
                return;
              }
              swift_beginAccess();
              uint64_t v27 = swift_retain();
              MEMORY[0x1B3EA1CF0](v27);
              if (*(void *)((*v6 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              {
LABEL_25:
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
                swift_endAccess();
                if (one-time initialization token for log != -1) {
                  swift_once();
                }
                uint64_t v28 = type metadata accessor for Logger();
                __swift_project_value_buffer(v28, (uint64_t)log);
                swift_retain_n();
                char v29 = Logger.logObject.getter();
                os_log_type_t v30 = static os_log_type_t.info.getter();
                if (os_log_type_enabled(v29, v30))
                {
                  char v31 = (uint8_t *)swift_slowAlloc();
                  uint64_t v32 = swift_slowAlloc();
                  v36[0] = v32;
                  *(_DWORD *)char v31 = 136315138;
                  uint64_t v33 = UnreliableMessenger.description.getter();
                  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v36);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_release_n();
                  swift_bridgeObjectRelease();
                  _os_log_impl(&dword_1B0DF7000, v29, v30, "[Send] Queueing message, %s", v31, 0xCu);
                  swift_arrayDestroy();
                  MEMORY[0x1B3EA39E0](v32, -1, -1);
                  MEMORY[0x1B3EA39E0](v31, -1, -1);
                  swift_release();

                  return;
                }

                swift_release_n();
                goto LABEL_30;
              }
LABEL_37:
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              goto LABEL_25;
            }
          }
          else
          {
            uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
            outlined copy of Data._Representation(a1, a2);
            swift_bridgeObjectRetain();
            outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?((uint64_t)a4);
            uint64_t v24 = v23 + 1;
            if (!__OFADD__(v23, 1)) {
              goto LABEL_21;
            }
          }
          __break(1u);
          goto LABEL_37;
        }
        if (!a4) {
          return;
        }
        lazy protocol witness table accessor for type UnreliableMessengerError and conformance UnreliableMessengerError();
        char v20 = (void *)swift_allocError();
        char v21 = 3;
      }
      *char v19 = v21;
      a4();

      return;
  }
}

uint64_t sub_1B10479C4()
{
  outlined consume of Data._Representation(v0[2], v0[3]);
  swift_release();
  if (v0[5]) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 64, 7);
}

void partial apply for closure #1 in UnreliableMessenger.send(_:to:completion:)()
{
  closure #1 in UnreliableMessenger.send(_:to:completion:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void (**)(void))(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t UnreliableMessenger.refreshDataCryptorProvider(with:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v33 = a1;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + 120, (uint64_t)aBlock, &demangling cache variable for type metadata for TopicCryptorProvider?);
  uint64_t v11 = v36;
  uint64_t result = outlined destroy of UUID?((uint64_t)aBlock, &demangling cache variable for type metadata for TopicCryptorProvider?);
  if (v11)
  {
    os_log_type_t v30 = v10;
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v31 = v8;
    uint64_t v32 = v6;
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)log);
    swift_retain();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      BOOL v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      uint64_t v28 = v7;
      uint64_t v18 = v17;
      aBlock[0] = v17;
      *(_DWORD *)BOOL v16 = 136315138;
      uint64_t v29 = v4;
      uint64_t v19 = v3;
      uint64_t v20 = *(void *)(v2 + 16);
      unint64_t v21 = *(void *)(v2 + 24);
      swift_bridgeObjectRetain();
      *(void *)&v39[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      uint64_t v3 = v19;
      uint64_t v4 = v29;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v14, v15, "Refreshing data-cryptor-provider topic=%s", v16, 0xCu);
      swift_arrayDestroy();
      uint64_t v22 = v18;
      uint64_t v7 = v28;
      MEMORY[0x1B3EA39E0](v22, -1, -1);
      MEMORY[0x1B3EA39E0](v16, -1, -1);
    }
    else
    {

      swift_release();
    }
    outlined init with copy of Any(v33, (uint64_t)v39);
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = v2;
    outlined init with take of Any(v39, (_OWORD *)(v23 + 24));
    uint64_t v37 = partial apply for closure #1 in UnreliableMessenger.refreshDataCryptorProvider(with:);
    uint64_t v38 = v23;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    char v36 = &block_descriptor_32_0;
    uint64_t v24 = _Block_copy(aBlock);
    swift_retain();
    uint64_t v25 = v30;
    static DispatchQoS.unspecified.getter();
    uint64_t v34 = MEMORY[0x1E4FBC860];
    _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    uint64_t v26 = v32;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1B3EA2200](0, v25, v26, v24);
    _Block_release(v24);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v26, v3);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v25, v7);
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in UnreliableMessenger.refreshDataCryptorProvider(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 120;
  swift_beginAccess();
  uint64_t result = outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3, (uint64_t)v7, &demangling cache variable for type metadata for TopicCryptorProvider?);
  uint64_t v5 = v8;
  if (v8)
  {
    uint64_t v6 = v9;
    __swift_project_boxed_opaque_existential_1(v7, v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a2, v5, v6);
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1047F80()
{
  return objectdestroy_16Tm(56);
}

uint64_t objectdestroy_16Tm(uint64_t a1)
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v1 + 24);
  return MEMORY[0x1F4186498](v1, a1, 7);
}

uint64_t partial apply for closure #1 in UnreliableMessenger.refreshDataCryptorProvider(with:)()
{
  return closure #1 in UnreliableMessenger.refreshDataCryptorProvider(with:)(*(void *)(v0 + 16), v0 + 24);
}

Swift::Void __swiftcall UnreliableMessenger.close()()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10[0] = *(void *)(v0 + 112);
  aBlock[4] = partial apply for closure #1 in UnreliableMessenger.close();
  uint64_t v12 = v0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t aBlock[3] = &block_descriptor_35_0;
  uint64_t v9 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v10[1] = MEMORY[0x1E4FBC860];
  _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v8, v4, v9);
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_release();
}

void partial apply for closure #1 in UnreliableMessenger.close()()
{
}

unint64_t lazy protocol witness table accessor for type UnreliableMessengerError and conformance UnreliableMessengerError()
{
  unint64_t result = lazy protocol witness table cache variable for type UnreliableMessengerError and conformance UnreliableMessengerError;
  if (!lazy protocol witness table cache variable for type UnreliableMessengerError and conformance UnreliableMessengerError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnreliableMessengerError and conformance UnreliableMessengerError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UnreliableMessengerError and conformance UnreliableMessengerError;
  if (!lazy protocol witness table cache variable for type UnreliableMessengerError and conformance UnreliableMessengerError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnreliableMessengerError and conformance UnreliableMessengerError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnreliableMessenger.ClosedReason and conformance UnreliableMessenger.ClosedReason()
{
  unint64_t result = lazy protocol witness table cache variable for type UnreliableMessenger.ClosedReason and conformance UnreliableMessenger.ClosedReason;
  if (!lazy protocol witness table cache variable for type UnreliableMessenger.ClosedReason and conformance UnreliableMessenger.ClosedReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnreliableMessenger.ClosedReason and conformance UnreliableMessenger.ClosedReason);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnreliableMessenger.State and conformance UnreliableMessenger.State()
{
  unint64_t result = lazy protocol witness table cache variable for type UnreliableMessenger.State and conformance UnreliableMessenger.State;
  if (!lazy protocol witness table cache variable for type UnreliableMessenger.State and conformance UnreliableMessenger.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnreliableMessenger.State and conformance UnreliableMessenger.State);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnreliableMessenger.BufferFull and conformance UnreliableMessenger.BufferFull()
{
  unint64_t result = lazy protocol witness table cache variable for type UnreliableMessenger.BufferFull and conformance UnreliableMessenger.BufferFull;
  if (!lazy protocol witness table cache variable for type UnreliableMessenger.BufferFull and conformance UnreliableMessenger.BufferFull)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnreliableMessenger.BufferFull and conformance UnreliableMessenger.BufferFull);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UnreliableMessenger.BufferFull and conformance UnreliableMessenger.BufferFull;
  if (!lazy protocol witness table cache variable for type UnreliableMessenger.BufferFull and conformance UnreliableMessenger.BufferFull)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnreliableMessenger.BufferFull and conformance UnreliableMessenger.BufferFull);
  }
  return result;
}

uint64_t sub_1B1048404@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 80;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1B3EA3B30](v4);
  uint64_t v6 = *(void *)(v3 + 88);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_1B1048460(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 88) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t dispatch thunk of UnreliableMessengerDelegate.messageReceived(messenger:message:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of UnreliableMessengerDelegate.messengerClosed(_:reason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of AnyRawIngressDatagram.sequenceNumber.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AnyRawIngressDatagram.senderParticipantID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AnyRawIngressDatagram.data.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of AnyRawIngressDatagram.encryptionIDBytes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

unsigned char *storeEnumTagSinglePayload for UnreliableMessengerError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B1048608);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UnreliableMessengerError()
{
  return &type metadata for UnreliableMessengerError;
}

uint64_t *initializeBufferWithCopyOfBuffer for UnreliableMessenger.Message(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  outlined copy of Data._Representation(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = a2[2];
  return a1;
}

uint64_t *assignWithCopy for UnreliableMessenger.Message(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  outlined copy of Data._Representation(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  outlined consume of Data._Representation(v6, v7);
  a1[2] = a2[2];
  return a1;
}

uint64_t *assignWithTake for UnreliableMessenger.Message(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v4, v5);
  a1[2] = *(void *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for UnreliableMessenger.Message(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for UnreliableMessenger.Message(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UnreliableMessenger.Message()
{
  return &type metadata for UnreliableMessenger.Message;
}

ValueMetadata *type metadata accessor for UnreliableMessenger.Configuration()
{
  return &type metadata for UnreliableMessenger.Configuration;
}

unsigned char *storeEnumTagSinglePayload for UnreliableMessenger.ClosedReason(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B10488B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UnreliableMessenger.ClosedReason()
{
  return &type metadata for UnreliableMessenger.ClosedReason;
}

uint64_t type metadata accessor for UnreliableMessenger.SendItem()
{
  return self;
}

uint64_t method lookup function for UnreliableMessenger.SendItem(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UnreliableMessenger.SendItem);
}

uint64_t dispatch thunk of UnreliableMessenger.SendItem.__allocating_init(data:toParticipantIDs:completion:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

unsigned char *storeEnumTagSinglePayload for UnreliableMessenger.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B1048A0CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UnreliableMessenger.State()
{
  return &type metadata for UnreliableMessenger.State;
}

unsigned char *storeEnumTagSinglePayload for UnreliableMessenger.BufferFull(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B1048AE0);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for UnreliableMessenger.BufferFull()
{
  return &type metadata for UnreliableMessenger.BufferFull;
}

uint64_t ObjC metadata update function for UnreliableMessenger()
{
  return type metadata accessor for UnreliableMessenger();
}

uint64_t type metadata accessor for UnreliableMessenger()
{
  uint64_t result = type metadata singleton initialization cache for UnreliableMessenger;
  if (!type metadata singleton initialization cache for UnreliableMessenger) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for UnreliableMessenger()
{
  type metadata accessor for Published<[UInt64]>();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for UnreliableMessenger(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UnreliableMessenger);
}

uint64_t dispatch thunk of UnreliableMessenger.__allocating_init(name:config:localParticipantID:delegate:dataCryptorProvider:startImmediately:retainRefOnStart:serviceProvider:)()
{
  return (*(uint64_t (**)(void))(v0 + 248))();
}

void type metadata accessor for Published<[UInt64]>()
{
  if (!lazy cache variable for type metadata for Published<[UInt64]>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt64]);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<[UInt64]>);
    }
  }
}

void *partial apply for closure #1 in UnreliableMessenger.nextSeqNum()(void *result)
{
  result[1] = *(void *)(v1 + 168);
  *uint64_t result = *(void *)(v1 + 72);
  return result;
}

uint64_t partial apply for closure #1 in UnreliableMessenger._send(_:)(uint64_t *a1)
{
  return closure #1 in UnreliableMessenger._send(_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t partial apply for closure #1 in closure #1 in UnreliableMessenger._send(_:)(uint64_t a1)
{
  return closure #1 in closure #1 in UnreliableMessenger._send(_:)(a1, v1);
}

uint64_t outlined assign with take of TopicCryptorProvider?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TopicCryptorProvider?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void partial apply for closure #2 in UnreliableMessenger.setupChannelStream()()
{
}

uint64_t sub_1B1048EF4()
{
  swift_release();
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #4 in UnreliableMessenger.setupChannelStream()@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #4 in UnreliableMessenger.setupChannelStream()(a1, *(void **)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_2(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for implicit closure #14 in UnreliableMessenger.processIngressDatagram(_:)@<X0>(uint64_t *a1@<X8>)
{
  return implicit closure #14 in UnreliableMessenger.processIngressDatagram(_:)(v1, a1);
}

uint64_t outlined init with take of DG_SequenceNumber(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of DG_SequenceNumber(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of DG_SequenceNumber(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in UnreliableMessenger.handleChannelStreamClosed(completedWith:)()
{
  return closure #1 in UnreliableMessenger.handleChannelStreamClosed(completedWith:)();
}

uint64_t outlined consume of SeqNumReceivedBuffer?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void specialized Sequence.first(where:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ConversationManagerHostConnection();
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type ConversationManagerHostConnection and conformance NSObject, (void (*)(uint64_t))type metadata accessor for ConversationManagerHostConnection);
    Set.Iterator.init(_cocoa:)();
    uint64_t v3 = v24;
    uint64_t v21 = v25;
    uint64_t v4 = v26;
    uint64_t v5 = v27;
    unint64_t v6 = v28;
  }
  else
  {
    uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v21 = a1 + 56;
    uint64_t v4 = ~v7;
    uint64_t v8 = -v7;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v6 = v9 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
  }
  int64_t v20 = (unint64_t)(v4 + 64) >> 6;
  while (v3 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_34;
    }
    type metadata accessor for ConversationManagerHostConnection();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v13 = v29;
    uint64_t v14 = (void *)swift_unknownObjectRelease();
    uint64_t v12 = v5;
    uint64_t v10 = v6;
    if (!v29) {
      goto LABEL_34;
    }
LABEL_32:
    if (*((unsigned char *)v13 + direct field offset for XPCHostConnection.isEntitledToProvideCustomEndpoint) == 1)
    {
      uint64_t v18 = (*(uint64_t (**)(void *))((*MEMORY[0x1E4FBC8C8] & *v13) + 0x1E8))(v14);
      char v19 = specialized Set.contains(_:)(a2, a3, v18);
      swift_bridgeObjectRelease();
      if (v19) {
        goto LABEL_34;
      }
    }

    uint64_t v5 = v12;
    unint64_t v6 = v10;
  }
  if (v6)
  {
    uint64_t v10 = (v6 - 1) & v6;
    unint64_t v11 = __clz(__rbit64(v6)) | (v5 << 6);
    uint64_t v12 = v5;
LABEL_31:
    uint64_t v14 = *(id *)(*(void *)(v3 + 48) + 8 * v11);
    uint64_t v13 = v14;
    if (!v14) {
      goto LABEL_34;
    }
    goto LABEL_32;
  }
  int64_t v15 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    if (v15 >= v20) {
      goto LABEL_34;
    }
    unint64_t v16 = *(void *)(v21 + 8 * v15);
    uint64_t v12 = v5 + 1;
    if (!v16)
    {
      uint64_t v12 = v5 + 2;
      if (v5 + 2 >= v20) {
        goto LABEL_34;
      }
      unint64_t v16 = *(void *)(v21 + 8 * v12);
      if (!v16)
      {
        uint64_t v12 = v5 + 3;
        if (v5 + 3 >= v20) {
          goto LABEL_34;
        }
        unint64_t v16 = *(void *)(v21 + 8 * v12);
        if (!v16)
        {
          uint64_t v12 = v5 + 4;
          if (v5 + 4 >= v20) {
            goto LABEL_34;
          }
          unint64_t v16 = *(void *)(v21 + 8 * v12);
          if (!v16)
          {
            uint64_t v12 = v5 + 5;
            if (v5 + 5 >= v20) {
              goto LABEL_34;
            }
            unint64_t v16 = *(void *)(v21 + 8 * v12);
            if (!v16)
            {
              uint64_t v17 = v5 + 6;
              while (v20 != v17)
              {
                unint64_t v16 = *(void *)(v21 + 8 * v17++);
                if (v16)
                {
                  uint64_t v12 = v17 - 1;
                  goto LABEL_30;
                }
              }
LABEL_34:
              outlined consume of [String : ()].Iterator._Variant();
              swift_bridgeObjectRelease();
              return;
            }
          }
        }
      }
    }
LABEL_30:
    uint64_t v10 = (v16 - 1) & v16;
    unint64_t v11 = __clz(__rbit64(v16)) + (v12 << 6);
    goto LABEL_31;
  }
  __break(1u);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShySo29TUConversationActivitySessionCG_10Foundation4UUIDVs5NeverOTg50163_s14CopresenceCore23ConversationManagerHostC30cleanUpPendingEndpointRequests33_B68C44A2D1FED06BCF3F5BF094BBC8D3LL24conversationsByGroupUUIDySDy10Foundation0X0VSo14d13CG_tFAISo0Z15eF53Ccfu0_32c26b4c7f781da19b161d8a86936b1b24AnITf3nnnpk_nTf1cn_nTm(uint64_t a1)
{
  uint64_t v33 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v33 - 8);
  MEMORY[0x1F4188790](v33);
  uint64_t v4 = (char *)v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v5 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0) {
    uint64_t v6 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v6 = *(void *)(a1 + 16);
  }
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v6)
  {
    uint64_t v38 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 & ~(v6 >> 63), 0);
    if (v5)
    {
      uint64_t result = __CocoaSet.startIndex.getter();
      unsigned __int8 v9 = 1;
    }
    else
    {
      uint64_t result = specialized _NativeSet.startIndex.getter(a1);
      unsigned __int8 v9 = v10 & 1;
    }
    uint64_t v35 = result;
    uint64_t v36 = v8;
    unsigned __int8 v37 = v9;
    if (v6 < 0)
    {
      __break(1u);
LABEL_25:
      __break(1u);
    }
    else
    {
      uint64_t v11 = a1 & 0xFFFFFFFFFFFFFF8;
      if (a1 < 0) {
        uint64_t v11 = a1;
      }
      uint64_t v31 = v2;
      uint64_t v32 = v11;
      v29[2] = v2 + 32;
      unint64_t v30 = a1 & 0xC000000000000001;
      do
      {
        while (1)
        {
          specialized Set.subscript.getter(v35, v36, v37, a1);
          uint64_t v23 = v22;
          id v24 = objc_msgSend(v22, sel_UUID);
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v25 = v38;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v25 + 16) + 1, 1);
            uint64_t v25 = v38;
          }
          unint64_t v27 = *(void *)(v25 + 16);
          unint64_t v26 = *(void *)(v25 + 24);
          if (v27 >= v26 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
            uint64_t v25 = v38;
          }
          *(void *)(v25 + 16) = v27 + 1;
          uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(v25+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(void *)(v2 + 72) * v27, v4, v33);
          uint64_t v38 = v25;
          if (v5) {
            break;
          }
          uint64_t v12 = v35;
          uint64_t v13 = v36;
          char v14 = v37;
          int64_t v15 = v4;
          uint64_t v16 = specialized _NativeSet.index(after:)(v35, v36, v37, a1);
          uint64_t v17 = a1;
          uint64_t v19 = v18;
          char v21 = v20;
          outlined consume of Set<AddressableMember>.Index._Variant(v12, v13, v14);
          uint64_t v35 = v16;
          uint64_t v36 = v19;
          uint64_t v4 = v15;
          a1 = v17;
          unint64_t v5 = v30;
          uint64_t v2 = v31;
          unsigned __int8 v37 = v21 & 1;
          if (!--v6) {
            goto LABEL_22;
          }
        }
        if ((v37 & 1) == 0) {
          goto LABEL_25;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<TUConversationActivitySession>.Index);
        unint64_t v28 = (void (*)(char *, void))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v28(v34, 0);
        --v6;
      }
      while (v6);
LABEL_22:
      outlined consume of Set<AddressableMember>.Index._Variant(v35, v36, v37);
      return v38;
    }
  }
  return result;
}

uint64_t specialized Sequence.contains(where:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  unint64_t v30 = a1;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a3 + 56);
  uint64_t v26 = a3 + 56;
  uint64_t v13 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  uint64_t v32 = v6 + 16;
  uint64_t v33 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  uint64_t v31 = v6 + 48;
  uint64_t v29 = (void (**)(char *, char *, uint64_t))(v6 + 32);
  int64_t v27 = (unint64_t)(v13 + 63) >> 6;
  unint64_t v28 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v34 = a3;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v17 = 0;
  while (v15)
  {
    unint64_t v18 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    unint64_t v19 = v18 | (v17 << 6);
LABEL_19:
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v11, *(void *)(v34 + 48) + *(void *)(v6 + 72) * v19, v5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v11, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1) {
      goto LABEL_29;
    }
    (*v29)(v8, v11, v5);
    char v23 = v30(v8);
    if (v3)
    {
      (*v28)(v8, v5);
      swift_release();
      return v25 & 1;
    }
    char v24 = v23;
    uint64_t result = ((uint64_t (*)(char *, uint64_t))*v28)(v8, v5);
    if (v24)
    {
      swift_release();
      char v25 = 1;
      return v25 & 1;
    }
  }
  if (__OFADD__(v17++, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v17 >= v27) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v26 + 8 * v17);
  if (v21)
  {
LABEL_18:
    unint64_t v15 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v17 << 6);
    goto LABEL_19;
  }
  int64_t v22 = v17 + 1;
  if (v17 + 1 >= v27) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v26 + 8 * v22);
  if (v21) {
    goto LABEL_17;
  }
  int64_t v22 = v17 + 2;
  if (v17 + 2 >= v27) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v26 + 8 * v22);
  if (v21) {
    goto LABEL_17;
  }
  int64_t v22 = v17 + 3;
  if (v17 + 3 >= v27) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v26 + 8 * v22);
  if (v21) {
    goto LABEL_17;
  }
  int64_t v22 = v17 + 4;
  if (v17 + 4 >= v27)
  {
LABEL_28:
    (*v33)(v11, 1, 1, v5);
LABEL_29:
    swift_release();
    char v25 = 0;
    return v25 & 1;
  }
  unint64_t v21 = *(void *)(v26 + 8 * v22);
  if (v21)
  {
LABEL_17:
    int64_t v17 = v22;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v17 >= v27) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v26 + 8 * v17);
    ++v22;
    if (v21) {
      goto LABEL_18;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

BOOL specialized Sequence.contains(where:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v38 = a1;
  uint64_t v39 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v39 - 8);
  MEMORY[0x1F4188790](v39);
  uint64_t v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a3 + 16);
  if (v12)
  {
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v13 = v6 + 16;
    unsigned __int8 v37 = v14;
    uint64_t v15 = a3 + ((*(unsigned __int8 *)(v13 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 64));
    uint64_t v16 = *(void *)(v13 + 56);
    uint64_t v34 = v8;
    uint64_t v35 = (uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 32);
    uint64_t v31 = v16;
    uint64_t v32 = (void (**)(char *))(v13 + 16);
    uint64_t v33 = (void (**)(char *, uint64_t))(v13 - 8);
    v29[2] = a3;
    swift_bridgeObjectRetain();
    uint64_t v36 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 40);
    v29[1] = (v13 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    while (1)
    {
      uint64_t v17 = v39;
      uint64_t v18 = v13;
      v37(v11, v15, v39);
      unint64_t v19 = *v36;
      (*v36)(v11, 0, 1, v17);
      int v20 = (*v35)(v11, 1, v17);
      BOOL v21 = v20 != 1;
      if (v20 == 1) {
        break;
      }
      unint64_t v30 = v19;
      int64_t v22 = v11;
      char v23 = v34;
      char v24 = v22;
      (*v32)(v34);
      char v25 = v38(v23);
      if (v4)
      {
        (*v33)(v23, v17);
        swift_bridgeObjectRelease();
        return v21;
      }
      char v26 = v25;
      (*v33)(v23, v17);
      if (v26) {
        break;
      }
      v15 += v31;
      --v12;
      uint64_t v4 = 0;
      uint64_t v13 = v18;
      uint64_t v11 = v24;
      if (!v12)
      {
        v30(v24, 1, 1, v39);
        goto LABEL_9;
      }
    }
  }
  else
  {
    int64_t v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    swift_bridgeObjectRetain();
    v27(v11, 1, 1, v39);
LABEL_9:
    BOOL v21 = 0;
  }
  swift_bridgeObjectRelease();
  return v21;
}

void specialized Sequence.contains(where:)(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v19 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v10++, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v10 >= v19) {
      goto LABEL_21;
    }
    unint64_t v14 = *(void *)(v6 + 8 * v10);
    if (!v14) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_19:
    id v20 = *(id *)(*(void *)(a3 + 56) + 8 * v12);
    id v16 = v20;
    char v17 = a1(&v20);
    if (v3)
    {
      swift_release();

      return;
    }
    char v18 = v17;

    if (v18)
    {
LABEL_21:
      swift_release();
      return;
    }
  }
  int64_t v15 = v10 + 1;
  if (v10 + 1 >= v19) {
    goto LABEL_21;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14) {
    goto LABEL_17;
  }
  int64_t v15 = v10 + 2;
  if (v10 + 2 >= v19) {
    goto LABEL_21;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14) {
    goto LABEL_17;
  }
  int64_t v15 = v10 + 3;
  if (v10 + 3 >= v19) {
    goto LABEL_21;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14) {
    goto LABEL_17;
  }
  int64_t v15 = v10 + 4;
  if (v10 + 4 >= v19) {
    goto LABEL_21;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14)
  {
LABEL_17:
    int64_t v10 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v19) {
      goto LABEL_21;
    }
    unint64_t v14 = *(void *)(v6 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }
LABEL_29:
  __break(1u);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  char v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  id v29;

  uint64_t v4 = v3;
  uint64_t v5 = a3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v24;
    char v23 = v25;
    uint64_t v7 = v26;
    uint64_t v8 = v27;
    unint64_t v9 = v28;
  }
  else
  {
    int64_t v10 = -1 << *(unsigned char *)(a3 + 32);
    char v23 = a3 + 56;
    unint64_t v11 = ~v10;
    unint64_t v12 = -v10;
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v9 = v13 & *(void *)(a3 + 56);
    swift_bridgeObjectRetain();
    uint64_t v7 = v11;
    uint64_t v8 = 0;
  }
  int64_t v22 = (unint64_t)(v7 + 64) >> 6;
  if ((v5 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (__CocoaSet.Iterator.next()())
  {
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    unint64_t v14 = v29;
    swift_unknownObjectRelease();
    int64_t v15 = v8;
    id v16 = v9;
    while (v14)
    {
      uint64_t v29 = v14;
      id v20 = a1(&v29);

      if (v4 || (v20 & 1) != 0) {
        break;
      }
      uint64_t v8 = v15;
      unint64_t v9 = v16;
      if (v5 < 0) {
        goto LABEL_8;
      }
LABEL_11:
      if (v9)
      {
        id v16 = (v9 - 1) & v9;
        char v17 = __clz(__rbit64(v9)) | (v8 << 6);
        int64_t v15 = v8;
      }
      else
      {
        int64_t v15 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
          __break(1u);
          return;
        }
        if (v15 >= v22) {
          break;
        }
        char v18 = *(void *)(v23 + 8 * v15);
        if (!v18)
        {
          int64_t v19 = v8 + 2;
          if (v8 + 2 >= v22) {
            break;
          }
          char v18 = *(void *)(v23 + 8 * v19);
          if (v18) {
            goto LABEL_22;
          }
          int64_t v19 = v8 + 3;
          if (v8 + 3 >= v22) {
            break;
          }
          char v18 = *(void *)(v23 + 8 * v19);
          if (v18) {
            goto LABEL_22;
          }
          int64_t v19 = v8 + 4;
          if (v8 + 4 >= v22) {
            break;
          }
          char v18 = *(void *)(v23 + 8 * v19);
          if (v18)
          {
LABEL_22:
            int64_t v15 = v19;
          }
          else
          {
            int64_t v15 = v8 + 5;
            if (v8 + 5 >= v22) {
              break;
            }
            char v18 = *(void *)(v23 + 8 * v15);
            if (!v18)
            {
              BOOL v21 = v8 + 6;
              while (v22 != v21)
              {
                char v18 = *(void *)(v23 + 8 * v21++);
                if (v18)
                {
                  int64_t v15 = v21 - 1;
                  goto LABEL_23;
                }
              }
              break;
            }
          }
        }
LABEL_23:
        id v16 = (v18 - 1) & v18;
        char v17 = __clz(__rbit64(v18)) + (v15 << 6);
      }
      unint64_t v14 = *(id *)(*(void *)(v5 + 48) + 8 * v17);
    }
  }
  outlined consume of [String : ()].Iterator._Variant();
}

id ConversationManagerHost.queue.getter()
{
  return *(id *)(v0 + OBJC_IVAR___CPConversationManagerHost_queue);
}

uint64_t ConversationManagerHost.connections.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ConversationManagerHost.connections.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___CPConversationManagerHost_connections);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*ConversationManagerHost.connections.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

char *ConversationManagerHost.__allocating_init(dataSource:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  uint64_t v4 = specialized ConversationManagerHost.init(dataSource:featureFlags:)(a1, objc_msgSend(objc_allocWithZone((Class)CPFeatureFlags), sel_init), (char *)objc_allocWithZone(v1));
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v4;
}

char *ConversationManagerHost.init(dataSource:)(uint64_t a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v3 = specialized ConversationManagerHost.init(dataSource:featureFlags:)(a1, objc_msgSend(objc_allocWithZone((Class)CPFeatureFlags), sel_init), (char *)objc_allocWithZone(ObjectType));
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v3;
}

char *ConversationManagerHost.__allocating_init(dataSource:featureFlags:)(uint64_t a1, uint64_t a2)
{
  swift_getObjectType();
  return specialized ConversationManagerHost.__allocating_init(dataSource:featureFlags:)(a1, a2, v2);
}

char *ConversationManagerHost.init(dataSource:featureFlags:)(uint64_t a1, uint64_t a2)
{
  swift_getObjectType();
  return specialized ConversationManagerHost.init(dataSource:featureFlags:)(a1, a2, v2);
}

id ConversationManagerHost.__deallocating_deinit()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  objc_msgSend(*(id *)&v0[OBJC_IVAR___CPConversationManagerHost_listener], sel_invalidate);
  objc_msgSend(*(id *)&v0[OBJC_IVAR___CPConversationManagerHost_listenerDeprecated], sel_invalidate);
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t ConversationManagerHost.updateClientShouldConnectNotification()()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR___CPConversationManagerHost_queue);
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBCBF0], v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    uint64_t v8 = *(void **)(v0 + OBJC_IVAR___CPConversationManagerHost_dataSource);
    id v9 = objc_msgSend(v8, sel_conversationsByUUID);
    type metadata accessor for UUID();
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v11 = *(void *)(v10 + 16);
    swift_bridgeObjectRelease();
    if (v11)
    {
      unsigned int v12 = objc_msgSend(objc_msgSend(v8, sel_sharePlaySystemStateObserver), sel_allowSharePlay);
      swift_unknownObjectRelease();
      uint64_t v13 = (int *)(*(void *)(v0 + OBJC_IVAR___CPConversationManagerHost_clientShouldConnectNotification) + 32);
      swift_beginAccess();
      if (v12)
      {
        notify_set_state(*v13, 1uLL);
      }
      else
      {
        notify_set_state(*v13, 0);
        uint64_t v16 = *(void *)(v0
                        + OBJC_IVAR___CPConversationManagerHost_clientShouldConnectIfCanBypassSharePlayRestrictionNotification);
        swift_beginAccess();
        notify_set_state(*(_DWORD *)(v16 + 32), 1uLL);
      }
      char v17 = (const char *)(String.utf8CString.getter() + 32);
      swift_retain();
      notify_post(v17);
      swift_release();
      return swift_release();
    }
    else
    {
      uint64_t v14 = *(void *)(v0 + OBJC_IVAR___CPConversationManagerHost_clientShouldConnectNotification);
      swift_beginAccess();
      notify_set_state(*(_DWORD *)(v14 + 32), 0);
      uint64_t v15 = *(void *)(v0
                      + OBJC_IVAR___CPConversationManagerHost_clientShouldConnectIfCanBypassSharePlayRestrictionNotification);
      swift_beginAccess();
      return notify_set_state(*(_DWORD *)(v15 + 32), 0);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ConversationManagerHost.protectedStorage.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR___CPConversationManagerHost____lazy_storage___protectedStorage;
  swift_beginAccess();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3, (uint64_t)&v7, (uint64_t *)&demangling cache variable for type metadata for ProtectedStorage?);
  if (v8) {
    return outlined init with take of BackgroundSessionManagerDataSource(&v7, (uint64_t)a1);
  }
  outlined destroy of UUID?((uint64_t)&v7, (uint64_t *)&demangling cache variable for type metadata for ProtectedStorage?);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSUserDefaults);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSUserDefaults.classProtectedStorage(suiteName:)(v5, v6, a1);
  swift_bridgeObjectRelease();
  outlined init with copy of UserNotificationCenter((uint64_t)a1, (uint64_t)&v7);
  swift_beginAccess();
  outlined assign with take of ProtectedStorage?((uint64_t)&v7, v3);
  return swift_endAccess();
}

uint64_t key path setter for ConversationManagerHost.protectedStorage : ConversationManagerHost(uint64_t a1, uint64_t *a2)
{
  outlined init with copy of UserNotificationCenter(a1, (uint64_t)v7);
  uint64_t v3 = *a2;
  outlined init with take of BackgroundSessionManagerDataSource(v7, (uint64_t)v6);
  uint64_t v4 = v3 + OBJC_IVAR___CPConversationManagerHost____lazy_storage___protectedStorage;
  swift_beginAccess();
  outlined assign with take of ProtectedStorage?((uint64_t)v6, v4);
  return swift_endAccess();
}

uint64_t ConversationManagerHost.protectedStorage.setter(long long *a1)
{
  outlined init with take of BackgroundSessionManagerDataSource(a1, (uint64_t)v4);
  uint64_t v2 = v1 + OBJC_IVAR___CPConversationManagerHost____lazy_storage___protectedStorage;
  swift_beginAccess();
  outlined assign with take of ProtectedStorage?((uint64_t)v4, v2);
  return swift_endAccess();
}

void (*ConversationManagerHost.protectedStorage.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x98uLL);
  *a1 = v3;
  v3[18] = v1;
  ConversationManagerHost.protectedStorage.getter(v3);
  return ConversationManagerHost.protectedStorage.modify;
}

void ConversationManagerHost.protectedStorage.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = (long long *)(*a1 + 40);
  uint64_t v4 = *a1 + 80;
  if (a2)
  {
    uint64_t v5 = v2[18];
    outlined init with copy of UserNotificationCenter(*a1, (uint64_t)v3);
    outlined init with take of BackgroundSessionManagerDataSource(v3, v4);
    uint64_t v6 = v5 + OBJC_IVAR___CPConversationManagerHost____lazy_storage___protectedStorage;
    swift_beginAccess();
    outlined assign with take of ProtectedStorage?(v4, v6);
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v2);
  }
  else
  {
    uint64_t v7 = v2[18];
    outlined init with take of BackgroundSessionManagerDataSource((long long *)*a1, (uint64_t)v3);
    uint64_t v8 = v7 + OBJC_IVAR___CPConversationManagerHost____lazy_storage___protectedStorage;
    swift_beginAccess();
    outlined assign with take of ProtectedStorage?((uint64_t)v3, v8);
    swift_endAccess();
  }
  free(v2);
}

id ConversationManagerHost.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void ConversationManagerHost.init()()
{
}

void ConversationManagerHost.cleanUpPendingEndpointRequests(conversationsByGroupUUID:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (uint64_t *)((char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void **)(v1 + OBJC_IVAR___CPConversationManagerHost_queue);
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4FBCBF0], v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v7)
  {
    id v9 = (unint64_t *)(v1 + OBJC_IVAR___CPConversationManagerHost_pendingEndpointRequests);
    swift_beginAccess();
    if (*(void *)(*v9 + 16))
    {
      uint64_t v10 = a1 + 64;
      uint64_t v11 = 1 << *(unsigned char *)(a1 + 32);
      uint64_t v12 = -1;
      if (v11 < 64) {
        uint64_t v12 = ~(-1 << v11);
      }
      unint64_t v13 = v12 & *(void *)(a1 + 64);
      int64_t v14 = (unint64_t)(v11 + 63) >> 6;
      swift_bridgeObjectRetain_n();
      int64_t v15 = 0;
      if (!v13) {
        goto LABEL_7;
      }
LABEL_6:
      unint64_t v16 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      for (unint64_t i = v16 | (v15 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v15 << 6))
      {
        id v21 = *(id *)(*(void *)(a1 + 56) + 8 * i);
        if (objc_msgSend(v21, sel_state) == (id)3)
        {
          swift_release();
          swift_bridgeObjectRelease();
          id v22 = objc_msgSend(v21, sel_activitySessions);
          type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
          lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
          uint64_t v23 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v24 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShySo29TUConversationActivitySessionCG_10Foundation4UUIDVs5NeverOTg50163_s14CopresenceCore23ConversationManagerHostC30cleanUpPendingEndpointRequests33_B68C44A2D1FED06BCF3F5BF094BBC8D324conversationsByGroupUUIDySDy10Foundation0X0VSo14d13CG_tFAISo0Z15eF53Ccfu0_32c26b4c7f781da19b161d8a86936b1b24AnITf3nnnpk_nTf1cn_nTm(v23);
          swift_bridgeObjectRelease();
          id v25 = objc_msgSend(v21, sel_systemActivitySessions);
          uint64_t v26 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v27 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShySo29TUConversationActivitySessionCG_10Foundation4UUIDVs5NeverOTg50163_s14CopresenceCore23ConversationManagerHostC30cleanUpPendingEndpointRequests33_B68C44A2D1FED06BCF3F5BF094BBC8D324conversationsByGroupUUIDySDy10Foundation0X0VSo14d13CG_tFAISo0Z15eF53Ccfu0_32c26b4c7f781da19b161d8a86936b1b24AnITf3nnnpk_nTf1cn_nTm(v26);
          swift_bridgeObjectRelease();
          uint64_t v32 = v24;
          specialized Array.append<A>(contentsOf:)(v27);
          uint64_t v28 = specialized Set.init<A>(_:)(v32);

          swift_bridgeObjectRelease();
          goto LABEL_30;
        }

        if (v13) {
          goto LABEL_6;
        }
LABEL_7:
        int64_t v18 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
          __break(1u);
          goto LABEL_34;
        }
        if (v18 >= v14) {
          break;
        }
        unint64_t v19 = *(void *)(v10 + 8 * v18);
        ++v15;
        if (!v19)
        {
          int64_t v15 = v18 + 1;
          if (v18 + 1 >= v14) {
            break;
          }
          unint64_t v19 = *(void *)(v10 + 8 * v15);
          if (!v19)
          {
            int64_t v15 = v18 + 2;
            if (v18 + 2 >= v14) {
              break;
            }
            unint64_t v19 = *(void *)(v10 + 8 * v15);
            if (!v19)
            {
              int64_t v15 = v18 + 3;
              if (v18 + 3 >= v14) {
                break;
              }
              unint64_t v19 = *(void *)(v10 + 8 * v15);
              if (!v19)
              {
                int64_t v15 = v18 + 4;
                if (v18 + 4 >= v14) {
                  break;
                }
                unint64_t v19 = *(void *)(v10 + 8 * v15);
                if (!v19)
                {
                  int64_t v20 = v18 + 5;
                  if (v20 >= v14) {
                    break;
                  }
                  unint64_t v19 = *(void *)(v10 + 8 * v20);
                  if (!v19)
                  {
                    while (1)
                    {
                      int64_t v15 = v20 + 1;
                      if (__OFADD__(v20, 1)) {
                        goto LABEL_36;
                      }
                      if (v15 >= v14) {
                        goto LABEL_29;
                      }
                      unint64_t v19 = *(void *)(v10 + 8 * v15);
                      ++v20;
                      if (v19) {
                        goto LABEL_24;
                      }
                    }
                  }
                  int64_t v15 = v20;
                }
              }
            }
          }
        }
LABEL_24:
        unint64_t v13 = (v19 - 1) & v19;
      }
LABEL_29:
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v28 = MEMORY[0x1E4FBC870];
LABEL_30:
      swift_beginAccess();
      swift_bridgeObjectRetain();
      uint64_t v29 = specialized MutableCollection._halfStablePartition(isSuffixElement:)(v9, v28);
      swift_bridgeObjectRelease();
      int64_t v30 = *(void *)(*v9 + 16);
      if (v30 < v29) {
        goto LABEL_35;
      }
      specialized Array.replaceSubrange<A>(_:with:)(v29, v30);
      swift_endAccess();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
}

void closure #2 in ConversationManagerHost.fetchEndpoint(for:activitySessionUUID:activity:completion:)(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v54 = a5;
  uint64_t v16 = type metadata accessor for ConversationManagerHost.EndpointRequest();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  int64_t v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    id v21 = a1;
    id v22 = (void *)MEMORY[0x1B3EA1B00](a2, a3);
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    aBlock[4] = a6;
    void aBlock[5] = a7;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed NSXPCListenerEndpoint?) -> ();
    uint64_t aBlock[3] = (uint64_t)&block_descriptor_18_2;
    uint64_t v24 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v21, sel_requestEndpointWith_activitySessionUUID_activity_completion_, v22, isa, v54, v24);
    _Block_release(v24);
  }
  else
  {
    uint64_t v46 = v18;
    uint64_t v47 = (uint64_t *)v20;
    uint64_t v52 = v8;
    unint64_t v53 = a3;
    uint64_t v49 = a4;
    uint64_t v50 = a8;
    uint64_t v48 = a7;
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Log.host);
    unint64_t v26 = v53;
    swift_bridgeObjectRetain_n();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    BOOL v29 = os_log_type_enabled(v27, v28);
    int64_t v30 = v47;
    uint64_t v51 = v17;
    if (v29)
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      aBlock[0] = v32;
      *(_DWORD *)uint64_t v31 = 136315138;
      uint64_t v45 = v31 + 4;
      swift_bridgeObjectRetain();
      uint64_t aBlock[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, v53, aBlock);
      unint64_t v26 = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B0DF7000, v27, v28, "No connection is providing endpoint with identifier=%s, caching endpoint request.", v31, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v32, -1, -1);
      MEMORY[0x1B3EA39E0](v31, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v33 = v49;
    uint64_t v34 = v46;
    uint64_t v35 = (char *)v30 + *(int *)(v46 + 20);
    uint64_t v36 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v36 - 8) + 16))(v35, v33, v36);
    uint64_t *v30 = a2;
    v30[1] = v26;
    unsigned __int8 v37 = v54;
    *(uint64_t *)((char *)v30 + *(int *)(v34 + 24)) = (uint64_t)v54;
    uint64_t v38 = (uint64_t *)((char *)v30 + *(int *)(v34 + 28));
    *uint64_t v38 = a6;
    v38[1] = v48;
    uint64_t v39 = (unint64_t *)(v50 + OBJC_IVAR___CPConversationManagerHost_pendingEndpointRequests);
    swift_beginAccess();
    unint64_t v40 = *v39;
    swift_bridgeObjectRetain();
    swift_retain();
    id v41 = v37;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t *v39 = v40;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v40 + 16) + 1, 1, v40);
      unint64_t *v39 = v40;
    }
    unint64_t v44 = *(void *)(v40 + 16);
    unint64_t v43 = *(void *)(v40 + 24);
    if (v44 >= v43 >> 1)
    {
      unint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1, v40);
      unint64_t *v39 = v40;
    }
    *(void *)(v40 + 16) = v44 + 1;
    outlined init with take of ConversationManagerHost.EndpointRequest((uint64_t)v30, v40+ ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80))+ *(void *)(v51 + 72) * v44);
    swift_endAccess();
  }
}

void closure #1 in ConversationManagerHost.conversationManager(_:conversationChanged:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = swift_getObjectType();
  ConversationManagerHost.protectedStorage.getter(v7);
  CPConversationManagerDataSource.conversationContainersByGroupUUID(from:connection:protectedStorage:)(a3, a1, (uint64_t)v7, ObjectType);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
  type metadata accessor for UUID();
  type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for TUConversationActivitySessionContainer);
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_updateConversationContainersWithConversationContainersByGroupUUID_, isa);
}

uint64_t CPConversationManagerDataSource.conversationContainersByGroupUUID(from:connection:protectedStorage:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: ConversationManagerHostConnection.ConversationContainerWrapper)?);
  uint64_t v14 = MEMORY[0x1F4188790](v13 - 8);
  uint64_t v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v72 = (char *)&v58 - v17;
  uint64_t v77 = a4;
  uint64_t v78 = v4;
  uint64_t v79 = a2;
  uint64_t v80 = a3;
  uint64_t v63 = specialized Sequence.compactMap<A>(_:)(a1, (void (*)(char *, id))partial apply for closure #1 in CPConversationManagerDataSource.conversationContainersByGroupUUID(from:connection:protectedStorage:));
  uint64_t v62 = 0;
  uint64_t v18 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a2) + 0x1B8))();
  unint64_t v19 = 0;
  uint64_t v20 = *(void *)(v18 + 64);
  uint64_t v64 = v18 + 64;
  uint64_t v21 = 1 << *(unsigned char *)(v18 + 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  unint64_t v23 = v22 & v20;
  unint64_t v24 = (unint64_t)(v21 + 63) >> 6;
  uint64_t v69 = v10 + 16;
  unint64_t v71 = (void (**)(char *, uint64_t, uint64_t))(v10 + 32);
  uint64_t v73 = v10;
  uint64_t v74 = (void (**)(char *, uint64_t))(v10 + 8);
  unint64_t v59 = v24 - 1;
  int64_t v67 = v24;
  unint64_t v61 = v24 - 5;
  uint64_t v70 = v18;
  uint64_t v60 = v18 + 104;
  uint64_t v66 = a1;
  uint64_t v65 = a2;
  os_signpost_id_t v68 = v16;
  while (1)
  {
    if (v23)
    {
      unint64_t v29 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      unint64_t v75 = v19;
      unint64_t v30 = v29 | (v19 << 6);
      uint64_t v31 = (uint64_t)v72;
LABEL_9:
      uint64_t v32 = v70;
      (*(void (**)(char *, unint64_t, uint64_t))(v73 + 16))(v16, *(void *)(v70 + 48) + *(void *)(v73 + 72) * v30, v9);
      uint64_t v33 = *(void *)(v32 + 56);
      uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: ConversationManagerHostConnection.ConversationContainerWrapper));
      uint64_t v35 = *(int *)(v34 + 48);
      long long v76 = *(_OWORD *)(v33 + 16 * v30);
      *(_OWORD *)&v16[v35] = v76;
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v16, 0, 1, v34);
      id v36 = (id)v76;
      id v37 = *((id *)&v76 + 1);
      goto LABEL_16;
    }
    int64_t v38 = v19 + 1;
    uint64_t v31 = (uint64_t)v72;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v38 >= v67)
    {
      unint64_t v40 = v19;
    }
    else
    {
      unint64_t v39 = *(void *)(v64 + 8 * v38);
      if (v39) {
        goto LABEL_13;
      }
      unint64_t v40 = v19 + 1;
      if ((uint64_t)(v19 + 2) < v67)
      {
        unint64_t v39 = *(void *)(v64 + 8 * (v19 + 2));
        if (v39)
        {
          int64_t v38 = v19 + 2;
LABEL_13:
          unint64_t v23 = (v39 - 1) & v39;
          unint64_t v30 = __clz(__rbit64(v39)) + (v38 << 6);
          unint64_t v75 = v38;
          goto LABEL_9;
        }
        unint64_t v40 = v19 + 2;
        if ((uint64_t)(v19 + 3) < v67)
        {
          unint64_t v39 = *(void *)(v64 + 8 * (v19 + 3));
          if (v39)
          {
            int64_t v38 = v19 + 3;
            goto LABEL_13;
          }
          int64_t v38 = v19 + 4;
          unint64_t v40 = v19 + 3;
          if ((uint64_t)(v19 + 4) < v67)
          {
            unint64_t v39 = *(void *)(v64 + 8 * v38);
            if (v39) {
              goto LABEL_13;
            }
            while (v61 != v19)
            {
              unint64_t v39 = *(void *)(v60 + 8 * v19++);
              if (v39)
              {
                int64_t v38 = v19 + 4;
                goto LABEL_13;
              }
            }
            unint64_t v40 = v59;
          }
        }
      }
    }
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: ConversationManagerHostConnection.ConversationContainerWrapper));
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v16, 1, 1, v41);
    unint64_t v23 = 0;
    unint64_t v75 = v40;
LABEL_16:
    outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)v16, v31, &demangling cache variable for type metadata for (key: UUID, value: ConversationManagerHostConnection.ConversationContainerWrapper)?);
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: ConversationManagerHostConnection.ConversationContainerWrapper));
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 48))(v31, 1, v42) == 1) {
      break;
    }
    unint64_t v43 = (void **)(v31 + *(int *)(v42 + 48));
    unint64_t v44 = *v43;

    (*v71)(v12, v31, v9);
    if (!*(void *)(a1 + 16) || (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v12), (v45 & 1) == 0))
    {
      uint64_t v46 = (void (*)(void *, void))(*(uint64_t (**)(void *))((*MEMORY[0x1E4FBC8C8] & *a2)
                                                                                       + 0x1C8))(v82);
      uint64_t v48 = v47;
      swift_bridgeObjectRetain();
      uint64_t v49 = v12;
      unint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v12);
      char v52 = v51;
      swift_bridgeObjectRelease();
      if (v52)
      {
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v81 = *v48;
        *uint64_t v48 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native) {
          specialized _NativeDictionary.copy()();
        }
        (*(void (**)(unint64_t, uint64_t))(v73 + 8))(*(void *)(v81 + 48) + *(void *)(v73 + 72) * v50, v9);
        uint64_t v25 = v81;
        uint64_t v26 = *(void *)(v81 + 56) + 16 * v50;
        uint64_t v27 = *(void **)v26;
        os_log_type_t v28 = *(void **)(v26 + 8);
        specialized _NativeDictionary._delete(at:)(v50, v81);
        *uint64_t v48 = v25;

        swift_bridgeObjectRelease();
        a2 = v65;
        a1 = v66;
      }
      v46(v82, 0);
      uint64_t v12 = v49;
      uint64_t v16 = v68;
    }
    (*v74)(v12, v9);
    unint64_t v19 = v75;
  }
  swift_release();
  if (*(void *)(v63 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, TUConversationActivitySessionContainer>);
    uint64_t v54 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v54 = MEMORY[0x1E4FBC868];
  }
  v82[0] = v54;
  uint64_t v55 = swift_bridgeObjectRetain();
  uint64_t v56 = v62;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v55, 1, v82);
  if (!v56)
  {
    swift_bridgeObjectRelease();
    return v82[0];
  }
LABEL_40:
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t ConversationManagerHost.conversationManager(_:sharePlayAllowedChanged:)(uint64_t a1, int a2)
{
  return specialized ConversationManagerHost.conversationManager(_:sharePlayAllowedChanged:)(a2);
}

void closure #1 in ConversationManagerHost.conversationManager(_:sharePlayAllowedChanged:)(void *a1, void *a2)
{
  if (*((unsigned char *)a1 + direct field offset for XPCHostConnection.isEntitledToBypassSharePlayRestriction) == 1)
  {
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Log.host);
    uint64_t v4 = a1;
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      uint64_t v15 = v8;
      *(_DWORD *)uint64_t v7 = 136315138;
      uint64_t v9 = *(void *)((char *)v4 + direct field offset for XPCHostConnection.bundleIdentifier);
      unint64_t v10 = *(void *)((char *)v4 + direct field offset for XPCHostConnection.bundleIdentifier + 8);
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v5, v6, "Allowing SharePlay connection despite system restriction since client is entitled. BundleID %s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v8, -1, -1);
      MEMORY[0x1B3EA39E0](v7, -1, -1);
    }
    else
    {
    }
  }
  else
  {
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = a2;
    uint64_t v13 = *(void (**)(uint64_t (*)(), uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x148);
    id v14 = a2;
    v13(partial apply for closure #1 in closure #1 in ConversationManagerHost.conversationManager(_:sharePlayAllowedChanged:), v12);
    swift_release();
  }
}

uint64_t closure #1 in closure #1 in ConversationManagerHost.conversationManager(_:sharePlayAllowedChanged:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (uint64_t *)((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  os_log_type_t v6 = *(void **)(a1 + OBJC_IVAR___CPConversationManagerHost_queue);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FBCBF0], v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    unsigned int v9 = objc_msgSend(objc_msgSend(*(id *)(a1 + OBJC_IVAR___CPConversationManagerHost_dataSource), sel_sharePlaySystemStateObserver), sel_allowSharePlay);
    swift_unknownObjectRelease();
    return v9 ^ 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ConversationManagerHost.conversationManager(_:requestedEndpointWithIdentifier:activitySession:completion:)(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  return specialized ConversationManagerHost.conversationManager(_:requestedEndpointWithIdentifier:activitySession:completion:)(a2, a3, a4, a5, a6);
}

uint64_t ConversationManagerHost.conversationManagerHostConnection(_:requestConversationContainersByGroupUUID:)(void *a1, void (*a2)(void))
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  unsigned int v9 = (uint64_t *)((char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = *(void **)(v3 + OBJC_IVAR___CPConversationManagerHost_queue);
  *unsigned int v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E4FBCBF0], v6);
  id v11 = v10;
  char v12 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if (v12)
  {
    if (one-time initialization token for host == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Log.host);
  id v14 = a1;
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    unint64_t v30 = a2;
    v31[0] = v14;
    unint64_t v19 = (void *)v18;
    uint64_t v29 = v3;
    *(_DWORD *)uint64_t v17 = 138412290;
    uint64_t v20 = v14;
    uint64_t v3 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v19 = v14;

    _os_log_impl(&dword_1B0DF7000, v15, v16, "Fetching conversations to filter for: %@", v17, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    uint64_t v21 = v19;
    a2 = v30;
    MEMORY[0x1B3EA39E0](v21, -1, -1);
    MEMORY[0x1B3EA39E0](v17, -1, -1);
  }
  else
  {

    uint64_t v15 = v14;
  }

  uint64_t v22 = *(void **)(v3 + OBJC_IVAR___CPConversationManagerHost_dataSource);
  uint64_t ObjectType = swift_getObjectType();
  id v24 = objc_msgSend(v22, sel_conversationsByGroupUUID);
  type metadata accessor for UUID();
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  uint64_t v25 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  ConversationManagerHost.protectedStorage.getter(v31);
  uint64_t v26 = CPConversationManagerDataSource.conversationContainersByGroupUUID(from:connection:protectedStorage:)(v25, v14, (uint64_t)v31, ObjectType);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v31);
  a2(v26);
  return swift_bridgeObjectRelease();
}

void ConversationManagerHost.conversationManagerHostConnection(_:addRemoteMembers:toConversationWithUUID:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v42 = a3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  char v12 = (uint64_t *)((char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void **)(v3 + OBJC_IVAR___CPConversationManagerHost_queue);
  *char v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E4FBCBF0], v9);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if (v13)
  {
    uint64_t v41 = v3;
    if (one-time initialization token for host == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.host);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v42, v5);
  id v16 = a1;
  swift_bridgeObjectRetain_n();
  id v17 = v16;
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  int v20 = v19;
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v22 = (void *)swift_slowAlloc();
    id v37 = v22;
    uint64_t v40 = swift_slowAlloc();
    uint64_t v43 = (uint64_t)v17;
    uint64_t v44 = v40;
    *(_DWORD *)uint64_t v21 = 138412802;
    int v39 = v20;
    os_log_t v38 = v18;
    uint64_t v36 = v5;
    id v23 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v22 = v17;

    *(_WORD *)(v21 + 12) = 2080;
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    swift_bridgeObjectRetain();
    uint64_t v24 = Set.description.getter();
    unint64_t v26 = v25;
    swift_bridgeObjectRelease();
    uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 22) = 2080;
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v27 = v36;
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v27);
    uint64_t v18 = v38;
    _os_log_impl(&dword_1B0DF7000, v38, (os_log_type_t)v39, "conversationManagerHostConnection: %@ addRemoteMembers: %s conversationUUID: %s", (uint8_t *)v21, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    unint64_t v30 = v37;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v30, -1, -1);
    uint64_t v31 = v40;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v31, -1, -1);
    MEMORY[0x1B3EA39E0](v21, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

  uint64_t v32 = *(void **)(v41 + OBJC_IVAR___CPConversationManagerHost_dataSource);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  Class v34 = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v32, sel_addRemoteMembers_toConversationWithUUID_, isa, v34);
}

void ConversationManagerHost.conversationManagerHostConnection(_:prepareForActivationWithOverrides:completionHandler:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (uint64_t *)((char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v14 = *(void **)(v5 + OBJC_IVAR___CPConversationManagerHost_queue);
  *uint64_t v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E4FBCBF0], v10);
  id v15 = v14;
  char v16 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if (v16)
  {
    if (one-time initialization token for host == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Log.host);
  uint64_t v18 = a1;
  os_log_type_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    uint64_t v31 = a2;
    uint64_t v32 = a4;
    id v23 = (void *)v22;
    uint64_t v30 = v5;
    *(_DWORD *)uint64_t v21 = 138412290;
    aBlock[0] = v18;
    uint64_t v24 = v18;
    uint64_t v5 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v23 = v18;

    _os_log_impl(&dword_1B0DF7000, v19, v20, "conversationManagerHostConnection: %@ prepareForActivation", v21, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    unint64_t v25 = v23;
    a2 = v31;
    a4 = v32;
    MEMORY[0x1B3EA39E0](v25, -1, -1);
    MEMORY[0x1B3EA39E0](v21, -1, -1);
  }
  else
  {

    os_log_type_t v19 = v18;
  }

  unint64_t v26 = *(void **)(v5 + OBJC_IVAR___CPConversationManagerHost_dataSource);
  uint64_t v27 = (void *)MEMORY[0x1B3EA1B00](*(Class *)((char *)&v18->isa + direct field offset for XPCHostConnection.bundleIdentifier), *(Class *)((char *)&v18[1].isa + direct field offset for XPCHostConnection.bundleIdentifier));
  aBlock[4] = a3;
  void aBlock[5] = a4;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
  uint64_t aBlock[3] = &block_descriptor_25;
  uint64_t v28 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v26, sel_requestActivityAuthorizationForApplicationWithBundleIdentifier_overrides_completionHandler_, v27, a2, v28);
  _Block_release(v28);
}

void ConversationManagerHost.conversationManagerHostConnection(_:setActivityAuthorization:forBundleIdentifier:)(void *a1, char a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (void **)((char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void **)(v4 + OBJC_IVAR___CPConversationManagerHost_queue);
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E4FBCBF0], v9);
  id v14 = v13;
  char v15 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if (v15)
  {
    uint64_t v31 = v4;
    if (one-time initialization token for host == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Log.host);
  id v17 = a1;
  swift_bridgeObjectRetain_n();
  id v18 = v17;
  os_log_type_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v28 = (void *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    uint64_t v32 = (uint64_t)v18;
    uint64_t v33 = v30;
    *(_DWORD *)uint64_t v21 = 138412802;
    os_log_t v29 = v19;
    id v22 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    id v23 = v28;
    *uint64_t v28 = v18;

    *(_WORD *)(v21 + 12) = 1024;
    LODWORD(v32) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v21 + 18) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    os_log_t v24 = v29;
    _os_log_impl(&dword_1B0DF7000, v29, v20, "conversationManagerHostConnection: %@ setActivityAuthorization: %{BOOL}d forBundleIdentifier: %s", (uint8_t *)v21, 0x1Cu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v23, -1, -1);
    uint64_t v25 = v30;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v25, -1, -1);
    MEMORY[0x1B3EA39E0](v21, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  unint64_t v26 = *(void **)(v31 + OBJC_IVAR___CPConversationManagerHost_dataSource);
  uint64_t v27 = (void *)MEMORY[0x1B3EA1B00](a3, a4);
  objc_msgSend(v26, sel_setActivityAuthorization_forBundleID_, a2 & 1, v27);
}

void ConversationManagerHost.conversationManagerHostConnection(_:createActivitySession:onConversationWithUUID:completion:)(void *a1, void *a2, uint64_t a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v97 = a5;
  id v98 = a1;
  id v99 = a2;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  char v15 = (uint64_t *)((char *)&v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v95 = v5;
  uint64_t v16 = *(void **)&v5[OBJC_IVAR___CPConversationManagerHost_queue];
  *char v15 = v16;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, *MEMORY[0x1E4FBCBF0], v12);
  id v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v13 + 8))(v15, v12);
  if (v16)
  {
    uint64_t v96 = a4;
    if (one-time initialization token for host == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v18 = type metadata accessor for Logger();
  os_log_type_t v19 = (void *)__swift_project_value_buffer(v18, (uint64_t)static Log.host);
  os_log_type_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v94 = a3;
  uint64_t v21 = v8;
  v20(v11, a3, v8);
  id v22 = v98;
  id v23 = v99;
  os_log_t v24 = (char *)v22;
  id v25 = v23;
  unint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  int v28 = v27;
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v29 = swift_slowAlloc();
    os_log_t v93 = v26;
    uint64_t v30 = v29;
    uint64_t v31 = swift_slowAlloc();
    id v99 = v19;
    uint64_t v32 = v11;
    uint64_t v33 = (void *)v31;
    id v98 = (id)swift_slowAlloc();
    uint64_t v100 = (uint64_t)v24;
    *(void *)&long long aBlock = v98;
    *(_DWORD *)uint64_t v30 = 138412802;
    uint64_t v91 = v21;
    Class v34 = v24;
    int v92 = v28;
    uint64_t v35 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v33 = v24;

    *(_WORD *)(v30 + 12) = 2112;
    uint64_t v100 = (uint64_t)v25;
    id v36 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v33[1] = v25;

    *(_WORD *)(v30 + 22) = 2080;
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    id v37 = v32;
    uint64_t v38 = v91;
    uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v100 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v37, v38);
    os_log_t v41 = v93;
    _os_log_impl(&dword_1B0DF7000, v93, (os_log_type_t)v92, "conversationManagerHostConnection: %@ create session with request: %@ conversationUUID: %s", (uint8_t *)v30, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v33, -1, -1);
    id v42 = v98;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v42, -1, -1);
    MEMORY[0x1B3EA39E0](v30, -1, -1);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v21);
  }
  uint64_t v43 = *(void **)&v24[direct field offset for XPCHostConnection.definedSystemActivityIdentifiers];
  swift_bridgeObjectRetain();
  id v44 = objc_msgSend(v25, sel_activityIdentifier);
  uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v47 = v46;

  char v48 = specialized Sequence<>.contains(_:)(v45, v47, v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v49 = objc_msgSend(v25, sel_staticIdentifier);
  if (v49 && (v49, (v48 & 1) == 0))
  {
    int64_t v67 = Logger.logObject.getter();
    os_log_type_t v68 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v67, v68))
    {
      uint64_t v69 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v69 = 0;
      _os_log_impl(&dword_1B0DF7000, v67, v68, "conversationManagerHostConnection: Unable to create static session for non-system activity", v69, 2u);
      MEMORY[0x1B3EA39E0](v69, -1, -1);
    }

    v96(0);
  }
  else
  {
    uint64_t v51 = *(void *)&v24[direct field offset for XPCHostConnection.bundleIdentifier];
    uint64_t v50 = *(void *)&v24[direct field offset for XPCHostConnection.bundleIdentifier + 8];
    id v52 = objc_allocWithZone(MEMORY[0x1E4FADB28]);
    id v53 = v25;
    swift_bridgeObjectRetain();
    uint64_t v54 = (void *)MEMORY[0x1B3EA1B00](v51, v50);
    swift_bridgeObjectRelease();
    id v55 = objc_msgSend(v52, sel_initWithCreationRequest_bundleIdentifier_systemActivity_, v53, v54, v48 & 1);

    if (_TUIsInternalInstall())
    {
      uint64_t v56 = self;
      id v57 = objc_msgSend(v56, sel_standardUserDefaults);
      uint64_t v58 = (void *)MEMORY[0x1B3EA1B00](0xD000000000000018, 0x80000001B1161660);
      id v59 = objc_msgSend(v57, sel_objectForKey_, v58);

      if (v59)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        outlined destroy of UUID?((uint64_t)&aBlock, (uint64_t *)&demangling cache variable for type metadata for Any?);
        id v60 = objc_msgSend(v56, sel_standardUserDefaults);
        unint64_t v61 = (void *)MEMORY[0x1B3EA1B00](0xD000000000000018, 0x80000001B1161660);
        id v62 = objc_msgSend(v60, sel_BOOLForKey_, v61);

        uint64_t v63 = Logger.logObject.getter();
        os_log_type_t v64 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v63, v64))
        {
          uint64_t v65 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v65 = 67109120;
          LODWORD(aBlock) = v62;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          MEMORY[0x1B3EA39E0](v65, -1, -1);
        }

        id v66 = objc_msgSend(v55, sel_metadata);
        objc_msgSend(v66, sel_setSupportsContinuationOnTV_, v62);
      }
      else
      {
        long long aBlock = 0u;
        long long v102 = 0u;
        outlined destroy of UUID?((uint64_t)&aBlock, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
    }
    id v70 = v53;
    id v71 = v95;
    id v72 = v55;
    id v73 = v70;
    uint64_t v74 = v71;
    id v75 = v72;
    long long v76 = Logger.logObject.getter();
    os_log_type_t v77 = static os_log_type_t.default.getter();
    int v78 = v77;
    if (os_log_type_enabled(v76, v77))
    {
      uint64_t v79 = swift_slowAlloc();
      LODWORD(v99) = v78;
      uint64_t v80 = v79;
      uint64_t v81 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v80 = 138412802;
      *(void *)&long long aBlock = v74;
      uint64_t v82 = v74;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v81 = v74;

      *(_WORD *)(v80 + 12) = 2112;
      *(void *)&long long aBlock = v75;
      id v83 = v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v81[1] = v75;

      *(_WORD *)(v80 + 22) = 2112;
      *(void *)&long long aBlock = v73;
      id v84 = v73;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v81[2] = v73;

      _os_log_impl(&dword_1B0DF7000, v76, (os_log_type_t)v99, "ConversationManagerHost %@ created activity %@ for request %@", (uint8_t *)v80, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v81, -1, -1);
      MEMORY[0x1B3EA39E0](v80, -1, -1);
    }
    else
    {

      long long v76 = v74;
    }
    uint64_t v85 = v96;

    uint64_t v86 = *(Class *)((char *)&v74->isa + OBJC_IVAR___CPConversationManagerHost_dataSource);
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    uint64_t v88 = (void *)swift_allocObject();
    v88[2] = v75;
    v88[3] = v85;
    v88[4] = v97;
    unint64_t v103 = partial apply for closure #1 in ConversationManagerHost.conversationManagerHostConnection(_:createActivitySession:onConversationWithUUID:completion:);
    uint64_t v104 = v88;
    *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v102 = thunk for @escaping @callee_guaranteed (@guaranteed IMUserNotification?) -> ();
    *((void *)&v102 + 1) = &block_descriptor_3;
    uint64_t v89 = _Block_copy(&aBlock);
    id v90 = v75;
    swift_retain();
    swift_release();
    objc_msgSend(v86, sel_createActivitySession_onConversationWithUUID_withCompletion_, v90, isa, v89);
    _Block_release(v89);
  }
}

void closure #1 in ConversationManagerHost.conversationManagerHostConnection(_:createActivitySession:onConversationWithUUID:completion:)(void *a1, void *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v53 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  os_log_type_t v20 = (char *)&v53 - v19;
  if (a1)
  {
    uint64_t v57 = v9;
    uint64_t v60 = a4;
    id v21 = a1;
    id v59 = objc_msgSend(v21, sel_state);
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Log.host);
    id v23 = a2;
    id v24 = v21;
    id v25 = v23;
    id v26 = v24;
    os_log_type_t v27 = Logger.logObject.getter();
    int v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, (os_log_type_t)v28))
    {
      id v54 = v25;
      int v56 = v28;
      uint64_t v58 = a3;
      uint64_t v29 = swift_slowAlloc();
      uint64_t v55 = swift_slowAlloc();
      uint64_t v62 = v55;
      *(_DWORD *)uint64_t v29 = 136315650;
      id v30 = objc_msgSend(v26, sel_UUID);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v31 = v57;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v20, 0, 1, v8);
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v20, (uint64_t)v18, &demangling cache variable for type metadata for UUID?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v18, 1, v8) == 1)
      {
        unint64_t v32 = 0xE300000000000000;
        uint64_t v33 = 7104878;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v14, v18, v8);
        (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v12, v14, v8);
        uint64_t v33 = String.init<A>(reflecting:)();
        unint64_t v32 = v44;
        (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v8);
      }
      unint64_t v43 = (unint64_t)v59;
      BOOL v45 = (unint64_t)v59 < 2;
      outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for UUID?);
      uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v32, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2080;
      LOBYTE(v61) = v45;
      uint64_t v46 = String.init<A>(reflecting:)();
      uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 22) = 2080;
      char v48 = v54;
      uint64_t v61 = (uint64_t)v54;
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivity);
      id v49 = v48;
      uint64_t v50 = String.init<A>(reflecting:)();
      uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v27, (os_log_type_t)v56, "Did activate session %s with result %s for activity %s", (uint8_t *)v29, 0x20u);
      uint64_t v52 = v55;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v52, -1, -1);
      MEMORY[0x1B3EA39E0](v29, -1, -1);

      a3 = v58;
    }
    else
    {

      unint64_t v43 = (unint64_t)v59;
    }
    a3(v43 < 2);
  }
  else
  {
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static Log.host);
    id v35 = a2;
    id v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v58 = a3;
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      uint64_t v61 = (uint64_t)v35;
      uint64_t v62 = v39;
      *(_DWORD *)uint64_t v38 = 136315138;
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivity);
      id v40 = v35;
      uint64_t v41 = String.init<A>(reflecting:)();
      uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v62);
      a3 = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v36, v37, "Did not create session for activity %s", v38, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v39, -1, -1);
      MEMORY[0x1B3EA39E0](v38, -1, -1);
    }
    else
    {
    }
    a3(0);
  }
}

void ConversationManagerHost.conversationManagerHostConnection(_:buzzMember:conversationUUID:)(void *a1, void *a2, void *a3)
{
}

void ConversationManagerHost.conversationManagerHostConnection(_:setDownlinkMuted:forRemoteParticipantsInConversationWithUUID:)(void *a1, int a2, uint64_t a3)
{
  uint64_t v37 = a3;
  int v36 = a2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (void *)((char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v35 = v3;
  uint64_t v13 = *(void **)(v3 + OBJC_IVAR___CPConversationManagerHost_queue);
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E4FBCBF0], v9);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if (v13)
  {
    if (one-time initialization token for host == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.host);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v37, v5);
  id v16 = a1;
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  int v19 = v18;
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v20 = swift_slowAlloc();
    id v21 = (void *)swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    uint64_t v38 = (uint64_t)v16;
    uint64_t v39 = v34;
    *(_DWORD *)uint64_t v20 = 138412802;
    int v33 = v19;
    v31[1] = &v39;
    id v22 = v16;
    os_log_t v32 = v17;
    id v23 = v22;
    char v24 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v21 = v16;

    *(_WORD *)(v20 + 12) = 1024;
    LODWORD(v38) = v24 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v20 + 18) = 2080;
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    os_log_t v27 = v32;
    _os_log_impl(&dword_1B0DF7000, v32, (os_log_type_t)v33, "conversationManagerHostConnection: %@ muted: %{BOOL}d conversationUUID: %s", (uint8_t *)v20, 0x1Cu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v21, -1, -1);
    uint64_t v28 = v34;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v28, -1, -1);
    MEMORY[0x1B3EA39E0](v20, -1, -1);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  uint64_t v29 = *(void **)(v35 + OBJC_IVAR___CPConversationManagerHost_dataSource);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v29, sel_setDownlinkMuted_forRemoteParticipantsOnConversationWithUUID_, v36 & 1, isa);
}

void ConversationManagerHost.conversationManagerHostConnection(_:kickMember:conversationUUID:)(void *a1, void *a2, void *a3)
{
}

void ConversationManagerHost.conversationManagerHostConnection(_:buzzMember:conversationUUID:)(void *a1, void *a2, void *a3, const char *a4, SEL *a5)
{
  id v44 = a2;
  BOOL v45 = a5;
  unint64_t v42 = a4;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (uint64_t *)((char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v16 = *(void **)(v5 + OBJC_IVAR___CPConversationManagerHost_queue);
  *uint64_t v15 = v16;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, *MEMORY[0x1E4FBCBF0], v12);
  id v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v13 + 8))(v15, v12);
  if (v16)
  {
    uint64_t v43 = v5;
    if (one-time initialization token for host == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Log.host);
  int v19 = v11;
  (*(void (**)(char *, void *, uint64_t))(v9 + 16))(v11, a3, v8);
  id v20 = a1;
  id v21 = v44;
  id v22 = v20;
  id v23 = v21;
  char v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  int v26 = v25;
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v27 = swift_slowAlloc();
    id v44 = a3;
    uint64_t v28 = v27;
    uint64_t v29 = (void *)swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    uint64_t v46 = (uint64_t)v22;
    uint64_t v47 = v41;
    *(_DWORD *)uint64_t v28 = 138412802;
    int v40 = v26;
    uint64_t v38 = v8;
    os_log_t v39 = v24;
    id v30 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v29 = v22;

    *(_WORD *)(v28 + 12) = 2112;
    uint64_t v46 = (uint64_t)v23;
    id v31 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v29[1] = v23;

    *(_WORD *)(v28 + 22) = 2080;
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v32 = v38;
    uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v19, v32);
    char v24 = v39;
    _os_log_impl(&dword_1B0DF7000, v39, (os_log_type_t)v40, v42, (uint8_t *)v28, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v29, -1, -1);
    uint64_t v35 = v41;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v35, -1, -1);
    MEMORY[0x1B3EA39E0](v28, -1, -1);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v9 + 8))(v19, v8);
  }

  int v36 = *(void **)(v43 + OBJC_IVAR___CPConversationManagerHost_dataSource);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v36, *v45, v23, isa);
}

void ConversationManagerHost.conversationManagerHostConnection(_:updateConversationWith:participantPresentationContexts:)(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (uint64_t *)((char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void **)(v2 + OBJC_IVAR___CPConversationManagerHost_queue);
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E4FBCBF0], v9);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if (v13)
  {
    if (one-time initialization token for host == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.host);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a2, v5);
  id v16 = a1;
  swift_bridgeObjectRetain_n();
  id v17 = v16;
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.info.getter();
  int v20 = v19;
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    uint64_t v36 = v5;
    id v23 = (void *)v22;
    uint64_t v39 = swift_slowAlloc();
    uint64_t v40 = (uint64_t)v17;
    uint64_t v41 = v39;
    *(_DWORD *)uint64_t v21 = 138412802;
    os_log_t v38 = v18;
    int v37 = v20;
    id v24 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v23 = v17;
    os_log_type_t v25 = v23;

    *(_WORD *)(v21 + 12) = 2080;
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v26 = v36;
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v26);
    *(_WORD *)(v21 + 22) = 2080;
    uint64_t v29 = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for TUConversationParticipantPresentationContext);
    uint64_t v30 = swift_bridgeObjectRetain();
    uint64_t v31 = MEMORY[0x1B3EA1D20](v30, v29);
    unint64_t v33 = v32;
    swift_bridgeObjectRelease();
    uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v33, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    os_log_t v34 = v38;
    _os_log_impl(&dword_1B0DF7000, v38, (os_log_type_t)v37, "conversationManagerHostConnection: %@ conversationUUID: %s participantPresentationContexts: %s", (uint8_t *)v21, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v25, -1, -1);
    uint64_t v35 = v39;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v35, -1, -1);
    MEMORY[0x1B3EA39E0](v21, -1, -1);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease_n();
  }
}

void ConversationManagerHost.conversationManagerHostConnectionInvalidated(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (void *)((char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)(v2 + OBJC_IVAR___CPConversationManagerHost_queue);
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4FBCBF0], v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if (v8)
  {
    if (one-time initialization token for host == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.host);
  uint64_t v11 = a1;
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    id v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    *(_DWORD *)id v14 = 138412290;
    v23[1] = v11;
    id v16 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v11;

    _os_log_impl(&dword_1B0DF7000, v12, v13, "conversationManagerHostConnectionInvalidated: %@", v14, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v15, -1, -1);
    MEMORY[0x1B3EA39E0](v14, -1, -1);
  }
  else
  {

    uint64_t v12 = v11;
  }

  swift_beginAccess();
  id v17 = (void *)specialized Set._Variant.remove(_:)(v11);
  swift_endAccess();

  uint64_t v18 = *(void **)(v2 + OBJC_IVAR___CPConversationManagerHost_dataSource);
  uint64_t v19 = *(uint64_t *)((char *)&v11->isa + direct field offset for XPCHostConnection.bundleIdentifier);
  uint64_t v20 = *(uint64_t *)((char *)&v11[1].isa + direct field offset for XPCHostConnection.bundleIdentifier);
  uint64_t v21 = (void *)MEMORY[0x1B3EA1B00](v19, v20);
  objc_msgSend(v18, sel_revokeBackgroundPipAuthorizationsForBundleID_, v21);

  uint64_t v22 = (void *)MEMORY[0x1B3EA1B00](v19, v20);
  objc_msgSend(v18, sel_resetActivitySessionSceneAssociationsForBundleID_, v22);
}

void ConversationManagerHost.conversationManagerHostConnection(_:includeMetricsReport:onConversationWithUUID:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v37 = a2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  id v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  os_log_type_t v13 = (uint64_t *)((char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v14 = *(void **)(v3 + OBJC_IVAR___CPConversationManagerHost_queue);
  *os_log_type_t v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E4FBCBF0], v10);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if (v14)
  {
    uint64_t v36 = v3;
    if (one-time initialization token for host == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Log.host);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
  id v17 = a1;
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v35 = a3;
    uint64_t v21 = v20;
    uint64_t v22 = (void *)swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    uint64_t v38 = (uint64_t)v17;
    uint64_t v39 = v34;
    *(_DWORD *)uint64_t v21 = 138412546;
    uint64_t v32 = v6;
    id v23 = v17;
    os_log_t v33 = v18;
    id v24 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v22 = v17;

    *(_WORD *)(v21 + 12) = 2080;
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v25 = v32;
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v25);
    uint64_t v18 = v33;
    _os_log_impl(&dword_1B0DF7000, v33, v19, "conversationManagerHostConnection: %@ includeMetricsReport conversationUUID: %s", (uint8_t *)v21, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v22, -1, -1);
    uint64_t v28 = v34;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v28, -1, -1);
    MEMORY[0x1B3EA39E0](v21, -1, -1);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

  uint64_t v29 = *(void **)(v36 + OBJC_IVAR___CPConversationManagerHost_dataSource);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  Class v31 = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v29, sel_includeMetricsReport_onConversationWithUUID_, isa, v31);
}

void ConversationManagerHost.conversationManagerHostConnection(_:didRegisterEndpointWithIdentifier:)(void *a1, objc_class *a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (uint64_t *)((char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = *(void **)(v3 + OBJC_IVAR___CPConversationManagerHost_queue);
  *uint64_t v10 = v11;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E4FBCBF0], v7);
  id v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  if (v11)
  {
    os_log_type_t v13 = (unint64_t *)(v3 + OBJC_IVAR___CPConversationManagerHost_pendingEndpointRequests);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    id v14 = a1;
    specialized MutableCollection._halfStablePartition(isSuffixElement:)(v13, a2, a3, v14);
    uint64_t v16 = v15;
    swift_bridgeObjectRelease();

    int64_t v17 = *(void *)(*v13 + 16);
    if (v17 >= v16)
    {
      specialized Array.replaceSubrange<A>(_:with:)(v16, v17);
      swift_endAccess();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void ConversationManagerHost.conversationManagerHostConnection(_:fetchEndpointWithIdentifier:activitySessionUUID:activity:completionHandler:)(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  long long v76 = a5;
  uint64_t v77 = a6;
  id v89 = a1;
  unint64_t v90 = a3;
  uint64_t v88 = a2;
  uint64_t v91 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v91 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v91);
  id v84 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  id v14 = (char *)&v68 - v13;
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char **)((char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  os_log_type_t v19 = *(void **)(v7 + OBJC_IVAR___CPConversationManagerHost_queue);
  *uint64_t v18 = v19;
  uint64_t v20 = *(void (**)(void))(v16 + 104);
  unsigned int v80 = *MEMORY[0x1E4FBCBF0];
  uint64_t v81 = v16 + 104;
  uint64_t v79 = v20;
  v20(v18);
  id v78 = v19;
  char v21 = _dispatchPreconditionTest(_:)();
  uint64_t v22 = *(void (**)(void *, uint64_t))(v16 + 8);
  uint64_t v82 = v16 + 8;
  uint64_t v83 = v15;
  v22(v18, v15);
  if (v21)
  {
    uint64_t v87 = v7;
    if (one-time initialization token for host == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v72 = a7;
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Log.host);
  id v24 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v86 = a4;
  uint64_t v74 = v10 + 16;
  id v73 = v24;
  v24(v14, a4, v91);
  id v25 = v89;
  unint64_t v26 = v90;
  swift_bridgeObjectRetain_n();
  id v27 = v25;
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.default.getter();
  int v30 = v29;
  BOOL v31 = os_log_type_enabled(v28, v29);
  uint64_t v85 = v10;
  id v75 = v22;
  if (v31)
  {
    uint64_t v32 = swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    os_log_type_t v68 = v14;
    uint64_t v34 = (void *)v33;
    uint64_t v70 = v33;
    id v89 = (id)swift_slowAlloc();
    v92[0] = (uint64_t)v89;
    *(_DWORD *)uint64_t v32 = 138412802;
    os_log_t v71 = v28;
    uint64_t v93 = (uint64_t)v27;
    id v35 = v27;
    int v69 = v30;
    id v36 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v34 = v27;

    uint64_t v37 = v91;
    *(_WORD *)(v32 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v88, v26, v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v32 + 22) = 2080;
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v38 = v68;
    uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v41 = *(void (**)(char *, uint64_t))(v85 + 8);
    v41(v38, v37);
    os_log_t v42 = v71;
    _os_log_impl(&dword_1B0DF7000, v71, (os_log_type_t)v69, "conversationManagerHostConnection: %@ fetchEndpoint identifier: %s activitySessionUUID: %s", (uint8_t *)v32, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v43 = v70;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v43, -1, -1);
    id v44 = v89;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v44, -1, -1);
    MEMORY[0x1B3EA39E0](v32, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    uint64_t v41 = *(void (**)(char *, uint64_t))(v10 + 8);
    v41(v14, v91);
  }
  uint64_t v45 = v87;
  id v46 = objc_msgSend(*(id *)(v87 + OBJC_IVAR___CPConversationManagerHost_dataSource), sel_conversationsByGroupUUID);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  uint64_t v47 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  MEMORY[0x1F4188790](v48);
  uint64_t v49 = v86;
  *(&v68 - 2) = (char *)v86;
  specialized Sequence.contains(where:)(partial apply for closure #1 in ConversationManagerHost.conversationManagerHostConnection(_:fetchEndpointWithIdentifier:activitySessionUUID:activity:completionHandler:), (uint64_t)(&v68 - 4), v47);
  LOBYTE(v46) = v50;
  swift_bridgeObjectRelease();
  if (v46)
  {
    uint64_t v52 = v78;
    unint64_t v51 = (void (*)(void *, void, uint64_t))v79;
    *uint64_t v18 = v78;
    uint64_t v53 = v83;
    v51(v18, v80, v83);
    id v54 = v52;
    unint64_t v55 = v90;
    swift_bridgeObjectRetain();
    LOBYTE(v52) = _dispatchPreconditionTest(_:)();
    v75(v18, v53);
    if (v52)
    {
      swift_beginAccess();
      uint64_t v56 = swift_bridgeObjectRetain();
      uint64_t v57 = v88;
      specialized Sequence.first(where:)(v56, v88, v55);
      id v59 = v58;
      swift_bridgeObjectRelease();
      closure #2 in ConversationManagerHost.fetchEndpoint(for:activitySessionUUID:activity:completion:)(v59, v57, v55, v49, v76, v77, v72, v45);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    uint64_t v60 = v84;
    v73(v84, v49, v91);
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = (uint8_t *)swift_slowAlloc();
      uint64_t v64 = swift_slowAlloc();
      v92[0] = v64;
      *(_DWORD *)uint64_t v63 = 136315138;
      uint64_t v65 = v91;
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v67, v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v41(v60, v65);
      _os_log_impl(&dword_1B0DF7000, v61, v62, "No joined conversation contains activity session with uuid: %s", v63, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v64, -1, -1);
      MEMORY[0x1B3EA39E0](v63, -1, -1);
    }
    else
    {
      v41(v60, v91);
    }
  }
}

uint64_t closure #1 in ConversationManagerHost.conversationManagerHostConnection(_:fetchEndpointWithIdentifier:activitySessionUUID:activity:completionHandler:)(void **a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *a1;
  id v9 = objc_msgSend(v8, sel_state);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  if (v9 == (id)3)
  {
    id v10 = objc_msgSend(v8, sel_activitySessions);
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    uint64_t v11 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    MEMORY[0x1F4188790](v12);
    *(&v16 - 2) = (uint64_t)v7;
    specialized Sequence.contains(where:)(partial apply for closure #1 in implicit closure #1 in closure #1 in ConversationManagerHost.conversationManagerHostConnection(_:fetchEndpointWithIdentifier:activitySessionUUID:activity:completionHandler:), (uint64_t)(&v16 - 4), v11);
    char v14 = v13;
    swift_bridgeObjectRelease();
  }
  else
  {
    char v14 = 0;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v14 & 1;
}

uint64_t closure #1 in implicit closure #1 in closure #1 in ConversationManagerHost.conversationManagerHostConnection(_:fetchEndpointWithIdentifier:activitySessionUUID:activity:completionHandler:)(id *a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = objc_msgSend(*a1, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  char v7 = static UUID.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v7 & 1;
}

Swift::Bool __swiftcall ConversationManagerHost.listener(_:shouldAcceptNewConnection:)(NSXPCListener _, NSXPCConnection shouldAcceptNewConnection)
{
  return specialized ConversationManagerHost.listener(_:shouldAcceptNewConnection:)(shouldAcceptNewConnection.super.isa);
}

void closure #1 in ConversationManagerHost.listener(_:shouldAcceptNewConnection:)(uint64_t a1, void *a2)
{
  swift_beginAccess();
  specialized Set._Variant.insert(_:)(&v3, a2);
  swift_endAccess();
}

uint64_t closure #1 in CPConversationManagerDataSource.conversationContainersByGroupUUID(from:connection:protectedStorage:)@<X0>(id a1@<X1>, char *a2@<X3>, void *a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  if (objc_msgSend(a1, sel_state) == (id)3)
  {
    id v10 = CPConversationManagerDataSource.conversationContainer(from:connection:protectedStorage:)(a1, a2, a3, a4);
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, TUConversationActivitySessionContainer));
    uint64_t v12 = *(int *)(v11 + 48);
    id v13 = objc_msgSend(v10, sel_groupUUID);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    *(void *)(a5 + v12) = v10;
    char v14 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    return v14(a5, 0, 1, v11);
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Log.default);
    id v17 = a1;
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v26 = v21;
      *(_DWORD *)uint64_t v20 = 136315138;
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
      id v22 = v17;
      uint64_t v23 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v18, v19, "Filtering out unjoined conversation %s", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v21, -1, -1);
      MEMORY[0x1B3EA39E0](v20, -1, -1);
    }
    else
    {
    }
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, TUConversationActivitySessionContainer));
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(a5, 1, 1, v25);
  }
}

id CPConversationManagerDataSource.conversationContainer(from:connection:protectedStorage:)(void *a1, char *a2, void *a3, uint64_t a4)
{
  uint64_t v107 = a4;
  uint64_t v101 = a3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v93 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)&a2[direct field offset for XPCHostConnection.bundleIdentifier];
  uint64_t v11 = *(void *)&a2[direct field offset for XPCHostConnection.bundleIdentifier + 8];
  id v112 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADB60]), sel_init);
  id v12 = v112;
  id v13 = objc_msgSend(a1, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v9, v6);
  objc_msgSend(v12, sel_setUUID_, isa);

  id v16 = objc_msgSend(a1, sel_groupUUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  Class v17 = UUID._bridgeToObjectiveC()().super.isa;
  v15(v9, v6);
  uint64_t v18 = v11;
  objc_msgSend(v12, sel_setGroupUUID_, v17);

  id v19 = objc_msgSend(a1, sel_state);
  id v108 = v12;
  uint64_t v20 = v12;
  uint64_t v21 = v10;
  objc_msgSend(v20, sel_setState_, v19);
  id v22 = objc_msgSend(a1, sel_activitySessions);
  uint64_t v23 = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
  uint64_t v24 = lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
  uint64_t v25 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)();

  id v106 = a1;
  id v26 = objc_msgSend(a1, sel_systemActivitySessions);
  uint64_t v102 = v24;
  uint64_t v103 = v23;
  unint64_t v27 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Set.union<A>(_:)(v27, v25);
  uint64_t v29 = v28;
  uint64_t v30 = CPConversationManagerDataSource.filteredSessions(for:connection:from:)(v10, v18, a2, v28, v107);
  uint64_t v105 = a2;
  if ((v10 != 0xD00000000000001ALL || v18 != 0x80000001B1161680)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    if ((v30 & 0xC000000000000001) != 0) {
      goto LABEL_10;
    }
LABEL_16:
    if (*(uint64_t *)(v30 + 16) >= 1) {
      goto LABEL_11;
    }
LABEL_17:

    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  __swift_project_value_buffer(v31, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = swift_slowAlloc();
    uint64_t v104 = (uint64_t *)v30;
    uint64_t v35 = v34;
    uint64_t v36 = swift_slowAlloc();
    v109[0] = v36;
    *(_DWORD *)uint64_t v35 = 136315394;
    uint64_t v110 = 0xD000000000000011;
    unint64_t v111 = 0x80000001B11616A0;
    uint64_t v37 = String.init<A>(reflecting:)();
    uint64_t v110 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v35 + 12) = 2080;
    uint64_t v110 = v21;
    unint64_t v111 = v18;
    swift_bridgeObjectRetain();
    uint64_t v39 = String.init<A>(reflecting:)();
    uint64_t v110 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v32, v33, "Adding sessions for %s for %s", (uint8_t *)v35, 0x16u);
    swift_arrayDestroy();
    a2 = v105;
    MEMORY[0x1B3EA39E0](v36, -1, -1);
    uint64_t v41 = v35;
    uint64_t v30 = (uint64_t)v104;
    MEMORY[0x1B3EA39E0](v41, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  unint64_t v42 = CPConversationManagerDataSource.filteredSessions(for:connection:from:)(0xD000000000000011, 0x80000001B11616A0, a2, v29, v107);
  swift_bridgeObjectRelease();
  specialized Set.union<A>(_:)(v42, (void *)v30);
  uint64_t v30 = v43;
  if ((v43 & 0xC000000000000001) == 0) {
    goto LABEL_16;
  }
LABEL_10:
  if (__CocoaSet.count.getter() < 1) {
    goto LABEL_17;
  }
LABEL_11:
  uint64_t v104 = (uint64_t *)v30;
  uint64_t v100 = v18;
  uint64_t v107 = v21;
  if (a2[direct field offset for XPCHostConnection.isEntitledToUsePrivateAPI] == 1)
  {
    id v44 = v106;
    id v45 = objc_msgSend(v106, sel_localMember);
    id v46 = v108;
    objc_msgSend(v108, sel_setLocalMember_, v45);

    id v47 = objc_msgSend(v44, sel_initiator);
    objc_msgSend(v46, sel_setInitiator_, v47);
  }
  id v48 = objc_msgSend(v106, sel_virtualParticipants);
  type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for TUConversationVirtualParticipant);
  lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject(&lazy protocol witness table cache variable for type TUConversationVirtualParticipant and conformance NSObject, &lazy cache variable for type metadata for TUConversationVirtualParticipant);
  static Set._unconditionallyBridgeFromObjectiveC(_:)();

  Class v49 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v108, sel_setVirtualParticipants_, v49);

  char v50 = *(void **)&a2[direct field offset for ConversationManagerHostConnection.serverBag];
  id v99 = objc_msgSend(v50, sel_qrPluginConnectionRetryIntervalMillis);
  id v98 = objc_msgSend(v50, sel_qrPluginMaxConnectionAttempts);
  id v97 = objc_msgSend(v50, sel_qrPluginConnectionRetryIntervalMillis);
  id v96 = objc_msgSend(v50, sel_qrPluginMaxRpcStreamAttempts);
  unint64_t v51 = v101;
  uint64_t v52 = v101[3];
  uint64_t v53 = v101[4];
  __swift_project_boxed_opaque_existential_1(v101, v52);
  id v54 = self;
  id v55 = objc_msgSend(v54, sel_serverCertValidationEnabledUserDefaultsKey);
  uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v58 = v57;

  (*(void (**)(uint64_t *__return_ptr, void, uint64_t, uint64_t, void, void, void, uint64_t, uint64_t))(v53 + 32))(&v110, MEMORY[0x1E4FBB390], v56, v58, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB3B0], MEMORY[0x1E4FBB398], v52, v53);
  swift_bridgeObjectRelease();
  int v95 = v110;
  BOOL v94 = v110 == 2;
  uint64_t v59 = v51[3];
  uint64_t v60 = v51[4];
  __swift_project_boxed_opaque_existential_1(v51, v59);
  uint64_t v61 = v54;
  id v62 = objc_msgSend(v54, sel_serverCertHostnameUserDefaultsKey);
  uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v65 = v64;

  uint64_t v66 = MEMORY[0x1E4FBB1A0];
  (*(void (**)(uint64_t *__return_ptr, void, uint64_t, uint64_t, void, void, void, uint64_t, uint64_t))(v60 + 32))(&v110, MEMORY[0x1E4FBB1A0], v63, v65, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB1D8], MEMORY[0x1E4FBB1A8], v59, v60);
  swift_bridgeObjectRelease();
  uint64_t v67 = v110;
  unint64_t v68 = v111;
  uint64_t v69 = v51[3];
  uint64_t v70 = v51[4];
  __swift_project_boxed_opaque_existential_1(v51, v69);
  id v71 = objc_msgSend(v61, sel_serverCertLeafMarkerOIDUserDefaultsKey);
  uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v74 = v73;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, uint64_t))(v70 + 32))(v109, v66, v72, v74, v66, MEMORY[0x1E4FBB1D8], MEMORY[0x1E4FBB1A8], v69, v70);
  swift_bridgeObjectRelease();
  uint64_t v76 = v109[0];
  uint64_t v75 = v109[1];
  if (v68)
  {
    uint64_t v77 = (void *)MEMORY[0x1B3EA1B00](v67, v68);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v77 = 0;
  }
  char v78 = v94 | v95;
  uint64_t v21 = v107;
  if (v75)
  {
    uint64_t v79 = (void *)MEMORY[0x1B3EA1B00](v76, v75);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v79 = 0;
  }
  id v80 = objc_allocWithZone(MEMORY[0x1E4FADBB8]);
  id v81 = objc_msgSend(v80, sel_initWithConnectionRetryIntervalMillis_connectionMaxAttempts_rpcStreamRetryIntervalMillis_rpcStreamMaxAttempts_serverCertValidationEnabled_serverCertHostnameOverride_serverCertLeafMarkerOIDOverride_, v99, v98, v97, v96, v78 & 1, v77, v79);

  id v82 = v108;
  objc_msgSend(v108, sel_setVirtualParticipantConfig_, v81);

  id v83 = objc_msgSend(v50, sel_unreliableMessengerEstablishChannelMaxAttempts);
  id v84 = objc_msgSend(v50, sel_unreliableMessengerEstablishChannelRetryIntervalMillis);
  id v85 = objc_msgSend(v50, sel_unreliableMessengerEgressMessagePayloadMaxSizeBytes);
  id v86 = objc_msgSend(v50, sel_unreliableMessengerChannelStreamMaxQueueSize);
  id v87 = objc_msgSend(v50, sel_unreliableMessengerChannelStreamMaxTries);
  id v88 = objc_msgSend(v50, sel_unreliableMessengerChannelStreamRetryIntervalMillis);
  id v89 = objc_msgSend(v50, sel_unreliableMessengerSeqNumBufferSize);
  id v90 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADBA8]), sel_initWithEstablishChannelMaxAttempts_establishChannelRetryIntervalMillis_egressMessagePayloadMaxSizeBytes_channelStreamMaxQueueSize_channelStreamMaxTries_channelStreamRetryIntervalMillis_seqNumBufferSize_, v83, v84, v85, v86, v87, v88, v89);
  objc_msgSend(v82, sel_setUnreliableMessengerConfig_, v90);

  Class v91 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v82, sel_setActivitySessions_, v91);

  objc_msgSend(v82, sel_setLocalParticipantIdentifier_, objc_msgSend(v106, sel_localParticipantIdentifier));
  a2 = v105;
  uint64_t v18 = v100;
LABEL_23:
  CPConversationManagerDataSource.addAliasesIfNecessary(toConversationContainer:forBundleIdentifier:connection:)(&v112, v21, v18, a2);
  return v112;
}

void CPConversationManagerDataSource.addAliasesIfNecessary(toConversationContainer:forBundleIdentifier:connection:)(id *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v69 = (id)type metadata accessor for UUID();
  uint64_t v9 = MEMORY[0x1F4188790](v69);
  MEMORY[0x1F4188790](v9);
  id v13 = (char *)&v61 - v12;
  id v14 = *a1;
  if (*((unsigned char *)a4 + direct field offset for XPCHostConnection.isEntitledToAccessUnaliasedIdentifiers))
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Log.default);
    id v69 = v14;
    id v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      id v19 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 138412290;
      v71[0] = v69;
      id v20 = v69;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v19 = v69;

      _os_log_impl(&dword_1B0DF7000, v16, v17, "Not adding aliases to container: %@, client is entitled to access unaliased identifiers", v18, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v19, -1, -1);
      MEMORY[0x1B3EA39E0](v18, -1, -1);
    }
    else
    {

      id v30 = v69;
    }
  }
  else
  {
    uint64_t v65 = v11;
    uint64_t v67 = v4;
    uint64_t v68 = v10;
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Log.default);
    id v22 = v14;
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    BOOL v25 = os_log_type_enabled(v23, v24);
    uint64_t v66 = a2;
    if (v25)
    {
      uint64_t v64 = a3;
      id v26 = (uint8_t *)swift_slowAlloc();
      id v62 = (void *)swift_slowAlloc();
      uint64_t v63 = v26;
      *(_DWORD *)id v26 = 138412290;
      uint64_t v61 = v26 + 4;
      v71[0] = v22;
      id v27 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v28 = v62;
      *id v62 = v22;

      uint64_t v29 = v63;
      a3 = v64;
      _os_log_impl(&dword_1B0DF7000, v23, v24, "Adding aliases to container: %@", v63, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v28, -1, -1);
      MEMORY[0x1B3EA39E0](v29, -1, -1);
    }
    else
    {
    }
    id v31 = *a1;
    id v32 = objc_msgSend(*a1, sel_groupUUID);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    os_log_type_t v33 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v34 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a4) + 0x1B8))();
    if (*(void *)(v34 + 16) && (unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v13), (v36 & 1) != 0))
    {
      uint64_t v64 = a3;
      uint64_t v37 = *(void *)(v34 + 56) + 16 * v35;
      unint64_t v38 = *(void **)(v37 + 8);
      id v39 = *(id *)v37;
      id v40 = v38;
      swift_bridgeObjectRelease();
      type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for NSObject);
      id v41 = v39;
      LOBYTE(v39) = static NSObject.== infix(_:_:)();

      if (v39)
      {
        (*(void (**)(char *, id))(v68 + 8))(v13, v69);
        id v42 = *a1;

        *a1 = v40;
        return;
      }
      uint64_t v43 = a4;

      a3 = v64;
      os_log_type_t v33 = (void *)MEMORY[0x1E4FBC8C8];
    }
    else
    {
      uint64_t v43 = a4;
      swift_bridgeObjectRelease();
    }
    objc_msgSend(v31, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for TUConversationActivitySessionContainer);
    int v44 = swift_dynamicCast();
    id v45 = v70;
    id v46 = *a1;
    id v47 = (void *)MEMORY[0x1B3EA1B00](v66, a3);
    objc_msgSend(v67, sel_addAliasesToConversationContainer_forBundleIdentifier_, v46, v47);

    uint64_t v48 = v68;
    Class v49 = *(void (**)(void))(v68 + 16);
    uint64_t v50 = v65;
    uint64_t v67 = v13;
    v49();
    if (!v44 || (id v51 = v45) == 0)
    {
      id v51 = v46;
      id v45 = 0;
    }
    uint64_t v52 = *(uint64_t (**)(void *))((*v33 & *v43) + 0x1C8);
    id v53 = v46;
    id v54 = v45;
    id v55 = (void (*)(void *, void))v52(v71);
    uint64_t v57 = v56;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v70 = *v57;
    void *v57 = (void *)0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v51, (uint64_t)v53, v50, isUniquelyReferenced_nonNull_native);
    void *v57 = v70;
    swift_bridgeObjectRelease();
    uint64_t v59 = *(void (**)(uint64_t, id))(v48 + 8);
    id v60 = v69;
    v59(v50, v69);
    v55(v71, 0);

    v59((uint64_t)v67, v60);
  }
}

void specialized Set.union<A>(_:)(unint64_t a1, void *a2)
{
  unint64_t v2 = a1;
  v18[1] = a2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    Set.Iterator.init(_cocoa:)();
    unint64_t v2 = (unint64_t)v18[2];
    os_log_type_t v17 = v18[3];
    uint64_t v3 = (uint64_t)v18[4];
    id v4 = v18[5];
    unint64_t v5 = (unint64_t)v18[6];
  }
  else
  {
    id v4 = 0;
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    os_log_type_t v17 = (void *)(a1 + 56);
    uint64_t v3 = ~v6;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v5 = v8 & *(void *)(a1 + 56);
  }
  int64_t v9 = (unint64_t)(v3 + 64) >> 6;
  if ((v2 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v5)
    {
      uint64_t v10 = (v5 - 1) & v5;
      unint64_t v11 = __clz(__rbit64(v5)) | ((void)v4 << 6);
      uint64_t v12 = (char *)v4;
      goto LABEL_29;
    }
    uint64_t v14 = (uint64_t)v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (v14 >= v9) {
      goto LABEL_32;
    }
    unint64_t v15 = v17[v14];
    uint64_t v12 = (char *)v4 + 1;
    if (!v15)
    {
      uint64_t v12 = (char *)v4 + 2;
      if ((uint64_t)v4 + 2 >= v9) {
        goto LABEL_32;
      }
      unint64_t v15 = v17[(void)v12];
      if (!v15)
      {
        uint64_t v12 = (char *)v4 + 3;
        if ((uint64_t)v4 + 3 >= v9) {
          goto LABEL_32;
        }
        unint64_t v15 = v17[(void)v12];
        if (!v15)
        {
          uint64_t v12 = (char *)v4 + 4;
          if ((uint64_t)v4 + 4 >= v9) {
            goto LABEL_32;
          }
          unint64_t v15 = v17[(void)v12];
          if (!v15)
          {
            uint64_t v12 = (char *)v4 + 5;
            if ((uint64_t)v4 + 5 >= v9) {
              goto LABEL_32;
            }
            unint64_t v15 = v17[(void)v12];
            if (!v15)
            {
              id v16 = (char *)v4 + 6;
              while ((char *)v9 != v16)
              {
                unint64_t v15 = v17[(void)v16++];
                if (v15)
                {
                  uint64_t v12 = v16 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              outlined consume of [String : ()].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v10 = (v15 - 1) & v15;
    unint64_t v11 = __clz(__rbit64(v15)) + ((void)v12 << 6);
LABEL_29:
    id v13 = *(id *)(*(void *)(v2 + 48) + 8 * v11);
    if (!v13) {
      goto LABEL_32;
    }
    while (1)
    {
      specialized Set._Variant.insert(_:)(v18, v13);

      id v4 = v12;
      unint64_t v5 = v10;
      if ((v2 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v13 = v18[0];
        swift_unknownObjectRelease();
        uint64_t v12 = (char *)v4;
        uint64_t v10 = v5;
        if (v13) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

uint64_t CPConversationManagerDataSource.filteredSessions(for:connection:from:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  if (*((unsigned char *)a3 + direct field offset for XPCHostConnection.isEntitledToAccessAllSessions))
  {
    uint64_t v7 = v5;
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Log.default);
    swift_unknownObjectRetain_n();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      uint64_t v24 = v7;
      uint64_t v25 = v13;
      *(_DWORD *)uint64_t v12 = 136315138;
      uint64_t v14 = >> prefix<A>(_:)((uint64_t)&v24, a5);
      uint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v10, v11, "Passing up all sessions as %s is entitled", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v13, -1, -1);
      MEMORY[0x1B3EA39E0](v12, -1, -1);
    }
    else
    {

      swift_unknownObjectRelease_n();
    }
    return swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    id v19 = a3;
    specialized Sequence.compactMap<A>(_:)(a4, a1, a2, (uint64_t)v19);
    unint64_t v21 = v20;
    swift_bridgeObjectRelease();

    uint64_t v22 = specialized Set.init<A>(_:)(v21);
    swift_bridgeObjectRelease();
    return v22;
  }
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, int a2, void *a3)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, TUConversationActivitySessionContainer));
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  unint64_t v15 = (char *)v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(a1 + 16);
  if (!v16)
  {
    swift_bridgeObjectRelease();
    return;
  }
  LODWORD(v59) = a2;
  uint64_t v17 = *(int *)(v12 + 48);
  v56[0] = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v56[1] = v3;
  uint64_t v18 = a1 + v56[0];
  uint64_t v61 = *(void *)(v13 + 72);
  uint64_t v58 = a1;
  swift_bridgeObjectRetain();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v18, (uint64_t)v15, &demangling cache variable for type metadata for (UUID, TUConversationActivitySessionContainer));
  uint64_t v57 = v8;
  id v19 = *(void (**)(unint64_t, char *, uint64_t))(v8 + 32);
  uint64_t v62 = v7;
  uint64_t v63 = v19;
  v19((unint64_t)v10, v15, v7);
  uint64_t v60 = v17;
  unint64_t v20 = *(void **)&v15[v17];
  uint64_t v64 = a3;
  uint64_t v21 = *a3;
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
  uint64_t v24 = *(void *)(v21 + 16);
  BOOL v25 = (v22 & 1) == 0;
  uint64_t v26 = v24 + v25;
  if (__OFADD__(v24, v25)) {
    goto LABEL_24;
  }
  char v27 = v22;
  if (*(void *)(v21 + 24) >= v26)
  {
    if (v59)
    {
      if (v22) {
        goto LABEL_10;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if (v27) {
        goto LABEL_10;
      }
    }
LABEL_13:
    uint64_t v34 = (void *)*v64;
    *(void *)(*v64 + 8 * (v23 >> 6) + 64) |= 1 << v23;
    uint64_t v35 = v34[6];
    uint64_t v59 = *(void *)(v57 + 72);
    uint64_t v36 = v62;
    v63(v35 + v59 * v23, v10, v62);
    *(void *)(v34[7] + 8 * v23) = v20;
    uint64_t v37 = v34[2];
    BOOL v38 = __OFADD__(v37, 1);
    uint64_t v39 = v37 + 1;
    if (v38)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    uint64_t v34[2] = v39;
    uint64_t v40 = v16 - 1;
    if (v16 == 1)
    {
LABEL_23:
      swift_bridgeObjectRelease_n();
      return;
    }
    uint64_t v41 = v58 + v61 + v56[0];
    while (1)
    {
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v41, (uint64_t)v15, &demangling cache variable for type metadata for (UUID, TUConversationActivitySessionContainer));
      v63((unint64_t)v10, v15, v36);
      unint64_t v20 = *(void **)&v15[v60];
      id v42 = (void *)*v64;
      unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
      uint64_t v45 = v42[2];
      BOOL v46 = (v43 & 1) == 0;
      uint64_t v47 = v45 + v46;
      if (__OFADD__(v45, v46)) {
        break;
      }
      char v48 = v43;
      if (v42[3] < v47)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v47, 1);
        unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
        if ((v48 & 1) != (v50 & 1)) {
          goto LABEL_26;
        }
        unint64_t v44 = v49;
      }
      if (v48) {
        goto LABEL_10;
      }
      id v51 = (void *)*v64;
      *(void *)(*v64 + 8 * (v44 >> 6) + 64) |= 1 << v44;
      uint64_t v36 = v62;
      v63(v51[6] + v59 * v44, v10, v62);
      *(void *)(v51[7] + 8 * v44) = v20;
      uint64_t v52 = v51[2];
      BOOL v38 = __OFADD__(v52, 1);
      uint64_t v53 = v52 + 1;
      if (v38) {
        goto LABEL_25;
      }
      v51[2] = v53;
      v41 += v61;
      if (!--v40) {
        goto LABEL_23;
      }
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, v59 & 1);
  unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
  if ((v27 & 1) == (v29 & 1))
  {
    unint64_t v23 = v28;
    if ((v27 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    id v30 = (void *)swift_allocError();
    swift_willThrow();
    id v67 = v30;
    id v31 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    char v32 = swift_dynamicCast();
    uint64_t v33 = v62;
    if ((v32 & 1) == 0)
    {

      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v57 + 8))(v10, v33);
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_27;
  }
LABEL_26:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_27:
  uint64_t v65 = 0;
  unint64_t v66 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v54._object = (void *)0x80000001B11617F0;
  v54._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v54);
  _print_unlocked<A, B>(_:_:)();
  v55._countAndFlagsBits = 39;
  v55._object = (void *)0xE100000000000000;
  String.append(_:)(v55);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  void *v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  void *v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  char v47;
  char v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  Swift::String v52;
  Swift::String v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  id v67;
  uint64_t v68;

  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt64, UUID));
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  unint64_t v15 = (uint64_t *)((char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = *(void *)(a1 + 16);
  if (!v16)
  {
    swift_bridgeObjectRelease();
    return;
  }
  LODWORD(v60) = a2;
  uint64_t v56 = v3;
  uint64_t v57 = v16;
  uint64_t v17 = (char *)v15 + *(int *)(v12 + 48);
  Swift::String v55 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v18 = a1 + v55;
  uint64_t v62 = *(void *)(v13 + 72);
  uint64_t v59 = a1;
  swift_bridgeObjectRetain();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v18, (uint64_t)v15, &demangling cache variable for type metadata for (UInt64, UUID));
  uint64_t v58 = v8;
  id v19 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  uint64_t v68 = *v15;
  unint64_t v20 = v68;
  uint64_t v63 = v7;
  uint64_t v64 = v10;
  uint64_t v61 = v17;
  v19(v10, v17, v7);
  uint64_t v21 = (void *)*a3;
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v20);
  uint64_t v24 = v21[2];
  BOOL v25 = (v22 & 1) == 0;
  uint64_t v26 = v24 + v25;
  if (__OFADD__(v24, v25)) {
    goto LABEL_23;
  }
  char v27 = v22;
  if (v21[3] >= v26)
  {
    if (v60)
    {
      if (v22) {
        goto LABEL_10;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if (v27) {
        goto LABEL_10;
      }
    }
LABEL_13:
    char v32 = (void *)*a3;
    *(void *)(*a3 + 8 * (v23 >> 6) + 64) |= 1 << v23;
    *(void *)(v32[6] + 8 * v23) = v20;
    uint64_t v33 = v32[7];
    uint64_t v60 = *(void *)(v58 + 72);
    uint64_t v34 = v63;
    v19((char *)(v33 + v60 * v23), v64, v63);
    uint64_t v35 = v32[2];
    uint64_t v36 = __OFADD__(v35, 1);
    uint64_t v37 = v35 + 1;
    if (v36)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    long long v32[2] = v37;
    BOOL v38 = v57 - 1;
    if (v57 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    uint64_t v39 = v59 + v62 + v55;
    while (1)
    {
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v39, (uint64_t)v15, &demangling cache variable for type metadata for (UInt64, UUID));
      uint64_t v68 = *v15;
      uint64_t v40 = v68;
      v19(v64, v61, v34);
      uint64_t v41 = (void *)*a3;
      id v42 = specialized __RawDictionaryStorage.find<A>(_:)(v40);
      unint64_t v44 = v41[2];
      uint64_t v45 = (v43 & 1) == 0;
      uint64_t v36 = __OFADD__(v44, v45);
      BOOL v46 = v44 + v45;
      if (v36) {
        break;
      }
      uint64_t v47 = v43;
      if (v41[3] < v46)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v46, 1);
        id v42 = specialized __RawDictionaryStorage.find<A>(_:)(v40);
        if ((v47 & 1) != (v48 & 1)) {
          goto LABEL_25;
        }
      }
      if (v47) {
        goto LABEL_10;
      }
      unint64_t v49 = (void *)*a3;
      *(void *)(*a3 + 8 * (v42 >> 6) + 64) |= 1 << v42;
      *(void *)(v49[6] + 8 * v42) = v40;
      uint64_t v34 = v63;
      v19((char *)(v49[7] + v60 * v42), v64, v63);
      char v50 = v49[2];
      uint64_t v36 = __OFADD__(v50, 1);
      id v51 = v50 + 1;
      if (v36) {
        goto LABEL_24;
      }
      v49[2] = v51;
      v39 += v62;
      if (!--v38) {
        goto LABEL_22;
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, v60 & 1);
  unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v20);
  if ((v27 & 1) == (v29 & 1))
  {
    unint64_t v23 = v28;
    if ((v27 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    id v30 = (void *)swift_allocError();
    swift_willThrow();
    id v67 = v30;
    id v31 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v64, v63);
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  uint64_t v65 = 0;
  unint64_t v66 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v52._object = (void *)0x80000001B11617F0;
  v52._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v52);
  _print_unlocked<A, B>(_:_:)();
  v53._countAndFlagsBits = 39;
  v53._object = (void *)0xE100000000000000;
  String.append(_:)(v53);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

char *specialized ConversationManagerHost.__allocating_init(dataSource:featureFlags:)(uint64_t a1, uint64_t a2, Class a3)
{
  uint64_t v5 = (char *)objc_allocWithZone(a3);
  return specialized ConversationManagerHost.init(dataSource:featureFlags:)(a1, a2, v5);
}

char *specialized ConversationManagerHost.init(dataSource:featureFlags:)(uint64_t a1, void *a2, char *a3)
{
  char v43 = a2;
  uint64_t v45 = a1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v41 = *(void *)(v4 - 8);
  uint64_t v42 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v7);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v9 = OBJC_IVAR___CPConversationManagerHost_serverBag;
  id v10 = objc_allocWithZone((Class)CPSharedConversationServerBag);
  uint64_t v11 = a3;
  *(void *)&a3[v9] = objc_msgSend(v10, sel_init);
  uint64_t v12 = OBJC_IVAR___CPConversationManagerHost_queue;
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v47 = 0;
  unint64_t v48 = 0xE000000000000000;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  uint64_t v47 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v41 + 104))(v6, *MEMORY[0x1E4FBCC58], v42);
  *(void *)&v11[v12] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v13 = OBJC_IVAR___CPConversationManagerHost_listener;
  id v14 = objc_allocWithZone(MEMORY[0x1E4F29290]);
  unint64_t v15 = (void *)MEMORY[0x1B3EA1B00](0xD000000000000032, 0x80000001B115A770);
  id v16 = objc_msgSend(v14, sel_initWithMachServiceName_, v15);

  *(void *)&v11[v13] = v16;
  uint64_t v17 = OBJC_IVAR___CPConversationManagerHost_listenerDeprecated;
  id v18 = objc_allocWithZone(MEMORY[0x1E4F29290]);
  id v19 = (void *)MEMORY[0x1B3EA1B00](0xD00000000000002CLL, 0x80000001B115A740);
  id v20 = objc_msgSend(v18, sel_initWithMachServiceName_, v19);

  *(void *)&v11[v17] = v20;
  uint64_t v21 = MEMORY[0x1E4FBC860];
  uint64_t v22 = MEMORY[0x1E4FBC870];
  uint64_t v23 = MEMORY[0x1E4FBC870];
  if ((MEMORY[0x1E4FBC860] & 0xC000000000000000) != 0)
  {
    if (_CocoaArrayWrapper.endIndex.getter()) {
      specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860]);
    }
    else {
      uint64_t v23 = MEMORY[0x1E4FBC870];
    }
  }
  *(void *)&v11[OBJC_IVAR___CPConversationManagerHost_connections] = v23;
  *(void *)&v11[OBJC_IVAR___CPConversationManagerHost_subscriptions] = v22;
  *(void *)&v11[OBJC_IVAR___CPConversationManagerHost_pendingEndpointRequests] = v21;
  uint64_t v24 = &v11[OBJC_IVAR___CPConversationManagerHost____lazy_storage___protectedStorage];
  *(_OWORD *)uint64_t v24 = 0u;
  *((_OWORD *)v24 + 1) = 0u;
  *((void *)v24 + 4) = 0;
  *(void *)&v11[OBJC_IVAR___CPConversationManagerHost_dataSource] = v45;
  BOOL v25 = v43;
  *(void *)&v11[OBJC_IVAR___CPConversationManagerHost_featureFlags] = v43;
  uint64_t v26 = *(void **)&v11[v12];
  type metadata accessor for DarwinNotification();
  swift_allocObject();
  swift_unknownObjectRetain();
  id v27 = v25;
  id v28 = v26;
  *(void *)&v11[OBJC_IVAR___CPConversationManagerHost_clientShouldConnectNotification] = DarwinNotification.init(name:queue:)(0xD00000000000003ALL, 0x80000001B115A680, v28);
  swift_allocObject();
  *(void *)&v11[OBJC_IVAR___CPConversationManagerHost_clientShouldConnectIfCanBypassSharePlayRestrictionNotification] = DarwinNotification.init(name:queue:)(0xD000000000000056, 0x80000001B115A6C0, v28);

  v46.receiver = v11;
  v46.super_class = ObjectType;
  char v29 = (char *)objc_msgSendSuper2(&v46, sel_init);
  id v30 = *(void **)&v29[OBJC_IVAR___CPConversationManagerHost_dataSource];
  uint64_t v31 = OBJC_IVAR___CPConversationManagerHost_queue;
  uint64_t v32 = *(void *)&v29[OBJC_IVAR___CPConversationManagerHost_queue];
  uint64_t v33 = v29;
  objc_msgSend(v30, sel_addObserver_queue_, v33, v32);
  id v34 = objc_msgSend(v30, sel_activityAuthorizationManager);
  id v35 = objc_msgSend(v34, sel_neighborhoodActivityConduit);

  objc_msgSend(v35, sel_addDelegate_queue_, v33, *(void *)&v29[v31]);
  uint64_t v36 = *(void **)&v33[OBJC_IVAR___CPConversationManagerHost_listener];
  objc_msgSend(v36, sel_setDelegate_, v33);
  objc_msgSend(v36, sel_resume);
  uint64_t v37 = *(void **)&v33[OBJC_IVAR___CPConversationManagerHost_listenerDeprecated];
  objc_msgSend(v37, sel_setDelegate_, v33);
  id v38 = v37;
  objc_msgSend(v38, sel_resume);

  swift_unknownObjectRelease();
  return v33;
}

char *specialized ConversationManagerHost.init(dataSource:featureFlags:)(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v43 = a1;
  uint64_t v44 = a2;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v40 = *(void *)(v4 - 8);
  uint64_t v41 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v7);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v9 = OBJC_IVAR___CPConversationManagerHost_serverBag;
  id v10 = objc_allocWithZone((Class)CPSharedConversationServerBag);
  uint64_t v11 = a3;
  *(void *)&a3[v9] = objc_msgSend(v10, sel_init);
  uint64_t v12 = OBJC_IVAR___CPConversationManagerHost_queue;
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v46 = 0;
  unint64_t v47 = 0xE000000000000000;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  uint64_t v46 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v40 + 104))(v6, *MEMORY[0x1E4FBCC58], v41);
  *(void *)&v11[v12] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v13 = OBJC_IVAR___CPConversationManagerHost_listener;
  id v14 = objc_allocWithZone(MEMORY[0x1E4F29290]);
  unint64_t v15 = (void *)MEMORY[0x1B3EA1B00](0xD000000000000032, 0x80000001B115A770);
  id v16 = objc_msgSend(v14, sel_initWithMachServiceName_, v15);

  *(void *)&v11[v13] = v16;
  uint64_t v17 = OBJC_IVAR___CPConversationManagerHost_listenerDeprecated;
  id v18 = objc_allocWithZone(MEMORY[0x1E4F29290]);
  id v19 = (void *)MEMORY[0x1B3EA1B00](0xD00000000000002CLL, 0x80000001B115A740);
  id v20 = objc_msgSend(v18, sel_initWithMachServiceName_, v19);

  *(void *)&v11[v17] = v20;
  uint64_t v21 = MEMORY[0x1E4FBC860];
  uint64_t v22 = MEMORY[0x1E4FBC870];
  uint64_t v23 = MEMORY[0x1E4FBC870];
  if ((MEMORY[0x1E4FBC860] & 0xC000000000000000) != 0)
  {
    if (_CocoaArrayWrapper.endIndex.getter()) {
      specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860]);
    }
    else {
      uint64_t v23 = MEMORY[0x1E4FBC870];
    }
  }
  *(void *)&v11[OBJC_IVAR___CPConversationManagerHost_connections] = v23;
  *(void *)&v11[OBJC_IVAR___CPConversationManagerHost_subscriptions] = v22;
  *(void *)&v11[OBJC_IVAR___CPConversationManagerHost_pendingEndpointRequests] = v21;
  uint64_t v24 = &v11[OBJC_IVAR___CPConversationManagerHost____lazy_storage___protectedStorage];
  *(_OWORD *)uint64_t v24 = 0u;
  *((_OWORD *)v24 + 1) = 0u;
  *((void *)v24 + 4) = 0;
  uint64_t v25 = v44;
  *(void *)&v11[OBJC_IVAR___CPConversationManagerHost_dataSource] = v43;
  *(void *)&v11[OBJC_IVAR___CPConversationManagerHost_featureFlags] = v25;
  uint64_t v26 = *(void **)&v11[v12];
  type metadata accessor for DarwinNotification();
  swift_allocObject();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  id v27 = v26;
  *(void *)&v11[OBJC_IVAR___CPConversationManagerHost_clientShouldConnectNotification] = DarwinNotification.init(name:queue:)(0xD00000000000003ALL, 0x80000001B115A680, v27);
  swift_allocObject();
  *(void *)&v11[OBJC_IVAR___CPConversationManagerHost_clientShouldConnectIfCanBypassSharePlayRestrictionNotification] = DarwinNotification.init(name:queue:)(0xD000000000000056, 0x80000001B115A6C0, v27);

  v45.receiver = v11;
  v45.super_class = ObjectType;
  id v28 = (char *)objc_msgSendSuper2(&v45, sel_init);
  char v29 = *(void **)&v28[OBJC_IVAR___CPConversationManagerHost_dataSource];
  uint64_t v30 = OBJC_IVAR___CPConversationManagerHost_queue;
  uint64_t v31 = *(void *)&v28[OBJC_IVAR___CPConversationManagerHost_queue];
  uint64_t v32 = v28;
  objc_msgSend(v29, sel_addObserver_queue_, v32, v31);
  id v33 = objc_msgSend(v29, sel_activityAuthorizationManager);
  id v34 = objc_msgSend(v33, sel_neighborhoodActivityConduit);

  objc_msgSend(v34, sel_addDelegate_queue_, v32, *(void *)&v28[v30]);
  id v35 = *(void **)&v32[OBJC_IVAR___CPConversationManagerHost_listener];
  objc_msgSend(v35, sel_setDelegate_, v32);
  objc_msgSend(v35, sel_resume);
  uint64_t v36 = *(void **)&v32[OBJC_IVAR___CPConversationManagerHost_listenerDeprecated];
  objc_msgSend(v36, sel_setDelegate_, v32);
  id v37 = v36;
  objc_msgSend(v37, sel_resume);

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v32;
}

char *specialized ConversationManagerHostConnection.init(connection:queue:featureFlags:serverBag:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a5 + direct field offset for ConversationManagerHostConnection.delegate + 8) = 0;
  swift_unknownObjectWeakInit();
  *(unsigned char *)(a5 + direct field offset for ConversationManagerHostConnection.hasRequestedState) = 0;
  *(void *)(a5 + direct field offset for ConversationManagerHostConnection.aliasedConversationContainers) = MEMORY[0x1E4FBC868];
  uint64_t v10 = a5 + direct field offset for ConversationManagerHostConnection.$__lazy_storage_$_protectedStorage;
  *(void *)(v10 + 32) = 0;
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(void *)(a5 + direct field offset for ConversationManagerHostConnection.identifiersForCustomEndpoints) = MEMORY[0x1E4FBC870];
  *(void *)(a5 + direct field offset for ConversationManagerHostConnection.featureFlags) = a3;
  *(void *)(a5 + direct field offset for ConversationManagerHostConnection.serverBag) = a4;
  return specialized XPCHostConnection.init(connection:queue:)(a1, a2);
}

{
  uint64_t v10;

  *(void *)(a5 + direct field offset for ConversationManagerHostConnection.delegate + 8) = 0;
  swift_unknownObjectWeakInit();
  *(unsigned char *)(a5 + direct field offset for ConversationManagerHostConnection.hasRequestedState) = 0;
  *(void *)(a5 + direct field offset for ConversationManagerHostConnection.aliasedConversationContainers) = MEMORY[0x1E4FBC868];
  uint64_t v10 = a5 + direct field offset for ConversationManagerHostConnection.$__lazy_storage_$_protectedStorage;
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(void *)(v10 + 32) = 0;
  *(void *)(a5 + direct field offset for ConversationManagerHostConnection.identifiersForCustomEndpoints) = MEMORY[0x1E4FBC870];
  *(void *)(a5 + direct field offset for ConversationManagerHostConnection.featureFlags) = a3;
  *(void *)(a5 + direct field offset for ConversationManagerHostConnection.serverBag) = a4;
  return specialized XPCHostConnection.init(connection:queue:)(a1, a2);
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, void (*a2)(char *, id))
{
  uint64_t v42 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, TUConversationActivitySessionContainer)?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, TUConversationActivitySessionContainer));
  uint64_t v6 = *(void *)(v41 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v41);
  uint64_t v36 = (uint64_t)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v34 = (uint64_t)&v33 - v9;
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: TUConversation));
  MEMORY[0x1F4188790](v40);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v38 = a1 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v39 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v35 = v6;
  id v16 = (unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v18 = 0;
  unint64_t v37 = MEMORY[0x1E4FBC860];
  if (!v15) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v19 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (unint64_t i = v19 | (v18 << 6); ; unint64_t i = __clz(__rbit64(v26)) + (v18 << 6))
  {
    uint64_t v21 = *(void *)(a1 + 48);
    uint64_t v22 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v11, v21 + *(void *)(*(void *)(v22 - 8) + 72) * i, v22);
    uint64_t v23 = *(void **)(*(void *)(a1 + 56) + 8 * i);
    *(void *)&v11[*(int *)(v40 + 48)] = v23;
    id v24 = v23;
    v42(v11, v24);
    outlined destroy of UUID?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: TUConversation));
    if ((*v16)(v5, 1, v41) == 1)
    {
      uint64_t result = outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for (UUID, TUConversationActivitySessionContainer)?);
      if (v15) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v28 = v34;
      outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)v5, v34, &demangling cache variable for type metadata for (UUID, TUConversationActivitySessionContainer));
      outlined init with take of PluginClientMetrics.ConnectionEstablishment?(v28, v36, &demangling cache variable for type metadata for (UUID, TUConversationActivitySessionContainer));
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v37 + 16) + 1, 1, v37);
      }
      unint64_t v30 = *(void *)(v37 + 16);
      unint64_t v29 = *(void *)(v37 + 24);
      if (v30 >= v29 >> 1) {
        unint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1, v37);
      }
      uint64_t v31 = v36;
      unint64_t v32 = v37;
      *(void *)(v37 + 16) = v30 + 1;
      uint64_t result = outlined init with take of PluginClientMetrics.ConnectionEstablishment?(v31, v32+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(void *)(v35 + 72) * v30, &demangling cache variable for type metadata for (UUID, TUConversationActivitySessionContainer));
      if (v15) {
        goto LABEL_4;
      }
    }
LABEL_7:
    int64_t v25 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v25 >= v39) {
      goto LABEL_29;
    }
    unint64_t v26 = *(void *)(v38 + 8 * v25);
    ++v18;
    if (!v26)
    {
      int64_t v18 = v25 + 1;
      if (v25 + 1 >= v39) {
        goto LABEL_29;
      }
      unint64_t v26 = *(void *)(v38 + 8 * v18);
      if (!v26)
      {
        int64_t v18 = v25 + 2;
        if (v25 + 2 >= v39) {
          goto LABEL_29;
        }
        unint64_t v26 = *(void *)(v38 + 8 * v18);
        if (!v26)
        {
          int64_t v18 = v25 + 3;
          if (v25 + 3 >= v39) {
            goto LABEL_29;
          }
          unint64_t v26 = *(void *)(v38 + 8 * v18);
          if (!v26) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v15 = (v26 - 1) & v26;
  }
  int64_t v27 = v25 + 4;
  if (v27 >= v39)
  {
LABEL_29:
    swift_release();
    return v37;
  }
  unint64_t v26 = *(void *)(v38 + 8 * v27);
  if (v26)
  {
    int64_t v18 = v27;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v18 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v18 >= v39) {
      goto LABEL_29;
    }
    unint64_t v26 = *(void *)(v38 + 8 * v18);
    ++v27;
    if (v26) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

void specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a1;
  uint64_t v38 = MEMORY[0x1E4FBC860];
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    Set.Iterator.init(_cocoa:)();
    uint64_t v6 = v33;
    uint64_t v30 = v34;
    uint64_t v7 = v35;
    int64_t v8 = v36;
    unint64_t v9 = v37;
  }
  else
  {
    uint64_t v10 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v30 = a1 + 56;
    uint64_t v7 = ~v10;
    uint64_t v11 = -v10;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v9 = v12 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v8 = 0;
  }
  int64_t v29 = (unint64_t)(v7 + 64) >> 6;
  while (v6 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_47;
    }
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v16 = v32;
    swift_unknownObjectRelease();
    int64_t v15 = v8;
    uint64_t v13 = v9;
    if (!v32) {
      goto LABEL_47;
    }
LABEL_28:
    id v19 = objc_msgSend(v16, sel_activity);
    id v20 = objc_msgSend(v19, sel_bundleIdentifier);

    if (v20)
    {
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v23 = v22;

      if (v21 == a2 && v23 == a3)
      {
        swift_bridgeObjectRelease();
LABEL_33:
        if (!objc_msgSend(v16, sel_state) || objc_msgSend(v16, sel_state) == (id)1) {
          goto LABEL_37;
        }
        goto LABEL_35;
      }
      char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v24) {
        goto LABEL_33;
      }
    }
LABEL_35:
    if ((*(unsigned char *)(a4 + direct field offset for XPCHostConnection.isEntitledToForWebFallback) & 1) == 0
      || (id v25 = objc_msgSend(v16, sel_activity),
          unsigned __int8 v26 = objc_msgSend(v25, sel_isEligibleForWebBrowser),
          v25,
          (v26 & 1) == 0))
    {

      goto LABEL_9;
    }
LABEL_37:
    id v27 = objc_msgSend(v16, sel_publicCopy);

    int64_t v8 = v15;
    unint64_t v9 = v13;
    if (v27)
    {
      MEMORY[0x1B3EA1CF0]();
      if (*(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
LABEL_9:
      int64_t v8 = v15;
      unint64_t v9 = v13;
    }
  }
  if (v9)
  {
    uint64_t v13 = (v9 - 1) & v9;
    unint64_t v14 = __clz(__rbit64(v9)) | (v8 << 6);
    int64_t v15 = v8;
LABEL_27:
    id v16 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
    if (!v16) {
      goto LABEL_47;
    }
    goto LABEL_28;
  }
  int64_t v15 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v15 >= v29) {
      goto LABEL_47;
    }
    unint64_t v17 = *(void *)(v30 + 8 * v15);
    if (!v17)
    {
      int64_t v18 = v8 + 2;
      if (v8 + 2 >= v29) {
        goto LABEL_47;
      }
      unint64_t v17 = *(void *)(v30 + 8 * v18);
      if (v17) {
        goto LABEL_25;
      }
      int64_t v18 = v8 + 3;
      if (v8 + 3 >= v29) {
        goto LABEL_47;
      }
      unint64_t v17 = *(void *)(v30 + 8 * v18);
      if (v17) {
        goto LABEL_25;
      }
      int64_t v18 = v8 + 4;
      if (v8 + 4 >= v29) {
        goto LABEL_47;
      }
      unint64_t v17 = *(void *)(v30 + 8 * v18);
      if (v17)
      {
LABEL_25:
        int64_t v15 = v18;
      }
      else
      {
        int64_t v15 = v8 + 5;
        if (v8 + 5 >= v29) {
          goto LABEL_47;
        }
        unint64_t v17 = *(void *)(v30 + 8 * v15);
        if (!v17)
        {
          int64_t v28 = v8 + 6;
          while (v29 != v28)
          {
            unint64_t v17 = *(void *)(v30 + 8 * v28++);
            if (v17)
            {
              int64_t v15 = v28 - 1;
              goto LABEL_26;
            }
          }
LABEL_47:
          outlined consume of [String : ()].Iterator._Variant();
          return;
        }
      }
    }
LABEL_26:
    uint64_t v13 = (v17 - 1) & v17;
    unint64_t v14 = __clz(__rbit64(v17)) + (v15 << 6);
    goto LABEL_27;
  }
  __break(1u);
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (void (*)(void))type metadata accessor for Attachment);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (void (*)(void))type metadata accessor for PubSubTopic.SendItem);
}

uint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(unint64_t *a1, uint64_t a2)
{
  uint64_t v59 = type metadata accessor for ConversationManagerHost.EndpointRequest();
  uint64_t v4 = *(void *)(v59 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v59);
  uint64_t v53 = (uint64_t)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v52 = (uint64_t)&v50 - v8;
  MEMORY[0x1F4188790](v7);
  uint64_t v62 = (uint64_t)&v50 - v9;
  uint64_t v10 = type metadata accessor for UUID();
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = a1;
  unint64_t v14 = *a1;
  uint64_t v51 = *(void *)(*a1 + 16);
  if (!v51) {
    return 0;
  }
  unint64_t v57 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v15 = v14 + v57;
  uint64_t v16 = *(void *)(v4 + 72);
  uint64_t v63 = v11 + 16;
  uint64_t v64 = a2 + 56;
  uint64_t v54 = v11;
  unint64_t v17 = (void (**)(char *, uint64_t))(v11 + 8);
  swift_bridgeObjectRetain();
  unint64_t v18 = 0;
  uint64_t v65 = a2;
  uint64_t v56 = v16;
  unint64_t v50 = v15;
  while (1)
  {
    unint64_t v61 = v18;
    unint64_t v55 = v15 + v16 * v18;
    if (!*(void *)(a2 + 16)) {
      break;
    }
    unint64_t v19 = v55 + *(int *)(v59 + 20);
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    unint64_t v60 = v19;
    uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v21 = v65;
    uint64_t v22 = -1 << *(unsigned char *)(v65 + 32);
    unint64_t v23 = v20 & ~v22;
    if (((*(void *)(v64 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
      break;
    }
    uint64_t v24 = ~v22;
    uint64_t v25 = *(void *)(v54 + 72);
    unsigned __int8 v26 = *(void (**)(char *, unint64_t, uint64_t))(v54 + 16);
    while (1)
    {
      v26(v13, *(void *)(v21 + 48) + v25 * v23, v10);
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v17)(v13, v10);
      if (v27) {
        break;
      }
      unint64_t v23 = (v23 + 1) & v24;
      uint64_t v21 = v65;
      if (((*(void *)(v64 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
        goto LABEL_11;
      }
    }
    unint64_t v18 = v61 + 1;
    unint64_t v15 = v50;
    a2 = v65;
    uint64_t v16 = v56;
    if (v61 + 1 == v51)
    {
      swift_bridgeObjectRelease();
      return *(void *)(v14 + 16);
    }
  }
LABEL_11:
  (*(void (**)(void))(v55 + *(int *)(v59 + 28)))(0);
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v28 = v61;
  unint64_t v30 = v61 + 1;
  if (!__OFADD__(v61, 1))
  {
    while (1)
    {
      unint64_t v31 = *(void *)(v14 + 16);
      if (v30 == v31) {
        return v28;
      }
      if (v30 >= v31)
      {
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        break;
      }
      unint64_t v60 = v30;
      unint64_t v61 = v28;
      unint64_t v55 = v30 * v56;
      outlined init with copy of ConversationManagerHost.EndpointRequest(v14 + v57 + v30 * v56, v62);
      if (*(void *)(v65 + 16)
        && (lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]), uint64_t v32 = dispatch thunk of Hashable._rawHashValue(seed:)(), v33 = v65, v34 = -1 << *(unsigned char *)(v65 + 32), v35 = v32 & ~v34, ((*(void *)(v64 + ((v35 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v35) & 1) != 0))
      {
        uint64_t v36 = ~v34;
        uint64_t v37 = *(void *)(v54 + 72);
        uint64_t v38 = *(void (**)(char *, unint64_t, uint64_t))(v54 + 16);
        while (1)
        {
          v38(v13, *(void *)(v33 + 48) + v37 * v35, v10);
          lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
          char v39 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*v17)(v13, v10);
          if (v39) {
            break;
          }
          unint64_t v35 = (v35 + 1) & v36;
          uint64_t v33 = v65;
          if (((*(void *)(v64 + ((v35 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v35) & 1) == 0) {
            goto LABEL_19;
          }
        }
        uint64_t result = outlined destroy of ConversationManagerHost.EndpointRequest(v62);
        unint64_t v41 = v60;
        unint64_t v43 = v61;
        if (v61 != v60)
        {
          if ((v61 & 0x8000000000000000) != 0) {
            goto LABEL_39;
          }
          unint64_t v44 = *v58;
          unint64_t v45 = *(void *)(*v58 + 16);
          if (v61 >= v45) {
            goto LABEL_40;
          }
          unint64_t v46 = v57;
          unint64_t v47 = v44 + v57;
          uint64_t v48 = v61 * v56;
          uint64_t result = outlined init with copy of ConversationManagerHost.EndpointRequest(v44 + v57 + v61 * v56, v52);
          if (v60 >= v45) {
            goto LABEL_41;
          }
          unint64_t v49 = v55;
          outlined init with copy of ConversationManagerHost.EndpointRequest(v47 + v55, v53);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          *uint64_t v58 = v44;
          if ((result & 1) == 0)
          {
            uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()(v44);
            unint64_t v44 = result;
            *uint64_t v58 = result;
          }
          if (v43 >= *(void *)(v44 + 16)) {
            goto LABEL_42;
          }
          uint64_t result = outlined assign with take of ConversationManagerHost.EndpointRequest(v53, v44 + v46 + v48);
          unint64_t v41 = v60;
          if (v60 >= *(void *)(*v58 + 16)) {
            goto LABEL_43;
          }
          uint64_t result = outlined assign with take of ConversationManagerHost.EndpointRequest(v52, *v58 + v46 + v49);
        }
        BOOL v42 = __OFADD__(v43, 1);
        unint64_t v28 = v43 + 1;
        if (v42) {
          goto LABEL_38;
        }
      }
      else
      {
LABEL_19:
        uint64_t v40 = v62;
        (*(void (**)(void))(v62 + *(int *)(v59 + 28)))(0);
        uint64_t result = outlined destroy of ConversationManagerHost.EndpointRequest(v40);
        unint64_t v41 = v60;
        unint64_t v28 = v61;
      }
      BOOL v42 = __OFADD__(v41, 1);
      unint64_t v30 = v41 + 1;
      if (v42) {
        goto LABEL_37;
      }
      unint64_t v14 = *v58;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  unint64_t v4 = *v2;
  int64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *(void *)(v4 + 24) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t v12 = *(void *)(type metadata accessor for ConversationManagerHost.EndpointRequest() - 8);
  unint64_t v13 = v4 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  uint64_t v14 = *(void *)(v12 + 72);
  uint64_t v15 = v14 * a1;
  unint64_t v16 = v13 + v14 * a1;
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_25;
  }
  uint64_t v18 = *(void *)(v4 + 16);
  uint64_t v19 = v18 - a2;
  if (__OFSUB__(v18, a2)) {
    goto LABEL_31;
  }
  if ((v19 & 0x8000000000000000) == 0)
  {
    if (v15 < v14 * a2 || v16 >= v13 + v14 * a2 + v19 * v14)
    {
      uint64_t result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (v15 != v14 * a2)
    {
      uint64_t result = swift_arrayInitWithTakeBackToFront();
    }
    uint64_t v21 = *(void *)(v4 + 16);
    BOOL v22 = __OFADD__(v21, v8);
    uint64_t v23 = v21 - v7;
    if (!v22)
    {
      *(void *)(v4 + 16) = v23;
LABEL_25:
      *unint64_t v2 = v4;
      return result;
    }
    goto LABEL_32;
  }
LABEL_33:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  unint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, (unint64_t)v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_22;
  }
  unint64_t v13 = v4[2];
  uint64_t v14 = v13 - a2;
  if (__OFSUB__(v13, a2)) {
    goto LABEL_28;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    if (a1 < a2 || &v4[8 * a1 + 4] >= &v4[8 * a2 + 4 + 8 * v14])
    {
      uint64_t result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (a1 != a2)
    {
      uint64_t result = swift_arrayInitWithTakeBackToFront();
    }
    uint64_t v15 = v4[2];
    unint64_t v16 = __OFADD__(v15, v8);
    unint64_t v17 = v15 - v7;
    if (!v16)
    {
      v4[2] = v17;
LABEL_22:
      *(void *)unint64_t v2 = v4;
      return result;
    }
    goto LABEL_29;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  unint64_t v13 = v4[2];
  uint64_t v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    unint64_t v16 = (char *)&v4[2 * a2 + 4];
    if (a1 != a2 || &v4[2 * a1 + 4] >= (void *)&v16[16 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[2 * a1 + 4], v16, 16 * v15);
    }
    unint64_t v17 = v4[2];
    uint64_t v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)unint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized ConversationManagerHost.conversationManager(_:conversationChanged:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = &v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = *(void **)(v1 + OBJC_IVAR___CPConversationManagerHost_queue);
  *uint64_t v6 = v7;
  unsigned int v8 = *MEMORY[0x1E4FBCBF0];
  int64_t v9 = *(void (**)(void *, void, uint64_t))(v4 + 104);
  v9(v6, *MEMORY[0x1E4FBCBF0], v3);
  id v24 = v7;
  char v10 = _dispatchPreconditionTest(_:)();
  int64_t v11 = *(uint64_t (**)(void *, uint64_t))(v4 + 8);
  uint64_t result = v11(v6, v3);
  if (v10)
  {
    ConversationManagerHost.updateClientShouldConnectNotification()();
    id v13 = objc_msgSend(*(id *)(v1 + OBJC_IVAR___CPConversationManagerHost_dataSource), sel_conversationsByGroupUUID);
    unsigned int v22 = v8;
    uint64_t v14 = a1;
    id v15 = v13;
    type metadata accessor for UUID();
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
    uint64_t v23 = v11;
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    ConversationManagerHost.cleanUpPendingEndpointRequests(conversationsByGroupUUID:)(v16);
    MEMORY[0x1F4188790](v17);
    *(void *)&v21[-32] = v14;
    *(void *)&v21[-24] = v16;
    *(void *)&v21[-16] = v1;
    uint64_t v18 = v24;
    *uint64_t v6 = v24;
    v9(v6, v22, v3);
    id v19 = v18;
    LOBYTE(v18) = _dispatchPreconditionTest(_:)();
    uint64_t result = v23(v6, v3);
    if (v18)
    {
      swift_beginAccess();
      uint64_t v20 = swift_bridgeObjectRetain();
      specialized Sequence.forEach(_:)(v20, (void (*)(id))partial apply for closure #1 in ConversationManagerHost.conversationManager(_:conversationChanged:));
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in CPConversationManagerDataSource.conversationContainersByGroupUUID(from:connection:protectedStorage:)@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  return closure #1 in CPConversationManagerDataSource.conversationContainersByGroupUUID(from:connection:protectedStorage:)(a1, *(char **)(v2 + 32), *(void **)(v2 + 40), *(void *)(v2 + 16), a2);
}

uint64_t specialized ConversationManagerHost.conversationManager(_:sharePlayAllowedChanged:)(int a1)
{
  uint64_t v2 = (uint64_t (*)(void *, uint64_t))v1;
  int v30 = a1;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (uint64_t (**)(void *, uint64_t))((char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void **)&v1[OBJC_IVAR___CPConversationManagerHost_queue];
  *uint64_t v6 = v7;
  uint64_t v8 = *MEMORY[0x1E4FBCBF0];
  int64_t v9 = *(void (**)(void *, uint64_t, uint64_t))(v4 + 104);
  v9(v6, v8, v3);
  id v29 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  char v10 = *(void (**)(void *, uint64_t))(v4 + 8);
  v10(v6, v3);
  if (v7)
  {
    char v27 = (uint64_t (*)(void *, uint64_t))v10;
    unint64_t v28 = v9;
    if (one-time initialization token for host == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.host);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = v8;
    id v15 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v15 = 67109120;
    int v31 = v30 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B0DF7000, v12, v13, "sharePlayAllowedChanged to %{BOOL}d", v15, 8u);
    uint64_t v16 = v15;
    uint64_t v8 = v14;
    MEMORY[0x1B3EA39E0](v16, -1, -1);
  }

  uint64_t result = ConversationManagerHost.updateClientShouldConnectNotification()();
  if ((v30 & 1) == 0)
  {
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl(&dword_1B0DF7000, v18, v19, "Killing connections to clients since SharePlay is not allowed", v20, 2u);
      MEMORY[0x1B3EA39E0](v20, -1, -1);
    }

    MEMORY[0x1F4188790](v21);
    *(&v27 - 2) = v2;
    unsigned int v22 = v28;
    uint64_t v23 = v29;
    *uint64_t v6 = v29;
    v22(v6, v8, v3);
    id v24 = v23;
    char v25 = _dispatchPreconditionTest(_:)();
    uint64_t result = v27(v6, v3);
    if (v25)
    {
      swift_beginAccess();
      uint64_t v26 = swift_bridgeObjectRetain();
      specialized Sequence.forEach(_:)(v26, (void (*)(id))partial apply for closure #1 in ConversationManagerHost.conversationManager(_:sharePlayAllowedChanged:));
      return swift_bridgeObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t specialized ConversationManagerHost.conversationManager(_:requestedEndpointWithIdentifier:activitySession:completion:)(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v58 = a1;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v59 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  unint64_t v57 = (char *)v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (void *)((char *)v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = *(void **)(v5 + OBJC_IVAR___CPConversationManagerHost_queue);
  *uint64_t v16 = v17;
  uint64_t v18 = *(void (**)(void))(v14 + 104);
  unsigned int v55 = *MEMORY[0x1E4FBCBF0];
  uint64_t v56 = v14 + 104;
  uint64_t v54 = (void (*)(void *, void, uint64_t))v18;
  v18(v16);
  id v52 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  uint64_t v53 = *(void (**)(void *, uint64_t))(v14 + 8);
  v53(v16, v13);
  if (v17)
  {
    uint64_t v49 = a4;
    if (one-time initialization token for host == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  id v20 = a3;
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  int v23 = v22;
  BOOL v24 = os_log_type_enabled(v21, v22);
  uint64_t v50 = a5;
  uint64_t v51 = v11;
  if (v24)
  {
    uint64_t v25 = swift_slowAlloc();
    uint64_t v48 = v6;
    uint64_t v26 = v25;
    uint64_t v47 = swift_slowAlloc();
    v62[0] = v47;
    *(_DWORD *)uint64_t v26 = 136315394;
    int v46 = v23;
    swift_bridgeObjectRetain();
    uint64_t v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, a2, v62);
    v45[1] = &v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v26 + 12) = 2080;
    id v27 = objc_msgSend(v20, sel_UUID, v26 + 14);
    uint64_t v28 = (uint64_t)v57;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v30 = v11;
    unint64_t v32 = v31;
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v28, v30);
    uint64_t v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v32, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v21, (os_log_type_t)v46, "requestedEndpoint identifier=%s activitySessionUUID=%s", (uint8_t *)v26, 0x16u);
    uint64_t v33 = v47;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v33, -1, -1);
    uint64_t v34 = v26;
    uint64_t v6 = v48;
    MEMORY[0x1B3EA39E0](v34, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v28 = (uint64_t)v57;
  }
  unint64_t v35 = a2;
  ConversationManagerHost.updateClientShouldConnectNotification()();
  id v36 = objc_msgSend(v20, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  id v37 = objc_msgSend(v20, sel_activity);
  uint64_t v38 = v52;
  *uint64_t v16 = v52;
  v54(v16, v55, v13);
  id v39 = v38;
  swift_bridgeObjectRetain();
  LOBYTE(v38) = _dispatchPreconditionTest(_:)();
  uint64_t result = ((uint64_t (*)(void *, uint64_t))v53)(v16, v13);
  if (v38)
  {
    swift_beginAccess();
    uint64_t v41 = swift_bridgeObjectRetain();
    uint64_t v42 = v58;
    specialized Sequence.first(where:)(v41, v58, a2);
    unint64_t v44 = v43;
    swift_bridgeObjectRelease();
    closure #2 in ConversationManagerHost.fetchEndpoint(for:activitySessionUUID:activity:completion:)(v44, v42, v35, v28, v37, v49, v50, v6);

    return (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 8))(v28, v51);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t block_destroy_helper_23()
{
  return swift_release();
}

uint64_t sub_1B1055870()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 40, 7);
}

void partial apply for closure #1 in ConversationManagerHost.conversationManagerHostConnection(_:createActivitySession:onConversationWithUUID:completion:)(void *a1)
{
  closure #1 in ConversationManagerHost.conversationManagerHostConnection(_:createActivitySession:onConversationWithUUID:completion:)(a1, *(void **)(v1 + 16), *(void (**)(void))(v1 + 24), *(void *)(v1 + 32));
}

void specialized MutableCollection._halfStablePartition(isSuffixElement:)(unint64_t *a1, objc_class *a2, uint64_t a3, void *a4)
{
  id v51 = a4;
  uint64_t v50 = type metadata accessor for ConversationManagerHost.EndpointRequest();
  uint64_t v7 = MEMORY[0x1F4188790](v50);
  uint64_t v48 = (uint64_t)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v47 = (uint64_t)&v45 - v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (objc_class **)((char *)&v45 - v12);
  uint64_t v54 = a1;
  unint64_t v14 = *a1;
  uint64_t v15 = *(void *)(*a1 + 16);
  unint64_t v16 = 0;
  if (v15)
  {
    unint64_t v17 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v55 = *(void *)(v11 + 72);
    unint64_t v46 = v17;
    while (1)
    {
      unint64_t v18 = v14 + v17;
      BOOL v19 = *(objc_class **)(v14 + v17) == a2 && *(void *)(v14 + v17 + 8) == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      ++v16;
      v17 += v55;
      if (v15 == v16) {
        return;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v53 = MEMORY[0x1B3EA1B00](a2, a3);
    uint64_t v20 = v50;
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    uint64_t v21 = *(int *)(v20 + 28);
    uint64_t v49 = *(void (***)(uint64_t, void *))(v14 + *(int *)(v20 + 24) + v17);
    uint64_t v22 = v18 + v21;
    uint64_t v23 = *(void *)(v18 + v21);
    uint64_t v24 = *(void *)(v22 + 8);
    uint64_t v60 = v23;
    uint64_t v61 = v24;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v57 = 1107296256;
    uint64_t v58 = thunk for @escaping @callee_guaranteed (@guaranteed NSXPCListenerEndpoint?) -> ();
    uint64_t v59 = &block_descriptor_21;
    uint64_t v25 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    Class v26 = isa;
    id v27 = (void *)v53;
    objc_msgSend(v51, sel_requestEndpointWith_activitySessionUUID_activity_completion_, v53, isa, v49, v25);
    _Block_release(v25);
    swift_bridgeObjectRelease();

    if (!__OFADD__(v16, 1))
    {
      unint64_t v28 = *(void *)(v14 + 16);
      if (v16 + 1 == v28) {
        return;
      }
      uint64_t v29 = v55 + v17;
      unint64_t v30 = v16 + 1;
      uint64_t v49 = &v58;
      Class isa = a2;
      uint64_t v53 = a3;
      while (v30 < v28)
      {
        outlined init with copy of ConversationManagerHost.EndpointRequest(v14 + v29, (uint64_t)v13);
        BOOL v31 = *v13 == a2 && v13[1] == (objc_class *)a3;
        if (v31 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          unint64_t v32 = (void *)MEMORY[0x1B3EA1B00](a2, a3);
          uint64_t v33 = v50;
          Class v34 = UUID._bridgeToObjectiveC()().super.isa;
          uint64_t v35 = *(uint64_t *)((char *)v13 + *(int *)(v33 + 24));
          id v36 = (uint64_t *)((char *)v13 + *(int *)(v33 + 28));
          uint64_t v37 = v36[1];
          uint64_t v60 = *v36;
          uint64_t v61 = v37;
          uint64_t aBlock = MEMORY[0x1E4F143A8];
          uint64_t v57 = 1107296256;
          uint64_t v58 = thunk for @escaping @callee_guaranteed (@guaranteed NSXPCListenerEndpoint?) -> ();
          uint64_t v59 = &block_descriptor_24_1;
          uint64_t v38 = _Block_copy(&aBlock);
          swift_retain();
          swift_release();
          objc_msgSend(v51, sel_requestEndpointWith_activitySessionUUID_activity_completion_, v32, v34, v35, v38);
          _Block_release(v38);

          outlined destroy of ConversationManagerHost.EndpointRequest((uint64_t)v13);
        }
        else
        {
          outlined destroy of ConversationManagerHost.EndpointRequest((uint64_t)v13);
          if (v30 != v16)
          {
            if ((v16 & 0x8000000000000000) != 0) {
              goto LABEL_37;
            }
            unint64_t v39 = *v54;
            unint64_t v40 = *(void *)(*v54 + 16);
            if (v16 >= v40) {
              goto LABEL_38;
            }
            uint64_t v41 = v16 * v55;
            outlined init with copy of ConversationManagerHost.EndpointRequest(v39 + v46 + v16 * v55, v47);
            if (v30 >= v40) {
              goto LABEL_39;
            }
            outlined init with copy of ConversationManagerHost.EndpointRequest(v39 + v29, v48);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *uint64_t v54 = v39;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              unint64_t v39 = specialized _ArrayBuffer._consumeAndCreateNew()(v39);
              *uint64_t v54 = v39;
            }
            if (v16 >= *(void *)(v39 + 16)) {
              goto LABEL_40;
            }
            outlined assign with take of ConversationManagerHost.EndpointRequest(v48, v39 + v46 + v41);
            if (v30 >= *(void *)(*v54 + 16)) {
              goto LABEL_41;
            }
            outlined assign with take of ConversationManagerHost.EndpointRequest(v47, *v54 + v29);
          }
          if (__OFADD__(v16++, 1)) {
            goto LABEL_36;
          }
        }
        unint64_t v44 = v30 + 1;
        if (__OFADD__(v30, 1)) {
          goto LABEL_35;
        }
        unint64_t v14 = *v54;
        unint64_t v28 = *(void *)(*v54 + 16);
        ++v30;
        v29 += v55;
        a2 = isa;
        a3 = v53;
        if (v44 == v28) {
          return;
        }
      }
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t partial apply for closure #1 in ConversationManagerHost.conversationManagerHostConnection(_:fetchEndpointWithIdentifier:activitySessionUUID:activity:completionHandler:)(void **a1)
{
  return closure #1 in ConversationManagerHost.conversationManagerHostConnection(_:fetchEndpointWithIdentifier:activitySessionUUID:activity:completionHandler:)(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t specialized ConversationManagerHost.listener(_:shouldAcceptNewConnection:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v59 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v57 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for DispatchQoS();
  uint64_t v56 = *(void *)(v58 - 8);
  MEMORY[0x1F4188790](v58);
  uint64_t v55 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = __swift_project_value_buffer(v7, (uint64_t)static Log.host);
  uint64_t v9 = a1;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v60 = v8;
  if (v12)
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    unint64_t v14 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 138412290;
    aBlock[0] = v9;
    uint64_t v15 = v9;
    uint64_t v54 = v2;
    uint64_t v16 = v4;
    unint64_t v17 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v14 = v9;

    uint64_t v4 = v16;
    uint64_t v2 = v54;
    _os_log_impl(&dword_1B0DF7000, v10, v11, "Asked to accept new connection from %@", v13, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v14, -1, -1);
    MEMORY[0x1B3EA39E0](v13, -1, -1);
  }
  else
  {
  }
  unsigned __int8 v18 = objc_msgSend(objc_msgSend(*(id *)&v2[OBJC_IVAR___CPConversationManagerHost_dataSource], sel_sharePlaySystemStateObserver), sel_allowSharePlay);
  swift_unknownObjectRelease();
  if ((v18 & 1) == 0)
  {
    char v19 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(14);
    uint64_t v20 = v9;
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    BOOL v23 = os_log_type_enabled(v21, v22);
    if ((v19 & 1) == 0)
    {
      if (v23)
      {
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        uint64_t v25 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v24 = 138412290;
        aBlock[0] = v20;
        Class v26 = v20;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v25 = v20;

        _os_log_impl(&dword_1B0DF7000, v21, v22, "ConversationManagerHost rejecting connection %@ because SharePlay is not allowed", v24, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v25, -1, -1);
        MEMORY[0x1B3EA39E0](v24, -1, -1);
      }
      else
      {
      }
      return 0;
    }
    if (v23)
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v54 = v9;
      unint64_t v28 = (uint8_t *)v27;
      uint64_t v53 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v28 = 138412290;
      aBlock[0] = v20;
      uint64_t v29 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      unint64_t v30 = v53;
      void *v53 = v20;

      _os_log_impl(&dword_1B0DF7000, v21, v22, "ConversationManagerHost accepted the connection because the client is allowed to bypass system restrictions. Connection %@", v28, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v30, -1, -1);
      uint64_t v9 = v54;
      MEMORY[0x1B3EA39E0](v28, -1, -1);
    }
    else
    {

      uint64_t v21 = v20;
    }
  }
  BOOL v31 = *(void **)&v2[OBJC_IVAR___CPConversationManagerHost_queue];
  uint64_t v32 = *(void *)&v2[OBJC_IVAR___CPConversationManagerHost_featureFlags];
  uint64_t v33 = *(void **)&v2[OBJC_IVAR___CPConversationManagerHost_serverBag];
  id v34 = objc_allocWithZone((Class)type metadata accessor for ConversationManagerHostConnection());
  uint64_t v35 = v9;
  id v36 = v31;
  swift_unknownObjectRetain();
  uint64_t v37 = specialized ConversationManagerHostConnection.init(connection:queue:featureFlags:serverBag:)(v35, v36, v32, (uint64_t)v33, (uint64_t)v34);
  if (v37)
  {
    uint64_t v38 = v37;
    unint64_t v39 = *(void (**)(uint64_t, _UNKNOWN **))((*MEMORY[0x1E4FBC8C8] & *(void *)v37) + 0x190);
    uint64_t v40 = swift_unknownObjectRetain();
    v39(v40, &protocol witness table for ConversationManagerHost);
    uint64_t v41 = swift_allocObject();
    *(void *)(v41 + 16) = v2;
    *(void *)(v41 + 24) = v38;
    aBlock[4] = partial apply for closure #1 in ConversationManagerHost.listener(_:shouldAcceptNewConnection:);
    void aBlock[5] = v41;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    uint64_t aBlock[3] = &block_descriptor_15_0;
    uint64_t v42 = _Block_copy(aBlock);
    unint64_t v43 = v2;
    unint64_t v44 = v38;
    uint64_t v45 = v55;
    static DispatchQoS.unspecified.getter();
    uint64_t v61 = MEMORY[0x1E4FBC860];
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    unint64_t v46 = v57;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1B3EA2200](0, v45, v46, v42);
    _Block_release(v42);

    (*(void (**)(char *, uint64_t))(v59 + 8))(v46, v4);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v45, v58);
    swift_release();
    return 1;
  }
  uint64_t v48 = v35;
  uint64_t v49 = Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v49, v50))
  {
    id v51 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v51 = 67109120;
    LODWORD(aBlock[0]) = objc_msgSend(v48, sel_processIdentifier);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_1B0DF7000, v49, v50, "ConversationManagerHostConnection could not be created; rejecting connection from PID %d.",
      v51,
      8u);
    MEMORY[0x1B3EA39E0](v51, -1, -1);
  }
  else
  {
  }
  return 0;
}

uint64_t sub_1B10565E8@<X0>(void *a1@<X8>)
{
  return ConversationManagerHost.protectedStorage.getter(a1);
}

uint64_t type metadata accessor for ConversationManagerHost()
{
  return self;
}

uint64_t method lookup function for ConversationManagerHost(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationManagerHost);
}

uint64_t dispatch thunk of ConversationManagerHost.__allocating_init(dataSource:featureFlags:)()
{
  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t *initializeBufferWithCopyOfBuffer for ConversationManagerHost.EndpointRequest(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UUID();
    BOOL v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = *(void **)((char *)a2 + v13);
    *(uint64_t *)((char *)v4 + v13) = (uint64_t)v15;
    uint64_t v16 = (uint64_t *)((char *)v4 + v14);
    unint64_t v17 = (uint64_t *)((char *)a2 + v14);
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
    id v19 = v15;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for ConversationManagerHost.EndpointRequest(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);

  return swift_release();
}

void *initializeWithCopy for ConversationManagerHost.EndpointRequest(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = *(void **)((char *)a2 + v12);
  *(void *)((char *)a1 + v12) = v14;
  uint64_t v15 = (void *)((char *)a1 + v13);
  uint64_t v16 = (void *)((char *)a2 + v13);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  id v18 = v14;
  swift_retain();
  return a1;
}

void *assignWithCopy for ConversationManagerHost.EndpointRequest(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = *(void **)((char *)a2 + v10);
  uint64_t v12 = *(void **)((char *)a1 + v10);
  *(void *)((char *)a1 + v10) = v11;
  id v13 = v11;

  uint64_t v14 = a3[7];
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *initializeWithTake for ConversationManagerHost.EndpointRequest(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  return a1;
}

void *assignWithTake for ConversationManagerHost.EndpointRequest(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = *(void **)((char *)a1 + v11);
  *(void *)((char *)a1 + v11) = *(void *)((char *)a2 + v11);

  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ConversationManagerHost.EndpointRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B1056B3C);
}

uint64_t sub_1B1056B3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ConversationManagerHost.EndpointRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B1056C00);
}

uint64_t sub_1B1056C00(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for ConversationManagerHost.EndpointRequest()
{
  uint64_t result = type metadata singleton initialization cache for ConversationManagerHost.EndpointRequest;
  if (!type metadata singleton initialization cache for ConversationManagerHost.EndpointRequest) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for ConversationManagerHost.EndpointRequest()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1B1056DA8()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSXPCListenerEndpoint?) -> ()(uint64_t a1)
{
  return thunk for @escaping @callee_unowned @convention(block) (@unowned NSXPCListenerEndpoint?) -> ()(a1, *(void *)(v1 + 16));
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = a3;
    uint64_t v3 = a2;
    uint64_t v5 = a1;
    unint64_t v7 = *v4;
    if (!(*v4 >> 62))
    {
      if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v21 < v3) {
    goto LABEL_33;
  }
LABEL_4:
  uint64_t v9 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v8 = v5 - v3;
  if (__OFSUB__(0, v9))
  {
LABEL_35:
    __break(1u);
LABEL_36:
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v11 = v10 + v8;
    if (!__OFADD__(v10, v8)) {
      goto LABEL_8;
    }
LABEL_38:
    __break(1u);
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  unint64_t v7 = *v4;
  if (*v4 >> 62) {
    goto LABEL_36;
  }
  uint64_t v10 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v11 = v10 - v9;
  if (__OFADD__(v10, v8)) {
    goto LABEL_38;
  }
LABEL_8:
  unint64_t v7 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *unint64_t v4 = v7;
  uint64_t v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    uint64_t v13 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_18;
    }
    uint64_t v10 = 1;
  }
  if (v7 >> 62) {
    goto LABEL_39;
  }
  uint64_t v14 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11) {
    uint64_t v14 = v11;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = MEMORY[0x1B3EA25D0](v10, v14, 1, v7);
  swift_bridgeObjectRelease();
  *unint64_t v4 = v7;
  uint64_t v13 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v6(0);
  swift_arrayDestroy();
  if (v8)
  {
    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v16 = v22 - v3;
      if (!__OFSUB__(v22, v3))
      {
LABEL_21:
        if (v16 < 0)
        {
LABEL_46:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v17 = (const void *)(v13 + 32 + 8 * v3);
        if (v5 != v3 || v13 + 32 + 8 * v5 >= (unint64_t)v17 + 8 * v16) {
          memmove((void *)(v13 + 32 + 8 * v5), v17, 8 * v16);
        }
        if (!(v7 >> 62))
        {
          uint64_t v18 = *(void *)(v13 + 16);
          uint64_t v19 = v18 + v8;
          if (!__OFADD__(v18, v8))
          {
LABEL_27:
            *(void *)(v13 + 16) = v19;
            goto LABEL_28;
          }
          goto LABEL_45;
        }
LABEL_43:
        swift_bridgeObjectRetain();
        uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v19 = v23 + v8;
        if (!__OFADD__(v23, v8)) {
          goto LABEL_27;
        }
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v15 = *(void *)(v13 + 16);
      uint64_t v16 = v15 - v3;
      if (!__OFSUB__(v15, v3)) {
        goto LABEL_21;
      }
    }
    __break(1u);
    goto LABEL_43;
  }
LABEL_28:
  return specialized Array._endMutation()();
}

uint64_t sub_1B10573E0()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #1 in ConversationManagerHost.listener(_:shouldAcceptNewConnection:)()
{
  closure #1 in ConversationManagerHost.listener(_:shouldAcceptNewConnection:)(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t outlined init with take of ConversationManagerHost.EndpointRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ConversationManagerHost.EndpointRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in implicit closure #1 in closure #1 in ConversationManagerHost.conversationManagerHostConnection(_:fetchEndpointWithIdentifier:activitySessionUUID:activity:completionHandler:)(id *a1)
{
  return closure #1 in implicit closure #1 in closure #1 in ConversationManagerHost.conversationManagerHostConnection(_:fetchEndpointWithIdentifier:activitySessionUUID:activity:completionHandler:)(a1) & 1;
}

uint64_t outlined init with copy of ConversationManagerHost.EndpointRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ConversationManagerHost.EndpointRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ConversationManagerHost.EndpointRequest(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ConversationManagerHost.EndpointRequest();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined assign with take of ConversationManagerHost.EndpointRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ConversationManagerHost.EndpointRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in ConversationManagerHost.conversationManager(_:sharePlayAllowedChanged:)(void *a1)
{
  closure #1 in ConversationManagerHost.conversationManager(_:sharePlayAllowedChanged:)(a1, *(void **)(v1 + 16));
}

uint64_t sub_1B10575EC()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in closure #1 in ConversationManagerHost.conversationManager(_:sharePlayAllowedChanged:)()
{
  return closure #1 in closure #1 in ConversationManagerHost.conversationManager(_:sharePlayAllowedChanged:)(*(void *)(v0 + 16));
}

void partial apply for closure #1 in ConversationManagerHost.conversationManager(_:conversationChanged:)(void *a1)
{
  closure #1 in ConversationManagerHost.conversationManager(_:conversationChanged:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t NSProcessInfo.isAllowedToConnect<A>(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 24))(&v6, a2, a3);
  if ((v6 & 0xFE) == 4) {
    return 1;
  }
  objc_msgSend(v3, sel_processIdentifier);
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  BOOL v4 = _cp_sandbox_check();
  swift_release();
  return v4;
}

Swift::Bool __swiftcall NSProcessInfo.isAllowedToConnect(to:)(CopresenceCore::MachServiceName to)
{
  objc_msgSend(v1, sel_processIdentifier);
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  Swift::Bool v2 = _cp_sandbox_check();
  swift_release();
  return v2;
}

uint64_t XPCClient.withSynchronousHost<A>(body:errorHandler:)(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = a2;
  uint64_t v23 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v21 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v13 = (char *)&v20 - v12;
  uint64_t v14 = (void *)specialized XPCClient.connection.getter();
  aBlock[4] = a3;
  void aBlock[5] = a4;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  uint64_t aBlock[3] = &block_descriptor_26;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  id v16 = objc_msgSend(v14, sel_synchronousRemoteObjectProxyWithErrorHandler_, v15);
  _Block_release(v15);

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  int v17 = swift_dynamicCast();
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  if (v17)
  {
    v18(v10, 0, 1, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v10, AssociatedTypeWitness);
    v23(v13);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  }
  else
  {
    v18(v10, 1, 1, AssociatedTypeWitness);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v10, v7);
    __break(1u);
  }
  return result;
}

uint64_t XPCClient.connectionClosure.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + direct field offset for XPCClient.connectionClosure);
  swift_beginAccess();
  uint64_t v2 = *v1;
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(*v1);
  return v2;
}

uint64_t XPCClient.connectionClosure.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + direct field offset for XPCClient.connectionClosure);
  swift_beginAccess();
  uint64_t v6 = *v5;
  *uint64_t v5 = a1;
  v5[1] = a2;
  return _sxRi_zRi0_zlyytIseghHr_SgWOe(v6);
}

uint64_t (*XPCClient.connectionClosure.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

Swift::Void __swiftcall XPCClient.destroyConnection()()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  BOOL v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[0] = *(void *)&v0[direct field offset for XPCClient.queue];
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v0;
  aBlock[4] = partial apply for closure #1 in XPCClient.destroyConnection();
  void aBlock[5] = v9;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t aBlock[3] = &block_descriptor_3_0;
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = v0;
  static DispatchQoS.unspecified.getter();
  v12[1] = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v8, v4, v10);
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_release();
}

id XPCClient.createXPCConnection()()
{
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v2 = (*(void *(**)(uint64_t *__return_ptr))(*(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x58) + 24))(&v13);
  if ((v13 & 0xFE) == 4)
  {
    uint64_t v3 = (uint64_t (*)(void))(*(uint64_t (**)(void *))((*v1 & *v0) + 0x78))(v2);
    if (!v3)
    {
      __break(1u);
      swift_unexpectedError();
      __break(1u);
      JUMPOUT(0x1B1058158);
    }
    uint64_t v4 = (uint64_t)v3;
    uint64_t v5 = v3();
    _sxRi_zRi0_zlyytIseghHr_SgWOe(v4);
    return (id)v5;
  }
  else
  {
    unint64_t v7 = 0x80000001B115A740;
    unint64_t v8 = 0xD00000000000002CLL;
    switch((char)v13)
    {
      case 1:
        unint64_t v8 = 0xD000000000000032;
        uint64_t v9 = "com.apple.group-activities.conversationmanagerhost";
        goto LABEL_8;
      case 2:
        unint64_t v8 = 0xD000000000000027;
        uint64_t v9 = "com.apple.SharePlay.GroupSessionService";
        goto LABEL_8;
      case 3:
        uint64_t v9 = "com.apple.SharePlay.NearbyInvitationsService";
LABEL_8:
        unint64_t v7 = (unint64_t)(v9 - 32) | 0x8000000000000000;
        break;
      default:
        break;
    }
    id v10 = objc_allocWithZone(MEMORY[0x1E4F29268]);
    uint64_t v11 = (void *)MEMORY[0x1B3EA1B00](v8, v7);
    swift_bridgeObjectRelease();
    id v12 = objc_msgSend(v10, sel_initWithMachServiceName_options_, v11, 0);

    return v12;
  }
}

uint64_t XPCClient.withHost(body:errorHandler:)(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v20 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  id v10 = (char *)&v20 - v9;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v13 = (char *)&v20 - v12;
  uint64_t v14 = (void *)specialized XPCClient.connection.getter();
  aBlock[4] = a3;
  void aBlock[5] = a4;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  uint64_t aBlock[3] = &block_descriptor_6_1;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  id v16 = objc_msgSend(v14, sel_remoteObjectProxyWithErrorHandler_, v15);
  _Block_release(v15);

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  int v17 = swift_dynamicCast();
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  if (v17)
  {
    v18(v10, 0, 1, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v10, AssociatedTypeWitness);
    v21(v13);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  }
  else
  {
    v18(v10, 1, 1, AssociatedTypeWitness);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v10, v7);
    __break(1u);
  }
  return result;
}

id XPCClient.queue.getter()
{
  return *(id *)(v0 + direct field offset for XPCClient.queue);
}

uint64_t key path getter for XPCClient.connectionClosure : <A>XPCClient<A>@<X0>(void **a1@<X0>, uint64_t (**a2)@<X0>(uint64_t *a1@<X8>)@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x78))();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = v4;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v5;
    *(void *)(result + 24) = v6;
    uint64_t v7 = partial apply for thunk for @escaping @callee_guaranteed () -> (@owned NSXPCConnection, @error @owned Error);
  }
  else
  {
    uint64_t v7 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))result;
  return result;
}

uint64_t key path setter for XPCClient.connectionClosure : <A>XPCClient<A>(uint64_t *a1, void **a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed () -> (@out NSXPCConnection, @error @owned Error);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(void *(*)(), uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x80);
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v3);
  return v7(v6, v5);
}

char *XPCClient.__allocating_init(listenerEndpoint:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = a1;
  return XPCClient.__allocating_init(connection:)((uint64_t)partial apply for closure #1 in XPCClient.init(listenerEndpoint:), v2);
}

char *XPCClient.__allocating_init(connection:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (char *)objc_msgSend(objc_allocWithZone(v2), sel_init);
  uint64_t v6 = (uint64_t *)&v5[direct field offset for XPCClient.connectionClosure];
  swift_beginAccess();
  uint64_t v7 = *v6;
  *uint64_t v6 = a1;
  v6[1] = a2;
  _sxRi_zRi0_zlyytIseghHr_SgWOe(v7);
  return v5;
}

id XPCClient.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

NSObject *closure #1 in XPCClient.init()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (void *)type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(v7 - 1);
  MEMORY[0x1F4188790](v7);
  id v10 = (NSObject **)((char *)&aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t Strong = swift_unknownObjectUnownedLoadStrong();
  id v12 = *(id *)(Strong + direct field offset for XPCClient.queue);

  *id v10 = v12;
  (*(void (**)(void *, void, void *))(v8 + 104))(v10, *MEMORY[0x1E4FBCBF0], v7);
  LOBYTE(Strong) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, void *))(v8 + 8))(v10, v7);
  if (Strong)
  {
    uint64_t v13 = (void *)swift_unknownObjectUnownedLoadStrong();
    uint64_t v7 = XPCClient.createXPCConnection()();

    uint64_t v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
    objc_msgSend(v7, sel_setRemoteObjectInterface_, v14);

    uint64_t v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 40))(a3, a4);
    objc_msgSend(v7, sel_setExportedInterface_, v15);

    id v16 = (void *)swift_unknownObjectUnownedLoadStrong();
    objc_msgSend(v7, sel_setExportedObject_, v16);

    uint64_t v17 = swift_allocObject();
    uint64_t v18 = (void *)swift_unknownObjectUnownedLoadStrong();
    swift_unknownObjectWeakInit();

    uint64_t v19 = (void *)swift_allocObject();
    _OWORD v19[2] = a3;
    v19[3] = a4;
    v19[4] = v17;
    v19[5] = a2;
    uint64_t v37 = partial apply for closure #1 in closure #1 in XPCClient.init();
    uint64_t v38 = v19;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v34 = 1107296256;
    uint64_t v35 = thunk for @escaping @callee_guaranteed () -> ();
    id v36 = &block_descriptor_45;
    uint64_t v20 = _Block_copy(&aBlock);
    swift_release();
    objc_msgSend(v7, sel_setInterruptionHandler_, v20);
    _Block_release(v20);
    uint64_t v21 = swift_allocObject();
    uint64_t v22 = (void *)swift_unknownObjectUnownedLoadStrong();
    swift_unknownObjectWeakInit();

    uint64_t v23 = (void *)swift_allocObject();
    v23[2] = a3;
    v23[3] = a4;
    void v23[4] = v21;
    v23[5] = a2;
    uint64_t v37 = partial apply for closure #2 in closure #1 in XPCClient.init();
    uint64_t v38 = v23;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v34 = 1107296256;
    uint64_t v35 = thunk for @escaping @callee_guaranteed () -> ();
    id v36 = &block_descriptor_52;
    uint64_t v24 = _Block_copy(&aBlock);
    swift_release();
    objc_msgSend(v7, sel_setInvalidationHandler_, v24);
    _Block_release(v24);
    objc_msgSend(v7, sel_resume);
    if (one-time initialization token for client == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Log.client);
  Class v26 = v7;
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    unint64_t v30 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 138412290;
    uint64_t aBlock = v26;
    BOOL v31 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v30 = v26;

    _os_log_impl(&dword_1B0DF7000, v27, v28, "Resuming XPC client connection: %@", v29, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v30, -1, -1);
    MEMORY[0x1B3EA39E0](v29, -1, -1);
  }
  else
  {

    uint64_t v27 = v26;
  }

  return v26;
}

uint64_t closure #1 in closure #1 in closure #1 in XPCClient.init()(void *a1)
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.client);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v12 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v7 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v3, v4, "XPC connection interrupted for %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v6, -1, -1);
    MEMORY[0x1B3EA39E0](v5, -1, -1);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0xB0))(v9, v10);
}

uint64_t closure #1 in closure #1 in XPCClient.init()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v23 = a7;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  id v16 = (char *)v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = MEMORY[0x1B3EA3B30](a1 + 16);
  if (result)
  {
    uint64_t v18 = (void *)result;
    v22[1] = *(void *)(result + direct field offset for XPCClient.queue);
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = v18;
    *(void *)(v19 + 24) = a2;
    aBlock[4] = a6;
    void aBlock[5] = v19;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    uint64_t aBlock[3] = v23;
    uint64_t v20 = _Block_copy(aBlock);
    id v21 = v18;
    static DispatchQoS.unspecified.getter();
    uint64_t v25 = MEMORY[0x1E4FBC860];
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1B3EA2200](0, v16, v13, v20);
    _Block_release(v20);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v24);

    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #2 in closure #1 in XPCClient.init()(void *a1)
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.client);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    v15[0] = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v7 = _typeName(_:qualified:)();
    uint64_t v14 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v3, v4, "XPC connection invalidated for %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v6, -1, -1);
    MEMORY[0x1B3EA39E0](v5, -1, -1);
  }

  uint64_t v9 = (void *)((char *)a1 + direct field offset for XPCClient._connection);
  swift_beginAccess();
  uint64_t v10 = (void *)*v9;
  if (*v9)
  {
    uint64_t v14 = *v9;
    uint64_t v11 = (void (*)(uint64_t *))v9[3];
    if (v11)
    {
      swift_retain();
      v11(&v14);
      _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v11);
    }
  }
  *uint64_t v9 = 0;
  uint64_t v12 = swift_endAccess();
  return (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0xB0))(v12);
}

id closure #2 in XPCClient.init()(void *a1)
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.client);
  id v3 = a1;
  os_log_type_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v14 = v8;
    *(_DWORD *)uint64_t v6 = 136315394;
    uint64_t v9 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2112;
    id v13 = v3;
    id v11 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v3;

    _os_log_impl(&dword_1B0DF7000, v4, v5, "Resetting XPC client connection on %s: %@", (uint8_t *)v6, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v7, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v8, -1, -1);
    MEMORY[0x1B3EA39E0](v6, -1, -1);
  }
  else
  {
  }
  objc_msgSend(v3, sel_setInvalidationHandler_, 0, v13, v14);
  objc_msgSend(v3, sel_setInterruptionHandler_, 0);
  objc_msgSend(v3, sel_setExportedObject_, 0);
  return objc_msgSend(v3, sel_invalidate);
}

id XPCClient.__deallocating_deinit()
{
  id v1 = v0;
  uint64_t v24 = *MEMORY[0x1E4FBC8C8] & *(void *)v0;
  uint64_t v20 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v23 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  id v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v21 = *(void *)(v4 - 8);
  uint64_t v22 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (void *)swift_allocObject();
  uint64_t v8 = &v0[direct field offset for XPCClient._connection];
  swift_beginAccess();
  unint64_t v10 = *(void **)v8;
  uint64_t v9 = *((void *)v8 + 1);
  uint64_t v11 = *((void *)v8 + 2);
  uint64_t v12 = *((void *)v8 + 3);
  uint64_t v13 = *((void *)v8 + 4);
  long long v7[2] = v10;
  void v7[3] = v9;
  v7[4] = v11;
  void v7[5] = v12;
  v7[6] = v13;
  uint64_t v19 = *(void *)&v1[direct field offset for XPCClient.queue];
  aBlock[4] = partial apply for closure #1 in XPCClient.deinit;
  void aBlock[5] = v7;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t aBlock[3] = &block_descriptor_30;
  uint64_t v14 = _Block_copy(aBlock);
  id v15 = v10;
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v9);
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v12);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v26 = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v16 = v20;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v6, v3, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v3, v16);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v22);
  swift_release();
  swift_release();
  uint64_t v17 = (objc_class *)type metadata accessor for XPCClient();
  v25.receiver = v1;
  v25.super_class = v17;
  return objc_msgSendSuper2(&v25, sel_dealloc);
}

uint64_t closure #1 in XPCClient.deinit(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 16);
  swift_beginAccess();
  id v3 = *(void **)(a1 + 16);
  if (v3)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    uint64_t v4 = *(void (**)(uint64_t *))(a1 + 40);
    if (v4)
    {
      swift_retain();
      v4(&v6);
      _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v4);
    }
  }
  *uint64_t v2 = 0;
  return swift_endAccess();
}

id @objc XPCClient.__deallocating_deinit(void *a1)
{
  id v1 = a1;
  return XPCClient.__deallocating_deinit();
}

uint64_t @objc XPCClient.__ivar_destroyer(uint64_t a1)
{
  _sxRi_zRi0_zlyytIseghHr_SgWOe(*(void *)(a1 + direct field offset for XPCClient.connectionClosure));
  uint64_t v2 = a1 + direct field offset for XPCClient._connection;
  id v3 = *(void **)(a1 + direct field offset for XPCClient._connection);
  uint64_t v4 = *(void *)(a1 + direct field offset for XPCClient._connection + 8);
  uint64_t v5 = *(void *)(v2 + 24);

  _sxRi_zRi0_zlyytIseghHr_SgWOe(v4);
  return _sxRi_zRi0_zlyytIseghHr_SgWOe(v5);
}

uint64_t closure #1 in XPCClient.destroyConnection()(uint64_t a1)
{
  uint64_t v1 = a1 + direct field offset for XPCClient._connection;
  swift_beginAccess();
  uint64_t v2 = *(void **)v1;
  if (*(void *)v1)
  {
    uint64_t v5 = *(void **)v1;
    id v3 = *(void (**)(void **))(v1 + 24);
    if (v3)
    {
      swift_retain();
      v3(&v5);
      _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v3);
    }
  }
  *(void *)uint64_t v1 = 0;
  return swift_endAccess();
}

void thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ()(uint64_t a1, void *a2)
{
  id v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t block_destroy_helper_24()
{
  return swift_release();
}

uint64_t sub_1B1059B04()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in XPCClient.destroyConnection()()
{
  return closure #1 in XPCClient.destroyConnection()(*(void *)(v0 + 16));
}

id partial apply for closure #1 in XPCClient.init(listenerEndpoint:)()
{
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F29268]), sel_initWithListenerEndpoint_, *(void *)(v0 + 16));
}

uint64_t sub_1B1059B88()
{
  swift_unknownObjectUnownedDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B1059BC0()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

NSObject *partial apply for closure #1 in XPCClient.init()()
{
  return closure #1 in XPCClient.init()(v0[4], v0[5], v0[2], v0[3]);
}

uint64_t sub_1B1059C04()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@owned NSXPCConnection)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t sub_1B1059C6C()
{
  return MEMORY[0x1F4186498](v0, 40, 7);
}

id partial apply for closure #2 in XPCClient.init()(void *a1)
{
  return closure #2 in XPCClient.init()(a1);
}

uint64_t sub_1B1059C88()
{
  if (*(void *)(v0 + 24)) {
    swift_release();
  }
  if (*(void *)(v0 + 40)) {
    swift_release();
  }
  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for closure #1 in XPCClient.deinit()
{
  return closure #1 in XPCClient.deinit(v0);
}

uint64_t sub_1B1059CF0()
{
  return 16;
}

__n128 sub_1B1059CFC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t method lookup function for XPCClient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for XPCClient);
}

uint64_t dispatch thunk of XPCClient.connectionClosure.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of XPCClient.connectionClosure.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of XPCClient.connectionClosure.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of XPCClient.destroyConnection()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of XPCClient.handleServerDisconnect()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

void *partial apply for thunk for @escaping @callee_guaranteed () -> (@out NSXPCConnection, @error @owned Error)()
{
  __n128 result = (*(void *(**)(uint64_t *__return_ptr))(v0 + 16))(&v3);
  if (!v1) {
    return (void *)v3;
  }
  return result;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@owned NSXPCConnection, @error @owned Error)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_1B1059E90()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in closure #1 in XPCClient.init()()
{
  return closure #1 in closure #1 in XPCClient.init()(v0[4], v0[5], v0[2], v0[3], (uint64_t)&unk_1F09B53A8, (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in XPCClient.init(), (uint64_t)&block_descriptor_64_0);
}

uint64_t partial apply for closure #2 in closure #1 in XPCClient.init()()
{
  return closure #1 in closure #1 in XPCClient.init()(v0[4], v0[5], v0[2], v0[3], (uint64_t)&unk_1F09B5380, (uint64_t)partial apply for closure #1 in closure #2 in closure #1 in XPCClient.init(), (uint64_t)&block_descriptor_58);
}

uint64_t sub_1B1059F50()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in closure #2 in closure #1 in XPCClient.init()()
{
  return closure #1 in closure #2 in closure #1 in XPCClient.init()(*(void **)(v0 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in XPCClient.init()()
{
  return closure #1 in closure #1 in closure #1 in XPCClient.init()(*(void **)(v0 + 16));
}

void specialized Sequence.first(where:)(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v11 = 0;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    id v19 = *(id *)(*(void *)(a3 + 56) + 8 * i);
    id v17 = v19;
    char v18 = a1(&v19);
    if (v3)
    {
      swift_release();

      return;
    }
    if (v18)
    {
LABEL_27:
      swift_release();
      return;
    }

    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v11++, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v11 >= v10) {
      goto LABEL_27;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    if (!v15) {
      break;
    }
LABEL_17:
    unint64_t v9 = (v15 - 1) & v15;
  }
  int64_t v16 = v11 + 1;
  if (v11 + 1 >= v10) {
    goto LABEL_27;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15) {
    goto LABEL_16;
  }
  int64_t v16 = v11 + 2;
  if (v11 + 2 >= v10) {
    goto LABEL_27;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15) {
    goto LABEL_16;
  }
  int64_t v16 = v11 + 3;
  if (v11 + 3 >= v10) {
    goto LABEL_27;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15) {
    goto LABEL_16;
  }
  int64_t v16 = v11 + 4;
  if (v11 + 4 >= v10) {
    goto LABEL_27;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
LABEL_16:
    int64_t v11 = v16;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v10) {
      goto LABEL_27;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_17;
    }
  }
LABEL_30:
  __break(1u);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  char v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  id v29;

  id v4 = v3;
  uint64_t v5 = a3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, (void (*)(uint64_t))type metadata accessor for ActivitySession);
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v24;
    uint64_t v23 = v25;
    uint64_t v7 = v26;
    uint64_t v8 = v27;
    unint64_t v9 = v28;
  }
  else
  {
    int64_t v10 = -1 << *(unsigned char *)(a3 + 32);
    uint64_t v23 = a3 + 56;
    int64_t v11 = ~v10;
    unint64_t v12 = -v10;
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v9 = v13 & *(void *)(a3 + 56);
    swift_bridgeObjectRetain();
    uint64_t v7 = v11;
    uint64_t v8 = 0;
  }
  uint64_t v22 = (unint64_t)(v7 + 64) >> 6;
  if ((v5 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (!__CocoaSet.Iterator.next()()) {
    goto LABEL_36;
  }
  type metadata accessor for ActivitySession(0);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v14 = v29;
  swift_unknownObjectRelease();
  unint64_t v15 = v8;
  int64_t v16 = v9;
  if (!v14) {
    goto LABEL_36;
  }
  while (1)
  {
    uint64_t v29 = v14;
    uint64_t v20 = a1(&v29);
    if (v4)
    {

      goto LABEL_36;
    }
    if (v20) {
      goto LABEL_36;
    }

    uint64_t v8 = v15;
    unint64_t v9 = v16;
    if (v5 < 0) {
      goto LABEL_8;
    }
LABEL_11:
    if (!v9) {
      break;
    }
    int64_t v16 = (v9 - 1) & v9;
    id v17 = __clz(__rbit64(v9)) | (v8 << 6);
    unint64_t v15 = v8;
LABEL_24:
    uint64_t v14 = *(id *)(*(void *)(v5 + 48) + 8 * v17);
    if (!v14) {
      goto LABEL_36;
    }
  }
  unint64_t v15 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    return;
  }
  if (v15 >= v22) {
    goto LABEL_36;
  }
  char v18 = *(void *)(v23 + 8 * v15);
  if (v18)
  {
LABEL_23:
    int64_t v16 = (v18 - 1) & v18;
    id v17 = __clz(__rbit64(v18)) + (v15 << 6);
    goto LABEL_24;
  }
  id v19 = v8 + 2;
  if (v8 + 2 >= v22) {
    goto LABEL_36;
  }
  char v18 = *(void *)(v23 + 8 * v19);
  if (v18) {
    goto LABEL_22;
  }
  id v19 = v8 + 3;
  if (v8 + 3 >= v22) {
    goto LABEL_36;
  }
  char v18 = *(void *)(v23 + 8 * v19);
  if (v18) {
    goto LABEL_22;
  }
  id v19 = v8 + 4;
  if (v8 + 4 >= v22) {
    goto LABEL_36;
  }
  char v18 = *(void *)(v23 + 8 * v19);
  if (v18)
  {
LABEL_22:
    unint64_t v15 = v19;
    goto LABEL_23;
  }
  unint64_t v15 = v8 + 5;
  if (v8 + 5 >= v22) {
    goto LABEL_36;
  }
  char v18 = *(void *)(v23 + 8 * v15);
  if (v18) {
    goto LABEL_23;
  }
  uint64_t v21 = v8 + 6;
  while (v22 != v21)
  {
    char v18 = *(void *)(v23 + 8 * v21++);
    if (v18)
    {
      unint64_t v15 = v21 - 1;
      goto LABEL_23;
    }
  }
LABEL_36:
  outlined consume of [String : ()].Iterator._Variant();
}

uint64_t specialized Sequence.first(where:)(uint64_t (*a1)(uint64_t *), uint64_t a2, unint64_t a3)
{
  if (a3 >> 62)
  {
LABEL_17:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
    {
LABEL_3:
      uint64_t v7 = 4;
      do
      {
        uint64_t v8 = v7 - 4;
        if ((a3 & 0xC000000000000001) != 0)
        {
          uint64_t v9 = MEMORY[0x1B3EA25C0](v7 - 4, a3);
          BOOL v10 = __OFADD__(v8, 1);
          uint64_t v11 = v7 - 3;
          if (v10) {
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v9 = *(void *)(a3 + 8 * v7);
          swift_retain();
          BOOL v10 = __OFADD__(v8, 1);
          uint64_t v11 = v7 - 3;
          if (v10)
          {
LABEL_16:
            __break(1u);
            goto LABEL_17;
          }
        }
        uint64_t v14 = v9;
        char v12 = a1(&v14);
        if (v3)
        {
          swift_bridgeObjectRelease();
          swift_release();
          return v9;
        }
        if (v12)
        {
          swift_bridgeObjectRelease();
          return v9;
        }
        swift_release();
        ++v7;
      }
      while (v11 != v6);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized Sequence.first(where:)(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = a3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for BackgroundSession(0);
    lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession(&lazy protocol witness table cache variable for type BackgroundSession and conformance BackgroundSession, (void (*)(uint64_t))type metadata accessor for BackgroundSession);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v25;
    uint64_t v24 = v26;
    uint64_t v8 = v27;
    int64_t v9 = v28;
    unint64_t v10 = v29;
  }
  else
  {
    uint64_t v11 = -1 << *(unsigned char *)(a3 + 32);
    uint64_t v24 = a3 + 56;
    uint64_t v12 = ~v11;
    uint64_t v13 = -v11;
    if (v13 < 64) {
      uint64_t v14 = ~(-1 << v13);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v10 = v14 & *(void *)(a3 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v8 = v12;
    int64_t v9 = 0;
  }
  int64_t v23 = (unint64_t)(v8 + 64) >> 6;
  if ((v5 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (__CocoaSet.Iterator.next()())
  {
    type metadata accessor for BackgroundSession(0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v15 = v30;
    swift_unknownObjectRelease();
    int64_t v16 = v9;
    uint64_t v17 = v10;
    while (v15)
    {
      uint64_t v30 = v15;
      char v21 = a1(&v30);
      if (v4)
      {
        swift_release();
LABEL_36:
        outlined consume of [String : ()].Iterator._Variant();
        return v15;
      }
      if (v21) {
        goto LABEL_36;
      }
      uint64_t result = swift_release();
      int64_t v9 = v16;
      unint64_t v10 = v17;
      if (v5 < 0) {
        goto LABEL_8;
      }
LABEL_11:
      if (v10)
      {
        uint64_t v17 = (v10 - 1) & v10;
        unint64_t v18 = __clz(__rbit64(v10)) | (v9 << 6);
        int64_t v16 = v9;
      }
      else
      {
        int64_t v16 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          return result;
        }
        if (v16 >= v23) {
          break;
        }
        unint64_t v19 = *(void *)(v24 + 8 * v16);
        if (!v19)
        {
          int64_t v20 = v9 + 2;
          if (v9 + 2 >= v23) {
            break;
          }
          unint64_t v19 = *(void *)(v24 + 8 * v20);
          if (v19) {
            goto LABEL_22;
          }
          int64_t v20 = v9 + 3;
          if (v9 + 3 >= v23) {
            break;
          }
          unint64_t v19 = *(void *)(v24 + 8 * v20);
          if (v19) {
            goto LABEL_22;
          }
          int64_t v20 = v9 + 4;
          if (v9 + 4 >= v23) {
            break;
          }
          unint64_t v19 = *(void *)(v24 + 8 * v20);
          if (v19)
          {
LABEL_22:
            int64_t v16 = v20;
          }
          else
          {
            int64_t v16 = v9 + 5;
            if (v9 + 5 >= v23) {
              break;
            }
            unint64_t v19 = *(void *)(v24 + 8 * v16);
            if (!v19)
            {
              int64_t v22 = v9 + 6;
              while (v23 != v22)
              {
                unint64_t v19 = *(void *)(v24 + 8 * v22++);
                if (v19)
                {
                  int64_t v16 = v22 - 1;
                  goto LABEL_23;
                }
              }
              break;
            }
          }
        }
LABEL_23:
        uint64_t v17 = (v19 - 1) & v19;
        unint64_t v18 = __clz(__rbit64(v19)) + (v16 << 6);
      }
      uint64_t v15 = *(void *)(*(void *)(v5 + 48) + 8 * v18);
      swift_retain();
    }
  }
  outlined consume of [String : ()].Iterator._Variant();
  return 0;
}

void specialized Sequence.forEach(_:)(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, (void (*)(uint64_t))type metadata accessor for ActivitySession);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v19;
    uint64_t v18 = v20;
    uint64_t v2 = v21;
    uint64_t v3 = v22;
    unint64_t v4 = v23;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v18 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  int64_t v8 = (unint64_t)(v2 + 64) >> 6;
  int64_t v9 = (void *)MEMORY[0x1E4FBC8C8];
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v4)
    {
      uint64_t v10 = (v4 - 1) & v4;
      unint64_t v11 = __clz(__rbit64(v4)) | (v3 << 6);
      uint64_t v12 = v3;
      goto LABEL_29;
    }
    int64_t v15 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v15 >= v8) {
      goto LABEL_32;
    }
    unint64_t v16 = *(void *)(v18 + 8 * v15);
    uint64_t v12 = v3 + 1;
    if (!v16)
    {
      uint64_t v12 = v3 + 2;
      if (v3 + 2 >= v8) {
        goto LABEL_32;
      }
      unint64_t v16 = *(void *)(v18 + 8 * v12);
      if (!v16)
      {
        uint64_t v12 = v3 + 3;
        if (v3 + 3 >= v8) {
          goto LABEL_32;
        }
        unint64_t v16 = *(void *)(v18 + 8 * v12);
        if (!v16)
        {
          uint64_t v12 = v3 + 4;
          if (v3 + 4 >= v8) {
            goto LABEL_32;
          }
          unint64_t v16 = *(void *)(v18 + 8 * v12);
          if (!v16)
          {
            uint64_t v12 = v3 + 5;
            if (v3 + 5 >= v8) {
              goto LABEL_32;
            }
            unint64_t v16 = *(void *)(v18 + 8 * v12);
            if (!v16)
            {
              uint64_t v17 = v3 + 6;
              while (v8 != v17)
              {
                unint64_t v16 = *(void *)(v18 + 8 * v17++);
                if (v16)
                {
                  uint64_t v12 = v17 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              outlined consume of [String : ()].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v10 = (v16 - 1) & v16;
    unint64_t v11 = __clz(__rbit64(v16)) + (v12 << 6);
LABEL_29:
    uint64_t v14 = *(id *)(*(void *)(v1 + 48) + 8 * v11);
    uint64_t v13 = v14;
    if (!v14) {
      goto LABEL_32;
    }
    while (1)
    {
      (*(void (**)(void *))((*v9 & *v13) + 0x440))(v14);

      uint64_t v3 = v12;
      unint64_t v4 = v10;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for ActivitySession(0);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t v13 = v24;
        uint64_t v14 = (void *)swift_unknownObjectRelease();
        uint64_t v12 = v3;
        uint64_t v10 = v4;
        if (v24) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;

  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, (void (*)(uint64_t))type metadata accessor for ActivitySession);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v19;
    uint64_t v18 = v20;
    uint64_t v2 = v21;
    uint64_t v3 = v22;
    unint64_t v4 = v23;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v18 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  int64_t v8 = (unint64_t)(v2 + 64) >> 6;
  int64_t v9 = (void *)MEMORY[0x1E4FBC8C8];
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v4)
    {
      uint64_t v10 = (v4 - 1) & v4;
      unint64_t v11 = __clz(__rbit64(v4)) | (v3 << 6);
      uint64_t v12 = v3;
      goto LABEL_29;
    }
    int64_t v15 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v15 >= v8) {
      goto LABEL_32;
    }
    unint64_t v16 = *(void *)(v18 + 8 * v15);
    uint64_t v12 = v3 + 1;
    if (!v16)
    {
      uint64_t v12 = v3 + 2;
      if (v3 + 2 >= v8) {
        goto LABEL_32;
      }
      unint64_t v16 = *(void *)(v18 + 8 * v12);
      if (!v16)
      {
        uint64_t v12 = v3 + 3;
        if (v3 + 3 >= v8) {
          goto LABEL_32;
        }
        unint64_t v16 = *(void *)(v18 + 8 * v12);
        if (!v16)
        {
          uint64_t v12 = v3 + 4;
          if (v3 + 4 >= v8) {
            goto LABEL_32;
          }
          unint64_t v16 = *(void *)(v18 + 8 * v12);
          if (!v16)
          {
            uint64_t v12 = v3 + 5;
            if (v3 + 5 >= v8) {
              goto LABEL_32;
            }
            unint64_t v16 = *(void *)(v18 + 8 * v12);
            if (!v16)
            {
              uint64_t v17 = v3 + 6;
              while (v8 != v17)
              {
                unint64_t v16 = *(void *)(v18 + 8 * v17++);
                if (v16)
                {
                  uint64_t v12 = v17 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              outlined consume of [String : ()].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v10 = (v16 - 1) & v16;
    unint64_t v11 = __clz(__rbit64(v16)) + (v12 << 6);
LABEL_29:
    uint64_t v14 = *(id *)(*(void *)(v1 + 48) + 8 * v11);
    uint64_t v13 = v14;
    if (!v14) {
      goto LABEL_32;
    }
    while (1)
    {
      (*(void (**)(void *))((*v9 & *v13) + 0x470))(v14);

      uint64_t v3 = v12;
      unint64_t v4 = v10;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for ActivitySession(0);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t v13 = v24;
        uint64_t v14 = (void *)swift_unknownObjectRelease();
        uint64_t v12 = v3;
        uint64_t v10 = v4;
        if (v24) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;

  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, (void (*)(uint64_t))type metadata accessor for ActivitySession);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v18;
    uint64_t v17 = v19;
    uint64_t v2 = v20;
    uint64_t v3 = v21;
    unint64_t v4 = v22;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v17 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  unint64_t v16 = v2;
  int64_t v8 = (unint64_t)(v2 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v4)
    {
      int64_t v9 = (v4 - 1) & v4;
      uint64_t v10 = __clz(__rbit64(v4)) | (v3 << 6);
      unint64_t v11 = v3;
      goto LABEL_29;
    }
    uint64_t v13 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v13 >= v8) {
      goto LABEL_32;
    }
    uint64_t v14 = *(void *)(v17 + 8 * v13);
    unint64_t v11 = v3 + 1;
    if (!v14)
    {
      unint64_t v11 = v3 + 2;
      if (v3 + 2 >= v8) {
        goto LABEL_32;
      }
      uint64_t v14 = *(void *)(v17 + 8 * v11);
      if (!v14)
      {
        unint64_t v11 = v3 + 3;
        if (v3 + 3 >= v8) {
          goto LABEL_32;
        }
        uint64_t v14 = *(void *)(v17 + 8 * v11);
        if (!v14)
        {
          unint64_t v11 = v3 + 4;
          if (v3 + 4 >= v8) {
            goto LABEL_32;
          }
          uint64_t v14 = *(void *)(v17 + 8 * v11);
          if (!v14)
          {
            unint64_t v11 = v3 + 5;
            if (v3 + 5 >= v8) {
              goto LABEL_32;
            }
            uint64_t v14 = *(void *)(v17 + 8 * v11);
            if (!v14)
            {
              int64_t v15 = v3 + 6;
              while (v8 != v15)
              {
                uint64_t v14 = *(void *)(v17 + 8 * v15++);
                if (v14)
                {
                  unint64_t v11 = v15 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              outlined consume of [String : ()].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    int64_t v9 = (v14 - 1) & v14;
    uint64_t v10 = __clz(__rbit64(v14)) + (v11 << 6);
LABEL_29:
    uint64_t v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v12) {
      goto LABEL_32;
    }
    while (1)
    {
      objc_msgSend(v12, sel_resetSession, v16);

      uint64_t v3 = v11;
      unint64_t v4 = v9;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for ActivitySession(0);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t v12 = v23;
        swift_unknownObjectRelease();
        unint64_t v11 = v3;
        int64_t v9 = v4;
        if (v23) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  void *v17;
  unsigned __int8 v18;
  void *v19;
  unsigned __int8 v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;

  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, (void (*)(uint64_t))type metadata accessor for ActivitySession);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v23;
    uint64_t v22 = v24;
    uint64_t v2 = v25;
    uint64_t v3 = v26;
    unint64_t v4 = v27;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v22 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  uint64_t v21 = (unint64_t)(v2 + 64) >> 6;
  while (v1 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_35;
    }
    type metadata accessor for ActivitySession(0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    unint64_t v11 = v28;
    uint64_t v12 = (void *)swift_unknownObjectRelease();
    uint64_t v10 = v3;
    int64_t v8 = v4;
    if (!v28) {
      goto LABEL_35;
    }
LABEL_32:
    unint64_t v16 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v11) + 0x2D0);
    uint64_t v17 = (void *)((uint64_t (*)(void *))v16)(v12);
    uint64_t v18 = objc_msgSend(v17, sel_isScreenSharingActivity);

    if ((v18 & 1) == 0)
    {
      uint64_t v19 = (void *)v16();
      uint64_t v20 = objc_msgSend(v19, sel_isSystemActivity);

      if ((v20 & 1) == 0) {
        objc_msgSend(v11, sel_resetSession);
      }
    }

    uint64_t v3 = v10;
    unint64_t v4 = v8;
  }
  if (v4)
  {
    int64_t v8 = (v4 - 1) & v4;
    int64_t v9 = __clz(__rbit64(v4)) | (v3 << 6);
    uint64_t v10 = v3;
LABEL_31:
    uint64_t v12 = *(id *)(*(void *)(v1 + 48) + 8 * v9);
    unint64_t v11 = v12;
    if (!v12) {
      goto LABEL_35;
    }
    goto LABEL_32;
  }
  uint64_t v13 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v13 >= v21) {
      goto LABEL_35;
    }
    uint64_t v14 = *(void *)(v22 + 8 * v13);
    uint64_t v10 = v3 + 1;
    if (!v14)
    {
      uint64_t v10 = v3 + 2;
      if (v3 + 2 >= v21) {
        goto LABEL_35;
      }
      uint64_t v14 = *(void *)(v22 + 8 * v10);
      if (!v14)
      {
        uint64_t v10 = v3 + 3;
        if (v3 + 3 >= v21) {
          goto LABEL_35;
        }
        uint64_t v14 = *(void *)(v22 + 8 * v10);
        if (!v14)
        {
          uint64_t v10 = v3 + 4;
          if (v3 + 4 >= v21) {
            goto LABEL_35;
          }
          uint64_t v14 = *(void *)(v22 + 8 * v10);
          if (!v14)
          {
            uint64_t v10 = v3 + 5;
            if (v3 + 5 >= v21) {
              goto LABEL_35;
            }
            uint64_t v14 = *(void *)(v22 + 8 * v10);
            if (!v14)
            {
              int64_t v15 = v3 + 6;
              while (v21 != v15)
              {
                uint64_t v14 = *(void *)(v22 + 8 * v15++);
                if (v14)
                {
                  uint64_t v10 = v15 - 1;
                  goto LABEL_30;
                }
              }
LABEL_35:
              outlined consume of [String : ()].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_30:
    int64_t v8 = (v14 - 1) & v14;
    int64_t v9 = __clz(__rbit64(v14)) + (v10 << 6);
    goto LABEL_31;
  }
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  unsigned int v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;

  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, (void (*)(uint64_t))type metadata accessor for ActivitySession);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v21;
    uint64_t v20 = v22;
    uint64_t v2 = v23;
    uint64_t v3 = v24;
    unint64_t v4 = v25;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v20 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  uint64_t v19 = (unint64_t)(v2 + 64) >> 6;
  int64_t v8 = (void *)MEMORY[0x1E4FBC8C8];
  while (v1 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_34;
    }
    type metadata accessor for ActivitySession(0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v12 = v26;
    uint64_t v13 = (void *)swift_unknownObjectRelease();
    unint64_t v11 = v3;
    int64_t v9 = v4;
    if (!v26) {
      goto LABEL_34;
    }
LABEL_32:
    uint64_t v17 = (void *)(*(uint64_t (**)(void *))((*v8 & *v12) + 0x2D0))(v13);
    uint64_t v18 = objc_msgSend(v17, sel_isScreenSharingActivity);

    if (v18) {
      (*(void (**)(void))((*v8 & *v12) + 0x3E0))();
    }

    uint64_t v3 = v11;
    unint64_t v4 = v9;
  }
  if (v4)
  {
    int64_t v9 = (v4 - 1) & v4;
    uint64_t v10 = __clz(__rbit64(v4)) | (v3 << 6);
    unint64_t v11 = v3;
LABEL_31:
    uint64_t v13 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    uint64_t v12 = v13;
    if (!v13) {
      goto LABEL_34;
    }
    goto LABEL_32;
  }
  uint64_t v14 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v14 >= v19) {
      goto LABEL_34;
    }
    int64_t v15 = *(void *)(v20 + 8 * v14);
    unint64_t v11 = v3 + 1;
    if (!v15)
    {
      unint64_t v11 = v3 + 2;
      if (v3 + 2 >= v19) {
        goto LABEL_34;
      }
      int64_t v15 = *(void *)(v20 + 8 * v11);
      if (!v15)
      {
        unint64_t v11 = v3 + 3;
        if (v3 + 3 >= v19) {
          goto LABEL_34;
        }
        int64_t v15 = *(void *)(v20 + 8 * v11);
        if (!v15)
        {
          unint64_t v11 = v3 + 4;
          if (v3 + 4 >= v19) {
            goto LABEL_34;
          }
          int64_t v15 = *(void *)(v20 + 8 * v11);
          if (!v15)
          {
            unint64_t v11 = v3 + 5;
            if (v3 + 5 >= v19) {
              goto LABEL_34;
            }
            int64_t v15 = *(void *)(v20 + 8 * v11);
            if (!v15)
            {
              unint64_t v16 = v3 + 6;
              while (v19 != v16)
              {
                int64_t v15 = *(void *)(v20 + 8 * v16++);
                if (v15)
                {
                  unint64_t v11 = v16 - 1;
                  goto LABEL_30;
                }
              }
LABEL_34:
              outlined consume of [String : ()].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_30:
    int64_t v9 = (v15 - 1) & v15;
    uint64_t v10 = __clz(__rbit64(v15)) + (v11 << 6);
    goto LABEL_31;
  }
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  unsigned int v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;

  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, (void (*)(uint64_t))type metadata accessor for ActivitySession);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v21;
    uint64_t v20 = v22;
    uint64_t v2 = v23;
    uint64_t v3 = v24;
    unint64_t v4 = v25;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v20 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  uint64_t v19 = (unint64_t)(v2 + 64) >> 6;
  int64_t v8 = (void *)MEMORY[0x1E4FBC8C8];
  while (v1 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_35;
    }
    type metadata accessor for ActivitySession(0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v12 = v26;
    uint64_t v13 = (void *)swift_unknownObjectRelease();
    unint64_t v11 = v3;
    int64_t v9 = v4;
    if (!v26) {
      goto LABEL_35;
    }
LABEL_32:
    uint64_t v17 = (void *)(*(uint64_t (**)(void *))((*v8 & *v12) + 0x2D0))(v13);
    uint64_t v18 = objc_msgSend(v17, sel_isScreenSharingActivity);

    if (v18)
    {
      if ((*(uint64_t (**)(void))((*v8 & *v12) + 0x2E8))()) {
        (*(void (**)(void))((*v8 & *v12) + 0x3E0))();
      }
    }

    uint64_t v3 = v11;
    unint64_t v4 = v9;
  }
  if (v4)
  {
    int64_t v9 = (v4 - 1) & v4;
    uint64_t v10 = __clz(__rbit64(v4)) | (v3 << 6);
    unint64_t v11 = v3;
LABEL_31:
    uint64_t v13 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    uint64_t v12 = v13;
    if (!v13) {
      goto LABEL_35;
    }
    goto LABEL_32;
  }
  uint64_t v14 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v14 >= v19) {
      goto LABEL_35;
    }
    int64_t v15 = *(void *)(v20 + 8 * v14);
    unint64_t v11 = v3 + 1;
    if (!v15)
    {
      unint64_t v11 = v3 + 2;
      if (v3 + 2 >= v19) {
        goto LABEL_35;
      }
      int64_t v15 = *(void *)(v20 + 8 * v11);
      if (!v15)
      {
        unint64_t v11 = v3 + 3;
        if (v3 + 3 >= v19) {
          goto LABEL_35;
        }
        int64_t v15 = *(void *)(v20 + 8 * v11);
        if (!v15)
        {
          unint64_t v11 = v3 + 4;
          if (v3 + 4 >= v19) {
            goto LABEL_35;
          }
          int64_t v15 = *(void *)(v20 + 8 * v11);
          if (!v15)
          {
            unint64_t v11 = v3 + 5;
            if (v3 + 5 >= v19) {
              goto LABEL_35;
            }
            int64_t v15 = *(void *)(v20 + 8 * v11);
            if (!v15)
            {
              unint64_t v16 = v3 + 6;
              while (v19 != v16)
              {
                int64_t v15 = *(void *)(v20 + 8 * v16++);
                if (v15)
                {
                  unint64_t v11 = v16 - 1;
                  goto LABEL_30;
                }
              }
LABEL_35:
              outlined consume of [String : ()].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_30:
    int64_t v9 = (v15 - 1) & v15;
    uint64_t v10 = __clz(__rbit64(v15)) + (v11 << 6);
    goto LABEL_31;
  }
  __break(1u);
}

void specialized Sequence.forEach(_:)(uint64_t a1, char a2)
{
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, (void (*)(uint64_t))type metadata accessor for ActivitySession);
    Set.Iterator.init(_cocoa:)();
    uint64_t v3 = v23;
    uint64_t v22 = v24;
    uint64_t v4 = v25;
    uint64_t v5 = v26;
    unint64_t v6 = v27;
  }
  else
  {
    uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v22 = a1 + 56;
    uint64_t v4 = ~v7;
    uint64_t v8 = -v7;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v6 = v9 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
  }
  uint64_t v10 = (void *)MEMORY[0x1E4FBC8C8];
  int64_t v21 = (unint64_t)(v4 + 64) >> 6;
  uint64_t v11 = a2 & 1;
  if (v3 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v6)
    {
      uint64_t v12 = (v6 - 1) & v6;
      unint64_t v13 = __clz(__rbit64(v6)) | (v5 << 6);
      uint64_t v14 = v5;
      goto LABEL_29;
    }
    int64_t v17 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      break;
    }
    if (v17 >= v21) {
      goto LABEL_32;
    }
    unint64_t v18 = *(void *)(v22 + 8 * v17);
    uint64_t v14 = v5 + 1;
    if (!v18)
    {
      uint64_t v14 = v5 + 2;
      if (v5 + 2 >= v21) {
        goto LABEL_32;
      }
      unint64_t v18 = *(void *)(v22 + 8 * v14);
      if (!v18)
      {
        uint64_t v14 = v5 + 3;
        if (v5 + 3 >= v21) {
          goto LABEL_32;
        }
        unint64_t v18 = *(void *)(v22 + 8 * v14);
        if (!v18)
        {
          uint64_t v14 = v5 + 4;
          if (v5 + 4 >= v21) {
            goto LABEL_32;
          }
          unint64_t v18 = *(void *)(v22 + 8 * v14);
          if (!v18)
          {
            uint64_t v14 = v5 + 5;
            if (v5 + 5 >= v21) {
              goto LABEL_32;
            }
            unint64_t v18 = *(void *)(v22 + 8 * v14);
            if (!v18)
            {
              uint64_t v19 = v5 + 6;
              while (v21 != v19)
              {
                unint64_t v18 = *(void *)(v22 + 8 * v19++);
                if (v18)
                {
                  uint64_t v14 = v19 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              outlined consume of [String : ()].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v12 = (v18 - 1) & v18;
    unint64_t v13 = __clz(__rbit64(v18)) + (v14 << 6);
LABEL_29:
    unint64_t v16 = *(id *)(*(void *)(v3 + 48) + 8 * v13);
    int64_t v15 = v16;
    if (!v16) {
      goto LABEL_32;
    }
    while (1)
    {
      uint64_t v20 = (void *)(*(uint64_t (**)(void *))((*v10 & *v15) + 0x2D0))(v16);
      objc_msgSend(v20, sel_setSupported_, v11);
      (*(void (**)(void *))((*v10 & *v15) + 0x2D8))(v20);

      uint64_t v5 = v14;
      unint64_t v6 = v12;
      if ((v3 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for ActivitySession(0);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        int64_t v15 = v28;
        unint64_t v16 = (void *)swift_unknownObjectRelease();
        uint64_t v14 = v5;
        uint64_t v12 = v6;
        if (v28) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

void specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v27 = MEMORY[0x1E4FBC860];
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, (void (*)(uint64_t))type metadata accessor for ActivitySession);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v22;
    uint64_t v20 = v23;
    uint64_t v2 = v24;
    uint64_t v3 = v25;
    unint64_t v4 = v26;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v20 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  int64_t v19 = (unint64_t)(v2 + 64) >> 6;
  uint64_t v8 = (void *)MEMORY[0x1E4FBC8C8];
  while (v1 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_37;
    }
    type metadata accessor for ActivitySession(0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v12 = v21;
    unint64_t v13 = (void *)swift_unknownObjectRelease();
    uint64_t v11 = v3;
    uint64_t v9 = v4;
    if (!v21) {
      goto LABEL_37;
    }
LABEL_33:
    int64_t v17 = (void *)(*(uint64_t (**)(void *))((*v8 & *v12) + 0x2D0))(v13);
    unsigned int v18 = objc_msgSend(v17, sel_isSystemActivity);

    if (v18)
    {
    }
    else
    {
      (*(void (**)(void))((*v8 & *v12) + 0x330))();

      MEMORY[0x1B3EA1CF0]();
      if (*(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    uint64_t v3 = v11;
    unint64_t v4 = v9;
  }
  if (v4)
  {
    uint64_t v9 = (v4 - 1) & v4;
    unint64_t v10 = __clz(__rbit64(v4)) | (v3 << 6);
    uint64_t v11 = v3;
LABEL_32:
    unint64_t v13 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    uint64_t v12 = v13;
    if (!v13) {
      goto LABEL_37;
    }
    goto LABEL_33;
  }
  int64_t v14 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v14 >= v19) {
      goto LABEL_37;
    }
    unint64_t v15 = *(void *)(v20 + 8 * v14);
    uint64_t v11 = v3 + 1;
    if (!v15)
    {
      uint64_t v11 = v3 + 2;
      if (v3 + 2 >= v19) {
        goto LABEL_37;
      }
      unint64_t v15 = *(void *)(v20 + 8 * v11);
      if (!v15)
      {
        uint64_t v11 = v3 + 3;
        if (v3 + 3 >= v19) {
          goto LABEL_37;
        }
        unint64_t v15 = *(void *)(v20 + 8 * v11);
        if (!v15)
        {
          uint64_t v11 = v3 + 4;
          if (v3 + 4 >= v19) {
            goto LABEL_37;
          }
          unint64_t v15 = *(void *)(v20 + 8 * v11);
          if (!v15)
          {
            uint64_t v11 = v3 + 5;
            if (v3 + 5 >= v19) {
              goto LABEL_37;
            }
            unint64_t v15 = *(void *)(v20 + 8 * v11);
            if (!v15)
            {
              uint64_t v16 = v3 + 6;
              while (v19 != v16)
              {
                unint64_t v15 = *(void *)(v20 + 8 * v16++);
                if (v15)
                {
                  uint64_t v11 = v16 - 1;
                  goto LABEL_31;
                }
              }
LABEL_37:
              outlined consume of [String : ()].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_31:
    uint64_t v9 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v11 << 6);
    goto LABEL_32;
  }
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  unsigned __int8 v18;
  int64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  uint64_t v1 = a1;
  uint64_t v27 = MEMORY[0x1E4FBC860];
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, (void (*)(uint64_t))type metadata accessor for ActivitySession);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v22;
    uint64_t v20 = v23;
    uint64_t v2 = v24;
    uint64_t v3 = v25;
    unint64_t v4 = v26;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v20 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  int64_t v19 = (unint64_t)(v2 + 64) >> 6;
  uint64_t v8 = (void *)MEMORY[0x1E4FBC8C8];
  while (v1 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_37;
    }
    type metadata accessor for ActivitySession(0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v12 = v21;
    unint64_t v13 = (void *)swift_unknownObjectRelease();
    uint64_t v11 = v3;
    uint64_t v9 = v4;
    if (!v21) {
      goto LABEL_37;
    }
LABEL_33:
    int64_t v17 = (void *)(*(uint64_t (**)(void *))((*v8 & *v12) + 0x2D0))(v13);
    unsigned int v18 = objc_msgSend(v17, sel_isSystemActivity);

    if (v18)
    {
      (*(void (**)(void))((*v8 & *v12) + 0x330))();

      MEMORY[0x1B3EA1CF0]();
      if (*(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    else
    {
    }
    uint64_t v3 = v11;
    unint64_t v4 = v9;
  }
  if (v4)
  {
    uint64_t v9 = (v4 - 1) & v4;
    unint64_t v10 = __clz(__rbit64(v4)) | (v3 << 6);
    uint64_t v11 = v3;
LABEL_32:
    unint64_t v13 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    uint64_t v12 = v13;
    if (!v13) {
      goto LABEL_37;
    }
    goto LABEL_33;
  }
  int64_t v14 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v14 >= v19) {
      goto LABEL_37;
    }
    unint64_t v15 = *(void *)(v20 + 8 * v14);
    uint64_t v11 = v3 + 1;
    if (!v15)
    {
      uint64_t v11 = v3 + 2;
      if (v3 + 2 >= v19) {
        goto LABEL_37;
      }
      unint64_t v15 = *(void *)(v20 + 8 * v11);
      if (!v15)
      {
        uint64_t v11 = v3 + 3;
        if (v3 + 3 >= v19) {
          goto LABEL_37;
        }
        unint64_t v15 = *(void *)(v20 + 8 * v11);
        if (!v15)
        {
          uint64_t v11 = v3 + 4;
          if (v3 + 4 >= v19) {
            goto LABEL_37;
          }
          unint64_t v15 = *(void *)(v20 + 8 * v11);
          if (!v15)
          {
            uint64_t v11 = v3 + 5;
            if (v3 + 5 >= v19) {
              goto LABEL_37;
            }
            unint64_t v15 = *(void *)(v20 + 8 * v11);
            if (!v15)
            {
              uint64_t v16 = v3 + 6;
              while (v19 != v16)
              {
                unint64_t v15 = *(void *)(v20 + 8 * v16++);
                if (v15)
                {
                  uint64_t v11 = v16 - 1;
                  goto LABEL_31;
                }
              }
LABEL_37:
              outlined consume of [String : ()].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_31:
    uint64_t v9 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v11 << 6);
    goto LABEL_32;
  }
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;

  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v27;
    unint64_t v26 = v28;
    uint64_t v3 = v29;
    uint64_t v2 = v30;
    unint64_t v4 = v31;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    unint64_t v26 = a1 + 56;
    uint64_t v3 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v2 = 0;
  }
  uint64_t v23 = v3;
  uint64_t v25 = (unint64_t)(v3 + 64) >> 6;
  uint64_t v24 = (void *)MEMORY[0x1E4FBC860];
  while (1)
  {
    uint64_t v8 = v2;
    if ((v1 & 0x8000000000000000) == 0) {
      break;
    }
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_38;
    }
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v11 = v32;
    swift_unknownObjectRelease();
    if (!v32) {
      goto LABEL_38;
    }
LABEL_31:
    unint64_t v15 = objc_msgSend(v11, sel_normalizedValue, v23);
    if (v15)
    {
      uint64_t v16 = v15;
      int64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      int64_t v19 = v18;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
      }
      int64_t v21 = v24[2];
      uint64_t v20 = v24[3];
      if (v21 >= v20 >> 1) {
        uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, v24);
      }
      void v24[2] = v21 + 1;
      uint64_t v22 = &v24[2 * v21];
      v22[4] = v17;
      v22[5] = v19;
    }
    else
    {
    }
  }
  if (v4)
  {
    uint64_t v9 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    unint64_t v10 = v9 | (v2 << 6);
LABEL_30:
    uint64_t v11 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v11) {
      goto LABEL_38;
    }
    goto LABEL_31;
  }
  uint64_t v12 = v2 + 1;
  if (!__OFADD__(v2, 1))
  {
    if (v12 >= v25) {
      goto LABEL_38;
    }
    unint64_t v13 = *(void *)(v26 + 8 * v12);
    ++v2;
    if (!v13)
    {
      uint64_t v2 = v8 + 2;
      if (v8 + 2 >= v25) {
        goto LABEL_38;
      }
      unint64_t v13 = *(void *)(v26 + 8 * v2);
      if (!v13)
      {
        uint64_t v2 = v8 + 3;
        if (v8 + 3 >= v25) {
          goto LABEL_38;
        }
        unint64_t v13 = *(void *)(v26 + 8 * v2);
        if (!v13)
        {
          uint64_t v2 = v8 + 4;
          if (v8 + 4 >= v25) {
            goto LABEL_38;
          }
          unint64_t v13 = *(void *)(v26 + 8 * v2);
          if (!v13)
          {
            uint64_t v2 = v8 + 5;
            if (v8 + 5 >= v25) {
              goto LABEL_38;
            }
            unint64_t v13 = *(void *)(v26 + 8 * v2);
            if (!v13)
            {
              int64_t v14 = v8 + 6;
              while (v25 != v14)
              {
                unint64_t v13 = *(void *)(v26 + 8 * v14++);
                if (v13)
                {
                  uint64_t v2 = v14 - 1;
                  goto LABEL_29;
                }
              }
LABEL_38:
              outlined consume of [String : ()].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_29:
    unint64_t v4 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v2 << 6);
    goto LABEL_30;
  }
  __break(1u);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy14CopresenceCore15ActivitySessionCG_SSs5NeverOTg504_s14d6Core22fG127ManagerC26updateVirtualParticipantIdyys6UInt64VFSaySSGShyAA0cD0CGcfU0_SSAIcfu_33_23d0b21f370648a7fa82888872819982AISSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v1 = a1;
  unint64_t v26 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0) {
    uint64_t v2 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v2 = *(void *)(a1 + 16);
  }
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v31 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v26)
    {
      uint64_t result = __CocoaSet.startIndex.getter();
      unsigned __int8 v5 = 1;
    }
    else
    {
      uint64_t result = specialized _NativeSet.startIndex.getter(v1);
      unsigned __int8 v5 = v6 & 1;
    }
    uint64_t v28 = result;
    uint64_t v29 = v4;
    unsigned __int8 v30 = v5;
    if (v2 < 0)
    {
      __break(1u);
LABEL_23:
      __break(1u);
    }
    else
    {
      uint64_t v25 = v1;
      do
      {
        while (1)
        {
          uint64_t v13 = v28;
          uint64_t v12 = v29;
          uint64_t v14 = v30;
          specialized Set.subscript.getter(v28, v29, v30, v1);
          uint64_t v16 = v15;
          swift_beginAccess();
          uint64_t v17 = UUID.uuidString.getter();
          uint64_t v19 = v18;
          swift_endAccess();

          uint64_t v20 = v31;
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v20 + 16) + 1, 1);
            uint64_t v20 = v31;
          }
          unint64_t v22 = *(void *)(v20 + 16);
          unint64_t v21 = *(void *)(v20 + 24);
          if (v22 >= v21 >> 1)
          {
            uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
            uint64_t v20 = v31;
          }
          *(void *)(v20 + 16) = v22 + 1;
          uint64_t v23 = v20 + 16 * v22;
          *(void *)(v23 + 32) = v17;
          *(void *)(v23 + 40) = v19;
          if (v26) {
            break;
          }
          uint64_t v1 = v25;
          uint64_t v7 = specialized _NativeSet.index(after:)(v13, v12, v14, v25);
          uint64_t v9 = v8;
          char v11 = v10;
          outlined consume of Set<AddressableMember>.Index._Variant(v13, v12, v14);
          uint64_t v28 = v7;
          uint64_t v29 = v9;
          unsigned __int8 v30 = v11 & 1;
          if (!--v2) {
            goto LABEL_20;
          }
        }
        uint64_t v1 = v25;
        if ((v14 & 1) == 0) {
          goto LABEL_23;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<ActivitySession>.Index);
        uint64_t v24 = (void (*)(unsigned char *, void))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v24(v27, 0);
        --v2;
      }
      while (v2);
LABEL_20:
      outlined consume of Set<AddressableMember>.Index._Variant(v28, v29, v30);
      return v31;
    }
  }
  return result;
}

void thunk for @escaping @callee_guaranteed (@guaranteed NSXPCListenerEndpoint?) -> ()(uint64_t a1, void *a2)
{
}

{
  void (*v3)(void *);
  id v4;
  uint64_t vars8;

  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  uint64_t v4 = a2;
  v3(a2);
  swift_release();
}

void thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ()(uint64_t a1, void *a2)
{
}

BOOL static ActivitySessionErrors.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void ActivitySessionErrors.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int ActivitySessionErrors.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t ActivitySessionManager.id.getter@<X0>(uint64_t a1@<X8>)
{
  return ActivitySessionManager.id.getter(&OBJC_IVAR___CPActivitySessionManager_id, a1);
}

uint64_t ActivitySessionManager.groupUUID.getter@<X0>(uint64_t a1@<X8>)
{
  return ActivitySessionManager.id.getter(&OBJC_IVAR___CPActivitySessionManager_groupUUID, a1);
}

uint64_t ActivitySessionManager.id.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *a1;
  uint64_t v5 = type metadata accessor for UUID();
  char v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

id ActivitySessionManager.queue.getter()
{
  return *(id *)(v0 + OBJC_IVAR___CPActivitySessionManager_queue);
}

uint64_t ActivitySessionManager.featureFlags.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ActivitySessionManager.systemStateObserver.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ActivitySessionManager.audioRoutePolicyManager.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ActivitySessionManager._activitySessions.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t ActivitySessionManager.activitySessions.getter()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (void *)((char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR___CPActivitySessionManager_queue);
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBCBF0], v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    return v8[1];
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ActivitySessionManager.delegate.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR___CPActivitySessionManager_delegate;
  swift_beginAccess();
  return MEMORY[0x1B3EA3B30](v1);
}

uint64_t ActivitySessionManager.delegate.setter()
{
  return swift_unknownObjectRelease();
}

void (*ActivitySessionManager.delegate.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___CPActivitySessionManager_delegate;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x1B3EA3B30](v5);
  return ActivitySessionManager.delegate.modify;
}

void ActivitySessionManager.delegate.modify(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

id ActivitySessionManager.applicationController.getter()
{
  return *(id *)(v0 + OBJC_IVAR___CPActivitySessionManager_applicationController);
}

id ActivitySessionManager.applicationLauncher.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR___CPActivitySessionManager_applicationLauncher);
  swift_beginAccess();
  uint64_t v2 = *v1;
  return v2;
}

void ActivitySessionManager.applicationLauncher.setter(void *a1)
{
  uint64_t v3 = (void **)(v1 + OBJC_IVAR___CPActivitySessionManager_applicationLauncher);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
}

uint64_t (*ActivitySessionManager.applicationLauncher.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

uint64_t ActivitySessionManager.handedOff.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___CPActivitySessionManager_handedOff);
  swift_beginAccess();
  return *v1;
}

void ActivitySessionManager.handedOff.setter(char a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  id v6 = (void *)((char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = &v1[OBJC_IVAR___CPActivitySessionManager_handedOff];
  swift_beginAccess();
  *uint64_t v7 = a1;
  uint64_t v8 = *(void **)&v1[OBJC_IVAR___CPActivitySessionManager_queue];
  *id v6 = v8;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4FBCBF0], v3);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v8)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    unint64_t v10 = v12[2];
    char v11 = v1;
    specialized Sequence.forEach(_:)(v10, v11);
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void ActivitySessionManager.handedOff.didset()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (void *)((char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)&v0[OBJC_IVAR___CPActivitySessionManager_queue];
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBCBF0], v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    unint64_t v7 = v9[1];
    uint64_t v8 = v0;
    specialized Sequence.forEach(_:)(v7, v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void (*ActivitySessionManager.handedOff.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = malloc(*(void *)(v5 + 64));
  swift_beginAccess();
  return ActivitySessionManager.handedOff.modify;
}

void ActivitySessionManager.handedOff.modify(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_endAccess();
  uint64_t v4 = (void *)v3[7];
  if ((a2 & 1) == 0)
  {
    uint64_t v5 = v3[5];
    uint64_t v6 = v3[6];
    unint64_t v7 = *(void **)(v3[4] + OBJC_IVAR___CPActivitySessionManager_queue);
    *uint64_t v4 = v7;
    (*(void (**)(void *, void, uint64_t))(v6 + 104))(v4, *MEMORY[0x1E4FBCBF0], v5);
    id v8 = v7;
    LOBYTE(v7) = _dispatchPreconditionTest(_:)();
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
    if ((v7 & 1) == 0)
    {
      __break(1u);
      return;
    }
    uint64_t v4 = (void *)v3[7];
    id v9 = (void *)v3[4];
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    unint64_t v10 = v3[3];
    char v11 = v9;
    specialized Sequence.forEach(_:)(v10, v11);

    swift_bridgeObjectRelease();
  }
  free(v4);
  free(v3);
}

Class @objc ActivitySessionManager.tuSystemActivitySessions.getter(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4 = a1;
  a3();

  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
  _sSo29TUConversationActivitySessionCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
  v5.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return v5.super.isa;
}

uint64_t ActivitySessionManager.tuActivitySessions.getter()
{
  return ActivitySessionManager.tuActivitySessions.getter((uint64_t (*)(void))specialized Sequence.compactMap<A>(_:));
}

uint64_t ActivitySessionManager.tuSystemActivitySessions.getter()
{
  return ActivitySessionManager.tuActivitySessions.getter((uint64_t (*)(void))specialized Sequence.compactMap<A>(_:));
}

uint64_t ActivitySessionManager.tuActivitySessions.getter(uint64_t (*a1)(void))
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (void *)((char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v7 = *(void **)(v1 + OBJC_IVAR___CPActivitySessionManager_queue);
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4FBCBF0], v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v7)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    unint64_t v10 = a1(v12[1]);
    swift_bridgeObjectRelease();
    uint64_t v11 = specialized Set.init<A>(_:)(v10);
    swift_bridgeObjectRelease();
    return v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id ActivitySessionManager.localParticipant(with:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ActivitySessionManager.localParticipant(with:for:)(a1, a2, a3, (SEL *)&selRef_activitySessionManager_localParticipantWithParticipantIdentifier_bundleIdentifier_);
}

id ActivitySessionManager.activeRemoteParticipant(with:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ActivitySessionManager.localParticipant(with:for:)(a1, a2, a3, (SEL *)&selRef_activitySessionManager_activeRemoteParticipantWithParticipantIdentifier_bundleIdentifier_);
}

id ActivitySessionManager.localParticipant(with:for:)(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t v9 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x110))();
  if (!v9) {
    return 0;
  }
  unint64_t v10 = (void *)v9;
  uint64_t v11 = (void *)MEMORY[0x1B3EA1B00](a2, a3);
  id v12 = objc_msgSend(v10, *a4, v4, a1, v11);
  swift_unknownObjectRelease();

  return v12;
}

void ActivitySessionManager.activeRemoteParticipant(with:for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v5) + 0x110))();
  if (v11)
  {
    id v12 = (void *)v11;
    uint64_t v13 = (void *)MEMORY[0x1B3EA1B00](a2, a3);
    v15[4] = a4;
    v15[5] = a5;
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 1107296256;
    void v15[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSXPCListenerEndpoint?) -> ();
    uint64_t v15[3] = &block_descriptor_27;
    uint64_t v14 = _Block_copy(v15);
    swift_retain();
    swift_release();
    objc_msgSend(v12, sel_activitySessionManager_activeRemoteParticipantWithParticipantIdentifier_bundleIdentifier_completionHandler_, v5, a1, v13, v14);
    swift_unknownObjectRelease();
    _Block_release(v14);
  }
}

NSObject *specialized thunk for @escaping @callee_guaranteed (@guaranteed TUConversationActivitySession, @guaranteed ActivitySessionManager) -> (@owned ActivitySession)@<X0>(id *a1@<X0>, id *a2@<X1>, NSObject **a3@<X8>)
{
  uint64_t result = specialized ActivitySession.__allocating_init(activitySession:manager:)(*a1, *a2);
  *a3 = result;
  return result;
}

uint64_t key path setter for ActivitySessionManager.activitySessionCreation : ActivitySessionManager(uint64_t *a1, void **a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  uint64_t v6 = *(uint64_t (**)(uint64_t (*)(), uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x190);
  swift_retain();
  return v6(partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed TUConversationActivitySession, @in_guaranteed ActivitySessionManager) -> (@out ActivitySession), v5);
}

uint64_t (*ActivitySessionManager.activitySessionCreation.getter())()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR___CPActivitySessionManager__activitySessionCreation);
  swift_beginAccess();
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v2;
  swift_retain();
  return partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed TUConversationActivitySession, @in_guaranteed ActivitySessionManager) -> (@out ActivitySession);
}

void ActivitySessionManager.activitySessionCreation.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  uint64_t v6 = (void *)(v2 + OBJC_IVAR___CPActivitySessionManager__activitySessionCreation);
  swift_beginAccess();
  swift_retain();
  unint64_t v7 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v8 = NSClassFromString(v7);

  if (v8
    || (uint64_t v9 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
        Class v10 = NSClassFromString(v9),
        v9,
        v10))
  {
    *uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed TUConversationActivitySession, @guaranteed ActivitySessionManager) -> (@owned ActivitySession);
    v6[1] = v5;
    swift_endAccess();
    swift_release();
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

void (*ActivitySessionManager.activitySessionCreation.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___CPActivitySessionManager__activitySessionCreation;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = (uint64_t *)(v1 + v4);
  swift_beginAccess();
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  *(void *)(v8 + 24) = v6;
  v3[3] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed TUConversationActivitySession, @in_guaranteed ActivitySessionManager) -> (@out ActivitySession);
  v3[4] = v8;
  swift_retain();
  return ActivitySessionManager.activitySessionCreation.modify;
}

void ActivitySessionManager.activitySessionCreation.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  uint64_t v4 = *(void *)(*(void *)a1 + 32);
  if ((a2 & 1) == 0)
  {
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v3;
    *(void *)(v11 + 24) = v4;
    id v12 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
    Class v13 = NSClassFromString(v12);

    if (v13
      || (uint64_t v14 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
          Class v15 = NSClassFromString(v14),
          v14,
          v15))
    {
      uint64_t v16 = (void *)(v2[5] + v2[6]);
      *uint64_t v16 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed TUConversationActivitySession, @guaranteed ActivitySessionManager) -> (@owned ActivitySession);
      v16[1] = v11;
      swift_endAccess();
      swift_release();
      goto LABEL_8;
    }
LABEL_12:
    __break(1u);
    return;
  }
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  uint64_t v6 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v7 = NSClassFromString(v6);

  if (!v7)
  {
    uint64_t v8 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL);
    Class v9 = NSClassFromString(v8);

    if (!v9)
    {
      __break(1u);
      goto LABEL_12;
    }
  }
  Class v10 = (void *)(v2[5] + v2[6]);
  swift_release();
  *Class v10 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed TUConversationActivitySession, @guaranteed ActivitySessionManager) -> (@owned ActivitySession);
  v10[1] = v5;
  swift_release();
  swift_endAccess();
LABEL_8:
  free(v2);
}

uint64_t ActivitySessionManager.protectedStorage.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR___CPActivitySessionManager____lazy_storage___protectedStorage;
  swift_beginAccess();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3, (uint64_t)&v7, (uint64_t *)&demangling cache variable for type metadata for ProtectedStorage?);
  if (v8) {
    return outlined init with take of BackgroundSessionManagerDataSource(&v7, (uint64_t)a1);
  }
  outlined destroy of UUID?((uint64_t)&v7, (uint64_t *)&demangling cache variable for type metadata for ProtectedStorage?);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSUserDefaults);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSUserDefaults.classProtectedStorage(suiteName:)(v5, v6, a1);
  swift_bridgeObjectRelease();
  outlined init with copy of UserNotificationCenter((uint64_t)a1, (uint64_t)&v7);
  swift_beginAccess();
  outlined assign with take of ProtectedStorage?((uint64_t)&v7, v3);
  return swift_endAccess();
}

uint64_t ActivitySessionManager.protectedStorage.setter(long long *a1)
{
  outlined init with take of BackgroundSessionManagerDataSource(a1, (uint64_t)v4);
  uint64_t v2 = v1 + OBJC_IVAR___CPActivitySessionManager____lazy_storage___protectedStorage;
  swift_beginAccess();
  outlined assign with take of ProtectedStorage?((uint64_t)v4, v2);
  return swift_endAccess();
}

void (*ActivitySessionManager.protectedStorage.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x98uLL);
  *a1 = v3;
  v3[18] = v1;
  ActivitySessionManager.protectedStorage.getter(v3);
  return ActivitySessionManager.protectedStorage.modify;
}

void ActivitySessionManager.protectedStorage.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = (long long *)(*a1 + 40);
  uint64_t v4 = *a1 + 80;
  if (a2)
  {
    uint64_t v5 = v2[18];
    outlined init with copy of UserNotificationCenter(*a1, (uint64_t)v3);
    outlined init with take of BackgroundSessionManagerDataSource(v3, v4);
    uint64_t v6 = v5 + OBJC_IVAR___CPActivitySessionManager____lazy_storage___protectedStorage;
    swift_beginAccess();
    outlined assign with take of ProtectedStorage?(v4, v6);
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v2);
  }
  else
  {
    uint64_t v7 = v2[18];
    outlined init with take of BackgroundSessionManagerDataSource((long long *)*a1, (uint64_t)v3);
    uint64_t v8 = v7 + OBJC_IVAR___CPActivitySessionManager____lazy_storage___protectedStorage;
    swift_beginAccess();
    outlined assign with take of ProtectedStorage?((uint64_t)v3, v8);
    swift_endAccess();
  }
  free(v2);
}

uint64_t ActivitySessionManager.__allocating_init(id:groupUUID:activities:applicationController:delegate:queue:systemStateObserver:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v15 = objc_allocWithZone(v7);
  return ActivitySessionManager.init(id:groupUUID:activities:applicationController:delegate:queue:systemStateObserver:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t ActivitySessionManager.init(id:groupUUID:activities:applicationController:delegate:queue:systemStateObserver:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v30 = a7;
  uint64_t v31 = a3;
  uint64_t v33 = a5;
  uint64_t v34 = a6;
  uint64_t v32 = a4;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  Class v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  id v15 = (char *)&v29 - v14;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v36 = a1;
  v17(v15, a1, v9);
  uint64_t v35 = a2;
  uint64_t v18 = a2;
  uint64_t v19 = v30;
  v17(v13, v18, v9);
  id v20 = objc_msgSend(objc_allocWithZone((Class)CPFeatureFlags), sel_init);
  uint64_t v21 = one-time initialization token for shared;
  swift_unknownObjectRetain();
  if (v21 != -1) {
    swift_once();
  }
  unint64_t v22 = (void *)static CPAudioRoutePolicyManager.shared;
  id v23 = objc_allocWithZone((Class)CPSharedConversationServerBag);
  id v24 = v22;
  id v25 = objc_msgSend(v23, sel_init);
  uint64_t v26 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t, uint64_t, id, uint64_t, uint64_t, id, id))(ObjectType + 440))(v15, v13, v31, v32, v33, v20, v34, v19, v24, v25);
  swift_unknownObjectRelease();
  uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v27(v35, v9);
  v27(v36, v9);
  swift_deallocPartialClassInstance();
  return v26;
}

char *ActivitySessionManager.__allocating_init(id:groupUUID:activities:applicationController:delegate:featureFlags:queue:systemStateObserver:audioRoutePolicyManager:serverBag:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  id v18 = objc_allocWithZone(v10);
  uint64_t v19 = specialized ActivitySessionManager.init(id:groupUUID:activities:applicationController:delegate:featureFlags:queue:systemStateObserver:audioRoutePolicyManager:serverBag:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v19;
}

char *ActivitySessionManager.init(id:groupUUID:activities:applicationController:delegate:featureFlags:queue:systemStateObserver:audioRoutePolicyManager:serverBag:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = specialized ActivitySessionManager.init(id:groupUUID:activities:applicationController:delegate:featureFlags:queue:systemStateObserver:audioRoutePolicyManager:serverBag:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v12;
}

uint64_t ActivitySessionManager.createActivitySession(tuActivitySession:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v122 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char **)((char *)&v122 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  Class v13 = *(void **)&v2[OBJC_IVAR___CPActivitySessionManager_queue];
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E4FBCBF0], v9);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    goto LABEL_82;
  }
  uint64_t v124 = v5;
  uint64_t v125 = ObjectType;
  Swift::String v122 = v8;
  uint64_t v123 = v6;
  swift_getKeyPath();
  swift_getKeyPath();
  unint64_t v126 = v2;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v15 = v129[0];
  uint64_t v16 = (SEL *)&property descriptor for XPCClient.connectionClosure;
  char v127 = a1;
  if ((v129[0] & 0xC000000000000001) == 0) {
    goto LABEL_6;
  }
  uint64_t v17 = __CocoaSet.count.getter();
  if (!v17) {
    goto LABEL_19;
  }
  uint64_t v18 = v17;
  unint64_t v133 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray.reserveCapacity(_:)();
  id v130 = (id)__CocoaSet.startIndex.getter();
  uint64_t v131 = v19;
  unsigned __int8 v132 = 1;
  if (v18 < 0)
  {
    __break(1u);
LABEL_6:
    uint64_t v18 = *(void *)(v15 + 16);
    if (v18)
    {
      unint64_t v133 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray.reserveCapacity(_:)();
      id v130 = (id)specialized _NativeSet.startIndex.getter(v15);
      uint64_t v131 = v20;
      unsigned __int8 v132 = v21 & 1;
      goto LABEL_8;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    unint64_t v38 = MEMORY[0x1E4FBC860];
LABEL_20:
    id v39 = [a1 v16[448]];
    char v40 = specialized Sequence<>.contains(_:)((uint64_t)v39, v38);
    swift_bridgeObjectRelease();

    uint64_t v41 = v126;
    if (v40) {
      return 0;
    }
    id v42 = [a1 v16[448]];
    id v43 = objc_msgSend(v42, sel_bundleIdentifier);

    if (v43)
    {
      uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v46 = v45;

      id v47 = objc_msgSend(*(id *)&v41[OBJC_IVAR___CPActivitySessionManager_serverBag], sel_blockedActivitySessionBundleIdentifiers);
      if (v47)
      {
        uint64_t v48 = v47;
        uint64_t v49 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v50 = *(void *)(v49 + 16);
        if (v50)
        {
          id v51 = (void *)(v49 + 40);
          while (1)
          {
            BOOL v52 = *(v51 - 1) == v44 && *v51 == v46;
            if (v52 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
              break;
            }
            v51 += 2;
            if (!--v50) {
              goto LABEL_31;
            }
          }
          swift_bridgeObjectRelease();
          if (one-time initialization token for default != -1) {
            swift_once();
          }
          uint64_t v69 = type metadata accessor for Logger();
          __swift_project_value_buffer(v69, (uint64_t)static Log.default);
          swift_bridgeObjectRetain();
          uint64_t v65 = Logger.logObject.getter();
          os_log_type_t v70 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v65, v70))
          {

            swift_bridgeObjectRelease_n();
            return 0;
          }
          id v71 = (uint8_t *)swift_slowAlloc();
          uint64_t v72 = swift_slowAlloc();
          v129[0] = v72;
          *(_DWORD *)id v71 = 136315138;
          swift_bridgeObjectRetain();
          id v130 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v46, v129);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B0DF7000, v65, v70, "Failed to create activitySession, bundleIdentifier %s is blocked via server bag", v71, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v72, -1, -1);
          uint64_t v68 = v71;
          goto LABEL_44;
        }
LABEL_31:
        swift_bridgeObjectRelease();
      }
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      unint64_t v53 = v129[0];
      swift_bridgeObjectRetain();
      specialized Sequence.first(where:)(v53, v44, v46);
      id v128 = v54;
      swift_bridgeObjectRelease();
      uint64_t v55 = swift_bridgeObjectRelease();
      if (((*(uint64_t (**)(uint64_t))(v125 + 344))(v55) & 1) != 0
        || (id v56 = objc_msgSend(v127, sel_activity),
            unsigned __int8 v57 = objc_msgSend(v56, sel_isSystemActivity),
            v56,
            (v57 & 1) != 0))
      {
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        uint64_t v58 = v129[0];
        uint64_t v59 = v127;
        specialized Sequence.first(where:)(v58, v59);
        uint64_t v61 = v60;
        swift_bridgeObjectRelease();

        if (v61)
        {
          char v62 = shouldContinue #1 (with:) in ActivitySessionManager.createActivitySession(tuActivitySession:)(v61, v59, v44, v46);
          swift_bridgeObjectRelease();
          if (v62)
          {

            goto LABEL_50;
          }
          if (one-time initialization token for default != -1) {
            swift_once();
          }
          uint64_t v96 = type metadata accessor for Logger();
          __swift_project_value_buffer(v96, (uint64_t)static Log.default);
          id v97 = v59;
          id v98 = Logger.logObject.getter();
          os_log_type_t v99 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v98, v99))
          {
            uint64_t v100 = (uint8_t *)swift_slowAlloc();
            char v127 = (void *)swift_slowAlloc();
            v129[0] = (uint64_t)v127;
            *(_DWORD *)uint64_t v100 = 136315138;
            unint64_t v126 = v100 + 4;
            id v101 = objc_msgSend(v97, sel_activity);
            id v102 = objc_msgSend(v101, sel_UUID);

            uint64_t v103 = v122;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
            uint64_t v104 = v124;
            uint64_t v105 = dispatch thunk of CustomStringConvertible.description.getter();
            unint64_t v107 = v106;
            (*(void (**)(char *, uint64_t))(v123 + 8))(v103, v104);
            id v130 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v105, v107, v129);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1B0DF7000, v98, v99, "Ignoring new activity session due to existing activity session with same identifier (%s)", v100, 0xCu);
            id v108 = v127;
            swift_arrayDestroy();
            MEMORY[0x1B3EA39E0](v108, -1, -1);
            MEMORY[0x1B3EA39E0](v100, -1, -1);
          }
          else
          {
          }
LABEL_76:

          return 0;
        }
      }
      else
      {
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        specialized Sequence.first(where:)(v129[0]);
        uint64_t v74 = v73;
        swift_bridgeObjectRelease();
        if (v74)
        {
          char v75 = shouldContinue #1 (with:) in ActivitySessionManager.createActivitySession(tuActivitySession:)(v74, v127, v44, v46);
          swift_bridgeObjectRelease();

          if ((v75 & 1) == 0) {
            goto LABEL_76;
          }
LABEL_50:
          uint64_t v76 = (void *)MEMORY[0x1E4FBC8C8];
          uint64_t v77 = (uint64_t (*)(void *, uint8_t *))(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *(void *)v41)
                                                                                              + 0x188))(v63);
          char v78 = v127;
          uint64_t v79 = (void *)v77(v127, v41);
          swift_release();
          id v80 = *(uint64_t (**)(void))((*v76 & *v79) + 0x2D0);
          id v81 = *(id *)&v41[OBJC_IVAR___CPActivitySessionManager_applicationController];
          id v82 = (void *)v80();
          char v83 = specialized CPApplicationControllerProtocol.isActivitySupported(_:)(v82);

          id v84 = (void *)v80();
          objc_msgSend(v84, sel_setSupported_, v83 & 1);
          uint64_t v85 = (*(uint64_t (**)(void *))((*v76 & *v79) + 0x2D8))(v84);
          uint64_t v86 = (*(uint64_t (**)(uint64_t))((*v76 & *(void *)v41) + 0x140))(v85);
          if (v86)
          {
            uint64_t v87 = swift_allocObject();
            (*(void (**)(void))((*v76 & *v79) + 0x2A0))();
            v129[0] = v87 | 0x4000000000000000;
            uint64_t v86 = (*(uint64_t (**)(uint64_t *))((*v76 & *v79) + 0x2A8))(v129);
          }
          if (v128)
          {
            v129[0] = 0x8000000000000000;
            uint64_t v86 = (*(uint64_t (**)(uint64_t *))((*v76 & *v79) + 0x2A8))(v129);
          }
          id v88 = (void *)((uint64_t (*)(uint64_t))v80)(v86);
          id v89 = objc_msgSend(v88, sel_bundleIdentifier);

          if (v89)
          {
            uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v92 = v91;

            uint64_t v93 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            if (v92)
            {
              if (v90 == v93 && v92 == v94)
              {
                swift_bridgeObjectRelease_n();
                int v95 = (void *)MEMORY[0x1E4FBC8C8];
LABEL_67:
                v129[0] = 0x8000000000000000;
                (*(void (**)(uint64_t *))((*v95 & *v79) + 0x2A8))(v129);
                goto LABEL_68;
              }
              char v109 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              int v95 = (void *)MEMORY[0x1E4FBC8C8];
              if (v109) {
                goto LABEL_67;
              }
LABEL_68:
              id v110 = objc_msgSend(v78, sel_activity);
              char v111 = (*(uint64_t (**)(void))((*v95 & *v81) + 0x118))();

              if (v111)
              {
                v129[0] = 0x8000000000000000;
                (*(void (**)(uint64_t *))((*v95 & *v79) + 0x2A8))(v129);
              }
              swift_getKeyPath();
              swift_getKeyPath();
              id v112 = v79;
              uint64_t v113 = v126;
              unint64_t v114 = (void (*)(uint64_t *, void))static Published.subscript.modify();
              specialized Set._Variant.insert(_:)(&v130, v112);

              v114(v129, 0);
              swift_release();
              char v115 = (void *)MEMORY[0x1E4FBC8C8];
              swift_release();
              uint64_t v116 = (*(uint64_t (**)(void *))((*v115 & *(void *)v113) + 0x2A8))(v127);
              uint64_t v117 = (void *)((uint64_t (*)(uint64_t))v80)(v116);
              unsigned __int8 v118 = objc_msgSend(v117, sel_isSystemActivity);

              if ((v118 & 1) == 0)
              {
                BOOL v119 = (void *)(*(uint64_t (**)(void))((*v115 & *(void *)v113) + 0x110))();
                if (v119)
                {
                  uint64_t v120 = v119;
                  if (objc_msgSend(v119, sel_respondsToSelector_, sel_activitySessionManager_tuActivitySessionsDidChange_))
                  {
                    (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *(void *)v113) + 0x160))();
                    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
                    _sSo29TUConversationActivitySessionCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
                    Class isa = Set._bridgeToObjectiveC()().super.isa;
                    objc_msgSend(v120, sel_activitySessionManager_tuActivitySessionsDidChange_, v113, isa);
                    swift_bridgeObjectRelease();
                    swift_unknownObjectRelease();
                  }
                  else
                  {
                    swift_unknownObjectRelease();
                  }
                }
              }

              return (uint64_t)v79;
            }
          }
          else
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)();
          }
          swift_bridgeObjectRelease();
          int v95 = (void *)MEMORY[0x1E4FBC8C8];
          goto LABEL_68;
        }
      }
      uint64_t v63 = swift_bridgeObjectRelease();
      goto LABEL_50;
    }
    if (one-time initialization token for default == -1)
    {
LABEL_38:
      uint64_t v64 = type metadata accessor for Logger();
      __swift_project_value_buffer(v64, (uint64_t)static Log.default);
      uint64_t v65 = Logger.logObject.getter();
      os_log_type_t v66 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v65, v66))
      {
LABEL_45:

        return 0;
      }
      id v67 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v67 = 0;
      _os_log_impl(&dword_1B0DF7000, v65, v66, "Failed to create activitySession, bundleIdentifier is nil", v67, 2u);
      uint64_t v68 = v67;
LABEL_44:
      MEMORY[0x1B3EA39E0](v68, -1, -1);
      goto LABEL_45;
    }
LABEL_82:
    swift_once();
    goto LABEL_38;
  }
LABEL_8:
  unint64_t v22 = (void *)(v15 & 0xFFFFFFFFFFFFFF8);
  if (v15 < 0) {
    unint64_t v22 = (void *)v15;
  }
  id v128 = v22;
  while (1)
  {
    uint64_t v28 = (uint64_t)v130;
    uint64_t v29 = v131;
    uint64_t v30 = v132;
    specialized Set.subscript.getter((uint64_t)v130, v131, v132, v15);
    uint64_t v32 = v31;
    uint64_t v33 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v31) + 0x330))();
    uint64_t v34 = v16;
    id v35 = [v33 v16[448]];

    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    uint64_t result = specialized ContiguousArray._endMutation()();
    if ((v15 & 0xC000000000000001) != 0) {
      break;
    }
    id v23 = (void *)specialized _NativeSet.index(after:)(v28, v29, v30, v15);
    uint64_t v25 = v24;
    char v27 = v26;
    outlined consume of Set<AddressableMember>.Index._Variant(v28, v29, v30);
    id v130 = v23;
    uint64_t v131 = v25;
    unsigned __int8 v132 = v27 & 1;
LABEL_12:
    --v18;
    uint64_t v16 = v34;
    if (!v18)
    {
      outlined consume of Set<AddressableMember>.Index._Variant((uint64_t)v130, v131, v132);
      unint64_t v38 = v133;
      swift_bridgeObjectRelease();
      a1 = v127;
      goto LABEL_20;
    }
  }
  if (v30)
  {
    if (__CocoaSet.Index.handleBitPattern.getter()) {
      swift_isUniquelyReferenced_nonNull_native();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<ActivitySession>.Index);
    uint64_t v37 = (void (*)(uint64_t *, void))Set.Index._asCocoa.modify();
    __CocoaSet.formIndex(after:isUnique:)();
    v37(v129, 0);
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t shouldContinue #1 (with:) in ActivitySessionManager.createActivitySession(tuActivitySession:)(NSObject *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v82 = a3;
  uint64_t v83 = a4;
  uint64_t v6 = type metadata accessor for Date();
  id v84 = *(void (**)(char *, uint64_t))(v6 - 8);
  uint64_t v85 = v6;
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v77 - v10;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v77 - v17;
  id v19 = objc_msgSend(a2, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  id v20 = [a1 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  LOBYTE(v20) = dispatch thunk of static Equatable.== infix(_:_:)();
  char v21 = *(void (**)(char *, uint64_t))(v13 + 8);
  v21(v16, v12);
  uint64_t v22 = ((uint64_t (*)(char *, uint64_t))v21)(v18, v12);
  if (v20)
  {
    id v23 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v24 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & (uint64_t)a1->isa) + 0x2D0))(v22);
    unsigned int v25 = objc_msgSend(v24, sel_isStaticActivity);

    if (v25
      && ((*(void (**)(uint64_t *__return_ptr))((*v23 & (uint64_t)a1->isa) + 0x2A0))(&v88),
          unint64_t v26 = v88,
          unint64_t v86 = 0x8000000000000010,
          uint64_t v87 = v88,
          char v27 = static ActivitySession.State.== infix(_:_:)((unint64_t *)&v87, &v86),
          outlined consume of ActivitySession.State(v26),
          (v27 & 1) != 0))
    {
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      __swift_project_value_buffer(v28, (uint64_t)static Log.default);
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v31 = 0;
        _os_log_impl(&dword_1B0DF7000, v29, v30, "Trying to create a new activity session with the same identifier as an already existing static activity session, ignoring the new session and permitting join on the existing one.", v31, 2u);
        MEMORY[0x1B3EA39E0](v31, -1, -1);
      }

      (*(void (**)(void))((*v23 & (uint64_t)a1->isa) + 0x3E8))();
    }
    else
    {
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v47 = type metadata accessor for Logger();
      __swift_project_value_buffer(v47, (uint64_t)static Log.default);
      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v48, v49))
      {
        uint64_t v50 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v50 = 0;
        _os_log_impl(&dword_1B0DF7000, v48, v49, "Trying to create a new activity session with the same identifier as an already existing activity session, ignoring the new activity session.", v50, 2u);
        MEMORY[0x1B3EA39E0](v50, -1, -1);
      }
    }
  }
  else
  {
    id v80 = a2;
    id v32 = objc_msgSend(a2, sel_timestamp);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v33 = *MEMORY[0x1E4FBC8C8] & (uint64_t)a1->isa;
    uint64_t v34 = *(uint64_t (**)(void))(v33 + 0x330);
    os_log_t v81 = a1;
    char v78 = v34;
    uint64_t v79 = v33 + 816;
    id v35 = (void *)v34();
    id v36 = objc_msgSend(v35, sel_timestamp);

    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    char v37 = static Date.> infix(_:_:)();
    uint64_t v38 = v85;
    id v39 = (void (*)(char *, uint64_t))*((void *)v84 + 1);
    v39(v9, v85);
    char v40 = v11;
    id v84 = v39;
    v39(v11, v38);
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    __swift_project_value_buffer(v41, (uint64_t)static Log.default);
    id v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v44 = 67109120;
      LODWORD(v88) = v37 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B0DF7000, v42, v43, "Comparison result: isNewer? %{BOOL}d", v44, 8u);
      MEMORY[0x1B3EA39E0](v44, -1, -1);
    }

    os_log_t v45 = v81;
    if (v37)
    {
      (*(void (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & (uint64_t)v81->isa) + 0x458))(v82, v83);
      return 1;
    }
    id v51 = v40;
    id v52 = v80;
    unint64_t v53 = v45;
    id v54 = v52;
    uint64_t v55 = v53;
    id v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.default.getter();
    int v58 = v57;
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v59 = swift_slowAlloc();
      LODWORD(v82) = v58;
      uint64_t v60 = v59;
      uint64_t v83 = swift_slowAlloc();
      uint64_t v88 = v83;
      *(_DWORD *)uint64_t v60 = 136315394;
      id v61 = objc_msgSend(v54, sel_timestamp, v60 + 4);
      os_log_t v81 = v56;
      id v62 = v61;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      id v80 = (id)lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1E4F27928]);
      uint64_t v63 = v38;
      uint64_t v64 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v66 = v65;
      id v67 = v40;
      uint64_t v68 = v84;
      v84(v67, v63);
      uint64_t v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v66, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      uint64_t v69 = swift_bridgeObjectRelease();
      *(_WORD *)(v60 + 12) = 2080;
      os_log_type_t v70 = (void *)((uint64_t (*)(uint64_t))v78)(v69);
      id v71 = objc_msgSend(v70, sel_timestamp);

      static Date._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v72 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v74 = v73;
      v68(v51, v63);
      uint64_t v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v74, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_t v75 = v81;
      _os_log_impl(&dword_1B0DF7000, v81, (os_log_type_t)v82, "Ignoring new activity session since it was made before (%s) the latest activity session (%s)", (uint8_t *)v60, 0x16u);
      uint64_t v76 = v83;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v76, -1, -1);
      MEMORY[0x1B3EA39E0](v60, -1, -1);
    }
    else
    {
    }
  }
  return 0;
}

uint64_t specialized CPApplicationControllerProtocol.isActivitySupported(_:)(void *a1)
{
  id v2 = objc_msgSend(a1, sel_bundleIdentifier);
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;

    v7._countAndFlagsBits = v4;
    v7._object = v6;
    LOBYTE(v4) = CPApplicationController.isBundleIdentifierSupported(_:)(v7);
    swift_bridgeObjectRelease();
    return v4 & 1;
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Log.default);
    id v10 = a1;
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      uint64_t v18 = v14;
      *(_DWORD *)uint64_t v13 = 136315138;
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivity);
      id v15 = v10;
      uint64_t v16 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v11, v12, "Missing bundle identifier: %s", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v14, -1, -1);
      MEMORY[0x1B3EA39E0](v13, -1, -1);
    }
    else
    {
    }
    return 0;
  }
}

void ActivitySessionManager.leaveActivitySession(activitySessionUUID:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  Swift::String v7 = (char *)v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)v39 - v8;
  id v10 = (void *)type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(v10 - 1);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (void *)((char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = *(void **)&v1[OBJC_IVAR___CPActivitySessionManager_queue];
  *uint64_t v13 = v14;
  (*(void (**)(void *, void, void *))(v11 + 104))(v13, *MEMORY[0x1E4FBCBF0], v10);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, void *))(v11 + 8))(v13, v10);
  if (v14)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    uint64_t v16 = swift_release();
    uint64_t v17 = v42;
    MEMORY[0x1F4188790](v16);
    v39[-2] = a1;
    specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in ActivitySessionManager.leaveActivitySession(activitySessionUUID:), (uint64_t)&v39[-4], v17);
    id v19 = v18;
    uint64_t v20 = swift_bridgeObjectRelease();
    if (v19)
    {
      (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v19) + 0x3D8))(v20);
    }
    else
    {
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      __swift_project_value_buffer(v28, (uint64_t)static Log.default);
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v9, a1, v3);
      uint64_t v29 = v1;
      os_log_type_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = swift_slowAlloc();
        uint64_t v33 = swift_slowAlloc();
        uint64_t v42 = v33;
        *(_DWORD *)uint64_t v32 = 136315394;
        lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, &v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
        *(_WORD *)(v32 + 12) = 2080;
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        type metadata accessor for ActivitySession(0);
        lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, (void (*)(uint64_t))type metadata accessor for ActivitySession);
        uint64_t v36 = Set.description.getter();
        unint64_t v38 = v37;
        swift_bridgeObjectRelease();
        uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, &v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v30, v31, "Couldn't find matching activitySession for %s activitySessions: %s", (uint8_t *)v32, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v33, -1, -1);
        MEMORY[0x1B3EA39E0](v32, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
      }
    }
  }
  else
  {
    __break(1u);
    swift_once();
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Log.default);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, a1, v3);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      uint64_t v42 = v40;
      *(_DWORD *)uint64_t v24 = 136315138;
      v39[1] = v24 + 4;
      lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      _os_log_impl(&dword_1B0DF7000, v22, v23, "Could not leave activitySessionWithUUID:%s. Session may have already been left", v24, 0xCu);
      uint64_t v27 = v40;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v27, -1, -1);
      MEMORY[0x1B3EA39E0](v24, -1, -1);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    }
  }
}

void ActivitySessionManager.presentSessionDismissalAlert(activitySessionUUID:allowingCancellation:completion:)(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v50 = a4;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  id v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (uint64_t *)((char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v15 = *(void **)&v4[OBJC_IVAR___CPActivitySessionManager_queue];
  *uint64_t v14 = v15;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v14, *MEMORY[0x1E4FBCBF0], v11);
  id v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  if ((v15 & 1) == 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t v17 = swift_release();
  uint64_t v18 = v52;
  MEMORY[0x1F4188790](v17);
  *(&v48 - 2) = a1;
  specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in ActivitySessionManager.presentSessionDismissalAlert(activitySessionUUID:allowingCancellation:completion:), (uint64_t)(&v48 - 4), v18);
  uint64_t v20 = v19;
  uint64_t v21 = swift_bridgeObjectRelease();
  if (!v20)
  {
    if (one-time initialization token for default == -1)
    {
LABEL_6:
      uint64_t v28 = type metadata accessor for Logger();
      __swift_project_value_buffer(v28, (uint64_t)static Log.default);
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
      uint64_t v29 = v4;
      os_log_type_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = swift_slowAlloc();
        uint64_t v33 = swift_slowAlloc();
        os_log_type_t v49 = a3;
        uint64_t v34 = v33;
        uint64_t v52 = v33;
        *(_DWORD *)uint64_t v32 = 136315394;
        lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        *(_WORD *)(v32 + 12) = 2080;
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        type metadata accessor for ActivitySession(0);
        lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, (void (*)(uint64_t))type metadata accessor for ActivitySession);
        uint64_t v37 = Set.description.getter();
        unint64_t v39 = v38;
        swift_bridgeObjectRelease();
        uint64_t v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, &v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v30, v31, "Couldn't find matching activitySession for %s activitySessions: %s", (uint8_t *)v32, 0x16u);
        swift_arrayDestroy();
        uint64_t v40 = v34;
        a3 = (void (*)(void))v49;
        MEMORY[0x1B3EA39E0](v40, -1, -1);
        MEMORY[0x1B3EA39E0](v32, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      }
      a3(0);
      return;
    }
LABEL_17:
    swift_once();
    goto LABEL_6;
  }
  uint64_t v22 = (void *)MEMORY[0x1E4FBC8C8];
  os_log_type_t v23 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v20) + 0x2D0))(v21);
  id v24 = objc_msgSend(v23, sel_bundleIdentifier);

  if (v24)
  {
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v27 = v26;

    (*(void (**)(uint64_t, uint64_t, uint64_t, void (*)(void), uint64_t))((*v22 & *v20) + 0x410))(v25, v27, 1, a3, v50);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    __swift_project_value_buffer(v41, (uint64_t)static Log.default);
    uint64_t v42 = v20;
    os_log_type_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      os_log_t v45 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v49 = (void *)swift_slowAlloc();
      *(_DWORD *)os_log_t v45 = 138412290;
      uint64_t v52 = (uint64_t)v42;
      unint64_t v46 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v47 = v49;
      *os_log_type_t v49 = v20;

      _os_log_impl(&dword_1B0DF7000, v43, v44, "Unable to find bundleID for activitySession %@", v45, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v47, -1, -1);
      MEMORY[0x1B3EA39E0](v45, -1, -1);
    }
    else
    {

      os_log_type_t v43 = v42;
    }

    a3(0);
  }
}

void ActivitySessionManager.removeActivitySession(activitySessionUUID:using:)(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (uint64_t *)((char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void **)&v2[OBJC_IVAR___CPActivitySessionManager_queue];
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E4FBCBF0], v9);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_5;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t v15 = swift_release();
  uint64_t v16 = v36;
  MEMORY[0x1F4188790](v15);
  *(&v34 - 2) = a1;
  specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in ActivitySessionManager.presentSessionDismissalAlert(activitySessionUUID:allowingCancellation:completion:), (uint64_t)(&v34 - 4), v16);
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  if (v18)
  {
    id v19 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v20 = *(uint64_t (**)(void *))((*MEMORY[0x1E4FBC8C8] & *v18) + 0x170);
    id v21 = a2;
    uint64_t v22 = v20(a2);
    (*(void (**)(uint64_t))((*v19 & *v18) + 0x3E0))(v22);

    return;
  }
  if (one-time initialization token for default != -1) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Log.default);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  id v24 = v2;
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    uint64_t v36 = v28;
    *(_DWORD *)uint64_t v27 = 136315394;
    lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_WORD *)(v27 + 12) = 2080;
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, (void (*)(uint64_t))type metadata accessor for ActivitySession);
    uint64_t v31 = Set.description.getter();
    unint64_t v33 = v32;
    swift_bridgeObjectRelease();
    uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v33, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v25, v26, "Couldn't find matching activitySession for %s activitySessions: %s", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v28, -1, -1);
    MEMORY[0x1B3EA39E0](v27, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

void ActivitySessionManager.updateActivitySession(activitySessionUUID:activity:)(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (uint64_t *)((char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void **)&v2[OBJC_IVAR___CPActivitySessionManager_queue];
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E4FBCBF0], v9);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_5;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t v15 = swift_release();
  uint64_t v16 = v32;
  MEMORY[0x1F4188790](v15);
  *(&v30 - 2) = a1;
  *(&v30 - 1) = (uint64_t)a2;
  specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in ActivitySessionManager.updateActivitySession(activitySessionUUID:activity:), (uint64_t)(&v30 - 4), v16);
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  if (v18)
  {
    ActivitySession.updateActivity(_:)(a2);

    return;
  }
  if (one-time initialization token for default != -1) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Log.default);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  uint64_t v20 = v2;
  id v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    uint64_t v32 = v24;
    *(_DWORD *)uint64_t v23 = 136315394;
    lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_WORD *)(v23 + 12) = 2080;
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, (void (*)(uint64_t))type metadata accessor for ActivitySession);
    uint64_t v27 = Set.description.getter();
    unint64_t v29 = v28;
    swift_bridgeObjectRelease();
    uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v21, v22, "Couldn't find matching activitySession for %s activitySessions: %s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v24, -1, -1);
    MEMORY[0x1B3EA39E0](v23, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

BOOL closure #1 in ActivitySessionManager.updateActivitySession(activitySessionUUID:activity:)(void **a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *a1;
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v5 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x2D0))();
  id v6 = objc_msgSend(v5, sel_bundleIdentifier);

  if (v6)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  id v11 = objc_msgSend(a3, sel_bundleIdentifier);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v15 = 0;
  }
  BOOL v16 = specialized static BundleIdentiferMap.areEquivalentBundleIDs(bundleID:otherBundleID:)(v7, v9, v13, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v16;
}

void ActivitySessionManager.setUsingAirplay(_:_:)(char a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (uint64_t *)((char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void **)&v2[OBJC_IVAR___CPActivitySessionManager_queue];
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E4FBCBF0], v9);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_5;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t v15 = swift_release();
  uint64_t v16 = v32;
  MEMORY[0x1F4188790](v15);
  *(&v30 - 2) = a2;
  specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in ActivitySessionManager.presentSessionDismissalAlert(activitySessionUUID:allowingCancellation:completion:), (uint64_t)(&v30 - 4), v16);
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  if (v18)
  {
    (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v18) + 0x320))(a1 & 1);

    return;
  }
  if (one-time initialization token for default != -1) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Log.default);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a2, v5);
  uint64_t v20 = v2;
  id v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    uint64_t v32 = v24;
    *(_DWORD *)uint64_t v23 = 136315394;
    lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_WORD *)(v23 + 12) = 2080;
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, (void (*)(uint64_t))type metadata accessor for ActivitySession);
    uint64_t v27 = Set.description.getter();
    unint64_t v29 = v28;
    swift_bridgeObjectRelease();
    uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v21, v22, "Couldn't find matching activitySession for %s activitySessions: %s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v24, -1, -1);
    MEMORY[0x1B3EA39E0](v23, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

Swift::Void __swiftcall ActivitySessionManager.refreshDataCryptors()()
{
}

Swift::Void __swiftcall ActivitySessionManager.refreshActivitySessionActiveParticipants()()
{
}

uint64_t ActivitySessionManager.refreshDataCryptors()(void (*a1)(void))
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (void *)((char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void **)(v1 + OBJC_IVAR___CPActivitySessionManager_queue);
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4FBCBF0], v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v7)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    a1(v10[1]);
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall ActivitySessionManager.resetSessions()()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (uint64_t *)((char *)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR___CPActivitySessionManager_queue);
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBCBF0], v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    specialized Sequence.forEach(_:)(v7[1]);
    swift_bridgeObjectRelease();
    *(void *)(v0 + OBJC_IVAR___CPActivitySessionManager_topicsObserver) = 0;
    swift_release();
    *(void *)(v0 + OBJC_IVAR___CPActivitySessionManager_topicsObserverSubscription) = 0;
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall ActivitySessionManager.resetNonScreenSharingSessions()()
{
}

Swift::Void __swiftcall ActivitySessionManager.removeScreenSharingSessions()()
{
}

Swift::Void __swiftcall ActivitySessionManager.removeLocalScreenSharingSessions()()
{
}

uint64_t ActivitySessionManager.resetNonScreenSharingSessions()(const char *a1, void (*a2)(void))
{
  uint64_t v5 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (void *)((char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = *(void **)(v5 + OBJC_IVAR___CPActivitySessionManager_queue);
  *uint64_t v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E4FBCBF0], v6);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if (v10)
  {
    if (one-time initialization token for default == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.default);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_1B0DF7000, v13, v14, a1, v15, 2u);
    MEMORY[0x1B3EA39E0](v15, -1, -1);
  }

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  a2(v17[1]);
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall ActivitySessionManager.resetSceneAssociations(for:)(Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (void *)((char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)(v1 + OBJC_IVAR___CPActivitySessionManager_queue);
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4FBCBF0], v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if (v8)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v10 = v11[1];
    swift_bridgeObjectRetain();
    specialized Sequence.forEach(_:)(v10, countAndFlagsBits, (uint64_t)object);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void ActivitySessionManager.sessionChanged(session:)(void *a1)
{
}

uint64_t ActivitySessionManager.sessionIsJoinable(session:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (uint64_t *)((char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)((char *)v2 + OBJC_IVAR___CPActivitySessionManager_queue);
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4FBCBF0], v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if (v8)
  {
    id v11 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v12 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x110))(result);
    if (!v12) {
      return 0;
    }
    uint64_t v13 = (void *)v12;
    os_log_type_t v14 = (void *)(*(uint64_t (**)(void))((*v11 & *a1) + 0x330))();
    id v15 = objc_msgSend(v13, sel_activitySessionManager_activitySessionIsJoinable_, v2, v14);
    swift_unknownObjectRelease();

    return (uint64_t)v15;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *ActivitySessionManager.session(session:receivedEvent:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (uint64_t *)((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)((char *)v2 + OBJC_IVAR___CPActivitySessionManager_queue);
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4FBCBF0], v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if (v8)
  {
    uint64_t result = (void *)(*(uint64_t (**)(void *))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x110))(result);
    if (result)
    {
      objc_msgSend(result, sel_activitySessionManager_receivedActivitySessionEvent_, v2, a2);
      return (void *)swift_unknownObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void ActivitySessionManager.session(session:fetchDataCryptorForTopic:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (void *)((char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  os_log_type_t v14 = *(void **)((char *)v5 + OBJC_IVAR___CPActivitySessionManager_queue);
  *uint64_t v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E4FBCBF0], v10);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  uint64_t v16 = (*(uint64_t (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if (v14)
  {
    uint64_t v17 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v5) + 0x110))(v16);
    if (v17)
    {
      uint64_t v18 = (void *)v17;
      uint64_t v19 = (void *)MEMORY[0x1B3EA1B00](a2, a3);
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = a4;
      *(void *)(v20 + 24) = a5;
      aBlock[4] = partial apply for closure #1 in ActivitySessionManager.session(session:fetchDataCryptorForTopic:completion:);
      void aBlock[5] = v20;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any) -> ();
      uint64_t aBlock[3] = &block_descriptor_26_1;
      id v21 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(v18, sel_activitySessionManager_fetchDataCryptorForTopic_completionHandler_, v5, v19, v21);
      swift_unknownObjectRelease();
      _Block_release(v21);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t closure #1 in ActivitySessionManager.session(session:fetchDataCryptorForTopic:completion:)(uint64_t a1, void (*a2)())
{
  outlined init with copy of Any(a1, (uint64_t)v4);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CPDataCryptor);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    a2();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed Any) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  v5[3] = swift_getObjectType();
  v5[0] = a2;
  swift_retain();
  swift_unknownObjectRetain();
  v3(v5);
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v5);
}

uint64_t ActivitySessionManager.session(session:requestEncryptionKeysForParticipants:topicName:)(uint64_t a1, Class isa, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (uint64_t *)((char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void **)((char *)v5 + OBJC_IVAR___CPActivitySessionManager_queue);
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E4FBCBF0], v9);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if (v13)
  {
    if (one-time initialization token for default == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    uint64_t v30 = v19;
    *(_DWORD *)uint64_t v18 = 136315394;
    uint64_t v28 = a3;
    if (isa)
    {
      uint64_t v20 = MEMORY[0x1B3EA1D20](isa, MEMORY[0x1E4FBC538]);
      unint64_t v22 = v21;
    }
    else
    {
      unint64_t v22 = 0xE500000000000000;
      uint64_t v20 = 0x3E6C696E3CLL;
    }
    uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    swift_bridgeObjectRetain();
    a3 = v28;
    uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, a4, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v16, v17, "Requesting encryption keys for participants=%s topicName=%s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v19, -1, -1);
    MEMORY[0x1B3EA39E0](v18, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v23 = swift_bridgeObjectRelease_n();
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v5) + 0x110))(v23);
  if (result)
  {
    uint64_t v25 = (void *)result;
    if (isa)
    {
      specialized _arrayForceCast<A, B>(_:)((uint64_t)isa);
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
    }
    unint64_t v26 = (void *)MEMORY[0x1B3EA1B00](a3, a4);
    objc_msgSend(v25, sel_activitySessionManager_requestEncryptionKeysForParticipants_topicName_, v5, isa, v26);

    return swift_unknownObjectRelease();
  }
  return result;
}

void ActivitySessionManager.sessionActivityChanged(session:)(void *a1)
{
}

void ActivitySessionManager.sessionChanged(session:)(void *a1, const char *a2, SEL *a3)
{
  uint64_t v6 = v3;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (SEL **)((char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *(void **)((char *)v6 + OBJC_IVAR___CPActivitySessionManager_queue);
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E4FBCBF0], v8);
  id v13 = v12;
  char v14 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if (v14)
  {
    uint64_t v41 = a2;
    if (one-time initialization token for default == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.default);
  uint64_t v16 = a1;
  os_log_type_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v40 = v6;
    unint64_t v21 = (void *)v20;
    unint64_t v39 = a3;
    *(_DWORD *)uint64_t v19 = 138412290;
    uint64_t v42 = v16;
    unint64_t v22 = v16;
    a3 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v21 = v16;

    _os_log_impl(&dword_1B0DF7000, v17, v18, v41, v19, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    uint64_t v23 = v21;
    uint64_t v6 = v40;
    MEMORY[0x1B3EA39E0](v23, -1, -1);
    MEMORY[0x1B3EA39E0](v19, -1, -1);
  }
  else
  {

    os_log_type_t v17 = v16;
  }

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  char v24 = specialized Set.contains(_:)(v16, (uint64_t)v42);
  uint64_t v25 = swift_bridgeObjectRelease();
  if (v24)
  {
    unint64_t v26 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v27 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v6) + 0x110);
    uint64_t v28 = ((uint64_t (*)(uint64_t))v27)(v25);
    if (v28)
    {
      uint64_t v29 = (void *)v28;
      uint64_t v30 = (void *)(*(uint64_t (**)(void))((*v26 & (uint64_t)v16->isa) + 0x330))();
      objc_msgSend(v29, *a3, v6, v30);

      uint64_t v28 = swift_unknownObjectRelease();
    }
    uint64_t v34 = (void *)(*(uint64_t (**)(uint64_t))((*v26 & (uint64_t)v16->isa) + 0x2D0))(v28);
    unsigned __int8 v35 = objc_msgSend(v34, sel_isSystemActivity);

    if ((v35 & 1) == 0)
    {
      uint64_t v36 = (void *)v27();
      if (v36)
      {
        uint64_t v37 = v36;
        if (objc_msgSend(v36, sel_respondsToSelector_, sel_activitySessionManager_tuActivitySessionsDidChange_))
        {
          (*(void (**)(void))((*v26 & *v6) + 0x160))();
          type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
          _sSo29TUConversationActivitySessionCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
          Class isa = Set._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v37, sel_activitySessionManager_tuActivitySessionsDidChange_, v6, isa);
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
        }
        else
        {
          swift_unknownObjectRelease();
        }
      }
    }
  }
  else
  {
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      unint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v33 = 0;
      _os_log_impl(&dword_1B0DF7000, v31, v32, "Ignoring activity session update since it's not yet tracked", v33, 2u);
      MEMORY[0x1B3EA39E0](v33, -1, -1);
    }
  }
}

void ActivitySessionManager.session(session:stateChanged:)(void *a1, unint64_t *a2)
{
  void (*v91)(uint64_t *__return_ptr, uint64_t);
  uint64_t v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  void *p_isa;
  uint64_t v97[4];
  unint64_t v98;
  unint64_t v99;

  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (void **)((char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v10 = *a2;
  uint64_t v11 = *(void **)((char *)v3 + OBJC_IVAR___CPActivitySessionManager_queue);
  *uint64_t v9 = v11;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E4FBCBF0], v6);
  id v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if (v11)
  {
    if (one-time initialization token for default == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v92 = type metadata accessor for Logger();
  uint64_t v13 = __swift_project_value_buffer(v92, (uint64_t)static Log.default);
  unint64_t v14 = v10 >> 62;
  id v15 = a1;
  outlined copy of ActivitySession.State(v10);
  uint64_t v16 = v15;
  outlined copy of ActivitySession.State(v10);
  int v95 = v13;
  os_log_type_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    p_Class isa = (void *)v10;
    uint64_t v94 = v3;
    unint64_t v19 = 0xEB00000000646574;
    uint64_t v20 = 0x6164696C61766E49;
    uint64_t v21 = swift_slowAlloc();
    unint64_t v22 = (void *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    v97[0] = v23;
    *(_DWORD *)uint64_t v21 = 136315650;
    uint64_t v93 = v14;
    if (v14)
    {
      if (v14 == 1)
      {
        uint64_t v24 = 0x664F6465646E6148;
        unint64_t v25 = 0xE900000000000066;
      }
      else
      {
        unint64_t v26 = 0xE600000000000000;
        uint64_t v27 = 0x64656E696F4ALL;
        if (p_isa != (void *)0x8000000000000008)
        {
          uint64_t v27 = 1952867660;
          unint64_t v26 = 0xE400000000000000;
        }
        if (p_isa == (void *)0x8000000000000000) {
          uint64_t v24 = 0x676E6974696157;
        }
        else {
          uint64_t v24 = v27;
        }
        if (p_isa == (void *)0x8000000000000000) {
          unint64_t v25 = 0xE700000000000000;
        }
        else {
          unint64_t v25 = v26;
        }
      }
    }
    else
    {
      uint64_t v24 = 0x6164696C61766E49;
      unint64_t v25 = 0xEB00000000646574;
    }
    os_log_type_t v99 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v28 = (unint64_t)p_isa;
    outlined consume of ActivitySession.State((unint64_t)p_isa);
    unint64_t v29 = outlined consume of ActivitySession.State(v28);
    *(_WORD *)(v21 + 12) = 2080;
    (*(void (**)(unint64_t *__return_ptr, unint64_t))((*MEMORY[0x1E4FBC8C8] & *v16) + 0x2A0))(&v99, v29);
    if (v99 >> 62)
    {
      if (v99 >> 62 == 1)
      {
        uint64_t v20 = 0x664F6465646E6148;
        outlined consume of ActivitySession.State(v99);
        unint64_t v19 = 0xE900000000000066;
      }
      else
      {
        unint64_t v30 = 0xE600000000000000;
        uint64_t v31 = 0x64656E696F4ALL;
        if (v99 != 0x8000000000000008)
        {
          uint64_t v31 = 1952867660;
          unint64_t v30 = 0xE400000000000000;
        }
        if (v99 == 0x8000000000000000) {
          uint64_t v20 = 0x676E6974696157;
        }
        else {
          uint64_t v20 = v31;
        }
        if (v99 == 0x8000000000000000) {
          unint64_t v19 = 0xE700000000000000;
        }
        else {
          unint64_t v19 = v30;
        }
      }
    }
    else
    {
      outlined consume of ActivitySession.State(v99);
    }
    os_log_type_t v99 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v19, v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 22) = 2112;
    os_log_type_t v99 = (unint64_t)v16;
    os_log_type_t v32 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v22 = v16;

    _os_log_impl(&dword_1B0DF7000, v17, v18, "ActivitySessionManager state changed from %s to %s on activity session: %@", (uint8_t *)v21, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v22, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v23, -1, -1);
    MEMORY[0x1B3EA39E0](v21, -1, -1);

    unint64_t v14 = v93;
    uint64_t v3 = v94;
    unint64_t v10 = (unint64_t)p_isa;
  }
  else
  {
    outlined consume of ActivitySession.State(v10);
    outlined consume of ActivitySession.State(v10);
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  char v33 = specialized Set.contains(_:)(v16, v97[0]);
  uint64_t v34 = swift_bridgeObjectRelease();
  if ((v33 & 1) == 0)
  {
    unint64_t v46 = Logger.logObject.getter();
    LOBYTE(v47) = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v46, (os_log_type_t)v47))
    {
LABEL_37:

      return;
    }
    uint64_t v48 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v48 = 0;
    os_log_type_t v49 = "Ignoring activity session update since it's not yet tracked";
LABEL_36:
    _os_log_impl(&dword_1B0DF7000, v46, (os_log_type_t)v47, v49, v48, 2u);
    MEMORY[0x1B3EA39E0](v48, -1, -1);
    goto LABEL_37;
  }
  unsigned __int8 v35 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v36 = (*MEMORY[0x1E4FBC8C8] & *v16) + 672;
  uint64_t v91 = *(void (**)(uint64_t *__return_ptr, uint64_t))((*MEMORY[0x1E4FBC8C8] & *v16) + 0x2A0);
  v91(v97, v34);
  unint64_t v37 = v97[0];
  if ((unint64_t)v97[0] >> 62)
  {
    unint64_t v50 = outlined consume of ActivitySession.State(v97[0]);
    uint64_t v51 = (*(uint64_t (**)(unint64_t))((*v35 & *v3) + 0x110))(v50);
    if (!v51) {
      goto LABEL_62;
    }
    uint64_t v52 = (void *)v51;
    unint64_t v53 = (void *)(*(uint64_t (**)(void))((*v35 & *v16) + 0x330))();
    if (v14)
    {
      if (v14 == 1)
      {
LABEL_57:
        uint64_t v54 = 4;
LABEL_61:
        objc_msgSend(v52, sel_activitySessionManager_activitySessionStateChanged_oldState_, v3, v53, v54);

        uint64_t v51 = swift_unknownObjectRelease();
        goto LABEL_62;
      }
LABEL_41:
      if (v10 == 0x8000000000000000)
      {
        uint64_t v54 = 0;
      }
      else if (v10 == 0x8000000000000008)
      {
        uint64_t v54 = 1;
      }
      else
      {
        uint64_t v54 = 5;
      }
      goto LABEL_61;
    }
LABEL_58:
    uint64_t v54 = 2;
    goto LABEL_61;
  }
  uint64_t v93 = v14;
  uint64_t v94 = v3;
  uint64_t v38 = *(void *)(v97[0] + 24);
  swift_bridgeObjectRetain();
  outlined consume of ActivitySession.State(v37);
  unint64_t v39 = v16;
  uint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.default.getter();
  BOOL v42 = os_log_type_enabled(v40, v41);
  uint64_t v90 = v36;
  if (v42)
  {
    os_log_type_t v43 = (uint8_t *)swift_slowAlloc();
    id v89 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v43 = 138412290;
    p_Class isa = (void *)v10;
    v97[0] = (uint64_t)v39;
    os_log_type_t v44 = v39;
    unint64_t v10 = (unint64_t)p_isa;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_log_t v45 = v89;
    *id v89 = v16;

    _os_log_impl(&dword_1B0DF7000, v40, v41, "ActivitySessionManager session was invalidated: %@", v43, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v45, -1, -1);
    MEMORY[0x1B3EA39E0](v43, -1, -1);
  }
  else
  {

    uint64_t v40 = v39;
  }

  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v55 = v94;
  id v56 = (void (*)(uint64_t *, void))static Published.subscript.modify();
  os_log_type_t v57 = (void *)specialized Set._Variant.remove(_:)(v39);
  v56(v97, 0);
  swift_release();
  swift_release();

  if (!v57)
  {
    swift_bridgeObjectRelease();
    unint64_t v46 = Logger.logObject.getter();
    uint64_t v47 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v46, (os_log_type_t)v47)) {
      goto LABEL_37;
    }
    uint64_t v48 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v48 = 0;
    os_log_type_t v49 = "ActivitySession not found -- not notifying delegate";
    goto LABEL_36;
  }
  int v58 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v59 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & (uint64_t)v39->isa) + 0x2D0);
  p_Class isa = &v39->isa;
  uint64_t v60 = (void *)v59();
  id v61 = objc_msgSend(v60, sel_metadata);

  objc_msgSend(v61, sel_removeImageDiskFile);
  id v62 = *(uint64_t (**)(void))((*v58 & *v55) + 0x110);
  uint64_t v63 = v62();
  uint64_t v3 = v55;
  uint64_t v36 = v90;
  if (v63)
  {
    uint64_t v64 = (void *)v63;
    unint64_t v65 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *p_isa) + 0x330))();
    swift_bridgeObjectRelease();
    if (!v38) {
      swift_bridgeObjectRelease();
    }
    objc_msgSend(v64, sel_activitySessionManager_activitySessionRemoved_userOriginated_, v3, v65, v38 == 0);

    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (v38)
  {
    uint64_t v51 = swift_bridgeObjectRelease();
    unsigned __int8 v35 = (void *)MEMORY[0x1E4FBC8C8];
    goto LABEL_62;
  }
  uint64_t v66 = swift_bridgeObjectRelease();
  uint64_t v51 = ((uint64_t (*)(uint64_t))v62)(v66);
  unsigned __int8 v35 = (void *)MEMORY[0x1E4FBC8C8];
  int v67 = v93;
  if (v51)
  {
    uint64_t v52 = (void *)v51;
    unint64_t v53 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *p_isa) + 0x330))();
    if (v67)
    {
      if (v67 == 1) {
        goto LABEL_57;
      }
      goto LABEL_41;
    }
    goto LABEL_58;
  }
LABEL_62:
  uint64_t v68 = *(uint64_t (**)(void))((*v35 & *v16) + 0x2D0);
  uint64_t v69 = (void *)((uint64_t (*)(uint64_t))v68)(v51);
  unsigned __int8 v70 = objc_msgSend(v69, sel_isSystemActivity);

  if ((v70 & 1) == 0)
  {
    id v71 = (void *)(*(uint64_t (**)(void))((*v35 & *v3) + 0x110))();
    if (v71)
    {
      uint64_t v72 = v71;
      if (objc_msgSend(v71, sel_respondsToSelector_, sel_activitySessionManager_tuActivitySessionsDidChange_))
      {
        (*(void (**)(void))((*v35 & *v3) + 0x160))();
        type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
        uint64_t v90 = v36;
        _sSo29TUConversationActivitySessionCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
        Class isa = Set._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v72, sel_activitySessionManager_tuActivitySessionsDidChange_, v3, isa);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
      }
      else
      {
        id v71 = (void *)swift_unknownObjectRelease();
      }
    }
  }
  unint64_t v74 = (void *)((uint64_t (*)(void *))v68)(v71);
  unsigned int v75 = objc_msgSend(v74, sel_isScreenSharingActivity);

  if (v75)
  {
    if ((*(uint64_t (**)(void))((*v35 & *v16) + 0x2E8))())
    {
      ((void (*)(uint64_t *__return_ptr))v91)(v97);
      unint64_t v76 = v97[0];
      id v98 = 0x8000000000000008;
      os_log_type_t v99 = v97[0];
      char v77 = static ActivitySession.State.== infix(_:_:)(&v99, &v98);
      unint64_t v78 = outlined consume of ActivitySession.State(v76);
      if ((v77 & 1) == 0)
      {
        v91(v97, v78);
        unint64_t v79 = v97[0];
        id v98 = 0x8000000000000000;
        os_log_type_t v99 = v97[0];
        char v80 = static ActivitySession.State.== infix(_:_:)(&v99, &v98);
        outlined consume of ActivitySession.State(v79);
        if ((v80 & 1) == 0)
        {
          if (one-time initialization token for host != -1) {
            swift_once();
          }
          __swift_project_value_buffer(v92, (uint64_t)static Log.host);
          os_log_t v81 = v16;
          uint64_t v82 = Logger.logObject.getter();
          os_log_type_t v83 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v82, v83))
          {
            id v84 = (uint8_t *)swift_slowAlloc();
            uint64_t v85 = swift_slowAlloc();
            *(_DWORD *)id v84 = 136315138;
            p_Class isa = v84 + 4;
            v97[0] = v85;
            os_log_type_t v99 = v68();
            type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivity);
            uint64_t v86 = String.init<A>(reflecting:)();
            os_log_type_t v99 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v87, v97);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1B0DF7000, v82, v83, "Invalidating session because activity is ScreenSharing: %s", v84, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1B3EA39E0](v85, -1, -1);
            uint64_t v88 = v84;
            unsigned __int8 v35 = (void *)MEMORY[0x1E4FBC8C8];
            MEMORY[0x1B3EA39E0](v88, -1, -1);
          }
          else
          {
          }
          (*(void (**)(void))((*v35 & *v81) + 0x3E0))();
        }
      }
    }
  }
}

uint64_t ActivitySessionManager.sessionUnjoined(session:startDate:endDate:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (void *)((char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v12 = *(void **)((char *)v4 + OBJC_IVAR___CPActivitySessionManager_queue);
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E4FBCBF0], v8);
  id v13 = v12;
  char v14 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if (v14)
  {
    if (one-time initialization token for default == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.default);
  uint64_t v16 = a1;
  os_log_type_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    unint64_t v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    v32[1] = a3;
    uint64_t v33 = (uint64_t)v16;
    uint64_t v21 = v20;
    uint64_t v34 = v20;
    v32[0] = a2;
    *(_DWORD *)unint64_t v19 = 136315138;
    type metadata accessor for ActivitySession(0);
    unint64_t v22 = v16;
    uint64_t v23 = String.init<A>(reflecting:)();
    uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v17, v18, "ActivitySessionManager revoking background authorization for unjoined session: %s", v19, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v21, -1, -1);
    MEMORY[0x1B3EA39E0](v19, -1, -1);
  }
  else
  {
  }
  unint64_t v25 = (void *)MEMORY[0x1E4FBC8C8];
  unint64_t v26 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x128))();
  objc_msgSend(v26, sel_revokeBackgroundAuthorizationForSession_, v16);

  uint64_t result = (*(uint64_t (**)(void))((*v25 & *v4) + 0x110))();
  if (result)
  {
    unint64_t v28 = (void *)result;
    unint64_t v29 = (void *)(*(uint64_t (**)(void))((*v25 & *v16) + 0x330))();
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    Class v31 = Date._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v28, sel_activitySessionManager_sessionUnjoined_startDate_endDate_, v4, v29, isa, v31);

    return swift_unknownObjectRelease();
  }
  return result;
}

void ActivitySessionManager.sessionCapabilitiesUpdated(session:)(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (void **)((char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void **)((char *)v1 + OBJC_IVAR___CPActivitySessionManager_queue);
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4FBCBF0], v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_31:
    swift_once();
LABEL_4:
    uint64_t v9 = type metadata accessor for Logger();
    uint64_t v10 = __swift_project_value_buffer(v9, (uint64_t)static Log.default);
    uint64_t v11 = a1;
    uint64_t v59 = v10;
    id v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    BOOL v14 = os_log_type_enabled(v12, v13);
    uint64_t v15 = &OBJC_INSTANCE_METHODS_CPConversationManagerHost;
    uint64_t v16 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v17 = MEMORY[0x1E4FBC840];
    if (v14)
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      uint64_t v62 = (uint64_t)v11;
      uint64_t v63 = v19;
      *(_DWORD *)uint64_t v18 = 136315394;
      type metadata accessor for ActivitySession(0);
      uint64_t v20 = v11;
      uint64_t v21 = String.init<A>(reflecting:)();
      uint64_t v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      uint64_t v23 = swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 12) = 2048;
      (*(void (**)(uint64_t *__return_ptr, uint64_t))((*v16 & *v20) + 0x280))(&v62, v23);

      uint64_t v15 = &OBJC_INSTANCE_METHODS_CPConversationManagerHost;
      uint64_t v17 = MEMORY[0x1E4FBC840];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_1B0DF7000, v12, v13, "ActivitySessionManager capabilities on session: %s updated to: %ld", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v19, -1, -1);
      MEMORY[0x1B3EA39E0](v18, -1, -1);
    }
    else
    {
    }
    (*(void (**)(uint64_t *__return_ptr))((*v16 & *v11) + 0x280))(&v63);
    unint64_t v29 = v58;
    if (v63)
    {
      uint64_t v32 = v17;
      unint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
      unint64_t v34 = v30[2];
      unint64_t v33 = v30[3];
      unint64_t v31 = v34 + 1;
      if (v34 >= v33 >> 1) {
        unint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v33 > 1), v34 + 1, 1, v30);
      }
      v30[2] = v31;
      unsigned __int8 v35 = &v30[2 * v34];
      v35[4] = 0xD000000000000010;
      v35[5] = 0x80000001B115AD80;
      uint64_t v17 = v32;
    }
    else
    {
      unint64_t v30 = (void *)MEMORY[0x1E4FBC860];
      unint64_t v31 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      if (!v31)
      {
LABEL_29:
        swift_bridgeObjectRelease();
        return;
      }
    }
    uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t))((*v16 & *v29) + 0x110);
    uint64_t v60 = (*v16 & *v29) + 272;
    id v61 = v36;
    uint64_t v55 = v30;
    unint64_t v37 = v30 + 5;
    *(__objc2_meth_list *)&long long v28 = v15[316];
    long long v57 = v28;
    uint64_t v56 = v17 + 8;
    do
    {
      uint64_t v40 = *(v37 - 1);
      unint64_t v41 = *v37;
      swift_bridgeObjectRetain_n();
      BOOL v42 = v29;
      os_log_type_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v45 = swift_slowAlloc();
        uint64_t v46 = swift_slowAlloc();
        uint64_t v63 = v46;
        *(_DWORD *)uint64_t v45 = v57;
        uint64_t v48 = v61(v46, v47);
        if (v48)
        {
          uint64_t v62 = v48;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CPActivitySessionManagerDelegate);
          uint64_t v49 = String.init<A>(reflecting:)();
          unint64_t v51 = v50;
        }
        else
        {
          unint64_t v51 = 0xE300000000000000;
          uint64_t v49 = 7104878;
        }
        *(void *)(v45 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v51, &v63);

        swift_bridgeObjectRelease();
        *(_WORD *)(v45 + 12) = 2080;
        swift_bridgeObjectRetain();
        *(void *)(v45 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, &v63);
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B0DF7000, v43, v44, "Asking delegate %s to register plugin: %s", (uint8_t *)v45, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v46, -1, -1);
        MEMORY[0x1B3EA39E0](v45, -1, -1);

        unint64_t v29 = v58;
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v54 = v61(v52, v53);
      if (v54)
      {
        uint64_t v38 = (void *)v54;
        unint64_t v39 = (void *)MEMORY[0x1B3EA1B00](v40, v41);
        swift_bridgeObjectRelease();
        objc_msgSend(v38, sel_activitySessionManager_shouldRegisterPlugin_, v42, v39, v55, v56);

        swift_unknownObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v37 += 2;
      --v31;
    }
    while (v31);
    goto LABEL_29;
  }
  if (objc_msgSend(*(id *)((char *)v1 + OBJC_IVAR___CPActivitySessionManager_featureFlags), sel_sharePlayInFaceTimeCanvasEnabled))
  {
    int v58 = v1;
    if (one-time initialization token for default == -1) {
      goto LABEL_4;
    }
    goto LABEL_31;
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Log.default);
  unint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v27 = 0;
    _os_log_impl(&dword_1B0DF7000, v25, v26, "Not updating capabilities due to FeatureFlag being disabled.", v27, 2u);
    MEMORY[0x1B3EA39E0](v27, -1, -1);
  }
}

Swift::Void __swiftcall ActivitySessionManager.updateVirtualParticipantId(_:)(Swift::UInt64 a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v68 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  uint64_t v63 = *(void *)(v6 - 8);
  uint64_t v64 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v62 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<ActivitySession>>.Publisher);
  uint64_t v58 = *(void *)(v8 - 8);
  uint64_t v59 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v56 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<Published<Set<ActivitySession>>.Publisher, [String]>);
  uint64_t v60 = *(void *)(v10 - 8);
  uint64_t v61 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v69 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.FlatMap<Publishers.SetFailureType<Publishers.Sequence<[TopicInfo], Never>, PluginRpcError>, PubSubTopicsObserver>);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.HandleEvents<Publishers.FlatMap<Publishers.SetFailureType<Publishers.Sequence<[TopicInfo], Never>, PluginRpcError>, PubSubTopicsObserver>>);
  uint64_t v55 = *(void *)(v70 - 8);
  MEMORY[0x1F4188790](v70);
  uint64_t v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.WaitUntilAvailable<Publishers.HandleEvents<Publishers.FlatMap<Publishers.SetFailureType<Publishers.Sequence<[TopicInfo], Never>, PluginRpcError>, PubSubTopicsObserver>>, Publishers.Map<Published<Set<ActivitySession>>.Publisher, [String]>, OS_dispatch_queue>);
  MEMORY[0x1F4188790](v71);
  long long v57 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.WaitUntilAvailable<Publishers.HandleEvents<Publishers.FlatMap<Publishers.SetFailureType<Publishers.Sequence<[TopicInfo], Never>, PluginRpcError>, PubSubTopicsObserver>>, Publishers.Map<Published<Set<ActivitySession>>.Publisher, [String]>, OS_dispatch_queue>, OS_dispatch_queue>);
  uint64_t v66 = *(void *)(v19 - 8);
  uint64_t v67 = v19;
  MEMORY[0x1F4188790](v19);
  unint64_t v65 = (char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchPredicate();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (uint64_t *)((char *)&v50 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v25 = *(void **)&v2[OBJC_IVAR___CPActivitySessionManager_queue];
  void *v24 = v25;
  (*(void (**)(void *, void, uint64_t))(v22 + 104))(v24, *MEMORY[0x1E4FBCBF0], v21);
  id v54 = v25;
  LOBYTE(v25) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v22 + 8))(v24, v21);
  if (v25)
  {
    if (a1
      && objc_msgSend(*(id *)&v2[OBJC_IVAR___CPActivitySessionManager_featureFlags], sel_expanseTopicStateEnabled))
    {
      os_log_type_t v26 = (uint64_t (*)(char *, char *, Swift::UInt64))(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *(void *)v2)
                                                                                        + 0x2B0))();
      uint64_t v27 = v26(v2, &v2[OBJC_IVAR___CPActivitySessionManager_groupUUID], a1);
      swift_release();
      uint64_t v28 = OBJC_IVAR___CPActivitySessionManager_topicsObserver;
      *(void *)&v2[OBJC_IVAR___CPActivitySessionManager_topicsObserver] = v27;
      swift_release();
      if (*(void *)&v2[v28])
      {
        id v72 = *(id *)&v2[v28];
        swift_retain();
        uint64_t v52 = static Subscribers.Demand.unlimited.getter();
        uint64_t v50 = type metadata accessor for PubSubTopicsObserver();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Sequence<[TopicInfo], Never>);
        lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession(&lazy protocol witness table cache variable for type PubSubTopicsObserver and conformance PubSubTopicsObserver, (void (*)(uint64_t))type metadata accessor for PubSubTopicsObserver);
        Swift::UInt64 v53 = a1;
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Sequence<[TopicInfo], Never> and conformance Publishers.Sequence<A, B>, &demangling cache variable for type metadata for Publishers.Sequence<[TopicInfo], Never>);
        Publisher.flatMap<A>(maxPublishers:_:)();
        swift_release();
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.FlatMap<Publishers.SetFailureType<Publishers.Sequence<[TopicInfo], Never>, PluginRpcError>, PubSubTopicsObserver> and conformance Publishers.FlatMap<A, B>, &demangling cache variable for type metadata for Publishers.FlatMap<Publishers.SetFailureType<Publishers.Sequence<[TopicInfo], Never>, PluginRpcError>, PubSubTopicsObserver>);
        unint64_t v29 = v17;
        unint64_t v51 = v17;
        Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
        (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
        swift_beginAccess();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Set<ActivitySession>>);
        unint64_t v30 = v56;
        Published.projectedValue.getter();
        swift_endAccess();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type Published<Set<ActivitySession>>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Set<ActivitySession>>.Publisher);
        unint64_t v31 = v69;
        uint64_t v32 = v59;
        Publisher.map<A>(_:)();
        (*(void (**)(char *, uint64_t))(v58 + 8))(v30, v32);
        unint64_t v33 = v62;
        static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
        uint64_t v34 = v55;
        uint64_t v35 = (uint64_t)v57;
        (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v57, v29, v70);
        uint64_t v36 = v71;
        uint64_t v38 = v60;
        uint64_t v37 = v61;
        (*(void (**)(uint64_t, char *, uint64_t))(v60 + 16))(v35 + *(int *)(v71 + 84), v31, v61);
        uint64_t v40 = v63;
        uint64_t v39 = v64;
        (*(void (**)(uint64_t, char *, uint64_t))(v63 + 16))(v35 + *(int *)(v36 + 92), v33, v64);
        unint64_t v41 = v54;
        *(void *)(v35 + *(int *)(v36 + 88)) = v54;
        BOOL v42 = *(void (**)(char *, uint64_t))(v40 + 8);
        id v43 = v41;
        v42(v33, v39);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v69, v37);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v51, v70);
        id v72 = v43;
        uint64_t v44 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
        uint64_t v45 = (uint64_t)v68;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v68, 1, 1, v44);
        type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type Publishers.WaitUntilAvailable<Publishers.HandleEvents<Publishers.FlatMap<Publishers.SetFailureType<Publishers.Sequence<[TopicInfo], Never>, PluginRpcError>, PubSubTopicsObserver>>, Publishers.Map<Published<Set<ActivitySession>>.Publisher, [String]>, OS_dispatch_queue> and conformance Publishers.WaitUntilAvailable<A, B, C>, &demangling cache variable for type metadata for Publishers.WaitUntilAvailable<Publishers.HandleEvents<Publishers.FlatMap<Publishers.SetFailureType<Publishers.Sequence<[TopicInfo], Never>, PluginRpcError>, PubSubTopicsObserver>>, Publishers.Map<Published<Set<ActivitySession>>.Publisher, [String]>, OS_dispatch_queue>);
        _sSo29TUConversationActivitySessionCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
        id v46 = v43;
        uint64_t v47 = v65;
        Publisher.receive<A>(on:options:)();
        outlined destroy of UUID?(v45, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

        outlined destroy of UUID?(v35, &demangling cache variable for type metadata for Publishers.WaitUntilAvailable<Publishers.HandleEvents<Publishers.FlatMap<Publishers.SetFailureType<Publishers.Sequence<[TopicInfo], Never>, PluginRpcError>, PubSubTopicsObserver>>, Publishers.Map<Published<Set<ActivitySession>>.Publisher, [String]>, OS_dispatch_queue>);
        *(void *)(swift_allocObject() + 16) = v53;
        swift_allocObject();
        swift_unknownObjectWeakInit();
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<Publishers.WaitUntilAvailable<Publishers.HandleEvents<Publishers.FlatMap<Publishers.SetFailureType<Publishers.Sequence<[TopicInfo], Never>, PluginRpcError>, PubSubTopicsObserver>>, Publishers.Map<Published<Set<ActivitySession>>.Publisher, [String]>, OS_dispatch_queue>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.WaitUntilAvailable<Publishers.HandleEvents<Publishers.FlatMap<Publishers.SetFailureType<Publishers.Sequence<[TopicInfo], Never>, PluginRpcError>, PubSubTopicsObserver>>, Publishers.Map<Published<Set<ActivitySession>>.Publisher, [String]>, OS_dispatch_queue>, OS_dispatch_queue>);
        uint64_t v48 = v67;
        uint64_t v49 = Publisher.sink(receiveCompletion:receiveValue:)();
        swift_release();
        swift_release();
        (*(void (**)(char *, uint64_t))(v66 + 8))(v47, v48);
      }
      else
      {
        uint64_t v49 = 0;
      }
      *(void *)&v2[OBJC_IVAR___CPActivitySessionManager_topicsObserverSubscription] = v49;
    }
    else
    {
      *(void *)&v2[OBJC_IVAR___CPActivitySessionManager_topicsObserver] = 0;
    }
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t key path getter for Sequence.publisher : [TopicInfo]()
{
  return Sequence.publisher.getter();
}

uint64_t specialized implicit closure #2 in ActivitySessionManager.updateVirtualParticipantId(_:)()
{
  return swift_bridgeObjectRelease();
}

void closure #1 in ActivitySessionManager.updateVirtualParticipantId(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  char v5 = *(unsigned char *)(a1 + 32);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.default);
  outlined copy of TopicInfo(v2, v1, v4, v3, v5);
  outlined copy of TopicInfo(v2, v1, v4, v3, v5);
  oslog = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v13 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_bridgeObjectRetain();
    if (v5) {
      swift_retain();
    }
    else {
      swift_bridgeObjectRetain();
    }
    uint64_t v10 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of TopicInfo(v2, v1, v4, v3, v5);
    outlined consume of TopicInfo(v2, v1, v4, v3, v5);
    _os_log_impl(&dword_1B0DF7000, oslog, v7, "Received topic info: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v9, -1, -1);
    MEMORY[0x1B3EA39E0](v8, -1, -1);
  }
  else
  {
    outlined consume of TopicInfo(v2, v1, v4, v3, v5);
    outlined consume of TopicInfo(v2, v1, v4, v3, v5);
  }
}

uint64_t closure #2 in ActivitySessionManager.updateVirtualParticipantId(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy14CopresenceCore15ActivitySessionCG_SSs5NeverOTg504_s14d6Core22fG127ManagerC26updateVirtualParticipantIdyys6UInt64VFSaySSGShyAA0cD0CGcfU0_SSAIcfu_33_23d0b21f370648a7fa82888872819982AISSTf3nnnpk_nTf1cn_n(*a1);
  *a2 = result;
  return result;
}

void closure #3 in ActivitySessionManager.updateVirtualParticipantId(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v44 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginRpcError?);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v43 = (uint64_t)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  os_log_type_t v7 = (char *)&v39 - v6;
  uint64_t v8 = type metadata accessor for PluginRpcError();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v41 = (uint64_t)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v42 = (uint64_t)&v39 - v13;
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v39 - v15;
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v39 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v21, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  uint64_t v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v22((uint64_t)v21, 1, v8) == 1)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Log.default);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      os_log_type_t v26 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v26 = 134217984;
      uint64_t v46 = (uint64_t)v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B0DF7000, v24, v25, "Stopped observing topics for virtualParticipantId=%llu", v26, 0xCu);
      MEMORY[0x1B3EA39E0](v26, -1, -1);
    }
  }
  else
  {
    outlined init with take of PluginRpcError((uint64_t)v21, (uint64_t)v18);
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Log.default);
    _s14CopresenceCore14PluginRpcErrorOWOcTm_0((uint64_t)v18, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
    uint64_t v28 = Logger.logObject.getter();
    int v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, (os_log_type_t)v29))
    {
      int v40 = v29;
      uint64_t v30 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      uint64_t v39 = v31;
      *(_DWORD *)uint64_t v30 = 134218242;
      uint64_t v45 = (uint64_t)v44;
      uint64_t v46 = v31;
      uint64_t v44 = &v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v30 + 12) = 2080;
      _s14CopresenceCore14PluginRpcErrorOWOcTm_0((uint64_t)v16, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
      uint64_t v32 = v43;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v7, v43, &demangling cache variable for type metadata for PluginRpcError?);
      if (v22(v32, 1, v8) == 1)
      {
        unint64_t v33 = 0xE300000000000000;
        uint64_t v34 = 7104878;
      }
      else
      {
        uint64_t v36 = v42;
        outlined init with take of PluginRpcError(v32, v42);
        _s14CopresenceCore14PluginRpcErrorOWOcTm_0(v36, v41, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
        uint64_t v34 = String.init<A>(reflecting:)();
        unint64_t v33 = v37;
        _s14CopresenceCore14PluginRpcErrorOWOhTm_0(v36, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
      }
      outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for PluginRpcError?);
      uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v33, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s14CopresenceCore14PluginRpcErrorOWOhTm_0((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
      _os_log_impl(&dword_1B0DF7000, v28, (os_log_type_t)v40, "Failed to observe topics for virtualParticipantId=%llu, error=%s", (uint8_t *)v30, 0x16u);
      uint64_t v38 = v39;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v38, -1, -1);
      MEMORY[0x1B3EA39E0](v30, -1, -1);

      uint64_t v35 = (uint64_t)v18;
    }
    else
    {

      _s14CopresenceCore14PluginRpcErrorOWOhTm_0((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
      uint64_t v35 = (uint64_t)v18;
    }
    _s14CopresenceCore14PluginRpcErrorOWOhTm_0(v35, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
  }
}

void closure #4 in ActivitySessionManager.updateVirtualParticipantId(_:)(uint64_t a1, uint64_t a2)
{
  outlined init with take of TopicInfo(a1, (uint64_t)v49);
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x1B3EA3B30](a2 + 16);
  if (!v3) {
    goto LABEL_8;
  }
  uint64_t v4 = (void *)v3;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();

  swift_release();
  swift_release();
  uint64_t v5 = v50;
  outlined retain of TopicInfo((uint64_t)v49, (void (*)(void, void, void, void, void))outlined copy of TopicInfo);
  specialized Sequence.first(where:)(v5, (uint64_t)v49);
  os_log_type_t v7 = v6;
  outlined retain of TopicInfo((uint64_t)v49, (void (*)(void, void, void, void, void))outlined consume of TopicInfo);
  swift_bridgeObjectRelease();
  if (v7)
  {
    outlined init with take of TopicInfo((uint64_t)v49, (uint64_t)&v50);
    if (v52)
    {
      long long v8 = v50;
      uint64_t v9 = *((void *)&v51 + 1);
      uint64_t v43 = (void (*)(void, void))v51;
      uint64_t v10 = one-time initialization token for default;
      swift_bridgeObjectRetain();
      swift_retain();
      if (v10 != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      __swift_project_value_buffer(v11, (uint64_t)static Log.default);
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      uint64_t v12 = v7;
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v44 = v12;
        uint64_t v15 = swift_slowAlloc();
        log = v13;
        uint64_t v16 = (void *)swift_slowAlloc();
        uint64_t v42 = swift_slowAlloc();
        v48[0] = v42;
        *(_DWORD *)uint64_t v15 = 138412546;
        os_log_type_t type = v14;
        id v17 = v44;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v16 = v7;

        *(_WORD *)(v15 + 12) = 2080;
        *((void *)&v46 + 1) = *((void *)&v8 + 1);
        *(void *)&long long v47 = v43;
        *((void *)&v47 + 1) = v9;
        swift_bridgeObjectRetain();
        swift_retain();
        uint64_t v18 = String.init<A>(reflecting:)();
        *(void *)&long long v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, log, type, "Terminating activitySession %@ from topicTermination signal %s", (uint8_t *)v15, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v16, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v42, -1, -1);
        uint64_t v20 = v15;
        uint64_t v12 = v44;
        MEMORY[0x1B3EA39E0](v20, -1, -1);
      }
      else
      {

        swift_release_n();
        swift_bridgeObjectRelease_n();
      }
      uint64_t v28 = (void *)MEMORY[0x1E4FBC8C8];
      uint64_t v29 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v12) + 0x3E0))();
      (*(void (**)(long long *__return_ptr, uint64_t))((*v28 & *v12) + 0x2A0))(&v46, v29);
      unint64_t v30 = v46;
      v48[0] = v46;
      uint64_t v31 = swift_allocObject();
      *(void *)(v31 + 16) = 0;
      *(void *)(v31 + 24) = 0;
      uint64_t v45 = v31;
      char v32 = static ActivitySession.State.== infix(_:_:)((unint64_t *)v48, (unint64_t *)&v45);
      swift_release();
      outlined consume of ActivitySession.State(v30);
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      unint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.default.getter();
      BOOL v35 = os_log_type_enabled(v33, v34);
      if (v32)
      {
        if (v35)
        {
          uint64_t v36 = (uint8_t *)swift_slowAlloc();
          uint64_t v37 = swift_slowAlloc();
          *(void *)&long long v46 = v37;
          *(_DWORD *)uint64_t v36 = 136315138;
          swift_bridgeObjectRetain();
          v48[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, *((unint64_t *)&v8 + 1), (uint64_t *)&v46);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B0DF7000, v33, v34, "Successfully terminated topic %s", v36, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v37, -1, -1);
          MEMORY[0x1B3EA39E0](v36, -1, -1);
        }
        else
        {

          swift_release_n();
          swift_bridgeObjectRelease_n();
        }
        v43(v8, *((void *)&v8 + 1));
        swift_release();
        swift_bridgeObjectRelease();
      }
      else if (v35)
      {
        uint64_t v38 = (uint8_t *)swift_slowAlloc();
        uint64_t v39 = swift_slowAlloc();
        *(void *)&long long v46 = v39;
        *(_DWORD *)uint64_t v38 = 136315138;
        swift_bridgeObjectRetain();
        v48[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, *((unint64_t *)&v8 + 1), (uint64_t *)&v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B0DF7000, v33, v34, "Couldn't terminate topic %s", v38, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v39, -1, -1);
        MEMORY[0x1B3EA39E0](v38, -1, -1);

        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {

        swift_release_n();
        swift_bridgeObjectRelease_n();
      }
    }
    else
    {
      (*(void (**)(void, void))((*MEMORY[0x1E4FBC8C8] & *v7) + 0x3C8))(v51, 0);
    }
  }
  else
  {
LABEL_8:
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Log.default);
    outlined retain of TopicInfo((uint64_t)v49, (void (*)(void, void, void, void, void))outlined copy of TopicInfo);
    outlined retain of TopicInfo((uint64_t)v49, (void (*)(void, void, void, void, void))outlined copy of TopicInfo);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      v48[0] = v25;
      *(_DWORD *)uint64_t v24 = 136315138;
      outlined init with take of TopicInfo((uint64_t)v49, (uint64_t)&v50);
      if (v52)
      {
        long long v46 = v50;
        long long v47 = v51;
        swift_bridgeObjectRetain();
        swift_retain();
      }
      else
      {
        long long v46 = v50;
        *(void *)&long long v47 = v51;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v26 = String.init<A>(describing:)();
      *(void *)&long long v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined retain of TopicInfo((uint64_t)v49, (void (*)(void, void, void, void, void))outlined consume of TopicInfo);
      outlined retain of TopicInfo((uint64_t)v49, (void (*)(void, void, void, void, void))outlined consume of TopicInfo);
      _os_log_impl(&dword_1B0DF7000, v22, v23, "Dropping topic update for unrecognized activity session: %s", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v25, -1, -1);
      MEMORY[0x1B3EA39E0](v24, -1, -1);
    }
    else
    {
      outlined retain of TopicInfo((uint64_t)v49, (void (*)(void, void, void, void, void))outlined consume of TopicInfo);
      outlined retain of TopicInfo((uint64_t)v49, (void (*)(void, void, void, void, void))outlined consume of TopicInfo);
    }
  }
}

void ActivitySessionManager.logMetrics(for:)(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (uint64_t *)((char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  os_log_type_t v7 = *(void **)((char *)v1 + OBJC_IVAR___CPActivitySessionManager_queue);
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4FBCBF0], v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_18:
    swift_once();
    goto LABEL_12;
  }
  if (!objc_msgSend(a1, sel_isLocallyInitiated)) {
    return;
  }
  uint64_t v9 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x110))();
  if (!v9) {
    return;
  }
  uint64_t v10 = (void *)v9;
  id v11 = objc_msgSend(a1, sel_activity);
  id v12 = objc_msgSend(v11, sel_metadata);

  if (!v12 || (id v13 = objc_msgSend(v12, sel_context), v12, !v13))
  {
    swift_unknownObjectRelease();
    return;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B1138A90;
  *(void *)(inited + 32) = 0x7079745F6C6C6163;
  *(void *)(inited + 40) = 0xE900000000000065;
  id v15 = objc_msgSend(v10, sel_activitySessionManagerRequestedCallTypeStringForLogging_, v1);
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  id v19 = objc_allocWithZone(NSString);
  uint64_t v20 = (void *)MEMORY[0x1B3EA1B00](v16, v18);
  swift_bridgeObjectRelease();
  id v21 = objc_msgSend(v19, sel_initWithString_, v20);

  *(void *)(inited + 48) = v21;
  strcpy((char *)(inited + 56), "activity_type");
  *(_WORD *)(inited + 70) = -4864;
  id v52 = v13;
  id v22 = objc_msgSend(v13, sel_analyticsIdentifier);
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;

  id v26 = objc_allocWithZone(NSString);
  unint64_t v27 = (void *)MEMORY[0x1B3EA1B00](v23, v25);
  swift_bridgeObjectRelease();
  id v28 = objc_msgSend(v26, sel_initWithString_, v27);

  *(void *)(inited + 72) = v28;
  *(void *)(inited + 80) = 0x695F656C646E7562;
  *(void *)(inited + 88) = 0xE900000000000064;
  id v29 = objc_msgSend(a1, sel_activity);
  id v30 = objc_msgSend(v29, sel_bundleIdentifier);

  if (!v30)
  {
    __break(1u);
    return;
  }
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v33 = v32;

  id v34 = objc_allocWithZone(NSString);
  BOOL v35 = (void *)MEMORY[0x1B3EA1B00](v31, v33);
  swift_bridgeObjectRelease();
  id v36 = objc_msgSend(v34, sel_initWithString_, v35);

  *(void *)(inited + 96) = v36;
  *(void *)(inited + 104) = 0xD000000000000013;
  *(void *)(inited + 112) = 0x80000001B1161900;
  id v37 = objc_msgSend(a1, sel_activity);
  id v38 = objc_msgSend(v37, sel_metadata);

  if (v38)
  {
    id v39 = objc_msgSend(v38, sel_supportsContinuationOnTV);
  }
  else
  {
    id v39 = 0;
  }
  *(void *)(inited + 120) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, v39);
  a1 = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  if (one-time initialization token for default != -1) {
    goto LABEL_18;
  }
LABEL_12:
  uint64_t v40 = type metadata accessor for Logger();
  __swift_project_value_buffer(v40, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v43 = swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    aBlock[0] = v44;
    *(_DWORD *)uint64_t v43 = 136315394;
    uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x80000001B11618E0, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v43 + 12) = 2080;
    uint64_t v53 = (uint64_t)a1;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : NSObject]);
    uint64_t v45 = String.init<A>(reflecting:)();
    uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v41, v42, "Logged coreanalytics event %s %s", (uint8_t *)v43, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v44, -1, -1);
    MEMORY[0x1B3EA39E0](v43, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  long long v47 = v52;
  uint64_t v48 = (void *)MEMORY[0x1B3EA1B00](0xD00000000000001FLL, 0x80000001B11618E0);
  uint64_t v49 = swift_allocObject();
  *(void *)(v49 + 16) = a1;
  aBlock[4] = (uint64_t)partial apply for closure #1 in ActivitySession.logDurationMetric(_:);
  void aBlock[5] = v49;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  uint64_t aBlock[3] = (uint64_t)&block_descriptor_38;
  long long v50 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v50);
  swift_unknownObjectRelease();
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed ActivitySessionManager, @in_guaranteed UUID, @unowned UInt64) -> (@owned PubSubTopicsObserver)@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = closure #1 in variable initialization expression of ActivitySessionManager._topicsObserverGenerator(*a1, a2, *a3);
  *a4 = result;
  return result;
}

uint64_t key path setter for ActivitySessionManager.topicsObserverGenerator : ActivitySessionManager(uint64_t *a1, void **a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  uint64_t v6 = *(uint64_t (**)(uint64_t (*)(), uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x2B8);
  swift_retain();
  return v6(partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed ActivitySessionManager, @in_guaranteed UUID, @in_guaranteed UInt64) -> (@out PubSubTopicsObserver), v5);
}

uint64_t (*ActivitySessionManager.topicsObserverGenerator.getter())()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR___CPActivitySessionManager__topicsObserverGenerator);
  swift_beginAccess();
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v2;
  swift_retain();
  return partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed ActivitySessionManager, @in_guaranteed UUID, @in_guaranteed UInt64) -> (@out PubSubTopicsObserver);
}

void ActivitySessionManager.topicsObserverGenerator.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  uint64_t v6 = (void *)(v2 + OBJC_IVAR___CPActivitySessionManager__topicsObserverGenerator);
  swift_beginAccess();
  swift_retain();
  os_log_type_t v7 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v8 = NSClassFromString(v7);

  if (v8
    || (uint64_t v9 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
        Class v10 = NSClassFromString(v9),
        v9,
        v10))
  {
    *uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ActivitySessionManager, @in_guaranteed UUID, @unowned UInt64) -> (@owned PubSubTopicsObserver);
    v6[1] = v5;
    swift_endAccess();
    swift_release();
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

void (*ActivitySessionManager.topicsObserverGenerator.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___CPActivitySessionManager__topicsObserverGenerator;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = (uint64_t *)(v1 + v4);
  swift_beginAccess();
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  *(void *)(v8 + 24) = v6;
  v3[3] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed ActivitySessionManager, @in_guaranteed UUID, @in_guaranteed UInt64) -> (@out PubSubTopicsObserver);
  v3[4] = v8;
  swift_retain();
  return ActivitySessionManager.topicsObserverGenerator.modify;
}

void ActivitySessionManager.topicsObserverGenerator.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  uint64_t v4 = *(void *)(*(void *)a1 + 32);
  if ((a2 & 1) == 0)
  {
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v3;
    *(void *)(v11 + 24) = v4;
    id v12 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
    Class v13 = NSClassFromString(v12);

    if (v13
      || (os_log_type_t v14 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
          Class v15 = NSClassFromString(v14),
          v14,
          v15))
    {
      uint64_t v16 = (void *)(v2[5] + v2[6]);
      *uint64_t v16 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ActivitySessionManager, @in_guaranteed UUID, @unowned UInt64) -> (@owned PubSubTopicsObserver);
      v16[1] = v11;
      swift_endAccess();
      swift_release();
      goto LABEL_8;
    }
LABEL_12:
    __break(1u);
    return;
  }
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  uint64_t v6 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v7 = NSClassFromString(v6);

  if (!v7)
  {
    uint64_t v8 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL);
    Class v9 = NSClassFromString(v8);

    if (!v9)
    {
      __break(1u);
      goto LABEL_12;
    }
  }
  Class v10 = (void *)(v2[5] + v2[6]);
  swift_release();
  *Class v10 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ActivitySessionManager, @in_guaranteed UUID, @unowned UInt64) -> (@owned PubSubTopicsObserver);
  v10[1] = v5;
  swift_release();
  swift_endAccess();
LABEL_8:
  free(v2);
}

uint64_t closure #1 in variable initialization expression of ActivitySessionManager._topicsObserverGenerator(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for PluginClient.Configuration(0);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  Class v10 = (char *)&v27 - v9;
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  os_log_type_t v14 = (uint64_t *)((char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  Class v15 = *(void **)((char *)a1 + OBJC_IVAR___CPActivitySessionManager_queue);
  *os_log_type_t v14 = v15;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v14, *MEMORY[0x1E4FBCBF0], v11);
  id v16 = v15;
  char v17 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  if (v17)
  {
    closure #1 in closure #1 in variable initialization expression of ActivitySessionManager._topicsObserverGenerator(a3, a1, (uint64_t)v10);
    _s14CopresenceCore14PluginRpcErrorOWOcTm_0((uint64_t)v10, (uint64_t)v8, type metadata accessor for PluginClient.Configuration);
    type metadata accessor for PluginClient(0);
    swift_allocObject();
    id v19 = v16;
    uint64_t v20 = PluginClient.init(config:queue:reporter:reporterTag:)((uint64_t)v8, v16, 0, 0, 0);
    type metadata accessor for PluginPubSubServiceProvider();
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = v20;
    id v22 = *(void **)((char *)a1 + OBJC_IVAR___CPActivitySessionManager_serverBag);
    swift_retain();
    id v23 = objc_msgSend(v22, sel_qrPluginMaxRpcStreamAttempts);
    double v24 = (double)(uint64_t)objc_msgSend(v22, sel_qrPluginRpcStreamRetryIntervalMillis) / 1000.0;
    type metadata accessor for PubSubTopicsObserver();
    uint64_t v25 = swift_allocObject();
    uint64_t v26 = specialized PubSubTopicsObserver.init(serviceProvider:rpcMaxAttempts:rpcRetryIntervalSeconds:)(v21, (uint64_t)v23, v25, v24);
    swift_release();
    _s14CopresenceCore14PluginRpcErrorOWOhTm_0((uint64_t)v10, type metadata accessor for PluginClient.Configuration);
    return v26;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in closure #1 in variable initialization expression of ActivitySessionManager._topicsObserverGenerator@<X0>(uint64_t a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  void (*v22)(void *__return_ptr, uint64_t);
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v40;
  void (*v41)(void *__return_ptr);
  int v42;
  id v43;
  char *v44;
  uint64_t (*v45)();
  uint64_t v46;
  unint64_t v47[2];
  void v48[3];
  uint64_t v49;
  uint64_t v50;
  void v51[2];
  void v52[3];
  uint64_t v53;
  uint64_t v54;

  unint64_t v46 = a3;
  uint64_t v5 = type metadata accessor for PluginEndpoint();
  uint64_t v6 = MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = v8;
  MEMORY[0x1F4188790](v6);
  Class v10 = (char *)&v40 - v9;
  *(void *)Class v10 = UUID.uuidString.getter();
  *((void *)v10 + 1) = v11;
  *((void *)v10 + 2) = a1;
  *(_OWORD *)(v10 + 24) = xmmword_1B113B080;
  *((void *)v10 + 5) = 0;
  swift_storeEnumTagMultiPayload();
  uint64_t v12 = *(void **)((char *)a2 + OBJC_IVAR___CPActivitySessionManager_serverBag);
  double v13 = (double)(uint64_t)objc_msgSend(v12, sel_qrPluginConnectionRetryIntervalMillis) / 1000.0;
  uint64_t v45 = type metadata accessor for PluginEndpoint;
  _s14CopresenceCore14PluginRpcErrorOWOcTm_0((uint64_t)v10, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for PluginEndpoint);
  uint64_t v43 = objc_msgSend(v12, sel_qrPluginMaxConnectionAttempts);
  uint64_t v41 = *(void (**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *a2) + 0x1A0);
  v41(v52);
  uint64_t v14 = v53;
  uint64_t v15 = v54;
  __swift_project_boxed_opaque_existential_1(v52, v53);
  id v16 = self;
  uint64_t v40 = v16;
  id v17 = objc_msgSend(v16, sel_serverCertValidationEnabledUserDefaultsKey);
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v19;

  (*(void (**)(void *__return_ptr, void, uint64_t, uint64_t, void, void, void, uint64_t, uint64_t))(v15 + 32))(v48, MEMORY[0x1E4FBB390], v18, v20, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB3B0], MEMORY[0x1E4FBB398], v14, v15);
  swift_bridgeObjectRelease();
  os_log_type_t v42 = (LOBYTE(v48[0]) == 2) | LOBYTE(v48[0]);
  uint64_t v21 = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v52);
  id v22 = (void (*)(void *__return_ptr, uint64_t))v41;
  ((void (*)(void *__return_ptr, uint64_t))v41)(v52, v21);
  id v23 = v53;
  double v24 = v54;
  __swift_project_boxed_opaque_existential_1(v52, v53);
  uint64_t v25 = objc_msgSend(v16, sel_serverCertHostnameUserDefaultsKey);
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v28 = v27;

  id v29 = MEMORY[0x1E4FBB1A0];
  (*(void (**)(void *__return_ptr, void, uint64_t, uint64_t, void, void, void, uint64_t, uint64_t))(v24 + 32))(v51, MEMORY[0x1E4FBB1A0], v26, v28, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB1D8], MEMORY[0x1E4FBB1A8], v23, v24);
  id v30 = swift_bridgeObjectRelease();
  uint64_t v31 = v51[0];
  uint64_t v32 = v51[1];
  v22(v48, v30);
  uint64_t v33 = v49;
  id v34 = v50;
  __swift_project_boxed_opaque_existential_1(v48, v49);
  BOOL v35 = objc_msgSend(v40, sel_serverCertLeafMarkerOIDUserDefaultsKey);
  id v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v38 = v37;

  (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, uint64_t))(v34 + 32))(v47, v29, v36, v38, v29, MEMORY[0x1E4FBB1D8], MEMORY[0x1E4FBB1A8], v33, v34);
  swift_bridgeObjectRelease();
  PluginClient.Configuration.init(endpoint:connectionMaxAttempts:connectionRetryInterval:serverCertValidationEnabled:serverCertHostname:serverCertLeafMarkerOID:)((uint64_t)v44, (uint64_t)v43, v42 & 1, v31, v32, v47[0], v47[1], v46, v13);
  _s14CopresenceCore14PluginRpcErrorOWOhTm_0((uint64_t)v10, (uint64_t (*)(void))v45);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v48);
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v52);
}

uint64_t ActivitySessionManager.requestForegroundPresentationFor(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (uint64_t *)((char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)((char *)v2 + OBJC_IVAR___CPActivitySessionManager_queue);
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4FBCBF0], v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if (v8)
  {
    uint64_t v11 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t result = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x110))(result);
    if (result)
    {
      uint64_t v12 = (void *)result;
      double v13 = (void *)(*(uint64_t (**)(void))((*v11 & *a1) + 0x330))();
      objc_msgSend(v12, sel_activitySessionManager_requestForegroundPresentationForActivity_, v2, v13);

      return swift_unknownObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ActivitySessionManager.session(session:associatedScene:)(void *a1, uint64_t a2, unint64_t a3)
{
  return ActivitySessionManager.session(session:associatedScene:)(a1, a2, a3, "ActivitySessionManager: associatedScene persistentSceneIdentifier:%s");
}

uint64_t ActivitySessionManager.session(session:disassociatedScene:)(void *a1, uint64_t a2, unint64_t a3)
{
  return ActivitySessionManager.session(session:associatedScene:)(a1, a2, a3, "ActivitySessionManager: disassociatedScene persistentSceneIdentifier:%s");
}

uint64_t ActivitySessionManager.session(session:associatedScene:)(void *a1, uint64_t a2, unint64_t a3, const char *a4)
{
  uint64_t v6 = v4;
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  double v13 = (const char **)((char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = *(void **)((char *)v6 + OBJC_IVAR___CPActivitySessionManager_queue);
  *double v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E4FBCBF0], v10);
  id v15 = v14;
  char v16 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if (v16)
  {
    if (one-time initialization token for default == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    uint64_t v31 = a1;
    uint64_t v22 = v21;
    uint64_t v33 = v21;
    id v30 = a4;
    *(_DWORD *)uint64_t v20 = 136315138;
    if (a3)
    {
      unint64_t v23 = a3;
    }
    else
    {
      a2 = 7104878;
      unint64_t v23 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, v23, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v18, v19, v30, v20, 0xCu);
    swift_arrayDestroy();
    uint64_t v24 = v22;
    a1 = v31;
    MEMORY[0x1B3EA39E0](v24, -1, -1);
    MEMORY[0x1B3EA39E0](v20, -1, -1);
  }
  else
  {

    uint64_t v25 = swift_bridgeObjectRelease_n();
  }
  uint64_t v26 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t result = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v6) + 0x110))(v25);
  if (result)
  {
    id v28 = (void *)result;
    id v29 = (void *)(*(uint64_t (**)(void))((*v26 & *a1) + 0x330))();
    objc_msgSend(v28, sel_activitySessionManager_activitySessionAssociatedSceneChanged_, v6, v29);

    return swift_unknownObjectRelease();
  }
  return result;
}

void ActivitySessionManager.sendResource(atURL:to:metadata:activitySessionUUID:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v12 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v7) + 0x110))();
  if (v12)
  {
    double v13 = (void *)v12;
    uint64_t v18 = a1;
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
    _sSo29TUConversationActivitySessionCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type TUConversationParticipant and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    Class v15 = Data._bridgeToObjectiveC()().super.isa;
    Class v16 = UUID._bridgeToObjectiveC()().super.isa;
    aBlock[4] = a6;
    void aBlock[5] = a7;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
    uint64_t aBlock[3] = &block_descriptor_59_0;
    uint64_t v17 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v13, sel_activitySessionManager_sendResourceAtURL_toParticipants_metadata_activitySessionUUID_completion_, v8, v18, isa, v15, v16, v17);
    swift_unknownObjectRelease();
    _Block_release(v17);
  }
}

void ActivitySessionManager.session(session:requestedEndpointWith:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  Class v15 = (void *)((char *)aBlock - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  Class v16 = *(void **)((char *)v6 + OBJC_IVAR___CPActivitySessionManager_queue);
  *Class v15 = v16;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, *MEMORY[0x1E4FBCBF0], v12);
  id v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  uint64_t v18 = (*(uint64_t (**)(void *, uint64_t))(v13 + 8))(v15, v12);
  if (v16)
  {
    os_log_type_t v19 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v20 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v6) + 0x110))(v18);
    if (v20)
    {
      uint64_t v21 = (void *)v20;
      uint64_t v22 = (void *)MEMORY[0x1B3EA1B00](a2, a3);
      unint64_t v23 = (void *)(*(uint64_t (**)(void))((*v19 & *a1) + 0x330))();
      aBlock[4] = a4;
      void aBlock[5] = a5;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSXPCListenerEndpoint?) -> ();
      uint64_t aBlock[3] = &block_descriptor_62;
      uint64_t v24 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(v21, sel_activitySessionManager_requestedEndpointWithIdentifier_activitySession_completion_, v6, v22, v23, v24);
      swift_unknownObjectRelease();
      _Block_release(v24);
    }
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall ActivitySessionManager.requestTopicTermination(withTopicName:)(Swift::String withTopicName)
{
  object = withTopicName._object;
  uint64_t countAndFlagsBits = withTopicName._countAndFlagsBits;
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR___CPActivitySessionManager_topicsObserver);
  if (v4)
  {
    uint64_t v5 = *(void (**)(uint64_t, void *))(*(void *)v4 + 272);
    swift_retain();
    v5(countAndFlagsBits, object);
    swift_release();
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Log.default);
    swift_bridgeObjectRetain_n();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      id v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v11 = v10;
      *(_DWORD *)id v9 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B0DF7000, v7, v8, "ActivitySessionManager: requestTopicTermination withTopicName: %s couldn't reference topicObserver", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v10, -1, -1);
      MEMORY[0x1B3EA39E0](v9, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

id ActivitySessionManager.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void ActivitySessionManager.init()()
{
}

id ActivitySessionManager.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ActivitySessionManager();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for Identifiable.id.getter in conformance ActivitySessionManager@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR___CPActivitySessionManager_id;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

id protocol witness for ActivitySessionManagerProtocol.queue.getter in conformance ActivitySessionManager()
{
  return *(id *)(v0 + OBJC_IVAR___CPActivitySessionManager_queue);
}

uint64_t protocol witness for ActivitySessionManagerProtocol.applicationLauncher.getter in conformance ActivitySessionManager()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.localParticipant(with:for:) in conformance ActivitySessionManager()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x170))();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.activeRemoteParticipant(with:for:) in conformance ActivitySessionManager()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x178))();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.activeRemoteParticipant(with:for:completion:) in conformance ActivitySessionManager()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x180))();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.sessionChanged(session:) in conformance ActivitySessionManager()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x228))();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.sessionIsJoinable(session:) in conformance ActivitySessionManager()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x230))();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.session(session:receivedEvent:) in conformance ActivitySessionManager()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x238))();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.session(session:fetchDataCryptorForTopic:completion:) in conformance ActivitySessionManager()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x240))();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.session(session:requestEncryptionKeysForParticipants:topicName:) in conformance ActivitySessionManager()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x248))();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.sessionActivityChanged(session:) in conformance ActivitySessionManager()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x250))();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.session(session:stateChanged:) in conformance ActivitySessionManager()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x258))();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.sessionUnjoined(session:startDate:endDate:) in conformance ActivitySessionManager()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x260))();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.requestForegroundPresentationFor(_:) in conformance ActivitySessionManager()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2C8))();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.session(session:associatedScene:) in conformance ActivitySessionManager()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2D0))();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.session(session:disassociatedScene:) in conformance ActivitySessionManager()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2D8))();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.sendResource(atURL:to:metadata:activitySessionUUID:completion:) in conformance ActivitySessionManager()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2E0))();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.session(session:requestedEndpointWith:completion:) in conformance ActivitySessionManager()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2E8))();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.sessionCapabilitiesUpdated(session:) in conformance ActivitySessionManager()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x268))();
}

uint64_t ActivitySessionManager.applicationController(_:bundleIdentifierChanged:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[0] = *(void *)&v3[OBJC_IVAR___CPActivitySessionManager_queue];
  Class v15 = (void *)swift_allocObject();
  void v15[2] = a1;
  uint64_t v15[3] = a2;
  v15[4] = a3;
  v15[5] = v3;
  aBlock[4] = partial apply for closure #1 in ActivitySessionManager.applicationController(_:bundleIdentifierChanged:);
  void aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t aBlock[3] = &block_descriptor_68;
  Class v16 = _Block_copy(aBlock);
  id v17 = a1;
  swift_bridgeObjectRetain();
  uint64_t v18 = v3;
  static DispatchQoS.unspecified.getter();
  v20[1] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

uint64_t closure #1 in ActivitySessionManager.applicationController(_:bundleIdentifierChanged:)(int a1, Swift::String a2)
{
  object = a2._object;
  uint64_t countAndFlagsBits = a2._countAndFlagsBits;
  Swift::Bool v4 = CPApplicationController.isBundleIdentifierSupported(_:)(a2);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_bridgeObjectRetain();
  Swift::Int v5 = specialized Set._Variant.filter(_:)(v7, countAndFlagsBits, (uint64_t)object);
  swift_bridgeObjectRelease();
  specialized Sequence.forEach(_:)(v5, v4);
  return swift_release();
}

Swift::Void __swiftcall ActivitySessionManager.systemStateObserver(_:sharePlayAllowedStateChanged:)(CPSystemStateObserver *_, Swift::Bool sharePlayAllowedStateChanged)
{
}

Swift::Void __swiftcall ActivitySessionManager.audioPolicyManager(_:sharePlayAllowedStateChanged:)(CPAudioRoutePolicyManager *_, Swift::Bool sharePlayAllowedStateChanged)
{
}

void @objc ActivitySessionManager.systemStateObserver(_:sharePlayAllowedStateChanged:)(void *a1, uint64_t a2, uint64_t a3, char a4, const char *a5)
{
  swift_unknownObjectRetain();
  id v8 = a1;
  specialized ActivitySessionManager.systemStateObserver(_:sharePlayAllowedStateChanged:)(a4, a5);
  swift_unknownObjectRelease();
}

uint64_t ActivitySession.allowsSceneAssociation.getter()
{
  void (*v2)(unint64_t *__return_ptr);
  unint64_t v3;
  char v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  id v1 = (void *)MEMORY[0x1E4FBC8C8];
  objc_super v2 = *(void (**)(unint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2A0);
  v2(&v16);
  uint64_t v3 = v16;
  uint64_t v14 = 0x8000000000000008;
  Class v15 = v16;
  Swift::Bool v4 = static ActivitySession.State.== infix(_:_:)(&v15, &v14);
  Swift::Int v5 = outlined consume of ActivitySession.State(v3);
  if (v4) {
    return 1;
  }
  ((void (*)(unint64_t *__return_ptr, unint64_t))v2)(&v16, v5);
  uint64_t v6 = v16;
  uint64_t v14 = 0x8000000000000000;
  Class v15 = v16;
  uint64_t v7 = static ActivitySession.State.== infix(_:_:)(&v15, &v14);
  id v8 = outlined consume of ActivitySession.State(v6);
  if ((v7 & 1) == 0) {
    goto LABEL_5;
  }
  (*(void (**)(unint64_t))((*v1 & *v0) + 0x1A0))(v8);
  uint64_t v10 = v9;
  id v8 = swift_bridgeObjectRelease();
  if (v10) {
    return 1;
  }
LABEL_5:
  uint64_t v12 = (void *)(*(uint64_t (**)(unint64_t))((*v1 & *v0) + 0x2D0))(v8);
  uint64_t v11 = objc_msgSend(v12, sel_isScreenSharingActivity);

  return (uint64_t)v11;
}

uint64_t key path getter for ActivitySessionManager._activitySessions : ActivitySessionManager@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for ActivitySessionManager._activitySessions : ActivitySessionManager(uint64_t a1, void **a2)
{
  objc_super v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  id v3 = v2;
  return static Published.subscript.setter();
}

uint64_t specialized PubSubTopicsObserver.init(serviceProvider:rpcMaxAttempts:rpcRetryIntervalSeconds:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v11 = type metadata accessor for PluginPubSubServiceProvider();
  uint64_t v12 = &protocol witness table for PluginPubSubServiceProvider;
  *(void *)&long long v10 = a1;
  *(void *)(a3 + 72) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<[TopicInfo], PluginRpcError>);
  swift_allocObject();
  uint64_t v8 = PassthroughSubject.init()();
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 96) = 0;
  *(void *)(a3 + 80) = v8;
  outlined init with take of BackgroundSessionManagerDataSource(&v10, a3 + 16);
  *(void *)(a3 + 56) = a2;
  *(double *)(a3 + 64) = a4;
  return a3;
}

void specialized Sequence.first(where:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v30)(unint64_t *__return_ptr, uint64_t);
  unint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  int64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41[6];
  unint64_t v42;

  unint64_t v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, (void (*)(uint64_t))type metadata accessor for ActivitySession);
    Set.Iterator.init(_cocoa:)();
    unint64_t v5 = v41[1];
    id v37 = v41[2];
    unint64_t v6 = v41[3];
    unint64_t v7 = v41[4];
    unint64_t v8 = v41[5];
  }
  else
  {
    uint64_t v9 = -1 << *(unsigned char *)(a1 + 32);
    id v37 = a1 + 56;
    unint64_t v10 = ~v9;
    uint64_t v11 = -v9;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v8 = v12 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    unint64_t v6 = v10;
    unint64_t v7 = 0;
  }
  id v36 = (v6 + 64) >> 6;
  while ((v5 & 0x8000000000000000) != 0)
  {
    uint64_t v16 = __CocoaSet.Iterator.next()();
    if (!v16) {
      goto LABEL_42;
    }
    v41[0] = v16;
    type metadata accessor for ActivitySession(0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v17 = (void *)v42;
    uint64_t v18 = (void *)swift_unknownObjectRelease();
    unint64_t v15 = v7;
    uint64_t v13 = v8;
    if (!v17) {
      goto LABEL_42;
    }
LABEL_32:
    id v38 = v13;
    id v39 = v15;
    uint64_t v22 = (void *)(*(uint64_t (**)(void *))((*MEMORY[0x1E4FBC8C8] & *v17) + 0x2D0))(v18);
    id v23 = objc_msgSend(v22, sel_bundleIdentifier);

    if (!v23) {
      goto LABEL_8;
    }
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v25;

    if (v24 == a2 && v26 == a3)
    {
      uint64_t v29 = swift_bridgeObjectRelease();
    }
    else
    {
      char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v29 = swift_bridgeObjectRelease();
      if ((v28 & 1) == 0) {
        goto LABEL_8;
      }
    }
    id v30 = *(void (**)(unint64_t *__return_ptr, uint64_t))((*MEMORY[0x1E4FBC8C8] & *v17) + 0x2A0);
    v30(&v42, v29);
    uint64_t v31 = v42;
    uint64_t v40 = 0x8000000000000000;
    v41[0] = v42;
    uint64_t v32 = static ActivitySession.State.== infix(_:_:)(v41, &v40);
    uint64_t v33 = outlined consume of ActivitySession.State(v31);
    if (v32) {
      goto LABEL_42;
    }
    v30(&v42, v33);
    id v34 = v42;
    uint64_t v40 = 0x8000000000000008;
    v41[0] = v42;
    BOOL v35 = static ActivitySession.State.== infix(_:_:)(v41, &v40);
    outlined consume of ActivitySession.State(v34);
    if (v35) {
      goto LABEL_42;
    }
LABEL_8:

    unint64_t v8 = v38;
    unint64_t v7 = v39;
  }
  if (v8)
  {
    uint64_t v13 = (v8 - 1) & v8;
    unint64_t v14 = __clz(__rbit64(v8)) | (v7 << 6);
    unint64_t v15 = v7;
LABEL_31:
    uint64_t v18 = *(id *)(*(void *)(v5 + 48) + 8 * v14);
    id v17 = v18;
    if (!v18) {
      goto LABEL_42;
    }
    goto LABEL_32;
  }
  int64_t v19 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    if (v19 >= v36) {
      goto LABEL_42;
    }
    unint64_t v20 = *(void *)(v37 + 8 * v19);
    unint64_t v15 = v7 + 1;
    if (!v20)
    {
      unint64_t v15 = v7 + 2;
      if ((uint64_t)(v7 + 2) >= v36) {
        goto LABEL_42;
      }
      unint64_t v20 = *(void *)(v37 + 8 * v15);
      if (!v20)
      {
        unint64_t v15 = v7 + 3;
        if ((uint64_t)(v7 + 3) >= v36) {
          goto LABEL_42;
        }
        unint64_t v20 = *(void *)(v37 + 8 * v15);
        if (!v20)
        {
          unint64_t v15 = v7 + 4;
          if ((uint64_t)(v7 + 4) >= v36) {
            goto LABEL_42;
          }
          unint64_t v20 = *(void *)(v37 + 8 * v15);
          if (!v20)
          {
            unint64_t v15 = v7 + 5;
            if ((uint64_t)(v7 + 5) >= v36) {
              goto LABEL_42;
            }
            unint64_t v20 = *(void *)(v37 + 8 * v15);
            if (!v20)
            {
              unint64_t v21 = v7 + 6;
              while (v36 != v21)
              {
                unint64_t v20 = *(void *)(v37 + 8 * v21++);
                if (v20)
                {
                  unint64_t v15 = v21 - 1;
                  goto LABEL_30;
                }
              }
LABEL_42:
              outlined consume of [String : ()].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_30:
    uint64_t v13 = (v20 - 1) & v20;
    unint64_t v14 = __clz(__rbit64(v20)) + (v15 << 6);
    goto LABEL_31;
  }
  __break(1u);
}

void specialized Sequence.first(where:)(uint64_t a1, void *a2)
{
  id v57 = a2;
  uint64_t v54 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v54 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v54);
  uint64_t v53 = (char *)v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  id v52 = (char *)v48 - v6;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, (void (*)(uint64_t))type metadata accessor for ActivitySession);
    Set.Iterator.init(_cocoa:)();
    a1 = v61;
    uint64_t v50 = v62;
    uint64_t v7 = v63;
    uint64_t v8 = v64;
    unint64_t v9 = v65;
  }
  else
  {
    uint64_t v10 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 56);
    uint64_t v50 = a1 + 56;
    uint64_t v12 = ~v10;
    uint64_t v13 = -v10;
    if (v13 < 64) {
      uint64_t v14 = ~(-1 << v13);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v9 = v14 & v11;
    swift_bridgeObjectRetain();
    uint64_t v7 = v12;
    uint64_t v8 = 0;
  }
  v48[0] = v7;
  v48[3] = a1 & 0x7FFFFFFFFFFFFFFFLL;
  int64_t v49 = (unint64_t)(v7 + 64) >> 6;
  uint64_t v51 = (void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v48[2] = MEMORY[0x1E4FBC838] + 8;
  while (a1 < 0)
  {
    uint64_t v28 = __CocoaSet.Iterator.next()();
    if (!v28) {
      goto LABEL_40;
    }
    uint64_t v60 = v28;
    type metadata accessor for ActivitySession(0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v29 = v66;
    id v30 = (void *)swift_unknownObjectRelease();
    uint64_t v27 = v8;
    uint64_t v25 = v9;
    if (!v29) {
      goto LABEL_40;
    }
LABEL_34:
    unint64_t v58 = v25;
    uint64_t v59 = v27;
    unint64_t v55 = v9;
    uint64_t v56 = v8;
    uint64_t v34 = a1;
    BOOL v35 = *(uint64_t (**)(void *))((*MEMORY[0x1E4FBC8C8] & *v29) + 0x2D0);
    id v36 = (void *)v35(v30);
    id v37 = objc_msgSend(v36, sel_activityIdentifier, v48[0]);

    uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v40 = v39;

    id v41 = objc_msgSend(v57, sel_activity);
    id v42 = objc_msgSend(v41, sel_activityIdentifier);

    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v45 = v44;

    if (v38 == v43 && v40 == v45)
    {
      uint64_t v15 = swift_bridgeObjectRelease_n();
      a1 = v34;
    }
    else
    {
      char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v15 = swift_bridgeObjectRelease();
      a1 = v34;
      if ((v47 & 1) == 0) {
        goto LABEL_10;
      }
    }
    uint64_t v16 = (void *)v35((void *)v15);
    id v17 = objc_msgSend(v16, sel_UUID);

    uint64_t v18 = v52;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    id v19 = objc_msgSend(v57, sel_activity);
    id v20 = objc_msgSend(v19, sel_UUID);

    unint64_t v21 = v53;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    LOBYTE(v19) = static UUID.== infix(_:_:)();
    uint64_t v22 = *v51;
    id v23 = v21;
    uint64_t v24 = v54;
    (*v51)(v23, v54);
    v22(v18, v24);
    if (v19) {
      goto LABEL_40;
    }
LABEL_10:

    unint64_t v9 = v58;
    uint64_t v8 = v59;
  }
  if (v9)
  {
    uint64_t v25 = (v9 - 1) & v9;
    unint64_t v26 = __clz(__rbit64(v9)) | (v8 << 6);
    uint64_t v27 = v8;
LABEL_33:
    id v30 = *(id *)(*(void *)(a1 + 48) + 8 * v26);
    uint64_t v29 = v30;
    if (!v30) {
      goto LABEL_40;
    }
    goto LABEL_34;
  }
  int64_t v31 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v31 >= v49) {
      goto LABEL_40;
    }
    unint64_t v32 = *(void *)(v50 + 8 * v31);
    uint64_t v27 = v8 + 1;
    if (!v32)
    {
      uint64_t v27 = v8 + 2;
      if (v8 + 2 >= v49) {
        goto LABEL_40;
      }
      unint64_t v32 = *(void *)(v50 + 8 * v27);
      if (!v32)
      {
        uint64_t v27 = v8 + 3;
        if (v8 + 3 >= v49) {
          goto LABEL_40;
        }
        unint64_t v32 = *(void *)(v50 + 8 * v27);
        if (!v32)
        {
          uint64_t v27 = v8 + 4;
          if (v8 + 4 >= v49) {
            goto LABEL_40;
          }
          unint64_t v32 = *(void *)(v50 + 8 * v27);
          if (!v32)
          {
            uint64_t v27 = v8 + 5;
            if (v8 + 5 >= v49) {
              goto LABEL_40;
            }
            unint64_t v32 = *(void *)(v50 + 8 * v27);
            if (!v32)
            {
              uint64_t v33 = v8 + 6;
              while (v49 != v33)
              {
                unint64_t v32 = *(void *)(v50 + 8 * v33++);
                if (v32)
                {
                  uint64_t v27 = v33 - 1;
                  goto LABEL_32;
                }
              }
LABEL_40:
              outlined consume of [String : ()].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_32:
    uint64_t v25 = (v32 - 1) & v32;
    unint64_t v26 = __clz(__rbit64(v32)) + (v27 << 6);
    goto LABEL_33;
  }
  __break(1u);
}

void specialized Sequence.first(where:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, (void (*)(uint64_t))type metadata accessor for ActivitySession);
    Set.Iterator.init(_cocoa:)();
    uint64_t v3 = v25;
    uint64_t v24 = v26;
    uint64_t v4 = v27;
    uint64_t v5 = v28;
    unint64_t v6 = v29;
  }
  else
  {
    uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v24 = a1 + 56;
    uint64_t v8 = ~v7;
    uint64_t v9 = -v7;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v6 = v10 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v4 = v8;
    uint64_t v5 = 0;
  }
  int64_t v23 = (unint64_t)(v4 + 64) >> 6;
  if ((v3 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (!__CocoaSet.Iterator.next()()) {
    goto LABEL_38;
  }
  type metadata accessor for ActivitySession(0);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  id v11 = (id)v30[6];
  swift_unknownObjectRelease();
  uint64_t v12 = v5;
  uint64_t v13 = v6;
  if (!v11) {
    goto LABEL_38;
  }
  while (1)
  {
    uint64_t v18 = UUID.uuidString.getter();
    uint64_t v20 = v19;
    outlined init with take of TopicInfo(a2, (uint64_t)v30);
    if (v18 == v30[0] && v20 == v30[1])
    {
      swift_bridgeObjectRelease();
      goto LABEL_38;
    }
    char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v22) {
      goto LABEL_38;
    }

    uint64_t v5 = v12;
    unint64_t v6 = v13;
    if (v3 < 0) {
      goto LABEL_8;
    }
LABEL_11:
    if (!v6) {
      break;
    }
    uint64_t v13 = (v6 - 1) & v6;
    unint64_t v14 = __clz(__rbit64(v6)) | (v5 << 6);
    uint64_t v12 = v5;
LABEL_29:
    id v11 = *(id *)(*(void *)(v3 + 48) + 8 * v14);
    if (!v11) {
      goto LABEL_38;
    }
  }
  int64_t v15 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return;
  }
  if (v15 >= v23) {
    goto LABEL_38;
  }
  unint64_t v16 = *(void *)(v24 + 8 * v15);
  uint64_t v12 = v5 + 1;
  if (v16) {
    goto LABEL_28;
  }
  uint64_t v12 = v5 + 2;
  if (v5 + 2 >= v23) {
    goto LABEL_38;
  }
  unint64_t v16 = *(void *)(v24 + 8 * v12);
  if (v16) {
    goto LABEL_28;
  }
  uint64_t v12 = v5 + 3;
  if (v5 + 3 >= v23) {
    goto LABEL_38;
  }
  unint64_t v16 = *(void *)(v24 + 8 * v12);
  if (v16) {
    goto LABEL_28;
  }
  uint64_t v12 = v5 + 4;
  if (v5 + 4 >= v23) {
    goto LABEL_38;
  }
  unint64_t v16 = *(void *)(v24 + 8 * v12);
  if (v16) {
    goto LABEL_28;
  }
  uint64_t v12 = v5 + 5;
  if (v5 + 5 >= v23) {
    goto LABEL_38;
  }
  unint64_t v16 = *(void *)(v24 + 8 * v12);
  if (v16)
  {
LABEL_28:
    uint64_t v13 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v12 << 6);
    goto LABEL_29;
  }
  uint64_t v17 = v5 + 6;
  while (v23 != v17)
  {
    unint64_t v16 = *(void *)(v24 + 8 * v17++);
    if (v16)
    {
      uint64_t v12 = v17 - 1;
      goto LABEL_28;
    }
  }
LABEL_38:
  outlined consume of [String : ()].Iterator._Variant();
}

void specialized Sequence.forEach(_:)(unint64_t a1, void *a2)
{
  unint64_t v2 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, (void (*)(uint64_t))type metadata accessor for ActivitySession);
    Set.Iterator.init(_cocoa:)();
    unint64_t v2 = v30[1];
    unint64_t v28 = v30[2];
    unint64_t v3 = v30[3];
    unint64_t v4 = v30[4];
    unint64_t v5 = v30[5];
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    unint64_t v28 = a1 + 56;
    unint64_t v7 = ~v6;
    uint64_t v8 = -v6;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v5 = v9 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    unint64_t v3 = v7;
    unint64_t v4 = 0;
  }
  int64_t v27 = (v3 + 64) >> 6;
  uint64_t v10 = (void *)MEMORY[0x1E4FBC8C8];
  unint64_t v26 = v2;
  if ((v2 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_31:
  uint64_t v18 = __CocoaSet.Iterator.next()();
  if (!v18) {
    goto LABEL_41;
  }
  v30[0] = v18;
  type metadata accessor for ActivitySession(0);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v17 = (void *)v31;
  swift_unknownObjectRelease();
  unint64_t v13 = v4;
  uint64_t v11 = v5;
  if (!v17) {
    goto LABEL_41;
  }
  while (1)
  {
    if ((*(uint64_t (**)(void))((*v10 & *a2) + 0x140))())
    {
      uint64_t v19 = *(void (**)(void))((*v10 & *v17) + 0x2A0);
      ((void (*)(unint64_t *__return_ptr))v19)(&v31);
      unint64_t v20 = v31;
      outlined consume of ActivitySession.State(v31);
      if (v20 >> 62 != 1)
      {
        uint64_t v21 = swift_allocObject();
        v19();
        unint64_t v31 = v21 | 0x4000000000000000;
        (*(void (**)(unint64_t *))((*v10 & *v17) + 0x2A8))(&v31);
      }
LABEL_10:

      unint64_t v4 = v13;
      unint64_t v5 = v11;
      if ((v2 & 0x8000000000000000) != 0) {
        goto LABEL_31;
      }
      goto LABEL_11;
    }
    (*(void (**)(unint64_t *__return_ptr))((*v10 & *v17) + 0x2A0))(&v31);
    unint64_t v22 = v31;
    if (v31 >> 62 != 1)
    {
      outlined consume of ActivitySession.State(v31);
      goto LABEL_10;
    }
    unint64_t v23 = *(void *)((v31 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
    outlined copy of ActivitySession.State(v23);
    outlined consume of ActivitySession.State(v22);
    unint64_t v31 = v23;
    v30[0] = 0x8000000000000008;
    outlined copy of ActivitySession.State(v23);
    unint64_t v24 = v23;
    if (static ActivitySession.State.== infix(_:_:)(&v31, v30))
    {
      outlined consume of ActivitySession.State(v23);
      unint64_t v24 = 0x8000000000000000;
    }
    unint64_t v31 = v24;
    uint64_t v25 = *(void (**)(unint64_t *))((*v10 & *v17) + 0x2A8);
    outlined copy of ActivitySession.State(v24);
    v25(&v31);
    outlined consume of ActivitySession.State(v24);
    outlined consume of ActivitySession.State(v23);

    unint64_t v4 = v13;
    unint64_t v5 = v11;
    unint64_t v2 = v26;
    if ((v26 & 0x8000000000000000) != 0) {
      goto LABEL_31;
    }
LABEL_11:
    if (!v5) {
      break;
    }
    uint64_t v11 = (v5 - 1) & v5;
    unint64_t v12 = __clz(__rbit64(v5)) | (v4 << 6);
    unint64_t v13 = v4;
LABEL_29:
    uint64_t v17 = *(id *)(*(void *)(v2 + 48) + 8 * v12);
    if (!v17) {
      goto LABEL_41;
    }
  }
  int64_t v14 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    return;
  }
  if (v14 >= v27) {
    goto LABEL_41;
  }
  unint64_t v15 = *(void *)(v28 + 8 * v14);
  unint64_t v13 = v4 + 1;
  if (v15) {
    goto LABEL_28;
  }
  unint64_t v13 = v4 + 2;
  if ((uint64_t)(v4 + 2) >= v27) {
    goto LABEL_41;
  }
  unint64_t v15 = *(void *)(v28 + 8 * v13);
  if (v15) {
    goto LABEL_28;
  }
  unint64_t v13 = v4 + 3;
  if ((uint64_t)(v4 + 3) >= v27) {
    goto LABEL_41;
  }
  unint64_t v15 = *(void *)(v28 + 8 * v13);
  if (v15) {
    goto LABEL_28;
  }
  unint64_t v13 = v4 + 4;
  if ((uint64_t)(v4 + 4) >= v27) {
    goto LABEL_41;
  }
  unint64_t v15 = *(void *)(v28 + 8 * v13);
  if (v15) {
    goto LABEL_28;
  }
  unint64_t v13 = v4 + 5;
  if ((uint64_t)(v4 + 5) >= v27) {
    goto LABEL_41;
  }
  unint64_t v15 = *(void *)(v28 + 8 * v13);
  if (v15)
  {
LABEL_28:
    uint64_t v11 = (v15 - 1) & v15;
    unint64_t v12 = __clz(__rbit64(v15)) + (v13 << 6);
    goto LABEL_29;
  }
  unint64_t v16 = v4 + 6;
  while (v27 != v16)
  {
    unint64_t v15 = *(void *)(v28 + 8 * v16++);
    if (v15)
    {
      unint64_t v13 = v16 - 1;
      goto LABEL_28;
    }
  }
LABEL_41:
  outlined consume of [String : ()].Iterator._Variant();
}

uint64_t block_destroy_helper_25()
{
  return swift_release();
}

uint64_t sub_1B106C520()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void specialized Sequence.forEach(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, (void (*)(uint64_t))type metadata accessor for ActivitySession);
    Set.Iterator.init(_cocoa:)();
    uint64_t v4 = v31;
    uint64_t v29 = v32;
    uint64_t v6 = v33;
    uint64_t v5 = v34;
    unint64_t v7 = v35;
  }
  else
  {
    uint64_t v8 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v29 = a1 + 56;
    uint64_t v6 = ~v8;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v7 = v10 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
  }
  int64_t v28 = (unint64_t)(v6 + 64) >> 6;
  uint64_t v11 = (void *)MEMORY[0x1E4FBC8C8];
  while (v4 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_41;
    }
    type metadata accessor for ActivitySession(0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    unint64_t v16 = v36;
    uint64_t v17 = (void *)swift_unknownObjectRelease();
    uint64_t v15 = v5;
    uint64_t v13 = v7;
    if (!v36) {
      goto LABEL_41;
    }
LABEL_34:
    uint64_t v21 = (void *)(*(uint64_t (**)(void *))((*v11 & *v16) + 0x2D0))(v17);
    id v22 = objc_msgSend(v21, sel_bundleIdentifier);

    if (v22)
    {
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v25 = v24;

      if (v23 == a2 && v25 == a3)
      {
        uint64_t v12 = swift_bridgeObjectRelease();
LABEL_9:
        (*(void (**)(uint64_t))((*v11 & *v16) + 0x498))(v12);
        goto LABEL_10;
      }
      char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v12 = swift_bridgeObjectRelease();
      if (v27) {
        goto LABEL_9;
      }
    }
LABEL_10:

    uint64_t v5 = v15;
    unint64_t v7 = v13;
  }
  if (v7)
  {
    uint64_t v13 = (v7 - 1) & v7;
    unint64_t v14 = __clz(__rbit64(v7)) | (v5 << 6);
    uint64_t v15 = v5;
LABEL_33:
    uint64_t v17 = *(id *)(*(void *)(v4 + 48) + 8 * v14);
    unint64_t v16 = v17;
    if (!v17) {
      goto LABEL_41;
    }
    goto LABEL_34;
  }
  int64_t v18 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    if (v18 >= v28) {
      goto LABEL_41;
    }
    unint64_t v19 = *(void *)(v29 + 8 * v18);
    uint64_t v15 = v5 + 1;
    if (!v19)
    {
      uint64_t v15 = v5 + 2;
      if (v5 + 2 >= v28) {
        goto LABEL_41;
      }
      unint64_t v19 = *(void *)(v29 + 8 * v15);
      if (!v19)
      {
        uint64_t v15 = v5 + 3;
        if (v5 + 3 >= v28) {
          goto LABEL_41;
        }
        unint64_t v19 = *(void *)(v29 + 8 * v15);
        if (!v19)
        {
          uint64_t v15 = v5 + 4;
          if (v5 + 4 >= v28) {
            goto LABEL_41;
          }
          unint64_t v19 = *(void *)(v29 + 8 * v15);
          if (!v19)
          {
            uint64_t v15 = v5 + 5;
            if (v5 + 5 >= v28) {
              goto LABEL_41;
            }
            unint64_t v19 = *(void *)(v29 + 8 * v15);
            if (!v19)
            {
              uint64_t v20 = v5 + 6;
              while (v28 != v20)
              {
                unint64_t v19 = *(void *)(v29 + 8 * v20++);
                if (v19)
                {
                  uint64_t v15 = v20 - 1;
                  goto LABEL_32;
                }
              }
LABEL_41:
              outlined consume of [String : ()].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_32:
    uint64_t v13 = (v19 - 1) & v19;
    unint64_t v14 = __clz(__rbit64(v19)) + (v15 << 6);
    goto LABEL_33;
  }
  __break(1u);
}

char *specialized ActivitySessionManager.init(id:groupUUID:activities:applicationController:delegate:featureFlags:queue:systemStateObserver:audioRoutePolicyManager:serverBag:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int64_t v49 = a7;
  uint64_t v50 = a5;
  uint64_t v53 = a6;
  uint64_t v54 = a10;
  uint64_t v51 = a4;
  uint64_t v52 = a9;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Set<ActivitySession>>);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRelease();
  int64_t v18 = &v10[OBJC_IVAR___CPActivitySessionManager___activitySessions];
  uint64_t v58 = MEMORY[0x1E4FBC870];
  unint64_t v19 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<ActivitySession>);
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v17, v14);
  swift_unknownObjectWeakInit();
  uint64_t v20 = OBJC_IVAR___CPActivitySessionManager_applicationLauncher;
  *(void *)&v19[v20] = objc_msgSend(objc_allocWithZone((Class)CPApplicationLauncher), sel_init);
  v19[OBJC_IVAR___CPActivitySessionManager_handedOff] = 0;
  uint64_t v21 = (NSObject *(**)@<X0>(id *@<X0>, id *@<X1>, NSObject **@<X8>))&v19[OBJC_IVAR___CPActivitySessionManager__activitySessionCreation];
  void *v21 = specialized thunk for @escaping @callee_guaranteed (@guaranteed TUConversationActivitySession, @guaranteed ActivitySessionManager) -> (@owned ActivitySession);
  v21[1] = 0;
  id v22 = &v19[OBJC_IVAR___CPActivitySessionManager____lazy_storage___protectedStorage];
  *((void *)v22 + 4) = 0;
  *(_OWORD *)id v22 = 0u;
  *((_OWORD *)v22 + 1) = 0u;
  *(void *)&v19[OBJC_IVAR___CPActivitySessionManager_topicsObserver] = 0;
  *(void *)&v19[OBJC_IVAR___CPActivitySessionManager_topicsObserverSubscription] = 0;
  uint64_t v23 = &v19[OBJC_IVAR___CPActivitySessionManager__topicsObserverGenerator];
  *(void *)uint64_t v23 = specialized thunk for @escaping @callee_guaranteed (@guaranteed ActivitySessionManager, @in_guaranteed UUID, @unowned UInt64) -> (@owned PubSubTopicsObserver);
  *((void *)v23 + 1) = 0;
  uint64_t v24 = &v19[OBJC_IVAR___CPActivitySessionManager_id];
  uint64_t v25 = type metadata accessor for UUID();
  uint64_t v26 = *(void *)(v25 - 8);
  char v27 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
  uint64_t v56 = a1;
  v27(v24, a1, v25);
  uint64_t v55 = a2;
  v27(&v19[OBJC_IVAR___CPActivitySessionManager_groupUUID], a2, v25);
  int64_t v28 = v49;
  *(void *)&v19[OBJC_IVAR___CPActivitySessionManager_queue] = v49;
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  id v30 = v51;
  uint64_t v29 = v52;
  *(void *)&v19[OBJC_IVAR___CPActivitySessionManager_applicationController] = v51;
  uint64_t v31 = v54;
  *(void *)&v19[OBJC_IVAR___CPActivitySessionManager_featureFlags] = v53;
  *(void *)&v19[OBJC_IVAR___CPActivitySessionManager_systemStateObserver] = a8;
  *(void *)&v19[OBJC_IVAR___CPActivitySessionManager_audioRoutePolicyManager] = v29;
  *(void *)&v19[OBJC_IVAR___CPActivitySessionManager_serverBag] = v31;
  swift_unknownObjectRetain();
  id v32 = v28;
  id v33 = v30;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();

  uint64_t v34 = (objc_class *)type metadata accessor for ActivitySessionManager();
  v57.receiver = v19;
  v57.super_class = v34;
  unint64_t v35 = (char *)objc_msgSendSuper2(&v57, sel_init);
  id v36 = *(char **)&v35[OBJC_IVAR___CPActivitySessionManager_applicationController];
  uint64_t v37 = *(void *)&v36[OBJC_IVAR___CPApplicationController_lock];
  uint64_t v38 = *(os_unfair_lock_s **)(v37 + 16);
  uint64_t v39 = v35;
  uint64_t v40 = v36;
  os_unfair_lock_lock(v38);
  objc_msgSend(*(id *)&v40[OBJC_IVAR___CPApplicationController_observers], sel_addObject_, v39);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v37 + 16));

  id v41 = *(void **)&v39[OBJC_IVAR___CPActivitySessionManager_systemStateObserver];
  if (v41)
  {
    objc_msgSend(v41, sel_addObserver_withQueue_, v39, *(void *)&v39[OBJC_IVAR___CPActivitySessionManager_queue]);
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    __swift_project_value_buffer(v42, (uint64_t)static Log.default);
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v45 = 0;
      _os_log_impl(&dword_1B0DF7000, v43, v44, "Unable to add observer to systemStateObserver as it is nil", v45, 2u);
      MEMORY[0x1B3EA39E0](v45, -1, -1);
    }
  }
  objc_msgSend(*(id *)&v39[OBJC_IVAR___CPActivitySessionManager_audioRoutePolicyManager], sel_addObserver_withQueue_, v39, *(void *)&v39[OBJC_IVAR___CPActivitySessionManager_queue]);

  unint64_t v46 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
  v46(v55, v25);
  v46(v56, v25);
  return v39;
}

uint64_t sub_1B106CDF4()
{
  outlined consume of ActivitySession.State(*(void *)(v0 + 16));
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in ActivitySessionManager.leaveActivitySession(activitySessionUUID:)()
{
  return static UUID.== infix(_:_:)() & 1;
}

BOOL partial apply for closure #1 in ActivitySessionManager.updateActivitySession(activitySessionUUID:activity:)(void **a1)
{
  return closure #1 in ActivitySessionManager.updateActivitySession(activitySessionUUID:activity:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t partial apply for closure #1 in ActivitySessionManager.session(session:fetchDataCryptorForTopic:completion:)(uint64_t a1)
{
  return closure #1 in ActivitySessionManager.session(session:fetchDataCryptorForTopic:completion:)(a1, *(void (**)())(v1 + 16));
}

uint64_t sub_1B106CEE0()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void partial apply for closure #3 in ActivitySessionManager.updateVirtualParticipantId(_:)(uint64_t a1)
{
  closure #3 in ActivitySessionManager.updateVirtualParticipantId(_:)(a1, *(uint64_t **)(v1 + 16));
}

uint64_t sub_1B106CEF8()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void partial apply for closure #4 in ActivitySessionManager.updateVirtualParticipantId(_:)(uint64_t a1)
{
  closure #4 in ActivitySessionManager.updateVirtualParticipantId(_:)(a1, v1);
}

uint64_t sub_1B106CF38()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t type metadata accessor for ActivitySessionManager()
{
  uint64_t result = type metadata singleton initialization cache for ActivitySessionManager;
  if (!type metadata singleton initialization cache for ActivitySessionManager) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1B106CFC4()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in ActivitySessionManager.applicationController(_:bundleIdentifierChanged:)()
{
  return closure #1 in ActivitySessionManager.applicationController(_:bundleIdentifierChanged:)(*(void *)(v0 + 16), *(Swift::String *)(v0 + 24));
}

void specialized ActivitySessionManager.presentSessionDismissalAlert(activitySessionUUID:allowingCancellation:completion:)(uint64_t a1, char *a2, void (**a3)(void, void))
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (uint64_t *)((char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = a3;
  uint64_t v14 = *(void **)&a2[OBJC_IVAR___CPActivitySessionManager_queue];
  *uint64_t v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E4FBCBF0], v10);
  _Block_copy(a3);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) == 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t v16 = swift_release();
  uint64_t v17 = (uint64_t)v49;
  MEMORY[0x1F4188790](v16);
  *(&v45 - 2) = a1;
  specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in ActivitySessionManager.presentSessionDismissalAlert(activitySessionUUID:allowingCancellation:completion:), (uint64_t)(&v45 - 4), v17);
  unint64_t v19 = v18;
  uint64_t v20 = swift_bridgeObjectRelease();
  if (!v19)
  {
    if (one-time initialization token for default == -1)
    {
LABEL_6:
      uint64_t v27 = type metadata accessor for Logger();
      __swift_project_value_buffer(v27, (uint64_t)static Log.default);
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
      int64_t v28 = a2;
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = swift_slowAlloc();
        unint64_t v46 = swift_slowAlloc();
        int64_t v49 = v46;
        *(_DWORD *)uint64_t v31 = 136315394;
        lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, (uint64_t *)&v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        *(_WORD *)(v31 + 12) = 2080;
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        type metadata accessor for ActivitySession(0);
        lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, (void (*)(uint64_t))type metadata accessor for ActivitySession);
        uint64_t v34 = Set.description.getter();
        unint64_t v36 = v35;
        swift_bridgeObjectRelease();
        uint64_t v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v36, (uint64_t *)&v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v29, v30, "Couldn't find matching activitySession for %s activitySessions: %s", (uint8_t *)v31, 0x16u);
        uint64_t v37 = v46;
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v37, -1, -1);
        MEMORY[0x1B3EA39E0](v31, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      }
      a3[2](a3, 0);
      swift_release();
      return;
    }
LABEL_17:
    swift_once();
    goto LABEL_6;
  }
  uint64_t v21 = (void *)MEMORY[0x1E4FBC8C8];
  id v22 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v19) + 0x2D0))(v20);
  id v23 = objc_msgSend(v22, sel_bundleIdentifier);

  if (v23)
  {
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v25;

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)(char), uint64_t))((*v21 & *v19) + 0x410))(v24, v26, 1, partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned ObjCBool) -> (), v47);
    swift_release();

    swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Log.default);
    uint64_t v39 = v19;
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      unint64_t v46 = swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 138412290;
      int64_t v49 = v39;
      uint64_t v43 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      os_log_type_t v44 = v46;
      v46->Class isa = (Class)v19;

      _os_log_impl(&dword_1B0DF7000, v40, v41, "Unable to find bundleID for activitySession %@", v42, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v44, -1, -1);
      MEMORY[0x1B3EA39E0](v42, -1, -1);
    }
    else
    {

      uint64_t v40 = v39;
    }

    a3[2](a3, 0);
    swift_release();
  }
}

void specialized closure #1 in _NativeSet.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v30 = a2;
  uint64_t v32 = 0;
  int64_t v7 = 0;
  uint64_t v10 = *(void *)(a3 + 56);
  uint64_t v8 = a3 + 56;
  uint64_t v9 = v10;
  uint64_t v11 = 1 << *(unsigned char *)(v8 - 24);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v9;
  uint64_t v33 = v8;
  int64_t v34 = (unint64_t)(v11 + 63) >> 6;
  while (v13)
  {
    unint64_t v14 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    unint64_t v15 = v14 | (v7 << 6);
LABEL_21:
    unint64_t v19 = *(void **)(*(void *)(a3 + 48) + 8 * v15);
    uint64_t v20 = *(uint64_t (**)(void *))((*MEMORY[0x1E4FBC8C8] & *v19) + 0x2D0);
    uint64_t v21 = v19;
    id v22 = (void *)v20(v21);
    id v23 = objc_msgSend(v22, sel_bundleIdentifier, v30);

    if (v23)
    {
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v26 = v25;

      if (v24 == a4 && v26 == a5)
      {

        swift_bridgeObjectRelease();
LABEL_29:
        *(unint64_t *)((char *)a1 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
        if (__OFADD__(v32++, 1))
        {
          __break(1u);
LABEL_32:
          swift_retain();
          specialized _NativeSet.extractSubset(using:count:)(a1, v30, v32, a3);
          return;
        }
      }
      else
      {
        char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        if (v28) {
          goto LABEL_29;
        }
      }
    }
    else
    {
    }
  }
  int64_t v16 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v16 >= v34) {
    goto LABEL_32;
  }
  unint64_t v17 = *(void *)(v33 + 8 * v16);
  ++v7;
  if (v17) {
    goto LABEL_20;
  }
  int64_t v7 = v16 + 1;
  if (v16 + 1 >= v34) {
    goto LABEL_32;
  }
  unint64_t v17 = *(void *)(v33 + 8 * v7);
  if (v17) {
    goto LABEL_20;
  }
  int64_t v7 = v16 + 2;
  if (v16 + 2 >= v34) {
    goto LABEL_32;
  }
  unint64_t v17 = *(void *)(v33 + 8 * v7);
  if (v17)
  {
LABEL_20:
    unint64_t v13 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v7 << 6);
    goto LABEL_21;
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v34) {
    goto LABEL_32;
  }
  unint64_t v17 = *(void *)(v33 + 8 * v18);
  if (v17)
  {
    int64_t v7 = v18;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v7 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v7 >= v34) {
      goto LABEL_32;
    }
    unint64_t v17 = *(void *)(v33 + 8 * v7);
    ++v18;
    if (v17) {
      goto LABEL_20;
    }
  }
LABEL_34:
  __break(1u);
}

uint64_t specialized _NativeSet.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  char v7 = *(unsigned char *)(a1 + 32);
  unsigned int v8 = v7 & 0x3F;
  unint64_t v9 = (unint64_t)((1 << v7) + 63) >> 6;
  size_t v10 = 8 * v9;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v8 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    bzero((char *)v17 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    swift_bridgeObjectRetain();
    specialized closure #1 in _NativeSet.filter(_:)((void *)((char *)v17 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0)), v9, a1, a2, a3);
    uint64_t v13 = v12;
    swift_release();
    swift_bridgeObjectRelease();
    if (v3) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    unint64_t v14 = (void *)swift_slowAlloc();
    bzero(v14, v10);
    swift_bridgeObjectRetain();
    specialized closure #1 in _NativeSet.filter(_:)((unint64_t *)v14, v9, a1, a2, a3);
    uint64_t v13 = v15;
    swift_release();
    swift_bridgeObjectRelease();
    MEMORY[0x1B3EA39E0](v14, -1, -1);
    swift_bridgeObjectRelease_n();
  }
  return v13;
}

Swift::Int specialized Set._Variant.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0xC000000000000001) == 0) {
    return specialized _NativeSet.filter(_:)(a1, a2, a3);
  }
  uint64_t v5 = MEMORY[0x1E4FBC870];
  uint64_t v27 = MEMORY[0x1E4FBC870];
  swift_bridgeObjectRetain();
  __CocoaSet.makeIterator()();
  if (!__CocoaSet.Iterator.next()()) {
    goto LABEL_29;
  }
  type metadata accessor for ActivitySession(0);
  do
  {
    uint64_t v6 = swift_dynamicCast();
    char v7 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v26) + 0x2D0))(v6);
    id v8 = objc_msgSend(v7, sel_bundleIdentifier);

    if (!v8)
    {
LABEL_4:

      continue;
    }
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    if (v9 == a2 && v11 == a3)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v13 & 1) == 0) {
        goto LABEL_4;
      }
    }
    uint64_t v14 = v27;
    unint64_t v15 = *(void *)(v27 + 16);
    if (*(void *)(v27 + 24) <= v15)
    {
      specialized _NativeSet.resize(capacity:)(v15 + 1);
      uint64_t v14 = v27;
    }
    Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v14 + 40));
    uint64_t v17 = v14 + 56;
    uint64_t v18 = -1 << *(unsigned char *)(v14 + 32);
    unint64_t v19 = result & ~v18;
    unint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v14 + 56 + 8 * (v19 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v19) & ~*(void *)(v14 + 56 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          return result;
        }
        BOOL v24 = v20 == v23;
        if (v20 == v23) {
          unint64_t v20 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v17 + 8 * v20);
      }
      while (v25 == -1);
      unint64_t v21 = __clz(__rbit64(~v25)) + (v20 << 6);
    }
    *(void *)(v17 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    *(void *)(*(void *)(v14 + 48) + 8 * v21) = v26;
    ++*(void *)(v14 + 16);
  }
  while (__CocoaSet.Iterator.next()());
  uint64_t v5 = v27;
LABEL_29:
  swift_bridgeObjectRelease();
  swift_release();
  return v5;
}

void specialized ActivitySessionManager.systemStateObserver(_:sharePlayAllowedStateChanged:)(char a1, const char *a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (void *)((char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = *(void **)(v4 + OBJC_IVAR___CPActivitySessionManager_queue);
  *uint64_t v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E4FBCBF0], v6);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if (v10)
  {
    if (one-time initialization token for default == -1) {
      goto LABEL_3;
    }
  }
  else
  {
LABEL_42:
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.default);
  char v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    unint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    v41[0] = v16;
    *(_DWORD *)unint64_t v15 = 136315138;
    LOBYTE(v40) = a1 & 1;
    uint64_t v17 = String.init<A>(reflecting:)();
    uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v13, v14, a2, v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v16, -1, -1);
    MEMORY[0x1B3EA39E0](v15, -1, -1);
  }

  if ((a1 & 1) == 0)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v19 = v41[0];
    if ((v41[0] & 0xC000000000000001) != 0)
    {
      __CocoaSet.makeIterator()();
      type metadata accessor for ActivitySession(0);
      lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, (void (*)(uint64_t))type metadata accessor for ActivitySession);
      Set.Iterator.init(_cocoa:)();
      uint64_t v19 = v41[0];
      a2 = (const char *)v41[1];
      uint64_t v20 = v41[2];
      uint64_t v21 = v41[3];
      unint64_t v22 = v41[4];
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v23 = -1 << *(unsigned char *)(v41[0] + 32);
      a2 = (const char *)(v41[0] + 56);
      uint64_t v20 = ~v23;
      uint64_t v24 = -v23;
      if (v24 < 64) {
        uint64_t v25 = ~(-1 << v24);
      }
      else {
        uint64_t v25 = -1;
      }
      unint64_t v22 = v25 & *(void *)(v41[0] + 56);
    }
    a1 = 0;
    v39[3] = v19 & 0x7FFFFFFFFFFFFFFFLL;
    v39[1] = v20;
    uint64_t v26 = (void *)MEMORY[0x1E4FBC8C8];
    int64_t v27 = (unint64_t)(v20 + 64) >> 6;
    void v39[2] = MEMORY[0x1E4FBC838] + 8;
    while (1)
    {
      if (v19 < 0)
      {
        uint64_t v31 = __CocoaSet.Iterator.next()();
        if (!v31) {
          goto LABEL_39;
        }
        v39[4] = v31;
        type metadata accessor for ActivitySession(0);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t v32 = (void *)v40;
        uint64_t v33 = (void *)swift_unknownObjectRelease();
        int64_t v30 = v21;
        uint64_t v28 = v22;
        if (!v32) {
          goto LABEL_39;
        }
      }
      else
      {
        if (v22)
        {
          uint64_t v28 = (v22 - 1) & v22;
          unint64_t v29 = __clz(__rbit64(v22)) | (v21 << 6);
          int64_t v30 = v21;
        }
        else
        {
          int64_t v30 = v21 + 1;
          if (__OFADD__(v21, 1))
          {
            __break(1u);
            goto LABEL_42;
          }
          if (v30 >= v27) {
            goto LABEL_39;
          }
          unint64_t v34 = *(void *)&a2[8 * v30];
          if (!v34)
          {
            uint64_t v35 = v21 + 2;
            if (v21 + 2 >= v27) {
              goto LABEL_39;
            }
            unint64_t v34 = *(void *)&a2[8 * v35];
            if (v34) {
              goto LABEL_27;
            }
            uint64_t v35 = v21 + 3;
            if (v21 + 3 >= v27) {
              goto LABEL_39;
            }
            unint64_t v34 = *(void *)&a2[8 * v35];
            if (v34)
            {
LABEL_27:
              int64_t v30 = v35;
            }
            else
            {
              int64_t v30 = v21 + 4;
              if (v21 + 4 >= v27) {
                goto LABEL_39;
              }
              unint64_t v34 = *(void *)&a2[8 * v30];
              if (!v34)
              {
                uint64_t v38 = v21 + 5;
                while (v27 != v38)
                {
                  unint64_t v34 = *(void *)&a2[8 * v38++];
                  if (v34)
                  {
                    int64_t v30 = v38 - 1;
                    goto LABEL_28;
                  }
                }
LABEL_39:
                outlined consume of [String : ()].Iterator._Variant();
                return;
              }
            }
          }
LABEL_28:
          uint64_t v28 = (v34 - 1) & v34;
          unint64_t v29 = __clz(__rbit64(v34)) + (v30 << 6);
        }
        uint64_t v33 = *(id *)(*(void *)(v19 + 48) + 8 * v29);
        uint64_t v32 = v33;
        if (!v33) {
          goto LABEL_39;
        }
      }
      unint64_t v36 = (unsigned char *)(*(uint64_t (**)(void *))((*v26 & *v32) + 0x3B0))(v33);
      if (!v36
        || (char v37 = v36[direct field offset for XPCHostConnection.isEntitledToBypassSharePlayRestriction],
            v36,
            (v37 & 1) == 0))
      {
        (*(void (**)(void))((*v26 & *v32) + 0x3D8))();
      }

      uint64_t v21 = v30;
      unint64_t v22 = v28;
    }
  }
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in ActivitySessionManager()
{
  return lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
}

uint64_t sub_1B106E560@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x110))();
  *a2 = result;
  return result;
}

uint64_t sub_1B106E5C4(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x118);
  uint64_t v3 = swift_unknownObjectRetain();
  return v2(v3);
}

uint64_t sub_1B106E630@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x128))();
  *a2 = result;
  return result;
}

uint64_t sub_1B106E694(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x130))(*a1);
}

uint64_t sub_1B106E700@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x140))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B106E768(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x148))(*a1);
}

uint64_t sub_1B106E7C8@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x188))();
  uint64_t v5 = v4;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *(void *)(result + 24) = v5;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed TUConversationActivitySession, @guaranteed ActivitySessionManager) -> (@owned ActivitySession);
  a2[1] = result;
  return result;
}

uint64_t sub_1B106E868(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1A0))();
}

uint64_t sub_1B106E8C4(uint64_t a1, void **a2)
{
  outlined init with copy of UserNotificationCenter(a1, (uint64_t)v4);
  return (*(uint64_t (**)(unsigned char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x1A8))(v4);
}

uint64_t sub_1B106E944@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x2B0))();
  uint64_t v5 = v4;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *(void *)(result + 24) = v5;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ActivitySessionManager, @in_guaranteed UUID, @unowned UInt64) -> (@owned PubSubTopicsObserver);
  a2[1] = result;
  return result;
}

unsigned char *storeEnumTagSinglePayload for ActivitySessionErrors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B106EAB0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ActivitySessionErrors()
{
  return &type metadata for ActivitySessionErrors;
}

uint64_t ObjC metadata update function for ActivitySessionManager()
{
  return type metadata accessor for ActivitySessionManager();
}

void type metadata completion function for ActivitySessionManager()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Published<Set<ActivitySession>>();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for ActivitySessionManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ActivitySessionManager);
}

uint64_t dispatch thunk of ActivitySessionManager.activitySessions.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of ActivitySessionManager.delegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of ActivitySessionManager.delegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of ActivitySessionManager.delegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of ActivitySessionManager.applicationLauncher.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of ActivitySessionManager.applicationLauncher.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of ActivitySessionManager.applicationLauncher.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of ActivitySessionManager.handedOff.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of ActivitySessionManager.handedOff.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x148))();
}

uint64_t dispatch thunk of ActivitySessionManager.handedOff.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x150))();
}

uint64_t dispatch thunk of static ActivitySessionManager.supportsMultipleActivitySessions.getter()
{
  return (*(uint64_t (**)(void))(v0 + 344))();
}

uint64_t dispatch thunk of ActivitySessionManager.tuActivitySessions.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x160))();
}

uint64_t dispatch thunk of ActivitySessionManager.tuSystemActivitySessions.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x168))();
}

uint64_t dispatch thunk of ActivitySessionManager.localParticipant(with:for:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x170))();
}

uint64_t dispatch thunk of ActivitySessionManager.activeRemoteParticipant(with:for:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x178))();
}

uint64_t dispatch thunk of ActivitySessionManager.activeRemoteParticipant(with:for:completion:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x180))();
}

uint64_t dispatch thunk of ActivitySessionManager.activitySessionCreation.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x188))();
}

uint64_t dispatch thunk of ActivitySessionManager.activitySessionCreation.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x190))();
}

uint64_t dispatch thunk of ActivitySessionManager.activitySessionCreation.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x198))();
}

uint64_t dispatch thunk of ActivitySessionManager.protectedStorage.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of ActivitySessionManager.protectedStorage.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of ActivitySessionManager.protectedStorage.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of ActivitySessionManager.__allocating_init(id:groupUUID:activities:applicationController:delegate:featureFlags:queue:systemStateObserver:audioRoutePolicyManager:serverBag:)()
{
  return (*(uint64_t (**)(void))(v0 + 440))();
}

uint64_t dispatch thunk of ActivitySessionManager.createActivitySession(tuActivitySession:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of ActivitySessionManager.leaveActivitySession(activitySessionUUID:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of ActivitySessionManager.presentSessionDismissalAlert(activitySessionUUID:allowingCancellation:completion:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of ActivitySessionManager.removeActivitySession(activitySessionUUID:using:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of ActivitySessionManager.updateActivitySession(activitySessionUUID:activity:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of ActivitySessionManager.setUsingAirplay(_:_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of ActivitySessionManager.refreshDataCryptors()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of ActivitySessionManager.refreshActivitySessionActiveParticipants()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of ActivitySessionManager.resetSessions()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x200))();
}

uint64_t dispatch thunk of ActivitySessionManager.resetNonScreenSharingSessions()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x208))();
}

uint64_t dispatch thunk of ActivitySessionManager.removeScreenSharingSessions()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x210))();
}

uint64_t dispatch thunk of ActivitySessionManager.removeLocalScreenSharingSessions()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x218))();
}

uint64_t dispatch thunk of ActivitySessionManager.resetSceneAssociations(for:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x220))();
}

uint64_t dispatch thunk of ActivitySessionManager.sessionChanged(session:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x228))();
}

uint64_t dispatch thunk of ActivitySessionManager.sessionIsJoinable(session:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x230))();
}

uint64_t dispatch thunk of ActivitySessionManager.session(session:receivedEvent:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x238))();
}

uint64_t dispatch thunk of ActivitySessionManager.session(session:fetchDataCryptorForTopic:completion:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x240))();
}

uint64_t dispatch thunk of ActivitySessionManager.session(session:requestEncryptionKeysForParticipants:topicName:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x248))();
}

uint64_t dispatch thunk of ActivitySessionManager.sessionActivityChanged(session:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x250))();
}

uint64_t dispatch thunk of ActivitySessionManager.session(session:stateChanged:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x258))();
}

uint64_t dispatch thunk of ActivitySessionManager.sessionUnjoined(session:startDate:endDate:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x260))();
}

uint64_t dispatch thunk of ActivitySessionManager.sessionCapabilitiesUpdated(session:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x268))();
}

uint64_t dispatch thunk of ActivitySessionManager.updateVirtualParticipantId(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2A0))();
}

uint64_t dispatch thunk of ActivitySessionManager.logMetrics(for:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2A8))();
}

uint64_t dispatch thunk of ActivitySessionManager.topicsObserverGenerator.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2B0))();
}

uint64_t dispatch thunk of ActivitySessionManager.topicsObserverGenerator.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2B8))();
}

uint64_t dispatch thunk of ActivitySessionManager.topicsObserverGenerator.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2C0))();
}

uint64_t dispatch thunk of ActivitySessionManager.requestForegroundPresentationFor(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2C8))();
}

uint64_t dispatch thunk of ActivitySessionManager.session(session:associatedScene:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2D0))();
}

uint64_t dispatch thunk of ActivitySessionManager.session(session:disassociatedScene:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2D8))();
}

uint64_t dispatch thunk of ActivitySessionManager.sendResource(atURL:to:metadata:activitySessionUUID:completion:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2E0))();
}

uint64_t dispatch thunk of ActivitySessionManager.session(session:requestedEndpointWith:completion:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2E8))();
}

uint64_t dispatch thunk of ActivitySessionManager.requestTopicTermination(withTopicName:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2F0))();
}

void type metadata accessor for Published<Set<ActivitySession>>()
{
  if (!lazy cache variable for type metadata for Published<Set<ActivitySession>>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<ActivitySession>);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<Set<ActivitySession>>);
    }
  }
}

uint64_t sub_1B106F968()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned ObjCBool) -> ()(char a1)
{
  return thunk for @escaping @callee_unowned @convention(block) (@unowned ObjCBool) -> ()(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed ActivitySessionManager, @in_guaranteed UUID, @in_guaranteed UInt64) -> (@out PubSubTopicsObserver)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v4)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t *);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  unsigned int v4 = *(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t *))(v3 + 16);
  uint64_t v7 = a3;
  uint64_t v8 = a1;
  v4(&v6, &v8, a2, &v7);
  return v6;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ActivitySessionManager, @in_guaranteed UUID, @unowned UInt64) -> (@owned PubSubTopicsObserver)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(v4 + 16))(*a1, a2, *a3);
  *a4 = result;
  return result;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed TUConversationActivitySession, @in_guaranteed ActivitySessionManager) -> (@out ActivitySession)(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t *__return_ptr, uint64_t *, uint64_t *);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v3 = *(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t *))(v2 + 16);
  unsigned int v6 = a2;
  uint64_t v7 = a1;
  v3(&v5, &v7, &v6);
  return v5;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed TUConversationActivitySession, @guaranteed ActivitySessionManager) -> (@owned ActivitySession)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void))(v3 + 16))(*a1, *a2);
  *a3 = result;
  return result;
}

uint64_t outlined init with take of TopicInfo(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined copy of TopicInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  swift_bridgeObjectRetain();
  if (a5)
  {
    return swift_retain();
  }
  else
  {
    return swift_bridgeObjectRetain();
  }
}

uint64_t outlined retain of TopicInfo(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t outlined consume of TopicInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  swift_bridgeObjectRelease();
  if (a5)
  {
    return swift_release();
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1B106FC24()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t outlined init with take of PluginRpcError(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PluginRpcError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B106FCC0()
{
  return lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [TopicInfo] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [TopicInfo]);
}

uint64_t _s14CopresenceCore14PluginRpcErrorOWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s14CopresenceCore14PluginRpcErrorOWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t partial apply for closure #1 in ActivitySessionManager.presentSessionDismissalAlert(activitySessionUUID:allowingCancellation:completion:)()
{
  return partial apply for closure #1 in ActivitySessionManager.leaveActivitySession(activitySessionUUID:)() & 1;
}

uint64_t AnyCancellable.init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = a1;
  return MEMORY[0x1F40D6978](destructiveProjectEnumData for ActivitySession.Errors, v2);
}

uint64_t sub_1B106FEA4()
{
  swift_unknownObjectRelease();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t getEnumTagSinglePayload for LazyState(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v6;
  if (a2 > v6)
  {
    char v9 = 8 * v7;
    if (v7 > 3) {
      goto LABEL_8;
    }
    unsigned int v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v7);
      if (v10) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2) {
          goto LABEL_25;
        }
LABEL_8:
        int v10 = *((unsigned __int8 *)a1 + v7);
        if (!*((unsigned char *)a1 + v7)) {
          goto LABEL_25;
        }
LABEL_15:
        int v12 = (v10 - 1) << v9;
        if (v7 > 3) {
          int v12 = 0;
        }
        if (v7)
        {
          if (v7 <= 3) {
            int v13 = v7;
          }
          else {
            int v13 = 4;
          }
          switch(v13)
          {
            case 2:
              int v14 = *a1;
              break;
            case 3:
              int v14 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              int v14 = *(_DWORD *)a1;
              break;
            default:
              int v14 = *(unsigned __int8 *)a1;
              break;
          }
        }
        else
        {
          int v14 = 0;
        }
        return v6 + (v14 | v12) + 1;
      }
      int v10 = *(unsigned __int16 *)((char *)a1 + v7);
      if (*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_15;
      }
    }
  }
LABEL_25:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v16 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v16 >= 2) {
    return v16 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for LazyState(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (v8)
  {
    size_t v10 = *(void *)(v7 + 64);
  }
  else
  {
    unsigned int v9 = 0;
    size_t v10 = *(void *)(v7 + 64) + 1;
  }
  BOOL v11 = a3 >= v9;
  unsigned int v12 = a3 - v9;
  if (v12 == 0 || !v11)
  {
LABEL_13:
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  if (v10 > 3)
  {
    int v6 = 1;
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  unsigned int v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
  if (!HIWORD(v13))
  {
    if (v13 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v13 > 1;
    }
    goto LABEL_13;
  }
  int v6 = 4;
  if (v9 < a2)
  {
LABEL_14:
    unsigned int v14 = ~v9 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v16 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
LABEL_21:
  switch(v6)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x1B10702B8);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v8 >= 2)
        {
          uint64_t v17 = *(void (**)(void))(v7 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t type metadata accessor for LazyState()
{
  return __swift_instantiateGenericMetadata();
}

id CPCarPlayObserver.sessionStatus.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore17CPCarPlayObserver_sessionStatus);
}

id CPCarPlayObserver.queue.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore17CPCarPlayObserver_queue);
}

uint64_t CPCarPlayObserver.delegate.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14CopresenceCore17CPCarPlayObserver_delegate;
  swift_beginAccess();
  return MEMORY[0x1B3EA3B30](v1);
}

uint64_t CPCarPlayObserver.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC14CopresenceCore17CPCarPlayObserver_delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*CPCarPlayObserver.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC14CopresenceCore17CPCarPlayObserver_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1B3EA3B30](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return ActivitySession.sessionManager.modify;
}

id CPCarPlayObserver.__allocating_init(queue:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CPCarPlayObserver.init(queue:)(a1);
}

id CPCarPlayObserver.init(queue:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC14CopresenceCore17CPCarPlayObserver_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v1[OBJC_IVAR____TtC14CopresenceCore17CPCarPlayObserver_isAttemptingCarplaySession] = 0;
  *(void *)&v1[OBJC_IVAR____TtC14CopresenceCore17CPCarPlayObserver_queue] = a1;
  uint64_t v3 = one-time initialization token for default;
  uint64_t v4 = v1;
  id v5 = a1;
  if (v3 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.default);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unsigned int v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unsigned int v9 = 0;
    _os_log_impl(&dword_1B0DF7000, v7, v8, "Initializing CPCarPlayObserver", v9, 2u);
    MEMORY[0x1B3EA39E0](v9, -1, -1);
  }

  id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F57EE0]), sel_init);
  *(void *)&v4[OBJC_IVAR____TtC14CopresenceCore17CPCarPlayObserver_sessionStatus] = v10;
  id v11 = v10;

  v14.receiver = v4;
  v14.super_class = (Class)type metadata accessor for CPCarPlayObserver();
  id v12 = objc_msgSendSuper2(&v14, sel_init);
  objc_msgSend(v11, sel_addSessionObserver_, v12);

  return v12;
}

uint64_t CPCarPlayObserver.isCarplaySessionConnected.getter()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (uint64_t *)((char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v5 = *(void **)&v0[OBJC_IVAR____TtC14CopresenceCore17CPCarPlayObserver_queue];
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBCBF0], v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
LABEL_12:
    swift_once();
    goto LABEL_5;
  }
  id v7 = objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC14CopresenceCore17CPCarPlayObserver_sessionStatus], sel_currentSession);
  uint64_t v1 = (uint64_t)v7;
  if (v7) {

  }
  if (one-time initialization token for default != -1) {
    goto LABEL_12;
  }
LABEL_5:
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.default);
  unsigned int v9 = v0;
  id v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v10, v11))
  {

    if (!v1) {
      goto LABEL_7;
    }
LABEL_9:
    char v19 = 1;
    return v19 & 1;
  }
  uint64_t v12 = swift_slowAlloc();
  uint64_t v13 = swift_slowAlloc();
  uint64_t v22 = v13;
  *(_DWORD *)uint64_t v12 = 136315394;
  LOBYTE(v21) = v1 != 0;
  uint64_t v14 = String.init<A>(reflecting:)();
  uint64_t v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v22);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t v16 = swift_bridgeObjectRelease();
  *(_WORD *)(v12 + 12) = 2080;
  LOBYTE(v21) = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *(void *)v9) + 0x98))(v16) & 1;
  uint64_t v17 = String.init<A>(reflecting:)();
  uint64_t v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v22);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  _os_log_impl(&dword_1B0DF7000, v10, v11, "CPCarPlayObserver hasCurrentSession %s isAttemptingConnection %s", (uint8_t *)v12, 0x16u);
  swift_arrayDestroy();
  MEMORY[0x1B3EA39E0](v13, -1, -1);
  MEMORY[0x1B3EA39E0](v12, -1, -1);

  if (v1) {
    goto LABEL_9;
  }
LABEL_7:
  char v19 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *(void *)v9) + 0x98))();
  return v19 & 1;
}

uint64_t CPCarPlayObserver.isAttemptingCarplaySession.didset(char a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  id v6 = (uint64_t *)((char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v7 = *(void **)((char *)v1 + OBJC_IVAR____TtC14CopresenceCore17CPCarPlayObserver_queue);
  *id v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4FBCBF0], v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    return result;
  }
  id v10 = (char *)v1 + OBJC_IVAR____TtC14CopresenceCore17CPCarPlayObserver_isAttemptingCarplaySession;
  uint64_t result = swift_beginAccess();
  if (*v10 != (a1 & 1))
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70))(result);
    uint64_t v12 = v11;
    if (a1)
    {
      if (!result) {
        return result;
      }
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v12 + 32))(ObjectType, v12);
    }
    else
    {
      if (!result) {
        return result;
      }
      uint64_t v14 = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v12 + 24))(v14, v12);
    }
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t CPCarPlayObserver.isAttemptingCarplaySession.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14CopresenceCore17CPCarPlayObserver_isAttemptingCarplaySession);
  swift_beginAccess();
  return *v1;
}

uint64_t CPCarPlayObserver.isAttemptingCarplaySession.setter(char a1)
{
  uint64_t v3 = (char *)(v1 + OBJC_IVAR____TtC14CopresenceCore17CPCarPlayObserver_isAttemptingCarplaySession);
  swift_beginAccess();
  char v4 = *v3;
  *uint64_t v3 = a1;
  return CPCarPlayObserver.isAttemptingCarplaySession.didset(v4);
}

void (*CPCarPlayObserver.isAttemptingCarplaySession.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC14CopresenceCore17CPCarPlayObserver_isAttemptingCarplaySession;
  v3[3] = v1;
  v3[4] = v4;
  uint64_t v5 = (unsigned char *)(v1 + v4);
  swift_beginAccess();
  *((unsigned char *)v3 + 40) = *v5;
  return CPCarPlayObserver.isAttemptingCarplaySession.modify;
}

void CPCarPlayObserver.isAttemptingCarplaySession.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  uint64_t v2 = *(void *)(*(void *)a1 + 32);
  char v4 = *(unsigned char *)(*(void *)a1 + 40);
  char v5 = *(unsigned char *)(v3 + v2);
  *(unsigned char *)(v3 + v2) = v4;
  CPCarPlayObserver.isAttemptingCarplaySession.didset(v5);
  free(v1);
}

id CPCarPlayObserver.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC14CopresenceCore17CPCarPlayObserver_sessionStatus], sel_removeSessionObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CPCarPlayObserver();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CPCarPlayObserver.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void CPCarPlayObserver.init()()
{
}

uint64_t protocol witness for CPCarPlayObserverProtocol.isCarplaySessionConnected.getter in conformance CPCarPlayObserver()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t protocol witness for CPCarPlayObserverProtocol.delegate.getter in conformance CPCarPlayObserver()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t protocol witness for CPCarPlayObserverProtocol.delegate.setter in conformance CPCarPlayObserver()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

void (*protocol witness for CPCarPlayObserverProtocol.delegate.modify in conformance CPCarPlayObserver(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x80))();
  return protocol witness for PresenceDataSource.members.modify in conformance SKPresenceDataSource<A>;
}

uint64_t CPCarPlayObserver.sessionDidConnect(_:)(void *a1)
{
  return CPCarPlayObserver.sessionDidConnect(_:)(a1, "Got carplay session did connect %s", (uint64_t)&unk_1F09B57D8, (uint64_t)partial apply for closure #1 in CPCarPlayObserver.sessionDidConnect(_:), (uint64_t)&block_descriptor_28);
}

uint64_t closure #1 in CPCarPlayObserver.sessionDidConnect(_:)(void *a1)
{
  objc_super v2 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0xA0))(0);
  uint64_t result = (*(uint64_t (**)(uint64_t))((*v2 & *a1) + 0x70))(v3);
  if (result)
  {
    uint64_t v6 = v5;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(ObjectType, v6);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t CPCarPlayObserver.sessionDidDisconnect(_:)(void *a1)
{
  return CPCarPlayObserver.sessionDidConnect(_:)(a1, "Got carplay session did disconnect %s", (uint64_t)&unk_1F09B5800, (uint64_t)partial apply for closure #1 in CPCarPlayObserver.sessionDidDisconnect(_:), (uint64_t)&block_descriptor_6_2);
}

uint64_t CPCarPlayObserver.sessionDidConnect(_:)(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v38 = a3;
  uint64_t v39 = a4;
  char v37 = a2;
  id v7 = v5;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v41 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v40 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.default);
  id v16 = a1;
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v33 = a5;
    uint64_t v19 = swift_slowAlloc();
    unint64_t v34 = v7;
    uint64_t v20 = (uint8_t *)v19;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v35 = v12;
    uint64_t v22 = v21;
    uint64_t v42 = (uint64_t)v16;
    aBlock[0] = v21;
    *(_DWORD *)uint64_t v20 = 136315138;
    uint64_t v36 = v13;
    type metadata accessor for CARSession();
    id v23 = v16;
    uint64_t v24 = String.init<A>(reflecting:)();
    uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, aBlock);
    uint64_t v13 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a5 = v33;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v17, v18, v37, v20, 0xCu);
    swift_arrayDestroy();
    uint64_t v26 = v22;
    uint64_t v12 = v35;
    MEMORY[0x1B3EA39E0](v26, -1, -1);
    int64_t v27 = v20;
    id v7 = v34;
    MEMORY[0x1B3EA39E0](v27, -1, -1);
  }
  else
  {
  }
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = v7;
  aBlock[4] = v39;
  void aBlock[5] = v28;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  uint64_t aBlock[3] = a5;
  unint64_t v29 = _Block_copy(aBlock);
  id v30 = v7;
  uint64_t v31 = v40;
  static DispatchQoS.unspecified.getter();
  uint64_t v42 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v31, v12, v29);
  _Block_release(v29);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v31, v13);
  return swift_release();
}

uint64_t closure #1 in CPCarPlayObserver.sessionDidDisconnect(_:)(void *a1)
{
  objc_super v2 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0xA0))(0);
  uint64_t result = (*(uint64_t (**)(uint64_t))((*v2 & *a1) + 0x70))(v3);
  if (result)
  {
    uint64_t v6 = v5;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v6 + 16))(ObjectType, v6);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t CPCarPlayObserver.startedConnectionAttempt(on:)(uint64_t a1)
{
  return CPCarPlayObserver.startedConnectionAttempt(on:)(a1, "Got callback that CarPlay is starting a connection attempt on transport %s", (uint64_t)&unk_1F09B5828, (uint64_t)partial apply for closure #1 in CPCarPlayObserver.startedConnectionAttempt(on:), (uint64_t)&block_descriptor_12_1);
}

uint64_t CPCarPlayObserver.cancelledConnectionAttempt(on:)(uint64_t a1)
{
  return CPCarPlayObserver.startedConnectionAttempt(on:)(a1, "Got callback that CarPlay's connection attempt was cancelled on transport %s", (uint64_t)&unk_1F09B5850, (uint64_t)partial apply for closure #1 in CPCarPlayObserver.cancelledConnectionAttempt(on:), (uint64_t)&block_descriptor_18_3);
}

uint64_t CPCarPlayObserver.startedConnectionAttempt(on:)(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  id v8 = v5;
  uint64_t v35 = a1;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v38 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Log.default);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v31 = a5;
    uint64_t v19 = swift_slowAlloc();
    id v30 = a2;
    uint64_t v20 = (uint8_t *)v19;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v34 = v10;
    uint64_t v22 = v21;
    uint64_t v32 = v13;
    uint64_t v33 = v9;
    *(_DWORD *)uint64_t v20 = 136315138;
    uint64_t v39 = v35;
    aBlock[0] = v21;
    type metadata accessor for CARTransportType(0);
    uint64_t v23 = String.init<A>(reflecting:)();
    uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, aBlock);
    uint64_t v13 = v32;
    uint64_t v9 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a5 = v31;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v17, v18, v30, v20, 0xCu);
    swift_arrayDestroy();
    uint64_t v25 = v22;
    uint64_t v10 = v34;
    MEMORY[0x1B3EA39E0](v25, -1, -1);
    MEMORY[0x1B3EA39E0](v20, -1, -1);
  }

  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = v8;
  aBlock[4] = v37;
  void aBlock[5] = v26;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  uint64_t aBlock[3] = a5;
  int64_t v27 = _Block_copy(aBlock);
  id v28 = v8;
  static DispatchQoS.unspecified.getter();
  uint64_t v39 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v15, v12, v27);
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v15, v13);
  return swift_release();
}

uint64_t type metadata accessor for CPCarPlayObserver()
{
  return self;
}

uint64_t sub_1B1071BC4()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in CPCarPlayObserver.sessionDidConnect(_:)()
{
  return closure #1 in CPCarPlayObserver.sessionDidConnect(_:)(*(void **)(v0 + 16));
}

uint64_t block_destroy_helper_26()
{
  return swift_release();
}

unint64_t type metadata accessor for CARSession()
{
  unint64_t result = lazy cache variable for type metadata for CARSession;
  if (!lazy cache variable for type metadata for CARSession)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CARSession);
  }
  return result;
}

uint64_t partial apply for closure #1 in CPCarPlayObserver.sessionDidDisconnect(_:)()
{
  return closure #1 in CPCarPlayObserver.sessionDidDisconnect(_:)(*(void **)(v0 + 16));
}

uint64_t partial apply for closure #1 in CPCarPlayObserver.startedConnectionAttempt(on:)()
{
  return partial apply for closure #1 in CPCarPlayObserver.startedConnectionAttempt(on:)();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 16)) + 0xA0))();
}

uint64_t partial apply for closure #1 in CPCarPlayObserver.cancelledConnectionAttempt(on:)()
{
  return partial apply for closure #1 in CPCarPlayObserver.startedConnectionAttempt(on:)();
}

uint64_t sub_1B1071CB8@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x70))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B1071D14(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x78);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t sub_1B1071D88@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x98))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B1071DE8(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xA0))(*a1);
}

uint64_t dispatch thunk of CPCarPlayObserverDelegate.carPlayDidConnect()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CPCarPlayObserverDelegate.carPlayDidDisconnect()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CPCarPlayObserverDelegate.carPlayStartedConnectionAttempt()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of CPCarPlayObserverDelegate.carPlayStoppedConnectionAttempt()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of CPCarPlayObserverProtocol.isCarplaySessionConnected.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CPCarPlayObserverProtocol.delegate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CPCarPlayObserverProtocol.delegate.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of CPCarPlayObserverProtocol.delegate.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t method lookup function for CPCarPlayObserver(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CPCarPlayObserver);
}

uint64_t dispatch thunk of CPCarPlayObserver.delegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of CPCarPlayObserver.delegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of CPCarPlayObserver.delegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of CPCarPlayObserver.__allocating_init(queue:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of CPCarPlayObserver.isCarplaySessionConnected.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of CPCarPlayObserver.isAttemptingCarplaySession.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of CPCarPlayObserver.isAttemptingCarplaySession.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of CPCarPlayObserver.isAttemptingCarplaySession.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t BackgroundSession.__allocating_init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  uint64_t v16 = swift_allocObject();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v18 = swift_getObjectType();
  return specialized BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a11, a12, v16, ObjectType, v18, a10);
}

uint64_t BackgroundSession.State.canBeReplaced.getter(unint64_t a1)
{
  if ((a1 >> 62) < 2) {
    return 0;
  }
  if (a1 >> 62 == 3)
  {
    *((void *)&v2 + 1) = a1;
    *(void *)&long long v2 = a1 + 0x4000000000000000;
    if ((unint64_t)(v2 >> 3) < 5) {
      return 0;
    }
  }
  return 1;
}

BOOL static BackgroundSession.BackgroundSessionError.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void BackgroundSession.BackgroundSessionError.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int BackgroundSession.BackgroundSessionError.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t BackgroundSession.State.containerState.getter(unint64_t a1)
{
  if ((a1 >> 62) < 2) {
    return 2;
  }
  if (a1 >> 62 == 2) {
    return 4;
  }
  return *(void *)((char *)&unk_1B1147718 + ((a1 + 0x4000000000000000) & 0xFFFFFFFFFFFFFFF8));
}

void BackgroundSession.State.hash(into:)(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      Swift::UInt v3 = 5;
      goto LABEL_5;
    case 2uLL:
      Swift::UInt v3 = 8;
LABEL_5:
      Hasher._combine(_:)(v3);
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      goto LABEL_6;
    case 3uLL:
      *((void *)&v4 + 1) = a2;
      *(void *)&long long v4 = a2 + 0x4000000000000000;
      switch((unint64_t)(v4 >> 3))
      {
        case 1uLL:
          Swift::UInt v5 = 2;
          break;
        case 2uLL:
          Swift::UInt v5 = 3;
          break;
        case 3uLL:
          Swift::UInt v5 = 4;
          break;
        case 4uLL:
          Swift::UInt v5 = 6;
          break;
        case 5uLL:
          Swift::UInt v5 = 7;
          break;
        default:
          Swift::UInt v5 = 0;
          break;
      }
      Hasher._combine(_:)(v5);
      return;
    default:
      Hasher._combine(_:)(1uLL);
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
LABEL_6:
      Task.hash(into:)();
      outlined consume of BackgroundSession.State(a2);
      return;
  }
}

Swift::Int BackgroundSession.State.hashValue.getter(unint64_t a1)
{
  Hasher.init(_seed:)();
  switch(a1 >> 62)
  {
    case 1uLL:
      Swift::UInt v2 = 5;
      goto LABEL_5;
    case 2uLL:
      Swift::UInt v2 = 8;
LABEL_5:
      Hasher._combine(_:)(v2);
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      goto LABEL_6;
    case 3uLL:
      *((void *)&v3 + 1) = a1;
      *(void *)&long long v3 = a1 + 0x4000000000000000;
      switch((unint64_t)(v3 >> 3))
      {
        case 1uLL:
          Swift::UInt v4 = 2;
          break;
        case 2uLL:
          Swift::UInt v4 = 3;
          break;
        case 3uLL:
          Swift::UInt v4 = 4;
          break;
        case 4uLL:
          Swift::UInt v4 = 6;
          break;
        case 5uLL:
          Swift::UInt v4 = 7;
          break;
        default:
          Swift::UInt v4 = 0;
          break;
      }
      Hasher._combine(_:)(v4);
      return Hasher._finalize()();
    default:
      Hasher._combine(_:)(1uLL);
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
LABEL_6:
      Task.hash(into:)();
      outlined consume of BackgroundSession.State(a1);
      return Hasher._finalize()();
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance BackgroundSession.State()
{
  return BackgroundSession.State.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance BackgroundSession.State(uint64_t a1)
{
  BackgroundSession.State.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance BackgroundSession.State()
{
  unint64_t v1 = *v0;
  Hasher.init(_seed:)();
  switch(v1 >> 62)
  {
    case 1uLL:
      Swift::UInt v2 = 5;
      goto LABEL_5;
    case 2uLL:
      Swift::UInt v2 = 8;
LABEL_5:
      Hasher._combine(_:)(v2);
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      goto LABEL_6;
    case 3uLL:
      *((void *)&v3 + 1) = v1;
      *(void *)&long long v3 = v1 + 0x4000000000000000;
      switch((unint64_t)(v3 >> 3))
      {
        case 1uLL:
          Swift::UInt v4 = 2;
          break;
        case 2uLL:
          Swift::UInt v4 = 3;
          break;
        case 3uLL:
          Swift::UInt v4 = 4;
          break;
        case 4uLL:
          Swift::UInt v4 = 6;
          break;
        case 5uLL:
          Swift::UInt v4 = 7;
          break;
        default:
          Swift::UInt v4 = 0;
          break;
      }
      Hasher._combine(_:)(v4);
      return Hasher._finalize()();
    default:
      Hasher._combine(_:)(1uLL);
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
LABEL_6:
      Task.hash(into:)();
      outlined consume of BackgroundSession.State(v1);
      return Hasher._finalize()();
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance BackgroundSession.State(unint64_t *a1, unint64_t *a2)
{
  return specialized static BackgroundSession.State.== infix(_:_:)(*a1, *a2);
}

uint64_t BackgroundSession.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_id;
  uint64_t v4 = type metadata accessor for UUID();
  Swift::UInt v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

id BackgroundSession.activity.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
}

uint64_t key path setter for BackgroundSession.reporter : BackgroundSession(uint64_t a1, void *a2)
{
  outlined init with copy of UserNotificationCenter(a1, (uint64_t)v5);
  uint64_t v3 = *a2 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_reporter;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  outlined init with take of BackgroundSessionManagerDataSource(v5, v3);
  return swift_endAccess();
}

uint64_t BackgroundSession.reporter.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_reporter;
  swift_beginAccess();
  return outlined init with copy of UserNotificationCenter(v3, a1);
}

uint64_t BackgroundSession.reporter.setter(long long *a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_reporter;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  outlined init with take of BackgroundSessionManagerDataSource(a1, v3);
  return swift_endAccess();
}

uint64_t (*BackgroundSession.reporter.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t BackgroundSession.abcReporter.getter()
{
  return swift_retain();
}

uint64_t BackgroundSession.powerReporter.getter()
{
  return swift_retain();
}

uint64_t BackgroundSession.delegate.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_delegate;
  swift_beginAccess();
  return MEMORY[0x1B3EA3B30](v1);
}

uint64_t BackgroundSession.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*BackgroundSession.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1B3EA3B30](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return ActivitySession.sessionManager.modify;
}

uint64_t key path setter for BackgroundSession.protectedStorage : BackgroundSession(uint64_t a1, uint64_t *a2)
{
  outlined init with copy of UserNotificationCenter(a1, (uint64_t)v7);
  uint64_t v3 = *a2;
  outlined init with take of BackgroundSessionManagerDataSource(v7, (uint64_t)v6);
  uint64_t v4 = v3 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession____lazy_storage___protectedStorage;
  swift_beginAccess();
  outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v6, v4, (uint64_t *)&demangling cache variable for type metadata for ProtectedStorage?);
  return swift_endAccess();
}

uint64_t BackgroundSession.protectedStorage.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession____lazy_storage___protectedStorage;
  swift_beginAccess();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3, (uint64_t)&v7, (uint64_t *)&demangling cache variable for type metadata for ProtectedStorage?);
  if (v8) {
    return outlined init with take of BackgroundSessionManagerDataSource(&v7, (uint64_t)a1);
  }
  outlined destroy of UUID?((uint64_t)&v7, (uint64_t *)&demangling cache variable for type metadata for ProtectedStorage?);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSUserDefaults);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSUserDefaults.classProtectedStorage(suiteName:)(v5, v6, a1);
  swift_bridgeObjectRelease();
  outlined init with copy of UserNotificationCenter((uint64_t)a1, (uint64_t)&v7);
  swift_beginAccess();
  outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)&v7, v3, (uint64_t *)&demangling cache variable for type metadata for ProtectedStorage?);
  return swift_endAccess();
}

uint64_t BackgroundSession.protectedStorage.setter(long long *a1)
{
  outlined init with take of BackgroundSessionManagerDataSource(a1, (uint64_t)v4);
  uint64_t v2 = v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession____lazy_storage___protectedStorage;
  swift_beginAccess();
  outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v4, v2, (uint64_t *)&demangling cache variable for type metadata for ProtectedStorage?);
  return swift_endAccess();
}

void (*BackgroundSession.protectedStorage.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x98uLL);
  *a1 = v3;
  v3[18] = v1;
  BackgroundSession.protectedStorage.getter(v3);
  return BackgroundSession.protectedStorage.modify;
}

void BackgroundSession.protectedStorage.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = (long long *)(*a1 + 40);
  uint64_t v4 = *a1 + 80;
  if (a2)
  {
    uint64_t v5 = v2[18];
    outlined init with copy of UserNotificationCenter(*a1, (uint64_t)v3);
    outlined init with take of BackgroundSessionManagerDataSource(v3, v4);
    uint64_t v6 = v5 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession____lazy_storage___protectedStorage;
    swift_beginAccess();
    outlined assign with take of ActivitySession.DomainAssertionWrapper?(v4, v6, (uint64_t *)&demangling cache variable for type metadata for ProtectedStorage?);
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v2);
  }
  else
  {
    uint64_t v7 = v2[18];
    outlined init with take of BackgroundSessionManagerDataSource((long long *)*a1, (uint64_t)v3);
    uint64_t v8 = v7 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession____lazy_storage___protectedStorage;
    swift_beginAccess();
    outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v3, v8, (uint64_t *)&demangling cache variable for type metadata for ProtectedStorage?);
    swift_endAccess();
  }
  free(v2);
}

uint64_t key path getter for BackgroundSession.state : BackgroundSession@<X0>(void *a1@<X8>)
{
  swift_retain();
  CurrentValueSubject.value.getter();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

unint64_t key path setter for BackgroundSession.state : BackgroundSession(unint64_t *a1)
{
  unint64_t v1 = *a1;
  outlined copy of BackgroundSession.State(*a1);
  swift_retain();
  CurrentValueSubject.send(_:)();
  swift_release();
  BackgroundSession.state.didset();
  return outlined consume of BackgroundSession.State(v1);
}

unint64_t BackgroundSession.state.didset()
{
  uint64_t v1 = v0;
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.service);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    v16[0] = v6;
    *(_DWORD *)uint64_t v5 = 136315394;
    type metadata accessor for BackgroundSession(0);
    swift_retain();
    uint64_t v7 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v5 + 12) = 2080;
    swift_retain();
    CurrentValueSubject.value.getter();
    swift_release();
    uint64_t v9 = String.init<A>(reflecting:)();
    unint64_t v15 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B0DF7000, v3, v4, "BackgroundSession %s state changed to %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v6, -1, -1);
    MEMORY[0x1B3EA39E0](v5, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  uint64_t v11 = v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_delegate;
  swift_beginAccess();
  unint64_t result = MEMORY[0x1B3EA3B30](v11);
  if (result)
  {
    uint64_t v13 = *(void *)(v11 + 8);
    uint64_t ObjectType = swift_getObjectType();
    swift_retain();
    CurrentValueSubject.value.getter();
    swift_release();
    (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v13 + 16))(v1, v15, ObjectType, v13);
    swift_unknownObjectRelease();
    return outlined consume of BackgroundSession.State(v15);
  }
  return result;
}

uint64_t BackgroundSession.state.getter()
{
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  return v1;
}

uint64_t BackgroundSession.$state.getter()
{
  return swift_retain();
}

void key path setter for BackgroundSession.session : BackgroundSession(void **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  os_log_type_t v4 = (void **)(*a2 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_session);
  swift_beginAccess();
  uint64_t v5 = *v4;
  *os_log_type_t v4 = v2;
  id v6 = v2;

  uint64_t v7 = v3 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_delegate;
  swift_beginAccess();
  if (MEMORY[0x1B3EA3B30](v7))
  {
    uint64_t v8 = *(void *)(v7 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 8))(v3, ObjectType, v8);

    swift_unknownObjectRelease();
  }
  else
  {
  }
}

void *BackgroundSession.session.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_session);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void *BackgroundSession.container.getter()
{
  uint64_t v1 = v0;
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADB60]), sel_init);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v2, sel_setUUID_, isa);

  Class v4 = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v2, sel_setGroupUUID_, v4);

  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  if ((v79[0] >> 62) >= 2)
  {
    if (v79[0] >> 62 == 2)
    {
      outlined consume of BackgroundSession.State(v79[0]);
      uint64_t v5 = 4;
    }
    else
    {
      uint64_t v5 = *(void *)((char *)&unk_1B1147718 + ((v79[0] + 0x4000000000000000) & 0xFFFFFFFFFFFFFFF8));
    }
  }
  else
  {
    outlined consume of BackgroundSession.State(v79[0]);
    uint64_t v5 = 2;
  }
  objc_msgSend(v2, sel_setState_, v5);
  if ((MEMORY[0x1E4FBC860] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860]);
  }
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
  lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
  Class v6 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_setActivitySessions_, v6);

  uint64_t v7 = (void **)(v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_session);
  swift_beginAccess();
  uint64_t v8 = *v7;
  if (v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    unint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1B1138AA0;
    unint64_t v10 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v8) + 0x330);
    uint64_t v11 = v8;
    *(void *)(inited + 32) = v10();
    v79[0] = inited;
    specialized Array._endMutation()();
    unint64_t v12 = inited;
    if (inited >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v13) {
        goto LABEL_14;
      }
    }
    else if (!*(void *)((inited & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_14:
      swift_bridgeObjectRelease();
      Class v14 = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v2, sel_setActivitySessions_, v14);

      goto LABEL_15;
    }
    specialized Set.init(_nonEmptyArrayLiteral:)(v12);
    goto LABEL_14;
  }
LABEL_15:
  uint64_t v15 = v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionProvider;
  swift_beginAccess();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v15, (uint64_t)&v76, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
  id v72 = v2;
  if (!v77)
  {
    outlined destroy of UUID?((uint64_t)&v76, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
    goto LABEL_24;
  }
  outlined init with take of BackgroundSessionManagerDataSource(&v76, (uint64_t)v79);
  uint64_t v16 = v80;
  uint64_t v17 = v81;
  __swift_project_boxed_opaque_existential_1(v79, v80);
  objc_msgSend(v2, sel_setLocalParticipantIdentifier_, (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 40))(v16, v17));
  uint64_t v18 = v80;
  uint64_t v19 = v81;
  __swift_project_boxed_opaque_existential_1(v79, v80);
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 48))(v18, v19);
  if (v20)
  {
    uint64_t v21 = (void *)v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v22 = swift_initStackObject();
    *(_OWORD *)(v22 + 16) = xmmword_1B1138AA0;
    *(void *)(v22 + 32) = v21;
    *(void *)&long long v76 = v22;
    specialized Array._endMutation()();
    unint64_t v23 = v76;
    if ((unint64_t)v76 >> 62)
    {
      id v26 = v21;
      swift_bridgeObjectRetain();
      uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v27) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v24 = *(void *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id v25 = v21;
      if (!v24)
      {
LABEL_22:
        swift_bridgeObjectRelease();
        type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for TUConversationVirtualParticipant);
        lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject(&lazy protocol witness table cache variable for type TUConversationVirtualParticipant and conformance NSObject, &lazy cache variable for type metadata for TUConversationVirtualParticipant);
        Class v28 = Set._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v2, sel_setVirtualParticipants_, v28);

        goto LABEL_23;
      }
    }
    specialized Set.init(_nonEmptyArrayLiteral:)(v23);
    goto LABEL_22;
  }
LABEL_23:
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v79);
LABEL_24:
  unint64_t v29 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_serverBag);
  id v71 = objc_msgSend(v29, sel_qrPluginConnectionRetryIntervalMillis);
  id v70 = objc_msgSend(v29, sel_qrPluginMaxConnectionAttempts);
  id v69 = objc_msgSend(v29, sel_qrPluginRpcStreamRetryIntervalMillis);
  id v68 = objc_msgSend(v29, sel_qrPluginMaxRpcStreamAttempts);
  BackgroundSession.protectedStorage.getter(v79);
  uint64_t v30 = v80;
  uint64_t v31 = v81;
  __swift_project_boxed_opaque_existential_1(v79, v80);
  uint64_t v32 = self;
  id v33 = objc_msgSend(v32, sel_serverCertValidationEnabledUserDefaultsKey);
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v36 = v35;

  (*(void (**)(long long *__return_ptr, void, uint64_t, uint64_t, void, void, void, uint64_t, uint64_t))(v31 + 32))(&v76, MEMORY[0x1E4FBB390], v34, v36, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB3B0], MEMORY[0x1E4FBB398], v30, v31);
  swift_bridgeObjectRelease();
  int v67 = v76;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v79);
  BackgroundSession.protectedStorage.getter(v79);
  uint64_t v37 = v80;
  uint64_t v38 = v81;
  __swift_project_boxed_opaque_existential_1(v79, v80);
  id v39 = objc_msgSend(v32, sel_serverCertHostnameUserDefaultsKey);
  uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v42 = v41;

  uint64_t v43 = MEMORY[0x1E4FBB1A0];
  (*(void (**)(void *__return_ptr, void, uint64_t, uint64_t, void, void, void, uint64_t, uint64_t))(v38 + 32))(v75, MEMORY[0x1E4FBB1A0], v40, v42, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB1D8], MEMORY[0x1E4FBB1A8], v37, v38);
  swift_bridgeObjectRelease();
  uint64_t v44 = v75[0];
  uint64_t v45 = v75[1];
  BackgroundSession.protectedStorage.getter(&v76);
  uint64_t v46 = v77;
  uint64_t v47 = v78;
  __swift_project_boxed_opaque_existential_1(&v76, v77);
  id v48 = objc_msgSend(v32, sel_serverCertLeafMarkerOIDUserDefaultsKey);
  uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v51 = v50;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, uint64_t))(v47 + 32))(&v73, v43, v49, v51, v43, MEMORY[0x1E4FBB1D8], MEMORY[0x1E4FBB1A8], v46, v47);
  swift_bridgeObjectRelease();
  uint64_t v52 = v73;
  uint64_t v53 = v74;
  if (!v45)
  {
    uint64_t v54 = 0;
    uint64_t v55 = v72;
    if (v74) {
      goto LABEL_26;
    }
LABEL_28:
    uint64_t v56 = 0;
    goto LABEL_29;
  }
  uint64_t v54 = (void *)MEMORY[0x1B3EA1B00](v44, v45);
  swift_bridgeObjectRelease();
  uint64_t v55 = v72;
  if (!v53) {
    goto LABEL_28;
  }
LABEL_26:
  uint64_t v56 = (void *)MEMORY[0x1B3EA1B00](v52, v53);
  swift_bridgeObjectRelease();
LABEL_29:
  id v57 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADBB8]), sel_initWithConnectionRetryIntervalMillis_connectionMaxAttempts_rpcStreamRetryIntervalMillis_rpcStreamMaxAttempts_serverCertValidationEnabled_serverCertHostnameOverride_serverCertLeafMarkerOIDOverride_, v71, v70, v69, v68, (v67 == 2) | (v67 & 1), v54, v56);

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v76);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v79);
  objc_msgSend(v55, sel_setVirtualParticipantConfig_, v57);

  id v58 = objc_msgSend(v29, sel_unreliableMessengerEstablishChannelMaxAttempts);
  id v59 = objc_msgSend(v29, sel_unreliableMessengerEstablishChannelRetryIntervalMillis);
  id v60 = objc_msgSend(v29, sel_unreliableMessengerEgressMessagePayloadMaxSizeBytes);
  id v61 = objc_msgSend(v29, sel_unreliableMessengerChannelStreamMaxQueueSize);
  id v62 = objc_msgSend(v29, sel_unreliableMessengerChannelStreamMaxTries);
  id v63 = objc_msgSend(v29, sel_unreliableMessengerChannelStreamRetryIntervalMillis);
  id v64 = objc_msgSend(v29, sel_unreliableMessengerSeqNumBufferSize);
  id v65 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADBA8]), sel_initWithEstablishChannelMaxAttempts_establishChannelRetryIntervalMillis_egressMessagePayloadMaxSizeBytes_channelStreamMaxQueueSize_channelStreamMaxTries_channelStreamRetryIntervalMillis_seqNumBufferSize_, v58, v59, v60, v61, v62, v63, v64);
  objc_msgSend(v55, sel_setUnreliableMessengerConfig_, v65);

  return v55;
}

uint64_t BackgroundSession.service.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of UserNotificationCenter(v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_service, a1);
}

id BackgroundSession.queue.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_queue);
}

void key path setter for BackgroundSession.members : BackgroundSession(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  id v3 = (void *)(*a2 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_members);
  swift_beginAccess();
  *id v3 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  BackgroundSession.members.didset();
}

void BackgroundSession.members.didset()
{
  uint64_t v1 = v0;
  uint64_t v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_members);
  swift_beginAccess();
  uint64_t v3 = *v2;
  Class v4 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
  swift_bridgeObjectRetain();
  id v5 = objc_msgSend(v4, sel_bundleIdentifier);
  if (v5)
  {
    Class v6 = v5;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v7 = v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_reporter;
    swift_beginAccess();
    outlined init with copy of UserNotificationCenter(v7, (uint64_t)v20);
    uint64_t v8 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    uint64_t v9 = UUID.uuidString.getter();
    (*(void (**)(uint64_t))(v8 + 40))(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
  }
  uint64_t v10 = v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionProvider;
  swift_beginAccess();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v10, (uint64_t)v20, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
  if (v21)
  {
    outlined init with copy of UserNotificationCenter((uint64_t)v20, (uint64_t)v17);
    outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
    uint64_t v11 = v18;
    uint64_t v12 = v19;
    __swift_project_boxed_opaque_existential_1(v17, v18);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 88))(v3, v11, v12);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
  }
  else
  {
    outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
  }
  if (objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_featureFlags), sel_fastSyncPresenceSeparationEnabled))swift_bridgeObjectRelease(); {
  else
  }
    (*(void (**)(uint64_t))(**(void **)(v1
                                                  + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_presenceController)
                                    + 112))(v3);
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Log.service);
  Class v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl(&dword_1B0DF7000, v14, v15, "Successfully updated members", v16, 2u);
    MEMORY[0x1B3EA39E0](v16, -1, -1);
  }
}

uint64_t BackgroundSession.members.getter()
{
  return swift_bridgeObjectRetain();
}

void BackgroundSession.members.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_members);
  swift_beginAccess();
  *uint64_t v3 = a1;
  swift_bridgeObjectRelease();
  BackgroundSession.members.didset();
}

void (*BackgroundSession.members.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return BackgroundSession.members.modify;
}

void BackgroundSession.members.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    BackgroundSession.members.didset();
  }
}

uint64_t BackgroundSession.suspensionAssertions.getter()
{
  return ActivitySession.persistentSceneIdentifiers.getter();
}

uint64_t BackgroundSession.suspensionAssertions.setter(uint64_t a1)
{
  return DatagramChannelStream.sendQueue.setter(a1, &OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_suspensionAssertions);
}

uint64_t (*BackgroundSession.suspensionAssertions.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t key path setter for BackgroundSession.suspensionAssertions : BackgroundSession(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = *a1;
  Class v6 = (void *)(*a2 + *a5);
  swift_beginAccess();
  *Class v6 = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t BackgroundSession.cancellables.getter()
{
  return ActivitySession.persistentSceneIdentifiers.getter();
}

uint64_t BackgroundSession.cancellables.setter(uint64_t a1)
{
  return DatagramChannelStream.sendQueue.setter(a1, &OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_cancellables);
}

uint64_t (*BackgroundSession.cancellables.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

uint64_t BackgroundSession.localMember.getter()
{
  return swift_unknownObjectRetain();
}

void *BackgroundSession.maxAllowedDevices.unsafeMutableAddressor()
{
  return &static BackgroundSession.maxAllowedDevices;
}

uint64_t static BackgroundSession.maxAllowedDevices.getter()
{
  return 33;
}

uint64_t key path setter for BackgroundSession.sessionProvider : BackgroundSession(uint64_t a1, void *a2)
{
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v5, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
  uint64_t v3 = *a2 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionProvider;
  swift_beginAccess();
  outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v5, v3, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
  return swift_endAccess();
}

uint64_t BackgroundSession.sessionProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionProvider;
  swift_beginAccess();
  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3, a1, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
}

uint64_t BackgroundSession.sessionProvider.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionProvider;
  swift_beginAccess();
  outlined assign with take of ActivitySession.DomainAssertionWrapper?(a1, v3, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
  return swift_endAccess();
}

uint64_t (*BackgroundSession.sessionProvider.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

id BackgroundSession.applicationLauncher.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_applicationLauncher);
}

uint64_t BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v18 = swift_getObjectType();
  return specialized BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a11, a12, v12, ObjectType, v18, a10);
}

uint64_t closure #1 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 24) = a1;
  *(void *)(v4 + 32) = a4;
  return MEMORY[0x1F4188298](closure #1 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:), a4, 0);
}

uint64_t closure #1 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)()
{
  *(void *)(v0 + 40) = *(void *)(*(void *)(v0 + 32) + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession__state);
  swift_retain();
  return MEMORY[0x1F4188298](closure #1 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:), 0, 0);
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = (uint64_t *)v0[3];
  v0[2] = v0[5];
  swift_allocObject();
  swift_weakInit();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<BackgroundSession.State, Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<BackgroundSession.State, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<BackgroundSession.State, Never>);
  uint64_t v2 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  *uint64_t v1 = v2;
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

void closure #1 in closure #1 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)(void *a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *a1 >> 62;
  if (v6 == 2)
  {
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v13 = *(void *)(Strong + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_powerReporter);
      swift_retain();
      swift_release();
      Date.init()();
      Date.timeIntervalSince1970.getter();
      uint64_t v15 = v14;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      *((void *)&v45 + 1) = MEMORY[0x1E4FBB3D0];
      *(void *)&long long v44 = v15;
      uint64_t v16 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v13 + 128))(v43);
      specialized Dictionary.subscript.setter((uint64_t)&v44, 0x6D617473656D6974, 0xEC000000646E4570);
      v16(v43, 0);
      swift_release();
    }
    swift_beginAccess();
    uint64_t v17 = swift_weakLoadStrong();
    if (v17)
    {
      uint64_t v18 = *(void *)(v17 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_powerReporter);
      swift_retain();
      swift_release();
      swift_beginAccess();
      uint64_t v19 = swift_weakLoadStrong();
      if (v19
        && (id v20 = *(id *)(v19 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity),
            swift_release(),
            id v21 = objc_msgSend(v20, sel_bundleIdentifier),
            v20,
            v21))
      {
        uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v24 = v23;

        *((void *)&v45 + 1) = MEMORY[0x1E4FBB1A0];
        *(void *)&long long v44 = v22;
        *((void *)&v44 + 1) = v24;
      }
      else
      {
        long long v44 = 0u;
        long long v45 = 0u;
      }
      id v25 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v18 + 128))(v43);
      specialized Dictionary.subscript.setter((uint64_t)&v44, 0x4449656C646E7562, 0xE800000000000000);
      v25(v43, 0);
      swift_release();
    }
    swift_beginAccess();
    uint64_t v26 = swift_weakLoadStrong();
    if (v26)
    {
      uint64_t v27 = *(void *)(v26 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_powerReporter);
      swift_retain();
      swift_release();
      swift_beginAccess();
      uint64_t v28 = swift_weakLoadStrong();
      if (v28)
      {
        uint64_t v29 = *(void *)(v28 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_powerReporter);
        swift_retain();
        uint64_t v30 = swift_release();
        unint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 112))(v30);
        swift_release();
      }
      else
      {
        unint64_t v31 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
      }
      uint64_t v32 = (*(uint64_t (**)(unint64_t))(*(void *)v27 + 216))(v31);
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      uint64_t v32 = 0;
    }
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Log.default);
    swift_bridgeObjectRetain();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      uint64_t v42 = v37;
      *(_DWORD *)uint64_t v36 = 136315138;
      if (v32)
      {
        uint64_t v41 = v32;
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : Any]);
        uint64_t v38 = String.init<A>(reflecting:)();
        unint64_t v40 = v39;
      }
      else
      {
        unint64_t v40 = 0xE300000000000000;
        uint64_t v38 = 7104878;
      }
      uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v40, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v34, v35, "We have logged a powerlog event with payload %s", v36, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v37, -1, -1);
      MEMORY[0x1B3EA39E0](v36, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else if (!v6)
  {
    swift_beginAccess();
    uint64_t v7 = swift_weakLoadStrong();
    if (v7)
    {
      uint64_t v8 = *(void *)(v7 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_powerReporter);
      swift_retain();
      swift_release();
      Date.init()();
      Date.timeIntervalSince1970.getter();
      uint64_t v10 = v9;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      *((void *)&v45 + 1) = MEMORY[0x1E4FBB3D0];
      *(void *)&long long v44 = v10;
      uint64_t v11 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v8 + 128))(v43);
      specialized Dictionary.subscript.setter((uint64_t)&v44, 0x6D617473656D6974, 0xEE00747261745370);
      v11(v43, 0);
      swift_release();
    }
  }
}

void closure #2 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)()
{
  type metadata accessor for AnyCancellable();
  JUMPOUT(0x1B3EA1F30);
}

uint64_t closure #3 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[8] = a4;
  v5[9] = a5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<[PresentDevice], Never>>);
  v5[10] = v6;
  v5[11] = *(void *)(v6 - 8);
  v5[12] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<[PresentDevice], Never>>.Iterator);
  v5[13] = v7;
  v5[14] = *(void *)(v7 - 8);
  v5[15] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #3 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:), 0, 0);
}

uint64_t closure #3 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  *(void *)(v0 + 40) = (*(uint64_t (**)(void))(**(void **)(v0 + 64) + 152))();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CurrentValueSubject<[PresentDevice], Never>);
  uint64_t v5 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<[PresentDevice], Never> and conformance CurrentValueSubject<A, B>, (uint64_t *)&demangling cache variable for type metadata for CurrentValueSubject<[PresentDevice], Never>);
  MEMORY[0x1B3EA1110](v4, v5);
  swift_release();
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  swift_beginAccess();
  uint64_t v6 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<[PresentDevice], Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<[PresentDevice], Never>>.Iterator);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v7;
  *uint64_t v7 = v0;
  v7[1] = closure #3 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:);
  uint64_t v8 = *(void *)(v0 + 104);
  return MEMORY[0x1F4187C78](v0 + 48, v8, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #3 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:);
  }
  else {
    uint64_t v2 = closure #3 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;

  *(void *)(v0 + 144) = *(void *)(v0 + 48);
  return MEMORY[0x1F4188298](closure #3 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:), 0, 0);
}

{
  void *v0;
  uint64_t Strong;
  uint64_t (*v2)(void);
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;

  if (v0[18])
  {
    uint64_t Strong = swift_weakLoadStrong();
    v0[19] = Strong;
    if (Strong)
    {
      return MEMORY[0x1F4188298](closure #3 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:), Strong, 0);
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v3 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<[PresentDevice], Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<[PresentDevice], Never>>.Iterator);
      uint64_t v4 = (void *)swift_task_alloc();
      v0[16] = v4;
      *uint64_t v4 = v0;
      v4[1] = closure #3 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:);
      uint64_t v5 = v0[13];
      return MEMORY[0x1F4187C78](v0 + 6, v5, v3);
    }
  }
  else
  {
    (*(void (**)(void, void))(v0[14] + 8))(v0[15], v0[13]);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  *(void *)(v0 + 56) = *(void *)(v0 + 136);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v1 = MEMORY[0x1E4FBC248];
  uint64_t v2 = swift_dynamicCast();
  uint64_t v3 = MEMORY[0x1E4FBC278];
  return MEMORY[0x1F41868E8](v2, v1, v3);
}

{
  Swift::OpaquePointer *v0;
  uint64_t v1;
  void *v2;
  void *rawValue;
  uint64_t v5;

  BackgroundSession.handlePresentDevicesChanged(_:)(v0[18]);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v1 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<[PresentDevice], Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<[PresentDevice], Never>>.Iterator);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[16]._rawValue = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #3 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:);
  rawValue = v0[13]._rawValue;
  return MEMORY[0x1F4187C78](&v0[6], rawValue, v1);
}

void closure #4 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)()
{
}

Swift::Void __swiftcall BackgroundSession.handlePresentDevicesChanged(_:)(Swift::OpaquePointer a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Log.service);
  swift_bridgeObjectRetain_n();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    v21[0] = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [PresentDevice]);
    uint64_t v8 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v4, v5, "Presence updated present devices: %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v7, -1, -1);
    MEMORY[0x1B3EA39E0](v6, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  BackgroundSession.setupIDSGroupSessionIfNecessary()();
  uint64_t v10 = *(uint64_t (**)(uint64_t))(**(void **)(v2
                                                        + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_presenceController)
                                          + 128);
  uint64_t v12 = *(void *)(v10(v11) + 16);
  swift_bridgeObjectRelease();
  uint64_t v13 = v2 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_reporter;
  swift_beginAccess();
  outlined init with copy of UserNotificationCenter(v13, (uint64_t)v21);
  uint64_t v14 = v22;
  uint64_t v15 = v23;
  __swift_project_boxed_opaque_existential_1(v21, v22);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v14, v15);
  uint64_t v17 = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v21);
  if (v16 < v12)
  {
    uint64_t v18 = *(void *)(v10(v17) + 16);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v19 = *(void *)(v13 + 24);
    uint64_t v20 = *(void *)(v13 + 32);
    __swift_mutable_project_boxed_opaque_existential_1(v13, v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v18, v19, v20);
    swift_endAccess();
  }
}

uint64_t BackgroundSession.updateSuspensionController(_:)(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionSuspensionController;
  swift_beginAccess();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3, (uint64_t)v7, &demangling cache variable for type metadata for SessionSuspensionControllerProtocol?);
  uint64_t v4 = v8;
  uint64_t result = outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for SessionSuspensionControllerProtocol?);
  if (v4)
  {
    __break(1u);
  }
  else
  {
    outlined init with copy of UserNotificationCenter(a1, (uint64_t)v7);
    outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)v7, (uint64_t)v6, &demangling cache variable for type metadata for SessionSuspensionControllerProtocol?);
    swift_beginAccess();
    outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v6, v3, &demangling cache variable for type metadata for SessionSuspensionControllerProtocol?);
    return swift_endAccess();
  }
  return result;
}

uint64_t BackgroundSession.join()()
{
  *(void *)(v1 + 32) = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  *(void *)(v1 + 40) = swift_task_alloc();
  return MEMORY[0x1F4188298](BackgroundSession.join(), v0, 0);
}

{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v26;

  v0[6] = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession__state;
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  uint64_t v1 = v0[2];
  v0[7] = v1;
  if ((v1 >> 62) - 1 >= 2)
  {
    if (v1 >> 62)
    {
      outlined consume of BackgroundSession.State(v1);
      uint64_t v18 = v0[5];
      uint64_t v19 = v0[4];
      uint64_t v20 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v18, 1, 1, v20);
      id v21 = _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_3(&lazy protocol witness table cache variable for type BackgroundSession and conformance BackgroundSession, (void (*)(uint64_t))type metadata accessor for BackgroundSession);
      uint64_t v22 = (void *)swift_allocObject();
      void v22[2] = v19;
      _OWORD v22[3] = v21;
      v22[4] = v19;
      swift_retain_n();
      uint64_t v23 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v18, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundSession.join(), (uint64_t)v22);
      v0[12] = v23;
      v0[3] = v23;
      swift_retain();
      CurrentValueSubject.send(_:)();
      swift_release();
      BackgroundSession.state.didset();
      uint64_t v24 = (void *)swift_task_alloc();
      v0[13] = v24;
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      char *v24 = v0;
      v24[1] = BackgroundSession.join();
      unint64_t v9 = MEMORY[0x1E4FBC848] + 8;
      uint64_t v10 = MEMORY[0x1E4FBC0F0];
      uint64_t v11 = v23;
    }
    else
    {
      uint64_t v12 = one-time initialization token for service;
      swift_retain();
      if (v12 != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      __swift_project_value_buffer(v13, (uint64_t)static Log.service);
      uint64_t v14 = Logger.logObject.getter();
      uint64_t v15 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v16 = 0;
        _os_log_impl(&dword_1B0DF7000, v14, v15, "Join already in progress, awaiting completion of it.", v16, 2u);
        MEMORY[0x1B3EA39E0](v16, -1, -1);
      }

      uint64_t v17 = (void *)swift_task_alloc();
      v0[10] = v17;
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      *uint64_t v17 = v0;
      v17[1] = BackgroundSession.join();
      unint64_t v9 = MEMORY[0x1E4FBC848] + 8;
      uint64_t v10 = MEMORY[0x1E4FBC0F0];
      uint64_t v11 = v1;
    }
  }
  else
  {
    if (one-time initialization token for service != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Log.service);
    uint64_t v3 = Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v5 = 0;
      _os_log_impl(&dword_1B0DF7000, v3, v4, "We are going to wait for our current ending task to finish...", v5, 2u);
      MEMORY[0x1B3EA39E0](v5, -1, -1);
    }

    uint64_t v6 = v1 & 0x3FFFFFFFFFFFFFFFLL;
    uint64_t v7 = (void *)swift_task_alloc();
    v0[8] = v7;
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    *uint64_t v7 = v0;
    v7[1] = BackgroundSession.join();
    unint64_t v9 = MEMORY[0x1E4FBC848] + 8;
    uint64_t v10 = MEMORY[0x1E4FBC0F0];
    uint64_t v11 = v6;
  }
  return MEMORY[0x1F4187D90](v8, v11, v9, v8, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 56);
  *(void *)(*v1 + 72) = v0;
  swift_task_dealloc();
  outlined consume of BackgroundSession.State(v3);
  uint64_t v4 = *(void *)(v2 + 32);
  if (v0) {
    os_log_type_t v5 = BackgroundSession.join();
  }
  else {
    os_log_type_t v5 = BackgroundSession.join();
  }
  return MEMORY[0x1F4188298](v5, v4, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v1 = v0[5];
  uint64_t v2 = v0[4];
  uint64_t v3 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v1, 1, 1, v3);
  uint64_t v4 = _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_3(&lazy protocol witness table cache variable for type BackgroundSession and conformance BackgroundSession, (void (*)(uint64_t))type metadata accessor for BackgroundSession);
  os_log_type_t v5 = (void *)swift_allocObject();
  long long v5[2] = v2;
  v5[3] = v4;
  void v5[4] = v2;
  swift_retain_n();
  uint64_t v6 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v1, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundSession.join(), (uint64_t)v5);
  v0[12] = v6;
  v0[3] = v6;
  swift_retain();
  CurrentValueSubject.send(_:)();
  swift_release();
  BackgroundSession.state.didset();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[13] = v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *uint64_t v7 = v0;
  v7[1] = BackgroundSession.join();
  unint64_t v9 = MEMORY[0x1E4FBC848] + 8;
  uint64_t v10 = MEMORY[0x1E4FBC0F0];
  return MEMORY[0x1F4187D90](v8, v6, v9, v8, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 32);
  if (v0) {
    uint64_t v4 = BackgroundSession.join();
  }
  else {
    uint64_t v4 = BackgroundSession.join();
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 56);
  outlined consume of BackgroundSession.State(v1);
  outlined consume of BackgroundSession.State(v1);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 32);
  if (v0) {
    uint64_t v4 = BackgroundSession.join();
  }
  else {
    uint64_t v4 = BackgroundSession.join();
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 56);
  outlined consume of BackgroundSession.State(v1);
  outlined consume of BackgroundSession.State(v1);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in BackgroundSession.join()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return MEMORY[0x1F4188298](closure #1 in BackgroundSession.join(), a4, 0);
}

uint64_t closure #1 in BackgroundSession.join()()
{
  if (objc_msgSend(*(id *)(v0[2] + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_featureFlags), sel_fastSyncPresenceSeparationEnabled))
  {
    BackgroundSession.setupIDSGroupSession()();
    uint64_t v1 = (uint64_t (*)(void))v0[1];
    return v1();
  }
  else
  {
    _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_3(&lazy protocol witness table cache variable for type BackgroundSession and conformance BackgroundSession, (void (*)(uint64_t))type metadata accessor for BackgroundSession);
    uint64_t v3 = (void *)swift_task_alloc();
    v0[3] = v3;
    *uint64_t v3 = v0;
    v3[1] = closure #1 in BackgroundSession.join();
    return MEMORY[0x1F4188148]();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 32) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 16);
  if (v0) {
    uint64_t v4 = closure #1 in BackgroundSession.join();
  }
  else {
    uint64_t v4 = SKPresenceDataSource.releasePresence();
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in BackgroundSession.join()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v4;
  *uint64_t v4 = v2;
  v4[1] = closure #1 in closure #1 in BackgroundSession.join();
  v4[3] = a2;
  return MEMORY[0x1F4188298](BackgroundSession.assertPresence(), a2, 0);
}

uint64_t closure #1 in closure #1 in BackgroundSession.join()()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 16);
    return MEMORY[0x1F4188298](closure #1 in closure #1 in BackgroundSession.join(), v6, 0);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  BackgroundSession.setupIDSGroupSessionIfNecessary()();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void closure #2 in closure #1 in BackgroundSession.join()()
{
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Log.service);
  swift_retain_n();
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    uint64_t v3 = swift_slowAlloc();
    uint64_t v7 = v3;
    *(_DWORD *)uint64_t v2 = 136315138;
    type metadata accessor for BackgroundSession(0);
    swift_retain();
    uint64_t v4 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B0DF7000, oslog, v1, "Join request on %s was cancelled", v2, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v3, -1, -1);
    MEMORY[0x1B3EA39E0](v2, -1, -1);
  }
  else
  {
    swift_release_n();
  }
}

uint64_t BackgroundSession.assertPresence()()
{
  *(void *)(v1 + 24) = v0;
  return MEMORY[0x1F4188298](BackgroundSession.assertPresence(), v0, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  void *v11;
  uint64_t (*v13)(void);
  uint64_t v14;

  if (objc_msgSend(*(id *)(v0[3] + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_featureFlags), sel_fastSyncPresenceSeparationEnabled))
  {
    if (one-time initialization token for service != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Log.service);
    uint64_t v2 = Logger.logObject.getter();
    uint64_t v3 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_1B0DF7000, v2, v3, "Invalid function called when the fastSyncPresenceSeparationEnabled FF is enabled.", v4, 2u);
      MEMORY[0x1B3EA39E0](v4, -1, -1);
    }

    unint64_t v5 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    if (one-time initialization token for service != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    v0[4] = __swift_project_value_buffer(v6, (uint64_t)static Log.service);
    uint64_t v7 = Logger.logObject.getter();
    uint64_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      unint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v9 = 0;
      _os_log_impl(&dword_1B0DF7000, v7, v8, "Asserting presence", v9, 2u);
      MEMORY[0x1B3EA39E0](v9, -1, -1);
    }
    uint64_t v10 = v0[3];

    uint64_t v13 = (uint64_t (*)(void))(*(void *)(**(void **)(v10
                                                      + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_presenceController)
                                        + 192)
                            + **(int **)(**(void **)(v10
                                                     + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_presenceController)
                                       + 192));
    uint64_t v11 = (void *)swift_task_alloc();
    v0[5] = v11;
    *uint64_t v11 = v0;
    v11[1] = BackgroundSession.assertPresence();
    unint64_t v5 = v13;
  }
  return v5();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;
  uint64_t v7;

  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 24);
    return MEMORY[0x1F4188298](BackgroundSession.assertPresence(), v6, 0);
  }
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  *(void *)(v0 + 16) = 0xC000000000000008;
  swift_retain();
  CurrentValueSubject.send(_:)();
  swift_release();
  BackgroundSession.state.didset();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1B0DF7000, v1, v2, "Asserted presence", v3, 2u);
    MEMORY[0x1B3EA39E0](v3, -1, -1);
  }

  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t BackgroundSession.reset()()
{
  *(void *)(v1 + 184) = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  *(void *)(v1 + 192) = swift_task_alloc();
  return MEMORY[0x1F4188298](BackgroundSession.reset(), v0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v1 = v0[23] + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionProvider;
  swift_beginAccess();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, (uint64_t)(v0 + 2), &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
  if (v0[5])
  {
    outlined init with copy of UserNotificationCenter((uint64_t)(v0 + 2), (uint64_t)(v0 + 7));
    outlined destroy of UUID?((uint64_t)(v0 + 2), &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
    uint64_t v2 = v0[10];
    uint64_t v3 = v0[11];
    __swift_project_boxed_opaque_existential_1(v0 + 7, v2);
    (*(void (**)(uint64_t, uint64_t))(v3 + 80))(v2, v3);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 7));
  }
  else
  {
    outlined destroy of UUID?((uint64_t)(v0 + 2), &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
  }
  uint64_t v4 = (void **)(v0[23] + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_session);
  swift_beginAccess();
  unint64_t v5 = *v4;
  if (*v4)
  {
    *(void *)(swift_task_alloc() + 16) = v5;
    uint64_t v6 = v5;
    OS_dispatch_queue.sync<A>(execute:)();

    swift_task_dealloc();
  }
  uint64_t v7 = (void *)swift_task_alloc();
  v0[25] = v7;
  *uint64_t v7 = v0;
  v7[1] = BackgroundSession.reset();
  uint64_t v8 = v0[23];
  v7[4] = v8;
  return MEMORY[0x1F4188298](BackgroundSession.releasePresence(), v8, 0);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t closure #2 in BackgroundSession.reset()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  void v5[4] = a5;
  v5[5] = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_abcReporter;
  return MEMORY[0x1F4188298](closure #2 in BackgroundSession.reset(), a4, 0);
}

uint64_t closure #2 in BackgroundSession.reset()()
{
  v0[6] = *(void *)(v0[3] + v0[5]);
  return MEMORY[0x1F4188298](closure #2 in BackgroundSession.reset(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  Swift::String v4;
  id v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  __n128 v11;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t (*v17)(void);
  uint64_t (*v18)(uint64_t, __n128);
  uint64_t v19;

  uint64_t v1 = 0xD00000000000001DLL;
  uint64_t v2 = *(void **)(v0 + 32);
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 16) = v2;
  uint64_t v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v4._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  unint64_t v5 = objc_msgSend(self, sel_mainBundle);
  uint64_t v6 = objc_msgSend(v5, sel_bundleIdentifier);

  if (v6)
  {
    uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v8 = 0x80000001B115CEE0;
  }
  unint64_t v9 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, unint64_t, uint64_t, unint64_t))(**(void **)(v0 + 48) + 112))(0x206E6F6973736553, 0xED00007465736552, 0xD000000000000021, 0x80000001B1161E10, v1, v8);
  *(void *)(v0 + 56) = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v9)
  {
    uint64_t v18 = (uint64_t (*)(uint64_t, __n128))(*(void *)(**(void **)(v0 + 48) + 120)
                                                  + **(int **)(**(void **)(v0 + 48) + 120));
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 64) = v10;
    *uint64_t v10 = v0;
    v10[1] = closure #2 in BackgroundSession.reset();
    v11.n128_u64[0] = 0;
    return v18(v9, v11);
  }
  else
  {
    if (one-time initialization token for abcReporter != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Log.abcReporter);
    uint64_t v14 = Logger.logObject.getter();
    uint64_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_1B0DF7000, v14, v15, "Failed to generate signature for session reset failure", v16, 2u);
      MEMORY[0x1B3EA39E0](v16, -1, -1);
    }

    uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
    return v17();
  }
}

uint64_t BackgroundSession.leave(endState:)(uint64_t a1)
{
  v2[33] = a1;
  v2[34] = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v2[35] = swift_task_alloc();
  return MEMORY[0x1F4188298](BackgroundSession.leave(endState:), v1, 0);
}

uint64_t BackgroundSession.leave(endState:)()
{
  id v108 = v0;
  uint64_t v1 = v0;
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  unint64_t v2 = v0[33];
  uint64_t v3 = type metadata accessor for Logger();
  v0[36] = __swift_project_value_buffer(v3, (uint64_t)static Log.service);
  outlined copy of BackgroundSession.State(v2);
  outlined copy of BackgroundSession.State(v2);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  unint64_t v7 = v0[33];
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v106 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    v0[31] = v7;
    outlined copy of BackgroundSession.State(v7);
    uint64_t v10 = String.init<A>(reflecting:)();
    v0[32] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v106);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of BackgroundSession.State(v7);
    outlined consume of BackgroundSession.State(v7);
    _os_log_impl(&dword_1B0DF7000, v4, v5, "Received request to leave current session with an end-desired state of: %s", v8, 0xCu);
    swift_arrayDestroy();
    uint64_t v12 = v9;
    uint64_t v1 = v0;
    MEMORY[0x1B3EA39E0](v12, -1, -1);
    MEMORY[0x1B3EA39E0](v8, -1, -1);
  }
  else
  {
    outlined consume of BackgroundSession.State(v7);
    outlined consume of BackgroundSession.State(v7);
  }

  v1[37] = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession__state;
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  unint64_t v13 = v1[23];
  v1[38] = v13;
  if ((v13 >> 62) - 1 < 2)
  {
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_1B0DF7000, v14, v15, "We are going to wait for our current ending task to finish...", v16, 2u);
      MEMORY[0x1B3EA39E0](v16, -1, -1);
    }

    uint64_t v17 = (void *)swift_task_alloc();
    v1[39] = v17;
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    *uint64_t v17 = v1;
    v17[1] = BackgroundSession.leave(endState:);
    uint64_t v19 = MEMORY[0x1E4FBC848] + 8;
    uint64_t v20 = MEMORY[0x1E4FBC0F0];
    uint64_t v21 = v13 & 0x3FFFFFFFFFFFFFFFLL;
LABEL_35:
    return MEMORY[0x1F4187D90](v18, v21, v19, v18, v20);
  }
  if (!(v13 >> 62))
  {
    outlined copy of BackgroundSession.State(v13);
    outlined copy of BackgroundSession.State(v13);
    swift_retain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v106 = v25;
      *(_DWORD *)uint64_t v24 = 136315138;
      v1[29] = v13;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Task<(), Error>);
      uint64_t v26 = String.init<A>(reflecting:)();
      v1[30] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of BackgroundSession.State(v13);
      outlined consume of BackgroundSession.State(v13);
      _os_log_impl(&dword_1B0DF7000, v22, v23, "Currently in joining state. Cancelling join request. %s", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v25, -1, -1);
      MEMORY[0x1B3EA39E0](v24, -1, -1);
    }
    else
    {
      outlined consume of BackgroundSession.State(v13);
      outlined consume of BackgroundSession.State(v13);
    }

    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    MEMORY[0x1B3EA1F30](v13, MEMORY[0x1E4FBC848] + 8, v28, MEMORY[0x1E4FBC0F0]);
    outlined consume of BackgroundSession.State(v13);
  }
  outlined consume of BackgroundSession.State(v13);
  unint64_t v29 = v1[33];
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  unint64_t v30 = v1[22];
  LOBYTE(v29) = specialized static BackgroundSession.State.== infix(_:_:)(v30, v29);
  outlined consume of BackgroundSession.State(v30);
  if (v29)
  {
    unint64_t v31 = v1[33];
    outlined copy of BackgroundSession.State(v31);
    swift_retain();
    outlined copy of BackgroundSession.State(v31);
    swift_retain();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    BOOL v34 = os_log_type_enabled(v32, v33);
    unint64_t v35 = v1[33];
    uint64_t v36 = v1[34];
    if (v34)
    {
      uint64_t v94 = v1 + 27;
      id v97 = v1 + 28;
      uint64_t v37 = swift_slowAlloc();
      buf = (uint8_t *)swift_slowAlloc();
      uint64_t v105 = (uint64_t)buf;
      uint64_t v106 = 0;
      *(_DWORD *)uint64_t v37 = 136315394;
      unint64_t v107 = 0xE000000000000000;
      swift_retain();
      os_log_type_t type = v33;
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      uint64_t v106 = 0xD00000000000001DLL;
      unint64_t v107 = 0x80000001B1161CB0;
      id v38 = *(id *)(v36 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
      id v39 = objc_msgSend(v38, sel_description);
      unint64_t v40 = v1 + 26;
      uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v42 = v1;
      long long v44 = v43;

      v45._uint64_t countAndFlagsBits = v41;
      v45._object = v44;
      String.append(_:)(v45);
      swift_release();

      uint64_t v1 = v42;
      swift_bridgeObjectRelease();
      *unint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v106, v107, &v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v37 + 12) = 2080;
      *uint64_t v94 = v35;
      outlined copy of BackgroundSession.State(v35);
      uint64_t v46 = String.init<A>(reflecting:)();
      *id v97 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, &v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of BackgroundSession.State(v35);
      outlined consume of BackgroundSession.State(v35);
      _os_log_impl(&dword_1B0DF7000, v32, type, "Session %s is already in desired end-state: %s", (uint8_t *)v37, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](buf, -1, -1);
      MEMORY[0x1B3EA39E0](v37, -1, -1);
    }
    else
    {
      swift_release_n();
      outlined consume of BackgroundSession.State(v35);
      outlined consume of BackgroundSession.State(v35);
    }

    swift_task_dealloc();
    id v61 = (uint64_t (*)(void))v1[1];
  }
  else
  {
    swift_retain();
    CurrentValueSubject.value.getter();
    swift_release();
    unint64_t v48 = v1[21];
    outlined consume of BackgroundSession.State(v48);
    if (v48 != 0xC000000000000028)
    {
      uint64_t v63 = v1[34];
      uint64_t v62 = v1[35];
      unint64_t v64 = v1[33];
      uint64_t v65 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v62, 1, 1, v65);
      uint64_t v66 = _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_3(&lazy protocol witness table cache variable for type BackgroundSession and conformance BackgroundSession, (void (*)(uint64_t))type metadata accessor for BackgroundSession);
      int v67 = (void *)swift_allocObject();
      v67[2] = v63;
      v67[3] = v66;
      v67[4] = v63;
      v67[5] = v64;
      swift_retain();
      outlined copy of BackgroundSession.State(v64);
      swift_retain();
      uint64_t v68 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v62, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundSession.leave(endState:), (uint64_t)v67);
      uint64_t v69 = v68;
      v1[41] = v68;
      if (v64 == 0xC000000000000020)
      {
        v1[24] = v68 | 0x4000000000000000;
        swift_retain();
        CurrentValueSubject.send(_:)();
        swift_release();
        BackgroundSession.state.didset();
      }
      else
      {
        if ((objc_msgSend(*(id *)(v1[34] + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_featureFlags), sel_fastSyncPresenceSeparationEnabled) & 1) == 0)
        {
          id v72 = objc_msgSend(*(id *)(v1[34] + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity), sel_bundleIdentifier);
          if (v72)
          {
            uint64_t v73 = v72;
            uint64_t v74 = v1 + 2;
            unsigned int v75 = v1 + 7;
            uint64_t v76 = v1[34];
            uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            bufb = v78;
            uint64_t v104 = v77;

            uint64_t v79 = v76 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_reporter;
            swift_beginAccess();
            uint64_t v99 = (uint64_t)(v1 + 12);
            outlined init with copy of UserNotificationCenter(v79, (uint64_t)(v1 + 12));
            uint64_t typea = v1[15];
            uint64_t v93 = v1[16];
            __swift_project_boxed_opaque_existential_1(v1 + 12, typea);
            uint64_t v92 = UUID.uuidString.getter();
            uint64_t v81 = v80;
            outlined init with copy of UserNotificationCenter(v79, (uint64_t)(v1 + 7));
            uint64_t v82 = v1;
            uint64_t v83 = v1[10];
            uint64_t v84 = v1[11];
            __swift_project_boxed_opaque_existential_1(v75, v83);
            uint64_t v85 = *(uint64_t (**)(uint64_t, uint64_t))(v84 + 8);
            uint64_t v86 = v84;
            uint64_t v1 = v82;
            uint64_t v87 = v85(v83, v86);
            __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v75);
            outlined init with copy of UserNotificationCenter(v79, (uint64_t)v74);
            uint64_t v88 = v82[5];
            uint64_t v89 = v82[6];
            __swift_project_boxed_opaque_existential_1(v74, v88);
            uint64_t v90 = (*(uint64_t (**)(uint64_t, uint64_t))(v89 + 8))(v88, v89);
            __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v74);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint8_t *, uint64_t, BOOL, uint64_t))(v93 + 32))(v92, v81, v104, bufb, v87, v90 == 33, typea);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            __swift_destroy_boxed_opaque_existential_1Tm(v99);
          }
        }
        v1[20] = v69 | 0x8000000000000000;
        swift_retain();
        swift_retain();
        CurrentValueSubject.send(_:)();
        swift_release();
        BackgroundSession.state.didset();
        swift_release();
      }
      uint64_t v91 = (void *)swift_task_alloc();
      v1[42] = v91;
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      *uint64_t v91 = v1;
      v91[1] = BackgroundSession.leave(endState:);
      uint64_t v19 = MEMORY[0x1E4FBC848] + 8;
      uint64_t v20 = MEMORY[0x1E4FBC0F0];
      uint64_t v21 = v69;
      goto LABEL_35;
    }
    swift_retain_n();
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.error.getter();
    BOOL v51 = os_log_type_enabled(v49, v50);
    uint64_t v52 = v1[34];
    if (v51)
    {
      id v98 = v1 + 25;
      uint64_t v53 = (uint8_t *)swift_slowAlloc();
      uint64_t v103 = swift_slowAlloc();
      uint64_t v105 = v103;
      bufa = v53;
      *(_DWORD *)uint64_t v53 = 136315138;
      uint64_t v106 = 0;
      unint64_t v107 = 0xE000000000000000;
      swift_retain();
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      uint64_t v106 = 0xD00000000000001DLL;
      unint64_t v107 = 0x80000001B1161CB0;
      id v54 = *(id *)(v52 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
      id v55 = objc_msgSend(v54, sel_description);
      uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v57 = v1;
      id v59 = v58;

      v60._uint64_t countAndFlagsBits = v56;
      v60._object = v59;
      String.append(_:)(v60);
      swift_release();

      uint64_t v1 = v57;
      swift_bridgeObjectRelease();
      *id v98 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v106, v107, &v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v49, v50, "Session %s is in a fatal state and can't be transitioned out of it", bufa, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v103, -1, -1);
      MEMORY[0x1B3EA39E0](bufa, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    lazy protocol witness table accessor for type BackgroundSession.BackgroundSessionError and conformance BackgroundSession.BackgroundSessionError();
    swift_allocError();
    *id v70 = 2;
    swift_willThrow();
    swift_task_dealloc();
    id v61 = (uint64_t (*)(void))v1[1];
  }
  return v61();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  unint64_t v2 = *v1;
  *(void *)(*v1 + 320) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 304);
  uint64_t v4 = *(void *)(v2 + 272);
  outlined consume of BackgroundSession.State(v3);
  if (v0) {
    os_log_type_t v5 = BackgroundSession.leave(endState:);
  }
  else {
    os_log_type_t v5 = BackgroundSession.leave(endState:);
  }
  return MEMORY[0x1F4188298](v5, v4, 0);
}

{
  void *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  BOOL v22;
  uint64_t v23;
  uint8_t *v24;
  id v25;
  id v26;
  uint64_t v27;
  void *v28;
  void *v29;
  Swift::String v30;
  uint64_t (*v31)(void);
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned char *v39;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  os_log_type_t type;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;

  id v70 = v0;
  uint64_t v1 = v0[33];
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  unint64_t v2 = v0[22];
  LOBYTE(v1) = specialized static BackgroundSession.State.== infix(_:_:)(v2, v1);
  outlined consume of BackgroundSession.State(v2);
  if (v1)
  {
    uint64_t v3 = v0[33];
    outlined copy of BackgroundSession.State(v3);
    swift_retain();
    outlined copy of BackgroundSession.State(v3);
    swift_retain();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    BOOL v6 = os_log_type_enabled(v4, v5);
    unint64_t v7 = v0[33];
    uint64_t v8 = v0[34];
    if (v6)
    {
      uint64_t v9 = swift_slowAlloc();
      unint64_t v64 = swift_slowAlloc();
      int v67 = v64;
      *(_DWORD *)uint64_t v9 = 136315394;
      swift_retain();
      os_log_type_t type = v5;
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      uint64_t v68 = 0xD00000000000001DLL;
      uint64_t v69 = 0x80000001B1161CB0;
      uint64_t v10 = *(id *)(v8 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
      unint64_t v11 = objc_msgSend(v10, sel_description);
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v13;

      v15._uint64_t countAndFlagsBits = v12;
      v15._object = v14;
      String.append(_:)(v15);
      swift_release();

      swift_bridgeObjectRelease();
      v0[26] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001DLL, 0x80000001B1161CB0, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2080;
      v0[27] = v7;
      outlined copy of BackgroundSession.State(v7);
      uint64_t v16 = String.init<A>(reflecting:)();
      v0[28] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of BackgroundSession.State(v7);
      outlined consume of BackgroundSession.State(v7);
      _os_log_impl(&dword_1B0DF7000, v4, type, "Session %s is already in desired end-state: %s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v64, -1, -1);
      MEMORY[0x1B3EA39E0](v9, -1, -1);
    }
    else
    {
      swift_release_n();
      outlined consume of BackgroundSession.State(v7);
      outlined consume of BackgroundSession.State(v7);
    }

    swift_task_dealloc();
    unint64_t v31 = (uint64_t (*)(void))v0[1];
LABEL_13:
    return v31();
  }
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  uint64_t v18 = v0[21];
  outlined consume of BackgroundSession.State(v18);
  uint64_t v19 = v0[34];
  if (v18 == 0xC000000000000028)
  {
    swift_retain_n();
    uint64_t v20 = Logger.logObject.getter();
    uint64_t v21 = static os_log_type_t.error.getter();
    uint64_t v22 = os_log_type_enabled(v20, v21);
    os_log_type_t v23 = v0[34];
    if (v22)
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v65 = swift_slowAlloc();
      int v67 = v65;
      *(_DWORD *)uint64_t v24 = 136315138;
      swift_retain();
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      uint64_t v68 = 0xD00000000000001DLL;
      uint64_t v69 = 0x80000001B1161CB0;
      uint64_t v25 = *(id *)(v23 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
      uint64_t v26 = objc_msgSend(v25, sel_description);
      unint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v29 = v28;

      v30._uint64_t countAndFlagsBits = v27;
      v30._object = v29;
      String.append(_:)(v30);
      swift_release();

      swift_bridgeObjectRelease();
      v0[25] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001DLL, 0x80000001B1161CB0, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v20, v21, "Session %s is in a fatal state and can't be transitioned out of it", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v65, -1, -1);
      MEMORY[0x1B3EA39E0](v24, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    lazy protocol witness table accessor for type BackgroundSession.BackgroundSessionError and conformance BackgroundSession.BackgroundSessionError();
    swift_allocError();
    NSObject *v39 = 2;
    swift_willThrow();
    swift_task_dealloc();
    unint64_t v31 = (uint64_t (*)(void))v0[1];
    goto LABEL_13;
  }
  uint64_t v32 = v0[35];
  os_log_type_t v33 = v0[33];
  BOOL v34 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v32, 1, 1, v34);
  unint64_t v35 = _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_3(&lazy protocol witness table cache variable for type BackgroundSession and conformance BackgroundSession, (void (*)(uint64_t))type metadata accessor for BackgroundSession);
  uint64_t v36 = (void *)swift_allocObject();
  v36[2] = v19;
  uint64_t v36[3] = v35;
  v36[4] = v19;
  v36[5] = v33;
  swift_retain();
  outlined copy of BackgroundSession.State(v33);
  swift_retain();
  uint64_t v37 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v32, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundSession.leave(endState:), (uint64_t)v36);
  id v38 = v37;
  v0[41] = v37;
  if (v33 == 0xC000000000000020)
  {
    v0[24] = v37 | 0x4000000000000000;
    swift_retain();
    CurrentValueSubject.send(_:)();
    swift_release();
    BackgroundSession.state.didset();
  }
  else
  {
    if ((objc_msgSend(*(id *)(v0[34] + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_featureFlags), sel_fastSyncPresenceSeparationEnabled) & 1) == 0)
    {
      uint64_t v41 = objc_msgSend(*(id *)(v0[34] + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity), sel_bundleIdentifier);
      if (v41)
      {
        uint64_t v42 = v41;
        uint64_t v43 = v0[34];
        long long v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v63 = v45;
        uint64_t v66 = v44;

        uint64_t v46 = v43 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_reporter;
        swift_beginAccess();
        outlined init with copy of UserNotificationCenter(v46, (uint64_t)(v0 + 12));
        id v61 = v0[15];
        Swift::String v60 = v0[16];
        __swift_project_boxed_opaque_existential_1(v0 + 12, v61);
        id v59 = UUID.uuidString.getter();
        unint64_t v48 = v47;
        outlined init with copy of UserNotificationCenter(v46, (uint64_t)(v0 + 7));
        uint64_t v49 = v0[10];
        os_log_type_t v50 = v0[11];
        __swift_project_boxed_opaque_existential_1(v0 + 7, v49);
        BOOL v51 = (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 8))(v49, v50);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 7));
        outlined init with copy of UserNotificationCenter(v46, (uint64_t)(v0 + 2));
        uint64_t v52 = v0[5];
        uint64_t v53 = v0[6];
        __swift_project_boxed_opaque_existential_1(v0 + 2, v52);
        id v54 = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 8))(v52, v53);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, BOOL, uint64_t))(v60 + 32))(v59, v48, v66, v63, v51, v54 == 33, v61);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 12));
      }
    }
    v0[20] = v38 | 0x8000000000000000;
    swift_retain();
    swift_retain();
    CurrentValueSubject.send(_:)();
    swift_release();
    BackgroundSession.state.didset();
    swift_release();
  }
  id v55 = (void *)swift_task_alloc();
  v0[42] = v55;
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *id v55 = v0;
  v55[1] = BackgroundSession.leave(endState:);
  id v57 = MEMORY[0x1E4FBC848] + 8;
  id v58 = MEMORY[0x1E4FBC0F0];
  return MEMORY[0x1F4187D90](v56, v38, v57, v56, v58);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  unint64_t v2 = *v1;
  *(void *)(*v1 + 344) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 272);
  if (v0) {
    uint64_t v4 = BackgroundSession.leave(endState:);
  }
  else {
    uint64_t v4 = BackgroundSession.leave(endState:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in BackgroundSession.leave(endState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[4] = a4;
  v5[5] = a5;
  BOOL v6 = (void *)swift_task_alloc();
  v5[6] = v6;
  *BOOL v6 = v5;
  v6[1] = closure #1 in BackgroundSession.leave(endState:);
  return BackgroundSession.reset()();
}

uint64_t closure #1 in BackgroundSession.leave(endState:)()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 32);
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v3 = closure #1 in BackgroundSession.leave(endState:);
  }
  else {
    uint64_t v3 = closure #1 in BackgroundSession.leave(endState:);
  }
  return MEMORY[0x1F4188298](v3, v2, 0);
}

{
  void *v0;
  unint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = v0[5];
  v0[3] = v1;
  outlined copy of BackgroundSession.State(v1);
  swift_retain();
  CurrentValueSubject.send(_:)();
  swift_release();
  BackgroundSession.state.didset();
  outlined consume of BackgroundSession.State(v1);
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

{
  void *v0;
  unint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = v0[5];
  v0[2] = v1;
  outlined copy of BackgroundSession.State(v1);
  swift_retain();
  CurrentValueSubject.send(_:)();
  swift_release();
  BackgroundSession.state.didset();
  outlined consume of BackgroundSession.State(v1);
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t BackgroundSession.end()()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return BackgroundSession.leave(endState:)(0xC000000000000028);
}

Swift::Void __swiftcall BackgroundSession.setupIDSGroupSessionIfNecessary()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.service);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    v34[0] = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v37 = v1;
    type metadata accessor for BackgroundSession(0);
    swift_retain();
    uint64_t v7 = String.init<A>(reflecting:)();
    uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B0DF7000, v3, v4, "Evaluating if we need to setup the IDSGroupSession for %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v6, -1, -1);
    MEMORY[0x1B3EA39E0](v5, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  if (objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_featureFlags), sel_fastSyncPresenceSeparationEnabled))
  {
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v9, v10))
    {
      unint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v11 = 0;
      _os_log_impl(&dword_1B0DF7000, v9, v10, "Invalid function called when the fastSyncPresenceSeparationEnabled FF is enabled.", v11, 2u);
      MEMORY[0x1B3EA39E0](v11, -1, -1);
    }
    goto LABEL_29;
  }
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  if (v34[0] == 0xC000000000000008)
  {
    uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(v1
                                             + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_presenceController)
                               + 128))();
    uint64_t v13 = v12;
    if (*(void *)(v12 + 16) >= 0x21uLL) {
      uint64_t v14 = 33;
    }
    else {
      uint64_t v14 = *(void *)(v12 + 16);
    }
    if (v14)
    {
      swift_bridgeObjectRetain();
      uint64_t v15 = 0;
      while (1)
      {
        outlined init with copy of UserNotificationCenter(v13 + v15 + 32, (uint64_t)v34);
        uint64_t v16 = v35;
        uint64_t v17 = v36;
        __swift_project_boxed_opaque_existential_1(v34, v35);
        char v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 32))(v16, v17);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v34);
        if (v18) {
          break;
        }
        v15 += 40;
        if (40 * v14 == v15)
        {
LABEL_25:
          swift_bridgeObjectRelease();
          goto LABEL_26;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v25 = 0;
      while (1)
      {
        outlined init with copy of UserNotificationCenter(v13 + v25 + 32, (uint64_t)v34);
        uint64_t v26 = v35;
        uint64_t v27 = v36;
        __swift_project_boxed_opaque_existential_1(v34, v35);
        char v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 32))(v26, v27);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v34);
        if ((v28 & 1) == 0) {
          break;
        }
        v25 += 40;
        if (40 * v14 == v25) {
          goto LABEL_25;
        }
      }
      swift_bridgeObjectRelease();
      BackgroundSession.setupIDSGroupSession()();
    }
    else
    {
LABEL_26:
      swift_bridgeObjectRetain_n();
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v9, v29))
      {
        swift_bridgeObjectRelease_n();
LABEL_29:

        return;
      }
      unint64_t v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)unint64_t v30 = 136315138;
      uint64_t v37 = v31;
      v34[0] = v13;
      v34[1] = v13 + 32;
      uint64_t v34[2] = 0;
      uint64_t v35 = (2 * v14) | 1;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ArraySlice<PresentDevice>);
      uint64_t v32 = String.init<A>(reflecting:)();
      v34[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B0DF7000, v9, v29, "Not setting up IDSGroupSession since we only have 1 device currently %s", v30, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v31, -1, -1);
      MEMORY[0x1B3EA39E0](v30, -1, -1);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined consume of BackgroundSession.State(v34[0]);
    swift_retain_n();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      v34[0] = v22;
      *(_DWORD *)uint64_t v21 = 136315138;
      swift_retain();
      CurrentValueSubject.value.getter();
      swift_release();
      uint64_t v23 = String.init<A>(reflecting:)();
      uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B0DF7000, v19, v20, "Not setting up IDSGroupSession since our state is invalid %s", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v22, -1, -1);
      MEMORY[0x1B3EA39E0](v21, -1, -1);
    }
    else
    {
      swift_release_n();
    }
  }
}

Swift::Void __swiftcall BackgroundSession.setupIDSGroupSession()()
{
  uint64_t v1 = v0;
  uint64_t isEscapingClosureAtFileLocation = 0xC000000000000028;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_featureFlags), sel_fastSyncPresenceSeparationEnabled))
  {
    swift_retain();
    CurrentValueSubject.value.getter();
    swift_release();
    unint64_t v7 = v75[0];
    outlined consume of BackgroundSession.State(v75[0]);
    if (v7 >> 62) {
      goto LABEL_3;
    }
  }
  else
  {
    swift_retain();
    CurrentValueSubject.value.getter();
    swift_release();
    uint64_t v16 = v75[0];
    outlined consume of BackgroundSession.State(v75[0]);
    if (v16 != 0xC000000000000008)
    {
LABEL_3:
      if (one-time initialization token for service != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      __swift_project_value_buffer(v8, (uint64_t)static Log.service);
      swift_retain_n();
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v9, v10))
      {
        unint64_t v11 = (uint8_t *)swift_slowAlloc();
        uint64_t v12 = swift_slowAlloc();
        v75[0] = v12;
        *(_DWORD *)unint64_t v11 = 136315138;
        *(void *)&long long v85 = v1;
        type metadata accessor for BackgroundSession(0);
        swift_retain();
        uint64_t v13 = String.init<A>(reflecting:)();
        *(void *)&long long v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v75);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_1B0DF7000, v9, v10, "Failed to join, operation in progress %s", v11, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v12, -1, -1);
        uint64_t v15 = v11;
        uint64_t isEscapingClosureAtFileLocation = 0xC000000000000028;
        MEMORY[0x1B3EA39E0](v15, -1, -1);
LABEL_12:

        v75[0] = isEscapingClosureAtFileLocation;
        swift_retain();
        CurrentValueSubject.send(_:)();
        swift_release();
        BackgroundSession.state.didset();
        return;
      }
LABEL_11:
      swift_release_n();
      goto LABEL_12;
    }
  }
  uint64_t v17 = (void **)(v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_session);
  swift_beginAccess();
  char v18 = *v17;
  if (*v17)
  {
    id v72 = v17;
    uint64_t v19 = *(NSObject **)(v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_queue);
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = v18;
    uint64_t v9 = swift_allocObject();
    uint64_t v74 = partial apply for closure #1 in BackgroundSession.setupIDSGroupSession();
    v9[2].Class isa = (Class)partial apply for closure #1 in BackgroundSession.setupIDSGroupSession();
    v9[3].Class isa = (Class)v20;
    uint64_t v77 = (uint64_t)partial apply for thunk for @callee_guaranteed () -> ();
    uint64_t v78 = v9;
    v75[0] = MEMORY[0x1E4F143A8];
    v75[1] = 1107296256;
    void v75[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    uint64_t v76 = (objc_class *)&block_descriptor_29;
    uint64_t v21 = _Block_copy(v75);
    id v22 = v18;
    swift_retain();
    swift_release();
    dispatch_sync(v19, v21);

    _Block_release(v21);
    uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (isEscapingClosureAtFileLocation)
    {
      __break(1u);
      goto LABEL_11;
    }
    goto LABEL_17;
  }
  id v23 = *(id *)(v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
  Date.init()();
  id v24 = objc_allocWithZone(MEMORY[0x1E4FADB58]);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  Class v26 = Date._bridgeToObjectiveC()().super.isa;
  id v27 = objc_msgSend(v24, sel_initWithActivity_uuid_locallyInitiated_timestamp_isFirstJoin_, v23, isa, 1, v26, 1);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  id v28 = objc_msgSend(v27, sel_activity);
  id v29 = objc_msgSend(v28, sel_bundleIdentifier);

  if (v29)
  {

    uint64_t v30 = type metadata accessor for FastSyncActivitySession();
    swift_retain();
    id v31 = v27;
    uint64_t v32 = specialized ActivitySession.__allocating_init(activitySession:manager:)(v31, v1, v30);
    unint64_t v33 = *v17;
    id v72 = v17;
    *uint64_t v17 = v32;
    BOOL v34 = v32;

    uint64_t v35 = v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_delegate;
    swift_beginAccess();
    if (MEMORY[0x1B3EA3B30](v35))
    {
      uint64_t v36 = *(void *)(v35 + 8);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 8))(v1, ObjectType, v36);
      swift_unknownObjectRelease();
    }

    uint64_t v74 = 0;
LABEL_17:
    uint64_t v38 = v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionProvider;
    swift_beginAccess();
    uint64_t v73 = v38;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v38, (uint64_t)&v85, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
    if (v86)
    {
      outlined init with take of BackgroundSessionManagerDataSource(&v85, (uint64_t)v75);
    }
    else
    {
      uint64_t v39 = UUID.uuidString.getter();
      id v70 = v40;
      uint64_t v71 = v39;
      uint64_t v41 = (uint64_t *)(v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_members);
      swift_beginAccess();
      uint64_t v42 = *v41;
      uint64_t v43 = *(void *)(v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_localMember);
      uint64_t v44 = *(void *)(v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_localMember + 8);
      outlined init with copy of UserNotificationCenter(v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_service, (uint64_t)&v83);
      Swift::String v45 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_queue);
      uint64_t v46 = (objc_class *)type metadata accessor for IDSGroupSessionProvider();
      memset(v81, 0, sizeof(v81));
      uint64_t v82 = 0;
      id v47 = objc_allocWithZone(v46);
      swift_unknownObjectRetain();
      id v48 = v45;
      swift_bridgeObjectRetain();
      id v49 = specialized IDSGroupSessionProvider.init(groupID:members:localMember:service:targetQueue:abcReporter:)(v71, v70, v42, v43, v44, (uint64_t)&v83, v45, (uint64_t)v81);

      swift_unknownObjectRelease();
      uint64_t v76 = v46;
      uint64_t v77 = _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_3(&lazy protocol witness table cache variable for type IDSGroupSessionProvider and conformance IDSGroupSessionProvider, (void (*)(uint64_t))type metadata accessor for IDSGroupSessionProvider);
      v75[0] = (uint64_t)v49;
      outlined destroy of UUID?((uint64_t)&v85, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
    }
    os_log_type_t v50 = v76;
    uint64_t v51 = v77;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v75, (uint64_t)v76);
    uint64_t v52 = *(void (**)(uint64_t, _UNKNOWN **, objc_class *, uint64_t))(v51 + 24);
    uint64_t v53 = swift_unknownObjectRetain();
    v52(v53, &protocol witness table for BackgroundSession, v50, v51);
    id v54 = v76;
    uint64_t v55 = v77;
    __swift_project_boxed_opaque_existential_1(v75, (uint64_t)v76);
    (*(void (**)(objc_class *, uint64_t))(v55 + 72))(v54, v55);
    *(void *)&long long v85 = 0xC000000000000010;
    swift_retain();
    CurrentValueSubject.send(_:)();
    swift_release();
    BackgroundSession.state.didset();
    if (one-time initialization token for service != -1) {
      swift_once();
    }
    uint64_t v56 = type metadata accessor for Logger();
    __swift_project_value_buffer(v56, (uint64_t)static Log.service);
    id v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v57, v58))
    {
      id v59 = (uint8_t *)swift_slowAlloc();
      uint64_t v60 = swift_slowAlloc();
      uint64_t v80 = v60;
      *(_DWORD *)id v59 = 136315138;
      swift_beginAccess();
      outlined init with copy of UserNotificationCenter((uint64_t)v75, (uint64_t)&v85);
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v85, (uint64_t)&v83, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
      if (v84)
      {
        outlined init with take of BackgroundSessionManagerDataSource(&v83, (uint64_t)v81);
        outlined init with copy of UserNotificationCenter((uint64_t)v81, (uint64_t)&v79);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IDSGroupSessionProviderProtocol);
        uint64_t v61 = String.init<A>(reflecting:)();
        unint64_t v63 = v62;
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v81);
      }
      else
      {
        unint64_t v63 = 0xE300000000000000;
        uint64_t v61 = 7104878;
      }
      outlined destroy of UUID?((uint64_t)&v85, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
      *(void *)&long long v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v63, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v57, v58, "idsGroupSessionProvider %s", v59, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v60, -1, -1);
      MEMORY[0x1B3EA39E0](v59, -1, -1);
    }

    uint64_t v68 = v73;
    swift_beginAccess();
    outlined init with copy of UserNotificationCenter((uint64_t)v75, (uint64_t)&v85);
    outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)&v85, (uint64_t)&v83, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
    swift_beginAccess();
    outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)&v83, v68, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v75);
    _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v74);
    return;
  }
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v64 = type metadata accessor for Logger();
  __swift_project_value_buffer(v64, (uint64_t)static Log.service);
  uint64_t v65 = Logger.logObject.getter();
  os_log_type_t v66 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v65, v66))
  {
    int v67 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v67 = 0;
    _os_log_impl(&dword_1B0DF7000, v65, v66, "Failed to join, bundleIdentifier is nil", v67, 2u);
    MEMORY[0x1B3EA39E0](v67, -1, -1);
  }

  v75[0] = 0xC000000000000028;
  swift_retain();
  CurrentValueSubject.send(_:)();
  swift_release();
  BackgroundSession.state.didset();
}

uint64_t BackgroundSession.handleIDSSessionStateChange(_:sessionProvider:)(char a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.service);
  outlined init with copy of UserNotificationCenter(a2, (uint64_t)&aBlock);
  unint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v45 = v10;
    *(_DWORD *)uint64_t v9 = 136315394;
    outlined init with copy of UserNotificationCenter((uint64_t)&aBlock, (uint64_t)v44);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v44, (uint64_t)&v42, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
    if (v43)
    {
      outlined init with take of BackgroundSessionManagerDataSource(&v42, (uint64_t)v41);
      outlined init with copy of UserNotificationCenter((uint64_t)v41, (uint64_t)v40);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IDSGroupSessionProviderProtocol);
      uint64_t v11 = String.init<A>(reflecting:)();
      unint64_t v13 = v12;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v41);
    }
    else
    {
      unint64_t v13 = 0xE300000000000000;
      uint64_t v11 = 7104878;
    }
    outlined destroy of UUID?((uint64_t)v44, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
    v44[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&aBlock);
    *(_WORD *)(v9 + 12) = 2080;
    LOBYTE(v44[0]) = a1;
    uint64_t v14 = String.init<A>(reflecting:)();
    v44[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v7, v8, "BackgroundSessionManager didChangeState for %s state %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v10, -1, -1);
    MEMORY[0x1B3EA39E0](v9, -1, -1);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&aBlock);
  }
  switch(a1)
  {
    case 1:
      goto LABEL_13;
    case 3:
      id v48 = 0;
      long long aBlock = 0u;
      long long v47 = 0u;
      uint64_t v24 = v3 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionProvider;
      swift_beginAccess();
      outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)&aBlock, v24, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
      swift_endAccess();
      uint64_t v25 = (void **)(v3 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_session);
      swift_beginAccess();
      Class v26 = *v25;
      *uint64_t v25 = 0;

      uint64_t v27 = v3 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_delegate;
      swift_beginAccess();
      if (MEMORY[0x1B3EA3B30](v27))
      {
        uint64_t v28 = *(void *)(v27 + 8);
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 8))(v3, ObjectType, v28);
        swift_unknownObjectRelease();
      }
      swift_retain();
      CurrentValueSubject.value.getter();
      swift_release();
      uint64_t v30 = v42;
      outlined consume of BackgroundSession.State(v42);
      if (v30 != 0xC000000000000010)
      {
        swift_retain();
        CurrentValueSubject.value.getter();
        swift_release();
        uint64_t v31 = v42;
        uint64_t result = outlined consume of BackgroundSession.State(v42);
        if (v31 != 0xC000000000000018) {
          return result;
        }
      }
      swift_retain_n();
      unint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        uint64_t v36 = swift_slowAlloc();
        *(void *)&long long v42 = v36;
        *(_DWORD *)uint64_t v35 = 136315138;
        swift_retain();
        CurrentValueSubject.value.getter();
        swift_release();
        uint64_t v37 = String.init<A>(reflecting:)();
        v41[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, (uint64_t *)&v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_1B0DF7000, v33, v34, "Error joining IDS group session: operation failed during state: %s", v35, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v36, -1, -1);
        MEMORY[0x1B3EA39E0](v35, -1, -1);
      }
      else
      {
        swift_release_n();
      }

      *(void *)&long long v42 = 0xC000000000000028;
      swift_retain();
      goto LABEL_24;
    default:
      uint64_t v16 = (void **)(v3 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_session);
      swift_beginAccess();
      uint64_t v17 = *v16;
      if (!*v16)
      {
        uint64_t v21 = 0;
        goto LABEL_21;
      }
      char v18 = *(NSObject **)(v3 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_queue);
      uint64_t v19 = swift_allocObject();
      *(void *)(v19 + 16) = v17;
      *(void *)(v19 + 24) = v3;
      uint64_t v20 = swift_allocObject();
      uint64_t v21 = partial apply for closure #1 in BackgroundSession.handleIDSSessionStateChange(_:sessionProvider:);
      *(void *)(v20 + 16) = partial apply for closure #1 in BackgroundSession.handleIDSSessionStateChange(_:sessionProvider:);
      *(void *)(v20 + 24) = v19;
      id v48 = thunk for @callee_guaranteed () -> ()partial apply;
      uint64_t v49 = v20;
      *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
      *((void *)&aBlock + 1) = 1107296256;
      *(void *)&long long v47 = thunk for @escaping @callee_guaranteed () -> ();
      *((void *)&v47 + 1) = &block_descriptor_36;
      id v22 = _Block_copy(&aBlock);
      id v23 = v17;
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v18, v22);

      _Block_release(v22);
      LOBYTE(v18) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v18 & 1) == 0)
      {
LABEL_21:
        id v48 = 0;
        long long aBlock = 0u;
        long long v47 = 0u;
        uint64_t v39 = v3 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionProvider;
        swift_beginAccess();
        outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)&aBlock, v39, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
        swift_endAccess();
        return _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v21);
      }
      __break(1u);
LABEL_13:
      *(void *)&long long aBlock = 0xC000000000000018;
      swift_retain();
LABEL_24:
      CurrentValueSubject.send(_:)();
      swift_release();
      return BackgroundSession.state.didset();
  }
}

uint64_t closure #1 in BackgroundSession.handleIDSSessionStateChange(_:sessionProvider:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  return (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x3D8))(v3);
}

uint64_t closure #1 in closure #1 in BackgroundSession.handleIDSSessionStateChange(_:sessionProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  void v5[4] = a5;
  v5[5] = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_abcReporter;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in BackgroundSession.handleIDSSessionStateChange(_:sessionProvider:), a4, 0);
}

uint64_t closure #1 in closure #1 in BackgroundSession.handleIDSSessionStateChange(_:sessionProvider:)()
{
  v0[6] = *(void *)(v0[3] + v0[5]);
  return MEMORY[0x1F4188298](closure #1 in closure #1 in BackgroundSession.handleIDSSessionStateChange(_:sessionProvider:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  id v4;
  Swift::String v5;
  id v6;
  id v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  __n128 v12;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t (*v18)(void);
  uint64_t (*v19)(uint64_t, __n128);
  uint64_t v20;

  uint64_t v1 = 0xD00000000000001DLL;
  uint64_t v2 = *(void **)(v0 + 32);
  _StringGuts.grow(_:)(54);
  v3._uint64_t countAndFlagsBits = 0xD000000000000034;
  v3._object = (void *)0x80000001B1161DD0;
  String.append(_:)(v3);
  *(void *)(v0 + 16) = v2;
  uint64_t v4 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v5._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  uint64_t v6 = objc_msgSend(self, sel_mainBundle);
  unint64_t v7 = objc_msgSend(v6, sel_bundleIdentifier);

  if (v7)
  {
    uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v9 = 0x80000001B115CEE0;
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t, unint64_t, void, unint64_t, uint64_t, unint64_t))(**(void **)(v0 + 48) + 112))(0x206E6F6973736553, 0xEF70756E61656C43, 0, 0xE000000000000000, v1, v9);
  *(void *)(v0 + 56) = v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v10)
  {
    uint64_t v19 = (uint64_t (*)(uint64_t, __n128))(*(void *)(**(void **)(v0 + 48) + 120)
                                                  + **(int **)(**(void **)(v0 + 48) + 120));
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 64) = v11;
    *uint64_t v11 = v0;
    v11[1] = closure #1 in closure #1 in BackgroundSession.handleIDSSessionStateChange(_:sessionProvider:);
    v12.n128_u64[0] = 0;
    return v19(v10, v12);
  }
  else
  {
    if (one-time initialization token for abcReporter != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Log.abcReporter);
    unint64_t v15 = Logger.logObject.getter();
    uint64_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_1B0DF7000, v15, v16, "Failed to generate signature for session reset failure", v17, 2u);
      MEMORY[0x1B3EA39E0](v17, -1, -1);
    }

    char v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18();
  }
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void BackgroundSession.updateMembers(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.service);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  unint64_t v7 = &unk_1E9B74000;
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    v17[0] = v16;
    *(_DWORD *)uint64_t v8 = 136315394;
    swift_beginAccess();
    type metadata accessor for AddressableMember();
    _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_3(&lazy protocol witness table cache variable for type AddressableMember and conformance NSObject, (void (*)(uint64_t))type metadata accessor for AddressableMember);
    swift_bridgeObjectRetain();
    uint64_t v9 = Set.description.getter();
    unint64_t v11 = v10;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v12 = Set.description.getter();
    unint64_t v14 = v13;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, v17);
    unint64_t v7 = (void *)&unk_1E9B74000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v5, v6, "Updating members from %s to %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v16, -1, -1);
    MEMORY[0x1B3EA39E0](v8, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  unint64_t v15 = (void *)(v2 + v7[508]);
  swift_beginAccess();
  *unint64_t v15 = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  BackgroundSession.members.didset();
}

unint64_t BackgroundSession.description.getter()
{
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  id v1 = *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
  id v2 = objc_msgSend(v1, sel_description);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);

  swift_bridgeObjectRelease();
  return 0xD00000000000001DLL;
}

uint64_t static BackgroundSession.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)() & 1;
}

void BackgroundSession.hash(into:)()
{
  id v1 = *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
  NSObject.hash(into:)();
}

uint64_t BackgroundSession.releasePresence()()
{
  *(void *)(v1 + 32) = v0;
  return MEMORY[0x1F4188298](BackgroundSession.releasePresence(), v0, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  void *v2;
  uint64_t (*v4)(void);
  uint64_t v5;

  if (objc_msgSend(*(id *)(v0[4] + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_featureFlags), sel_fastSyncPresenceSeparationEnabled))
  {
    uint64_t v1 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    uint64_t v4 = (uint64_t (*)(void))(*(void *)(**(void **)(v0[4]
                                                     + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_presenceController)
                                       + 200)
                           + **(int **)(**(void **)(v0[4]
                                                    + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_presenceController)
                                      + 200));
    id v2 = (void *)swift_task_alloc();
    v0[5] = v2;
    *id v2 = v0;
    v2[1] = BackgroundSession.releasePresence();
    uint64_t v1 = v4;
  }
  return v1();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  id v2 = (void *)*v1;
  v2[6] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[4];
    return MEMORY[0x1F4188298](BackgroundSession.releasePresence(), v3, 0);
  }
  else
  {
    uint64_t v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v16;
  void *v17;
  uint64_t v18;

  uint64_t v17 = v0;
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[6];
  id v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.service);
  uint64_t v3 = v1;
  uint64_t v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  Swift::String v6 = static os_log_type_t.error.getter();
  unint64_t v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = (void *)v0[6];
  if (v7)
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    unint64_t v10 = swift_slowAlloc();
    uint64_t v16 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    v0[2] = v8;
    unint64_t v11 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v12 = String.init<A>(reflecting:)();
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v5, v6, "Error releasing presence: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v10, -1, -1);
    MEMORY[0x1B3EA39E0](v9, -1, -1);
  }
  else
  {
  }
  swift_willThrow();
  unint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t BackgroundSession.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_id;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_reporter);
  swift_release();
  swift_release();
  outlined destroy of weak ActivitySessionManagerProtocol?(v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_delegate);
  outlined destroy of UUID?(v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession____lazy_storage___protectedStorage, (uint64_t *)&demangling cache variable for type metadata for ProtectedStorage?);
  swift_release();

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_service);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  outlined destroy of UUID?(v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionProvider, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
  swift_unknownObjectRelease();
  swift_release();
  outlined destroy of UUID?(v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionSuspensionController, &demangling cache variable for type metadata for SessionSuspensionControllerProtocol?);

  swift_defaultActor_destroy();
  return v0;
}

uint64_t BackgroundSession.__deallocating_deinit()
{
  BackgroundSession.deinit();
  return MEMORY[0x1F4188210](v0);
}

Swift::Int BackgroundSession.hashValue.getter()
{
  Hasher.init(_seed:)();
  id v1 = *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t BackgroundSession.unownedExecutor.getter()
{
  return v0;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance BackgroundSession()
{
  return BackgroundSession.description.getter();
}

uint64_t protocol witness for Identifiable.id.getter in conformance BackgroundSession@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_id;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance BackgroundSession()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  id v2 = *(id *)(v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance BackgroundSession()
{
  id v1 = *(id *)(*v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
  NSObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance BackgroundSession()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  id v2 = *(id *)(v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t protocol witness for SessionSuspensionControllerTarget.acquireSuspensionAssertion() in conformance BackgroundSession()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for SessionSuspensionControllerTarget.acquireSuspensionAssertion() in conformance BackgroundSession;
  return BackgroundSession.acquireSuspensionAssertion()();
}

uint64_t protocol witness for SessionSuspensionControllerTarget.acquireSuspensionAssertion() in conformance BackgroundSession(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t BackgroundSession.acquireSuspensionAssertion()()
{
  v1[7] = v0;
  uint64_t v2 = type metadata accessor for UUID();
  v1[8] = v2;
  v1[9] = *(void *)(v2 - 8);
  v1[10] = swift_task_alloc();
  v1[11] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(0);
  v1[12] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v1[13] = v4;
  v1[14] = *(void *)(v4 + 64);
  v1[15] = swift_task_alloc();
  v1[16] = swift_task_alloc();
  return MEMORY[0x1F4188298](BackgroundSession.acquireSuspensionAssertion(), v0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v1 = v0[16];
  uint64_t v2 = v0[11];
  uint64_t v4 = v0[9];
  uint64_t v3 = (char *)v0[10];
  uint64_t v5 = v0[8];
  swift_retain();
  UUID.init()();
  swift_weakInit();
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v3, v1, v5);
  swift_beginAccess();
  specialized Set._Variant.insert(_:)(v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v5);
  swift_endAccess();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[17] = v6;
  *uint64_t v6 = v0;
  v6[1] = BackgroundSession.acquireSuspensionAssertion();
  unint64_t v7 = v0[7];
  v6[8] = v7;
  return MEMORY[0x1F4188298](BackgroundSession.suspend(), v7, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 144) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 56);
  if (v0) {
    uint64_t v4 = BackgroundSession.acquireSuspensionAssertion();
  }
  else {
    uint64_t v4 = BackgroundSession.acquireSuspensionAssertion();
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v9;

  uint64_t v1 = v0[15];
  uint64_t v2 = v0[16];
  uint64_t v3 = v0[13];
  outlined init with copy of Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(v2, v1);
  uint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = swift_allocObject();
  outlined init with take of Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(v1, v5 + v4);
  type metadata accessor for AnyCancellable();
  swift_allocObject();
  uint64_t v6 = AnyCancellable.init(_:)();
  outlined destroy of Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v7 = (uint64_t (*)(uint64_t))v0[1];
  return v7(v6);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v22;
  void *v23;
  uint64_t v24;

  id v23 = v0;
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[18];
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.service);
  uint64_t v3 = v1;
  uint64_t v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.error.getter();
  unint64_t v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = (void *)v0[18];
  if (v7)
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    unint64_t v10 = swift_slowAlloc();
    id v22 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    v0[5] = v8;
    unint64_t v11 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v12 = String.init<A>(reflecting:)();
    v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v5, v6, "Failed to suspend: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v10, -1, -1);
    MEMORY[0x1B3EA39E0](v9, -1, -1);
  }
  else
  {
  }
  unint64_t v14 = v0[15];
  unint64_t v15 = v0[16];
  uint64_t v16 = v0[13];
  outlined init with copy of Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(v15, v14);
  uint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  char v18 = swift_allocObject();
  outlined init with take of Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(v14, v18 + v17);
  type metadata accessor for AnyCancellable();
  swift_allocObject();
  uint64_t v19 = AnyCancellable.init(_:)();
  outlined destroy of Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(v15);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = (uint64_t (*)(uint64_t))v0[1];
  return v20(v19);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance BackgroundSession()
{
  return static NSObject.== infix(_:_:)() & 1;
}

uint64_t BackgroundSession.suspend()()
{
  *(void *)(v1 + 64) = v0;
  return MEMORY[0x1F4188298](BackgroundSession.suspend(), v0, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t (*v8)(void);
  unint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  unsigned char *v14;
  unint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void *v19;
  uint64_t v20;

  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[9] = __swift_project_value_buffer(v1, (uint64_t)static Log.service);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1B0DF7000, v2, v3, "Handling request to suspend", v4, 2u);
    MEMORY[0x1B3EA39E0](v4, -1, -1);
  }
  uint64_t v5 = v0[8];

  uint64_t v6 = v5 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_suspensionAssertions;
  swift_beginAccess();
  if (!*(void *)(*(void *)v6 + 16)) {
    goto LABEL_7;
  }
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  unint64_t v7 = v0[5];
  outlined consume of BackgroundSession.State(v7);
  if (v7 == 0xC000000000000020) {
    goto LABEL_7;
  }
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  unint64_t v10 = v0[6];
  outlined consume of BackgroundSession.State(v10);
  if (v10 == 0xC000000000000000)
  {
    unint64_t v11 = Logger.logObject.getter();
    uint64_t v12 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v11, v12))
    {
      unint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v13 = 0;
      _os_log_impl(&dword_1B0DF7000, v11, v12, "Can't suspend without idle session", v13, 2u);
      MEMORY[0x1B3EA39E0](v13, -1, -1);
    }

    lazy protocol witness table accessor for type BackgroundSession.BackgroundSessionError and conformance BackgroundSession.BackgroundSessionError();
    swift_allocError();
    *unint64_t v14 = 2;
    swift_willThrow();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    goto LABEL_8;
  }
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  unint64_t v15 = v0[7];
  outlined consume of BackgroundSession.State(v15);
  if (v15 >> 62 == 2)
  {
    uint64_t v16 = Logger.logObject.getter();
    uint64_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      char v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v18 = 0;
      _os_log_impl(&dword_1B0DF7000, v16, v17, "Tried to suspend while leaving. Throwing away suspension request", v18, 2u);
      MEMORY[0x1B3EA39E0](v18, -1, -1);
    }

LABEL_7:
    uint64_t v8 = (uint64_t (*)(void))v0[1];
LABEL_8:
    return v8();
  }
  uint64_t v19 = (void *)swift_task_alloc();
  v0[10] = v19;
  *uint64_t v19 = v0;
  v19[1] = BackgroundSession.suspend();
  return BackgroundSession.leave(endState:)(0xC000000000000020);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = (void *)*v1;
  v2[11] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[8];
    return MEMORY[0x1F4188298](BackgroundSession.suspend(), v3, 0);
  }
  else
  {
    uint64_t v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  BOOL v3;
  void *v4;
  uint8_t *v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  uint64_t v3 = os_log_type_enabled(v1, v2);
  uint64_t v4 = *(void **)(v0 + 88);
  if (v3)
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1B0DF7000, v1, v2, "Suspend's leave failed.", v5, 2u);
    MEMORY[0x1B3EA39E0](v5, -1, -1);
  }

  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t BackgroundSession.unsuspend()()
{
  *(void *)(v1 + 48) = v0;
  return MEMORY[0x1F4188298](BackgroundSession.unsuspend(), v0, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t (*v16)(void);
  uint64_t v17;
  void *v18;
  uint64_t v19;

  char v18 = v0;
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.service);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1B0DF7000, v2, v3, "Handling request to unsuspend", v4, 2u);
    MEMORY[0x1B3EA39E0](v4, -1, -1);
  }
  uint64_t v5 = v0[6];

  uint64_t v6 = v5 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_suspensionAssertions;
  swift_beginAccess();
  if (*(void *)(*(void *)v6 + 16))
  {
    swift_retain_n();
    unint64_t v7 = Logger.logObject.getter();
    uint64_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      unint64_t v10 = swift_slowAlloc();
      uint64_t v17 = v10;
      *(_DWORD *)uint64_t v9 = 136315138;
      type metadata accessor for UUID();
      _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      swift_bridgeObjectRetain();
      unint64_t v11 = Set.description.getter();
      unint64_t v13 = v12;
      swift_bridgeObjectRelease();
      v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B0DF7000, v7, v8, "Not unsuspending due to active suspension assertions: %s", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v10, -1, -1);
      MEMORY[0x1B3EA39E0](v9, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    uint64_t v16 = (uint64_t (*)(void))v0[1];
    return v16();
  }
  else
  {
    unint64_t v14 = (void *)swift_task_alloc();
    v0[7] = v14;
    *unint64_t v14 = v0;
    v14[1] = BackgroundSession.unsuspend();
    return BackgroundSession.join()();
  }
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t BackgroundSession.releaseSuspensionAssertion(_:)(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v2[9] = swift_task_alloc();
  return MEMORY[0x1F4188298](BackgroundSession.releaseSuspensionAssertion(_:), v1, 0);
}

uint64_t BackgroundSession.releaseSuspensionAssertion(_:)()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[7];
  swift_beginAccess();
  specialized Set._Variant.remove(_:)(v2, v1);
  outlined destroy of UUID?(v1, &demangling cache variable for type metadata for UUID?);
  swift_endAccess();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[10] = v3;
  *uint64_t v3 = v0;
  v3[1] = BackgroundSession.releaseSuspensionAssertion(_:);
  uint64_t v4 = v0[8];
  v3[6] = v4;
  return MEMORY[0x1F4188298](BackgroundSession.unsuspend(), v4, 0);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = (void *)*v1;
  v2[11] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[8];
    return MEMORY[0x1F4188298](BackgroundSession.releaseSuspensionAssertion(_:), v3, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v16;
  void *v17;
  uint64_t v18;

  uint64_t v17 = v0;
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[11];
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.service);
  uint64_t v3 = v1;
  uint64_t v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.error.getter();
  unint64_t v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = (void *)v0[11];
  if (v7)
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    unint64_t v10 = swift_slowAlloc();
    uint64_t v16 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    v0[5] = v8;
    unint64_t v11 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v12 = String.init<A>(reflecting:)();
    v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v5, v6, "Failed to unsuspend: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v10, -1, -1);
    MEMORY[0x1B3EA39E0](v9, -1, -1);
  }
  else
  {
  }
  swift_task_dealloc();
  unint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t closure #1 in BackgroundSession.acquireSuspensionAssertion()(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v5 - 8);
  unint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  outlined init with copy of Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(a1, (uint64_t)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v9 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = 0;
  *(void *)(v10 + 24) = 0;
  outlined init with take of Assertion #1 in BackgroundSession.acquireSuspensionAssertion()((uint64_t)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v10 + v9);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in BackgroundSession.acquireSuspensionAssertion(), v10);
  return swift_release();
}

uint64_t closure #1 in closure #1 in BackgroundSession.acquireSuspensionAssertion()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a4;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in BackgroundSession.acquireSuspensionAssertion(), 0, 0);
}

uint64_t closure #1 in closure #1 in BackgroundSession.acquireSuspensionAssertion()()
{
  type metadata accessor for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(0);
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v0 + 32) = Strong;
  if (Strong)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 40) = v2;
    *uint64_t v2 = v0;
    v2[1] = closure #1 in closure #1 in BackgroundSession.acquireSuspensionAssertion();
    uint64_t v3 = *(void *)(v0 + 24);
    return BackgroundSession.releaseSuspensionAssertion(_:)(v3);
  }
  else
  {
    **(unsigned char **)(v0 + 16) = 1;
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in BackgroundSession.acquireSuspensionAssertion(), 0, 0);
}

{
  uint64_t v0;

  **(unsigned char **)(v0 + 16) = *(void *)(v0 + 32) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t BackgroundSession.didChangePlugins(sessionProvider:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  unint64_t v7 = (void *)swift_allocObject();
  long long v7[2] = 0;
  void v7[3] = 0;
  v7[4] = v1;
  int v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  swift_retain();
  if (v8 == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    if (v7[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v10 = v11;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
    }
  }
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = &async function pointer to partial apply for closure #1 in BackgroundSession.didChangePlugins(sessionProvider:);
  *(void *)(v12 + 24) = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ()?);
  if (v10 | v9)
  {
    v14[0] = 0;
    v14[1] = 0;
    v14[2] = v9;
    void v14[3] = v10;
  }
  swift_task_create();
  return swift_release();
}

uint64_t closure #1 in BackgroundSession.didChangePlugins(sessionProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 40) = a1;
  *(void *)(v4 + 48) = a4;
  return MEMORY[0x1F4188298](closure #1 in BackgroundSession.didChangePlugins(sessionProvider:), a4, 0);
}

uint64_t closure #1 in BackgroundSession.didChangePlugins(sessionProvider:)()
{
  uint64_t v1 = v0[6] + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_delegate;
  swift_beginAccess();
  v0[7] = MEMORY[0x1B3EA3B30](v1);
  v0[8] = *(void *)(v1 + 8);
  return MEMORY[0x1F4188298](closure #1 in BackgroundSession.didChangePlugins(sessionProvider:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = *(void *)(v0 + 56);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 64);
    uint64_t v3 = *(void *)(v0 + 48);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 8))(v3, ObjectType, v2);
    swift_unknownObjectRelease();
  }
  **(unsigned char **)(v0 + 40) = v1 == 0;
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t BackgroundSession.didChangeState(sessionProvider:state:)(uint64_t a1, char a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v5 - 8);
  unint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  outlined init with copy of UserNotificationCenter(a1, (uint64_t)v12);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = 0;
  *(void *)(v9 + 24) = 0;
  *(void *)(v9 + 32) = v2;
  *(unsigned char *)(v9 + 40) = a2;
  outlined init with take of BackgroundSessionManagerDataSource(v12, v9 + 48);
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundSession.didChangeState(sessionProvider:state:), v9);
  return swift_release();
}

uint64_t closure #1 in BackgroundSession.didChangeState(sessionProvider:state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  *(unsigned char *)(v6 + 32) = a5;
  *(void *)(v6 + 16) = a4;
  *(void *)(v6 + 24) = a6;
  return MEMORY[0x1F4188298](closure #1 in BackgroundSession.didChangeState(sessionProvider:state:), a4, 0);
}

uint64_t closure #1 in BackgroundSession.didChangeState(sessionProvider:state:)()
{
  BackgroundSession.handleIDSSessionStateChange(_:sessionProvider:)(*(unsigned char *)(v0 + 32), *(void *)(v0 + 24));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t BackgroundSession.didReceiveKeyUpdate(sessionProvider:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  unint64_t v7 = (void *)swift_allocObject();
  long long v7[2] = 0;
  void v7[3] = 0;
  v7[4] = v1;
  int v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  swift_retain();
  if (v8 == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    if (v7[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v10 = v11;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
    }
  }
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = &async function pointer to partial apply for closure #1 in BackgroundSession.didReceiveKeyUpdate(sessionProvider:);
  *(void *)(v12 + 24) = v7;
  if (v10 | v9)
  {
    v14[0] = 0;
    v14[1] = 0;
    v14[2] = v9;
    void v14[3] = v10;
  }
  swift_task_create();
  return swift_release();
}

uint64_t closure #1 in BackgroundSession.didReceiveKeyUpdate(sessionProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[12] = a4;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  v4[13] = v6;
  v4[14] = *(void *)(v6 - 8);
  v4[15] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DispatchQoS();
  v4[16] = v7;
  v4[17] = *(void *)(v7 - 8);
  v4[18] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in BackgroundSession.didReceiveKeyUpdate(sessionProvider:), a4, 0);
}

uint64_t closure #1 in BackgroundSession.didReceiveKeyUpdate(sessionProvider:)()
{
  uint64_t v1 = (void **)(*(void *)(v0 + 96) + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_session);
  swift_beginAccess();
  uint64_t v2 = *v1;
  *(void *)(v0 + 152) = *v1;
  id v3 = v2;
  return MEMORY[0x1F4188298](closure #1 in BackgroundSession.didReceiveKeyUpdate(sessionProvider:), 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t (*v12)(void);
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  uint64_t v1 = (void *)v0[19];
  if (v1)
  {
    uint64_t v2 = v0[18];
    id v3 = v0[15];
    unint64_t v15 = v0[17];
    uint64_t v16 = v0[16];
    uint64_t v4 = v0[13];
    uint64_t v5 = v0[14];
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v1;
    v0[6] = partial apply for closure #1 in closure #1 in BackgroundSession.didReceiveKeyUpdate(sessionProvider:);
    v0[7] = v6;
    v0[2] = MEMORY[0x1E4F143A8];
    v0[3] = 1107296256;
    v0[4] = thunk for @escaping @callee_guaranteed () -> ();
    v0[5] = &block_descriptor_170;
    uint64_t v7 = _Block_copy(v0 + 2);
    unint64_t v14 = v1;
    static DispatchQoS.unspecified.getter();
    v0[11] = MEMORY[0x1E4FBC860];
    _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1B3EA2200](0, v2, v3, v7);
    _Block_release(v7);

    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v2, v16);
    swift_release();
  }
  else
  {
    if (one-time initialization token for service != -1) {
      swift_once();
    }
    int v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Log.service);
    uint64_t v9 = Logger.logObject.getter();
    uint64_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_1B0DF7000, v9, v10, "Doesn't have a session to refresh the dataCryptor of", v11, 2u);
      MEMORY[0x1B3EA39E0](v11, -1, -1);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t BackgroundSession.didRejectKeyRecoveryRequest(sessionProvider:from:reason:)(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  int v8 = (void *)swift_allocObject();
  void v8[2] = 0;
  v8[3] = 0;
  v8[4] = v2;
  v8[5] = a2;
  swift_retain();
  id v9 = a2;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundSession.didRejectKeyRecoveryRequest(sessionProvider:from:reason:), (uint64_t)v8);
  return swift_release();
}

uint64_t closure #1 in BackgroundSession.didRejectKeyRecoveryRequest(sessionProvider:from:reason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[7] = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_featureFlags;
  return MEMORY[0x1F4188298](closure #1 in BackgroundSession.didRejectKeyRecoveryRequest(sessionProvider:from:reason:), a4, 0);
}

uint64_t closure #1 in BackgroundSession.didRejectKeyRecoveryRequest(sessionProvider:from:reason:)()
{
  v0[8] = *(void *)(v0[5] + v0[7]);
  return MEMORY[0x1F4188298](closure #1 in BackgroundSession.didRejectKeyRecoveryRequest(sessionProvider:from:reason:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  if (objc_msgSend(*(id *)(v0 + 64), sel_fastSyncRecoveryMessageHandlingEnabled))
  {
    uint64_t v1 = *(void *)(v0 + 40);
    *(void *)(v0 + 72) = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_serverBag;
    return MEMORY[0x1F4188298](closure #1 in BackgroundSession.didRejectKeyRecoveryRequest(sessionProvider:from:reason:), v1, 0);
  }
  else
  {
    if (one-time initialization token for service != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Log.service);
    id v3 = Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_1B0DF7000, v3, v4, "Not handling key recovery request rejection due to FeatureFlag being disabled.", v5, 2u);
      MEMORY[0x1B3EA39E0](v5, -1, -1);
    }

    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
}

{
  void *v0;

  v0[10] = *(void *)(v0[5] + v0[9]);
  return MEMORY[0x1F4188298](closure #1 in BackgroundSession.didRejectKeyRecoveryRequest(sessionProvider:from:reason:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  if (objc_msgSend(*(id *)(v0 + 80), sel_fastSyncRecoveryMessageHandlingEnabled))
  {
    uint64_t v1 = *(void *)(v0 + 40);
    return MEMORY[0x1F4188298](closure #1 in BackgroundSession.didRejectKeyRecoveryRequest(sessionProvider:from:reason:), v1, 0);
  }
  else
  {
    if (one-time initialization token for service != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Log.service);
    id v3 = Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_1B0DF7000, v3, v4, "Not handling key recovery request rejection due to server bag disablement.", v5, 2u);
      MEMORY[0x1B3EA39E0](v5, -1, -1);
    }

    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = v0[5] + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_delegate;
  swift_beginAccess();
  v0[11] = MEMORY[0x1B3EA3B30](v1);
  v0[12] = *(void *)(v1 + 8);
  return MEMORY[0x1F4188298](closure #1 in BackgroundSession.didRejectKeyRecoveryRequest(sessionProvider:from:reason:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t (*v5)(void);
  uint64_t v7;

  if (v0[11])
  {
    uint64_t v1 = v0[12];
    id v3 = v0[5];
    uint64_t v2 = v0[6];
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 24))(v3, v2, ObjectType, v1);
    swift_unknownObjectRelease();
  }
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t BackgroundSession.didReceiveUpdatedUnknownParticipantList(sessionProvider:unknownParticipants:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  int v8 = (void *)swift_allocObject();
  void v8[2] = 0;
  v8[3] = 0;
  v8[4] = v2;
  v8[5] = a2;
  swift_retain();
  swift_bridgeObjectRetain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundSession.didReceiveUpdatedUnknownParticipantList(sessionProvider:unknownParticipants:), (uint64_t)v8);
  return swift_release();
}

uint64_t closure #1 in BackgroundSession.didReceiveUpdatedUnknownParticipantList(sessionProvider:unknownParticipants:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[7] = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_featureFlags;
  return MEMORY[0x1F4188298](closure #1 in BackgroundSession.didReceiveUpdatedUnknownParticipantList(sessionProvider:unknownParticipants:), a4, 0);
}

uint64_t closure #1 in BackgroundSession.didReceiveUpdatedUnknownParticipantList(sessionProvider:unknownParticipants:)()
{
  v0[8] = *(void *)(v0[5] + v0[7]);
  return MEMORY[0x1F4188298](closure #1 in BackgroundSession.didReceiveUpdatedUnknownParticipantList(sessionProvider:unknownParticipants:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  if (objc_msgSend(*(id *)(v0 + 64), sel_fastSyncRecoveryMessageHandlingEnabled))
  {
    uint64_t v1 = *(void *)(v0 + 40);
    *(void *)(v0 + 72) = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_serverBag;
    return MEMORY[0x1F4188298](closure #1 in BackgroundSession.didReceiveUpdatedUnknownParticipantList(sessionProvider:unknownParticipants:), v1, 0);
  }
  else
  {
    if (one-time initialization token for service != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Log.service);
    id v3 = Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_1B0DF7000, v3, v4, "Not handling an updated unknown participant list due to FeatureFlag being disabled.", v5, 2u);
      MEMORY[0x1B3EA39E0](v5, -1, -1);
    }

    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
}

{
  void *v0;

  v0[10] = *(void *)(v0[5] + v0[9]);
  return MEMORY[0x1F4188298](closure #1 in BackgroundSession.didReceiveUpdatedUnknownParticipantList(sessionProvider:unknownParticipants:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  if (objc_msgSend(*(id *)(v0 + 80), sel_fastSyncRecoveryMessageHandlingEnabled))
  {
    uint64_t v1 = *(void *)(v0 + 40);
    return MEMORY[0x1F4188298](closure #1 in BackgroundSession.didReceiveUpdatedUnknownParticipantList(sessionProvider:unknownParticipants:), v1, 0);
  }
  else
  {
    if (one-time initialization token for service != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Log.service);
    id v3 = Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_1B0DF7000, v3, v4, "Not handling an updated unknown participant list due to server bag disablement.", v5, 2u);
      MEMORY[0x1B3EA39E0](v5, -1, -1);
    }

    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = v0[5] + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_delegate;
  swift_beginAccess();
  v0[11] = MEMORY[0x1B3EA3B30](v1);
  v0[12] = *(void *)(v1 + 8);
  return MEMORY[0x1F4188298](closure #1 in BackgroundSession.didReceiveUpdatedUnknownParticipantList(sessionProvider:unknownParticipants:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t (*v5)(void);
  uint64_t v7;

  if (v0[11])
  {
    uint64_t v1 = v0[12];
    id v3 = v0[5];
    uint64_t v2 = v0[6];
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 32))(v3, v2, ObjectType, v1);
    swift_unknownObjectRelease();
  }
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t protocol witness for IDSGroupSessionProviderDelegate.didChangeState(sessionProvider:state:) in conformance BackgroundSession(uint64_t a1, char a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  outlined init with copy of UserNotificationCenter(a1, (uint64_t)v12);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = 0;
  *(void *)(v9 + 24) = 0;
  *(void *)(v9 + 32) = v2;
  *(unsigned char *)(v9 + 40) = a2;
  outlined init with take of BackgroundSessionManagerDataSource(v12, v9 + 48);
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&closure #1 in BackgroundSession.didChangeState(sessionProvider:state:)partial apply, v9);
  return swift_release();
}

uint64_t protocol witness for IDSGroupSessionProviderDelegate.didRejectKeyRecoveryRequest(sessionProvider:from:reason:) in conformance BackgroundSession(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = (void *)swift_allocObject();
  void v8[2] = 0;
  v8[3] = 0;
  v8[4] = v2;
  v8[5] = a2;
  swift_retain();
  id v9 = a2;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)&closure #1 in BackgroundSession.didRejectKeyRecoveryRequest(sessionProvider:from:reason:)partial apply, (uint64_t)v8);
  return swift_release();
}

uint64_t protocol witness for IDSGroupSessionProviderDelegate.didReceiveUpdatedUnknownParticipantList(sessionProvider:unknownParticipants:) in conformance BackgroundSession(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = (void *)swift_allocObject();
  void v8[2] = 0;
  v8[3] = 0;
  v8[4] = v2;
  v8[5] = a2;
  swift_retain();
  swift_bridgeObjectRetain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)&closure #1 in BackgroundSession.didReceiveUpdatedUnknownParticipantList(sessionProvider:unknownParticipants:)partial apply, (uint64_t)v8);
  return swift_release();
}

uint64_t BackgroundSession.localParticipant(with:for:)()
{
  return 0;
}

uint64_t BackgroundSession.activeRemoteParticipant(with:for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v12 - 8);
  unint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  uint64_t v16 = (void *)swift_allocObject();
  long long v16[2] = 0;
  uint64_t v16[3] = 0;
  v16[4] = v6;
  v16[5] = a1;
  void v16[6] = a2;
  v16[7] = a3;
  v16[8] = a4;
  v16[9] = a5;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundSession.activeRemoteParticipant(with:for:completion:), (uint64_t)v16);
  return swift_release();
}

uint64_t closure #1 in BackgroundSession.activeRemoteParticipant(with:for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[21] = a8;
  v8[22] = v11;
  v8[19] = a6;
  v8[20] = a7;
  v8[17] = a4;
  v8[18] = a5;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v8[23] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in BackgroundSession.activeRemoteParticipant(with:for:completion:), 0, 0);
}

uint64_t closure #1 in BackgroundSession.activeRemoteParticipant(with:for:completion:)()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[18];
  uint64_t v4 = type metadata accessor for TaskPriority();
  v0[24] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v0[25] = v6;
  v0[26] = (v5 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v6(v1, 1, 1, v4);
  uint64_t v7 = (void *)swift_allocObject();
  long long v7[2] = 0;
  void v7[3] = 0;
  v7[4] = v2;
  void v7[5] = v3;
  swift_retain();
  uint64_t v8 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14CopresenceCore23IDSGroupSessionProviderC11ParticipantV_Tgm5(v1, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in BackgroundSession.activeRemoteParticipant(with:for:completion:), (uint64_t)v7);
  uint64_t v9 = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_abcReporter;
  v0[27] = v8;
  v0[28] = v9;
  return MEMORY[0x1F4188298](closure #1 in BackgroundSession.activeRemoteParticipant(with:for:completion:), v2, 0);
}

{
  void *v0;
  uint64_t v2;

  v0[29] = *(void *)(v0[17] + v0[28]);
  swift_retain();
  return MEMORY[0x1F4188298](closure #1 in BackgroundSession.activeRemoteParticipant(with:for:completion:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v4 = *(void *)(v0 + 192);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 200);
  uint64_t v5 = *(void *)(v0 + 184);
  uint64_t v6 = *(void *)(v0 + 160);
  uint64_t v13 = *(void *)(v0 + 152);
  *(void *)(v0 + 40) = type metadata accessor for ABCReporter();
  *(void *)(v0 + 48) = &protocol witness table for ABCReporter;
  *(void *)(v0 + 16) = v1;
  v3(v5, 1, 1, v4);
  outlined init with copy of UserNotificationCenter(v0 + 16, v0 + 56);
  uint64_t v7 = (void *)swift_allocObject();
  long long v7[2] = 0;
  void v7[3] = 0;
  v7[4] = v2;
  void v7[5] = 0xD00000000000002DLL;
  v7[6] = 0x80000001B1161DA0;
  v7[7] = v13;
  v7[8] = v6;
  outlined init with take of BackgroundSessionManagerDataSource((long long *)(v0 + 56), (uint64_t)(v7 + 9));
  swift_retain();
  swift_bridgeObjectRetain();
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v5, (uint64_t)&async function pointer to partial apply for specialized closure #1 in Task<>.reportFailure(on:function:process:), (uint64_t)v7);
  swift_release();
  outlined destroy of UUID?(v5, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 240) = v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *uint64_t v8 = v0;
  v8[1] = closure #1 in BackgroundSession.activeRemoteParticipant(with:for:completion:);
  uint64_t v10 = *(void *)(v0 + 216);
  uint64_t v11 = MEMORY[0x1E4FBC0F0];
  return MEMORY[0x1F4187D90](v0 + 96, v10, &type metadata for IDSGroupSessionProvider.Participant, v9, v11);
}

{
  void *v0;
  uint64_t (*v1)();
  uint64_t v3;

  swift_task_dealloc();
  if (v0)
  {

    uint64_t v1 = closure #1 in BackgroundSession.activeRemoteParticipant(with:for:completion:);
  }
  else
  {
    uint64_t v1 = closure #1 in BackgroundSession.activeRemoteParticipant(with:for:completion:);
  }
  return MEMORY[0x1F4188298](v1, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t (*v20)(void);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  id v23 = v0;
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v4 = self;
  uint64_t v5 = (void *)MEMORY[0x1B3EA1B00](v2, v3);
  uint64_t v6 = objc_msgSend(v4, sel_normalizedHandleWithDestinationID_, v5);

  if (!v6)
  {
    uint64_t v7 = objc_allocWithZone(MEMORY[0x1E4FADBD8]);
    swift_bridgeObjectRetain();
    uint64_t v8 = (void *)MEMORY[0x1B3EA1B00](v2, v3);
    swift_bridgeObjectRelease();
    uint64_t v6 = objc_msgSend(v7, sel_initWithDestinationID_, v8);
  }
  uint64_t v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADB90]), sel_initWithIdentifier_handle_, v1, v6);

  swift_bridgeObjectRelease();
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.service);
  uint64_t v11 = v9;
  uint64_t v12 = Logger.logObject.getter();
  uint64_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    unint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    id v22 = v15;
    *(_DWORD *)unint64_t v14 = 136315138;
    if (v11)
    {
      *(void *)(v0 + 128) = v11;
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
      uint64_t v16 = v11;
      uint64_t v17 = String.init<A>(reflecting:)();
      uint64_t v19 = v18;
    }
    else
    {
      uint64_t v19 = 0xE300000000000000;
      uint64_t v17 = 7104878;
    }
    *(void *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v12, v13, "[Translation] Received translated participant: %s", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v15, -1, -1);
    MEMORY[0x1B3EA39E0](v14, -1, -1);
  }
  else
  {
  }
  (*(void (**)(id))(v0 + 168))(v11);

  swift_release();
  swift_task_dealloc();
  uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
  return v20();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v9 = v0;
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.service);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    uint64_t v8 = v5;
    *(_DWORD *)uint64_t v4 = 136315138;
    *(void *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(7104878, 0xE300000000000000, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v2, v3, "[Translation] Received translated participant: %s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v5, -1, -1);
    MEMORY[0x1B3EA39E0](v4, -1, -1);
  }

  (*(void (**)(void))(v0 + 168))(0);
  swift_release();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t closure #1 in closure #1 in BackgroundSession.activeRemoteParticipant(with:for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[17] = a4;
  v5[18] = a5;
  v5[16] = a1;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in BackgroundSession.activeRemoteParticipant(with:for:completion:), a4, 0);
}

uint64_t closure #1 in closure #1 in BackgroundSession.activeRemoteParticipant(with:for:completion:)()
{
  uint64_t v1 = *(void *)(v0 + 136) + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionProvider;
  swift_beginAccess();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, v0 + 56, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
  return MEMORY[0x1F4188298](closure #1 in closure #1 in BackgroundSession.activeRemoteParticipant(with:for:completion:), 0, 0);
}

{
  void *v0;
  long long *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint8_t *v11;
  unsigned char *v12;
  uint64_t (*v13)(void);
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;

  uint64_t v1 = (long long *)(v0 + 7);
  if (v0[10])
  {
    outlined init with take of BackgroundSessionManagerDataSource(v1, (uint64_t)(v0 + 2));
    uint64_t v2 = v0[5];
    uint64_t v3 = v0[6];
    __swift_project_boxed_opaque_existential_1(v0 + 2, v2);
    unint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 112) + **(int **)(v3 + 112));
    uint64_t v4 = (void *)swift_task_alloc();
    v0[19] = v4;
    *uint64_t v4 = v0;
    v4[1] = closure #1 in closure #1 in BackgroundSession.activeRemoteParticipant(with:for:completion:);
    uint64_t v5 = v0[18];
    return v14(v5, v2, v3);
  }
  else
  {
    outlined destroy of UUID?((uint64_t)v1, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
    if (one-time initialization token for service != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.service);
    uint64_t v8 = Logger.logObject.getter();
    uint64_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = v0[18];
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 134217984;
      v0[15] = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B0DF7000, v8, v9, "[Translation] Not able to translate participantID %llu since we don't have a session", v11, 0xCu);
      MEMORY[0x1B3EA39E0](v11, -1, -1);
    }

    lazy protocol witness table accessor for type BackgroundSession.BackgroundSessionError and conformance BackgroundSession.BackgroundSessionError();
    swift_allocError();
    *uint64_t v12 = 1;
    swift_willThrow();
    uint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
}

{
  int8x16_t *v0;
  uint64_t v1;
  int8x16_t *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[10].i64[1];
  uint64_t v2 = (int8x16_t *)v0[8].i64[0];
  *uint64_t v2 = vextq_s8(v0[11], v0[11], 8uLL);
  v2[1].i64[0] = v1;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v0[1].i64);
  uint64_t v3 = (uint64_t (*)(void))v0->i64[1];
  return v3();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in closure #1 in BackgroundSession.activeRemoteParticipant(with:for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void **)v4;
  *(void *)(*(void *)v4 + 160) = v3;
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v9 = closure #1 in closure #1 in BackgroundSession.activeRemoteParticipant(with:for:completion:);
  }
  else
  {
    v8[21] = a3;
    v8[22] = a2;
    v8[23] = a1;
    uint64_t v9 = closure #1 in closure #1 in BackgroundSession.activeRemoteParticipant(with:for:completion:);
  }
  return MEMORY[0x1F4188298](v9, 0, 0);
}

uint64_t BackgroundSession.sessionIsJoinable(session:)()
{
  return 1;
}

uint64_t BackgroundSession.session(session:fetchDataCryptorForTopic:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v12 - 8);
  unint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  uint64_t v16 = (void *)swift_allocObject();
  long long v16[2] = 0;
  uint64_t v16[3] = 0;
  v16[4] = v6;
  v16[5] = a1;
  void v16[6] = a2;
  v16[7] = a3;
  v16[8] = a4;
  v16[9] = a5;
  swift_retain();
  id v17 = a1;
  swift_bridgeObjectRetain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundSession.session(session:fetchDataCryptorForTopic:completion:), (uint64_t)v16);
  return swift_release();
}

uint64_t closure #1 in BackgroundSession.session(session:fetchDataCryptorForTopic:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[19] = a8;
  v8[20] = v10;
  v8[17] = a6;
  v8[18] = a7;
  v8[15] = a4;
  v8[16] = a5;
  return MEMORY[0x1F4188298](closure #1 in BackgroundSession.session(session:fetchDataCryptorForTopic:completion:), a4, 0);
}

uint64_t closure #1 in BackgroundSession.session(session:fetchDataCryptorForTopic:completion:)()
{
  uint64_t v1 = *(void *)(v0 + 120) + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionProvider;
  swift_beginAccess();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, v0 + 56, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
  return MEMORY[0x1F4188298](closure #1 in BackgroundSession.session(session:fetchDataCryptorForTopic:completion:), 0, 0);
}

{
  void *v0;
  long long *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  BOOL v13;
  void *v14;
  uint8_t *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t (*v20)(void);
  uint64_t v22;
  void *v23;
  uint64_t v24;

  id v23 = v0;
  uint64_t v1 = (long long *)(v0 + 7);
  if (v0[10])
  {
    uint64_t v3 = v0[19];
    uint64_t v2 = v0[20];
    uint64_t v5 = v0[17];
    uint64_t v4 = v0[18];
    outlined init with take of BackgroundSessionManagerDataSource(v1, (uint64_t)(v0 + 2));
    uint64_t v6 = v0[5];
    uint64_t v7 = v0[6];
    __swift_project_boxed_opaque_existential_1(v0 + 2, v6);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 96))(v5, v4, v3, v2, v6, v7);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
  }
  else
  {
    outlined destroy of UUID?((uint64_t)v1, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
    if (one-time initialization token for service != -1) {
      swift_once();
    }
    uint64_t v8 = (void *)v0[16];
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Log.service);
    uint64_t v10 = v8;
    uint64_t v11 = Logger.logObject.getter();
    uint64_t v12 = static os_log_type_t.error.getter();
    uint64_t v13 = os_log_type_enabled(v11, v12);
    unint64_t v14 = (void *)v0[16];
    if (v13)
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      id v22 = v16;
      *(_DWORD *)uint64_t v15 = 136315138;
      v0[2] = v14;
      type metadata accessor for ActivitySession(0);
      id v17 = v14;
      uint64_t v18 = String.init<A>(reflecting:)();
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B0DF7000, v11, v12, "Session, %s failed to fetch data cryptor, no session provider", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v16, -1, -1);
      MEMORY[0x1B3EA39E0](v15, -1, -1);
    }
    else
    {
    }
  }
  uint64_t v20 = (uint64_t (*)(void))v0[1];
  return v20();
}

uint64_t BackgroundSession.session(session:requestEncryptionKeysForParticipants:topicName:)(void *a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = (void *)swift_allocObject();
  void v9[2] = 0;
  v9[3] = 0;
  v9[4] = v2;
  void v9[5] = a1;
  v9[6] = a2;
  swift_bridgeObjectRetain();
  swift_retain();
  id v10 = a1;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundSession.session(session:requestEncryptionKeysForParticipants:topicName:), (uint64_t)v9);
  return swift_release();
}

uint64_t closure #1 in BackgroundSession.session(session:requestEncryptionKeysForParticipants:topicName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[16] = a5;
  v6[17] = a6;
  v6[15] = a4;
  return MEMORY[0x1F4188298](closure #1 in BackgroundSession.session(session:requestEncryptionKeysForParticipants:topicName:), a4, 0);
}

uint64_t closure #1 in BackgroundSession.session(session:requestEncryptionKeysForParticipants:topicName:)()
{
  uint64_t v1 = *(void *)(v0 + 120) + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionProvider;
  swift_beginAccess();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, v0 + 56, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
  return MEMORY[0x1F4188298](closure #1 in BackgroundSession.session(session:requestEncryptionKeysForParticipants:topicName:), 0, 0);
}

{
  void *v0;
  long long *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  void *v11;
  uint8_t *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v19;
  void *v20;
  uint64_t v21;

  uint64_t v20 = v0;
  uint64_t v1 = (long long *)(v0 + 7);
  if (v0[10])
  {
    uint64_t v2 = v0[17];
    outlined init with take of BackgroundSessionManagerDataSource(v1, (uint64_t)(v0 + 2));
    uint64_t v3 = v0[5];
    uint64_t v4 = v0[6];
    __swift_project_boxed_opaque_existential_1(v0 + 2, v3);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v2, v3, v4);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
  }
  else
  {
    outlined destroy of UUID?((uint64_t)v1, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
    if (one-time initialization token for service != -1) {
      swift_once();
    }
    uint64_t v5 = (void *)v0[16];
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Log.service);
    uint64_t v7 = v5;
    uint64_t v8 = Logger.logObject.getter();
    uint64_t v9 = static os_log_type_t.error.getter();
    id v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = (void *)v0[16];
    if (v10)
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      uint64_t v19 = v13;
      *(_DWORD *)uint64_t v12 = 136315138;
      v0[2] = v11;
      type metadata accessor for ActivitySession(0);
      unint64_t v14 = v11;
      uint64_t v15 = String.init<A>(reflecting:)();
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B0DF7000, v8, v9, "Session, %s failed to request encryption keys, no session provider", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v13, -1, -1);
      MEMORY[0x1B3EA39E0](v12, -1, -1);
    }
    else
    {
    }
  }
  id v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

void BackgroundSession.session(session:stateChanged:)(void *a1, unint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = *a2;
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = __swift_project_value_buffer(v10, (uint64_t)static Log.service);
  id v12 = a1;
  outlined copy of ActivitySession.State(v9);
  uint64_t v13 = v12;
  outlined copy of ActivitySession.State(v9);
  unint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v37 = v3;
    uint64_t v17 = v16;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v36 = v8;
    uint64_t v19 = v18;
    uint64_t v38 = (uint64_t)v13;
    unint64_t v39 = v18;
    *(_DWORD *)uint64_t v17 = 136315394;
    type metadata accessor for ActivitySession(0);
    v35[1] = v11;
    uint64_t v20 = v13;
    uint64_t v21 = String.init<A>(reflecting:)();
    uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, (uint64_t *)&v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v17 + 12) = 2080;
    uint64_t v38 = v9;
    outlined copy of ActivitySession.State(v9);
    uint64_t v23 = String.init<A>(reflecting:)();
    uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, (uint64_t *)&v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of ActivitySession.State(v9);
    outlined consume of ActivitySession.State(v9);
    _os_log_impl(&dword_1B0DF7000, v14, v15, "Session, %s, state changed: %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    uint64_t v25 = v19;
    uint64_t v8 = v36;
    MEMORY[0x1B3EA39E0](v25, -1, -1);
    uint64_t v26 = v17;
    uint64_t v3 = v37;
    MEMORY[0x1B3EA39E0](v26, -1, -1);
  }
  else
  {

    outlined consume of ActivitySession.State(v9);
    outlined consume of ActivitySession.State(v9);
  }

  (*(void (**)(unint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v13) + 0x2A0))(&v39);
  unint64_t v27 = v39;
  if (v39 >> 62)
  {
    if (v39 >> 62 == 1)
    {
      outlined consume of ActivitySession.State(v39);
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v30 = 0;
        _os_log_impl(&dword_1B0DF7000, v28, v29, "ActivitySession transitioned to invalid state.", v30, 2u);
        MEMORY[0x1B3EA39E0](v30, -1, -1);
      }
    }
  }
  else
  {
    uint64_t v32 = *(void *)(v39 + 16);
    uint64_t v31 = *(void *)(v39 + 24);
    uint64_t v33 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v8, 1, 1, v33);
    os_log_type_t v34 = (void *)swift_allocObject();
    uint64_t v34[2] = 0;
    uint64_t v34[3] = 0;
    v34[4] = v32;
    uint64_t v34[5] = v31;
    v34[6] = v3;
    swift_bridgeObjectRetain();
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundSession.session(session:stateChanged:), (uint64_t)v34);
    swift_release();
    outlined consume of ActivitySession.State(v27);
  }
}

uint64_t closure #1 in BackgroundSession.session(session:stateChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 32) = a5;
  *(void *)(v6 + 40) = a6;
  return MEMORY[0x1F4188298](closure #1 in BackgroundSession.session(session:stateChanged:), 0, 0);
}

uint64_t closure #1 in BackgroundSession.session(session:stateChanged:)()
{
  uint64_t v1 = v0[4];
  swift_bridgeObjectRelease();
  if (v1)
  {
    if (one-time initialization token for service != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Log.service);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_1B0DF7000, v3, v4, "Not ending BackgroundSession since the ActivitySession's invalidation was not userOriginated.", v5, 2u);
      MEMORY[0x1B3EA39E0](v5, -1, -1);
    }

    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
  else
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for service != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    v0[6] = __swift_project_value_buffer(v8, (uint64_t)static Log.service);
    unint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_1B0DF7000, v9, v10, "Ending BackgroundSession due to ActivitySession being invalidated.", v11, 2u);
      MEMORY[0x1B3EA39E0](v11, -1, -1);
    }

    id v12 = (void *)swift_task_alloc();
    v0[7] = v12;
    *id v12 = v0;
    v12[1] = closure #1 in BackgroundSession.session(session:stateChanged:);
    return BackgroundSession.leave(endState:)(0xC000000000000028);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](closure #1 in BackgroundSession.session(session:stateChanged:), 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t (*v8)(void);
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  id v12 = v0;
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v10 = *(id *)(v0 + 64);
    uint64_t v3 = *(void *)(v0 + 40);
    os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v4 = 136315138;
    uint64_t v11 = v5;
    *(void *)(v0 + 16) = v3;
    type metadata accessor for BackgroundSession(0);
    swift_retain();
    uint64_t v6 = String.init<A>(reflecting:)();
    *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v1, v2, "Error ending BackgroundSession: %s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v5, -1, -1);
    MEMORY[0x1B3EA39E0](v4, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t BackgroundSession.session(session:requestedEndpointWith:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4(0);
}

id protocol witness for ActivitySessionManagerProtocol.queue.getter in conformance BackgroundSession()
{
  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_queue);
}

id protocol witness for ActivitySessionManagerProtocol.applicationLauncher.getter in conformance BackgroundSession()
{
  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_applicationLauncher);
}

uint64_t protocol witness for ActivitySessionManagerProtocol.activeRemoteParticipant(with:for:completion:) in conformance BackgroundSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v12 - 8);
  unint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  uint64_t v16 = (void *)swift_allocObject();
  long long v16[2] = 0;
  uint64_t v16[3] = 0;
  v16[4] = v6;
  v16[5] = a1;
  void v16[6] = a2;
  v16[7] = a3;
  v16[8] = a4;
  v16[9] = a5;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, (uint64_t)&closure #1 in BackgroundSession.activeRemoteParticipant(with:for:completion:)partial apply, (uint64_t)v16);
  return swift_release();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.session(session:fetchDataCryptorForTopic:completion:) in conformance BackgroundSession(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v12 - 8);
  unint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  uint64_t v16 = (void *)swift_allocObject();
  long long v16[2] = 0;
  uint64_t v16[3] = 0;
  v16[4] = v6;
  v16[5] = a1;
  void v16[6] = a2;
  v16[7] = a3;
  v16[8] = a4;
  v16[9] = a5;
  swift_retain();
  id v17 = a1;
  swift_bridgeObjectRetain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, (uint64_t)&closure #1 in BackgroundSession.session(session:fetchDataCryptorForTopic:completion:)partial apply, (uint64_t)v16);
  return swift_release();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.session(session:requestEncryptionKeysForParticipants:topicName:) in conformance BackgroundSession(void *a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  unint64_t v9 = (void *)swift_allocObject();
  void v9[2] = 0;
  v9[3] = 0;
  v9[4] = v2;
  void v9[5] = a1;
  v9[6] = a2;
  swift_bridgeObjectRetain();
  swift_retain();
  id v10 = a1;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&closure #1 in BackgroundSession.session(session:requestEncryptionKeysForParticipants:topicName:)partial apply, (uint64_t)v9);
  return swift_release();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.session(session:requestedEndpointWith:completion:) in conformance BackgroundSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4(0);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  os_log_type_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *os_log_type_t v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t specialized BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v74 = a1;
  uint64_t v75 = a6;
  uint64_t v69 = a2;
  uint64_t v70 = a5;
  uint64_t v72 = a9;
  uint64_t v73 = a10;
  id v65 = a11;
  uint64_t v66 = a8;
  uint64_t v71 = a15;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v64 = (char *)v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v62 = *(void *)(v20 - 8);
  unint64_t v63 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v20;
  MEMORY[0x1F4188790](v20);
  uint64_t v60 = (char *)v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v59);
  os_log_type_t v58 = (char *)v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v23 - 8);
  v56[1] = (char *)v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for UUID();
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v28 = (char *)v56 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  os_log_type_t v29 = (void *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_reporter);
  void v29[3] = &type metadata for FastSyncAnalyticsReporter;
  v29[4] = &protocol witness table for FastSyncAnalyticsReporter;
  *os_log_type_t v29 = 0;
  uint64_t v30 = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_abcReporter;
  type metadata accessor for ABCReporter();
  uint64_t v31 = (void *)swift_allocObject();
  void v31[2] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA8AF0]), sel_init);
  v31[3] = 0x636E795374736146;
  v31[4] = 0xE800000000000000;
  void v31[5] = 0x6E6F6973736553;
  v31[6] = 0xE700000000000000;
  *(void *)(a12 + v30) = v31;
  uint64_t v32 = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_powerReporter;
  type metadata accessor for PowerLogReporter();
  swift_allocObject();
  *(void *)(a12 + v32) = PowerLogReporter.init(subsystem:category:)(0x697274654D435058, 0xEA00000000007363, 0x74634170756F7247, 0xEF73656974697669);
  uint64_t v33 = a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_delegate;
  *(void *)(v33 + 8) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v34 = a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession____lazy_storage___protectedStorage;
  *(_OWORD *)uint64_t v34 = 0u;
  *(_OWORD *)(v34 + 16) = 0u;
  *(void *)(v34 + 32) = 0;
  uint64_t v35 = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession__state;
  unint64_t v78 = 0xC000000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<BackgroundSession.State, Never>);
  swift_allocObject();
  *(void *)(a12 + v35) = CurrentValueSubject.init(_:)();
  *(void *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_session) = 0;
  uint64_t v36 = MEMORY[0x1E4FBC870];
  *(void *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_suspensionAssertions) = MEMORY[0x1E4FBC870];
  *(void *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_cancellables) = v36;
  uint64_t v37 = a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionProvider;
  *(_OWORD *)uint64_t v37 = 0u;
  *(_OWORD *)(v37 + 16) = 0u;
  *(void *)(v37 + 32) = 0;
  uint64_t v38 = a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionSuspensionController;
  *(void *)(v38 + 32) = 0;
  *(_OWORD *)uint64_t v38 = 0u;
  *(_OWORD *)(v38 + 16) = 0u;
  uint64_t v39 = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_applicationLauncher;
  *(void *)(a12 + v39) = objc_msgSend(objc_allocWithZone((Class)CPApplicationLauncher), sel_init);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_id, v74, v25);
  uint64_t v41 = v69;
  uint64_t v40 = v70;
  *(void *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity) = v69;
  *(void *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_members) = a3;
  long long v42 = (void *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_localMember);
  void *v42 = a4;
  v42[1] = v40;
  outlined init with copy of UserNotificationCenter(v75, a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_service);
  *(void *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_serverBag) = a7;
  swift_beginAccess();
  *(void *)(v33 + 8) = v71;
  swift_unknownObjectWeakAssign();
  swift_beginAccess();
  uint64_t v71 = a4;
  swift_unknownObjectRetain();
  uint64_t v70 = a7;
  swift_unknownObjectRetain();
  id v43 = v41;
  uint64_t v67 = a3;
  swift_bridgeObjectRetain();
  outlined assign with copy of IDSGroupSessionProviderProtocol?(v73, v37);
  swift_endAccess();
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  unint64_t v76 = 0;
  unint64_t v77 = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  unint64_t v76 = 0xD000000000000012;
  unint64_t v77 = 0x80000001B115F650;
  id v61 = v43;
  id v44 = objc_msgSend(v43, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  v45._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  uint64_t v46 = *(void (**)(uint64_t, void *))(v26 + 8);
  uint64_t v68 = v26 + 8;
  uint64_t v69 = (void *)v25;
  id v57 = v46;
  v46((uint64_t)v28, (void *)v25);
  static DispatchQoS.unspecified.getter();
  unint64_t v76 = MEMORY[0x1E4FBC860];
  _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, void (*)(char *, uint64_t, uint64_t, uint64_t)))(v62 + 104))(v60, *MEMORY[0x1E4FBCC58], v63);
  uint64_t v47 = v66;
  *(void *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_queue) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  id v48 = v65;
  *(void *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_featureFlags) = v65;
  *(void *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_presenceController) = v47;
  uint64_t v49 = type metadata accessor for TaskPriority();
  uint64_t v50 = (uint64_t)v64;
  unint64_t v63 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56);
  v63(v64, 1, 1, v49);
  uint64_t v51 = (void *)swift_allocObject();
  v51[2] = 0;
  v51[3] = 0;
  v51[4] = a12;
  id v52 = v48;
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC7Combine14AnyCancellableC_Tgm5(v50, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:), (uint64_t)v51);
  type metadata accessor for AnyCancellable();
  swift_allocObject();
  swift_retain();
  AnyCancellable.init(_:)();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  id v65 = v52;
  if (objc_msgSend(v52, sel_fastSyncPresenceSeparationEnabled))
  {

    swift_unknownObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v47 + 112))(v67);
    v63((char *)v50, 1, 1, v49);
    uint64_t v53 = swift_allocObject();
    swift_weakInit();
    id v54 = (void *)swift_allocObject();
    v54[2] = 0;
    v54[3] = 0;
    v54[4] = v47;
    v54[5] = v53;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v50, (uint64_t)&async function pointer to partial apply for closure #3 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:), (uint64_t)v54);
    swift_allocObject();
    swift_retain();
    AnyCancellable.init(_:)();
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();

    swift_unknownObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    swift_release();
    swift_release();
  }
  outlined destroy of UUID?(v73, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
  __swift_destroy_boxed_opaque_existential_1Tm(v75);
  v57(v74, v69);
  return a12;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v3;
  *uint64_t v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5TQ0_;
  return v5(v2 + 32);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5TQ0_()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(unsigned char **)(*v0 + 16);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  *uint64_t v2 = *(unsigned char *)(v1 + 32);
  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

char *specialized ActivitySession.__allocating_init(activitySession:manager:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v24 = objc_msgSend(a1, sel_activity);
  id v12 = objc_msgSend(a1, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  swift_unknownObjectRetain();
  id v13 = objc_msgSend(a1, sel_timestamp);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  id v14 = objc_msgSend(a1, sel_isLocallyInitiated);
  id v15 = objc_msgSend(a1, sel_isLightweightPrimaryInitiated);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v16 = (void *)static IMUserNotificationCenter.shared;
  v25[3] = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for IMUserNotificationCenter);
  _OWORD v25[4] = &protocol witness table for IMUserNotificationCenter;
  v25[0] = v16;
  id v17 = *(uint64_t (**)(id, char *, uint64_t, _UNKNOWN **, char *, id, id, void *))(a3 + 1080);
  id v18 = v16;
  uint64_t v19 = (char *)(id)v17(v24, v11, a2, &protocol witness table for BackgroundSession, v8, v14, v15, v25);
  unsigned __int8 v20 = objc_msgSend(a1, sel_isUsingAirplay);
  swift_release();

  uint64_t v21 = (unsigned __int8 *)&v19[OBJC_IVAR___CPActivitySession_isUsingAirplay];
  swift_beginAccess();
  unsigned __int8 *v21 = v20;

  return v19;
}

NSObject *specialized ActivitySession.__allocating_init(activitySession:manager:)(void *a1, NSObject *a2)
{
  uint64_t v4 = type metadata accessor for Date();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = &v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for UUID();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v10 = objc_msgSend(a1, sel_activity);
  id v11 = objc_msgSend(a1, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  swift_unknownObjectRetain();
  id v12 = objc_msgSend(a1, sel_timestamp);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  int v13 = objc_msgSend(a1, sel_isLocallyInitiated);
  int v14 = objc_msgSend(a1, sel_isLightweightPrimaryInitiated);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  id v15 = (void *)static IMUserNotificationCenter.shared;
  id v16 = objc_allocWithZone((Class)type metadata accessor for ActivitySession(0));
  id v17 = specialized ActivitySession.init(activity:id:manager:timestamp:locallyInitiated:lightweightPrimaryInitiated:notificationCenter:)(v10, (uint64_t)v9, a2, (uint64_t)v6, v13, v14, (uint64_t)v15, v16);
  unsigned __int8 v18 = objc_msgSend(a1, sel_isUsingAirplay);

  uint64_t v19 = (unsigned __int8 *)v17 + OBJC_IVAR___CPActivitySession_isUsingAirplay;
  swift_beginAccess();
  *uint64_t v19 = v18;

  return v17;
}

NSObject *specialized ActivitySession.init(activity:id:manager:timestamp:locallyInitiated:lightweightPrimaryInitiated:notificationCenter:)(void *a1, uint64_t a2, NSObject *a3, uint64_t a4, int a5, int a6, uint64_t a7, void *a8)
{
  int v91 = a6;
  int v90 = a5;
  uint64_t v98 = a4;
  uint64_t v94 = a1;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v89 = (char *)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v86 = (char *)&v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104[3] = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for IMUserNotificationCenter);
  v104[4] = &protocol witness table for IMUserNotificationCenter;
  v104[0] = a7;
  id v17 = a8;
  DateInterval.init()();
  *(void *)&v17[OBJC_IVAR___CPActivitySession_terminatingHandle] = 0;
  v17[OBJC_IVAR___CPActivitySession_isFirstJoin] = 1;
  unsigned __int8 v18 = (void *)MEMORY[0x1E4FBC860];
  *(void *)&v17[OBJC_IVAR___CPActivitySession_persistentSceneIdentifiers] = MEMORY[0x1E4FBC860];
  v17[OBJC_IVAR___CPActivitySession_persistentSceneIsEligibleForAutoClose] = 0;
  uint64_t v19 = &v17[OBJC_IVAR___CPActivitySession_audioSessionID];
  *(_DWORD *)uint64_t v19 = 0;
  v19[4] = 1;
  unsigned __int8 v20 = &v17[OBJC_IVAR___CPActivitySession_domainAssertion];
  uint64_t v21 = type metadata accessor for ActivitySession.DomainAssertionWrapper(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 1, 1, v21);
  *(void *)&v17[OBJC_IVAR___CPActivitySession_invalidateAssertionsWorkItem] = 0;
  *(void *)&v17[OBJC_IVAR___CPActivitySession_distributionCount] = 0;
  v17[OBJC_IVAR___CPActivitySession_isLocalParticipantActive] = 0;
  *(void *)&v17[OBJC_IVAR___CPActivitySession_activeParticipantIDs] = MEMORY[0x1E4FBC870];
  *(void *)&v17[OBJC_IVAR___CPActivitySession_applicationState] = 1;
  uint64_t v22 = OBJC_IVAR___CPActivitySession_foregroundPresentationSubject;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  swift_allocObject();
  *(void *)&v17[v22] = PassthroughSubject.init()();
  *(void *)&v17[OBJC_IVAR___CPActivitySession_capabilities] = 0;
  Date.init()();
  uint64_t v23 = &v17[OBJC_IVAR___CPActivitySession_permittedJoinTimestamp];
  uint64_t v24 = type metadata accessor for Date();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(void (**)(uint64_t, void, uint64_t, void *))(v25 + 56);
  uint64_t v88 = v25 + 56;
  uint64_t v87 = v26;
  v26((uint64_t)v23, 1, 1, (void *)v24);
  *(void *)&v17[OBJC_IVAR___CPActivitySession_activeParticipantsUpdateItem] = 0;
  uint64_t v27 = OBJC_IVAR___CPActivitySession_activeParticipants;
  *(void *)&v17[v27] = specialized Dictionary.init(dictionaryLiteral:)(v18);
  uint64_t v28 = &v17[OBJC_IVAR___CPActivitySession_sessionManager];
  *(void *)&v17[OBJC_IVAR___CPActivitySession_sessionManager + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v17[OBJC_IVAR___CPActivitySession_rtcReporter] = 0;
  *(void *)&v17[OBJC_IVAR___CPActivitySession_connection] = 0;
  uint64_t v95 = v15;
  os_log_type_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v97 = a2;
  uint64_t v96 = v14;
  long long v85 = v29;
  v29(&v17[OBJC_IVAR___CPActivitySession_id], a2, v14);
  uint64_t v30 = (id *)&v17[OBJC_IVAR___CPActivitySession_activity];
  uint64_t v31 = v94;
  *(void *)&v17[OBJC_IVAR___CPActivitySession_activity] = v94;
  uint64_t v32 = v31;
  id v33 = objc_msgSend(v32, sel_metadata);
  objc_msgSend(v33, sel_saveImageToDisk);

  swift_beginAccess();
  *((void *)v28 + 1) = &protocol witness table for ActivitySessionManager;
  swift_unknownObjectWeakAssign();
  uint64_t v93 = a3;
  uint64_t v34 = *(Class *)((char *)&a3->isa + OBJC_IVAR___CPActivitySessionManager_queue);
  *(void *)&v17[OBJC_IVAR___CPActivitySession_queue] = v34;
  uint64_t v92 = v25;
  uint64_t v35 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v25 + 16);
  uint64_t v94 = (void *)v24;
  uint64_t v36 = v24;
  char v37 = v90;
  v35(&v17[OBJC_IVAR___CPActivitySession_timestamp], v98, v36);
  uint64_t v38 = self;
  id v39 = v34;
  id v40 = objc_msgSend(v38, sel_anonymousListener);
  *(void *)&v17[OBJC_IVAR___CPActivitySession_listener] = v40;
  id v41 = objc_msgSend(v40, sel_endpoint);
  *(void *)&v17[OBJC_IVAR___CPActivitySession_endpoint] = v41;
  if (v37) {
    unint64_t v42 = 0x8000000000000000;
  }
  else {
    unint64_t v42 = 0x8000000000000010;
  }
  id v43 = &v17[OBJC_IVAR___CPActivitySession__state];
  swift_beginAccess();
  v102[0] = v42;
  Published.init(initialValue:)();
  swift_endAccess();
  swift_beginAccess();
  id v44 = &unk_1EB7CC000;
  if (objc_msgSend(*v30, sel_isScreenSharingActivity))
  {
    swift_beginAccess();
    uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<ActivitySession.State>);
    (*(void (**)(char *, uint64_t))(*(void *)(v45 - 8) + 8))(v43, v45);
    v99[0] = 0x8000000000000000;
    Published.init(initialValue:)();
    swift_endAccess();
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    __swift_project_value_buffer(v46, (uint64_t)static Log.host);
    uint64_t v47 = v86;
    uint64_t v48 = v96;
    v85(v86, v97, v96);
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      id v52 = v47;
      uint64_t v53 = swift_slowAlloc();
      v102[0] = v53;
      long long v85 = v32;
      *(_DWORD *)uint64_t v51 = 136315138;
      uint64_t v84 = v51 + 4;
      _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v54 = dispatch thunk of CustomStringConvertible.description.getter();
      v99[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, (uint64_t *)v102);
      uint64_t v32 = v85;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v95 + 8))(v52, v48);
      _os_log_impl(&dword_1B0DF7000, v49, v50, "Setting initial ActivitySession(%s) state to waiting for screen sharing activity", v51, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v53, -1, -1);
      uint64_t v56 = v51;
      id v44 = (void *)&unk_1EB7CC000;
      MEMORY[0x1B3EA39E0](v56, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v95 + 8))(v47, v48);
    }
  }
  v17[OBJC_IVAR___CPActivitySession_isLocallyInitiated] = v37 & 1;
  v17[OBJC_IVAR___CPActivitySession_isLightweightPrimaryInitiated] = v91 & 1;
  outlined init with copy of UserNotificationCenter((uint64_t)v104, (uint64_t)&v17[OBJC_IVAR___CPActivitySession_notificationCenter]);
  v17[OBJC_IVAR___CPActivitySession_isUsingAirplay] = 0;

  id v57 = (objc_class *)type metadata accessor for ActivitySession(0);
  v103.receiver = v17;
  v103.super_class = v57;
  os_log_type_t v58 = (char *)objc_msgSendSuper2(&v103, sel_init);
  uint64_t v59 = *(void **)&v58[OBJC_IVAR___CPActivitySession_listener];
  uint64_t v60 = v58;
  objc_msgSend(v59, sel_setDelegate_, v60);
  objc_msgSend(v59, sel_resume);
  type metadata accessor for RTCReporter();
  swift_allocObject();
  id v61 = v60;
  uint64_t v62 = RTCReporter.init(session:)(v61);
  unint64_t v63 = &v61[OBJC_IVAR___CPActivitySession_rtcReporter];
  swift_beginAccess();
  *(void *)unint64_t v63 = v62;
  uint64_t v64 = swift_release();
  (*(void (**)(uint64_t *__return_ptr, uint64_t))((*MEMORY[0x1E4FBC8C8] & *(void *)v61) + 0x2A0))(v99, v64);
  unint64_t v65 = v99[0];
  unint64_t v100 = 0x8000000000000000;
  uint64_t v101 = v99[0];
  LOBYTE(v63) = static ActivitySession.State.== infix(_:_:)((unint64_t *)&v101, &v100);
  outlined consume of ActivitySession.State(v65);
  if (v63)
  {
    uint64_t v66 = (uint64_t)v89;
    Date.init()();
    v87(v66, 0, 1, v94);
    uint64_t v67 = (uint64_t)&v61[OBJC_IVAR___CPActivitySession_permittedJoinTimestamp];
    swift_beginAccess();
    outlined assign with take of ActivitySession.DomainAssertionWrapper?(v66, v67, (uint64_t *)&demangling cache variable for type metadata for Date?);
    swift_endAccess();
  }
  if (v44[408] != -1) {
    swift_once();
  }
  uint64_t v68 = type metadata accessor for Logger();
  __swift_project_value_buffer(v68, (uint64_t)static Log.host);
  uint64_t v69 = v32;
  uint64_t v70 = v61;
  uint64_t v71 = v69;
  uint64_t v72 = v70;
  uint64_t v73 = Logger.logObject.getter();
  os_log_type_t v74 = static os_log_type_t.default.getter();
  int v75 = v74;
  if (os_log_type_enabled(v73, v74))
  {
    uint64_t v76 = swift_slowAlloc();
    unint64_t v77 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v76 = 138412546;
    int v91 = v75;
    v99[0] = (uint64_t)v72;
    unint64_t v78 = v58;
    uint64_t v79 = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v77 = v78;

    *(_WORD *)(v76 + 12) = 2112;
    v99[0] = (uint64_t)v71;
    uint64_t v80 = v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v77[1] = v71;

    _os_log_impl(&dword_1B0DF7000, v73, (os_log_type_t)v91, "Initialized %@ activity: %@", (uint8_t *)v76, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v77, -1, -1);
    MEMORY[0x1B3EA39E0](v76, -1, -1);
    uint64_t v81 = v93;
  }
  else
  {

    uint64_t v73 = v93;
    uint64_t v80 = v72;
    uint64_t v81 = v72;
  }
  uint64_t v82 = v96;

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v104);
  (*(void (**)(uint64_t, void *))(v92 + 8))(v98, v94);
  (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v97, v82);
  return v72;
}

uint64_t specialized static BackgroundSession.State.== infix(_:_:)(unint64_t a1, unint64_t a2)
{
  switch(a1 >> 62)
  {
    case 1uLL:
      if (a2 >> 62 == 1) {
        goto LABEL_7;
      }
      return 0;
    case 2uLL:
      if (a2 >> 62 == 2) {
        goto LABEL_7;
      }
      return 0;
    case 3uLL:
      *((void *)&v6 + 1) = a1;
      *(void *)&long long v6 = a1 + 0x4000000000000000;
      switch((unint64_t)(v6 >> 3))
      {
        case 1uLL:
          if (a2 != 0xC000000000000008) {
            return 0;
          }
          break;
        case 2uLL:
          if (a2 != 0xC000000000000010) {
            return 0;
          }
          break;
        case 3uLL:
          if (a2 != 0xC000000000000018) {
            return 0;
          }
          break;
        case 4uLL:
          if (a2 != 0xC000000000000020) {
            return 0;
          }
          break;
        case 5uLL:
          if (a2 != 0xC000000000000028) {
            return 0;
          }
          break;
        default:
          if (a2 != 0xC000000000000000) {
            return 0;
          }
          break;
      }
      return 1;
    default:
      if (a2 >> 62) {
        return 0;
      }
LABEL_7:
      outlined copy of BackgroundSession.State(a1);
      outlined copy of BackgroundSession.State(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      char v4 = static Task.== infix(_:_:)();
      outlined consume of BackgroundSession.State(a2);
      outlined consume of BackgroundSession.State(a1);
      return v4 & 1;
  }
}

void specialized BackgroundSession.sessionChanged(session:)(void *a1)
{
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.service);
  id v10 = a1;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v11 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    type metadata accessor for ActivitySession(0);
    id v7 = v10;
    uint64_t v8 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v3, v4, "Session changed: %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v6, -1, -1);
    MEMORY[0x1B3EA39E0](v5, -1, -1);
  }
  else
  {
  }
}

void specialized BackgroundSession.session(session:receivedEvent:)(void *a1, void *a2)
{
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.service);
  id v5 = a1;
  id v6 = a2;
  id v18 = v5;
  id v7 = v6;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    uint64_t v19 = v11;
    *(_DWORD *)uint64_t v10 = 136315394;
    type metadata accessor for ActivitySession(0);
    id v12 = v18;
    uint64_t v13 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for TUConversationActivityEvent);
    id v15 = v7;
    uint64_t v16 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v8, v9, "Session, %s, received event: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v11, -1, -1);
    MEMORY[0x1B3EA39E0](v10, -1, -1);
  }
  else
  {
  }
}

uint64_t _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_3(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for BackgroundSession(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for BackgroundSession);
}

uint64_t sub_1B1085404()
{
  return objectdestroyTm_6(40);
}

uint64_t partial apply for closure #1 in BackgroundSession.join()()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  v3[2] = v2;
  return MEMORY[0x1F4188298](closure #1 in BackgroundSession.join(), v2, 0);
}

uint64_t partial apply for closure #1 in BackgroundSession.reset()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 16)) + 0x3D8))();
}

uint64_t sub_1B1085510()
{
  return objectdestroy_9Tm_0(MEMORY[0x1E4FBC8B8]);
}

uint64_t partial apply for closure #2 in BackgroundSession.reset()()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_OWORD *)(v2 + 24) = v3;
  *(void *)(v2 + 40) = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_abcReporter;
  return MEMORY[0x1F4188298](closure #2 in BackgroundSession.reset(), v3, 0);
}

uint64_t sub_1B10855E0()
{
  swift_unknownObjectRelease();
  swift_release();
  outlined consume of BackgroundSession.State(*(void *)(v0 + 40));
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in BackgroundSession.leave(endState:)()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  v4[4] = v2;
  v4[5] = v3;
  uint64_t v5 = (void *)swift_task_alloc();
  v4[6] = v5;
  *uint64_t v5 = v4;
  v5[1] = closure #1 in BackgroundSession.leave(endState:);
  return BackgroundSession.reset()();
}

unint64_t lazy protocol witness table accessor for type BackgroundSession.BackgroundSessionError and conformance BackgroundSession.BackgroundSessionError()
{
  unint64_t result = lazy protocol witness table cache variable for type BackgroundSession.BackgroundSessionError and conformance BackgroundSession.BackgroundSessionError;
  if (!lazy protocol witness table cache variable for type BackgroundSession.BackgroundSessionError and conformance BackgroundSession.BackgroundSessionError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackgroundSession.BackgroundSessionError and conformance BackgroundSession.BackgroundSessionError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BackgroundSession.BackgroundSessionError and conformance BackgroundSession.BackgroundSessionError;
  if (!lazy protocol witness table cache variable for type BackgroundSession.BackgroundSessionError and conformance BackgroundSession.BackgroundSessionError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackgroundSession.BackgroundSessionError and conformance BackgroundSession.BackgroundSessionError);
  }
  return result;
}

uint64_t partial apply for closure #1 in BackgroundSession.setupIDSGroupSession()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 16)) + 0x3E8))();
}

uint64_t sub_1B10857BC()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t block_destroy_helper_27()
{
  return swift_release();
}

uint64_t sub_1B10857D4()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in BackgroundSession.handleIDSSessionStateChange(_:sessionProvider:)()
{
  return closure #1 in BackgroundSession.handleIDSSessionStateChange(_:sessionProvider:)(*(void **)(v0 + 16));
}

uint64_t sub_1B108581C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t type metadata accessor for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, type metadata singleton initialization cache for Assertion #1 in BackgroundSession.acquireSuspensionAssertion());
}

uint64_t outlined init with copy of Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B10858B0()
{
  uint64_t v1 = *(void *)(type metadata accessor for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_weakDestroy();
  return MEMORY[0x1F4186498](v0, v4, v5);
}

uint64_t outlined init with take of Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in BackgroundSession.acquireSuspensionAssertion()()
{
  uint64_t v1 = *(void *)(type metadata accessor for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(0) - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  return closure #1 in BackgroundSession.acquireSuspensionAssertion()(v2);
}

uint64_t outlined destroy of Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B1085AC0()
{
  return objectdestroyTm_6(40);
}

uint64_t partial apply for closure #1 in BackgroundSession.didChangePlugins(sessionProvider:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  v5[5] = a1;
  v5[6] = v4;
  return MEMORY[0x1F4188298](closure #1 in BackgroundSession.didChangePlugins(sessionProvider:), v4, 0);
}

uint64_t sub_1B1085B78()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5Tu);
  return v6(a1, v4);
}

uint64_t partial apply for closure #1 in BackgroundSession.didChangeState(sessionProvider:state:)()
{
  uint64_t v2 = *(void *)(v0 + 32);
  char v3 = *(unsigned char *)(v0 + 40);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v0 + 48;
  *(unsigned char *)(v4 + 32) = v3;
  *(void *)(v4 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return MEMORY[0x1F4188298](closure #1 in BackgroundSession.didChangeState(sessionProvider:state:), v2, 0);
}

uint64_t sub_1B1085D2C()
{
  return objectdestroyTm_6(40);
}

uint64_t partial apply for closure #1 in BackgroundSession.didReceiveKeyUpdate(sessionProvider:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in BackgroundSession.didReceiveKeyUpdate(sessionProvider:)(a1, v4, v5, v6);
}

uint64_t partial apply for closure #1 in BackgroundSession.didRejectKeyRecoveryRequest(sessionProvider:from:reason:)()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_OWORD *)(v2 + 40) = v3;
  *(void *)(v2 + 56) = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_featureFlags;
  return MEMORY[0x1F4188298](closure #1 in BackgroundSession.didRejectKeyRecoveryRequest(sessionProvider:from:reason:), v3, 0);
}

uint64_t sub_1B1085EA4()
{
  return objectdestroy_9Tm_0(MEMORY[0x1E4FBC898]);
}

uint64_t partial apply for closure #1 in BackgroundSession.didReceiveUpdatedUnknownParticipantList(sessionProvider:unknownParticipants:)()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_OWORD *)(v2 + 40) = v3;
  *(void *)(v2 + 56) = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_featureFlags;
  return MEMORY[0x1F4188298](closure #1 in BackgroundSession.didReceiveUpdatedUnknownParticipantList(sessionProvider:unknownParticipants:), v3, 0);
}

uint64_t partial apply for closure #1 in BackgroundSession.activeRemoteParticipant(with:for:completion:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in BackgroundSession.activeRemoteParticipant(with:for:completion:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t partial apply for closure #1 in BackgroundSession.session(session:fetchDataCryptorForTopic:completion:)()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v0 + 32);
  long long v6 = *(_OWORD *)(v0 + 56);
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(void *)(v4 + 160) = v3;
  *(_OWORD *)(v4 + 144) = v6;
  *(void *)(v4 + 136) = v2;
  *(_OWORD *)(v4 + 120) = v5;
  return MEMORY[0x1F4188298](closure #1 in BackgroundSession.session(session:fetchDataCryptorForTopic:completion:), v5, 0);
}

uint64_t partial apply for closure #1 in BackgroundSession.session(session:requestEncryptionKeysForParticipants:topicName:)()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(void *)(v3 + 136) = v2;
  *(_OWORD *)(v3 + 120) = v4;
  return MEMORY[0x1F4188298](closure #1 in BackgroundSession.session(session:requestEncryptionKeysForParticipants:topicName:), v4, 0);
}

uint64_t sub_1B10861EC()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for closure #1 in BackgroundSession.session(session:stateChanged:)()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  long long v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *long long v4 = v1;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  v4[4] = v2;
  v4[5] = v3;
  return MEMORY[0x1F4188298](closure #1 in BackgroundSession.session(session:stateChanged:), 0, 0);
}

unint64_t lazy protocol witness table accessor for type BackgroundSession.State and conformance BackgroundSession.State()
{
  unint64_t result = lazy protocol witness table cache variable for type BackgroundSession.State and conformance BackgroundSession.State;
  if (!lazy protocol witness table cache variable for type BackgroundSession.State and conformance BackgroundSession.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackgroundSession.State and conformance BackgroundSession.State);
  }
  return result;
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in BackgroundSession()
{
  return _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
}

uint64_t base witness table accessor for Equatable in BackgroundSession()
{
  return _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_3(&lazy protocol witness table cache variable for type BackgroundSession and conformance BackgroundSession, (void (*)(uint64_t))type metadata accessor for BackgroundSession);
}

uint64_t sub_1B1086420@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_reporter;
  swift_beginAccess();
  return outlined init with copy of UserNotificationCenter(v3, a2);
}

uint64_t sub_1B108647C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1B3EA3B30](v3);
  uint64_t v5 = *(void *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t sub_1B10864D8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_delegate;
  swift_beginAccess();
  *(void *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_1B108653C@<X0>(void *a1@<X8>)
{
  return BackgroundSession.protectedStorage.getter(a1);
}

id sub_1B108656C@<X0>(void *a1@<X0>, void **a2@<X8>)
{
  uint64_t v3 = (void **)(*a1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_session);
  swift_beginAccess();
  long long v4 = *v3;
  *a2 = *v3;
  return v4;
}

uint64_t sub_1B10865D4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)(*a1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_members);
  swift_beginAccess();
  *a2 = *v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1086630@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return keypath_get_95Tm(a1, &OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_suspensionAssertions, a2);
}

uint64_t sub_1B108663C(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BackgroundSession.suspensionAssertions : BackgroundSession(a1, a2, a3, a4, &OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_suspensionAssertions);
}

uint64_t sub_1B108665C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return keypath_get_95Tm(a1, &OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_cancellables, a2);
}

uint64_t keypath_get_95Tm@<X0>(void *a1@<X0>, void *a2@<X3>, void *a3@<X8>)
{
  long long v4 = (void *)(*a1 + *a2);
  swift_beginAccess();
  *a3 = *v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B10866BC(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BackgroundSession.suspensionAssertions : BackgroundSession(a1, a2, a3, a4, &OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_cancellables);
}

uint64_t sub_1B10866DC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionProvider;
  swift_beginAccess();
  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3, a2, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
}

uint64_t dispatch thunk of BackgroundSessionDelegate.backgroundSessionDidUpdate(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of BackgroundSessionDelegate.backgroundSession(_:stateChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of BackgroundSessionDelegate.backgroundSession(_:didRejectKeyRecoveryRequest:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of BackgroundSessionDelegate.backgroundSession(_:didReceiveUpdatedUnknownParticipantList:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t ObjC metadata update function for BackgroundSession()
{
  return type metadata accessor for BackgroundSession(0);
}

uint64_t type metadata completion function for BackgroundSession()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t method lookup function for BackgroundSession(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for BackgroundSession);
}

uint64_t dispatch thunk of BackgroundSession.reporter.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of BackgroundSession.reporter.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of BackgroundSession.reporter.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of BackgroundSession.delegate.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of BackgroundSession.delegate.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of BackgroundSession.delegate.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of BackgroundSession.protectedStorage.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of BackgroundSession.protectedStorage.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of BackgroundSession.protectedStorage.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of BackgroundSession.state.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t dispatch thunk of BackgroundSession.$state.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

uint64_t dispatch thunk of BackgroundSession.session.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360))();
}

uint64_t dispatch thunk of BackgroundSession.container.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 384))();
}

uint64_t dispatch thunk of BackgroundSession.members.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392))();
}

uint64_t dispatch thunk of BackgroundSession.members.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 400))();
}

uint64_t dispatch thunk of BackgroundSession.members.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 408))();
}

uint64_t dispatch thunk of BackgroundSession.suspensionAssertions.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 416))();
}

uint64_t dispatch thunk of BackgroundSession.suspensionAssertions.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 424))();
}

uint64_t dispatch thunk of BackgroundSession.suspensionAssertions.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 432))();
}

uint64_t dispatch thunk of BackgroundSession.cancellables.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 440))();
}

uint64_t dispatch thunk of BackgroundSession.cancellables.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 448))();
}

uint64_t dispatch thunk of BackgroundSession.cancellables.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 456))();
}

uint64_t dispatch thunk of BackgroundSession.sessionProvider.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 464))();
}

uint64_t dispatch thunk of BackgroundSession.sessionProvider.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 472))();
}

uint64_t dispatch thunk of BackgroundSession.sessionProvider.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 480))();
}

uint64_t dispatch thunk of BackgroundSession.__allocating_init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)()
{
  return (*(uint64_t (**)(void))(v0 + 512))();
}

uint64_t dispatch thunk of BackgroundSession.handlePresentDevicesChanged(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of BackgroundSession.updateSuspensionController(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of BackgroundSession.join()()
{
  long long v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 536) + **(int **)(*(void *)v0 + 536));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v4();
}

uint64_t dispatch thunk of BackgroundSession.reset()()
{
  long long v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 552) + **(int **)(*(void *)v0 + 552));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v4();
}

uint64_t dispatch thunk of BackgroundSession.leave(endState:)(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 560) + **(int **)(*(void *)v1 + 560));
  long long v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *long long v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v6(a1);
}

uint64_t dispatch thunk of BackgroundSession.end()()
{
  long long v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 568) + **(int **)(*(void *)v0 + 568));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v4();
}

uint64_t dispatch thunk of BackgroundSession.setupIDSGroupSessionIfNecessary()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of BackgroundSession.setupIDSGroupSession()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of BackgroundSession.handleIDSSessionStateChange(_:sessionProvider:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of BackgroundSession.updateMembers(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of BackgroundSession.description.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of BackgroundSession.hash(into:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of BackgroundSession.hashValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t getEnumTagSinglePayload for BackgroundSession.BackgroundSessionError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for BackgroundSession.BackgroundSessionError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B1087424);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BackgroundSession.BackgroundSessionError()
{
  return &type metadata for BackgroundSession.BackgroundSessionError;
}

unint64_t *initializeBufferWithCopyOfBuffer for BackgroundSession.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  outlined copy of BackgroundSession.State(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for BackgroundSession.State(unint64_t *a1)
{
  return outlined consume of BackgroundSession.State(*a1);
}

unint64_t *assignWithCopy for BackgroundSession.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  outlined copy of BackgroundSession.State(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  outlined consume of BackgroundSession.State(v4);
  return a1;
}

unint64_t *assignWithTake for BackgroundSession.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  outlined consume of BackgroundSession.State(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for BackgroundSession.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7D && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 125);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7C) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for BackgroundSession.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7C)
  {
    *(void *)uint64_t result = a2 - 125;
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for BackgroundSession.State(void *a1)
{
  uint64_t v1 = *a1 >> 62;
  if (v1 == 3) {
    return (*a1 >> 3) + 3;
  }
  else {
    return v1;
  }
}

unint64_t *destructiveInjectEnumTag for BackgroundSession.State(unint64_t *result, uint64_t a2)
{
  if (a2 < 3)
  {
    uint64_t v2 = *result & 0xFFFFFFFFFFFFFF8;
    unint64_t v3 = a2 << 62;
  }
  else
  {
    uint64_t v2 = 8 * (a2 - 3);
    unint64_t v3 = 0xC000000000000000;
  }
  *uint64_t result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for BackgroundSession.State()
{
  return &type metadata for BackgroundSession.State;
}

uint64_t *initializeBufferWithCopyOfBuffer for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_weakCopyInit();
  }
  return a1;
}

uint64_t destroy for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return swift_weakDestroy();
}

uint64_t initializeWithCopy for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  swift_weakCopyInit();
  return a1;
}

uint64_t assignWithCopy for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  swift_weakCopyAssign();
  return a1;
}

uint64_t initializeWithTake for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  swift_weakTakeInit();
  return a1;
}

uint64_t assignWithTake for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  swift_weakTakeAssign();
  return a1;
}

uint64_t getEnumTagSinglePayload for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B1087964);
}

uint64_t sub_1B1087964(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B10879E4);
}

uint64_t sub_1B10879E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t objectdestroy_78Tm()
{
  swift_unknownObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t objectdestroy_74Tm()
{
  swift_unknownObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x1F4186498](v0, 80, 7);
}

uint64_t objectdestroy_70Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x1F4186498](v0, 80, 7);
}

uint64_t sub_1B1087BEC()
{
  return objectdestroy_9Tm_0(MEMORY[0x1E4FBC898]);
}

uint64_t objectdestroy_62Tm()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t objectdestroy_50Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 48);
  return MEMORY[0x1F4186498](v0, 88, 7);
}

uint64_t sub_1B1087C9C()
{
  return objectdestroyTm_6(48);
}

uint64_t partial apply for closure #1 in closure #1 in BackgroundSession.activeRemoteParticipant(with:for:completion:)(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  v6[17] = v5;
  v6[18] = v4;
  v6[16] = a1;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in BackgroundSession.activeRemoteParticipant(with:for:completion:), v5, 0);
}

uint64_t sub_1B1087D60()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 72);
  return MEMORY[0x1F4186498](v0, 112, 7);
}

uint64_t sub_1B1087EA8()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in closure #1 in BackgroundSession.didReceiveKeyUpdate(sessionProvider:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 16)) + 0x440))();
}

uint64_t sub_1B1087F3C()
{
  uint64_t v1 = *(void *)(type metadata accessor for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_unknownObjectRelease();
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
  swift_weakDestroy();
  return MEMORY[0x1F4186498](v0, v4, v5);
}

uint64_t partial apply for closure #1 in closure #1 in BackgroundSession.acquireSuspensionAssertion()(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(0) - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[2] = a1;
  v6[3] = v5;
  v6[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in BackgroundSession.acquireSuspensionAssertion(), 0, 0);
}

uint64_t sub_1B108811C()
{
  return objectdestroy_9Tm_0(MEMORY[0x1E4FBC8B8]);
}

uint64_t partial apply for closure #1 in closure #1 in BackgroundSession.handleIDSSessionStateChange(_:sessionProvider:)()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_OWORD *)(v2 + 24) = v3;
  *(void *)(v2 + 40) = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_abcReporter;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in BackgroundSession.handleIDSSessionStateChange(_:sessionProvider:), v3, 0);
}

uint64_t partial apply for closure #1 in closure #1 in BackgroundSession.join()(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in closure #1 in BackgroundSession.join()(a1, v1);
}

void partial apply for closure #2 in closure #1 in BackgroundSession.join()()
{
}

uint64_t sub_1B1088290()
{
  return objectdestroyTm_6(40);
}

uint64_t objectdestroyTm_6(uint64_t a1)
{
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x1F4186498](v1, a1, 7);
}

void _s14CopresenceCore17BackgroundSessionC10identifier8activity7members11localMember7service9serverBag18presenceController8delegate15sessionProvider12featureFlagsAC10Foundation4UUIDV_So22TUConversationActivityCShyAA011AddressableI0CGAA0I0_pSgAA18IDSServiceProtocol_pSo020CPConversationServerL0_pAA08PresenceN0CAA0cD8Delegate_pAA08IDSGroupdqZ0_pSgSo09CPFeatureS0CtcfcyycfU0_TA_0()
{
  type metadata accessor for AnyCancellable();
  JUMPOUT(0x1B3EA1F30);
}

uint64_t sub_1B1088328()
{
  swift_weakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B1088360()
{
  return objectdestroy_9Tm_0(MEMORY[0x1E4FBC8D0]);
}

uint64_t objectdestroy_9Tm_0(void (*a1)(void))
{
  swift_unknownObjectRelease();
  swift_release();
  a1(*(void *)(v1 + 40));
  return MEMORY[0x1F4186498](v1, 48, 7);
}

void _s14CopresenceCore17BackgroundSessionC10identifier8activity7members11localMember7service9serverBag18presenceController8delegate15sessionProvider12featureFlagsAC10Foundation4UUIDV_So22TUConversationActivityCShyAA011AddressableI0CGAA0I0_pSgAA18IDSServiceProtocol_pSo020CPConversationServerL0_pAA08PresenceN0CAA0cD8Delegate_pAA08IDSGroupdqZ0_pSgSo09CPFeatureS0CtcfcyycfU2_TA_0()
{
}

void partial apply for closure #1 in closure #1 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)(void *a1)
{
}

uint64_t NSXPCConnection.isEntitled.getter()
{
  char v0 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(4);
  if (v0 == 2) {
    char v0 = NSXPCConnection.isEntitledToUseGameCenter.getter();
  }
  char v1 = v0;
  char v2 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(3);
  if (v1 & 1) != 0 || (v2) {
    return 1;
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  long long v3 = (unsigned char *)static NSXPCConnection.TestingOverrides.default;
  swift_beginAccess();
  if (*v3) {
    return 1;
  }
  char v5 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(5);
  if (v5 == 2) {
    return v3[1];
  }
  else {
    return v5 & 1;
  }
}

uint64_t NSXPCConnection.bundleIdentifier.getter()
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  objc_msgSend(v0, sel_auditToken);
  char v1 = SecTaskCreateWithAuditToken(0, &token);
  if (v1)
  {
    char v2 = v1;
    CFErrorRef error = 0;
    CFStringRef v3 = SecTaskCopySigningIdentifier(v1, &error);
    if (v3)
    {
      uint64_t v4 = (__CFString *)v3;
      uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

      swift_beginAccess();
      CFErrorRef v6 = error;

      if (v6) {
    }
      }
    else
    {
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      __swift_project_value_buffer(v14, (uint64_t)static Log.default);
      id v15 = v0;
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = swift_slowAlloc();
        uint64_t v19 = (void *)swift_slowAlloc();
        uint64_t v28 = swift_slowAlloc();
        *(void *)token.val = v28;
        *(_DWORD *)uint64_t v18 = 138412546;
        id v20 = v15;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v19 = v15;

        *(_WORD *)(v18 + 12) = 2080;
        swift_beginAccess();
        if (error)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Unmanaged<CFErrorRef>);
          uint64_t v21 = String.init<A>(reflecting:)();
          unint64_t v23 = v22;
        }
        else
        {
          unint64_t v23 = 0xE300000000000000;
          uint64_t v21 = 7104878;
        }
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, (uint64_t *)&token);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v16, v17, "Could not get signing identifier for %@: %s", (uint8_t *)v18, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v19, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v28, -1, -1);
        MEMORY[0x1B3EA39E0](v18, -1, -1);
      }
      else
      {
      }
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v25 = static NSXPCConnection.TestingOverrides.default;
      swift_beginAccess();
      uint64_t v5 = *(void *)(v25 + 8);
      swift_beginAccess();
      CFErrorRef v26 = error;
      if (error)
      {
        swift_bridgeObjectRetain();

        char v2 = v26;
      }
      else
      {
        swift_bridgeObjectRetain();
      }
    }
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.default);
    uint64_t v8 = v0;
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      id v12 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 138412290;
      *(void *)token.val = v8;
      uint64_t v13 = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v12 = v8;

      _os_log_impl(&dword_1B0DF7000, v9, v10, "Failed to create task for %@", v11, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v12, -1, -1);
      MEMORY[0x1B3EA39E0](v11, -1, -1);
    }
    else
    {

      uint64_t v9 = v8;
    }

    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v24 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    uint64_t v5 = *(void *)(v24 + 8);
    swift_bridgeObjectRetain();
  }
  return v5;
}

uint64_t NSXPCConnection.isEntitledToUsePublicAPI.getter()
{
  char v0 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(4);
  if (v0 == 2) {
    char v0 = NSXPCConnection.isEntitledToUseGameCenter.getter();
  }
  char v1 = v0;
  char v2 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(3);
  if (v1 & 1) != 0 || (v2) {
    return 1;
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  CFStringRef v3 = (unsigned __int8 *)static NSXPCConnection.TestingOverrides.default;
  swift_beginAccess();
  return *v3;
}

uint64_t NSXPCConnection.isEntitledToUsePrivateAPI.getter()
{
  char v0 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(5);
  if (v0 != 2) {
    return v0 & 1;
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = static NSXPCConnection.TestingOverrides.default;
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + 1);
}

uint64_t NSXPCConnection.isEntitledToAccessAllSessions.getter()
{
  char v0 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(6);
  if (v0 != 2) {
    return v0 & 1;
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = static NSXPCConnection.TestingOverrides.default;
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + 24);
}

uint64_t NSXPCConnection.isEntitledToForWebFallback.getter()
{
  char v0 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(7);
  if (v0 != 2) {
    return v0 & 1;
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = static NSXPCConnection.TestingOverrides.default;
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + 25);
}

uint64_t NSXPCConnection.definedSystemActivityIdentifiers.getter()
{
  uint64_t result = specialized NSXPCConnection.value<A>(_:forEntitlement:)(8);
  if (!result)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    swift_beginAccess();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t NSXPCConnection.isEntitledToAccessUnaliasedIdentifiers.getter()
{
  char v0 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(9);
  if (v0 != 2) {
    return v0 & 1;
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = static NSXPCConnection.TestingOverrides.default;
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + 40);
}

uint64_t NSXPCConnection.isEntitledToUseGameCenter.getter()
{
  uint64_t v1 = (void *)MEMORY[0x1B3EA1B00](0xD00000000000001FLL, 0x80000001B115AC30);
  id v2 = objc_msgSend(v0, sel_valueForEntitlement_, v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v34 = 0u;
    long long v35 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v34, (uint64_t)&v36);
  if (v38)
  {
    if ((swift_dynamicCast() & 1) != 0 && v33 == 1)
    {
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for Logger();
      __swift_project_value_buffer(v3, (uint64_t)static Log.default);
      uint64_t v4 = v0;
      uint64_t v5 = Logger.logObject.getter();
      os_log_type_t v6 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v5, v6))
      {
        uint64_t v7 = (uint8_t *)swift_slowAlloc();
        uint64_t v8 = swift_slowAlloc();
        *(void *)&long long v34 = v8;
        *(_DWORD *)uint64_t v7 = 136315138;
        uint64_t v9 = NSXPCConnection.bundleIdentifier.getter();
        if (v10)
        {
          uint64_t v36 = v9;
          uint64_t v37 = v10;
          uint64_t v11 = String.init<A>(reflecting:)();
          unint64_t v13 = v12;
        }
        else
        {
          uint64_t v11 = 7104878;
          unint64_t v13 = 0xE300000000000000;
        }
        uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, (uint64_t *)&v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v5, v6, "Connection[%s] is entitled to public Game Center entitlement.", v7, 0xCu);
        uint64_t v27 = 1;
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v8, -1, -1);
        MEMORY[0x1B3EA39E0](v7, -1, -1);

        return v27;
      }

LABEL_34:
      return 1;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v36);
  }
  uint64_t v14 = (void *)MEMORY[0x1B3EA1B00](0xD00000000000001FLL, 0x80000001B115AC30);
  id v15 = objc_msgSend(v0, sel_valueForEntitlement_, v14);

  if (v15)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v34 = 0u;
    long long v35 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v34, (uint64_t)&v36);
  if (v38)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (swift_dynamicCast())
    {
      if (*(void *)(v33 + 16))
      {
        if (one-time initialization token for default != -1) {
          swift_once();
        }
        uint64_t v16 = type metadata accessor for Logger();
        __swift_project_value_buffer(v16, (uint64_t)static Log.default);
        id v17 = v0;
        swift_bridgeObjectRetain();
        uint64_t v4 = Logger.logObject.getter();
        os_log_type_t v18 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v4, v18))
        {

          swift_bridgeObjectRelease_n();
          return 1;
        }
        uint64_t v19 = swift_slowAlloc();
        uint64_t v20 = swift_slowAlloc();
        *(void *)&long long v34 = v20;
        *(_DWORD *)uint64_t v19 = 136315394;
        uint64_t v21 = NSXPCConnection.bundleIdentifier.getter();
        if (v22)
        {
          uint64_t v36 = v21;
          uint64_t v37 = v22;
          uint64_t v23 = String.init<A>(reflecting:)();
          unint64_t v25 = v24;
        }
        else
        {
          uint64_t v23 = 7104878;
          unint64_t v25 = 0xE300000000000000;
        }
        uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, (uint64_t *)&v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v19 + 12) = 2080;
        uint64_t v29 = swift_bridgeObjectRetain();
        uint64_t v30 = MEMORY[0x1B3EA1D20](v29, MEMORY[0x1E4FBB1A0]);
        unint64_t v32 = v31;
        swift_bridgeObjectRelease();
        uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, (uint64_t *)&v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v4, v18, "Connection[%s] is entitled to internal Game Center entitlement: %s", (uint8_t *)v19, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v20, -1, -1);
        MEMORY[0x1B3EA39E0](v19, -1, -1);
        goto LABEL_34;
      }
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v36);
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v26 = static NSXPCConnection.TestingOverrides.default;
  swift_beginAccess();
  return *(unsigned __int8 *)(v26 + 41);
}

uint64_t NSXPCConnection.isEntitledToProvideCustomEndpoint.getter()
{
  char v0 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(11);
  if (v0 != 2) {
    return v0 & 1;
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = static NSXPCConnection.TestingOverrides.default;
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + 42);
}

uint64_t NSXPCConnection.isEntitledToBypassSharePlayRestriction.getter()
{
  return specialized NSXPCConnection.value<A>(_:forEntitlement:)(14) & 1;
}

uint64_t NSXPCConnection.stableAppIdentifier.getter()
{
  uint64_t v0 = NSXPCConnection.bundleIdentifier.getter();
  if (v1)
  {
    uint64_t v2 = v0;
    uint64_t v3 = v1;
    if (v0 == 0x6C7070612E6D6F63 && v1 == 0xEF7365746F4E2E65
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || (unint64_t v4 = 0xD000000000000012, v2 == 0xD000000000000015) && v3 == 0x80000001B115A660
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 0x6C7070612E6D6F63;
    }
    if (v2 == 0xD000000000000010 && v3 == 0x80000001B115F200
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || v2 == 0xD000000000000012 && v3 == 0x80000001B115F220)
    {
      swift_bridgeObjectRelease();
      return v4;
    }
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return v4;
    }
  }
  uint64_t v6 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(12);
  if (v7 != 1) {
    return v6;
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v8 = static NSXPCConnection.TestingOverrides.default;
  swift_beginAccess();
  unint64_t v4 = *(void *)(v8 + 48);
  swift_bridgeObjectRetain();
  return v4;
}

uint64_t NSXPCConnection.applicationIdentifier.getter()
{
  return specialized NSXPCConnection.value<A>(_:forEntitlement:)(0);
}

uint64_t NSXPCConnection.TestingOverrides.default.unsafeMutableAddressor()
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  return static NSXPCConnection.TestingOverrides.default;
}

uint64_t NSXPCConnection.TestingOverrides.bundleIdentifierOverride.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NSXPCConnection.developerTeamIdentifier.getter()
{
  return specialized NSXPCConnection.value<A>(_:forEntitlement:)(1);
}

uint64_t NSXPCConnection.processName.getter()
{
  uint64_t v1 = (void *)swift_slowAlloc();
  if (proc_name((int)objc_msgSend(v0, sel_processIdentifier), v1, 0x400u) < 1)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Log.default);
    id v4 = v0;
    char v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 138412290;
      id v9 = v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v8 = v4;

      _os_log_impl(&dword_1B0DF7000, v5, v6, "Could not get process name for %@", v7, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v8, -1, -1);
      MEMORY[0x1B3EA39E0](v7, -1, -1);
    }
    else
    {
    }
    MEMORY[0x1B3EA39E0](v1, -1, -1);
    return 0;
  }
  else
  {
    uint64_t v2 = String.init(cString:)();
    MEMORY[0x1B3EA39E0](v1, -1, -1);
  }
  return v2;
}

uint64_t NSXPCConnection.isEntitledToUseNearbyInvitations.getter()
{
  char v0 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(13);
  if (v0 != 2) {
    return v0 & 1;
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = static NSXPCConnection.TestingOverrides.default;
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + 64);
}

uint64_t NSXPCConnection.TestingOverrides.isEntitledToUseNearbyInvitationsOverride.getter()
{
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t NSXPCConnection.TestingOverrides.isEntitledToUseGameCenter.getter()
{
  return *(unsigned __int8 *)(v0 + 41);
}

id NSXPCConnection.autoGameCenterFeatureEnabled.getter()
{
  id v0 = objc_msgSend(objc_allocWithZone((Class)CPFeatureFlags), sel_init);
  id v1 = objc_msgSend(v0, sel_autoGameCenterEnabled);

  return v1;
}

uint64_t NSXPCConnection.TestingOverrides.isEntitledToUsePublicAPIOverride.getter()
{
  return *v0;
}

uint64_t NSXPCConnection.TestingOverrides.isEntitledToUsePrivateAPIOverride.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t NSXPCConnection.TestingOverrides.isEntitledToAccessAllSessions.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t NSXPCConnection.TestingOverrides.isEntitledToForWebFallback.getter()
{
  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t NSXPCConnection.TestingOverrides.definedSystemActivityIdentifiers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NSXPCConnection.TestingOverrides.isEntitledToAccessUnaliasedIdentifiers.getter()
{
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t NSXPCConnection.TestingOverrides.isEntitledToProvideCustomEndpoint.getter()
{
  return *(unsigned __int8 *)(v0 + 42);
}

uint64_t NSXPCConnection.TestingOverrides.stableAppIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for default()
{
  uint64_t result = swift_slowAlloc();
  static NSXPCConnection.TestingOverrides.default = result;
  *(_WORD *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(_WORD *)(result + 24) = 0;
  *(void *)(result + 32) = MEMORY[0x1E4FBC860];
  *(_WORD *)(result + 40) = 0;
  *(unsigned char *)(result + 42) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(unsigned char *)(result + 64) = 0;
  return result;
}

void NSXPCConnection.TestingOverrides.init()(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = MEMORY[0x1E4FBC860];
  *(_WORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 42) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 0;
}

uint64_t static NSXPCConnection.TestingOverrides.default.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = static NSXPCConnection.TestingOverrides.default;
  swift_beginAccess();
  char v3 = *(unsigned char *)(v2 + 1);
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t v5 = *(void *)(v2 + 16);
  char v6 = *(unsigned char *)(v2 + 24);
  char v7 = *(unsigned char *)(v2 + 25);
  uint64_t v8 = *(void *)(v2 + 32);
  char v9 = *(unsigned char *)(v2 + 40);
  char v10 = *(unsigned char *)(v2 + 41);
  char v11 = *(unsigned char *)(v2 + 42);
  uint64_t v13 = *(void *)(v2 + 48);
  uint64_t v12 = *(void *)(v2 + 56);
  char v14 = *(unsigned char *)(v2 + 64);
  *(unsigned char *)a1 = *(unsigned char *)v2;
  *(unsigned char *)(a1 + 1) = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 25) = v7;
  *(void *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 40) = v9;
  *(unsigned char *)(a1 + 41) = v10;
  *(unsigned char *)(a1 + 42) = v11;
  *(void *)(a1 + 48) = v13;
  *(void *)(a1 + 56) = v12;
  *(unsigned char *)(a1 + 64) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static NSXPCConnection.TestingOverrides.default.setter(char *a1)
{
  char v1 = *a1;
  char v2 = a1[1];
  uint64_t v4 = *((void *)a1 + 1);
  uint64_t v3 = *((void *)a1 + 2);
  char v5 = a1[24];
  uint64_t v6 = *((void *)a1 + 4);
  char v14 = a1[40];
  char v15 = a1[25];
  char v12 = a1[42];
  char v13 = a1[41];
  uint64_t v10 = *((void *)a1 + 7);
  uint64_t v11 = *((void *)a1 + 6);
  char v9 = a1[64];
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v7 = static NSXPCConnection.TestingOverrides.default;
  swift_beginAccess();
  *(unsigned char *)uint64_t v7 = v1;
  *(unsigned char *)(v7 + 1) = v2;
  *(void *)(v7 + 8) = v4;
  *(void *)(v7 + 16) = v3;
  *(unsigned char *)(v7 + 24) = v5;
  *(unsigned char *)(v7 + 25) = v15;
  *(void *)(v7 + 32) = v6;
  *(unsigned char *)(v7 + 40) = v14;
  *(unsigned char *)(v7 + 41) = v13;
  *(unsigned char *)(v7 + 42) = v12;
  *(void *)(v7 + 48) = v11;
  *(void *)(v7 + 56) = v10;
  *(unsigned char *)(v7 + 64) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t (*static NSXPCConnection.TestingOverrides.default.modify())()
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

void key path setter for NSXPCConnection.TestingOverrides.isEntitledToUsePublicAPIOverride : NSXPCConnection.TestingOverrides(char *a1, unsigned char *a2)
{
  char v3 = *a1;
  uint64_t v4 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v5 = NSClassFromString(v4);

  if (v5
    || (uint64_t v6 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
        Class v7 = NSClassFromString(v6),
        v6,
        v7))
  {
    *a2 = v3;
  }
  else
  {
    __break(1u);
  }
}

void NSXPCConnection.TestingOverrides.isEntitledToUsePublicAPIOverride.setter(char a1)
{
  char v3 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v4 = NSClassFromString(v3);

  if (v4
    || (Class v5 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
        Class v6 = NSClassFromString(v5),
        v5,
        v6))
  {
    *char v1 = a1 & 1;
  }
  else
  {
    __break(1u);
  }
}

void (*NSXPCConnection.TestingOverrides.isEntitledToUsePublicAPIOverride.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *v1;
  return NSXPCConnection.TestingOverrides.isEntitledToUsePublicAPIOverride.modify;
}

void NSXPCConnection.TestingOverrides.isEntitledToUsePublicAPIOverride.modify(uint64_t a1, char a2)
{
  char v4 = *(unsigned char *)(a1 + 8);
  Class v5 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v6 = (NSString *)NSClassFromString(v5);

  if (a2)
  {
    if (v6) {
      goto LABEL_7;
    }
    Class v6 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL);
    Class v7 = NSClassFromString(v6);

    if (v7) {
      goto LABEL_7;
    }
    __break(1u);
  }
  if (v6
    || (uint64_t v8 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
        Class v9 = NSClassFromString(v8),
        v8,
        v9))
  {
LABEL_7:
    **(unsigned char **)a1 = v4;
    return;
  }
  __break(1u);
}

void key path setter for NSXPCConnection.TestingOverrides.isEntitledToUsePrivateAPIOverride : NSXPCConnection.TestingOverrides(char *a1, uint64_t a2)
{
  char v3 = *a1;
  char v4 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v5 = NSClassFromString(v4);

  if (v5
    || (Class v6 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
        Class v7 = NSClassFromString(v6),
        v6,
        v7))
  {
    *(unsigned char *)(a2 + 1) = v3;
  }
  else
  {
    __break(1u);
  }
}

void NSXPCConnection.TestingOverrides.isEntitledToUsePrivateAPIOverride.setter(char a1)
{
  char v3 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v4 = NSClassFromString(v3);

  if (v4
    || (Class v5 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
        Class v6 = NSClassFromString(v5),
        v5,
        v6))
  {
    *(unsigned char *)(v1 + 1) = a1 & 1;
  }
  else
  {
    __break(1u);
  }
}

void (*NSXPCConnection.TestingOverrides.isEntitledToUsePrivateAPIOverride.modify(uint64_t a1))(unsigned char *a1, char a2)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 1);
  return NSXPCConnection.TestingOverrides.isEntitledToUsePrivateAPIOverride.modify;
}

void NSXPCConnection.TestingOverrides.isEntitledToUsePrivateAPIOverride.modify(unsigned char *a1, char a2)
{
  char v4 = a1[8];
  Class v5 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v6 = (NSString *)NSClassFromString(v5);

  if (a2)
  {
    if (v6) {
      goto LABEL_7;
    }
    Class v6 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL);
    Class v7 = NSClassFromString(v6);

    if (v7) {
      goto LABEL_7;
    }
    __break(1u);
  }
  if (v6
    || (uint64_t v8 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
        Class v9 = NSClassFromString(v8),
        v8,
        v9))
  {
LABEL_7:
    *(unsigned char *)(*(void *)a1 + 1) = v4;
    return;
  }
  __break(1u);
}

void key path setter for NSXPCConnection.TestingOverrides.bundleIdentifierOverride : NSXPCConnection.TestingOverrides(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  swift_bridgeObjectRetain();
  Class v5 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v6 = NSClassFromString(v5);

  if (v6
    || (Class v7 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
        Class v8 = NSClassFromString(v7),
        v7,
        v8))
  {
    swift_bridgeObjectRelease();
    *(void *)(a2 + 8) = v4;
    *(void *)(a2 + 16) = v3;
  }
  else
  {
    __break(1u);
  }
}

void NSXPCConnection.TestingOverrides.bundleIdentifierOverride.setter(uint64_t a1, uint64_t a2)
{
  Class v5 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v6 = NSClassFromString(v5);

  if (v6
    || (Class v7 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
        Class v8 = NSClassFromString(v7),
        v7,
        v8))
  {
    swift_bridgeObjectRelease();
    *(void *)(v2 + 8) = a1;
    *(void *)(v2 + 16) = a2;
  }
  else
  {
    __break(1u);
  }
}

void (*NSXPCConnection.TestingOverrides.bundleIdentifierOverride.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  uint64_t v3 = *(void *)(v1 + 16);
  *a1 = *(void *)(v1 + 8);
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return NSXPCConnection.TestingOverrides.bundleIdentifierOverride.modify;
}

void NSXPCConnection.TestingOverrides.bundleIdentifierOverride.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  if ((a2 & 1) == 0)
  {
    uint64_t v10 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
    Class v11 = NSClassFromString(v10);

    if (v11
      || (char v12 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
          Class v13 = NSClassFromString(v12),
          v12,
          v13))
    {
      uint64_t v14 = a1[2];
      swift_bridgeObjectRelease();
      *(void *)(v14 + 8) = v4;
      *(void *)(v14 + 16) = v3;
      return;
    }
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  Class v5 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v6 = NSClassFromString(v5);

  if (!v6)
  {
    Class v7 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL);
    Class v8 = NSClassFromString(v7);

    if (!v8)
    {
      __break(1u);
LABEL_11:
      __break(1u);
      return;
    }
  }
  uint64_t v9 = a1[2];
  swift_bridgeObjectRelease();
  *(void *)(v9 + 8) = v4;
  *(void *)(v9 + 16) = v3;
  swift_bridgeObjectRelease();
}

void key path setter for NSXPCConnection.TestingOverrides.isEntitledToAccessAllSessions : NSXPCConnection.TestingOverrides(char *a1, uint64_t a2)
{
  char v3 = *a1;
  uint64_t v4 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v5 = NSClassFromString(v4);

  if (v5
    || (Class v6 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
        Class v7 = NSClassFromString(v6),
        v6,
        v7))
  {
    *(unsigned char *)(a2 + 24) = v3;
  }
  else
  {
    __break(1u);
  }
}

void NSXPCConnection.TestingOverrides.isEntitledToAccessAllSessions.setter(char a1)
{
  char v3 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v4 = NSClassFromString(v3);

  if (v4
    || (Class v5 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
        Class v6 = NSClassFromString(v5),
        v5,
        v6))
  {
    *(unsigned char *)(v1 + 24) = a1 & 1;
  }
  else
  {
    __break(1u);
  }
}

void (*NSXPCConnection.TestingOverrides.isEntitledToAccessAllSessions.modify(uint64_t a1))(unsigned char *a1, char a2)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 24);
  return NSXPCConnection.TestingOverrides.isEntitledToAccessAllSessions.modify;
}

void NSXPCConnection.TestingOverrides.isEntitledToAccessAllSessions.modify(unsigned char *a1, char a2)
{
  char v4 = a1[8];
  Class v5 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v6 = (NSString *)NSClassFromString(v5);

  if (a2)
  {
    if (v6) {
      goto LABEL_7;
    }
    Class v6 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL);
    Class v7 = NSClassFromString(v6);

    if (v7) {
      goto LABEL_7;
    }
    __break(1u);
  }
  if (v6
    || (Class v8 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
        Class v9 = NSClassFromString(v8),
        v8,
        v9))
  {
LABEL_7:
    *(unsigned char *)(*(void *)a1 + 24) = v4;
    return;
  }
  __break(1u);
}

void key path setter for NSXPCConnection.TestingOverrides.isEntitledToForWebFallback : NSXPCConnection.TestingOverrides(char *a1, uint64_t a2)
{
  char v3 = *a1;
  char v4 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v5 = NSClassFromString(v4);

  if (v5
    || (Class v6 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
        Class v7 = NSClassFromString(v6),
        v6,
        v7))
  {
    *(unsigned char *)(a2 + 25) = v3;
  }
  else
  {
    __break(1u);
  }
}

void NSXPCConnection.TestingOverrides.isEntitledToForWebFallback.setter(char a1)
{
  char v3 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v4 = NSClassFromString(v3);

  if (v4
    || (Class v5 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
        Class v6 = NSClassFromString(v5),
        v5,
        v6))
  {
    *(unsigned char *)(v1 + 25) = a1 & 1;
  }
  else
  {
    __break(1u);
  }
}

void (*NSXPCConnection.TestingOverrides.isEntitledToForWebFallback.modify(uint64_t a1))(unsigned char *a1, char a2)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 25);
  return NSXPCConnection.TestingOverrides.isEntitledToForWebFallback.modify;
}

void NSXPCConnection.TestingOverrides.isEntitledToForWebFallback.modify(unsigned char *a1, char a2)
{
  char v4 = a1[8];
  Class v5 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v6 = (NSString *)NSClassFromString(v5);

  if (a2)
  {
    if (v6) {
      goto LABEL_7;
    }
    Class v6 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL);
    Class v7 = NSClassFromString(v6);

    if (v7) {
      goto LABEL_7;
    }
    __break(1u);
  }
  if (v6
    || (Class v8 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
        Class v9 = NSClassFromString(v8),
        v8,
        v9))
  {
LABEL_7:
    *(unsigned char *)(*(void *)a1 + 25) = v4;
    return;
  }
  __break(1u);
}

void key path setter for NSXPCConnection.TestingOverrides.definedSystemActivityIdentifiers : NSXPCConnection.TestingOverrides(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  swift_bridgeObjectRetain();
  char v4 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v5 = NSClassFromString(v4);

  if (v5
    || (Class v6 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
        Class v7 = NSClassFromString(v6),
        v6,
        v7))
  {
    swift_bridgeObjectRelease();
    *(void *)(a2 + 32) = v3;
  }
  else
  {
    __break(1u);
  }
}

void NSXPCConnection.TestingOverrides.definedSystemActivityIdentifiers.setter(uint64_t a1)
{
  uint64_t v3 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v4 = NSClassFromString(v3);

  if (v4
    || (Class v5 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
        Class v6 = NSClassFromString(v5),
        v5,
        v6))
  {
    swift_bridgeObjectRelease();
    *(void *)(v1 + 32) = a1;
  }
  else
  {
    __break(1u);
  }
}

void (*NSXPCConnection.TestingOverrides.definedSystemActivityIdentifiers.modify(void *a1))(uint64_t *a1, char a2)
{
  *a1 = *(void *)(v1 + 32);
  a1[1] = v1;
  swift_bridgeObjectRetain();
  return NSXPCConnection.TestingOverrides.definedSystemActivityIdentifiers.modify;
}

void NSXPCConnection.TestingOverrides.definedSystemActivityIdentifiers.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  if ((a2 & 1) == 0)
  {
    Class v9 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
    Class v10 = NSClassFromString(v9);

    if (v10
      || (Class v11 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
          Class v12 = NSClassFromString(v11),
          v11,
          v12))
    {
      uint64_t v13 = a1[1];
      swift_bridgeObjectRelease();
      *(void *)(v13 + 32) = v3;
      return;
    }
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  Class v4 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v5 = NSClassFromString(v4);

  if (!v5)
  {
    Class v6 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL);
    Class v7 = NSClassFromString(v6);

    if (!v7)
    {
      __break(1u);
LABEL_11:
      __break(1u);
      return;
    }
  }
  uint64_t v8 = a1[1];
  swift_bridgeObjectRelease();
  *(void *)(v8 + 32) = v3;
  swift_bridgeObjectRelease();
}

void key path setter for NSXPCConnection.TestingOverrides.isEntitledToAccessUnaliasedIdentifiers : NSXPCConnection.TestingOverrides(char *a1, uint64_t a2)
{
  char v3 = *a1;
  Class v4 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v5 = NSClassFromString(v4);

  if (v5
    || (Class v6 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
        Class v7 = NSClassFromString(v6),
        v6,
        v7))
  {
    *(unsigned char *)(a2 + 40) = v3;
  }
  else
  {
    __break(1u);
  }
}

void NSXPCConnection.TestingOverrides.isEntitledToAccessUnaliasedIdentifiers.setter(char a1)
{
  char v3 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v4 = NSClassFromString(v3);

  if (v4
    || (Class v5 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
        Class v6 = NSClassFromString(v5),
        v5,
        v6))
  {
    *(unsigned char *)(v1 + 40) = a1 & 1;
  }
  else
  {
    __break(1u);
  }
}

void (*NSXPCConnection.TestingOverrides.isEntitledToAccessUnaliasedIdentifiers.modify(uint64_t a1))(unsigned char *a1, char a2)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 40);
  return NSXPCConnection.TestingOverrides.isEntitledToAccessUnaliasedIdentifiers.modify;
}

void NSXPCConnection.TestingOverrides.isEntitledToAccessUnaliasedIdentifiers.modify(unsigned char *a1, char a2)
{
  char v4 = a1[8];
  Class v5 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v6 = (NSString *)NSClassFromString(v5);

  if (a2)
  {
    if (v6) {
      goto LABEL_7;
    }
    Class v6 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL);
    Class v7 = NSClassFromString(v6);

    if (v7) {
      goto LABEL_7;
    }
    __break(1u);
  }
  if (v6
    || (uint64_t v8 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
        Class v9 = NSClassFromString(v8),
        v8,
        v9))
  {
LABEL_7:
    *(unsigned char *)(*(void *)a1 + 40) = v4;
    return;
  }
  __break(1u);
}

void key path setter for NSXPCConnection.TestingOverrides.isEntitledToUseGameCenter : NSXPCConnection.TestingOverrides(char *a1, uint64_t a2)
{
  char v3 = *a1;
  char v4 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v5 = NSClassFromString(v4);

  if (v5
    || (Class v6 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
        Class v7 = NSClassFromString(v6),
        v6,
        v7))
  {
    *(unsigned char *)(a2 + 41) = v3;
  }
  else
  {
    __break(1u);
  }
}

void NSXPCConnection.TestingOverrides.isEntitledToUseGameCenter.setter(char a1)
{
  char v3 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v4 = NSClassFromString(v3);

  if (v4
    || (Class v5 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
        Class v6 = NSClassFromString(v5),
        v5,
        v6))
  {
    *(unsigned char *)(v1 + 41) = a1 & 1;
  }
  else
  {
    __break(1u);
  }
}

void (*NSXPCConnection.TestingOverrides.isEntitledToUseGameCenter.modify(uint64_t a1))(unsigned char *a1, char a2)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 41);
  return NSXPCConnection.TestingOverrides.isEntitledToUseGameCenter.modify;
}

void NSXPCConnection.TestingOverrides.isEntitledToUseGameCenter.modify(unsigned char *a1, char a2)
{
  char v4 = a1[8];
  Class v5 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v6 = (NSString *)NSClassFromString(v5);

  if (a2)
  {
    if (v6) {
      goto LABEL_7;
    }
    Class v6 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL);
    Class v7 = NSClassFromString(v6);

    if (v7) {
      goto LABEL_7;
    }
    __break(1u);
  }
  if (v6
    || (uint64_t v8 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
        Class v9 = NSClassFromString(v8),
        v8,
        v9))
  {
LABEL_7:
    *(unsigned char *)(*(void *)a1 + 41) = v4;
    return;
  }
  __break(1u);
}

void key path setter for NSXPCConnection.TestingOverrides.isEntitledToProvideCustomEndpoint : NSXPCConnection.TestingOverrides(char *a1, uint64_t a2)
{
  char v3 = *a1;
  char v4 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v5 = NSClassFromString(v4);

  if (v5
    || (Class v6 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
        Class v7 = NSClassFromString(v6),
        v6,
        v7))
  {
    *(unsigned char *)(a2 + 42) = v3;
  }
  else
  {
    __break(1u);
  }
}

void NSXPCConnection.TestingOverrides.isEntitledToProvideCustomEndpoint.setter(char a1)
{
  char v3 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v4 = NSClassFromString(v3);

  if (v4
    || (Class v5 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
        Class v6 = NSClassFromString(v5),
        v5,
        v6))
  {
    *(unsigned char *)(v1 + 42) = a1 & 1;
  }
  else
  {
    __break(1u);
  }
}

void (*NSXPCConnection.TestingOverrides.isEntitledToProvideCustomEndpoint.modify(uint64_t a1))(unsigned char *a1, char a2)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 42);
  return NSXPCConnection.TestingOverrides.isEntitledToProvideCustomEndpoint.modify;
}

void NSXPCConnection.TestingOverrides.isEntitledToProvideCustomEndpoint.modify(unsigned char *a1, char a2)
{
  char v4 = a1[8];
  Class v5 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v6 = (NSString *)NSClassFromString(v5);

  if (a2)
  {
    if (v6) {
      goto LABEL_7;
    }
    Class v6 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL);
    Class v7 = NSClassFromString(v6);

    if (v7) {
      goto LABEL_7;
    }
    __break(1u);
  }
  if (v6
    || (uint64_t v8 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
        Class v9 = NSClassFromString(v8),
        v8,
        v9))
  {
LABEL_7:
    *(unsigned char *)(*(void *)a1 + 42) = v4;
    return;
  }
  __break(1u);
}

void key path setter for NSXPCConnection.TestingOverrides.stableAppIdentifier : NSXPCConnection.TestingOverrides(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  swift_bridgeObjectRetain();
  Class v5 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v6 = NSClassFromString(v5);

  if (v6
    || (Class v7 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
        Class v8 = NSClassFromString(v7),
        v7,
        v8))
  {
    swift_bridgeObjectRelease();
    *(void *)(a2 + 48) = v4;
    *(void *)(a2 + 56) = v3;
  }
  else
  {
    __break(1u);
  }
}

void NSXPCConnection.TestingOverrides.stableAppIdentifier.setter(uint64_t a1, uint64_t a2)
{
  Class v5 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v6 = NSClassFromString(v5);

  if (v6
    || (Class v7 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
        Class v8 = NSClassFromString(v7),
        v7,
        v8))
  {
    swift_bridgeObjectRelease();
    *(void *)(v2 + 48) = a1;
    *(void *)(v2 + 56) = a2;
  }
  else
  {
    __break(1u);
  }
}

void (*NSXPCConnection.TestingOverrides.stableAppIdentifier.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  uint64_t v3 = *(void *)(v1 + 56);
  *a1 = *(void *)(v1 + 48);
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return NSXPCConnection.TestingOverrides.stableAppIdentifier.modify;
}

void NSXPCConnection.TestingOverrides.stableAppIdentifier.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  if ((a2 & 1) == 0)
  {
    Class v10 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
    Class v11 = NSClassFromString(v10);

    if (v11
      || (Class v12 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
          Class v13 = NSClassFromString(v12),
          v12,
          v13))
    {
      uint64_t v14 = a1[2];
      swift_bridgeObjectRelease();
      *(void *)(v14 + 48) = v4;
      *(void *)(v14 + 56) = v3;
      return;
    }
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  Class v5 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v6 = NSClassFromString(v5);

  if (!v6)
  {
    Class v7 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL);
    Class v8 = NSClassFromString(v7);

    if (!v8)
    {
      __break(1u);
LABEL_11:
      __break(1u);
      return;
    }
  }
  uint64_t v9 = a1[2];
  swift_bridgeObjectRelease();
  *(void *)(v9 + 48) = v4;
  *(void *)(v9 + 56) = v3;
  swift_bridgeObjectRelease();
}

void key path setter for NSXPCConnection.TestingOverrides.isEntitledToUseNearbyInvitationsOverride : NSXPCConnection.TestingOverrides(char *a1, uint64_t a2)
{
  char v3 = *a1;
  uint64_t v4 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v5 = NSClassFromString(v4);

  if (v5
    || (Class v6 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
        Class v7 = NSClassFromString(v6),
        v6,
        v7))
  {
    *(unsigned char *)(a2 + 64) = v3;
  }
  else
  {
    __break(1u);
  }
}

void NSXPCConnection.TestingOverrides.isEntitledToUseNearbyInvitationsOverride.setter(char a1)
{
  char v3 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v4 = NSClassFromString(v3);

  if (v4
    || (Class v5 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
        Class v6 = NSClassFromString(v5),
        v5,
        v6))
  {
    *(unsigned char *)(v1 + 64) = a1 & 1;
  }
  else
  {
    __break(1u);
  }
}

void (*NSXPCConnection.TestingOverrides.isEntitledToUseNearbyInvitationsOverride.modify(uint64_t a1))(unsigned char *a1, char a2)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 64);
  return NSXPCConnection.TestingOverrides.isEntitledToUseNearbyInvitationsOverride.modify;
}

void NSXPCConnection.TestingOverrides.isEntitledToUseNearbyInvitationsOverride.modify(unsigned char *a1, char a2)
{
  char v4 = a1[8];
  Class v5 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v6 = (NSString *)NSClassFromString(v5);

  if (a2)
  {
    if (v6) {
      goto LABEL_7;
    }
    Class v6 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL);
    Class v7 = NSClassFromString(v6);

    if (v7) {
      goto LABEL_7;
    }
    __break(1u);
  }
  if (v6
    || (Class v8 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
        Class v9 = NSClassFromString(v8),
        v8,
        v9))
  {
LABEL_7:
    *(unsigned char *)(*(void *)a1 + 64) = v4;
    return;
  }
  __break(1u);
}

uint64_t default argument 0 of NSXPCConnection.TestingOverrides.init(isEntitledToUsePublicAPIOverride:isEntitledToUsePrivateAPIOverride:bundleIdentifierOverride:isEntitledToAccessAllSessions:isEntitledToForWebFallback:definedSystemActivityIdentifiers:isEntitledToAccessUnaliasedIdentifiers:isEntitledToUseGameCenter:isEntitledToProvideCustomEndpoint:stableAppIdentifier:isEntitledToUseNearbyInvitationsOverride:)()
{
  return 0;
}

uint64_t default argument 1 of NSXPCConnection.TestingOverrides.init(isEntitledToUsePublicAPIOverride:isEntitledToUsePrivateAPIOverride:bundleIdentifierOverride:isEntitledToAccessAllSessions:isEntitledToForWebFallback:definedSystemActivityIdentifiers:isEntitledToAccessUnaliasedIdentifiers:isEntitledToUseGameCenter:isEntitledToProvideCustomEndpoint:stableAppIdentifier:isEntitledToUseNearbyInvitationsOverride:)()
{
  return 0;
}

uint64_t default argument 3 of NSXPCConnection.TestingOverrides.init(isEntitledToUsePublicAPIOverride:isEntitledToUsePrivateAPIOverride:bundleIdentifierOverride:isEntitledToAccessAllSessions:isEntitledToForWebFallback:definedSystemActivityIdentifiers:isEntitledToAccessUnaliasedIdentifiers:isEntitledToUseGameCenter:isEntitledToProvideCustomEndpoint:stableAppIdentifier:isEntitledToUseNearbyInvitationsOverride:)()
{
  return 0;
}

uint64_t default argument 4 of NSXPCConnection.TestingOverrides.init(isEntitledToUsePublicAPIOverride:isEntitledToUsePrivateAPIOverride:bundleIdentifierOverride:isEntitledToAccessAllSessions:isEntitledToForWebFallback:definedSystemActivityIdentifiers:isEntitledToAccessUnaliasedIdentifiers:isEntitledToUseGameCenter:isEntitledToProvideCustomEndpoint:stableAppIdentifier:isEntitledToUseNearbyInvitationsOverride:)()
{
  return 0;
}

uint64_t default argument 5 of NSXPCConnection.TestingOverrides.init(isEntitledToUsePublicAPIOverride:isEntitledToUsePrivateAPIOverride:bundleIdentifierOverride:isEntitledToAccessAllSessions:isEntitledToForWebFallback:definedSystemActivityIdentifiers:isEntitledToAccessUnaliasedIdentifiers:isEntitledToUseGameCenter:isEntitledToProvideCustomEndpoint:stableAppIdentifier:isEntitledToUseNearbyInvitationsOverride:)()
{
  return MEMORY[0x1E4FBC860];
}

uint64_t default argument 6 of NSXPCConnection.TestingOverrides.init(isEntitledToUsePublicAPIOverride:isEntitledToUsePrivateAPIOverride:bundleIdentifierOverride:isEntitledToAccessAllSessions:isEntitledToForWebFallback:definedSystemActivityIdentifiers:isEntitledToAccessUnaliasedIdentifiers:isEntitledToUseGameCenter:isEntitledToProvideCustomEndpoint:stableAppIdentifier:isEntitledToUseNearbyInvitationsOverride:)()
{
  return 0;
}

uint64_t default argument 7 of NSXPCConnection.TestingOverrides.init(isEntitledToUsePublicAPIOverride:isEntitledToUsePrivateAPIOverride:bundleIdentifierOverride:isEntitledToAccessAllSessions:isEntitledToForWebFallback:definedSystemActivityIdentifiers:isEntitledToAccessUnaliasedIdentifiers:isEntitledToUseGameCenter:isEntitledToProvideCustomEndpoint:stableAppIdentifier:isEntitledToUseNearbyInvitationsOverride:)()
{
  return 0;
}

uint64_t default argument 8 of NSXPCConnection.TestingOverrides.init(isEntitledToUsePublicAPIOverride:isEntitledToUsePrivateAPIOverride:bundleIdentifierOverride:isEntitledToAccessAllSessions:isEntitledToForWebFallback:definedSystemActivityIdentifiers:isEntitledToAccessUnaliasedIdentifiers:isEntitledToUseGameCenter:isEntitledToProvideCustomEndpoint:stableAppIdentifier:isEntitledToUseNearbyInvitationsOverride:)()
{
  return 0;
}

uint64_t default argument 9 of NSXPCConnection.TestingOverrides.init(isEntitledToUsePublicAPIOverride:isEntitledToUsePrivateAPIOverride:bundleIdentifierOverride:isEntitledToAccessAllSessions:isEntitledToForWebFallback:definedSystemActivityIdentifiers:isEntitledToAccessUnaliasedIdentifiers:isEntitledToUseGameCenter:isEntitledToProvideCustomEndpoint:stableAppIdentifier:isEntitledToUseNearbyInvitationsOverride:)()
{
  return 0;
}

uint64_t default argument 10 of NSXPCConnection.TestingOverrides.init(isEntitledToUsePublicAPIOverride:isEntitledToUsePrivateAPIOverride:bundleIdentifierOverride:isEntitledToAccessAllSessions:isEntitledToForWebFallback:definedSystemActivityIdentifiers:isEntitledToAccessUnaliasedIdentifiers:isEntitledToUseGameCenter:isEntitledToProvideCustomEndpoint:stableAppIdentifier:isEntitledToUseNearbyInvitationsOverride:)()
{
  return 0;
}

uint64_t NSXPCConnection.TestingOverrides.init(isEntitledToUsePublicAPIOverride:isEntitledToUsePrivateAPIOverride:bundleIdentifierOverride:isEntitledToAccessAllSessions:isEntitledToForWebFallback:definedSystemActivityIdentifiers:isEntitledToAccessUnaliasedIdentifiers:isEntitledToUseGameCenter:isEntitledToProvideCustomEndpoint:stableAppIdentifier:isEntitledToUseNearbyInvitationsOverride:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, char a10, char a11, uint64_t a12, uint64_t a13, char a14)
{
  *(unsigned char *)a9 = result;
  *(unsigned char *)(a9 + 1) = a2;
  *(void *)(a9 + 8) = a3;
  *(void *)(a9 + 16) = a4;
  *(unsigned char *)(a9 + 24) = a5;
  *(unsigned char *)(a9 + 25) = a6;
  *(void *)(a9 + 32) = a7;
  *(unsigned char *)(a9 + 40) = a8;
  *(unsigned char *)(a9 + 41) = a10;
  *(unsigned char *)(a9 + 42) = a11;
  *(void *)(a9 + 48) = a12;
  *(void *)(a9 + 56) = a13;
  *(unsigned char *)(a9 + 64) = a14;
  return result;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unsigned char *sub_1B108B9F8@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1B108BA08@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 1);
  return result;
}

uint64_t sub_1B108BA18@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B108BA28@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 24);
  return result;
}

uint64_t sub_1B108BA38@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 25);
  return result;
}

uint64_t sub_1B108BA48@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(a1 + 32);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B108BA58@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 40);
  return result;
}

uint64_t sub_1B108BA68@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 41);
  return result;
}

uint64_t sub_1B108BA78@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 42);
  return result;
}

uint64_t sub_1B108BA88@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B108BA98@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 64);
  return result;
}

uint64_t destroy for NSXPCConnection.TestingOverrides()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NSXPCConnection.TestingOverrides(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NSXPCConnection.TestingOverrides(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

__n128 __swift_memcpy65_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for NSXPCConnection.TestingOverrides(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for NSXPCConnection.TestingOverrides(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 65)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NSXPCConnection.TestingOverrides(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 65) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NSXPCConnection.TestingOverrides()
{
  return &type metadata for NSXPCConnection.TestingOverrides;
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned PresenceSessionConnectionInfo?, @unowned NSError?) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

char *BackgroundSessionManagerHostConnection.__allocating_init(connection:queue:dataSource:)(void *a1, void *a2, uint64_t a3)
{
  id v7 = objc_allocWithZone(v3);
  return BackgroundSessionManagerHostConnection.init(connection:queue:dataSource:)(a1, a2, a3);
}

uint64_t BackgroundSessionManagerHostConnection.abcReporter.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of UserNotificationCenter(v1 + direct field offset for BackgroundSessionManagerHostConnection.abcReporter, a1);
}

char *BackgroundSessionManagerHostConnection.init(connection:queue:dataSource:)(void *a1, void *a2, uint64_t a3)
{
  outlined init with copy of UserNotificationCenter(a3, (uint64_t)v3 + direct field offset for BackgroundSessionManagerHostConnection.dataSource);
  uint64_t v7 = type metadata accessor for ABCReporter();
  Class v8 = (void *)swift_allocObject();
  id v9 = objc_allocWithZone(MEMORY[0x1E4FA8AF0]);
  Class v10 = v3;
  void v8[2] = objc_msgSend(v9, sel_init);
  v8[3] = 0x636E795374736146;
  v8[4] = 0xE800000000000000;
  v8[5] = 0x65636976726553;
  v8[6] = 0xE700000000000000;
  Class v11 = &v10[direct field offset for BackgroundSessionManagerHostConnection.abcReporter];
  *((void *)v11 + 3) = v7;
  *((void *)v11 + 4) = &protocol witness table for ABCReporter;
  *(void *)Class v11 = v8;

  Class v12 = specialized XPCHostConnection.init(connection:queue:)(a1, a2);
  Class v13 = v12;
  __swift_destroy_boxed_opaque_existential_1Tm(a3);
  if (v12) {

  }
  return v12;
}

void BackgroundSessionManagerHostConnection.__allocating_init(connection:queue:)()
{
}

void BackgroundSessionManagerHostConnection.init(connection:queue:)()
{
}

uint64_t BackgroundSessionManagerHostConnection.__ivar_destroyer()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + direct field offset for BackgroundSessionManagerHostConnection.dataSource);
  uint64_t v1 = v0 + direct field offset for BackgroundSessionManagerHostConnection.abcReporter;
  return __swift_destroy_boxed_opaque_existential_1Tm(v1);
}

id BackgroundSessionManagerHostConnection.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc BackgroundSessionManagerHostConnection.__ivar_destroyer(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + direct field offset for BackgroundSessionManagerHostConnection.dataSource);
  uint64_t v2 = a1 + direct field offset for BackgroundSessionManagerHostConnection.abcReporter;
  return __swift_destroy_boxed_opaque_existential_1Tm(v2);
}

uint64_t static BackgroundSessionManagerHostConnection.Errors.== infix(_:_:)()
{
  return 1;
}

void BackgroundSessionManagerHostConnection.Errors.hash(into:)()
{
}

Swift::Int BackgroundSessionManagerHostConnection.Errors.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t BackgroundSessionManagerHostConnection.begin(request:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v7 - 8);
  id v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TaskPriority();
  Class v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
  v11(v9, 1, 1, v10);
  Class v12 = (void *)swift_allocObject();
  long long v12[2] = 0;
  void v12[3] = 0;
  v12[4] = v3;
  uint64_t v12[5] = a1;
  v12[6] = a2;
  v12[7] = a3;
  Class v13 = v3;
  id v14 = a1;
  swift_retain();
  uint64_t v15 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundSessionManagerHostConnection.begin(request:completion:), (uint64_t)v12);
  uint64_t v16 = (uint64_t)&v13[direct field offset for BackgroundSessionManagerHostConnection.abcReporter];
  id v17 = &v13[direct field offset for XPCHostConnection.bundleIdentifier];
  uint64_t v19 = *(void *)&v13[direct field offset for XPCHostConnection.bundleIdentifier];
  uint64_t v18 = *((void *)v17 + 1);
  v11(v9, 1, 1, v10);
  outlined init with copy of UserNotificationCenter(v16, (uint64_t)v23);
  uint64_t v20 = (void *)swift_allocObject();
  void v20[2] = 0;
  void v20[3] = 0;
  v20[4] = v15;
  void v20[5] = 0xD00000000000001ALL;
  v20[6] = 0x80000001B1161EA0;
  v20[7] = v19;
  v20[8] = v18;
  outlined init with take of BackgroundSessionManagerDataSource(v23, (uint64_t)(v20 + 9));
  swift_retain();
  swift_bridgeObjectRetain();
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for specialized closure #1 in Task<>.reportFailure(on:function:process:), (uint64_t)v20);
  swift_release();
  outlined destroy of TaskPriority?((uint64_t)v9);
  return swift_release();
}

uint64_t closure #1 in BackgroundSessionManagerHostConnection.begin(request:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  void v7[5] = a7;
  long long v7[2] = a4;
  void v7[3] = a5;
  return MEMORY[0x1F4188298](closure #1 in BackgroundSessionManagerHostConnection.begin(request:completion:), 0, 0);
}

uint64_t closure #1 in BackgroundSessionManagerHostConnection.begin(request:completion:)()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 16);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  *uint64_t v2 = v0;
  uint64_t v3 = MEMORY[0x1E4FBC848];
  v2[1] = closure #1 in BackgroundSessionManagerHostConnection.begin(request:completion:);
  return MEMORY[0x1F4188160](v2, 0, 0, 0xD00000000000001ALL, 0x80000001B1161EA0, partial apply for closure #1 in closure #1 in BackgroundSessionManagerHostConnection.begin(request:completion:), v1, v3 + 8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = closure #1 in BackgroundSessionManagerHostConnection.begin(request:completion:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = closure #1 in BackgroundSessionManagerHostConnection.begin(request:completion:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void))(v0 + 32))(0);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  void *v1;
  void (*v2)(void *);
  id v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = (void *)v0[8];
  uint64_t v2 = (void (*)(void *))v0[4];
  swift_task_dealloc();
  uint64_t v3 = v1;
  v2(v1);

  swift_willThrow();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t partial apply for closure #1 in BackgroundSessionManagerHostConnection.begin(request:completion:)()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  long long v4 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_OWORD *)(v2 + 16) = v3;
  *(_OWORD *)(v2 + 32) = v4;
  return MEMORY[0x1F4188298](closure #1 in BackgroundSessionManagerHostConnection.begin(request:completion:), 0, 0);
}

uint64_t closure #1 in closure #1 in BackgroundSessionManagerHostConnection.begin(request:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = *(void *)(a2 + direct field offset for BackgroundSessionManagerHostConnection.dataSource + 24);
  uint64_t v9 = *(void *)(a2 + direct field offset for BackgroundSessionManagerHostConnection.dataSource + 32);
  id v17 = __swift_project_boxed_opaque_existential_1((void *)(a2 + direct field offset for BackgroundSessionManagerHostConnection.dataSource), v8);
  uint64_t v10 = *(void *)(a2 + direct field offset for XPCHostConnection.bundleIdentifier);
  uint64_t v16 = *(void *)(a2 + direct field offset for XPCHostConnection.bundleIdentifier + 8);
  id v11 = objc_msgSend(*(id *)(a2 + direct field offset for XPCHostConnection.connection), sel_processIdentifier);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  unint64_t v12 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v13 + v12, (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t, id, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v9 + 32))(v18, v10, v16, v11, partial apply for closure #1 in closure #1 in closure #2 in BackgroundSessionManagerHostConnection.updateMembers(identifier:members:completion:), v13, v8, v9);
  return swift_release();
}

uint64_t BackgroundSessionManagerHostConnection.leave(identifier:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = a2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v9 - 8);
  id v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for TaskPriority();
  uint64_t v13 = *(void *)(v12 - 8);
  v24[0] = *(void *)(v13 + 56);
  v24[1] = v13 + 56;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v24[0])(v11, 1, 1, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v14 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v15 = (char *)swift_allocObject();
  *((void *)v15 + 2) = 0;
  *((void *)v15 + 3) = 0;
  *((void *)v15 + 4) = v3;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v15[v14], (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  uint64_t v16 = &v15[(v8 + v14 + 7) & 0xFFFFFFFFFFFFFFF8];
  *(void *)uint64_t v16 = v25;
  *((void *)v16 + 1) = a3;
  id v17 = v3;
  swift_retain();
  uint64_t v18 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v11, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundSessionManagerHostConnection.leave(identifier:completion:), (uint64_t)v15);
  uint64_t v19 = (uint64_t)&v17[direct field offset for BackgroundSessionManagerHostConnection.abcReporter];
  uint64_t v21 = *(void *)&v17[direct field offset for XPCHostConnection.bundleIdentifier];
  uint64_t v20 = *(void *)&v17[direct field offset for XPCHostConnection.bundleIdentifier + 8];
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v24[0])(v11, 1, 1, v12);
  outlined init with copy of UserNotificationCenter(v19, (uint64_t)v26);
  uint64_t v22 = (void *)swift_allocObject();
  void v22[2] = 0;
  _OWORD v22[3] = 0;
  v22[4] = v18;
  v22[5] = 0xD00000000000001DLL;
  v22[6] = 0x80000001B1161EC0;
  v22[7] = v21;
  v22[8] = v20;
  outlined init with take of BackgroundSessionManagerDataSource(v26, (uint64_t)(v22 + 9));
  swift_retain();
  swift_bridgeObjectRetain();
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v11, (uint64_t)&closure #1 in Task<>.reportFailure(on:function:process:)specialized partial apply, (uint64_t)v22);
  swift_release();
  outlined destroy of TaskPriority?((uint64_t)v11);
  return swift_release();
}

uint64_t closure #1 in BackgroundSessionManagerHostConnection.leave(identifier:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  void v7[5] = a7;
  long long v7[2] = a4;
  void v7[3] = a5;
  return MEMORY[0x1F4188298](closure #1 in BackgroundSessionManagerHostConnection.leave(identifier:completion:), 0, 0);
}

uint64_t closure #1 in BackgroundSessionManagerHostConnection.leave(identifier:completion:)()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 16);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  *uint64_t v2 = v0;
  uint64_t v3 = MEMORY[0x1E4FBC848];
  v2[1] = closure #1 in BackgroundSessionManagerHostConnection.leave(identifier:completion:);
  return MEMORY[0x1F4188160](v2, 0, 0, 0xD00000000000001DLL, 0x80000001B1161EC0, partial apply for closure #1 in closure #1 in BackgroundSessionManagerHostConnection.leave(identifier:completion:), v1, v3 + 8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = closure #1 in BackgroundSessionManagerHostConnection.leave(identifier:completion:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = closure #1 in BackgroundSessionManagerHostConnection.leave(identifier:completion:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1B108D17C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_unknownObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return MEMORY[0x1F4186498](v0, v6, v5);
}

uint64_t partial apply for closure #1 in BackgroundSessionManagerHostConnection.leave(identifier:completion:)()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v6 = v0 + v3;
  uint64_t v7 = swift_task_alloc();
  long long v8 = *(_OWORD *)(v0 + v4);
  *(void *)(v1 + 16) = v7;
  *(void *)uint64_t v7 = v1;
  *(void *)(v7 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_OWORD *)(v7 + 32) = v8;
  *(void *)(v7 + 16) = v5;
  *(void *)(v7 + 24) = v6;
  return MEMORY[0x1F4188298](closure #1 in BackgroundSessionManagerHostConnection.leave(identifier:completion:), 0, 0);
}

uint64_t closure #1 in closure #1 in BackgroundSessionManagerHostConnection.leave(identifier:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = *(void *)(a2 + direct field offset for BackgroundSessionManagerHostConnection.dataSource + 24);
  uint64_t v10 = *(void *)(a2 + direct field offset for BackgroundSessionManagerHostConnection.dataSource + 32);
  __swift_project_boxed_opaque_existential_1((void *)(a2 + direct field offset for BackgroundSessionManagerHostConnection.dataSource), v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v12 + v11, (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  (*(void (**)(uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v10 + 40))(a3, partial apply for closure #1 in closure #1 in closure #2 in BackgroundSessionManagerHostConnection.updateMembers(identifier:members:completion:), v12, v9, v10);
  return swift_release();
}

void BackgroundSessionManagerHostConnection.updateMembers(identifier:members:completion:)(uint64_t a1, uint64_t a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t v45 = (char *)a1;
  uint64_t v46 = a3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = specialized Sequence.compactMap<A>(_:)(a2);
  uint64_t v15 = specialized Set.init<A>(_:)(v14);
  swift_bridgeObjectRelease();
  if ((v15 & 0xC000000000000001) != 0)
  {
    uint64_t v16 = __CocoaSet.count.getter();
    if ((a2 & 0xC000000000000001) != 0) {
      goto LABEL_3;
    }
LABEL_6:
    if (v16 == *(void *)(a2 + 16)) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  uint64_t v16 = *(void *)(v15 + 16);
  if ((a2 & 0xC000000000000001) == 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (v16 == __CocoaSet.count.getter())
  {
LABEL_4:
    uint64_t v43 = type metadata accessor for TaskPriority();
    uint64_t v17 = *(void *)(v43 - 8);
    unint64_t v42 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
    uint64_t v44 = v17 + 56;
    v42(v13, 1, 1, v43);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))((char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v45, v7);
    uint64_t v18 = a4;
    unint64_t v19 = (*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    unint64_t v20 = (v9 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v45 = v13;
    uint64_t v21 = (char *)swift_allocObject();
    *((void *)v21 + 2) = 0;
    *((void *)v21 + 3) = 0;
    *((void *)v21 + 4) = v4;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v21[v19], v10, v7);
    *(void *)&v21[v20] = v15;
    uint64_t v22 = (void (**)(void))&v21[(v20 + 15) & 0xFFFFFFFFFFFFFFF8];
    *uint64_t v22 = v46;
    v22[1] = v18;
    uint64_t v23 = v4;
    swift_retain();
    uint64_t v24 = (uint64_t)v45;
    uint64_t v25 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v45, (uint64_t)&async function pointer to partial apply for closure #2 in BackgroundSessionManagerHostConnection.updateMembers(identifier:members:completion:), (uint64_t)v21);
    uint64_t v26 = (uint64_t)&v23[direct field offset for BackgroundSessionManagerHostConnection.abcReporter];
    uint64_t v28 = *(void *)&v23[direct field offset for XPCHostConnection.bundleIdentifier];
    uint64_t v27 = *(void *)&v23[direct field offset for XPCHostConnection.bundleIdentifier + 8];
    v42((char *)v24, 1, 1, v43);
    outlined init with copy of UserNotificationCenter(v26, (uint64_t)v47);
    uint64_t v29 = (void *)swift_allocObject();
    v29[2] = 0;
    void v29[3] = 0;
    v29[4] = v25;
    uint64_t v29[5] = 0xD00000000000002DLL;
    void v29[6] = 0x80000001B1161EE0;
    v29[7] = v28;
    v29[8] = v27;
    outlined init with take of BackgroundSessionManagerDataSource(v47, (uint64_t)(v29 + 9));
    swift_retain();
    swift_bridgeObjectRetain();
    _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v24, (uint64_t)&closure #1 in Task<>.reportFailure(on:function:process:)specialized partial apply, (uint64_t)v29);
    swift_release();
    outlined destroy of TaskPriority?(v24);
    swift_release();
    return;
  }
LABEL_7:
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  __swift_project_value_buffer(v30, (uint64_t)static Log.service);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  unint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(void *)&v47[0] = v34;
    *(_DWORD *)uint64_t v33 = 136315394;
    type metadata accessor for AddressableMember();
    lazy protocol witness table accessor for type AddressableMember and conformance NSObject(&lazy protocol witness table cache variable for type AddressableMember and conformance NSObject, (void (*)(uint64_t))type metadata accessor for AddressableMember);
    swift_bridgeObjectRetain();
    uint64_t v35 = Set.description.getter();
    unint64_t v37 = v36;
    swift_bridgeObjectRelease();
    uint64_t v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v37, (uint64_t *)v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 12) = 2080;
    type metadata accessor for TUHandle();
    lazy protocol witness table accessor for type AddressableMember and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (void (*)(uint64_t))type metadata accessor for TUHandle);
    swift_bridgeObjectRetain();
    uint64_t v38 = Set.description.getter();
    unint64_t v40 = v39;
    swift_bridgeObjectRelease();
    uint64_t v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v40, (uint64_t *)v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v31, v32, "Lost members in conversion. convertedMembers %s vs members: %s", (uint8_t *)v33, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v34, -1, -1);
    MEMORY[0x1B3EA39E0](v33, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  lazy protocol witness table accessor for type BackgroundSessionManagerHostConnection.Errors and conformance BackgroundSessionManagerHostConnection.Errors();
  id v41 = (void *)swift_allocError();
  v46();
}

uint64_t closure #2 in BackgroundSessionManagerHostConnection.updateMembers(identifier:members:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  void v8[2] = a4;
  return MEMORY[0x1F4188298](closure #2 in BackgroundSessionManagerHostConnection.updateMembers(identifier:members:completion:), 0, 0);
}

uint64_t closure #2 in BackgroundSessionManagerHostConnection.updateMembers(identifier:members:completion:)()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 16);
  *(void *)(v2 + 32) = v1;
  unint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v3;
  *unint64_t v3 = v0;
  uint64_t v4 = MEMORY[0x1E4FBC848];
  v3[1] = closure #2 in BackgroundSessionManagerHostConnection.updateMembers(identifier:members:completion:);
  return MEMORY[0x1F4188160](v3, 0, 0, 0xD00000000000002DLL, 0x80000001B1161EE0, partial apply for closure #1 in closure #2 in BackgroundSessionManagerHostConnection.updateMembers(identifier:members:completion:), v2, v4 + 8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = closure #2 in BackgroundSessionManagerHostConnection.updateMembers(identifier:members:completion:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = closure #2 in BackgroundSessionManagerHostConnection.updateMembers(identifier:members:completion:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void))(v0 + 40))(0);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  void *v1;
  void (*v2)(void *);
  id v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = (void *)v0[9];
  uint64_t v2 = (void (*)(void *))v0[5];
  swift_task_dealloc();
  unint64_t v3 = v1;
  v2(v1);

  swift_willThrow();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t closure #1 in closure #2 in BackgroundSessionManagerHostConnection.updateMembers(identifier:members:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (void *)(a2 + direct field offset for BackgroundSessionManagerHostConnection.dataSource);
  uint64_t v11 = *(void *)(a2 + direct field offset for BackgroundSessionManagerHostConnection.dataSource + 24);
  uint64_t v12 = v10[4];
  __swift_project_boxed_opaque_existential_1(v10, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  unint64_t v13 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v14 + v13, (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v12 + 48))(a3, v17, partial apply for closure #1 in closure #1 in closure #2 in BackgroundSessionManagerHostConnection.updateMembers(identifier:members:completion:), v14, v11, v12);
  return swift_release();
}

uint64_t closure #1 in closure #1 in closure #1 in BackgroundSessionManagerHostConnection.begin(request:completion:)(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t BackgroundSessionManagerHostConnection.updateShare(_:activityID:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = a3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v11 - 8);
  unint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v8);
  unint64_t v15 = (*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v16 = (char *)swift_allocObject();
  *((void *)v16 + 2) = 0;
  *((void *)v16 + 3) = 0;
  *((void *)v16 + 4) = v4;
  *((void *)v16 + 5) = a1;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v16[v15], (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  uint64_t v17 = &v16[(v10 + v15 + 7) & 0xFFFFFFFFFFFFFFF8];
  *(void *)uint64_t v17 = v22;
  *((void *)v17 + 1) = a4;
  id v18 = v4;
  id v19 = a1;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v13, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundSessionManagerHostConnection.updateShare(_:activityID:completion:), (uint64_t)v16);
  return swift_release();
}

uint64_t closure #1 in BackgroundSessionManagerHostConnection.updateShare(_:activityID:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  void v8[2] = a4;
  return MEMORY[0x1F4188298](closure #1 in BackgroundSessionManagerHostConnection.updateShare(_:activityID:completion:), 0, 0);
}

uint64_t closure #1 in BackgroundSessionManagerHostConnection.updateShare(_:activityID:completion:)()
{
  id v1 = (void *)(v0[2] + direct field offset for BackgroundSessionManagerHostConnection.dataSource);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 56) + **(int **)(v3 + 56));
  uint64_t v4 = (void *)swift_task_alloc();
  v0[7] = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in BackgroundSessionManagerHostConnection.updateShare(_:activityID:completion:);
  uint64_t v6 = v0[3];
  uint64_t v5 = v0[4];
  return v8(v6, v5, v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in BackgroundSessionManagerHostConnection.updateShare(_:activityID:completion:);
  }
  else {
    uint64_t v2 = closure #1 in BackgroundSessionManagerHostConnection.updateShare(_:activityID:completion:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void))(v0 + 40))(0);
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  void *v1;
  void (*v2)(void *);
  id v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  id v1 = (void *)v0[8];
  uint64_t v2 = (void (*)(void *))v0[5];
  uint64_t v3 = v1;
  v2(v1);

  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t BackgroundSessionManagerHostConnection.createPresenceSession(with:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TaskPriority();
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
  v11(v9, 1, 1, v10);
  uint64_t v12 = (void *)swift_allocObject();
  long long v12[2] = 0;
  void v12[3] = 0;
  v12[4] = v3;
  uint64_t v12[5] = a1;
  v12[6] = a2;
  v12[7] = a3;
  unint64_t v13 = v3;
  id v14 = a1;
  swift_retain();
  uint64_t v15 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundSessionManagerHostConnection.createPresenceSession(with:completion:), (uint64_t)v12);
  uint64_t v16 = (uint64_t)&v13[direct field offset for BackgroundSessionManagerHostConnection.abcReporter];
  uint64_t v17 = &v13[direct field offset for XPCHostConnection.bundleIdentifier];
  uint64_t v19 = *(void *)&v13[direct field offset for XPCHostConnection.bundleIdentifier];
  uint64_t v18 = *((void *)v17 + 1);
  v11(v9, 1, 1, v10);
  outlined init with copy of UserNotificationCenter(v16, (uint64_t)v23);
  unint64_t v20 = (void *)swift_allocObject();
  void v20[2] = 0;
  void v20[3] = 0;
  v20[4] = v15;
  void v20[5] = 0xD000000000000027;
  v20[6] = 0x80000001B1161F10;
  v20[7] = v19;
  v20[8] = v18;
  outlined init with take of BackgroundSessionManagerDataSource(v23, (uint64_t)(v20 + 9));
  swift_retain();
  swift_bridgeObjectRetain();
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v9, (uint64_t)&closure #1 in Task<>.reportFailure(on:function:process:)specialized partial apply, (uint64_t)v20);
  swift_release();
  outlined destroy of TaskPriority?((uint64_t)v9);
  return swift_release();
}

uint64_t closure #1 in BackgroundSessionManagerHostConnection.createPresenceSession(with:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void v7[5] = a6;
  v7[6] = a7;
  void v7[3] = a4;
  v7[4] = a5;
  return MEMORY[0x1F4188298](closure #1 in BackgroundSessionManagerHostConnection.createPresenceSession(with:completion:), 0, 0);
}

uint64_t closure #1 in BackgroundSessionManagerHostConnection.createPresenceSession(with:completion:)()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v2;
  uint64_t v3 = type metadata accessor for PresenceSessionConnectionInfo();
  *uint64_t v2 = v0;
  v2[1] = closure #1 in BackgroundSessionManagerHostConnection.createPresenceSession(with:completion:);
  return MEMORY[0x1F4188160](v0 + 16, 0, 0, 0xD000000000000027, 0x80000001B1161F10, partial apply for closure #1 in closure #1 in BackgroundSessionManagerHostConnection.createPresenceSession(with:completion:), v1, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = closure #1 in BackgroundSessionManagerHostConnection.createPresenceSession(with:completion:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = closure #1 in BackgroundSessionManagerHostConnection.createPresenceSession(with:completion:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  void (*v1)(void *, void);
  void *v2;
  id v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = (void (*)(void *, void))v0[5];
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = v2;
  v1(v2, 0);

  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  void *v0;
  void *v1;
  void (*v2)(void, void *);
  id v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = (void *)v0[9];
  uint64_t v2 = (void (*)(void, void *))v0[5];
  swift_task_dealloc();
  uint64_t v3 = v1;
  v2(0, v1);

  swift_willThrow();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t closure #1 in closure #1 in BackgroundSessionManagerHostConnection.createPresenceSession(with:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<PresenceSessionConnectionInfo, Error>);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = *(void *)(a2 + direct field offset for BackgroundSessionManagerHostConnection.dataSource + 24);
  uint64_t v9 = *(void *)(a2 + direct field offset for BackgroundSessionManagerHostConnection.dataSource + 32);
  uint64_t v17 = __swift_project_boxed_opaque_existential_1((void *)(a2 + direct field offset for BackgroundSessionManagerHostConnection.dataSource), v8);
  uint64_t v10 = *(void *)(a2 + direct field offset for XPCHostConnection.bundleIdentifier);
  uint64_t v16 = *(void *)(a2 + direct field offset for XPCHostConnection.bundleIdentifier + 8);
  id v11 = objc_msgSend(*(id *)(a2 + direct field offset for XPCHostConnection.connection), sel_processIdentifier);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  unint64_t v12 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v13 + v12, (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t, id, void *(*)(void *, void *), uint64_t, uint64_t, uint64_t))(v9 + 64))(v18, v10, v16, v11, partial apply for closure #1 in closure #1 in closure #1 in BackgroundSessionManagerHostConnection.createPresenceSession(with:completion:), v13, v8, v9);
  return swift_release();
}

void *closure #1 in closure #1 in closure #1 in BackgroundSessionManagerHostConnection.createPresenceSession(with:completion:)(void *result, id a2)
{
  if (a2)
  {
    id v2 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<PresenceSessionConnectionInfo, Error>);
    return (void *)CheckedContinuation.resume(throwing:)();
  }
  else if (result)
  {
    id v3 = result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<PresenceSessionConnectionInfo, Error>);
    return (void *)CheckedContinuation.resume(returning:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t @objc BackgroundSessionManagerHostConnection.begin(request:completion:)(void *a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t a6, void (*a7)(id, uint64_t, uint64_t))
{
  id v11 = _Block_copy(aBlock);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  id v13 = a3;
  id v14 = a1;
  a7(v13, a6, v12);

  return swift_release();
}

unint64_t lazy protocol witness table accessor for type BackgroundSessionManagerHostConnection.Errors and conformance BackgroundSessionManagerHostConnection.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type BackgroundSessionManagerHostConnection.Errors and conformance BackgroundSessionManagerHostConnection.Errors;
  if (!lazy protocol witness table cache variable for type BackgroundSessionManagerHostConnection.Errors and conformance BackgroundSessionManagerHostConnection.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackgroundSessionManagerHostConnection.Errors and conformance BackgroundSessionManagerHostConnection.Errors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BackgroundSessionManagerHostConnection.Errors and conformance BackgroundSessionManagerHostConnection.Errors;
  if (!lazy protocol witness table cache variable for type BackgroundSessionManagerHostConnection.Errors and conformance BackgroundSessionManagerHostConnection.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackgroundSessionManagerHostConnection.Errors and conformance BackgroundSessionManagerHostConnection.Errors);
  }
  return result;
}

unint64_t type metadata accessor for TUHandle()
{
  unint64_t result = lazy cache variable for type metadata for TUHandle;
  if (!lazy cache variable for type metadata for TUHandle)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AddressableMember and conformance NSObject(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #2 in BackgroundSessionManagerHostConnection.updateMembers(identifier:members:completion:)()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v0 + 32);
  uint64_t v7 = v0 + v3;
  uint64_t v8 = *(void *)(v0 + v4);
  uint64_t v9 = swift_task_alloc();
  long long v10 = *(_OWORD *)(v0 + v5);
  *(void *)(v1 + 16) = v9;
  *(void *)uint64_t v9 = v1;
  *(void *)(v9 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_OWORD *)(v9 + 40) = v10;
  *(void *)(v9 + 24) = v7;
  *(void *)(v9 + 32) = v8;
  *(void *)(v9 + 16) = v6;
  return MEMORY[0x1F4188298](closure #2 in BackgroundSessionManagerHostConnection.updateMembers(identifier:members:completion:), 0, 0);
}

uint64_t partial apply for closure #1 in BackgroundSessionManagerHostConnection.updateShare(_:activityID:completion:)()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = v0 + v3;
  uint64_t v6 = swift_task_alloc();
  long long v7 = *(_OWORD *)(v0 + 32);
  long long v8 = *(_OWORD *)(v0 + v4);
  *(void *)(v1 + 16) = v6;
  *(void *)uint64_t v6 = v1;
  *(void *)(v6 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_OWORD *)(v6 + 40) = v8;
  *(void *)(v6 + 32) = v5;
  *(_OWORD *)(v6 + 16) = v7;
  return MEMORY[0x1F4188298](closure #1 in BackgroundSessionManagerHostConnection.updateShare(_:activityID:completion:), 0, 0);
}

uint64_t objectdestroyTm_7()
{
  swift_unknownObjectRelease();

  swift_release();
  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t partial apply for closure #1 in BackgroundSessionManagerHostConnection.createPresenceSession(with:completion:)()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  long long v4 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  *(_OWORD *)(v2 + 40) = v4;
  *(_OWORD *)(v2 + 24) = v3;
  return MEMORY[0x1F4188298](closure #1 in BackgroundSessionManagerHostConnection.createPresenceSession(with:completion:), 0, 0);
}

uint64_t type metadata accessor for BackgroundSessionManagerHostConnection()
{
  uint64_t result = type metadata singleton initialization cache for BackgroundSessionManagerHostConnection;
  if (!type metadata singleton initialization cache for BackgroundSessionManagerHostConnection) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for BackgroundSessionManagerHostConnection()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for BackgroundSessionManagerHostConnection(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for BackgroundSessionManagerHostConnection);
}

uint64_t dispatch thunk of BackgroundSessionManagerHostConnection.__allocating_init(connection:queue:dataSource:)()
{
  return (*(uint64_t (**)(void))(v0 + 352))();
}

uint64_t ObjC metadata update function for BackgroundSessionManagerHostConnection()
{
  return type metadata accessor for BackgroundSessionManagerHostConnection();
}

unsigned char *storeEnumTagSinglePayload for BackgroundSessionManagerHostConnection.Errors(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B108F9BCLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for BackgroundSessionManagerHostConnection.Errors()
{
  return &type metadata for BackgroundSessionManagerHostConnection.Errors;
}

uint64_t sub_1B108F9F4()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t objectdestroy_25Tm()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_unknownObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return MEMORY[0x1F4186498](v0, v6, v5);
}

uint64_t closure #1 in BackgroundSessionManagerHostConnection.updateShare(_:activityID:completion:)partial apply()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = v0 + v3;
  uint64_t v6 = swift_task_alloc();
  long long v7 = *(_OWORD *)(v0 + 32);
  long long v8 = *(_OWORD *)(v0 + v4);
  *(void *)(v1 + 16) = v6;
  *(void *)uint64_t v6 = v1;
  *(void *)(v6 + 8) = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  *(_OWORD *)(v6 + 40) = v8;
  *(void *)(v6 + 32) = v5;
  *(_OWORD *)(v6 + 16) = v7;
  return MEMORY[0x1F4188298](closure #1 in BackgroundSessionManagerHostConnection.updateShare(_:activityID:completion:), 0, 0);
}

uint64_t specialized BackgroundSessionManagerHostConnection.updateMembers(identifier:members:completion:)(uint64_t a1, uint64_t a2, void *a3, void (**a4)(void, void))
{
  os_log_type_t v50 = (char *)a1;
  uint64_t v51 = a3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a4;
  _Block_copy(a4);
  unint64_t v14 = specialized Sequence.compactMap<A>(_:)(a2);
  uint64_t v15 = specialized Set.init<A>(_:)(v14);
  swift_bridgeObjectRelease();
  if ((v15 & 0xC000000000000001) != 0)
  {
    uint64_t v16 = __CocoaSet.count.getter();
    if ((a2 & 0xC000000000000001) != 0) {
      goto LABEL_3;
    }
LABEL_6:
    if (v16 == *(void *)(a2 + 16)) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  uint64_t v16 = *(void *)(v15 + 16);
  if ((a2 & 0xC000000000000001) == 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (v16 == __CocoaSet.count.getter())
  {
LABEL_4:
    uint64_t v17 = type metadata accessor for TaskPriority();
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
    uint64_t v49 = v18 + 56;
    v48(v12, 1, 1, v17);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))((char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v50, v6);
    unint64_t v19 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    unint64_t v20 = (v8 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
    os_log_type_t v50 = v12;
    uint64_t v21 = (char *)swift_allocObject();
    *((void *)v21 + 2) = 0;
    *((void *)v21 + 3) = 0;
    uint64_t v22 = v6;
    uint64_t v23 = v51;
    *((void *)v21 + 4) = v51;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v21[v19], v9, v22);
    *(void *)&v21[v20] = v15;
    uint64_t v24 = &v21[(v20 + 15) & 0xFFFFFFFFFFFFFFF8];
    *(void *)uint64_t v24 = thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()partial apply;
    *((void *)v24 + 1) = v13;
    uint64_t v25 = v23;
    swift_retain();
    uint64_t v26 = (uint64_t)v50;
    uint64_t v27 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v50, (uint64_t)&closure #2 in BackgroundSessionManagerHostConnection.updateMembers(identifier:members:completion:)partial apply, (uint64_t)v21);
    uint64_t v28 = (uint64_t)&v25[direct field offset for BackgroundSessionManagerHostConnection.abcReporter];
    uint64_t v30 = *(void *)&v25[direct field offset for XPCHostConnection.bundleIdentifier];
    uint64_t v29 = *(void *)&v25[direct field offset for XPCHostConnection.bundleIdentifier + 8];
    v48((char *)v26, 1, 1, v17);
    outlined init with copy of UserNotificationCenter(v28, (uint64_t)v52);
    unint64_t v31 = (void *)swift_allocObject();
    void v31[2] = 0;
    v31[3] = 0;
    v31[4] = v27;
    void v31[5] = 0xD00000000000002DLL;
    v31[6] = 0x80000001B1161EE0;
    v31[7] = v30;
    v31[8] = v29;
    outlined init with take of BackgroundSessionManagerDataSource(v52, (uint64_t)(v31 + 9));
    swift_retain();
    swift_bridgeObjectRetain();
    _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v26, (uint64_t)&closure #1 in Task<>.reportFailure(on:function:process:)specialized partial apply, (uint64_t)v31);
    swift_release();
    outlined destroy of TaskPriority?(v26);
    swift_release();
    return swift_release();
  }
LABEL_7:
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  __swift_project_value_buffer(v32, (uint64_t)static Log.service);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = swift_slowAlloc();
    uint64_t v51 = (void *)v13;
    uint64_t v36 = v35;
    uint64_t v37 = swift_slowAlloc();
    *(void *)&v52[0] = v37;
    *(_DWORD *)uint64_t v36 = 136315394;
    type metadata accessor for AddressableMember();
    lazy protocol witness table accessor for type AddressableMember and conformance NSObject(&lazy protocol witness table cache variable for type AddressableMember and conformance NSObject, (void (*)(uint64_t))type metadata accessor for AddressableMember);
    swift_bridgeObjectRetain();
    uint64_t v38 = Set.description.getter();
    unint64_t v40 = v39;
    swift_bridgeObjectRelease();
    uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v40, (uint64_t *)v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v36 + 12) = 2080;
    type metadata accessor for TUHandle();
    lazy protocol witness table accessor for type AddressableMember and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (void (*)(uint64_t))type metadata accessor for TUHandle);
    swift_bridgeObjectRetain();
    uint64_t v41 = Set.description.getter();
    unint64_t v43 = v42;
    swift_bridgeObjectRelease();
    uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v43, (uint64_t *)v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v33, v34, "Lost members in conversion. convertedMembers %s vs members: %s", (uint8_t *)v36, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v37, -1, -1);
    MEMORY[0x1B3EA39E0](v36, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  lazy protocol witness table accessor for type BackgroundSessionManagerHostConnection.Errors and conformance BackgroundSessionManagerHostConnection.Errors();
  uint64_t v44 = (void *)swift_allocError();
  uint64_t v45 = (void *)_convertErrorToNSError(_:)();
  ((void (**)(void, void *))a4)[2](a4, v45);

  return swift_release();
}

uint64_t objectdestroy_16Tm_0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x1F4186498](v0, v6 + 16, v5);
}

uint64_t objectdestroy_3Tm_1()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 72);
  return MEMORY[0x1F4186498](v0, 112, 7);
}

uint64_t partial apply for closure #1 in closure #1 in BackgroundSessionManagerHostConnection.createPresenceSession(with:completion:)(uint64_t a1)
{
  return closure #1 in closure #1 in BackgroundSessionManagerHostConnection.createPresenceSession(with:completion:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1B109042C()
{
  return objectdestroy_84Tm_0(&demangling cache variable for type metadata for CheckedContinuation<PresenceSessionConnectionInfo, Error>);
}

void *partial apply for closure #1 in closure #1 in closure #1 in BackgroundSessionManagerHostConnection.createPresenceSession(with:completion:)(void *a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<PresenceSessionConnectionInfo, Error>);
  return closure #1 in closure #1 in closure #1 in BackgroundSessionManagerHostConnection.createPresenceSession(with:completion:)(a1, a2);
}

uint64_t partial apply for closure #1 in closure #2 in BackgroundSessionManagerHostConnection.updateMembers(identifier:members:completion:)(uint64_t a1)
{
  return closure #1 in closure #2 in BackgroundSessionManagerHostConnection.updateMembers(identifier:members:completion:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1B10904C8()
{
  return objectdestroy_84Tm_0(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
}

uint64_t partial apply for closure #1 in closure #1 in BackgroundSessionManagerHostConnection.leave(identifier:completion:)(uint64_t a1)
{
  return closure #1 in closure #1 in BackgroundSessionManagerHostConnection.leave(identifier:completion:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1B10904E0()
{
  return objectdestroy_84Tm_0(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in BackgroundSessionManagerHostConnection.updateMembers(identifier:members:completion:)(void *a1)
{
  return closure #1 in closure #1 in closure #1 in BackgroundSessionManagerHostConnection.begin(request:completion:)(a1);
}

uint64_t partial apply for closure #1 in closure #1 in BackgroundSessionManagerHostConnection.begin(request:completion:)(uint64_t a1)
{
  return closure #1 in closure #1 in BackgroundSessionManagerHostConnection.begin(request:completion:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1B109055C()
{
  return objectdestroy_84Tm_0(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
}

uint64_t objectdestroy_84Tm_0(uint64_t *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return MEMORY[0x1F4186498](v1, v6, v7);
}

uint64_t specialized Publisher.sinkOnce(_:onError:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for OneShotCancellationBox();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 24) = 0;
  uint64_t v9 = (_DWORD *)swift_slowAlloc();
  *(void *)(v8 + 16) = v9;
  *uint64_t v9 = 0;
  uint64_t v10 = (void *)swift_allocObject();
  void v10[2] = v8;
  v10[3] = a3;
  v10[4] = a4;
  uint64_t v11 = (void *)swift_allocObject();
  void v11[2] = v8;
  v11[3] = a1;
  v11[4] = a2;
  swift_retain_n();
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<AttachmentLedger_CreateTopicResponse, PluginRpcError>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<AttachmentLedger_CreateTopicResponse, PluginRpcError> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<AttachmentLedger_CreateTopicResponse, PluginRpcError>);
  uint64_t v12 = Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v8 + 16));
  uint64_t v13 = *(void *)(v8 + 24);
  if (!v13)
  {
    *(void *)(v8 + 24) = v12;
    outlined consume of OneShotCancellationBox.State(0);
    swift_retain();
LABEL_4:
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v8 + 16));
    swift_release();
    return swift_release();
  }
  if (v13 == 1) {
    goto LABEL_4;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v8;
  _DWORD *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  type metadata accessor for OneShotCancellationBox();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 24) = 0;
  uint64_t v9 = (_DWORD *)swift_slowAlloc();
  *(void *)(v8 + 16) = v9;
  *uint64_t v9 = 0;
  uint64_t v10 = (void *)swift_allocObject();
  void v10[2] = v8;
  v10[3] = a3;
  v10[4] = a4;
  uint64_t v11 = (void *)swift_allocObject();
  void v11[2] = v8;
  v11[3] = a1;
  v11[4] = a2;
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Future<PluginAttachmentLedgerTopic.Configuration?, Error> and conformance Future<A, B>, &demangling cache variable for type metadata for Future<PluginAttachmentLedgerTopic.Configuration?, Error>);
  swift_retain_n();
  swift_retain();
  swift_retain();
  uint64_t v12 = Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v8 + 16));
  uint64_t v13 = *(void *)(v8 + 24);
  if (!v13)
  {
    *(void *)(v8 + 24) = v12;
    outlined consume of OneShotCancellationBox.State(0);
    swift_retain();
LABEL_4:
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v8 + 16));
    swift_release();
    return swift_release();
  }
  if (v13 == 1) {
    goto LABEL_4;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v8;
  _DWORD *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  type metadata accessor for OneShotCancellationBox();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 24) = 0;
  uint64_t v9 = (_DWORD *)swift_slowAlloc();
  *(void *)(v8 + 16) = v9;
  *uint64_t v9 = 0;
  uint64_t v10 = (void *)swift_allocObject();
  void v10[2] = v8;
  v10[3] = a3;
  v10[4] = a4;
  uint64_t v11 = (void *)swift_allocObject();
  void v11[2] = v8;
  v11[3] = a1;
  v11[4] = a2;
  swift_retain_n();
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<AttachmentLedger_GetAuthTokenResponse, PluginRpcError>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<AttachmentLedger_GetAuthTokenResponse, PluginRpcError> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<AttachmentLedger_GetAuthTokenResponse, PluginRpcError>);
  uint64_t v12 = Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v8 + 16));
  uint64_t v13 = *(void *)(v8 + 24);
  if (!v13)
  {
    *(void *)(v8 + 24) = v12;
    outlined consume of OneShotCancellationBox.State(0);
    swift_retain();
LABEL_4:
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v8 + 16));
    swift_release();
    return swift_release();
  }
  if (v13 == 1) {
    goto LABEL_4;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v8;
  _DWORD *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  type metadata accessor for OneShotCancellationBox();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 24) = 0;
  uint64_t v9 = (_DWORD *)swift_slowAlloc();
  *(void *)(v8 + 16) = v9;
  *uint64_t v9 = 0;
  uint64_t v10 = (void *)swift_allocObject();
  void v10[2] = v8;
  v10[3] = a3;
  v10[4] = a4;
  uint64_t v11 = (void *)swift_allocObject();
  void v11[2] = v8;
  v11[3] = a1;
  v11[4] = a2;
  swift_retain_n();
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<AttachmentLedger_UpdateAttachmentResponse, PluginRpcError>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<AttachmentLedger_UpdateAttachmentResponse, PluginRpcError> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<AttachmentLedger_UpdateAttachmentResponse, PluginRpcError>);
  uint64_t v12 = Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v8 + 16));
  uint64_t v13 = *(void *)(v8 + 24);
  if (!v13)
  {
    *(void *)(v8 + 24) = v12;
    outlined consume of OneShotCancellationBox.State(0);
    swift_retain();
LABEL_4:
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v8 + 16));
    swift_release();
    return swift_release();
  }
  if (v13 == 1) {
    goto LABEL_4;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in Publisher.sinkOnce(_:onError:)(uint64_t a1, uint64_t a2, void (*a3)(char *))
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for PluginRpcError();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Subscribers.Completion<PluginRpcError>(a1, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  }
  outlined init with take of PluginRpcError((uint64_t)v7, (uint64_t)v11);
  if (OneShotCancellationBox.cancel()()) {
    a3(v11);
  }
  return outlined destroy of PluginRpcError((uint64_t)v11);
}

uint64_t PluginAttachmentLedgerServiceProvider.__allocating_init(client:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t AttachmentLedgerServiceProvider.updateAttachment(input:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  void v5[4] = a3;
  long long v5[2] = a1;
  return MEMORY[0x1F4188298](AttachmentLedgerServiceProvider.updateAttachment(input:), 0, 0);
}

uint64_t AttachmentLedgerServiceProvider.updateAttachment(input:)()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 32);
  *(void *)(v3 + 32) = v1;
  *(void *)(v3 + 40) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentResponse(0);
  *uint64_t v4 = v0;
  v4[1] = AsyncSerialQueue.performAndWaitFor<A>(_:);
  uint64_t v6 = *(void *)(v0 + 16);
  return MEMORY[0x1F4188160](v6, 0, 0, 0xD000000000000018, 0x80000001B115D9F0, partial apply for closure #1 in AttachmentLedgerServiceProvider.updateAttachment(input:), v3, updated);
}

uint64_t AttachmentLedgerServiceProvider.getAuthToken(input:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  void v5[4] = a3;
  long long v5[2] = a1;
  return MEMORY[0x1F4188298](AttachmentLedgerServiceProvider.getAuthToken(input:), 0, 0);
}

uint64_t AttachmentLedgerServiceProvider.getAuthToken(input:)()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 32);
  *(void *)(v3 + 32) = v1;
  *(void *)(v3 + 40) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  uint64_t AuthTokenResponse = type metadata accessor for AttachmentLedger_GetAuthTokenResponse(0);
  *uint64_t v4 = v0;
  v4[1] = AttachmentLedgerServiceProvider.getAuthToken(input:);
  uint64_t v6 = *(void *)(v0 + 16);
  return MEMORY[0x1F4188160](v6, 0, 0, 0xD000000000000014, 0x80000001B1161F80, partial apply for closure #1 in AttachmentLedgerServiceProvider.getAuthToken(input:), v3, AuthTokenResponse);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](AttachmentLedgerServiceProvider.getAuthToken(input:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t closure #1 in AttachmentLedgerServiceProvider.getAuthToken(input:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v19[0] = a1;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<AttachmentLedger_GetAuthTokenResponse, Error>);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[1] = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 40))(a3, a4, a5);
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v13(v12, a1, v9);
  unint64_t v14 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = swift_allocObject();
  uint64_t v16 = *(void (**)(unint64_t, char *, uint64_t))(v10 + 32);
  v16(v15 + v14, v12, v9);
  v13(v12, v19[0], v9);
  uint64_t v17 = swift_allocObject();
  v16(v17 + v14, v12, v9);
  specialized Publisher.sinkOnce(_:onError:)((uint64_t)partial apply for closure #1 in closure #1 in AttachmentLedgerServiceProvider.getAuthToken(input:), v15, (uint64_t)partial apply for closure #2 in closure #1 in AttachmentLedgerServiceProvider.getAuthToken(input:), v17);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in AttachmentLedgerServiceProvider.updateAttachment(input:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v19[0] = a1;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[1] = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 48))(a3, a4, a5);
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v13(v12, a1, v9);
  unint64_t v14 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = swift_allocObject();
  uint64_t v16 = *(void (**)(unint64_t, char *, uint64_t))(v10 + 32);
  v16(v15 + v14, v12, v9);
  v13(v12, v19[0], v9);
  uint64_t v17 = swift_allocObject();
  v16(v17 + v14, v12, v9);
  specialized Publisher.sinkOnce(_:onError:)((uint64_t)partial apply for closure #1 in closure #1 in AttachmentLedgerServiceProvider.updateAttachment(input:), v15, (uint64_t)partial apply for closure #2 in closure #1 in AttachmentLedgerServiceProvider.updateAttachment(input:), v17);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in closure #1 in AttachmentLedgerServiceProvider.getAuthToken(input:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void), uint64_t *a5)
{
  uint64_t v8 = a3(0);
  MEMORY[0x1F4188790](v8 - 8);
  _s14CopresenceCore35AttachmentLedger_CreateTopicRequestVWOcTm_0(a1, (uint64_t)&v11 - v9, a4);
  __swift_instantiateConcreteTypeFromMangledName(a5);
  return CheckedContinuation.resume(returning:)();
}

uint64_t closure #2 in closure #1 in AttachmentLedgerServiceProvider.getAuthToken(input:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  type metadata accessor for PluginRpcError();
  _s14CopresenceCore35AttachmentLedger_CreateTopicRequestVAC21InternalSwiftProtobuf7MessageAAWlTm_0(&lazy protocol witness table cache variable for type PluginRpcError and conformance PluginRpcError, (void (*)(uint64_t))type metadata accessor for PluginRpcError);
  swift_allocError();
  _s14CopresenceCore35AttachmentLedger_CreateTopicRequestVWOcTm_0(a1, v5, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
  __swift_instantiateConcreteTypeFromMangledName(a3);
  return CheckedContinuation.resume(throwing:)();
}

uint64_t *PluginAttachmentLedgerServiceProvider.Rpc.CreateTopic.unsafeMutableAddressor()
{
  if (one-time initialization token for CreateTopic != -1) {
    swift_once();
  }
  return &static PluginAttachmentLedgerServiceProvider.Rpc.CreateTopic;
}

void static PluginAttachmentLedgerServiceProvider.Rpc.CreateTopic.getter(void *a1@<X8>)
{
  *a1 = 0xD00000000000002ELL;
  a1[1] = 0x80000001B1161FA0;
}

void one-time initialization function for SubscribeToTopic()
{
  static PluginAttachmentLedgerServiceProvider.Rpc.SubscribeTouint64_t Topic = 0xD000000000000033;
  unk_1E9B75028 = 0x80000001B1161FD0;
}

uint64_t *PluginAttachmentLedgerServiceProvider.Rpc.SubscribeToTopic.unsafeMutableAddressor()
{
  if (one-time initialization token for SubscribeToTopic != -1) {
    swift_once();
  }
  return &static PluginAttachmentLedgerServiceProvider.Rpc.SubscribeToTopic;
}

void static PluginAttachmentLedgerServiceProvider.Rpc.SubscribeToTopic.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000033;
  a1[1] = 0x80000001B1161FD0;
}

void one-time initialization function for GetAuthToken()
{
  static PluginAttachmentLedgerServiceProvider.Rpc.GetAuthToken = 0xD00000000000002FLL;
  unk_1E9B75040 = 0x80000001B1162010;
}

uint64_t *PluginAttachmentLedgerServiceProvider.Rpc.GetAuthToken.unsafeMutableAddressor()
{
  if (one-time initialization token for GetAuthToken != -1) {
    swift_once();
  }
  return &static PluginAttachmentLedgerServiceProvider.Rpc.GetAuthToken;
}

void static PluginAttachmentLedgerServiceProvider.Rpc.GetAuthToken.getter(void *a1@<X8>)
{
  *a1 = 0xD00000000000002FLL;
  a1[1] = 0x80000001B1162010;
}

void one-time initialization function for UpdateAttachment()
{
  static PluginAttachmentLedgerServiceProvider.Rpc.UpdateAttachment = 0xD000000000000033;
  unk_1E9B75058 = 0x80000001B1162040;
}

uint64_t *PluginAttachmentLedgerServiceProvider.Rpc.UpdateAttachment.unsafeMutableAddressor()
{
  if (one-time initialization token for UpdateAttachment != -1) {
    swift_once();
  }
  return &static PluginAttachmentLedgerServiceProvider.Rpc.UpdateAttachment;
}

void static PluginAttachmentLedgerServiceProvider.Rpc.UpdateAttachment.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000033;
  a1[1] = 0x80000001B1162040;
}

id PluginAttachmentLedgerServiceProvider.queue.getter()
{
  return *(id *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC14CopresenceCore12PluginClient_queue);
}

uint64_t PluginAttachmentLedgerServiceProvider.init(client:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t partial apply for closure #1 in AttachmentLedgerServiceProvider.updateAttachment(input:)(uint64_t a1)
{
  return closure #1 in AttachmentLedgerServiceProvider.updateAttachment(input:)(a1, v1[4], v1[5], v1[2], v1[3]);
}

uint64_t partial apply for closure #1 in AttachmentLedgerServiceProvider.getAuthToken(input:)(uint64_t a1)
{
  return closure #1 in AttachmentLedgerServiceProvider.getAuthToken(input:)(a1, v1[4], v1[5], v1[2], v1[3]);
}

Swift::Void __swiftcall PluginAttachmentLedgerServiceProvider.close()()
{
  (*(void (**)(void))(**(void **)(v0 + 16) + 280))();
}

Swift::Void __swiftcall PluginAttachmentLedgerServiceProvider.updateVirtualParticipant(_:localParticipantID:)(Swift::UInt64 _, Swift::UInt64 localParticipantID)
{
  (*(void (**)(Swift::UInt64, Swift::UInt64))(**(void **)(v2 + 16) + 248))(_, localParticipantID);
}

uint64_t PluginAttachmentLedgerServiceProvider.createTopic(input:)(uint64_t a1)
{
  uint64_t v49 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TopicRequest = type metadata accessor for AttachmentLedger_CreateTopicRequest(0);
  MEMORY[0x1F4188790](TopicRequest);
  uint64_t v46 = (uint64_t)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Just<AttachmentLedger_CreateTopicRequest>);
  uint64_t v48 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v47 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v40 - v12;
  UUID.init()();
  if (one-time initialization token for attachmentLedgerService != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Log.attachmentLedgerService);
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  os_log_type_t v50 = v13;
  uint64_t v45 = v15;
  v15(v11, v13, v7);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v42 = v7;
    unint64_t v19 = (uint8_t *)v18;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v41 = v3;
    uint64_t v21 = v20;
    v54[0] = v20;
    *(_DWORD *)unint64_t v19 = 136315138;
    uint64_t v40 = v5;
    uint64_t v22 = UUID.uuidString.getter();
    uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v54);
    uint64_t v5 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v24 = *(void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v43 = (v8 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v44 = v24;
    v24(v11, v42);
    _os_log_impl(&dword_1B0DF7000, v16, v17, "Creating CreateTopic RPC request, traceID=%s", v19, 0xCu);
    swift_arrayDestroy();
    uint64_t v25 = v21;
    uint64_t v3 = v41;
    MEMORY[0x1B3EA39E0](v25, -1, -1);
    uint64_t v26 = v19;
    uint64_t v7 = v42;
    MEMORY[0x1B3EA39E0](v26, -1, -1);
  }
  else
  {
    uint64_t v27 = *(void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v43 = (v8 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v44 = v27;
    v27(v11, v7);
  }

  _s14CopresenceCore35AttachmentLedger_CreateTopicRequestVWOcTm_0(v49, v46, type metadata accessor for AttachmentLedger_CreateTopicRequest);
  uint64_t v28 = v47;
  uint64_t v29 = TopicRequest;
  Just.init(_:)();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Just<AttachmentLedger_CreateTopicRequest> and conformance Just<A>, &demangling cache variable for type metadata for Just<AttachmentLedger_CreateTopicRequest>);
  uint64_t v30 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v28, v5);
  unint64_t v31 = v50;
  uint64_t v32 = *(void *)(v51 + 16);
  v54[0] = 0xD00000000000002ELL;
  v54[1] = 0x80000001B1161FA0;
  v45(v3, v50, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v3, 0, 1, v7);
  uint64_t v33 = *(uint64_t (**)(uint64_t *, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v32 + 272);
  uint64_t v34 = v7;
  uint64_t TopicResponse = type metadata accessor for AttachmentLedger_CreateTopicResponse(0);
  uint64_t TopicRequestVAC21InternalSwiftProtobuf7MessageAAWlTm_0 = _s14CopresenceCore35AttachmentLedger_CreateTopicRequestVAC21InternalSwiftProtobuf7MessageAAWlTm_0(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicRequest and conformance AttachmentLedger_CreateTopicRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_CreateTopicRequest);
  uint64_t v37 = _s14CopresenceCore35AttachmentLedger_CreateTopicRequestVAC21InternalSwiftProtobuf7MessageAAWlTm_0(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse and conformance AttachmentLedger_CreateTopicResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_CreateTopicResponse);
  uint64_t v38 = v33(v54, v30, v3, v29, TopicResponse, TopicRequestVAC21InternalSwiftProtobuf7MessageAAWlTm_0, v37);
  swift_release();
  outlined destroy of UUID?((uint64_t)v3, &demangling cache variable for type metadata for UUID?);
  swift_bridgeObjectRelease();
  v44(v31, v34);
  return v38;
}

uint64_t PluginAttachmentLedgerServiceProvider.subscribe(input:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v40 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v39 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v34 - v10;
  UUID.init()();
  if (one-time initialization token for attachmentLedgerService != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.attachmentLedgerService);
  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v38(v9, v11, v5);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v34 = v1;
    uint64_t v16 = (uint8_t *)v15;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v35 = v11;
    uint64_t v18 = v17;
    v42[0] = v17;
    *(_DWORD *)uint64_t v16 = 136315138;
    uint64_t v36 = v5;
    uint64_t v19 = UUID.uuidString.getter();
    uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v42);
    uint64_t v5 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v37 = *(void (**)(char *, uint64_t))(v6 + 8);
    v37(v9, v5);
    _os_log_impl(&dword_1B0DF7000, v13, v14, "Creating SubscribeToTopic RPC request, traceID=%s", v16, 0xCu);
    swift_arrayDestroy();
    uint64_t v21 = v18;
    uint64_t v11 = v35;
    MEMORY[0x1B3EA39E0](v21, -1, -1);
    uint64_t v22 = v16;
    uint64_t v2 = v34;
    MEMORY[0x1B3EA39E0](v22, -1, -1);
  }
  else
  {
    uint64_t v37 = *(void (**)(char *, uint64_t))(v6 + 8);
    v37(v9, v5);
  }

  uint64_t v23 = *(void *)(v2 + 16);
  v42[0] = 0xD000000000000033;
  v42[1] = 0x80000001B1161FD0;
  uint64_t v24 = (uint64_t)v39;
  v38(v39, v11, v5);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v24, 0, 1, v5);
  uint64_t v25 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v23
                                                                                                  + 272);
  uint64_t v26 = v11;
  uint64_t v27 = type metadata accessor for AttachmentLedger_SubscribeRequest(0);
  uint64_t v28 = v5;
  uint64_t v29 = type metadata accessor for AttachmentLedger_SubscribeResponse(0);
  uint64_t TopicRequestVAC21InternalSwiftProtobuf7MessageAAWlTm_0 = _s14CopresenceCore35AttachmentLedger_CreateTopicRequestVAC21InternalSwiftProtobuf7MessageAAWlTm_0(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest and conformance AttachmentLedger_SubscribeRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeRequest);
  uint64_t v31 = _s14CopresenceCore35AttachmentLedger_CreateTopicRequestVAC21InternalSwiftProtobuf7MessageAAWlTm_0(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse and conformance AttachmentLedger_SubscribeResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse);
  uint64_t v32 = v25(v42, v40, v24, v27, v29, TopicRequestVAC21InternalSwiftProtobuf7MessageAAWlTm_0, v31);
  outlined destroy of UUID?(v24, &demangling cache variable for type metadata for UUID?);
  swift_bridgeObjectRelease();
  v37(v26, v28);
  return v32;
}

uint64_t PluginAttachmentLedgerServiceProvider.getAuthToken(input:)(uint64_t a1)
{
  uint64_t v49 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AuthTokenRequest = type metadata accessor for AttachmentLedger_GetAuthTokenRequest(0);
  MEMORY[0x1F4188790](AuthTokenRequest);
  uint64_t v46 = (uint64_t)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Just<AttachmentLedger_GetAuthTokenRequest>);
  uint64_t v48 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v47 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v40 - v12;
  UUID.init()();
  if (one-time initialization token for attachmentLedgerService != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Log.attachmentLedgerService);
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  os_log_type_t v50 = v13;
  uint64_t v45 = v15;
  v15(v11, v13, v7);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v42 = v7;
    uint64_t v19 = (uint8_t *)v18;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v41 = v3;
    uint64_t v21 = v20;
    v54[0] = v20;
    *(_DWORD *)uint64_t v19 = 136315138;
    uint64_t v40 = v5;
    uint64_t v22 = UUID.uuidString.getter();
    uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v54);
    uint64_t v5 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v24 = *(void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v43 = (v8 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v44 = v24;
    v24(v11, v42);
    _os_log_impl(&dword_1B0DF7000, v16, v17, "Creating GetAuthToken RPC request, traceID=%s", v19, 0xCu);
    swift_arrayDestroy();
    uint64_t v25 = v21;
    uint64_t v3 = v41;
    MEMORY[0x1B3EA39E0](v25, -1, -1);
    uint64_t v26 = v19;
    uint64_t v7 = v42;
    MEMORY[0x1B3EA39E0](v26, -1, -1);
  }
  else
  {
    uint64_t v27 = *(void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v43 = (v8 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v44 = v27;
    v27(v11, v7);
  }

  _s14CopresenceCore35AttachmentLedger_CreateTopicRequestVWOcTm_0(v49, v46, type metadata accessor for AttachmentLedger_GetAuthTokenRequest);
  uint64_t v28 = v47;
  uint64_t v29 = AuthTokenRequest;
  Just.init(_:)();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Just<AttachmentLedger_GetAuthTokenRequest> and conformance Just<A>, &demangling cache variable for type metadata for Just<AttachmentLedger_GetAuthTokenRequest>);
  uint64_t v30 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v28, v5);
  uint64_t v31 = v50;
  uint64_t v32 = *(void *)(v51 + 16);
  v54[0] = 0xD00000000000002FLL;
  v54[1] = 0x80000001B1162010;
  v45(v3, v50, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v3, 0, 1, v7);
  uint64_t v33 = *(uint64_t (**)(uint64_t *, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v32 + 272);
  uint64_t v34 = v7;
  uint64_t AuthTokenResponse = type metadata accessor for AttachmentLedger_GetAuthTokenResponse(0);
  uint64_t TopicRequestVAC21InternalSwiftProtobuf7MessageAAWlTm_0 = _s14CopresenceCore35AttachmentLedger_CreateTopicRequestVAC21InternalSwiftProtobuf7MessageAAWlTm_0(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest and conformance AttachmentLedger_GetAuthTokenRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAuthTokenRequest);
  uint64_t v37 = _s14CopresenceCore35AttachmentLedger_CreateTopicRequestVAC21InternalSwiftProtobuf7MessageAAWlTm_0(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenResponse and conformance AttachmentLedger_GetAuthTokenResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAuthTokenResponse);
  uint64_t v38 = v33(v54, v30, v3, v29, AuthTokenResponse, TopicRequestVAC21InternalSwiftProtobuf7MessageAAWlTm_0, v37);
  swift_release();
  outlined destroy of UUID?((uint64_t)v3, &demangling cache variable for type metadata for UUID?);
  swift_bridgeObjectRelease();
  v44(v31, v34);
  return v38;
}

uint64_t PluginAttachmentLedgerServiceProvider.updateAttachment(input:)(uint64_t a1)
{
  uint64_t v49 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest(0);
  MEMORY[0x1F4188790](updated);
  uint64_t v46 = (uint64_t)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Just<AttachmentLedger_UpdateAttachmentRequest>);
  uint64_t v48 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v47 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v40 - v12;
  UUID.init()();
  if (one-time initialization token for attachmentLedgerService != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Log.attachmentLedgerService);
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  os_log_type_t v50 = v13;
  uint64_t v45 = v15;
  v15(v11, v13, v7);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v42 = v7;
    uint64_t v19 = (uint8_t *)v18;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v41 = v3;
    uint64_t v21 = v20;
    v54[0] = v20;
    *(_DWORD *)uint64_t v19 = 136315138;
    uint64_t v40 = v5;
    uint64_t v22 = UUID.uuidString.getter();
    uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v54);
    uint64_t v5 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v24 = *(void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v43 = (v8 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v44 = v24;
    v24(v11, v42);
    _os_log_impl(&dword_1B0DF7000, v16, v17, "Creating UpdateAttachment RPC request, traceID=%s", v19, 0xCu);
    swift_arrayDestroy();
    uint64_t v25 = v21;
    uint64_t v3 = v41;
    MEMORY[0x1B3EA39E0](v25, -1, -1);
    uint64_t v26 = v19;
    uint64_t v7 = v42;
    MEMORY[0x1B3EA39E0](v26, -1, -1);
  }
  else
  {
    uint64_t v27 = *(void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v43 = (v8 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v44 = v27;
    v27(v11, v7);
  }

  _s14CopresenceCore35AttachmentLedger_CreateTopicRequestVWOcTm_0(v49, v46, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
  uint64_t v28 = v47;
  uint64_t v29 = updated;
  Just.init(_:)();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Just<AttachmentLedger_UpdateAttachmentRequest> and conformance Just<A>, &demangling cache variable for type metadata for Just<AttachmentLedger_UpdateAttachmentRequest>);
  uint64_t v30 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v28, v5);
  uint64_t v31 = v50;
  uint64_t v32 = *(void *)(v51 + 16);
  v54[0] = 0xD000000000000033;
  v54[1] = 0x80000001B1162040;
  v45(v3, v50, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v3, 0, 1, v7);
  uint64_t v33 = *(uint64_t (**)(uint64_t *, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v32 + 272);
  uint64_t v34 = v7;
  uint64_t v35 = type metadata accessor for AttachmentLedger_UpdateAttachmentResponse(0);
  uint64_t TopicRequestVAC21InternalSwiftProtobuf7MessageAAWlTm_0 = _s14CopresenceCore35AttachmentLedger_CreateTopicRequestVAC21InternalSwiftProtobuf7MessageAAWlTm_0(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest and conformance AttachmentLedger_UpdateAttachmentRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
  uint64_t v37 = _s14CopresenceCore35AttachmentLedger_CreateTopicRequestVAC21InternalSwiftProtobuf7MessageAAWlTm_0(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentResponse and conformance AttachmentLedger_UpdateAttachmentResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
  uint64_t v38 = v33(v54, v30, v3, v29, v35, TopicRequestVAC21InternalSwiftProtobuf7MessageAAWlTm_0, v37);
  swift_release();
  outlined destroy of UUID?((uint64_t)v3, &demangling cache variable for type metadata for UUID?);
  swift_bridgeObjectRelease();
  v44(v31, v34);
  return v38;
}

uint64_t PluginAttachmentLedgerServiceProvider.deinit()
{
  swift_release();
  return v0;
}

uint64_t PluginAttachmentLedgerServiceProvider.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for AttachmentLedgerServiceProvider.queue.getter in conformance PluginAttachmentLedgerServiceProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

uint64_t protocol witness for AttachmentLedgerServiceProvider.close() in conformance PluginAttachmentLedgerServiceProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

uint64_t protocol witness for AttachmentLedgerServiceProvider.createTopic(input:) in conformance PluginAttachmentLedgerServiceProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t protocol witness for AttachmentLedgerServiceProvider.subscribe(input:) in conformance PluginAttachmentLedgerServiceProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

uint64_t protocol witness for AttachmentLedgerServiceProvider.getAuthToken(input:) in conformance PluginAttachmentLedgerServiceProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

uint64_t protocol witness for AttachmentLedgerServiceProvider.updateAttachment(input:) in conformance PluginAttachmentLedgerServiceProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

uint64_t protocol witness for AttachmentLedgerServiceProvider.updateVirtualParticipant(_:localParticipantID:) in conformance PluginAttachmentLedgerServiceProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t dispatch thunk of AttachmentLedgerServiceProvider.queue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AttachmentLedgerServiceProvider.close()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AttachmentLedgerServiceProvider.createTopic(input:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of AttachmentLedgerServiceProvider.subscribe(input:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of AttachmentLedgerServiceProvider.getAuthToken(input:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of AttachmentLedgerServiceProvider.updateAttachment(input:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of AttachmentLedgerServiceProvider.updateVirtualParticipant(_:localParticipantID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t type metadata accessor for PluginAttachmentLedgerServiceProvider()
{
  return self;
}

uint64_t method lookup function for PluginAttachmentLedgerServiceProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PluginAttachmentLedgerServiceProvider);
}

uint64_t dispatch thunk of PluginAttachmentLedgerServiceProvider.queue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerServiceProvider.__allocating_init(client:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerServiceProvider.close()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerServiceProvider.updateVirtualParticipant(_:localParticipantID:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerServiceProvider.createTopic(input:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerServiceProvider.subscribe(input:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerServiceProvider.getAuthToken(input:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerServiceProvider.updateAttachment(input:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

ValueMetadata *type metadata accessor for PluginAttachmentLedgerServiceProvider.Rpc()
{
  return &type metadata for PluginAttachmentLedgerServiceProvider.Rpc;
}

uint64_t sub_1B10935CC()
{
  return objectdestroy_84Tm_0(&demangling cache variable for type metadata for CheckedContinuation<AttachmentLedger_GetAuthTokenResponse, Error>);
}

uint64_t partial apply for closure #1 in closure #1 in AttachmentLedgerServiceProvider.getAuthToken(input:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in AttachmentLedgerServiceProvider.getAuthToken(input:)(a1, &demangling cache variable for type metadata for CheckedContinuation<AttachmentLedger_GetAuthTokenResponse, Error>, type metadata accessor for AttachmentLedger_GetAuthTokenResponse, type metadata accessor for AttachmentLedger_GetAuthTokenResponse);
}

uint64_t sub_1B109360C()
{
  return objectdestroy_84Tm_0(&demangling cache variable for type metadata for CheckedContinuation<AttachmentLedger_GetAuthTokenResponse, Error>);
}

uint64_t partial apply for closure #2 in closure #1 in AttachmentLedgerServiceProvider.getAuthToken(input:)(uint64_t a1)
{
  return partial apply for closure #2 in closure #1 in AttachmentLedgerServiceProvider.getAuthToken(input:)(a1, &demangling cache variable for type metadata for CheckedContinuation<AttachmentLedger_GetAuthTokenResponse, Error>);
}

uint64_t outlined init with copy of Subscribers.Completion<PluginRpcError>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t _s14CopresenceCore35AttachmentLedger_CreateTopicRequestVAC21InternalSwiftProtobuf7MessageAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B10936E0()
{
  return objectdestroy_84Tm_0(&demangling cache variable for type metadata for CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>);
}

uint64_t partial apply for closure #1 in closure #1 in AttachmentLedgerServiceProvider.updateAttachment(input:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in AttachmentLedgerServiceProvider.getAuthToken(input:)(a1, &demangling cache variable for type metadata for CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
}

uint64_t partial apply for closure #1 in closure #1 in AttachmentLedgerServiceProvider.getAuthToken(input:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v9 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a2) - 8);
  return closure #1 in closure #1 in AttachmentLedgerServiceProvider.getAuthToken(input:)(a1, v4 + ((*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), a3, a4, a2);
}

uint64_t sub_1B10937AC()
{
  return objectdestroy_84Tm_0(&demangling cache variable for type metadata for CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>);
}

uint64_t partial apply for closure #2 in closure #1 in AttachmentLedgerServiceProvider.updateAttachment(input:)(uint64_t a1)
{
  return partial apply for closure #2 in closure #1 in AttachmentLedgerServiceProvider.getAuthToken(input:)(a1, &demangling cache variable for type metadata for CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>);
}

uint64_t partial apply for closure #2 in closure #1 in AttachmentLedgerServiceProvider.getAuthToken(input:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a2) - 8);
  return closure #2 in closure #1 in AttachmentLedgerServiceProvider.getAuthToken(input:)(a1, v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), a2);
}

uint64_t partial apply for specialized closure #1 in Publisher.sinkOnce(_:onError:)(uint64_t a1)
{
  return specialized closure #1 in Publisher.sinkOnce(_:onError:)(a1, *(void *)(v1 + 16), *(void (**)(char *))(v1 + 24));
}

uint64_t _s14CopresenceCore35AttachmentLedger_CreateTopicRequestVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void specialized closure #1 in Publisher.sinkOnce(_:onError:)(void **a1, uint64_t a2, void (*a3)(void **))
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v6 = *a1;
    id v5 = v3;
    if (OneShotCancellationBox.cancel()()) {
      a3(&v6);
    }
  }
}

void partial apply for specialized closure #1 in Publisher.sinkOnce(_:onError:)(void **a1)
{
  specialized closure #1 in Publisher.sinkOnce(_:onError:)(a1, *(void *)(v1 + 16), *(void (**)(void **))(v1 + 24));
}

uint64_t specialized closure #2 in Publisher.sinkOnce(_:onError:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_OWORD *))
{
  uint64_t v4 = *(void *)(a1 + 32);
  char v5 = *(unsigned char *)(a1 + 40);
  long long v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  uint64_t v9 = v4;
  char v10 = v5;
  uint64_t result = OneShotCancellationBox.cancel()();
  if (result) {
    return a3(v8);
  }
  return result;
}

uint64_t partial apply for specialized closure #2 in Publisher.sinkOnce(_:onError:)(uint64_t a1)
{
  return specialized closure #2 in Publisher.sinkOnce(_:onError:)(a1, *(void *)(v1 + 16), *(uint64_t (**)(_OWORD *))(v1 + 24));
}

{
  uint64_t v1;
  uint64_t (*v3)(uint64_t);
  uint64_t result;

  uint64_t v3 = *(uint64_t (**)(uint64_t))(v1 + 24);
  uint64_t result = OneShotCancellationBox.cancel()();
  if (result) {
    return v3(a1);
  }
  return result;
}

char *ActivitySessionHostConnection.__allocating_init(connection:queue:)(void *a1, void *a2)
{
  char v5 = (char *)objc_allocWithZone(v2);
  swift_unknownObjectWeakInit();
  long long v6 = &v5[direct field offset for ActivitySessionHostConnection.__isAppProcess];
  *(void *)long long v6 = specialized thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@unowned Bool);
  *((void *)v6 + 1) = 0;
  return specialized XPCHostConnection.init(connection:queue:)(a1, a2);
}

uint64_t ActivitySessionHostConnection.isAppProcess.getter()
{
  void (**v1)(unsigned __int8 *__return_ptr, void *);
  void (*v2)(unsigned __int8 *__return_ptr, void *);
  uint64_t v3;
  unsigned __int8 v5;
  void v6[2];

  uint64_t v1 = (void (**)(unsigned __int8 *__return_ptr, void *))(v0
                                                                     + direct field offset for ActivitySessionHostConnection.__isAppProcess);
  swift_beginAccess();
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(v0 + direct field offset for XPCHostConnection.bundleIdentifier + 8);
  v6[0] = *(void *)(v0 + direct field offset for XPCHostConnection.bundleIdentifier);
  v6[1] = v3;
  swift_retain();
  v2(&v5, v6);
  swift_release();
  return v5;
}

char *specialized XPCHostConnection.init(connection:queue:)(void *a1, void *a2)
{
  char v5 = &v2[direct field offset for XPCHostConnection.id];
  long long v6 = v2;
  UUID.init()();
  v6[direct field offset for XPCHostConnection.hasScheduledInvalidation] = 0;
  *(void *)&v6[direct field offset for XPCHostConnection.identifiersWithPendingCoalescingBlocks] = MEMORY[0x1E4FBC870];
  *(void *)&v6[direct field offset for XPCHostConnection.blockToExecuteAfterPendingCoalescingBlocksByIdentifier] = MEMORY[0x1E4FBC868];
  uint64_t v80 = direct field offset for XPCHostConnection.connection;
  *(void *)&v6[direct field offset for XPCHostConnection.connection] = a1;
  uint64_t v81 = direct field offset for XPCHostConnection.queue;
  *(void *)&v6[direct field offset for XPCHostConnection.queue] = a2;
  id v7 = a1;
  id v8 = a2;
  uint64_t v9 = NSXPCConnection.bundleIdentifier.getter();
  if (!v10)
  {
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Log.host);
    uint64_t v26 = (char *)v7;
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 138412290;
      long long aBlock = v26;
      uint64_t v84 = v8;
      uint64_t v30 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v29 = v26;

      _os_log_impl(&dword_1B0DF7000, v20, v27, "Denying connection %@ because it does not have a valid bundle identifier.", v28, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v29, -1, -1);
      MEMORY[0x1B3EA39E0](v28, -1, -1);
    }
    else
    {
    }
    goto LABEL_20;
  }
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  long long v83 = (char *)v8;
  char v13 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(4);
  if (v13 == 2) {
    char v13 = NSXPCConnection.isEntitledToUseGameCenter.getter();
  }
  char v14 = v13;
  char v15 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(3);
  if ((v14 & 1) == 0 && (v15 & 1) == 0)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v16 = (unsigned char *)static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    if ((*v16 & 1) == 0)
    {
      char v17 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(5);
      if (v17 == 2)
      {
        if ((v16[1] & 1) == 0)
        {
LABEL_11:
          swift_bridgeObjectRelease();
          if (one-time initialization token for host != -1) {
            swift_once();
          }
          uint64_t v18 = type metadata accessor for Logger();
          __swift_project_value_buffer(v18, (uint64_t)static Log.host);
          uint64_t v19 = (char *)v7;
          uint64_t v20 = Logger.logObject.getter();
          os_log_type_t v21 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v20, v21))
          {
            uint64_t v22 = (uint8_t *)swift_slowAlloc();
            uint64_t v79 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v22 = 138412290;
            long long aBlock = v19;
            unint64_t v23 = v19;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t v79 = v19;

            _os_log_impl(&dword_1B0DF7000, v20, v21, "Denying connection %@ because it does not have valid entitlements.", v22, 0xCu);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x1B3EA39E0](v79, -1, -1);
            MEMORY[0x1B3EA39E0](v22, -1, -1);
            uint64_t v24 = v83;
          }
          else
          {

            uint64_t v24 = v19;
          }

LABEL_20:
          uint64_t v31 = type metadata accessor for UUID();
          (*(void (**)(char *, uint64_t))(*(void *)(v31 - 8) + 8))(v5, v31);

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCHostConnection<ActivitySessionInterface>);
          swift_deallocPartialClassInstance();
          return 0;
        }
      }
      else if ((v17 & 1) == 0)
      {
        goto LABEL_11;
      }
    }
  }
  uint64_t v33 = (uint64_t *)&v6[direct field offset for XPCHostConnection.bundleIdentifier];
  *uint64_t v33 = v11;
  v33[1] = v12;
  char v34 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(4);
  if (v34 == 2) {
    char v34 = NSXPCConnection.isEntitledToUseGameCenter.getter();
  }
  char v35 = v34;
  char v36 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(3);
  if (v35 & 1) != 0 || (v36)
  {
    char v38 = 1;
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v37 = (char *)static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    char v38 = *v37;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToUsePublicAPI] = v38;
  char v39 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(5);
  if (v39 == 2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v40 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    char v41 = *(unsigned char *)(v40 + 1);
  }
  else
  {
    char v41 = v39 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToUsePrivateAPI] = v41;
  char v42 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(6);
  if (v42 == 2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v43 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    char v44 = *(unsigned char *)(v43 + 24);
  }
  else
  {
    char v44 = v42 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToAccessAllSessions] = v44;
  char v45 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(7);
  if (v45 == 2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v46 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    char v47 = *(unsigned char *)(v46 + 25);
  }
  else
  {
    char v47 = v45 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToForWebFallback] = v47;
  uint64_t v48 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(8);
  if (!v48)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v48 = swift_bridgeObjectRetain();
  }
  *(void *)&v6[direct field offset for XPCHostConnection.definedSystemActivityIdentifiers] = v48;
  char v49 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(9);
  if (v49 == 2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v50 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    char v51 = *(unsigned char *)(v50 + 40);
  }
  else
  {
    char v51 = v49 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToAccessUnaliasedIdentifiers] = v51;
  v6[direct field offset for XPCHostConnection.isEntitledToUseGameCenter] = NSXPCConnection.isEntitledToUseGameCenter.getter() & 1;
  char v52 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(11);
  if (v52 == 2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v53 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    char v54 = *(unsigned char *)(v53 + 42);
  }
  else
  {
    char v54 = v52 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToProvideCustomEndpoint] = v54;
  uint64_t v82 = v7;
  v6[direct field offset for XPCHostConnection.isEntitledToBypassSharePlayRestriction] = specialized NSXPCConnection.value<A>(_:forEntitlement:)(14) & 1;

  v91.receiver = v6;
  v91.super_class = (Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCHostConnection<ActivitySessionInterface>);
  uint64_t v32 = (char *)objc_msgSendSuper2(&v91, sel_init);
  uint64_t v55 = direct field offset for XPCHostConnection.connection;
  uint64_t v56 = *(void **)&v32[direct field offset for XPCHostConnection.connection];
  id v57 = v32;
  objc_msgSend(v56, sel_setExportedObject_, v57);
  uint64_t v58 = one-time initialization token for hostObjectInterface;
  id v59 = v56;
  if (v58 != -1) {
    swift_once();
  }
  swift_beginAccess();
  objc_msgSend(v59, sel_setExportedInterface_, static ActivitySessionInterface.hostObjectInterface);

  uint64_t v60 = one-time initialization token for clientObjectInterface;
  id v61 = *(id *)&v32[v55];
  if (v60 != -1) {
    swift_once();
  }
  swift_beginAccess();
  objc_msgSend(v61, sel_setRemoteObjectInterface_, static ActivitySessionInterface.clientObjectInterface);

  uint64_t v62 = *(void **)&v32[v55];
  objc_msgSend(v62, sel__setQueue_, *(void *)&v57[direct field offset for XPCHostConnection.queue]);
  uint64_t v63 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v89 = partial apply for specialized closure #1 in XPCHostConnection.init(connection:queue:);
  uint64_t v90 = v63;
  long long aBlock = (char *)MEMORY[0x1E4F143A8];
  uint64_t v86 = 1107296256;
  uint64_t v87 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v88 = &block_descriptor_192;
  uint64_t v64 = _Block_copy(&aBlock);
  id v65 = v62;
  swift_release();
  objc_msgSend(v65, sel_setInterruptionHandler_, v64);
  _Block_release(v64);

  uint64_t v66 = *(void **)&v32[v55];
  uint64_t v67 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v89 = partial apply for specialized closure #2 in XPCHostConnection.init(connection:queue:);
  uint64_t v90 = v67;
  long long aBlock = (char *)MEMORY[0x1E4F143A8];
  uint64_t v86 = 1107296256;
  uint64_t v87 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v88 = &block_descriptor_196;
  uint64_t v68 = _Block_copy(&aBlock);
  id v69 = v66;
  swift_release();
  objc_msgSend(v69, sel_setInvalidationHandler_, v68);
  _Block_release(v68);

  objc_msgSend(*(id *)&v32[v55], sel_resume);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v70 = type metadata accessor for Logger();
  __swift_project_value_buffer(v70, (uint64_t)static Log.host);
  uint64_t v71 = v57;
  uint64_t v72 = Logger.logObject.getter();
  os_log_type_t v73 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v72, v73))
  {
    os_log_type_t v74 = (uint8_t *)swift_slowAlloc();
    int v75 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v74 = 138412290;
    long long aBlock = v71;
    uint64_t v76 = v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v75 = v32;

    _os_log_impl(&dword_1B0DF7000, v72, v73, "Created %@", v74, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v75, -1, -1);
    MEMORY[0x1B3EA39E0](v74, -1, -1);
    unint64_t v77 = v83;
  }
  else
  {

    unint64_t v77 = v71;
  }

  return v32;
}

{
  char *v2;
  char *v5;
  char *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  unsigned char *v16;
  char v17;
  uint64_t v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  os_log_type_t v27;
  uint8_t *v28;
  void *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  char v34;
  char v35;
  char v36;
  char *v37;
  char v38;
  char v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  void *v56;
  char *v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  id v61;
  void *v62;
  uint64_t v63;
  void *v64;
  id v65;
  void *v66;
  uint64_t v67;
  void *v68;
  id v69;
  uint64_t v70;
  char *v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  void *v75;
  char *v76;
  char *v77;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  char *v83;
  void *v84;
  char *aBlock;
  uint64_t v86;
  uint64_t (*v87)();
  void *v88;
  void (*v89)();
  uint64_t v90;
  objc_super v91;

  char v5 = &v2[direct field offset for XPCHostConnection.id];
  long long v6 = v2;
  UUID.init()();
  v6[direct field offset for XPCHostConnection.hasScheduledInvalidation] = 0;
  *(void *)&v6[direct field offset for XPCHostConnection.identifiersWithPendingCoalescingBlocks] = MEMORY[0x1E4FBC870];
  *(void *)&v6[direct field offset for XPCHostConnection.blockToExecuteAfterPendingCoalescingBlocksByIdentifier] = MEMORY[0x1E4FBC868];
  uint64_t v80 = direct field offset for XPCHostConnection.connection;
  *(void *)&v6[direct field offset for XPCHostConnection.connection] = a1;
  uint64_t v81 = direct field offset for XPCHostConnection.queue;
  *(void *)&v6[direct field offset for XPCHostConnection.queue] = a2;
  id v7 = a1;
  id v8 = a2;
  uint64_t v9 = NSXPCConnection.bundleIdentifier.getter();
  if (!v10)
  {
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Log.host);
    uint64_t v26 = (char *)v7;
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 138412290;
      long long aBlock = v26;
      uint64_t v84 = v8;
      uint64_t v30 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v29 = v26;

      _os_log_impl(&dword_1B0DF7000, v20, v27, "Denying connection %@ because it does not have a valid bundle identifier.", v28, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v29, -1, -1);
      MEMORY[0x1B3EA39E0](v28, -1, -1);
    }
    else
    {
    }
    goto LABEL_20;
  }
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  long long v83 = (char *)v8;
  char v13 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(4);
  if (v13 == 2) {
    char v13 = NSXPCConnection.isEntitledToUseGameCenter.getter();
  }
  char v14 = v13;
  char v15 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(3);
  if ((v14 & 1) == 0 && (v15 & 1) == 0)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v16 = (unsigned char *)static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    if ((*v16 & 1) == 0)
    {
      char v17 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(5);
      if (v17 == 2)
      {
        if ((v16[1] & 1) == 0)
        {
LABEL_11:
          swift_bridgeObjectRelease();
          if (one-time initialization token for host != -1) {
            swift_once();
          }
          uint64_t v18 = type metadata accessor for Logger();
          __swift_project_value_buffer(v18, (uint64_t)static Log.host);
          uint64_t v19 = (char *)v7;
          uint64_t v20 = Logger.logObject.getter();
          os_log_type_t v21 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v20, v21))
          {
            uint64_t v22 = (uint8_t *)swift_slowAlloc();
            uint64_t v79 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v22 = 138412290;
            long long aBlock = v19;
            unint64_t v23 = v19;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t v79 = v19;

            _os_log_impl(&dword_1B0DF7000, v20, v21, "Denying connection %@ because it does not have valid entitlements.", v22, 0xCu);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x1B3EA39E0](v79, -1, -1);
            MEMORY[0x1B3EA39E0](v22, -1, -1);
            uint64_t v24 = v83;
          }
          else
          {

            uint64_t v24 = v19;
          }

LABEL_20:
          uint64_t v31 = type metadata accessor for UUID();
          (*(void (**)(char *, uint64_t))(*(void *)(v31 - 8) + 8))(v5, v31);

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for XPCHostConnection<BackgroundSessionManagerInterface>);
          swift_deallocPartialClassInstance();
          return 0;
        }
      }
      else if ((v17 & 1) == 0)
      {
        goto LABEL_11;
      }
    }
  }
  uint64_t v33 = (uint64_t *)&v6[direct field offset for XPCHostConnection.bundleIdentifier];
  *uint64_t v33 = v11;
  v33[1] = v12;
  char v34 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(4);
  if (v34 == 2) {
    char v34 = NSXPCConnection.isEntitledToUseGameCenter.getter();
  }
  char v35 = v34;
  char v36 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(3);
  if (v35 & 1) != 0 || (v36)
  {
    char v38 = 1;
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v37 = (char *)static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    char v38 = *v37;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToUsePublicAPI] = v38;
  char v39 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(5);
  if (v39 == 2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v40 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    char v41 = *(unsigned char *)(v40 + 1);
  }
  else
  {
    char v41 = v39 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToUsePrivateAPI] = v41;
  char v42 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(6);
  if (v42 == 2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v43 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    char v44 = *(unsigned char *)(v43 + 24);
  }
  else
  {
    char v44 = v42 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToAccessAllSessions] = v44;
  char v45 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(7);
  if (v45 == 2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v46 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    char v47 = *(unsigned char *)(v46 + 25);
  }
  else
  {
    char v47 = v45 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToForWebFallback] = v47;
  uint64_t v48 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(8);
  if (!v48)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v48 = swift_bridgeObjectRetain();
  }
  *(void *)&v6[direct field offset for XPCHostConnection.definedSystemActivityIdentifiers] = v48;
  char v49 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(9);
  if (v49 == 2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v50 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    char v51 = *(unsigned char *)(v50 + 40);
  }
  else
  {
    char v51 = v49 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToAccessUnaliasedIdentifiers] = v51;
  v6[direct field offset for XPCHostConnection.isEntitledToUseGameCenter] = NSXPCConnection.isEntitledToUseGameCenter.getter() & 1;
  char v52 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(11);
  if (v52 == 2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v53 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    char v54 = *(unsigned char *)(v53 + 42);
  }
  else
  {
    char v54 = v52 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToProvideCustomEndpoint] = v54;
  uint64_t v82 = v7;
  v6[direct field offset for XPCHostConnection.isEntitledToBypassSharePlayRestriction] = specialized NSXPCConnection.value<A>(_:forEntitlement:)(14) & 1;

  v91.receiver = v6;
  v91.super_class = (Class)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for XPCHostConnection<BackgroundSessionManagerInterface>);
  uint64_t v32 = (char *)objc_msgSendSuper2(&v91, sel_init);
  uint64_t v55 = direct field offset for XPCHostConnection.connection;
  uint64_t v56 = *(void **)&v32[direct field offset for XPCHostConnection.connection];
  id v57 = v32;
  objc_msgSend(v56, sel_setExportedObject_, v57);
  uint64_t v58 = one-time initialization token for hostObjectInterface;
  id v59 = v56;
  if (v58 != -1) {
    swift_once();
  }
  objc_msgSend(v59, sel_setExportedInterface_, static BackgroundSessionManagerInterface.hostObjectInterface);

  uint64_t v60 = one-time initialization token for clientObjectInterface;
  id v61 = *(id *)&v32[v55];
  if (v60 != -1) {
    swift_once();
  }
  objc_msgSend(v61, sel_setRemoteObjectInterface_, static BackgroundSessionManagerInterface.clientObjectInterface);

  uint64_t v62 = *(void **)&v32[v55];
  objc_msgSend(v62, sel__setQueue_, *(void *)&v57[direct field offset for XPCHostConnection.queue]);
  uint64_t v63 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v89 = partial apply for specialized closure #1 in XPCHostConnection.init(connection:queue:);
  uint64_t v90 = v63;
  long long aBlock = (char *)MEMORY[0x1E4F143A8];
  uint64_t v86 = 1107296256;
  uint64_t v87 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v88 = &block_descriptor_182;
  uint64_t v64 = _Block_copy(&aBlock);
  id v65 = v62;
  swift_release();
  objc_msgSend(v65, sel_setInterruptionHandler_, v64);
  _Block_release(v64);

  uint64_t v66 = *(void **)&v32[v55];
  uint64_t v67 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v89 = partial apply for specialized closure #2 in XPCHostConnection.init(connection:queue:);
  uint64_t v90 = v67;
  long long aBlock = (char *)MEMORY[0x1E4F143A8];
  uint64_t v86 = 1107296256;
  uint64_t v87 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v88 = &block_descriptor_186;
  uint64_t v68 = _Block_copy(&aBlock);
  id v69 = v66;
  swift_release();
  objc_msgSend(v69, sel_setInvalidationHandler_, v68);
  _Block_release(v68);

  objc_msgSend(*(id *)&v32[v55], sel_resume);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v70 = type metadata accessor for Logger();
  __swift_project_value_buffer(v70, (uint64_t)static Log.host);
  uint64_t v71 = v57;
  uint64_t v72 = Logger.logObject.getter();
  os_log_type_t v73 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v72, v73))
  {
    os_log_type_t v74 = (uint8_t *)swift_slowAlloc();
    int v75 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v74 = 138412290;
    long long aBlock = v71;
    uint64_t v76 = v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v75 = v32;

    _os_log_impl(&dword_1B0DF7000, v72, v73, "Created %@", v74, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v75, -1, -1);
    MEMORY[0x1B3EA39E0](v74, -1, -1);
    unint64_t v77 = v83;
  }
  else
  {

    unint64_t v77 = v71;
  }

  return v32;
}

{
  char *v2;
  char *v5;
  char *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  unsigned char *v16;
  char v17;
  uint64_t v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  os_log_type_t v27;
  uint8_t *v28;
  void *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  char v34;
  char v35;
  char v36;
  char *v37;
  char v38;
  char v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  void *v56;
  char *v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  id v61;
  void *v62;
  uint64_t v63;
  void *v64;
  id v65;
  void *v66;
  uint64_t v67;
  void *v68;
  id v69;
  uint64_t v70;
  char *v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  void *v75;
  char *v76;
  char *v77;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  char *v83;
  void *v84;
  char *aBlock;
  uint64_t v86;
  uint64_t (*v87)();
  void *v88;
  void (*v89)();
  uint64_t v90;
  objc_super v91;

  char v5 = &v2[direct field offset for XPCHostConnection.id];
  long long v6 = v2;
  UUID.init()();
  v6[direct field offset for XPCHostConnection.hasScheduledInvalidation] = 0;
  *(void *)&v6[direct field offset for XPCHostConnection.identifiersWithPendingCoalescingBlocks] = MEMORY[0x1E4FBC870];
  *(void *)&v6[direct field offset for XPCHostConnection.blockToExecuteAfterPendingCoalescingBlocksByIdentifier] = MEMORY[0x1E4FBC868];
  uint64_t v80 = direct field offset for XPCHostConnection.connection;
  *(void *)&v6[direct field offset for XPCHostConnection.connection] = a1;
  uint64_t v81 = direct field offset for XPCHostConnection.queue;
  *(void *)&v6[direct field offset for XPCHostConnection.queue] = a2;
  id v7 = a1;
  id v8 = a2;
  uint64_t v9 = NSXPCConnection.bundleIdentifier.getter();
  if (!v10)
  {
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Log.host);
    uint64_t v26 = (char *)v7;
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 138412290;
      long long aBlock = v26;
      uint64_t v84 = v8;
      uint64_t v30 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v29 = v26;

      _os_log_impl(&dword_1B0DF7000, v20, v27, "Denying connection %@ because it does not have a valid bundle identifier.", v28, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v29, -1, -1);
      MEMORY[0x1B3EA39E0](v28, -1, -1);
    }
    else
    {
    }
    goto LABEL_20;
  }
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  long long v83 = (char *)v8;
  char v13 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(4);
  if (v13 == 2) {
    char v13 = NSXPCConnection.isEntitledToUseGameCenter.getter();
  }
  char v14 = v13;
  char v15 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(3);
  if ((v14 & 1) == 0 && (v15 & 1) == 0)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v16 = (unsigned char *)static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    if ((*v16 & 1) == 0)
    {
      char v17 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(5);
      if (v17 == 2)
      {
        if ((v16[1] & 1) == 0)
        {
LABEL_11:
          swift_bridgeObjectRelease();
          if (one-time initialization token for host != -1) {
            swift_once();
          }
          uint64_t v18 = type metadata accessor for Logger();
          __swift_project_value_buffer(v18, (uint64_t)static Log.host);
          uint64_t v19 = (char *)v7;
          uint64_t v20 = Logger.logObject.getter();
          os_log_type_t v21 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v20, v21))
          {
            uint64_t v22 = (uint8_t *)swift_slowAlloc();
            uint64_t v79 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v22 = 138412290;
            long long aBlock = v19;
            unint64_t v23 = v19;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t v79 = v19;

            _os_log_impl(&dword_1B0DF7000, v20, v21, "Denying connection %@ because it does not have valid entitlements.", v22, 0xCu);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x1B3EA39E0](v79, -1, -1);
            MEMORY[0x1B3EA39E0](v22, -1, -1);
            uint64_t v24 = v83;
          }
          else
          {

            uint64_t v24 = v19;
          }

LABEL_20:
          uint64_t v31 = type metadata accessor for UUID();
          (*(void (**)(char *, uint64_t))(*(void *)(v31 - 8) + 8))(v5, v31);

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCHostConnection<ConversationManagerInterface>);
          swift_deallocPartialClassInstance();
          return 0;
        }
      }
      else if ((v17 & 1) == 0)
      {
        goto LABEL_11;
      }
    }
  }
  uint64_t v33 = (uint64_t *)&v6[direct field offset for XPCHostConnection.bundleIdentifier];
  *uint64_t v33 = v11;
  v33[1] = v12;
  char v34 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(4);
  if (v34 == 2) {
    char v34 = NSXPCConnection.isEntitledToUseGameCenter.getter();
  }
  char v35 = v34;
  char v36 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(3);
  if (v35 & 1) != 0 || (v36)
  {
    char v38 = 1;
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v37 = (char *)static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    char v38 = *v37;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToUsePublicAPI] = v38;
  char v39 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(5);
  if (v39 == 2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v40 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    char v41 = *(unsigned char *)(v40 + 1);
  }
  else
  {
    char v41 = v39 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToUsePrivateAPI] = v41;
  char v42 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(6);
  if (v42 == 2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v43 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    char v44 = *(unsigned char *)(v43 + 24);
  }
  else
  {
    char v44 = v42 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToAccessAllSessions] = v44;
  char v45 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(7);
  if (v45 == 2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v46 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    char v47 = *(unsigned char *)(v46 + 25);
  }
  else
  {
    char v47 = v45 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToForWebFallback] = v47;
  uint64_t v48 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(8);
  if (!v48)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v48 = swift_bridgeObjectRetain();
  }
  *(void *)&v6[direct field offset for XPCHostConnection.definedSystemActivityIdentifiers] = v48;
  char v49 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(9);
  if (v49 == 2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v50 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    char v51 = *(unsigned char *)(v50 + 40);
  }
  else
  {
    char v51 = v49 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToAccessUnaliasedIdentifiers] = v51;
  v6[direct field offset for XPCHostConnection.isEntitledToUseGameCenter] = NSXPCConnection.isEntitledToUseGameCenter.getter() & 1;
  char v52 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(11);
  if (v52 == 2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v53 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    char v54 = *(unsigned char *)(v53 + 42);
  }
  else
  {
    char v54 = v52 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToProvideCustomEndpoint] = v54;
  uint64_t v82 = v7;
  v6[direct field offset for XPCHostConnection.isEntitledToBypassSharePlayRestriction] = specialized NSXPCConnection.value<A>(_:forEntitlement:)(14) & 1;

  v91.receiver = v6;
  v91.super_class = (Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCHostConnection<ConversationManagerInterface>);
  uint64_t v32 = (char *)objc_msgSendSuper2(&v91, sel_init);
  uint64_t v55 = direct field offset for XPCHostConnection.connection;
  uint64_t v56 = *(void **)&v32[direct field offset for XPCHostConnection.connection];
  id v57 = v32;
  objc_msgSend(v56, sel_setExportedObject_, v57);
  uint64_t v58 = one-time initialization token for hostObjectInterface;
  id v59 = v56;
  if (v58 != -1) {
    swift_once();
  }
  objc_msgSend(v59, sel_setExportedInterface_, static ConversationManagerInterface.hostObjectInterface);

  uint64_t v60 = one-time initialization token for clientObjectInterface;
  id v61 = *(id *)&v32[v55];
  if (v60 != -1) {
    swift_once();
  }
  objc_msgSend(v61, sel_setRemoteObjectInterface_, static ConversationManagerInterface.clientObjectInterface);

  uint64_t v62 = *(void **)&v32[v55];
  objc_msgSend(v62, sel__setQueue_, *(void *)&v57[direct field offset for XPCHostConnection.queue]);
  uint64_t v63 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v89 = partial apply for specialized closure #1 in XPCHostConnection.init(connection:queue:);
  uint64_t v90 = v63;
  long long aBlock = (char *)MEMORY[0x1E4F143A8];
  uint64_t v86 = 1107296256;
  uint64_t v87 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v88 = &block_descriptor_146;
  uint64_t v64 = _Block_copy(&aBlock);
  id v65 = v62;
  swift_release();
  objc_msgSend(v65, sel_setInterruptionHandler_, v64);
  _Block_release(v64);

  uint64_t v66 = *(void **)&v32[v55];
  uint64_t v67 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v89 = partial apply for specialized closure #2 in XPCHostConnection.init(connection:queue:);
  uint64_t v90 = v67;
  long long aBlock = (char *)MEMORY[0x1E4F143A8];
  uint64_t v86 = 1107296256;
  uint64_t v87 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v88 = &block_descriptor_150;
  uint64_t v68 = _Block_copy(&aBlock);
  id v69 = v66;
  swift_release();
  objc_msgSend(v69, sel_setInvalidationHandler_, v68);
  _Block_release(v68);

  objc_msgSend(*(id *)&v32[v55], sel_resume);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v70 = type metadata accessor for Logger();
  __swift_project_value_buffer(v70, (uint64_t)static Log.host);
  uint64_t v71 = v57;
  uint64_t v72 = Logger.logObject.getter();
  os_log_type_t v73 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v72, v73))
  {
    os_log_type_t v74 = (uint8_t *)swift_slowAlloc();
    int v75 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v74 = 138412290;
    long long aBlock = v71;
    uint64_t v76 = v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v75 = v32;

    _os_log_impl(&dword_1B0DF7000, v72, v73, "Created %@", v74, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v75, -1, -1);
    MEMORY[0x1B3EA39E0](v74, -1, -1);
    unint64_t v77 = v83;
  }
  else
  {

    unint64_t v77 = v71;
  }

  return v32;
}

{
  char *v2;
  char *v5;
  char *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  unsigned char *v16;
  char v17;
  uint64_t v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  os_log_type_t v27;
  uint8_t *v28;
  void *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  char v34;
  char v35;
  char v36;
  char *v37;
  char v38;
  char v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  void *v56;
  char *v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  id v61;
  void *v62;
  uint64_t v63;
  void *v64;
  id v65;
  void *v66;
  uint64_t v67;
  void *v68;
  id v69;
  uint64_t v70;
  char *v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  void *v75;
  char *v76;
  char *v77;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  char *v83;
  void *v84;
  char *aBlock;
  uint64_t v86;
  uint64_t (*v87)();
  void *v88;
  void (*v89)();
  uint64_t v90;
  objc_super v91;

  char v5 = &v2[direct field offset for XPCHostConnection.id];
  long long v6 = v2;
  UUID.init()();
  v6[direct field offset for XPCHostConnection.hasScheduledInvalidation] = 0;
  *(void *)&v6[direct field offset for XPCHostConnection.identifiersWithPendingCoalescingBlocks] = MEMORY[0x1E4FBC870];
  *(void *)&v6[direct field offset for XPCHostConnection.blockToExecuteAfterPendingCoalescingBlocksByIdentifier] = MEMORY[0x1E4FBC868];
  uint64_t v80 = direct field offset for XPCHostConnection.connection;
  *(void *)&v6[direct field offset for XPCHostConnection.connection] = a1;
  uint64_t v81 = direct field offset for XPCHostConnection.queue;
  *(void *)&v6[direct field offset for XPCHostConnection.queue] = a2;
  id v7 = a1;
  id v8 = a2;
  uint64_t v9 = NSXPCConnection.bundleIdentifier.getter();
  if (!v10)
  {
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Log.host);
    uint64_t v26 = (char *)v7;
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 138412290;
      long long aBlock = v26;
      uint64_t v84 = v8;
      uint64_t v30 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v29 = v26;

      _os_log_impl(&dword_1B0DF7000, v20, v27, "Denying connection %@ because it does not have a valid bundle identifier.", v28, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v29, -1, -1);
      MEMORY[0x1B3EA39E0](v28, -1, -1);
    }
    else
    {
    }
    goto LABEL_20;
  }
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  long long v83 = (char *)v8;
  char v13 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(4);
  if (v13 == 2) {
    char v13 = NSXPCConnection.isEntitledToUseGameCenter.getter();
  }
  char v14 = v13;
  char v15 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(3);
  if ((v14 & 1) == 0 && (v15 & 1) == 0)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v16 = (unsigned char *)static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    if ((*v16 & 1) == 0)
    {
      char v17 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(5);
      if (v17 == 2)
      {
        if ((v16[1] & 1) == 0)
        {
LABEL_11:
          swift_bridgeObjectRelease();
          if (one-time initialization token for host != -1) {
            swift_once();
          }
          uint64_t v18 = type metadata accessor for Logger();
          __swift_project_value_buffer(v18, (uint64_t)static Log.host);
          uint64_t v19 = (char *)v7;
          uint64_t v20 = Logger.logObject.getter();
          os_log_type_t v21 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v20, v21))
          {
            uint64_t v22 = (uint8_t *)swift_slowAlloc();
            uint64_t v79 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v22 = 138412290;
            long long aBlock = v19;
            unint64_t v23 = v19;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t v79 = v19;

            _os_log_impl(&dword_1B0DF7000, v20, v21, "Denying connection %@ because it does not have valid entitlements.", v22, 0xCu);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x1B3EA39E0](v79, -1, -1);
            MEMORY[0x1B3EA39E0](v22, -1, -1);
            uint64_t v24 = v83;
          }
          else
          {

            uint64_t v24 = v19;
          }

LABEL_20:
          uint64_t v31 = type metadata accessor for UUID();
          (*(void (**)(char *, uint64_t))(*(void *)(v31 - 8) + 8))(v5, v31);

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCHostConnection<PresenceSessionInterface>);
          swift_deallocPartialClassInstance();
          return 0;
        }
      }
      else if ((v17 & 1) == 0)
      {
        goto LABEL_11;
      }
    }
  }
  uint64_t v33 = (uint64_t *)&v6[direct field offset for XPCHostConnection.bundleIdentifier];
  *uint64_t v33 = v11;
  v33[1] = v12;
  char v34 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(4);
  if (v34 == 2) {
    char v34 = NSXPCConnection.isEntitledToUseGameCenter.getter();
  }
  char v35 = v34;
  char v36 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(3);
  if (v35 & 1) != 0 || (v36)
  {
    char v38 = 1;
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v37 = (char *)static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    char v38 = *v37;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToUsePublicAPI] = v38;
  char v39 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(5);
  if (v39 == 2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v40 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    char v41 = *(unsigned char *)(v40 + 1);
  }
  else
  {
    char v41 = v39 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToUsePrivateAPI] = v41;
  char v42 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(6);
  if (v42 == 2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v43 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    char v44 = *(unsigned char *)(v43 + 24);
  }
  else
  {
    char v44 = v42 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToAccessAllSessions] = v44;
  char v45 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(7);
  if (v45 == 2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v46 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    char v47 = *(unsigned char *)(v46 + 25);
  }
  else
  {
    char v47 = v45 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToForWebFallback] = v47;
  uint64_t v48 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(8);
  if (!v48)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v48 = swift_bridgeObjectRetain();
  }
  *(void *)&v6[direct field offset for XPCHostConnection.definedSystemActivityIdentifiers] = v48;
  char v49 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(9);
  if (v49 == 2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v50 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    char v51 = *(unsigned char *)(v50 + 40);
  }
  else
  {
    char v51 = v49 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToAccessUnaliasedIdentifiers] = v51;
  v6[direct field offset for XPCHostConnection.isEntitledToUseGameCenter] = NSXPCConnection.isEntitledToUseGameCenter.getter() & 1;
  char v52 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(11);
  if (v52 == 2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v53 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    char v54 = *(unsigned char *)(v53 + 42);
  }
  else
  {
    char v54 = v52 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToProvideCustomEndpoint] = v54;
  uint64_t v82 = v7;
  v6[direct field offset for XPCHostConnection.isEntitledToBypassSharePlayRestriction] = specialized NSXPCConnection.value<A>(_:forEntitlement:)(14) & 1;

  v91.receiver = v6;
  v91.super_class = (Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCHostConnection<PresenceSessionInterface>);
  uint64_t v32 = (char *)objc_msgSendSuper2(&v91, sel_init);
  uint64_t v55 = direct field offset for XPCHostConnection.connection;
  uint64_t v56 = *(void **)&v32[direct field offset for XPCHostConnection.connection];
  id v57 = v32;
  objc_msgSend(v56, sel_setExportedObject_, v57);
  uint64_t v58 = one-time initialization token for hostObjectInterface;
  id v59 = v56;
  if (v58 != -1) {
    swift_once();
  }
  swift_beginAccess();
  objc_msgSend(v59, sel_setExportedInterface_, static PresenceSessionInterface.hostObjectInterface);

  uint64_t v60 = one-time initialization token for clientObjectInterface;
  id v61 = *(id *)&v32[v55];
  if (v60 != -1) {
    swift_once();
  }
  swift_beginAccess();
  objc_msgSend(v61, sel_setRemoteObjectInterface_, static PresenceSessionInterface.clientObjectInterface);

  uint64_t v62 = *(void **)&v32[v55];
  objc_msgSend(v62, sel__setQueue_, *(void *)&v57[direct field offset for XPCHostConnection.queue]);
  uint64_t v63 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v89 = partial apply for specialized closure #1 in XPCHostConnection.init(connection:queue:);
  uint64_t v90 = v63;
  long long aBlock = (char *)MEMORY[0x1E4F143A8];
  uint64_t v86 = 1107296256;
  uint64_t v87 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v88 = &block_descriptor_156;
  uint64_t v64 = _Block_copy(&aBlock);
  id v65 = v62;
  swift_release();
  objc_msgSend(v65, sel_setInterruptionHandler_, v64);
  _Block_release(v64);

  uint64_t v66 = *(void **)&v32[v55];
  uint64_t v67 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v89 = partial apply for specialized closure #2 in XPCHostConnection.init(connection:queue:);
  uint64_t v90 = v67;
  long long aBlock = (char *)MEMORY[0x1E4F143A8];
  uint64_t v86 = 1107296256;
  uint64_t v87 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v88 = &block_descriptor_160;
  uint64_t v68 = _Block_copy(&aBlock);
  id v69 = v66;
  swift_release();
  objc_msgSend(v69, sel_setInvalidationHandler_, v68);
  _Block_release(v68);

  objc_msgSend(*(id *)&v32[v55], sel_resume);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v70 = type metadata accessor for Logger();
  __swift_project_value_buffer(v70, (uint64_t)static Log.host);
  uint64_t v71 = v57;
  uint64_t v72 = Logger.logObject.getter();
  os_log_type_t v73 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v72, v73))
  {
    os_log_type_t v74 = (uint8_t *)swift_slowAlloc();
    int v75 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v74 = 138412290;
    long long aBlock = v71;
    uint64_t v76 = v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v75 = v32;

    _os_log_impl(&dword_1B0DF7000, v72, v73, "Created %@", v74, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v75, -1, -1);
    MEMORY[0x1B3EA39E0](v74, -1, -1);
    unint64_t v77 = v83;
  }
  else
  {

    unint64_t v77 = v71;
  }

  return v32;
}

{
  char *v2;
  char *v5;
  char *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  unsigned char *v16;
  char v17;
  uint64_t v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  os_log_type_t v27;
  uint8_t *v28;
  void *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  char v34;
  char v35;
  char v36;
  char *v37;
  char v38;
  char v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  void *v56;
  char *v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  id v61;
  void *v62;
  uint64_t v63;
  void *v64;
  id v65;
  void *v66;
  uint64_t v67;
  void *v68;
  id v69;
  uint64_t v70;
  char *v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  void *v75;
  char *v76;
  char *v77;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  char *v83;
  void *v84;
  char *aBlock;
  uint64_t v86;
  uint64_t (*v87)();
  void *v88;
  void (*v89)();
  uint64_t v90;
  objc_super v91;

  char v5 = &v2[direct field offset for XPCHostConnection.id];
  long long v6 = v2;
  UUID.init()();
  v6[direct field offset for XPCHostConnection.hasScheduledInvalidation] = 0;
  *(void *)&v6[direct field offset for XPCHostConnection.identifiersWithPendingCoalescingBlocks] = MEMORY[0x1E4FBC870];
  *(void *)&v6[direct field offset for XPCHostConnection.blockToExecuteAfterPendingCoalescingBlocksByIdentifier] = MEMORY[0x1E4FBC868];
  uint64_t v80 = direct field offset for XPCHostConnection.connection;
  *(void *)&v6[direct field offset for XPCHostConnection.connection] = a1;
  uint64_t v81 = direct field offset for XPCHostConnection.queue;
  *(void *)&v6[direct field offset for XPCHostConnection.queue] = a2;
  id v7 = a1;
  id v8 = a2;
  uint64_t v9 = NSXPCConnection.bundleIdentifier.getter();
  if (!v10)
  {
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Log.host);
    uint64_t v26 = (char *)v7;
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 138412290;
      long long aBlock = v26;
      uint64_t v84 = v8;
      uint64_t v30 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v29 = v26;

      _os_log_impl(&dword_1B0DF7000, v20, v27, "Denying connection %@ because it does not have a valid bundle identifier.", v28, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v29, -1, -1);
      MEMORY[0x1B3EA39E0](v28, -1, -1);
    }
    else
    {
    }
    goto LABEL_20;
  }
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  long long v83 = (char *)v8;
  char v13 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(4);
  if (v13 == 2) {
    char v13 = NSXPCConnection.isEntitledToUseGameCenter.getter();
  }
  char v14 = v13;
  char v15 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(3);
  if ((v14 & 1) == 0 && (v15 & 1) == 0)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v16 = (unsigned char *)static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    if ((*v16 & 1) == 0)
    {
      char v17 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(5);
      if (v17 == 2)
      {
        if ((v16[1] & 1) == 0)
        {
LABEL_11:
          swift_bridgeObjectRelease();
          if (one-time initialization token for host != -1) {
            swift_once();
          }
          uint64_t v18 = type metadata accessor for Logger();
          __swift_project_value_buffer(v18, (uint64_t)static Log.host);
          uint64_t v19 = (char *)v7;
          uint64_t v20 = Logger.logObject.getter();
          os_log_type_t v21 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v20, v21))
          {
            uint64_t v22 = (uint8_t *)swift_slowAlloc();
            uint64_t v79 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v22 = 138412290;
            long long aBlock = v19;
            unint64_t v23 = v19;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t v79 = v19;

            _os_log_impl(&dword_1B0DF7000, v20, v21, "Denying connection %@ because it does not have valid entitlements.", v22, 0xCu);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x1B3EA39E0](v79, -1, -1);
            MEMORY[0x1B3EA39E0](v22, -1, -1);
            uint64_t v24 = v83;
          }
          else
          {

            uint64_t v24 = v19;
          }

LABEL_20:
          uint64_t v31 = type metadata accessor for UUID();
          (*(void (**)(char *, uint64_t))(*(void *)(v31 - 8) + 8))(v5, v31);

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCHostConnection<PeoplePickerInterface>);
          swift_deallocPartialClassInstance();
          return 0;
        }
      }
      else if ((v17 & 1) == 0)
      {
        goto LABEL_11;
      }
    }
  }
  uint64_t v33 = (uint64_t *)&v6[direct field offset for XPCHostConnection.bundleIdentifier];
  *uint64_t v33 = v11;
  v33[1] = v12;
  char v34 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(4);
  if (v34 == 2) {
    char v34 = NSXPCConnection.isEntitledToUseGameCenter.getter();
  }
  char v35 = v34;
  char v36 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(3);
  if (v35 & 1) != 0 || (v36)
  {
    char v38 = 1;
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v37 = (char *)static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    char v38 = *v37;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToUsePublicAPI] = v38;
  char v39 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(5);
  if (v39 == 2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v40 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    char v41 = *(unsigned char *)(v40 + 1);
  }
  else
  {
    char v41 = v39 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToUsePrivateAPI] = v41;
  char v42 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(6);
  if (v42 == 2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v43 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    char v44 = *(unsigned char *)(v43 + 24);
  }
  else
  {
    char v44 = v42 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToAccessAllSessions] = v44;
  char v45 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(7);
  if (v45 == 2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v46 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    char v47 = *(unsigned char *)(v46 + 25);
  }
  else
  {
    char v47 = v45 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToForWebFallback] = v47;
  uint64_t v48 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(8);
  if (!v48)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v48 = swift_bridgeObjectRetain();
  }
  *(void *)&v6[direct field offset for XPCHostConnection.definedSystemActivityIdentifiers] = v48;
  char v49 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(9);
  if (v49 == 2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v50 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    char v51 = *(unsigned char *)(v50 + 40);
  }
  else
  {
    char v51 = v49 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToAccessUnaliasedIdentifiers] = v51;
  v6[direct field offset for XPCHostConnection.isEntitledToUseGameCenter] = NSXPCConnection.isEntitledToUseGameCenter.getter() & 1;
  char v52 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(11);
  if (v52 == 2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v53 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    char v54 = *(unsigned char *)(v53 + 42);
  }
  else
  {
    char v54 = v52 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToProvideCustomEndpoint] = v54;
  uint64_t v82 = v7;
  v6[direct field offset for XPCHostConnection.isEntitledToBypassSharePlayRestriction] = specialized NSXPCConnection.value<A>(_:forEntitlement:)(14) & 1;

  v91.receiver = v6;
  v91.super_class = (Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCHostConnection<PeoplePickerInterface>);
  uint64_t v32 = (char *)objc_msgSendSuper2(&v91, sel_init);
  uint64_t v55 = direct field offset for XPCHostConnection.connection;
  uint64_t v56 = *(void **)&v32[direct field offset for XPCHostConnection.connection];
  id v57 = v32;
  objc_msgSend(v56, sel_setExportedObject_, v57);
  uint64_t v58 = one-time initialization token for hostObjectInterface;
  id v59 = v56;
  if (v58 != -1) {
    swift_once();
  }
  objc_msgSend(v59, sel_setExportedInterface_, static PeoplePickerInterface.hostObjectInterface);

  uint64_t v60 = one-time initialization token for clientObjectInterface;
  id v61 = *(id *)&v32[v55];
  if (v60 != -1) {
    swift_once();
  }
  objc_msgSend(v61, sel_setRemoteObjectInterface_, static PeoplePickerInterface.clientObjectInterface);

  uint64_t v62 = *(void **)&v32[v55];
  objc_msgSend(v62, sel__setQueue_, *(void *)&v57[direct field offset for XPCHostConnection.queue]);
  uint64_t v63 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v89 = partial apply for specialized closure #1 in XPCHostConnection.init(connection:queue:);
  uint64_t v90 = v63;
  long long aBlock = (char *)MEMORY[0x1E4F143A8];
  uint64_t v86 = 1107296256;
  uint64_t v87 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v88 = &block_descriptor_136_0;
  uint64_t v64 = _Block_copy(&aBlock);
  id v65 = v62;
  swift_release();
  objc_msgSend(v65, sel_setInterruptionHandler_, v64);
  _Block_release(v64);

  uint64_t v66 = *(void **)&v32[v55];
  uint64_t v67 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v89 = partial apply for specialized closure #2 in XPCHostConnection.init(connection:queue:);
  uint64_t v90 = v67;
  long long aBlock = (char *)MEMORY[0x1E4F143A8];
  uint64_t v86 = 1107296256;
  uint64_t v87 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v88 = &block_descriptor_140;
  uint64_t v68 = _Block_copy(&aBlock);
  id v69 = v66;
  swift_release();
  objc_msgSend(v69, sel_setInvalidationHandler_, v68);
  _Block_release(v68);

  objc_msgSend(*(id *)&v32[v55], sel_resume);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v70 = type metadata accessor for Logger();
  __swift_project_value_buffer(v70, (uint64_t)static Log.host);
  uint64_t v71 = v57;
  uint64_t v72 = Logger.logObject.getter();
  os_log_type_t v73 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v72, v73))
  {
    os_log_type_t v74 = (uint8_t *)swift_slowAlloc();
    int v75 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v74 = 138412290;
    long long aBlock = v71;
    uint64_t v76 = v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v75 = v32;

    _os_log_impl(&dword_1B0DF7000, v72, v73, "Created %@", v74, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v75, -1, -1);
    MEMORY[0x1B3EA39E0](v74, -1, -1);
    unint64_t v77 = v83;
  }
  else
  {

    unint64_t v77 = v71;
  }

  return v32;
}

void specialized closure #1 in XPCHostConnection.init(connection:queue:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x1B3EA3B30](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.host);
    char v5 = v3;
    long long v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      id v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = (void *)swift_slowAlloc();
      *(_DWORD *)id v8 = 138412290;
      uint64_t v10 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v9 = v3;

      _os_log_impl(&dword_1B0DF7000, v6, v7, "Connection interrupted for host connection: %@", v8, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v9, -1, -1);
      MEMORY[0x1B3EA39E0](v8, -1, -1);
    }
    else
    {

      long long v6 = v5;
    }

    objc_msgSend(*(id *)((char *)&v5->isa + direct field offset for XPCHostConnection.connection), sel_invalidate);
  }
}

void specialized closure #2 in XPCHostConnection.init(connection:queue:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x1B3EA3B30](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.host);
    char v5 = v3;
    long long v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      os_log_type_t type = v7;
      uint64_t v8 = swift_slowAlloc();
      uint64_t v9 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 138412546;
      uint64_t v10 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v9 = v3;

      *(_WORD *)(v8 + 12) = 2112;
      char v13 = *(Class *)((char *)&v10->isa + direct field offset for XPCHostConnection.queue);
      id v11 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v9[1] = v13;

      _os_log_impl(&dword_1B0DF7000, v6, type, "Connection invalidated for host connection: %@ on queue = %@", (uint8_t *)v8, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v9, -1, -1);
      MEMORY[0x1B3EA39E0](v8, -1, -1);
    }
    else
    {

      long long v6 = v5;
    }

    (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & (uint64_t)v5->isa) + 0x138))();
  }
}

uint64_t ActivitySessionHostConnection.delegate.getter()
{
  uint64_t v1 = v0 + direct field offset for ActivitySessionHostConnection.delegate;
  swift_beginAccess();
  return MEMORY[0x1B3EA3B30](v1);
}

void ActivitySessionHostConnection.delegate.setter(void *a1)
{
}

void (*ActivitySessionHostConnection.delegate.modify(void *a1))(id **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = direct field offset for ActivitySessionHostConnection.delegate;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x1B3EA3B30](v5);
  return ActivitySessionHostConnection.delegate.modify;
}

void ActivitySessionHostConnection.delegate.modify(id **a1, char a2)
{
  uint64_t v3 = *a1;
  id v4 = (*a1)[3];
  swift_unknownObjectWeakAssign();
  if (a2)
  {

    swift_endAccess();
  }
  else
  {
    swift_endAccess();
  }
  free(v3);
}

Swift::Void __swiftcall ActivitySessionHostConnection.handleHostConnectionInvalidated()()
{
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.host);
  uint64_t v2 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    long long v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138412290;
    os_log_type_t v7 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *long long v6 = v2;

    _os_log_impl(&dword_1B0DF7000, v3, v4, "activitySessionHostConnectionInvalidated: %@", v5, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v6, -1, -1);
    MEMORY[0x1B3EA39E0](v5, -1, -1);
  }
  else
  {
  }
  uint64_t v8 = &v2[direct field offset for ActivitySessionHostConnection.delegate];
  swift_beginAccess();
  uint64_t v9 = (void *)MEMORY[0x1B3EA3B30](v8);
  if (v9)
  {
    uint64_t v10 = v9;
    objc_msgSend(v9, sel_resetSession);
  }
  id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADBD0]), sel_init);
  unsigned int v12 = objc_msgSend(v11, sel_sharePlayCanEndWhenInitiatorLeaves);

  if (v12)
  {
    char v13 = (void *)MEMORY[0x1B3EA3B30](v8);
    if (v13)
    {
      char v14 = v13;
      (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v13) + 0x428))();
    }
  }
}

uint64_t (*ActivitySessionHostConnection._isAppProcess.getter())(uint64_t a1, uint64_t a2)
{
  uint64_t v1 = (uint64_t *)(v0 + direct field offset for ActivitySessionHostConnection.__isAppProcess);
  swift_beginAccess();
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v2;
  swift_retain();
  return partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed String) -> (@out Bool);
}

void specialized thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@unowned Bool)(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  id v5 = objc_allocWithZone(MEMORY[0x1E4F223C8]);
  swift_bridgeObjectRetain();

  *a2 = 1;
}

uint64_t key path setter for ActivitySessionHostConnection._isAppProcess : ActivitySessionHostConnection(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  swift_retain();
  specialized ActivitySessionHostConnection._isAppProcess.setter((uint64_t)thunk for @escaping @callee_guaranteed (@in_guaranteed String) -> (@out Bool)partial apply, v3);
  return swift_release();
}

uint64_t ActivitySessionHostConnection._isAppProcess.setter(uint64_t a1, uint64_t a2)
{
  specialized ActivitySessionHostConnection._isAppProcess.setter(a1, a2);
  return swift_release();
}

void (*ActivitySessionHostConnection._isAppProcess.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = direct field offset for ActivitySessionHostConnection.__isAppProcess;
  v3[5] = v1;
  v3[6] = v4;
  id v5 = (uint64_t *)(v1 + v4);
  swift_beginAccess();
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  *(void *)(v8 + 24) = v6;
  v3[3] = thunk for @escaping @callee_guaranteed (@in_guaranteed String) -> (@out Bool)partial apply;
  v3[4] = v8;
  swift_retain();
  return ActivitySessionHostConnection._isAppProcess.modify;
}

void ActivitySessionHostConnection._isAppProcess.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  uint64_t v4 = *(void *)(*(void *)a1 + 32);
  if ((a2 & 1) == 0)
  {
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v3;
    *(void *)(v11 + 24) = v4;
    unsigned int v12 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
    Class v13 = NSClassFromString(v12);

    if (v13
      || (char v14 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
          Class v15 = NSClassFromString(v14),
          v14,
          v15))
    {
      uint64_t v16 = (void *)(v2[5] + v2[6]);
      *uint64_t v16 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@unowned Bool);
      v16[1] = v11;
      swift_endAccess();
      swift_release();
      goto LABEL_8;
    }
LABEL_12:
    __break(1u);
    return;
  }
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  uint64_t v6 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v7 = NSClassFromString(v6);

  if (!v7)
  {
    uint64_t v8 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL);
    Class v9 = NSClassFromString(v8);

    if (!v9)
    {
      __break(1u);
      goto LABEL_12;
    }
  }
  uint64_t v10 = (void *)(v2[5] + v2[6]);
  swift_release();
  *uint64_t v10 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@unowned Bool);
  v10[1] = v5;
  swift_release();
  swift_endAccess();
LABEL_8:
  free(v2);
}

char *ActivitySessionHostConnection.init(connection:queue:)(void *a1, void *a2)
{
  swift_unknownObjectWeakInit();
  uint64_t v5 = (void *)(v2 + direct field offset for ActivitySessionHostConnection.__isAppProcess);
  *uint64_t v5 = specialized thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@unowned Bool);
  v5[1] = 0;
  return specialized XPCHostConnection.init(connection:queue:)(a1, a2);
}

uint64_t ActivitySessionHostConnection.__ivar_destroyer()
{
  swift_unknownObjectWeakDestroy();
  return swift_release();
}

id ActivitySessionHostConnection.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc ActivitySessionHostConnection.__ivar_destroyer()
{
  swift_unknownObjectWeakDestroy();
  return swift_release();
}

uint64_t ActivitySessionHostConnection.join(audioSessionID:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  char v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[0] = *(void *)&v3[direct field offset for XPCHostConnection.queue];
  Class v15 = (void *)swift_allocObject();
  void v15[2] = v3;
  uint64_t v15[3] = a1;
  v15[4] = a2;
  v15[5] = a3;
  aBlock[4] = partial apply for closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:);
  void aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t aBlock[3] = &block_descriptor_30;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = a1;
  swift_retain();
  uint64_t v18 = v3;
  static DispatchQoS.unspecified.getter();
  v20[1] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

void closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:)(void *a1, uint64_t a2, void (*a3)(void, void), uint64_t a4)
{
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.host);
  uint64_t v9 = a1;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = a4;
    uint64_t v13 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 138412290;
    uint64_t v23 = a2;
    char v14 = a3;
    Class v15 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v13 = v9;

    a3 = v14;
    a2 = v23;
    _os_log_impl(&dword_1B0DF7000, v10, v11, "activitySessionHostConnection: %@ request to join", v12, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    uint64_t v16 = v13;
    a4 = v24;
    MEMORY[0x1B3EA39E0](v16, -1, -1);
    MEMORY[0x1B3EA39E0](v12, -1, -1);
  }
  else
  {
  }
  id v17 = &v9[direct field offset for ActivitySessionHostConnection.delegate];
  swift_beginAccess();
  uint64_t v18 = MEMORY[0x1B3EA3B30](v17);
  if (v18)
  {
    uint64_t v19 = (void *)v18;
    if (a2) {
      static UInt32._conditionallyBridgeFromObjectiveC(_:result:)();
    }
    (*(void (**)(uint64_t, void (*)(void, void), uint64_t))((*MEMORY[0x1E4FBC8C8] & *v19)
                                                                                  + 0x3D0))(0x100000000, a3, a4);
  }
  else
  {
    lazy protocol witness table accessor for type Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:) and conformance Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:)();
    uint64_t v20 = (void *)swift_allocError();
    unsigned char *v21 = 1;
    swift_willThrow();
    id v22 = v20;
    a3(0, v20);
  }
}

uint64_t ActivitySessionHostConnection.leave(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)swift_allocObject();
  void v13[2] = v2;
  v13[3] = a1;
  v13[4] = a2;
  aBlock[4] = partial apply for closure #1 in ActivitySessionHostConnection.leave(completion:);
  void aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t aBlock[3] = &block_descriptor_20_0;
  char v14 = _Block_copy(aBlock);
  id v15 = v2;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v17[1] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

uint64_t closure #1 in ActivitySessionHostConnection.leave(completion:)(void *a1, uint64_t (*a2)(void))
{
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.host);
  uint64_t v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = a2;
    uint64_t v10 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    uint64_t v11 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v10 = v5;

    _os_log_impl(&dword_1B0DF7000, v6, v7, "activitySessionHostConnection: %@ request to leave", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    uint64_t v12 = v10;
    a2 = v9;
    MEMORY[0x1B3EA39E0](v12, -1, -1);
    MEMORY[0x1B3EA39E0](v8, -1, -1);
  }
  else
  {
  }
  uint64_t v13 = &v5[direct field offset for ActivitySessionHostConnection.delegate];
  swift_beginAccess();
  char v14 = (void *)MEMORY[0x1B3EA3B30](v13);
  if (v14)
  {
    id v15 = v14;
    (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v14) + 0x3D8))();
  }
  return a2(0);
}

Swift::Void __swiftcall ActivitySessionHostConnection.end()()
{
}

void closure #1 in ActivitySessionHostConnection.end()(void *a1)
{
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.host);
  uint64_t v3 = a1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412290;
    uint64_t v8 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v7 = v3;

    _os_log_impl(&dword_1B0DF7000, v4, v5, "activitySessionHostConnection %@ request to end", v6, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v7, -1, -1);
    MEMORY[0x1B3EA39E0](v6, -1, -1);
  }
  else
  {
  }
  uint64_t v9 = &v3[direct field offset for ActivitySessionHostConnection.delegate];
  swift_beginAccess();
  uint64_t v10 = (void *)MEMORY[0x1B3EA3B30](v9);
  if (v10)
  {
    uint64_t v11 = v10;
    (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v10) + 0x3E0))();
  }
}

uint64_t ActivitySessionHostConnection.postEvent(event:)(void *a1)
{
  return ActivitySessionHostConnection.postEvent(event:)(a1, (uint64_t)&unk_1F09B63E0, (uint64_t)partial apply for closure #1 in ActivitySessionHostConnection.postEvent(event:), (uint64_t)&block_descriptor_32_1);
}

void closure #1 in ActivitySessionHostConnection.postEvent(event:)(void *a1, void *a2)
{
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.host);
  id v5 = a1;
  id v6 = a2;
  os_log_type_t v7 = (char *)v5;
  uint64_t v8 = (char *)v6;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 138412546;
    uint64_t v13 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v12 = v7;

    *(_WORD *)(v11 + 12) = 2112;
    char v14 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v12[1] = v8;

    _os_log_impl(&dword_1B0DF7000, v9, v10, "activitySessionHostConnection: %@ postEvent: %@", (uint8_t *)v11, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v12, -1, -1);
    MEMORY[0x1B3EA39E0](v11, -1, -1);
  }
  else
  {
  }
  if (*(void *)&v8[OBJC_IVAR___CPActivitySessionEvent_type] == 99)
  {
    char v15 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(5);
    if (v15 == 2)
    {
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v16 = static NSXPCConnection.TestingOverrides.default;
      swift_beginAccess();
      if ((*(unsigned char *)(v16 + 1) & 1) == 0) {
        goto LABEL_11;
      }
    }
    else if ((v15 & 1) == 0)
    {
LABEL_11:
      id v17 = v7;
      uint64_t v18 = v8;
      uint64_t v19 = v17;
      uint64_t v20 = v18;
      os_log_type_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = swift_slowAlloc();
        uint64_t v24 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 138412546;
        uint64_t v25 = v19;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v24 = v19;

        *(_WORD *)(v23 + 12) = 2112;
        uint64_t v26 = v20;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v24[1] = v20;

        _os_log_impl(&dword_1B0DF7000, v21, v22, "activitySessionHostConnection: %@ is not entitled to post event %@", (uint8_t *)v23, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v24, -1, -1);
        MEMORY[0x1B3EA39E0](v23, -1, -1);
      }
      else
      {

        os_log_type_t v21 = v19;
      }
      goto LABEL_17;
    }
  }
  os_log_type_t v27 = &v7[direct field offset for ActivitySessionHostConnection.delegate];
  swift_beginAccess();
  uint64_t v28 = MEMORY[0x1B3EA3B30](v27);
  if (!v28) {
    return;
  }
  os_log_type_t v21 = v28;
  (*(void (**)(char *))((*MEMORY[0x1E4FBC8C8] & (uint64_t)v28->isa) + 0x3F8))(v8);
LABEL_17:
}

uint64_t ActivitySessionHostConnection.logAttachmentEvent(report:reportEvent:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  os_log_type_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  char v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[0] = *(void *)&v3[direct field offset for XPCHostConnection.queue];
  char v15 = (void *)swift_allocObject();
  void v15[2] = v3;
  uint64_t v15[3] = a2;
  v15[4] = a3;
  v15[5] = a1;
  aBlock[4] = partial apply for closure #1 in ActivitySessionHostConnection.logAttachmentEvent(report:reportEvent:);
  void aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t aBlock[3] = &block_descriptor_38_0;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = v3;
  swift_bridgeObjectRetain();
  id v18 = a1;
  static DispatchQoS.unspecified.getter();
  v20[1] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

void closure #1 in ActivitySessionHostConnection.logAttachmentEvent(report:reportEvent:)(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.host);
  id v9 = a1;
  swift_bridgeObjectRetain_n();
  os_log_type_t v10 = (char *)v9;
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v19 = (void *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    v21[0] = v20;
    *(_DWORD *)uint64_t v13 = 138412546;
    uint64_t v14 = a2;
    char v15 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v19 = v10;

    a2 = v14;
    *(_WORD *)(v13 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, a3, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v11, v12, "activitySessionHostConnection: %@ logAttachmentEvent: %s", (uint8_t *)v13, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v19, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v20, -1, -1);
    MEMORY[0x1B3EA39E0](v13, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v16 = &v10[direct field offset for ActivitySessionHostConnection.delegate];
  swift_beginAccess();
  id v17 = (void *)MEMORY[0x1B3EA3B30](v16);
  if (v17)
  {
    id v18 = v17;
    (*(void (**)(uint64_t, uint64_t, unint64_t))((*MEMORY[0x1E4FBC8C8] & *v17) + 0x3F0))(a4, a2, a3);
  }
}

Swift::Void __swiftcall ActivitySessionHostConnection.requestEncryptionKeys(for:)(Swift::OpaquePointer_optional a1)
{
  rawValue = a1.value._rawValue;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  id v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  os_log_type_t v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v1;
  *(void *)(v11 + 24) = rawValue;
  aBlock[4] = partial apply for closure #1 in ActivitySessionHostConnection.requestEncryptionKeys(for:);
  void aBlock[5] = v11;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t aBlock[3] = &block_descriptor_44_0;
  os_log_type_t v12 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  id v13 = v1;
  static DispatchQoS.unspecified.getter();
  v14[1] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v10, v6, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_release();
}

void closure #1 in ActivitySessionHostConnection.requestEncryptionKeys(for:)(void *a1, uint64_t a2)
{
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  uint64_t v5 = a1;
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    v18[0] = v17;
    *(_DWORD *)uint64_t v8 = 138412546;
    os_log_type_t v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v5;

    *(_WORD *)(v8 + 12) = 2080;
    if (a2)
    {
      uint64_t v11 = MEMORY[0x1B3EA1D20](a2, MEMORY[0x1E4FBC538]);
      unint64_t v13 = v12;
    }
    else
    {
      unint64_t v13 = 0xE500000000000000;
      uint64_t v11 = 0x3E6C696E3CLL;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v6, v7, "activitySessionHostConnection: %@ requestEncryptionKeys participants: %s", (uint8_t *)v8, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v9, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v17, -1, -1);
    MEMORY[0x1B3EA39E0](v8, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v14 = &v5[direct field offset for ActivitySessionHostConnection.delegate];
  swift_beginAccess();
  char v15 = (void *)MEMORY[0x1B3EA3B30](v14);
  if (v15)
  {
    uint64_t v16 = v15;
    (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v15) + 0x400))(a2);
  }
}

uint64_t ActivitySessionHostConnection.requestParticipants(for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  os_log_type_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = *(void *)&v3[direct field offset for XPCHostConnection.queue];
  char v15 = (void *)swift_allocObject();
  void v15[2] = v3;
  uint64_t v15[3] = a1;
  v15[4] = a2;
  v15[5] = a3;
  aBlock[4] = partial apply for closure #1 in ActivitySessionHostConnection.requestParticipants(for:completion:);
  void aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t aBlock[3] = &block_descriptor_50_0;
  uint64_t v16 = _Block_copy(aBlock);
  uint64_t v17 = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v19[1] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

uint64_t closure #1 in ActivitySessionHostConnection.requestParticipants(for:completion:)(void *a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v62 = a4;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = __swift_project_value_buffer(v10, (uint64_t)static Log.host);
  id v12 = a1;
  swift_bridgeObjectRetain_n();
  uint64_t v13 = (char *)v12;
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v59 = v7;
  uint64_t v60 = v9;
  if (v16)
  {
    uint64_t v17 = swift_slowAlloc();
    id v18 = (void *)swift_slowAlloc();
    uint64_t v57 = swift_slowAlloc();
    aBlock[0] = v57;
    *(_DWORD *)uint64_t v17 = 138412546;
    id v61 = a3;
    uint64_t v19 = v13;
    uint64_t v65 = (uint64_t)v13;
    uint64_t v58 = v11;
    uint64_t v20 = a2;
    os_log_type_t v21 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v18 = v13;

    *(_WORD *)(v17 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v22 = Set.description.getter();
    unint64_t v24 = v23;
    swift_bridgeObjectRelease();
    uint64_t v25 = v22;
    a3 = v61;
    uint64_t v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v24, aBlock);
    a2 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v13 = v19;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v14, v15, "[Translation] activitySessionHostConnection: %@ requestParticipants: %s", (uint8_t *)v17, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v18, -1, -1);
    uint64_t v26 = v57;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v26, -1, -1);
    MEMORY[0x1B3EA39E0](v17, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v27 = objc_msgSend(objc_allocWithZone((Class)CPFeatureFlags), sel_init);
  unsigned int v28 = objc_msgSend(v27, sel_gameCenterFastSyncTransport);

  if (v28) {
    int v29 = NSXPCConnection.isEntitledToUseGameCenter.getter();
  }
  else {
    int v29 = 0;
  }
  char v30 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(5);
  if (v30 == 2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v31 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    if (((*(unsigned __int8 *)(v31 + 1) | v29) & 1) == 0)
    {
LABEL_13:
      uint64_t v32 = v13;
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v33, v34))
      {
        char v35 = (uint8_t *)swift_slowAlloc();
        uint64_t v36 = swift_slowAlloc();
        id v61 = a3;
        uint64_t v37 = (void *)v36;
        *(_DWORD *)char v35 = 138412290;
        aBlock[0] = (uint64_t)v32;
        char v38 = v32;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v37 = v32;

        char v39 = "[Translation] activitySessionHostConnection: %@ is not entitled to request a translated participantID";
LABEL_20:
        _os_log_impl(&dword_1B0DF7000, v33, v34, v39, v35, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        a3 = v61;
        MEMORY[0x1B3EA39E0](v37, -1, -1);
        MEMORY[0x1B3EA39E0](v35, -1, -1);
        goto LABEL_22;
      }
      goto LABEL_21;
    }
  }
  else if (!(v30 & 1 | v29 & 1))
  {
    goto LABEL_13;
  }
  uint64_t v40 = &v13[direct field offset for ActivitySessionHostConnection.delegate];
  swift_beginAccess();
  uint64_t v41 = MEMORY[0x1B3EA3B30](v40);
  if (v41)
  {
    char v42 = (void *)v41;
    dispatch_group_t v43 = dispatch_group_create();
    type metadata accessor for Lock();
    uint64_t v44 = swift_allocObject();
    char v45 = (_DWORD *)swift_slowAlloc();
    *(void *)(v44 + 16) = v45;
    *char v45 = 0;
    uint64_t v46 = swift_allocObject();
    *(void *)(v46 + 16) = MEMORY[0x1E4FBC870];
    char v47 = (void *)swift_allocObject();
    long long v47[2] = a2;
    v47[3] = a3;
    v47[4] = v62;
    v47[5] = v46;
    aBlock[4] = (uint64_t)partial apply for closure #1 in closure #1 in ActivitySessionHostConnection.requestParticipants(for:completion:);
    void aBlock[5] = (uint64_t)v47;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    uint64_t aBlock[3] = (uint64_t)&block_descriptor_169;
    _Block_copy(aBlock);
    uint64_t v63 = MEMORY[0x1E4FBC860];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    uint64_t v48 = a2;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    type metadata accessor for DispatchWorkItem();
    swift_allocObject();
    DispatchWorkItem.init(flags:block:)();
    swift_release();
    swift_retain();
    char v49 = v43;
    uint64_t v50 = v42;
    swift_retain();
    specialized Sequence.forEach(_:)(v48, v49, v50, v44, v46);

    swift_release();
    swift_release();
    OS_dispatch_group.notify(queue:work:)();

    swift_release();
    swift_release();
    return swift_release();
  }
  uint64_t v32 = v13;
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v33, v34))
  {
    char v35 = (uint8_t *)swift_slowAlloc();
    uint64_t v52 = swift_slowAlloc();
    id v61 = a3;
    uint64_t v37 = (void *)v52;
    *(_DWORD *)char v35 = 138412290;
    aBlock[0] = (uint64_t)v32;
    uint64_t v53 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v37 = v32;

    char v39 = "[Translation] activitySessionHostConnection: %@ No session exists";
    goto LABEL_20;
  }
LABEL_21:

  uint64_t v33 = v32;
LABEL_22:

  if ((MEMORY[0x1E4FBC860] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860]);
    uint64_t v54 = v55;
  }
  else
  {
    uint64_t v54 = MEMORY[0x1E4FBC870];
  }
  a3(v54);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #1 in ActivitySessionHostConnection.requestParticipants(for:completion:)(uint64_t a1, void (*a2)(void))
{
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    id v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    v14[0] = v7;
    *(_DWORD *)id v6 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v8 = Set.description.getter();
    uint64_t v9 = a2;
    unint64_t v11 = v10;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v11, v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    a2 = v9;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v4, v5, "[Translation] Retrieved all translations for participantIDs %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v7, -1, -1);
    MEMORY[0x1B3EA39E0](v6, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_beginAccess();
  uint64_t v12 = swift_bridgeObjectRetain();
  a2(v12);
  return swift_bridgeObjectRelease();
}

void closure #1 in closure #2 in closure #1 in ActivitySessionHostConnection.requestParticipants(for:completion:)(void *a1, dispatch_group_t group, uint64_t a3)
{
  if (a1)
  {
    os_log_type_t v5 = *(os_unfair_lock_s **)(a3 + 16);
    id v6 = a1;
    os_unfair_lock_lock(v5);
    swift_beginAccess();
    id v7 = v6;
    specialized Set._Variant.insert(_:)(&v8, v7);
    swift_endAccess();

    os_unfair_lock_unlock(*(os_unfair_lock_t *)(a3 + 16));
    dispatch_group_leave(group);
  }
  else
  {
    dispatch_group_leave(group);
  }
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSSet) -> ()(uint64_t a1, uint64_t a2)
{
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
  lazy protocol witness table accessor for type TUConversationParticipant and conformance NSObject();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, objc_class *))(a2 + 16))(a2, isa);
}

uint64_t ActivitySessionHostConnection.updateActivity(activity:)(void *a1)
{
  return ActivitySessionHostConnection.postEvent(event:)(a1, (uint64_t)&unk_1F09B6480, (uint64_t)partial apply for closure #1 in ActivitySessionHostConnection.updateActivity(activity:), (uint64_t)&block_descriptor_56_0);
}

uint64_t ActivitySessionHostConnection.postEvent(event:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  unint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(void *)&v4[direct field offset for XPCHostConnection.queue];
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v4;
  *(void *)(v15 + 24) = a1;
  aBlock[4] = a3;
  void aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t aBlock[3] = a4;
  BOOL v16 = _Block_copy(aBlock);
  uint64_t v17 = v4;
  id v18 = a1;
  static DispatchQoS.unspecified.getter();
  uint64_t v22 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v14, v11, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v21);
  return swift_release();
}

void closure #1 in ActivitySessionHostConnection.updateActivity(activity:)(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  id v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = __swift_project_value_buffer(v11, (uint64_t)static Log.host);
  id v13 = a1;
  id v14 = a2;
  uint64_t v15 = (char *)v13;
  BOOL v16 = (char *)v14;
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v48 = v10;
    uint64_t v21 = (void *)v20;
    *(_DWORD *)uint64_t v19 = 138412546;
    char v47 = v7;
    uint64_t v49 = v5;
    uint64_t v54 = v15;
    uint64_t v51 = v12;
    uint64_t v22 = v15;
    uint64_t v50 = v4;
    unint64_t v23 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v21 = v15;

    *(_WORD *)(v19 + 12) = 2112;
    uint64_t v54 = v16;
    unint64_t v24 = v16;
    id v7 = v47;
    uint64_t v5 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v21[1] = v16;

    uint64_t v4 = v50;
    _os_log_impl(&dword_1B0DF7000, v17, v18, "activitySessionHostConnection: %@ updateActivity %@", (uint8_t *)v19, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    uint64_t v25 = v21;
    uint64_t v10 = v48;
    MEMORY[0x1B3EA39E0](v25, -1, -1);
    MEMORY[0x1B3EA39E0](v19, -1, -1);
  }
  else
  {
  }
  id v26 = objc_msgSend(self, sel_sharedInstance);
  if (!v26)
  {
    __break(1u);
    goto LABEL_28;
  }
  id v27 = v26;
  id v28 = objc_msgSend(v26, sel_currentServerTimeDate);

  if (!v28)
  {
LABEL_28:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, 1, 1, v4);
    goto LABEL_29;
  }
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v7, v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
LABEL_29:
    __break(1u);
    return;
  }
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  objc_msgSend(v16, sel_setTimestamp_, isa);

  char v30 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(5);
  if (v30 == 2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v31 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    if ((*(unsigned char *)(v31 + 1) & 1) == 0) {
      goto LABEL_16;
    }
  }
  else if ((v30 & 1) == 0)
  {
LABEL_16:
    uint64_t v33 = NSXPCConnection.bundleIdentifier.getter();
    if (v34)
    {
      id v32 = (id)MEMORY[0x1B3EA1B00](v33);
      swift_bridgeObjectRelease();
    }
    else
    {
      id v32 = 0;
    }
    objc_msgSend(v16, sel_setBundleIdentifier_, v32);
    goto LABEL_20;
  }
  id v32 = objc_msgSend(v16, sel_bundleIdentifier);
  if (!v32) {
    goto LABEL_16;
  }
LABEL_20:

  char v35 = (char *)objc_msgSend(v16, sel_sanitizedCopy);
  if (v35)
  {
    uint64_t v36 = v35;
    objc_msgSend(v35, sel_setTrustedFromHandle_, 0);
    uint64_t v37 = &v15[direct field offset for ActivitySessionHostConnection.delegate];
    swift_beginAccess();
    uint64_t v38 = MEMORY[0x1B3EA3B30](v37);
    if (v38)
    {
      char v39 = (void *)v38;
      ActivitySession.updateActivity(_:)(v36);
    }
  }
  else
  {
    uint64_t v36 = v16;
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      char v42 = (uint8_t *)swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      v52[0] = v43;
      *(_DWORD *)char v42 = 136315138;
      uint64_t v53 = (uint64_t)v36;
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivity);
      uint64_t v44 = v36;
      uint64_t v45 = String.init<A>(reflecting:)();
      uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v40, v41, "Dropping activity session update due to invalid activity: %s", v42, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v43, -1, -1);
      MEMORY[0x1B3EA39E0](v42, -1, -1);

      return;
    }
  }
}

uint64_t ActivitySessionHostConnection.presentSessionDismissalAlert(allowingCancellation:completion:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  id v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = *(void *)&v3[direct field offset for XPCHostConnection.queue];
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v3;
  *(unsigned char *)(v15 + 24) = a1;
  *(void *)(v15 + 32) = a2;
  *(void *)(v15 + 40) = a3;
  aBlock[4] = partial apply for closure #1 in ActivitySessionHostConnection.presentSessionDismissalAlert(allowingCancellation:completion:);
  void aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t aBlock[3] = &block_descriptor_62_0;
  BOOL v16 = _Block_copy(aBlock);
  uint64_t v17 = v3;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v19[1] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

void closure #1 in ActivitySessionHostConnection.presentSessionDismissalAlert(allowingCancellation:completion:)(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.host);
  uint64_t v9 = a1;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    char v20 = a2;
    uint64_t v13 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 138412290;
    uint64_t v21 = a3;
    uint64_t v14 = a4;
    uint64_t v15 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v13 = v9;

    a4 = v14;
    a3 = v21;
    _os_log_impl(&dword_1B0DF7000, v10, v11, "activitySessionHostConnection: %@ got request to present session dismissal alert", v12, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    BOOL v16 = v13;
    a2 = v20;
    MEMORY[0x1B3EA39E0](v16, -1, -1);
    MEMORY[0x1B3EA39E0](v12, -1, -1);
  }
  else
  {
  }
  uint64_t v17 = &v9[direct field offset for ActivitySessionHostConnection.delegate];
  swift_beginAccess();
  os_log_type_t v18 = (void *)MEMORY[0x1B3EA3B30](v17);
  if (v18)
  {
    uint64_t v19 = v18;
    (*(void (**)(void, void, void, uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & *v18) + 0x410))(*(void *)&v9[direct field offset for XPCHostConnection.bundleIdentifier], *(void *)&v9[direct field offset for XPCHostConnection.bundleIdentifier + 8], a2 & 1, a3, a4);
  }
}

Swift::Void __swiftcall ActivitySessionHostConnection.requestForegroundPresentation()()
{
}

uint64_t ActivitySessionHostConnection.end()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[0] = *(void *)&v3[direct field offset for XPCHostConnection.queue];
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v3;
  aBlock[4] = a2;
  void aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t aBlock[3] = a3;
  uint64_t v15 = _Block_copy(aBlock);
  BOOL v16 = v3;
  static DispatchQoS.unspecified.getter();
  v18[1] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release();
}

void closure #1 in ActivitySessionHostConnection.requestForegroundPresentation()(void *a1)
{
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.host);
  uint64_t v3 = a1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412290;
    uint64_t v8 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v3;

    _os_log_impl(&dword_1B0DF7000, v4, v5, "activitySessionHostConnection: %@ got request to present in foreground", v6, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v7, -1, -1);
    MEMORY[0x1B3EA39E0](v6, -1, -1);
  }
  else
  {
  }
  uint64_t v9 = &v3[direct field offset for ActivitySessionHostConnection.delegate];
  swift_beginAccess();
  uint64_t v10 = (void *)MEMORY[0x1B3EA3B30](v9);
  if (v10)
  {
    uint64_t v11 = v10;
    (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v10) + 0x480))();
  }
}

Swift::Void __swiftcall ActivitySessionHostConnection.associateScene(sceneID:)(Swift::String sceneID)
{
  object = sceneID._object;
  uint64_t countAndFlagsBits = sceneID._countAndFlagsBits;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)swift_allocObject();
  long long v12[2] = v1;
  void v12[3] = countAndFlagsBits;
  v12[4] = object;
  aBlock[4] = partial apply for closure #1 in ActivitySessionHostConnection.associateScene(sceneID:);
  void aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t aBlock[3] = &block_descriptor_74_0;
  uint64_t v13 = _Block_copy(aBlock);
  id v14 = v1;
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  v15[1] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v11, v7, v13);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_release();
}

void closure #1 in ActivitySessionHostConnection.associateScene(sceneID:)(void *a1, uint64_t a2, unint64_t a3)
{
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.host);
  id v7 = a1;
  swift_bridgeObjectRetain_n();
  uint64_t v8 = (char *)v7;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    BOOL v16 = (void *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    v18[0] = v17;
    *(_DWORD *)uint64_t v11 = 138412546;
    uint64_t v12 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *BOOL v16 = v8;

    *(_WORD *)(v11 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v9, v10, "activitySessionHostConnection: %@ associateSceneID: %s", (uint8_t *)v11, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v16, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v17, -1, -1);
    MEMORY[0x1B3EA39E0](v11, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v13 = &v8[direct field offset for ActivitySessionHostConnection.delegate];
  swift_beginAccess();
  id v14 = (void *)MEMORY[0x1B3EA3B30](v13);
  if (v14)
  {
    uint64_t v15 = v14;
    (*(void (**)(uint64_t, unint64_t))((*MEMORY[0x1E4FBC8C8] & *v14) + 0x490))(a2, a3);
  }
}

Swift::Void __swiftcall ActivitySessionHostConnection.disassociateScene()()
{
}

void closure #1 in ActivitySessionHostConnection.disassociateScene()(void *a1)
{
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.host);
  uint64_t v3 = a1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    id v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412290;
    uint64_t v8 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v7 = v3;

    _os_log_impl(&dword_1B0DF7000, v4, v5, "activitySessionHostConnection: %@ disassociateSceneID", v6, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v7, -1, -1);
    MEMORY[0x1B3EA39E0](v6, -1, -1);
  }
  else
  {
  }
  uint64_t v9 = &v3[direct field offset for ActivitySessionHostConnection.delegate];
  swift_beginAccess();
  os_log_type_t v10 = (void *)MEMORY[0x1B3EA3B30](v9);
  if (v10)
  {
    uint64_t v11 = v10;
    (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v10) + 0x498))();
  }
}

uint64_t ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v24[0] = a4;
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v27 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  id v14 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v25 = *(void *)(v15 - 8);
  uint64_t v26 = v15;
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[1] = *(void *)&v6[direct field offset for XPCHostConnection.queue];
  os_log_type_t v18 = (void *)swift_allocObject();
  void v18[2] = v6;
  uint64_t v18[3] = a1;
  _OWORD v18[4] = a5;
  v18[5] = a6;
  v18[6] = a2;
  id v18[7] = a3;
  unint64_t v19 = v24[0];
  v18[8] = v24[0];
  aBlock[4] = partial apply for closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:);
  void aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t aBlock[3] = &block_descriptor_86;
  char v20 = _Block_copy(aBlock);
  uint64_t v21 = v6;
  id v22 = a1;
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(a3, v19);
  static DispatchQoS.unspecified.getter();
  uint64_t v28 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v17, v14, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v17, v26);
  return swift_release();
}

void closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:)(void *a1, void *a2, void (*a3)(void), char *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v58 = *(void *)(v14 - 8);
  uint64_t v59 = v14;
  MEMORY[0x1F4188790](v14);
  uint64_t v57 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v56 = type metadata accessor for Logger();
  uint64_t v16 = __swift_project_value_buffer(v56, (uint64_t)static Log.host);
  uint64_t v17 = a1;
  uint64_t v54 = v16;
  os_log_type_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v55 = a3;
    uint64_t v21 = (uint8_t *)v20;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v53 = a4;
    uint64_t v50 = (void *)v22;
    uint64_t v51 = a2;
    unint64_t v52 = a7;
    *(_DWORD *)uint64_t v21 = 138412290;
    uint64_t v60 = v17;
    unint64_t v23 = v17;
    a2 = v51;
    a7 = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    unint64_t v24 = v50;
    *uint64_t v50 = v17;

    _os_log_impl(&dword_1B0DF7000, v18, v19, "activitySessionHostConnection: %@ got request to send resource", v21, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    uint64_t v25 = v24;
    a4 = v53;
    MEMORY[0x1B3EA39E0](v25, -1, -1);
    uint64_t v26 = v21;
    a3 = v55;
    MEMORY[0x1B3EA39E0](v26, -1, -1);
  }
  else
  {
  }
  id v27 = objc_msgSend(objc_allocWithZone((Class)CPFeatureFlags), sel_init);
  unsigned int v28 = objc_msgSend(v27, sel_sharePlayInFaceTimeCanvasEnabled);

  if (v28)
  {
    int v29 = *(Class *)((char *)&v17->isa + direct field offset for XPCHostConnection.connection);
    id v30 = objc_msgSend(a2, sel_URL);
    uint64_t v31 = v17;
    id v32 = v57;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    URL._bridgeToObjectiveC()(v33);
    char v35 = v34;
    (*(void (**)(char *, uint64_t))(v58 + 8))(v32, v59);
    LODWORD(v29) = objc_msgSend(v29, sel_cp_clientSandboxCanAccessFileURL_, v35);

    if (v29)
    {
      uint64_t v36 = (char *)v31 + direct field offset for ActivitySessionHostConnection.delegate;
      swift_beginAccess();
      uint64_t v37 = MEMORY[0x1B3EA3B30](v36);
      if (v37)
      {
        uint64_t v38 = (void *)v37;
        ActivitySession.sendResource(atURL:to:metadata:completion:)(a2, a5, a6, a7, a3, a4);
      }
    }
    else
    {
      char v42 = v31;
      uint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v55 = a3;
        uint64_t v45 = (uint8_t *)swift_slowAlloc();
        unint64_t v46 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v45 = 138412290;
        uint64_t v60 = v42;
        char v47 = v42;
        a3 = v55;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unint64_t v46 = v42;

        _os_log_impl(&dword_1B0DF7000, v43, v44, "activitySessionHostConnection: %@ client attempted to send a resource it does not have access to", v45, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v46, -1, -1);
        MEMORY[0x1B3EA39E0](v45, -1, -1);
      }
      else
      {

        uint64_t v43 = v42;
      }

      lazy protocol witness table accessor for type Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:) and conformance Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:)();
      uint64_t v48 = (void *)swift_allocError();
      a3();
    }
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v56, (uint64_t)static Log.default);
    char v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      os_log_type_t v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v41 = 0;
      _os_log_impl(&dword_1B0DF7000, v39, v40, "Not allowing resource send due to FeatureFlag being disabled.", v41, 2u);
      MEMORY[0x1B3EA39E0](v41, -1, -1);
    }
  }
}

uint64_t ActivitySessionHostConnection.requestEndpoint(with:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(void *)&v4[direct field offset for XPCHostConnection.queue];
  uint64_t v16 = (void *)swift_allocObject();
  long long v16[2] = v4;
  uint64_t v16[3] = a1;
  v16[4] = a2;
  v16[5] = a3;
  void v16[6] = a4;
  aBlock[4] = partial apply for closure #1 in ActivitySessionHostConnection.requestEndpoint(with:completion:);
  void aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t aBlock[3] = &block_descriptor_92;
  uint64_t v17 = _Block_copy(aBlock);
  os_log_type_t v18 = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v22 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v15, v12, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v21);
  return swift_release();
}

void closure #1 in ActivitySessionHostConnection.requestEndpoint(with:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.host);
  id v11 = a1;
  swift_bridgeObjectRetain_n();
  uint64_t v12 = (char *)v11;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v22 = (void *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    v24[0] = v23;
    *(_DWORD *)uint64_t v15 = 138412546;
    unint64_t v16 = a3;
    uint64_t v17 = a2;
    os_log_type_t v18 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v22 = v12;

    a2 = v17;
    a3 = v16;
    *(_WORD *)(v15 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, v16, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v13, v14, "activitySessionHostConnection: %@ got request for endpoint with identifier %s", (uint8_t *)v15, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v22, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v23, -1, -1);
    MEMORY[0x1B3EA39E0](v15, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  os_log_type_t v19 = &v12[direct field offset for ActivitySessionHostConnection.delegate];
  swift_beginAccess();
  uint64_t v20 = MEMORY[0x1B3EA3B30](v19);
  if (v20)
  {
    uint64_t v21 = (void *)v20;
    ActivitySession.requestEndpoint(with:completion:)(a2, a3, a4, a5);
  }
}

Swift::Void __swiftcall ActivitySessionHostConnection.updateCapabilities(capabilities:)(Swift::Int capabilities)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v1;
  *(void *)(v11 + 24) = capabilities;
  aBlock[4] = partial apply for closure #1 in ActivitySessionHostConnection.updateCapabilities(capabilities:);
  void aBlock[5] = v11;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t aBlock[3] = &block_descriptor_98;
  uint64_t v12 = _Block_copy(aBlock);
  id v13 = v1;
  static DispatchQoS.unspecified.getter();
  v14[1] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v10, v6, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_release();
}

void closure #1 in ActivitySessionHostConnection.updateCapabilities(capabilities:)(void *a1, uint64_t a2)
{
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.host);
  uint64_t v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412546;
    uint64_t v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v5;

    *(_WORD *)(v8 + 12) = 2048;
    v14[1] = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B0DF7000, v6, v7, "activitySessionHostConnection: %@ got request to update capabilities to: %ld", (uint8_t *)v8, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v9, -1, -1);
    MEMORY[0x1B3EA39E0](v8, -1, -1);
  }
  else
  {
  }
  uint64_t v11 = &v5[direct field offset for ActivitySessionHostConnection.delegate];
  swift_beginAccess();
  uint64_t v12 = (void *)MEMORY[0x1B3EA3B30](v11);
  if (v12)
  {
    id v13 = v12;
    v14[0] = a2;
    (*(void (**)(void *))((*MEMORY[0x1E4FBC8C8] & *v12) + 0x288))(v14);
  }
}

uint64_t sub_1B109E9A0()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed String) -> (@out Bool)(uint64_t a1, uint64_t a2)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed String) -> (@out Bool)(a1, a2, *(void (**)(unsigned __int8 *__return_ptr, void *))(v2 + 16));
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, NSObject *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 56);
  int64_t v22 = (unint64_t)(v6 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  for (int64_t i = 0; ; int64_t i = v27)
  {
    if (v8)
    {
      unint64_t v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      int64_t v27 = i;
      unint64_t v12 = v11 | (i << 6);
      goto LABEL_5;
    }
    int64_t v17 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v22) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v21 + 8 * v17);
    int64_t v19 = i + 1;
    if (!v18)
    {
      int64_t v19 = i + 2;
      if (i + 2 >= v22) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v21 + 8 * v19);
      if (!v18)
      {
        int64_t v19 = i + 3;
        if (i + 3 >= v22) {
          return swift_release();
        }
        unint64_t v18 = *(void *)(v21 + 8 * v19);
        if (!v18)
        {
          int64_t v19 = i + 4;
          if (i + 4 >= v22) {
            return swift_release();
          }
          unint64_t v18 = *(void *)(v21 + 8 * v19);
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v8 = (v18 - 1) & v18;
    int64_t v27 = v19;
    unint64_t v12 = __clz(__rbit64(v18)) + (v19 << 6);
LABEL_5:
    uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8 * v12);
    dispatch_group_enter(a2);
    os_log_type_t v14 = (void *)swift_allocObject();
    void v14[2] = a2;
    uint64_t v14[3] = a4;
    void v14[4] = a5;
    uint64_t v15 = *(void (**)(uint64_t, void (*)(void *), void *))((*MEMORY[0x1E4FBC8C8] & *a3) + 0x408);
    unint64_t v16 = a2;
    swift_retain();
    swift_retain();
    v15(v13, partial apply for closure #1 in closure #2 in closure #1 in ActivitySessionHostConnection.requestParticipants(for:completion:), v14);
    uint64_t result = swift_release();
  }
  uint64_t v20 = i + 5;
  if (i + 5 >= v22) {
    return swift_release();
  }
  unint64_t v18 = *(void *)(v21 + 8 * v20);
  if (v18)
  {
    int64_t v19 = i + 5;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v19 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v19 >= v22) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v21 + 8 * v19);
    ++v20;
    if (v18) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void specialized ActivitySessionHostConnection._isAppProcess.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  uint64_t v6 = (void *)(v2 + direct field offset for ActivitySessionHostConnection.__isAppProcess);
  swift_beginAccess();
  swift_retain();
  uint64_t v7 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v8 = NSClassFromString(v7);

  if (v8
    || (uint64_t v9 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
        Class v10 = NSClassFromString(v9),
        v9,
        v10))
  {
    *uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@unowned Bool);
    v6[1] = v5;
    swift_endAccess();
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1B109ED50()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

void partial apply for closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:)()
{
  closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void (**)(void, void))(v0 + 32), *(void *)(v0 + 40));
}

uint64_t block_destroy_helper_28()
{
  return swift_release();
}

uint64_t sub_1B109EDAC()
{
  return objectdestroy_16Tm_1(MEMORY[0x1E4FBC8D0]);
}

uint64_t partial apply for closure #1 in ActivitySessionHostConnection.leave(completion:)()
{
  return closure #1 in ActivitySessionHostConnection.leave(completion:)(*(void **)(v0 + 16), *(uint64_t (**)(void))(v0 + 24));
}

uint64_t sub_1B109EDD0()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void partial apply for closure #1 in ActivitySessionHostConnection.end()()
{
  closure #1 in ActivitySessionHostConnection.end()(*(void **)(v0 + 16));
}

uint64_t sub_1B109EE10()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #1 in ActivitySessionHostConnection.postEvent(event:)()
{
  closure #1 in ActivitySessionHostConnection.postEvent(event:)(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1B109EE58()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

void partial apply for closure #1 in ActivitySessionHostConnection.logAttachmentEvent(report:reportEvent:)()
{
  closure #1 in ActivitySessionHostConnection.logAttachmentEvent(report:reportEvent:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1B109EEAC()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #1 in ActivitySessionHostConnection.requestEncryptionKeys(for:)()
{
  closure #1 in ActivitySessionHostConnection.requestEncryptionKeys(for:)(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1B109EEF4()
{
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in ActivitySessionHostConnection.requestParticipants(for:completion:)()
{
  return closure #1 in ActivitySessionHostConnection.requestParticipants(for:completion:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void (**)(void))(v0 + 32), *(void *)(v0 + 40));
}

void partial apply for closure #1 in ActivitySessionHostConnection.updateActivity(activity:)()
{
  closure #1 in ActivitySessionHostConnection.updateActivity(activity:)(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1B109EF50()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

void partial apply for closure #1 in ActivitySessionHostConnection.presentSessionDismissalAlert(allowingCancellation:completion:)()
{
  closure #1 in ActivitySessionHostConnection.presentSessionDismissalAlert(allowingCancellation:completion:)(*(void **)(v0 + 16), *(unsigned char *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

void partial apply for closure #1 in ActivitySessionHostConnection.requestForegroundPresentation()()
{
  closure #1 in ActivitySessionHostConnection.requestForegroundPresentation()(*(void **)(v0 + 16));
}

uint64_t sub_1B109EFA8()
{
  return objectdestroy_16Tm_1(MEMORY[0x1E4FBC898]);
}

uint64_t objectdestroy_16Tm_1(void (*a1)(void))
{
  a1(*(void *)(v1 + 32));
  return MEMORY[0x1F4186498](v1, 40, 7);
}

void partial apply for closure #1 in ActivitySessionHostConnection.associateScene(sceneID:)()
{
  closure #1 in ActivitySessionHostConnection.associateScene(sceneID:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

void partial apply for closure #1 in ActivitySessionHostConnection.disassociateScene()()
{
  closure #1 in ActivitySessionHostConnection.disassociateScene()(*(void **)(v0 + 16));
}

uint64_t sub_1B109F024()
{
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(void *)(v0 + 56), *(void *)(v0 + 64));
  return MEMORY[0x1F4186498](v0, 72, 7);
}

void partial apply for closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:)()
{
  closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:)(*(void **)(v0 + 16), *(void **)(v0 + 24), *(void (**)(void))(v0 + 32), *(char **)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64));
}

uint64_t sub_1B109F090()
{
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x1F4186498](v0, 56, 7);
}

void partial apply for closure #1 in ActivitySessionHostConnection.requestEndpoint(with:completion:)()
{
  closure #1 in ActivitySessionHostConnection.requestEndpoint(with:completion:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_1B109F0E8()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #1 in ActivitySessionHostConnection.updateCapabilities(capabilities:)()
{
  closure #1 in ActivitySessionHostConnection.updateCapabilities(capabilities:)(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1B109F128@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + direct field offset for ActivitySessionHostConnection.delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1B3EA3B30](v3);
  *a2 = result;
  return result;
}

uint64_t sub_1B109F180()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_1B109F1D8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)(*a1 + direct field offset for ActivitySessionHostConnection.__isAppProcess);
  swift_beginAccess();
  uint64_t v4 = v3[1];
  *a2 = *v3;
  a2[1] = v4;
  return swift_retain();
}

uint64_t type metadata accessor for ActivitySessionHostConnection()
{
  uint64_t result = type metadata singleton initialization cache for ActivitySessionHostConnection;
  if (!type metadata singleton initialization cache for ActivitySessionHostConnection) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for ActivitySessionHostConnection()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for ActivitySessionHostConnection()
{
  return type metadata accessor for ActivitySessionHostConnection();
}

uint64_t sub_1B109F2D8()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSSet) -> ()(uint64_t a1)
{
  thunk for @escaping @callee_unowned @convention(block) (@unowned NSSet) -> ()(a1, *(void *)(v1 + 16));
}

uint64_t sub_1B109F318()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void partial apply for specialized closure #1 in XPCHostConnection.init(connection:queue:)()
{
  specialized closure #1 in XPCHostConnection.init(connection:queue:)(v0);
}

{
  uint64_t v0;

  specialized closure #1 in XPCHostConnection.init(connection:queue:)(v0);
}

void partial apply for specialized closure #2 in XPCHostConnection.init(connection:queue:)()
{
  specialized closure #2 in XPCHostConnection.init(connection:queue:)(v0);
}

{
  uint64_t v0;

  specialized closure #2 in XPCHostConnection.init(connection:queue:)(v0);
}

unint64_t lazy protocol witness table accessor for type Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:) and conformance Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:)()
{
  unint64_t result = lazy protocol witness table cache variable for type Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:) and conformance Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:);
  if (!lazy protocol witness table cache variable for type Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:) and conformance Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:))
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:) and conformance Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:) and conformance Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:);
  if (!lazy protocol witness table cache variable for type Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:) and conformance Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:))
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:) and conformance Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:));
  }
  return result;
}

uint64_t sub_1B109F3DC()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B109F414()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in closure #1 in ActivitySessionHostConnection.requestParticipants(for:completion:)()
{
  return closure #1 in closure #1 in ActivitySessionHostConnection.requestParticipants(for:completion:)(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24));
}

uint64_t sub_1B109F468()
{
  swift_release();
  swift_release();
  return MEMORY[0x1F4186498](v0, 40, 7);
}

void partial apply for closure #1 in closure #2 in closure #1 in ActivitySessionHostConnection.requestParticipants(for:completion:)(void *a1)
{
  closure #1 in closure #2 in closure #1 in ActivitySessionHostConnection.requestParticipants(for:completion:)(a1, *(dispatch_group_t *)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t lazy protocol witness table accessor for type Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:) and conformance Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:)()
{
  unint64_t result = lazy protocol witness table cache variable for type Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:) and conformance Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:);
  if (!lazy protocol witness table cache variable for type Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:) and conformance Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:))
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:) and conformance Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:) and conformance Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:);
  if (!lazy protocol witness table cache variable for type Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:) and conformance Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:))
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:) and conformance Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:));
  }
  return result;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@unowned Bool)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void))(v2 + 16))(*a1, a1[1]);
  *a2 = result & 1;
  return result;
}

unsigned char *storeEnumTagSinglePayload for Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:)(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B109F628);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:)()
{
  return &unk_1F09AE428;
}

unsigned char *storeEnumTagSinglePayload for Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:)(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B109F6FCLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:)()
{
  return &unk_1F09AE398;
}

uint64_t DG_Datagram.sequenceNumber.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_SequenceNumber?);
  MEMORY[0x1F4188790](v1 - 8);
  int v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DG_SequenceNumber(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (uint64_t *)((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for DG_Datagram(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0 + *(int *)(v8 + 28), (uint64_t)v3, &demangling cache variable for type metadata for DG_SequenceNumber?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    *uint64_t v7 = 0;
    v7[1] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v3, &demangling cache variable for type metadata for DG_SequenceNumber?);
  }
  else
  {
    _s14CopresenceCore17DG_SequenceNumberVWObTm_0((uint64_t)v3, (uint64_t)v7, type metadata accessor for DG_SequenceNumber);
  }
  uint64_t v9 = v7[1];
  _s14CopresenceCore17DG_SequenceNumberVWOhTm_0((uint64_t)v7, type metadata accessor for DG_SequenceNumber);
  return v9;
}

uint64_t DG_Datagram.senderParticipantID.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_SequenceNumber?);
  MEMORY[0x1F4188790](v1 - 8);
  int v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DG_SequenceNumber(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (uint64_t *)((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for DG_Datagram(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0 + *(int *)(v8 + 28), (uint64_t)v3, &demangling cache variable for type metadata for DG_SequenceNumber?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    *uint64_t v7 = 0;
    v7[1] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v3, &demangling cache variable for type metadata for DG_SequenceNumber?);
  }
  else
  {
    _s14CopresenceCore17DG_SequenceNumberVWObTm_0((uint64_t)v3, (uint64_t)v7, type metadata accessor for DG_SequenceNumber);
  }
  uint64_t v9 = *v7;
  _s14CopresenceCore17DG_SequenceNumberVWOhTm_0((uint64_t)v7, type metadata accessor for DG_SequenceNumber);
  return v9;
}

uint64_t DG_Datagram.encryptionIDBytes.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_EncryptionID?);
  MEMORY[0x1F4188790](v1 - 8);
  int v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DG_EncryptionID(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DG_Datagram(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0 + *(int *)(v8 + 32), (uint64_t)v3, &demangling cache variable for type metadata for DG_EncryptionID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    *(_OWORD *)uint64_t v7 = xmmword_1B113B700;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v3, &demangling cache variable for type metadata for DG_EncryptionID?);
  }
  else
  {
    _s14CopresenceCore17DG_SequenceNumberVWObTm_0((uint64_t)v3, (uint64_t)v7, type metadata accessor for DG_EncryptionID);
  }
  uint64_t v9 = *(void *)v7;
  outlined copy of Data._Representation(*(void *)v7, *((void *)v7 + 1));
  _s14CopresenceCore17DG_SequenceNumberVWOhTm_0((uint64_t)v7, type metadata accessor for DG_EncryptionID);
  return v9;
}

uint64_t protocol witness for AnyRawIngressDatagram.sequenceNumber.getter in conformance DG_Datagram(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_SequenceNumber?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DG_SequenceNumber(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (uint64_t *)((char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(a1 + 28), (uint64_t)v5, &demangling cache variable for type metadata for DG_SequenceNumber?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v9 = 0;
    v9[1] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for DG_SequenceNumber?);
  }
  else
  {
    _s14CopresenceCore17DG_SequenceNumberVWObTm_0((uint64_t)v5, (uint64_t)v9, type metadata accessor for DG_SequenceNumber);
  }
  uint64_t v10 = v9[1];
  _s14CopresenceCore17DG_SequenceNumberVWOhTm_0((uint64_t)v9, type metadata accessor for DG_SequenceNumber);
  return v10;
}

uint64_t protocol witness for AnyRawIngressDatagram.senderParticipantID.getter in conformance DG_Datagram(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_SequenceNumber?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DG_SequenceNumber(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (uint64_t *)((char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(a1 + 28), (uint64_t)v5, &demangling cache variable for type metadata for DG_SequenceNumber?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v9 = 0;
    v9[1] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for DG_SequenceNumber?);
  }
  else
  {
    _s14CopresenceCore17DG_SequenceNumberVWObTm_0((uint64_t)v5, (uint64_t)v9, type metadata accessor for DG_SequenceNumber);
  }
  uint64_t v10 = *v9;
  _s14CopresenceCore17DG_SequenceNumberVWOhTm_0((uint64_t)v9, type metadata accessor for DG_SequenceNumber);
  return v10;
}

uint64_t protocol witness for AnyRawIngressDatagram.encryptionIDBytes.getter in conformance DG_Datagram(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_EncryptionID?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DG_EncryptionID(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(a1 + 32), (uint64_t)v5, &demangling cache variable for type metadata for DG_EncryptionID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *(_OWORD *)uint64_t v9 = xmmword_1B113B700;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for DG_EncryptionID?);
  }
  else
  {
    _s14CopresenceCore17DG_SequenceNumberVWObTm_0((uint64_t)v5, (uint64_t)v9, type metadata accessor for DG_EncryptionID);
  }
  uint64_t v10 = *(void *)v9;
  outlined copy of Data._Representation(*(void *)v9, *((void *)v9 + 1));
  _s14CopresenceCore17DG_SequenceNumberVWOhTm_0((uint64_t)v9, type metadata accessor for DG_EncryptionID);
  return v10;
}

void *DatagramClient.ChannelDefinition.Multicast.unsafeMutableAddressor()
{
  if (one-time initialization token for Multicast != -1) {
    swift_once();
  }
  return &static DatagramClient.ChannelDefinition.Multicast;
}

uint64_t DatagramClient.unreliableChannel(topic:input:inputBufferMaxQueueSize:traceId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v51 = a4;
  uint64_t v49 = a1;
  uint64_t v50 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v48 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<AnyPublisher<AnyRawEgressDatagram, Never>, EgressMessage<DG_Datagram>>);
  uint64_t v45 = *(void *)(v7 - 8);
  uint64_t v46 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<AnyPublisher<DG_Datagram, DatagramChannelError>, AnyRawIngressDatagram>);
  uint64_t v54 = *(void *)(v10 - 8);
  uint64_t v55 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v53 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  unint64_t v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  unint64_t v18 = (char *)&v40 - v17;
  UUID.init()();
  if (one-time initialization token for unreliableMessenger != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Log.unreliableMessenger);
  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  char v47 = v18;
  v20(v16, v18, v12);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  BOOL v23 = os_log_type_enabled(v21, v22);
  uint64_t v44 = v12;
  if (v23)
  {
    unint64_t v24 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    uint64_t v57 = v25;
    os_log_type_t v40 = v9;
    uint64_t v41 = v13;
    *(_DWORD *)unint64_t v24 = 136315138;
    uint64_t v26 = UUID.uuidString.getter();
    uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v57);
    uint64_t v9 = v40;
    uint64_t v13 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unsigned int v28 = *(void (**)(char *, uint64_t))(v13 + 8);
    uint64_t v42 = (v13 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v43 = v28;
    v28(v16, v12);
    _os_log_impl(&dword_1B0DF7000, v21, v22, "Creating unreliable-channel stream traceId=%s", v24, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v25, -1, -1);
    MEMORY[0x1B3EA39E0](v24, -1, -1);
  }
  else
  {
    int v29 = *(void (**)(char *, uint64_t))(v13 + 8);
    uint64_t v42 = (v13 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v43 = v29;
    v29(v16, v12);
  }

  uint64_t v57 = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<AnyRawEgressDatagram, Never>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EgressMessage<DG_Datagram>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<AnyRawEgressDatagram, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<AnyRawEgressDatagram, Never>);
  Publisher.map<A>(_:)();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<AnyPublisher<AnyRawEgressDatagram, Never>, EgressMessage<DG_Datagram>> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<AnyPublisher<AnyRawEgressDatagram, Never>, EgressMessage<DG_Datagram>>);
  uint64_t v30 = v46;
  Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v9, v30);
  uint64_t v31 = (uint64_t)v48;
  uint64_t v32 = v44;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v48, 1, 1, v44);
  uint64_t v33 = *(uint64_t (**)(unint64_t, uint64_t))(*(void *)v52 + 224);
  type metadata accessor for DG_Datagram(0);
  unint64_t v39 = lazy protocol witness table accessor for type DG_Datagram and conformance DG_Datagram();
  uint64_t v34 = v33(v39, v49);
  swift_release();
  outlined destroy of UUID?(v31, &demangling cache variable for type metadata for UUID?);
  uint64_t v57 = v34;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<DG_Datagram, DatagramChannelError>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyRawIngressDatagram);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<DG_Datagram, DatagramChannelError> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<DG_Datagram, DatagramChannelError>);
  char v35 = v53;
  Publisher.map<A>(_:)();
  swift_release();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<AnyPublisher<DG_Datagram, DatagramChannelError>, AnyRawIngressDatagram> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<AnyPublisher<DG_Datagram, DatagramChannelError>, AnyRawIngressDatagram>);
  uint64_t v36 = v55;
  uint64_t v37 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v35, v36);
  v43(v47, v32);
  return v37;
}

uint64_t closure #1 in DatagramClient.unreliableChannel(topic:input:inputBufferMaxQueueSize:traceId:)(uint64_t a1)
{
  outlined init with copy of UserNotificationCenter(a1, (uint64_t)v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyRawEgressDatagram);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EgressMessage<DG_Datagram>);
  return swift_dynamicCast();
}

uint64_t closure #2 in DatagramClient.unreliableChannel(topic:input:inputBufferMaxQueueSize:traceId:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  a2[3] = type metadata accessor for DG_Datagram(0);
  a2[4] = (uint64_t)&protocol witness table for DG_Datagram;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a2);
  return outlined init with copy of DG_Datagram(a1, (uint64_t)boxed_opaque_existential_1);
}

uint64_t protocol witness for UnreliableMessengerServiceProvider.unreliableChannel(topic:input:inputBufferMaxQueueSize:traceId:) in conformance DatagramClient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return DatagramClient.unreliableChannel(topic:input:inputBufferMaxQueueSize:traceId:)(a1, a2, a3, a4);
}

uint64_t _s14CopresenceCore17DG_SequenceNumberVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s14CopresenceCore17DG_SequenceNumberVWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type DG_Datagram and conformance DG_Datagram()
{
  unint64_t result = lazy protocol witness table cache variable for type DG_Datagram and conformance DG_Datagram;
  if (!lazy protocol witness table cache variable for type DG_Datagram and conformance DG_Datagram)
  {
    type metadata accessor for DG_Datagram(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DG_Datagram and conformance DG_Datagram);
  }
  return result;
}

uint64_t dispatch thunk of UnreliableMessengerServiceProvider.queue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of UnreliableMessengerServiceProvider.unreliableChannel(topic:input:inputBufferMaxQueueSize:traceId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 16))();
}

ValueMetadata *type metadata accessor for DatagramClient.ChannelDefinition()
{
  return &type metadata for DatagramClient.ChannelDefinition;
}

uint64_t outlined init with copy of DG_Datagram(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DG_Datagram(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t >> prefix<A>(_:)(uint64_t a1, uint64_t a2)
{
  v4[2] = a2;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in >> prefix<A>(_:), (uint64_t)v4, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB1A0], v2, (uint64_t)v5);
  if (v5[1]) {
    return v5[0];
  }
  else {
    return 7104878;
  }
}

uint64_t Log.runtimeIssues.unsafeMutableAddressor()
{
  if (one-time initialization token for runtimeIssues != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  return __swift_project_value_buffer(v0, (uint64_t)static Log.runtimeIssues);
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v25 = a5;
  uint64_t v26 = a2;
  uint64_t v28 = a4;
  unint64_t v27 = a1;
  uint64_t v24 = *(void *)(a3 - 8);
  uint64_t v10 = ((uint64_t (*)(void))MEMORY[0x1F4188790])();
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v10);
  unint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v6);
  uint64_t v22 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
    v27(v18, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if (v7) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(v25, v12, a3);
    }
    uint64_t v22 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(a6, v22, 1);
}