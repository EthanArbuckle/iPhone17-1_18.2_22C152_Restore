uint64_t storeEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0F4BE64);
}

uint64_t sub_1B0F4BE64(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
    return result;
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[8];
LABEL_7:
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[9];
    goto LABEL_7;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = v5 + a4[10];
  return v15(v17, a2, a2, v16);
}

void type metadata completion function for AttachmentLedger_SubscribeResponse.InitializeAck()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData?(319, &lazy cache variable for type metadata for AttachmentLedger_ErrorResponse?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_ErrorResponse);
    if (v1 <= 0x3F)
    {
      type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData?(319, &lazy cache variable for type metadata for AttachmentLedger_AuthPutMaterials?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AuthPutMaterials);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    uint64_t *v4 = *a2;
    v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    uint64_t v12 = *(int *)(a3 + 24);
    v13 = (uint64_t *)((char *)v4 + v12);
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    uint64_t v15 = type metadata accessor for AttachmentLedger_EncryptionID(0);
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      uint64_t v19 = *v14;
      unint64_t v20 = v14[1];
      outlined copy of Data._Representation(*v14, v20);
      void *v13 = v19;
      v13[1] = v20;
      v11((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return v4;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    outlined consume of Data._Representation(*(void *)v6, *(void *)(v6 + 8));
    uint64_t v9 = v6 + *(int *)(v7 + 20);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

void *initializeWithCopy for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)((char *)a1 + v11);
  v13 = (void *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    uint64_t v17 = *v13;
    unint64_t v18 = v13[1];
    outlined copy of Data._Representation(*v13, v18);
    *uint64_t v12 = v17;
    v12[1] = v18;
    v10((char *)v12 + *(int *)(v14 + 20), (char *)v13 + *(int *)(v14 + 20), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

void *assignWithCopy for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(char *, char *))(v10 + 24);
  uint64_t v27 = v9;
  v11(v7, v8);
  uint64_t v12 = *(int *)(a3 + 24);
  v28 = a1;
  v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  int v18 = v17(v14, 1, v15);
  if (!v8)
  {
    if (!v18)
    {
      uint64_t v23 = *v14;
      unint64_t v24 = v14[1];
      outlined copy of Data._Representation(*v14, v24);
      uint64_t v25 = *v13;
      unint64_t v26 = v13[1];
      uint64_t *v13 = v23;
      v13[1] = v24;
      outlined consume of Data._Representation(v25, v26);
      ((void (*)(char *, char *, uint64_t))v11)((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v27);
      return v28;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v13, type metadata accessor for AttachmentLedger_EncryptionID);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    memcpy(v13, v14, *(void *)(*(void *)(v21 - 8) + 64));
    return v28;
  }
  uint64_t v19 = *v14;
  unint64_t v20 = v14[1];
  outlined copy of Data._Representation(*v14, v20);
  uint64_t *v13 = v19;
  v13[1] = v20;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v27);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return v28;
}

void *initializeWithTake for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (_OWORD *)((char *)a1 + v11);
  v13 = (_OWORD *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    v10((char *)v12 + *(int *)(v14 + 20), (char *)v13 + *(int *)(v14 + 20), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

void *assignWithTake for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(char *, char *))(v10 + 40);
  uint64_t v23 = v9;
  v11(v7, v8);
  uint64_t v12 = *(int *)(a3 + 24);
  unint64_t v24 = a1;
  v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  int v18 = v17(v14, 1, v15);
  if (!v8)
  {
    if (!v18)
    {
      uint64_t v21 = *v13;
      unint64_t v22 = v13[1];
      *(_OWORD *)v13 = *(_OWORD *)v14;
      outlined consume of Data._Representation(v21, v22);
      ((void (*)(char *, char *, uint64_t))v11)((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v23);
      return v24;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v13, type metadata accessor for AttachmentLedger_EncryptionID);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64));
    return v24;
  }
  *(_OWORD *)v13 = *(_OWORD *)v14;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v23);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return v24;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0F4CB70);
}

uint64_t sub_1B0F4CB70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_166Tm(a1, a2, a3, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0F4CB90);
}

uint64_t sub_1B0F4CB90(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_167Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
}

void type metadata completion function for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v12 = *a2;
      unint64_t v13 = a2[1];
      outlined copy of Data._Representation(*a2, v13);
      *a1 = v12;
      a1[1] = v13;
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v14 = a2[3];
        a1[2] = a2[2];
        a1[3] = v14;
        *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
        uint64_t v15 = a2[5];
        unint64_t v16 = a2[6];
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v15, v16);
        a1[5] = v15;
        a1[6] = v16;
        uint64_t v17 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
        uint64_t v18 = *(int *)(v17 + 32);
        uint64_t v19 = (char *)a1 + v18;
        unint64_t v20 = (char *)a2 + v18;
        uint64_t v21 = type metadata accessor for UnknownStorage();
        v61 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16);
        v61(v19, v20, v21);
        uint64_t v22 = *(int *)(v17 + 36);
        uint64_t v23 = (uint64_t *)((char *)a1 + v22);
        unint64_t v24 = (uint64_t *)((char *)a2 + v22);
        uint64_t v25 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
        uint64_t v26 = *(void *)(v25 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
        {
          uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
          memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
        }
        else
        {
          uint64_t v57 = v26;
          uint64_t v28 = v24[1];
          *uint64_t v23 = *v24;
          v23[1] = v28;
          uint64_t v59 = v21;
          v60 = (int *)v25;
          uint64_t v29 = v24[3];
          v23[2] = v24[2];
          v23[3] = v29;
          uint64_t v30 = v24[4];
          unint64_t v31 = v24[5];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined copy of Data._Representation(v30, v31);
          v23[4] = v30;
          v23[5] = v31;
          uint64_t v32 = v24[6];
          unint64_t v33 = v24[7];
          outlined copy of Data._Representation(v32, v33);
          v23[6] = v32;
          v23[7] = v33;
          v61((char *)v23 + v60[8], (char *)v24 + v60[8], v59);
          uint64_t v34 = v60[9];
          v58 = v23;
          __dst = (void *)((char *)v23 + v34);
          v35 = (void *)((char *)v24 + v34);
          uint64_t v36 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
          uint64_t v37 = *(void *)(v36 - 8);
          v56 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v37 + 48);
          uint64_t v54 = v37;
          if (v56(v35, 1, v36))
          {
            uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
            memcpy(__dst, v35, *(void *)(*(void *)(v38 - 8) + 64));
          }
          else
          {
            uint64_t v39 = v35[1];
            uint64_t v53 = v39;
            void *__dst = *v35;
            unint64_t v52 = v35[2];
            outlined copy of Data._Representation(v39, v52);
            __dst[1] = v53;
            __dst[2] = v52;
            v61((char *)__dst + *(int *)(v36 + 24), (char *)v35 + *(int *)(v36 + 24), v59);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v37 + 56))(__dst, 0, 1, v36);
          }
          uint64_t v40 = v60[10];
          v41 = v23;
          v42 = (void *)((char *)v23 + v40);
          v43 = (void *)((char *)v24 + v40);
          if (v56(v43, 1, v36))
          {
            uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
            memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64));
          }
          else
          {
            uint64_t v45 = v43[1];
            void *v42 = *v43;
            unint64_t v46 = v43[2];
            outlined copy of Data._Representation(v45, v46);
            v42[1] = v45;
            v42[2] = v46;
            v41 = v58;
            v61((char *)v42 + *(int *)(v36 + 24), (char *)v43 + *(int *)(v36 + 24), v59);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v54 + 56))(v42, 0, 1, v36);
          }
          (*(void (**)(void *, void, uint64_t, int *))(v57 + 56))(v41, 0, 1, v60);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v47 = *(int *)(a3 + 20);
    v48 = (char *)a1 + v47;
    v49 = (char *)a2 + v47;
    uint64_t v50 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 16))(v48, v49, v50);
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4))
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(*(void *)(a1 + 40), *(void *)(a1 + 48));
      uint64_t v6 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      uint64_t v7 = a1 + *(int *)(v6 + 32);
      uint64_t v8 = type metadata accessor for UnknownStorage();
      uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
      v9(v7, v8);
      uint64_t v10 = a1 + *(int *)(v6 + 36);
      uint64_t v11 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v11 - 1) + 48))(v10, 1, v11))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(*(void *)(v10 + 32), *(void *)(v10 + 40));
        outlined consume of Data._Representation(*(void *)(v10 + 48), *(void *)(v10 + 56));
        unint64_t v20 = v9;
        v9(v10 + v11[8], v8);
        uint64_t v12 = v10 + v11[9];
        uint64_t v13 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        uint64_t v14 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
        if (!v14(v12, 1, v13))
        {
          outlined consume of Data._Representation(*(void *)(v12 + 8), *(void *)(v12 + 16));
          v20(v12 + *(int *)(v13 + 24), v8);
        }
        uint64_t v15 = v10 + v11[10];
        if (!v14(v15, 1, v13))
        {
          outlined consume of Data._Representation(*(void *)(v15 + 8), *(void *)(v15 + 16));
          v20(v15 + *(int *)(v13 + 24), v8);
        }
      }
    }
  }
  uint64_t v16 = a1 + *(int *)(a2 + 20);
  uint64_t v17 = type metadata accessor for UnknownStorage();
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8);
  return v18(v16, v17);
}

void *initializeWithCopy for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v10 = *a2;
    unint64_t v11 = a2[1];
    outlined copy of Data._Representation(*a2, v11);
    *a1 = v10;
    a1[1] = v11;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v12 = a2[3];
      a1[2] = a2[2];
      a1[3] = v12;
      *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
      uint64_t v13 = a2[5];
      unint64_t v14 = a2[6];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v13, v14);
      a1[5] = v13;
      a1[6] = v14;
      uint64_t v15 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      uint64_t v16 = *(int *)(v15 + 32);
      uint64_t v17 = (char *)a1 + v16;
      uint64_t v18 = (char *)a2 + v16;
      uint64_t v19 = type metadata accessor for UnknownStorage();
      v58 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
      v58(v17, v18, v19);
      uint64_t v20 = *(int *)(v15 + 36);
      uint64_t v21 = (void *)((char *)a1 + v20);
      uint64_t v22 = (uint64_t *)((char *)a2 + v20);
      uint64_t v23 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      uint64_t v24 = *(void *)(v23 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        uint64_t v53 = v24;
        uint64_t v54 = a3;
        uint64_t v26 = v22[1];
        *uint64_t v21 = *v22;
        v21[1] = v26;
        uint64_t v27 = v22[3];
        v21[2] = v22[2];
        v21[3] = v27;
        uint64_t v56 = v19;
        uint64_t v29 = v22[4];
        unint64_t v28 = v22[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v29, v28);
        v21[4] = v29;
        v21[5] = v28;
        uint64_t v30 = v22[6];
        unint64_t v31 = v22[7];
        outlined copy of Data._Representation(v30, v31);
        v21[6] = v30;
        v21[7] = v31;
        v58((char *)v21 + *(int *)(v23 + 32), (char *)v22 + *(int *)(v23 + 32), v56);
        uint64_t v57 = v23;
        uint64_t v32 = *(int *)(v23 + 36);
        __dst = (void *)((char *)v21 + v32);
        unint64_t v33 = (void *)((char *)v22 + v32);
        uint64_t v34 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        uint64_t v35 = *(void *)(v34 - 8);
        unint64_t v52 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v35 + 48);
        uint64_t v51 = v35;
        if (v52(v33, 1, v34))
        {
          uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(__dst, v33, *(void *)(*(void *)(v36 - 8) + 64));
        }
        else
        {
          uint64_t v37 = v33[1];
          void *__dst = *v33;
          unint64_t v49 = v33[2];
          uint64_t v50 = v37;
          outlined copy of Data._Representation(v37, v49);
          __dst[1] = v50;
          __dst[2] = v49;
          v58((char *)__dst + *(int *)(v34 + 24), (char *)v33 + *(int *)(v34 + 24), v56);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(__dst, 0, 1, v34);
        }
        uint64_t v38 = *(int *)(v57 + 40);
        uint64_t v39 = (void *)((char *)v21 + v38);
        uint64_t v40 = (void *)((char *)v22 + v38);
        if (v52(v40, 1, v34))
        {
          uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64));
        }
        else
        {
          uint64_t v42 = v40[1];
          *uint64_t v39 = *v40;
          unint64_t v43 = v40[2];
          outlined copy of Data._Representation(v42, v43);
          v39[1] = v42;
          v39[2] = v43;
          v58((char *)v39 + *(int *)(v34 + 24), (char *)v40 + *(int *)(v34 + 24), v56);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(v39, 0, 1, v34);
        }
        a3 = v54;
        (*(void (**)(void *, void, uint64_t, uint64_t))(v53 + 56))(v21, 0, 1, v57);
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v44 = *(int *)(a3 + 20);
  uint64_t v45 = (char *)a1 + v44;
  unint64_t v46 = (char *)a2 + v44;
  uint64_t v47 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 16))(v45, v46, v47);
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v12 = *(void *)a2;
      unint64_t v13 = *(void *)(a2 + 8);
      outlined copy of Data._Representation(*(void *)a2, v13);
      *(void *)a1 = v12;
      *(void *)(a1 + 8) = v13;
      if (EnumCaseMultiPayload == 1)
      {
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        uint64_t v14 = *(void *)(a2 + 24);
        *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
        *(void *)(a1 + 24) = v14;
        uint64_t v15 = *(void *)(a2 + 40);
        unint64_t v16 = *(void *)(a2 + 48);
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v15, v16);
        *(void *)(a1 + 40) = v15;
        *(void *)(a1 + 48) = v16;
        uint64_t v17 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
        uint64_t v18 = *(int *)(v17 + 32);
        uint64_t v19 = a1 + v18;
        uint64_t v20 = a2 + v18;
        uint64_t v21 = type metadata accessor for UnknownStorage();
        v104 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16);
        v104(v19, v20, v21);
        uint64_t v22 = *(int *)(v17 + 36);
        uint64_t v23 = (void *)(a1 + v22);
        uint64_t v24 = (void *)(a2 + v22);
        uint64_t v25 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
        uint64_t v26 = *(void *)(v25 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
        {
          uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
          memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
        }
        else
        {
          uint64_t v93 = v26;
          uint64_t v95 = a3;
          *uint64_t v23 = *v24;
          v23[1] = v24[1];
          v23[2] = v24[2];
          v23[3] = v24[3];
          uint64_t v99 = v21;
          uint64_t v48 = v24[4];
          unint64_t v47 = v24[5];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined copy of Data._Representation(v48, v47);
          v23[4] = v48;
          v23[5] = v47;
          uint64_t v49 = v24[6];
          unint64_t v50 = v24[7];
          outlined copy of Data._Representation(v49, v50);
          v23[6] = v49;
          v23[7] = v50;
          v104((uint64_t)v23 + *(int *)(v25 + 32), (uint64_t)v24 + *(int *)(v25 + 32), v99);
          uint64_t v101 = v25;
          uint64_t v51 = *(int *)(v25 + 36);
          __dst = (void *)((char *)v23 + v51);
          unint64_t v52 = (void *)((char *)v24 + v51);
          uint64_t v53 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
          uint64_t v54 = *(void *)(v53 - 8);
          v91 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v54 + 48);
          uint64_t v89 = v54;
          if (v91(v52, 1, v53))
          {
            uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
            memcpy(__dst, v52, *(void *)(*(void *)(v55 - 8) + 64));
          }
          else
          {
            void *__dst = *v52;
            unint64_t v86 = v52[2];
            uint64_t v87 = v52[1];
            outlined copy of Data._Representation(v87, v86);
            __dst[1] = v87;
            __dst[2] = v86;
            v104((uint64_t)__dst + *(int *)(v53 + 24), (uint64_t)v52 + *(int *)(v53 + 24), v99);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v54 + 56))(__dst, 0, 1, v53);
          }
          uint64_t v68 = *(int *)(v101 + 40);
          v69 = (void *)((char *)v23 + v68);
          v70 = (void *)((char *)v24 + v68);
          if (v91(v70, 1, v53))
          {
            uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
            memcpy(v69, v70, *(void *)(*(void *)(v71 - 8) + 64));
          }
          else
          {
            void *v69 = *v70;
            uint64_t v72 = v70[1];
            unint64_t v73 = v70[2];
            outlined copy of Data._Representation(v72, v73);
            v69[1] = v72;
            v69[2] = v73;
            v104((uint64_t)v69 + *(int *)(v53 + 24), (uint64_t)v70 + *(int *)(v53 + 24), v99);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v89 + 56))(v69, 0, 1, v53);
          }
          a3 = v95;
          (*(void (**)(void *, void, uint64_t, uint64_t))(v93 + 56))(v23, 0, 1, v101);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_25;
    }
LABEL_8:
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_25;
  }
  if (v10)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
    int v29 = swift_getEnumCaseMultiPayload();
    uint64_t v30 = *(void *)a2;
    unint64_t v31 = *(void *)(a2 + 8);
    outlined copy of Data._Representation(*(void *)a2, v31);
    *(void *)a1 = v30;
    *(void *)(a1 + 8) = v31;
    if (v29 == 1)
    {
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v32 = *(void *)(a2 + 24);
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      *(void *)(a1 + 24) = v32;
      uint64_t v33 = *(void *)(a2 + 40);
      unint64_t v34 = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v33, v34);
      *(void *)(a1 + 40) = v33;
      *(void *)(a1 + 48) = v34;
      uint64_t v35 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      uint64_t v36 = *(int *)(v35 + 32);
      uint64_t v37 = a1 + v36;
      uint64_t v38 = a2 + v36;
      uint64_t v39 = type metadata accessor for UnknownStorage();
      uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 16);
      v40(v37, v38, v39);
      uint64_t v41 = *(int *)(v35 + 36);
      uint64_t v42 = (void *)(a1 + v41);
      unint64_t v43 = (void *)(a2 + v41);
      uint64_t v44 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      uint64_t v45 = *(void *)(v44 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
      {
        uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
      }
      else
      {
        uint64_t v100 = v45;
        uint64_t v96 = a3;
        void *v42 = *v43;
        v42[1] = v43[1];
        v42[2] = v43[2];
        v42[3] = v43[3];
        v103 = (void (*)(char *, char *, uint64_t))v40;
        uint64_t v56 = v44;
        uint64_t v57 = v39;
        uint64_t v59 = v43[4];
        unint64_t v58 = v43[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v59, v58);
        v42[4] = v59;
        v42[5] = v58;
        uint64_t v60 = v43[6];
        unint64_t v61 = v43[7];
        outlined copy of Data._Representation(v60, v61);
        v42[6] = v60;
        v42[7] = v61;
        uint64_t v94 = v57;
        v103((char *)v42 + *(int *)(v56 + 32), (char *)v43 + *(int *)(v56 + 32), v57);
        uint64_t v102 = v56;
        uint64_t v62 = *(int *)(v56 + 36);
        v63 = (void *)((char *)v42 + v62);
        v64 = (void *)((char *)v43 + v62);
        uint64_t v65 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        uint64_t v66 = *(void *)(v65 - 8);
        __dsta = *(unsigned int (**)(void *, uint64_t, uint64_t))(v66 + 48);
        uint64_t v92 = v66;
        if (__dsta(v64, 1, v65))
        {
          uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v63, v64, *(void *)(*(void *)(v67 - 8) + 64));
        }
        else
        {
          void *v63 = *v64;
          unint64_t v88 = v64[2];
          uint64_t v90 = v64[1];
          outlined copy of Data._Representation(v90, v88);
          v63[1] = v90;
          v63[2] = v88;
          v103((char *)v63 + *(int *)(v65 + 24), (char *)v64 + *(int *)(v65 + 24), v94);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v66 + 56))(v63, 0, 1, v65);
        }
        uint64_t v79 = v102;
        uint64_t v80 = *(int *)(v102 + 40);
        v81 = (void *)((char *)v42 + v80);
        v82 = (void *)((char *)v43 + v80);
        if (__dsta(v82, 1, v65))
        {
          uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v81, v82, *(void *)(*(void *)(v83 - 8) + 64));
        }
        else
        {
          void *v81 = *v82;
          uint64_t v85 = v82[1];
          unint64_t v84 = v82[2];
          outlined copy of Data._Representation(v85, v84);
          v81[1] = v85;
          v81[2] = v84;
          uint64_t v79 = v102;
          v103((char *)v81 + *(int *)(v65 + 24), (char *)v82 + *(int *)(v65 + 24), v94);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v92 + 56))(v81, 0, 1, v65);
        }
        a3 = v96;
        (*(void (**)(void *, void, uint64_t, uint64_t))(v100 + 56))(v42, 0, 1, v79);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_25:
  uint64_t v74 = *(int *)(a3 + 20);
  uint64_t v75 = a1 + v74;
  uint64_t v76 = a2 + v74;
  uint64_t v77 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 24))(v75, v76, v77);
  return a1;
}

_OWORD *initializeWithTake for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      uint64_t v9 = *((void *)a2 + 3);
      *((void *)a1 + 2) = *((void *)a2 + 2);
      *((void *)a1 + 3) = v9;
      *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
      *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
      uint64_t v10 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      uint64_t v11 = *(int *)(v10 + 32);
      uint64_t v12 = (char *)a1 + v11;
      unint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for UnknownStorage();
      unint64_t v43 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32);
      v43(v12, v13, v14);
      uint64_t v15 = *(int *)(v10 + 36);
      unint64_t v16 = (_OWORD *)((char *)a1 + v15);
      uint64_t v17 = (_OWORD *)((char *)a2 + v15);
      uint64_t v18 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      uint64_t v19 = *((void *)v18 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v19 + 48))(v17, 1, v18))
      {
        uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        uint64_t v41 = v19;
        long long v21 = v17[1];
        *unint64_t v16 = *v17;
        v16[1] = v21;
        long long v22 = v17[3];
        v16[2] = v17[2];
        v16[3] = v22;
        v43((char *)v16 + v18[8], (char *)v17 + v18[8], v14);
        uint64_t v23 = v18[9];
        uint64_t v38 = v16;
        __dst = (void *)((char *)v16 + v23);
        uint64_t v24 = (void *)((char *)v17 + v23);
        uint64_t v25 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        uint64_t v26 = *(void *)(v25 - 8);
        uint64_t v39 = v25;
        uint64_t v40 = *(unsigned int (**)(void *, uint64_t))(v26 + 48);
        uint64_t v37 = v26;
        if (v40(v24, 1))
        {
          uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(__dst, v24, *(void *)(*(void *)(v27 - 8) + 64));
        }
        else
        {
          void *__dst = *v24;
          *(_OWORD *)(__dst + 1) = *(_OWORD *)(v24 + 1);
          v43((char *)__dst + *(int *)(v39 + 24), (char *)v24 + *(int *)(v39 + 24), v14);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(__dst, 0, 1, v39);
        }
        uint64_t v28 = v18[10];
        int v29 = (void *)((char *)v38 + v28);
        uint64_t v30 = (void *)((char *)v17 + v28);
        if (((unsigned int (*)(void *, uint64_t, uint64_t))v40)(v30, 1, v39))
        {
          uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
        }
        else
        {
          *int v29 = *v30;
          *(_OWORD *)(v29 + 1) = *(_OWORD *)(v30 + 1);
          v43((char *)v29 + *(int *)(v39 + 24), (char *)v30 + *(int *)(v39 + 24), v14);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v37 + 56))(v29, 0, 1, v39);
        }
        (*(void (**)(_OWORD *, void, uint64_t, int *))(v41 + 56))(v38, 0, 1, v18);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v7 + 64));
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v32 = *(int *)(a3 + 20);
  uint64_t v33 = (char *)a1 + v32;
  unint64_t v34 = (char *)a2 + v32;
  uint64_t v35 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v33, v34, v35);
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      if (a1 == a2) {
        goto LABEL_27;
      }
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v24 = *(void *)(a2 + 24);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = v24;
        *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        uint64_t v25 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
        uint64_t v26 = *(int *)(v25 + 32);
        uint64_t v27 = a1 + v26;
        uint64_t v28 = a2 + v26;
        uint64_t v29 = type metadata accessor for UnknownStorage();
        uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 32);
        v30(v27, v28, v29);
        uint64_t v31 = *(int *)(v25 + 36);
        uint64_t v32 = (_OWORD *)(a1 + v31);
        uint64_t v33 = (_OWORD *)(a2 + v31);
        unint64_t v34 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
        uint64_t v35 = (unsigned int (**)(_OWORD *, uint64_t, int *))*((void *)v34 - 1);
        if (v35[6](v33, 1, v34))
        {
          uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
          memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
        }
        else
        {
          __dsta = v35;
          long long v44 = v33[1];
          *uint64_t v32 = *v33;
          v32[1] = v44;
          long long v45 = v33[3];
          v32[2] = v33[2];
          v32[3] = v45;
          v30((uint64_t)v32 + v34[8], (uint64_t)v33 + v34[8], v29);
          uint64_t v46 = v34[9];
          uint64_t v76 = (void *)((char *)v32 + v46);
          v70 = (void (*)(char *, char *, uint64_t))v30;
          unint64_t v47 = (void *)((char *)v33 + v46);
          uint64_t v48 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
          uint64_t v49 = *(void *)(v48 - 8);
          uint64_t v72 = *(unsigned int (**)(void *, uint64_t))(v49 + 48);
          uint64_t v78 = v48;
          uint64_t v67 = v49;
          __src = (void *)v29;
          if (v72(v47, 1))
          {
            uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
            memcpy(v76, v47, *(void *)(*(void *)(v50 - 8) + 64));
            uint64_t v51 = v78;
          }
          else
          {
            *uint64_t v76 = *v47;
            *(_OWORD *)(v76 + 1) = *(_OWORD *)(v47 + 1);
            v70((char *)v76 + *(int *)(v78 + 24), (char *)v47 + *(int *)(v78 + 24), v29);
            uint64_t v51 = v78;
            (*(void (**)(void *, void, uint64_t, uint64_t))(v49 + 56))(v76, 0, 1, v78);
          }
          uint64_t v61 = v34[10];
          uint64_t v62 = (void *)((char *)v32 + v61);
          v63 = (void *)((char *)v33 + v61);
          if (((unsigned int (*)(void *, uint64_t, uint64_t))v72)(v63, 1, v51))
          {
            uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
            memcpy(v62, v63, *(void *)(*(void *)(v64 - 8) + 64));
          }
          else
          {
            *uint64_t v62 = *v63;
            *(_OWORD *)(v62 + 1) = *(_OWORD *)(v63 + 1);
            v70((char *)v62 + *(int *)(v51 + 24), (char *)v63 + *(int *)(v51 + 24), (uint64_t)__src);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v67 + 56))(v62, 0, 1, v51);
          }
          (*((void (**)(_OWORD *, void, uint64_t, int *))__dsta + 7))(v32, 0, 1, v34);
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_27;
      }
      size_t v23 = *(void *)(v7 + 64);
LABEL_9:
      memcpy((void *)a1, (const void *)a2, v23);
      goto LABEL_27;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
LABEL_8:
    size_t v23 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?)
                                - 8)
                    + 64);
    goto LABEL_9;
  }
  if (v10) {
    goto LABEL_8;
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v11 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v11;
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    uint64_t v12 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
    uint64_t v13 = *(int *)(v12 + 32);
    uint64_t v14 = a1 + v13;
    uint64_t v15 = a2 + v13;
    uint64_t v16 = type metadata accessor for UnknownStorage();
    uint64_t v77 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32);
    v77(v14, v15, v16);
    uint64_t v17 = *(int *)(v12 + 36);
    uint64_t v18 = (_OWORD *)(a1 + v17);
    uint64_t v19 = (_OWORD *)(a2 + v17);
    uint64_t v20 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    uint64_t v21 = *((void *)v20 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v21 + 48))(v19, 1, v20))
    {
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      uint64_t v71 = v21;
      long long v37 = v19[1];
      *uint64_t v18 = *v19;
      v18[1] = v37;
      long long v38 = v19[3];
      v18[2] = v19[2];
      v18[3] = v38;
      v77((uint64_t)v18 + v20[8], (uint64_t)v19 + v20[8], v16);
      uint64_t v39 = v20[9];
      uint64_t v66 = v18;
      __dst = (void *)((char *)v18 + v39);
      uint64_t v40 = (void *)((char *)v19 + v39);
      uint64_t v41 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      uint64_t v42 = *(void *)(v41 - 8);
      v69 = *(unsigned int (**)(void *, uint64_t))(v42 + 48);
      uint64_t v75 = (int *)v41;
      uint64_t v65 = v42;
      if (v69(v40, 1))
      {
        uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(__dst, v40, *(void *)(*(void *)(v43 - 8) + 64));
      }
      else
      {
        void *__dst = *v40;
        *(_OWORD *)(__dst + 1) = *(_OWORD *)(v40 + 1);
        v77((uint64_t)__dst + v75[6], (uint64_t)v40 + v75[6], v16);
        (*(void (**)(void *, void, uint64_t, int *))(v42 + 56))(__dst, 0, 1, v75);
      }
      uint64_t v52 = v20[10];
      uint64_t v53 = (void *)((char *)v66 + v52);
      uint64_t v54 = (void *)((char *)v19 + v52);
      if (((unsigned int (*)(void *, uint64_t, int *))v69)(v54, 1, v75))
      {
        uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v53, v54, *(void *)(*(void *)(v55 - 8) + 64));
      }
      else
      {
        *uint64_t v53 = *v54;
        *(_OWORD *)(v53 + 1) = *(_OWORD *)(v54 + 1);
        v77((uint64_t)v53 + v75[6], (uint64_t)v54 + v75[6], v16);
        (*(void (**)(void *, void, uint64_t, int *))(v65 + 56))(v53, 0, 1, v75);
      }
      (*(void (**)(_OWORD *, void, uint64_t, int *))(v71 + 56))(v66, 0, 1, v20);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy((void *)a1, (const void *)a2, *(void *)(v7 + 64));
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_27:
  uint64_t v56 = *(int *)(a3 + 20);
  uint64_t v57 = a1 + v56;
  uint64_t v58 = a2 + v56;
  uint64_t v59 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 40))(v57, v58, v59);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0F4EFE8);
}

uint64_t sub_1B0F4EFE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_149Tm(a1, a2, a3, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0F4F008);
}

uint64_t sub_1B0F4F008(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_150Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
}

void type metadata completion function for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

unint64_t initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v24 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v7 = *(void *)a2;
    unint64_t v8 = *(void *)(a2 + 8);
    outlined copy of Data._Representation(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v9 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v9;
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      uint64_t v10 = *(void *)(a2 + 40);
      unint64_t v11 = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v10, v11);
      *(void *)(a1 + 40) = v10;
      *(void *)(a1 + 48) = v11;
      uint64_t v12 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      uint64_t v13 = *(int *)(v12 + 32);
      uint64_t v14 = a1 + v13;
      uint64_t v15 = a2 + v13;
      uint64_t v16 = type metadata accessor for UnknownStorage();
      uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16);
      v17(v14, v15, v16);
      uint64_t v18 = *(int *)(v12 + 36);
      uint64_t v19 = (void *)(a1 + v18);
      uint64_t v20 = (void *)(a2 + v18);
      uint64_t v21 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      uint64_t v22 = *(void *)(v21 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      {
        uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        uint64_t v54 = v22;
        uint64_t v55 = v21;
        uint64_t v25 = v20[1];
        *uint64_t v19 = *v20;
        v19[1] = v25;
        uint64_t v26 = v20[3];
        v19[2] = v20[2];
        v19[3] = v26;
        uint64_t v27 = v20[4];
        unint64_t v28 = v20[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v27, v28);
        v19[4] = v27;
        v19[5] = v28;
        uint64_t v29 = v20[6];
        unint64_t v30 = v20[7];
        outlined copy of Data._Representation(v29, v30);
        v19[6] = v29;
        v19[7] = v30;
        uint64_t v53 = v16;
        v17((uint64_t)v19 + *(int *)(v55 + 32), (uint64_t)v20 + *(int *)(v55 + 32), v16);
        uint64_t v31 = *(int *)(v21 + 36);
        uint64_t v32 = (void *)((char *)v19 + v31);
        uint64_t v33 = (void *)((char *)v20 + v31);
        uint64_t v34 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        uint64_t v51 = *(void *)(v34 - 8);
        uint64_t v52 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v51 + 48);
        uint64_t v50 = (void (*)(char *, char *, uint64_t))v17;
        if (v52(v33, 1, v34))
        {
          uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v32, v33, *(void *)(*(void *)(v35 - 8) + 64));
          uint64_t v36 = v53;
        }
        else
        {
          uint64_t v37 = v33[1];
          *uint64_t v32 = *v33;
          unint64_t v49 = v33[2];
          outlined copy of Data._Representation(v37, v49);
          v32[1] = v37;
          v32[2] = v49;
          uint64_t v38 = *(int *)(v34 + 24);
          uint64_t v39 = (char *)v32 + v38;
          uint64_t v40 = (char *)v33 + v38;
          uint64_t v41 = v32;
          uint64_t v36 = v53;
          v17((uint64_t)v39, (uint64_t)v40, v53);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(v41, 0, 1, v34);
        }
        uint64_t v42 = *(int *)(v55 + 40);
        uint64_t v43 = (void *)((char *)v19 + v42);
        long long v44 = (void *)((char *)v20 + v42);
        if (v52(v44, 1, v34))
        {
          uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
        }
        else
        {
          uint64_t v46 = v44[1];
          void *v43 = *v44;
          unint64_t v47 = v44[2];
          outlined copy of Data._Representation(v46, v47);
          v43[1] = v46;
          v43[2] = v47;
          v50((char *)v43 + *(int *)(v34 + 24), (char *)v44 + *(int *)(v34 + 24), v36);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(v43, 0, 1, v34);
        }
        (*(void (**)(void *, void, uint64_t, uint64_t))(v54 + 56))(v19, 0, 1, v55);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(uint64_t a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t result = outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  if (EnumCaseMultiPayload == 1)
  {
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(*(void *)(a1 + 40), *(void *)(a1 + 48));
    uint64_t v4 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
    uint64_t v5 = a1 + *(int *)(v4 + 32);
    uint64_t v6 = type metadata accessor for UnknownStorage();
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
    v14(v5, v6);
    uint64_t v7 = a1 + *(int *)(v4 + 36);
    unint64_t v8 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((void *)v8 - 1) + 48))(v7, 1, v8);
    if (!result)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(*(void *)(v7 + 32), *(void *)(v7 + 40));
      outlined consume of Data._Representation(*(void *)(v7 + 48), *(void *)(v7 + 56));
      v14(v7 + v8[8], v6);
      uint64_t v9 = v7 + v8[9];
      uint64_t v10 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      unint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
      if (!v11(v9, 1, v10))
      {
        outlined consume of Data._Representation(*(void *)(v9 + 8), *(void *)(v9 + 16));
        v14(v9 + *(int *)(v10 + 24), v6);
      }
      uint64_t v12 = v7 + v8[10];
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v11)(v12, 1, v10);
      if (!result)
      {
        outlined consume of Data._Representation(*(void *)(v12 + 8), *(void *)(v12 + 16));
        uint64_t v13 = v12 + *(int *)(v10 + 24);
        return ((uint64_t (*)(uint64_t, uint64_t))v14)(v13, v6);
      }
    }
  }
  return result;
}

uint64_t initializeWithCopy for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = *(void *)(a2 + 8);
  outlined copy of Data._Representation(*(void *)a2, v6);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v7;
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
    uint64_t v8 = *(void *)(a2 + 40);
    unint64_t v9 = *(void *)(a2 + 48);
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v8, v9);
    *(void *)(a1 + 40) = v8;
    *(void *)(a1 + 48) = v9;
    uint64_t v10 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
    uint64_t v11 = *(int *)(v10 + 32);
    uint64_t v12 = a1 + v11;
    uint64_t v13 = a2 + v11;
    uint64_t v14 = type metadata accessor for UnknownStorage();
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
    v15(v12, v13, v14);
    uint64_t v16 = *(int *)(v10 + 36);
    uint64_t v17 = (void *)(a1 + v16);
    uint64_t v18 = (void *)(a2 + v16);
    uint64_t v19 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    uint64_t v20 = *((void *)v19 - 1);
    if ((*(unsigned int (**)(void *, uint64_t, int *))(v20 + 48))(v18, 1, v19))
    {
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      uint64_t v52 = v20;
      uint64_t v22 = v18[1];
      *uint64_t v17 = *v18;
      v17[1] = v22;
      uint64_t v23 = v18[3];
      v17[2] = v18[2];
      v17[3] = v23;
      uint64_t v24 = v18[4];
      unint64_t v25 = v18[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v24, v25);
      v17[4] = v24;
      v17[5] = v25;
      uint64_t v26 = v18[6];
      unint64_t v27 = v18[7];
      outlined copy of Data._Representation(v26, v27);
      v17[6] = v26;
      v17[7] = v27;
      uint64_t v51 = v14;
      v15((uint64_t)v17 + v19[8], (uint64_t)v18 + v19[8], v14);
      uint64_t v28 = v19[9];
      uint64_t v29 = (void *)((char *)v17 + v28);
      unint64_t v30 = (void *)((char *)v18 + v28);
      uint64_t v31 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      uint64_t v50 = *(void *)(v31 - 8);
      uint64_t v32 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v50 + 48);
      unint64_t v49 = (void (*)(char *, char *, uint64_t))v15;
      if (v32(v30, 1, v31))
      {
        uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
        uint64_t v34 = v51;
      }
      else
      {
        uint64_t v35 = v30[1];
        *uint64_t v29 = *v30;
        unint64_t v47 = v30[2];
        uint64_t v48 = v35;
        outlined copy of Data._Representation(v35, v47);
        v29[1] = v48;
        v29[2] = v47;
        uint64_t v36 = *(int *)(v31 + 24);
        uint64_t v37 = (char *)v29 + v36;
        uint64_t v38 = (char *)v30 + v36;
        uint64_t v39 = v29;
        uint64_t v34 = v51;
        v15((uint64_t)v37, (uint64_t)v38, v51);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v50 + 56))(v39, 0, 1, v31);
      }
      uint64_t v40 = v19[10];
      uint64_t v41 = (void *)((char *)v17 + v40);
      uint64_t v42 = (void *)((char *)v18 + v40);
      if (v32(v42, 1, v31))
      {
        uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
      }
      else
      {
        uint64_t v44 = v42[1];
        void *v41 = *v42;
        unint64_t v45 = v42[2];
        outlined copy of Data._Representation(v44, v45);
        v41[1] = v44;
        v41[2] = v45;
        v49((char *)v41 + *(int *)(v31 + 24), (char *)v42 + *(int *)(v31 + 24), v34);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v50 + 56))(v41, 0, 1, v31);
      }
      (*(void (**)(void *, void, uint64_t, int *))(v52 + 56))(v17, 0, 1, v19);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v5 = *(void *)a2;
    unint64_t v6 = *(void *)(a2 + 8);
    outlined copy of Data._Representation(*(void *)a2, v6);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v6;
    if (EnumCaseMultiPayload == 1)
    {
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v7 = *(void *)(a2 + 24);
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      *(void *)(a1 + 24) = v7;
      uint64_t v8 = *(void *)(a2 + 40);
      unint64_t v9 = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v8, v9);
      *(void *)(a1 + 40) = v8;
      *(void *)(a1 + 48) = v9;
      uint64_t v10 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      uint64_t v11 = *(int *)(v10 + 32);
      uint64_t v12 = a1 + v11;
      uint64_t v13 = a2 + v11;
      uint64_t v14 = type metadata accessor for UnknownStorage();
      uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
      v15(v12, v13, v14);
      uint64_t v16 = *(int *)(v10 + 36);
      uint64_t v17 = (void *)(a1 + v16);
      uint64_t v18 = (void *)(a2 + v16);
      uint64_t v19 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        uint64_t v48 = v20;
        *uint64_t v17 = *v18;
        v17[1] = v18[1];
        v17[2] = v18[2];
        v17[3] = v18[3];
        uint64_t v50 = v19;
        uint64_t v22 = v18[4];
        unint64_t v23 = v18[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v22, v23);
        v17[4] = v22;
        v17[5] = v23;
        uint64_t v24 = v18[6];
        unint64_t v25 = v18[7];
        outlined copy of Data._Representation(v24, v25);
        v17[6] = v24;
        v17[7] = v25;
        uint64_t v49 = v14;
        v15((uint64_t)v17 + *(int *)(v50 + 32), (uint64_t)v18 + *(int *)(v50 + 32), v14);
        uint64_t v26 = *(int *)(v19 + 36);
        unint64_t v27 = (void *)((char *)v17 + v26);
        uint64_t v28 = (void *)((char *)v18 + v26);
        uint64_t v29 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        uint64_t v46 = *(void *)(v29 - 8);
        unint64_t v47 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v46 + 48);
        unint64_t v45 = (void (*)(char *, char *, uint64_t))v15;
        if (v47(v28, 1, v29))
        {
          uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v27, v28, *(void *)(*(void *)(v30 - 8) + 64));
          uint64_t v31 = v49;
        }
        else
        {
          *unint64_t v27 = *v28;
          uint64_t v32 = v28[1];
          unint64_t v44 = v28[2];
          outlined copy of Data._Representation(v32, v44);
          v27[1] = v32;
          v27[2] = v44;
          uint64_t v33 = *(int *)(v29 + 24);
          uint64_t v34 = (char *)v27 + v33;
          uint64_t v35 = (char *)v28 + v33;
          uint64_t v36 = v27;
          uint64_t v31 = v49;
          v15((uint64_t)v34, (uint64_t)v35, v49);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v46 + 56))(v36, 0, 1, v29);
        }
        uint64_t v37 = *(int *)(v50 + 40);
        uint64_t v38 = (void *)((char *)v17 + v37);
        uint64_t v39 = (void *)((char *)v18 + v37);
        if (v47(v39, 1, v29))
        {
          uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64));
        }
        else
        {
          *uint64_t v38 = *v39;
          uint64_t v41 = v39[1];
          unint64_t v42 = v39[2];
          outlined copy of Data._Representation(v41, v42);
          v38[1] = v41;
          v38[2] = v42;
          v45((char *)v38 + *(int *)(v29 + 24), (char *)v39 + *(int *)(v29 + 24), v31);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v46 + 56))(v38, 0, 1, v29);
        }
        (*(void (**)(void *, void, uint64_t, uint64_t))(v48 + 56))(v17, 0, 1, v50);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v6 = *((void *)a2 + 3);
    *((void *)a1 + 2) = *((void *)a2 + 2);
    *((void *)a1 + 3) = v6;
    a1[32] = a2[32];
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    uint64_t v7 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
    uint64_t v8 = *(int *)(v7 + 32);
    unint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32);
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(v7 + 36);
    uint64_t v14 = &a1[v13];
    uint64_t v15 = &a2[v13];
    uint64_t v16 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    uint64_t v17 = *((void *)v16 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      long long v19 = *((_OWORD *)v15 + 1);
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      *((_OWORD *)v14 + 1) = v19;
      long long v20 = *((_OWORD *)v15 + 3);
      *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
      *((_OWORD *)v14 + 3) = v20;
      v12(&v14[v16[8]], &v15[v16[8]], v11);
      uint64_t v21 = v16[9];
      uint64_t v36 = v12;
      __dst = &v14[v21];
      uint64_t v22 = &v15[v21];
      uint64_t v23 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      uint64_t v24 = *(void *)(v23 - 8);
      uint64_t v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
      uint64_t v35 = v24;
      if (v37(v22, 1, v23))
      {
        uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(__dst, v22, *(void *)(*(void *)(v25 - 8) + 64));
        uint64_t v26 = v36;
      }
      else
      {
        *(void *)__dst = *(void *)v22;
        *(_OWORD *)(__dst + 8) = *(_OWORD *)(v22 + 8);
        uint64_t v27 = *(int *)(v23 + 24);
        uint64_t v28 = &v22[v27];
        uint64_t v26 = v36;
        v36(&__dst[v27], v28, v11);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(__dst, 0, 1, v23);
      }
      uint64_t v29 = v23;
      uint64_t v30 = v16[10];
      uint64_t v31 = &v14[v30];
      uint64_t v32 = &v15[v30];
      if (v37(v32, 1, v29))
      {
        uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
      }
      else
      {
        *(void *)uint64_t v31 = *(void *)v32;
        *(_OWORD *)(v31 + 8) = *(_OWORD *)(v32 + 8);
        v26(&v31[*(int *)(v29 + 24)], &v32[*(int *)(v29 + 24)], v11);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v31, 0, 1, v29);
      }
      (*(void (**)(char *, void, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v6 = *((void *)a2 + 3);
      *((void *)a1 + 2) = *((void *)a2 + 2);
      *((void *)a1 + 3) = v6;
      a1[32] = a2[32];
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      uint64_t v7 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      uint64_t v8 = *(int *)(v7 + 32);
      unint64_t v9 = &a1[v8];
      uint64_t v10 = &a2[v8];
      uint64_t v11 = type metadata accessor for UnknownStorage();
      uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32);
      v12(v9, v10, v11);
      uint64_t v13 = *(int *)(v7 + 36);
      uint64_t v14 = &a1[v13];
      uint64_t v15 = &a2[v13];
      uint64_t v16 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      uint64_t v17 = *((void *)v16 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
      {
        uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        long long v19 = *((_OWORD *)v15 + 1);
        *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
        *((_OWORD *)v14 + 1) = v19;
        long long v20 = *((_OWORD *)v15 + 3);
        *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
        *((_OWORD *)v14 + 3) = v20;
        v12(&v14[v16[8]], &v15[v16[8]], v11);
        uint64_t v21 = v16[9];
        uint64_t v37 = v12;
        __dst = &v14[v21];
        uint64_t v22 = &v15[v21];
        uint64_t v23 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        uint64_t v24 = *(void *)(v23 - 8);
        uint64_t v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
        uint64_t v35 = v24;
        if (v36(v22, 1, v23))
        {
          uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(__dst, v22, *(void *)(*(void *)(v25 - 8) + 64));
          uint64_t v26 = v37;
        }
        else
        {
          *(void *)__dst = *(void *)v22;
          *(_OWORD *)(__dst + 8) = *(_OWORD *)(v22 + 8);
          uint64_t v27 = *(int *)(v23 + 24);
          uint64_t v28 = &v22[v27];
          uint64_t v26 = v37;
          v37(&__dst[v27], v28, v11);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(__dst, 0, 1, v23);
        }
        uint64_t v29 = v23;
        uint64_t v30 = v16[10];
        uint64_t v31 = &v14[v30];
        uint64_t v32 = &v15[v30];
        if (v36(v32, 1, v29))
        {
          uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v31 = *(void *)v32;
          *(_OWORD *)(v31 + 8) = *(_OWORD *)(v32 + 8);
          v26(&v31[*(int *)(v29 + 24)], &v32[*(int *)(v29 + 24)], v11);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v31, 0, 1, v29);
        }
        (*(void (**)(char *, void, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content()
{
  uint64_t result = type metadata accessor for AttachmentLedger_AttachmentMetadata(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_173Tm);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_174Tm);
}

uint64_t type metadata completion function for AttachmentLedger_SubscribeResponse.TopicUpdate()
{
  return type metadata completion function for AttachmentLedger_MMCSMetadata.BlobData();
}

ValueMetadata *type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent()
{
  return &type metadata for AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent;
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse.AttachmentUpdate(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v14 = *a2;
          unint64_t v15 = a2[1];
          outlined copy of Data._Representation(*a2, v15);
          *a1 = v14;
          a1[1] = v15;
          uint64_t v16 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0) + 20);
          uint64_t v17 = (char *)a1 + v16;
          uint64_t v18 = (char *)a2 + v16;
          uint64_t v19 = type metadata accessor for UnknownStorage();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
          break;
        case 2u:
          uint64_t v20 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
          uint64_t v21 = *(void *)(v20 - 8);
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v21 + 48))(a2, 1, v20))
          {
            uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
            memcpy(a1, a2, *(void *)(*(void *)(v22 - 8) + 64));
          }
          else
          {
            int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
            uint64_t v34 = *a2;
            unint64_t v35 = a2[1];
            outlined copy of Data._Representation(*a2, v35);
            *a1 = v34;
            a1[1] = v35;
            if (EnumCaseMultiPayload == 1)
            {
              a1[2] = a2[2];
              uint64_t v36 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                           + 24);
              uint64_t v37 = (char *)a1 + v36;
              uint64_t v38 = (char *)a2 + v36;
              uint64_t v39 = type metadata accessor for UnknownStorage();
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 16))(v37, v38, v39);
            }
            else
            {
              uint64_t v153 = v21;
              a1[2] = a2[2];
              uint64_t v61 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
              uint64_t v62 = *(int *)(v61 + 24);
              v63 = (char *)a1 + v62;
              uint64_t v64 = (char *)a2 + v62;
              uint64_t v65 = type metadata accessor for UnknownStorage();
              v148 = *(void (**)(char *, char *))(*(void *)(v65 - 8) + 16);
              __dsta = (void *)v65;
              v148(v63, v64);
              uint64_t v66 = *(int *)(v61 + 28);
              uint64_t v67 = (uint64_t *)((char *)a1 + v66);
              uint64_t v68 = (uint64_t *)((char *)a2 + v66);
              uint64_t v69 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
              uint64_t v70 = *(void *)(v69 - 8);
              if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
              {
                uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
                memcpy(v67, v68, *(void *)(*(void *)(v71 - 8) + 64));
              }
              else
              {
                uint64_t v140 = v70;
                uint64_t v145 = v69;
                uint64_t v96 = *v68;
                unint64_t v95 = v68[1];
                outlined copy of Data._Representation(*v68, v95);
                *uint64_t v67 = v96;
                v67[1] = v95;
                uint64_t v97 = v145;
                v67[2] = v68[2];
                ((void (*)(char *, char *, void *))v148)((char *)v67 + *(int *)(v145 + 24), (char *)v68 + *(int *)(v145 + 24), __dsta);
                uint64_t v98 = *(int *)(v145 + 28);
                v143 = v67;
                v138 = (void *)((char *)v67 + v98);
                uint64_t v99 = (uint64_t *)((char *)v68 + v98);
                uint64_t v100 = type metadata accessor for AttachmentLedger_EncryptionID(0);
                uint64_t v101 = *(void *)(v100 - 8);
                if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v101 + 48))(v99, 1, v100))
                {
                  uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
                  memcpy(v138, v99, *(void *)(*(void *)(v102 - 8) + 64));
                }
                else
                {
                  unint64_t v135 = v99[1];
                  uint64_t v136 = *v99;
                  outlined copy of Data._Representation(*v99, v135);
                  void *v138 = v136;
                  v138[1] = v135;
                  ((void (*)(char *, char *, void *))v148)((char *)v138 + *(int *)(v100 + 20), (char *)v99 + *(int *)(v100 + 20), __dsta);
                  uint64_t v97 = v145;
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v101 + 56))(v138, 0, 1, v100);
                }
                (*(void (**)(void *, void, uint64_t, uint64_t))(v140 + 56))(v143, 0, 1, v97);
              }
              uint64_t v21 = v153;
            }
            swift_storeEnumTagMultiPayload();
            (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v21 + 56))(a1, 0, 1, v20);
          }
          uint64_t v115 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0)
                        + 20);
          v116 = (char *)a1 + v115;
          v117 = (char *)a2 + v115;
          uint64_t v118 = type metadata accessor for UnknownStorage();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v118 - 8) + 16))(v116, v117, v118);
          break;
        case 3u:
          uint64_t v23 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
          uint64_t v24 = *(void *)(v23 - 8);
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v24 + 48))(a2, 1, v23))
          {
            uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
            memcpy(a1, a2, *(void *)(*(void *)(v25 - 8) + 64));
          }
          else
          {
            int v40 = swift_getEnumCaseMultiPayload();
            uint64_t v41 = *a2;
            unint64_t v42 = a2[1];
            outlined copy of Data._Representation(*a2, v42);
            *a1 = v41;
            a1[1] = v42;
            if (v40 == 1)
            {
              a1[2] = a2[2];
              *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
              a1[4] = a2[4];
              uint64_t v43 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                           + 28);
              unint64_t v44 = (char *)a1 + v43;
              unint64_t v45 = (char *)a2 + v43;
              uint64_t v46 = type metadata accessor for UnknownStorage();
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 16))(v44, v45, v46);
            }
            else
            {
              uint64_t v154 = v24;
              a1[2] = a2[2];
              *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
              uint64_t v72 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
              uint64_t v73 = *(int *)(v72 + 24);
              uint64_t v74 = (char *)a1 + v73;
              uint64_t v75 = (char *)a2 + v73;
              uint64_t v76 = type metadata accessor for UnknownStorage();
              v149 = *(void (**)(char *, char *, uint64_t))(*(void *)(v76 - 8) + 16);
              v149(v74, v75, v76);
              uint64_t v77 = *(int *)(v72 + 28);
              __dstb = (uint64_t *)((char *)a1 + v77);
              uint64_t v78 = (uint64_t *)((char *)a2 + v77);
              uint64_t v79 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
              uint64_t v80 = *(void *)(v79 - 8);
              if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
              {
                uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                memcpy(__dstb, v78, *(void *)(*(void *)(v81 - 8) + 64));
              }
              else
              {
                uint64_t v103 = v78[1];
                uint64_t v144 = v103;
                void *__dstb = *v78;
                unint64_t v141 = v78[2];
                outlined copy of Data._Representation(v103, v141);
                __dstb[1] = v144;
                __dstb[2] = v141;
                v149((char *)__dstb + *(int *)(v79 + 24), (char *)v78 + *(int *)(v79 + 24), v76);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v80 + 56))(__dstb, 0, 1, v79);
              }
              uint64_t v24 = v154;
            }
            swift_storeEnumTagMultiPayload();
            (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v24 + 56))(a1, 0, 1, v23);
          }
          uint64_t v104 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0)
                        + 20);
          v105 = (char *)a1 + v104;
          v106 = (char *)a2 + v104;
          uint64_t v107 = type metadata accessor for UnknownStorage();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v107 - 8) + 16))(v105, v106, v107);
          break;
        default:
          uint64_t v11 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
          uint64_t v12 = *(void **)(v11 - 8);
          if ((*((unsigned int (**)(uint64_t *, uint64_t, uint64_t))v12 + 6))(a2, 1, v11))
          {
            uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
            memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64));
          }
          else
          {
            int v26 = swift_getEnumCaseMultiPayload();
            uint64_t v27 = *a2;
            unint64_t v28 = a2[1];
            outlined copy of Data._Representation(*a2, v28);
            *a1 = v27;
            a1[1] = v28;
            if (v26 == 1)
            {
              uint64_t v29 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0)
                           + 20);
              uint64_t v30 = (char *)a1 + v29;
              uint64_t v31 = (char *)a2 + v29;
              uint64_t v32 = type metadata accessor for UnknownStorage();
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16))(v30, v31, v32);
            }
            else
            {
              __dst = v12;
              uint64_t v47 = a2[3];
              a1[2] = a2[2];
              a1[3] = v47;
              *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
              uint64_t v48 = a2[5];
              unint64_t v49 = a2[6];
              swift_bridgeObjectRetain();
              outlined copy of Data._Representation(v48, v49);
              a1[5] = v48;
              a1[6] = v49;
              uint64_t v50 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
              uint64_t v51 = *(int *)(v50 + 32);
              uint64_t v52 = (char *)a1 + v51;
              uint64_t v53 = (char *)a2 + v51;
              uint64_t v54 = type metadata accessor for UnknownStorage();
              v146 = *(void (**)(char *, char *))(*(void *)(v54 - 8) + 16);
              uint64_t v147 = v54;
              v146(v52, v53);
              uint64_t v55 = *(int *)(v50 + 36);
              uint64_t v56 = (uint64_t *)((char *)a1 + v55);
              uint64_t v57 = (uint64_t *)((char *)a2 + v55);
              uint64_t v58 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
              uint64_t v59 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v58 - 8);
              if (v59[6](v57, 1, v58))
              {
                uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
                memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64));
              }
              else
              {
                v137 = v59;
                uint64_t v82 = v57[1];
                *uint64_t v56 = *v57;
                v56[1] = v82;
                v142 = (int *)v58;
                uint64_t v83 = v57[3];
                v56[2] = v57[2];
                v56[3] = v83;
                v155 = v56;
                uint64_t v85 = v57[4];
                unint64_t v84 = v57[5];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                outlined copy of Data._Representation(v85, v84);
                v155[4] = v85;
                v155[5] = v84;
                uint64_t v86 = v57[6];
                unint64_t v87 = v57[7];
                outlined copy of Data._Representation(v86, v87);
                v155[6] = v86;
                v155[7] = v87;
                ((void (*)(char *, char *, uint64_t))v146)((char *)v155 + v142[8], (char *)v57 + v142[8], v147);
                uint64_t v88 = v142[9];
                uint64_t v89 = (void *)((char *)v155 + v88);
                uint64_t v90 = (void *)((char *)v57 + v88);
                uint64_t v91 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
                uint64_t v92 = *(void *)(v91 - 8);
                uint64_t v139 = v91;
                v134 = *(unsigned int (**)(void *, uint64_t))(v92 + 48);
                uint64_t v133 = v92;
                if (v134(v90, 1))
                {
                  uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                  memcpy(v89, v90, *(void *)(*(void *)(v93 - 8) + 64));
                  uint64_t v94 = v155;
                }
                else
                {
                  uint64_t v108 = v90[1];
                  *uint64_t v89 = *v90;
                  unint64_t v130 = v90[2];
                  uint64_t v131 = v108;
                  outlined copy of Data._Representation(v108, v130);
                  v89[1] = v131;
                  v89[2] = v130;
                  v109 = v89;
                  v132 = v89;
                  uint64_t v94 = v155;
                  ((void (*)(char *, char *, uint64_t))v146)((char *)v109 + *(int *)(v139 + 24), (char *)v90 + *(int *)(v139 + 24), v147);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v92 + 56))(v132, 0, 1, v139);
                }
                uint64_t v110 = v142[10];
                v111 = (void *)((char *)v94 + v110);
                v112 = (void *)((char *)v57 + v110);
                if (((unsigned int (*)(void *, uint64_t, uint64_t))v134)(v112, 1, v139))
                {
                  uint64_t v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                  memcpy(v111, v112, *(void *)(*(void *)(v113 - 8) + 64));
                  v114 = v155;
                }
                else
                {
                  uint64_t v119 = v112[1];
                  void *v111 = *v112;
                  unint64_t v120 = v112[2];
                  outlined copy of Data._Representation(v119, v120);
                  v111[1] = v119;
                  v111[2] = v120;
                  v114 = v155;
                  ((void (*)(char *, char *, uint64_t))v146)((char *)v111 + *(int *)(v139 + 24), (char *)v112 + *(int *)(v139 + 24), v147);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v133 + 56))(v111, 0, 1, v139);
                }
                (*((void (**)(void *, void, uint64_t, int *))v137 + 7))(v114, 0, 1, v142);
              }
              uint64_t v12 = __dst;
            }
            swift_storeEnumTagMultiPayload();
            (*((void (**)(uint64_t *, void, uint64_t, uint64_t))v12 + 7))(a1, 0, 1, v11);
          }
          uint64_t v121 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0) + 20);
          v122 = (char *)a1 + v121;
          v123 = (char *)a2 + v121;
          uint64_t v124 = type metadata accessor for UnknownStorage();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v124 - 8) + 16))(v122, v123, v124);
          break;
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v125 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    v126 = (char *)a1 + v125;
    v127 = (char *)a2 + v125;
    uint64_t v128 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v128 - 8) + 16))(v126, v127, v128);
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse.AttachmentUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(a1, 1, v5))
        {
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
          if (EnumCaseMultiPayload == 1)
          {
            uint64_t v7 = a1
               + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0)
                        + 20);
            uint64_t v8 = type metadata accessor for UnknownStorage();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
          }
          else
          {
            swift_bridgeObjectRelease();
            outlined consume of Data._Representation(*(void *)(a1 + 40), *(void *)(a1 + 48));
            uint64_t v18 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
            uint64_t v19 = a1 + *(int *)(v18 + 32);
            uint64_t v20 = type metadata accessor for UnknownStorage();
            uint64_t v21 = *(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8);
            v21(v19, v20);
            uint64_t v22 = a1 + *(int *)(v18 + 36);
            uint64_t v23 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v23 - 1) + 48))(v22, 1, v23))
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              outlined consume of Data._Representation(*(void *)(v22 + 32), *(void *)(v22 + 40));
              outlined consume of Data._Representation(*(void *)(v22 + 48), *(void *)(v22 + 56));
              uint64_t v48 = v21;
              v21(v22 + v23[8], v20);
              uint64_t v24 = v22 + v23[9];
              uint64_t v25 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
              int v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48);
              if (!v26(v24, 1, v25))
              {
                outlined consume of Data._Representation(*(void *)(v24 + 8), *(void *)(v24 + 16));
                v48(v24 + *(int *)(v25 + 24), v20);
              }
              uint64_t v27 = v22 + v23[10];
              if (!v26(v27, 1, v25))
              {
                outlined consume of Data._Representation(*(void *)(v27 + 8), *(void *)(v27 + 16));
                v48(v27 + *(int *)(v25 + 24), v20);
              }
            }
          }
        }
        uint64_t v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
        goto LABEL_26;
      case 1u:
        outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
        uint64_t v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0);
        goto LABEL_26;
      case 2u:
        uint64_t v10 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(a1, 1, v10))
        {
          int v11 = swift_getEnumCaseMultiPayload();
          outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
          if (v11 == 1)
          {
            uint64_t v12 = a1
                + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                         + 24);
            uint64_t v13 = type metadata accessor for UnknownStorage();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
          }
          else
          {
            uint64_t v28 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
            uint64_t v29 = a1 + *(int *)(v28 + 24);
            uint64_t v30 = type metadata accessor for UnknownStorage();
            uint64_t v31 = *(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8);
            v31(v29, v30);
            uint64_t v32 = a1 + *(int *)(v28 + 28);
            uint64_t v33 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 48))(v32, 1, v33))
            {
              outlined consume of Data._Representation(*(void *)v32, *(void *)(v32 + 8));
              v31(v32 + *(int *)(v33 + 24), v30);
              uint64_t v34 = v32 + *(int *)(v33 + 28);
              uint64_t v35 = type metadata accessor for AttachmentLedger_EncryptionID(0);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48))(v34, 1, v35))
              {
                outlined consume of Data._Representation(*(void *)v34, *(void *)(v34 + 8));
                v31(v34 + *(int *)(v35 + 20), v30);
              }
            }
          }
        }
        uint64_t v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0);
        goto LABEL_26;
      case 3u:
        uint64_t v14 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(a1, 1, v14))
        {
          int v15 = swift_getEnumCaseMultiPayload();
          outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
          if (v15 == 1)
          {
            uint64_t v16 = a1
                + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                         + 28);
            uint64_t v17 = type metadata accessor for UnknownStorage();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
          }
          else
          {
            uint64_t v36 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
            uint64_t v37 = a1 + *(int *)(v36 + 24);
            uint64_t v38 = type metadata accessor for UnknownStorage();
            uint64_t v39 = *(void (**)(uint64_t, uint64_t))(*(void *)(v38 - 8) + 8);
            v39(v37, v38);
            uint64_t v40 = a1 + *(int *)(v36 + 28);
            uint64_t v41 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 48))(v40, 1, v41))
            {
              outlined consume of Data._Representation(*(void *)(v40 + 8), *(void *)(v40 + 16));
              v39(v40 + *(int *)(v41 + 24), v38);
            }
          }
        }
        uint64_t v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
LABEL_26:
        uint64_t v42 = a1 + *(int *)(v9 + 20);
        uint64_t v43 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v43 - 8) + 8))(v42, v43);
        break;
      default:
        break;
    }
  }
  uint64_t v44 = a1 + *(int *)(a2 + 24);
  uint64_t v45 = type metadata accessor for UnknownStorage();
  uint64_t v46 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v45 - 8) + 8);
  return v46(v44, v45);
}

void *initializeWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v12 = *a2;
        unint64_t v13 = a2[1];
        outlined copy of Data._Representation(*a2, v13);
        *a1 = v12;
        a1[1] = v13;
        uint64_t v14 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0) + 20);
        int v15 = (char *)a1 + v14;
        uint64_t v16 = (char *)a2 + v14;
        uint64_t v17 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
        break;
      case 2u:
        uint64_t v18 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
        uint64_t v19 = *(void *)(v18 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v19 + 48))(a2, 1, v18))
        {
          uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
          memcpy(a1, a2, *(void *)(*(void *)(v20 - 8) + 64));
        }
        else
        {
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          uint64_t v32 = *a2;
          unint64_t v33 = a2[1];
          outlined copy of Data._Representation(*a2, v33);
          *a1 = v32;
          a1[1] = v33;
          if (EnumCaseMultiPayload == 1)
          {
            a1[2] = a2[2];
            uint64_t v34 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                         + 24);
            uint64_t v35 = (char *)a1 + v34;
            uint64_t v36 = (char *)a2 + v34;
            uint64_t v37 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16))(v35, v36, v37);
          }
          else
          {
            uint64_t v151 = v19;
            a1[2] = a2[2];
            uint64_t v59 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
            uint64_t v60 = *(int *)(v59 + 24);
            uint64_t v61 = (char *)a1 + v60;
            uint64_t v62 = (char *)a2 + v60;
            uint64_t v63 = type metadata accessor for UnknownStorage();
            v146 = *(void (**)(char *, char *))(*(void *)(v63 - 8) + 16);
            __dsta = (void *)v63;
            v146(v61, v62);
            uint64_t v64 = *(int *)(v59 + 28);
            uint64_t v65 = (void *)((char *)a1 + v64);
            uint64_t v66 = (uint64_t *)((char *)a2 + v64);
            uint64_t v67 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
            uint64_t v68 = *(void *)(v67 - 8);
            if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
            {
              uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
              memcpy(v65, v66, *(void *)(*(void *)(v69 - 8) + 64));
            }
            else
            {
              uint64_t v138 = v68;
              uint64_t v143 = v67;
              uint64_t v94 = *v66;
              unint64_t v93 = v66[1];
              outlined copy of Data._Representation(*v66, v93);
              *uint64_t v65 = v94;
              v65[1] = v93;
              uint64_t v95 = v143;
              v65[2] = v66[2];
              ((void (*)(char *, char *, void *))v146)((char *)v65 + *(int *)(v143 + 24), (char *)v66 + *(int *)(v143 + 24), __dsta);
              uint64_t v96 = *(int *)(v143 + 28);
              unint64_t v141 = v65;
              uint64_t v136 = (void *)((char *)v65 + v96);
              uint64_t v97 = (uint64_t *)((char *)v66 + v96);
              uint64_t v98 = type metadata accessor for AttachmentLedger_EncryptionID(0);
              uint64_t v99 = *(void *)(v98 - 8);
              if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v99 + 48))(v97, 1, v98))
              {
                uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
                memcpy(v136, v97, *(void *)(*(void *)(v100 - 8) + 64));
              }
              else
              {
                unint64_t v133 = v97[1];
                uint64_t v134 = *v97;
                outlined copy of Data._Representation(*v97, v133);
                *uint64_t v136 = v134;
                v136[1] = v133;
                ((void (*)(char *, char *, void *))v146)((char *)v136 + *(int *)(v98 + 20), (char *)v97 + *(int *)(v98 + 20), __dsta);
                uint64_t v95 = v143;
                (*(void (**)(void *, void, uint64_t, uint64_t))(v99 + 56))(v136, 0, 1, v98);
              }
              (*(void (**)(void *, void, uint64_t, uint64_t))(v138 + 56))(v141, 0, 1, v95);
            }
            uint64_t v19 = v151;
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(a1, 0, 1, v18);
        }
        uint64_t v113 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0)
                      + 20);
        v114 = (char *)a1 + v113;
        uint64_t v115 = (char *)a2 + v113;
        uint64_t v116 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v116 - 8) + 16))(v114, v115, v116);
        break;
      case 3u:
        uint64_t v21 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
        uint64_t v22 = *(void *)(v21 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v22 + 48))(a2, 1, v21))
        {
          uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
          memcpy(a1, a2, *(void *)(*(void *)(v23 - 8) + 64));
        }
        else
        {
          int v38 = swift_getEnumCaseMultiPayload();
          uint64_t v39 = *a2;
          unint64_t v40 = a2[1];
          outlined copy of Data._Representation(*a2, v40);
          *a1 = v39;
          a1[1] = v40;
          if (v38 == 1)
          {
            a1[2] = a2[2];
            *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
            a1[4] = a2[4];
            uint64_t v41 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                         + 28);
            uint64_t v42 = (char *)a1 + v41;
            uint64_t v43 = (char *)a2 + v41;
            uint64_t v44 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 16))(v42, v43, v44);
          }
          else
          {
            uint64_t v152 = v22;
            a1[2] = a2[2];
            *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
            uint64_t v70 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
            uint64_t v71 = *(int *)(v70 + 24);
            uint64_t v72 = (char *)a1 + v71;
            uint64_t v73 = (char *)a2 + v71;
            uint64_t v74 = type metadata accessor for UnknownStorage();
            uint64_t v147 = *(void (**)(char *, char *, uint64_t))(*(void *)(v74 - 8) + 16);
            v147(v72, v73, v74);
            uint64_t v75 = *(int *)(v70 + 28);
            __dstb = (void *)((char *)a1 + v75);
            uint64_t v76 = (uint64_t *)((char *)a2 + v75);
            uint64_t v77 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
            uint64_t v78 = *(void *)(v77 - 8);
            if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77))
            {
              uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
              memcpy(__dstb, v76, *(void *)(*(void *)(v79 - 8) + 64));
            }
            else
            {
              uint64_t v101 = v76[1];
              uint64_t v142 = v101;
              void *__dstb = *v76;
              unint64_t v139 = v76[2];
              outlined copy of Data._Representation(v101, v139);
              __dstb[1] = v142;
              __dstb[2] = v139;
              v147((char *)__dstb + *(int *)(v77 + 24), (char *)v76 + *(int *)(v77 + 24), v74);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v78 + 56))(__dstb, 0, 1, v77);
            }
            uint64_t v22 = v152;
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(a1, 0, 1, v21);
        }
        uint64_t v102 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0)
                      + 20);
        uint64_t v103 = (char *)a1 + v102;
        uint64_t v104 = (char *)a2 + v102;
        uint64_t v105 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v105 - 8) + 16))(v103, v104, v105);
        break;
      default:
        uint64_t v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
        uint64_t v10 = *(void **)(v9 - 8);
        if ((*((unsigned int (**)(uint64_t *, uint64_t, uint64_t))v10 + 6))(a2, 1, v9))
        {
          uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
          memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
        }
        else
        {
          int v24 = swift_getEnumCaseMultiPayload();
          uint64_t v25 = *a2;
          unint64_t v26 = a2[1];
          outlined copy of Data._Representation(*a2, v26);
          *a1 = v25;
          a1[1] = v26;
          if (v24 == 1)
          {
            uint64_t v27 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0)
                         + 20);
            uint64_t v28 = (char *)a1 + v27;
            uint64_t v29 = (char *)a2 + v27;
            uint64_t v30 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16))(v28, v29, v30);
          }
          else
          {
            __dst = v10;
            uint64_t v45 = a2[3];
            a1[2] = a2[2];
            a1[3] = v45;
            *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
            uint64_t v46 = a2[5];
            unint64_t v47 = a2[6];
            swift_bridgeObjectRetain();
            outlined copy of Data._Representation(v46, v47);
            a1[5] = v46;
            a1[6] = v47;
            uint64_t v48 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
            uint64_t v49 = *(int *)(v48 + 32);
            uint64_t v50 = (char *)a1 + v49;
            uint64_t v51 = (char *)a2 + v49;
            uint64_t v52 = type metadata accessor for UnknownStorage();
            uint64_t v144 = *(void (**)(char *, char *))(*(void *)(v52 - 8) + 16);
            uint64_t v145 = v52;
            v144(v50, v51);
            uint64_t v53 = *(int *)(v48 + 36);
            uint64_t v54 = (void *)((char *)a1 + v53);
            uint64_t v55 = (uint64_t *)((char *)a2 + v53);
            uint64_t v56 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
            uint64_t v57 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v56 - 8);
            if (v57[6](v55, 1, v56))
            {
              uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
              memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
            }
            else
            {
              unint64_t v135 = v57;
              uint64_t v80 = v55[1];
              *uint64_t v54 = *v55;
              v54[1] = v80;
              uint64_t v140 = (int *)v56;
              uint64_t v81 = v55[3];
              v54[2] = v55[2];
              v54[3] = v81;
              uint64_t v153 = v54;
              uint64_t v83 = v55[4];
              unint64_t v82 = v55[5];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              outlined copy of Data._Representation(v83, v82);
              v153[4] = v83;
              v153[5] = v82;
              uint64_t v84 = v55[6];
              unint64_t v85 = v55[7];
              outlined copy of Data._Representation(v84, v85);
              v153[6] = v84;
              v153[7] = v85;
              ((void (*)(char *, char *, uint64_t))v144)((char *)v153 + v140[8], (char *)v55 + v140[8], v145);
              uint64_t v86 = v140[9];
              unint64_t v87 = (void *)((char *)v153 + v86);
              uint64_t v88 = (void *)((char *)v55 + v86);
              uint64_t v89 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
              uint64_t v90 = *(void *)(v89 - 8);
              uint64_t v137 = v89;
              v132 = *(unsigned int (**)(void *, uint64_t))(v90 + 48);
              uint64_t v131 = v90;
              if (v132(v88, 1))
              {
                uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                memcpy(v87, v88, *(void *)(*(void *)(v91 - 8) + 64));
                uint64_t v92 = v153;
              }
              else
              {
                uint64_t v106 = v88[1];
                *unint64_t v87 = *v88;
                unint64_t v128 = v88[2];
                uint64_t v129 = v106;
                outlined copy of Data._Representation(v106, v128);
                v87[1] = v129;
                v87[2] = v128;
                uint64_t v107 = v87;
                unint64_t v130 = v87;
                uint64_t v92 = v153;
                ((void (*)(char *, char *, uint64_t))v144)((char *)v107 + *(int *)(v137 + 24), (char *)v88 + *(int *)(v137 + 24), v145);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v90 + 56))(v130, 0, 1, v137);
              }
              uint64_t v108 = v140[10];
              v109 = (void *)((char *)v92 + v108);
              uint64_t v110 = (void *)((char *)v55 + v108);
              if (((unsigned int (*)(void *, uint64_t, uint64_t))v132)(v110, 1, v137))
              {
                uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                memcpy(v109, v110, *(void *)(*(void *)(v111 - 8) + 64));
                v112 = v153;
              }
              else
              {
                uint64_t v117 = v110[1];
                void *v109 = *v110;
                unint64_t v118 = v110[2];
                outlined copy of Data._Representation(v117, v118);
                v109[1] = v117;
                v109[2] = v118;
                v112 = v153;
                ((void (*)(char *, char *, uint64_t))v144)((char *)v109 + *(int *)(v137 + 24), (char *)v110 + *(int *)(v137 + 24), v145);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v131 + 56))(v109, 0, 1, v137);
              }
              (*((void (**)(void *, void, uint64_t, int *))v135 + 7))(v112, 0, 1, v140);
            }
            uint64_t v10 = __dst;
          }
          swift_storeEnumTagMultiPayload();
          (*((void (**)(void *, void, uint64_t, uint64_t))v10 + 7))(a1, 0, 1, v9);
        }
        uint64_t v119 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0) + 20);
        unint64_t v120 = (char *)a1 + v119;
        uint64_t v121 = (char *)a2 + v119;
        uint64_t v122 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v122 - 8) + 16))(v120, v121, v122);
        break;
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v123 = *(int *)(a3 + 24);
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  uint64_t v124 = (char *)a1 + v123;
  uint64_t v125 = (char *)a2 + v123;
  uint64_t v126 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v126 - 8) + 16))(v124, v125, v126);
  return a1;
}

uint64_t *assignWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v18 = *a2;
          unint64_t v19 = a2[1];
          outlined copy of Data._Representation(*a2, v19);
          *a1 = v18;
          a1[1] = v19;
          uint64_t v20 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0);
          break;
        case 2u:
          uint64_t v21 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
          uint64_t v22 = *(void *)(v21 - 8);
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v22 + 48))(a2, 1, v21))
          {
            uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
            memcpy(a1, a2, *(void *)(*(void *)(v23 - 8) + 64));
          }
          else
          {
            uint64_t v273 = v22;
            int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
            uint64_t v48 = *a2;
            unint64_t v49 = a2[1];
            outlined copy of Data._Representation(*a2, v49);
            *a1 = v48;
            a1[1] = v49;
            if (EnumCaseMultiPayload == 1)
            {
              a1[2] = a2[2];
              uint64_t v50 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                           + 24);
              uint64_t v51 = (char *)a1 + v50;
              uint64_t v52 = (uint64_t)a2 + v50;
              uint64_t v53 = type metadata accessor for UnknownStorage();
              (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v53 - 8) + 16))(v51, v52, v53);
              swift_storeEnumTagMultiPayload();
              uint64_t v54 = v273;
            }
            else
            {
              a1[2] = a2[2];
              uint64_t v78 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
              uint64_t v79 = *(int *)(v78 + 24);
              uint64_t v80 = (char *)a1 + v79;
              uint64_t v81 = (uint64_t)a2 + v79;
              uint64_t v82 = type metadata accessor for UnknownStorage();
              v259 = *(void (**)(char *, uint64_t))(*(void *)(v82 - 8) + 16);
              uint64_t v264 = v82;
              v259(v80, v81);
              uint64_t v83 = *(int *)(v78 + 28);
              __dsta = (uint64_t *)((char *)a1 + v83);
              uint64_t v84 = (uint64_t *)((char *)a2 + v83);
              uint64_t v85 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
              uint64_t v86 = *(void *)(v85 - 8);
              if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v86 + 48))(v84, 1, v85))
              {
                uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
                memcpy(__dsta, v84, *(void *)(*(void *)(v87 - 8) + 64));
                uint64_t v54 = v273;
              }
              else
              {
                uint64_t v234 = v86;
                uint64_t v251 = v85;
                uint64_t v127 = *v84;
                unint64_t v128 = v84[1];
                outlined copy of Data._Representation(*v84, v128);
                void *__dsta = v127;
                __dsta[1] = v128;
                uint64_t v129 = __dsta;
                __dsta[2] = v84[2];
                ((void (*)(char *, char *, uint64_t))v259)((char *)__dsta + *(int *)(v251 + 24), (char *)v84 + *(int *)(v251 + 24), v264);
                uint64_t v130 = *(int *)(v251 + 28);
                v243 = (void *)((char *)__dsta + v130);
                uint64_t v131 = (uint64_t *)((char *)v84 + v130);
                uint64_t v132 = type metadata accessor for AttachmentLedger_EncryptionID(0);
                uint64_t v231 = *(void *)(v132 - 8);
                if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v231 + 48))(v131, 1, v132))
                {
                  uint64_t v133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
                  memcpy(v243, v131, *(void *)(*(void *)(v133 - 8) + 64));
                }
                else
                {
                  unint64_t v173 = v131[1];
                  uint64_t v229 = *v131;
                  outlined copy of Data._Representation(*v131, v173);
                  void *v243 = v229;
                  v243[1] = v173;
                  uint64_t v129 = __dsta;
                  ((void (*)(char *, char *, uint64_t))v259)((char *)v243 + *(int *)(v132 + 20), (char *)v131 + *(int *)(v132 + 20), v264);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v231 + 56))(v243, 0, 1, v132);
                }
                uint64_t v54 = v273;
                (*(void (**)(void *, void, uint64_t, uint64_t))(v234 + 56))(v129, 0, 1, v251);
              }
              swift_storeEnumTagMultiPayload();
            }
            (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v54 + 56))(a1, 0, 1, v21);
          }
          uint64_t v20 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0);
          break;
        case 3u:
          uint64_t v24 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
          uint64_t v25 = *(void *)(v24 - 8);
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v25 + 48))(a2, 1, v24))
          {
            uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
            memcpy(a1, a2, *(void *)(*(void *)(v26 - 8) + 64));
          }
          else
          {
            uint64_t v274 = v25;
            int v55 = swift_getEnumCaseMultiPayload();
            uint64_t v56 = *a2;
            unint64_t v57 = a2[1];
            outlined copy of Data._Representation(*a2, v57);
            *a1 = v56;
            a1[1] = v57;
            if (v55 == 1)
            {
              uint64_t v58 = a2[2];
              *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
              a1[2] = v58;
              a1[4] = a2[4];
              uint64_t v59 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                           + 28);
              uint64_t v60 = (char *)a1 + v59;
              uint64_t v61 = (uint64_t)a2 + v59;
              uint64_t v62 = type metadata accessor for UnknownStorage();
              (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v62 - 8) + 16))(v60, v61, v62);
              swift_storeEnumTagMultiPayload();
              uint64_t v63 = v274;
            }
            else
            {
              uint64_t v88 = a2[2];
              *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
              a1[2] = v88;
              uint64_t v89 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
              uint64_t v90 = *(int *)(v89 + 24);
              uint64_t v91 = (char *)a1 + v90;
              uint64_t v92 = (uint64_t)a2 + v90;
              uint64_t v93 = type metadata accessor for UnknownStorage();
              v260 = *(void (**)(char *, uint64_t))(*(void *)(v93 - 8) + 16);
              uint64_t v265 = v93;
              v260(v91, v92);
              uint64_t v94 = *(int *)(v89 + 28);
              __dstb = (uint64_t *)((char *)a1 + v94);
              uint64_t v95 = (uint64_t *)((char *)a2 + v94);
              uint64_t v96 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
              uint64_t v97 = *(void *)(v96 - 8);
              if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v97 + 48))(v95, 1, v96))
              {
                uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                memcpy(__dstb, v95, *(void *)(*(void *)(v98 - 8) + 64));
              }
              else
              {
                void *__dstb = *v95;
                unint64_t v239 = v95[2];
                v244 = (void *)v95[1];
                outlined copy of Data._Representation((uint64_t)v244, v239);
                __dstb[1] = v244;
                __dstb[2] = v239;
                ((void (*)(char *, char *, uint64_t))v260)((char *)__dstb + *(int *)(v96 + 24), (char *)v95 + *(int *)(v96 + 24), v265);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v97 + 56))(__dstb, 0, 1, v96);
              }
              uint64_t v63 = v274;
              swift_storeEnumTagMultiPayload();
            }
            (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v63 + 56))(a1, 0, 1, v24);
          }
          uint64_t v20 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
          break;
        default:
          uint64_t v11 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
          uint64_t v12 = *(void *)(v11 - 8);
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v12 + 48))(a2, 1, v11))
          {
            uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
            memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64));
          }
          else
          {
            uint64_t v272 = v12;
            int v27 = swift_getEnumCaseMultiPayload();
            uint64_t v28 = *a2;
            unint64_t v29 = a2[1];
            outlined copy of Data._Representation(*a2, v29);
            *a1 = v28;
            a1[1] = v29;
            if (v27 == 1)
            {
              uint64_t v30 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0)
                           + 20);
              uint64_t v31 = (char *)a1 + v30;
              uint64_t v32 = (uint64_t)a2 + v30;
              uint64_t v33 = type metadata accessor for UnknownStorage();
              (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 16))(v31, v32, v33);
              swift_storeEnumTagMultiPayload();
              uint64_t v34 = v272;
            }
            else
            {
              a1[2] = a2[2];
              uint64_t v64 = a2[3];
              *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
              a1[3] = v64;
              uint64_t v65 = a2[5];
              unint64_t v66 = a2[6];
              swift_bridgeObjectRetain();
              outlined copy of Data._Representation(v65, v66);
              a1[5] = v65;
              a1[6] = v66;
              uint64_t v67 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
              uint64_t v68 = *(int *)(v67 + 32);
              uint64_t v69 = (char *)a1 + v68;
              uint64_t v70 = (uint64_t)a2 + v68;
              uint64_t v71 = type metadata accessor for UnknownStorage();
              v258 = *(void (**)(char *, uint64_t))(*(void *)(v71 - 8) + 16);
              uint64_t v263 = v71;
              v258(v69, v70);
              uint64_t v72 = *(int *)(v67 + 36);
              uint64_t v73 = (uint64_t *)((char *)a1 + v72);
              uint64_t v74 = (uint64_t *)((char *)a2 + v72);
              uint64_t v75 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
              uint64_t v76 = *(void *)(v75 - 8);
              __dst = (int *)v75;
              if ((*(unsigned int (**)(void *, uint64_t))(v76 + 48))(v74, 1))
              {
                uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
                memcpy(v73, v74, *(void *)(*(void *)(v77 - 8) + 64));
              }
              else
              {
                uint64_t v238 = v76;
                *uint64_t v73 = *v74;
                v73[1] = v74[1];
                v73[2] = v74[2];
                v73[3] = v74[3];
                v241 = (void *)v74[4];
                unint64_t v248 = v74[5];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                outlined copy of Data._Representation((uint64_t)v241, v248);
                v73[4] = v241;
                v73[5] = v248;
                uint64_t v121 = v74[6];
                unint64_t v249 = v74[7];
                outlined copy of Data._Representation(v121, v249);
                v73[6] = v121;
                v73[7] = v249;
                ((void (*)(char *, char *, uint64_t))v258)((char *)v73 + __dst[8], (char *)v74 + __dst[8], v263);
                uint64_t v122 = __dst[9];
                v242 = (void *)((char *)v73 + v122);
                v250 = v73;
                v233 = v74;
                uint64_t v123 = (void *)((char *)v74 + v122);
                uint64_t v124 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
                uint64_t v125 = *(void *)(v124 - 8);
                v228 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v125 + 48);
                uint64_t v226 = v125;
                if (v228(v123, 1, v124))
                {
                  uint64_t v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                  memcpy(v242, v123, *(void *)(*(void *)(v126 - 8) + 64));
                }
                else
                {
                  void *v242 = *v123;
                  unint64_t v223 = v123[2];
                  uint64_t v224 = v123[1];
                  outlined copy of Data._Representation(v224, v223);
                  v242[1] = v224;
                  v242[2] = v223;
                  ((void (*)(char *, char *, uint64_t))v258)((char *)v242 + *(int *)(v124 + 24), (char *)v123 + *(int *)(v124 + 24), v263);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v125 + 56))(v242, 0, 1, v124);
                }
                v168 = (int *)v124;
                uint64_t v169 = __dst[10];
                v170 = (void *)((char *)v250 + v169);
                v171 = (void *)((char *)v233 + v169);
                if (v228((void *)((char *)v233 + v169), 1, (uint64_t)v168))
                {
                  uint64_t v172 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                  memcpy(v170, v171, *(void *)(*(void *)(v172 - 8) + 64));
                }
                else
                {
                  void *v170 = *v171;
                  uint64_t v236 = v171[1];
                  v247 = v168;
                  unint64_t v197 = v171[2];
                  outlined copy of Data._Representation(v236, v197);
                  v170[1] = v236;
                  v170[2] = v197;
                  ((void (*)(char *, char *, uint64_t))v258)((char *)v170 + v247[6], (char *)v171 + v247[6], v263);
                  (*(void (**)(void *, void, uint64_t, int *))(v226 + 56))(v170, 0, 1, v247);
                }
                (*(void (**)(void *, void, uint64_t, int *))(v238 + 56))(v250, 0, 1, __dst);
              }
              uint64_t v34 = v272;
              swift_storeEnumTagMultiPayload();
            }
            (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v34 + 56))(a1, 0, 1, v11);
          }
          uint64_t v20 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
          break;
      }
      uint64_t v198 = *(int *)(v20 + 20);
      v199 = (char *)a1 + v198;
      uint64_t v200 = (uint64_t)a2 + v198;
      uint64_t v201 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v201 - 8) + 16))(v199, v200, v201);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_76;
    }
LABEL_8:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    memcpy(a1, a2, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_76;
  }
  if (v10)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v35 = *a2;
        unint64_t v36 = a2[1];
        outlined copy of Data._Representation(*a2, v36);
        *a1 = v35;
        a1[1] = v36;
        uint64_t v37 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0) + 20);
        int v38 = (char *)a1 + v37;
        uint64_t v39 = (uint64_t)a2 + v37;
        uint64_t v40 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v40 - 8) + 16))(v38, v39, v40);
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        uint64_t v41 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
        uint64_t v42 = *(void *)(v41 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v42 + 48))(a2, 1, v41))
        {
          uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
          memcpy(a1, a2, *(void *)(*(void *)(v43 - 8) + 64));
        }
        else
        {
          int v106 = swift_getEnumCaseMultiPayload();
          uint64_t v107 = *a2;
          unint64_t v108 = a2[1];
          outlined copy of Data._Representation(*a2, v108);
          *a1 = v107;
          a1[1] = v108;
          if (v106 == 1)
          {
            a1[2] = a2[2];
            uint64_t v109 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                          + 24);
            uint64_t v110 = (char *)a1 + v109;
            uint64_t v111 = (uint64_t)a2 + v109;
            uint64_t v112 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v112 - 8) + 16))(v110, v111, v112);
          }
          else
          {
            a1[2] = a2[2];
            uint64_t v147 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
            uint64_t v148 = *(int *)(v147 + 24);
            v149 = (char *)a1 + v148;
            uint64_t v150 = (uint64_t)a2 + v148;
            uint64_t v276 = type metadata accessor for UnknownStorage();
            __dstd = *(void (**)(char *, uint64_t))(*(void *)(v276 - 8) + 16);
            __dstd(v149, v150);
            uint64_t v151 = *(int *)(v147 + 28);
            uint64_t v152 = (uint64_t *)((char *)a1 + v151);
            uint64_t v153 = (uint64_t *)((char *)a2 + v151);
            uint64_t v154 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
            uint64_t v155 = *(void *)(v154 - 8);
            if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v155 + 48))(v153, 1, v154))
            {
              uint64_t v156 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
              memcpy(v152, v153, *(void *)(*(void *)(v156 - 8) + 64));
            }
            else
            {
              uint64_t v253 = v155;
              uint64_t v262 = v154;
              uint64_t v186 = *v153;
              unint64_t v185 = v153[1];
              outlined copy of Data._Representation(*v153, v185);
              *uint64_t v152 = v186;
              v152[1] = v185;
              uint64_t v187 = v262;
              v152[2] = v153[2];
              ((void (*)(char *, char *, uint64_t))__dstd)((char *)v152 + *(int *)(v262 + 24), (char *)v153 + *(int *)(v262 + 24), v276);
              uint64_t v188 = *(int *)(v262 + 28);
              v256 = v152;
              v246 = (void *)((char *)v152 + v188);
              v189 = (uint64_t *)((char *)v153 + v188);
              uint64_t v190 = type metadata accessor for AttachmentLedger_EncryptionID(0);
              uint64_t v191 = *(void *)(v190 - 8);
              if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v191 + 48))(v189, 1, v190))
              {
                uint64_t v192 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
                memcpy(v246, v189, *(void *)(*(void *)(v192 - 8) + 64));
              }
              else
              {
                unint64_t v237 = v189[1];
                uint64_t v240 = *v189;
                outlined copy of Data._Representation(*v189, v237);
                void *v246 = v240;
                v246[1] = v237;
                ((void (*)(char *, char *, uint64_t))__dstd)((char *)v246 + *(int *)(v190 + 20), (char *)v189 + *(int *)(v190 + 20), v276);
                uint64_t v187 = v262;
                (*(void (**)(void *, void, uint64_t, uint64_t))(v191 + 56))(v246, 0, 1, v190);
              }
              (*(void (**)(void *, void, uint64_t, uint64_t))(v253 + 56))(v256, 0, 1, v187);
            }
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v42 + 56))(a1, 0, 1, v41);
        }
        uint64_t v213 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0)
                      + 20);
        v214 = (char *)a1 + v213;
        uint64_t v215 = (uint64_t)a2 + v213;
        uint64_t v216 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v216 - 8) + 16))(v214, v215, v216);
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        uint64_t v44 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
        uint64_t v45 = *(void *)(v44 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v45 + 48))(a2, 1, v44))
        {
          uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
          memcpy(a1, a2, *(void *)(*(void *)(v46 - 8) + 64));
        }
        else
        {
          int v113 = swift_getEnumCaseMultiPayload();
          uint64_t v114 = *a2;
          unint64_t v115 = a2[1];
          outlined copy of Data._Representation(*a2, v115);
          *a1 = v114;
          a1[1] = v115;
          if (v113 == 1)
          {
            uint64_t v116 = a2[2];
            *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
            a1[2] = v116;
            a1[4] = a2[4];
            uint64_t v117 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                          + 28);
            unint64_t v118 = (char *)a1 + v117;
            uint64_t v119 = (uint64_t)a2 + v117;
            uint64_t v120 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v120 - 8) + 16))(v118, v119, v120);
          }
          else
          {
            uint64_t v157 = a2[2];
            *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
            a1[2] = v157;
            uint64_t v158 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
            uint64_t v159 = *(int *)(v158 + 24);
            v160 = (char *)a1 + v159;
            uint64_t v161 = (uint64_t)a2 + v159;
            uint64_t v162 = type metadata accessor for UnknownStorage();
            __dste = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v162 - 8) + 16);
            __dste(v160, v161, v162);
            uint64_t v163 = *(int *)(v158 + 28);
            v277 = (uint64_t *)((char *)a1 + v163);
            v164 = (uint64_t *)((char *)a2 + v163);
            uint64_t v165 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
            uint64_t v166 = *(void *)(v165 - 8);
            if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v166 + 48))(v164, 1, v165))
            {
              uint64_t v167 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
              memcpy(v277, v164, *(void *)(*(void *)(v167 - 8) + 64));
            }
            else
            {
              void *v277 = *v164;
              unint64_t v254 = v164[2];
              uint64_t v257 = v164[1];
              outlined copy of Data._Representation(v257, v254);
              v277[1] = v257;
              v277[2] = v254;
              __dste((char *)v277 + *(int *)(v165 + 24), (uint64_t)v164 + *(int *)(v165 + 24), v162);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v166 + 56))(v277, 0, 1, v165);
            }
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v45 + 56))(a1, 0, 1, v44);
        }
        uint64_t v193 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0)
                      + 20);
        v194 = (char *)a1 + v193;
        uint64_t v195 = (uint64_t)a2 + v193;
        uint64_t v196 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v196 - 8) + 16))(v194, v195, v196);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        uint64_t v15 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
        uint64_t v16 = *(void *)(v15 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48))(a2, 1, v15))
        {
          uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
          memcpy(a1, a2, *(void *)(*(void *)(v17 - 8) + 64));
        }
        else
        {
          int v99 = swift_getEnumCaseMultiPayload();
          uint64_t v100 = *a2;
          unint64_t v101 = a2[1];
          outlined copy of Data._Representation(*a2, v101);
          *a1 = v100;
          a1[1] = v101;
          if (v99 == 1)
          {
            uint64_t v102 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0)
                          + 20);
            uint64_t v103 = (char *)a1 + v102;
            uint64_t v104 = (uint64_t)a2 + v102;
            uint64_t v105 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v105 - 8) + 16))(v103, v104, v105);
          }
          else
          {
            a1[2] = a2[2];
            uint64_t v134 = a2[3];
            *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
            a1[3] = v134;
            uint64_t v135 = a2[5];
            unint64_t v136 = a2[6];
            swift_bridgeObjectRetain();
            outlined copy of Data._Representation(v135, v136);
            a1[5] = v135;
            a1[6] = v136;
            uint64_t v137 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
            uint64_t v138 = *(int *)(v137 + 32);
            unint64_t v139 = (char *)a1 + v138;
            uint64_t v140 = (uint64_t)a2 + v138;
            uint64_t v275 = type metadata accessor for UnknownStorage();
            __dstc = *(void (**)(char *, uint64_t))(*(void *)(v275 - 8) + 16);
            __dstc(v139, v140);
            uint64_t v141 = *(int *)(v137 + 36);
            uint64_t v142 = (uint64_t *)((char *)a1 + v141);
            uint64_t v143 = (uint64_t *)((char *)a2 + v141);
            uint64_t v144 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
            uint64_t v145 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v144 - 8);
            if (v145[6](v143, 1, v144))
            {
              uint64_t v146 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
              memcpy(v142, v143, *(void *)(*(void *)(v146 - 8) + 64));
            }
            else
            {
              v245 = v145;
              uint64_t v252 = v16;
              void *v142 = *v143;
              v142[1] = v143[1];
              v142[2] = v143[2];
              v142[3] = v143[3];
              uint64_t v261 = v144;
              uint64_t v175 = v143[4];
              unint64_t v174 = v143[5];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              outlined copy of Data._Representation(v175, v174);
              v142[4] = v175;
              v142[5] = v174;
              uint64_t v176 = v143[6];
              unint64_t v177 = v143[7];
              outlined copy of Data._Representation(v176, v177);
              v142[6] = v176;
              v142[7] = v177;
              ((void (*)(char *, char *, uint64_t))__dstc)((char *)v142 + *(int *)(v261 + 32), (char *)v143 + *(int *)(v261 + 32), v275);
              uint64_t v178 = *(int *)(v261 + 36);
              v179 = (void *)((char *)v142 + v178);
              v180 = (void *)((char *)v143 + v178);
              uint64_t v181 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
              uint64_t v182 = *(void *)(v181 - 8);
              uint64_t v255 = v181;
              v235 = *(unsigned int (**)(void *, uint64_t))(v182 + 48);
              uint64_t v232 = v182;
              if (v235(v180, 1))
              {
                uint64_t v183 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                memcpy(v179, v180, *(void *)(*(void *)(v183 - 8) + 64));
                uint64_t v184 = v261;
              }
              else
              {
                void *v179 = *v180;
                unint64_t v225 = v180[2];
                uint64_t v227 = v180[1];
                outlined copy of Data._Representation(v227, v225);
                v179[1] = v227;
                v179[2] = v225;
                v207 = v179;
                v230 = v179;
                uint64_t v184 = v261;
                ((void (*)(char *, char *, uint64_t))__dstc)((char *)v207 + *(int *)(v255 + 24), (char *)v180 + *(int *)(v255 + 24), v275);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v182 + 56))(v230, 0, 1, v255);
              }
              uint64_t v208 = *(int *)(v184 + 40);
              v209 = (void *)((char *)v142 + v208);
              v210 = (void *)((char *)v143 + v208);
              if (((unsigned int (*)(void *, uint64_t, uint64_t))v235)(v210, 1, v255))
              {
                uint64_t v211 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                memcpy(v209, v210, *(void *)(*(void *)(v211 - 8) + 64));
                uint64_t v212 = v261;
              }
              else
              {
                void *v209 = *v210;
                uint64_t v217 = v210[1];
                unint64_t v218 = v210[2];
                outlined copy of Data._Representation(v217, v218);
                v209[1] = v217;
                v209[2] = v218;
                uint64_t v212 = v261;
                ((void (*)(char *, char *, uint64_t))__dstc)((char *)v209 + *(int *)(v255 + 24), (char *)v210 + *(int *)(v255 + 24), v275);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v232 + 56))(v209, 0, 1, v255);
              }
              (*((void (**)(void *, void, uint64_t, uint64_t))v245 + 7))(v142, 0, 1, v212);
              uint64_t v16 = v252;
            }
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v16 + 56))(a1, 0, 1, v15);
        }
        uint64_t v219 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0) + 20);
        v220 = (char *)a1 + v219;
        uint64_t v221 = (uint64_t)a2 + v219;
        uint64_t v222 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v222 - 8) + 16))(v220, v221, v222);
        swift_storeEnumTagMultiPayload();
        break;
    }
  }
LABEL_76:
  *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  uint64_t v202 = *(int *)(a3 + 24);
  v203 = (char *)a1 + v202;
  uint64_t v204 = (uint64_t)a2 + v202;
  uint64_t v205 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v205 - 8) + 24))(v203, v204, v205);
  return a1;
}

_OWORD *initializeWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *a1 = *a2;
        uint64_t v12 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0);
        break;
      case 2u:
        uint64_t v13 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
        uint64_t v14 = *(void *)(v13 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v14 + 48))(a2, 1, v13))
        {
          uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
          memcpy(a1, a2, *(void *)(*(void *)(v15 - 8) + 64));
        }
        else
        {
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          *a1 = *a2;
          if (EnumCaseMultiPayload == 1)
          {
            *((void *)a1 + 2) = *((void *)a2 + 2);
            uint64_t v25 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                         + 24);
            uint64_t v26 = (char *)a1 + v25;
            int v27 = (char *)a2 + v25;
            uint64_t v28 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v26, v27, v28);
          }
          else
          {
            uint64_t v107 = v14;
            *((void *)a1 + 2) = *((void *)a2 + 2);
            uint64_t v45 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
            uint64_t v46 = *(int *)(v45 + 24);
            unint64_t v47 = (char *)a1 + v46;
            uint64_t v48 = (char *)a2 + v46;
            uint64_t v49 = type metadata accessor for UnknownStorage();
            unint64_t v101 = *(void (**)(char *, char *))(*(void *)(v49 - 8) + 32);
            uint64_t v104 = v49;
            v101(v47, v48);
            uint64_t v50 = *(int *)(v45 + 28);
            __dsta = (void *)((char *)a1 + v50);
            uint64_t v51 = (void *)((char *)a2 + v50);
            uint64_t v52 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
            uint64_t v53 = *(void *)(v52 - 8);
            if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
            {
              uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
              memcpy(__dsta, v51, *(void *)(*(void *)(v54 - 8) + 64));
              uint64_t v14 = v107;
            }
            else
            {
              uint64_t v97 = v53;
              *(_OWORD *)__dsta = *(_OWORD *)v51;
              __dsta[2] = v51[2];
              ((void (*)(char *, char *, uint64_t))v101)((char *)__dsta + *(int *)(v52 + 24), (char *)v51 + *(int *)(v52 + 24), v104);
              uint64_t v98 = v52;
              uint64_t v72 = *(int *)(v52 + 28);
              uint64_t v73 = (_OWORD *)((char *)__dsta + v72);
              uint64_t v74 = (_OWORD *)((char *)v51 + v72);
              uint64_t v75 = type metadata accessor for AttachmentLedger_EncryptionID(0);
              uint64_t v95 = *(void *)(v75 - 8);
              if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v95 + 48))(v74, 1, v75))
              {
                uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
                memcpy(v73, v74, *(void *)(*(void *)(v76 - 8) + 64));
              }
              else
              {
                *uint64_t v73 = *v74;
                ((void (*)(char *, char *, uint64_t))v101)((char *)v73 + *(int *)(v75 + 20), (char *)v74 + *(int *)(v75 + 20), v104);
                (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v95 + 56))(v73, 0, 1, v75);
              }
              uint64_t v14 = v107;
              (*(void (**)(void *, void, uint64_t, uint64_t))(v97 + 56))(__dsta, 0, 1, v98);
            }
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v14 + 56))(a1, 0, 1, v13);
        }
        uint64_t v12 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0);
        break;
      case 3u:
        uint64_t v16 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
        uint64_t v17 = *(void *)(v16 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v17 + 48))(a2, 1, v16))
        {
          uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
          memcpy(a1, a2, *(void *)(*(void *)(v18 - 8) + 64));
        }
        else
        {
          int v29 = swift_getEnumCaseMultiPayload();
          *a1 = *a2;
          if (v29 == 1)
          {
            *((void *)a1 + 2) = *((void *)a2 + 2);
            *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
            *((void *)a1 + 4) = *((void *)a2 + 4);
            uint64_t v30 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                         + 28);
            uint64_t v31 = (char *)a1 + v30;
            uint64_t v32 = (char *)a2 + v30;
            uint64_t v33 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 32))(v31, v32, v33);
          }
          else
          {
            uint64_t v108 = v17;
            *((void *)a1 + 2) = *((void *)a2 + 2);
            *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
            uint64_t v55 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
            uint64_t v56 = *(int *)(v55 + 24);
            unint64_t v57 = (char *)a1 + v56;
            uint64_t v58 = (char *)a2 + v56;
            uint64_t v59 = type metadata accessor for UnknownStorage();
            uint64_t v102 = *(void (**)(char *, char *))(*(void *)(v59 - 8) + 32);
            uint64_t v105 = v59;
            v102(v57, v58);
            uint64_t v60 = *(int *)(v55 + 28);
            __dstb = (void *)((char *)a1 + v60);
            uint64_t v61 = (void *)((char *)a2 + v60);
            uint64_t v62 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
            uint64_t v63 = *(void *)(v62 - 8);
            if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62))
            {
              uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
              memcpy(__dstb, v61, *(void *)(*(void *)(v64 - 8) + 64));
            }
            else
            {
              void *__dstb = *v61;
              *(_OWORD *)(__dstb + 1) = *(_OWORD *)(v61 + 1);
              ((void (*)(char *, char *, uint64_t))v102)((char *)__dstb + *(int *)(v62 + 24), (char *)v61 + *(int *)(v62 + 24), v105);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v63 + 56))(__dstb, 0, 1, v62);
            }
            uint64_t v17 = v108;
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v17 + 56))(a1, 0, 1, v16);
        }
        uint64_t v12 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
        break;
      default:
        uint64_t v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
        uint64_t v10 = *(void *)(v9 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48))(a2, 1, v9))
        {
          uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
          memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
        }
        else
        {
          int v19 = swift_getEnumCaseMultiPayload();
          *a1 = *a2;
          if (v19 == 1)
          {
            uint64_t v20 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0)
                         + 20);
            uint64_t v21 = (char *)a1 + v20;
            uint64_t v22 = (char *)a2 + v20;
            uint64_t v23 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
          }
          else
          {
            uint64_t v103 = v10;
            uint64_t v34 = *((void *)a2 + 3);
            *((void *)a1 + 2) = *((void *)a2 + 2);
            *((void *)a1 + 3) = v34;
            *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
            *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
            uint64_t v35 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
            uint64_t v36 = *(int *)(v35 + 32);
            uint64_t v37 = (char *)a1 + v36;
            int v38 = (char *)a2 + v36;
            uint64_t v39 = type metadata accessor for UnknownStorage();
            int v99 = *(void (**)(char *, char *))(*(void *)(v39 - 8) + 32);
            uint64_t v100 = v39;
            v99(v37, v38);
            uint64_t v40 = *(int *)(v35 + 36);
            __dst = (_OWORD *)((char *)a1 + v40);
            uint64_t v41 = (_OWORD *)((char *)a2 + v40);
            uint64_t v42 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
            uint64_t v43 = *(void *)(v42 - 8);
            int v106 = v41;
            if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
            {
              uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
              memcpy(__dst, v41, *(void *)(*(void *)(v44 - 8) + 64));
            }
            else
            {
              uint64_t v94 = v43;
              long long v65 = v41[1];
              _OWORD *__dst = *v41;
              __dst[1] = v65;
              long long v66 = v41[3];
              __dst[2] = v41[2];
              __dst[3] = v66;
              ((void (*)(char *, char *, uint64_t))v99)((char *)__dst + *(int *)(v42 + 32), (char *)v41 + *(int *)(v42 + 32), v100);
              uint64_t v96 = v42;
              uint64_t v67 = *(int *)(v42 + 36);
              uint64_t v92 = (void *)((char *)__dst + v67);
              uint64_t v68 = (void *)((char *)v41 + v67);
              uint64_t v69 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
              uint64_t v70 = *(void *)(v69 - 8);
              uint64_t v93 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v70 + 48);
              uint64_t v91 = v70;
              if (v93(v68, 1, v69))
              {
                uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                memcpy(v92, v68, *(void *)(*(void *)(v71 - 8) + 64));
              }
              else
              {
                *uint64_t v92 = *v68;
                *(_OWORD *)(v92 + 1) = *(_OWORD *)(v68 + 1);
                ((void (*)(char *, char *, uint64_t))v99)((char *)v92 + *(int *)(v69 + 24), (char *)v68 + *(int *)(v69 + 24), v100);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v70 + 56))(v92, 0, 1, v69);
              }
              uint64_t v77 = v69;
              uint64_t v78 = *(int *)(v96 + 40);
              uint64_t v79 = (void *)((char *)__dst + v78);
              uint64_t v80 = (void *)((char *)v106 + v78);
              if (v93((_OWORD *)((char *)v106 + v78), 1, v77))
              {
                uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                memcpy(v79, v80, *(void *)(*(void *)(v81 - 8) + 64));
              }
              else
              {
                *uint64_t v79 = *v80;
                *(_OWORD *)(v79 + 1) = *(_OWORD *)(v80 + 1);
                ((void (*)(char *, char *, uint64_t))v99)((char *)v79 + *(int *)(v77 + 24), (char *)v80 + *(int *)(v77 + 24), v100);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v91 + 56))(v79, 0, 1, v77);
              }
              (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v94 + 56))(__dst, 0, 1, v96);
            }
            uint64_t v10 = v103;
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
        }
        uint64_t v12 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
        break;
    }
    uint64_t v82 = *(int *)(v12 + 20);
    uint64_t v83 = (char *)a1 + v82;
    uint64_t v84 = (char *)a2 + v82;
    uint64_t v85 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v85 - 8) + 32))(v83, v84, v85);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v86 = *(int *)(a3 + 24);
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  uint64_t v87 = (char *)a1 + v86;
  uint64_t v88 = (char *)a2 + v86;
  uint64_t v89 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v89 - 8) + 32))(v87, v88, v89);
  return a1;
}

_OWORD *assignWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          *a1 = *a2;
          uint64_t v18 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0);
          break;
        case 2u:
          uint64_t v19 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
          uint64_t v20 = *(void *)(v19 - 8);
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v20 + 48))(a2, 1, v19))
          {
            uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
            memcpy(a1, a2, *(void *)(*(void *)(v21 - 8) + 64));
          }
          else
          {
            int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
            *a1 = *a2;
            if (EnumCaseMultiPayload == 1)
            {
              *((void *)a1 + 2) = *((void *)a2 + 2);
              uint64_t v41 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                           + 24);
              uint64_t v42 = (char *)a1 + v41;
              uint64_t v43 = (char *)a2 + v41;
              uint64_t v44 = type metadata accessor for UnknownStorage();
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v42, v43, v44);
            }
            else
            {
              uint64_t v207 = v20;
              *((void *)a1 + 2) = *((void *)a2 + 2);
              uint64_t v61 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
              uint64_t v62 = *(int *)(v61 + 24);
              uint64_t v63 = (char *)a1 + v62;
              uint64_t v64 = (char *)a2 + v62;
              uint64_t v65 = type metadata accessor for UnknownStorage();
              v199 = *(void (**)(char *, char *))(*(void *)(v65 - 8) + 32);
              uint64_t v204 = v65;
              v199(v63, v64);
              uint64_t v66 = *(int *)(v61 + 28);
              __dsta = (void *)((char *)a1 + v66);
              uint64_t v67 = (void *)((char *)a2 + v66);
              uint64_t v68 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
              uint64_t v69 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v68 - 8);
              if (v69[6](v67, 1, v68))
              {
                uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
                memcpy(__dsta, v67, *(void *)(*(void *)(v70 - 8) + 64));
                uint64_t v20 = v207;
              }
              else
              {
                uint64_t v193 = v69;
                *(_OWORD *)__dsta = *(_OWORD *)v67;
                __dsta[2] = v67[2];
                ((void (*)(char *, char *, uint64_t))v199)((char *)__dsta + *(int *)(v68 + 24), (char *)v67 + *(int *)(v68 + 24), v204);
                uint64_t v191 = v68;
                uint64_t v103 = *(int *)(v68 + 28);
                uint64_t v104 = (_OWORD *)((char *)__dsta + v103);
                uint64_t v105 = (_OWORD *)((char *)v67 + v103);
                uint64_t v106 = type metadata accessor for AttachmentLedger_EncryptionID(0);
                uint64_t v188 = *(void **)(v106 - 8);
                if ((*((unsigned int (**)(_OWORD *, uint64_t, uint64_t))v188 + 6))(v105, 1, v106))
                {
                  uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
                  memcpy(v104, v105, *(void *)(*(void *)(v107 - 8) + 64));
                }
                else
                {
                  *uint64_t v104 = *v105;
                  ((void (*)(char *, char *, uint64_t))v199)((char *)v104 + *(int *)(v106 + 20), (char *)v105 + *(int *)(v106 + 20), v204);
                  (*((void (**)(_OWORD *, void, uint64_t, uint64_t))v188 + 7))(v104, 0, 1, v106);
                }
                uint64_t v20 = v207;
                (*((void (**)(void *, void, uint64_t, uint64_t))v193 + 7))(__dsta, 0, 1, v191);
              }
            }
            swift_storeEnumTagMultiPayload();
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v20 + 56))(a1, 0, 1, v19);
          }
          uint64_t v18 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0);
          break;
        case 3u:
          uint64_t v22 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
          uint64_t v23 = *(void *)(v22 - 8);
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v23 + 48))(a2, 1, v22))
          {
            uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
            memcpy(a1, a2, *(void *)(*(void *)(v24 - 8) + 64));
          }
          else
          {
            int v45 = swift_getEnumCaseMultiPayload();
            *a1 = *a2;
            if (v45 == 1)
            {
              *((void *)a1 + 2) = *((void *)a2 + 2);
              *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
              *((void *)a1 + 4) = *((void *)a2 + 4);
              uint64_t v46 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                           + 28);
              unint64_t v47 = (char *)a1 + v46;
              uint64_t v48 = (char *)a2 + v46;
              uint64_t v49 = type metadata accessor for UnknownStorage();
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 32))(v47, v48, v49);
            }
            else
            {
              uint64_t v208 = v23;
              *((void *)a1 + 2) = *((void *)a2 + 2);
              *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
              uint64_t v71 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
              uint64_t v72 = *(int *)(v71 + 24);
              uint64_t v73 = (char *)a1 + v72;
              uint64_t v74 = (char *)a2 + v72;
              uint64_t v75 = type metadata accessor for UnknownStorage();
              uint64_t v200 = *(void (**)(char *, char *))(*(void *)(v75 - 8) + 32);
              uint64_t v205 = v75;
              v200(v73, v74);
              uint64_t v76 = *(int *)(v71 + 28);
              __dstb = (void *)((char *)a1 + v76);
              uint64_t v77 = (void *)((char *)a2 + v76);
              uint64_t v78 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
              uint64_t v79 = *(void *)(v78 - 8);
              if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78))
              {
                uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                memcpy(__dstb, v77, *(void *)(*(void *)(v80 - 8) + 64));
              }
              else
              {
                void *__dstb = *v77;
                *(_OWORD *)(__dstb + 1) = *(_OWORD *)(v77 + 1);
                ((void (*)(char *, char *, uint64_t))v200)((char *)__dstb + *(int *)(v78 + 24), (char *)v77 + *(int *)(v78 + 24), v205);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v79 + 56))(__dstb, 0, 1, v78);
              }
              uint64_t v23 = v208;
            }
            swift_storeEnumTagMultiPayload();
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v23 + 56))(a1, 0, 1, v22);
          }
          uint64_t v18 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
          break;
        default:
          uint64_t v11 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
          uint64_t v12 = *(void *)(v11 - 8);
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v12 + 48))(a2, 1, v11))
          {
            uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
            memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64));
          }
          else
          {
            int v25 = swift_getEnumCaseMultiPayload();
            *a1 = *a2;
            if (v25 == 1)
            {
              uint64_t v26 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0)
                           + 20);
              int v27 = (char *)a1 + v26;
              uint64_t v28 = (char *)a2 + v26;
              uint64_t v29 = type metadata accessor for UnknownStorage();
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32))(v27, v28, v29);
            }
            else
            {
              uint64_t v203 = v12;
              uint64_t v50 = *((void *)a2 + 3);
              *((void *)a1 + 2) = *((void *)a2 + 2);
              *((void *)a1 + 3) = v50;
              *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
              *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
              uint64_t v51 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
              uint64_t v52 = *(int *)(v51 + 32);
              uint64_t v53 = (char *)a1 + v52;
              uint64_t v54 = (char *)a2 + v52;
              uint64_t v55 = type metadata accessor for UnknownStorage();
              uint64_t v196 = *(void (**)(char *, char *))(*(void *)(v55 - 8) + 32);
              uint64_t v198 = v55;
              v196(v53, v54);
              uint64_t v56 = *(int *)(v51 + 36);
              __dst = (_OWORD *)((char *)a1 + v56);
              unint64_t v57 = (_OWORD *)((char *)a2 + v56);
              uint64_t v58 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
              uint64_t v59 = *(unsigned int (***)(_OWORD *, uint64_t, uint64_t))(v58 - 8);
              v206 = v57;
              if (v59[6](v57, 1, v58))
              {
                uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
                memcpy(__dst, v57, *(void *)(*(void *)(v60 - 8) + 64));
              }
              else
              {
                __src = v59;
                long long v96 = v57[1];
                _OWORD *__dst = *v57;
                __dst[1] = v96;
                long long v97 = v57[3];
                __dst[2] = v57[2];
                __dst[3] = v97;
                ((void (*)(char *, char *, uint64_t))v196)((char *)__dst + *(int *)(v58 + 32), (char *)v57 + *(int *)(v58 + 32), v198);
                uint64_t v98 = *(int *)(v58 + 36);
                uint64_t v187 = (void *)((char *)__dst + v98);
                uint64_t v190 = v58;
                int v99 = (void *)((char *)v57 + v98);
                uint64_t v100 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
                uint64_t v101 = *(void *)(v100 - 8);
                uint64_t v183 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v101 + 48);
                uint64_t v182 = v101;
                if (v183(v99, 1, v100))
                {
                  uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                  memcpy(v187, v99, *(void *)(*(void *)(v102 - 8) + 64));
                }
                else
                {
                  *uint64_t v187 = *v99;
                  *(_OWORD *)(v187 + 1) = *(_OWORD *)(v99 + 1);
                  ((void (*)(char *, char *, uint64_t))v196)((char *)v187 + *(int *)(v100 + 24), (char *)v99 + *(int *)(v100 + 24), v198);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v101 + 56))(v187, 0, 1, v100);
                }
                uint64_t v141 = v100;
                uint64_t v142 = *(int *)(v190 + 40);
                uint64_t v143 = (void *)((char *)__dst + v142);
                uint64_t v144 = (void *)((char *)v206 + v142);
                if (v183((_OWORD *)((char *)v206 + v142), 1, v141))
                {
                  uint64_t v145 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                  memcpy(v143, v144, *(void *)(*(void *)(v145 - 8) + 64));
                }
                else
                {
                  void *v143 = *v144;
                  *(_OWORD *)(v143 + 1) = *(_OWORD *)(v144 + 1);
                  ((void (*)(char *, char *, uint64_t))v196)((char *)v143 + *(int *)(v141 + 24), (char *)v144 + *(int *)(v141 + 24), v198);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v182 + 56))(v143, 0, 1, v141);
                }
                (*((void (**)(_OWORD *, void, uint64_t, uint64_t))__src + 7))(__dst, 0, 1, v190);
              }
              uint64_t v12 = v203;
            }
            swift_storeEnumTagMultiPayload();
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
          }
          uint64_t v18 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
          break;
      }
      uint64_t v161 = *(int *)(v18 + 20);
      uint64_t v162 = (char *)a1 + v161;
      uint64_t v163 = (char *)a2 + v161;
      uint64_t v164 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v164 - 8) + 32))(v162, v163, v164);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_75;
    }
LABEL_8:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    memcpy(a1, a2, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_75;
  }
  if (v10)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *a1 = *a2;
        uint64_t v30 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0) + 20);
        uint64_t v31 = (char *)a1 + v30;
        uint64_t v32 = (char *)a2 + v30;
        uint64_t v33 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 32))(v31, v32, v33);
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        uint64_t v34 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
        uint64_t v35 = *(void *)(v34 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v35 + 48))(a2, 1, v34))
        {
          uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
          memcpy(a1, a2, *(void *)(*(void *)(v36 - 8) + 64));
        }
        else
        {
          int v86 = swift_getEnumCaseMultiPayload();
          *a1 = *a2;
          if (v86 == 1)
          {
            *((void *)a1 + 2) = *((void *)a2 + 2);
            uint64_t v87 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                         + 24);
            uint64_t v88 = (char *)a1 + v87;
            uint64_t v89 = (char *)a2 + v87;
            uint64_t v90 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v90 - 8) + 32))(v88, v89, v90);
          }
          else
          {
            *((void *)a1 + 2) = *((void *)a2 + 2);
            uint64_t v120 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
            uint64_t v121 = *(int *)(v120 + 24);
            uint64_t v122 = (char *)a1 + v121;
            uint64_t v123 = (char *)a2 + v121;
            uint64_t v124 = type metadata accessor for UnknownStorage();
            v210 = *(void (**)(char *, char *))(*(void *)(v124 - 8) + 32);
            __dstd = (void *)v124;
            v210(v122, v123);
            uint64_t v125 = *(int *)(v120 + 28);
            uint64_t v126 = (void *)((char *)a1 + v125);
            uint64_t v127 = (void *)((char *)a2 + v125);
            uint64_t v128 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
            uint64_t v129 = *(void *)(v128 - 8);
            if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v129 + 48))(v127, 1, v128))
            {
              uint64_t v130 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
              memcpy(v126, v127, *(void *)(*(void *)(v130 - 8) + 64));
            }
            else
            {
              *(_OWORD *)uint64_t v126 = *(_OWORD *)v127;
              v126[2] = v127[2];
              ((void (*)(char *, char *, void *))v210)((char *)v126 + *(int *)(v128 + 24), (char *)v127 + *(int *)(v128 + 24), __dstd);
              uint64_t v153 = *(int *)(v128 + 28);
              uint64_t v202 = v126;
              uint64_t v195 = (_OWORD *)((char *)v126 + v153);
              uint64_t v154 = (_OWORD *)((char *)v127 + v153);
              uint64_t v155 = type metadata accessor for AttachmentLedger_EncryptionID(0);
              uint64_t v192 = *(void *)(v155 - 8);
              if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v192 + 48))(v154, 1, v155))
              {
                uint64_t v156 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
                memcpy(v195, v154, *(void *)(*(void *)(v156 - 8) + 64));
              }
              else
              {
                *uint64_t v195 = *v154;
                ((void (*)(char *, char *, void *))v210)((char *)v195 + *(int *)(v155 + 20), (char *)v154 + *(int *)(v155 + 20), __dstd);
                (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v192 + 56))(v195, 0, 1, v155);
              }
              (*(void (**)(void *, void, uint64_t, uint64_t))(v129 + 56))(v202, 0, 1, v128);
            }
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v35 + 56))(a1, 0, 1, v34);
        }
        uint64_t v174 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0)
                      + 20);
        uint64_t v175 = (char *)a1 + v174;
        uint64_t v176 = (char *)a2 + v174;
        uint64_t v177 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v177 - 8) + 32))(v175, v176, v177);
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        uint64_t v37 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
        uint64_t v38 = *(void *)(v37 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v38 + 48))(a2, 1, v37))
        {
          uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
          memcpy(a1, a2, *(void *)(*(void *)(v39 - 8) + 64));
        }
        else
        {
          int v91 = swift_getEnumCaseMultiPayload();
          *a1 = *a2;
          if (v91 == 1)
          {
            *((void *)a1 + 2) = *((void *)a2 + 2);
            *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
            *((void *)a1 + 4) = *((void *)a2 + 4);
            uint64_t v92 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                         + 28);
            uint64_t v93 = (char *)a1 + v92;
            uint64_t v94 = (char *)a2 + v92;
            uint64_t v95 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v95 - 8) + 32))(v93, v94, v95);
          }
          else
          {
            *((void *)a1 + 2) = *((void *)a2 + 2);
            *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
            uint64_t v131 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
            uint64_t v132 = *(int *)(v131 + 24);
            uint64_t v133 = (char *)a1 + v132;
            uint64_t v134 = (char *)a2 + v132;
            uint64_t v135 = type metadata accessor for UnknownStorage();
            uint64_t v211 = *(void (**)(char *, char *, uint64_t))(*(void *)(v135 - 8) + 32);
            v211(v133, v134, v135);
            uint64_t v136 = *(int *)(v131 + 28);
            __dste = (void *)((char *)a1 + v136);
            uint64_t v137 = (void *)((char *)a2 + v136);
            uint64_t v138 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
            uint64_t v139 = *(void *)(v138 - 8);
            if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v139 + 48))(v137, 1, v138))
            {
              uint64_t v140 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
              memcpy(__dste, v137, *(void *)(*(void *)(v140 - 8) + 64));
            }
            else
            {
              void *__dste = *v137;
              *(_OWORD *)(__dste + 1) = *(_OWORD *)(v137 + 1);
              v211((char *)__dste + *(int *)(v138 + 24), (char *)v137 + *(int *)(v138 + 24), v135);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v139 + 56))(__dste, 0, 1, v138);
            }
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v38 + 56))(a1, 0, 1, v37);
        }
        uint64_t v157 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0)
                      + 20);
        uint64_t v158 = (char *)a1 + v157;
        uint64_t v159 = (char *)a2 + v157;
        uint64_t v160 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v160 - 8) + 32))(v158, v159, v160);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        uint64_t v15 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
        uint64_t v16 = *(void *)(v15 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(a2, 1, v15))
        {
          uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
          memcpy(a1, a2, *(void *)(*(void *)(v17 - 8) + 64));
        }
        else
        {
          int v81 = swift_getEnumCaseMultiPayload();
          *a1 = *a2;
          if (v81 == 1)
          {
            uint64_t v82 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0)
                         + 20);
            uint64_t v83 = (char *)a1 + v82;
            uint64_t v84 = (char *)a2 + v82;
            uint64_t v85 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v85 - 8) + 32))(v83, v84, v85);
          }
          else
          {
            uint64_t v108 = *((void *)a2 + 3);
            *((void *)a1 + 2) = *((void *)a2 + 2);
            *((void *)a1 + 3) = v108;
            *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
            *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
            uint64_t v109 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
            uint64_t v110 = *(int *)(v109 + 32);
            uint64_t v111 = (char *)a1 + v110;
            uint64_t v112 = (char *)a2 + v110;
            uint64_t v113 = type metadata accessor for UnknownStorage();
            v209 = *(void (**)(char *, char *))(*(void *)(v113 - 8) + 32);
            __dstc = (void *)v113;
            v209(v111, v112);
            uint64_t v114 = *(int *)(v109 + 36);
            unint64_t v115 = (_OWORD *)((char *)a1 + v114);
            uint64_t v116 = (_OWORD *)((char *)a2 + v114);
            uint64_t v117 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
            unint64_t v118 = (unsigned int (**)(_OWORD *, uint64_t, int *))*((void *)v117 - 1);
            if (v118[6](v116, 1, v117))
            {
              uint64_t v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
              memcpy(v115, v116, *(void *)(*(void *)(v119 - 8) + 64));
            }
            else
            {
              v194 = v118;
              long long v146 = v116[1];
              *unint64_t v115 = *v116;
              v115[1] = v146;
              long long v147 = v116[3];
              v115[2] = v116[2];
              v115[3] = v147;
              ((void (*)(char *, char *, void *))v209)((char *)v115 + v117[8], (char *)v116 + v117[8], __dstc);
              uint64_t v148 = v117[9];
              unint64_t v185 = v115;
              unint64_t v197 = (void *)((char *)v115 + v148);
              v149 = (void *)((char *)v116 + v148);
              uint64_t v150 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
              uint64_t v151 = *(void *)(v150 - 8);
              v189 = *(unsigned int (**)(void *, uint64_t))(v151 + 48);
              uint64_t v201 = v150;
              uint64_t v184 = v151;
              if (v189(v149, 1))
              {
                uint64_t v152 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                memcpy(v197, v149, *(void *)(*(void *)(v152 - 8) + 64));
              }
              else
              {
                *unint64_t v197 = *v149;
                *(_OWORD *)(v197 + 1) = *(_OWORD *)(v149 + 1);
                ((void (*)(char *, char *, void *))v209)((char *)v197 + *(int *)(v201 + 24), (char *)v149 + *(int *)(v201 + 24), __dstc);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v151 + 56))(v197, 0, 1, v201);
              }
              uint64_t v170 = v117[10];
              v171 = (void *)((char *)v185 + v170);
              uint64_t v172 = (void *)((char *)v116 + v170);
              if (((unsigned int (*)(void *, uint64_t, uint64_t))v189)(v172, 1, v201))
              {
                uint64_t v173 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                memcpy(v171, v172, *(void *)(*(void *)(v173 - 8) + 64));
              }
              else
              {
                void *v171 = *v172;
                *(_OWORD *)(v171 + 1) = *(_OWORD *)(v172 + 1);
                ((void (*)(char *, char *, void *))v209)((char *)v171 + *(int *)(v201 + 24), (char *)v172 + *(int *)(v201 + 24), __dstc);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v184 + 56))(v171, 0, 1, v201);
              }
              (*((void (**)(_OWORD *, void, uint64_t, int *))v194 + 7))(v185, 0, 1, v117);
            }
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v16 + 56))(a1, 0, 1, v15);
        }
        uint64_t v178 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0) + 20);
        v179 = (char *)a1 + v178;
        v180 = (char *)a2 + v178;
        uint64_t v181 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v181 - 8) + 32))(v179, v180, v181);
        swift_storeEnumTagMultiPayload();
        break;
    }
  }
LABEL_75:
  uint64_t v165 = *(int *)(a3 + 24);
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  uint64_t v166 = (char *)a1 + v165;
  uint64_t v167 = (char *)a2 + v165;
  uint64_t v168 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v168 - 8) + 40))(v166, v167, v168);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0F570A0);
}

uint64_t sub_1B0F570A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 24);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0F571B0);
}

uint64_t sub_1B0F571B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for UnknownStorage();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 24);
    return v13(v15, a2, a2, v14);
  }
}

void type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate()
{
  type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData?(319, &lazy cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UnknownStorage();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v10 = *a2;
        unint64_t v11 = a2[1];
        outlined copy of Data._Representation(*a2, v11);
        *a1 = v10;
        a1[1] = v11;
        uint64_t v12 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0) + 20);
        uint64_t v13 = (char *)a1 + v12;
        uint64_t v14 = (uint64_t)a2 + v12;
        uint64_t v15 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
        break;
      case 2u:
        uint64_t v16 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
        uint64_t v17 = *(void *)(v16 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(a2, 1, v16))
        {
          uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
          memcpy(a1, a2, *(void *)(*(void *)(v18 - 8) + 64));
        }
        else
        {
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          uint64_t v30 = *a2;
          unint64_t v31 = a2[1];
          outlined copy of Data._Representation(*a2, v31);
          *a1 = v30;
          a1[1] = v31;
          if (EnumCaseMultiPayload == 1)
          {
            a1[2] = a2[2];
            uint64_t v32 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                         + 24);
            uint64_t v33 = (char *)a1 + v32;
            uint64_t v34 = (uint64_t)a2 + v32;
            uint64_t v35 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 16))(v33, v34, v35);
          }
          else
          {
            a1[2] = a2[2];
            uint64_t v57 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
            uint64_t v58 = *(int *)(v57 + 24);
            uint64_t v59 = (char *)a1 + v58;
            uint64_t v60 = (uint64_t)a2 + v58;
            uint64_t v61 = type metadata accessor for UnknownStorage();
            uint64_t v140 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v61 - 8) + 16);
            v140(v59, v60, v61);
            uint64_t v62 = *(int *)(v57 + 28);
            uint64_t v63 = (uint64_t *)((char *)a1 + v62);
            uint64_t v64 = (uint64_t *)((char *)a2 + v62);
            uint64_t v65 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
            uint64_t v66 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v65 - 8);
            if (v66[6](v64, 1, v65))
            {
              uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
              memcpy(v63, v64, *(void *)(*(void *)(v67 - 8) + 64));
            }
            else
            {
              __dsta = v66;
              uint64_t v137 = v65;
              uint64_t v90 = v61;
              uint64_t v91 = *v64;
              unint64_t v92 = v64[1];
              outlined copy of Data._Representation(*v64, v92);
              void *v63 = v91;
              v63[1] = v92;
              v63[2] = v64[2];
              uint64_t v130 = v90;
              uint64_t v93 = v90;
              uint64_t v94 = v137;
              v140((char *)v63 + *(int *)(v137 + 24), (uint64_t)v64 + *(int *)(v137 + 24), v93);
              uint64_t v95 = *(int *)(v137 + 28);
              uint64_t v134 = v63;
              long long v96 = (void *)((char *)v63 + v95);
              long long v97 = (uint64_t *)((char *)v64 + v95);
              uint64_t v98 = type metadata accessor for AttachmentLedger_EncryptionID(0);
              uint64_t v99 = *(void *)(v98 - 8);
              if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v99 + 48))(v97, 1, v98))
              {
                uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
                memcpy(v96, v97, *(void *)(*(void *)(v100 - 8) + 64));
              }
              else
              {
                unint64_t v128 = v97[1];
                uint64_t v111 = *v97;
                outlined copy of Data._Representation(*v97, v128);
                *long long v96 = v111;
                uint64_t v94 = v137;
                v96[1] = v128;
                v140((char *)v96 + *(int *)(v98 + 20), (uint64_t)v97 + *(int *)(v98 + 20), v130);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v99 + 56))(v96, 0, 1, v98);
              }
              (*((void (**)(void *, void, uint64_t, uint64_t))__dsta + 7))(v134, 0, 1, v94);
            }
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v17 + 56))(a1, 0, 1, v16);
        }
        uint64_t v112 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0)
                      + 20);
        uint64_t v113 = (char *)a1 + v112;
        uint64_t v114 = (uint64_t)a2 + v112;
        uint64_t v115 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v115 - 8) + 16))(v113, v114, v115);
        break;
      case 3u:
        uint64_t v19 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
        uint64_t v20 = *(void *)(v19 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v20 + 48))(a2, 1, v19))
        {
          uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
          memcpy(a1, a2, *(void *)(*(void *)(v21 - 8) + 64));
        }
        else
        {
          int v36 = swift_getEnumCaseMultiPayload();
          uint64_t v37 = *a2;
          unint64_t v38 = a2[1];
          outlined copy of Data._Representation(*a2, v38);
          *a1 = v37;
          a1[1] = v38;
          if (v36 == 1)
          {
            a1[2] = a2[2];
            *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
            a1[4] = a2[4];
            uint64_t v39 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                         + 28);
            uint64_t v40 = (char *)a1 + v39;
            uint64_t v41 = (uint64_t)a2 + v39;
            uint64_t v42 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v42 - 8) + 16))(v40, v41, v42);
          }
          else
          {
            a1[2] = a2[2];
            *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
            uint64_t v68 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
            uint64_t v69 = *(int *)(v68 + 24);
            uint64_t v70 = (char *)a1 + v69;
            uint64_t v71 = (uint64_t)a2 + v69;
            uint64_t v72 = type metadata accessor for UnknownStorage();
            uint64_t v141 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v72 - 8) + 16);
            v141(v70, v71, v72);
            uint64_t v73 = *(int *)(v68 + 28);
            uint64_t v74 = (uint64_t *)((char *)a1 + v73);
            uint64_t v75 = (uint64_t *)((char *)a2 + v73);
            uint64_t v76 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
            uint64_t v77 = *(void *)(v76 - 8);
            if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76))
            {
              uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
              memcpy(v74, v75, *(void *)(*(void *)(v78 - 8) + 64));
            }
            else
            {
              uint64_t v101 = v75[1];
              *uint64_t v74 = *v75;
              unint64_t v135 = v75[2];
              uint64_t v138 = v101;
              outlined copy of Data._Representation(v101, v135);
              v74[1] = v138;
              v74[2] = v135;
              v141((char *)v74 + *(int *)(v76 + 24), (uint64_t)v75 + *(int *)(v76 + 24), v72);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v77 + 56))(v74, 0, 1, v76);
            }
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v20 + 56))(a1, 0, 1, v19);
        }
        uint64_t v102 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0)
                      + 20);
        uint64_t v103 = (char *)a1 + v102;
        uint64_t v104 = (uint64_t)a2 + v102;
        uint64_t v105 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v105 - 8) + 16))(v103, v104, v105);
        break;
      default:
        uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
        uint64_t v7 = *(void *)(v6 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
        {
          uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
          memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
        }
        else
        {
          int v22 = swift_getEnumCaseMultiPayload();
          uint64_t v23 = *a2;
          unint64_t v24 = a2[1];
          outlined copy of Data._Representation(*a2, v24);
          *a1 = v23;
          a1[1] = v24;
          if (v22 == 1)
          {
            uint64_t v25 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0)
                         + 20);
            uint64_t v26 = (char *)a1 + v25;
            uint64_t v27 = (uint64_t)a2 + v25;
            uint64_t v28 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
          }
          else
          {
            uint64_t v43 = a2[3];
            a1[2] = a2[2];
            a1[3] = v43;
            *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
            uint64_t v44 = a2[5];
            unint64_t v45 = a2[6];
            swift_bridgeObjectRetain();
            outlined copy of Data._Representation(v44, v45);
            a1[5] = v44;
            a1[6] = v45;
            uint64_t v46 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
            uint64_t v47 = *(int *)(v46 + 32);
            uint64_t v48 = (char *)a1 + v47;
            uint64_t v49 = (uint64_t)a2 + v47;
            uint64_t v50 = type metadata accessor for UnknownStorage();
            uint64_t v139 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v50 - 8) + 16);
            v139(v48, v49, v50);
            uint64_t v51 = *(int *)(v46 + 36);
            uint64_t v52 = (uint64_t *)((char *)a1 + v51);
            uint64_t v53 = (uint64_t *)((char *)a2 + v51);
            uint64_t v54 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
            uint64_t v55 = *(void *)(v54 - 8);
            if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
            {
              uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
              memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
            }
            else
            {
              uint64_t v127 = v55;
              uint64_t v129 = v7;
              uint64_t v79 = v53[1];
              *uint64_t v52 = *v53;
              v52[1] = v79;
              uint64_t v80 = v53[3];
              v52[2] = v53[2];
              v52[3] = v80;
              uint64_t v133 = v50;
              uint64_t v82 = v53[4];
              unint64_t v81 = v53[5];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              outlined copy of Data._Representation(v82, v81);
              v52[4] = v82;
              v52[5] = v81;
              uint64_t v83 = v53[6];
              unint64_t v84 = v53[7];
              outlined copy of Data._Representation(v83, v84);
              v52[6] = v83;
              v52[7] = v84;
              v139((char *)v52 + *(int *)(v54 + 32), (uint64_t)v53 + *(int *)(v54 + 32), v133);
              uint64_t v136 = v54;
              uint64_t v85 = *(int *)(v54 + 36);
              __dst = (void *)((char *)v52 + v85);
              int v86 = (void *)((char *)v53 + v85);
              uint64_t v87 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
              uint64_t v88 = *(void *)(v87 - 8);
              uint64_t v126 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v88 + 48);
              uint64_t v125 = v88;
              if (v126(v86, 1, v87))
              {
                uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                memcpy(__dst, v86, *(void *)(*(void *)(v89 - 8) + 64));
              }
              else
              {
                uint64_t v106 = v86[1];
                void *__dst = *v86;
                unint64_t v123 = v86[2];
                uint64_t v124 = v106;
                outlined copy of Data._Representation(v106, v123);
                __dst[1] = v124;
                __dst[2] = v123;
                v139((char *)__dst + *(int *)(v87 + 24), (uint64_t)v86 + *(int *)(v87 + 24), v133);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v88 + 56))(__dst, 0, 1, v87);
              }
              uint64_t v107 = *(int *)(v136 + 40);
              uint64_t v108 = (void *)((char *)v52 + v107);
              uint64_t v109 = (void *)((char *)v53 + v107);
              if (v126(v109, 1, v87))
              {
                uint64_t v110 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                memcpy(v108, v109, *(void *)(*(void *)(v110 - 8) + 64));
              }
              else
              {
                uint64_t v116 = v109[1];
                *uint64_t v108 = *v109;
                unint64_t v117 = v109[2];
                outlined copy of Data._Representation(v116, v117);
                v108[1] = v116;
                v108[2] = v117;
                v139((char *)v108 + *(int *)(v87 + 24), (uint64_t)v109 + *(int *)(v87 + 24), v133);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v125 + 56))(v108, 0, 1, v87);
              }
              uint64_t v7 = v129;
              (*(void (**)(void *, void, uint64_t, uint64_t))(v127 + 56))(v52, 0, 1, v136);
            }
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
        }
        uint64_t v118 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0) + 20);
        uint64_t v119 = (char *)a1 + v118;
        uint64_t v120 = (uint64_t)a2 + v118;
        uint64_t v121 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v121 - 8) + 16))(v119, v120, v121);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      uint64_t v3 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(a1, 1, v3))
      {
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
        if (EnumCaseMultiPayload == 1)
        {
          uint64_t v5 = a1
             + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0)
                      + 20);
          uint64_t v6 = type metadata accessor for UnknownStorage();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
        }
        else
        {
          swift_bridgeObjectRelease();
          outlined consume of Data._Representation(*(void *)(a1 + 40), *(void *)(a1 + 48));
          uint64_t v16 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
          uint64_t v17 = a1 + *(int *)(v16 + 32);
          uint64_t v18 = type metadata accessor for UnknownStorage();
          uint64_t v19 = *(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8);
          v19(v17, v18);
          uint64_t v20 = a1 + *(int *)(v16 + 36);
          uint64_t v21 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v21 - 1) + 48))(v20, 1, v21))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined consume of Data._Representation(*(void *)(v20 + 32), *(void *)(v20 + 40));
            outlined consume of Data._Representation(*(void *)(v20 + 48), *(void *)(v20 + 56));
            v19(v20 + v21[8], v18);
            uint64_t v22 = v20 + v21[9];
            uint64_t v23 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
            unint64_t v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48);
            if (!v24(v22, 1, v23))
            {
              outlined consume of Data._Representation(*(void *)(v22 + 8), *(void *)(v22 + 16));
              v19(v22 + *(int *)(v23 + 24), v18);
            }
            uint64_t v25 = v20 + v21[10];
            if (!v24(v25, 1, v23))
            {
              outlined consume of Data._Representation(*(void *)(v25 + 8), *(void *)(v25 + 16));
              v19(v25 + *(int *)(v23 + 24), v18);
            }
          }
        }
      }
      uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
      goto LABEL_25;
    case 1:
      outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
      uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0);
      goto LABEL_25;
    case 2:
      uint64_t v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(a1, 1, v8))
      {
        int v9 = swift_getEnumCaseMultiPayload();
        outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
        if (v9 == 1)
        {
          uint64_t v10 = a1
              + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                       + 24);
          uint64_t v11 = type metadata accessor for UnknownStorage();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
        }
        else
        {
          uint64_t v26 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
          uint64_t v27 = a1 + *(int *)(v26 + 24);
          uint64_t v28 = type metadata accessor for UnknownStorage();
          uint64_t v29 = *(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8);
          v29(v27, v28);
          uint64_t v30 = a1 + *(int *)(v26 + 28);
          uint64_t v31 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48))(v30, 1, v31))
          {
            outlined consume of Data._Representation(*(void *)v30, *(void *)(v30 + 8));
            v29(v30 + *(int *)(v31 + 24), v28);
            uint64_t v32 = v30 + *(int *)(v31 + 28);
            uint64_t v33 = type metadata accessor for AttachmentLedger_EncryptionID(0);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 48))(v32, 1, v33))
            {
              outlined consume of Data._Representation(*(void *)v32, *(void *)(v32 + 8));
              v29(v32 + *(int *)(v33 + 20), v28);
            }
          }
        }
      }
      uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0);
      goto LABEL_25;
    case 3:
      uint64_t v12 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(a1, 1, v12))
      {
        int v13 = swift_getEnumCaseMultiPayload();
        outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
        if (v13 == 1)
        {
          uint64_t v14 = a1
              + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                       + 28);
          uint64_t v15 = type metadata accessor for UnknownStorage();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
        }
        else
        {
          uint64_t v34 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
          uint64_t v35 = a1 + *(int *)(v34 + 24);
          uint64_t v36 = type metadata accessor for UnknownStorage();
          uint64_t v37 = *(void (**)(uint64_t, uint64_t))(*(void *)(v36 - 8) + 8);
          v37(v35, v36);
          uint64_t v38 = a1 + *(int *)(v34 + 28);
          uint64_t v39 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 48))(v38, 1, v39))
          {
            outlined consume of Data._Representation(*(void *)(v38 + 8), *(void *)(v38 + 16));
            v37(v38 + *(int *)(v39 + 24), v36);
          }
        }
      }
      uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
LABEL_25:
      uint64_t v40 = a1 + *(int *)(v7 + 20);
      uint64_t v41 = type metadata accessor for UnknownStorage();
      uint64_t v42 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v41 - 8) + 8);
      uint64_t result = v42(v40, v41);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *initializeWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(uint64_t *a1, uint64_t *a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v7 = *a2;
      unint64_t v8 = a2[1];
      outlined copy of Data._Representation(*a2, v8);
      *a1 = v7;
      a1[1] = v8;
      uint64_t v9 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0) + 20);
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (uint64_t)a2 + v9;
      uint64_t v12 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
      break;
    case 2u:
      uint64_t v13 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v14 + 48))(a2, 1, v13))
      {
        uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
        memcpy(a1, a2, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        uint64_t v27 = *a2;
        unint64_t v28 = a2[1];
        outlined copy of Data._Representation(*a2, v28);
        *a1 = v27;
        a1[1] = v28;
        if (EnumCaseMultiPayload == 1)
        {
          a1[2] = a2[2];
          uint64_t v29 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                       + 24);
          uint64_t v30 = (char *)a1 + v29;
          uint64_t v31 = (uint64_t)a2 + v29;
          uint64_t v32 = type metadata accessor for UnknownStorage();
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 16))(v30, v31, v32);
        }
        else
        {
          a1[2] = a2[2];
          uint64_t v54 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
          uint64_t v55 = *(int *)(v54 + 24);
          uint64_t v56 = (char *)a1 + v55;
          uint64_t v57 = (uint64_t)a2 + v55;
          uint64_t v58 = type metadata accessor for UnknownStorage();
          uint64_t v137 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v58 - 8) + 16);
          v137(v56, v57, v58);
          uint64_t v59 = *(int *)(v54 + 28);
          uint64_t v60 = (uint64_t *)((char *)a1 + v59);
          uint64_t v61 = (uint64_t *)((char *)a2 + v59);
          uint64_t v62 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
          uint64_t v63 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v62 - 8);
          if (v63[6](v61, 1, v62))
          {
            uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
            memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64));
          }
          else
          {
            __dsta = v63;
            uint64_t v134 = v62;
            uint64_t v87 = v58;
            uint64_t v88 = *v61;
            unint64_t v89 = v61[1];
            outlined copy of Data._Representation(*v61, v89);
            void *v60 = v88;
            v60[1] = v89;
            v60[2] = v61[2];
            uint64_t v127 = v87;
            uint64_t v90 = v87;
            uint64_t v91 = v134;
            v137((char *)v60 + *(int *)(v134 + 24), (uint64_t)v61 + *(int *)(v134 + 24), v90);
            uint64_t v92 = *(int *)(v134 + 28);
            uint64_t v131 = v60;
            uint64_t v93 = (void *)((char *)v60 + v92);
            uint64_t v94 = (uint64_t *)((char *)v61 + v92);
            uint64_t v95 = type metadata accessor for AttachmentLedger_EncryptionID(0);
            uint64_t v96 = *(void *)(v95 - 8);
            if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v96 + 48))(v94, 1, v95))
            {
              uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
              memcpy(v93, v94, *(void *)(*(void *)(v97 - 8) + 64));
            }
            else
            {
              unint64_t v125 = v94[1];
              uint64_t v108 = *v94;
              outlined copy of Data._Representation(*v94, v125);
              *uint64_t v93 = v108;
              uint64_t v91 = v134;
              v93[1] = v125;
              v137((char *)v93 + *(int *)(v95 + 20), (uint64_t)v94 + *(int *)(v95 + 20), v127);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v96 + 56))(v93, 0, 1, v95);
            }
            (*((void (**)(void *, void, uint64_t, uint64_t))__dsta + 7))(v131, 0, 1, v91);
          }
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v14 + 56))(a1, 0, 1, v13);
      }
      uint64_t v109 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0)
                    + 20);
      uint64_t v110 = (char *)a1 + v109;
      uint64_t v111 = (uint64_t)a2 + v109;
      uint64_t v112 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v112 - 8) + 16))(v110, v111, v112);
      break;
    case 3u:
      uint64_t v16 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
      uint64_t v17 = *(void *)(v16 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(a2, 1, v16))
      {
        uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
        memcpy(a1, a2, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        int v33 = swift_getEnumCaseMultiPayload();
        uint64_t v34 = *a2;
        unint64_t v35 = a2[1];
        outlined copy of Data._Representation(*a2, v35);
        *a1 = v34;
        a1[1] = v35;
        if (v33 == 1)
        {
          a1[2] = a2[2];
          *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
          a1[4] = a2[4];
          uint64_t v36 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                       + 28);
          uint64_t v37 = (char *)a1 + v36;
          uint64_t v38 = (uint64_t)a2 + v36;
          uint64_t v39 = type metadata accessor for UnknownStorage();
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v39 - 8) + 16))(v37, v38, v39);
        }
        else
        {
          a1[2] = a2[2];
          *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
          uint64_t v65 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
          uint64_t v66 = *(int *)(v65 + 24);
          uint64_t v67 = (char *)a1 + v66;
          uint64_t v68 = (uint64_t)a2 + v66;
          uint64_t v69 = type metadata accessor for UnknownStorage();
          uint64_t v138 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v69 - 8) + 16);
          v138(v67, v68, v69);
          uint64_t v70 = *(int *)(v65 + 28);
          uint64_t v71 = (uint64_t *)((char *)a1 + v70);
          uint64_t v72 = (uint64_t *)((char *)a2 + v70);
          uint64_t v73 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
          uint64_t v74 = *(void *)(v73 - 8);
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73))
          {
            uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
            memcpy(v71, v72, *(void *)(*(void *)(v75 - 8) + 64));
          }
          else
          {
            uint64_t v98 = v72[1];
            *uint64_t v71 = *v72;
            unint64_t v132 = v72[2];
            uint64_t v135 = v98;
            outlined copy of Data._Representation(v98, v132);
            v71[1] = v135;
            v71[2] = v132;
            v138((char *)v71 + *(int *)(v73 + 24), (uint64_t)v72 + *(int *)(v73 + 24), v69);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
          }
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v17 + 56))(a1, 0, 1, v16);
      }
      uint64_t v99 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0)
                   + 20);
      uint64_t v100 = (char *)a1 + v99;
      uint64_t v101 = (uint64_t)a2 + v99;
      uint64_t v102 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v102 - 8) + 16))(v100, v101, v102);
      break;
    default:
      uint64_t v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
      uint64_t v5 = *(void *)(v4 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
      {
        uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      }
      else
      {
        int v19 = swift_getEnumCaseMultiPayload();
        uint64_t v20 = *a2;
        unint64_t v21 = a2[1];
        outlined copy of Data._Representation(*a2, v21);
        *a1 = v20;
        a1[1] = v21;
        if (v19 == 1)
        {
          uint64_t v22 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0)
                       + 20);
          uint64_t v23 = (char *)a1 + v22;
          uint64_t v24 = (uint64_t)a2 + v22;
          uint64_t v25 = type metadata accessor for UnknownStorage();
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
        }
        else
        {
          uint64_t v40 = a2[3];
          a1[2] = a2[2];
          a1[3] = v40;
          *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
          uint64_t v41 = a2[5];
          unint64_t v42 = a2[6];
          swift_bridgeObjectRetain();
          outlined copy of Data._Representation(v41, v42);
          a1[5] = v41;
          a1[6] = v42;
          uint64_t v43 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
          uint64_t v44 = *(int *)(v43 + 32);
          unint64_t v45 = (char *)a1 + v44;
          uint64_t v46 = (uint64_t)a2 + v44;
          uint64_t v47 = type metadata accessor for UnknownStorage();
          uint64_t v136 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v47 - 8) + 16);
          v136(v45, v46, v47);
          uint64_t v48 = *(int *)(v43 + 36);
          uint64_t v49 = (uint64_t *)((char *)a1 + v48);
          uint64_t v50 = (uint64_t *)((char *)a2 + v48);
          uint64_t v51 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
          uint64_t v52 = *(void *)(v51 - 8);
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
          {
            uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
            memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64));
          }
          else
          {
            uint64_t v124 = v52;
            uint64_t v126 = v5;
            uint64_t v76 = v50[1];
            void *v49 = *v50;
            v49[1] = v76;
            uint64_t v77 = v50[3];
            v49[2] = v50[2];
            v49[3] = v77;
            uint64_t v130 = v47;
            uint64_t v79 = v50[4];
            unint64_t v78 = v50[5];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined copy of Data._Representation(v79, v78);
            v49[4] = v79;
            v49[5] = v78;
            uint64_t v80 = v50[6];
            unint64_t v81 = v50[7];
            outlined copy of Data._Representation(v80, v81);
            v49[6] = v80;
            v49[7] = v81;
            v136((char *)v49 + *(int *)(v51 + 32), (uint64_t)v50 + *(int *)(v51 + 32), v130);
            uint64_t v133 = v51;
            uint64_t v82 = *(int *)(v51 + 36);
            __dst = (void *)((char *)v49 + v82);
            uint64_t v83 = (void *)((char *)v50 + v82);
            uint64_t v84 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
            uint64_t v85 = *(void *)(v84 - 8);
            unint64_t v123 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v85 + 48);
            uint64_t v122 = v85;
            if (v123(v83, 1, v84))
            {
              uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
              memcpy(__dst, v83, *(void *)(*(void *)(v86 - 8) + 64));
            }
            else
            {
              uint64_t v103 = v83[1];
              void *__dst = *v83;
              unint64_t v120 = v83[2];
              uint64_t v121 = v103;
              outlined copy of Data._Representation(v103, v120);
              __dst[1] = v121;
              __dst[2] = v120;
              v136((char *)__dst + *(int *)(v84 + 24), (uint64_t)v83 + *(int *)(v84 + 24), v130);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v85 + 56))(__dst, 0, 1, v84);
            }
            uint64_t v104 = *(int *)(v133 + 40);
            uint64_t v105 = (void *)((char *)v49 + v104);
            uint64_t v106 = (void *)((char *)v50 + v104);
            if (v123(v106, 1, v84))
            {
              uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
              memcpy(v105, v106, *(void *)(*(void *)(v107 - 8) + 64));
            }
            else
            {
              uint64_t v113 = v106[1];
              void *v105 = *v106;
              unint64_t v114 = v106[2];
              outlined copy of Data._Representation(v113, v114);
              v105[1] = v113;
              v105[2] = v114;
              v136((char *)v105 + *(int *)(v84 + 24), (uint64_t)v106 + *(int *)(v84 + 24), v130);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v122 + 56))(v105, 0, 1, v84);
            }
            uint64_t v5 = v126;
            (*(void (**)(void *, void, uint64_t, uint64_t))(v124 + 56))(v49, 0, 1, v133);
          }
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
      }
      uint64_t v115 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0) + 20);
      uint64_t v116 = (char *)a1 + v115;
      uint64_t v117 = (uint64_t)a2 + v115;
      uint64_t v118 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v118 - 8) + 16))(v116, v117, v118);
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *assignWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v7 = *a2;
        unint64_t v8 = a2[1];
        outlined copy of Data._Representation(*a2, v8);
        *a1 = v7;
        a1[1] = v8;
        uint64_t v9 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0) + 20);
        uint64_t v10 = (char *)a1 + v9;
        uint64_t v11 = (uint64_t)a2 + v9;
        uint64_t v12 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
        break;
      case 2u:
        uint64_t v13 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
        uint64_t v14 = *(void *)(v13 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v14 + 48))(a2, 1, v13))
        {
          uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
          memcpy(a1, a2, *(void *)(*(void *)(v15 - 8) + 64));
        }
        else
        {
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          uint64_t v27 = *a2;
          unint64_t v28 = a2[1];
          outlined copy of Data._Representation(*a2, v28);
          *a1 = v27;
          a1[1] = v28;
          if (EnumCaseMultiPayload == 1)
          {
            a1[2] = a2[2];
            uint64_t v29 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                         + 24);
            uint64_t v30 = (char *)a1 + v29;
            uint64_t v31 = (uint64_t)a2 + v29;
            uint64_t v32 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 16))(v30, v31, v32);
          }
          else
          {
            a1[2] = a2[2];
            uint64_t v55 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
            uint64_t v56 = *(int *)(v55 + 24);
            uint64_t v57 = (char *)a1 + v56;
            uint64_t v58 = (uint64_t)a2 + v56;
            uint64_t v59 = type metadata accessor for UnknownStorage();
            uint64_t v135 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v59 - 8) + 16);
            v135(v57, v58, v59);
            uint64_t v60 = *(int *)(v55 + 28);
            uint64_t v61 = (uint64_t *)((char *)a1 + v60);
            uint64_t v62 = (uint64_t *)((char *)a2 + v60);
            uint64_t v63 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
            uint64_t v64 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v63 - 8);
            if (v64[6](v62, 1, v63))
            {
              uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
              memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
            }
            else
            {
              __dsta = v64;
              uint64_t v132 = v63;
              uint64_t v87 = v59;
              uint64_t v88 = *v62;
              unint64_t v89 = v62[1];
              outlined copy of Data._Representation(*v62, v89);
              *uint64_t v61 = v88;
              v61[1] = v89;
              v61[2] = v62[2];
              uint64_t v125 = v87;
              uint64_t v90 = v87;
              uint64_t v91 = v132;
              v135((char *)v61 + *(int *)(v132 + 24), (uint64_t)v62 + *(int *)(v132 + 24), v90);
              uint64_t v92 = *(int *)(v132 + 28);
              uint64_t v129 = v61;
              uint64_t v93 = (void *)((char *)v61 + v92);
              uint64_t v94 = (uint64_t *)((char *)v62 + v92);
              uint64_t v95 = type metadata accessor for AttachmentLedger_EncryptionID(0);
              uint64_t v96 = *(void *)(v95 - 8);
              if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v96 + 48))(v94, 1, v95))
              {
                uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
                memcpy(v93, v94, *(void *)(*(void *)(v97 - 8) + 64));
              }
              else
              {
                unint64_t v123 = v94[1];
                uint64_t v106 = *v94;
                outlined copy of Data._Representation(*v94, v123);
                *uint64_t v93 = v106;
                uint64_t v91 = v132;
                v93[1] = v123;
                v135((char *)v93 + *(int *)(v95 + 20), (uint64_t)v94 + *(int *)(v95 + 20), v125);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v96 + 56))(v93, 0, 1, v95);
              }
              (*((void (**)(void *, void, uint64_t, uint64_t))__dsta + 7))(v129, 0, 1, v91);
            }
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v14 + 56))(a1, 0, 1, v13);
        }
        uint64_t v107 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0)
                      + 20);
        uint64_t v108 = (char *)a1 + v107;
        uint64_t v109 = (uint64_t)a2 + v107;
        uint64_t v110 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v110 - 8) + 16))(v108, v109, v110);
        break;
      case 3u:
        uint64_t v16 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
        uint64_t v17 = *(void *)(v16 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(a2, 1, v16))
        {
          uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
          memcpy(a1, a2, *(void *)(*(void *)(v18 - 8) + 64));
        }
        else
        {
          int v33 = swift_getEnumCaseMultiPayload();
          uint64_t v34 = *a2;
          unint64_t v35 = a2[1];
          outlined copy of Data._Representation(*a2, v35);
          *a1 = v34;
          a1[1] = v35;
          if (v33 == 1)
          {
            uint64_t v36 = a2[2];
            *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
            a1[2] = v36;
            a1[4] = a2[4];
            uint64_t v37 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                         + 28);
            uint64_t v38 = (char *)a1 + v37;
            uint64_t v39 = (uint64_t)a2 + v37;
            uint64_t v40 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v40 - 8) + 16))(v38, v39, v40);
          }
          else
          {
            uint64_t v66 = a2[2];
            *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
            a1[2] = v66;
            uint64_t v67 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
            uint64_t v68 = *(int *)(v67 + 24);
            uint64_t v69 = (char *)a1 + v68;
            uint64_t v70 = (uint64_t)a2 + v68;
            uint64_t v71 = type metadata accessor for UnknownStorage();
            uint64_t v136 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v71 - 8) + 16);
            v136(v69, v70, v71);
            uint64_t v72 = *(int *)(v67 + 28);
            uint64_t v73 = (uint64_t *)((char *)a1 + v72);
            uint64_t v74 = (uint64_t *)((char *)a2 + v72);
            uint64_t v75 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
            uint64_t v76 = *(void *)(v75 - 8);
            if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75))
            {
              uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
              memcpy(v73, v74, *(void *)(*(void *)(v77 - 8) + 64));
            }
            else
            {
              *uint64_t v73 = *v74;
              unint64_t v130 = v74[2];
              uint64_t v133 = v74[1];
              outlined copy of Data._Representation(v133, v130);
              v73[1] = v133;
              v73[2] = v130;
              v136((char *)v73 + *(int *)(v75 + 24), (uint64_t)v74 + *(int *)(v75 + 24), v71);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v76 + 56))(v73, 0, 1, v75);
            }
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v17 + 56))(a1, 0, 1, v16);
        }
        uint64_t v98 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0)
                     + 20);
        uint64_t v99 = (char *)a1 + v98;
        uint64_t v100 = (uint64_t)a2 + v98;
        uint64_t v101 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v101 - 8) + 16))(v99, v100, v101);
        break;
      default:
        uint64_t v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
        uint64_t v5 = *(void *)(v4 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
        {
          uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
          memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
        }
        else
        {
          int v19 = swift_getEnumCaseMultiPayload();
          uint64_t v20 = *a2;
          unint64_t v21 = a2[1];
          outlined copy of Data._Representation(*a2, v21);
          *a1 = v20;
          a1[1] = v21;
          if (v19 == 1)
          {
            uint64_t v22 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0)
                         + 20);
            uint64_t v23 = (char *)a1 + v22;
            uint64_t v24 = (uint64_t)a2 + v22;
            uint64_t v25 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
          }
          else
          {
            a1[2] = a2[2];
            uint64_t v41 = a2[3];
            *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
            a1[3] = v41;
            uint64_t v42 = a2[5];
            unint64_t v43 = a2[6];
            swift_bridgeObjectRetain();
            outlined copy of Data._Representation(v42, v43);
            a1[5] = v42;
            a1[6] = v43;
            uint64_t v44 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
            uint64_t v45 = *(int *)(v44 + 32);
            uint64_t v46 = (char *)a1 + v45;
            uint64_t v47 = (uint64_t)a2 + v45;
            uint64_t v48 = type metadata accessor for UnknownStorage();
            uint64_t v134 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v48 - 8) + 16);
            v134(v46, v47, v48);
            uint64_t v49 = *(int *)(v44 + 36);
            uint64_t v50 = (uint64_t *)((char *)a1 + v49);
            uint64_t v51 = (uint64_t *)((char *)a2 + v49);
            uint64_t v52 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
            uint64_t v53 = *(void *)(v52 - 8);
            if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
            {
              uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
              memcpy(v50, v51, *(void *)(*(void *)(v54 - 8) + 64));
            }
            else
            {
              uint64_t v122 = v53;
              uint64_t v124 = v5;
              *uint64_t v50 = *v51;
              v50[1] = v51[1];
              v50[2] = v51[2];
              v50[3] = v51[3];
              uint64_t v128 = v48;
              uint64_t v79 = v51[4];
              unint64_t v78 = v51[5];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              outlined copy of Data._Representation(v79, v78);
              v50[4] = v79;
              v50[5] = v78;
              uint64_t v80 = v51[6];
              unint64_t v81 = v51[7];
              outlined copy of Data._Representation(v80, v81);
              v50[6] = v80;
              v50[7] = v81;
              v134((char *)v50 + *(int *)(v52 + 32), (uint64_t)v51 + *(int *)(v52 + 32), v128);
              uint64_t v131 = v52;
              uint64_t v82 = *(int *)(v52 + 36);
              __dst = (void *)((char *)v50 + v82);
              uint64_t v83 = (void *)((char *)v51 + v82);
              uint64_t v84 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
              uint64_t v85 = *(void *)(v84 - 8);
              uint64_t v121 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v85 + 48);
              uint64_t v120 = v85;
              if (v121(v83, 1, v84))
              {
                uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                memcpy(__dst, v83, *(void *)(*(void *)(v86 - 8) + 64));
              }
              else
              {
                void *__dst = *v83;
                unint64_t v118 = v83[2];
                uint64_t v119 = v83[1];
                outlined copy of Data._Representation(v119, v118);
                __dst[1] = v119;
                __dst[2] = v118;
                v134((char *)__dst + *(int *)(v84 + 24), (uint64_t)v83 + *(int *)(v84 + 24), v128);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v85 + 56))(__dst, 0, 1, v84);
              }
              uint64_t v102 = *(int *)(v131 + 40);
              uint64_t v103 = (void *)((char *)v50 + v102);
              uint64_t v104 = (void *)((char *)v51 + v102);
              if (v121(v104, 1, v84))
              {
                uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                memcpy(v103, v104, *(void *)(*(void *)(v105 - 8) + 64));
              }
              else
              {
                *uint64_t v103 = *v104;
                uint64_t v111 = v104[1];
                unint64_t v112 = v104[2];
                outlined copy of Data._Representation(v111, v112);
                v103[1] = v111;
                v103[2] = v112;
                v134((char *)v103 + *(int *)(v84 + 24), (uint64_t)v104 + *(int *)(v84 + 24), v128);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v120 + 56))(v103, 0, 1, v84);
              }
              uint64_t v5 = v124;
              (*(void (**)(void *, void, uint64_t, uint64_t))(v122 + 56))(v50, 0, 1, v131);
            }
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
        }
        uint64_t v113 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0) + 20);
        unint64_t v114 = (char *)a1 + v113;
        uint64_t v115 = (uint64_t)a2 + v113;
        uint64_t v116 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v116 - 8) + 16))(v114, v115, v116);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(_OWORD *a1, _OWORD *a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      *a1 = *a2;
      uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0);
      break;
    case 2u:
      uint64_t v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
      uint64_t v9 = *(void *)(v8 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
      {
        uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
        memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
      }
      else
      {
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        *a1 = *a2;
        if (EnumCaseMultiPayload == 1)
        {
          *((void *)a1 + 2) = *((void *)a2 + 2);
          uint64_t v20 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                       + 24);
          unint64_t v21 = (char *)a1 + v20;
          uint64_t v22 = (char *)a2 + v20;
          uint64_t v23 = type metadata accessor for UnknownStorage();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
        }
        else
        {
          *((void *)a1 + 2) = *((void *)a2 + 2);
          uint64_t v41 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
          uint64_t v42 = *(int *)(v41 + 24);
          unint64_t v43 = (char *)a1 + v42;
          uint64_t v44 = (char *)a2 + v42;
          uint64_t v45 = type metadata accessor for UnknownStorage();
          uint64_t v92 = *(void (**)(char *, char *))(*(void *)(v45 - 8) + 32);
          __dsta = (void *)v45;
          v92(v43, v44);
          uint64_t v46 = *(int *)(v41 + 28);
          uint64_t v47 = (void *)((char *)a1 + v46);
          uint64_t v48 = (void *)((char *)a2 + v46);
          uint64_t v49 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
          uint64_t v50 = *(void *)(v49 - 8);
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
          {
            uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
            memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
          }
          else
          {
            *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
            v47[2] = v48[2];
            ((void (*)(char *, char *, void *))v92)((char *)v47 + *(int *)(v49 + 24), (char *)v48 + *(int *)(v49 + 24), __dsta);
            uint64_t v69 = *(int *)(v49 + 28);
            uint64_t v90 = v47;
            uint64_t v87 = (_OWORD *)((char *)v47 + v69);
            uint64_t v70 = (_OWORD *)((char *)v48 + v69);
            uint64_t v71 = type metadata accessor for AttachmentLedger_EncryptionID(0);
            uint64_t v85 = *(void *)(v71 - 8);
            if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v85 + 48))(v70, 1, v71))
            {
              uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
              memcpy(v87, v70, *(void *)(*(void *)(v72 - 8) + 64));
            }
            else
            {
              *uint64_t v87 = *v70;
              ((void (*)(char *, char *, void *))v92)((char *)v87 + *(int *)(v71 + 20), (char *)v70 + *(int *)(v71 + 20), __dsta);
              (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v85 + 56))(v87, 0, 1, v71);
            }
            (*(void (**)(void *, void, uint64_t, uint64_t))(v50 + 56))(v90, 0, 1, v49);
          }
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
      }
      uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0);
      break;
    case 3u:
      uint64_t v11 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
      uint64_t v12 = *(void *)(v11 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v12 + 48))(a2, 1, v11))
      {
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
        memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        int v24 = swift_getEnumCaseMultiPayload();
        *a1 = *a2;
        if (v24 == 1)
        {
          *((void *)a1 + 2) = *((void *)a2 + 2);
          *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
          *((void *)a1 + 4) = *((void *)a2 + 4);
          uint64_t v25 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                       + 28);
          uint64_t v26 = (char *)a1 + v25;
          uint64_t v27 = (char *)a2 + v25;
          uint64_t v28 = type metadata accessor for UnknownStorage();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v26, v27, v28);
        }
        else
        {
          *((void *)a1 + 2) = *((void *)a2 + 2);
          *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
          uint64_t v52 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
          uint64_t v53 = *(int *)(v52 + 24);
          uint64_t v54 = (char *)a1 + v53;
          uint64_t v55 = (char *)a2 + v53;
          uint64_t v56 = type metadata accessor for UnknownStorage();
          uint64_t v93 = *(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 32);
          v93(v54, v55, v56);
          uint64_t v57 = *(int *)(v52 + 28);
          __dstb = (void *)((char *)a1 + v57);
          uint64_t v58 = (void *)((char *)a2 + v57);
          uint64_t v59 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
          uint64_t v60 = *(void *)(v59 - 8);
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
          {
            uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
            memcpy(__dstb, v58, *(void *)(*(void *)(v61 - 8) + 64));
          }
          else
          {
            void *__dstb = *v58;
            *(_OWORD *)(__dstb + 1) = *(_OWORD *)(v58 + 1);
            v93((char *)__dstb + *(int *)(v59 + 24), (char *)v58 + *(int *)(v59 + 24), v56);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v60 + 56))(__dstb, 0, 1, v59);
          }
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
      }
      uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
      break;
    default:
      uint64_t v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
      uint64_t v5 = *(void *)(v4 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
      {
        uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      }
      else
      {
        int v14 = swift_getEnumCaseMultiPayload();
        *a1 = *a2;
        if (v14 == 1)
        {
          uint64_t v15 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0)
                       + 20);
          uint64_t v16 = (char *)a1 + v15;
          uint64_t v17 = (char *)a2 + v15;
          uint64_t v18 = type metadata accessor for UnknownStorage();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
        }
        else
        {
          uint64_t v29 = *((void *)a2 + 3);
          *((void *)a1 + 2) = *((void *)a2 + 2);
          *((void *)a1 + 3) = v29;
          *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
          *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
          uint64_t v30 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
          uint64_t v31 = *(int *)(v30 + 32);
          uint64_t v32 = (char *)a1 + v31;
          int v33 = (char *)a2 + v31;
          uint64_t v34 = type metadata accessor for UnknownStorage();
          uint64_t v91 = *(void (**)(char *, char *))(*(void *)(v34 - 8) + 32);
          __dst = (void *)v34;
          v91(v32, v33);
          uint64_t v35 = *(int *)(v30 + 36);
          uint64_t v36 = (_OWORD *)((char *)a1 + v35);
          uint64_t v37 = (_OWORD *)((char *)a2 + v35);
          uint64_t v38 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
          uint64_t v39 = (unsigned int (**)(_OWORD *, uint64_t, int *))*((void *)v38 - 1);
          if (v39[6](v37, 1, v38))
          {
            uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
            memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
          }
          else
          {
            uint64_t v86 = v39;
            long long v62 = v37[1];
            *uint64_t v36 = *v37;
            v36[1] = v62;
            long long v63 = v37[3];
            v36[2] = v37[2];
            v36[3] = v63;
            ((void (*)(char *, char *, void *))v91)((char *)v36 + v38[8], (char *)v37 + v38[8], __dst);
            uint64_t v64 = v38[9];
            uint64_t v83 = v36;
            uint64_t v88 = (void *)((char *)v36 + v64);
            uint64_t v65 = (void *)((char *)v37 + v64);
            uint64_t v66 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
            uint64_t v67 = *(void *)(v66 - 8);
            uint64_t v84 = *(unsigned int (**)(void *, uint64_t))(v67 + 48);
            uint64_t v89 = v66;
            uint64_t v82 = v67;
            if (v84(v65, 1))
            {
              uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
              memcpy(v88, v65, *(void *)(*(void *)(v68 - 8) + 64));
            }
            else
            {
              *uint64_t v88 = *v65;
              *(_OWORD *)(v88 + 1) = *(_OWORD *)(v65 + 1);
              ((void (*)(char *, char *, void *))v91)((char *)v88 + *(int *)(v89 + 24), (char *)v65 + *(int *)(v89 + 24), __dst);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v67 + 56))(v88, 0, 1, v89);
            }
            uint64_t v73 = v38[10];
            uint64_t v74 = (void *)((char *)v83 + v73);
            uint64_t v75 = (void *)((char *)v37 + v73);
            if (((unsigned int (*)(void *, uint64_t, uint64_t))v84)(v75, 1, v89))
            {
              uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
              memcpy(v74, v75, *(void *)(*(void *)(v76 - 8) + 64));
            }
            else
            {
              *uint64_t v74 = *v75;
              *(_OWORD *)(v74 + 1) = *(_OWORD *)(v75 + 1);
              ((void (*)(char *, char *, void *))v91)((char *)v74 + *(int *)(v89 + 24), (char *)v75 + *(int *)(v89 + 24), __dst);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v82 + 56))(v74, 0, 1, v89);
            }
            (*((void (**)(_OWORD *, void, uint64_t, int *))v86 + 7))(v83, 0, 1, v38);
          }
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
      }
      uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
      break;
  }
  uint64_t v77 = *(int *)(v7 + 20);
  unint64_t v78 = (char *)a1 + v77;
  uint64_t v79 = (char *)a2 + v77;
  uint64_t v80 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v80 - 8) + 32))(v78, v79, v80);
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *a1 = *a2;
        uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0);
        break;
      case 2u:
        uint64_t v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
        uint64_t v9 = *(void *)(v8 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
        {
          uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
          memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
        }
        else
        {
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          *a1 = *a2;
          if (EnumCaseMultiPayload == 1)
          {
            *((void *)a1 + 2) = *((void *)a2 + 2);
            uint64_t v20 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                         + 24);
            unint64_t v21 = (char *)a1 + v20;
            uint64_t v22 = (char *)a2 + v20;
            uint64_t v23 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
          }
          else
          {
            *((void *)a1 + 2) = *((void *)a2 + 2);
            uint64_t v41 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
            uint64_t v42 = *(int *)(v41 + 24);
            unint64_t v43 = (char *)a1 + v42;
            uint64_t v44 = (char *)a2 + v42;
            uint64_t v45 = type metadata accessor for UnknownStorage();
            uint64_t v92 = *(void (**)(char *, char *))(*(void *)(v45 - 8) + 32);
            __dsta = (void *)v45;
            v92(v43, v44);
            uint64_t v46 = *(int *)(v41 + 28);
            uint64_t v47 = (void *)((char *)a1 + v46);
            uint64_t v48 = (void *)((char *)a2 + v46);
            uint64_t v49 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
            uint64_t v50 = *(void *)(v49 - 8);
            if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
            {
              uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
              memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
            }
            else
            {
              *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
              v47[2] = v48[2];
              ((void (*)(char *, char *, void *))v92)((char *)v47 + *(int *)(v49 + 24), (char *)v48 + *(int *)(v49 + 24), __dsta);
              uint64_t v69 = *(int *)(v49 + 28);
              uint64_t v90 = v47;
              uint64_t v87 = (_OWORD *)((char *)v47 + v69);
              uint64_t v70 = (_OWORD *)((char *)v48 + v69);
              uint64_t v71 = type metadata accessor for AttachmentLedger_EncryptionID(0);
              uint64_t v85 = *(void *)(v71 - 8);
              if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v85 + 48))(v70, 1, v71))
              {
                uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
                memcpy(v87, v70, *(void *)(*(void *)(v72 - 8) + 64));
              }
              else
              {
                *uint64_t v87 = *v70;
                ((void (*)(char *, char *, void *))v92)((char *)v87 + *(int *)(v71 + 20), (char *)v70 + *(int *)(v71 + 20), __dsta);
                (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v85 + 56))(v87, 0, 1, v71);
              }
              (*(void (**)(void *, void, uint64_t, uint64_t))(v50 + 56))(v90, 0, 1, v49);
            }
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
        }
        uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0);
        break;
      case 3u:
        uint64_t v11 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
        uint64_t v12 = *(void *)(v11 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v12 + 48))(a2, 1, v11))
        {
          uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
          memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64));
        }
        else
        {
          int v24 = swift_getEnumCaseMultiPayload();
          *a1 = *a2;
          if (v24 == 1)
          {
            *((void *)a1 + 2) = *((void *)a2 + 2);
            *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
            *((void *)a1 + 4) = *((void *)a2 + 4);
            uint64_t v25 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                         + 28);
            uint64_t v26 = (char *)a1 + v25;
            uint64_t v27 = (char *)a2 + v25;
            uint64_t v28 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v26, v27, v28);
          }
          else
          {
            *((void *)a1 + 2) = *((void *)a2 + 2);
            *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
            uint64_t v52 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
            uint64_t v53 = *(int *)(v52 + 24);
            uint64_t v54 = (char *)a1 + v53;
            uint64_t v55 = (char *)a2 + v53;
            uint64_t v56 = type metadata accessor for UnknownStorage();
            uint64_t v93 = *(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 32);
            v93(v54, v55, v56);
            uint64_t v57 = *(int *)(v52 + 28);
            __dstb = (void *)((char *)a1 + v57);
            uint64_t v58 = (void *)((char *)a2 + v57);
            uint64_t v59 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
            uint64_t v60 = *(void *)(v59 - 8);
            if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
            {
              uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
              memcpy(__dstb, v58, *(void *)(*(void *)(v61 - 8) + 64));
            }
            else
            {
              void *__dstb = *v58;
              *(_OWORD *)(__dstb + 1) = *(_OWORD *)(v58 + 1);
              v93((char *)__dstb + *(int *)(v59 + 24), (char *)v58 + *(int *)(v59 + 24), v56);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v60 + 56))(__dstb, 0, 1, v59);
            }
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
        }
        uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
        break;
      default:
        uint64_t v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
        uint64_t v5 = *(void *)(v4 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
        {
          uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
          memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
        }
        else
        {
          int v14 = swift_getEnumCaseMultiPayload();
          *a1 = *a2;
          if (v14 == 1)
          {
            uint64_t v15 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0)
                         + 20);
            uint64_t v16 = (char *)a1 + v15;
            uint64_t v17 = (char *)a2 + v15;
            uint64_t v18 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
          }
          else
          {
            uint64_t v29 = *((void *)a2 + 3);
            *((void *)a1 + 2) = *((void *)a2 + 2);
            *((void *)a1 + 3) = v29;
            *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
            *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
            uint64_t v30 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
            uint64_t v31 = *(int *)(v30 + 32);
            uint64_t v32 = (char *)a1 + v31;
            int v33 = (char *)a2 + v31;
            uint64_t v34 = type metadata accessor for UnknownStorage();
            uint64_t v91 = *(void (**)(char *, char *))(*(void *)(v34 - 8) + 32);
            __dst = (void *)v34;
            v91(v32, v33);
            uint64_t v35 = *(int *)(v30 + 36);
            uint64_t v36 = (_OWORD *)((char *)a1 + v35);
            uint64_t v37 = (_OWORD *)((char *)a2 + v35);
            uint64_t v38 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
            uint64_t v39 = (unsigned int (**)(_OWORD *, uint64_t, int *))*((void *)v38 - 1);
            if (v39[6](v37, 1, v38))
            {
              uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
              memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
            }
            else
            {
              uint64_t v86 = v39;
              long long v62 = v37[1];
              *uint64_t v36 = *v37;
              v36[1] = v62;
              long long v63 = v37[3];
              v36[2] = v37[2];
              v36[3] = v63;
              ((void (*)(char *, char *, void *))v91)((char *)v36 + v38[8], (char *)v37 + v38[8], __dst);
              uint64_t v64 = v38[9];
              uint64_t v83 = v36;
              uint64_t v88 = (void *)((char *)v36 + v64);
              uint64_t v65 = (void *)((char *)v37 + v64);
              uint64_t v66 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
              uint64_t v67 = *(void *)(v66 - 8);
              uint64_t v84 = *(unsigned int (**)(void *, uint64_t))(v67 + 48);
              uint64_t v89 = v66;
              uint64_t v82 = v67;
              if (v84(v65, 1))
              {
                uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                memcpy(v88, v65, *(void *)(*(void *)(v68 - 8) + 64));
              }
              else
              {
                *uint64_t v88 = *v65;
                *(_OWORD *)(v88 + 1) = *(_OWORD *)(v65 + 1);
                ((void (*)(char *, char *, void *))v91)((char *)v88 + *(int *)(v89 + 24), (char *)v65 + *(int *)(v89 + 24), __dst);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v67 + 56))(v88, 0, 1, v89);
              }
              uint64_t v73 = v38[10];
              uint64_t v74 = (void *)((char *)v83 + v73);
              uint64_t v75 = (void *)((char *)v37 + v73);
              if (((unsigned int (*)(void *, uint64_t, uint64_t))v84)(v75, 1, v89))
              {
                uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                memcpy(v74, v75, *(void *)(*(void *)(v76 - 8) + 64));
              }
              else
              {
                *uint64_t v74 = *v75;
                *(_OWORD *)(v74 + 1) = *(_OWORD *)(v75 + 1);
                ((void (*)(char *, char *, void *))v91)((char *)v74 + *(int *)(v89 + 24), (char *)v75 + *(int *)(v89 + 24), __dst);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v82 + 56))(v74, 0, 1, v89);
              }
              (*((void (**)(_OWORD *, void, uint64_t, int *))v86 + 7))(v83, 0, 1, v38);
            }
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
        }
        uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
        break;
    }
    uint64_t v77 = *(int *)(v7 + 20);
    unint64_t v78 = (char *)a1 + v77;
    uint64_t v79 = (char *)a2 + v77;
    uint64_t v80 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v80 - 8) + 32))(v78, v79, v80);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(a1, a2, a3, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v12 = *a2;
      unint64_t v13 = a2[1];
      outlined copy of Data._Representation(*a2, v13);
      *a1 = v12;
      a1[1] = v13;
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v14 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0) + 20);
        uint64_t v15 = (char *)a1 + v14;
        uint64_t v16 = (char *)a2 + v14;
        uint64_t v17 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
      }
      else
      {
        uint64_t v18 = a2[3];
        a1[2] = a2[2];
        a1[3] = v18;
        *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
        uint64_t v19 = a2[5];
        unint64_t v20 = a2[6];
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v19, v20);
        a1[5] = v19;
        a1[6] = v20;
        uint64_t v21 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
        uint64_t v22 = *(int *)(v21 + 32);
        uint64_t v23 = (char *)a1 + v22;
        int v24 = (char *)a2 + v22;
        uint64_t v25 = type metadata accessor for UnknownStorage();
        uint64_t v64 = *(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16);
        v64(v23, v24, v25);
        uint64_t v26 = *(int *)(v21 + 36);
        uint64_t v27 = (uint64_t *)((char *)a1 + v26);
        uint64_t v28 = (uint64_t *)((char *)a2 + v26);
        uint64_t v29 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
        uint64_t v30 = *(void *)(v29 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
        {
          uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
          memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
        }
        else
        {
          uint64_t v59 = v30;
          uint64_t v60 = v8;
          uint64_t v32 = v28[1];
          *uint64_t v27 = *v28;
          v27[1] = v32;
          uint64_t v33 = v28[3];
          v27[2] = v28[2];
          v27[3] = v33;
          uint64_t v62 = v25;
          uint64_t v35 = v28[4];
          unint64_t v34 = v28[5];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined copy of Data._Representation(v35, v34);
          v27[4] = v35;
          v27[5] = v34;
          uint64_t v36 = v28[6];
          unint64_t v37 = v28[7];
          outlined copy of Data._Representation(v36, v37);
          v27[6] = v36;
          v27[7] = v37;
          v64((char *)v27 + *(int *)(v29 + 32), (char *)v28 + *(int *)(v29 + 32), v62);
          uint64_t v63 = v29;
          uint64_t v38 = *(int *)(v29 + 36);
          __dst = (void *)((char *)v27 + v38);
          uint64_t v39 = (void *)((char *)v28 + v38);
          uint64_t v40 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
          uint64_t v41 = *(void *)(v40 - 8);
          uint64_t v58 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v41 + 48);
          uint64_t v57 = v41;
          if (v58(v39, 1, v40))
          {
            uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
            memcpy(__dst, v39, *(void *)(*(void *)(v42 - 8) + 64));
          }
          else
          {
            uint64_t v43 = v39[1];
            void *__dst = *v39;
            unint64_t v55 = v39[2];
            uint64_t v56 = v43;
            outlined copy of Data._Representation(v43, v55);
            __dst[1] = v56;
            __dst[2] = v55;
            v64((char *)__dst + *(int *)(v40 + 24), (char *)v39 + *(int *)(v40 + 24), v62);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v41 + 56))(__dst, 0, 1, v40);
          }
          uint64_t v44 = *(int *)(v63 + 40);
          uint64_t v45 = (void *)((char *)v27 + v44);
          uint64_t v46 = (void *)((char *)v28 + v44);
          if (v58(v46, 1, v40))
          {
            uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
            memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
          }
          else
          {
            uint64_t v48 = v46[1];
            *uint64_t v45 = *v46;
            unint64_t v49 = v46[2];
            outlined copy of Data._Representation(v48, v49);
            v45[1] = v48;
            v45[2] = v49;
            v64((char *)v45 + *(int *)(v40 + 24), (char *)v46 + *(int *)(v40 + 24), v62);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v57 + 56))(v45, 0, 1, v40);
          }
          uint64_t v8 = v60;
          (*(void (**)(void *, void, uint64_t, uint64_t))(v59 + 56))(v27, 0, 1, v63);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v50 = *(int *)(a3 + 20);
    uint64_t v51 = (char *)a1 + v50;
    uint64_t v52 = (char *)a2 + v50;
    uint64_t v53 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 16))(v51, v52, v53);
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4))
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v6 = a1
         + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0) + 20);
      uint64_t v7 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    }
    else
    {
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(*(void *)(a1 + 40), *(void *)(a1 + 48));
      uint64_t v8 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      uint64_t v9 = a1 + *(int *)(v8 + 32);
      uint64_t v10 = type metadata accessor for UnknownStorage();
      uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
      v11(v9, v10);
      uint64_t v12 = a1 + *(int *)(v8 + 36);
      unint64_t v13 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v13 - 1) + 48))(v12, 1, v13))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(*(void *)(v12 + 32), *(void *)(v12 + 40));
        outlined consume of Data._Representation(*(void *)(v12 + 48), *(void *)(v12 + 56));
        uint64_t v22 = v11;
        v11(v12 + v13[8], v10);
        uint64_t v14 = v12 + v13[9];
        uint64_t v15 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        uint64_t v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
        if (!v16(v14, 1, v15))
        {
          outlined consume of Data._Representation(*(void *)(v14 + 8), *(void *)(v14 + 16));
          v22(v14 + *(int *)(v15 + 24), v10);
        }
        uint64_t v17 = v12 + v13[10];
        if (!v16(v17, 1, v15))
        {
          outlined consume of Data._Representation(*(void *)(v17 + 8), *(void *)(v17 + 16));
          v22(v17 + *(int *)(v15 + 24), v10);
        }
      }
    }
  }
  uint64_t v18 = a1 + *(int *)(a2 + 20);
  uint64_t v19 = type metadata accessor for UnknownStorage();
  unint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8);
  return v20(v18, v19);
}

void *initializeWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v10 = *a2;
    unint64_t v11 = a2[1];
    outlined copy of Data._Representation(*a2, v11);
    *a1 = v10;
    a1[1] = v11;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v12 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0) + 20);
      unint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      uint64_t v15 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    }
    else
    {
      uint64_t v16 = a2[3];
      a1[2] = a2[2];
      a1[3] = v16;
      *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
      uint64_t v17 = a2[5];
      unint64_t v18 = a2[6];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v17, v18);
      a1[5] = v17;
      a1[6] = v18;
      uint64_t v19 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      uint64_t v20 = *(int *)(v19 + 32);
      uint64_t v21 = (char *)a1 + v20;
      uint64_t v22 = (char *)a2 + v20;
      uint64_t v23 = type metadata accessor for UnknownStorage();
      uint64_t v62 = *(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16);
      v62(v21, v22, v23);
      uint64_t v24 = *(int *)(v19 + 36);
      uint64_t v25 = (void *)((char *)a1 + v24);
      uint64_t v26 = (uint64_t *)((char *)a2 + v24);
      uint64_t v27 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      uint64_t v28 = *(void *)(v27 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        uint64_t v57 = v28;
        uint64_t v58 = a3;
        uint64_t v30 = v26[1];
        *uint64_t v25 = *v26;
        v25[1] = v30;
        uint64_t v31 = v26[3];
        v25[2] = v26[2];
        v25[3] = v31;
        uint64_t v60 = v23;
        uint64_t v33 = v26[4];
        unint64_t v32 = v26[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v33, v32);
        v25[4] = v33;
        v25[5] = v32;
        uint64_t v34 = v26[6];
        unint64_t v35 = v26[7];
        outlined copy of Data._Representation(v34, v35);
        v25[6] = v34;
        v25[7] = v35;
        v62((char *)v25 + *(int *)(v27 + 32), (char *)v26 + *(int *)(v27 + 32), v60);
        uint64_t v61 = v27;
        uint64_t v36 = *(int *)(v27 + 36);
        __dst = (void *)((char *)v25 + v36);
        unint64_t v37 = (void *)((char *)v26 + v36);
        uint64_t v38 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        uint64_t v39 = *(void *)(v38 - 8);
        uint64_t v56 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v39 + 48);
        uint64_t v55 = v39;
        if (v56(v37, 1, v38))
        {
          uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(__dst, v37, *(void *)(*(void *)(v40 - 8) + 64));
        }
        else
        {
          uint64_t v41 = v37[1];
          void *__dst = *v37;
          unint64_t v53 = v37[2];
          uint64_t v54 = v41;
          outlined copy of Data._Representation(v41, v53);
          __dst[1] = v54;
          __dst[2] = v53;
          v62((char *)__dst + *(int *)(v38 + 24), (char *)v37 + *(int *)(v38 + 24), v60);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v39 + 56))(__dst, 0, 1, v38);
        }
        uint64_t v42 = *(int *)(v61 + 40);
        uint64_t v43 = (void *)((char *)v25 + v42);
        uint64_t v44 = (void *)((char *)v26 + v42);
        if (v56(v44, 1, v38))
        {
          uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
        }
        else
        {
          uint64_t v46 = v44[1];
          void *v43 = *v44;
          unint64_t v47 = v44[2];
          outlined copy of Data._Representation(v46, v47);
          v43[1] = v46;
          v43[2] = v47;
          v62((char *)v43 + *(int *)(v38 + 24), (char *)v44 + *(int *)(v38 + 24), v60);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v55 + 56))(v43, 0, 1, v38);
        }
        a3 = v58;
        (*(void (**)(void *, void, uint64_t, uint64_t))(v57 + 56))(v25, 0, 1, v61);
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v48 = *(int *)(a3 + 20);
  unint64_t v49 = (char *)a1 + v48;
  uint64_t v50 = (char *)a2 + v48;
  uint64_t v51 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 16))(v49, v50, v51);
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v12 = *(void *)a2;
      unint64_t v13 = *(void *)(a2 + 8);
      outlined copy of Data._Representation(*(void *)a2, v13);
      *(void *)a1 = v12;
      *(void *)(a1 + 8) = v13;
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v14 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0) + 20);
        uint64_t v15 = a1 + v14;
        uint64_t v16 = a2 + v14;
        uint64_t v17 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
      }
      else
      {
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        uint64_t v26 = *(void *)(a2 + 24);
        *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
        *(void *)(a1 + 24) = v26;
        uint64_t v27 = *(void *)(a2 + 40);
        unint64_t v28 = *(void *)(a2 + 48);
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v27, v28);
        *(void *)(a1 + 40) = v27;
        *(void *)(a1 + 48) = v28;
        uint64_t v29 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
        uint64_t v30 = *(int *)(v29 + 32);
        uint64_t v31 = a1 + v30;
        uint64_t v32 = a2 + v30;
        uint64_t v33 = type metadata accessor for UnknownStorage();
        unint64_t v112 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 16);
        v112(v31, v32, v33);
        uint64_t v34 = *(int *)(v29 + 36);
        unint64_t v35 = (void *)(a1 + v34);
        uint64_t v36 = (void *)(a2 + v34);
        uint64_t v37 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
        uint64_t v38 = *(void *)(v37 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
        {
          uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
          memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
        }
        else
        {
          uint64_t v101 = v38;
          uint64_t v103 = a3;
          void *v35 = *v36;
          v35[1] = v36[1];
          v35[2] = v36[2];
          v35[3] = v36[3];
          uint64_t v107 = v33;
          uint64_t v56 = v36[4];
          unint64_t v55 = v36[5];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined copy of Data._Representation(v56, v55);
          v35[4] = v56;
          v35[5] = v55;
          uint64_t v57 = v36[6];
          unint64_t v58 = v36[7];
          outlined copy of Data._Representation(v57, v58);
          v35[6] = v57;
          v35[7] = v58;
          v112((uint64_t)v35 + *(int *)(v37 + 32), (uint64_t)v36 + *(int *)(v37 + 32), v107);
          uint64_t v109 = v37;
          uint64_t v59 = *(int *)(v37 + 36);
          __dst = (void *)((char *)v35 + v59);
          uint64_t v60 = (void *)((char *)v36 + v59);
          uint64_t v61 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
          uint64_t v62 = *(void *)(v61 - 8);
          uint64_t v99 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v62 + 48);
          uint64_t v97 = v62;
          if (v99(v60, 1, v61))
          {
            uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
            memcpy(__dst, v60, *(void *)(*(void *)(v63 - 8) + 64));
          }
          else
          {
            void *__dst = *v60;
            unint64_t v94 = v60[2];
            uint64_t v95 = v60[1];
            outlined copy of Data._Representation(v95, v94);
            __dst[1] = v95;
            __dst[2] = v94;
            v112((uint64_t)__dst + *(int *)(v61 + 24), (uint64_t)v60 + *(int *)(v61 + 24), v107);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v62 + 56))(__dst, 0, 1, v61);
          }
          uint64_t v76 = *(int *)(v109 + 40);
          uint64_t v77 = (void *)((char *)v35 + v76);
          unint64_t v78 = (void *)((char *)v36 + v76);
          if (v99(v78, 1, v61))
          {
            uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
            memcpy(v77, v78, *(void *)(*(void *)(v79 - 8) + 64));
          }
          else
          {
            *uint64_t v77 = *v78;
            uint64_t v80 = v78[1];
            unint64_t v81 = v78[2];
            outlined copy of Data._Representation(v80, v81);
            v77[1] = v80;
            v77[2] = v81;
            v112((uint64_t)v77 + *(int *)(v61 + 24), (uint64_t)v78 + *(int *)(v61 + 24), v107);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v97 + 56))(v77, 0, 1, v61);
          }
          a3 = v103;
          (*(void (**)(void *, void, uint64_t, uint64_t))(v101 + 56))(v35, 0, 1, v109);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_25;
    }
LABEL_7:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_25;
  }
  if (v10)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
    int v19 = swift_getEnumCaseMultiPayload();
    uint64_t v20 = *(void *)a2;
    unint64_t v21 = *(void *)(a2 + 8);
    outlined copy of Data._Representation(*(void *)a2, v21);
    *(void *)a1 = v20;
    *(void *)(a1 + 8) = v21;
    if (v19 == 1)
    {
      uint64_t v22 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0) + 20);
      uint64_t v23 = a1 + v22;
      uint64_t v24 = a2 + v22;
      uint64_t v25 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v40 = *(void *)(a2 + 24);
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      *(void *)(a1 + 24) = v40;
      uint64_t v41 = *(void *)(a2 + 40);
      unint64_t v42 = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v41, v42);
      *(void *)(a1 + 40) = v41;
      *(void *)(a1 + 48) = v42;
      uint64_t v43 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      uint64_t v44 = *(int *)(v43 + 32);
      uint64_t v45 = a1 + v44;
      uint64_t v46 = a2 + v44;
      uint64_t v47 = type metadata accessor for UnknownStorage();
      uint64_t v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 16);
      v48(v45, v46, v47);
      uint64_t v49 = *(int *)(v43 + 36);
      uint64_t v50 = (void *)(a1 + v49);
      uint64_t v51 = (void *)(a2 + v49);
      uint64_t v52 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      uint64_t v53 = *(void *)(v52 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
      {
        uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v50, v51, *(void *)(*(void *)(v54 - 8) + 64));
      }
      else
      {
        uint64_t v108 = v53;
        uint64_t v104 = a3;
        *uint64_t v50 = *v51;
        v50[1] = v51[1];
        v50[2] = v51[2];
        v50[3] = v51[3];
        uint64_t v111 = (void (*)(char *, char *, uint64_t))v48;
        uint64_t v64 = v52;
        uint64_t v65 = v47;
        uint64_t v67 = v51[4];
        unint64_t v66 = v51[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v67, v66);
        v50[4] = v67;
        v50[5] = v66;
        uint64_t v68 = v51[6];
        unint64_t v69 = v51[7];
        outlined copy of Data._Representation(v68, v69);
        v50[6] = v68;
        v50[7] = v69;
        uint64_t v102 = v65;
        v111((char *)v50 + *(int *)(v64 + 32), (char *)v51 + *(int *)(v64 + 32), v65);
        uint64_t v110 = v64;
        uint64_t v70 = *(int *)(v64 + 36);
        uint64_t v71 = (void *)((char *)v50 + v70);
        uint64_t v72 = (void *)((char *)v51 + v70);
        uint64_t v73 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        uint64_t v74 = *(void *)(v73 - 8);
        __dsta = *(unsigned int (**)(void *, uint64_t, uint64_t))(v74 + 48);
        uint64_t v100 = v74;
        if (__dsta(v72, 1, v73))
        {
          uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v71, v72, *(void *)(*(void *)(v75 - 8) + 64));
        }
        else
        {
          *uint64_t v71 = *v72;
          unint64_t v96 = v72[2];
          uint64_t v98 = v72[1];
          outlined copy of Data._Representation(v98, v96);
          v71[1] = v98;
          v71[2] = v96;
          v111((char *)v71 + *(int *)(v73 + 24), (char *)v72 + *(int *)(v73 + 24), v102);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
        }
        uint64_t v87 = v110;
        uint64_t v88 = *(int *)(v110 + 40);
        uint64_t v89 = (void *)((char *)v50 + v88);
        uint64_t v90 = (void *)((char *)v51 + v88);
        if (__dsta(v90, 1, v73))
        {
          uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v89, v90, *(void *)(*(void *)(v91 - 8) + 64));
        }
        else
        {
          *uint64_t v89 = *v90;
          uint64_t v93 = v90[1];
          unint64_t v92 = v90[2];
          outlined copy of Data._Representation(v93, v92);
          v89[1] = v93;
          v89[2] = v92;
          uint64_t v87 = v110;
          v111((char *)v89 + *(int *)(v73 + 24), (char *)v90 + *(int *)(v73 + 24), v102);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v100 + 56))(v89, 0, 1, v73);
        }
        a3 = v104;
        (*(void (**)(void *, void, uint64_t, uint64_t))(v108 + 56))(v50, 0, 1, v87);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_25:
  uint64_t v82 = *(int *)(a3 + 20);
  uint64_t v83 = a1 + v82;
  uint64_t v84 = a2 + v82;
  uint64_t v85 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v85 - 8) + 24))(v83, v84, v85);
  return a1;
}

_OWORD *initializeWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0) + 20);
      unint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
    }
    else
    {
      uint64_t v14 = *((void *)a2 + 3);
      *((void *)a1 + 2) = *((void *)a2 + 2);
      *((void *)a1 + 3) = v14;
      *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
      *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
      uint64_t v15 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      uint64_t v16 = *(int *)(v15 + 32);
      uint64_t v17 = (char *)a1 + v16;
      uint64_t v18 = (char *)a2 + v16;
      uint64_t v19 = type metadata accessor for UnknownStorage();
      uint64_t v48 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32);
      v48(v17, v18, v19);
      uint64_t v20 = *(int *)(v15 + 36);
      unint64_t v21 = (_OWORD *)((char *)a1 + v20);
      uint64_t v22 = (_OWORD *)((char *)a2 + v20);
      uint64_t v23 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      uint64_t v24 = *((void *)v23 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v24 + 48))(v22, 1, v23))
      {
        uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        uint64_t v46 = v24;
        long long v26 = v22[1];
        *unint64_t v21 = *v22;
        v21[1] = v26;
        long long v27 = v22[3];
        v21[2] = v22[2];
        v21[3] = v27;
        v48((char *)v21 + v23[8], (char *)v22 + v23[8], v19);
        uint64_t v28 = v23[9];
        uint64_t v43 = v21;
        __dst = (void *)((char *)v21 + v28);
        uint64_t v29 = (void *)((char *)v22 + v28);
        uint64_t v30 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        uint64_t v31 = *(void *)(v30 - 8);
        uint64_t v44 = v30;
        uint64_t v45 = *(unsigned int (**)(void *, uint64_t))(v31 + 48);
        uint64_t v42 = v31;
        if (v45(v29, 1))
        {
          uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(__dst, v29, *(void *)(*(void *)(v32 - 8) + 64));
        }
        else
        {
          void *__dst = *v29;
          *(_OWORD *)(__dst + 1) = *(_OWORD *)(v29 + 1);
          v48((char *)__dst + *(int *)(v44 + 24), (char *)v29 + *(int *)(v44 + 24), v19);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(__dst, 0, 1, v44);
        }
        uint64_t v33 = v23[10];
        uint64_t v34 = (void *)((char *)v43 + v33);
        unint64_t v35 = (void *)((char *)v22 + v33);
        if (((unsigned int (*)(void *, uint64_t, uint64_t))v45)(v35, 1, v44))
        {
          uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64));
        }
        else
        {
          *uint64_t v34 = *v35;
          *(_OWORD *)(v34 + 1) = *(_OWORD *)(v35 + 1);
          v48((char *)v34 + *(int *)(v44 + 24), (char *)v35 + *(int *)(v44 + 24), v19);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v42 + 56))(v34, 0, 1, v44);
        }
        (*(void (**)(_OWORD *, void, uint64_t, int *))(v46 + 56))(v43, 0, 1, v23);
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v37 = *(int *)(a3 + 20);
  uint64_t v38 = (char *)a1 + v37;
  uint64_t v39 = (char *)a2 + v37;
  uint64_t v40 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32))(v38, v39, v40);
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      *(_OWORD *)a1 = *(_OWORD *)a2;
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v12 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0) + 20);
        uint64_t v13 = a1 + v12;
        uint64_t v14 = a2 + v12;
        uint64_t v15 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
      }
      else
      {
        uint64_t v22 = *(void *)(a2 + 24);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = v22;
        *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        uint64_t v23 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
        uint64_t v24 = *(int *)(v23 + 32);
        uint64_t v25 = a1 + v24;
        uint64_t v26 = a2 + v24;
        uint64_t v27 = type metadata accessor for UnknownStorage();
        uint64_t v87 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 32);
        v87(v25, v26, v27);
        uint64_t v28 = *(int *)(v23 + 36);
        uint64_t v29 = (_OWORD *)(a1 + v28);
        uint64_t v30 = (_OWORD *)(a2 + v28);
        uint64_t v31 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
        uint64_t v32 = *((void *)v31 - 1);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v32 + 48))(v30, 1, v31))
        {
          uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
          memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
        }
        else
        {
          uint64_t v81 = v32;
          long long v47 = v30[1];
          *uint64_t v29 = *v30;
          v29[1] = v47;
          long long v48 = v30[3];
          v29[2] = v30[2];
          v29[3] = v48;
          v87((uint64_t)v29 + v31[8], (uint64_t)v30 + v31[8], v27);
          uint64_t v49 = v31[9];
          uint64_t v76 = v29;
          __dst = (void *)((char *)v29 + v49);
          uint64_t v50 = (void *)((char *)v30 + v49);
          uint64_t v51 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
          uint64_t v52 = *(void *)(v51 - 8);
          uint64_t v79 = *(unsigned int (**)(void *, uint64_t))(v52 + 48);
          uint64_t v85 = (int *)v51;
          uint64_t v75 = v52;
          if (v79(v50, 1))
          {
            uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
            memcpy(__dst, v50, *(void *)(*(void *)(v53 - 8) + 64));
          }
          else
          {
            void *__dst = *v50;
            *(_OWORD *)(__dst + 1) = *(_OWORD *)(v50 + 1);
            v87((uint64_t)__dst + v85[6], (uint64_t)v50 + v85[6], v27);
            (*(void (**)(void *, void, uint64_t, int *))(v52 + 56))(__dst, 0, 1, v85);
          }
          uint64_t v62 = v31[10];
          uint64_t v63 = (void *)((char *)v76 + v62);
          uint64_t v64 = (void *)((char *)v30 + v62);
          if (((unsigned int (*)(void *, uint64_t, int *))v79)(v64, 1, v85))
          {
            uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
            memcpy(v63, v64, *(void *)(*(void *)(v65 - 8) + 64));
          }
          else
          {
            void *v63 = *v64;
            *(_OWORD *)(v63 + 1) = *(_OWORD *)(v64 + 1);
            v87((uint64_t)v63 + v85[6], (uint64_t)v64 + v85[6], v27);
            (*(void (**)(void *, void, uint64_t, int *))(v75 + 56))(v63, 0, 1, v85);
          }
          (*(void (**)(_OWORD *, void, uint64_t, int *))(v81 + 56))(v76, 0, 1, v31);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_25;
    }
LABEL_7:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_25;
  }
  if (v10)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
    int v17 = swift_getEnumCaseMultiPayload();
    *(_OWORD *)a1 = *(_OWORD *)a2;
    if (v17 == 1)
    {
      uint64_t v18 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0) + 20);
      uint64_t v19 = a1 + v18;
      uint64_t v20 = a2 + v18;
      uint64_t v21 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      uint64_t v34 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v34;
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      uint64_t v35 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      uint64_t v36 = *(int *)(v35 + 32);
      uint64_t v37 = a1 + v36;
      uint64_t v38 = a2 + v36;
      uint64_t v39 = type metadata accessor for UnknownStorage();
      uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 32);
      v40(v37, v38, v39);
      uint64_t v41 = *(int *)(v35 + 36);
      uint64_t v42 = (_OWORD *)(a1 + v41);
      uint64_t v43 = (_OWORD *)(a2 + v41);
      uint64_t v44 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      uint64_t v45 = (unsigned int (**)(_OWORD *, uint64_t, int *))*((void *)v44 - 1);
      if (v45[6](v43, 1, v44))
      {
        uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
      }
      else
      {
        __dsta = v45;
        long long v54 = v43[1];
        _OWORD *v42 = *v43;
        v42[1] = v54;
        long long v55 = v43[3];
        v42[2] = v43[2];
        v42[3] = v55;
        v40((uint64_t)v42 + v44[8], (uint64_t)v43 + v44[8], v39);
        uint64_t v56 = v44[9];
        uint64_t v86 = (void *)((char *)v42 + v56);
        uint64_t v80 = (void (*)(char *, char *, uint64_t))v40;
        uint64_t v57 = (void *)((char *)v43 + v56);
        uint64_t v58 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        uint64_t v59 = *(void *)(v58 - 8);
        uint64_t v82 = *(unsigned int (**)(void *, uint64_t))(v59 + 48);
        uint64_t v88 = v58;
        uint64_t v77 = v59;
        __src = (void *)v39;
        if (v82(v57, 1))
        {
          uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v86, v57, *(void *)(*(void *)(v60 - 8) + 64));
          uint64_t v61 = v88;
        }
        else
        {
          *uint64_t v86 = *v57;
          *(_OWORD *)(v86 + 1) = *(_OWORD *)(v57 + 1);
          v80((char *)v86 + *(int *)(v88 + 24), (char *)v57 + *(int *)(v88 + 24), v39);
          uint64_t v61 = v88;
          (*(void (**)(void *, void, uint64_t, uint64_t))(v59 + 56))(v86, 0, 1, v88);
        }
        uint64_t v71 = v44[10];
        uint64_t v72 = (void *)((char *)v42 + v71);
        uint64_t v73 = (void *)((char *)v43 + v71);
        if (((unsigned int (*)(void *, uint64_t, uint64_t))v82)(v73, 1, v61))
        {
          uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v72, v73, *(void *)(*(void *)(v74 - 8) + 64));
        }
        else
        {
          *uint64_t v72 = *v73;
          *(_OWORD *)(v72 + 1) = *(_OWORD *)(v73 + 1);
          v80((char *)v72 + *(int *)(v61 + 24), (char *)v73 + *(int *)(v61 + 24), (uint64_t)__src);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v77 + 56))(v72, 0, 1, v61);
        }
        (*((void (**)(_OWORD *, void, uint64_t, int *))__dsta + 7))(v42, 0, 1, v44);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_25:
  uint64_t v66 = *(int *)(a3 + 20);
  uint64_t v67 = a1 + v66;
  uint64_t v68 = a2 + v66;
  uint64_t v69 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 40))(v67, v68, v69);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0F5E238);
}

uint64_t sub_1B0F5E238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_149Tm(a1, a2, a3, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0F5E258);
}

uint64_t sub_1B0F5E258(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_150Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
}

void type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

unint64_t initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v7 = *(void *)a2;
    unint64_t v8 = *(void *)(a2 + 8);
    outlined copy of Data._Representation(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v9 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0) + 20);
      uint64_t v10 = a1 + v9;
      uint64_t v11 = a2 + v9;
      uint64_t v12 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      uint64_t v14 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v14;
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      uint64_t v15 = *(void *)(a2 + 40);
      unint64_t v16 = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v15, v16);
      *(void *)(a1 + 40) = v15;
      *(void *)(a1 + 48) = v16;
      uint64_t v17 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      uint64_t v18 = *(int *)(v17 + 32);
      uint64_t v19 = a1 + v18;
      uint64_t v20 = a2 + v18;
      uint64_t v21 = type metadata accessor for UnknownStorage();
      uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16);
      v22(v19, v20, v21);
      uint64_t v23 = *(int *)(v17 + 36);
      uint64_t v24 = (void *)(a1 + v23);
      uint64_t v25 = (void *)(a2 + v23);
      uint64_t v26 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      uint64_t v27 = *(void *)(v26 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
      }
      else
      {
        uint64_t v58 = v27;
        uint64_t v59 = v26;
        uint64_t v29 = v25[1];
        *uint64_t v24 = *v25;
        v24[1] = v29;
        uint64_t v30 = v25[3];
        v24[2] = v25[2];
        v24[3] = v30;
        uint64_t v31 = v25[4];
        unint64_t v32 = v25[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v31, v32);
        v24[4] = v31;
        v24[5] = v32;
        uint64_t v33 = v25[6];
        unint64_t v34 = v25[7];
        outlined copy of Data._Representation(v33, v34);
        v24[6] = v33;
        v24[7] = v34;
        uint64_t v57 = v21;
        v22((uint64_t)v24 + *(int *)(v59 + 32), (uint64_t)v25 + *(int *)(v59 + 32), v21);
        uint64_t v35 = *(int *)(v26 + 36);
        uint64_t v36 = (void *)((char *)v24 + v35);
        uint64_t v37 = (void *)((char *)v25 + v35);
        uint64_t v38 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        uint64_t v55 = *(void *)(v38 - 8);
        uint64_t v56 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v55 + 48);
        long long v54 = (void (*)(char *, char *, uint64_t))v22;
        if (v56(v37, 1, v38))
        {
          uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v36, v37, *(void *)(*(void *)(v39 - 8) + 64));
          uint64_t v40 = v57;
        }
        else
        {
          uint64_t v41 = v37[1];
          *uint64_t v36 = *v37;
          unint64_t v53 = v37[2];
          outlined copy of Data._Representation(v41, v53);
          v36[1] = v41;
          v36[2] = v53;
          uint64_t v42 = *(int *)(v38 + 24);
          uint64_t v43 = (char *)v36 + v42;
          uint64_t v44 = (char *)v37 + v42;
          uint64_t v45 = v36;
          uint64_t v40 = v57;
          v22((uint64_t)v43, (uint64_t)v44, v57);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v55 + 56))(v45, 0, 1, v38);
        }
        uint64_t v46 = *(int *)(v59 + 40);
        long long v47 = (void *)((char *)v24 + v46);
        long long v48 = (void *)((char *)v25 + v46);
        if (v56(v48, 1, v38))
        {
          uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64));
        }
        else
        {
          uint64_t v50 = v48[1];
          *long long v47 = *v48;
          unint64_t v51 = v48[2];
          outlined copy of Data._Representation(v50, v51);
          v47[1] = v50;
          v47[2] = v51;
          v54((char *)v47 + *(int *)(v38 + 24), (char *)v48 + *(int *)(v38 + 24), v40);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v55 + 56))(v47, 0, 1, v38);
        }
        (*(void (**)(void *, void, uint64_t, uint64_t))(v58 + 56))(v24, 0, 1, v59);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(uint64_t a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v3 = a1
       + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0) + 20);
    uint64_t v4 = type metadata accessor for UnknownStorage();
    int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    uint64_t v6 = v4;
    uint64_t v7 = v3;
LABEL_3:
    return v5(v7, v6);
  }
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(void *)(a1 + 40), *(void *)(a1 + 48));
  uint64_t v9 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  uint64_t v10 = a1 + *(int *)(v9 + 32);
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
  v18(v10, v11);
  uint64_t v12 = a1 + *(int *)(v9 + 36);
  uint64_t v13 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((void *)v13 - 1) + 48))(v12, 1, v13);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(*(void *)(v12 + 32), *(void *)(v12 + 40));
    outlined consume of Data._Representation(*(void *)(v12 + 48), *(void *)(v12 + 56));
    v18(v12 + v13[8], v11);
    uint64_t v14 = v12 + v13[9];
    uint64_t v15 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    unint64_t v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
    if (!v16(v14, 1, v15))
    {
      outlined consume of Data._Representation(*(void *)(v14 + 8), *(void *)(v14 + 16));
      v18(v14 + *(int *)(v15 + 24), v11);
    }
    uint64_t v17 = v12 + v13[10];
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v16)(v17, 1, v15);
    if (!result)
    {
      outlined consume of Data._Representation(*(void *)(v17 + 8), *(void *)(v17 + 16));
      uint64_t v7 = v17 + *(int *)(v15 + 24);
      uint64_t v6 = v11;
      int v5 = (uint64_t (*)(uint64_t, uint64_t))v18;
      goto LABEL_3;
    }
  }
  return result;
}

uint64_t initializeWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = *(void *)(a2 + 8);
  outlined copy of Data._Representation(*(void *)a2, v6);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0) + 20);
    uint64_t v8 = a1 + v7;
    uint64_t v9 = a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    uint64_t v11 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v11;
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v13 = *(void *)(a2 + 48);
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v12, v13);
    *(void *)(a1 + 40) = v12;
    *(void *)(a1 + 48) = v13;
    uint64_t v14 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
    uint64_t v15 = *(int *)(v14 + 32);
    unint64_t v16 = (char *)(a1 + v15);
    uint64_t v17 = (char *)(a2 + v15);
    uint64_t v18 = type metadata accessor for UnknownStorage();
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16);
    v19(v16, v17, v18);
    uint64_t v20 = *(int *)(v14 + 36);
    uint64_t v21 = (void *)(a1 + v20);
    uint64_t v22 = (void *)(a2 + v20);
    uint64_t v23 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    uint64_t v24 = *((void *)v23 - 1);
    if ((*(unsigned int (**)(void *, uint64_t, int *))(v24 + 48))(v22, 1, v23))
    {
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      uint64_t v50 = v24;
      uint64_t v26 = v22[1];
      *uint64_t v21 = *v22;
      v21[1] = v26;
      uint64_t v27 = v22[3];
      v21[2] = v22[2];
      v21[3] = v27;
      uint64_t v28 = v22[4];
      unint64_t v29 = v22[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v28, v29);
      v21[4] = v28;
      v21[5] = v29;
      uint64_t v30 = v22[6];
      unint64_t v31 = v22[7];
      outlined copy of Data._Representation(v30, v31);
      v21[6] = v30;
      v21[7] = v31;
      v19((char *)v21 + v23[8], (char *)v22 + v23[8], v18);
      uint64_t v32 = v23[9];
      __dst = (void *)((char *)v21 + v32);
      uint64_t v33 = (void *)((char *)v22 + v32);
      uint64_t v34 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      uint64_t v48 = *(void *)(v34 - 8);
      uint64_t v35 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v48 + 48);
      long long v47 = v19;
      if (v35(v33, 1, v34))
      {
        uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(__dst, v33, *(void *)(*(void *)(v36 - 8) + 64));
      }
      else
      {
        uint64_t v37 = v33[1];
        uint64_t v46 = v37;
        void *__dst = *v33;
        unint64_t v45 = v33[2];
        outlined copy of Data._Representation(v37, v45);
        __dst[1] = v46;
        __dst[2] = v45;
        v19((char *)__dst + *(int *)(v34 + 24), (char *)v33 + *(int *)(v34 + 24), v18);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v48 + 56))(__dst, 0, 1, v34);
      }
      uint64_t v38 = v23[10];
      uint64_t v39 = (void *)((char *)v21 + v38);
      uint64_t v40 = (void *)((char *)v22 + v38);
      if (v35(v40, 1, v34))
      {
        uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64));
      }
      else
      {
        uint64_t v42 = v40[1];
        *uint64_t v39 = *v40;
        unint64_t v43 = v40[2];
        outlined copy of Data._Representation(v42, v43);
        v39[1] = v42;
        v39[2] = v43;
        v47((char *)v39 + *(int *)(v34 + 24), (char *)v40 + *(int *)(v34 + 24), v18);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v48 + 56))(v39, 0, 1, v34);
      }
      (*(void (**)(void *, void, uint64_t, int *))(v50 + 56))(v21, 0, 1, v23);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v5 = *(void *)a2;
    unint64_t v6 = *(void *)(a2 + 8);
    outlined copy of Data._Representation(*(void *)a2, v6);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v6;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0) + 20);
      uint64_t v8 = a1 + v7;
      uint64_t v9 = a2 + v7;
      uint64_t v10 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v11 = *(void *)(a2 + 24);
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      *(void *)(a1 + 24) = v11;
      uint64_t v12 = *(void *)(a2 + 40);
      unint64_t v13 = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v12, v13);
      *(void *)(a1 + 40) = v12;
      *(void *)(a1 + 48) = v13;
      uint64_t v14 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      uint64_t v15 = *(int *)(v14 + 32);
      uint64_t v16 = a1 + v15;
      uint64_t v17 = a2 + v15;
      uint64_t v18 = type metadata accessor for UnknownStorage();
      uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16);
      v19(v16, v17, v18);
      uint64_t v20 = *(int *)(v14 + 36);
      uint64_t v21 = (void *)(a1 + v20);
      uint64_t v22 = (void *)(a2 + v20);
      uint64_t v23 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      uint64_t v24 = *(void *)(v23 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        uint64_t v53 = v24;
        *uint64_t v21 = *v22;
        v21[1] = v22[1];
        v21[2] = v22[2];
        v21[3] = v22[3];
        uint64_t v26 = v22[4];
        unint64_t v27 = v22[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v26, v27);
        v21[4] = v26;
        v21[5] = v27;
        uint64_t v28 = v22[6];
        unint64_t v29 = v22[7];
        outlined copy of Data._Representation(v28, v29);
        v21[6] = v28;
        v21[7] = v29;
        uint64_t v54 = v18;
        v19((uint64_t)v21 + *(int *)(v23 + 32), (uint64_t)v22 + *(int *)(v23 + 32), v18);
        uint64_t v52 = v23;
        uint64_t v30 = *(int *)(v23 + 36);
        unint64_t v31 = (void *)((char *)v21 + v30);
        uint64_t v32 = (void *)((char *)v22 + v30);
        uint64_t v33 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        uint64_t v51 = *(void *)(v33 - 8);
        uint64_t v34 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v51 + 48);
        uint64_t v50 = (void (*)(char *, char *, uint64_t))v19;
        if (v34(v32, 1, v33))
        {
          uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
          uint64_t v36 = v54;
        }
        else
        {
          *unint64_t v31 = *v32;
          uint64_t v37 = v32[1];
          unint64_t v49 = v32[2];
          outlined copy of Data._Representation(v37, v49);
          v31[1] = v37;
          v31[2] = v49;
          uint64_t v38 = *(int *)(v33 + 24);
          uint64_t v39 = (char *)v31 + v38;
          uint64_t v40 = (char *)v32 + v38;
          uint64_t v41 = v31;
          uint64_t v36 = v54;
          v19((uint64_t)v39, (uint64_t)v40, v54);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(v41, 0, 1, v33);
        }
        uint64_t v42 = *(int *)(v52 + 40);
        unint64_t v43 = (void *)((char *)v21 + v42);
        uint64_t v44 = (void *)((char *)v22 + v42);
        if (v34(v44, 1, v33))
        {
          uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
        }
        else
        {
          void *v43 = *v44;
          uint64_t v46 = v44[1];
          unint64_t v47 = v44[2];
          outlined copy of Data._Representation(v46, v47);
          v43[1] = v46;
          v43[2] = v47;
          v50((char *)v43 + *(int *)(v33 + 24), (char *)v44 + *(int *)(v33 + 24), v36);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(v43, 0, 1, v33);
        }
        (*(void (**)(void *, void, uint64_t, uint64_t))(v53 + 56))(v21, 0, 1, v52);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0) + 20);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  }
  else
  {
    uint64_t v9 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v9;
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    uint64_t v10 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
    uint64_t v11 = *(int *)(v10 + 32);
    uint64_t v12 = (char *)(a1 + v11);
    unint64_t v13 = (char *)(a2 + v11);
    uint64_t v14 = type metadata accessor for UnknownStorage();
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32);
    v15(v12, v13, v14);
    uint64_t v16 = *(int *)(v10 + 36);
    uint64_t v17 = (_OWORD *)(a1 + v16);
    uint64_t v18 = (_OWORD *)(a2 + v16);
    uint64_t v19 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    uint64_t v20 = *((void *)v19 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v20 + 48))(v18, 1, v19))
    {
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      long long v22 = v18[1];
      *uint64_t v17 = *v18;
      v17[1] = v22;
      long long v23 = v18[3];
      v17[2] = v18[2];
      v17[3] = v23;
      v15((char *)v17 + v19[8], (char *)v18 + v19[8], v14);
      uint64_t v24 = v19[9];
      uint64_t v39 = v15;
      __dst = (void *)((char *)v17 + v24);
      uint64_t v25 = (void *)((char *)v18 + v24);
      uint64_t v26 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      uint64_t v27 = *(void *)(v26 - 8);
      uint64_t v40 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v27 + 48);
      uint64_t v38 = v27;
      if (v40(v25, 1, v26))
      {
        uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(__dst, v25, *(void *)(*(void *)(v28 - 8) + 64));
        unint64_t v29 = v39;
      }
      else
      {
        void *__dst = *v25;
        *(_OWORD *)(__dst + 1) = *(_OWORD *)(v25 + 1);
        uint64_t v30 = *(int *)(v26 + 24);
        unint64_t v31 = (char *)v25 + v30;
        unint64_t v29 = v39;
        v39((char *)__dst + v30, v31, v14);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(__dst, 0, 1, v26);
      }
      uint64_t v32 = v26;
      uint64_t v33 = v19[10];
      uint64_t v34 = (void *)((char *)v17 + v33);
      uint64_t v35 = (void *)((char *)v18 + v33);
      if (v40(v35, 1, v32))
      {
        uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64));
      }
      else
      {
        *uint64_t v34 = *v35;
        *(_OWORD *)(v34 + 1) = *(_OWORD *)(v35 + 1);
        v29((char *)v34 + *(int *)(v32 + 24), (char *)v35 + *(int *)(v32 + 24), v14);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v34, 0, 1, v32);
      }
      (*(void (**)(_OWORD *, void, uint64_t, int *))(v20 + 56))(v17, 0, 1, v19);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *(_OWORD *)a1 = *(_OWORD *)a2;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v5 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0) + 20);
      uint64_t v6 = a1 + v5;
      uint64_t v7 = a2 + v5;
      uint64_t v8 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
    }
    else
    {
      uint64_t v9 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v9;
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      uint64_t v10 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      uint64_t v11 = *(int *)(v10 + 32);
      uint64_t v12 = (char *)(a1 + v11);
      unint64_t v13 = (char *)(a2 + v11);
      uint64_t v14 = type metadata accessor for UnknownStorage();
      uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32);
      v15(v12, v13, v14);
      uint64_t v16 = *(int *)(v10 + 36);
      uint64_t v17 = (_OWORD *)(a1 + v16);
      uint64_t v18 = (_OWORD *)(a2 + v16);
      uint64_t v19 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      uint64_t v20 = *((void *)v19 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v20 + 48))(v18, 1, v19))
      {
        uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        long long v22 = v18[1];
        *uint64_t v17 = *v18;
        v17[1] = v22;
        long long v23 = v18[3];
        v17[2] = v18[2];
        v17[3] = v23;
        v15((char *)v17 + v19[8], (char *)v18 + v19[8], v14);
        uint64_t v24 = v19[9];
        uint64_t v40 = v15;
        __dst = (void *)((char *)v17 + v24);
        uint64_t v25 = (void *)((char *)v18 + v24);
        uint64_t v26 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        uint64_t v27 = *(void *)(v26 - 8);
        uint64_t v39 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v27 + 48);
        uint64_t v38 = v27;
        if (v39(v25, 1, v26))
        {
          uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(__dst, v25, *(void *)(*(void *)(v28 - 8) + 64));
          unint64_t v29 = v40;
        }
        else
        {
          void *__dst = *v25;
          *(_OWORD *)(__dst + 1) = *(_OWORD *)(v25 + 1);
          uint64_t v30 = *(int *)(v26 + 24);
          unint64_t v31 = (char *)v25 + v30;
          unint64_t v29 = v40;
          v40((char *)__dst + v30, v31, v14);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(__dst, 0, 1, v26);
        }
        uint64_t v32 = v26;
        uint64_t v33 = v19[10];
        uint64_t v34 = (void *)((char *)v17 + v33);
        uint64_t v35 = (void *)((char *)v18 + v33);
        if (v39(v35, 1, v32))
        {
          uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64));
        }
        else
        {
          *uint64_t v34 = *v35;
          *(_OWORD *)(v34 + 1) = *(_OWORD *)(v35 + 1);
          v29((char *)v34 + *(int *)(v32 + 24), (char *)v35 + *(int *)(v32 + 24), v14);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v34, 0, 1, v32);
        }
        (*(void (**)(_OWORD *, void, uint64_t, int *))(v20 + 56))(v17, 0, 1, v19);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(a1, a2, a3, type metadata accessor for AttachmentLedger_AttachmentMetadata, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_131Tm_0);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_132Tm_0);
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_EncryptionID(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_EncryptionID(uint64_t a1, uint64_t a2)
{
  outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t *initializeWithCopy for AttachmentLedger_EncryptionID(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t *assignWithCopy for AttachmentLedger_EncryptionID(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *initializeWithTake for AttachmentLedger_EncryptionID(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *assignWithTake for AttachmentLedger_EncryptionID(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of Data._Representation(v6, v7);
  uint64_t v8 = *(int *)(a3 + 20);
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0F5FEE4);
}

uint64_t __swift_get_extra_inhabitant_index_131Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0F5FFB8);
}

void *__swift_store_extra_inhabitant_index_132Tm(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for AttachmentLedger_EncryptionID()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v12 = *a2;
      unint64_t v13 = a2[1];
      outlined copy of Data._Representation(*a2, v13);
      *a1 = v12;
      a1[1] = v13;
      if (EnumCaseMultiPayload == 1)
      {
        a1[2] = a2[2];
        uint64_t v14 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                     + 24);
        uint64_t v15 = (char *)a1 + v14;
        uint64_t v16 = (char *)a2 + v14;
        uint64_t v17 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
      }
      else
      {
        a1[2] = a2[2];
        uint64_t v18 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
        uint64_t v19 = *(int *)(v18 + 24);
        uint64_t v20 = (char *)a1 + v19;
        uint64_t v21 = (char *)a2 + v19;
        uint64_t v22 = type metadata accessor for UnknownStorage();
        uint64_t v51 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16);
        v51(v20, v21, v22);
        uint64_t v23 = *(int *)(v18 + 28);
        uint64_t v24 = (uint64_t *)((char *)a1 + v23);
        uint64_t v25 = (uint64_t *)((char *)a2 + v23);
        uint64_t v26 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
        uint64_t v27 = *(void *)(v26 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
        {
          uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
          memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
        }
        else
        {
          uint64_t v48 = v27;
          uint64_t v50 = v26;
          uint64_t v29 = v22;
          uint64_t v30 = *v25;
          unint64_t v31 = v25[1];
          outlined copy of Data._Representation(*v25, v31);
          *uint64_t v24 = v30;
          v24[1] = v31;
          v24[2] = v25[2];
          uint64_t v47 = v29;
          uint64_t v32 = v29;
          uint64_t v33 = v50;
          v51((char *)v24 + *(int *)(v50 + 24), (char *)v25 + *(int *)(v50 + 24), v32);
          uint64_t v34 = *(int *)(v50 + 28);
          unint64_t v49 = v24;
          uint64_t v35 = (void *)((char *)v24 + v34);
          uint64_t v36 = (uint64_t *)((char *)v25 + v34);
          uint64_t v37 = type metadata accessor for AttachmentLedger_EncryptionID(0);
          uint64_t v38 = *(void *)(v37 - 8);
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
          {
            uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
            memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
          }
          else
          {
            unint64_t v46 = v36[1];
            uint64_t v40 = *v36;
            outlined copy of Data._Representation(*v36, v46);
            void *v35 = v40;
            uint64_t v33 = v50;
            v35[1] = v46;
            v51((char *)v35 + *(int *)(v37 + 20), (char *)v36 + *(int *)(v37 + 20), v47);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
          }
          (*(void (**)(void *, void, uint64_t, uint64_t))(v48 + 56))(v49, 0, 1, v33);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v41 = *(int *)(a3 + 20);
    uint64_t v42 = (char *)a1 + v41;
    unint64_t v43 = (char *)a2 + v41;
    uint64_t v44 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 16))(v42, v43, v44);
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4))
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v6 = a1
         + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                  + 24);
      uint64_t v7 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    }
    else
    {
      uint64_t v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
      uint64_t v9 = a1 + *(int *)(v8 + 24);
      uint64_t v10 = type metadata accessor for UnknownStorage();
      uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
      v11(v9, v10);
      uint64_t v12 = a1 + *(int *)(v8 + 28);
      uint64_t v13 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
      {
        outlined consume of Data._Representation(*(void *)v12, *(void *)(v12 + 8));
        v11(v12 + *(int *)(v13 + 24), v10);
        uint64_t v14 = v12 + *(int *)(v13 + 28);
        uint64_t v15 = type metadata accessor for AttachmentLedger_EncryptionID(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
        {
          outlined consume of Data._Representation(*(void *)v14, *(void *)(v14 + 8));
          v11(v14 + *(int *)(v15 + 20), v10);
        }
      }
    }
  }
  uint64_t v16 = a1 + *(int *)(a2 + 20);
  uint64_t v17 = type metadata accessor for UnknownStorage();
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8);
  return v18(v16, v17);
}

void *initializeWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v10 = *a2;
    unint64_t v11 = a2[1];
    outlined copy of Data._Representation(*a2, v11);
    *a1 = v10;
    a1[1] = v11;
    if (EnumCaseMultiPayload == 1)
    {
      a1[2] = a2[2];
      uint64_t v12 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                   + 24);
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      uint64_t v15 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    }
    else
    {
      a1[2] = a2[2];
      uint64_t v16 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
      uint64_t v17 = *(int *)(v16 + 24);
      uint64_t v18 = (char *)a1 + v17;
      uint64_t v19 = (char *)a2 + v17;
      uint64_t v20 = type metadata accessor for UnknownStorage();
      uint64_t v44 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
      v44(v18, v19, v20);
      uint64_t v21 = *(int *)(v16 + 28);
      uint64_t v22 = (void *)((char *)a1 + v21);
      uint64_t v23 = (uint64_t *)((char *)a2 + v21);
      uint64_t v24 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
      uint64_t v25 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
        memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
      }
      else
      {
        uint64_t v41 = v25;
        uint64_t v42 = a3;
        uint64_t v27 = *v23;
        unint64_t v28 = v23[1];
        outlined copy of Data._Representation(*v23, v28);
        *uint64_t v22 = v27;
        v22[1] = v28;
        v22[2] = v23[2];
        v44((char *)v22 + *(int *)(v24 + 24), (char *)v23 + *(int *)(v24 + 24), v20);
        uint64_t v29 = *(int *)(v24 + 28);
        __dst = (void *)((char *)v22 + v29);
        uint64_t v30 = (uint64_t *)((char *)v23 + v29);
        uint64_t v31 = type metadata accessor for AttachmentLedger_EncryptionID(0);
        uint64_t v32 = *(void *)(v31 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
        {
          uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
          memcpy(__dst, v30, *(void *)(*(void *)(v33 - 8) + 64));
        }
        else
        {
          unint64_t v39 = v30[1];
          uint64_t v40 = *v30;
          outlined copy of Data._Representation(*v30, v39);
          void *__dst = v40;
          __dst[1] = v39;
          v44((char *)__dst + *(int *)(v31 + 20), (char *)v30 + *(int *)(v31 + 20), v20);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(__dst, 0, 1, v31);
        }
        a3 = v42;
        (*(void (**)(void *, void, uint64_t, uint64_t))(v41 + 56))(v22, 0, 1, v24);
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v34 = *(int *)(a3 + 20);
  uint64_t v35 = (char *)a1 + v34;
  uint64_t v36 = (char *)a2 + v34;
  uint64_t v37 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16))(v35, v36, v37);
  return a1;
}

uint64_t *assignWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v12 = *a2;
      unint64_t v13 = a2[1];
      outlined copy of Data._Representation(*a2, v13);
      *a1 = v12;
      a1[1] = v13;
      if (EnumCaseMultiPayload == 1)
      {
        a1[2] = a2[2];
        uint64_t v14 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                     + 24);
        uint64_t v15 = (char *)a1 + v14;
        uint64_t v16 = (char *)a2 + v14;
        uint64_t v17 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
      }
      else
      {
        a1[2] = a2[2];
        uint64_t v26 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
        uint64_t v27 = *(int *)(v26 + 24);
        unint64_t v28 = (char *)a1 + v27;
        uint64_t v29 = (char *)a2 + v27;
        uint64_t v30 = type metadata accessor for UnknownStorage();
        uint64_t v80 = *(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16);
        v80(v28, v29, v30);
        uint64_t v31 = *(int *)(v26 + 28);
        uint64_t v32 = (uint64_t *)((char *)a1 + v31);
        uint64_t v33 = (uint64_t *)((char *)a2 + v31);
        uint64_t v34 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
        uint64_t v35 = *(void *)(v34 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
        {
          uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
          memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
        }
        else
        {
          uint64_t v73 = v35;
          uint64_t v77 = a3;
          uint64_t v49 = *v33;
          unint64_t v50 = v33[1];
          outlined copy of Data._Representation(*v33, v50);
          *uint64_t v32 = v49;
          v32[1] = v50;
          v32[2] = v33[2];
          v80((char *)v32 + *(int *)(v34 + 24), (char *)v33 + *(int *)(v34 + 24), v30);
          uint64_t v51 = *(int *)(v34 + 28);
          __dst = (void *)((char *)v32 + v51);
          uint64_t v52 = (uint64_t *)((char *)v33 + v51);
          uint64_t v53 = type metadata accessor for AttachmentLedger_EncryptionID(0);
          uint64_t v54 = *(void *)(v53 - 8);
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
          {
            uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
            memcpy(__dst, v52, *(void *)(*(void *)(v55 - 8) + 64));
          }
          else
          {
            unint64_t v70 = v52[1];
            uint64_t v71 = *v52;
            outlined copy of Data._Representation(*v52, v70);
            void *__dst = v71;
            __dst[1] = v70;
            v80((char *)__dst + *(int *)(v53 + 20), (char *)v52 + *(int *)(v53 + 20), v30);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v54 + 56))(__dst, 0, 1, v53);
          }
          a3 = v77;
          (*(void (**)(void *, void, uint64_t, uint64_t))(v73 + 56))(v32, 0, 1, v34);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_22;
    }
LABEL_7:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
    memcpy(a1, a2, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_22;
  }
  if (v10)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
    int v19 = swift_getEnumCaseMultiPayload();
    uint64_t v20 = *a2;
    unint64_t v21 = a2[1];
    outlined copy of Data._Representation(*a2, v21);
    *a1 = v20;
    a1[1] = v21;
    if (v19 == 1)
    {
      a1[2] = a2[2];
      uint64_t v22 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                   + 24);
      uint64_t v23 = (char *)a1 + v22;
      uint64_t v24 = (char *)a2 + v22;
      uint64_t v25 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      a1[2] = a2[2];
      uint64_t v37 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
      uint64_t v38 = *(int *)(v37 + 24);
      unint64_t v39 = (char *)a1 + v38;
      uint64_t v40 = (char *)a2 + v38;
      uint64_t v41 = type metadata accessor for UnknownStorage();
      uint64_t v42 = *(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 16);
      v42(v39, v40, v41);
      uint64_t v43 = *(int *)(v37 + 28);
      uint64_t v44 = (uint64_t *)((char *)a1 + v43);
      uint64_t v45 = (uint64_t *)((char *)a2 + v43);
      uint64_t v46 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
      uint64_t v47 = *(void *)(v46 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
      {
        uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
        memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64));
      }
      else
      {
        uint64_t v78 = a3;
        uint64_t v79 = v47;
        uint64_t v56 = v42;
        uint64_t v57 = *v45;
        unint64_t v58 = v45[1];
        outlined copy of Data._Representation(*v45, v58);
        *uint64_t v44 = v57;
        v44[1] = v58;
        v44[2] = v45[2];
        __dsta = v56;
        v56((char *)v44 + *(int *)(v46 + 24), (char *)v45 + *(int *)(v46 + 24), v41);
        uint64_t v59 = *(int *)(v46 + 28);
        uint64_t v60 = (void *)((char *)v44 + v59);
        uint64_t v61 = (uint64_t *)((char *)v45 + v59);
        uint64_t v62 = type metadata accessor for AttachmentLedger_EncryptionID(0);
        uint64_t v63 = *(void *)(v62 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62))
        {
          uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
          memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64));
        }
        else
        {
          unint64_t v72 = v61[1];
          uint64_t v74 = *v61;
          outlined copy of Data._Representation(*v61, v72);
          void *v60 = v74;
          v60[1] = v72;
          __dsta((char *)v60 + *(int *)(v62 + 20), (char *)v61 + *(int *)(v62 + 20), v41);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
        }
        a3 = v78;
        (*(void (**)(void *, void, uint64_t, uint64_t))(v79 + 56))(v44, 0, 1, v46);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_22:
  uint64_t v65 = *(int *)(a3 + 20);
  uint64_t v66 = (char *)a1 + v65;
  uint64_t v67 = (char *)a2 + v65;
  uint64_t v68 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 24))(v66, v67, v68);
  return a1;
}

void *initializeWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *(_OWORD *)a1 = *(_OWORD *)a2;
    if (EnumCaseMultiPayload == 1)
    {
      a1[2] = a2[2];
      uint64_t v10 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                   + 24);
      unint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
    }
    else
    {
      a1[2] = a2[2];
      uint64_t v14 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
      uint64_t v15 = *(int *)(v14 + 24);
      uint64_t v16 = (char *)a1 + v15;
      uint64_t v17 = (char *)a2 + v15;
      uint64_t v18 = type metadata accessor for UnknownStorage();
      unint64_t v39 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32);
      v39(v16, v17, v18);
      uint64_t v19 = *(int *)(v14 + 28);
      uint64_t v20 = (void *)((char *)a1 + v19);
      unint64_t v21 = (void *)((char *)a2 + v19);
      uint64_t v22 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
      uint64_t v23 = *(void *)(v22 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
        memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
      }
      else
      {
        *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
        v20[2] = v21[2];
        v39((char *)v20 + *(int *)(v22 + 24), (char *)v21 + *(int *)(v22 + 24), v18);
        uint64_t v25 = *(int *)(v22 + 28);
        uint64_t v38 = (_OWORD *)((char *)v20 + v25);
        uint64_t v26 = (_OWORD *)((char *)v21 + v25);
        uint64_t v27 = type metadata accessor for AttachmentLedger_EncryptionID(0);
        uint64_t v36 = *(void *)(v27 - 8);
        uint64_t v37 = v26;
        unint64_t v28 = v26;
        uint64_t v29 = v27;
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v36 + 48))(v28, 1, v27))
        {
          uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
          memcpy(v38, v37, *(void *)(*(void *)(v30 - 8) + 64));
        }
        else
        {
          *uint64_t v38 = *v37;
          v39((char *)v38 + *(int *)(v29 + 20), (char *)v37 + *(int *)(v29 + 20), v18);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v36 + 56))(v38, 0, 1, v29);
        }
        (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v31 = *(int *)(a3 + 20);
  uint64_t v32 = (char *)a1 + v31;
  uint64_t v33 = (char *)a2 + v31;
  uint64_t v34 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 32))(v32, v33, v34);
  return a1;
}

void *assignWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      *(_OWORD *)a1 = *(_OWORD *)a2;
      if (EnumCaseMultiPayload == 1)
      {
        a1[2] = a2[2];
        uint64_t v12 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                     + 24);
        uint64_t v13 = (char *)a1 + v12;
        uint64_t v14 = (char *)a2 + v12;
        uint64_t v15 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
      }
      else
      {
        a1[2] = a2[2];
        uint64_t v22 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
        uint64_t v23 = *(int *)(v22 + 24);
        uint64_t v24 = (char *)a1 + v23;
        uint64_t v25 = (char *)a2 + v23;
        uint64_t v26 = type metadata accessor for UnknownStorage();
        uint64_t v66 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32);
        v66(v24, v25, v26);
        uint64_t v27 = *(int *)(v22 + 28);
        unint64_t v28 = (void *)((char *)a1 + v27);
        uint64_t v29 = (void *)((char *)a2 + v27);
        uint64_t v30 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
        uint64_t v31 = *(void *)(v30 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
        {
          uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
          memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
        }
        else
        {
          *(_OWORD *)unint64_t v28 = *(_OWORD *)v29;
          v28[2] = v29[2];
          v66((char *)v28 + *(int *)(v30 + 24), (char *)v29 + *(int *)(v30 + 24), v26);
          uint64_t v45 = *(int *)(v30 + 28);
          uint64_t v64 = (_OWORD *)((char *)v28 + v45);
          uint64_t v46 = (_OWORD *)((char *)v29 + v45);
          uint64_t v47 = type metadata accessor for AttachmentLedger_EncryptionID(0);
          uint64_t v60 = *(void *)(v47 - 8);
          uint64_t v62 = v46;
          uint64_t v48 = v46;
          uint64_t v49 = v47;
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v60 + 48))(v48, 1, v47))
          {
            uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
            memcpy(v64, v62, *(void *)(*(void *)(v50 - 8) + 64));
          }
          else
          {
            _OWORD *v64 = *v62;
            v66((char *)v64 + *(int *)(v49 + 20), (char *)v62 + *(int *)(v49 + 20), v26);
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v60 + 56))(v64, 0, 1, v49);
          }
          (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_22;
    }
LABEL_7:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
    memcpy(a1, a2, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_22;
  }
  if (v10)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
    int v17 = swift_getEnumCaseMultiPayload();
    *(_OWORD *)a1 = *(_OWORD *)a2;
    if (v17 == 1)
    {
      a1[2] = a2[2];
      uint64_t v18 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                   + 24);
      uint64_t v19 = (char *)a1 + v18;
      uint64_t v20 = (char *)a2 + v18;
      uint64_t v21 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      a1[2] = a2[2];
      uint64_t v33 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
      uint64_t v34 = *(int *)(v33 + 24);
      uint64_t v35 = (char *)a1 + v34;
      uint64_t v36 = (char *)a2 + v34;
      uint64_t v37 = type metadata accessor for UnknownStorage();
      uint64_t v38 = *(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32);
      v38(v35, v36, v37);
      uint64_t v39 = *(int *)(v33 + 28);
      uint64_t v40 = (void *)((char *)a1 + v39);
      uint64_t v41 = (void *)((char *)a2 + v39);
      uint64_t v42 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
      uint64_t v43 = *(void *)(v42 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
        memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
      }
      else
      {
        *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
        v40[2] = v41[2];
        uint64_t v63 = v38;
        v38((char *)v40 + *(int *)(v42 + 24), (char *)v41 + *(int *)(v42 + 24), v37);
        uint64_t v51 = *(int *)(v42 + 28);
        uint64_t v65 = (_OWORD *)((char *)v40 + v51);
        uint64_t v52 = (_OWORD *)((char *)v41 + v51);
        uint64_t v53 = type metadata accessor for AttachmentLedger_EncryptionID(0);
        uint64_t v61 = *(void *)(v53 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v61 + 48))(v52, 1, v53))
        {
          uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
          memcpy(v65, v52, *(void *)(*(void *)(v54 - 8) + 64));
        }
        else
        {
          *uint64_t v65 = *v52;
          v63((char *)v65 + *(int *)(v53 + 20), (char *)v52 + *(int *)(v53 + 20), v37);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v61 + 56))(v65, 0, 1, v53);
        }
        (*(void (**)(void *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_22:
  uint64_t v55 = *(int *)(a3 + 20);
  uint64_t v56 = (char *)a1 + v55;
  uint64_t v57 = (char *)a2 + v55;
  uint64_t v58 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 40))(v56, v57, v58);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0F61FCC);
}

uint64_t sub_1B0F61FCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_149Tm(a1, a2, a3, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0F61FEC);
}

uint64_t sub_1B0F61FEC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_150Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
}

void type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    if (EnumCaseMultiPayload == 1)
    {
      a1[2] = a2[2];
      uint64_t v9 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                  + 24);
      int v10 = (char *)a1 + v9;
      unint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      a1[2] = a2[2];
      uint64_t v14 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
      uint64_t v15 = *(int *)(v14 + 24);
      uint64_t v16 = (char *)a1 + v15;
      int v17 = (char *)a2 + v15;
      uint64_t v18 = type metadata accessor for UnknownStorage();
      uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16);
      v19(v16, v17, v18);
      uint64_t v20 = *(int *)(v14 + 28);
      uint64_t v21 = (uint64_t *)((char *)a1 + v20);
      uint64_t v22 = (uint64_t *)((char *)a2 + v20);
      uint64_t v23 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
      uint64_t v24 = *(void *)(v23 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
        memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        uint64_t v39 = v24;
        uint64_t v26 = v19;
        uint64_t v27 = *v22;
        unint64_t v28 = v22[1];
        outlined copy of Data._Representation(*v22, v28);
        *uint64_t v21 = v27;
        v21[1] = v28;
        v21[2] = v22[2];
        uint64_t v38 = v26;
        v26((char *)v21 + *(int *)(v23 + 24), (char *)v22 + *(int *)(v23 + 24), v18);
        uint64_t v29 = *(int *)(v23 + 28);
        uint64_t v30 = (void *)((char *)v21 + v29);
        uint64_t v31 = (uint64_t *)((char *)v22 + v29);
        uint64_t v32 = type metadata accessor for AttachmentLedger_EncryptionID(0);
        uint64_t v33 = *(void *)(v32 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
        {
          uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
          memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
        }
        else
        {
          unint64_t v37 = v31[1];
          uint64_t v35 = *v31;
          outlined copy of Data._Representation(*v31, v37);
          *uint64_t v30 = v35;
          v30[1] = v37;
          v38((char *)v30 + *(int *)(v32 + 20), (char *)v31 + *(int *)(v32 + 20), v18);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
        }
        (*(void (**)(void *, void, uint64_t, uint64_t))(v39 + 56))(v21, 0, 1, v23);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(uint64_t a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v3 = a1
       + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                + 24);
    uint64_t v4 = type metadata accessor for UnknownStorage();
    int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    uint64_t v6 = v4;
    uint64_t v7 = v3;
  }
  else
  {
    uint64_t v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
    uint64_t v10 = a1 + *(int *)(v9 + 24);
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
    v16(v10, v11);
    uint64_t v12 = a1 + *(int *)(v9 + 28);
    uint64_t v13 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13);
    if (result) {
      return result;
    }
    outlined consume of Data._Representation(*(void *)v12, *(void *)(v12 + 8));
    v16(v12 + *(int *)(v13 + 24), v11);
    uint64_t v14 = v12 + *(int *)(v13 + 28);
    uint64_t v15 = type metadata accessor for AttachmentLedger_EncryptionID(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15);
    if (result) {
      return result;
    }
    outlined consume of Data._Representation(*(void *)v14, *(void *)(v14 + 8));
    uint64_t v7 = v14 + *(int *)(v15 + 20);
    uint64_t v6 = v11;
    int v5 = (uint64_t (*)(uint64_t, uint64_t))v16;
  }
  return v5(v7, v6);
}

uint64_t *initializeWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(uint64_t *a1, uint64_t *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  outlined copy of Data._Representation(*a2, v6);
  *a1 = v5;
  a1[1] = v6;
  if (EnumCaseMultiPayload == 1)
  {
    a1[2] = a2[2];
    uint64_t v7 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                + 24);
    unint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    a1[2] = a2[2];
    uint64_t v11 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
    uint64_t v12 = *(int *)(v11 + 24);
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for UnknownStorage();
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
    v16(v13, v14, v15);
    uint64_t v17 = *(int *)(v11 + 28);
    uint64_t v18 = (uint64_t *)((char *)a1 + v17);
    uint64_t v19 = (uint64_t *)((char *)a2 + v17);
    uint64_t v20 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
    uint64_t v21 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      uint64_t v36 = v21;
      uint64_t v23 = v16;
      uint64_t v24 = *v19;
      unint64_t v25 = v19[1];
      outlined copy of Data._Representation(*v19, v25);
      *uint64_t v18 = v24;
      v18[1] = v25;
      v18[2] = v19[2];
      uint64_t v35 = v23;
      v23((char *)v18 + *(int *)(v20 + 24), (char *)v19 + *(int *)(v20 + 24), v15);
      uint64_t v26 = *(int *)(v20 + 28);
      uint64_t v27 = (void *)((char *)v18 + v26);
      unint64_t v28 = (uint64_t *)((char *)v19 + v26);
      uint64_t v29 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      uint64_t v30 = *(void *)(v29 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
      {
        uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        unint64_t v34 = v28[1];
        uint64_t v32 = *v28;
        outlined copy of Data._Representation(*v28, v34);
        *uint64_t v27 = v32;
        v27[1] = v34;
        v35((char *)v27 + *(int *)(v29 + 20), (char *)v28 + *(int *)(v29 + 20), v15);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(v18, 0, 1, v20);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *assignWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v5 = *a2;
    unint64_t v6 = a2[1];
    outlined copy of Data._Representation(*a2, v6);
    *a1 = v5;
    a1[1] = v6;
    if (EnumCaseMultiPayload == 1)
    {
      a1[2] = a2[2];
      uint64_t v7 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                  + 24);
      unint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      a1[2] = a2[2];
      uint64_t v11 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
      uint64_t v12 = *(int *)(v11 + 24);
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      uint64_t v15 = type metadata accessor for UnknownStorage();
      uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
      v16(v13, v14, v15);
      uint64_t v17 = *(int *)(v11 + 28);
      uint64_t v18 = (uint64_t *)((char *)a1 + v17);
      uint64_t v19 = (uint64_t *)((char *)a2 + v17);
      uint64_t v20 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
      uint64_t v21 = *(void *)(v20 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
      {
        uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
        memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
      }
      else
      {
        uint64_t v36 = v21;
        uint64_t v23 = v16;
        uint64_t v24 = *v19;
        unint64_t v25 = v19[1];
        outlined copy of Data._Representation(*v19, v25);
        *uint64_t v18 = v24;
        v18[1] = v25;
        v18[2] = v19[2];
        uint64_t v35 = v23;
        v23((char *)v18 + *(int *)(v20 + 24), (char *)v19 + *(int *)(v20 + 24), v15);
        uint64_t v26 = *(int *)(v20 + 28);
        uint64_t v27 = (void *)((char *)v18 + v26);
        unint64_t v28 = (uint64_t *)((char *)v19 + v26);
        uint64_t v29 = type metadata accessor for AttachmentLedger_EncryptionID(0);
        uint64_t v30 = *(void *)(v29 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
        {
          uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
          memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
        }
        else
        {
          unint64_t v34 = v28[1];
          uint64_t v32 = *v28;
          outlined copy of Data._Representation(*v28, v34);
          *uint64_t v27 = v32;
          v27[1] = v34;
          v35((char *)v27 + *(int *)(v29 + 20), (char *)v28 + *(int *)(v29 + 20), v15);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
        }
        (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(v18, 0, 1, v20);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    uint64_t v5 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                + 24);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  }
  else
  {
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    uint64_t v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
    uint64_t v10 = *(int *)(v9 + 24);
    uint64_t v11 = (char *)(a1 + v10);
    uint64_t v12 = (char *)(a2 + v10);
    uint64_t v13 = type metadata accessor for UnknownStorage();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32);
    v14(v11, v12, v13);
    uint64_t v15 = *(int *)(v9 + 28);
    uint64_t v16 = (void *)(a1 + v15);
    uint64_t v17 = (void *)(a2 + v15);
    uint64_t v18 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
      v16[2] = v17[2];
      uint64_t v27 = v14;
      v14((char *)v16 + *(int *)(v18 + 24), (char *)v17 + *(int *)(v18 + 24), v13);
      uint64_t v21 = *(int *)(v18 + 28);
      __dst = (_OWORD *)((char *)v16 + v21);
      uint64_t v22 = (_OWORD *)((char *)v17 + v21);
      uint64_t v23 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      uint64_t v24 = *(void *)(v23 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        memcpy(__dst, v22, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        _OWORD *__dst = *v22;
        v27((char *)__dst + *(int *)(v23 + 20), (char *)v22 + *(int *)(v23 + 20), v13);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v24 + 56))(__dst, 0, 1, v23);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *(_OWORD *)a1 = *(_OWORD *)a2;
    if (EnumCaseMultiPayload == 1)
    {
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v5 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                  + 24);
      uint64_t v6 = a1 + v5;
      uint64_t v7 = a2 + v5;
      uint64_t v8 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
    }
    else
    {
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
      uint64_t v10 = *(int *)(v9 + 24);
      uint64_t v11 = (char *)(a1 + v10);
      uint64_t v12 = (char *)(a2 + v10);
      uint64_t v13 = type metadata accessor for UnknownStorage();
      uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32);
      v14(v11, v12, v13);
      uint64_t v15 = *(int *)(v9 + 28);
      uint64_t v16 = (void *)(a1 + v15);
      uint64_t v17 = (void *)(a2 + v15);
      uint64_t v18 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
      uint64_t v19 = *(void *)(v18 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
        memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
        v16[2] = v17[2];
        uint64_t v27 = v14;
        v14((char *)v16 + *(int *)(v18 + 24), (char *)v17 + *(int *)(v18 + 24), v13);
        uint64_t v21 = *(int *)(v18 + 28);
        __dst = (_OWORD *)((char *)v16 + v21);
        uint64_t v22 = (_OWORD *)((char *)v17 + v21);
        uint64_t v23 = type metadata accessor for AttachmentLedger_EncryptionID(0);
        uint64_t v24 = *(void *)(v23 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
        {
          uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
          memcpy(__dst, v22, *(void *)(*(void *)(v25 - 8) + 64));
        }
        else
        {
          _OWORD *__dst = *v22;
          v27((char *)__dst + *(int *)(v23 + 20), (char *)v22 + *(int *)(v23 + 20), v13);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v24 + 56))(__dst, 0, 1, v23);
        }
        (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(a1, a2, a3, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
}

uint64_t type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t))
{
  uint64_t result = a4(319);
  if (v7 <= 0x3F)
  {
    uint64_t result = a5(319);
    if (v8 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    a1[2] = a2[2];
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(uint64_t a1, uint64_t a2)
{
  outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t *initializeWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  a1[2] = a2[2];
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t *assignWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  a1[2] = a2[2];
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *assignWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v6, v7);
  a1[2] = *(void *)(a2 + 16);
  uint64_t v8 = *(int *)(a3 + 24);
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0F63770);
}

uint64_t sub_1B0F63770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0F63840);
}

void *sub_1B0F63840(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack()
{
  return type metadata completion function for AttachmentLedger_MMCSMetadata.BlobData();
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    a1[2] = a2[2];
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    uint64_t v14 = *(int *)(a3 + 28);
    uint64_t v15 = (uint64_t *)((char *)a1 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      uint64_t v21 = *v16;
      unint64_t v22 = v16[1];
      outlined copy of Data._Representation(*v16, v22);
      *uint64_t v15 = v21;
      v15[1] = v22;
      v15[2] = v16[2];
      v13((char *)v15 + *(int *)(v17 + 24), (char *)v16 + *(int *)(v17 + 24), v12);
      uint64_t v23 = *(int *)(v17 + 28);
      __dst = (void *)((char *)v15 + v23);
      uint64_t v24 = (uint64_t *)((char *)v16 + v23);
      uint64_t v25 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      uint64_t v26 = *(void *)(v25 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        memcpy(__dst, v24, *(void *)(*(void *)(v27 - 8) + 64));
      }
      else
      {
        unint64_t v29 = v24[1];
        uint64_t v30 = *v24;
        outlined copy of Data._Representation(*v24, v29);
        void *__dst = v30;
        __dst[1] = v29;
        v13((char *)__dst + *(int *)(v25 + 20), (char *)v24 + *(int *)(v25 + 20), v12);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(__dst, 0, 1, v25);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(uint64_t a1, uint64_t a2)
{
  outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v12(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t v7 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    outlined consume of Data._Representation(*(void *)v6, *(void *)(v6 + 8));
    v12(v6 + *(int *)(v7 + 24), v5);
    uint64_t v9 = v6 + *(int *)(v7 + 28);
    uint64_t v10 = type metadata accessor for AttachmentLedger_EncryptionID(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10);
    if (!result)
    {
      outlined consume of Data._Representation(*(void *)v9, *(void *)(v9 + 8));
      uint64_t v11 = v9 + *(int *)(v10 + 20);
      return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v5);
    }
  }
  return result;
}

uint64_t *initializeWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  a1[2] = a2[2];
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = (uint64_t *)((char *)a1 + v13);
  uint64_t v15 = (uint64_t *)((char *)a2 + v13);
  uint64_t v16 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    uint64_t v19 = *v15;
    unint64_t v20 = v15[1];
    outlined copy of Data._Representation(*v15, v20);
    *uint64_t v14 = v19;
    v14[1] = v20;
    v14[2] = v15[2];
    v12((char *)v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v11);
    uint64_t v21 = *(int *)(v16 + 28);
    __dst = (void *)((char *)v14 + v21);
    unint64_t v22 = (uint64_t *)((char *)v15 + v21);
    uint64_t v23 = type metadata accessor for AttachmentLedger_EncryptionID(0);
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      memcpy(__dst, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      unint64_t v27 = v22[1];
      uint64_t v28 = *v22;
      outlined copy of Data._Representation(*v22, v27);
      void *__dst = v28;
      __dst[1] = v27;
      v12((char *)__dst + *(int *)(v23 + 20), (char *)v22 + *(int *)(v23 + 20), v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(__dst, 0, 1, v23);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t *assignWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  a1[2] = a2[2];
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  uint64_t v55 = *(void *)(v13 - 8);
  uint64_t v56 = v13;
  uint64_t v14 = *(void (**)(char *, char *))(v55 + 24);
  v14(v11, v12);
  uint64_t v15 = *(int *)(a3 + 28);
  uint64_t v16 = (uint64_t *)((char *)a1 + v15);
  uint64_t v17 = (uint64_t *)((char *)a2 + v15);
  uint64_t v18 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v19 + 48);
  LODWORD(v12) = v20(v16, 1, v18);
  int v21 = v20(v17, 1, v18);
  if (!v12)
  {
    if (!v21)
    {
      uint64_t v34 = *v17;
      unint64_t v35 = v17[1];
      outlined copy of Data._Representation(*v17, v35);
      uint64_t v36 = *v16;
      unint64_t v37 = v16[1];
      *uint64_t v16 = v34;
      v16[1] = v35;
      outlined consume of Data._Representation(v36, v37);
      v16[2] = v17[2];
      ((void (*)(char *, char *, uint64_t))v14)((char *)v16 + *(int *)(v18 + 24), (char *)v17 + *(int *)(v18 + 24), v56);
      uint64_t v38 = *(int *)(v18 + 28);
      uint64_t v39 = (uint64_t *)((char *)v16 + v38);
      uint64_t v40 = (uint64_t *)((char *)v17 + v38);
      uint64_t v41 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      uint64_t v42 = *(void *)(v41 - 8);
      uint64_t v43 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v42 + 48);
      LODWORD(v34) = v43(v39, 1, v41);
      int v44 = v43(v40, 1, v41);
      if (v34)
      {
        if (!v44)
        {
          uint64_t v45 = *v40;
          unint64_t v46 = v40[1];
          outlined copy of Data._Representation(*v40, v46);
          *uint64_t v39 = v45;
          v39[1] = v46;
          (*(void (**)(char *, char *, uint64_t))(v55 + 16))((char *)v39 + *(int *)(v41 + 20), (char *)v40 + *(int *)(v41 + 20), v56);
          (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
          return a1;
        }
      }
      else
      {
        if (!v44)
        {
          uint64_t v50 = *v40;
          unint64_t v51 = v40[1];
          outlined copy of Data._Representation(*v40, v51);
          uint64_t v52 = *v39;
          unint64_t v53 = v39[1];
          *uint64_t v39 = v50;
          v39[1] = v51;
          outlined consume of Data._Representation(v52, v53);
          ((void (*)(char *, char *, uint64_t))v14)((char *)v39 + *(int *)(v41 + 20), (char *)v40 + *(int *)(v41 + 20), v56);
          return a1;
        }
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v39, type metadata accessor for AttachmentLedger_EncryptionID);
      }
      size_t v31 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?)
                                  - 8)
                      + 64);
      uint64_t v32 = v39;
      uint64_t v33 = v40;
      goto LABEL_8;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v16, type metadata accessor for AttachmentLedger_AttachmentEncryption);
LABEL_7:
    size_t v31 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?)
                                - 8)
                    + 64);
    uint64_t v32 = v16;
    uint64_t v33 = v17;
LABEL_8:
    memcpy(v32, v33, v31);
    return a1;
  }
  if (v21) {
    goto LABEL_7;
  }
  uint64_t v22 = *v17;
  unint64_t v23 = v17[1];
  outlined copy of Data._Representation(*v17, v23);
  *uint64_t v16 = v22;
  v16[1] = v23;
  v16[2] = v17[2];
  uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v55 + 16);
  v24((char *)v16 + *(int *)(v18 + 24), (char *)v17 + *(int *)(v18 + 24), v56);
  uint64_t v25 = *(int *)(v18 + 28);
  uint64_t v26 = (uint64_t *)((char *)v16 + v25);
  unint64_t v27 = (uint64_t *)((char *)v17 + v25);
  uint64_t v28 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v29 = *(void *)(v28 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
  {
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    uint64_t v54 = v24;
    uint64_t v48 = *v27;
    unint64_t v47 = v27[1];
    outlined copy of Data._Representation(*v27, v47);
    *uint64_t v26 = v48;
    v26[1] = v47;
    v54((char *)v26 + *(int *)(v28 + 20), (char *)v27 + *(int *)(v28 + 20), v56);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  unint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    v12[2] = v13[2];
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    uint64_t v17 = *(int *)(v14 + 28);
    __dst = (_OWORD *)((char *)v12 + v17);
    uint64_t v18 = (_OWORD *)((char *)v13 + v17);
    uint64_t v19 = type metadata accessor for AttachmentLedger_EncryptionID(0);
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      memcpy(__dst, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      _OWORD *__dst = *v18;
      v10((char *)__dst + *(int *)(v19 + 20), (char *)v18 + *(int *)(v19 + 20), v9);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t *assignWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v6, v7);
  a1[2] = *(void *)(a2 + 16);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v42 = *(void *)(v11 - 8);
  uint64_t v44 = v11;
  uint64_t v12 = *(void (**)(char *, uint64_t))(v42 + 40);
  v12(v9, v10);
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = (uint64_t *)((char *)a1 + v13);
  uint64_t v15 = (char *)(a2 + v13);
  uint64_t v16 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v10) = v18(v14, 1, v16);
  int v19 = v18((uint64_t *)v15, 1, v16);
  if (!v10)
  {
    if (!v19)
    {
      uint64_t v29 = *v14;
      unint64_t v30 = v14[1];
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      outlined consume of Data._Representation(v29, v30);
      v14[2] = *((void *)v15 + 2);
      ((void (*)(char *, char *, uint64_t))v12)((char *)v14 + *(int *)(v16 + 24), &v15[*(int *)(v16 + 24)], v44);
      uint64_t v31 = *(int *)(v16 + 28);
      uint64_t v32 = (uint64_t)v14 + v31;
      uint64_t v33 = &v15[v31];
      uint64_t v34 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      uint64_t v35 = *(void *)(v34 - 8);
      uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
      int v37 = v36(v32, 1, v34);
      int v38 = v36((uint64_t)v33, 1, v34);
      if (v37)
      {
        if (!v38)
        {
          *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
          (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v32 + *(int *)(v34 + 20), &v33[*(int *)(v34 + 20)], v44);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
          return a1;
        }
      }
      else
      {
        if (!v38)
        {
          uint64_t v40 = *(void *)v32;
          unint64_t v41 = *(void *)(v32 + 8);
          *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
          outlined consume of Data._Representation(v40, v41);
          ((void (*)(uint64_t, char *, uint64_t))v12)(v32 + *(int *)(v34 + 20), &v33[*(int *)(v34 + 20)], v44);
          return a1;
        }
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v32, type metadata accessor for AttachmentLedger_EncryptionID);
      }
      size_t v26 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?)
                                  - 8)
                      + 64);
      unint64_t v27 = (void *)v32;
      uint64_t v28 = v33;
      goto LABEL_8;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v14, type metadata accessor for AttachmentLedger_AttachmentEncryption);
LABEL_7:
    size_t v26 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?)
                                - 8)
                    + 64);
    unint64_t v27 = v14;
    uint64_t v28 = v15;
LABEL_8:
    memcpy(v27, v28, v26);
    return a1;
  }
  if (v19) {
    goto LABEL_7;
  }
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  v14[2] = *((void *)v15 + 2);
  uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
  v43((char *)v14 + *(int *)(v16 + 24), &v15[*(int *)(v16 + 24)], v44);
  uint64_t v20 = *(int *)(v16 + 28);
  uint64_t v21 = (_OWORD *)((char *)v14 + v20);
  uint64_t v22 = &v15[v20];
  uint64_t v23 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    *uint64_t v21 = *(_OWORD *)v22;
    v43((char *)v21 + *(int *)(v23 + 20), &v22[*(int *)(v23 + 20)], v44);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0F64BE0);
}

uint64_t sub_1B0F64BE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_134Tm(a1, a2, a3, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0F64C00);
}

void *sub_1B0F64C00(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_135Tm(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
}

void type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v12 = *a2;
      unint64_t v13 = a2[1];
      outlined copy of Data._Representation(*a2, v13);
      *a1 = v12;
      a1[1] = v13;
      if (EnumCaseMultiPayload == 1)
      {
        a1[2] = a2[2];
        *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
        a1[4] = a2[4];
        uint64_t v14 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                     + 28);
        uint64_t v15 = (char *)a1 + v14;
        uint64_t v16 = (char *)a2 + v14;
        uint64_t v17 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
      }
      else
      {
        a1[2] = a2[2];
        *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
        uint64_t v18 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
        uint64_t v19 = *(int *)(v18 + 24);
        uint64_t v20 = (char *)a1 + v19;
        uint64_t v21 = (char *)a2 + v19;
        uint64_t v22 = type metadata accessor for UnknownStorage();
        int v37 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16);
        v37(v20, v21, v22);
        uint64_t v23 = *(int *)(v18 + 28);
        uint64_t v24 = (uint64_t *)((char *)a1 + v23);
        uint64_t v25 = (uint64_t *)((char *)a2 + v23);
        uint64_t v26 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        uint64_t v27 = *(void *)(v26 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
        {
          uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
        }
        else
        {
          uint64_t v29 = v25[1];
          *uint64_t v24 = *v25;
          unint64_t v35 = v25[2];
          uint64_t v36 = v29;
          outlined copy of Data._Representation(v29, v35);
          v24[1] = v36;
          v24[2] = v35;
          v37((char *)v24 + *(int *)(v26 + 24), (char *)v25 + *(int *)(v26 + 24), v22);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v30 = *(int *)(a3 + 20);
    uint64_t v31 = (char *)a1 + v30;
    uint64_t v32 = (char *)a2 + v30;
    uint64_t v33 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16))(v31, v32, v33);
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4))
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v6 = a1
         + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                  + 28);
      uint64_t v7 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    }
    else
    {
      uint64_t v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
      uint64_t v9 = a1 + *(int *)(v8 + 24);
      uint64_t v10 = type metadata accessor for UnknownStorage();
      uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
      v11(v9, v10);
      uint64_t v12 = a1 + *(int *)(v8 + 28);
      uint64_t v13 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
      {
        outlined consume of Data._Representation(*(void *)(v12 + 8), *(void *)(v12 + 16));
        v11(v12 + *(int *)(v13 + 24), v10);
      }
    }
  }
  uint64_t v14 = a1 + *(int *)(a2 + 20);
  uint64_t v15 = type metadata accessor for UnknownStorage();
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8);
  return v16(v14, v15);
}

void *initializeWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v10 = *a2;
    unint64_t v11 = a2[1];
    outlined copy of Data._Representation(*a2, v11);
    *a1 = v10;
    a1[1] = v11;
    if (EnumCaseMultiPayload == 1)
    {
      a1[2] = a2[2];
      *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
      a1[4] = a2[4];
      uint64_t v12 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                   + 28);
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      uint64_t v15 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    }
    else
    {
      a1[2] = a2[2];
      *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
      uint64_t v16 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
      uint64_t v17 = *(int *)(v16 + 24);
      uint64_t v18 = (char *)a1 + v17;
      uint64_t v19 = (char *)a2 + v17;
      uint64_t v20 = type metadata accessor for UnknownStorage();
      unint64_t v35 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
      v35(v18, v19, v20);
      uint64_t v21 = *(int *)(v16 + 28);
      uint64_t v22 = (void *)((char *)a1 + v21);
      uint64_t v23 = (uint64_t *)((char *)a2 + v21);
      uint64_t v24 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      uint64_t v25 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
      }
      else
      {
        uint64_t v27 = v23[1];
        *uint64_t v22 = *v23;
        unint64_t v33 = v23[2];
        uint64_t v34 = v27;
        outlined copy of Data._Representation(v27, v33);
        v22[1] = v34;
        v22[2] = v33;
        v35((char *)v22 + *(int *)(v24 + 24), (char *)v23 + *(int *)(v24 + 24), v20);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v28 = *(int *)(a3 + 20);
  uint64_t v29 = (char *)a1 + v28;
  uint64_t v30 = (char *)a2 + v28;
  uint64_t v31 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16))(v29, v30, v31);
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v12 = *(void *)a2;
      unint64_t v13 = *(void *)(a2 + 8);
      outlined copy of Data._Representation(*(void *)a2, v13);
      *(void *)a1 = v12;
      *(void *)(a1 + 8) = v13;
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v14 = *(void *)(a2 + 16);
        *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
        *(void *)(a1 + 16) = v14;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        uint64_t v15 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                     + 28);
        uint64_t v16 = a1 + v15;
        uint64_t v17 = a2 + v15;
        uint64_t v18 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
      }
      else
      {
        uint64_t v28 = *(void *)(a2 + 16);
        *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
        *(void *)(a1 + 16) = v28;
        uint64_t v29 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
        uint64_t v30 = *(int *)(v29 + 24);
        uint64_t v31 = a1 + v30;
        uint64_t v32 = a2 + v30;
        uint64_t v33 = type metadata accessor for UnknownStorage();
        uint64_t v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 16);
        v65(v31, v32, v33);
        uint64_t v34 = *(int *)(v29 + 28);
        unint64_t v35 = (void *)(a1 + v34);
        uint64_t v36 = (void *)(a2 + v34);
        uint64_t v37 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        uint64_t v38 = *(void *)(v37 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
        {
          uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
        }
        else
        {
          void *v35 = *v36;
          uint64_t v61 = v36[1];
          uint64_t v62 = a3;
          unint64_t v53 = v36[2];
          outlined copy of Data._Representation(v61, v53);
          v35[1] = v61;
          v35[2] = v53;
          a3 = v62;
          v65((uint64_t)v35 + *(int *)(v37 + 24), (uint64_t)v36 + *(int *)(v37 + 24), v33);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_17;
    }
LABEL_7:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_17;
  }
  if (v10)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
    int v20 = swift_getEnumCaseMultiPayload();
    uint64_t v21 = *(void *)a2;
    unint64_t v22 = *(void *)(a2 + 8);
    outlined copy of Data._Representation(*(void *)a2, v22);
    *(void *)a1 = v21;
    *(void *)(a1 + 8) = v22;
    if (v20 == 1)
    {
      uint64_t v23 = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *(void *)(a1 + 16) = v23;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v24 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                   + 28);
      uint64_t v25 = a1 + v24;
      uint64_t v26 = a2 + v24;
      uint64_t v27 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      uint64_t v40 = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *(void *)(a1 + 16) = v40;
      uint64_t v41 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
      uint64_t v42 = *(int *)(v41 + 24);
      uint64_t v43 = (char *)(a1 + v42);
      uint64_t v44 = (char *)(a2 + v42);
      uint64_t v45 = type metadata accessor for UnknownStorage();
      unint64_t v46 = *(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 16);
      v46(v43, v44, v45);
      uint64_t v47 = *(int *)(v41 + 28);
      uint64_t v48 = (void *)(a1 + v47);
      uint64_t v49 = (void *)(a2 + v47);
      uint64_t v50 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      uint64_t v51 = *(void *)(v50 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
      {
        uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64));
      }
      else
      {
        void *v48 = *v49;
        uint64_t v63 = a3;
        uint64_t v64 = v46;
        uint64_t v59 = v49[1];
        unint64_t v60 = v49[2];
        outlined copy of Data._Representation(v59, v60);
        v48[1] = v59;
        v48[2] = v60;
        a3 = v63;
        v64((char *)v48 + *(int *)(v50 + 24), (char *)v49 + *(int *)(v50 + 24), v45);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_17:
  uint64_t v54 = *(int *)(a3 + 20);
  uint64_t v55 = a1 + v54;
  uint64_t v56 = a2 + v54;
  uint64_t v57 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 24))(v55, v56, v57);
  return a1;
}

_OWORD *initializeWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      *((void *)a1 + 2) = *((void *)a2 + 2);
      *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
      *((void *)a1 + 4) = *((void *)a2 + 4);
      uint64_t v10 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                   + 28);
      unint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
    }
    else
    {
      *((void *)a1 + 2) = *((void *)a2 + 2);
      *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
      uint64_t v14 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
      uint64_t v15 = *(int *)(v14 + 24);
      uint64_t v16 = (char *)a1 + v15;
      uint64_t v17 = (char *)a2 + v15;
      uint64_t v18 = type metadata accessor for UnknownStorage();
      uint64_t v30 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32);
      v30(v16, v17, v18);
      uint64_t v19 = *(int *)(v14 + 28);
      int v20 = (void *)((char *)a1 + v19);
      uint64_t v21 = (void *)((char *)a2 + v19);
      uint64_t v22 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      uint64_t v23 = *(void *)(v22 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
      }
      else
      {
        *int v20 = *v21;
        *(_OWORD *)(v20 + 1) = *(_OWORD *)(v21 + 1);
        v30((char *)v20 + *(int *)(v22 + 24), (char *)v21 + *(int *)(v22 + 24), v18);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v25 = *(int *)(a3 + 20);
  uint64_t v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  uint64_t v28 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v26, v27, v28);
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      *(_OWORD *)a1 = *(_OWORD *)a2;
      if (EnumCaseMultiPayload == 1)
      {
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        uint64_t v12 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                     + 28);
        uint64_t v13 = a1 + v12;
        uint64_t v14 = a2 + v12;
        uint64_t v15 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
      }
      else
      {
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
        uint64_t v22 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
        uint64_t v23 = *(int *)(v22 + 24);
        uint64_t v24 = a1 + v23;
        uint64_t v25 = a2 + v23;
        uint64_t v26 = type metadata accessor for UnknownStorage();
        uint64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 32);
        v50(v24, v25, v26);
        uint64_t v27 = *(int *)(v22 + 28);
        uint64_t v28 = (void *)(a1 + v27);
        uint64_t v29 = (void *)(a2 + v27);
        uint64_t v30 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        uint64_t v31 = *(void *)(v30 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
        {
          uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
        }
        else
        {
          void *v28 = *v29;
          *(_OWORD *)(v28 + 1) = *(_OWORD *)(v29 + 1);
          v50((uint64_t)v28 + *(int *)(v30 + 24), (uint64_t)v29 + *(int *)(v30 + 24), v26);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_17;
    }
LABEL_7:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_17;
  }
  if (v10)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
    int v17 = swift_getEnumCaseMultiPayload();
    *(_OWORD *)a1 = *(_OWORD *)a2;
    if (v17 == 1)
    {
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v18 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                   + 28);
      uint64_t v19 = a1 + v18;
      uint64_t v20 = a2 + v18;
      uint64_t v21 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      uint64_t v33 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
      uint64_t v34 = *(int *)(v33 + 24);
      unint64_t v35 = (char *)(a1 + v34);
      uint64_t v36 = (char *)(a2 + v34);
      uint64_t v37 = type metadata accessor for UnknownStorage();
      uint64_t v38 = (void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32);
      uint64_t v51 = *v38;
      (*v38)(v35, v36, v37);
      uint64_t v39 = *(int *)(v33 + 28);
      uint64_t v40 = (void *)(a1 + v39);
      uint64_t v41 = (void *)(a2 + v39);
      uint64_t v42 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      uint64_t v43 = *(void *)(v42 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
      }
      else
      {
        *uint64_t v40 = *v41;
        *(_OWORD *)(v40 + 1) = *(_OWORD *)(v41 + 1);
        v51((char *)v40 + *(int *)(v42 + 24), (char *)v41 + *(int *)(v42 + 24), v37);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_17:
  uint64_t v45 = *(int *)(a3 + 20);
  uint64_t v46 = a1 + v45;
  uint64_t v47 = a2 + v45;
  uint64_t v48 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 40))(v46, v47, v48);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0F66470);
}

uint64_t sub_1B0F66470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_149Tm(a1, a2, a3, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0F66490);
}

uint64_t sub_1B0F66490(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_150Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
}

void type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

unint64_t initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v7 = *(void *)a2;
    unint64_t v8 = *(void *)(a2 + 8);
    outlined copy of Data._Representation(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    if (EnumCaseMultiPayload == 1)
    {
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v9 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                  + 28);
      uint64_t v10 = a1 + v9;
      uint64_t v11 = a2 + v9;
      uint64_t v12 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      uint64_t v14 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
      uint64_t v15 = *(int *)(v14 + 24);
      uint64_t v16 = a1 + v15;
      uint64_t v17 = a2 + v15;
      uint64_t v18 = type metadata accessor for UnknownStorage();
      uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16);
      v19(v16, v17, v18);
      uint64_t v20 = *(int *)(v14 + 28);
      uint64_t v21 = (void *)(a1 + v20);
      uint64_t v22 = (void *)(a2 + v20);
      uint64_t v23 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      uint64_t v24 = *(void *)(v23 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        uint64_t v26 = v22[1];
        *uint64_t v21 = *v22;
        uint64_t v29 = (void (*)(char *, char *, uint64_t))v19;
        unint64_t v27 = v22[2];
        outlined copy of Data._Representation(v26, v27);
        v21[1] = v26;
        v21[2] = v27;
        v29((char *)v21 + *(int *)(v23 + 24), (char *)v22 + *(int *)(v23 + 24), v18);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(uint64_t a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v3 = a1
       + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                + 28);
    uint64_t v4 = type metadata accessor for UnknownStorage();
    int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    uint64_t v6 = v4;
    uint64_t v7 = v3;
  }
  else
  {
    uint64_t v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
    uint64_t v9 = a1 + *(int *)(v8 + 24);
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
    v14(v9, v10);
    uint64_t v11 = a1 + *(int *)(v8 + 28);
    uint64_t v12 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12);
    if (result) {
      return result;
    }
    outlined consume of Data._Representation(*(void *)(v11 + 8), *(void *)(v11 + 16));
    uint64_t v7 = v11 + *(int *)(v12 + 24);
    uint64_t v6 = v10;
    int v5 = (uint64_t (*)(uint64_t, uint64_t))v14;
  }
  return v5(v7, v6);
}

uint64_t initializeWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = *(void *)(a2 + 8);
  outlined copy of Data._Representation(*(void *)a2, v6);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    uint64_t v7 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                + 28);
    uint64_t v8 = a1 + v7;
    uint64_t v9 = a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    uint64_t v11 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
    uint64_t v12 = *(int *)(v11 + 24);
    uint64_t v13 = (char *)(a1 + v12);
    uint64_t v14 = (char *)(a2 + v12);
    uint64_t v15 = type metadata accessor for UnknownStorage();
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
    v16(v13, v14, v15);
    uint64_t v17 = *(int *)(v11 + 28);
    uint64_t v18 = (void *)(a1 + v17);
    uint64_t v19 = (void *)(a2 + v17);
    uint64_t v20 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    uint64_t v21 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      uint64_t v23 = v19[1];
      *uint64_t v18 = *v19;
      uint64_t v26 = v16;
      unint64_t v24 = v19[2];
      outlined copy of Data._Representation(v23, v24);
      v18[1] = v23;
      v18[2] = v24;
      v26((char *)v18 + *(int *)(v20 + 24), (char *)v19 + *(int *)(v20 + 24), v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v5 = *(void *)a2;
    unint64_t v6 = *(void *)(a2 + 8);
    outlined copy of Data._Representation(*(void *)a2, v6);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v6;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *(void *)(a1 + 16) = v7;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v8 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                  + 28);
      uint64_t v9 = a1 + v8;
      uint64_t v10 = a2 + v8;
      uint64_t v11 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      uint64_t v12 = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *(void *)(a1 + 16) = v12;
      uint64_t v13 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
      uint64_t v14 = *(int *)(v13 + 24);
      uint64_t v15 = (char *)(a1 + v14);
      uint64_t v16 = (char *)(a2 + v14);
      uint64_t v17 = type metadata accessor for UnknownStorage();
      uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
      v18(v15, v16, v17);
      uint64_t v19 = *(int *)(v13 + 28);
      uint64_t v20 = (void *)(a1 + v19);
      uint64_t v21 = (void *)(a2 + v19);
      uint64_t v22 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      uint64_t v23 = *(void *)(v22 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
      }
      else
      {
        *uint64_t v20 = *v21;
        uint64_t v28 = v18;
        uint64_t v25 = v21[1];
        unint64_t v26 = v21[2];
        outlined copy of Data._Representation(v25, v26);
        v20[1] = v25;
        v20[2] = v26;
        v28((char *)v20 + *(int *)(v22 + 24), (char *)v21 + *(int *)(v22 + 24), v17);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    uint64_t v5 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                + 28);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  }
  else
  {
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    uint64_t v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
    uint64_t v10 = *(int *)(v9 + 24);
    uint64_t v11 = (char *)(a1 + v10);
    uint64_t v12 = (char *)(a2 + v10);
    uint64_t v13 = type metadata accessor for UnknownStorage();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32);
    v14(v11, v12, v13);
    uint64_t v15 = *(int *)(v9 + 28);
    uint64_t v16 = (void *)(a1 + v15);
    uint64_t v17 = (void *)(a2 + v15);
    uint64_t v18 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      *uint64_t v16 = *v17;
      *(_OWORD *)(v16 + 1) = *(_OWORD *)(v17 + 1);
      v14((char *)v16 + *(int *)(v18 + 24), (char *)v17 + *(int *)(v18 + 24), v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *(_OWORD *)a1 = *(_OWORD *)a2;
    if (EnumCaseMultiPayload == 1)
    {
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v5 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                  + 28);
      uint64_t v6 = a1 + v5;
      uint64_t v7 = a2 + v5;
      uint64_t v8 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
    }
    else
    {
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      uint64_t v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
      uint64_t v10 = *(int *)(v9 + 24);
      uint64_t v11 = a1 + v10;
      uint64_t v12 = a2 + v10;
      uint64_t v13 = type metadata accessor for UnknownStorage();
      uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32);
      v14(v11, v12, v13);
      uint64_t v15 = *(int *)(v9 + 28);
      uint64_t v16 = (void *)(a1 + v15);
      uint64_t v17 = (void *)(a2 + v15);
      uint64_t v18 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      uint64_t v19 = *(void *)(v18 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        *uint64_t v16 = *v17;
        *(_OWORD *)(v16 + 1) = *(_OWORD *)(v17 + 1);
        v14((uint64_t)v16 + *(int *)(v18 + 24), (uint64_t)v17 + *(int *)(v18 + 24), v13);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(a1, a2, a3, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
}

unint64_t initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    unint64_t v8 = *(void *)(a2 + 8);
    outlined copy of Data._Representation(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    uint64_t v9 = *(int *)(a3 + 28);
    uint64_t v10 = a1 + v9;
    uint64_t v11 = a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(uint64_t a1, uint64_t a2)
{
  outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t initializeWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  outlined copy of Data._Representation(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  outlined copy of Data._Representation(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = *(void *)(a1 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  outlined consume of Data._Representation(v8, v9);
  uint64_t v10 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v6, v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_210Tm);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_211Tm);
}

uint64_t type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack()
{
  return type metadata completion function for AttachmentLedger_ErrorResponse();
}

unint64_t initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v20 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    unint64_t v8 = *(void *)(a2 + 8);
    outlined copy of Data._Representation(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = a1 + v9;
    uint64_t v11 = a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    uint64_t v14 = *(int *)(a3 + 28);
    uint64_t v15 = (void *)(a1 + v14);
    uint64_t v16 = (void *)(a2 + v14);
    uint64_t v17 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      uint64_t v21 = v16[1];
      *uint64_t v15 = *v16;
      unint64_t v22 = v16[2];
      outlined copy of Data._Representation(v21, v22);
      v15[1] = v21;
      v15[2] = v22;
      v13((uint64_t)v15 + *(int *)(v17 + 24), (uint64_t)v16 + *(int *)(v17 + 24), v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(uint64_t a1, uint64_t a2)
{
  outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t v7 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    outlined consume of Data._Representation(*(void *)(v6 + 8), *(void *)(v6 + 16));
    uint64_t v9 = v6 + *(int *)(v7 + 24);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

uint64_t initializeWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  outlined copy of Data._Representation(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  uint64_t v16 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    uint64_t v19 = v15[1];
    *uint64_t v14 = *v15;
    unint64_t v20 = v15[2];
    outlined copy of Data._Representation(v19, v20);
    v14[1] = v19;
    v14[2] = v20;
    v12((char *)v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  outlined copy of Data._Representation(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = *(void *)(a1 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  outlined consume of Data._Representation(v8, v9);
  uint64_t v10 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v10;
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for UnknownStorage();
  uint64_t v31 = *(void *)(v14 - 8);
  uint64_t v32 = v14;
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v31 + 24);
  ((void (*)(uint64_t, uint64_t))v15)(v12, v13);
  uint64_t v16 = *(int *)(a3 + 28);
  uint64_t v17 = (char *)(a1 + v16);
  uint64_t v18 = (char *)(a2 + v16);
  uint64_t v19 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  LODWORD(v13) = v21(v17, 1, v19);
  int v22 = v21(v18, 1, v19);
  if (!v13)
  {
    if (!v22)
    {
      *(void *)uint64_t v17 = *(void *)v18;
      uint64_t v27 = *((void *)v18 + 1);
      unint64_t v28 = *((void *)v18 + 2);
      outlined copy of Data._Representation(v27, v28);
      uint64_t v29 = *((void *)v17 + 1);
      unint64_t v30 = *((void *)v17 + 2);
      *((void *)v17 + 1) = v27;
      *((void *)v17 + 2) = v28;
      outlined consume of Data._Representation(v29, v30);
      v15(&v17[*(int *)(v19 + 24)], &v18[*(int *)(v19 + 24)], v32);
      return a1;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v17, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
    goto LABEL_6;
  }
  if (v22)
  {
LABEL_6:
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    memcpy(v17, v18, *(void *)(*(void *)(v25 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v17 = *(void *)v18;
  uint64_t v23 = *((void *)v18 + 1);
  unint64_t v24 = *((void *)v18 + 2);
  outlined copy of Data._Representation(v23, v24);
  *((void *)v17 + 1) = v23;
  *((void *)v17 + 2) = v24;
  (*(void (**)(char *, char *, uint64_t))(v31 + 16))(&v17[*(int *)(v19 + 24)], &v18[*(int *)(v19 + 24)], v32);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(int *)(a3 + 24);
  unint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    *(_OWORD *)(v12 + 1) = *(_OWORD *)(v13 + 1);
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v6, v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v25 = *(void *)(v11 - 8);
  uint64_t v26 = v11;
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v25 + 40);
  v12(v9, v10);
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v10) = v18(v14, 1, v16);
  int v19 = v18(v15, 1, v16);
  if (!v10)
  {
    if (!v19)
    {
      uint64_t v22 = *(void *)(v15 + 16);
      uint64_t v23 = *(void *)(v14 + 8);
      unint64_t v24 = *(void *)(v14 + 16);
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      *(void *)(v14 + 16) = v22;
      outlined consume of Data._Representation(v23, v24);
      ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v14 + *(int *)(v16 + 24), v15 + *(int *)(v16 + 24), v26);
      return a1;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v14, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    memcpy((void *)v14, (const void *)v15, *(void *)(*(void *)(v20 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v14 = *(void *)v15;
  *(_OWORD *)(v14 + 8) = *(_OWORD *)(v15 + 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(v14 + *(int *)(v16 + 24), v15 + *(int *)(v16 + 24), v26);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0F681EC);
}

uint64_t sub_1B0F681EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_134Tm(a1, a2, a3, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
}

uint64_t __swift_get_extra_inhabitant_index_134Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a2 == 12)
  {
    uint64_t v5 = *(void *)(a1 + 8) >> 60;
    if (((4 * v5) & 0xC) != 0) {
      return 16 - ((4 * v5) & 0xC | (v5 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == a2)
    {
      uint64_t v12 = v10;
      uint64_t v13 = a1 + *(int *)(a3 + 24);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
      return v14(v13, a2, v12);
    }
    else
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(a4);
      uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
      uint64_t v17 = v15;
      uint64_t v18 = a1 + *(int *)(a3 + 28);
      return v16(v18, a2, v17);
    }
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0F68348);
}

void *sub_1B0F68348(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_135Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
}

void *__swift_store_extra_inhabitant_index_135Tm(void *result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == a3)
    {
      uint64_t v12 = v10;
      uint64_t v13 = (char *)v6 + *(int *)(a4 + 24);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
      return (void *)v14(v13, a2, a2, v12);
    }
    else
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
      uint64_t v17 = v15;
      uint64_t v18 = (char *)v6 + *(int *)(a4 + 28);
      return (void *)v16(v18, a2, a2, v17);
    }
  }
  return result;
}

void type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void type metadata completion function for AttachmentLedger_AttachmentEncryption(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, void (*a6)(uint64_t))
{
  type metadata accessor for UnknownStorage();
  if (v8 <= 0x3F)
  {
    type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData?(319, a5, a6);
    if (v9 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_UpdateAttachmentRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
    uint64_t v8 = *(void *)(updated - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, updated))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v24 = a2[1];
          *a1 = *a2;
          a1[1] = v24;
          uint64_t v25 = a2[2];
          unint64_t v26 = a2[3];
          swift_bridgeObjectRetain();
          outlined copy of Data._Representation(v25, v26);
          a1[2] = v25;
          a1[3] = v26;
          uint64_t v27 = *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(0) + 24);
          unint64_t v28 = (char *)a1 + v27;
          uint64_t v29 = (char *)a2 + v27;
          uint64_t v30 = type metadata accessor for UnknownStorage();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16))(v28, v29, v30);
          break;
        case 2u:
          uint64_t v146 = v8;
          uint64_t v31 = a2[1];
          *a1 = *a2;
          a1[1] = v31;
          uint64_t v32 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
          uint64_t v33 = *(int *)(v32 + 20);
          uint64_t v141 = (char *)a1 + v33;
          uint64_t v34 = (char *)a2 + v33;
          uint64_t v35 = type metadata accessor for UnknownStorage();
          uint64_t v36 = *(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 16);
          swift_bridgeObjectRetain();
          uint64_t v137 = v35;
          uint64_t v138 = v36;
          v36(v141, v34, v35);
          uint64_t v37 = *(int *)(v32 + 24);
          int v19 = (uint64_t *)((char *)a1 + v37);
          uint64_t v20 = (char *)a2 + v37;
          uint64_t v38 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
          uint64_t v39 = *(void *)(v38 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v20, 1, v38))
          {
            uint64_t v23 = &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?;
            goto LABEL_11;
          }
          uint64_t v134 = v39;
          uint64_t v145 = v19;
          uint64_t v67 = *(void *)v20;
          unint64_t v66 = *((void *)v20 + 1);
          outlined copy of Data._Representation(*(void *)v20, v66);
          *uint64_t v145 = v67;
          v145[1] = v66;
          uint64_t v68 = v145;
          v36((char *)v145 + *(int *)(v38 + 20), &v20[*(int *)(v38 + 20)], v137);
          uint64_t v69 = *(int *)(v38 + 24);
          unint64_t v70 = (uint64_t *)((char *)v145 + v69);
          uint64_t v71 = &v20[v69];
          uint64_t v72 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
          uint64_t v73 = *(void *)(v72 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v71, 1, v72))
          {
            uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
            memcpy(v70, v71, *(void *)(*(void *)(v74 - 8) + 64));
            uint64_t v8 = v146;
            uint64_t v75 = v134;
          }
          else
          {
            uint64_t v130 = v73;
            uint64_t v96 = v72;
            uint64_t v97 = *(void *)v71;
            unint64_t v98 = *((void *)v71 + 1);
            outlined copy of Data._Representation(*(void *)v71, v98);
            void *v70 = v97;
            v70[1] = v98;
            v70[2] = *((void *)v71 + 2);
            v138((char *)v70 + *(int *)(v96 + 24), &v71[*(int *)(v96 + 24)], v137);
            uint64_t v132 = v96;
            uint64_t v99 = *(int *)(v96 + 28);
            uint64_t v128 = (void *)((char *)v70 + v99);
            uint64_t v100 = &v71[v99];
            uint64_t v101 = type metadata accessor for AttachmentLedger_EncryptionID(0);
            uint64_t v102 = *(void *)(v101 - 8);
            uint64_t v103 = (uint64_t *)v100;
            int v104 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v102 + 48))(v100, 1, v101);
            uint64_t v105 = v70;
            if (v104)
            {
              uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
              memcpy(v128, v103, *(void *)(*(void *)(v106 - 8) + 64));
            }
            else
            {
              uint64_t v125 = *v103;
              unint64_t v116 = v103[1];
              outlined copy of Data._Representation(*v103, v116);
              *uint64_t v128 = v125;
              v128[1] = v116;
              uint64_t v105 = v70;
              v138((char *)v128 + *(int *)(v101 + 20), (char *)v103 + *(int *)(v101 + 20), v137);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v102 + 56))(v128, 0, 1, v101);
            }
            uint64_t v8 = v146;
            uint64_t v75 = v134;
            (*(void (**)(void *, void, uint64_t, uint64_t))(v130 + 56))(v105, 0, 1, v132);
            uint64_t v68 = v145;
          }
          (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v75 + 56))(v68, 0, 1, v38);
          break;
        case 3u:
          uint64_t v41 = a2[1];
          *a1 = *a2;
          a1[1] = v41;
          uint64_t v42 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
          uint64_t v43 = *(int *)(v42 + 20);
          long long v147 = (char *)a1 + v43;
          uint64_t v142 = (char *)a2 + v43;
          uint64_t v44 = type metadata accessor for UnknownStorage();
          uint64_t v45 = *(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 16);
          swift_bridgeObjectRetain();
          uint64_t v46 = v142;
          uint64_t v139 = v45;
          uint64_t v143 = v44;
          v45(v147, v46, v44);
          uint64_t v47 = *(int *)(v42 + 24);
          uint64_t v48 = (uint64_t *)((char *)a1 + v47);
          uint64_t v49 = (uint64_t *)((char *)a2 + v47);
          uint64_t v50 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
          uint64_t v51 = *(void *)(v50 - 8);
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
          {
            uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
            memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64));
          }
          else
          {
            uint64_t v148 = v8;
            uint64_t v77 = *v49;
            unint64_t v76 = v49[1];
            outlined copy of Data._Representation(*v49, v76);
            void *v48 = v77;
            v48[1] = v76;
            v48[2] = v49[2];
            *((unsigned char *)v48 + 24) = *((unsigned char *)v49 + 24);
            uint64_t v78 = v49[4];
            unint64_t v79 = v49[5];
            outlined copy of Data._Representation(v78, v79);
            v48[4] = v78;
            v48[5] = v79;
            uint64_t v8 = v148;
            v139((char *)v48 + *(int *)(v50 + 28), (char *)v49 + *(int *)(v50 + 28), v143);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
          }
          break;
        default:
          uint64_t v146 = v8;
          uint64_t v11 = a2[1];
          *a1 = *a2;
          a1[1] = v11;
          uint64_t v12 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
          uint64_t v13 = *(int *)(v12 + 20);
          uint64_t v140 = (char *)a1 + v13;
          uint64_t v14 = (char *)a2 + v13;
          uint64_t v15 = type metadata accessor for UnknownStorage();
          uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
          swift_bridgeObjectRetain();
          uint64_t v136 = v15;
          v16(v140, v14, v15);
          uint64_t v17 = v16;
          uint64_t v18 = *(int *)(v12 + 24);
          int v19 = (uint64_t *)((char *)a1 + v18);
          uint64_t v20 = (char *)a2 + v18;
          uint64_t v21 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
          uint64_t v22 = *(void *)(v21 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
          {
            uint64_t v23 = &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?;
LABEL_11:
            uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(v23);
            memcpy(v19, v20, *(void *)(*(void *)(v40 - 8) + 64));
            uint64_t v8 = v146;
          }
          else
          {
            uint64_t v133 = v22;
            uint64_t v135 = v21;
            uint64_t v144 = v17;
            uint64_t v54 = *(void *)v20;
            unint64_t v53 = *((void *)v20 + 1);
            outlined copy of Data._Representation(*(void *)v20, v53);
            *int v19 = v54;
            v19[1] = v53;
            uint64_t v55 = *((void *)v20 + 3);
            v19[2] = *((void *)v20 + 2);
            v19[3] = v55;
            *((unsigned char *)v19 + 32) = v20[32];
            uint64_t v56 = *((void *)v20 + 5);
            unint64_t v57 = *((void *)v20 + 6);
            swift_bridgeObjectRetain();
            outlined copy of Data._Representation(v56, v57);
            v19[5] = v56;
            v19[6] = v57;
            uint64_t v58 = v135;
            v17((char *)v19 + *(int *)(v135 + 32), &v20[*(int *)(v135 + 32)], v136);
            uint64_t v59 = *(int *)(v135 + 36);
            uint64_t v131 = v19;
            unint64_t v60 = (uint64_t *)((char *)v19 + v59);
            uint64_t v61 = &v20[v59];
            uint64_t v62 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
            uint64_t v63 = *(void *)(v62 - 8);
            uint64_t v129 = (int *)v62;
            if ((*(unsigned int (**)(char *, uint64_t))(v63 + 48))(v61, 1))
            {
              uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
              memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64));
              uint64_t v65 = v131;
            }
            else
            {
              uint64_t v126 = v63;
              uint64_t v85 = *((void *)v61 + 1);
              void *v60 = *(void *)v61;
              v60[1] = v85;
              uint64_t v86 = *((void *)v61 + 3);
              v60[2] = *((void *)v61 + 2);
              v60[3] = v86;
              uint64_t v88 = *((void *)v61 + 4);
              unint64_t v87 = *((void *)v61 + 5);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              outlined copy of Data._Representation(v88, v87);
              v60[4] = v88;
              v60[5] = v87;
              uint64_t v89 = *((void *)v61 + 6);
              unint64_t v90 = *((void *)v61 + 7);
              outlined copy of Data._Representation(v89, v90);
              v60[6] = v89;
              v60[7] = v90;
              v144((char *)v60 + v129[8], &v61[v129[8]], v136);
              uint64_t v91 = v129[9];
              uint64_t v127 = (char *)v60;
              __dst = (void *)((char *)v60 + v91);
              unint64_t v92 = &v61[v91];
              uint64_t v93 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
              uint64_t v94 = *(void *)(v93 - 8);
              uint64_t v124 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48);
              uint64_t v122 = v94;
              if (v124(v92, 1, v93))
              {
                uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                memcpy(__dst, v92, *(void *)(*(void *)(v95 - 8) + 64));
              }
              else
              {
                uint64_t v107 = *((void *)v92 + 1);
                void *__dst = *(void *)v92;
                uint64_t v120 = v61;
                uint64_t v121 = v93;
                unint64_t v108 = *((void *)v92 + 2);
                uint64_t v109 = v107;
                outlined copy of Data._Representation(v107, v108);
                __dst[1] = v109;
                __dst[2] = v108;
                uint64_t v61 = v120;
                uint64_t v93 = v121;
                v144((char *)__dst + *(int *)(v121 + 24), &v92[*(int *)(v121 + 24)], v136);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v94 + 56))(__dst, 0, 1, v121);
              }
              uint64_t v110 = v129;
              uint64_t v111 = v129[10];
              unint64_t v112 = &v127[v111];
              uint64_t v113 = &v61[v111];
              uint64_t v114 = v126;
              if (v124(&v61[v111], 1, v93))
              {
                uint64_t v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                memcpy(v112, v113, *(void *)(*(void *)(v115 - 8) + 64));
              }
              else
              {
                uint64_t v117 = *((void *)v113 + 1);
                *(void *)unint64_t v112 = *(void *)v113;
                uint64_t v118 = v93;
                unint64_t v119 = *((void *)v113 + 2);
                outlined copy of Data._Representation(v117, v119);
                *((void *)v112 + 1) = v117;
                *((void *)v112 + 2) = v119;
                uint64_t v114 = v126;
                uint64_t v110 = v129;
                v144(&v112[*(int *)(v118 + 24)], &v113[*(int *)(v118 + 24)], v136);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v122 + 56))(v112, 0, 1, v118);
              }
              uint64_t v65 = v131;
              (*(void (**)(char *, void, uint64_t, int *))(v114 + 56))(v127, 0, 1, v110);
              uint64_t v58 = v135;
            }
            (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v133 + 56))(v65, 0, 1, v58);
            uint64_t v8 = v146;
          }
          break;
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, updated);
    }
    uint64_t v80 = *(int *)(a3 + 20);
    uint64_t v81 = (char *)a1 + v80;
    uint64_t v82 = (char *)a2 + v80;
    uint64_t v83 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v83 - 8) + 16))(v81, v82, v83);
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_UpdateAttachmentRequest(uint64_t a1, uint64_t a2)
{
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(updated - 8) + 48))(a1, 1, updated))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        swift_bridgeObjectRelease();
        uint64_t v9 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
        uint64_t v10 = a1 + *(int *)(v9 + 20);
        uint64_t v11 = type metadata accessor for UnknownStorage();
        uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
        v12(v10, v11);
        uint64_t v13 = a1 + *(int *)(v9 + 24);
        uint64_t v14 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14))
        {
          outlined consume of Data._Representation(*(void *)v13, *(void *)(v13 + 8));
          swift_bridgeObjectRelease();
          outlined consume of Data._Representation(*(void *)(v13 + 40), *(void *)(v13 + 48));
          v12(v13 + *(int *)(v14 + 32), v11);
          uint64_t v15 = v13 + *(int *)(v14 + 36);
          uint64_t v16 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v16 - 1) + 48))(v15, 1, v16))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined consume of Data._Representation(*(void *)(v15 + 32), *(void *)(v15 + 40));
            outlined consume of Data._Representation(*(void *)(v15 + 48), *(void *)(v15 + 56));
            v12(v15 + v16[8], v11);
            uint64_t v17 = v15 + v16[9];
            uint64_t v18 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
            int v19 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48);
            uint64_t v37 = *v19;
            if (!(*v19)(v17, 1, v18))
            {
              outlined consume of Data._Representation(*(void *)(v17 + 8), *(void *)(v17 + 16));
              v12(v17 + *(int *)(v18 + 24), v11);
            }
            uint64_t v20 = v15 + v16[10];
            if (!v37(v20, 1, v18))
            {
              outlined consume of Data._Representation(*(void *)(v20 + 8), *(void *)(v20 + 16));
              v12(v20 + *(int *)(v18 + 24), v11);
            }
          }
        }
        break;
      case 1u:
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(*(void *)(a1 + 16), *(void *)(a1 + 24));
        uint64_t v21 = a1
            + *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(0) + 24);
        uint64_t v22 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(v21, v22);
        break;
      case 2u:
        swift_bridgeObjectRelease();
        uint64_t v23 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
        uint64_t v24 = a1 + *(int *)(v23 + 20);
        uint64_t v25 = type metadata accessor for UnknownStorage();
        unint64_t v26 = *(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8);
        v26(v24, v25);
        uint64_t v27 = a1 + *(int *)(v23 + 24);
        uint64_t v28 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48))(v27, 1, v28))
        {
          outlined consume of Data._Representation(*(void *)v27, *(void *)(v27 + 8));
          v26(v27 + *(int *)(v28 + 20), v25);
          uint64_t v29 = v27 + *(int *)(v28 + 24);
          uint64_t v30 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 48))(v29, 1, v30))
          {
            outlined consume of Data._Representation(*(void *)v29, *(void *)(v29 + 8));
            v26(v29 + *(int *)(v30 + 24), v25);
            uint64_t v31 = v29 + *(int *)(v30 + 28);
            uint64_t v32 = type metadata accessor for AttachmentLedger_EncryptionID(0);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48))(v31, 1, v32))
            {
              outlined consume of Data._Representation(*(void *)v31, *(void *)(v31 + 8));
              uint64_t v33 = *(int *)(v32 + 20);
              goto LABEL_19;
            }
          }
        }
        break;
      case 3u:
        swift_bridgeObjectRelease();
        uint64_t v34 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
        uint64_t v35 = a1 + *(int *)(v34 + 20);
        uint64_t v25 = type metadata accessor for UnknownStorage();
        unint64_t v26 = *(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8);
        v26(v35, v25);
        uint64_t v31 = a1 + *(int *)(v34 + 24);
        uint64_t v36 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 48))(v31, 1, v36))
        {
          outlined consume of Data._Representation(*(void *)v31, *(void *)(v31 + 8));
          outlined consume of Data._Representation(*(void *)(v31 + 32), *(void *)(v31 + 40));
          uint64_t v33 = *(int *)(v36 + 28);
LABEL_19:
          v26(v31 + v33, v25);
        }
        break;
      default:
        break;
    }
  }
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for UnknownStorage();
  unint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  return v7(v5, v6);
}

void *initializeWithCopy for AttachmentLedger_UpdateAttachmentRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  uint64_t v6 = *(void *)(updated - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, updated))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v23 = a2[1];
        *a1 = *a2;
        a1[1] = v23;
        uint64_t v24 = a2[2];
        unint64_t v25 = a2[3];
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v24, v25);
        a1[2] = v24;
        a1[3] = v25;
        uint64_t v26 = *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(0) + 24);
        uint64_t v27 = (char *)a1 + v26;
        uint64_t v28 = (char *)a2 + v26;
        uint64_t v29 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(v27, v28, v29);
        break;
      case 2u:
        uint64_t v142 = v6;
        uint64_t v30 = a2[1];
        *a1 = *a2;
        a1[1] = v30;
        uint64_t v31 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
        uint64_t v32 = *(int *)(v31 + 20);
        uint64_t v33 = (char *)a1 + v32;
        uint64_t v34 = (char *)a2 + v32;
        uint64_t v35 = type metadata accessor for UnknownStorage();
        uint64_t v36 = *(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 16);
        swift_bridgeObjectRetain();
        uint64_t v135 = v35;
        v36(v33, v34, v35);
        uint64_t v37 = *(int *)(v31 + 24);
        uint64_t v18 = (void *)((char *)a1 + v37);
        int v19 = (char *)a2 + v37;
        uint64_t v38 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
        uint64_t v39 = *(void *)(v38 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v19, 1, v38))
        {
          uint64_t v22 = &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?;
          goto LABEL_9;
        }
        uint64_t v134 = v39;
        uint64_t v141 = v18;
        uint64_t v67 = *(void *)v19;
        unint64_t v66 = *((void *)v19 + 1);
        outlined copy of Data._Representation(*(void *)v19, v66);
        *uint64_t v141 = v67;
        v141[1] = v66;
        uint64_t v68 = v141;
        v36((char *)v141 + *(int *)(v38 + 20), &v19[*(int *)(v38 + 20)], v35);
        uint64_t v69 = *(int *)(v38 + 24);
        unint64_t v70 = (uint64_t *)((char *)v141 + v69);
        uint64_t v71 = &v19[v69];
        uint64_t v72 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
        uint64_t v73 = *(void *)(v72 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v71, 1, v72))
        {
          uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
          memcpy(v70, v71, *(void *)(*(void *)(v74 - 8) + 64));
          uint64_t v6 = v142;
          uint64_t v75 = v134;
        }
        else
        {
          uint64_t v129 = v73;
          uint64_t v132 = v72;
          uint64_t v99 = *(void *)v71;
          unint64_t v100 = *((void *)v71 + 1);
          outlined copy of Data._Representation(*(void *)v71, v100);
          void *v70 = v99;
          v70[1] = v100;
          uint64_t v101 = v132;
          v70[2] = *((void *)v71 + 2);
          v36((char *)v70 + *(int *)(v132 + 24), &v71[*(int *)(v132 + 24)], v135);
          uint64_t v102 = *(int *)(v132 + 28);
          uint64_t v130 = v70;
          uint64_t v103 = (void *)((char *)v70 + v102);
          int v104 = (uint64_t *)&v71[v102];
          uint64_t v105 = type metadata accessor for AttachmentLedger_EncryptionID(0);
          uint64_t v106 = *(void *)(v105 - 8);
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v106 + 48))(v104, 1, v105))
          {
            uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
            memcpy(v103, v104, *(void *)(*(void *)(v107 - 8) + 64));
          }
          else
          {
            uint64_t v127 = v104;
            uint64_t v117 = *v104;
            unint64_t v118 = v104[1];
            outlined copy of Data._Representation(v117, v118);
            *uint64_t v103 = v117;
            v103[1] = v118;
            uint64_t v101 = v132;
            v36((char *)v103 + *(int *)(v105 + 20), (char *)v127 + *(int *)(v105 + 20), v135);
            (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v106 + 56))(v103, 0, 1, v105);
          }
          uint64_t v6 = v142;
          uint64_t v75 = v134;
          (*(void (**)(void *, void, uint64_t, uint64_t))(v129 + 56))(v130, 0, 1, v101);
          uint64_t v68 = v141;
        }
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v75 + 56))(v68, 0, 1, v38);
        break;
      case 3u:
        uint64_t v41 = a2[1];
        *a1 = *a2;
        a1[1] = v41;
        uint64_t v42 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
        uint64_t v43 = *(int *)(v42 + 20);
        uint64_t v143 = (char *)a1 + v43;
        uint64_t v44 = (char *)a2 + v43;
        uint64_t v45 = type metadata accessor for UnknownStorage();
        uint64_t v46 = *(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 16);
        swift_bridgeObjectRetain();
        uint64_t v136 = v45;
        uint64_t v139 = v46;
        v46(v143, v44, v45);
        uint64_t v47 = *(int *)(v42 + 24);
        uint64_t v48 = (void *)((char *)a1 + v47);
        uint64_t v49 = (void *)((char *)a2 + v47);
        uint64_t v50 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
        uint64_t v51 = *(void *)(v50 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
        {
          uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
          memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64));
        }
        else
        {
          uint64_t v144 = v6;
          uint64_t v77 = *v49;
          unint64_t v76 = v49[1];
          outlined copy of Data._Representation(*v49, v76);
          void *v48 = v77;
          v48[1] = v76;
          v48[2] = v49[2];
          *((unsigned char *)v48 + 24) = *((unsigned char *)v49 + 24);
          uint64_t v78 = v49[4];
          unint64_t v79 = v49[5];
          outlined copy of Data._Representation(v78, v79);
          v48[4] = v78;
          v48[5] = v79;
          uint64_t v6 = v144;
          v139((char *)v48 + *(int *)(v50 + 28), (char *)v49 + *(int *)(v50 + 28), v136);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
        }
        break;
      default:
        uint64_t v142 = v6;
        uint64_t v8 = a2[1];
        *a1 = *a2;
        a1[1] = v8;
        uint64_t v9 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
        uint64_t v10 = *(int *)(v9 + 20);
        uint64_t v11 = (char *)a1 + v10;
        uint64_t v12 = (char *)a2 + v10;
        uint64_t v13 = type metadata accessor for UnknownStorage();
        uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
        swift_bridgeObjectRetain();
        uint64_t v15 = v11;
        uint64_t v16 = v14;
        v14(v15, v12, v13);
        uint64_t v17 = *(int *)(v9 + 24);
        uint64_t v18 = (void *)((char *)a1 + v17);
        int v19 = (char *)a2 + v17;
        uint64_t v20 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
        uint64_t v21 = *(void *)(v20 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
        {
          uint64_t v22 = &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?;
LABEL_9:
          uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(v22);
          memcpy(v18, v19, *(void *)(*(void *)(v40 - 8) + 64));
          uint64_t v6 = v142;
        }
        else
        {
          uint64_t v137 = v21;
          uint64_t v138 = v20;
          uint64_t v140 = v16;
          uint64_t v54 = *(void *)v19;
          unint64_t v53 = *((void *)v19 + 1);
          outlined copy of Data._Representation(*(void *)v19, v53);
          *uint64_t v18 = v54;
          v18[1] = v53;
          uint64_t v55 = *((void *)v19 + 3);
          v18[2] = *((void *)v19 + 2);
          v18[3] = v55;
          *((unsigned char *)v18 + 32) = v19[32];
          uint64_t v56 = *((void *)v19 + 5);
          unint64_t v57 = *((void *)v19 + 6);
          swift_bridgeObjectRetain();
          outlined copy of Data._Representation(v56, v57);
          v18[5] = v56;
          v18[6] = v57;
          uint64_t v58 = v138;
          v140((char *)v18 + *(int *)(v138 + 32), &v19[*(int *)(v138 + 32)], v13);
          uint64_t v59 = *(int *)(v138 + 36);
          uint64_t v133 = v18;
          unint64_t v60 = (uint64_t *)((char *)v18 + v59);
          uint64_t v61 = &v19[v59];
          uint64_t v62 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
          uint64_t v63 = *(void *)(v62 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62))
          {
            uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
            memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64));
            uint64_t v65 = v133;
          }
          else
          {
            uint64_t v126 = v63;
            uint64_t v85 = *((void *)v61 + 1);
            void *v60 = *(void *)v61;
            v60[1] = v85;
            uint64_t v86 = *((void *)v61 + 3);
            v60[2] = *((void *)v61 + 2);
            v60[3] = v86;
            uint64_t v87 = v13;
            uint64_t v88 = *((void *)v61 + 4);
            unint64_t v89 = *((void *)v61 + 5);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined copy of Data._Representation(v88, v89);
            v60[4] = v88;
            v60[5] = v89;
            uint64_t v90 = *((void *)v61 + 6);
            unint64_t v91 = *((void *)v61 + 7);
            outlined copy of Data._Representation(v90, v91);
            v60[6] = v90;
            v60[7] = v91;
            uint64_t v124 = v87;
            v140((char *)v60 + *(int *)(v62 + 32), &v61[*(int *)(v62 + 32)], v87);
            uint64_t v128 = v62;
            uint64_t v92 = *(int *)(v62 + 36);
            uint64_t v131 = v60;
            uint64_t v93 = (void *)((char *)v60 + v92);
            uint64_t v94 = &v61[v92];
            uint64_t v95 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
            uint64_t v96 = *(void *)(v95 - 8);
            uint64_t v125 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48);
            uint64_t v123 = v96;
            if (v125(v94, 1, v95))
            {
              uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
              memcpy(v93, v94, *(void *)(*(void *)(v97 - 8) + 64));
              unint64_t v98 = v140;
            }
            else
            {
              uint64_t v108 = *((void *)v94 + 1);
              uint64_t v122 = v108;
              *uint64_t v93 = *(void *)v94;
              uint64_t v109 = v94;
              unint64_t v110 = *((void *)v94 + 2);
              outlined copy of Data._Representation(v108, v110);
              v93[1] = v122;
              v93[2] = v110;
              unint64_t v98 = v140;
              v140((char *)v93 + *(int *)(v95 + 24), &v109[*(int *)(v95 + 24)], v124);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v96 + 56))(v93, 0, 1, v95);
            }
            uint64_t v111 = v128;
            uint64_t v112 = *(int *)(v128 + 40);
            uint64_t v113 = (void *)((char *)v131 + v112);
            uint64_t v114 = &v61[v112];
            uint64_t v115 = v126;
            if (v125(&v61[v112], 1, v95))
            {
              uint64_t v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
              memcpy(v113, v114, *(void *)(*(void *)(v116 - 8) + 64));
            }
            else
            {
              uint64_t v119 = *((void *)v114 + 1);
              *uint64_t v113 = *(void *)v114;
              uint64_t v120 = (char *)v113;
              unint64_t v121 = *((void *)v114 + 2);
              outlined copy of Data._Representation(v119, v121);
              *((void *)v120 + 1) = v119;
              *((void *)v120 + 2) = v121;
              uint64_t v115 = v126;
              uint64_t v111 = v128;
              v98(&v120[*(int *)(v95 + 24)], &v114[*(int *)(v95 + 24)], v124);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v123 + 56))(v120, 0, 1, v95);
            }
            uint64_t v65 = v133;
            (*(void (**)(void *, void, uint64_t, uint64_t))(v115 + 56))(v131, 0, 1, v111);
            uint64_t v58 = v138;
          }
          (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v137 + 56))(v65, 0, 1, v58);
          uint64_t v6 = v142;
        }
        break;
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, updated);
  }
  uint64_t v80 = *(int *)(a3 + 20);
  uint64_t v81 = (char *)a1 + v80;
  uint64_t v82 = (char *)a2 + v80;
  uint64_t v83 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v83 - 8) + 16))(v81, v82, v83);
  return a1;
}

void *assignWithCopy for AttachmentLedger_UpdateAttachmentRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  uint64_t v7 = *(void *)(updated - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, updated);
  int v10 = v8(a2, 1, updated);
  if (v9)
  {
    if (!v10)
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          *a1 = *a2;
          a1[1] = a2[1];
          uint64_t v38 = a2[2];
          unint64_t v39 = a2[3];
          swift_bridgeObjectRetain();
          outlined copy of Data._Representation(v38, v39);
          a1[2] = v38;
          a1[3] = v39;
          uint64_t v40 = *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(0) + 24);
          uint64_t v41 = (char *)a1 + v40;
          uint64_t v42 = (char *)a2 + v40;
          uint64_t v43 = type metadata accessor for UnknownStorage();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16))(v41, v42, v43);
          break;
        case 2u:
          uint64_t v244 = updated;
          uint64_t v253 = a3;
          uint64_t v261 = v7;
          *a1 = *a2;
          a1[1] = a2[1];
          uint64_t v44 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
          uint64_t v45 = *(int *)(v44 + 20);
          uint64_t v46 = (char *)a1 + v45;
          uint64_t v47 = (char *)a2 + v45;
          uint64_t v48 = type metadata accessor for UnknownStorage();
          uint64_t v49 = *(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 16);
          swift_bridgeObjectRetain();
          uint64_t v50 = v48;
          v49(v46, v47, v48);
          uint64_t v51 = *(int *)(v44 + 24);
          uint64_t v52 = (void *)((char *)a1 + v51);
          unint64_t v53 = (void *)((char *)a2 + v51);
          uint64_t v54 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
          uint64_t v55 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v54 - 8);
          if (v55[6](v53, 1, v54))
          {
            uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
            memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
            a3 = v253;
            uint64_t updated = v244;
          }
          else
          {
            uint64_t v238 = v55;
            uint64_t v111 = *v53;
            unint64_t v110 = v53[1];
            outlined copy of Data._Representation(*v53, v110);
            *uint64_t v52 = v111;
            v52[1] = v110;
            uint64_t v233 = v50;
            v49((char *)v52 + *(int *)(v54 + 20), (char *)v53 + *(int *)(v54 + 20), v50);
            uint64_t v112 = *(int *)(v54 + 24);
            uint64_t v113 = (void *)((char *)v52 + v112);
            uint64_t v114 = (uint64_t *)((char *)v53 + v112);
            uint64_t v115 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
            uint64_t v116 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v115 - 8);
            if (v116[6](v114, 1, v115))
            {
              uint64_t v117 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
              memcpy(v113, v114, *(void *)(*(void *)(v117 - 8) + 64));
              a3 = v253;
              uint64_t v7 = v261;
              unint64_t v118 = (void (**)(void *, void, uint64_t, uint64_t))v238;
            }
            else
            {
              __src = v116;
              uint64_t v164 = v115;
              uint64_t v165 = *v114;
              unint64_t v166 = v114[1];
              outlined copy of Data._Representation(*v114, v166);
              *uint64_t v113 = v165;
              v113[1] = v166;
              v113[2] = v114[2];
              v49((char *)v113 + *(int *)(v164 + 24), (char *)v114 + *(int *)(v164 + 24), v233);
              uint64_t v229 = v164;
              uint64_t v167 = *(int *)(v164 + 28);
              uint64_t v168 = (void *)((char *)v113 + v167);
              uint64_t v169 = (uint64_t *)((char *)v114 + v167);
              uint64_t v170 = type metadata accessor for AttachmentLedger_EncryptionID(0);
              uint64_t v171 = *(void *)(v170 - 8);
              if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v171 + 48))(v169, 1, v170))
              {
                uint64_t v172 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
                memcpy(v168, v169, *(void *)(*(void *)(v172 - 8) + 64));
              }
              else
              {
                uint64_t v198 = *v169;
                uint64_t v221 = (void *)*v169;
                uint64_t v224 = v169;
                unint64_t v199 = v169[1];
                outlined copy of Data._Representation(v198, v199);
                void *v168 = v221;
                v168[1] = v199;
                v49((char *)v168 + *(int *)(v170 + 20), (char *)v224 + *(int *)(v170 + 20), v233);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v171 + 56))(v168, 0, 1, v170);
              }
              a3 = v253;
              uint64_t v7 = v261;
              unint64_t v118 = (void (**)(void *, void, uint64_t, uint64_t))v238;
              (*((void (**)(void *, void, uint64_t, uint64_t))__src + 7))(v113, 0, 1, v229);
            }
            v118[7](v52, 0, 1, v54);
            uint64_t updated = v244;
          }
          break;
        case 3u:
          uint64_t v259 = v7;
          *a1 = *a2;
          a1[1] = a2[1];
          uint64_t v57 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
          uint64_t v58 = *(int *)(v57 + 20);
          unint64_t v254 = (char *)a1 + v58;
          uint64_t v59 = (char *)a2 + v58;
          uint64_t v60 = type metadata accessor for UnknownStorage();
          uint64_t v61 = *(void (**)(char *, char *, void *))(*(void *)(v60 - 8) + 16);
          swift_bridgeObjectRetain();
          uint64_t v236 = (void *)v60;
          v245 = v61;
          v61(v254, v59, (void *)v60);
          uint64_t v62 = *(int *)(v57 + 24);
          uint64_t v63 = (void *)((char *)a1 + v62);
          uint64_t v64 = (void *)((char *)a2 + v62);
          uint64_t v65 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
          uint64_t v66 = *(void *)(v65 - 8);
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65))
          {
            uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
            memcpy(v63, v64, *(void *)(*(void *)(v67 - 8) + 64));
          }
          else
          {
            uint64_t v255 = a3;
            uint64_t v119 = *v64;
            unint64_t v120 = v64[1];
            outlined copy of Data._Representation(*v64, v120);
            void *v63 = v119;
            v63[1] = v120;
            uint64_t v121 = v64[2];
            *((unsigned char *)v63 + 24) = *((unsigned char *)v64 + 24);
            v63[2] = v121;
            uint64_t v122 = v64[4];
            unint64_t v123 = v64[5];
            outlined copy of Data._Representation(v122, v123);
            v63[4] = v122;
            v63[5] = v123;
            a3 = v255;
            v245((char *)v63 + *(int *)(v65 + 28), (char *)v64 + *(int *)(v65 + 28), v236);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v66 + 56))(v63, 0, 1, v65);
          }
          goto LABEL_28;
        default:
          uint64_t v252 = a3;
          uint64_t v259 = v7;
          *a1 = *a2;
          a1[1] = a2[1];
          uint64_t v11 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
          uint64_t v12 = *(int *)(v11 + 20);
          uint64_t v13 = (char *)a1 + v12;
          uint64_t v14 = (char *)a2 + v12;
          uint64_t v15 = type metadata accessor for UnknownStorage();
          uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
          swift_bridgeObjectRetain();
          uint64_t v17 = v13;
          uint64_t v18 = v16;
          v16(v17, v14, v15);
          uint64_t v19 = *(int *)(v11 + 24);
          uint64_t v20 = (void *)((char *)a1 + v19);
          uint64_t v21 = (void *)((char *)a2 + v19);
          uint64_t v22 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
          uint64_t v23 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v22 - 8);
          if (v23[6](v21, 1, v22))
          {
            uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
            memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
            a3 = v252;
LABEL_28:
            uint64_t v7 = v259;
          }
          else
          {
            unint64_t v237 = v23;
            uint64_t v241 = v22;
            v246 = v18;
            uint64_t v69 = *v21;
            unint64_t v68 = v21[1];
            outlined copy of Data._Representation(*v21, v68);
            *uint64_t v20 = v69;
            v20[1] = v68;
            v20[2] = v21[2];
            uint64_t v70 = v21[3];
            *((unsigned char *)v20 + 32) = *((unsigned char *)v21 + 32);
            v20[3] = v70;
            uint64_t v71 = v21[5];
            unint64_t v72 = v21[6];
            swift_bridgeObjectRetain();
            outlined copy of Data._Representation(v71, v72);
            v20[5] = v71;
            v20[6] = v72;
            uint64_t v73 = v241;
            v246((char *)v20 + *(int *)(v241 + 32), (char *)v21 + *(int *)(v241 + 32), v15);
            uint64_t v74 = *(int *)(v241 + 36);
            uint64_t v75 = (void *)((char *)v20 + v74);
            unint64_t v76 = (uint64_t *)((char *)v21 + v74);
            uint64_t v77 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
            uint64_t v232 = v15;
            uint64_t v78 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v77 - 8);
            if (v78[6](v76, 1, v77))
            {
              uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
              memcpy(v75, v76, *(void *)(*(void *)(v79 - 8) + 64));
              a3 = v252;
              uint64_t v7 = v259;
            }
            else
            {
              uint64_t v219 = v78;
              *uint64_t v75 = *v76;
              v75[1] = v76[1];
              v75[2] = v76[2];
              v75[3] = v76[3];
              uint64_t v141 = v76[4];
              unint64_t v142 = v76[5];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              outlined copy of Data._Representation(v141, v142);
              v75[4] = v141;
              v75[5] = v142;
              uint64_t v144 = v76[6];
              unint64_t v143 = v76[7];
              outlined copy of Data._Representation(v144, v143);
              v75[6] = v144;
              v75[7] = v143;
              v246((char *)v75 + *(int *)(v77 + 32), (char *)v76 + *(int *)(v77 + 32), v232);
              uint64_t v222 = v77;
              uint64_t v145 = *(int *)(v77 + 36);
              v228 = v75;
              __dst = (void *)((char *)v75 + v145);
              uint64_t v146 = (void *)((char *)v76 + v145);
              uint64_t v147 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
              uint64_t v148 = *(void *)(v147 - 8);
              uint64_t v215 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v148 + 48);
              uint64_t v213 = v148;
              if (v215(v146, 1, v147))
              {
                uint64_t v149 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                memcpy(__dst, v146, *(void *)(*(void *)(v149 - 8) + 64));
              }
              else
              {
                void *__dst = *v146;
                uint64_t v211 = v146[1];
                uint64_t v212 = v147;
                unint64_t v183 = v146[2];
                outlined copy of Data._Representation(v211, v183);
                __dst[1] = v211;
                __dst[2] = v183;
                uint64_t v147 = v212;
                v246((char *)__dst + *(int *)(v212 + 24), (char *)v146 + *(int *)(v212 + 24), v232);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v148 + 56))(__dst, 0, 1, v212);
              }
              uint64_t v184 = v222;
              uint64_t v185 = *(int *)(v222 + 40);
              uint64_t v186 = (void *)((char *)v228 + v185);
              uint64_t v187 = (void *)((char *)v76 + v185);
              uint64_t v188 = (void (**)(void *, void, uint64_t, void))v219;
              if (v215(v187, 1, v147))
              {
                uint64_t v189 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                memcpy(v186, v187, *(void *)(*(void *)(v189 - 8) + 64));
              }
              else
              {
                *uint64_t v186 = *v187;
                uint64_t v200 = v147;
                uint64_t v201 = v187[1];
                unint64_t v202 = v187[2];
                outlined copy of Data._Representation(v201, v202);
                v186[1] = v201;
                v186[2] = v202;
                uint64_t v188 = (void (**)(void *, void, uint64_t, void))v219;
                uint64_t v184 = v222;
                v246((char *)v186 + *(int *)(v200 + 24), (char *)v187 + *(int *)(v200 + 24), v232);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v213 + 56))(v186, 0, 1, v200);
              }
              uint64_t v7 = v259;
              v188[7](v228, 0, 1, v184);
              a3 = v252;
              uint64_t v73 = v241;
            }
            (*((void (**)(void *, void, uint64_t, uint64_t))v237 + 7))(v20, 0, 1, v73);
          }
          break;
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, updated);
      goto LABEL_30;
    }
LABEL_8:
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    memcpy(a1, a2, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_30;
  }
  if (v10)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v80 = a2[2];
        unint64_t v81 = a2[3];
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v80, v81);
        a1[2] = v80;
        a1[3] = v81;
        uint64_t v82 = *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(0) + 24);
        uint64_t v83 = (char *)a1 + v82;
        uint64_t v84 = (char *)a2 + v82;
        uint64_t v85 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v85 - 8) + 16))(v83, v84, v85);
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v86 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
        uint64_t v87 = *(int *)(v86 + 20);
        uint64_t v262 = (char *)a1 + v87;
        uint64_t v88 = (char *)a2 + v87;
        uint64_t v89 = type metadata accessor for UnknownStorage();
        uint64_t v90 = *(void (**)(char *, char *, uint64_t))(*(void *)(v89 - 8) + 16);
        swift_bridgeObjectRetain();
        uint64_t v91 = v89;
        v90(v262, v88, v89);
        uint64_t v92 = *(int *)(v86 + 24);
        uint64_t v93 = (void *)((char *)a1 + v92);
        uint64_t v94 = (void *)((char *)a2 + v92);
        uint64_t v95 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
        uint64_t v96 = *(void *)(v95 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v96 + 48))(v94, 1, v95))
        {
          uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
          memcpy(v93, v94, *(void *)(*(void *)(v97 - 8) + 64));
        }
        else
        {
          uint64_t v251 = v96;
          uint64_t v257 = a3;
          uint64_t v150 = *v94;
          unint64_t v151 = v94[1];
          outlined copy of Data._Representation(*v94, v151);
          *uint64_t v93 = v150;
          v93[1] = v151;
          uint64_t v249 = v91;
          v90((char *)v93 + *(int *)(v95 + 20), (char *)v94 + *(int *)(v95 + 20), v91);
          uint64_t v152 = *(int *)(v95 + 24);
          uint64_t v153 = (void *)((char *)v93 + v152);
          uint64_t v154 = (uint64_t *)((char *)v94 + v152);
          uint64_t v155 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
          uint64_t v156 = *(void *)(v155 - 8);
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v156 + 48))(v154, 1, v155))
          {
            uint64_t v157 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
            memcpy(v153, v154, *(void *)(*(void *)(v157 - 8) + 64));
            a3 = v257;
            uint64_t v158 = v251;
          }
          else
          {
            uint64_t v231 = v156;
            uint64_t v243 = v155;
            uint64_t v190 = *v154;
            unint64_t v191 = v154[1];
            outlined copy of Data._Representation(*v154, v191);
            *uint64_t v153 = v190;
            v153[1] = v191;
            uint64_t v192 = v243;
            v153[2] = v154[2];
            v90((char *)v153 + *(int *)(v243 + 24), (char *)v154 + *(int *)(v243 + 24), v249);
            uint64_t v193 = *(int *)(v243 + 28);
            v235 = v153;
            uint64_t v240 = (void *)((char *)v153 + v193);
            v194 = (uint64_t *)((char *)v154 + v193);
            uint64_t v195 = type metadata accessor for AttachmentLedger_EncryptionID(0);
            uint64_t v196 = *(void *)(v195 - 8);
            if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v196 + 48))(v194, 1, v195))
            {
              uint64_t v197 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
              memcpy(v240, v194, *(void *)(*(void *)(v197 - 8) + 64));
            }
            else
            {
              unint64_t v208 = v194[1];
              uint64_t v225 = *v194;
              outlined copy of Data._Representation(*v194, v208);
              *uint64_t v240 = v225;
              v240[1] = v208;
              uint64_t v192 = v243;
              v90((char *)v240 + *(int *)(v195 + 20), (char *)v194 + *(int *)(v195 + 20), v249);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v196 + 56))(v240, 0, 1, v195);
            }
            a3 = v257;
            uint64_t v158 = v251;
            (*(void (**)(void *, void, uint64_t, uint64_t))(v231 + 56))(v235, 0, 1, v192);
          }
          (*(void (**)(void *, void, uint64_t, uint64_t))(v158 + 56))(v93, 0, 1, v95);
        }
        goto LABEL_62;
      case 3u:
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v98 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
        uint64_t v99 = *(int *)(v98 + 20);
        uint64_t v263 = (char *)a1 + v99;
        unint64_t v100 = (char *)a2 + v99;
        uint64_t v101 = type metadata accessor for UnknownStorage();
        uint64_t v102 = *(void (**)(char *, char *, uint64_t))(*(void *)(v101 - 8) + 16);
        swift_bridgeObjectRetain();
        uint64_t v103 = v263;
        uint64_t v247 = v101;
        uint64_t v264 = v102;
        v102(v103, v100, v101);
        uint64_t v104 = *(int *)(v98 + 24);
        uint64_t v105 = (void *)((char *)a1 + v104);
        uint64_t v106 = (void *)((char *)a2 + v104);
        uint64_t v107 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
        uint64_t v108 = *(void *)(v107 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v108 + 48))(v106, 1, v107))
        {
          uint64_t v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
          memcpy(v105, v106, *(void *)(*(void *)(v109 - 8) + 64));
        }
        else
        {
          uint64_t v258 = a3;
          uint64_t v159 = *v106;
          unint64_t v160 = v106[1];
          outlined copy of Data._Representation(*v106, v160);
          void *v105 = v159;
          v105[1] = v160;
          uint64_t v161 = v106[2];
          *((unsigned char *)v105 + 24) = *((unsigned char *)v106 + 24);
          v105[2] = v161;
          uint64_t v162 = v106[4];
          unint64_t v163 = v106[5];
          outlined copy of Data._Representation(v162, v163);
          v105[4] = v162;
          v105[5] = v163;
          a3 = v258;
          v264((char *)v105 + *(int *)(v107 + 28), (char *)v106 + *(int *)(v107 + 28), v247);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v108 + 56))(v105, 0, 1, v107);
        }
        goto LABEL_62;
      default:
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v26 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
        uint64_t v27 = *(int *)(v26 + 20);
        v260 = (char *)a1 + v27;
        uint64_t v28 = (char *)a2 + v27;
        uint64_t v29 = type metadata accessor for UnknownStorage();
        uint64_t v30 = *(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16);
        swift_bridgeObjectRetain();
        uint64_t v31 = v30;
        uint64_t v250 = v29;
        v30(v260, v28, v29);
        uint64_t v32 = *(int *)(v26 + 24);
        uint64_t v33 = (void *)((char *)a1 + v32);
        uint64_t v34 = (void *)((char *)a2 + v32);
        uint64_t v35 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
        uint64_t v36 = *(void *)(v35 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
        {
          uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
          memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
        }
        else
        {
          uint64_t v242 = v36;
          uint64_t v256 = a3;
          unint64_t v248 = v31;
          uint64_t v129 = *v34;
          unint64_t v130 = v34[1];
          outlined copy of Data._Representation(*v34, v130);
          *uint64_t v33 = v129;
          v33[1] = v130;
          v33[2] = v34[2];
          uint64_t v131 = v34[3];
          *((unsigned char *)v33 + 32) = *((unsigned char *)v34 + 32);
          v33[3] = v131;
          uint64_t v132 = v34[5];
          unint64_t v133 = v34[6];
          swift_bridgeObjectRetain();
          outlined copy of Data._Representation(v132, v133);
          v33[5] = v132;
          v33[6] = v133;
          v31((char *)v33 + *(int *)(v35 + 32), (char *)v34 + *(int *)(v35 + 32), v250);
          unint64_t v239 = (void *)v35;
          uint64_t v134 = *(int *)(v35 + 36);
          uint64_t v135 = (void *)((char *)v33 + v134);
          uint64_t v136 = (uint64_t *)((char *)v34 + v134);
          uint64_t v137 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
          uint64_t v138 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v137 - 8);
          if (v138[6](v136, 1, v137))
          {
            uint64_t v139 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
            memcpy(v135, v136, *(void *)(*(void *)(v139 - 8) + 64));
            a3 = v256;
            uint64_t v140 = v242;
          }
          else
          {
            __srca = v138;
            *uint64_t v135 = *v136;
            v135[1] = v136[1];
            v135[2] = v136[2];
            uint64_t v234 = (int *)v137;
            v135[3] = v136[3];
            uint64_t v173 = v31;
            uint64_t v175 = v136[4];
            unint64_t v174 = v136[5];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined copy of Data._Representation(v175, v174);
            v135[4] = v175;
            v135[5] = v174;
            uint64_t v176 = v136[6];
            unint64_t v177 = v136[7];
            outlined copy of Data._Representation(v176, v177);
            v135[6] = v176;
            v135[7] = v177;
            v173((char *)v135 + v234[8], (char *)v136 + v234[8], v250);
            uint64_t v178 = v234[9];
            v230 = v135;
            v220 = (void *)((char *)v135 + v178);
            v179 = (void *)((char *)v136 + v178);
            uint64_t v180 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
            uint64_t v181 = *(void *)(v180 - 8);
            unint64_t v223 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v181 + 48);
            __dsta = (void *)v181;
            if (v223(v179, 1, v180))
            {
              uint64_t v182 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
              memcpy(v220, v179, *(void *)(*(void *)(v182 - 8) + 64));
            }
            else
            {
              void *v220 = *v179;
              unint64_t v214 = v179[2];
              uint64_t v216 = v179[1];
              outlined copy of Data._Representation(v216, v214);
              v220[1] = v216;
              v220[2] = v214;
              v248((char *)v220 + *(int *)(v180 + 24), (char *)v179 + *(int *)(v180 + 24), v250);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v181 + 56))(v220, 0, 1, v180);
            }
            uint64_t v203 = v180;
            uint64_t v140 = v242;
            uint64_t v204 = v234[10];
            uint64_t v205 = (void *)((char *)v230 + v204);
            v206 = (void *)((char *)v136 + v204);
            if (v223(v206, 1, v203))
            {
              uint64_t v207 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
              memcpy(v205, v206, *(void *)(*(void *)(v207 - 8) + 64));
            }
            else
            {
              *uint64_t v205 = *v206;
              uint64_t v210 = v206[1];
              unint64_t v209 = v206[2];
              outlined copy of Data._Representation(v210, v209);
              v205[1] = v210;
              v205[2] = v209;
              v248((char *)v205 + *(int *)(v203 + 24), (char *)v206 + *(int *)(v203 + 24), v250);
              (*((void (**)(void *, void, uint64_t, uint64_t))__dsta + 7))(v205, 0, 1, v203);
            }
            (*((void (**)(void *, void, uint64_t, int *))__srca + 7))(v230, 0, 1, v234);
            a3 = v256;
          }
          (*(void (**)(void *, void, uint64_t, void *))(v140 + 56))(v33, 0, 1, v239);
        }
LABEL_62:
        swift_storeEnumTagMultiPayload();
        break;
    }
  }
LABEL_30:
  uint64_t v124 = *(int *)(a3 + 20);
  uint64_t v125 = (char *)a1 + v124;
  uint64_t v126 = (char *)a2 + v124;
  uint64_t v127 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v127 - 8) + 24))(v125, v126, v127);
  return a1;
}

_OWORD *initializeWithTake for AttachmentLedger_UpdateAttachmentRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  uint64_t v7 = *(void *)(updated - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, updated))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        long long v20 = a2[1];
        *a1 = *a2;
        a1[1] = v20;
        uint64_t v21 = *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(0) + 24);
        uint64_t v22 = (char *)a1 + v21;
        uint64_t v23 = (char *)a2 + v21;
        uint64_t v24 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v22, v23, v24);
        break;
      case 2u:
        *a1 = *a2;
        uint64_t v25 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
        uint64_t v26 = *(int *)(v25 + 20);
        uint64_t v27 = (char *)a1 + v26;
        uint64_t v28 = (char *)a2 + v26;
        uint64_t v29 = type metadata accessor for UnknownStorage();
        uint64_t v101 = *(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32);
        v101(v27, v28, v29);
        uint64_t v30 = *(int *)(v25 + 24);
        uint64_t v31 = (_OWORD *)((char *)a1 + v30);
        uint64_t v32 = (_OWORD *)((char *)a2 + v30);
        uint64_t v33 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
        uint64_t v34 = *(void *)(v33 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
        {
          uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
          memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
        }
        else
        {
          uint64_t v93 = v34;
          *uint64_t v31 = *v32;
          v101((char *)v31 + *(int *)(v33 + 20), (char *)v32 + *(int *)(v33 + 20), v29);
          uint64_t v57 = *(int *)(v33 + 24);
          uint64_t v96 = v31;
          __dsta = (void *)((char *)v31 + v57);
          uint64_t v58 = (void *)((char *)v32 + v57);
          uint64_t v59 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
          uint64_t v60 = *(void *)(v59 - 8);
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
          {
            uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
            memcpy(__dsta, v58, *(void *)(*(void *)(v61 - 8) + 64));
            uint64_t v62 = v93;
            uint64_t v63 = v96;
          }
          else
          {
            uint64_t v104 = v7;
            *(_OWORD *)__dsta = *(_OWORD *)v58;
            __dsta[2] = v58[2];
            v101((char *)__dsta + *(int *)(v59 + 24), (char *)v58 + *(int *)(v59 + 24), v29);
            uint64_t v92 = v59;
            uint64_t v71 = *(int *)(v59 + 28);
            uint64_t v90 = (_OWORD *)((char *)__dsta + v71);
            unint64_t v72 = (_OWORD *)((char *)v58 + v71);
            uint64_t v73 = type metadata accessor for AttachmentLedger_EncryptionID(0);
            uint64_t v74 = *(void *)(v73 - 8);
            if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73))
            {
              uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
              memcpy(v90, v72, *(void *)(*(void *)(v75 - 8) + 64));
            }
            else
            {
              *uint64_t v90 = *v72;
              v101((char *)v90 + *(int *)(v73 + 20), (char *)v72 + *(int *)(v73 + 20), v29);
              (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v74 + 56))(v90, 0, 1, v73);
            }
            uint64_t v7 = v104;
            uint64_t v62 = v93;
            uint64_t v63 = v96;
            (*(void (**)(void *, void, uint64_t, uint64_t))(v60 + 56))(__dsta, 0, 1, v92);
          }
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v62 + 56))(v63, 0, 1, v33);
        }
        break;
      case 3u:
        uint64_t v102 = a3;
        *a1 = *a2;
        uint64_t v36 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
        uint64_t v37 = *(int *)(v36 + 20);
        uint64_t v38 = (char *)a1 + v37;
        unint64_t v39 = (char *)a2 + v37;
        uint64_t v40 = type metadata accessor for UnknownStorage();
        uint64_t v41 = *(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32);
        v41(v38, v39, v40);
        uint64_t v42 = *(int *)(v36 + 24);
        uint64_t v43 = (_OWORD *)((char *)a1 + v42);
        uint64_t v44 = (_OWORD *)((char *)a2 + v42);
        uint64_t v45 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
        uint64_t v46 = *(void *)(v45 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
        {
          uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
          memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
        }
        else
        {
          _OWORD *v43 = *v44;
          *((void *)v43 + 2) = *((void *)v44 + 2);
          *((unsigned char *)v43 + 24) = *((unsigned char *)v44 + 24);
          v43[2] = v44[2];
          v41((char *)v43 + *(int *)(v45 + 28), (char *)v44 + *(int *)(v45 + 28), v40);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
        }
        a3 = v102;
        break;
      default:
        *a1 = *a2;
        uint64_t v9 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
        uint64_t v10 = *(int *)(v9 + 20);
        uint64_t v11 = (char *)a1 + v10;
        uint64_t v12 = (char *)a2 + v10;
        uint64_t v13 = type metadata accessor for UnknownStorage();
        unint64_t v100 = (void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32);
        uint64_t v103 = *v100;
        (*v100)(v11, v12, v13);
        uint64_t v14 = *(int *)(v9 + 24);
        uint64_t v15 = (_OWORD *)((char *)a1 + v14);
        uint64_t v16 = (_OWORD *)((char *)a2 + v14);
        uint64_t v17 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
        uint64_t v18 = *(void *)(v17 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
        {
          uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
          memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
        }
        else
        {
          uint64_t v99 = v18;
          *uint64_t v15 = *v16;
          uint64_t v48 = *((void *)v16 + 3);
          *((void *)v15 + 2) = *((void *)v16 + 2);
          *((void *)v15 + 3) = v48;
          *((unsigned char *)v15 + 32) = *((unsigned char *)v16 + 32);
          *(_OWORD *)((char *)v15 + 40) = *(_OWORD *)((char *)v16 + 40);
          v103((char *)v15 + *(int *)(v17 + 32), (char *)v16 + *(int *)(v17 + 32), v13);
          uint64_t v95 = v15;
          __dst = (void *)v17;
          uint64_t v49 = *(int *)(v17 + 36);
          uint64_t v50 = (_OWORD *)((char *)v15 + v49);
          uint64_t v51 = (_OWORD *)((char *)v16 + v49);
          uint64_t v52 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
          uint64_t v53 = *(void *)(v52 - 8);
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
          {
            uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
            memcpy(v50, v51, *(void *)(*(void *)(v54 - 8) + 64));
            uint64_t v55 = v99;
            uint64_t v56 = v95;
          }
          else
          {
            uint64_t v88 = v53;
            long long v64 = v51[1];
            *uint64_t v50 = *v51;
            v50[1] = v64;
            long long v65 = v51[3];
            v50[2] = v51[2];
            v50[3] = v65;
            v103((char *)v50 + *(int *)(v52 + 32), (char *)v51 + *(int *)(v52 + 32), v13);
            uint64_t v91 = v52;
            uint64_t v94 = v50;
            uint64_t v66 = *(int *)(v52 + 36);
            uint64_t v87 = (void *)((char *)v50 + v66);
            uint64_t v67 = (void *)((char *)v51 + v66);
            uint64_t v68 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
            uint64_t v69 = *(void *)(v68 - 8);
            uint64_t v89 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v69 + 48);
            uint64_t v85 = v69;
            uint64_t v86 = v13;
            if (v89(v67, 1, v68))
            {
              uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
              memcpy(v87, v67, *(void *)(*(void *)(v70 - 8) + 64));
            }
            else
            {
              *uint64_t v87 = *v67;
              *(_OWORD *)(v87 + 1) = *(_OWORD *)(v67 + 1);
              v103((char *)v87 + *(int *)(v68 + 24), (char *)v67 + *(int *)(v68 + 24), v13);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v69 + 56))(v87, 0, 1, v68);
            }
            uint64_t v76 = *(int *)(v91 + 40);
            uint64_t v77 = (void *)((char *)v94 + v76);
            uint64_t v78 = (void *)((char *)v51 + v76);
            if (v89((_OWORD *)((char *)v51 + v76), 1, v68))
            {
              uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
              memcpy(v77, v78, *(void *)(*(void *)(v79 - 8) + 64));
            }
            else
            {
              *uint64_t v77 = *v78;
              *(_OWORD *)(v77 + 1) = *(_OWORD *)(v78 + 1);
              v103((char *)v77 + *(int *)(v68 + 24), (char *)v78 + *(int *)(v68 + 24), v86);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v85 + 56))(v77, 0, 1, v68);
            }
            uint64_t v56 = v95;
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v88 + 56))(v94, 0, 1, v91);
            uint64_t v55 = v99;
          }
          (*(void (**)(_OWORD *, void, uint64_t, void *))(v55 + 56))(v56, 0, 1, __dst);
        }
        break;
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, updated);
  }
  uint64_t v80 = *(int *)(a3 + 20);
  unint64_t v81 = (char *)a1 + v80;
  uint64_t v82 = (char *)a2 + v80;
  uint64_t v83 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v83 - 8) + 32))(v81, v82, v83);
  return a1;
}

_OWORD *assignWithTake for AttachmentLedger_UpdateAttachmentRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  uint64_t v7 = *(void *)(updated - 8);
  uint64_t v8 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, updated);
  int v10 = v8(a2, 1, updated);
  if (v9)
  {
    if (!v10)
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          long long v36 = a2[1];
          *a1 = *a2;
          a1[1] = v36;
          uint64_t v37 = *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(0) + 24);
          uint64_t v38 = (char *)a1 + v37;
          unint64_t v39 = (char *)a2 + v37;
          uint64_t v40 = type metadata accessor for UnknownStorage();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32))(v38, v39, v40);
          break;
        case 2u:
          uint64_t v199 = a3;
          *a1 = *a2;
          uint64_t v41 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
          uint64_t v42 = *(int *)(v41 + 20);
          uint64_t v43 = (char *)a1 + v42;
          uint64_t v44 = (char *)a2 + v42;
          uint64_t v45 = type metadata accessor for UnknownStorage();
          v194 = *(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 32);
          v194(v43, v44, v45);
          uint64_t v46 = *(int *)(v41 + 24);
          uint64_t v47 = (_OWORD *)((char *)a1 + v46);
          uint64_t v48 = (_OWORD *)((char *)a2 + v46);
          uint64_t v49 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
          uint64_t v50 = *(void *)(v49 - 8);
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
          {
            uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
            memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
            a3 = v199;
          }
          else
          {
            uint64_t v184 = v50;
            *uint64_t v47 = *v48;
            v194((char *)v47 + *(int *)(v49 + 20), (char *)v48 + *(int *)(v49 + 20), v45);
            uint64_t v103 = *(int *)(v49 + 24);
            uint64_t v188 = v47;
            uint64_t v104 = (void *)((char *)v47 + v103);
            uint64_t v105 = (void *)((char *)v48 + v103);
            uint64_t v106 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
            uint64_t v107 = *(void *)(v106 - 8);
            if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v107 + 48))(v105, 1, v106))
            {
              uint64_t v108 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
              memcpy(v104, v105, *(void *)(*(void *)(v108 - 8) + 64));
              a3 = v199;
              uint64_t v110 = v184;
              uint64_t v109 = v188;
            }
            else
            {
              uint64_t v174 = v107;
              *(_OWORD *)uint64_t v104 = *(_OWORD *)v105;
              v104[2] = v105[2];
              v194((char *)v104 + *(int *)(v106 + 24), (char *)v105 + *(int *)(v106 + 24), v45);
              uint64_t v176 = v106;
              uint64_t v180 = v104;
              uint64_t v134 = *(int *)(v106 + 28);
              uint64_t v135 = (_OWORD *)((char *)v104 + v134);
              uint64_t v136 = (_OWORD *)((char *)v105 + v134);
              uint64_t v137 = type metadata accessor for AttachmentLedger_EncryptionID(0);
              uint64_t v138 = *(void *)(v137 - 8);
              if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v138 + 48))(v136, 1, v137))
              {
                uint64_t v139 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
                memcpy(v135, v136, *(void *)(*(void *)(v139 - 8) + 64));
              }
              else
              {
                *uint64_t v135 = *v136;
                v194((char *)v135 + *(int *)(v137 + 20), (char *)v136 + *(int *)(v137 + 20), v45);
                (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v138 + 56))(v135, 0, 1, v137);
              }
              a3 = v199;
              uint64_t v110 = v184;
              uint64_t v109 = v188;
              (*(void (**)(void *, void, uint64_t, uint64_t))(v174 + 56))(v180, 0, 1, v176);
            }
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v110 + 56))(v109, 0, 1, v49);
          }
          break;
        case 3u:
          uint64_t v200 = a3;
          *a1 = *a2;
          uint64_t v52 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
          uint64_t v53 = *(int *)(v52 + 20);
          uint64_t v54 = (char *)a1 + v53;
          uint64_t v55 = (char *)a2 + v53;
          uint64_t v56 = type metadata accessor for UnknownStorage();
          uint64_t v57 = (void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 32);
          uint64_t v195 = *v57;
          (*v57)(v54, v55, v56);
          uint64_t v58 = *(int *)(v52 + 24);
          uint64_t v59 = (_OWORD *)((char *)a1 + v58);
          uint64_t v60 = (_OWORD *)((char *)a2 + v58);
          uint64_t v61 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
          uint64_t v62 = *(void *)(v61 - 8);
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
          {
            uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
            memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
          }
          else
          {
            *uint64_t v59 = *v60;
            *((void *)v59 + 2) = *((void *)v60 + 2);
            *((unsigned char *)v59 + 24) = *((unsigned char *)v60 + 24);
            v59[2] = v60[2];
            v195((char *)v59 + *(int *)(v61 + 28), (char *)v60 + *(int *)(v61 + 28), v56);
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
          }
          a3 = v200;
          break;
        default:
          uint64_t v197 = a3;
          *a1 = *a2;
          uint64_t v11 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
          uint64_t v12 = *(int *)(v11 + 20);
          uint64_t v13 = (char *)a1 + v12;
          uint64_t v14 = (char *)a2 + v12;
          uint64_t v15 = type metadata accessor for UnknownStorage();
          uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32);
          v16(v13, v14, v15);
          uint64_t v17 = *(int *)(v11 + 24);
          uint64_t v18 = (_OWORD *)((char *)a1 + v17);
          uint64_t v19 = (_OWORD *)((char *)a2 + v17);
          uint64_t v20 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
          uint64_t v21 = *(void *)(v20 - 8);
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
          {
            uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
            memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
            a3 = v197;
          }
          else
          {
            uint64_t v191 = v21;
            *uint64_t v18 = *v19;
            uint64_t v64 = *((void *)v19 + 3);
            *((void *)v18 + 2) = *((void *)v19 + 2);
            *((void *)v18 + 3) = v64;
            *((unsigned char *)v18 + 32) = *((unsigned char *)v19 + 32);
            *(_OWORD *)((char *)v18 + 40) = *(_OWORD *)((char *)v19 + 40);
            v16((char *)v18 + *(int *)(v20 + 32), (char *)v19 + *(int *)(v20 + 32), v15);
            unint64_t v183 = v18;
            uint64_t v187 = v20;
            uint64_t v65 = *(int *)(v20 + 36);
            uint64_t v66 = (_OWORD *)((char *)v18 + v65);
            uint64_t v67 = (_OWORD *)((char *)v19 + v65);
            uint64_t v68 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
            uint64_t v69 = *(void *)(v68 - 8);
            if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68))
            {
              uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
              memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64));
              a3 = v197;
              uint64_t v71 = v187;
              uint64_t v72 = v191;
              uint64_t v73 = v183;
            }
            else
            {
              uint64_t v173 = v69;
              long long v120 = v67[1];
              *uint64_t v66 = *v67;
              v66[1] = v120;
              long long v121 = v67[3];
              v66[2] = v67[2];
              v66[3] = v121;
              v16((char *)v66 + *(int *)(v68 + 32), (char *)v67 + *(int *)(v68 + 32), v15);
              uint64_t v175 = v68;
              v179 = v66;
              uint64_t v122 = *(int *)(v68 + 36);
              uint64_t v171 = (void *)((char *)v66 + v122);
              unint64_t v123 = (void *)((char *)v67 + v122);
              uint64_t v124 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
              uint64_t v125 = *(void *)(v124 - 8);
              uint64_t v169 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v125 + 48);
              uint64_t v166 = v125;
              uint64_t v167 = v16;
              if (v169(v123, 1, v124))
              {
                uint64_t v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                memcpy(v171, v123, *(void *)(*(void *)(v126 - 8) + 64));
              }
              else
              {
                void *v171 = *v123;
                *(_OWORD *)(v171 + 1) = *(_OWORD *)(v123 + 1);
                v16((char *)v171 + *(int *)(v124 + 24), (char *)v123 + *(int *)(v124 + 24), v15);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v125 + 56))(v171, 0, 1, v124);
              }
              uint64_t v147 = *(int *)(v175 + 40);
              uint64_t v148 = (void *)((char *)v179 + v147);
              uint64_t v149 = (void *)((char *)v67 + v147);
              if (v169((_OWORD *)((char *)v67 + v147), 1, v124))
              {
                uint64_t v150 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                memcpy(v148, v149, *(void *)(*(void *)(v150 - 8) + 64));
              }
              else
              {
                *uint64_t v148 = *v149;
                *(_OWORD *)(v148 + 1) = *(_OWORD *)(v149 + 1);
                v167((char *)v148 + *(int *)(v124 + 24), (char *)v149 + *(int *)(v124 + 24), v15);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v166 + 56))(v148, 0, 1, v124);
              }
              a3 = v197;
              uint64_t v73 = v183;
              (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v173 + 56))(v179, 0, 1, v175);
              uint64_t v71 = v187;
              uint64_t v72 = v191;
            }
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v72 + 56))(v73, 0, 1, v71);
          }
          break;
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, updated);
      goto LABEL_53;
    }
LABEL_8:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    memcpy(a1, a2, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_53;
  }
  if (v10)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        long long v74 = a2[1];
        *a1 = *a2;
        a1[1] = v74;
        uint64_t v75 = *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(0) + 24);
        uint64_t v76 = (char *)a1 + v75;
        uint64_t v77 = (char *)a2 + v75;
        uint64_t v78 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v78 - 8) + 32))(v76, v77, v78);
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        uint64_t v201 = a3;
        *a1 = *a2;
        uint64_t v79 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
        uint64_t v80 = *(int *)(v79 + 20);
        unint64_t v81 = (char *)a1 + v80;
        uint64_t v82 = (char *)a2 + v80;
        uint64_t v83 = type metadata accessor for UnknownStorage();
        uint64_t v84 = *(void (**)(char *, char *, uint64_t))(*(void *)(v83 - 8) + 32);
        v84(v81, v82, v83);
        uint64_t v85 = *(int *)(v79 + 24);
        uint64_t v86 = (_OWORD *)((char *)a1 + v85);
        uint64_t v87 = (_OWORD *)((char *)a2 + v85);
        uint64_t v88 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
        uint64_t v89 = *(void *)(v88 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v89 + 48))(v87, 1, v88))
        {
          uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
          memcpy(v86, v87, *(void *)(*(void *)(v90 - 8) + 64));
          a3 = v201;
        }
        else
        {
          *uint64_t v86 = *v87;
          uint64_t v190 = v84;
          v84((char *)v86 + *(int *)(v88 + 20), (char *)v87 + *(int *)(v88 + 20), v83);
          uint64_t v127 = *(int *)(v88 + 24);
          uint64_t v193 = v86;
          uint64_t v128 = (void *)((char *)v86 + v127);
          uint64_t v129 = (void *)((char *)v87 + v127);
          uint64_t v130 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
          uint64_t v131 = *(void *)(v130 - 8);
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v131 + 48))(v129, 1, v130))
          {
            uint64_t v132 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
            memcpy(v128, v129, *(void *)(*(void *)(v132 - 8) + 64));
            a3 = v201;
            unint64_t v133 = v193;
          }
          else
          {
            uint64_t v178 = v131;
            *(_OWORD *)uint64_t v128 = *(_OWORD *)v129;
            v128[2] = v129[2];
            v190((char *)v128 + *(int *)(v130 + 24), (char *)v129 + *(int *)(v130 + 24), v83);
            uint64_t v182 = v130;
            uint64_t v186 = v128;
            uint64_t v151 = *(int *)(v130 + 28);
            uint64_t v152 = (_OWORD *)((char *)v128 + v151);
            uint64_t v153 = (_OWORD *)((char *)v129 + v151);
            uint64_t v154 = type metadata accessor for AttachmentLedger_EncryptionID(0);
            uint64_t v155 = *(void *)(v154 - 8);
            if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v155 + 48))(v153, 1, v154))
            {
              uint64_t v156 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
              memcpy(v152, v153, *(void *)(*(void *)(v156 - 8) + 64));
            }
            else
            {
              *uint64_t v152 = *v153;
              v190((char *)v152 + *(int *)(v154 + 20), (char *)v153 + *(int *)(v154 + 20), v83);
              (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v155 + 56))(v152, 0, 1, v154);
            }
            a3 = v201;
            unint64_t v133 = v193;
            (*(void (**)(void *, void, uint64_t, uint64_t))(v178 + 56))(v186, 0, 1, v182);
          }
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v89 + 56))(v133, 0, 1, v88);
        }
        goto LABEL_60;
      case 3u:
        uint64_t v202 = a3;
        *a1 = *a2;
        uint64_t v91 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
        uint64_t v92 = *(int *)(v91 + 20);
        uint64_t v93 = (char *)a1 + v92;
        uint64_t v94 = (char *)a2 + v92;
        uint64_t v95 = type metadata accessor for UnknownStorage();
        uint64_t v96 = *(void (**)(char *, char *, uint64_t))(*(void *)(v95 - 8) + 32);
        v96(v93, v94, v95);
        uint64_t v97 = *(int *)(v91 + 24);
        uint64_t v98 = (_OWORD *)((char *)a1 + v97);
        uint64_t v99 = (_OWORD *)((char *)a2 + v97);
        uint64_t v100 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
        uint64_t v101 = *(void *)(v100 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v101 + 48))(v99, 1, v100))
        {
          uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
          memcpy(v98, v99, *(void *)(*(void *)(v102 - 8) + 64));
        }
        else
        {
          *uint64_t v98 = *v99;
          *((void *)v98 + 2) = *((void *)v99 + 2);
          *((unsigned char *)v98 + 24) = *((unsigned char *)v99 + 24);
          v98[2] = v99[2];
          v96((char *)v98 + *(int *)(v100 + 28), (char *)v99 + *(int *)(v100 + 28), v95);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v101 + 56))(v98, 0, 1, v100);
        }
        a3 = v202;
        swift_storeEnumTagMultiPayload();
        break;
      default:
        uint64_t v198 = a3;
        *a1 = *a2;
        uint64_t v24 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
        uint64_t v25 = *(int *)(v24 + 20);
        uint64_t v26 = (char *)a1 + v25;
        uint64_t v27 = (char *)a2 + v25;
        uint64_t v28 = type metadata accessor for UnknownStorage();
        uint64_t v29 = *(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32);
        v29(v26, v27, v28);
        uint64_t v30 = *(int *)(v24 + 24);
        uint64_t v31 = (_OWORD *)((char *)a1 + v30);
        uint64_t v32 = (_OWORD *)((char *)a2 + v30);
        uint64_t v33 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
        uint64_t v34 = *(void *)(v33 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
        {
          uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
          memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
          a3 = v198;
        }
        else
        {
          uint64_t v196 = v34;
          *uint64_t v31 = *v32;
          uint64_t v111 = *((void *)v32 + 3);
          *((void *)v31 + 2) = *((void *)v32 + 2);
          *((void *)v31 + 3) = v111;
          *((unsigned char *)v31 + 32) = *((unsigned char *)v32 + 32);
          *(_OWORD *)((char *)v31 + 40) = *(_OWORD *)((char *)v32 + 40);
          v29((char *)v31 + *(int *)(v33 + 32), (char *)v32 + *(int *)(v33 + 32), v28);
          uint64_t v189 = v29;
          uint64_t v192 = v33;
          uint64_t v112 = *(int *)(v33 + 36);
          uint64_t v113 = (_OWORD *)((char *)v31 + v112);
          uint64_t v114 = (_OWORD *)((char *)v32 + v112);
          uint64_t v115 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
          uint64_t v116 = *(void *)(v115 - 8);
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v116 + 48))(v114, 1, v115))
          {
            uint64_t v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
            memcpy(v113, v114, *(void *)(*(void *)(v117 - 8) + 64));
            a3 = v198;
            uint64_t v118 = v192;
            uint64_t v119 = v196;
          }
          else
          {
            uint64_t v177 = v116;
            long long v140 = v114[1];
            *uint64_t v113 = *v114;
            v113[1] = v140;
            long long v141 = v114[3];
            v113[2] = v114[2];
            v113[3] = v141;
            v189((char *)v113 + *(int *)(v115 + 32), (char *)v114 + *(int *)(v115 + 32), v28);
            uint64_t v181 = v115;
            uint64_t v185 = v113;
            uint64_t v142 = *(int *)(v115 + 36);
            uint64_t v170 = (void *)((char *)v113 + v142);
            unint64_t v143 = (void *)((char *)v114 + v142);
            uint64_t v144 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
            uint64_t v145 = *(void *)(v144 - 8);
            uint64_t v172 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v145 + 48);
            uint64_t v168 = v145;
            if (v172(v143, 1, v144))
            {
              uint64_t v146 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
              memcpy(v170, v143, *(void *)(*(void *)(v146 - 8) + 64));
            }
            else
            {
              void *v170 = *v143;
              *(_OWORD *)(v170 + 1) = *(_OWORD *)(v143 + 1);
              v189((char *)v170 + *(int *)(v144 + 24), (char *)v143 + *(int *)(v144 + 24), v28);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v145 + 56))(v170, 0, 1, v144);
            }
            uint64_t v119 = v196;
            uint64_t v162 = *(int *)(v181 + 40);
            unint64_t v163 = (void *)((char *)v185 + v162);
            uint64_t v164 = (void *)((char *)v114 + v162);
            if (v172((_OWORD *)((char *)v114 + v162), 1, v144))
            {
              uint64_t v165 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
              memcpy(v163, v164, *(void *)(*(void *)(v165 - 8) + 64));
            }
            else
            {
              *unint64_t v163 = *v164;
              *(_OWORD *)(v163 + 1) = *(_OWORD *)(v164 + 1);
              v189((char *)v163 + *(int *)(v144 + 24), (char *)v164 + *(int *)(v144 + 24), v28);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v168 + 56))(v163, 0, 1, v144);
            }
            a3 = v198;
            uint64_t v118 = v192;
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v177 + 56))(v185, 0, 1, v181);
          }
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v119 + 56))(v31, 0, 1, v118);
        }
LABEL_60:
        swift_storeEnumTagMultiPayload();
        break;
    }
  }
LABEL_53:
  uint64_t v157 = *(int *)(a3 + 20);
  uint64_t v158 = (char *)a1 + v157;
  uint64_t v159 = (char *)a2 + v157;
  uint64_t v160 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v160 - 8) + 40))(v158, v159, v160);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_UpdateAttachmentRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0F6DBA4);
}

uint64_t sub_1B0F6DBA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_149Tm(a1, a2, a3, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
}

uint64_t __swift_get_extra_inhabitant_index_149Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a4);
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84) == a2)
  {
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v9(a1, a2, v7);
  }
  else
  {
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 20);
    return v12(v14, a2, v13);
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_UpdateAttachmentRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0F6DCBC);
}

uint64_t sub_1B0F6DCBC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_150Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
}

uint64_t __swift_store_extra_inhabitant_index_150Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v10 = *(void *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
  {
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v11(a1, a2, a2, v9);
  }
  else
  {
    uint64_t v13 = type metadata accessor for UnknownStorage();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
    uint64_t v15 = v13;
    uint64_t v16 = a1 + *(int *)(a4 + 20);
    return v14(v16, a2, a2, v15);
  }
}

void type metadata completion function for AttachmentLedger_UpdateAttachmentRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void type metadata completion function for AttachmentLedger_SubscribeRequest(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData?(319, a4, a5);
  if (v5 <= 0x3F)
  {
    type metadata accessor for UnknownStorage();
    if (v6 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v20 = a2[1];
        *a1 = *a2;
        a1[1] = v20;
        uint64_t v21 = a2[2];
        unint64_t v22 = a2[3];
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v21, v22);
        a1[2] = v21;
        a1[3] = v22;
        uint64_t v23 = *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(0) + 24);
        uint64_t v24 = (char *)a1 + v23;
        uint64_t v25 = (char *)a2 + v23;
        uint64_t v26 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v24, v25, v26);
        break;
      case 2u:
        uint64_t v27 = a2[1];
        *a1 = *a2;
        a1[1] = v27;
        uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
        uint64_t v29 = *(int *)(updated + 20);
        uint64_t v30 = (char *)a1 + v29;
        uint64_t v31 = (char *)a2 + v29;
        uint64_t v32 = type metadata accessor for UnknownStorage();
        uint64_t v33 = *(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16);
        swift_bridgeObjectRetain();
        v33(v30, v31, v32);
        uint64_t v34 = *(int *)(updated + 24);
        uint64_t v35 = (uint64_t *)((char *)a1 + v34);
        long long v36 = (uint64_t *)((char *)a2 + v34);
        uint64_t v37 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
        uint64_t v38 = *(void *)(v37 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
        {
          uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
          memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
        }
        else
        {
          uint64_t v126 = v38;
          uint64_t v64 = *v36;
          unint64_t v65 = v36[1];
          outlined copy of Data._Representation(*v36, v65);
          void *v35 = v64;
          v35[1] = v65;
          uint64_t v124 = v33;
          v33((char *)v35 + *(int *)(v37 + 20), (char *)v36 + *(int *)(v37 + 20), v32);
          uint64_t v66 = *(int *)(v37 + 24);
          uint64_t v67 = (void *)((char *)v35 + v66);
          uint64_t v68 = (uint64_t *)((char *)v36 + v66);
          uint64_t v69 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
          uint64_t v70 = *(void *)(v69 - 8);
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
          {
            uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
            memcpy(v67, v68, *(void *)(*(void *)(v71 - 8) + 64));
            uint64_t v72 = v126;
          }
          else
          {
            uint64_t v118 = v70;
            uint64_t v122 = v69;
            uint64_t v92 = *v68;
            unint64_t v91 = v68[1];
            outlined copy of Data._Representation(*v68, v91);
            *uint64_t v67 = v92;
            v67[1] = v91;
            uint64_t v93 = v122;
            v67[2] = v68[2];
            v124((char *)v67 + *(int *)(v122 + 24), (char *)v68 + *(int *)(v122 + 24), v32);
            uint64_t v94 = *(int *)(v122 + 28);
            long long v120 = v67;
            __dsta = (void *)((char *)v67 + v94);
            uint64_t v95 = (uint64_t *)((char *)v68 + v94);
            uint64_t v96 = type metadata accessor for AttachmentLedger_EncryptionID(0);
            uint64_t v97 = *(void *)(v96 - 8);
            if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v97 + 48))(v95, 1, v96))
            {
              uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
              memcpy(__dsta, v95, *(void *)(*(void *)(v98 - 8) + 64));
            }
            else
            {
              unint64_t v113 = v95[1];
              uint64_t v115 = *v95;
              outlined copy of Data._Representation(*v95, v113);
              void *__dsta = v115;
              __dsta[1] = v113;
              v124((char *)__dsta + *(int *)(v96 + 20), (char *)v95 + *(int *)(v96 + 20), v32);
              uint64_t v93 = v122;
              (*(void (**)(void *, void, uint64_t, uint64_t))(v97 + 56))(__dsta, 0, 1, v96);
            }
            uint64_t v72 = v126;
            (*(void (**)(void *, void, uint64_t, uint64_t))(v118 + 56))(v120, 0, 1, v93);
          }
          (*(void (**)(void *, void, uint64_t, uint64_t))(v72 + 56))(v35, 0, 1, v37);
        }
        break;
      case 3u:
        uint64_t v40 = a2[1];
        *a1 = *a2;
        a1[1] = v40;
        uint64_t v41 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
        uint64_t v42 = *(int *)(v41 + 20);
        uint64_t v43 = (char *)a1 + v42;
        uint64_t v44 = (char *)a2 + v42;
        uint64_t v45 = type metadata accessor for UnknownStorage();
        uint64_t v46 = *(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 16);
        swift_bridgeObjectRetain();
        uint64_t v125 = v46;
        v46(v43, v44, v45);
        uint64_t v47 = *(int *)(v41 + 24);
        uint64_t v48 = (uint64_t *)((char *)a1 + v47);
        uint64_t v49 = (uint64_t *)((char *)a2 + v47);
        uint64_t v50 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
        uint64_t v51 = *(void *)(v50 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
        {
          uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
          memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64));
        }
        else
        {
          uint64_t v73 = *v49;
          unint64_t v74 = v49[1];
          outlined copy of Data._Representation(*v49, v74);
          void *v48 = v73;
          v48[1] = v74;
          v48[2] = v49[2];
          *((unsigned char *)v48 + 24) = *((unsigned char *)v49 + 24);
          uint64_t v75 = v49[4];
          unint64_t v76 = v49[5];
          outlined copy of Data._Representation(v75, v76);
          v48[4] = v75;
          v48[5] = v76;
          v125((char *)v48 + *(int *)(v50 + 28), (char *)v49 + *(int *)(v50 + 28), v45);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
        }
        break;
      default:
        uint64_t v6 = a2[1];
        *a1 = *a2;
        a1[1] = v6;
        uint64_t v7 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
        uint64_t v8 = *(int *)(v7 + 20);
        uint64_t v9 = (char *)a1 + v8;
        uint64_t v10 = (char *)a2 + v8;
        uint64_t v11 = type metadata accessor for UnknownStorage();
        uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
        swift_bridgeObjectRetain();
        v12(v9, v10, v11);
        uint64_t v13 = *(int *)(v7 + 24);
        uint64_t v14 = (uint64_t *)((char *)a1 + v13);
        uint64_t v15 = (uint64_t *)((char *)a2 + v13);
        uint64_t v16 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
        uint64_t v17 = *(void **)(v16 - 8);
        if ((*((unsigned int (**)(uint64_t *, uint64_t, uint64_t))v17 + 6))(v15, 1, v16))
        {
          uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
          memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
        }
        else
        {
          uint64_t v53 = *v15;
          unint64_t v54 = v15[1];
          outlined copy of Data._Representation(*v15, v54);
          *uint64_t v14 = v53;
          v14[1] = v54;
          uint64_t v55 = v15[3];
          v14[2] = v15[2];
          v14[3] = v55;
          *((unsigned char *)v14 + 32) = *((unsigned char *)v15 + 32);
          uint64_t v56 = v15[5];
          unint64_t v57 = v15[6];
          swift_bridgeObjectRetain();
          outlined copy of Data._Representation(v56, v57);
          v14[5] = v56;
          v14[6] = v57;
          uint64_t v121 = v11;
          v12((char *)v14 + *(int *)(v16 + 32), (char *)v15 + *(int *)(v16 + 32), v11);
          uint64_t v123 = v16;
          uint64_t v58 = *(int *)(v16 + 36);
          uint64_t v59 = (void *)((char *)v14 + v58);
          uint64_t v60 = (uint64_t *)((char *)v15 + v58);
          uint64_t v61 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
          uint64_t v62 = *(void *)(v61 - 8);
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
          {
            uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
            memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
          }
          else
          {
            uint64_t v111 = v14;
            uint64_t v114 = v62;
            __dst = v17;
            uint64_t v77 = v60[1];
            *uint64_t v59 = *v60;
            v59[1] = v77;
            uint64_t v78 = v60[3];
            v59[2] = v60[2];
            v59[3] = v78;
            uint64_t v79 = v12;
            uint64_t v80 = v61;
            uint64_t v82 = v60[4];
            unint64_t v81 = v60[5];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined copy of Data._Representation(v82, v81);
            v59[4] = v82;
            v59[5] = v81;
            uint64_t v83 = v60[6];
            unint64_t v84 = v60[7];
            outlined copy of Data._Representation(v83, v84);
            v59[6] = v83;
            v59[7] = v84;
            uint64_t v110 = v79;
            v79((char *)v59 + *(int *)(v80 + 32), (char *)v60 + *(int *)(v80 + 32), v11);
            uint64_t v119 = v80;
            uint64_t v85 = *(int *)(v80 + 36);
            uint64_t v86 = (void *)((char *)v59 + v85);
            uint64_t v87 = (void *)((char *)v60 + v85);
            uint64_t v88 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
            uint64_t v89 = *(void *)(v88 - 8);
            uint64_t v112 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v89 + 48);
            uint64_t v109 = v89;
            if (v112(v87, 1, v88))
            {
              uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
              memcpy(v86, v87, *(void *)(*(void *)(v90 - 8) + 64));
            }
            else
            {
              uint64_t v99 = v87[1];
              *uint64_t v86 = *v87;
              unint64_t v100 = v87[2];
              outlined copy of Data._Representation(v99, v100);
              v86[1] = v99;
              v86[2] = v100;
              uint64_t v11 = v121;
              v110((char *)v86 + *(int *)(v88 + 24), (char *)v87 + *(int *)(v88 + 24), v121);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v89 + 56))(v86, 0, 1, v88);
            }
            uint64_t v101 = v59;
            uint64_t v102 = *(int *)(v119 + 40);
            uint64_t v103 = (void *)((char *)v59 + v102);
            uint64_t v104 = (void *)((char *)v60 + v102);
            uint64_t v14 = v111;
            if (v112(v104, 1, v88))
            {
              uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
              memcpy(v103, v104, *(void *)(*(void *)(v105 - 8) + 64));
            }
            else
            {
              uint64_t v106 = v104[1];
              *uint64_t v103 = *v104;
              unint64_t v107 = v104[2];
              outlined copy of Data._Representation(v106, v107);
              v103[1] = v106;
              v103[2] = v107;
              uint64_t v101 = v59;
              v110((char *)v103 + *(int *)(v88 + 24), (char *)v104 + *(int *)(v88 + 24), v11);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v109 + 56))(v103, 0, 1, v88);
            }
            uint64_t v17 = __dst;
            (*(void (**)(void *, void, uint64_t, uint64_t))(v114 + 56))(v101, 0, 1, v119);
          }
          (*((void (**)(void *, void, uint64_t, uint64_t))v17 + 7))(v14, 0, 1, v123);
        }
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      swift_bridgeObjectRelease();
      uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
      uint64_t v4 = a1 + *(int *)(updated + 20);
      uint64_t v5 = type metadata accessor for UnknownStorage();
      uint64_t v30 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
      v30(v4, v5);
      uint64_t v6 = a1 + *(int *)(updated + 24);
      uint64_t v7 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
      if (!result)
      {
        outlined consume of Data._Representation(*(void *)v6, *(void *)(v6 + 8));
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(*(void *)(v6 + 40), *(void *)(v6 + 48));
        v30(v6 + *(int *)(v7 + 32), v5);
        uint64_t v8 = v6 + *(int *)(v7 + 36);
        uint64_t v9 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((void *)v9 - 1) + 48))(v8, 1, v9);
        if (!result)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of Data._Representation(*(void *)(v8 + 32), *(void *)(v8 + 40));
          outlined consume of Data._Representation(*(void *)(v8 + 48), *(void *)(v8 + 56));
          v30(v8 + v9[8], v5);
          uint64_t v10 = v8 + v9[9];
          uint64_t v11 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
          uint64_t v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
          if (!v12(v10, 1, v11))
          {
            outlined consume of Data._Representation(*(void *)(v10 + 8), *(void *)(v10 + 16));
            v30(v10 + *(int *)(v11 + 24), v5);
          }
          uint64_t v13 = v8 + v9[10];
          uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v12)(v13, 1, v11);
          if (!result)
          {
            outlined consume of Data._Representation(*(void *)(v13 + 8), *(void *)(v13 + 16));
            uint64_t v14 = *(int *)(v11 + 24);
            break;
          }
        }
      }
      return result;
    case 1:
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(*(void *)(a1 + 16), *(void *)(a1 + 24));
      uint64_t v15 = a1
          + *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(0) + 24);
      uint64_t v16 = type metadata accessor for UnknownStorage();
      uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8);
      uint64_t v18 = v16;
      uint64_t v19 = v15;
      goto LABEL_17;
    case 2:
      swift_bridgeObjectRelease();
      uint64_t v20 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
      uint64_t v21 = a1 + *(int *)(v20 + 20);
      uint64_t v5 = type metadata accessor for UnknownStorage();
      uint64_t v30 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
      v30(v21, v5);
      uint64_t v22 = a1 + *(int *)(v20 + 24);
      uint64_t v23 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v22, 1, v23);
      if (result) {
        return result;
      }
      outlined consume of Data._Representation(*(void *)v22, *(void *)(v22 + 8));
      v30(v22 + *(int *)(v23 + 20), v5);
      uint64_t v24 = v22 + *(int *)(v23 + 24);
      uint64_t v25 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v24, 1, v25);
      if (result) {
        return result;
      }
      outlined consume of Data._Representation(*(void *)v24, *(void *)(v24 + 8));
      v30(v24 + *(int *)(v25 + 24), v5);
      uint64_t v13 = v24 + *(int *)(v25 + 28);
      uint64_t v26 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v13, 1, v26);
      if (result) {
        return result;
      }
      outlined consume of Data._Representation(*(void *)v13, *(void *)(v13 + 8));
      uint64_t v14 = *(int *)(v26 + 20);
      break;
    case 3:
      swift_bridgeObjectRelease();
      uint64_t v27 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
      uint64_t v28 = a1 + *(int *)(v27 + 20);
      uint64_t v5 = type metadata accessor for UnknownStorage();
      uint64_t v30 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
      v30(v28, v5);
      uint64_t v13 = a1 + *(int *)(v27 + 24);
      uint64_t v29 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48))(v13, 1, v29);
      if (result) {
        return result;
      }
      outlined consume of Data._Representation(*(void *)v13, *(void *)(v13 + 8));
      outlined consume of Data._Representation(*(void *)(v13 + 32), *(void *)(v13 + 40));
      uint64_t v14 = *(int *)(v29 + 28);
      break;
    default:
      return result;
  }
  uint64_t v19 = v13 + v14;
  uint64_t v18 = v5;
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t))v30;
LABEL_17:
  return v17(v19, v18);
}

void *initializeWithCopy for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(void *a1, void *a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v17 = a2[1];
      *a1 = *a2;
      a1[1] = v17;
      uint64_t v18 = a2[2];
      unint64_t v19 = a2[3];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v18, v19);
      a1[2] = v18;
      a1[3] = v19;
      uint64_t v20 = *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(0) + 24);
      uint64_t v21 = (char *)a1 + v20;
      uint64_t v22 = (char *)a2 + v20;
      uint64_t v23 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
      break;
    case 2u:
      uint64_t v24 = a2[1];
      *a1 = *a2;
      a1[1] = v24;
      uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
      uint64_t v26 = *(int *)(updated + 20);
      uint64_t v27 = (char *)a1 + v26;
      uint64_t v28 = (char *)a2 + v26;
      uint64_t v29 = type metadata accessor for UnknownStorage();
      uint64_t v30 = *(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16);
      swift_bridgeObjectRetain();
      v30(v27, v28, v29);
      uint64_t v31 = *(int *)(updated + 24);
      uint64_t v12 = (void *)((char *)a1 + v31);
      uint64_t v13 = (char *)a2 + v31;
      uint64_t v32 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
      uint64_t v33 = *(void *)(v32 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v13, 1, v32))
      {
        uint64_t v16 = &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?;
        goto LABEL_7;
      }
      uint64_t v60 = *(void *)v13;
      unint64_t v61 = *((void *)v13 + 1);
      outlined copy of Data._Representation(*(void *)v13, v61);
      *uint64_t v12 = v60;
      v12[1] = v61;
      long long v120 = v30;
      v30((char *)v12 + *(int *)(v32 + 20), &v13[*(int *)(v32 + 20)], v29);
      uint64_t v62 = *(int *)(v32 + 24);
      uint64_t v63 = (char *)v12 + v62;
      uint64_t v64 = &v13[v62];
      uint64_t v65 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
      uint64_t v66 = *(void *)(v65 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65))
      {
        uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
        memcpy(v63, v64, *(void *)(*(void *)(v67 - 8) + 64));
      }
      else
      {
        uint64_t v118 = v66;
        uint64_t v86 = v63;
        uint64_t v88 = *(void *)v64;
        unint64_t v87 = *((void *)v64 + 1);
        outlined copy of Data._Representation(*(void *)v64, v87);
        *uint64_t v86 = v88;
        v86[1] = v87;
        uint64_t v89 = v86;
        v86[2] = *((void *)v64 + 2);
        v120((char *)v86 + *(int *)(v65 + 24), &v64[*(int *)(v65 + 24)], v29);
        uint64_t v90 = *(int *)(v65 + 28);
        uint64_t v116 = (void *)((char *)v86 + v90);
        unint64_t v91 = &v64[v90];
        uint64_t v92 = type metadata accessor for AttachmentLedger_EncryptionID(0);
        uint64_t v114 = *(void *)(v92 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v114 + 48))(v91, 1, v92))
        {
          uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
          memcpy(v116, v91, *(void *)(*(void *)(v93 - 8) + 64));
        }
        else
        {
          uint64_t v94 = *(void *)v91;
          unint64_t v112 = *((void *)v91 + 1);
          outlined copy of Data._Representation(*(void *)v91, v112);
          void *v116 = v94;
          uint64_t v89 = v86;
          v116[1] = v112;
          v120((char *)v116 + *(int *)(v92 + 20), &v91[*(int *)(v92 + 20)], v29);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v114 + 56))(v116, 0, 1, v92);
        }
        (*(void (**)(void *, void, uint64_t, uint64_t))(v118 + 56))(v89, 0, 1, v65);
      }
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v33 + 56))(v12, 0, 1, v32);
      break;
    case 3u:
      uint64_t v35 = a2[1];
      *a1 = *a2;
      a1[1] = v35;
      uint64_t v36 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
      uint64_t v37 = *(int *)(v36 + 20);
      uint64_t v38 = (char *)a1 + v37;
      uint64_t v39 = (char *)a2 + v37;
      uint64_t v40 = type metadata accessor for UnknownStorage();
      uint64_t v41 = *(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16);
      swift_bridgeObjectRetain();
      v41(v38, v39, v40);
      uint64_t v42 = *(int *)(v36 + 24);
      uint64_t v43 = (void *)((char *)a1 + v42);
      uint64_t v44 = (void *)((char *)a2 + v42);
      uint64_t v45 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
      uint64_t v46 = *(void *)(v45 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
      {
        uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
        memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
      }
      else
      {
        uint64_t v68 = *v44;
        unint64_t v69 = v44[1];
        outlined copy of Data._Representation(*v44, v69);
        void *v43 = v68;
        v43[1] = v69;
        v43[2] = v44[2];
        *((unsigned char *)v43 + 24) = *((unsigned char *)v44 + 24);
        uint64_t v70 = v44[4];
        unint64_t v71 = v44[5];
        outlined copy of Data._Representation(v70, v71);
        v43[4] = v70;
        v43[5] = v71;
        v41((char *)v43 + *(int *)(v45 + 28), (char *)v44 + *(int *)(v45 + 28), v40);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
      }
      break;
    default:
      uint64_t v4 = a2[1];
      *a1 = *a2;
      a1[1] = v4;
      uint64_t v5 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
      uint64_t v6 = *(int *)(v5 + 20);
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = type metadata accessor for UnknownStorage();
      uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
      swift_bridgeObjectRetain();
      v10(v7, v8, v9);
      uint64_t v11 = *(int *)(v5 + 24);
      uint64_t v12 = (void *)((char *)a1 + v11);
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        uint64_t v16 = &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?;
LABEL_7:
        uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(v16);
        memcpy(v12, v13, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        uint64_t v48 = *(void *)v13;
        unint64_t v49 = *((void *)v13 + 1);
        outlined copy of Data._Representation(*(void *)v13, v49);
        *uint64_t v12 = v48;
        v12[1] = v49;
        uint64_t v50 = *((void *)v13 + 3);
        v12[2] = *((void *)v13 + 2);
        v12[3] = v50;
        *((unsigned char *)v12 + 32) = v13[32];
        uint64_t v51 = *((void *)v13 + 5);
        unint64_t v52 = *((void *)v13 + 6);
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v51, v52);
        v12[5] = v51;
        v12[6] = v52;
        v10((char *)v12 + *(int *)(v14 + 32), &v13[*(int *)(v14 + 32)], v9);
        uint64_t v119 = v12;
        uint64_t v121 = v14;
        uint64_t v53 = *(int *)(v14 + 36);
        unint64_t v54 = (uint64_t *)((char *)v12 + v53);
        uint64_t v55 = &v13[v53];
        uint64_t v56 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
        uint64_t v57 = *(void *)(v56 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
        {
          uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
          memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
          uint64_t v59 = v119;
        }
        else
        {
          uint64_t v111 = v57;
          uint64_t v113 = v15;
          uint64_t v72 = *((void *)v55 + 1);
          *unint64_t v54 = *(void *)v55;
          v54[1] = v72;
          uint64_t v73 = *((void *)v55 + 3);
          v54[2] = *((void *)v55 + 2);
          v54[3] = v73;
          uint64_t v115 = (int *)v56;
          unint64_t v74 = v10;
          uint64_t v75 = v9;
          uint64_t v77 = *((void *)v55 + 4);
          unint64_t v76 = *((void *)v55 + 5);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined copy of Data._Representation(v77, v76);
          v54[4] = v77;
          v54[5] = v76;
          uint64_t v78 = *((void *)v55 + 6);
          unint64_t v79 = *((void *)v55 + 7);
          outlined copy of Data._Representation(v78, v79);
          v54[6] = v78;
          v54[7] = v79;
          uint64_t v80 = v115;
          v74((char *)v54 + v115[8], &v55[v115[8]], v9);
          uint64_t v81 = v115[9];
          uint64_t v117 = v54;
          __dst = (void *)((char *)v54 + v81);
          uint64_t v82 = &v55[v81];
          uint64_t v83 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
          uint64_t v84 = *(void *)(v83 - 8);
          uint64_t v110 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48);
          uint64_t v107 = v75;
          uint64_t v108 = v74;
          if (v110(v82, 1, v83))
          {
            uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
            memcpy(__dst, v82, *(void *)(*(void *)(v85 - 8) + 64));
          }
          else
          {
            uint64_t v95 = *((void *)v82 + 1);
            void *__dst = *(void *)v82;
            uint64_t v106 = v83;
            unint64_t v96 = *((void *)v82 + 2);
            outlined copy of Data._Representation(v95, v96);
            __dst[1] = v95;
            __dst[2] = v96;
            uint64_t v83 = v106;
            uint64_t v80 = v115;
            v74((char *)__dst + *(int *)(v106 + 24), &v82[*(int *)(v106 + 24)], v75);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v84 + 56))(__dst, 0, 1, v106);
          }
          uint64_t v97 = v80[10];
          uint64_t v98 = (void *)((char *)v54 + v97);
          uint64_t v99 = &v55[v97];
          if (v110(&v55[v97], 1, v83))
          {
            uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
            memcpy(v98, v99, *(void *)(*(void *)(v100 - 8) + 64));
          }
          else
          {
            uint64_t v101 = *((void *)v99 + 1);
            *uint64_t v98 = *(void *)v99;
            uint64_t v102 = v84;
            uint64_t v103 = v83;
            unint64_t v104 = *((void *)v99 + 2);
            outlined copy of Data._Representation(v101, v104);
            v98[1] = v101;
            v98[2] = v104;
            uint64_t v80 = v115;
            v108((char *)v98 + *(int *)(v103 + 24), &v99[*(int *)(v103 + 24)], v107);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v102 + 56))(v98, 0, 1, v103);
          }
          uint64_t v15 = v113;
          uint64_t v59 = v119;
          (*(void (**)(void *, void, uint64_t, int *))(v111 + 56))(v117, 0, 1, v80);
        }
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v15 + 56))(v59, 0, 1, v121);
      }
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v16 = a2[2];
        unint64_t v17 = a2[3];
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v16, v17);
        a1[2] = v16;
        a1[3] = v17;
        uint64_t v18 = *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(0) + 24);
        unint64_t v19 = (char *)a1 + v18;
        uint64_t v20 = (char *)a2 + v18;
        uint64_t v21 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
        break;
      case 2u:
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
        uint64_t v23 = *(int *)(updated + 20);
        uint64_t v24 = (char *)a1 + v23;
        uint64_t v25 = (char *)a2 + v23;
        uint64_t v26 = type metadata accessor for UnknownStorage();
        uint64_t v27 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16);
        swift_bridgeObjectRetain();
        v27(v24, v25, v26);
        uint64_t v28 = *(int *)(updated + 24);
        uint64_t v11 = (void *)((char *)a1 + v28);
        uint64_t v12 = (char *)a2 + v28;
        uint64_t v29 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
        uint64_t v30 = *(void *)(v29 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v12, 1, v29))
        {
          uint64_t v15 = &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?;
          goto LABEL_8;
        }
        uint64_t v56 = *(void *)v12;
        unint64_t v57 = *((void *)v12 + 1);
        outlined copy of Data._Representation(*(void *)v12, v57);
        *uint64_t v11 = v56;
        v11[1] = v57;
        uint64_t v113 = v27;
        v27((char *)v11 + *(int *)(v29 + 20), &v12[*(int *)(v29 + 20)], v26);
        uint64_t v58 = *(int *)(v29 + 24);
        uint64_t v59 = (char *)v11 + v58;
        uint64_t v60 = &v12[v58];
        uint64_t v61 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
        uint64_t v62 = *(void *)(v61 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
        {
          uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
          memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
        }
        else
        {
          uint64_t v111 = v62;
          uint64_t v81 = v59;
          uint64_t v83 = *(void *)v60;
          unint64_t v82 = *((void *)v60 + 1);
          outlined copy of Data._Representation(*(void *)v60, v82);
          void *v81 = v83;
          v81[1] = v82;
          uint64_t v84 = v81;
          v81[2] = *((void *)v60 + 2);
          v113((char *)v81 + *(int *)(v61 + 24), &v60[*(int *)(v61 + 24)], v26);
          uint64_t v85 = *(int *)(v61 + 28);
          uint64_t v109 = (void *)((char *)v81 + v85);
          uint64_t v86 = &v60[v85];
          uint64_t v87 = type metadata accessor for AttachmentLedger_EncryptionID(0);
          uint64_t v107 = *(void *)(v87 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v107 + 48))(v86, 1, v87))
          {
            uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
            memcpy(v109, v86, *(void *)(*(void *)(v88 - 8) + 64));
          }
          else
          {
            uint64_t v95 = *(void *)v86;
            unint64_t v105 = *((void *)v86 + 1);
            outlined copy of Data._Representation(*(void *)v86, v105);
            void *v109 = v95;
            uint64_t v84 = v81;
            v109[1] = v105;
            v113((char *)v109 + *(int *)(v87 + 20), &v86[*(int *)(v87 + 20)], v26);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v107 + 56))(v109, 0, 1, v87);
          }
          (*(void (**)(void *, void, uint64_t, uint64_t))(v111 + 56))(v84, 0, 1, v61);
        }
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v30 + 56))(v11, 0, 1, v29);
        break;
      case 3u:
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v32 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
        uint64_t v33 = *(int *)(v32 + 20);
        uint64_t v34 = (char *)a1 + v33;
        uint64_t v35 = (char *)a2 + v33;
        uint64_t v36 = type metadata accessor for UnknownStorage();
        uint64_t v37 = *(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16);
        swift_bridgeObjectRetain();
        v37(v34, v35, v36);
        uint64_t v38 = *(int *)(v32 + 24);
        uint64_t v39 = (void *)((char *)a1 + v38);
        uint64_t v40 = (void *)((char *)a2 + v38);
        uint64_t v41 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
        uint64_t v42 = *(void *)(v41 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
        {
          uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
          memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
        }
        else
        {
          uint64_t v64 = *v40;
          unint64_t v65 = v40[1];
          outlined copy of Data._Representation(*v40, v65);
          *uint64_t v39 = v64;
          v39[1] = v65;
          uint64_t v66 = v40[2];
          *((unsigned char *)v39 + 24) = *((unsigned char *)v40 + 24);
          v39[2] = v66;
          uint64_t v67 = v40[4];
          unint64_t v68 = v40[5];
          outlined copy of Data._Representation(v67, v68);
          v39[4] = v67;
          v39[5] = v68;
          v37((char *)v39 + *(int *)(v41 + 28), (char *)v40 + *(int *)(v41 + 28), v36);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
        }
        break;
      default:
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v4 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
        uint64_t v5 = *(int *)(v4 + 20);
        uint64_t v6 = (char *)a1 + v5;
        uint64_t v7 = (char *)a2 + v5;
        uint64_t v8 = type metadata accessor for UnknownStorage();
        uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
        swift_bridgeObjectRetain();
        v9(v6, v7, v8);
        uint64_t v10 = *(int *)(v4 + 24);
        uint64_t v11 = (void *)((char *)a1 + v10);
        uint64_t v12 = (char *)a2 + v10;
        uint64_t v13 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
        uint64_t v14 = *(void *)(v13 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
        {
          uint64_t v15 = &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?;
LABEL_8:
          uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(v15);
          memcpy(v11, v12, *(void *)(*(void *)(v31 - 8) + 64));
        }
        else
        {
          uint64_t v44 = *(void *)v12;
          unint64_t v45 = *((void *)v12 + 1);
          outlined copy of Data._Representation(*(void *)v12, v45);
          *uint64_t v11 = v44;
          v11[1] = v45;
          v11[2] = *((void *)v12 + 2);
          uint64_t v46 = *((void *)v12 + 3);
          *((unsigned char *)v11 + 32) = v12[32];
          v11[3] = v46;
          uint64_t v47 = *((void *)v12 + 5);
          unint64_t v48 = *((void *)v12 + 6);
          swift_bridgeObjectRetain();
          outlined copy of Data._Representation(v47, v48);
          v11[5] = v47;
          v11[6] = v48;
          v9((char *)v11 + *(int *)(v13 + 32), &v12[*(int *)(v13 + 32)], v8);
          unint64_t v112 = v11;
          uint64_t v114 = v13;
          uint64_t v49 = *(int *)(v13 + 36);
          uint64_t v50 = (uint64_t *)((char *)v11 + v49);
          uint64_t v51 = &v12[v49];
          uint64_t v52 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
          uint64_t v53 = *(void *)(v52 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
          {
            uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
            memcpy(v50, v51, *(void *)(*(void *)(v54 - 8) + 64));
            uint64_t v55 = v112;
          }
          else
          {
            uint64_t v104 = v53;
            uint64_t v106 = v14;
            *uint64_t v50 = *(void *)v51;
            v50[1] = *((void *)v51 + 1);
            v50[2] = *((void *)v51 + 2);
            v50[3] = *((void *)v51 + 3);
            uint64_t v108 = (int *)v52;
            unint64_t v69 = v9;
            uint64_t v70 = v8;
            uint64_t v72 = *((void *)v51 + 4);
            unint64_t v71 = *((void *)v51 + 5);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined copy of Data._Representation(v72, v71);
            v50[4] = v72;
            v50[5] = v71;
            uint64_t v73 = *((void *)v51 + 6);
            unint64_t v74 = *((void *)v51 + 7);
            outlined copy of Data._Representation(v73, v74);
            v50[6] = v73;
            v50[7] = v74;
            uint64_t v75 = v108;
            v69((char *)v50 + v108[8], &v51[v108[8]], v8);
            uint64_t v76 = v108[9];
            uint64_t v110 = v50;
            __dst = (void *)((char *)v50 + v76);
            uint64_t v77 = &v51[v76];
            uint64_t v78 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
            uint64_t v79 = *(void *)(v78 - 8);
            uint64_t v103 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48);
            uint64_t v101 = v69;
            if (v103(v77, 1, v78))
            {
              uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
              memcpy(__dst, v77, *(void *)(*(void *)(v80 - 8) + 64));
            }
            else
            {
              uint64_t v100 = v78;
              void *__dst = *(void *)v77;
              uint64_t v89 = *((void *)v77 + 1);
              unint64_t v90 = *((void *)v77 + 2);
              outlined copy of Data._Representation(v89, v90);
              __dst[1] = v89;
              __dst[2] = v90;
              uint64_t v78 = v100;
              uint64_t v75 = v108;
              v69((char *)__dst + *(int *)(v100 + 24), &v77[*(int *)(v100 + 24)], v70);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v79 + 56))(__dst, 0, 1, v100);
            }
            uint64_t v91 = v75[10];
            uint64_t v92 = (void *)((char *)v50 + v91);
            uint64_t v93 = &v51[v91];
            if (v103(&v51[v91], 1, v78))
            {
              uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
              memcpy(v92, v93, *(void *)(*(void *)(v94 - 8) + 64));
            }
            else
            {
              *uint64_t v92 = *(void *)v93;
              uint64_t v96 = v78;
              uint64_t v97 = *((void *)v93 + 1);
              unint64_t v98 = *((void *)v93 + 2);
              outlined copy of Data._Representation(v97, v98);
              v92[1] = v97;
              v92[2] = v98;
              uint64_t v75 = v108;
              v101((char *)v92 + *(int *)(v96 + 24), &v93[*(int *)(v96 + 24)], v70);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v79 + 56))(v92, 0, 1, v96);
            }
            uint64_t v55 = v112;
            (*(void (**)(void *, void, uint64_t, int *))(v104 + 56))(v110, 0, 1, v75);
            uint64_t v14 = v106;
          }
          (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v14 + 56))(v55, 0, 1, v114);
        }
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(_OWORD *a1, _OWORD *a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      long long v16 = a2[1];
      *a1 = *a2;
      a1[1] = v16;
      uint64_t v17 = *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(0) + 24);
      uint64_t v18 = (char *)a1 + v17;
      unint64_t v19 = (char *)a2 + v17;
      uint64_t v20 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
      break;
    case 2u:
      *a1 = *a2;
      uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
      uint64_t v22 = *(int *)(updated + 20);
      uint64_t v23 = (char *)a1 + v22;
      uint64_t v24 = (char *)a2 + v22;
      uint64_t v25 = type metadata accessor for UnknownStorage();
      uint64_t v26 = *(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 32);
      v26(v23, v24, v25);
      uint64_t v27 = *(int *)(updated + 24);
      uint64_t v28 = (_OWORD *)((char *)a1 + v27);
      uint64_t v29 = (_OWORD *)((char *)a2 + v27);
      uint64_t v30 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
      uint64_t v31 = *(void *)(v30 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
      {
        uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
        memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
      }
      else
      {
        uint64_t v89 = v31;
        _OWORD *v28 = *v29;
        v26((char *)v28 + *(int *)(v30 + 20), (char *)v29 + *(int *)(v30 + 20), v25);
        uint64_t v53 = *(int *)(v30 + 24);
        __dsta = v28;
        uint64_t v54 = (void *)((char *)v28 + v53);
        uint64_t v55 = (void *)((char *)v29 + v53);
        uint64_t v56 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
        uint64_t v57 = *(void *)(v56 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
        {
          uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
          memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
          uint64_t v60 = v89;
          uint64_t v59 = __dsta;
        }
        else
        {
          uint64_t v83 = v57;
          *(_OWORD *)uint64_t v54 = *(_OWORD *)v55;
          v54[2] = v55[2];
          v26((char *)v54 + *(int *)(v56 + 24), (char *)v55 + *(int *)(v56 + 24), v25);
          uint64_t v85 = v56;
          uint64_t v87 = v54;
          uint64_t v68 = *(int *)(v56 + 28);
          unint64_t v69 = (_OWORD *)((char *)v54 + v68);
          uint64_t v70 = (_OWORD *)((char *)v55 + v68);
          uint64_t v71 = type metadata accessor for AttachmentLedger_EncryptionID(0);
          uint64_t v72 = *(void *)(v71 - 8);
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v72 + 48))(v70, 1, v71))
          {
            uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
            memcpy(v69, v70, *(void *)(*(void *)(v73 - 8) + 64));
          }
          else
          {
            _OWORD *v69 = *v70;
            v26((char *)v69 + *(int *)(v71 + 20), (char *)v70 + *(int *)(v71 + 20), v25);
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v72 + 56))(v69, 0, 1, v71);
          }
          uint64_t v60 = v89;
          uint64_t v59 = __dsta;
          (*(void (**)(void *, void, uint64_t, uint64_t))(v83 + 56))(v87, 0, 1, v85);
        }
        (*(void (**)(void *, void, uint64_t, uint64_t))(v60 + 56))(v59, 0, 1, v30);
      }
      break;
    case 3u:
      *a1 = *a2;
      uint64_t v33 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
      uint64_t v34 = *(int *)(v33 + 20);
      uint64_t v35 = (char *)a1 + v34;
      uint64_t v36 = (char *)a2 + v34;
      uint64_t v37 = type metadata accessor for UnknownStorage();
      uint64_t v38 = *(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32);
      v38(v35, v36, v37);
      uint64_t v39 = *(int *)(v33 + 24);
      uint64_t v40 = (_OWORD *)((char *)a1 + v39);
      uint64_t v41 = (_OWORD *)((char *)a2 + v39);
      uint64_t v42 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
      uint64_t v43 = *(void *)(v42 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
        memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
      }
      else
      {
        *uint64_t v40 = *v41;
        *((void *)v40 + 2) = *((void *)v41 + 2);
        *((unsigned char *)v40 + 24) = *((unsigned char *)v41 + 24);
        v40[2] = v41[2];
        v38((char *)v40 + *(int *)(v42 + 28), (char *)v41 + *(int *)(v42 + 28), v37);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
      }
      break;
    default:
      *a1 = *a2;
      uint64_t v4 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
      uint64_t v5 = *(int *)(v4 + 20);
      uint64_t v6 = (char *)a1 + v5;
      uint64_t v7 = (char *)a2 + v5;
      uint64_t v8 = type metadata accessor for UnknownStorage();
      uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32);
      v9(v6, v7, v8);
      uint64_t v10 = *(int *)(v4 + 24);
      uint64_t v11 = (_OWORD *)((char *)a1 + v10);
      uint64_t v12 = (_OWORD *)((char *)a2 + v10);
      uint64_t v13 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      uint64_t v14 = *(unsigned int (***)(_OWORD *, uint64_t, uint64_t))(v13 - 8);
      if (v14[6](v12, 1, v13))
      {
        uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
        memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        __dst = v14;
        *uint64_t v11 = *v12;
        uint64_t v45 = *((void *)v12 + 3);
        *((void *)v11 + 2) = *((void *)v12 + 2);
        *((void *)v11 + 3) = v45;
        *((unsigned char *)v11 + 32) = *((unsigned char *)v12 + 32);
        *(_OWORD *)((char *)v11 + 40) = *(_OWORD *)((char *)v12 + 40);
        v9((char *)v11 + *(int *)(v13 + 32), (char *)v12 + *(int *)(v13 + 32), v8);
        uint64_t v46 = *(int *)(v13 + 36);
        uint64_t v47 = (_OWORD *)((char *)v11 + v46);
        unint64_t v48 = (_OWORD *)((char *)v12 + v46);
        uint64_t v88 = v9;
        uint64_t v49 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
        uint64_t v50 = *(void *)(v49 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
        {
          uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
          memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
          uint64_t v52 = (void (**)(_OWORD *, void, uint64_t, uint64_t))__dst;
        }
        else
        {
          uint64_t v82 = v50;
          long long v61 = v48[1];
          *uint64_t v47 = *v48;
          v47[1] = v61;
          long long v62 = v48[3];
          v47[2] = v48[2];
          v47[3] = v62;
          v88((char *)v47 + *(int *)(v49 + 32), (char *)v48 + *(int *)(v49 + 32), v8);
          uint64_t v84 = v49;
          uint64_t v86 = v47;
          uint64_t v63 = *(int *)(v49 + 36);
          uint64_t v80 = (void *)((char *)v47 + v63);
          uint64_t v64 = (void *)((char *)v48 + v63);
          uint64_t v65 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
          uint64_t v66 = *(void *)(v65 - 8);
          uint64_t v81 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v66 + 48);
          uint64_t v79 = v66;
          if (v81(v64, 1, v65))
          {
            uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
            memcpy(v80, v64, *(void *)(*(void *)(v67 - 8) + 64));
          }
          else
          {
            *uint64_t v80 = *v64;
            *(_OWORD *)(v80 + 1) = *(_OWORD *)(v64 + 1);
            v88((char *)v80 + *(int *)(v65 + 24), (char *)v64 + *(int *)(v65 + 24), v8);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v66 + 56))(v80, 0, 1, v65);
          }
          uint64_t v74 = v65;
          uint64_t v52 = (void (**)(_OWORD *, void, uint64_t, uint64_t))__dst;
          uint64_t v75 = *(int *)(v84 + 40);
          __dstb = (void *)((char *)v86 + v75);
          uint64_t v76 = (void *)((char *)v48 + v75);
          if (v81(v76, 1, v74))
          {
            uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
            memcpy(__dstb, v76, *(void *)(*(void *)(v77 - 8) + 64));
          }
          else
          {
            void *__dstb = *v76;
            *(_OWORD *)(__dstb + 1) = *(_OWORD *)(v76 + 1);
            v88((char *)__dstb + *(int *)(v74 + 24), (char *)v76 + *(int *)(v74 + 24), v8);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v79 + 56))(__dstb, 0, 1, v74);
          }
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v82 + 56))(v86, 0, 1, v84);
        }
        v52[7](v11, 0, 1, v13);
      }
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        long long v16 = a2[1];
        *a1 = *a2;
        a1[1] = v16;
        uint64_t v17 = *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(0) + 24);
        uint64_t v18 = (char *)a1 + v17;
        unint64_t v19 = (char *)a2 + v17;
        uint64_t v20 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
        break;
      case 2u:
        *a1 = *a2;
        uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
        uint64_t v22 = *(int *)(updated + 20);
        uint64_t v23 = (char *)a1 + v22;
        uint64_t v24 = (char *)a2 + v22;
        uint64_t v25 = type metadata accessor for UnknownStorage();
        uint64_t v26 = *(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 32);
        v26(v23, v24, v25);
        uint64_t v27 = *(int *)(updated + 24);
        uint64_t v28 = (_OWORD *)((char *)a1 + v27);
        uint64_t v29 = (_OWORD *)((char *)a2 + v27);
        uint64_t v30 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
        uint64_t v31 = *(void *)(v30 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
        {
          uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
          memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
        }
        else
        {
          uint64_t v90 = v31;
          _OWORD *v28 = *v29;
          v26((char *)v28 + *(int *)(v30 + 20), (char *)v29 + *(int *)(v30 + 20), v25);
          uint64_t v53 = *(int *)(v30 + 24);
          uint64_t v92 = v28;
          uint64_t v54 = (void *)((char *)v28 + v53);
          uint64_t v55 = (void *)((char *)v29 + v53);
          uint64_t v56 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
          uint64_t v57 = *(void *)(v56 - 8);
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
          {
            uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
            memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
            uint64_t v60 = v90;
            uint64_t v59 = v92;
          }
          else
          {
            uint64_t v84 = v57;
            *(_OWORD *)uint64_t v54 = *(_OWORD *)v55;
            v54[2] = v55[2];
            v26((char *)v54 + *(int *)(v56 + 24), (char *)v55 + *(int *)(v56 + 24), v25);
            uint64_t v86 = v56;
            uint64_t v88 = v54;
            uint64_t v68 = *(int *)(v56 + 28);
            unint64_t v69 = (_OWORD *)((char *)v54 + v68);
            uint64_t v70 = (_OWORD *)((char *)v55 + v68);
            uint64_t v71 = type metadata accessor for AttachmentLedger_EncryptionID(0);
            uint64_t v72 = *(void *)(v71 - 8);
            if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v72 + 48))(v70, 1, v71))
            {
              uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
              memcpy(v69, v70, *(void *)(*(void *)(v73 - 8) + 64));
            }
            else
            {
              _OWORD *v69 = *v70;
              v26((char *)v69 + *(int *)(v71 + 20), (char *)v70 + *(int *)(v71 + 20), v25);
              (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v72 + 56))(v69, 0, 1, v71);
            }
            uint64_t v60 = v90;
            uint64_t v59 = v92;
            (*(void (**)(void *, void, uint64_t, uint64_t))(v84 + 56))(v88, 0, 1, v86);
          }
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v60 + 56))(v59, 0, 1, v30);
        }
        break;
      case 3u:
        *a1 = *a2;
        uint64_t v33 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
        uint64_t v34 = *(int *)(v33 + 20);
        uint64_t v35 = (char *)a1 + v34;
        uint64_t v36 = (char *)a2 + v34;
        uint64_t v37 = type metadata accessor for UnknownStorage();
        uint64_t v38 = *(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32);
        v38(v35, v36, v37);
        uint64_t v39 = *(int *)(v33 + 24);
        uint64_t v40 = (_OWORD *)((char *)a1 + v39);
        uint64_t v41 = (_OWORD *)((char *)a2 + v39);
        uint64_t v42 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
        uint64_t v43 = *(void *)(v42 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
        {
          uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
          memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
        }
        else
        {
          *uint64_t v40 = *v41;
          *((void *)v40 + 2) = *((void *)v41 + 2);
          *((unsigned char *)v40 + 24) = *((unsigned char *)v41 + 24);
          v40[2] = v41[2];
          v38((char *)v40 + *(int *)(v42 + 28), (char *)v41 + *(int *)(v42 + 28), v37);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
        }
        break;
      default:
        *a1 = *a2;
        uint64_t v4 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
        uint64_t v5 = *(int *)(v4 + 20);
        uint64_t v6 = (char *)a1 + v5;
        uint64_t v7 = (char *)a2 + v5;
        uint64_t v8 = type metadata accessor for UnknownStorage();
        uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32);
        v9(v6, v7, v8);
        uint64_t v10 = *(int *)(v4 + 24);
        uint64_t v11 = (_OWORD *)((char *)a1 + v10);
        uint64_t v12 = (_OWORD *)((char *)a2 + v10);
        uint64_t v13 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
        uint64_t v14 = *(void *)(v13 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
        {
          uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
          memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
        }
        else
        {
          uint64_t v91 = v14;
          *uint64_t v11 = *v12;
          uint64_t v45 = *((void *)v12 + 3);
          *((void *)v11 + 2) = *((void *)v12 + 2);
          *((void *)v11 + 3) = v45;
          *((unsigned char *)v11 + 32) = *((unsigned char *)v12 + 32);
          *(_OWORD *)((char *)v11 + 40) = *(_OWORD *)((char *)v12 + 40);
          v9((char *)v11 + *(int *)(v13 + 32), (char *)v12 + *(int *)(v13 + 32), v8);
          uint64_t v46 = *(int *)(v13 + 36);
          uint64_t v47 = (_OWORD *)((char *)v11 + v46);
          unint64_t v48 = (_OWORD *)((char *)v12 + v46);
          uint64_t v89 = v9;
          uint64_t v49 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
          uint64_t v50 = *(void *)(v49 - 8);
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
          {
            uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
            memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
            uint64_t v52 = v91;
          }
          else
          {
            uint64_t v83 = v50;
            long long v61 = v48[1];
            *uint64_t v47 = *v48;
            v47[1] = v61;
            long long v62 = v48[3];
            v47[2] = v48[2];
            v47[3] = v62;
            v89((char *)v47 + *(int *)(v49 + 32), (char *)v48 + *(int *)(v49 + 32), v8);
            uint64_t v85 = v49;
            uint64_t v87 = v47;
            uint64_t v63 = *(int *)(v49 + 36);
            uint64_t v81 = (void *)((char *)v47 + v63);
            uint64_t v64 = (void *)((char *)v48 + v63);
            uint64_t v65 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
            uint64_t v66 = *(void *)(v65 - 8);
            uint64_t v82 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v66 + 48);
            uint64_t v80 = v66;
            if (v82(v64, 1, v65))
            {
              uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
              memcpy(v81, v64, *(void *)(*(void *)(v67 - 8) + 64));
            }
            else
            {
              void *v81 = *v64;
              *(_OWORD *)(v81 + 1) = *(_OWORD *)(v64 + 1);
              v89((char *)v81 + *(int *)(v65 + 24), (char *)v64 + *(int *)(v65 + 24), v8);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v66 + 56))(v81, 0, 1, v65);
            }
            uint64_t v74 = v65;
            uint64_t v52 = v91;
            uint64_t v75 = *(int *)(v85 + 40);
            uint64_t v76 = (void *)((char *)v87 + v75);
            uint64_t v77 = (void *)((char *)v48 + v75);
            if (v82(v77, 1, v74))
            {
              uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
              memcpy(v76, v77, *(void *)(*(void *)(v78 - 8) + 64));
            }
            else
            {
              *uint64_t v76 = *v77;
              *(_OWORD *)(v76 + 1) = *(_OWORD *)(v77 + 1);
              v89((char *)v76 + *(int *)(v74 + 24), (char *)v77 + *(int *)(v74 + 24), v8);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v80 + 56))(v76, 0, 1, v74);
            }
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v83 + 56))(v87, 0, 1, v85);
          }
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v52 + 56))(v11, 0, 1, v13);
        }
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(a1, a2, a3, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
}

uint64_t type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t), uint64_t (*a6)(uint64_t), uint64_t (*a7)(uint64_t))
{
  uint64_t result = a4(319);
  if (v11 <= 0x3F)
  {
    uint64_t result = a5(319);
    if (v12 <= 0x3F)
    {
      uint64_t result = a6(319);
      if (v13 <= 0x3F)
      {
        uint64_t result = a7(319);
        if (v14 <= 0x3F)
        {
          swift_initEnumMetadataMultiPayload();
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    unint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 24);
    unint64_t v14 = (uint64_t *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v20 = *v15;
      unint64_t v21 = v15[1];
      outlined copy of Data._Representation(*v15, v21);
      *unint64_t v14 = v20;
      v14[1] = v21;
      uint64_t v22 = v15[3];
      v14[2] = v15[2];
      v14[3] = v22;
      *((unsigned char *)v14 + 32) = *((unsigned char *)v15 + 32);
      uint64_t v23 = v15[5];
      unint64_t v24 = v15[6];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v23, v24);
      v14[5] = v23;
      v14[6] = v24;
      v12((char *)v14 + *(int *)(v16 + 32), (char *)v15 + *(int *)(v16 + 32), v11);
      uint64_t v60 = v16;
      uint64_t v25 = *(int *)(v16 + 36);
      uint64_t v26 = (void *)((char *)v14 + v25);
      uint64_t v27 = (uint64_t *)((char *)v15 + v25);
      uint64_t v28 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      uint64_t v29 = *(void *)(v28 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
      {
        uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
        uint64_t v31 = v60;
      }
      else
      {
        uint64_t v55 = v29;
        uint64_t v56 = v17;
        uint64_t v32 = v27[1];
        *uint64_t v26 = *v27;
        v26[1] = v32;
        uint64_t v33 = v27[3];
        v26[2] = v27[2];
        v26[3] = v33;
        uint64_t v57 = v12;
        uint64_t v34 = v27[4];
        unint64_t v35 = v27[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v34, v35);
        v26[4] = v34;
        v26[5] = v35;
        uint64_t v36 = v27[6];
        unint64_t v37 = v27[7];
        outlined copy of Data._Representation(v36, v37);
        v26[6] = v36;
        v26[7] = v37;
        v57((char *)v26 + *(int *)(v28 + 32), (char *)v27 + *(int *)(v28 + 32), v11);
        uint64_t v58 = v28;
        uint64_t v38 = *(int *)(v28 + 36);
        uint64_t v39 = (void *)((char *)v26 + v38);
        uint64_t v40 = (void *)((char *)v27 + v38);
        uint64_t v41 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        uint64_t v42 = *(void *)(v41 - 8);
        uint64_t v54 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v42 + 48);
        uint64_t v59 = v26;
        uint64_t v53 = v42;
        if (v54(v40, 1, v41))
        {
          uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
        }
        else
        {
          uint64_t v44 = v40[1];
          *uint64_t v39 = *v40;
          unint64_t v52 = v40[2];
          outlined copy of Data._Representation(v44, v52);
          v39[1] = v44;
          v39[2] = v52;
          v57((char *)v39 + *(int *)(v41 + 24), (char *)v40 + *(int *)(v41 + 24), v11);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
        }
        uint64_t v31 = v60;
        uint64_t v45 = *(int *)(v58 + 40);
        uint64_t v46 = (void *)((char *)v59 + v45);
        uint64_t v47 = (void *)((char *)v27 + v45);
        if (v54(v47, 1, v41))
        {
          uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v46, v47, *(void *)(*(void *)(v48 - 8) + 64));
        }
        else
        {
          uint64_t v49 = v47[1];
          *uint64_t v46 = *v47;
          unint64_t v50 = v47[2];
          outlined copy of Data._Representation(v49, v50);
          v46[1] = v49;
          v46[2] = v50;
          v57((char *)v46 + *(int *)(v41 + 24), (char *)v47 + *(int *)(v41 + 24), v11);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v53 + 56))(v46, 0, 1, v41);
        }
        uint64_t v17 = v56;
        (*(void (**)(void *, void, uint64_t, uint64_t))(v55 + 56))(v59, 0, 1, v58);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v31);
    }
  }
  return v4;
}

uint64_t destroy for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v16(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    outlined consume of Data._Representation(*(void *)v6, *(void *)(v6 + 8));
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(*(void *)(v6 + 40), *(void *)(v6 + 48));
    v16(v6 + *(int *)(v7 + 32), v5);
    uint64_t v9 = v6 + *(int *)(v7 + 36);
    uint64_t v10 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((void *)v10 - 1) + 48))(v9, 1, v10);
    if (!result)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(*(void *)(v9 + 32), *(void *)(v9 + 40));
      outlined consume of Data._Representation(*(void *)(v9 + 48), *(void *)(v9 + 56));
      v16(v9 + v10[8], v5);
      uint64_t v11 = v9 + v10[9];
      uint64_t v12 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
      if (!v13(v11, 1, v12))
      {
        outlined consume of Data._Representation(*(void *)(v11 + 8), *(void *)(v11 + 16));
        v16(v11 + *(int *)(v12 + 24), v5);
      }
      uint64_t v14 = v9 + v10[10];
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v13)(v14, 1, v12);
      if (!result)
      {
        outlined consume of Data._Representation(*(void *)(v14 + 8), *(void *)(v14 + 16));
        uint64_t v15 = v14 + *(int *)(v12 + 24);
        return ((uint64_t (*)(uint64_t, uint64_t))v16)(v15, v5);
      }
    }
  }
  return result;
}

void *initializeWithCopy for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v18 = *v14;
    unint64_t v19 = v14[1];
    outlined copy of Data._Representation(*v14, v19);
    void *v13 = v18;
    v13[1] = v19;
    uint64_t v20 = v14[3];
    v13[2] = v14[2];
    v13[3] = v20;
    *((unsigned char *)v13 + 32) = *((unsigned char *)v14 + 32);
    uint64_t v21 = v14[5];
    unint64_t v22 = v14[6];
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v21, v22);
    v13[5] = v21;
    v13[6] = v22;
    v11((char *)v13 + *(int *)(v15 + 32), (char *)v14 + *(int *)(v15 + 32), v10);
    uint64_t v58 = v15;
    uint64_t v23 = *(int *)(v15 + 36);
    unint64_t v24 = (void *)((char *)v13 + v23);
    uint64_t v25 = (uint64_t *)((char *)v14 + v23);
    uint64_t v26 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
      uint64_t v29 = v58;
    }
    else
    {
      uint64_t v53 = v27;
      uint64_t v54 = v16;
      uint64_t v30 = v25[1];
      *unint64_t v24 = *v25;
      v24[1] = v30;
      uint64_t v31 = v25[3];
      v24[2] = v25[2];
      v24[3] = v31;
      uint64_t v55 = v11;
      uint64_t v32 = v25[4];
      unint64_t v33 = v25[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v32, v33);
      v24[4] = v32;
      v24[5] = v33;
      uint64_t v34 = v25[6];
      unint64_t v35 = v25[7];
      outlined copy of Data._Representation(v34, v35);
      v24[6] = v34;
      v24[7] = v35;
      v55((char *)v24 + *(int *)(v26 + 32), (char *)v25 + *(int *)(v26 + 32), v10);
      uint64_t v57 = v26;
      uint64_t v36 = *(int *)(v26 + 36);
      unint64_t v37 = (void *)((char *)v24 + v36);
      uint64_t v38 = (void *)((char *)v25 + v36);
      uint64_t v39 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      uint64_t v40 = *(void *)(v39 - 8);
      unint64_t v52 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v40 + 48);
      uint64_t v56 = v24;
      if (v52(v38, 1, v39))
      {
        uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
      }
      else
      {
        uint64_t v42 = v38[1];
        *unint64_t v37 = *v38;
        uint64_t v51 = v40;
        unint64_t v43 = v38[2];
        outlined copy of Data._Representation(v42, v43);
        v37[1] = v42;
        v37[2] = v43;
        uint64_t v40 = v51;
        v55((char *)v37 + *(int *)(v39 + 24), (char *)v38 + *(int *)(v39 + 24), v10);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(v37, 0, 1, v39);
      }
      uint64_t v29 = v58;
      uint64_t v44 = *(int *)(v57 + 40);
      uint64_t v45 = (void *)((char *)v56 + v44);
      uint64_t v46 = (void *)((char *)v25 + v44);
      if (v52(v46, 1, v39))
      {
        uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
      }
      else
      {
        uint64_t v48 = v46[1];
        *uint64_t v45 = *v46;
        unint64_t v49 = v46[2];
        outlined copy of Data._Representation(v48, v49);
        v45[1] = v48;
        v45[2] = v49;
        v55((char *)v45 + *(int *)(v39 + 24), (char *)v46 + *(int *)(v39 + 24), v10);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v40 + 56))(v45, 0, 1, v39);
      }
      uint64_t v16 = v54;
      (*(void (**)(void *, void, uint64_t, uint64_t))(v53 + 56))(v56, 0, 1, v57);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v29);
  }
  return a1;
}

void *assignWithCopy for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v136 = *(void *)(v9 - 8);
  uint64_t v137 = v9;
  uint64_t v10 = *(void (**)(char *, char *))(v136 + 24);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (uint64_t)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = (int *)type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v15 + 48);
  LODWORD(v7) = v16(v12, 1, v14);
  int v17 = v16((uint64_t)v13, 1, v14);
  if (v7)
  {
    if (!v17)
    {
      uint64_t v18 = *(void *)v13;
      unint64_t v19 = *((void *)v13 + 1);
      outlined copy of Data._Representation(*(void *)v13, v19);
      *(void *)uint64_t v12 = v18;
      *(void *)(v12 + 8) = v19;
      *(void *)(v12 + 16) = *((void *)v13 + 2);
      uint64_t v20 = *((void *)v13 + 3);
      *(unsigned char *)(v12 + 32) = v13[32];
      *(void *)(v12 + 24) = v20;
      uint64_t v21 = *((void *)v13 + 5);
      unint64_t v22 = *((void *)v13 + 6);
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v21, v22);
      *(void *)(v12 + 40) = v21;
      *(void *)(v12 + 48) = v22;
      __src = *(void (**)(uint64_t, char *, uint64_t))(v136 + 16);
      __src(v12 + v14[8], &v13[v14[8]], v137);
      uint64_t v23 = v14[9];
      unint64_t v24 = (char *)(v12 + v23);
      uint64_t v25 = &v13[v23];
      uint64_t v26 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      uint64_t v27 = *(void *)(v26 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        uint64_t v126 = v27;
        *(void *)unint64_t v24 = *(void *)v25;
        *((void *)v24 + 1) = *((void *)v25 + 1);
        *((void *)v24 + 2) = *((void *)v25 + 2);
        *((void *)v24 + 3) = *((void *)v25 + 3);
        uint64_t v131 = v26;
        uint64_t v58 = *((void *)v25 + 4);
        unint64_t v59 = *((void *)v25 + 5);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v58, v59);
        *((void *)v24 + 4) = v58;
        *((void *)v24 + 5) = v59;
        uint64_t v60 = *((void *)v25 + 6);
        unint64_t v61 = *((void *)v25 + 7);
        outlined copy of Data._Representation(v60, v61);
        *((void *)v24 + 6) = v60;
        *((void *)v24 + 7) = v61;
        __src((uint64_t)&v24[*(int *)(v131 + 32)], &v25[*(int *)(v131 + 32)], v137);
        uint64_t v62 = *(int *)(v26 + 36);
        uint64_t v63 = &v24[v62];
        uint64_t v64 = &v25[v62];
        uint64_t v65 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        uint64_t v66 = *(void *)(v65 - 8);
        __dsta = (int *)v65;
        uint64_t v123 = *(unsigned int (**)(char *, uint64_t))(v66 + 48);
        uint64_t v119 = v66;
        if (v123(v64, 1))
        {
          uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v63, v64, *(void *)(*(void *)(v67 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v63 = *(void *)v64;
          unint64_t v117 = *((void *)v64 + 2);
          uint64_t v118 = *((void *)v64 + 1);
          outlined copy of Data._Representation(v118, v117);
          *((void *)v63 + 1) = v118;
          *((void *)v63 + 2) = v117;
          __src((uint64_t)&v63[__dsta[6]], &v64[__dsta[6]], v137);
          (*(void (**)(char *, void, uint64_t, int *))(v66 + 56))(v63, 0, 1, __dsta);
        }
        uint64_t v68 = v26;
        uint64_t v69 = *(int *)(v26 + 40);
        uint64_t v70 = &v24[v69];
        uint64_t v71 = &v25[v69];
        if (((unsigned int (*)(char *, uint64_t, int *))v123)(v71, 1, __dsta))
        {
          uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v70, v71, *(void *)(*(void *)(v72 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v70 = *(void *)v71;
          uint64_t v74 = *((void *)v71 + 1);
          unint64_t v73 = *((void *)v71 + 2);
          outlined copy of Data._Representation(v74, v73);
          *((void *)v70 + 1) = v74;
          *((void *)v70 + 2) = v73;
          __src((uint64_t)&v70[__dsta[6]], &v71[__dsta[6]], v137);
          uint64_t v68 = v131;
          (*(void (**)(char *, void, uint64_t, int *))(v119 + 56))(v70, 0, 1, __dsta);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v126 + 56))(v24, 0, 1, v68);
        goto LABEL_24;
      }
      size_t v28 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?)
                                  - 8)
                      + 64);
      uint64_t v29 = v24;
      uint64_t v30 = v25;
      goto LABEL_5;
    }
    goto LABEL_8;
  }
  if (!v17)
  {
    uint64_t v34 = *(void *)v13;
    unint64_t v35 = *((void *)v13 + 1);
    outlined copy of Data._Representation(*(void *)v13, v35);
    uint64_t v36 = *(void *)v12;
    unint64_t v37 = *(void *)(v12 + 8);
    *(void *)uint64_t v12 = v34;
    *(void *)(v12 + 8) = v35;
    outlined consume of Data._Representation(v36, v37);
    *(void *)(v12 + 16) = *((void *)v13 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v38 = *((void *)v13 + 3);
    *(unsigned char *)(v12 + 32) = v13[32];
    *(void *)(v12 + 24) = v38;
    uint64_t v39 = *((void *)v13 + 5);
    unint64_t v40 = *((void *)v13 + 6);
    outlined copy of Data._Representation(v39, v40);
    uint64_t v41 = *(void *)(v12 + 40);
    unint64_t v42 = *(void *)(v12 + 48);
    *(void *)(v12 + 40) = v39;
    *(void *)(v12 + 48) = v40;
    outlined consume of Data._Representation(v41, v42);
    ((void (*)(uint64_t, char *, uint64_t))v10)(v12 + v14[8], &v13[v14[8]], v137);
    uint64_t v43 = v14[9];
    v12 += v43;
    uint64_t v44 = &v13[v43];
    uint64_t v14 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    uint64_t v15 = *((void *)v14 - 1);
    uint64_t v45 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v15 + 48);
    int v46 = v45(v12, 1, v14);
    int v47 = v45((uint64_t)v44, 1, v14);
    if (v46)
    {
      if (!v47)
      {
        *(void *)uint64_t v12 = *(void *)v44;
        *(void *)(v12 + 8) = *((void *)v44 + 1);
        *(void *)(v12 + 16) = *((void *)v44 + 2);
        *(void *)(v12 + 24) = *((void *)v44 + 3);
        uint64_t v48 = *((void *)v44 + 4);
        unint64_t v49 = *((void *)v44 + 5);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v48, v49);
        *(void *)(v12 + 32) = v48;
        *(void *)(v12 + 40) = v49;
        uint64_t v50 = *((void *)v44 + 6);
        unint64_t v51 = *((void *)v44 + 7);
        outlined copy of Data._Representation(v50, v51);
        *(void *)(v12 + 48) = v50;
        *(void *)(v12 + 56) = v51;
        __srca = *(void (**)(uint64_t, char *, uint64_t))(v136 + 16);
        __srca(v12 + v14[8], &v44[v14[8]], v137);
        uint64_t v52 = v14[9];
        __dst = (void *)(v12 + v52);
        uint64_t v53 = &v44[v52];
        uint64_t v54 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        uint64_t v55 = *(void *)(v54 - 8);
        uint64_t v130 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48);
        uint64_t v125 = v55;
        if (v130(v53, 1, v54))
        {
          uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(__dst, v53, *(void *)(*(void *)(v56 - 8) + 64));
          uint64_t v57 = __srca;
        }
        else
        {
          void *__dst = *(void *)v53;
          unint64_t v120 = *((void *)v53 + 2);
          uint64_t v91 = *((void *)v53 + 1);
          outlined copy of Data._Representation(v91, v120);
          __dst[1] = v91;
          __dst[2] = v120;
          uint64_t v92 = *(int *)(v54 + 24);
          uint64_t v93 = &v53[v92];
          uint64_t v57 = __srca;
          __srca((uint64_t)__dst + v92, v93, v137);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v55 + 56))(__dst, 0, 1, v54);
        }
        uint64_t v94 = v14[10];
        uint64_t v95 = (char *)(v12 + v94);
        uint64_t v96 = &v44[v94];
        if (!v130(v96, 1, v54))
        {
          *(void *)uint64_t v95 = *(void *)v96;
          uint64_t v97 = (void (*)(char *, char *, uint64_t))v57;
          uint64_t v98 = *((void *)v96 + 1);
          unint64_t v99 = *((void *)v96 + 2);
          outlined copy of Data._Representation(v98, v99);
          *((void *)v95 + 1) = v98;
          *((void *)v95 + 2) = v99;
          v97(&v95[*(int *)(v54 + 24)], &v96[*(int *)(v54 + 24)], v137);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v125 + 56))(v95, 0, 1, v54);
          goto LABEL_24;
        }
        size_t v28 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?)
                                    - 8)
                        + 64);
        uint64_t v29 = v95;
        uint64_t v30 = v96;
LABEL_5:
        memcpy(v29, v30, v28);
LABEL_24:
        (*(void (**)(uint64_t, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
        return a1;
      }
      goto LABEL_18;
    }
    if (v47)
    {
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v12, type metadata accessor for AttachmentLedger_MMCSMetadata);
LABEL_18:
      size_t v31 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?)
                                  - 8)
                      + 64);
      uint64_t v32 = (void *)v12;
      unint64_t v33 = v44;
      goto LABEL_9;
    }
    *(void *)uint64_t v12 = *(void *)v44;
    *(void *)(v12 + 8) = *((void *)v44 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v12 + 16) = *((void *)v44 + 2);
    *(void *)(v12 + 24) = *((void *)v44 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v76 = *((void *)v44 + 4);
    unint64_t v77 = *((void *)v44 + 5);
    outlined copy of Data._Representation(v76, v77);
    uint64_t v78 = *(void *)(v12 + 32);
    unint64_t v79 = *(void *)(v12 + 40);
    *(void *)(v12 + 32) = v76;
    *(void *)(v12 + 40) = v77;
    outlined consume of Data._Representation(v78, v79);
    uint64_t v80 = *((void *)v44 + 6);
    unint64_t v81 = *((void *)v44 + 7);
    outlined copy of Data._Representation(v80, v81);
    uint64_t v82 = *(void *)(v12 + 48);
    unint64_t v83 = *(void *)(v12 + 56);
    *(void *)(v12 + 48) = v80;
    *(void *)(v12 + 56) = v81;
    outlined consume of Data._Representation(v82, v83);
    ((void (*)(uint64_t, char *, uint64_t))v10)(v12 + v14[8], &v44[v14[8]], v137);
    uint64_t v84 = v14[9];
    uint64_t v85 = (char *)(v12 + v84);
    __srcb = &v44[v84];
    uint64_t v86 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    uint64_t v124 = *(void *)(v86 - 8);
    uint64_t v127 = v85;
    uint64_t v87 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v124 + 48);
    LODWORD(v85) = v87(v85, 1, v86);
    uint64_t v132 = v86;
    int v88 = v87(__srcb, 1, v86);
    if (v85)
    {
      if (!v88)
      {
        *(void *)uint64_t v127 = *(void *)__srcb;
        uint64_t v102 = *((void *)__srcb + 1);
        unint64_t v121 = *((void *)__srcb + 2);
        outlined copy of Data._Representation(v102, v121);
        *((void *)v127 + 1) = v102;
        *((void *)v127 + 2) = v121;
        uint64_t v101 = v86;
        uint64_t v100 = v137;
        (*(void (**)(char *, char *, uint64_t))(v136 + 16))(&v127[*(int *)(v132 + 24)], &__srcb[*(int *)(v132 + 24)], v137);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v124 + 56))(v127, 0, 1, v132);
        goto LABEL_38;
      }
      size_t v89 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?)
                                  - 8)
                      + 64);
      uint64_t v90 = v127;
    }
    else
    {
      if (!v88)
      {
        *(void *)uint64_t v127 = *(void *)__srcb;
        uint64_t v103 = *((void *)__srcb + 1);
        unint64_t v122 = *((void *)__srcb + 2);
        outlined copy of Data._Representation(v103, v122);
        uint64_t v104 = *((void *)v127 + 1);
        unint64_t v105 = *((void *)v127 + 2);
        *((void *)v127 + 1) = v103;
        *((void *)v127 + 2) = v122;
        outlined consume of Data._Representation(v104, v105);
        uint64_t v101 = v86;
        uint64_t v100 = v137;
        ((void (*)(char *, char *, uint64_t))v10)(&v127[*(int *)(v132 + 24)], &__srcb[*(int *)(v132 + 24)], v137);
        goto LABEL_38;
      }
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v127, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
      size_t v89 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?)
                                  - 8)
                      + 64);
      uint64_t v90 = v127;
    }
    memcpy(v90, __srcb, v89);
    uint64_t v100 = v137;
    uint64_t v101 = v132;
LABEL_38:
    uint64_t v106 = v14[10];
    uint64_t v107 = (char *)(v12 + v106);
    uint64_t v108 = &v44[v106];
    int v109 = v87(v107, 1, v101);
    int v110 = v87(v108, 1, v101);
    if (v109)
    {
      if (!v110)
      {
        *(void *)uint64_t v107 = *(void *)v108;
        uint64_t v111 = *((void *)v108 + 1);
        unint64_t v112 = *((void *)v108 + 2);
        outlined copy of Data._Representation(v111, v112);
        *((void *)v107 + 1) = v111;
        *((void *)v107 + 2) = v112;
        (*(void (**)(char *, char *, uint64_t))(v136 + 16))(&v107[*(int *)(v101 + 24)], &v108[*(int *)(v101 + 24)], v100);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v124 + 56))(v107, 0, 1, v101);
        return a1;
      }
    }
    else
    {
      if (!v110)
      {
        *(void *)uint64_t v107 = *(void *)v108;
        uint64_t v113 = *((void *)v108 + 1);
        unint64_t v114 = *((void *)v108 + 2);
        outlined copy of Data._Representation(v113, v114);
        uint64_t v115 = *((void *)v107 + 1);
        unint64_t v116 = *((void *)v107 + 2);
        *((void *)v107 + 1) = v113;
        *((void *)v107 + 2) = v114;
        outlined consume of Data._Representation(v115, v116);
        ((void (*)(char *, char *, uint64_t))v10)(&v107[*(int *)(v101 + 24)], &v108[*(int *)(v101 + 24)], v100);
        return a1;
      }
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v107, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
    }
    size_t v31 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?)
                                - 8)
                    + 64);
    uint64_t v32 = v107;
    unint64_t v33 = v108;
    goto LABEL_9;
  }
  outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v12, type metadata accessor for AttachmentLedger_AttachmentMetadata);
LABEL_8:
  size_t v31 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?)
                              - 8)
                  + 64);
  uint64_t v32 = (void *)v12;
  unint64_t v33 = v13;
LABEL_9:
  memcpy(v32, v33, v31);
  return a1;
}

_OWORD *initializeWithTake for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (_OWORD *)((char *)a1 + v11);
  uint64_t v13 = (_OWORD *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    uint64_t v44 = v15;
    *uint64_t v12 = *v13;
    uint64_t v17 = *((void *)v13 + 3);
    *((void *)v12 + 2) = *((void *)v13 + 2);
    *((void *)v12 + 3) = v17;
    *((unsigned char *)v12 + 32) = *((unsigned char *)v13 + 32);
    *(_OWORD *)((char *)v12 + 40) = *(_OWORD *)((char *)v13 + 40);
    v10((char *)v12 + *(int *)(v14 + 32), (char *)v13 + *(int *)(v14 + 32), v9);
    uint64_t v18 = *(int *)(v14 + 36);
    unint64_t v19 = (_OWORD *)((char *)v12 + v18);
    uint64_t v20 = (_OWORD *)((char *)v13 + v18);
    uint64_t v21 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    uint64_t v22 = *((void *)v21 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v22 + 48))(v20, 1, v21))
    {
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      uint64_t v42 = v22;
      long long v24 = v20[1];
      *unint64_t v19 = *v20;
      v19[1] = v24;
      long long v25 = v20[3];
      v19[2] = v20[2];
      v19[3] = v25;
      v10((char *)v19 + v21[8], (char *)v20 + v21[8], v9);
      uint64_t v26 = v21[9];
      uint64_t v43 = v19;
      unint64_t v40 = (void *)((char *)v19 + v26);
      uint64_t v27 = (void *)((char *)v20 + v26);
      uint64_t v28 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      uint64_t v29 = *(void *)(v28 - 8);
      uint64_t v39 = v27;
      uint64_t v30 = v27;
      uint64_t v31 = v28;
      uint64_t v41 = *(unsigned int (**)(void *, uint64_t))(v29 + 48);
      uint64_t v38 = v29;
      if (v41(v30, 1))
      {
        uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v40, v39, *(void *)(*(void *)(v32 - 8) + 64));
      }
      else
      {
        *unint64_t v40 = *v39;
        *(_OWORD *)(v40 + 1) = *(_OWORD *)(v39 + 1);
        v10((char *)v40 + *(int *)(v31 + 24), (char *)v39 + *(int *)(v31 + 24), v9);
        (*(void (**)(void *, void, uint64_t))(v29 + 56))(v40, 0, 1);
      }
      uint64_t v33 = v21[10];
      uint64_t v34 = (void *)((char *)v43 + v33);
      unint64_t v35 = (void *)((char *)v20 + v33);
      if (((unsigned int (*)(void *, uint64_t, uint64_t))v41)(v35, 1, v31))
      {
        uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64));
      }
      else
      {
        *uint64_t v34 = *v35;
        *(_OWORD *)(v34 + 1) = *(_OWORD *)(v35 + 1);
        v10((char *)v34 + *(int *)(v31 + 24), (char *)v35 + *(int *)(v31 + 24), v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v34, 0, 1, v31);
      }
      (*(void (**)(_OWORD *, void, uint64_t, int *))(v42 + 56))(v43, 0, 1, v21);
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v44 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

void *assignWithTake for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v108 = *(void *)(v10 - 8);
  uint64_t v11 = *(void (**)(char *, char *))(v108 + 40);
  uint64_t v12 = v10;
  v11(v8, v9);
  uint64_t v13 = *(int *)(a3 + 24);
  int v110 = a1;
  uint64_t v14 = (uint64_t)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v8) = v18(v14, 1, v16);
  int v19 = v18((uint64_t)v15, 1, v16);
  if (!v8)
  {
    if (v19)
    {
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v14, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      goto LABEL_7;
    }
    uint64_t v33 = *(void *)v14;
    unint64_t v34 = *(void *)(v14 + 8);
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    outlined consume of Data._Representation(v33, v34);
    *(void *)(v14 + 16) = *((void *)v15 + 2);
    swift_bridgeObjectRelease();
    *(void *)(v14 + 24) = *((void *)v15 + 3);
    *(unsigned char *)(v14 + 32) = v15[32];
    uint64_t v35 = *(void *)(v14 + 40);
    unint64_t v36 = *(void *)(v14 + 48);
    *(_OWORD *)(v14 + 40) = *(_OWORD *)(v15 + 40);
    outlined consume of Data._Representation(v35, v36);
    ((void (*)(uint64_t, char *, uint64_t))v11)(v14 + *(int *)(v16 + 32), &v15[*(int *)(v16 + 32)], v12);
    uint64_t v37 = *(int *)(v16 + 36);
    uint64_t v38 = v14 + v37;
    uint64_t v39 = &v15[v37];
    unint64_t v40 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    uint64_t v41 = *((void *)v40 - 1);
    uint64_t v42 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v41 + 48);
    int v43 = v42(v38, 1, v40);
    int v44 = v42((uint64_t)v39, 1, v40);
    if (v43)
    {
      if (!v44)
      {
        long long v45 = *((_OWORD *)v39 + 1);
        *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
        *(_OWORD *)(v38 + 16) = v45;
        long long v46 = *((_OWORD *)v39 + 3);
        *(_OWORD *)(v38 + 32) = *((_OWORD *)v39 + 2);
        *(_OWORD *)(v38 + 48) = v46;
        uint64_t v103 = v12;
        int v109 = *(void (**)(uint64_t, char *, uint64_t))(v108 + 32);
        v109(v38 + v40[8], &v39[v40[8]], v12);
        uint64_t v47 = v40[9];
        uint64_t v48 = (void *)(v38 + v47);
        unint64_t v49 = &v39[v47];
        uint64_t v50 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        uint64_t v51 = *(void *)(v50 - 8);
        uint64_t v106 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48);
        __dst = (void *)v51;
        if (v106(v49, 1, v50))
        {
          uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64));
          uint64_t v53 = v103;
          uint64_t v54 = (void (*)(char *, char *, uint64_t))v109;
        }
        else
        {
          void *v48 = *(void *)v49;
          *(_OWORD *)(v48 + 1) = *(_OWORD *)(v49 + 8);
          uint64_t v80 = *(int *)(v50 + 24);
          unint64_t v81 = &v49[v80];
          uint64_t v54 = (void (*)(char *, char *, uint64_t))v109;
          v109((uint64_t)v48 + v80, v81, v103);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
          uint64_t v53 = v103;
        }
        uint64_t v82 = v40[10];
        unint64_t v83 = (void *)(v38 + v82);
        uint64_t v84 = &v39[v82];
        if (v106(v84, 1, v50))
        {
          uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v83, v84, *(void *)(*(void *)(v85 - 8) + 64));
        }
        else
        {
          *unint64_t v83 = *(void *)v84;
          *(_OWORD *)(v83 + 1) = *(_OWORD *)(v84 + 8);
          v54((char *)v83 + *(int *)(v50 + 24), &v84[*(int *)(v50 + 24)], v53);
          (*((void (**)(void *, void, uint64_t, uint64_t))__dst + 7))(v83, 0, 1, v50);
        }
        (*(void (**)(uint64_t, void, uint64_t, int *))(v41 + 56))(v38, 0, 1, v40);
        return v110;
      }
      goto LABEL_18;
    }
    if (v44)
    {
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v38, type metadata accessor for AttachmentLedger_MMCSMetadata);
LABEL_18:
      size_t v29 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?)
                                  - 8)
                      + 64);
      uint64_t v30 = (void *)v38;
      uint64_t v31 = v39;
      goto LABEL_8;
    }
    uint64_t v67 = *((void *)v39 + 1);
    *(void *)uint64_t v38 = *(void *)v39;
    *(void *)(v38 + 8) = v67;
    swift_bridgeObjectRelease();
    uint64_t v68 = *((void *)v39 + 3);
    *(void *)(v38 + 16) = *((void *)v39 + 2);
    *(void *)(v38 + 24) = v68;
    swift_bridgeObjectRelease();
    uint64_t v69 = *(void *)(v38 + 32);
    unint64_t v70 = *(void *)(v38 + 40);
    *(_OWORD *)(v38 + 32) = *((_OWORD *)v39 + 2);
    outlined consume of Data._Representation(v69, v70);
    uint64_t v71 = *(void *)(v38 + 48);
    unint64_t v72 = *(void *)(v38 + 56);
    *(_OWORD *)(v38 + 48) = *((_OWORD *)v39 + 3);
    outlined consume of Data._Representation(v71, v72);
    uint64_t v105 = v12;
    ((void (*)(uint64_t, char *, uint64_t))v11)(v38 + v40[8], &v39[v40[8]], v12);
    uint64_t v73 = v40[9];
    uint64_t v74 = (void *)(v38 + v73);
    uint64_t v75 = &v39[v73];
    uint64_t v76 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    uint64_t v100 = *(void *)(v76 - 8);
    unint64_t v77 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v100 + 48);
    int v78 = v77((char *)v74, 1, v76);
    int v79 = v77(v75, 1, v76);
    if (v78)
    {
      if (!v79)
      {
        *uint64_t v74 = *(void *)v75;
        *(_OWORD *)(v74 + 1) = *(_OWORD *)(v75 + 8);
        (*(void (**)(char *, char *, uint64_t))(v108 + 32))((char *)v74 + *(int *)(v76 + 24), &v75[*(int *)(v76 + 24)], v105);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v100 + 56))(v74, 0, 1, v76);
LABEL_37:
        uint64_t v87 = v40[10];
        uint64_t v88 = v38 + v87;
        size_t v89 = &v39[v87];
        int v90 = v77((char *)v88, 1, v76);
        int v91 = v77(v89, 1, v76);
        if (v90)
        {
          if (!v91)
          {
            *(void *)uint64_t v88 = *(void *)v89;
            *(_OWORD *)(v88 + 8) = *(_OWORD *)(v89 + 8);
            (*(void (**)(uint64_t, char *, uint64_t))(v108 + 32))(v88 + *(int *)(v76 + 24), &v89[*(int *)(v76 + 24)], v105);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v100 + 56))(v88, 0, 1, v76);
            return v110;
          }
        }
        else
        {
          if (!v91)
          {
            uint64_t v95 = *((void *)v89 + 2);
            uint64_t v96 = *(void *)(v88 + 8);
            unint64_t v97 = *(void *)(v88 + 16);
            *(_OWORD *)uint64_t v88 = *(_OWORD *)v89;
            *(void *)(v88 + 16) = v95;
            outlined consume of Data._Representation(v96, v97);
            ((void (*)(uint64_t, char *, uint64_t))v11)(v88 + *(int *)(v76 + 24), &v89[*(int *)(v76 + 24)], v105);
            return v110;
          }
          outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v88, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
        }
        size_t v29 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?)
                                    - 8)
                        + 64);
        uint64_t v30 = (void *)v88;
        uint64_t v31 = v89;
LABEL_8:
        memcpy(v30, v31, v29);
        return v110;
      }
    }
    else
    {
      if (!v79)
      {
        uint64_t v92 = *((void *)v75 + 2);
        uint64_t v93 = v74[1];
        unint64_t v94 = v74[2];
        *(_OWORD *)uint64_t v74 = *(_OWORD *)v75;
        v74[2] = v92;
        outlined consume of Data._Representation(v93, v94);
        ((void (*)(char *, char *, uint64_t))v11)((char *)v74 + *(int *)(v76 + 24), &v75[*(int *)(v76 + 24)], v105);
        goto LABEL_37;
      }
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v74, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
    }
    uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    memcpy(v74, v75, *(void *)(*(void *)(v86 - 8) + 64));
    goto LABEL_37;
  }
  if (v19)
  {
LABEL_7:
    size_t v29 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?)
                                - 8)
                    + 64);
    uint64_t v30 = (void *)v14;
    uint64_t v31 = v15;
    goto LABEL_8;
  }
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  uint64_t v20 = *((void *)v15 + 3);
  *(void *)(v14 + 16) = *((void *)v15 + 2);
  *(void *)(v14 + 24) = v20;
  *(unsigned char *)(v14 + 32) = v15[32];
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(v15 + 40);
  uint64_t v21 = *(void (**)(uint64_t, char *, uint64_t))(v108 + 32);
  uint64_t v22 = v12;
  v21(v14 + *(int *)(v16 + 32), &v15[*(int *)(v16 + 32)], v12);
  uint64_t v23 = *(int *)(v16 + 36);
  long long v24 = (_OWORD *)(v14 + v23);
  long long v25 = &v15[v23];
  uint64_t v26 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  uint64_t v27 = *((void *)v26 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v27 + 48))(v25, 1, v26))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    uint64_t v99 = v27;
    long long v55 = *((_OWORD *)v25 + 1);
    *long long v24 = *(_OWORD *)v25;
    v24[1] = v55;
    long long v56 = *((_OWORD *)v25 + 3);
    v24[2] = *((_OWORD *)v25 + 2);
    v24[3] = v56;
    v21((uint64_t)v24 + v26[8], &v25[v26[8]], v22);
    uint64_t v57 = v26[9];
    __dsta = (void *)((char *)v24 + v57);
    uint64_t v104 = v22;
    uint64_t v58 = &v25[v57];
    uint64_t v59 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    uint64_t v60 = *(void *)(v59 - 8);
    uint64_t v107 = v59;
    uint64_t v98 = *(unsigned int (**)(char *, uint64_t))(v60 + 48);
    if (v98(v58, 1))
    {
      uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      memcpy(__dsta, v58, *(void *)(*(void *)(v61 - 8) + 64));
    }
    else
    {
      void *__dsta = *(void *)v58;
      *(_OWORD *)(__dsta + 1) = *(_OWORD *)(v58 + 8);
      v21((uint64_t)__dsta + *(int *)(v107 + 24), &v58[*(int *)(v107 + 24)], v104);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v60 + 56))(__dsta, 0, 1, v107);
    }
    uint64_t v62 = v26[10];
    uint64_t v63 = (void *)((char *)v24 + v62);
    uint64_t v64 = &v25[v62];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v98)(v64, 1, v107))
    {
      uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      memcpy(v63, v64, *(void *)(*(void *)(v65 - 8) + 64));
    }
    else
    {
      void *v63 = *(void *)v64;
      *(_OWORD *)(v63 + 1) = *(_OWORD *)(v64 + 8);
      v21((uint64_t)v63 + *(int *)(v107 + 24), &v64[*(int *)(v107 + 24)], v104);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v60 + 56))(v63, 0, 1, v107);
    }
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v99 + 56))(v24, 0, 1, v26);
  }
  uint64_t v32 = v110;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return v32;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0F74210);
}

uint64_t sub_1B0F74210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_220Tm(a1, a2, a3, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0F74230);
}

uint64_t sub_1B0F74230(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_221Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
}

void type metadata completion function for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_140Tm_0);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_141Tm_0);
}

uint64_t type metadata completion function for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove()
{
  return type metadata completion function for AttachmentLedger_MMCSMetadata.BlobData();
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 24);
    uint64_t v14 = (uint64_t *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
    uint64_t v17 = *(void *)(updated - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v15, 1, updated))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v44 = v17;
      uint64_t v20 = *v15;
      unint64_t v21 = v15[1];
      outlined copy of Data._Representation(*v15, v21);
      *uint64_t v14 = v20;
      v14[1] = v21;
      v12((char *)v14 + *(int *)(updated + 20), (char *)v15 + *(int *)(updated + 20), v11);
      uint64_t v22 = *(int *)(updated + 24);
      uint64_t v23 = (void *)((char *)v14 + v22);
      long long v24 = (uint64_t *)((char *)v15 + v22);
      uint64_t v25 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
      uint64_t v26 = *(void *)(v25 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
        memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
        uint64_t v28 = v44;
      }
      else
      {
        uint64_t v41 = v26;
        uint64_t v43 = v25;
        uint64_t v30 = *v24;
        unint64_t v29 = v24[1];
        outlined copy of Data._Representation(*v24, v29);
        *uint64_t v23 = v30;
        v23[1] = v29;
        uint64_t v31 = v43;
        v23[2] = v24[2];
        v12((char *)v23 + *(int *)(v43 + 24), (char *)v24 + *(int *)(v43 + 24), v11);
        uint64_t v32 = *(int *)(v43 + 28);
        uint64_t v42 = v23;
        __dst = (void *)((char *)v23 + v32);
        uint64_t v33 = (uint64_t *)((char *)v24 + v32);
        uint64_t v34 = type metadata accessor for AttachmentLedger_EncryptionID(0);
        uint64_t v35 = *(void *)(v34 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
        {
          uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
          memcpy(__dst, v33, *(void *)(*(void *)(v36 - 8) + 64));
        }
        else
        {
          unint64_t v38 = v33[1];
          uint64_t v39 = *v33;
          outlined copy of Data._Representation(*v33, v38);
          void *__dst = v39;
          __dst[1] = v38;
          v12((char *)__dst + *(int *)(v34 + 20), (char *)v33 + *(int *)(v34 + 20), v11);
          uint64_t v31 = v43;
          (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(__dst, 0, 1, v34);
        }
        uint64_t v28 = v44;
        (*(void (**)(void *, void, uint64_t, uint64_t))(v41 + 56))(v42, 0, 1, v31);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v14, 0, 1, updated);
    }
  }
  return v4;
}

uint64_t destroy for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v14(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(updated - 8) + 48))(v6, 1, updated);
  if (!result)
  {
    outlined consume of Data._Representation(*(void *)v6, *(void *)(v6 + 8));
    v14(v6 + *(int *)(updated + 20), v5);
    uint64_t v9 = v6 + *(int *)(updated + 24);
    uint64_t v10 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10);
    if (!result)
    {
      outlined consume of Data._Representation(*(void *)v9, *(void *)(v9 + 8));
      v14(v9 + *(int *)(v10 + 24), v5);
      uint64_t v11 = v9 + *(int *)(v10 + 28);
      uint64_t v12 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12);
      if (!result)
      {
        outlined consume of Data._Representation(*(void *)v11, *(void *)(v11 + 8));
        uint64_t v13 = v11 + *(int *)(v12 + 20);
        return ((uint64_t (*)(uint64_t, uint64_t))v14)(v13, v5);
      }
    }
  }
  return result;
}

void *initializeWithCopy for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
  uint64_t v16 = *(void *)(updated - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48))(v14, 1, updated))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v42 = v16;
    uint64_t v18 = *v14;
    unint64_t v19 = v14[1];
    outlined copy of Data._Representation(*v14, v19);
    void *v13 = v18;
    v13[1] = v19;
    v11((char *)v13 + *(int *)(updated + 20), (char *)v14 + *(int *)(updated + 20), v10);
    uint64_t v20 = *(int *)(updated + 24);
    unint64_t v21 = (void *)((char *)v13 + v20);
    uint64_t v22 = (uint64_t *)((char *)v14 + v20);
    uint64_t v23 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
      uint64_t v26 = v42;
    }
    else
    {
      uint64_t v39 = v24;
      uint64_t v41 = v23;
      uint64_t v28 = *v22;
      unint64_t v27 = v22[1];
      outlined copy of Data._Representation(*v22, v27);
      *unint64_t v21 = v28;
      v21[1] = v27;
      uint64_t v29 = v41;
      v21[2] = v22[2];
      v11((char *)v21 + *(int *)(v41 + 24), (char *)v22 + *(int *)(v41 + 24), v10);
      uint64_t v30 = *(int *)(v41 + 28);
      unint64_t v40 = v21;
      __dst = (void *)((char *)v21 + v30);
      uint64_t v31 = (uint64_t *)((char *)v22 + v30);
      uint64_t v32 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      uint64_t v33 = *(void *)(v32 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
      {
        uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        memcpy(__dst, v31, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        unint64_t v36 = v31[1];
        uint64_t v37 = *v31;
        outlined copy of Data._Representation(*v31, v36);
        void *__dst = v37;
        __dst[1] = v36;
        v11((char *)__dst + *(int *)(v32 + 20), (char *)v31 + *(int *)(v32 + 20), v10);
        uint64_t v29 = v41;
        (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(__dst, 0, 1, v32);
      }
      uint64_t v26 = v42;
      (*(void (**)(void *, void, uint64_t, uint64_t))(v39 + 56))(v40, 0, 1, v29);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v13, 0, 1, updated);
  }
  return a1;
}

void *assignWithCopy for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v81 = type metadata accessor for UnknownStorage();
  uint64_t v82 = *(void *)(v81 - 8);
  uint64_t v9 = *(void (**)(char *, char *))(v82 + 24);
  v9(v7, v8);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t updated = (int *)type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
  uint64_t v14 = *((void *)updated - 1);
  uint64_t v15 = *(uint64_t (**)(uint64_t *, uint64_t, int *))(v14 + 48);
  LODWORD(v7) = v15(v11, 1, updated);
  int v16 = v15(v12, 1, updated);
  if (v7)
  {
    if (!v16)
    {
      uint64_t v17 = *v12;
      unint64_t v18 = v12[1];
      outlined copy of Data._Representation(*v12, v18);
      *uint64_t v11 = v17;
      v11[1] = v18;
      int v79 = *(void (**)(char *, char *, uint64_t))(v82 + 16);
      v79((char *)v11 + updated[5], (char *)v12 + updated[5], v81);
      uint64_t v19 = updated[6];
      uint64_t v20 = (uint64_t *)((char *)v11 + v19);
      unint64_t v21 = (uint64_t *)((char *)v12 + v19);
      uint64_t v22 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
      uint64_t v23 = *(void *)(v22 - 8);
      if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        uint64_t v78 = v23;
        uint64_t v47 = *v21;
        unint64_t v48 = v21[1];
        outlined copy of Data._Representation(*v21, v48);
        *uint64_t v20 = v47;
        v20[1] = v48;
        v20[2] = v21[2];
        v79((char *)v20 + *(int *)(v22 + 24), (char *)v21 + *(int *)(v22 + 24), v81);
        unint64_t v49 = v20;
        uint64_t v50 = *(int *)(v22 + 28);
        uint64_t v51 = (uint64_t *)((char *)v20 + v50);
        uint64_t v52 = (uint64_t *)((char *)v21 + v50);
        uint64_t v53 = type metadata accessor for AttachmentLedger_EncryptionID(0);
        uint64_t v54 = *(void *)(v53 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
        {
          uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
          memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64));
        }
        else
        {
          unint64_t v76 = v52[1];
          uint64_t v77 = *v52;
          outlined copy of Data._Representation(*v52, v76);
          *uint64_t v51 = v77;
          v51[1] = v76;
          v79((char *)v51 + *(int *)(v53 + 20), (char *)v52 + *(int *)(v53 + 20), v81);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
        }
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v78 + 56))(v49, 0, 1, v22);
        goto LABEL_21;
      }
      size_t v24 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?)
                                  - 8)
                      + 64);
      uint64_t v25 = v20;
      uint64_t v26 = v21;
      goto LABEL_5;
    }
    goto LABEL_8;
  }
  if (v16)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v11, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
LABEL_8:
    size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?)
                                - 8)
                    + 64);
    uint64_t v28 = v11;
    uint64_t v29 = v12;
    goto LABEL_9;
  }
  uint64_t v30 = *v12;
  unint64_t v31 = v12[1];
  outlined copy of Data._Representation(*v12, v31);
  uint64_t v32 = *v11;
  unint64_t v33 = v11[1];
  *uint64_t v11 = v30;
  v11[1] = v31;
  outlined consume of Data._Representation(v32, v33);
  ((void (*)(char *, char *, uint64_t))v9)((char *)v11 + updated[5], (char *)v12 + updated[5], v81);
  uint64_t v34 = updated[6];
  uint64_t v11 = (uint64_t *)((char *)v11 + v34);
  uint64_t v35 = (uint64_t *)((char *)v12 + v34);
  uint64_t updated = (int *)type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  uint64_t v14 = *((void *)updated - 1);
  unint64_t v36 = *(uint64_t (**)(uint64_t *, uint64_t, int *))(v14 + 48);
  int v37 = v36(v11, 1, updated);
  int v38 = v36(v35, 1, updated);
  if (v37)
  {
    if (!v38)
    {
      uint64_t v39 = *v35;
      unint64_t v40 = v35[1];
      outlined copy of Data._Representation(*v35, v40);
      *uint64_t v11 = v39;
      v11[1] = v40;
      v11[2] = v35[2];
      uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v82 + 16);
      v41((char *)v11 + updated[6], (char *)v35 + updated[6], v81);
      uint64_t v42 = updated[7];
      uint64_t v43 = (uint64_t *)((char *)v11 + v42);
      uint64_t v44 = (uint64_t *)((char *)v35 + v42);
      uint64_t v45 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      uint64_t v46 = *(void *)(v45 - 8);
      if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
      {
        uint64_t v80 = v41;
        uint64_t v71 = *v44;
        unint64_t v70 = v44[1];
        outlined copy of Data._Representation(*v44, v70);
        uint64_t *v43 = v71;
        v43[1] = v70;
        v80((char *)v43 + *(int *)(v45 + 20), (char *)v44 + *(int *)(v45 + 20), v81);
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
        goto LABEL_21;
      }
      size_t v24 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?)
                                  - 8)
                      + 64);
      uint64_t v25 = v43;
      uint64_t v26 = v44;
LABEL_5:
      memcpy(v25, v26, v24);
LABEL_21:
      (*(void (**)(uint64_t *, void, uint64_t, int *))(v14 + 56))(v11, 0, 1, updated);
      return a1;
    }
  }
  else
  {
    if (!v38)
    {
      uint64_t v57 = *v35;
      unint64_t v58 = v35[1];
      outlined copy of Data._Representation(*v35, v58);
      uint64_t v59 = *v11;
      unint64_t v60 = v11[1];
      *uint64_t v11 = v57;
      v11[1] = v58;
      outlined consume of Data._Representation(v59, v60);
      v11[2] = v35[2];
      ((void (*)(char *, char *, uint64_t))v9)((char *)v11 + updated[6], (char *)v35 + updated[6], v81);
      uint64_t v61 = updated[7];
      uint64_t v62 = (uint64_t *)((char *)v11 + v61);
      uint64_t v63 = (uint64_t *)((char *)v35 + v61);
      uint64_t v64 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      uint64_t v65 = *(void *)(v64 - 8);
      uint64_t v66 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v65 + 48);
      LODWORD(v57) = v66(v62, 1, v64);
      int v67 = v66(v63, 1, v64);
      if (v57)
      {
        if (!v67)
        {
          uint64_t v68 = *v63;
          unint64_t v69 = v63[1];
          outlined copy of Data._Representation(*v63, v69);
          *uint64_t v62 = v68;
          v62[1] = v69;
          (*(void (**)(char *, char *, uint64_t))(v82 + 16))((char *)v62 + *(int *)(v64 + 20), (char *)v63 + *(int *)(v64 + 20), v81);
          (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
          return a1;
        }
      }
      else
      {
        if (!v67)
        {
          uint64_t v72 = *v63;
          unint64_t v73 = v63[1];
          outlined copy of Data._Representation(*v63, v73);
          uint64_t v74 = *v62;
          unint64_t v75 = v62[1];
          *uint64_t v62 = v72;
          v62[1] = v73;
          outlined consume of Data._Representation(v74, v75);
          ((void (*)(char *, char *, uint64_t))v9)((char *)v62 + *(int *)(v64 + 20), (char *)v63 + *(int *)(v64 + 20), v81);
          return a1;
        }
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v62, type metadata accessor for AttachmentLedger_EncryptionID);
      }
      size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?)
                                  - 8)
                      + 64);
      uint64_t v28 = v62;
      uint64_t v29 = v63;
      goto LABEL_9;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v11, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  }
  size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?)
                              - 8)
                  + 64);
  uint64_t v28 = v11;
  uint64_t v29 = v35;
LABEL_9:
  memcpy(v28, v29, v27);
  return a1;
}

_OWORD *initializeWithTake for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (_OWORD *)((char *)a1 + v11);
  uint64_t v13 = (_OWORD *)((char *)a2 + v11);
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
  uint64_t v15 = *(void *)(updated - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, updated))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    v10((char *)v12 + *(int *)(updated + 20), (char *)v13 + *(int *)(updated + 20), v9);
    uint64_t v17 = *(int *)(updated + 24);
    uint64_t v34 = v12;
    unint64_t v18 = (void *)((char *)v12 + v17);
    uint64_t v19 = (void *)((char *)v13 + v17);
    uint64_t v20 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
    uint64_t v21 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
      uint64_t v23 = v34;
    }
    else
    {
      uint64_t v31 = v21;
      *(_OWORD *)unint64_t v18 = *(_OWORD *)v19;
      v18[2] = v19[2];
      v10((char *)v18 + *(int *)(v20 + 24), (char *)v19 + *(int *)(v20 + 24), v9);
      uint64_t v32 = v20;
      unint64_t v33 = v18;
      uint64_t v24 = *(int *)(v20 + 28);
      uint64_t v25 = (_OWORD *)((char *)v18 + v24);
      uint64_t v26 = (_OWORD *)((char *)v19 + v24);
      uint64_t v27 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      uint64_t v28 = *(void *)(v27 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        *uint64_t v25 = *v26;
        v10((char *)v25 + *(int *)(v27 + 20), (char *)v26 + *(int *)(v27 + 20), v9);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      }
      uint64_t v23 = v34;
      (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v33, 0, 1, v32);
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v23, 0, 1, updated);
  }
  return a1;
}

void *assignWithTake for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v66 = *(void *)(v10 - 8);
  uint64_t v69 = v10;
  uint64_t v11 = *(void (**)(char *, char *))(v66 + 40);
  v11(v8, v9);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (char *)a2 + v12;
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
  uint64_t v16 = *(void *)(updated - 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, updated);
  int v18 = v17((uint64_t *)v14, 1, updated);
  if (!v8)
  {
    if (!v18)
    {
      uint64_t v28 = *v13;
      unint64_t v29 = v13[1];
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
      outlined consume of Data._Representation(v28, v29);
      ((void (*)(char *, char *, uint64_t))v11)((char *)v13 + *(int *)(updated + 20), &v14[*(int *)(updated + 20)], v69);
      uint64_t v30 = *(int *)(updated + 24);
      uint64_t v31 = (uint64_t)v13 + v30;
      uint64_t v32 = &v14[v30];
      uint64_t v33 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
      uint64_t v34 = *(void *)(v33 - 8);
      uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
      int v36 = v35(v31, 1, v33);
      int v37 = v35((uint64_t)v32, 1, v33);
      if (v36)
      {
        if (!v37)
        {
          *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
          *(void *)(v31 + 16) = *((void *)v32 + 2);
          uint64_t v68 = *(void (**)(uint64_t, char *, uint64_t))(v66 + 32);
          v68(v31 + *(int *)(v33 + 24), &v32[*(int *)(v33 + 24)], v69);
          uint64_t v38 = *(int *)(v33 + 28);
          uint64_t v39 = (_OWORD *)(v31 + v38);
          unint64_t v40 = &v32[v38];
          uint64_t v41 = type metadata accessor for AttachmentLedger_EncryptionID(0);
          uint64_t v42 = *(void *)(v41 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
          {
            uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
            memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
          }
          else
          {
            *uint64_t v39 = *(_OWORD *)v40;
            v68((uint64_t)v39 + *(int *)(v41 + 20), &v40[*(int *)(v41 + 20)], v69);
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
          }
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
          return a1;
        }
      }
      else
      {
        if (!v37)
        {
          uint64_t v51 = *(void *)v31;
          unint64_t v52 = *(void *)(v31 + 8);
          *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
          outlined consume of Data._Representation(v51, v52);
          *(void *)(v31 + 16) = *((void *)v32 + 2);
          ((void (*)(uint64_t, char *, uint64_t))v11)(v31 + *(int *)(v33 + 24), &v32[*(int *)(v33 + 24)], v69);
          uint64_t v53 = *(int *)(v33 + 28);
          uint64_t v54 = v31 + v53;
          uint64_t v55 = &v32[v53];
          uint64_t v56 = type metadata accessor for AttachmentLedger_EncryptionID(0);
          uint64_t v57 = *(void *)(v56 - 8);
          unint64_t v58 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 48);
          int v59 = v58(v54, 1, v56);
          int v60 = v58((uint64_t)v55, 1, v56);
          if (v59)
          {
            if (!v60)
            {
              *(_OWORD *)uint64_t v54 = *(_OWORD *)v55;
              (*(void (**)(uint64_t, char *, uint64_t))(v66 + 32))(v54 + *(int *)(v56 + 20), &v55[*(int *)(v56 + 20)], v69);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
              return a1;
            }
          }
          else
          {
            if (!v60)
            {
              uint64_t v61 = *(void *)v54;
              unint64_t v62 = *(void *)(v54 + 8);
              *(_OWORD *)uint64_t v54 = *(_OWORD *)v55;
              outlined consume of Data._Representation(v61, v62);
              ((void (*)(uint64_t, char *, uint64_t))v11)(v54 + *(int *)(v56 + 20), &v55[*(int *)(v56 + 20)], v69);
              return a1;
            }
            outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v54, type metadata accessor for AttachmentLedger_EncryptionID);
          }
          size_t v25 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?)
                                      - 8)
                          + 64);
          uint64_t v26 = (void *)v54;
          uint64_t v27 = v55;
          goto LABEL_8;
        }
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v31, type metadata accessor for AttachmentLedger_AttachmentEncryption);
      }
      size_t v25 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?)
                                  - 8)
                      + 64);
      uint64_t v26 = (void *)v31;
      uint64_t v27 = v32;
LABEL_8:
      memcpy(v26, v27, v25);
      return a1;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v13, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
LABEL_7:
    size_t v25 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?)
                                - 8)
                    + 64);
    uint64_t v26 = v13;
    uint64_t v27 = v14;
    goto LABEL_8;
  }
  if (v18) {
    goto LABEL_7;
  }
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  int v67 = *(void (**)(char *, char *, uint64_t))(v66 + 32);
  v67((char *)v13 + *(int *)(updated + 20), &v14[*(int *)(updated + 20)], v69);
  uint64_t v19 = *(int *)(updated + 24);
  uint64_t v20 = (uint64_t *)((char *)v13 + v19);
  uint64_t v21 = &v14[v19];
  uint64_t v22 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    v20[2] = *((void *)v21 + 2);
    v67((char *)v20 + *(int *)(v22 + 24), &v21[*(int *)(v22 + 24)], v69);
    uint64_t v44 = *(int *)(v22 + 28);
    uint64_t v65 = (_OWORD *)((char *)v20 + v44);
    uint64_t v45 = &v21[v44];
    uint64_t v46 = type metadata accessor for AttachmentLedger_EncryptionID(0);
    uint64_t v63 = *(void *)(v46 - 8);
    uint64_t v64 = v45;
    uint64_t v47 = v45;
    uint64_t v48 = v46;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v47, 1, v46))
    {
      uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      memcpy(v65, v64, *(void *)(*(void *)(v49 - 8) + 64));
    }
    else
    {
      *uint64_t v65 = *v64;
      v67((char *)v65 + *(int *)(v48 + 20), (char *)v64 + *(int *)(v48 + 20), v69);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v63 + 56))(v65, 0, 1, v48);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, updated);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0F75EF0);
}

uint64_t sub_1B0F75EF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_220Tm(a1, a2, a3, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0F75F10);
}

uint64_t sub_1B0F75F10(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_221Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
}

void type metadata completion function for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    uint64_t v14 = *(int *)(a3 + 24);
    uint64_t v15 = (uint64_t *)((char *)a1 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      uint64_t v21 = *v16;
      unint64_t v22 = v16[1];
      outlined copy of Data._Representation(*v16, v22);
      *uint64_t v15 = v21;
      v15[1] = v22;
      v15[2] = v16[2];
      v13((char *)v15 + *(int *)(v17 + 24), (char *)v16 + *(int *)(v17 + 24), v12);
      uint64_t v23 = *(int *)(v17 + 28);
      __dst = (void *)((char *)v15 + v23);
      uint64_t v24 = (uint64_t *)((char *)v16 + v23);
      uint64_t v25 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      uint64_t v26 = *(void *)(v25 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        memcpy(__dst, v24, *(void *)(*(void *)(v27 - 8) + 64));
      }
      else
      {
        unint64_t v29 = v24[1];
        uint64_t v30 = *v24;
        outlined copy of Data._Representation(*v24, v29);
        void *__dst = v30;
        __dst[1] = v29;
        v13((char *)__dst + *(int *)(v25 + 20), (char *)v24 + *(int *)(v25 + 20), v12);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(__dst, 0, 1, v25);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(uint64_t a1, uint64_t a2)
{
  outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v12(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    outlined consume of Data._Representation(*(void *)v6, *(void *)(v6 + 8));
    v12(v6 + *(int *)(v7 + 24), v5);
    uint64_t v9 = v6 + *(int *)(v7 + 28);
    uint64_t v10 = type metadata accessor for AttachmentLedger_EncryptionID(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10);
    if (!result)
    {
      outlined consume of Data._Representation(*(void *)v9, *(void *)(v9 + 8));
      uint64_t v11 = v9 + *(int *)(v10 + 20);
      return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v5);
    }
  }
  return result;
}

uint64_t *initializeWithCopy for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (uint64_t *)((char *)a1 + v13);
  uint64_t v15 = (uint64_t *)((char *)a2 + v13);
  uint64_t v16 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    uint64_t v19 = *v15;
    unint64_t v20 = v15[1];
    outlined copy of Data._Representation(*v15, v20);
    *uint64_t v14 = v19;
    v14[1] = v20;
    v14[2] = v15[2];
    v12((char *)v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v11);
    uint64_t v21 = *(int *)(v16 + 28);
    __dst = (void *)((char *)v14 + v21);
    unint64_t v22 = (uint64_t *)((char *)v15 + v21);
    uint64_t v23 = type metadata accessor for AttachmentLedger_EncryptionID(0);
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      memcpy(__dst, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      unint64_t v27 = v22[1];
      uint64_t v28 = *v22;
      outlined copy of Data._Representation(*v22, v27);
      void *__dst = v28;
      __dst[1] = v27;
      v12((char *)__dst + *(int *)(v23 + 20), (char *)v22 + *(int *)(v23 + 20), v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(__dst, 0, 1, v23);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t *assignWithCopy for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  uint64_t v55 = *(void *)(v13 - 8);
  uint64_t v56 = v13;
  uint64_t v14 = *(void (**)(char *, char *))(v55 + 24);
  v14(v11, v12);
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = (uint64_t *)((char *)a1 + v15);
  uint64_t v17 = (uint64_t *)((char *)a2 + v15);
  uint64_t v18 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v19 + 48);
  LODWORD(v12) = v20(v16, 1, v18);
  int v21 = v20(v17, 1, v18);
  if (!v12)
  {
    if (!v21)
    {
      uint64_t v34 = *v17;
      unint64_t v35 = v17[1];
      outlined copy of Data._Representation(*v17, v35);
      uint64_t v36 = *v16;
      unint64_t v37 = v16[1];
      *uint64_t v16 = v34;
      v16[1] = v35;
      outlined consume of Data._Representation(v36, v37);
      v16[2] = v17[2];
      ((void (*)(char *, char *, uint64_t))v14)((char *)v16 + *(int *)(v18 + 24), (char *)v17 + *(int *)(v18 + 24), v56);
      uint64_t v38 = *(int *)(v18 + 28);
      uint64_t v39 = (uint64_t *)((char *)v16 + v38);
      unint64_t v40 = (uint64_t *)((char *)v17 + v38);
      uint64_t v41 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      uint64_t v42 = *(void *)(v41 - 8);
      uint64_t v43 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v42 + 48);
      LODWORD(v34) = v43(v39, 1, v41);
      int v44 = v43(v40, 1, v41);
      if (v34)
      {
        if (!v44)
        {
          uint64_t v45 = *v40;
          unint64_t v46 = v40[1];
          outlined copy of Data._Representation(*v40, v46);
          *uint64_t v39 = v45;
          v39[1] = v46;
          (*(void (**)(char *, char *, uint64_t))(v55 + 16))((char *)v39 + *(int *)(v41 + 20), (char *)v40 + *(int *)(v41 + 20), v56);
          (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
          return a1;
        }
      }
      else
      {
        if (!v44)
        {
          uint64_t v50 = *v40;
          unint64_t v51 = v40[1];
          outlined copy of Data._Representation(*v40, v51);
          uint64_t v52 = *v39;
          unint64_t v53 = v39[1];
          *uint64_t v39 = v50;
          v39[1] = v51;
          outlined consume of Data._Representation(v52, v53);
          ((void (*)(char *, char *, uint64_t))v14)((char *)v39 + *(int *)(v41 + 20), (char *)v40 + *(int *)(v41 + 20), v56);
          return a1;
        }
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v39, type metadata accessor for AttachmentLedger_EncryptionID);
      }
      size_t v31 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?)
                                  - 8)
                      + 64);
      uint64_t v32 = v39;
      uint64_t v33 = v40;
      goto LABEL_8;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v16, type metadata accessor for AttachmentLedger_AttachmentEncryption);
LABEL_7:
    size_t v31 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?)
                                - 8)
                    + 64);
    uint64_t v32 = v16;
    uint64_t v33 = v17;
LABEL_8:
    memcpy(v32, v33, v31);
    return a1;
  }
  if (v21) {
    goto LABEL_7;
  }
  uint64_t v22 = *v17;
  unint64_t v23 = v17[1];
  outlined copy of Data._Representation(*v17, v23);
  *uint64_t v16 = v22;
  v16[1] = v23;
  v16[2] = v17[2];
  uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v55 + 16);
  v24((char *)v16 + *(int *)(v18 + 24), (char *)v17 + *(int *)(v18 + 24), v56);
  uint64_t v25 = *(int *)(v18 + 28);
  uint64_t v26 = (uint64_t *)((char *)v16 + v25);
  unint64_t v27 = (uint64_t *)((char *)v17 + v25);
  uint64_t v28 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v29 = *(void *)(v28 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
  {
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    uint64_t v54 = v24;
    uint64_t v48 = *v27;
    unint64_t v47 = v27[1];
    outlined copy of Data._Representation(*v27, v47);
    *uint64_t v26 = v48;
    v26[1] = v47;
    v54((char *)v26 + *(int *)(v28 + 20), (char *)v27 + *(int *)(v28 + 20), v56);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  return a1;
}

_OWORD *initializeWithTake for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    v12[2] = v13[2];
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    uint64_t v17 = *(int *)(v14 + 28);
    __dst = (_OWORD *)((char *)v12 + v17);
    uint64_t v18 = (_OWORD *)((char *)v13 + v17);
    uint64_t v19 = type metadata accessor for AttachmentLedger_EncryptionID(0);
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      memcpy(__dst, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      _OWORD *__dst = *v18;
      v10((char *)__dst + *(int *)(v19 + 20), (char *)v18 + *(int *)(v19 + 20), v9);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t *assignWithTake for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of Data._Representation(v6, v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v42 = *(void *)(v11 - 8);
  uint64_t v44 = v11;
  uint64_t v12 = *(void (**)(char *, char *))(v42 + 40);
  v12(v9, v10);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (uint64_t *)((char *)a1 + v13);
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v10) = v18(v14, 1, v16);
  int v19 = v18((uint64_t *)v15, 1, v16);
  if (!v10)
  {
    if (!v19)
    {
      uint64_t v29 = *v14;
      unint64_t v30 = v14[1];
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      outlined consume of Data._Representation(v29, v30);
      v14[2] = *((void *)v15 + 2);
      ((void (*)(char *, char *, uint64_t))v12)((char *)v14 + *(int *)(v16 + 24), &v15[*(int *)(v16 + 24)], v44);
      uint64_t v31 = *(int *)(v16 + 28);
      uint64_t v32 = (uint64_t)v14 + v31;
      uint64_t v33 = &v15[v31];
      uint64_t v34 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      uint64_t v35 = *(void *)(v34 - 8);
      uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
      int v37 = v36(v32, 1, v34);
      int v38 = v36((uint64_t)v33, 1, v34);
      if (v37)
      {
        if (!v38)
        {
          *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
          (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v32 + *(int *)(v34 + 20), &v33[*(int *)(v34 + 20)], v44);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
          return a1;
        }
      }
      else
      {
        if (!v38)
        {
          uint64_t v40 = *(void *)v32;
          unint64_t v41 = *(void *)(v32 + 8);
          *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
          outlined consume of Data._Representation(v40, v41);
          ((void (*)(uint64_t, char *, uint64_t))v12)(v32 + *(int *)(v34 + 20), &v33[*(int *)(v34 + 20)], v44);
          return a1;
        }
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v32, type metadata accessor for AttachmentLedger_EncryptionID);
      }
      size_t v26 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?)
                                  - 8)
                      + 64);
      unint64_t v27 = (void *)v32;
      uint64_t v28 = v33;
      goto LABEL_8;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v14, type metadata accessor for AttachmentLedger_AttachmentEncryption);
LABEL_7:
    size_t v26 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?)
                                - 8)
                    + 64);
    unint64_t v27 = v14;
    uint64_t v28 = v15;
LABEL_8:
    memcpy(v27, v28, v26);
    return a1;
  }
  if (v19) {
    goto LABEL_7;
  }
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  v14[2] = *((void *)v15 + 2);
  uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
  v43((char *)v14 + *(int *)(v16 + 24), &v15[*(int *)(v16 + 24)], v44);
  uint64_t v20 = *(int *)(v16 + 28);
  uint64_t v21 = (_OWORD *)((char *)v14 + v20);
  uint64_t v22 = &v15[v20];
  uint64_t v23 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    *uint64_t v21 = *(_OWORD *)v22;
    v43((char *)v21 + *(int *)(v23 + 20), &v22[*(int *)(v23 + 20)], v44);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0F771F4);
}

uint64_t sub_1B0F771F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 24);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0F77344);
}

void *sub_1B0F77344(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 20);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 24);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 24);
    uint64_t v14 = (uint64_t *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
    uint64_t v17 = *(void *)(updated - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v15, 1, updated))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v20 = *v15;
      unint64_t v21 = v15[1];
      outlined copy of Data._Representation(*v15, v21);
      *uint64_t v14 = v20;
      v14[1] = v21;
      v14[2] = v15[2];
      *((unsigned char *)v14 + 24) = *((unsigned char *)v15 + 24);
      uint64_t v22 = v15[4];
      unint64_t v23 = v15[5];
      outlined copy of Data._Representation(v22, v23);
      v14[4] = v22;
      v14[5] = v23;
      v12((char *)v14 + *(int *)(updated + 28), (char *)v15 + *(int *)(updated + 28), v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, updated);
    }
  }
  return v4;
}

uint64_t destroy for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(updated - 8) + 48))(v6, 1, updated);
  if (!result)
  {
    outlined consume of Data._Representation(*(void *)v6, *(void *)(v6 + 8));
    outlined consume of Data._Representation(*(void *)(v6 + 32), *(void *)(v6 + 40));
    uint64_t v9 = v6 + *(int *)(updated + 28);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

void *initializeWithCopy for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
  uint64_t v16 = *(void *)(updated - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48))(v14, 1, updated))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v18 = *v14;
    unint64_t v19 = v14[1];
    outlined copy of Data._Representation(*v14, v19);
    void *v13 = v18;
    v13[1] = v19;
    v13[2] = v14[2];
    *((unsigned char *)v13 + 24) = *((unsigned char *)v14 + 24);
    uint64_t v20 = v14[4];
    unint64_t v21 = v14[5];
    outlined copy of Data._Representation(v20, v21);
    v13[4] = v20;
    v13[5] = v21;
    v11((char *)v13 + *(int *)(updated + 28), (char *)v14 + *(int *)(updated + 28), v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, updated);
  }
  return a1;
}

void *assignWithCopy for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v34 = *(void *)(v9 - 8);
  uint64_t v35 = v9;
  uint64_t v10 = *(void (**)(char *, char *))(v34 + 24);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (uint64_t)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
  uint64_t v15 = *(void *)(updated - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, updated);
  int v17 = v16((uint64_t)v13, 1, updated);
  if (!v8)
  {
    if (!v17)
    {
      uint64_t v25 = *(void *)v13;
      unint64_t v26 = *((void *)v13 + 1);
      outlined copy of Data._Representation(*(void *)v13, v26);
      uint64_t v27 = *(void *)v12;
      unint64_t v28 = *(void *)(v12 + 8);
      *(void *)uint64_t v12 = v25;
      *(void *)(v12 + 8) = v26;
      outlined consume of Data._Representation(v27, v28);
      uint64_t v29 = *((void *)v13 + 2);
      *(unsigned char *)(v12 + 24) = v13[24];
      *(void *)(v12 + 16) = v29;
      uint64_t v30 = *((void *)v13 + 4);
      unint64_t v31 = *((void *)v13 + 5);
      outlined copy of Data._Representation(v30, v31);
      uint64_t v32 = *(void *)(v12 + 32);
      unint64_t v33 = *(void *)(v12 + 40);
      *(void *)(v12 + 32) = v30;
      *(void *)(v12 + 40) = v31;
      outlined consume of Data._Representation(v32, v33);
      ((void (*)(uint64_t, char *, uint64_t))v10)(v12 + *(int *)(updated + 28), &v13[*(int *)(updated + 28)], v35);
      return a1;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v12, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
    memcpy((void *)v12, v13, *(void *)(*(void *)(v23 - 8) + 64));
    return a1;
  }
  uint64_t v18 = *(void *)v13;
  unint64_t v19 = *((void *)v13 + 1);
  outlined copy of Data._Representation(*(void *)v13, v19);
  *(void *)uint64_t v12 = v18;
  *(void *)(v12 + 8) = v19;
  uint64_t v20 = *((void *)v13 + 2);
  *(unsigned char *)(v12 + 24) = v13[24];
  *(void *)(v12 + 16) = v20;
  uint64_t v21 = *((void *)v13 + 4);
  unint64_t v22 = *((void *)v13 + 5);
  outlined copy of Data._Representation(v21, v22);
  *(void *)(v12 + 32) = v21;
  *(void *)(v12 + 40) = v22;
  (*(void (**)(uint64_t, char *, uint64_t))(v34 + 16))(v12 + *(int *)(updated + 28), &v13[*(int *)(updated + 28)], v35);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, updated);
  return a1;
}

_OWORD *initializeWithTake for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (_OWORD *)((char *)a1 + v11);
  uint64_t v13 = (_OWORD *)((char *)a2 + v11);
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
  uint64_t v15 = *(void *)(updated - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, updated))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    *((void *)v12 + 2) = *((void *)v13 + 2);
    *((unsigned char *)v12 + 24) = *((unsigned char *)v13 + 24);
    v12[2] = v13[2];
    v10((char *)v12 + *(int *)(updated + 28), (char *)v13 + *(int *)(updated + 28), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, updated);
  }
  return a1;
}

void *assignWithTake for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v25 = *(void *)(v10 - 8);
  uint64_t v26 = v10;
  uint64_t v11 = *(void (**)(char *, char *))(v25 + 40);
  v11(v8, v9);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (uint64_t)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
  uint64_t v16 = *(void *)(updated - 8);
  int v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v9) = v17(v13, 1, updated);
  int v18 = v17((uint64_t)v14, 1, updated);
  if (!v9)
  {
    if (!v18)
    {
      uint64_t v21 = *(void *)v13;
      unint64_t v22 = *(void *)(v13 + 8);
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
      outlined consume of Data._Representation(v21, v22);
      *(void *)(v13 + 16) = *((void *)v14 + 2);
      *(unsigned char *)(v13 + 24) = v14[24];
      uint64_t v23 = *(void *)(v13 + 32);
      unint64_t v24 = *(void *)(v13 + 40);
      *(_OWORD *)(v13 + 32) = *((_OWORD *)v14 + 2);
      outlined consume of Data._Representation(v23, v24);
      ((void (*)(uint64_t, char *, uint64_t))v11)(v13 + *(int *)(updated + 28), &v14[*(int *)(updated + 28)], v26);
      return a1;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v13, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
    memcpy((void *)v13, v14, *(void *)(*(void *)(v19 - 8) + 64));
    return a1;
  }
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *(void *)(v13 + 16) = *((void *)v14 + 2);
  *(unsigned char *)(v13 + 24) = v14[24];
  *(_OWORD *)(v13 + 32) = *((_OWORD *)v14 + 2);
  (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v13 + *(int *)(updated + 28), &v14[*(int *)(updated + 28)], v26);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, updated);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0F77FF0);
}

uint64_t sub_1B0F77FF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_220Tm(a1, a2, a3, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
}

uint64_t __swift_get_extra_inhabitant_index_220Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v5 = *(void *)(a1 + 8);
    if (v5 >= 0xFFFFFFFF) {
      LODWORD(v5) = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == a2)
    {
      uint64_t v12 = v10;
      uint64_t v13 = a1 + *(int *)(a3 + 20);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
      return v14(v13, a2, v12);
    }
    else
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(a4);
      uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
      uint64_t v17 = v15;
      uint64_t v18 = a1 + *(int *)(a3 + 24);
      return v16(v18, a2, v17);
    }
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0F78140);
}

uint64_t sub_1B0F78140(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_221Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
}

uint64_t __swift_store_extra_inhabitant_index_221Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == a3)
    {
      uint64_t v12 = v10;
      uint64_t v13 = v6 + *(int *)(a4 + 20);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
      return v14(v13, a2, a2, v12);
    }
    else
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
      uint64_t v17 = v15;
      uint64_t v18 = v6 + *(int *)(a4 + 24);
      return v16(v18, a2, a2, v17);
    }
  }
  return result;
}

void type metadata completion function for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

unint64_t initializeBufferWithCopyOfBuffer for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    unint64_t v8 = *(void *)(a2 + 8);
    outlined copy of Data._Representation(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v10 = *(void *)(a2 + 40);
    outlined copy of Data._Representation(v9, v10);
    *(void *)(a1 + 32) = v9;
    *(void *)(a1 + 40) = v10;
    uint64_t v11 = *(int *)(a3 + 28);
    uint64_t v12 = a1 + v11;
    uint64_t v13 = a2 + v11;
    uint64_t v14 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(uint64_t a1, uint64_t a2)
{
  outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  outlined consume of Data._Representation(*(void *)(a1 + 32), *(void *)(a1 + 40));
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t initializeWithCopy for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  outlined copy of Data._Representation(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  outlined copy of Data._Representation(v8, v9);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  outlined copy of Data._Representation(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = *(void *)(a1 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  outlined consume of Data._Representation(v8, v9);
  uint64_t v10 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v10;
  uint64_t v11 = *(void *)(a2 + 32);
  unint64_t v12 = *(void *)(a2 + 40);
  outlined copy of Data._Representation(v11, v12);
  uint64_t v13 = *(void *)(a1 + 32);
  unint64_t v14 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 40) = v12;
  outlined consume of Data._Representation(v13, v14);
  uint64_t v15 = *(int *)(a3 + 28);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v6, v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  unint64_t v9 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  outlined consume of Data._Representation(v8, v9);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0F78724);
}

uint64_t __swift_get_extra_inhabitant_index_210Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0F787F8);
}

void *__swift_store_extra_inhabitant_index_211Tm(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 28);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container()
{
  return type metadata completion function for AttachmentLedger_ErrorResponse();
}

void *initializeBufferWithCopyOfBuffer for AttachmentLedger_UpdateAttachmentResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    uint64_t v12 = *(int *)(a3 + 24);
    uint64_t v13 = (void *)((char *)v4 + v12);
    unint64_t v14 = (uint64_t *)((char *)a2 + v12);
    uint64_t v15 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      uint64_t v19 = v14[1];
      void *v13 = *v14;
      v13[1] = v19;
      *((_OWORD *)v13 + 1) = *((_OWORD *)v14 + 1);
      uint64_t v20 = *(int *)(v15 + 28);
      uint64_t v21 = (char *)v13 + v20;
      unint64_t v22 = (char *)v14 + v20;
      swift_bridgeObjectRetain();
      v11((uint64_t)v21, (uint64_t)v22, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return v4;
}

uint64_t destroy for AttachmentLedger_UpdateAttachmentResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = v6 + *(int *)(v7 + 28);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

uint64_t initializeWithCopy for AttachmentLedger_UpdateAttachmentResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    uint64_t v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 1);
    uint64_t v18 = *(int *)(v14 + 28);
    uint64_t v19 = (char *)v12 + v18;
    uint64_t v20 = (char *)v13 + v18;
    swift_bridgeObjectRetain();
    v10((uint64_t)v19, (uint64_t)v20, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_UpdateAttachmentResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v25 = *(void *)(v10 - 8);
  uint64_t v26 = v10;
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v25 + 24);
  ((void (*)(uint64_t, uint64_t))v11)(v8, v9);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (char *)(a1 + v12);
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v9) = v17(v13, 1, v15);
  int v18 = v17(v14, 1, v15);
  if (!v9)
  {
    if (!v18)
    {
      *(void *)uint64_t v13 = *(void *)v14;
      *((void *)v13 + 1) = *((void *)v14 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v13 + 2) = *((void *)v14 + 2);
      *((void *)v13 + 3) = *((void *)v14 + 3);
      v11(&v13[*(int *)(v15 + 28)], &v14[*(int *)(v15 + 28)], v26);
      return a1;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v13, type metadata accessor for AttachmentLedger_ErrorResponse);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v13, v14, *(void *)(*(void *)(v23 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v13 = *(void *)v14;
  *((void *)v13 + 1) = *((void *)v14 + 1);
  *((void *)v13 + 2) = *((void *)v14 + 2);
  *((void *)v13 + 3) = *((void *)v14 + 3);
  uint64_t v19 = *(int *)(v15 + 28);
  uint64_t v20 = &v13[v19];
  uint64_t v21 = &v14[v19];
  unint64_t v22 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
  swift_bridgeObjectRetain();
  v22(v20, v21, v26);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_UpdateAttachmentResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    long long v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    v10((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_UpdateAttachmentResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v22 = *(void *)(v9 - 8);
  uint64_t v23 = v9;
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(v22 + 40);
  ((void (*)(uint64_t, uint64_t))v10)(v7, v8);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, v14);
  int v17 = v16(v13, 1, v14);
  if (!v8)
  {
    if (!v17)
    {
      uint64_t v21 = *((void *)v13 + 1);
      *(void *)uint64_t v12 = *(void *)v13;
      *((void *)v12 + 1) = v21;
      swift_bridgeObjectRelease();
      v12[1] = v13[1];
      v10((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v23);
      return a1;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v12, type metadata accessor for AttachmentLedger_ErrorResponse);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64));
    return a1;
  }
  long long v18 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v18;
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v23);
  (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_UpdateAttachmentResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0F793EC);
}

uint64_t sub_1B0F793EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_166Tm(a1, a2, a3, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
}

uint64_t __swift_get_extra_inhabitant_index_166Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a2)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    return v12(v11, a2, v10);
  }
  else
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(a4);
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
    uint64_t v16 = v14;
    uint64_t v17 = a1 + *(int *)(a3 + 24);
    return v15(v17, a2, v16);
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_UpdateAttachmentResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0F7950C);
}

uint64_t sub_1B0F7950C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_167Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
}

uint64_t __swift_store_extra_inhabitant_index_167Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void *)(v10 - 8);
  if (*(_DWORD *)(v11 + 84) == a3)
  {
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a4 + 20);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    return v14(v13, a2, a2, v12);
  }
  else
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
    uint64_t v18 = v16;
    uint64_t v19 = a1 + *(int *)(a4 + 24);
    return v17(v19, a2, a2, v18);
  }
}

void type metadata completion function for AttachmentLedger_UpdateAttachmentResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void type metadata completion function for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, void (*a6)(uint64_t))
{
  type metadata accessor for UnknownStorage();
  if (v8 <= 0x3F)
  {
    type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData?(319, a5, a6);
    if (v9 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void *initializeBufferWithCopyOfBuffer for AttachmentLedger_GetAuthTokenRequest(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v7 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v7;
    uint64_t v8 = *(int *)(a3 + 28);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    *(void *)(a1 + 32) = a2[4];
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 32);
    uint64_t v14 = (void *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t AuthToken = type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption(0);
    uint64_t v17 = *(void *)(AuthToken - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, AuthToken))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      *uint64_t v14 = *v15;
      *((unsigned char *)v14 + 8) = *((unsigned char *)v15 + 8);
      v14[2] = v15[2];
      v12((uint64_t)v14 + *(int *)(AuthToken + 24), (uint64_t)v15 + *(int *)(AuthToken + 24), v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, AuthToken);
    }
  }
  return v4;
}

uint64_t destroy for AttachmentLedger_GetAuthTokenRequest(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 32);
  uint64_t AuthToken = type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AuthToken - 8) + 48))(v6, 1, AuthToken);
  if (!result)
  {
    uint64_t v9 = v6 + *(int *)(AuthToken + 24);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

uint64_t initializeWithCopy for AttachmentLedger_GetAuthTokenRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 32);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t AuthToken = type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption(0);
  uint64_t v16 = *(void *)(AuthToken - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, AuthToken))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    void *v13 = *v14;
    *((unsigned char *)v13 + 8) = *((unsigned char *)v14 + 8);
    v13[2] = v14[2];
    v11((char *)v13 + *(int *)(AuthToken + 24), (char *)v14 + *(int *)(AuthToken + 24), v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, AuthToken);
  }
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_GetAuthTokenRequest(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v23 = *(void *)(v10 - 8);
  uint64_t v24 = v10;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v23 + 24);
  v11(v8, v9);
  uint64_t v12 = *(int *)(a3 + 32);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = (uint64_t *)((char *)a2 + v12);
  uint64_t AuthToken = type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption(0);
  uint64_t v16 = *(void *)(AuthToken - 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v9) = v17(v13, 1, AuthToken);
  int v18 = v17((uint64_t)v14, 1, AuthToken);
  if (!v9)
  {
    if (!v18)
    {
      uint64_t v22 = *v14;
      *(unsigned char *)(v13 + 8) = *((unsigned char *)v14 + 8);
      *(void *)uint64_t v13 = v22;
      *(void *)(v13 + 16) = v14[2];
      ((void (*)(uint64_t, char *, uint64_t))v11)(v13 + *(int *)(AuthToken + 24), (char *)v14 + *(int *)(AuthToken + 24), v24);
      return a1;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v13, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
    memcpy((void *)v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    return a1;
  }
  uint64_t v19 = *v14;
  *(unsigned char *)(v13 + 8) = *((unsigned char *)v14 + 8);
  *(void *)uint64_t v13 = v19;
  *(void *)(v13 + 16) = v14[2];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v13 + *(int *)(AuthToken + 24), (uint64_t)v14 + *(int *)(AuthToken + 24), v24);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, AuthToken);
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_GetAuthTokenRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 32);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t AuthToken = type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption(0);
  uint64_t v15 = *(void *)(AuthToken - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, AuthToken))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    *((unsigned char *)v12 + 8) = *((unsigned char *)v13 + 8);
    v12[2] = v13[2];
    v10((char *)v12 + *(int *)(AuthToken + 24), (char *)v13 + *(int *)(AuthToken + 24), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, AuthToken);
  }
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_GetAuthTokenRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v21 + 40);
  v11(v8, v9);
  uint64_t v12 = *(int *)(a3 + 32);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t AuthToken = type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption(0);
  uint64_t v16 = *(void *)(AuthToken - 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v9) = v17(v13, 1, AuthToken);
  int v18 = v17(v14, 1, AuthToken);
  if (!v9)
  {
    if (!v18)
    {
      *(void *)uint64_t v13 = *(void *)v14;
      *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
      *(void *)(v13 + 16) = *(void *)(v14 + 16);
      ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v13 + *(int *)(AuthToken + 24), v14 + *(int *)(AuthToken + 24), v22);
      return a1;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v13, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
    memcpy((void *)v13, (const void *)v14, *(void *)(*(void *)(v19 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  *(void *)(v13 + 16) = *(void *)(v14 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v13 + *(int *)(AuthToken + 24), v14 + *(int *)(AuthToken + 24), v22);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, AuthToken);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_GetAuthTokenRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0F7A268);
}

uint64_t sub_1B0F7A268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 28);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 32);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_GetAuthTokenRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0F7A3AC);
}

uint64_t sub_1B0F7A3AC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 28);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 32);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for AttachmentLedger_GetAuthTokenRequest()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData?(319, &lazy cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

ValueMetadata *type metadata accessor for AttachmentLedger_GetAuthTokenRequest.Action()
{
  return &type metadata for AttachmentLedger_GetAuthTokenRequest.Action;
}

ValueMetadata *type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TokenEnvironment()
{
  return &type metadata for AttachmentLedger_GetAuthTokenRequest.TokenEnvironment;
}

void *initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    *(void *)(a1 + 16) = a2[2];
    uint64_t v5 = *(int *)(a3 + 24);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 24);
  uint64_t v3 = type metadata accessor for UnknownStorage();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(v2, v3);
}

uint64_t initializeWithCopy for AttachmentLedger_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = (uint64_t)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 24))(v6, v7, v8);
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_GetAuthTokenRequest.TestOption(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0F7A98C);
}

uint64_t __swift_get_extra_inhabitant_index_173Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
  return v6(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_GetAuthTokenRequest.TestOption(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0F7AA14);
}

uint64_t __swift_store_extra_inhabitant_index_174Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 24);
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, a2, a2, v6);
}

void *initializeBufferWithCopyOfBuffer for AttachmentLedger_GetAuthTokenResponse(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    *(void *)(a1 + 16) = a2[2];
    uint64_t v7 = a3[6];
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
    uint64_t v12 = a3[7];
    uint64_t v13 = (void *)((char *)v4 + v12);
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    uint64_t v15 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      uint64_t v19 = v14[1];
      void *v13 = *v14;
      v13[1] = v19;
      *((_OWORD *)v13 + 1) = *((_OWORD *)v14 + 1);
      uint64_t v20 = *(int *)(v15 + 28);
      uint64_t v21 = v11;
      uint64_t v22 = (char *)v13 + v20;
      uint64_t v23 = (char *)v14 + v20;
      swift_bridgeObjectRetain();
      uint64_t v24 = v22;
      uint64_t v11 = v21;
      v21((uint64_t)v24, (uint64_t)v23, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    uint64_t v25 = a3[8];
    uint64_t v26 = (void *)((char *)v4 + v25);
    uint64_t v27 = (uint64_t *)((char *)a2 + v25);
    uint64_t v28 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      uint64_t v31 = v27[1];
      *uint64_t v26 = *v27;
      v26[1] = v31;
      uint64_t v32 = v27[3];
      v26[2] = v27[2];
      v26[3] = v32;
      uint64_t v33 = v27[5];
      v26[4] = v27[4];
      v26[5] = v33;
      v26[6] = v27[6];
      uint64_t v34 = *(int *)(v28 + 32);
      uint64_t v35 = (void (*)(char *, char *, uint64_t))v11;
      uint64_t v36 = (char *)v26 + v34;
      int v37 = (char *)v27 + v34;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v35(v36, v37, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
  }
  return v4;
}

uint64_t destroy for AttachmentLedger_GetAuthTokenResponse(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v12(v4, v5);
  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v12(v6 + *(int *)(v7 + 28), v5);
  }
  uint64_t v8 = a1 + a2[8];
  uint64_t v9 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v11 = v8 + *(int *)(v9 + 32);
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v5);
  }
  return result;
}

uint64_t initializeWithCopy for AttachmentLedger_GetAuthTokenResponse(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    uint64_t v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 1);
    uint64_t v18 = *(int *)(v14 + 28);
    uint64_t v19 = v10;
    uint64_t v20 = (char *)v12 + v18;
    uint64_t v21 = (char *)v13 + v18;
    swift_bridgeObjectRetain();
    uint64_t v22 = v20;
    uint64_t v10 = v19;
    v19((uint64_t)v22, (uint64_t)v21, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v23 = a3[8];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (void *)(a2 + v23);
  uint64_t v26 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    uint64_t v29 = v25[1];
    *uint64_t v24 = *v25;
    v24[1] = v29;
    uint64_t v30 = v25[3];
    v24[2] = v25[2];
    v24[3] = v30;
    uint64_t v31 = v25[5];
    v24[4] = v25[4];
    v24[5] = v31;
    v24[6] = v25[6];
    uint64_t v32 = *(int *)(v26 + 32);
    uint64_t v33 = (void (*)(char *, char *, uint64_t))v10;
    uint64_t v34 = (char *)v24 + v32;
    uint64_t v35 = (char *)v25 + v32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v33(v34, v35, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_GetAuthTokenResponse(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v39 = *(void *)(v10 - 8);
  uint64_t v40 = v10;
  int v38 = *(void (**)(char *, char *, uint64_t))(v39 + 24);
  ((void (*)(uint64_t, uint64_t))v38)(v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (uint64_t *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      *uint64_t v12 = *v13;
      v12[1] = v13[1];
      v12[2] = v13[2];
      v12[3] = v13[3];
      uint64_t v19 = *(int *)(v14 + 28);
      uint64_t v20 = (char *)v12 + v19;
      uint64_t v21 = (char *)v13 + v19;
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
      swift_bridgeObjectRetain();
      v22(v20, v21, v40);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v12, type metadata accessor for AttachmentLedger_ErrorResponse);
LABEL_6:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v12, v13, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12[2] = v13[2];
  v12[3] = v13[3];
  v38((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v40);
LABEL_7:
  uint64_t v24 = a3[8];
  uint64_t v25 = (char *)(a1 + v24);
  uint64_t v26 = (char *)a2 + v24;
  uint64_t v27 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  int v30 = v29(v25, 1, v27);
  int v31 = v29(v26, 1, v27);
  if (!v30)
  {
    if (!v31)
    {
      *(void *)uint64_t v25 = *(void *)v26;
      *((void *)v25 + 1) = *((void *)v26 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v25 + 2) = *((void *)v26 + 2);
      *((void *)v25 + 3) = *((void *)v26 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v25 + 4) = *((void *)v26 + 4);
      *((void *)v25 + 5) = *((void *)v26 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v25 + 6) = *((void *)v26 + 6);
      v38(&v25[*(int *)(v27 + 32)], &v26[*(int *)(v27 + 32)], v40);
      return a1;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v25, type metadata accessor for AttachmentLedger_AuthPutMaterials);
    goto LABEL_12;
  }
  if (v31)
  {
LABEL_12:
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
    memcpy(v25, v26, *(void *)(*(void *)(v36 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v25 = *(void *)v26;
  *((void *)v25 + 1) = *((void *)v26 + 1);
  *((void *)v25 + 2) = *((void *)v26 + 2);
  *((void *)v25 + 3) = *((void *)v26 + 3);
  *((void *)v25 + 4) = *((void *)v26 + 4);
  *((void *)v25 + 5) = *((void *)v26 + 5);
  *((void *)v25 + 6) = *((void *)v26 + 6);
  uint64_t v32 = *(int *)(v27 + 32);
  uint64_t v33 = &v25[v32];
  uint64_t v34 = &v26[v32];
  uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v35(v33, v34, v40);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_GetAuthTokenResponse(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    long long v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    v10((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v18 = a3[8];
  uint64_t v19 = (_OWORD *)(a1 + v18);
  uint64_t v20 = (_OWORD *)(a2 + v18);
  uint64_t v21 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    long long v24 = v20[1];
    *uint64_t v19 = *v20;
    v19[1] = v24;
    v19[2] = v20[2];
    *((void *)v19 + 6) = *((void *)v20 + 6);
    v10((char *)v19 + *(int *)(v21 + 32), (char *)v20 + *(int *)(v21 + 32), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_GetAuthTokenResponse(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v36 = *(void *)(v9 - 8);
  uint64_t v37 = v9;
  uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v36 + 40);
  v35(v7, v8);
  uint64_t v10 = a3[7];
  uint64_t v11 = (char *)(a1 + v10);
  uint64_t v12 = (char *)(a2 + v10);
  uint64_t v13 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      long long v18 = *((_OWORD *)v12 + 1);
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
      *((_OWORD *)v11 + 1) = v18;
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(&v11[*(int *)(v13 + 28)], &v12[*(int *)(v13 + 28)], v37);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v11, type metadata accessor for AttachmentLedger_ErrorResponse);
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v11, v12, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v31 = *((void *)v12 + 1);
  *(void *)uint64_t v11 = *(void *)v12;
  *((void *)v11 + 1) = v31;
  swift_bridgeObjectRelease();
  *((_OWORD *)v11 + 1) = *((_OWORD *)v12 + 1);
  ((void (*)(char *, char *, uint64_t))v35)(&v11[*(int *)(v13 + 28)], &v12[*(int *)(v13 + 28)], v37);
LABEL_7:
  uint64_t v20 = a3[8];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  uint64_t v23 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v24 + 48);
  int v26 = v25(v21, 1, v23);
  int v27 = v25(v22, 1, v23);
  if (!v26)
  {
    if (!v27)
    {
      uint64_t v32 = v22[1];
      *uint64_t v21 = *v22;
      v21[1] = v32;
      swift_bridgeObjectRelease();
      uint64_t v33 = v22[3];
      v21[2] = v22[2];
      v21[3] = v33;
      swift_bridgeObjectRelease();
      uint64_t v34 = v22[5];
      v21[4] = v22[4];
      v21[5] = v34;
      swift_bridgeObjectRelease();
      v21[6] = v22[6];
      ((void (*)(char *, char *, uint64_t))v35)((char *)v21 + *(int *)(v23 + 32), (char *)v22 + *(int *)(v23 + 32), v37);
      return a1;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v21, type metadata accessor for AttachmentLedger_AuthPutMaterials);
    goto LABEL_12;
  }
  if (v27)
  {
LABEL_12:
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
    memcpy(v21, v22, *(void *)(*(void *)(v29 - 8) + 64));
    return a1;
  }
  long long v28 = *((_OWORD *)v22 + 1);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  *((_OWORD *)v21 + 1) = v28;
  *((_OWORD *)v21 + 2) = *((_OWORD *)v22 + 2);
  v21[6] = v22[6];
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))((char *)v21 + *(int *)(v23 + 32), (char *)v22 + *(int *)(v23 + 32), v37);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_GetAuthTokenResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0F7BD6C);
}

uint64_t sub_1B0F7BD6C(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[6];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v13(a1 + v11, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[7];
    goto LABEL_9;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a3[8];
  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_GetAuthTokenResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0F7BF00);
}

uint64_t sub_1B0F7BF00(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
    return result;
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[6];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[7];
    goto LABEL_7;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = v5 + a4[8];
  return v15(v17, a2, a2, v16);
}

void type metadata completion function for AttachmentLedger_GetAuthTokenResponse()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData?(319, &lazy cache variable for type metadata for AttachmentLedger_ErrorResponse?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_ErrorResponse);
    if (v1 <= 0x3F)
    {
      type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData?(319, &lazy cache variable for type metadata for AttachmentLedger_AuthPutMaterials?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AuthPutMaterials);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[2];
    unint64_t v9 = a2[3];
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v8, v9);
    a1[2] = v8;
    a1[3] = v9;
    uint64_t v10 = *(int *)(a3 + 24);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(void *)(a1 + 16), *(void *)(a1 + 24));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[2];
  unint64_t v8 = a2[3];
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v7, v8);
  a1[2] = v7;
  a1[3] = v8;
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  return a1;
}

void *assignWithCopy for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  outlined copy of Data._Representation(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  a1[2] = v6;
  a1[3] = v7;
  outlined consume of Data._Representation(v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *initializeWithTake for AttachmentLedger_CreateTopicRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  unint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

void *assignWithTake for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a1[2];
  unint64_t v8 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  outlined consume of Data._Representation(v7, v8);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_GetAttachmentMetadataRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0F7C5D8);
}

uint64_t __swift_get_extra_inhabitant_index_140Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_GetAttachmentMetadataRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0F7C6A0);
}

uint64_t __swift_store_extra_inhabitant_index_141Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for AttachmentLedger_GetAttachmentMetadataResponse(uint64_t a1, uint64_t *a2, int *a3)
{
  unint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    void *v4 = *a2;
    unint64_t v4 = (void *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v7 = a3[5];
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    uint64_t v12 = a3[6];
    uint64_t v13 = (void *)((char *)v4 + v12);
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    uint64_t v15 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      uint64_t v19 = v14[1];
      void *v13 = *v14;
      v13[1] = v19;
      *((_OWORD *)v13 + 1) = *((_OWORD *)v14 + 1);
      uint64_t v20 = *(int *)(v15 + 28);
      uint64_t v21 = (char *)v13 + v20;
      uint64_t v22 = (char *)v14 + v20;
      swift_bridgeObjectRetain();
      v11((uint64_t)v21, (uint64_t)v22, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    uint64_t v23 = a3[7];
    uint64_t v24 = (void *)((char *)v4 + v23);
    uint64_t v25 = (uint64_t *)((char *)a2 + v23);
    uint64_t v26 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      uint64_t v29 = *v25;
      unint64_t v30 = v25[1];
      outlined copy of Data._Representation(*v25, v30);
      *uint64_t v24 = v29;
      v24[1] = v30;
      uint64_t v31 = v25[3];
      v24[2] = v25[2];
      v24[3] = v31;
      *((unsigned char *)v24 + 32) = *((unsigned char *)v25 + 32);
      uint64_t v32 = v25[5];
      unint64_t v33 = v25[6];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v32, v33);
      v24[5] = v32;
      v24[6] = v33;
      v11((uint64_t)v24 + *(int *)(v26 + 32), (uint64_t)v25 + *(int *)(v26 + 32), v10);
      uint64_t v34 = *(int *)(v26 + 36);
      uint64_t v35 = (void *)((char *)v24 + v34);
      uint64_t v36 = (uint64_t *)((char *)v25 + v34);
      uint64_t v37 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      int v67 = (void (*)(char *, char *, uint64_t))v11;
      uint64_t v38 = *(void *)(v37 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
      {
        uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
      }
      else
      {
        uint64_t v65 = v38;
        uint64_t v66 = v27;
        uint64_t v40 = v36[1];
        void *v35 = *v36;
        v35[1] = v40;
        uint64_t v41 = v36[3];
        v35[2] = v36[2];
        v35[3] = v41;
        uint64_t v42 = v36[4];
        unint64_t v43 = v36[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v42, v43);
        v35[4] = v42;
        v35[5] = v43;
        uint64_t v44 = v36[6];
        unint64_t v45 = v36[7];
        outlined copy of Data._Representation(v44, v45);
        v35[6] = v44;
        v35[7] = v45;
        v67((char *)v35 + *(int *)(v37 + 32), (char *)v36 + *(int *)(v37 + 32), v10);
        uint64_t v46 = *(int *)(v37 + 36);
        __dst = (void *)((char *)v35 + v46);
        unint64_t v47 = (void *)((char *)v36 + v46);
        uint64_t v48 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        uint64_t v49 = *(void *)(v48 - 8);
        uint64_t v63 = v48;
        uint64_t v64 = *(unsigned int (**)(void *, uint64_t))(v49 + 48);
        uint64_t v68 = v37;
        uint64_t v61 = v49;
        if (v64(v47, 1))
        {
          uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(__dst, v47, *(void *)(*(void *)(v50 - 8) + 64));
          uint64_t v51 = v63;
        }
        else
        {
          uint64_t v52 = v47[1];
          void *__dst = *v47;
          unint64_t v60 = v47[2];
          outlined copy of Data._Representation(v52, v60);
          __dst[1] = v52;
          __dst[2] = v60;
          uint64_t v51 = v63;
          v67((char *)__dst + *(int *)(v63 + 24), (char *)v47 + *(int *)(v63 + 24), v10);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v49 + 56))(__dst, 0, 1, v63);
        }
        uint64_t v53 = *(int *)(v68 + 40);
        uint64_t v54 = (void *)((char *)v35 + v53);
        uint64_t v55 = (void *)((char *)v36 + v53);
        if (((unsigned int (*)(void *, uint64_t, uint64_t))v64)(v55, 1, v51))
        {
          uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v54, v55, *(void *)(*(void *)(v56 - 8) + 64));
        }
        else
        {
          uint64_t v57 = v55[1];
          *uint64_t v54 = *v55;
          unint64_t v58 = v55[2];
          outlined copy of Data._Representation(v57, v58);
          v54[1] = v57;
          v54[2] = v58;
          v67((char *)v54 + *(int *)(v51 + 24), (char *)v55 + *(int *)(v51 + 24), v10);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v61 + 56))(v54, 0, 1, v51);
        }
        uint64_t v27 = v66;
        (*(void (**)(void *, void, uint64_t, uint64_t))(v65 + 56))(v35, 0, 1, v68);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
  }
  return v4;
}

uint64_t destroy for AttachmentLedger_GetAttachmentMetadataResponse(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v18(v4, v5);
  uint64_t v6 = a1 + a2[6];
  uint64_t v7 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v18(v6 + *(int *)(v7 + 28), v5);
  }
  uint64_t v8 = a1 + a2[7];
  uint64_t v9 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
  if (!result)
  {
    outlined consume of Data._Representation(*(void *)v8, *(void *)(v8 + 8));
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(*(void *)(v8 + 40), *(void *)(v8 + 48));
    v18(v8 + *(int *)(v9 + 32), v5);
    uint64_t v11 = v8 + *(int *)(v9 + 36);
    uint64_t v12 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((void *)v12 - 1) + 48))(v11, 1, v12);
    if (!result)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(*(void *)(v11 + 32), *(void *)(v11 + 40));
      outlined consume of Data._Representation(*(void *)(v11 + 48), *(void *)(v11 + 56));
      v18(v11 + v12[8], v5);
      uint64_t v13 = v11 + v12[9];
      uint64_t v14 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      uint64_t v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
      if (!v15(v13, 1, v14))
      {
        outlined consume of Data._Representation(*(void *)(v13 + 8), *(void *)(v13 + 16));
        v18(v13 + *(int *)(v14 + 24), v5);
      }
      uint64_t v16 = v11 + v12[10];
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v15)(v16, 1, v14);
      if (!result)
      {
        outlined consume of Data._Representation(*(void *)(v16 + 8), *(void *)(v16 + 16));
        uint64_t v17 = v16 + *(int *)(v14 + 24);
        return ((uint64_t (*)(uint64_t, uint64_t))v18)(v17, v5);
      }
    }
  }
  return result;
}

uint64_t initializeWithCopy for AttachmentLedger_GetAttachmentMetadataResponse(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    uint64_t v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 1);
    uint64_t v18 = *(int *)(v14 + 28);
    uint64_t v19 = (char *)v12 + v18;
    uint64_t v20 = (char *)v13 + v18;
    swift_bridgeObjectRetain();
    v10(v19, v20, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v21 = a3[7];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (uint64_t *)(a2 + v21);
  uint64_t v24 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    uint64_t v27 = *v23;
    unint64_t v28 = v23[1];
    outlined copy of Data._Representation(*v23, v28);
    *uint64_t v22 = v27;
    v22[1] = v28;
    uint64_t v29 = v23[3];
    v22[2] = v23[2];
    v22[3] = v29;
    *((unsigned char *)v22 + 32) = *((unsigned char *)v23 + 32);
    uint64_t v30 = v23[5];
    unint64_t v31 = v23[6];
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v30, v31);
    v22[5] = v30;
    v22[6] = v31;
    v10((char *)v22 + *(int *)(v24 + 32), (char *)v23 + *(int *)(v24 + 32), v9);
    uint64_t v32 = *(int *)(v24 + 36);
    unint64_t v33 = (void *)((char *)v22 + v32);
    uint64_t v34 = (uint64_t *)((char *)v23 + v32);
    uint64_t v35 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    uint64_t v63 = v10;
    uint64_t v36 = *((void *)v35 - 1);
    if ((*(unsigned int (**)(void *, uint64_t, int *))(v36 + 48))(v34, 1, v35))
    {
      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
    }
    else
    {
      uint64_t v61 = v36;
      uint64_t v62 = v25;
      uint64_t v38 = v34[1];
      *unint64_t v33 = *v34;
      v33[1] = v38;
      uint64_t v39 = v34[3];
      v33[2] = v34[2];
      v33[3] = v39;
      uint64_t v40 = v34[4];
      unint64_t v41 = v34[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v40, v41);
      v33[4] = v40;
      v33[5] = v41;
      uint64_t v42 = v34[6];
      unint64_t v43 = v34[7];
      outlined copy of Data._Representation(v42, v43);
      v33[6] = v42;
      v33[7] = v43;
      v63((char *)v33 + v35[8], (char *)v34 + v35[8], v9);
      uint64_t v44 = v35[9];
      __dst = (void *)((char *)v33 + v44);
      unint64_t v45 = (void *)((char *)v34 + v44);
      uint64_t v46 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      uint64_t v47 = *(void *)(v46 - 8);
      uint64_t v64 = v46;
      unint64_t v60 = *(unsigned int (**)(void *, uint64_t))(v47 + 48);
      uint64_t v58 = v47;
      if (v60(v45, 1))
      {
        uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(__dst, v45, *(void *)(*(void *)(v48 - 8) + 64));
      }
      else
      {
        uint64_t v57 = v45[1];
        void *__dst = *v45;
        unint64_t v56 = v45[2];
        outlined copy of Data._Representation(v57, v56);
        __dst[1] = v57;
        __dst[2] = v56;
        v63((char *)__dst + *(int *)(v64 + 24), (char *)v45 + *(int *)(v64 + 24), v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v47 + 56))(__dst, 0, 1, v64);
      }
      uint64_t v49 = v35[10];
      uint64_t v50 = (void *)((char *)v33 + v49);
      uint64_t v51 = (void *)((char *)v34 + v49);
      if (((unsigned int (*)(void *, uint64_t, uint64_t))v60)(v51, 1, v64))
      {
        uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v50, v51, *(void *)(*(void *)(v52 - 8) + 64));
      }
      else
      {
        uint64_t v53 = v51[1];
        *uint64_t v50 = *v51;
        unint64_t v54 = v51[2];
        outlined copy of Data._Representation(v53, v54);
        v50[1] = v53;
        v50[2] = v54;
        v63((char *)v50 + *(int *)(v64 + 24), (char *)v51 + *(int *)(v64 + 24), v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v58 + 56))(v50, 0, 1, v64);
      }
      (*(void (**)(void *, void, uint64_t, int *))(v61 + 56))(v33, 0, 1, v35);
      uint64_t v25 = v62;
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_GetAttachmentMetadataResponse(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v151 = *(void *)(v10 - 8);
  uint64_t v152 = v10;
  uint64_t v148 = *(void (**)(uint64_t, uint64_t))(v151 + 24);
  v148(v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v153 = a1;
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (uint64_t *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      *uint64_t v12 = *v13;
      v12[1] = v13[1];
      v12[2] = v13[2];
      v12[3] = v13[3];
      uint64_t v19 = *(int *)(v14 + 28);
      uint64_t v20 = (char *)v12 + v19;
      uint64_t v21 = (char *)v13 + v19;
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v151 + 16);
      swift_bridgeObjectRetain();
      v22(v20, v21, v152);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v12, type metadata accessor for AttachmentLedger_ErrorResponse);
LABEL_6:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v12, v13, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12[2] = v13[2];
  v12[3] = v13[3];
  ((void (*)(char *, char *, uint64_t))v148)((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v152);
LABEL_7:
  uint64_t v24 = v153;
  uint64_t v25 = a3[7];
  uint64_t v26 = v153 + v25;
  uint64_t v27 = (uint64_t)a2 + v25;
  uint64_t v28 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 48);
  int v31 = v30(v26, 1, v28);
  int v32 = v30(v27, 1, v28);
  if (!v31)
  {
    if (v32)
    {
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v26, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      goto LABEL_13;
    }
    uint64_t v47 = *(void *)v27;
    unint64_t v48 = *(void *)(v27 + 8);
    outlined copy of Data._Representation(*(void *)v27, v48);
    uint64_t v49 = *(void *)v26;
    unint64_t v50 = *(void *)(v26 + 8);
    *(void *)uint64_t v26 = v47;
    *(void *)(v26 + 8) = v48;
    outlined consume of Data._Representation(v49, v50);
    *(void *)(v26 + 16) = *(void *)(v27 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v51 = *(void *)(v27 + 24);
    *(unsigned char *)(v26 + 32) = *(unsigned char *)(v27 + 32);
    *(void *)(v26 + 24) = v51;
    uint64_t v52 = *(void *)(v27 + 40);
    unint64_t v53 = *(void *)(v27 + 48);
    outlined copy of Data._Representation(v52, v53);
    uint64_t v54 = *(void *)(v26 + 40);
    unint64_t v55 = *(void *)(v26 + 48);
    *(void *)(v26 + 40) = v52;
    *(void *)(v26 + 48) = v53;
    outlined consume of Data._Representation(v54, v55);
    ((void (*)(uint64_t, uint64_t, uint64_t))v148)(v26 + *(int *)(v28 + 32), v27 + *(int *)(v28 + 32), v152);
    uint64_t v56 = *(int *)(v28 + 36);
    uint64_t v57 = (char *)(v26 + v56);
    uint64_t v58 = (char *)(v27 + v56);
    int v59 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    uint64_t v60 = *((void *)v59 - 1);
    uint64_t v61 = *(uint64_t (**)(void *, uint64_t, int *))(v60 + 48);
    int v62 = v61(v57, 1, v59);
    int v63 = v61(v58, 1, v59);
    if (v62)
    {
      if (!v63)
      {
        *(void *)uint64_t v57 = *(void *)v58;
        *((void *)v57 + 1) = *((void *)v58 + 1);
        *((void *)v57 + 2) = *((void *)v58 + 2);
        *((void *)v57 + 3) = *((void *)v58 + 3);
        uint64_t v64 = *((void *)v58 + 4);
        unint64_t v65 = *((void *)v58 + 5);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v64, v65);
        *((void *)v57 + 4) = v64;
        *((void *)v57 + 5) = v65;
        uint64_t v66 = *((void *)v58 + 6);
        unint64_t v67 = *((void *)v58 + 7);
        outlined copy of Data._Representation(v66, v67);
        *((void *)v57 + 6) = v66;
        *((void *)v57 + 7) = v67;
        __src = *(void (**)(char *, char *, uint64_t))(v151 + 16);
        __src(&v57[v59[8]], &v58[v59[8]], v152);
        uint64_t v68 = v59[9];
        uint64_t v69 = &v57[v68];
        unint64_t v70 = &v58[v68];
        uint64_t v71 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        uint64_t v72 = *(void *)(v71 - 8);
        uint64_t v150 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48);
        if (v150(v70, 1, v71))
        {
          uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v69, v70, *(void *)(*(void *)(v73 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v69 = *(void *)v70;
          uint64_t v145 = *((void *)v70 + 1);
          unint64_t v110 = *((void *)v70 + 2);
          outlined copy of Data._Representation(v145, v110);
          *((void *)v69 + 1) = v145;
          *((void *)v69 + 2) = v110;
          __src(&v69[*(int *)(v71 + 24)], &v70[*(int *)(v71 + 24)], v152);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v72 + 56))(v69, 0, 1, v71);
        }
        uint64_t v111 = v72;
        uint64_t v112 = v59[10];
        uint64_t v113 = &v57[v112];
        unint64_t v114 = &v58[v112];
        if (v150(v114, 1, v71))
        {
          uint64_t v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v113, v114, *(void *)(*(void *)(v115 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v113 = *(void *)v114;
          uint64_t v116 = v111;
          uint64_t v117 = *((void *)v114 + 1);
          unint64_t v118 = *((void *)v114 + 2);
          outlined copy of Data._Representation(v117, v118);
          *((void *)v113 + 1) = v117;
          *((void *)v113 + 2) = v118;
          __src(&v113[*(int *)(v71 + 24)], &v114[*(int *)(v71 + 24)], v152);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v116 + 56))(v113, 0, 1, v71);
        }
        (*(void (**)(char *, void, uint64_t, int *))(v60 + 56))(v57, 0, 1, v59);
        return v153;
      }
      goto LABEL_24;
    }
    if (v63)
    {
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v57, type metadata accessor for AttachmentLedger_MMCSMetadata);
LABEL_24:
      size_t v44 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?)
                                  - 8)
                      + 64);
      unint64_t v45 = v57;
      uint64_t v46 = v58;
      goto LABEL_14;
    }
    *(void *)uint64_t v57 = *(void *)v58;
    *((void *)v57 + 1) = *((void *)v58 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((void *)v57 + 2) = *((void *)v58 + 2);
    *((void *)v57 + 3) = *((void *)v58 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v92 = *((void *)v58 + 4);
    unint64_t v93 = *((void *)v58 + 5);
    outlined copy of Data._Representation(v92, v93);
    uint64_t v94 = *((void *)v57 + 4);
    unint64_t v95 = *((void *)v57 + 5);
    *((void *)v57 + 4) = v92;
    *((void *)v57 + 5) = v93;
    outlined consume of Data._Representation(v94, v95);
    uint64_t v96 = *((void *)v58 + 6);
    unint64_t v97 = *((void *)v58 + 7);
    outlined copy of Data._Representation(v96, v97);
    uint64_t v98 = *((void *)v57 + 6);
    unint64_t v99 = *((void *)v57 + 7);
    *((void *)v57 + 6) = v96;
    *((void *)v57 + 7) = v97;
    outlined consume of Data._Representation(v98, v99);
    ((void (*)(char *, char *, uint64_t))v148)(&v57[v59[8]], &v58[v59[8]], v152);
    uint64_t v100 = v59[9];
    uint64_t v101 = &v57[v100];
    uint64_t v102 = &v58[v100];
    uint64_t v103 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    uint64_t v142 = *(void *)(v103 - 8);
    uint64_t v144 = v101;
    uint64_t v104 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v142 + 48);
    LODWORD(v101) = v104(v101, 1, v103);
    uint64_t v154 = v103;
    uint64_t v105 = v103;
    uint64_t v106 = v104;
    int v107 = v104(v102, 1, v105);
    if (v101)
    {
      if (!v107)
      {
        *(void *)uint64_t v144 = *(void *)v102;
        uint64_t v121 = *((void *)v102 + 1);
        unint64_t v139 = *((void *)v102 + 2);
        outlined copy of Data._Representation(v121, v139);
        *((void *)v144 + 1) = v121;
        *((void *)v144 + 2) = v139;
        uint64_t v120 = v154;
        (*(void (**)(char *, char *, uint64_t))(v151 + 16))(&v144[*(int *)(v154 + 24)], &v102[*(int *)(v154 + 24)], v152);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v142 + 56))(v144, 0, 1, v154);
        uint64_t v119 = (void (*)(char *, char *, uint64_t))v148;
        goto LABEL_45;
      }
      size_t v108 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?)
                                   - 8)
                       + 64);
      int v109 = v144;
    }
    else
    {
      if (!v107)
      {
        *(void *)uint64_t v144 = *(void *)v102;
        uint64_t v122 = *((void *)v102 + 1);
        unint64_t v140 = *((void *)v102 + 2);
        outlined copy of Data._Representation(v122, v140);
        uint64_t v123 = *((void *)v144 + 1);
        unint64_t v124 = *((void *)v144 + 2);
        *((void *)v144 + 1) = v122;
        *((void *)v144 + 2) = v140;
        outlined consume of Data._Representation(v123, v124);
        uint64_t v120 = v154;
        uint64_t v119 = (void (*)(char *, char *, uint64_t))v148;
        ((void (*)(char *, char *, uint64_t))v148)(&v144[*(int *)(v154 + 24)], &v102[*(int *)(v154 + 24)], v152);
        goto LABEL_45;
      }
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v144, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
      size_t v108 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?)
                                   - 8)
                       + 64);
      int v109 = v144;
    }
    memcpy(v109, v102, v108);
    uint64_t v119 = (void (*)(char *, char *, uint64_t))v148;
    uint64_t v120 = v154;
LABEL_45:
    uint64_t v125 = v59[10];
    uint64_t v126 = &v57[v125];
    uint64_t v127 = &v58[v125];
    int v128 = v106(v126, 1, v120);
    int v129 = v106(v127, 1, v120);
    if (v128)
    {
      if (!v129)
      {
        *(void *)uint64_t v126 = *(void *)v127;
        uint64_t v130 = *((void *)v127 + 1);
        unint64_t v131 = *((void *)v127 + 2);
        outlined copy of Data._Representation(v130, v131);
        *((void *)v126 + 1) = v130;
        *((void *)v126 + 2) = v131;
        (*(void (**)(char *, char *, uint64_t))(v151 + 16))(&v126[*(int *)(v120 + 24)], &v127[*(int *)(v120 + 24)], v152);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v142 + 56))(v126, 0, 1, v120);
        return v24;
      }
    }
    else
    {
      if (!v129)
      {
        *(void *)uint64_t v126 = *(void *)v127;
        uint64_t v132 = *((void *)v127 + 1);
        unint64_t v133 = *((void *)v127 + 2);
        outlined copy of Data._Representation(v132, v133);
        uint64_t v134 = *((void *)v126 + 1);
        unint64_t v135 = *((void *)v126 + 2);
        *((void *)v126 + 1) = v132;
        *((void *)v126 + 2) = v133;
        outlined consume of Data._Representation(v134, v135);
        v119(&v126[*(int *)(v120 + 24)], &v127[*(int *)(v120 + 24)], v152);
        return v24;
      }
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v126, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
    }
    size_t v44 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?)
                                - 8)
                    + 64);
    unint64_t v45 = v126;
    uint64_t v46 = v127;
    goto LABEL_14;
  }
  if (v32)
  {
LABEL_13:
    size_t v44 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?)
                                - 8)
                    + 64);
    unint64_t v45 = (void *)v26;
    uint64_t v46 = (char *)v27;
LABEL_14:
    memcpy(v45, v46, v44);
    return v24;
  }
  uint64_t v33 = *(void *)v27;
  unint64_t v34 = *(void *)(v27 + 8);
  outlined copy of Data._Representation(*(void *)v27, v34);
  *(void *)uint64_t v26 = v33;
  *(void *)(v26 + 8) = v34;
  *(void *)(v26 + 16) = *(void *)(v27 + 16);
  uint64_t v35 = *(void *)(v27 + 24);
  *(unsigned char *)(v26 + 32) = *(unsigned char *)(v27 + 32);
  *(void *)(v26 + 24) = v35;
  uint64_t v36 = *(void *)(v27 + 40);
  unint64_t v37 = *(void *)(v27 + 48);
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v36, v37);
  *(void *)(v26 + 40) = v36;
  *(void *)(v26 + 48) = v37;
  uint64_t v149 = *(void (**)(uint64_t, uint64_t, uint64_t))(v151 + 16);
  v149(v26 + *(int *)(v28 + 32), v27 + *(int *)(v28 + 32), v152);
  uint64_t v38 = *(int *)(v28 + 36);
  uint64_t v39 = (void *)(v26 + v38);
  uint64_t v40 = (void *)(v27 + v38);
  uint64_t v41 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  uint64_t v42 = *(void *)(v41 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
  {
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
    memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
  }
  else
  {
    uint64_t v143 = v42;
    __srca = (int *)v41;
    *uint64_t v39 = *v40;
    v39[1] = v40[1];
    v39[2] = v40[2];
    v39[3] = v40[3];
    uint64_t v74 = v40[4];
    unint64_t v75 = v40[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v74, v75);
    v39[4] = v74;
    v39[5] = v75;
    uint64_t v76 = v40[6];
    unint64_t v77 = v40[7];
    outlined copy of Data._Representation(v76, v77);
    v39[6] = v76;
    v39[7] = v77;
    v149((uint64_t)v39 + __srca[8], (uint64_t)v40 + __srca[8], v152);
    uint64_t v78 = *(int *)(v41 + 36);
    int v79 = (void *)((char *)v39 + v78);
    uint64_t v80 = (void *)((char *)v40 + v78);
    uint64_t v81 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    uint64_t v82 = *(void *)(v81 - 8);
    long long v141 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v82 + 48);
    uint64_t v138 = v82;
    if (v141(v80, 1, v81))
    {
      uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      memcpy(v79, v80, *(void *)(*(void *)(v83 - 8) + 64));
    }
    else
    {
      *int v79 = *v80;
      unint64_t v136 = v80[2];
      uint64_t v137 = v80[1];
      outlined copy of Data._Representation(v137, v136);
      v79[1] = v137;
      v79[2] = v136;
      v149((uint64_t)v79 + *(int *)(v81 + 24), (uint64_t)v80 + *(int *)(v81 + 24), v152);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v82 + 56))(v79, 0, 1, v81);
    }
    uint64_t v84 = v81;
    uint64_t v85 = __srca[10];
    uint64_t v86 = (void *)((char *)v39 + v85);
    uint64_t v87 = (void *)((char *)v40 + v85);
    if (v141(v87, 1, v84))
    {
      uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      memcpy(v86, v87, *(void *)(*(void *)(v88 - 8) + 64));
    }
    else
    {
      *uint64_t v86 = *v87;
      uint64_t v90 = v87[1];
      unint64_t v89 = v87[2];
      outlined copy of Data._Representation(v90, v89);
      v86[1] = v90;
      v86[2] = v89;
      v149((uint64_t)v86 + *(int *)(v84 + 24), (uint64_t)v87 + *(int *)(v84 + 24), v152);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v138 + 56))(v86, 0, 1, v84);
    }
    (*(void (**)(void *, void, uint64_t, int *))(v143 + 56))(v39, 0, 1, __srca);
    uint64_t v24 = v153;
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  return v24;
}

uint64_t initializeWithTake for AttachmentLedger_GetAttachmentMetadataResponse(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    long long v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    v10((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v18 = a3[7];
  uint64_t v19 = (_OWORD *)(a1 + v18);
  uint64_t v20 = (_OWORD *)(a2 + v18);
  uint64_t v21 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    *uint64_t v19 = *v20;
    uint64_t v24 = *((void *)v20 + 3);
    *((void *)v19 + 2) = *((void *)v20 + 2);
    *((void *)v19 + 3) = v24;
    *((unsigned char *)v19 + 32) = *((unsigned char *)v20 + 32);
    *(_OWORD *)((char *)v19 + 40) = *(_OWORD *)((char *)v20 + 40);
    v10((char *)v19 + *(int *)(v21 + 32), (char *)v20 + *(int *)(v21 + 32), v9);
    uint64_t v25 = *(int *)(v21 + 36);
    uint64_t v49 = v10;
    uint64_t v26 = (_OWORD *)((char *)v19 + v25);
    uint64_t v27 = (_OWORD *)((char *)v20 + v25);
    uint64_t v28 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    uint64_t v29 = *((void *)v28 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v29 + 48))(v27, 1, v28))
    {
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      uint64_t v45 = v29;
      uint64_t v46 = v22;
      long long v31 = v27[1];
      *uint64_t v26 = *v27;
      v26[1] = v31;
      long long v32 = v27[3];
      v26[2] = v27[2];
      v26[3] = v32;
      v49((char *)v26 + v28[8], (char *)v27 + v28[8], v9);
      uint64_t v33 = v28[9];
      __dst = (void *)((char *)v26 + v33);
      unint64_t v48 = v26;
      unint64_t v34 = (void *)((char *)v27 + v33);
      uint64_t v35 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      uint64_t v36 = *(void *)(v35 - 8);
      size_t v44 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v36 + 48);
      uint64_t v43 = v36;
      if (v44(v34, 1, v35))
      {
        uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(__dst, v34, *(void *)(*(void *)(v37 - 8) + 64));
      }
      else
      {
        void *__dst = *v34;
        *(_OWORD *)(__dst + 1) = *(_OWORD *)(v34 + 1);
        v49((char *)__dst + *(int *)(v35 + 24), (char *)v34 + *(int *)(v35 + 24), v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(__dst, 0, 1, v35);
      }
      uint64_t v38 = v28[10];
      uint64_t v39 = (void *)((char *)v48 + v38);
      uint64_t v40 = (void *)((char *)v27 + v38);
      if (v44(v40, 1, v35))
      {
        uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64));
      }
      else
      {
        *uint64_t v39 = *v40;
        *(_OWORD *)(v39 + 1) = *(_OWORD *)(v40 + 1);
        v49((char *)v39 + *(int *)(v35 + 24), (char *)v40 + *(int *)(v35 + 24), v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v43 + 56))(v39, 0, 1, v35);
      }
      uint64_t v22 = v46;
      (*(void (**)(_OWORD *, void, uint64_t, int *))(v45 + 56))(v48, 0, 1, v28);
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_GetAttachmentMetadataResponse(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[5];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v122 = *(void **)(v9 - 8);
  uint64_t v125 = v9;
  __dst = (void (*)(uint64_t, uint64_t))v122[5];
  __dst(v7, v8);
  uint64_t v10 = a3[6];
  uint64_t v126 = a1;
  uint64_t v11 = (char *)(a1 + v10);
  uint64_t v12 = (char *)(a2 + v10);
  uint64_t v13 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      long long v18 = *((_OWORD *)v12 + 1);
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
      *((_OWORD *)v11 + 1) = v18;
      ((void (*)(char *, char *, uint64_t))v122[4])(&v11[*(int *)(v13 + 28)], &v12[*(int *)(v13 + 28)], v125);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v11, type metadata accessor for AttachmentLedger_ErrorResponse);
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v11, v12, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v40 = *((void *)v12 + 1);
  *(void *)uint64_t v11 = *(void *)v12;
  *((void *)v11 + 1) = v40;
  swift_bridgeObjectRelease();
  *((_OWORD *)v11 + 1) = *((_OWORD *)v12 + 1);
  ((void (*)(char *, char *, uint64_t))__dst)(&v11[*(int *)(v13 + 28)], &v12[*(int *)(v13 + 28)], v125);
LABEL_7:
  uint64_t v20 = v126;
  uint64_t v21 = a3[7];
  uint64_t v22 = v126 + v21;
  uint64_t v23 = a2 + v21;
  uint64_t v24 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v22, 1, v24);
  int v28 = v26(v23, 1, v24);
  if (!v27)
  {
    if (v28)
    {
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v22, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      goto LABEL_13;
    }
    uint64_t v41 = *(void *)v22;
    unint64_t v42 = *(void *)(v22 + 8);
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
    outlined consume of Data._Representation(v41, v42);
    *(void *)(v22 + 16) = *(void *)(v23 + 16);
    swift_bridgeObjectRelease();
    *(void *)(v22 + 24) = *(void *)(v23 + 24);
    *(unsigned char *)(v22 + 32) = *(unsigned char *)(v23 + 32);
    uint64_t v43 = *(void *)(v22 + 40);
    unint64_t v44 = *(void *)(v22 + 48);
    *(_OWORD *)(v22 + 40) = *(_OWORD *)(v23 + 40);
    outlined consume of Data._Representation(v43, v44);
    ((void (*)(uint64_t, uint64_t, uint64_t))__dst)(v22 + *(int *)(v24 + 32), v23 + *(int *)(v24 + 32), v125);
    uint64_t v45 = *(int *)(v24 + 36);
    uint64_t v46 = v22 + v45;
    uint64_t v47 = (char *)(v23 + v45);
    unint64_t v48 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    uint64_t v49 = *((void *)v48 - 1);
    unint64_t v50 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v49 + 48);
    int v51 = v50(v46, 1, v48);
    int v52 = v50((uint64_t)v47, 1, v48);
    if (v51)
    {
      if (!v52)
      {
        long long v53 = *((_OWORD *)v47 + 1);
        *(_OWORD *)uint64_t v46 = *(_OWORD *)v47;
        *(_OWORD *)(v46 + 16) = v53;
        long long v54 = *((_OWORD *)v47 + 3);
        *(_OWORD *)(v46 + 32) = *((_OWORD *)v47 + 2);
        *(_OWORD *)(v46 + 48) = v54;
        unint64_t v55 = (void (*)(uint64_t, char *, uint64_t))v122[4];
        v55(v46 + v48[8], &v47[v48[8]], v125);
        uint64_t v56 = v48[9];
        __dsta = (void *)(v46 + v56);
        uint64_t v57 = &v47[v56];
        uint64_t v58 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        __src = *(void **)(v58 - 8);
        uint64_t v123 = (unsigned int (*)(char *, uint64_t, uint64_t))__src[6];
        uint64_t v113 = (void (*)(char *, char *, uint64_t))v55;
        if (v123(v57, 1, v58))
        {
          uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(__dsta, v57, *(void *)(*(void *)(v59 - 8) + 64));
          uint64_t v60 = __src;
        }
        else
        {
          void *__dsta = *(void *)v57;
          *(_OWORD *)(__dsta + 1) = *(_OWORD *)(v57 + 8);
          v55((uint64_t)__dsta + *(int *)(v58 + 24), &v57[*(int *)(v58 + 24)], v125);
          uint64_t v60 = __src;
          ((void (*)(void *, void, uint64_t, uint64_t))__src[7])(__dsta, 0, 1, v58);
        }
        uint64_t v93 = v48[10];
        uint64_t v94 = (void *)(v46 + v93);
        unint64_t v95 = &v47[v93];
        if (v123(v95, 1, v58))
        {
          uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v94, v95, *(void *)(*(void *)(v96 - 8) + 64));
        }
        else
        {
          *uint64_t v94 = *(void *)v95;
          *(_OWORD *)(v94 + 1) = *(_OWORD *)(v95 + 8);
          v113((char *)v94 + *(int *)(v58 + 24), &v95[*(int *)(v58 + 24)], v125);
          ((void (*)(void *, void, uint64_t, uint64_t))v60[7])(v94, 0, 1, v58);
        }
        uint64_t v20 = v126;
        (*(void (**)(uint64_t, void, uint64_t, int *))(v49 + 56))(v46, 0, 1, v48);
        return v20;
      }
      goto LABEL_24;
    }
    if (v52)
    {
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v46, type metadata accessor for AttachmentLedger_MMCSMetadata);
LABEL_24:
      size_t v37 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?)
                                  - 8)
                      + 64);
      uint64_t v38 = (void *)v46;
      uint64_t v39 = v47;
      goto LABEL_14;
    }
    uint64_t v76 = *((void *)v47 + 1);
    *(void *)uint64_t v46 = *(void *)v47;
    *(void *)(v46 + 8) = v76;
    swift_bridgeObjectRelease();
    uint64_t v77 = *((void *)v47 + 3);
    *(void *)(v46 + 16) = *((void *)v47 + 2);
    *(void *)(v46 + 24) = v77;
    swift_bridgeObjectRelease();
    uint64_t v78 = *(void *)(v46 + 32);
    unint64_t v79 = *(void *)(v46 + 40);
    *(_OWORD *)(v46 + 32) = *((_OWORD *)v47 + 2);
    outlined consume of Data._Representation(v78, v79);
    uint64_t v80 = *(void *)(v46 + 48);
    unint64_t v81 = *(void *)(v46 + 56);
    *(_OWORD *)(v46 + 48) = *((_OWORD *)v47 + 3);
    outlined consume of Data._Representation(v80, v81);
    ((void (*)(uint64_t, char *, uint64_t))__dst)(v46 + v48[8], &v47[v48[8]], v125);
    uint64_t v82 = v48[9];
    uint64_t v83 = v46 + v82;
    uint64_t v84 = &v47[v82];
    uint64_t v85 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    uint64_t v111 = *(void *)(v85 - 8);
    uint64_t v112 = v83;
    uint64_t v86 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v111 + 48);
    LODWORD(v83) = v86(v83, 1, v85);
    uint64_t v115 = v84;
    __srcb = (int *)v85;
    uint64_t v87 = v85;
    uint64_t v88 = (uint64_t (*)(uint64_t, uint64_t, int *))v86;
    int v89 = v86((uint64_t)v84, 1, v87);
    if (v83)
    {
      uint64_t v90 = v122;
      if (!v89)
      {
        *(void *)uint64_t v112 = *(void *)v84;
        *(_OWORD *)(v112 + 8) = *(_OWORD *)(v84 + 8);
        uint64_t v98 = __srcb;
        ((void (*)(uint64_t, char *, uint64_t))v122[4])(v112 + __srcb[6], &v84[__srcb[6]], v125);
        (*(void (**)(uint64_t, void, uint64_t, int *))(v111 + 56))(v112, 0, 1, __srcb);
        unint64_t v97 = (void (*)(uint64_t, char *, uint64_t))__dst;
        goto LABEL_45;
      }
      size_t v91 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?)
                                  - 8)
                      + 64);
      uint64_t v92 = (void *)v112;
    }
    else
    {
      uint64_t v90 = v122;
      if (!v89)
      {
        uint64_t v99 = *((void *)v84 + 2);
        uint64_t v100 = *(void *)(v112 + 8);
        unint64_t v101 = *(void *)(v112 + 16);
        *(_OWORD *)uint64_t v112 = *(_OWORD *)v84;
        *(void *)(v112 + 16) = v99;
        outlined consume of Data._Representation(v100, v101);
        uint64_t v98 = __srcb;
        uint64_t v90 = v122;
        unint64_t v97 = (void (*)(uint64_t, char *, uint64_t))__dst;
        ((void (*)(uint64_t, char *, uint64_t))__dst)(v112 + __srcb[6], &v115[__srcb[6]], v125);
        goto LABEL_45;
      }
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v112, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
      size_t v91 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?)
                                  - 8)
                      + 64);
      uint64_t v92 = (void *)v112;
    }
    memcpy(v92, v84, v91);
    uint64_t v98 = __srcb;
    unint64_t v97 = (void (*)(uint64_t, char *, uint64_t))__dst;
LABEL_45:
    uint64_t v102 = v48[10];
    uint64_t v103 = v46 + v102;
    uint64_t v104 = &v47[v102];
    int v105 = v88(v103, 1, v98);
    int v106 = v88((uint64_t)v104, 1, v98);
    if (v105)
    {
      if (!v106)
      {
        *(void *)uint64_t v103 = *(void *)v104;
        *(_OWORD *)(v103 + 8) = *(_OWORD *)(v104 + 8);
        ((void (*)(uint64_t, char *, uint64_t))v90[4])(v103 + v98[6], &v104[v98[6]], v125);
        (*(void (**)(uint64_t, void, uint64_t, int *))(v111 + 56))(v103, 0, 1, v98);
        return v20;
      }
    }
    else
    {
      if (!v106)
      {
        uint64_t v107 = *((void *)v104 + 2);
        uint64_t v108 = *(void *)(v103 + 8);
        unint64_t v109 = *(void *)(v103 + 16);
        *(_OWORD *)uint64_t v103 = *(_OWORD *)v104;
        *(void *)(v103 + 16) = v107;
        outlined consume of Data._Representation(v108, v109);
        v97(v103 + v98[6], &v104[v98[6]], v125);
        return v20;
      }
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v103, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
    }
    size_t v37 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?)
                                - 8)
                    + 64);
    uint64_t v38 = (void *)v103;
    uint64_t v39 = v104;
    goto LABEL_14;
  }
  if (v28)
  {
LABEL_13:
    size_t v37 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?)
                                - 8)
                    + 64);
    uint64_t v38 = (void *)v22;
    uint64_t v39 = (char *)v23;
LABEL_14:
    memcpy(v38, v39, v37);
    return v20;
  }
  *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
  uint64_t v29 = *(void *)(v23 + 24);
  *(void *)(v22 + 16) = *(void *)(v23 + 16);
  *(void *)(v22 + 24) = v29;
  *(unsigned char *)(v22 + 32) = *(unsigned char *)(v23 + 32);
  *(_OWORD *)(v22 + 40) = *(_OWORD *)(v23 + 40);
  uint64_t v30 = (void (*)(uint64_t, uint64_t, uint64_t))v122[4];
  v30(v22 + *(int *)(v24 + 32), v23 + *(int *)(v24 + 32), v125);
  uint64_t v31 = *(int *)(v24 + 36);
  long long v32 = (_OWORD *)(v22 + v31);
  uint64_t v33 = (_OWORD *)(v23 + v31);
  unint64_t v34 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  uint64_t v35 = (unsigned int (**)(_OWORD *, uint64_t, int *))*((void *)v34 - 1);
  if (v35[6](v33, 1, v34))
  {
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
    memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    __dstb = (void (**)(void *, void, uint64_t, int *))v35;
    long long v61 = v33[1];
    *long long v32 = *v33;
    v32[1] = v61;
    long long v62 = v33[3];
    v32[2] = v33[2];
    v32[3] = v62;
    v30((uint64_t)v32 + v34[8], (uint64_t)v33 + v34[8], v125);
    uint64_t v63 = v34[9];
    unint64_t v114 = (char *)v32;
    unint64_t v124 = (void *)((char *)v32 + v63);
    uint64_t v64 = (void *)((char *)v33 + v63);
    uint64_t v65 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    uint64_t v66 = *(void *)(v65 - 8);
    __srca = v64;
    unint64_t v67 = v64;
    uint64_t v68 = v65;
    unint64_t v110 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v66 + 48);
    if (v110(v67, 1, v65))
    {
      uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      memcpy(v124, __srca, *(void *)(*(void *)(v69 - 8) + 64));
    }
    else
    {
      *unint64_t v124 = *__srca;
      *(_OWORD *)(v124 + 1) = *(_OWORD *)(__srca + 1);
      v30((uint64_t)v124 + *(int *)(v68 + 24), (uint64_t)__srca + *(int *)(v68 + 24), v125);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v66 + 56))(v124, 0, 1, v68);
    }
    uint64_t v70 = v68;
    uint64_t v71 = v34[10];
    uint64_t v72 = &v114[v71];
    uint64_t v73 = (void *)((char *)v33 + v71);
    if (v110(v73, 1, v70))
    {
      uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      memcpy(v72, v73, *(void *)(*(void *)(v74 - 8) + 64));
    }
    else
    {
      *(void *)uint64_t v72 = *v73;
      *(_OWORD *)(v72 + 8) = *(_OWORD *)(v73 + 1);
      v30((uint64_t)&v72[*(int *)(v70 + 24)], (uint64_t)v73 + *(int *)(v70 + 24), v125);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56))(v72, 0, 1, v70);
    }
    __dstb[7](v114, 0, 1, v34);
  }
  uint64_t v20 = v126;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  return v20;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_GetAttachmentMetadataResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0F7F74C);
}

uint64_t sub_1B0F7F74C(uint64_t a1, uint64_t a2, int *a3)
{
  return __swift_get_extra_inhabitant_index_143Tm(a1, a2, a3, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
}

uint64_t __swift_get_extra_inhabitant_index_143Tm(uint64_t a1, uint64_t a2, int *a3, uint64_t *a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[5];
LABEL_5:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v13(a1 + v11, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[6];
    goto LABEL_5;
  }
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(a4);
  int v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + a3[7];
  return v16(v18, a2, v17);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_GetAttachmentMetadataResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0F7F8BC);
}

uint64_t sub_1B0F7F8BC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  return __swift_store_extra_inhabitant_index_144Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
}

uint64_t __swift_store_extra_inhabitant_index_144Tm(uint64_t a1, uint64_t a2, int a3, int *a4, uint64_t *a5)
{
  uint64_t v10 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a3)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)(v10 - 8);
    uint64_t v13 = a4[5];
LABEL_5:
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
    return v15(a1 + v13, a2, a2, v11);
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a3)
  {
    uint64_t v11 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a4[6];
    goto LABEL_5;
  }
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
  uint64_t v19 = v17;
  uint64_t v20 = a1 + a4[7];
  return v18(v20, a2, a2, v19);
}

void type metadata completion function for AttachmentLedger_GetAttachmentMetadataResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void type metadata completion function for AttachmentLedger_CreateTopicResponse(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  type metadata accessor for UnknownStorage();
  if (v7 <= 0x3F)
  {
    type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData?(319, &lazy cache variable for type metadata for AttachmentLedger_ErrorResponse?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_ErrorResponse);
    if (v8 <= 0x3F)
    {
      type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData?(319, a4, a5);
      if (v9 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t Testable.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t result = static Testable.isMutable.getter();
  if (result)
  {
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
    return v6(v2, a1, v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Testable.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

BOOL static Testable.isMutable.getter()
{
  unint64_t v0 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v1 = NSClassFromString(v0);

  if (v1) {
    return 1;
  }
  uint64_t v3 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL);
  Class v4 = NSClassFromString(v3);

  return v4 != 0;
}

uint64_t Testable.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t key path getter for Testable.wrappedValue : <A>Testable<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *(void *)(a3 + a2 - 8);
  uint64_t v7 = type metadata accessor for Testable();
  MEMORY[0x1F4188790](v7);
  unint64_t v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)&v12 - v8, a1);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a4, v9, v6);
}

uint64_t key path setter for Testable.wrappedValue : <A>Testable<A>(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v2 = (char *)&v6 - v1;
  (*(void (**)(char *))(v3 + 16))((char *)&v6 - v1);
  uint64_t v4 = type metadata accessor for Testable();
  return Testable.wrappedValue.setter((uint64_t)v2, v4);
}

void (*Testable.wrappedValue.modify(void *a1, uint64_t a2))(uint64_t *a1, char a2)
{
  uint64_t v5 = malloc(0x40uLL);
  *a1 = v5;
  *uint64_t v5 = a2;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v5[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v5[4] = malloc(v9);
  v5[5] = malloc(v9);
  uint64_t v10 = *(void (**)(void))(v8 + 16);
  v5[6] = v10;
  v5[7] = (v8 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v10();
  return Testable.wrappedValue.modify;
}

void Testable.wrappedValue.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = *(void **)(*a1 + 32);
  uint64_t v3 = *(void **)(*a1 + 40);
  if (a2)
  {
    uint64_t v5 = *(void *)(v2 + 16);
    uint64_t v6 = *(void *)(v2 + 24);
    uint64_t v7 = *(void *)v2;
    (*(void (**)(void, void, uint64_t))(v2 + 48))(*(void *)(v2 + 32), *(void *)(v2 + 40), v5);
    Testable.wrappedValue.setter((uint64_t)v4, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v3, v5);
  }
  else
  {
    Testable.wrappedValue.setter(*(void *)(v2 + 40), *(void *)v2);
  }
  free(v3);
  free(v4);
  free((void *)v2);
}

uint64_t sub_1B0F8029C()
{
  return 8;
}

void *sub_1B0F802A8(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata instantiation function for Testable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 16);
}

uint64_t type metadata completion function for Testable()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Testable(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7
    && *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    uint64_t v8 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t destroy for Testable(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
}

uint64_t initializeWithCopy for Testable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithCopy for Testable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t initializeWithTake for Testable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithTake for Testable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t getEnumTagSinglePayload for Testable(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for Testable(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1B0F808E4);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for Testable()
{
  return __swift_instantiateGenericMetadata();
}

Swift::Int specialized RawRepresentable<>.hashValue.getter()
{
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t specialized RawRepresentable<>.hash(into:)()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t MachServiceName.rawValue.getter()
{
  unint64_t result = 0xD00000000000002CLL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000032;
      break;
    case 2:
      unint64_t result = 0xD000000000000027;
      break;
    default:
      return result;
  }
  return result;
}

CopresenceCore::MachServiceName_optional __swiftcall MachServiceName.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of MachServiceName.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  char v7 = 4;
  if (v5 < 4) {
    char v7 = v5;
  }
  char *v4 = v7;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MachServiceName(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MachServiceName()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MachServiceName()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MachServiceName()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

CopresenceCore::MachServiceName_optional protocol witness for RawRepresentable.init(rawValue:) in conformance MachServiceName(Swift::String *a1)
{
  return MachServiceName.init(rawValue:)(*a1);
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance MachServiceName@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = MachServiceName.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

NSXPCListener __swiftcall NSXPCListener.init(machServiceName:)(CopresenceCore::MachServiceName machServiceName)
{
  unint64_t v1 = 0xD00000000000002CLL;
  unint64_t v2 = 0x80000001B115A740;
  switch(*(unsigned char *)machServiceName)
  {
    case 1:
      unint64_t v1 = 0xD000000000000032;
      unint64_t v3 = "com.apple.group-activities.conversationmanagerhost";
      goto LABEL_5;
    case 2:
      unint64_t v1 = 0xD000000000000027;
      unint64_t v3 = "com.apple.SharePlay.GroupSessionService";
      goto LABEL_5;
    case 3:
      unint64_t v3 = "com.apple.SharePlay.NearbyInvitationsService";
LABEL_5:
      unint64_t v2 = (unint64_t)(v3 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  unint64_t v5 = (void *)MEMORY[0x1B3EA1B00](v1, v2);
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v4, sel_initWithMachServiceName_, v5);

  return (NSXPCListener)v6;
}

NSXPCConnection __swiftcall NSXPCConnection.init(machServiceName:)(CopresenceCore::MachServiceName machServiceName)
{
  unint64_t v1 = 0xD00000000000002CLL;
  unint64_t v2 = 0x80000001B115A740;
  switch(*(unsigned char *)machServiceName)
  {
    case 1:
      unint64_t v1 = 0xD000000000000032;
      unint64_t v3 = "com.apple.group-activities.conversationmanagerhost";
      goto LABEL_5;
    case 2:
      unint64_t v1 = 0xD000000000000027;
      unint64_t v3 = "com.apple.SharePlay.GroupSessionService";
      goto LABEL_5;
    case 3:
      unint64_t v3 = "com.apple.SharePlay.NearbyInvitationsService";
LABEL_5:
      unint64_t v2 = (unint64_t)(v3 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  unint64_t v5 = (void *)MEMORY[0x1B3EA1B00](v1, v2);
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v4, sel_initWithMachServiceName_options_, v5, 0);

  return (NSXPCConnection)v6;
}

unint64_t lazy protocol witness table accessor for type MachServiceName and conformance MachServiceName()
{
  unint64_t result = lazy protocol witness table cache variable for type MachServiceName and conformance MachServiceName;
  if (!lazy protocol witness table cache variable for type MachServiceName and conformance MachServiceName)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MachServiceName and conformance MachServiceName);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for MachServiceName(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B0F810C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MachServiceName()
{
  return &type metadata for MachServiceName;
}

id AddressableMember.handle.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore17AddressableMember_handle);
}

id AddressableMember.__allocating_init(handle:)(uint64_t a1)
{
  int v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR____TtC14CopresenceCore17AddressableMember_handle] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

id AddressableMember.init(handle:)(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR____TtC14CopresenceCore17AddressableMember_handle] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for AddressableMember();
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t type metadata accessor for AddressableMember()
{
  return self;
}

uint64_t AddressableMember.isEqual(_:)(uint64_t a1)
{
  outlined init with copy of Any?(a1, (uint64_t)v5);
  if (!v6)
  {
    outlined destroy of Any?((uint64_t)v5);
    goto LABEL_5;
  }
  type metadata accessor for AddressableMember();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    char v2 = 0;
    return v2 & 1;
  }
  type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for NSObject);
  id v1 = *(id *)&v4[OBJC_IVAR____TtC14CopresenceCore17AddressableMember_handle];
  char v2 = static NSObject.== infix(_:_:)();

  return v2 & 1;
}

uint64_t static AddressableMember.supportsSecureCoding.getter()
{
  return 1;
}

id AddressableMember.__allocating_init(coder:)(void *a1)
{
  char v2 = v1;
  id v4 = objc_allocWithZone(v2);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  objc_super v5 = (char *)v4;
  uint64_t v6 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v6)
  {
    *(void *)&v5[OBJC_IVAR____TtC14CopresenceCore17AddressableMember_handle] = v6;

    v9.receiver = v5;
    v9.super_class = v2;
    id v7 = objc_msgSendSuper2(&v9, sel_init);
  }
  else
  {

    swift_deallocPartialClassInstance();
    return 0;
  }
  return v7;
}

id AddressableMember.init(coder:)(void *a1)
{
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  objc_super v3 = v1;
  uint64_t v4 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v4)
  {
    *(void *)&v3[OBJC_IVAR____TtC14CopresenceCore17AddressableMember_handle] = v4;

    v7.receiver = v3;
    v7.super_class = (Class)type metadata accessor for AddressableMember();
    id v5 = objc_msgSendSuper2(&v7, sel_init);
  }
  else
  {

    type metadata accessor for AddressableMember();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v5;
}

Swift::Void __swiftcall AddressableMember.encode(with:)(NSCoder with)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC14CopresenceCore17AddressableMember_handle);
  id v4 = (id)MEMORY[0x1B3EA1B00](0x656C646E6168, 0xE600000000000000);
  [(objc_class *)with.super.isa encodeObject:v3 forKey:v4];
}

void AddressableMember.init()()
{
}

id AddressableMember.__deallocating_deinit()
{
  return AddressableMember.__deallocating_deinit(type metadata accessor for AddressableMember);
}

uint64_t AddressableMember.description.getter()
{
  swift_getObjectType();
  v1._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  id v2 = *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore17AddressableMember_handle);
  id v3 = objc_msgSend(v2, sel_description);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);

  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x3D656C646E616820;
  v8._object = (void *)0xE800000000000000;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 62;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  return 60;
}

uint64_t AccountMember.isLocalAccount.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14CopresenceCore13AccountMember_isLocalAccount);
}

id AccountMember.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id AccountMember.init()()
{
  v0[OBJC_IVAR____TtC14CopresenceCore13AccountMember_isLocalAccount] = 1;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AccountMember();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for AccountMember()
{
  return self;
}

uint64_t AccountMember.isEqual(_:)(uint64_t a1)
{
  outlined init with copy of Any?(a1, (uint64_t)v7);
  if (!v8)
  {
    outlined destroy of Any?((uint64_t)v7);
    goto LABEL_5;
  }
  type metadata accessor for AccountMember();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    char v4 = 0;
    return v4 & 1;
  }
  char v2 = *(unsigned char *)(v1 + OBJC_IVAR____TtC14CopresenceCore13AccountMember_isLocalAccount);
  char v3 = v6[OBJC_IVAR____TtC14CopresenceCore13AccountMember_isLocalAccount];

  char v4 = v2 ^ v3 ^ 1;
  return v4 & 1;
}

uint64_t @objc AddressableMember.isEqual(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_OWORD *))
{
  if (a3)
  {
    id v6 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    id v7 = a1;
  }
  char v8 = a4(v10);

  outlined destroy of Any?((uint64_t)v10);
  return v8 & 1;
}

uint64_t static AccountMember.supportsSecureCoding.getter()
{
  return 1;
}

id AccountMember.__allocating_init(coder:)(void *a1)
{
  char v3 = objc_allocWithZone(v1);
  char v4 = (void *)MEMORY[0x1B3EA1B00](0x416C61636F4C7369, 0xEE00746E756F6363);
  unsigned __int8 v5 = objc_msgSend(a1, sel_decodeBoolForKey_, v4);

  v3[OBJC_IVAR____TtC14CopresenceCore13AccountMember_isLocalAccount] = v5;
  v8.receiver = v3;
  v8.super_class = v1;
  id v6 = objc_msgSendSuper2(&v8, sel_init);

  return v6;
}

id AccountMember.init(coder:)(void *a1)
{
  char v3 = v1;
  char v4 = (void *)MEMORY[0x1B3EA1B00](0x416C61636F4C7369, 0xEE00746E756F6363);
  unsigned __int8 v5 = objc_msgSend(a1, sel_decodeBoolForKey_, v4);

  v3[OBJC_IVAR____TtC14CopresenceCore13AccountMember_isLocalAccount] = v5;
  v8.receiver = v3;
  v8.super_class = (Class)type metadata accessor for AccountMember();
  id v6 = objc_msgSendSuper2(&v8, sel_init);

  return v6;
}

Swift::Void __swiftcall AccountMember.encode(with:)(NSCoder with)
{
  uint64_t v3 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC14CopresenceCore13AccountMember_isLocalAccount);
  id v4 = (id)MEMORY[0x1B3EA1B00](0x416C61636F4C7369, 0xEE00746E756F6363);
  [(objc_class *)with.super.isa encodeBool:v3 forKey:v4];
}

id AccountMember.__deallocating_deinit()
{
  return AddressableMember.__deallocating_deinit(type metadata accessor for AccountMember);
}

id AddressableMember.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t instantiation function for generic protocol witness table for AddressableMember(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AddressableMember(a1, a2, a3, &lazy protocol witness table cache variable for type AddressableMember and conformance NSObject, (void (*)(void))type metadata accessor for AddressableMember, &lazy protocol witness table cache variable for type AddressableMember and conformance NSObject);
}

uint64_t instantiation function for generic protocol witness table for AccountMember(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AddressableMember(a1, a2, a3, &lazy protocol witness table cache variable for type AccountMember and conformance NSObject, (void (*)(void))type metadata accessor for AccountMember, &lazy protocol witness table cache variable for type AccountMember and conformance NSObject);
}

uint64_t instantiation function for generic protocol witness table for AddressableMember(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(void), unint64_t *a6)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type AddressableMember and conformance NSObject(a4, a5);
  uint64_t result = lazy protocol witness table accessor for type AddressableMember and conformance NSObject(a6, a5);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type AddressableMember and conformance NSObject(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for AddressableMember(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AddressableMember);
}

uint64_t dispatch thunk of AddressableMember.__allocating_init(handle:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of AddressableMember.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of AddressableMember.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t method lookup function for AccountMember(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AccountMember);
}

uint64_t dispatch thunk of AccountMember.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of AccountMember.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t specialized NSUserDefaults.get<A>(_:forKey:)()
{
  uint64_t v1 = (void *)MEMORY[0x1B3EA1B00]();
  id v2 = objc_msgSend(v0, sel_valueForKey_, v1);

  if (!v2) {
    return 2;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(v23, v24);
  outlined init with copy of Any((uint64_t)v24, (uint64_t)v23);
  uint64_t v3 = MEMORY[0x1E4FBB390];
  if (swift_dynamicCast())
  {
    uint64_t v4 = v22;
    if (v22 != 2) {
      goto LABEL_16;
    }
  }
  else
  {
    unsigned __int8 v22 = 2;
  }
  outlined init with copy of Any((uint64_t)v24, (uint64_t)v23);
  if (swift_dynamicCast())
  {
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    outlined consume of Data._Representation(v20[0], v20[1]);
    swift_release();
    uint64_t v4 = LOBYTE(v23[0]);
    unsigned __int8 v22 = v23[0];
    if (LOBYTE(v23[0]) != 2) {
      goto LABEL_16;
    }
    goto LABEL_9;
  }
  uint64_t v4 = v22;
  if (v22 == 2)
  {
LABEL_9:
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Log.default);
    outlined init with copy of Any((uint64_t)v24, (uint64_t)v23);
    id v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v21 = v9;
      *(_DWORD *)uint64_t v8 = 136315394;
      outlined init with copy of Any((uint64_t)v23, (uint64_t)v20);
      outlined init with copy of Any?((uint64_t)v20, (uint64_t)&v18);
      if (v19)
      {
        outlined init with take of Any(&v18, v17);
        outlined init with copy of Any((uint64_t)v17, (uint64_t)v16);
        uint64_t v10 = String.init<A>(reflecting:)();
        unint64_t v12 = v11;
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      }
      else
      {
        unint64_t v12 = 0xE300000000000000;
        uint64_t v10 = 7104878;
      }
      outlined destroy of Any?((uint64_t)v20);
      v20[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
      *(_WORD *)(v8 + 12) = 2080;
      v20[0] = v3;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bool.Type);
      uint64_t v13 = String.init<A>(reflecting:)();
      v20[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v6, v7, "Failed to cast value: %s to type: %s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v9, -1, -1);
      MEMORY[0x1B3EA39E0](v8, -1, -1);
    }
    else
    {

      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v24);
    return 2;
  }
LABEL_16:
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v24);
  return v4;
}

void *Signposts.defaultsSuiteName.unsafeMutableAddressor()
{
  return &static Signposts.defaultsSuiteName;
}

unint64_t static Signposts.defaultsSuiteName.getter()
{
  return 0xD000000000000019;
}

void one-time initialization function for userDefaults()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F1CB18]);
  uint64_t v1 = (void *)MEMORY[0x1B3EA1B00](0xD000000000000019, 0x80000001B115F120);
  id v2 = objc_msgSend(v0, sel_initWithSuiteName_, v1);

  if (!v2) {
    id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CB18]), sel_init);
  }
  static Signposts.userDefaults = (uint64_t)v2;
}

uint64_t *Signposts.userDefaults.unsafeMutableAddressor()
{
  if (one-time initialization token for userDefaults != -1) {
    swift_once();
  }
  return &static Signposts.userDefaults;
}

id static Signposts.userDefaults.getter()
{
  if (one-time initialization token for userDefaults != -1) {
    swift_once();
  }
  id v0 = (void *)static Signposts.userDefaults;
  return v0;
}

BOOL Signposts.UserDefaultsKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Signposts.UserDefaultsKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  return v3 != 0;
}

unint64_t Signposts.UserDefaultsKeys.rawValue.getter()
{
  return 0xD000000000000018;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Signposts.UserDefaultsKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Signposts.UserDefaultsKeys()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Signposts.UserDefaultsKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Signposts.UserDefaultsKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance Signposts.UserDefaultsKeys, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Signposts.UserDefaultsKeys(void *a1@<X8>)
{
  *a1 = 0xD000000000000018;
  a1[1] = 0x80000001B115A810;
}

const char *static Signposts.MessengerEvents.transportMessageSent.getter()
{
  return "transport-message-sent";
}

const char *static Signposts.MessengerEvents.transportMessageRecv.getter()
{
  return "transport-message-received";
}

const char *static Signposts.MessengerEvents.pluginAckRecv.getter()
{
  return "plugin-ack-received";
}

uint64_t one-time initialization function for messenger()
{
  uint64_t v0 = type metadata accessor for OSSignposter();
  __swift_allocate_value_buffer(v0, static Signposts.messenger);
  __swift_project_value_buffer(v0, (uint64_t)static Signposts.messenger);
  return closure #1 in variable initialization expression of static Signposts.messenger();
}

uint64_t closure #1 in variable initialization expression of static Signposts.messenger()
{
  if (one-time initialization token for userDefaults != -1) {
    swift_once();
  }
  if (specialized NSUserDefaults.get<A>(_:forKey:)())
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.default);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v7 = 0;
      _os_log_impl(&dword_1B0DF7000, v5, v6, "[Signposts] Messenger enabled", v7, 2u);
      MEMORY[0x1B3EA39E0](v7, -1, -1);
    }

    return MEMORY[0x1F41885B8](0xD000000000000028, 0x80000001B115F1A0, 0x65676E657373654DLL, 0xE900000000000072);
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v0 = type metadata accessor for Logger();
    __swift_project_value_buffer(v0, (uint64_t)static Log.default);
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v1, v2))
    {
      Swift::Int v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::Int v3 = 0;
      _os_log_impl(&dword_1B0DF7000, v1, v2, "[Signposts] Messenger disabled", v3, 2u);
      MEMORY[0x1B3EA39E0](v3, -1, -1);
    }

    return MEMORY[0x1F4188598]();
  }
}

uint64_t static Signposts.messenger.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for messenger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for OSSignposter();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static Signposts.messenger);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t static Signposts.messengerSignpostIdentifier(forPayload:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (one-time initialization token for messenger != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for OSSignposter();
  __swift_project_value_buffer(v6, (uint64_t)static Signposts.messenger);
  if (OSSignposter.isEnabled.getter())
  {
    outlined copy of Data._Representation(a1, a2);
    return specialized OSSignpostID.init<A, B>(hash:using:)(a1, a2, a3);
  }
  else
  {
    return OSSignpostID.init(_:)();
  }
}

uint64_t specialized OSSignpostID.init<A, B>(hash:using:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v19[3] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = type metadata accessor for Insecure.MD5();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Insecure.MD5Digest();
  uint64_t v18 = *(void *)(v10 - 8);
  uint64_t v11 = *(void *)(v18 + 64);
  MEMORY[0x1F4188790](v10);
  lazy protocol witness table accessor for type Insecure.MD5Digest and conformance Insecure.MD5Digest(&lazy protocol witness table cache variable for type Insecure.MD5Digest and conformance Insecure.MD5Digest, MEMORY[0x1E4F25200]);
  uint64_t v12 = dispatch thunk of static Digest.byteCount.getter();
  if ((unint64_t)(v12 - 0x1000000000000000) >> 61 != 7)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v12 < 8)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }
  uint64_t v17 = v7;
  lazy protocol witness table accessor for type Insecure.MD5Digest and conformance Insecure.MD5Digest(&lazy protocol witness table cache variable for type Insecure.MD5 and conformance Insecure.MD5, MEMORY[0x1E4F251D8]);
  dispatch thunk of HashFunction.init()();
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v16 = a3;
      if (a1 >> 32 < (int)a1) {
        goto LABEL_14;
      }
      unint64_t v15 = a2 & 0x3FFFFFFFFFFFFFFFLL;
      outlined copy of Data._Representation(a1, a2);
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a1, a1 >> 32);
      outlined consume of Data._Representation(a1, a2);
      break;
    case 2uLL:
      uint64_t v16 = a3;
      uint64_t v13 = *(void *)(a1 + 16);
      unint64_t v15 = *(void *)(a1 + 24);
      outlined copy of Data._Representation(a1, a2);
      swift_retain();
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v13, v15);
      swift_release();
      swift_release();
      goto LABEL_10;
    case 3uLL:
      memset(v19, 0, 14);
      goto LABEL_9;
    default:
      v19[0] = a1;
      LOWORD(v19[1]) = a2;
      BYTE2(v19[1]) = BYTE2(a2);
      BYTE3(v19[1]) = BYTE3(a2);
      BYTE4(v19[1]) = BYTE4(a2);
      BYTE5(v19[1]) = BYTE5(a2);
LABEL_9:
      dispatch thunk of HashFunction.update(bufferPointer:)();
LABEL_10:
      outlined consume of Data._Representation(a1, a2);
      break;
  }
  dispatch thunk of HashFunction.finalize()();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v18 + 8))((char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  OSSignpostID.init(_:)();
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t OSSignpostID.init<A, B>(hash:using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  v12[0] = a3;
  v12[3] = *MEMORY[0x1E4F143B8];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = (char *)v12 - v7;
  swift_getAssociatedConformanceWitness();
  uint64_t v9 = dispatch thunk of static Digest.byteCount.getter();
  if ((unint64_t)(v9 - 0x1000000000000000) >> 61 != 7)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  if (v9 < 8) {
    goto LABEL_5;
  }
  static HashFunction.hash<A>(data:)();
  _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v8, (uint64_t)closure #1 in OSSignpostID.init<A, B>(hash:using:), 0, AssociatedTypeWitness, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC538], MEMORY[0x1E4FBC278], v10);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  OSSignpostID.init(_:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
}

uint64_t *closure #1 in OSSignpostID.init<A, B>(hash:using:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3 = -1;
  if (result && (unint64_t)(a2 - (void)result + 7) >= 0xF) {
    uint64_t v3 = *result;
  }
  *a3 = v3;
  return result;
}

unint64_t lazy protocol witness table accessor for type Signposts.UserDefaultsKeys and conformance Signposts.UserDefaultsKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Signposts.UserDefaultsKeys and conformance Signposts.UserDefaultsKeys;
  if (!lazy protocol witness table cache variable for type Signposts.UserDefaultsKeys and conformance Signposts.UserDefaultsKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Signposts.UserDefaultsKeys and conformance Signposts.UserDefaultsKeys);
  }
  return result;
}

ValueMetadata *type metadata accessor for Signposts()
{
  return &type metadata for Signposts;
}

unsigned char *storeEnumTagSinglePayload for Signposts.UserDefaultsKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B0F83304);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for Signposts.UserDefaultsKeys()
{
  return &type metadata for Signposts.UserDefaultsKeys;
}

ValueMetadata *type metadata accessor for Signposts.MessengerEvents()
{
  return &type metadata for Signposts.MessengerEvents;
}

uint64_t lazy protocol witness table accessor for type Insecure.MD5Digest and conformance Insecure.MD5Digest(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

BOOL static BackgroundSessionManagerError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void BackgroundSessionManagerError.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int BackgroundSessionManagerError.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t BackgroundSessionManager.delegate.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_delegate;
  swift_beginAccess();
  return MEMORY[0x1B3EA3B30](v1);
}

uint64_t BackgroundSessionManager.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*BackgroundSessionManager.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  int v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1B3EA3B30](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return ActivitySession.sessionManager.modify;
}

uint64_t BackgroundSessionManager.sessions.getter()
{
  return ActivitySession.persistentSceneIdentifiers.getter();
}

uint64_t BackgroundSessionManager.sessions.setter(uint64_t a1)
{
  int v3 = (void *)(v1 + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_sessions);
  swift_beginAccess();
  *int v3 = a1;
  swift_bridgeObjectRelease();
  return BackgroundSessionManager.sessions.didset((uint64_t)&unk_1F09B40C0, (uint64_t)partial apply for closure #1 in BackgroundSessionManager.backgroundSessionDidUpdate(_:), (uint64_t)&block_descriptor_152);
}

uint64_t (*BackgroundSessionManager.sessions.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return BackgroundSessionManager.sessions.modify;
}

uint64_t BackgroundSessionManager.sessions.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return BackgroundSessionManager.sessions.didset((uint64_t)&unk_1F09B40C0, (uint64_t)partial apply for closure #1 in BackgroundSessionManager.backgroundSessionDidUpdate(_:), (uint64_t)&block_descriptor_152);
  }
  return result;
}

uint64_t BackgroundSessionManager.presenceSessions.getter()
{
  return ActivitySession.persistentSceneIdentifiers.getter();
}

uint64_t BackgroundSessionManager.presenceSessions.setter(uint64_t a1)
{
  int v3 = (void *)(v1 + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_presenceSessions);
  swift_beginAccess();
  *int v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*BackgroundSessionManager.presenceSessions.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t BackgroundSessionManager.mockIDSGroupSessionProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_mockIDSGroupSessionProvider;
  swift_beginAccess();
  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3, a1, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
}

uint64_t BackgroundSessionManager.mockIDSGroupSessionProvider.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_mockIDSGroupSessionProvider;
  swift_beginAccess();
  outlined assign with take of ActivitySession.DomainAssertionWrapper?(a1, v3, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
  return swift_endAccess();
}

uint64_t (*BackgroundSessionManager.mockIDSGroupSessionProvider.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

id BackgroundSessionManager.queue.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_queue);
}

uint64_t BackgroundSessionManager.serviceProvider.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_serviceProvider);
  swift_retain();
  return v1;
}

uint64_t BackgroundSessionManager.personalPresenceControllerProvider.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_personalPresenceControllerProvider);
  swift_retain();
  return v1;
}

uint64_t BackgroundSessionManager.presenceControllerProvider.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_presenceControllerProvider);
  swift_retain();
  return v1;
}

uint64_t BackgroundSessionManager.sessionSuspensionControllerProvider.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_sessionSuspensionControllerProvider);
  swift_retain();
  return v1;
}

id BackgroundSessionManager.__allocating_init(queue:featureFlags:serviceProvider:personalPresenceControllerProvider:presenceControllerProvider:sessionSuspensionControllerProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  id v18 = objc_allocWithZone(v10);
  return BackgroundSessionManager.init(queue:featureFlags:serviceProvider:personalPresenceControllerProvider:presenceControllerProvider:sessionSuspensionControllerProvider:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

id BackgroundSessionManager.init(queue:featureFlags:serviceProvider:personalPresenceControllerProvider:presenceControllerProvider:sessionSuspensionControllerProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)&v10[OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v18 = MEMORY[0x1E4FBC870];
  *(void *)&v10[OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_sessions] = MEMORY[0x1E4FBC870];
  *(void *)&v10[OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_presenceSessions] = v18;
  uint64_t v19 = &v10[OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_mockIDSGroupSessionProvider];
  *(_OWORD *)uint64_t v19 = 0u;
  *((_OWORD *)v19 + 1) = 0u;
  *((void *)v19 + 4) = 0;
  *(void *)&v10[OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_queue] = a1;
  *(void *)&v10[OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_featureFlags] = a2;
  uint64_t v20 = &v10[OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_serviceProvider];
  *(void *)uint64_t v20 = a3;
  *((void *)v20 + 1) = a4;
  uint64_t v21 = &v10[OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_personalPresenceControllerProvider];
  *(void *)uint64_t v21 = a5;
  *((void *)v21 + 1) = a6;
  unsigned __int8 v22 = &v10[OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_presenceControllerProvider];
  *(void *)unsigned __int8 v22 = a7;
  *((void *)v22 + 1) = a8;
  uint64_t v23 = &v10[OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_sessionSuspensionControllerProvider];
  *(void *)uint64_t v23 = a9;
  *((void *)v23 + 1) = a10;
  v26.receiver = v10;
  v26.super_class = (Class)type metadata accessor for BackgroundSessionManager();
  return objc_msgSendSuper2(&v26, sel_init);
}

uint64_t type metadata accessor for BackgroundSessionManager()
{
  return self;
}

uint64_t BackgroundSessionManager.__allocating_init(clientIdentifier:queue:)(unint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.BufferingPolicy);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AsyncSerialQueue();
  MEMORY[0x1F4188790](v13 - 8);
  unint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v35 = 0;
  unint64_t v36 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  id v33 = a3;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v35 = a1;
  unint64_t v36 = a2;
  v16._countAndFlagsBits = 0x43654D6F54654D2ELL;
  v16._object = (void *)0xEE006C656E6E6168;
  String.append(_:)(v16);
  unint64_t v17 = v35;
  unint64_t v18 = v36;
  LOBYTE(v35) = 1;
  unint64_t v36 = v17;
  unint64_t v37 = v18;
  unint64_t v38 = a1;
  unint64_t v39 = a2;
  id v19 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SKPresenceDataSource<ActivityListPresenceContext>));
  uint64_t v20 = specialized SKPresenceDataSource.init(presenceConfiguration:targetQueue:)((uint64_t)&v35, a3);
  type metadata accessor for PersonalPresenceController(0);
  uint64_t v21 = swift_allocObject();
  uint64_t v22 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v12, 1, 1, v22);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E4FBD028], v6);
  uint64_t v23 = v20;
  AsyncSerialQueue.init(priority:bufferingPolicy:)((uint64_t)v12, (uint64_t)v9, (uint64_t)v15);
  outlined init with take of AsyncSerialQueue((uint64_t)v15, v21 + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceController_workQueue);
  uint64_t v24 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type SKPresenceDataSource<ActivityListPresenceContext> and conformance SKPresenceDataSource<A>, (uint64_t *)&demangling cache variable for type metadata for SKPresenceDataSource<ActivityListPresenceContext>);
  uint64_t v25 = (char **)(v21 + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceController_personalPresenceDataSource);
  *uint64_t v25 = v23;
  v25[1] = (char *)v24;
  *(void *)(v21 + OBJC_IVAR____TtC14CopresenceCore26PersonalPresenceController_currentActivityIDs) = MEMORY[0x1E4FBC870];
  id v26 = objc_msgSend(objc_allocWithZone((Class)CPFeatureFlags), sel_init);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = 0u;
  *(_OWORD *)(v27 + 32) = 0u;
  *(void *)(v27 + 48) = 0;
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = a1;
  *(void *)(v28 + 24) = a2;
  uint64_t v29 = *(uint64_t (**)(id, id, void (*)(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X8>), uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t, void *(*)(uint64_t, void *), uint64_t, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X2>, uint64_t *@<X8>), void))(v34 + 256);
  swift_retain();
  swift_retain();
  uint64_t v30 = v29(v33, v26, partial apply for closure #1 in BackgroundSessionManager.init(clientIdentifier:queue:), v27, partial apply for closure #2 in BackgroundSessionManager.init(clientIdentifier:queue:), v21, partial apply for closure #3 in BackgroundSessionManager.init(clientIdentifier:queue:), v28, closure #4 in BackgroundSessionManager.init(clientIdentifier:queue:), 0);
  swift_release();
  swift_release();

  return v30;
}

uint64_t sub_1B0F84040()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  }
  return MEMORY[0x1F4186498](v0, 56, 7);
}

void closure #1 in BackgroundSessionManager.init(clientIdentifier:queue:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a3 + 16;
  swift_beginAccess();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v7, (uint64_t)&v12, (uint64_t *)&demangling cache variable for type metadata for IDSServiceProtocol?);
  if (v13) {
    goto LABEL_4;
  }
  outlined destroy of UUID?((uint64_t)&v12, (uint64_t *)&demangling cache variable for type metadata for IDSServiceProtocol?);
  id v8 = objc_allocWithZone(MEMORY[0x1E4F6AB90]);
  swift_bridgeObjectRetain();
  uint64_t v9 = (void *)MEMORY[0x1B3EA1B00](a1, a2);
  swift_bridgeObjectRelease();
  id v10 = objc_msgSend(v8, sel_initWithService_, v9);

  if (v10)
  {
    uint64_t v13 = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for IDSService);
    uint64_t v14 = &protocol witness table for IDSService;
    *(void *)&long long v12 = v10;
    outlined init with copy of UserNotificationCenter((uint64_t)&v12, (uint64_t)v11);
    swift_beginAccess();
    outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v11, v7, (uint64_t *)&demangling cache variable for type metadata for IDSServiceProtocol?);
LABEL_4:
    outlined init with take of BackgroundSessionManagerDataSource(&v12, a4);
    return;
  }
  __break(1u);
}

void partial apply for closure #1 in BackgroundSessionManager.init(clientIdentifier:queue:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  closure #1 in BackgroundSessionManager.init(clientIdentifier:queue:)(a1, a2, v3, a3);
}

uint64_t closure #2 in BackgroundSessionManager.init(clientIdentifier:queue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  id v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PresenceController();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  swift_retain();
  uint64_t v9 = specialized PresenceController.__allocating_init(activityID:personalPresenceController:)(v8, a3);
  swift_release();
  return v9;
}

uint64_t partial apply for closure #2 in BackgroundSessionManager.init(clientIdentifier:queue:)(uint64_t a1, uint64_t a2)
{
  return closure #2 in BackgroundSessionManager.init(clientIdentifier:queue:)(a1, a2, v2);
}

void *closure #3 in BackgroundSessionManager.init(clientIdentifier:queue:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  v13[0] = 0;
  uint64_t v14 = UUID.uuidString.getter();
  uint64_t v15 = v7;
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  id v8 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SKPresenceDataSource<EmptyPresenceContext>));
  swift_bridgeObjectRetain();
  id v9 = a2;
  id v10 = specialized SKPresenceDataSource.init(presenceConfiguration:targetQueue:)((uint64_t)v13, a2);
  type metadata accessor for PresenceController();
  uint64_t v11 = (void *)swift_allocObject();
  return specialized PresenceController.init<A>(dataSource:)(v10, v11);
}

uint64_t sub_1B0F84378()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void *partial apply for closure #3 in BackgroundSessionManager.init(clientIdentifier:queue:)(uint64_t a1, void *a2)
{
  return closure #3 in BackgroundSessionManager.init(clientIdentifier:queue:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t closure #4 in BackgroundSessionManager.init(clientIdentifier:queue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  id v8 = objc_allocWithZone(MEMORY[0x1E4F96418]);
  swift_unknownObjectRetain();
  id v9 = objc_msgSend(v8, sel_init);
  uint64_t v10 = type metadata accessor for SessionSuspensionController();
  uint64_t v11 = swift_allocObject();
  uint64_t result = specialized SessionSuspensionController.init(processIdentifier:suspensionTarget:processMonitor:)(a1, a2, a3, (uint64_t)v9, v11);
  a4[3] = v10;
  a4[4] = (uint64_t)&protocol witness table for SessionSuspensionController;
  *a4 = result;
  return result;
}

uint64_t BackgroundSessionManager.createPresenceController(for:queue:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x110))(a1 + OBJC_IVAR___CPBackgroundSessionCreationRequest_id, *(unsigned __int8 *)(a1 + OBJC_IVAR___CPBackgroundSessionCreationRequest_isCrossAccount), a2);
}

uint64_t BackgroundSessionManager.createPresenceController(for:isCrossAccount:queue:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v4 = &OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_presenceControllerProvider;
  if ((a2 & 1) == 0) {
    uint64_t v4 = &OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_personalPresenceControllerProvider;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + *v4))(a1, a3);
}

void BackgroundSessionManager.createService(for:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  if (a1 == 0xD000000000000022 && a2 == 0x80000001B115F1D0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    id v8 = *(void (**)(uint64_t))(v4 + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_serviceProvider);
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8(v9);
    swift_bridgeObjectRelease();
    return;
  }
  if (a1 == 0x6C7070612E6D6F63 && a2 == 0xEF7365746F4E2E65
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD000000000000015 && a2 == 0x80000001B115A660
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v10 = *(void (**)(unint64_t, unint64_t))(v4
                                                                    + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_serviceProvider);
    unint64_t v11 = 0xD00000000000001DLL;
    long long v12 = "com.apple.private.alloy.notes";
LABEL_14:
    v10(v11, (unint64_t)(v12 - 32) | 0x8000000000000000);
    return;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x80000001B115F200
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD000000000000012 && a2 == 0x80000001B115F220
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    (*(void (**)(unint64_t, unint64_t))(v4
                                                               + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_serviceProvider))(0xD000000000000022, 0x80000001B115F4C0);
    return;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x80000001B115F240
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD000000000000016 && a2 == 0x80000001B115F260
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD000000000000021 && a2 == 0x80000001B115F280
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD00000000000001BLL && a2 == 0x80000001B115F2B0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD000000000000017 && a2 == 0x80000001B115F2D0
    || ((char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == 0xD000000000000022)
      ? (BOOL v14 = a2 == 0x80000001B115F2F0)
      : (BOOL v14 = 0),
        !v14 ? (char v15 = 0) : (char v15 = 1),
        (v13 & 1) != 0
     || (v15 & 1) != 0
     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
     || a1 == 0xD00000000000001CLL && a2 == 0x80000001B115F320
     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
     || a1 == 0xD00000000000002DLL && a2 == 0x80000001B115F340
     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
     || a1 == 0xD000000000000027 && a2 == 0x80000001B115F370
     || ((char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == 0xD00000000000001BLL)
       ? (BOOL v17 = a2 == 0x80000001B115F3A0)
       : (BOOL v17 = 0),
         !v17 ? (char v18 = 0) : (char v18 = 1),
         (v16 & 1) != 0
      || (v18 & 1) != 0
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || a1 == 0xD000000000000018 && a2 == 0x80000001B115F3C0
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)))
  {
    uint64_t v10 = *(void (**)(unint64_t, unint64_t))(v4
                                                                    + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_serviceProvider);
    unint64_t v11 = 0xD00000000000002ELL;
    long long v12 = "com.apple.private.alloy.safari.groupactivities";
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x80000001B115F3E0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v10 = *(void (**)(unint64_t, unint64_t))(v4
                                                                    + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_serviceProvider);
    unint64_t v11 = 0xD000000000000032;
    long long v12 = "com.apple.private.alloy.groupRemoteControl.session";
    goto LABEL_14;
  }
  if (!objc_msgSend(*(id *)(v4 + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_featureFlags), sel_gameCenterFastSyncTransport))goto LABEL_73; {
  objc_allocWithZone(MEMORY[0x1E4F223C8]);
  }
  swift_bridgeObjectRetain();
  id v31 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(a1, a2, 1);
  if (!v31) {
    goto LABEL_73;
  }
  id v28 = objc_msgSend(v31, sel_entitlements);
  Swift::Bool v29 = LSPropertyList.containsAnyGameCenterEntitlements()();

  if (!v29)
  {

LABEL_73:
    if (_TUIsInternalInstall())
    {
      id v19 = objc_msgSend(self, sel_mainBundle);
      id v20 = objc_msgSend(v19, sel_bundleIdentifier);

      if (v20)
      {
        type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSUserDefaults);
        uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v23 = v22;

        static NSUserDefaults.classProtectedStorage(suiteName:)(v21, v23, v34);
        swift_bridgeObjectRelease();
        uint64_t v24 = v35;
        uint64_t v25 = v36;
        __swift_project_boxed_opaque_existential_1(v34, v35);
        (*(void (**)(uint64_t *__return_ptr, void, unint64_t, unint64_t, void, void, void, uint64_t, uint64_t))(v25 + 32))(&v32, MEMORY[0x1E4FBB1A0], 0xD000000000000013, 0x80000001B115F400, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB1D8], MEMORY[0x1E4FBB1A8], v24, v25);
        uint64_t v26 = v33;
        if (v33)
        {
          uint64_t v27 = v32;
        }
        else
        {
          uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v26 = v30;
        }
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v34);
        (*(void (**)(uint64_t, uint64_t))(v4
                                                 + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_serviceProvider))(v27, v26);
        swift_bridgeObjectRelease();
      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      *(void *)(a3 + 32) = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
    }
    return;
  }
  (*(void (**)(unint64_t, unint64_t))(v4
                                                             + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_serviceProvider))(0xD000000000000027, 0x80000001B115F420);
}

uint64_t BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:)(void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v38 = a2;
  uint64_t v39 = a5;
  int v40 = a4;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  long long v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v43 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  unint64_t v42 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.service);
  id v16 = a1;
  BOOL v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v35 = a3;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v36 = v10;
    id v20 = (uint8_t *)v19;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v37 = v9;
    uint64_t v33 = (void *)v21;
    *(_DWORD *)id v20 = 138412290;
    aBlock[0] = v16;
    id v22 = v16;
    uint64_t v34 = a6;
    id v23 = v22;
    a3 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v24 = v33;
    *uint64_t v33 = v16;

    a6 = v34;
    _os_log_impl(&dword_1B0DF7000, v17, v18, "Request to create presenceSession with request: %@", v20, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    uint64_t v9 = v37;
    MEMORY[0x1B3EA39E0](v24, -1, -1);
    uint64_t v25 = v20;
    uint64_t v10 = v36;
    MEMORY[0x1B3EA39E0](v25, -1, -1);
  }
  else
  {
  }
  uint64_t v26 = v41;
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = v26;
  *(void *)(v27 + 24) = v16;
  *(void *)(v27 + 32) = v39;
  *(void *)(v27 + 40) = a6;
  *(void *)(v27 + 48) = v38;
  *(void *)(v27 + 56) = a3;
  *(_DWORD *)(v27 + 64) = v40;
  aBlock[4] = partial apply for closure #1 in BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:);
  aBlock[5] = v27;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_12;
  id v28 = _Block_copy(aBlock);
  id v29 = v16;
  id v30 = v26;
  swift_retain();
  swift_bridgeObjectRetain();
  id v31 = v42;
  static DispatchQoS.unspecified.getter();
  uint64_t v44 = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v31, v12, v28);
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v31, v13);
  return swift_release();
}

void closure #1 in BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:)(void *a1, void *a2, void (**a3)(unint64_t, char *, uint64_t), uint64_t a4, char *a5, uint64_t *a6, unsigned int a7)
{
  void (*v74)(void *__return_ptr, void, void, void);
  char *v75;
  uint64_t v76;
  id v77;
  void *v78;
  objc_class *v79;
  char *v80;
  id v81;
  id v82;
  void *v83;
  unsigned char *v84;
  void *v85;
  unsigned char *v86;
  uint64_t v87;
  unsigned __int8 *v88;
  unint64_t v89;
  unsigned __int8 *v90;
  NSObject *v91;
  os_log_type_t v92;
  uint64_t v93;
  void *v94;
  void (**v95)(unint64_t, char *, uint64_t);
  unsigned __int8 *v96;
  uint64_t v97;
  void *v98;
  unsigned char *v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  unsigned int v105;
  unsigned __int8 *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  void (**v112)(unint64_t, char *, uint64_t);
  objc_super v113;
  id v114[5];
  long long v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118[2];

  int v105 = a7;
  unint64_t v110 = a5;
  uint64_t v111 = a4;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v11 - 8);
  unint64_t v109 = (uint64_t)&v100 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PresenceHostSession.State, Never>>);
  int v106 = *(unsigned __int8 **)(v107 - 8);
  uint64_t v13 = *((void *)v106 + 8);
  uint64_t v14 = MEMORY[0x1F4188790](v107);
  uint64_t v104 = (char *)&v100 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  id v16 = (char *)&v100 - v15;
  uint64_t v103 = type metadata accessor for UUID();
  uint64_t v102 = *(void *)(v103 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v103);
  uint64_t v19 = (char *)&v100 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v20 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v21 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0xD0))(v17);
  id v22 = a2;
  specialized Sequence.first(where:)(v21);
  uint64_t v24 = v23;

  swift_bridgeObjectRelease();
  uint64_t v112 = a3;
  uint64_t v108 = v16;
  if (v24)
  {
    unint64_t v101 = a6;
    if (one-time initialization token for service != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Log.service);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      id v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v28 = 0;
      _os_log_impl(&dword_1B0DF7000, v26, v27, "Found existing presence session.", v28, 2u);
      MEMORY[0x1B3EA39E0](v28, -1, -1);
    }

    id v29 = *(uint64_t (**)(void))((*v20 & *v24) + 0xB8);
    if (v29() < 3u)
    {
      id v30 = v24;
      id v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc();
        uint64_t v34 = swift_slowAlloc();
        v118[0] = v34;
        *(_DWORD *)uint64_t v33 = 136315138;
        LOBYTE(v115) = v29();
        uint64_t v35 = String.init<A>(reflecting:)();
        *(void *)&uint64_t v115 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, v118);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1B0DF7000, v31, v32, "Found existing presence session. Failing for duplicate session creation request. existingSessionState: %s", v33, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v34, -1, -1);
        MEMORY[0x1B3EA39E0](v33, -1, -1);
      }
      else
      {
      }
      lazy protocol witness table accessor for type BackgroundSessionManagerError and conformance BackgroundSessionManagerError();
      uint64_t v83 = (void *)swift_allocError();
      *uint64_t v84 = 4;
      ((void (*)(void, void *))v112)(0, v83);

      return;
    }
    uint64_t v37 = (void (*)(void, void))(*(uint64_t (**)(uint64_t *))((*v20 & *a1) + 0xE0))(v118);

    v37(v118, 0);
    a3 = v112;
    id v16 = v108;
    a6 = v101;
  }
  (*(void (**)(long long *__return_ptr, char *, uint64_t *))((*v20 & *a1) + 0x118))(&v115, v110, (uint64_t *)a6);
  if (v116)
  {
    outlined init with take of BackgroundSessionManagerDataSource(&v115, (uint64_t)v118);
    uint64_t v38 = v22[OBJC_IVAR___CPPresenceSessionCreationRequest_isCrossAccount];
    outlined init with copy of UserNotificationCenter((uint64_t)v118, (uint64_t)&v115);
    if (v38 == 1)
    {
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v115);
    }
    else
    {
      unint64_t v101 = a6;
      uint64_t v47 = v16;
      uint64_t v48 = v116;
      uint64_t v49 = v117;
      __swift_project_boxed_opaque_existential_1(&v115, v116);
      unint64_t v50 = (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 16))(v48, v49);
      if (!v50)
      {
        __break(1u);
        return;
      }
      if (v50 >> 62) {
        uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
      }
      else {
        uint64_t v51 = *(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      id v16 = v47;
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v115);
      int v52 = v112;
      if (v51 < 1)
      {
        if (one-time initialization token for service != -1) {
          swift_once();
        }
        uint64_t v87 = type metadata accessor for Logger();
        __swift_project_value_buffer(v87, (uint64_t)static Log.service);
        uint64_t v88 = v22;
        int v89 = (unint64_t)v101;
        swift_bridgeObjectRetain_n();
        uint64_t v90 = v88;
        size_t v91 = Logger.logObject.getter();
        uint64_t v92 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v91, v92))
        {
          uint64_t v93 = swift_slowAlloc();
          uint64_t v94 = (void *)swift_slowAlloc();
          unint64_t v109 = swift_slowAlloc();
          *(void *)&uint64_t v115 = v109;
          *(_DWORD *)uint64_t v93 = 136315394;
          swift_bridgeObjectRetain();
          v114[0] = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v110, v89, (uint64_t *)&v115);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v93 + 12) = 2112;
          v114[0] = v90;
          unint64_t v95 = v52;
          uint64_t v96 = v90;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v94 = v90;

          int v52 = v95;
          _os_log_impl(&dword_1B0DF7000, v91, v92, "Ignoring uninhabited session for bundle identifier: %s due to the request not having any collaborators: %@", (uint8_t *)v93, 0x16u);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v94, -1, -1);
          unint64_t v97 = v109;
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v97, -1, -1);
          MEMORY[0x1B3EA39E0](v93, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }
        lazy protocol witness table accessor for type BackgroundSessionManagerError and conformance BackgroundSessionManagerError();
        uint64_t v98 = (void *)swift_allocError();
        *uint64_t v99 = 7;
        ((void (*)(void, void *))v52)(0, v98);

        goto LABEL_22;
      }
    }
    long long v53 = &v22[OBJC_IVAR___CPPresenceSessionCreationRequest_id];
    long long v54 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v55 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x110))(&v22[OBJC_IVAR___CPPresenceSessionCreationRequest_id], v38, *(void *)((char *)a1 + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_queue));
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v102 + 16))(v19, v53, v103);
    id v56 = objc_allocWithZone((Class)type metadata accessor for PresenceHostSession(0));
    swift_retain();
    uint64_t v103 = v55;
    uint64_t v57 = PresenceHostSession.init(id:presenceController:)(v19, v55);
    uint64_t v58 = *(uint64_t (**)(void))((*v54 & *a1) + 0xE0);
    uint64_t v59 = v57;
    uint64_t v60 = (uint64_t (*)(void, void))v58(&v115);
    specialized Set._Variant.insert(_:)(v114, v59);

    uint64_t v61 = v60(&v115, 0);
    long long v62 = *(uint64_t (**)(void))((*v54 & *(void *)v59) + 0xD0);
    unint64_t v110 = v59;
    *(void *)&uint64_t v115 = v62(v61);
    uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<PresenceHostSession.State, Never>);
    uint64_t v64 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<PresenceHostSession.State, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<PresenceHostSession.State, Never>);
    MEMORY[0x1B3EA1110](v63, v64);
    swift_release();
    uint64_t v65 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v109, 1, 1, v65);
    uint64_t v66 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v67 = swift_allocObject();
    swift_unknownObjectWeakInit();
    a3 = (void (**)(unint64_t, char *, uint64_t))v106;
    uint64_t v68 = v104;
    uint64_t v69 = v107;
    (*((void (**)(char *, char *, uint64_t))v106 + 2))(v104, v16, v107);
    unint64_t v70 = (*((unsigned __int8 *)a3 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)a3 + 80);
    unint64_t v71 = (v13 + v70 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v72 = swift_allocObject();
    *(void *)(v72 + 16) = 0;
    *(void *)(v72 + 24) = 0;
    a3[4](v72 + v70, v68, v69);
    *(void *)(v72 + v71) = v66;
    *(void *)(v72 + ((v71 + 15) & 0xFFFFFFFFFFFFFFF8)) = v67;
    uint64_t v73 = v109;
    _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v109, (uint64_t)&async function pointer to partial apply for closure #2 in closure #1 in BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:), v72);
    swift_release();
    outlined destroy of UUID?(v73, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    uint64_t v74 = *(void (**)(void *__return_ptr, void, void, void))((char *)a1
                                                                              + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_sessionSuspensionControllerProvider);
    unint64_t v75 = v110;
    v74(&v115, v105, v75, &protocol witness table for PresenceHostSession);

    uint64_t v76 = (uint64_t)&v75[OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_sessionSuspensionController];
    swift_beginAccess();
    a6 = &demangling cache variable for type metadata for SessionSuspensionControllerProtocol?;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v76, (uint64_t)v114, &demangling cache variable for type metadata for SessionSuspensionControllerProtocol?);
    uint64_t v77 = v114[3];
    outlined destroy of UUID?((uint64_t)v114, &demangling cache variable for type metadata for SessionSuspensionControllerProtocol?);
    if (!v77)
    {
      outlined init with copy of UserNotificationCenter((uint64_t)&v115, (uint64_t)v114);
      swift_beginAccess();
      outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v114, v76, &demangling cache variable for type metadata for SessionSuspensionControllerProtocol?);
      swift_endAccess();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v115);
      uint64_t v78 = *(void **)&v75[OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_endpoint];
      unint64_t v79 = (objc_class *)type metadata accessor for PresenceSessionConnectionInfo();
      uint64_t v80 = (char *)objc_allocWithZone(v79);
      *(void *)&v80[OBJC_IVAR____TtC14CopresenceCore29PresenceSessionConnectionInfo_endpoint] = v78;
      v113.receiver = v80;
      v113.super_class = v79;
      unint64_t v81 = v78;
      uint64_t v82 = objc_msgSendSuper2(&v113, sel_init);
      ((void (*)(id, void))v112)(v82, 0);

      swift_release();
      ((void (*)(char *, uint64_t))a3[1])(v108, v69);
LABEL_22:
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v118);
      return;
    }
    __break(1u);
    goto LABEL_34;
  }
  outlined destroy of UUID?((uint64_t)&v115, (uint64_t *)&demangling cache variable for type metadata for IDSServiceProtocol?);
  if (one-time initialization token for service != -1) {
LABEL_34:
  }
    swift_once();
  uint64_t v39 = type metadata accessor for Logger();
  __swift_project_value_buffer(v39, (uint64_t)static Log.service);
  swift_bridgeObjectRetain_n();
  int v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v40, v41))
  {
    unint64_t v42 = (uint8_t *)swift_slowAlloc();
    uint64_t v43 = (uint64_t)a6;
    uint64_t v44 = swift_slowAlloc();
    *(void *)&uint64_t v115 = v44;
    *(_DWORD *)unint64_t v42 = 136315138;
    v118[0] = (uint64_t)v110;
    v118[1] = v43;
    swift_bridgeObjectRetain();
    uint64_t v45 = String.init<A>(reflecting:)();
    v118[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, (uint64_t *)&v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v40, v41, "Unknown service for bundle identifier: %s", v42, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v44, -1, -1);
    MEMORY[0x1B3EA39E0](v42, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  lazy protocol witness table accessor for type BackgroundSessionManagerError and conformance BackgroundSessionManagerError();
  uint64_t v85 = (void *)swift_allocError();
  *uint64_t v86 = 2;
  ((void (*)(void, void *))a3)(0, v85);
}

uint64_t closure #2 in closure #1 in BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[17] = a5;
  v6[18] = a6;
  v6[16] = a4;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  v6[19] = v7;
  v6[20] = *(void *)(v7 - 8);
  v6[21] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DispatchQoS();
  v6[22] = v8;
  v6[23] = *(void *)(v8 - 8);
  v6[24] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PresenceHostSession.State, Never>>.Iterator);
  v6[25] = v9;
  v6[26] = *(void *)(v9 - 8);
  v6[27] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #2 in closure #1 in BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:), 0, 0);
}

uint64_t closure #2 in closure #1 in BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:)()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PresenceHostSession.State, Never>>);
  AsyncPublisher.makeAsyncIterator()();
  swift_beginAccess();
  swift_beginAccess();
  uint64_t v1 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<PresenceHostSession.State, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PresenceHostSession.State, Never>>.Iterator);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 224) = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #2 in closure #1 in BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:);
  uint64_t v3 = *(void *)(v0 + 200);
  return MEMORY[0x1F4187C78](v0 + 240, v3, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 232) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #2 in closure #1 in BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:);
  }
  else {
    uint64_t v2 = closure #2 in closure #1 in BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;

  *(unsigned char *)(v0 + 241) = *(unsigned char *)(v0 + 240);
  return MEMORY[0x1F4188298](closure #2 in closure #1 in BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t (*v23)(void);
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (*(unsigned char *)(v0 + 241) != 5)
  {
    uint64_t v1 = (void *)MEMORY[0x1B3EA3B30](*(void *)(v0 + 136) + 16);
    if (v1)
    {
      uint64_t v2 = v1;
      if (*(unsigned char *)(v0 + 241) != 4)
      {

        goto LABEL_11;
      }
      if (one-time initialization token for service != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for Logger();
      __swift_project_value_buffer(v3, (uint64_t)static Log.service);
      uint64_t v4 = Logger.logObject.getter();
      uint64_t v5 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v6 = 0;
        _os_log_impl(&dword_1B0DF7000, v4, v5, "PresenceSession invalidated. Removing from list.", v6, 2u);
        MEMORY[0x1B3EA39E0](v6, -1, -1);
      }
      uint64_t v7 = *(void *)(v0 + 144);

      uint64_t v8 = MEMORY[0x1B3EA3B30](v7 + 16);
      if (v8)
      {
        uint64_t v9 = (void *)v8;
        uint64_t v10 = *(void *)(v0 + 192);
        uint64_t v11 = *(void *)(v0 + 168);
        uint64_t v26 = *(void *)(v0 + 184);
        os_log_type_t v27 = *(void *)(v0 + 176);
        uint64_t v13 = *(void *)(v0 + 152);
        uint64_t v12 = *(void *)(v0 + 160);
        uint64_t v14 = swift_allocObject();
        *(void *)(v14 + 16) = v9;
        *(void *)(v14 + 24) = v2;
        *(void *)(v0 + 48) = partial apply for closure #1 in closure #2 in closure #1 in BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:);
        *(void *)(v0 + 56) = v14;
        *(void *)(v0 + 16) = MEMORY[0x1E4F143A8];
        *(void *)(v0 + 24) = 1107296256;
        *(void *)(v0 + 32) = thunk for @escaping @callee_guaranteed () -> ();
        *(void *)(v0 + 40) = &block_descriptor_143;
        uint64_t v15 = _Block_copy((const void *)(v0 + 16));
        id v16 = v9;
        uint64_t v25 = v2;
        static DispatchQoS.unspecified.getter();
        *(void *)(v0 + 120) = MEMORY[0x1E4FBC860];
        _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
        dispatch thunk of SetAlgebra.init<A>(_:)();
        MEMORY[0x1B3EA2200](0, v10, v11, v15);
        _Block_release(v15);

        (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
        (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v10, v27);

        swift_release();
LABEL_11:
        uint64_t v17 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<PresenceHostSession.State, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PresenceHostSession.State, Never>>.Iterator);
        uint64_t v18 = (void *)swift_task_alloc();
        *(void *)(v0 + 224) = v18;
        *uint64_t v18 = v0;
        v18[1] = closure #2 in closure #1 in BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:);
        uint64_t v19 = *(void *)(v0 + 200);
        return MEMORY[0x1F4187C78](v0 + 240, v19, v17);
      }
      id v20 = Logger.logObject.getter();
      uint64_t v21 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v20, v21))
      {
        id v22 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v22 = 0;
        _os_log_impl(&dword_1B0DF7000, v20, v21, "Lost reference to presenceSession in state observer.", v22, 2u);
        MEMORY[0x1B3EA39E0](v22, -1, -1);
      }
    }
  }
  (*(void (**)(void, void))(*(void *)(v0 + 208) + 8))(*(void *)(v0 + 216), *(void *)(v0 + 200));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v23 = *(uint64_t (**)(void))(v0 + 8);
  return v23();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  *(void *)(v0 + 112) = *(void *)(v0 + 232);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v1 = MEMORY[0x1E4FBC248];
  uint64_t v2 = swift_dynamicCast();
  uint64_t v3 = MEMORY[0x1E4FBC278];
  return MEMORY[0x1F41868E8](v2, v1, v3);
}

void closure #1 in closure #2 in closure #1 in BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:)(void *a1, void *a2)
{
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.service);
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    v30[0] = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    type metadata accessor for PresenceHostSession(0);
    id v10 = v5;
    uint64_t v11 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v6, v7, "Removing presenceSession %s from presenceSessions.", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v9, -1, -1);
    MEMORY[0x1B3EA39E0](v8, -1, -1);
  }
  else
  {
  }
  uint64_t v13 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v14 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))((*MEMORY[0x1E4FBC8C8] & *a2)
                                                                                     + 0xE0))(v30);
  uint64_t v15 = (void *)specialized Set._Variant.remove(_:)(v5);
  v14(v30, 0);

  if (!v15)
  {
    id v16 = v5;
    uint64_t v17 = a2;
    id v18 = v16;
    uint64_t v19 = v17;
    id v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      v30[0] = v23;
      *(_DWORD *)uint64_t v22 = 136315394;
      type metadata accessor for PresenceHostSession(0);
      id v24 = v18;
      uint64_t v25 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      uint64_t v27 = swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2080;
      (*(void (**)(uint64_t))((*v13 & *v19) + 0xD0))(v27);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<PresenceHostSession>);
      uint64_t v28 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v20, v21, "Failed to remove presenceSession %s, session was, somehow, already removed. sessions: %s", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v23, -1, -1);
      MEMORY[0x1B3EA39E0](v22, -1, -1);
    }
    else
    {
    }
  }
}

void BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:)(void *a1, uint64_t a2, uint64_t a3, int a4, void (*a5)(void), uint64_t a6)
{
  os_log_type_t v7 = v6;
  uint64_t v109 = a6;
  uint64_t v108 = a5;
  int v98 = a4;
  uint64_t v104 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v103 = *(void *)(v104 - 8);
  MEMORY[0x1F4188790](v104);
  unint64_t v101 = (char *)&v97 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = type metadata accessor for DispatchQoS();
  uint64_t v100 = *(void *)(v102 - 8);
  MEMORY[0x1F4188790](v102);
  uint64_t v99 = (char *)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = __swift_project_value_buffer(v13, (uint64_t)static Log.service);
  uint64_t v15 = a1;
  uint64_t v106 = v14;
  id v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  unint64_t v110 = v7;
  if (v18)
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v107 = a2;
    uint64_t v21 = v20;
    *(void *)&long long aBlock = v20;
    *(_DWORD *)uint64_t v19 = 136315138;
    v122[0] = (uint64_t)v15;
    type metadata accessor for BackgroundSessionCreationRequest();
    uint64_t v22 = v15;
    uint64_t v23 = String.init<A>(reflecting:)();
    v122[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    os_log_type_t v7 = v110;
    _os_log_impl(&dword_1B0DF7000, v16, v17, "Request to begin: %s", v19, 0xCu);
    swift_arrayDestroy();
    uint64_t v25 = v21;
    a2 = v107;
    MEMORY[0x1B3EA39E0](v25, -1, -1);
    MEMORY[0x1B3EA39E0](v19, -1, -1);
  }
  else
  {
  }
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & *v7) + 0x118))(&aBlock, a2, a3);
  if (v115)
  {
    uint64_t v97 = a3;
    outlined init with take of BackgroundSessionManagerDataSource(&aBlock, (uint64_t)v122);
    int v105 = v15;
    uint64_t v26 = *(void *)&v15[OBJC_IVAR___CPBackgroundSessionCreationRequest_members];
    uint64_t v27 = (void *)(v26 & 0xC000000000000001);
    if ((v26 & 0xC000000000000001) != 0)
    {
      uint64_t v28 = v26 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      uint64_t v29 = __CocoaSet.count.getter();
      if (v29)
      {
        uint64_t v30 = v29;
        unint64_t v121 = MEMORY[0x1E4FBC860];
        specialized ContiguousArray.reserveCapacity(_:)();
        *(void *)&long long v118 = __CocoaSet.startIndex.getter();
        *((void *)&v118 + 1) = v31;
        char v119 = 1;
        if ((v30 & 0x8000000000000000) == 0)
        {
          uint64_t v107 = a2;
          goto LABEL_15;
        }
        __break(1u);
        goto LABEL_52;
      }
    }
    else
    {
      uint64_t v30 = *(void *)(v26 + 16);
      swift_bridgeObjectRetain();
      if (v30)
      {
        uint64_t v107 = a2;
        unint64_t v121 = MEMORY[0x1E4FBC860];
        specialized ContiguousArray.reserveCapacity(_:)();
        *(void *)&long long v118 = specialized _NativeSet.startIndex.getter(v26);
        *((void *)&v118 + 1) = v38;
        char v119 = v39 & 1;
        uint64_t v28 = v26 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
        if (v26 < 0) {
          uint64_t v40 = v26;
        }
        else {
          uint64_t v40 = v28;
        }
        uint64_t v112 = v40;
        os_log_type_t v41 = (unint64_t *)&lazy cache variable for type metadata for TUHandle;
        uint64_t v111 = v26;
        while (1)
        {
          while (1)
          {
            specialized Set.subscript.getter(v118, *((uint64_t *)&v118 + 1), v119, v26, v41);
            uint64_t v52 = v51;
            long long v53 = (objc_class *)type metadata accessor for AddressableMember();
            long long v54 = (char *)objc_allocWithZone(v53);
            *(void *)&v54[OBJC_IVAR____TtC14CopresenceCore17AddressableMember_handle] = v52;
            v120.receiver = v54;
            v120.super_class = v53;
            objc_msgSendSuper2(&v120, sel_init);
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            if (v27) {
              break;
            }
            long long v42 = v118;
            char v43 = v119;
            int64_t v44 = specialized _NativeSet.index(after:)(v118, SDWORD2(v118), v119, v26);
            uint64_t v45 = v41;
            uint64_t v47 = v46;
            char v49 = v48;
            outlined consume of Set<AddressableMember>.Index._Variant(v42, *((uint64_t *)&v42 + 1), v43);
            *(void *)&long long v118 = v44;
            *((void *)&v118 + 1) = v47;
            os_log_type_t v41 = v45;
            char v50 = v49 & 1;
            uint64_t v27 = 0;
            uint64_t v26 = v111;
            char v119 = v50;
            if (!--v30) {
              goto LABEL_25;
            }
          }
          if ((v119 & 1) == 0) {
            break;
          }
          if (__CocoaSet.Index.handleBitPattern.getter()) {
            swift_isUniquelyReferenced_nonNull_native();
          }
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<TUHandle>.Index);
          uint64_t v55 = (void (*)(long long *, void))Set.Index._asCocoa.modify();
          __CocoaSet.formIndex(after:isUnique:)();
          v55(&aBlock, 0);
          if (!--v30)
          {
LABEL_25:
            outlined consume of Set<AddressableMember>.Index._Variant(v118, *((uint64_t *)&v118 + 1), v119);
            unint64_t v56 = v121;
            swift_bridgeObjectRelease();
            a2 = v107;
            goto LABEL_27;
          }
        }
        __break(1u);
        goto LABEL_54;
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v56 = MEMORY[0x1E4FBC860];
LABEL_27:
    uint64_t v30 = specialized Set.init<A>(_:)(v56);
    swift_bridgeObjectRelease();
    if ((v30 & 0xC000000000000001) != 0)
    {
      uint64_t v57 = __CocoaSet.count.getter();
      if (v27)
      {
LABEL_29:
        uint64_t v58 = __CocoaSet.count.getter();
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v57 = *(void *)(v30 + 16);
      if (v27) {
        goto LABEL_29;
      }
    }
    uint64_t v58 = *(void *)(v26 + 16);
LABEL_32:
    uint64_t v27 = v110;
    if (v57 != v58)
    {
      uint64_t v60 = v105;
      swift_bridgeObjectRetain();
      uint64_t v61 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v61, v62))
      {
        uint64_t v63 = swift_slowAlloc();
        uint64_t v64 = swift_slowAlloc();
        *(void *)&long long aBlock = v64;
        *(_DWORD *)uint64_t v63 = 136315394;
        *(void *)&long long v118 = v26;
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<TUHandle>);
        uint64_t v65 = String.init<A>(reflecting:)();
        *(void *)&long long v118 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v66, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        *(_WORD *)(v63 + 12) = 2080;
        *(void *)&long long v118 = v30;
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<AddressableMember>);
        uint64_t v67 = String.init<A>(reflecting:)();
        *(void *)&long long v118 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B0DF7000, v61, v62, "Error converting members: %s to %s", (uint8_t *)v63, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v64, -1, -1);
        MEMORY[0x1B3EA39E0](v63, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }

      lazy protocol witness table accessor for type BackgroundSessionManagerError and conformance BackgroundSessionManagerError();
      uint64_t v85 = (void *)swift_allocError();
      *uint64_t v86 = 6;
      goto LABEL_46;
    }
    int v59 = v105[OBJC_IVAR___CPBackgroundSessionCreationRequest_isCrossAccount];
    outlined init with copy of UserNotificationCenter((uint64_t)v122, (uint64_t)&aBlock);
    if (v59 == 1)
    {
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&aBlock);
      uint64_t v26 = v97;
LABEL_43:
      outlined init with copy of UserNotificationCenter((uint64_t)v122, (uint64_t)&v118);
      uint64_t v76 = swift_allocObject();
      id v77 = v105;
      *(void *)(v76 + 16) = v27;
      *(void *)(v76 + 24) = v77;
      *(void *)(v76 + 32) = a2;
      *(void *)(v76 + 40) = v26;
      *(void *)(v76 + 48) = v30;
      outlined init with take of BackgroundSessionManagerDataSource(&v118, v76 + 56);
      uint64_t v78 = v109;
      *(void *)(v76 + 96) = v108;
      *(void *)(v76 + 104) = v78;
      *(_DWORD *)(v76 + 112) = v98;
      uint64_t v116 = partial apply for closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:);
      uint64_t v117 = v76;
      *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
      *((void *)&aBlock + 1) = 1107296256;
      unint64_t v114 = thunk for @escaping @callee_guaranteed () -> ();
      uint64_t v115 = &block_descriptor_12_0;
      unint64_t v79 = _Block_copy(&aBlock);
      id v80 = v77;
      id v81 = v27;
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v82 = v99;
      static DispatchQoS.unspecified.getter();
      unint64_t v121 = MEMORY[0x1E4FBC860];
      _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      uint64_t v83 = v101;
      uint64_t v84 = v104;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x1B3EA2200](0, v82, v83, v79);
      _Block_release(v79);
      (*(void (**)(char *, uint64_t))(v103 + 8))(v83, v84);
      (*(void (**)(char *, uint64_t))(v100 + 8))(v82, v102);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v122);
      swift_release();
      return;
    }
    uint64_t v72 = v115;
    uint64_t v73 = v116;
    __swift_project_boxed_opaque_existential_1(&aBlock, (uint64_t)v115);
    unint64_t v74 = (*((uint64_t (**)(void *, uint64_t (*)()))v73 + 2))(v72, v73);
    uint64_t v26 = v97;
    if (!v74)
    {
LABEL_54:
      __break(1u);
      return;
    }
    if (!(v74 >> 62))
    {
      uint64_t v75 = *(void *)((v74 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_42:
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&aBlock);
      if (v75 >= 1) {
        goto LABEL_43;
      }
      swift_bridgeObjectRelease();
      uint64_t v87 = v105;
      swift_bridgeObjectRetain_n();
      uint64_t v88 = v87;
      int v89 = Logger.logObject.getter();
      os_log_type_t v90 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v89, v90))
      {
        uint64_t v91 = swift_slowAlloc();
        uint64_t v92 = a2;
        uint64_t v93 = (void *)swift_slowAlloc();
        uint64_t v94 = swift_slowAlloc();
        *(void *)&long long aBlock = v94;
        *(_DWORD *)uint64_t v91 = 136315394;
        swift_bridgeObjectRetain();
        *(void *)&long long v118 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, v26, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v91 + 12) = 2112;
        *(void *)&long long v118 = v88;
        unint64_t v95 = v88;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v93 = v88;

        _os_log_impl(&dword_1B0DF7000, v89, v90, "Ignoring uninhabited session for bundle identifier: %s due to the request not having any collaborators: %@", (uint8_t *)v91, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v93, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v94, -1, -1);
        MEMORY[0x1B3EA39E0](v91, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }
      lazy protocol witness table accessor for type BackgroundSessionManagerError and conformance BackgroundSessionManagerError();
      uint64_t v85 = (void *)swift_allocError();
      *uint64_t v96 = 7;
LABEL_46:
      v108();

      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v122);
      return;
    }
LABEL_52:
    uint64_t v75 = _CocoaArrayWrapper.endIndex.getter();
    goto LABEL_42;
  }
  outlined destroy of UUID?((uint64_t)&aBlock, (uint64_t *)&demangling cache variable for type metadata for IDSServiceProtocol?);
  swift_bridgeObjectRetain_n();
  os_log_type_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    v122[0] = v35;
    *(_DWORD *)uint64_t v34 = 136315138;
    *(void *)&long long aBlock = a2;
    *((void *)&aBlock + 1) = a3;
    swift_bridgeObjectRetain();
    uint64_t v36 = String.init<A>(reflecting:)();
    *(void *)&long long aBlock = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v32, v33, "Unknown service for bundle identifier: %s", v34, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v35, -1, -1);
    MEMORY[0x1B3EA39E0](v34, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v69 = v108;
  lazy protocol witness table accessor for type BackgroundSessionManagerError and conformance BackgroundSessionManagerError();
  unint64_t v70 = (void *)swift_allocError();
  *unint64_t v71 = 2;
  v69();
}

uint64_t closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:)(void *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void (*a7)(void *), uint64_t a8, int a9)
{
  void (*v26)(void *__return_ptr, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  char *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  BOOL v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  dispatch_semaphore_t v49;
  uint64_t v50;
  unint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  NSObject *v55;
  uint64_t result;
  unint64_t v57;
  long long v58;
  void *v59;
  unsigned char *v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint8_t *v64;
  uint64_t v65;
  unint64_t v66;
  id v67;
  void (*v68)(uint64_t *, void);
  uint64_t (*v69)(uint64_t *);
  void (*v70)(uint64_t *, void);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(void *);
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  void (*v80)(void *);
  uint64_t v81;
  uint8_t *v82;
  char *v83;
  id v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  void v89[5];
  uint64_t v90[6];

  id v80 = a7;
  id v81 = a8;
  uint64_t v84 = a6;
  uint64_t v85 = a5;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v86 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  BOOL v18 = (char *)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = v18;
  uint64_t v19 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v87 = (*(uint64_t (**)(char *, void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x108))(a2, *(void *)((char *)a1 + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_queue));
  uint64_t v20 = *(void **)&a2[OBJC_IVAR___CPBackgroundSessionCreationRequest_activitySessionRequest];
  id v21 = objc_allocWithZone(MEMORY[0x1E4FADB28]);
  id v22 = v20;
  swift_bridgeObjectRetain();
  uint64_t v23 = (void *)MEMORY[0x1B3EA1B00](a3, a4);
  swift_bridgeObjectRelease();
  id v24 = objc_msgSend(v21, sel_initWithCreationRequest_bundleIdentifier_systemActivity_, v22, v23, 0);

  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v18, &a2[OBJC_IVAR___CPBackgroundSessionCreationRequest_id], v15);
  uint64_t v25 = *(void *)&a2[OBJC_IVAR___CPBackgroundSessionCreationRequest_localMember];
  uint64_t v82 = *(uint8_t **)&a2[OBJC_IVAR___CPBackgroundSessionCreationRequest_localMember + 8];
  outlined init with copy of UserNotificationCenter((uint64_t)v84, (uint64_t)v90);
  uint64_t v26 = *(void (**)(void *__return_ptr, uint64_t))((*v19 & *a1) + 0xE8);
  swift_unknownObjectRetain();
  uint64_t v84 = v24;
  uint64_t v27 = v85;
  swift_bridgeObjectRetain();
  uint64_t v28 = v87;
  uint64_t v29 = swift_retain();
  v26(v89, v29);
  uint64_t v30 = objc_msgSend(objc_allocWithZone((Class)CPSharedConversationServerBag), sel_init);
  uint64_t v31 = objc_msgSend(objc_allocWithZone((Class)CPFeatureFlags), sel_init);
  type metadata accessor for BackgroundSession(0);
  os_log_type_t v32 = swift_allocObject();
  os_log_type_t v33 = a1;
  uint64_t v78 = v32;
  uint64_t v34 = v84;
  uint64_t v35 = v25;
  uint64_t v36 = (void *)MEMORY[0x1E4FBC8C8];
  unint64_t v37 = specialized BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)((uint64_t)v83, v84, v27, v35, (uint64_t)v82, (uint64_t)v90, v30, v28, v33, (uint64_t)v89, v31, v78);
  uint64_t v38 = (*(uint64_t (**)(void))((*v36 & *(void *)v33) + 0xB8))();
  char v39 = a2;
  uint64_t v40 = specialized Sequence.first(where:)(v38);

  swift_bridgeObjectRelease();
  if (!v40) {
    goto LABEL_16;
  }
  uint64_t v83 = v33;
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  os_log_type_t v41 = type metadata accessor for Logger();
  __swift_project_value_buffer(v41, (uint64_t)static Log.service);
  swift_retain_n();
  long long v42 = Logger.logObject.getter();
  char v43 = static os_log_type_t.default.getter();
  int64_t v44 = os_log_type_enabled(v42, v43);
  unint64_t v79 = a1;
  uint64_t v85 = v37;
  if (v44)
  {
    uint64_t v45 = (uint8_t *)swift_slowAlloc();
    uint64_t v46 = swift_slowAlloc();
    v90[0] = v46;
    *(_DWORD *)uint64_t v45 = 136315138;
    v89[0] = v40;
    swift_retain();
    uint64_t v47 = String.init<A>(reflecting:)();
    v89[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B0DF7000, v42, v43, "Found existing session: %s", v45, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v46, -1, -1);
    MEMORY[0x1B3EA39E0](v45, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  char v49 = dispatch_semaphore_create(0);
  char v50 = swift_allocObject();
  *(void *)(v50 + 16) = 0xF000000000000007;
  uint64_t v51 = (unint64_t *)(v50 + 16);
  uint64_t v52 = type metadata accessor for TaskPriority();
  long long v53 = (uint64_t)v86;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v86, 1, 1, v52);
  long long v54 = (void *)swift_allocObject();
  v54[2] = 0;
  v54[3] = 0;
  v54[4] = v49;
  v54[5] = partial apply for closure #2 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:);
  v54[6] = v50;
  v54[7] = v40;
  swift_retain();
  swift_retain_n();
  uint64_t v55 = v49;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v53, (uint64_t)&async function pointer to partial apply for closure #3 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:), (uint64_t)v54);
  swift_release();
  OS_dispatch_semaphore.wait()();
  uint64_t result = swift_beginAccess();
  uint64_t v57 = *(void *)(v50 + 16);
  if ((~v57 & 0xF000000000000007) != 0)
  {
    if ((v57 >> 62) < 2
      || v57 >> 62 == 3
      && (*((void *)&v58 + 1) = *v51, *(void *)&uint64_t v58 = v57 + 0x4000000000000000, (unint64_t)(v58 >> 3) < 5))
    {
      lazy protocol witness table accessor for type BackgroundSessionManagerError and conformance BackgroundSessionManagerError();
      int v59 = (void *)swift_allocError();
      unsigned __int8 *v60 = 4;
      outlined copy of BackgroundSession.State(v57);
      v80(v59);

      outlined consume of BackgroundSession.State?(v57);
      swift_release_n();

      swift_release();
      swift_release();

      return swift_release();
    }
    outlined copy of BackgroundSession.State?(*v51);
    outlined copy of BackgroundSession.State(v57);
    outlined copy of BackgroundSession.State(v57);
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = (uint8_t *)swift_slowAlloc();
      uint64_t v84 = (id)swift_slowAlloc();
      v90[0] = (uint64_t)v84;
      *(_DWORD *)uint64_t v63 = 136315138;
      uint64_t v82 = v63 + 4;
      uint64_t v64 = v63;
      uint64_t v88 = v57;
      outlined copy of BackgroundSession.State(v57);
      uint64_t v65 = String.init<A>(reflecting:)();
      uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v66, v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of BackgroundSession.State?(v57);
      outlined consume of BackgroundSession.State?(v57);
      _os_log_impl(&dword_1B0DF7000, v61, v62, "Found session is in the %s state. Forcefully removing.", v63, 0xCu);
      uint64_t v67 = v84;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v67, -1, -1);
      MEMORY[0x1B3EA39E0](v64, -1, -1);
    }
    else
    {
      outlined consume of BackgroundSession.State?(v57);
      outlined consume of BackgroundSession.State?(v57);
    }

    uint64_t v36 = (void *)MEMORY[0x1E4FBC8C8];
    os_log_type_t v33 = v83;
    unint64_t v68 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))((*MEMORY[0x1E4FBC8C8] & *(void *)v83)
                                                                                       + 0xC8))(v90);
    specialized Set._Variant.remove(_:)(v40);
    swift_release();
    v68(v90, 0);

    swift_release();
    outlined consume of BackgroundSession.State?(v57);
    swift_release();
    swift_release();
    unint64_t v37 = v85;
LABEL_16:
    uint64_t v69 = *(uint64_t (**)(uint64_t *))((*v36 & *(void *)v33) + 0xC8);
    swift_retain();
    unint64_t v70 = (void (*)(uint64_t *, void))v69(v90);
    specialized Set._Variant.insert(_:)((uint64_t *)&v88, v37);
    swift_release();
    v70(v90, 0);
    unint64_t v71 = type metadata accessor for TaskPriority();
    uint64_t v72 = (uint64_t)v86;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v71 - 8) + 56))(v86, 1, 1, v71);
    uint64_t v73 = swift_allocObject();
    *(void *)(v73 + 16) = 0;
    *(void *)(v73 + 24) = 0;
    *(void *)(v73 + 32) = v37;
    *(void *)(v73 + 40) = v33;
    *(_DWORD *)(v73 + 48) = a9;
    unint64_t v74 = v80;
    uint64_t v75 = v81;
    *(void *)(v73 + 56) = v34;
    *(void *)(v73 + 64) = v74;
    *(void *)(v73 + 72) = v75;
    uint64_t v76 = v33;
    swift_retain();
    swift_retain();
    id v77 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v72, (uint64_t)&async function pointer to partial apply for closure #4 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:), v73);
    swift_release();
    swift_release();
    uint64_t v87 = v77;
    return swift_release();
  }
  __break(1u);
  return result;
}

unint64_t closure #2 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:)(unint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  unint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = a1;
  outlined consume of BackgroundSession.State?(v4);
  return outlined copy of BackgroundSession.State(a1);
}

uint64_t closure #3 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  return MEMORY[0x1F4188298](closure #3 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:), a7, 0);
}

uint64_t closure #3 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:)()
{
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  *(void *)(v0 + 56) = *(void *)(v0 + 16);
  return MEMORY[0x1F4188298](closure #3 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:), 0, 0);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 56);
  (*(void (**)(unint64_t))(v0 + 32))(v1);
  outlined consume of BackgroundSession.State(v1);
  OS_dispatch_semaphore.signal()();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t closure #4 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 160) = a8;
  *(void *)(v8 + 168) = v10;
  *(void *)(v8 + 144) = a5;
  *(void *)(v8 + 152) = a7;
  *(_DWORD *)(v8 + 192) = a6;
  *(void *)(v8 + 136) = a4;
  return MEMORY[0x1F4188298](closure #4 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:), 0, 0);
}

uint64_t closure #4 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:)()
{
  uint64_t v1 = *(void *)(v0 + 136);
  (*(void (**)(void, uint64_t, _UNKNOWN **))(*(void *)(v0 + 144)
                                                       + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_sessionSuspensionControllerProvider))(*(unsigned int *)(v0 + 192), v1, &protocol witness table for BackgroundSession);
  return MEMORY[0x1F4188298](closure #4 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:), v1, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  BackgroundSession.updateSuspensionController(_:)(v0 + 64);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 64);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #4 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:);
  return BackgroundSession.join()();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #4 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:);
  }
  else {
    uint64_t v2 = closure #4 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  void *v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  uint64_t v16 = v0;
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 152);
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.service);
  uint64_t v3 = v1;
  unint64_t v4 = Logger.logObject.getter();
  id v5 = static os_log_type_t.default.getter();
  uint64_t v6 = os_log_type_enabled(v4, v5);
  os_log_type_t v7 = *(void **)(v0 + 152);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v15 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    *(void *)(v0 + 120) = v7;
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivity);
    uint64_t v10 = v7;
    uint64_t v11 = String.init<A>(reflecting:)();
    *(void *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v4, v5, "Activity successfully begun: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v9, -1, -1);
    MEMORY[0x1B3EA39E0](v8, -1, -1);
  }
  else
  {
  }
  (*(void (**)(void))(v0 + 160))(0);
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

{
  void *v0;
  const void *v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  void *v9;
  uint8_t *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char *v22;
  uint64_t result;
  void *v24;
  void (*v25)(void *);
  id v26;
  uint64_t (*v27)(void);
  uint64_t v28;
  void *v29;
  uint64_t v30;

  uint64_t v29 = v0;
  uint64_t v1 = v0 + 2;
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)v0[23];
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Log.service);
  unint64_t v4 = v2;
  id v5 = v2;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  uint64_t v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = (void *)v0[23];
  if (v8)
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    uint64_t v11 = v28;
    *(_DWORD *)uint64_t v10 = 136315138;
    v0[13] = v9;
    uint64_t v12 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v13 = String.init<A>(reflecting:)();
    v0[14] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v6, v7, "Activity failed to begin: %s", v10, 0xCu);
    swift_arrayDestroy();
    uint64_t v15 = v11;
    uint64_t v1 = v0 + 2;
    MEMORY[0x1B3EA39E0](v15, -1, -1);
    MEMORY[0x1B3EA39E0](v10, -1, -1);
  }
  else
  {
  }
  uint64_t v16 = v0[17];
  uint64_t v17 = (char *)v0[18];
  BOOL v18 = *(NSObject **)&v17[OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_queue];
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v17;
  *(void *)(v19 + 24) = v16;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = partial apply for closure #1 in closure #4 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:);
  *(void *)(v20 + 24) = v19;
  v0[6] = partial apply for thunk for @callee_guaranteed () -> ();
  v0[7] = v20;
  v0[2] = MEMORY[0x1E4F143A8];
  v0[3] = 1107296256;
  v0[4] = thunk for @escaping @callee_guaranteed () -> ();
  v0[5] = &block_descriptor_114;
  id v21 = _Block_copy(v1);
  id v22 = v17;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v18, v21);
  _Block_release(v21);
  LOBYTE(v16) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v16)
  {
    __break(1u);
  }
  else
  {
    id v24 = (void *)v0[23];
    uint64_t v25 = (void (*)(void *))v0[20];
    uint64_t v26 = v24;
    v25(v24);

    swift_release();
    uint64_t v27 = (uint64_t (*)(void))v0[1];
    return v27();
  }
  return result;
}

uint64_t closure #1 in closure #4 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:)(void *a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))((*MEMORY[0x1E4FBC8C8] & *a1)
                                                                                   + 0xC8))(v5);
  specialized Set._Variant.remove(_:)(a2);
  swift_release();
  return v3(v5, 0);
}

uint64_t BackgroundSessionManager.leave(identifier:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v59 = a3;
  uint64_t v57 = a2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v64 = *(void *)(v4 - 8);
  uint64_t v65 = v4;
  MEMORY[0x1F4188790](v4);
  os_log_type_t v62 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for DispatchQoS();
  uint64_t v61 = *(void *)(v63 - 8);
  MEMORY[0x1F4188790](v63);
  uint64_t v60 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  long long v54 = (char *)&v49 - v11;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  unint64_t v66 = (char *)&v49 - v17;
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v49 - v18;
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Log.service);
  id v21 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v56 = a1;
  uint64_t v22 = a1;
  uint64_t v23 = v21;
  v21(v19, v22, v12);
  id v24 = Logger.logObject.getter();
  int v25 = static os_log_type_t.default.getter();
  BOOL v26 = os_log_type_enabled(v24, (os_log_type_t)v25);
  uint64_t v55 = v23;
  if (v26)
  {
    int v52 = v25;
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    uint64_t v51 = swift_slowAlloc();
    aBlock[0] = v51;
    long long v53 = v27;
    *(_DWORD *)uint64_t v27 = 136315138;
    uint64_t v28 = (uint64_t)v54;
    v23(v54, (uint64_t)v19, v12);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v28, 0, 1, v12);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v28, (uint64_t)v10, &demangling cache variable for type metadata for UUID?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12) == 1)
    {
      unint64_t v29 = 0xE300000000000000;
      uint64_t v30 = 7104878;
    }
    else
    {
      uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
      char v50 = v24;
      os_log_type_t v32 = v66;
      v31(v66, v10, v12);
      v23((char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v32, v12);
      uint64_t v30 = String.init<A>(reflecting:)();
      unint64_t v29 = v33;
      uint64_t v34 = v32;
      id v24 = v50;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v34, v12);
    }
    uint64_t v35 = v53;
    outlined destroy of UUID?((uint64_t)v54, &demangling cache variable for type metadata for UUID?);
    uint64_t v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v29, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
    _os_log_impl(&dword_1B0DF7000, v24, (os_log_type_t)v52, "Request to leave identifier: %s", v35, 0xCu);
    uint64_t v36 = v51;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v36, -1, -1);
    MEMORY[0x1B3EA39E0](v35, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
  }

  unint64_t v37 = v58;
  uint64_t v38 = v66;
  v55(v66, v56, v12);
  unint64_t v39 = (*(unsigned __int8 *)(v13 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v40 = swift_allocObject();
  *(void *)(v40 + 16) = v37;
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v40 + v39, v38, v12);
  os_log_type_t v41 = (void *)(v40 + ((v14 + v39 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v42 = v59;
  void *v41 = v57;
  v41[1] = v42;
  aBlock[4] = (uint64_t)partial apply for closure #1 in BackgroundSessionManager.leave(identifier:completion:);
  aBlock[5] = v40;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_18_1;
  char v43 = _Block_copy(aBlock);
  id v44 = v37;
  swift_retain();
  uint64_t v45 = v60;
  static DispatchQoS.unspecified.getter();
  uint64_t v67 = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v46 = v62;
  uint64_t v47 = v65;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v45, v46, v43);
  _Block_release(v43);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v46, v47);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v45, v63);
  return swift_release();
}

void closure #1 in BackgroundSessionManager.leave(identifier:completion:)(void *a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0xB8))(v13);
  uint64_t v32 = a2;
  uint64_t v17 = specialized Sequence.first(where:)((uint64_t (*)(uint64_t *))partial apply for closure #1 in closure #1 in BackgroundSessionManager.leave(identifier:completion:), (uint64_t)v31, v16);
  swift_bridgeObjectRelease();
  if (v17)
  {
    uint64_t v18 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v10, 1, 1, v18);
    uint64_t v19 = (void *)swift_allocObject();
    v19[2] = 0;
    v19[3] = 0;
    void v19[4] = v17;
    v19[5] = a3;
    v19[6] = a4;
    swift_retain();
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #2 in closure #1 in BackgroundSessionManager.leave(identifier:completion:), (uint64_t)v19);
    swift_release();
    uint64_t v20 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))((*MEMORY[0x1E4FBC8C8] & *a1)
                                                                                       + 0xC8))(v33);
    specialized Set._Variant.remove(_:)(v17);
    swift_release();
    v20(v33, 0);
    swift_release();
  }
  else
  {
    v30[1] = a4;
    if (one-time initialization token for service != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Log.service);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, v11);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      id v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      v33[0] = v25;
      *(_DWORD *)id v24 = 136315138;
      v30[0] = v24 + 4;
      _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
      v33[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
      _os_log_impl(&dword_1B0DF7000, v22, v23, "Couldn't find session with identifier: %s", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v25, -1, -1);
      MEMORY[0x1B3EA39E0](v24, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    }

    lazy protocol witness table accessor for type BackgroundSessionManagerError and conformance BackgroundSessionManagerError();
    uint64_t v28 = (void *)swift_allocError();
    *unint64_t v29 = 5;
    a3();
  }
}

uint64_t closure #2 in closure #1 in BackgroundSessionManager.leave(identifier:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[9] = a5;
  v6[10] = a6;
  v6[8] = a4;
  return MEMORY[0x1F4188298](closure #2 in closure #1 in BackgroundSessionManager.leave(identifier:completion:), 0, 0);
}

uint64_t closure #2 in closure #1 in BackgroundSessionManager.leave(identifier:completion:)()
{
  uint64_t v13 = v0;
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[11] = __swift_project_value_buffer(v1, (uint64_t)static Log.service);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[8];
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v12 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    v0[6] = v5;
    type metadata accessor for BackgroundSession(0);
    swift_retain();
    uint64_t v8 = String.init<A>(reflecting:)();
    v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B0DF7000, v2, v3, "Ending session %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v7, -1, -1);
    MEMORY[0x1B3EA39E0](v6, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  uint64_t v10 = (void *)swift_task_alloc();
  v0[12] = v10;
  *uint64_t v10 = v0;
  v10[1] = closure #2 in closure #1 in BackgroundSessionManager.leave(identifier:completion:);
  return BackgroundSession.leave(endState:)(0xC000000000000028);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #2 in closure #1 in BackgroundSessionManager.leave(identifier:completion:);
  }
  else {
    uint64_t v2 = closure #2 in closure #1 in BackgroundSessionManager.leave(identifier:completion:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  uint64_t v11 = v0;
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = *(void *)(v0 + 64);
    BOOL v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)BOOL v4 = 136315138;
    uint64_t v10 = v5;
    *(void *)(v0 + 32) = v3;
    type metadata accessor for BackgroundSession(0);
    swift_retain();
    uint64_t v6 = String.init<A>(reflecting:)();
    *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B0DF7000, v1, v2, "Ended session %s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v5, -1, -1);
    MEMORY[0x1B3EA39E0](v4, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  (*(void (**)(void))(v0 + 72))(0);
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  void (*v9)(void *);
  id v10;
  uint64_t (*v11)(void);
  uint64_t v13;
  void *v14;
  uint64_t v15;

  uint64_t v14 = v0;
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = v0[8];
    BOOL v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)BOOL v4 = 136315138;
    uint64_t v13 = v5;
    v0[2] = v3;
    type metadata accessor for BackgroundSession(0);
    swift_retain();
    uint64_t v6 = String.init<A>(reflecting:)();
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B0DF7000, v1, v2, "Error ending session: %s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v5, -1, -1);
    MEMORY[0x1B3EA39E0](v4, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  uint64_t v8 = (void *)v0[13];
  unint64_t v9 = (void (*)(void *))v0[9];
  uint64_t v10 = v8;
  v9(v8);

  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t BackgroundSessionManager.updateMembers(identifier:members:completion:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v62 = a4;
  uint64_t v60 = a3;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v67 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v65 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = type metadata accessor for DispatchQoS();
  uint64_t v64 = *(void *)(v66 - 8);
  MEMORY[0x1F4188790](v66);
  uint64_t v63 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v51 - v13;
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v56 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  unint64_t v68 = (char *)&v51 - v20;
  uint64_t v58 = v21;
  MEMORY[0x1F4188790](v19);
  os_log_type_t v23 = (char *)&v51 - v22;
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Log.service);
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  uint64_t v59 = a1;
  uint64_t v26 = a1;
  unint64_t v27 = v25;
  v25(v23, v26, v15);
  swift_bridgeObjectRetain_n();
  uint64_t v28 = Logger.logObject.getter();
  LODWORD(v57) = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v28, (os_log_type_t)v57))
  {
    uint64_t v54 = a2;
    uint64_t v29 = swift_slowAlloc();
    uint64_t v52 = swift_slowAlloc();
    aBlock[0] = v52;
    *(_DWORD *)uint64_t v29 = 136315394;
    v27(v14, v23, v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v14, 0, 1, v15);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v14, (uint64_t)v12, &demangling cache variable for type metadata for UUID?);
    int v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v12, 1, v15);
    uint64_t v55 = v6;
    long long v53 = v27;
    if (v30 == 1)
    {
      unint64_t v31 = 0xE300000000000000;
      uint64_t v32 = 7104878;
    }
    else
    {
      uint64_t v34 = v68;
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v68, v12, v15);
      v27(v56, v34, v15);
      uint64_t v32 = String.init<A>(reflecting:)();
      unint64_t v31 = v35;
      (*(void (**)(char *, uint64_t))(v16 + 8))(v34, v15);
    }
    outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for UUID?);
    uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v31, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v23, v15);
    *(_WORD *)(v29 + 12) = 2080;
    uint64_t v33 = v54;
    uint64_t v69 = v54;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<AddressableMember>);
    uint64_t v36 = String.init<A>(reflecting:)();
    uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v28, (os_log_type_t)v57, "Request to update members on identifier: %s with members: %s", (uint8_t *)v29, 0x16u);
    uint64_t v38 = v52;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v38, -1, -1);
    MEMORY[0x1B3EA39E0](v29, -1, -1);

    uint64_t v6 = v55;
    unint64_t v27 = v53;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v23, v15);
    swift_bridgeObjectRelease_n();

    uint64_t v33 = a2;
  }
  unint64_t v39 = v61;
  uint64_t v57 = *(void *)&v61[OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_queue];
  uint64_t v40 = v68;
  v27(v68, v59, v15);
  unint64_t v41 = (*(unsigned __int8 *)(v16 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v42 = (v58 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = v39;
  (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(v43 + v41, v40, v15);
  id v44 = (void *)(v43 + v42);
  uint64_t v45 = v62;
  *id v44 = v60;
  v44[1] = v45;
  *(void *)(v43 + ((v42 + 23) & 0xFFFFFFFFFFFFFFF8)) = v33;
  aBlock[4] = (uint64_t)partial apply for closure #1 in BackgroundSessionManager.updateMembers(identifier:members:completion:);
  aBlock[5] = v43;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_24_0;
  uint64_t v46 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  id v47 = v39;
  swift_retain();
  char v48 = v63;
  static DispatchQoS.unspecified.getter();
  uint64_t v69 = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v49 = v65;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v48, v49, v46);
  _Block_release(v46);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v49, v6);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v48, v66);
  return swift_release();
}

void closure #1 in BackgroundSessionManager.updateMembers(identifier:members:completion:)(void *a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  uint64_t v36 = a3;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0xB8))(v14);
  uint64_t v38 = a2;
  uint64_t v18 = specialized Sequence.first(where:)((uint64_t (*)(uint64_t *))partial apply for closure #1 in closure #1 in BackgroundSessionManager.updateMembers(identifier:members:completion:), (uint64_t)v37, v17);
  swift_bridgeObjectRelease();
  if (v18)
  {
    uint64_t v19 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v11, 1, 1, v19);
    uint64_t v20 = (void *)swift_allocObject();
    v20[2] = 0;
    v20[3] = 0;
    uint64_t v20[4] = v18;
    v20[5] = a5;
    v20[6] = v36;
    v20[7] = a4;
    swift_bridgeObjectRetain();
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v11, (uint64_t)&async function pointer to partial apply for closure #2 in closure #1 in BackgroundSessionManager.updateMembers(identifier:members:completion:), (uint64_t)v20);
    swift_release();
  }
  else
  {
    uint64_t v21 = v12;
    v35[2] = a4;
    uint64_t v22 = v36;
    if (one-time initialization token for service != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Log.service);
    uint64_t v24 = v13;
    uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    uint64_t v26 = v21;
    v25(v16, a2, v21);
    unint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      uint64_t v40 = v30;
      *(_DWORD *)uint64_t v29 = 136315138;
      v35[1] = v29 + 4;
      _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v24 + 8))(v16, v26);
      _os_log_impl(&dword_1B0DF7000, v27, v28, "Couldn't find session with identifier: %s", v29, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v30, -1, -1);
      MEMORY[0x1B3EA39E0](v29, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v24 + 8))(v16, v26);
    }

    lazy protocol witness table accessor for type BackgroundSessionManagerError and conformance BackgroundSessionManagerError();
    uint64_t v33 = (void *)swift_allocError();
    *uint64_t v34 = 5;
    v22();
  }
}

uint64_t closure #2 in closure #1 in BackgroundSessionManager.updateMembers(identifier:members:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  return MEMORY[0x1F4188298](closure #2 in closure #1 in BackgroundSessionManager.updateMembers(identifier:members:completion:), a4, 0);
}

uint64_t closure #2 in closure #1 in BackgroundSessionManager.updateMembers(identifier:members:completion:)()
{
  BackgroundSession.updateMembers(_:)(*(void *)(v0 + 24));
  return MEMORY[0x1F4188298](closure #2 in closure #1 in BackgroundSessionManager.updateMembers(identifier:members:completion:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void))(v0 + 32))(0);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

Swift::Void __swiftcall BackgroundSessionManager.sessionsDidUpdate()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v1 - 8);
  os_log_type_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (uint64_t *)((char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)((char *)v0 + OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_queue);
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4FBCBF0], v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  uint64_t v10 = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if (v8)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))(v10);
    uint64_t v12 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v3, 1, 1, v12);
    uint64_t v13 = (void *)swift_allocObject();
    v13[2] = 0;
    v13[3] = 0;
    v13[4] = v11;
    v13[5] = v0;
    uint64_t v14 = v0;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v3, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundSessionManager.sessionsDidUpdate(), (uint64_t)v13);
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t closure #1 in BackgroundSessionManager.sessionsDidUpdate()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[10] = a4;
  v5[11] = a5;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  v5[12] = v6;
  v5[13] = *(void *)(v6 - 8);
  v5[14] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DispatchQoS();
  v5[15] = v7;
  v5[16] = *(void *)(v7 - 8);
  v5[17] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in BackgroundSessionManager.sessionsDidUpdate(), 0, 0);
}

uint64_t closure #1 in BackgroundSessionManager.sessionsDidUpdate()()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for TUConversationActivitySessionContainer);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TUConversationActivitySessionContainer]);
  uint64_t v4 = swift_task_alloc();
  v0[18] = v4;
  *(void *)(v4 + 16) = v1;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[19] = v5;
  *uint64_t v5 = v0;
  v5[1] = closure #1 in BackgroundSessionManager.sessionsDidUpdate();
  return MEMORY[0x1F4187F28](v0 + 8, v2, v3, 0, 0, &async function pointer to partial apply for closure #1 in closure #1 in BackgroundSessionManager.sessionsDidUpdate(), v4, v2);
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in BackgroundSessionManager.sessionsDidUpdate(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v1 = v0[17];
  uint64_t v2 = v0[14];
  uint64_t v12 = v0[16];
  uint64_t v13 = v0[15];
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[13];
  uint64_t v5 = (void *)v0[11];
  uint64_t v6 = v0[8];
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v5;
  *(void *)(v7 + 24) = v6;
  v0[6] = partial apply for closure #2 in closure #1 in BackgroundSessionManager.sessionsDidUpdate();
  v0[7] = v7;
  v0[2] = MEMORY[0x1E4F143A8];
  v0[3] = 1107296256;
  v0[4] = thunk for @escaping @callee_guaranteed () -> ();
  v0[5] = &block_descriptor_74;
  uint64_t v8 = _Block_copy(v0 + 2);
  uint64_t v9 = v5;
  static DispatchQoS.unspecified.getter();
  v0[9] = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v1, v2, v8);
  _Block_release(v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v1, v13);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t closure #1 in closure #1 in BackgroundSessionManager.sessionsDidUpdate()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[19] = a2;
  v3[20] = a3;
  v3[18] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v3[21] = swift_task_alloc();
  v3[22] = swift_task_alloc();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskGroup<TUConversationActivitySessionContainer>.Iterator);
  v3[23] = v4;
  v3[24] = *(void *)(v4 - 8);
  v3[25] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in BackgroundSessionManager.sessionsDidUpdate(), 0, 0);
}

uint64_t closure #1 in closure #1 in BackgroundSessionManager.sessionsDidUpdate()()
{
  uint64_t v1 = *(void *)(v0 + 160);
  if ((v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for BackgroundSession(0);
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2(&lazy protocol witness table cache variable for type BackgroundSession and conformance BackgroundSession, (void (*)(uint64_t))type metadata accessor for BackgroundSession);
    uint64_t v2 = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = *(void *)(v0 + 16);
    uint64_t v37 = *(void *)(v0 + 24);
    uint64_t v5 = *(void *)(v0 + 32);
    uint64_t v6 = *(void *)(v0 + 40);
    unint64_t v7 = *(void *)(v0 + 48);
  }
  else
  {
    uint64_t v8 = -1 << *(unsigned char *)(v1 + 32);
    uint64_t v37 = v1 + 56;
    uint64_t v5 = ~v8;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v7 = v10 & *(void *)(v1 + 56);
    uint64_t v2 = swift_bridgeObjectRetain();
    uint64_t v6 = 0;
  }
  int64_t v36 = (unint64_t)(v5 + 64) >> 6;
  uint64_t v38 = v1;
  while (v1 < 0)
  {
    uint64_t v15 = __CocoaSet.Iterator.next()();
    if (!v15) {
      goto LABEL_37;
    }
    *(void *)(v0 + 136) = v15;
    type metadata accessor for BackgroundSession(0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v16 = *(void *)(v0 + 128);
    swift_unknownObjectRelease();
    uint64_t v14 = v6;
    uint64_t v12 = v7;
    if (!v16) {
      goto LABEL_37;
    }
LABEL_30:
    unint64_t v39 = v12;
    uint64_t v21 = *(void *)(v0 + 168);
    uint64_t v20 = *(void *)(v0 + 176);
    uint64_t v22 = type metadata accessor for TaskPriority();
    uint64_t v23 = *(void *)(v22 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v20, 1, 1, v22);
    uint64_t v24 = (void *)swift_allocObject();
    _OWORD v24[2] = 0;
    uint64_t v25 = v24 + 2;
    v24[3] = 0;
    v24[4] = v16;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v20, v21, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    LODWORD(v21) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22);
    swift_retain();
    uint64_t v26 = *(void *)(v0 + 168);
    if (v21 == 1)
    {
      outlined destroy of UUID?(*(void *)(v0 + 168), (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
      if (*v25) {
        goto LABEL_32;
      }
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v26, v22);
      if (*v25)
      {
LABEL_32:
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v27 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v29 = v28;
        swift_unknownObjectRelease();
        goto LABEL_35;
      }
    }
    uint64_t v27 = 0;
    uint64_t v29 = 0;
LABEL_35:
    uint64_t v30 = **(void **)(v0 + 152);
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = &async function pointer to partial apply for closure #1 in closure #1 in closure #1 in BackgroundSessionManager.sessionsDidUpdate();
    *(void *)(v31 + 24) = v24;
    type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for TUConversationActivitySessionContainer);
    uint64_t v32 = v29 | v27;
    if (v29 | v27)
    {
      uint64_t v32 = v0 + 56;
      *(void *)(v0 + 56) = 0;
      *(void *)(v0 + 64) = 0;
      *(void *)(v0 + 72) = v27;
      *(void *)(v0 + 80) = v29;
    }
    uint64_t v11 = *(void *)(v0 + 176);
    *(void *)(v0 + 88) = 1;
    *(void *)(v0 + 96) = v32;
    *(void *)(v0 + 104) = v30;
    swift_task_create();
    swift_release();
    swift_release();
    uint64_t v2 = outlined destroy of UUID?(v11, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    uint64_t v6 = v14;
    unint64_t v7 = v39;
    uint64_t v1 = v38;
  }
  if (v7)
  {
    uint64_t v12 = (v7 - 1) & v7;
    unint64_t v13 = __clz(__rbit64(v7)) | (v6 << 6);
    uint64_t v14 = v6;
    goto LABEL_29;
  }
  int64_t v17 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    return MEMORY[0x1F4187C78](v2, v3, v4);
  }
  if (v17 >= v36) {
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v37 + 8 * v17);
  uint64_t v14 = v6 + 1;
  if (v18) {
    goto LABEL_28;
  }
  uint64_t v14 = v6 + 2;
  if (v6 + 2 >= v36) {
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v37 + 8 * v14);
  if (v18) {
    goto LABEL_28;
  }
  uint64_t v14 = v6 + 3;
  if (v6 + 3 >= v36) {
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v37 + 8 * v14);
  if (v18) {
    goto LABEL_28;
  }
  uint64_t v14 = v6 + 4;
  if (v6 + 4 >= v36) {
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v37 + 8 * v14);
  if (v18)
  {
LABEL_28:
    uint64_t v12 = (v18 - 1) & v18;
    unint64_t v13 = __clz(__rbit64(v18)) + (v14 << 6);
LABEL_29:
    uint64_t v16 = *(void *)(*(void *)(v1 + 48) + 8 * v13);
    swift_retain();
    if (!v16) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
  uint64_t v19 = v6 + 5;
  while (v36 != v19)
  {
    unint64_t v18 = *(void *)(v37 + 8 * v19++);
    if (v18)
    {
      uint64_t v14 = v19 - 1;
      goto LABEL_28;
    }
  }
LABEL_37:
  outlined consume of [String : ()].Iterator._Variant();
  *(void *)(v0 + 120) = MEMORY[0x1E4FBC860];
  type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for TUConversationActivitySessionContainer);
  TaskGroup.makeAsyncIterator()();
  uint64_t v33 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type TaskGroup<TUConversationActivitySessionContainer>.Iterator and conformance TaskGroup<A>.Iterator, &demangling cache variable for type metadata for TaskGroup<TUConversationActivitySessionContainer>.Iterator);
  uint64_t v34 = (void *)swift_task_alloc();
  *(void *)(v0 + 208) = v34;
  *uint64_t v34 = v0;
  v34[1] = closure #1 in closure #1 in BackgroundSessionManager.sessionsDidUpdate();
  uint64_t v3 = *(void *)(v0 + 184);
  uint64_t v2 = v0 + 112;
  uint64_t v4 = v33;
  return MEMORY[0x1F4187C78](v2, v3, v4);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v8;

  uint64_t v2 = (void *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = v2[24];
    uint64_t v3 = v2[25];
    uint64_t v5 = v2[23];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    uint64_t v6 = destructiveProjectEnumData for ActivitySession.Errors;
  }
  else
  {
    uint64_t v6 = closure #1 in closure #1 in BackgroundSessionManager.sessionsDidUpdate();
  }
  return MEMORY[0x1F4188298](v6, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  if (*(void *)(v0 + 112))
  {
    MEMORY[0x1B3EA1CF0]();
    if (*(void *)((*(void *)(v0 + 120) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 120) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v1 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type TaskGroup<TUConversationActivitySessionContainer>.Iterator and conformance TaskGroup<A>.Iterator, &demangling cache variable for type metadata for TaskGroup<TUConversationActivitySessionContainer>.Iterator);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 208) = v2;
    *uint64_t v2 = v0;
    v2[1] = closure #1 in closure #1 in BackgroundSessionManager.sessionsDidUpdate();
    uint64_t v3 = *(void *)(v0 + 184);
    return MEMORY[0x1F4187C78](v0 + 112, v3, v1);
  }
  else
  {
    uint64_t v4 = *(void **)(v0 + 144);
    (*(void (**)(void, void))(*(void *)(v0 + 192) + 8))(*(void *)(v0 + 200), *(void *)(v0 + 184));

    uint64_t *v4 = *(void *)(v0 + 120);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
}

uint64_t closure #1 in closure #1 in closure #1 in BackgroundSessionManager.sessionsDidUpdate()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a4;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in closure #1 in BackgroundSessionManager.sessionsDidUpdate(), a4, 0);
}

uint64_t closure #1 in closure #1 in closure #1 in BackgroundSessionManager.sessionsDidUpdate()()
{
  *(void *)(v0 + 32) = BackgroundSession.container.getter();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in closure #1 in BackgroundSessionManager.sessionsDidUpdate(), 0, 0);
}

{
  uint64_t v0;

  **(void **)(v0 + 16) = *(void *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #2 in closure #1 in BackgroundSessionManager.sessionsDidUpdate()(void *a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0xA0))();
  if (result)
  {
    uint64_t v6 = v5;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v6 + 8))(a1, a2, ObjectType, v6);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t BackgroundSessionManager.updateShare(_:activityID:)()
{
  return MEMORY[0x1F4188298](BackgroundSessionManager.updateShare(_:activityID:), 0, 0);
}

{
  uint64_t v0;
  unsigned char *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  lazy protocol witness table accessor for type BackgroundSessionManagerError and conformance BackgroundSessionManagerError();
  swift_allocError();
  *uint64_t v1 = 0;
  swift_willThrow();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

id BackgroundSessionManager.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void BackgroundSessionManager.init()()
{
}

id BackgroundSessionManager.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BackgroundSessionManager();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for BackgroundSessionManagerDataSource.delegate.getter in conformance BackgroundSessionManager()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0xA0))();
}

uint64_t protocol witness for BackgroundSessionManagerDataSource.delegate.setter in conformance BackgroundSessionManager()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0xA8))();
}

void (*protocol witness for BackgroundSessionManagerDataSource.delegate.modify in conformance BackgroundSessionManager(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v1) + 0xB0))();
  return protocol witness for PresenceDataSource.members.modify in conformance SKPresenceDataSource<A>;
}

uint64_t protocol witness for BackgroundSessionManagerDataSource.begin(request:bundleIdentifier:processIdentifier:completion:) in conformance BackgroundSessionManager()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0x128))();
}

uint64_t protocol witness for BackgroundSessionManagerDataSource.leave(identifier:completion:) in conformance BackgroundSessionManager()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0x130))();
}

uint64_t protocol witness for BackgroundSessionManagerDataSource.updateMembers(identifier:members:completion:) in conformance BackgroundSessionManager()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0x138))();
}

uint64_t protocol witness for BackgroundSessionManagerDataSource.updateShare(_:activityID:) in conformance BackgroundSessionManager(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)((*MEMORY[0x1E4FBC8C8] & **v2) + 0x148);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *unint64_t v7 = v3;
  v7[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return v9(a1, a2);
}

uint64_t protocol witness for BackgroundSessionManagerDataSource.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:) in conformance BackgroundSessionManager()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0x120))();
}

uint64_t BackgroundSessionManager.backgroundSessionDidUpdate(_:)()
{
  return BackgroundSessionManager.sessions.didset((uint64_t)&unk_1F09B3DC8, (uint64_t)partial apply for closure #1 in BackgroundSessionManager.backgroundSessionDidUpdate(_:), (uint64_t)&block_descriptor_67_0);
}

uint64_t BackgroundSessionManager.backgroundSession(_:stateChanged:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v29 = *(void *)(v6 - 8);
  uint64_t v30 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v27 = *(void *)(v9 - 8);
  uint64_t v28 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.service);
  outlined copy of BackgroundSession.State(a2);
  swift_retain();
  outlined copy of BackgroundSession.State(a2);
  swift_retain();
  unint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    uint64_t v31 = a2;
    aBlock[0] = v16;
    *(_DWORD *)uint64_t v15 = 136315394;
    outlined copy of BackgroundSession.State(a2);
    uint64_t v17 = String.init<A>(reflecting:)();
    uint64_t v26 = v3;
    uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of BackgroundSession.State(a2);
    outlined consume of BackgroundSession.State(a2);
    *(_WORD *)(v15 + 12) = 2080;
    uint64_t v31 = a1;
    type metadata accessor for BackgroundSession(0);
    swift_retain();
    uint64_t v19 = String.init<A>(reflecting:)();
    uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, aBlock);
    uint64_t v3 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B0DF7000, v13, v14, "BackgroundSessionManager learned that state changed to %s on session: %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v16, -1, -1);
    MEMORY[0x1B3EA39E0](v15, -1, -1);
  }
  else
  {
    outlined consume of BackgroundSession.State(a2);
    outlined consume of BackgroundSession.State(a2);
    swift_release_n();
  }

  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v3;
  v21[3] = a2;
  v21[4] = a1;
  aBlock[4] = (uint64_t)partial apply for closure #1 in BackgroundSessionManager.backgroundSession(_:stateChanged:);
  aBlock[5] = (uint64_t)v21;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_34;
  uint64_t v22 = _Block_copy(aBlock);
  outlined copy of BackgroundSession.State(a2);
  swift_retain();
  id v23 = v3;
  static DispatchQoS.unspecified.getter();
  uint64_t v31 = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v24 = v30;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v11, v8, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v24);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v28);
  return swift_release();
}

uint64_t closure #1 in BackgroundSessionManager.backgroundSession(_:stateChanged:)(void *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x140))();
  if (a2 >> 62 == 3)
  {
    *((void *)&v8 + 1) = a2;
    *(void *)&long long v8 = a2 + 0x4000000000000000;
    if ((unint64_t)(v8 >> 3) >= 5)
    {
      if (one-time initialization token for service != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static Log.service);
      swift_retain_n();
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        uint64_t v13 = swift_slowAlloc();
        v17[0] = v13;
        *(_DWORD *)uint64_t v12 = 136315138;
        type metadata accessor for BackgroundSession(0);
        swift_retain();
        uint64_t v14 = String.init<A>(reflecting:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v17);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v10, v11, "Found that session: %s is invalid, removing session.", v12, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v13, -1, -1);
        MEMORY[0x1B3EA39E0](v12, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      uint64_t v16 = (uint64_t (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))((*v6 & *a1) + 0xC8))(v17);
      specialized Set._Variant.remove(_:)(a3);
      swift_release();
      return v16(v17, 0);
    }
  }
  return result;
}

uint64_t BackgroundSessionManager.backgroundSession(_:didRejectKeyRecoveryRequest:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v32 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  long long v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v31 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v30 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.service);
  id v12 = a2;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v28 = a1;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v29 = v9;
    uint64_t v16 = (uint8_t *)v15;
    uint64_t v26 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 138412290;
    aBlock[0] = v12;
    id v17 = v12;
    uint64_t v27 = v6;
    id v18 = v17;
    a1 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v19 = v26;
    *uint64_t v26 = v12;

    uint64_t v6 = v27;
    _os_log_impl(&dword_1B0DF7000, v13, v14, "BackgroundSessionManager didRejectKeyRecoveryRequest from: %@", v16, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v19, -1, -1);
    unint64_t v20 = v16;
    uint64_t v9 = v29;
    MEMORY[0x1B3EA39E0](v20, -1, -1);
  }
  else
  {
  }
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v3;
  *(void *)(v21 + 24) = a1;
  aBlock[4] = partial apply for closure #1 in BackgroundSessionManager.backgroundSession(_:didRejectKeyRecoveryRequest:);
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_40_0;
  uint64_t v22 = _Block_copy(aBlock);
  id v23 = v3;
  swift_retain();
  uint64_t v24 = v30;
  static DispatchQoS.unspecified.getter();
  uint64_t v33 = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v24, v8, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v24, v9);
  return swift_release();
}

uint64_t closure #1 in BackgroundSessionManager.backgroundSession(_:didRejectKeyRecoveryRequest:)(void *a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0xA0))();
  if (result)
  {
    uint64_t v6 = v5;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_id, ObjectType, v6);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t BackgroundSessionManager.backgroundSession(_:didReceiveUpdatedUnknownParticipantList:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  int64_t v36 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v35 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v34 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.service);
  swift_bridgeObjectRetain_n();
  id v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v32 = a1;
    uint64_t v14 = swift_slowAlloc();
    uint64_t v31 = v3;
    uint64_t v15 = (uint8_t *)v14;
    uint64_t v16 = swift_slowAlloc();
    aBlock[0] = v16;
    *(_DWORD *)uint64_t v15 = 136315138;
    uint64_t v30 = v15 + 4;
    type metadata accessor for AddressableMember();
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2(&lazy protocol witness table cache variable for type AddressableMember and conformance NSObject, (void (*)(uint64_t))type metadata accessor for AddressableMember);
    uint64_t v33 = v9;
    uint64_t v17 = v7;
    uint64_t v18 = v6;
    swift_bridgeObjectRetain();
    uint64_t v19 = Set.description.getter();
    unint64_t v21 = v20;
    swift_bridgeObjectRelease();
    uint64_t v22 = v19;
    a1 = v32;
    uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v21, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v6 = v18;
    uint64_t v7 = v17;
    uint64_t v9 = v33;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v12, v13, "BackgroundSessionManager didReceiveUpdatedUnknownParticipantList: %s", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v16, -1, -1);
    id v23 = v15;
    uint64_t v3 = v31;
    MEMORY[0x1B3EA39E0](v23, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v24 = (void *)swift_allocObject();
  _OWORD v24[2] = v3;
  v24[3] = a1;
  v24[4] = a2;
  aBlock[4] = (uint64_t)partial apply for closure #1 in BackgroundSessionManager.backgroundSession(_:didReceiveUpdatedUnknownParticipantList:);
  aBlock[5] = (uint64_t)v24;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_46;
  uint64_t v25 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  id v26 = v3;
  swift_retain();
  uint64_t v27 = v34;
  static DispatchQoS.unspecified.getter();
  uint64_t v37 = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v28 = v36;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v27, v28, v25);
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v28, v6);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v27, v9);
  return swift_release();
}

uint64_t closure #1 in BackgroundSessionManager.backgroundSession(_:didReceiveUpdatedUnknownParticipantList:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0xA0))();
  if (result)
  {
    uint64_t v8 = v7;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 24))(a1, a2 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_id, a3, ObjectType, v8);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t protocol witness for BackgroundSessionDelegate.backgroundSessionDidUpdate(_:) in conformance BackgroundSessionManager()
{
  return BackgroundSessionManager.sessions.didset((uint64_t)&unk_1F09B3DC8, (uint64_t)partial apply for closure #1 in BackgroundSessionManager.backgroundSessionDidUpdate(_:), (uint64_t)&block_descriptor_67_0);
}

uint64_t specialized closure #1 in PresenceController.init<A>(dataSource:)(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v21 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v4 = a1 + 32;
    uint64_t v2 = v21;
    do
    {
      outlined init with copy of UserNotificationCenter(v4, (uint64_t)v17);
      uint64_t v5 = v18;
      uint64_t v6 = v19;
      uint64_t v7 = __swift_project_boxed_opaque_existential_1(v17, v18);
      v20[3] = v5;
      uint64_t v20[4] = v6;
      uint64_t v16 = v6;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v20);
      uint64_t v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v5 - 8) + 16);
      v9(boxed_opaque_existential_1, v7, v5);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t isUniquelyReferenced_nonNull_native = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1);
        uint64_t v2 = v21;
      }
      unint64_t v12 = *(void *)(v2 + 16);
      unint64_t v11 = *(void *)(v2 + 24);
      if (v12 >= v11 >> 1) {
        uint64_t isUniquelyReferenced_nonNull_native = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
      }
      MEMORY[0x1F4188790](isUniquelyReferenced_nonNull_native);
      uint64_t v14 = (char *)&v17[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
      v9((uint64_t *)v14, boxed_opaque_existential_1, v5);
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, (uint64_t)v14, &v21, v5, v16);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
      uint64_t v2 = v21;
      v4 += 40;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1B0F8DFE0()
{
  swift_release();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 68, 7);
}

void partial apply for closure #1 in BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:)()
{
  closure #1 in BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:)(*(void **)(v0 + 16), *(void **)(v0 + 24), *(void (***)(unint64_t, char *, uint64_t))(v0 + 32), *(void *)(v0 + 40), *(char **)(v0 + 48), *(uint64_t **)(v0 + 56), *(_DWORD *)(v0 + 64));
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type BackgroundSessionManagerError and conformance BackgroundSessionManagerError()
{
  unint64_t result = lazy protocol witness table cache variable for type BackgroundSessionManagerError and conformance BackgroundSessionManagerError;
  if (!lazy protocol witness table cache variable for type BackgroundSessionManagerError and conformance BackgroundSessionManagerError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackgroundSessionManagerError and conformance BackgroundSessionManagerError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BackgroundSessionManagerError and conformance BackgroundSessionManagerError;
  if (!lazy protocol witness table cache variable for type BackgroundSessionManagerError and conformance BackgroundSessionManagerError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackgroundSessionManagerError and conformance BackgroundSessionManagerError);
  }
  return result;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (unint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void specialized Set.subscript.getter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
}

{
  specialized Set.subscript.getter(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
}

{
  specialized Set.subscript.getter(a1, a2, a3, a4, (void (*)(void))type metadata accessor for ActivitySession);
}

void specialized Set.subscript.getter(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t *a5)
{
  unint64_t v7 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      if (a4 < 0) {
        uint64_t v8 = a4;
      }
      else {
        uint64_t v8 = a4 & 0xFFFFFFFFFFFFFF8;
      }
      MEMORY[0x1B3EA24C0](a1, a2, v8);
      type metadata accessor for TUConversationActivity(0, a5);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      return;
    }
LABEL_27:
    __break(1u);
    return;
  }
  if (a3) {
    goto LABEL_13;
  }
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_24;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    goto LABEL_20;
  }
  __break(1u);
LABEL_13:
  if (__CocoaSet.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  __CocoaSet.Index.element.getter();
  type metadata accessor for TUConversationActivity(0, a5);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  a5 = v18;
  swift_unknownObjectRelease();
  Swift::Int v9 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v7 = v9 & ~v10;
  if (((*(void *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
  {
LABEL_26:

    __break(1u);
    goto LABEL_27;
  }
  id v11 = *(id *)(*(void *)(a4 + 48) + 8 * v7);
  char v12 = static NSObject.== infix(_:_:)();

  if ((v12 & 1) == 0)
  {
    uint64_t v13 = ~v10;
    do
    {
      unint64_t v7 = (v7 + 1) & v13;
      if (((*(void *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
        goto LABEL_26;
      }
      id v14 = *(id *)(*(void *)(a4 + 48) + 8 * v7);
      char v15 = static NSObject.== infix(_:_:)();
    }
    while ((v15 & 1) == 0);
  }

LABEL_20:
  uint64_t v16 = *(void **)(*(void *)(a4 + 48) + 8 * v7);
  id v17 = v16;
}

void specialized Set.subscript.getter(uint64_t a1, uint64_t a2, char a3, uint64_t a4, void (*a5)(void))
{
  unint64_t v8 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      if (a4 < 0) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = a4 & 0xFFFFFFFFFFFFFF8;
      }
      MEMORY[0x1B3EA24C0](a1, a2, v9);
      a5(0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      return;
    }
LABEL_27:
    __break(1u);
    return;
  }
  if (a3) {
    goto LABEL_13;
  }
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_24;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    goto LABEL_20;
  }
  __break(1u);
LABEL_13:
  if (__CocoaSet.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  __CocoaSet.Index.element.getter();
  a5(0);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  unint64_t v5 = v19;
  swift_unknownObjectRelease();
  Swift::Int v10 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
  uint64_t v11 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v8 = v10 & ~v11;
  if (((*(void *)(a4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_26:

    __break(1u);
    goto LABEL_27;
  }
  id v12 = *(id *)(*(void *)(a4 + 48) + 8 * v8);
  char v13 = static NSObject.== infix(_:_:)();

  if ((v13 & 1) == 0)
  {
    uint64_t v14 = ~v11;
    do
    {
      unint64_t v8 = (v8 + 1) & v14;
      if (((*(void *)(a4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_26;
      }
      id v15 = *(id *)(*(void *)(a4 + 48) + 8 * v8);
      char v16 = static NSObject.== infix(_:_:)();
    }
    while ((v16 & 1) == 0);
  }

LABEL_20:
  id v17 = *(void **)(*(void *)(a4 + 48) + 8 * v8);
  id v18 = v17;
}

uint64_t specialized _NativeSet.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 72);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t specialized closure #1 in PresenceController.init<A>(dataSource:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized closure #1 in PresenceController.init<A>(dataSource:)(*a1);
  *a2 = result;
  return result;
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(boxed_opaque_existential_1, a2, a4);
  uint64_t v10 = *a3;
  *(void *)(v10 + 16) = a1 + 1;
  return outlined init with take of BackgroundSessionManagerDataSource(&v12, v10 + 40 * a1 + 32);
}

void *specialized PresenceController.init<A>(dataSource:)(void *a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.Map<AnyPublisher<[any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>], Never>, [PresentDevice]>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type SKPresenceDataSource<EmptyPresenceContext> and conformance SKPresenceDataSource<A>, &demangling cache variable for type metadata for SKPresenceDataSource<EmptyPresenceContext>);
  uint64_t v13 = MEMORY[0x1E4FBC860];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CurrentValueSubject<[PresentDevice], Never>);
  swift_allocObject();
  a2[4] = CurrentValueSubject.init(_:)();
  a2[5] = MEMORY[0x1E4FBC870];
  a2[2] = a1;
  a2[3] = v8;
  uint64_t v9 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0xC0);
  uint64_t v10 = a1;
  uint64_t v13 = v9();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>], Never>);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [PresentDevice]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<[any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>], Never>);
  Publisher.map<A>(_:)();
  swift_release();
  swift_allocObject();
  swift_weakInit();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type Publishers.Map<AnyPublisher<[any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>], Never>, [PresentDevice]> and conformance Publishers.Map<A, B>, (uint64_t *)&demangling cache variable for type metadata for Publishers.Map<AnyPublisher<[any PresentDevice<Self.PresentDevice.Context == EmptyPresenceContext>], Never>, [PresentDevice]>);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();

  return a2;
}

uint64_t specialized BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, void *a9, uint64_t a10, void *a11, uint64_t a12)
{
  uint64_t v55 = a8;
  uint64_t v69 = a7;
  uint64_t v70 = a5;
  uint64_t v73 = a1;
  uint64_t v74 = a6;
  unint64_t v68 = a2;
  id v71 = a9;
  uint64_t v72 = a10;
  id v66 = a11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v65 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v63 = *(void *)(v16 - 8);
  uint64_t v64 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v16;
  MEMORY[0x1F4188790](v16);
  uint64_t v61 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v59);
  uint64_t v58 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v56 = (char *)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v54 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  uint64_t v25 = (void *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_reporter);
  v25[3] = &type metadata for FastSyncAnalyticsReporter;
  v25[4] = &protocol witness table for FastSyncAnalyticsReporter;
  *uint64_t v25 = 0;
  uint64_t v26 = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_abcReporter;
  type metadata accessor for ABCReporter();
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA8AF0]), sel_init);
  v27[3] = 0x636E795374736146;
  v27[4] = 0xE800000000000000;
  v27[5] = 0x6E6F6973736553;
  v27[6] = 0xE700000000000000;
  *(void *)(a12 + v26) = v27;
  uint64_t v28 = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_powerReporter;
  type metadata accessor for PowerLogReporter();
  swift_allocObject();
  *(void *)(a12 + v28) = PowerLogReporter.init(subsystem:category:)(0x697274654D435058, 0xEA00000000007363, 0x74634170756F7247, 0xEF73656974697669);
  uint64_t v29 = a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_delegate;
  *(void *)(v29 + 8) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v30 = a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession____lazy_storage___protectedStorage;
  *(void *)(v30 + 32) = 0;
  *(_OWORD *)uint64_t v30 = 0u;
  *(_OWORD *)(v30 + 16) = 0u;
  uint64_t v31 = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession__state;
  unint64_t v77 = 0xC000000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<BackgroundSession.State, Never>);
  swift_allocObject();
  *(void *)(a12 + v31) = CurrentValueSubject.init(_:)();
  *(void *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_session) = 0;
  uint64_t v32 = MEMORY[0x1E4FBC870];
  *(void *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_suspensionAssertions) = MEMORY[0x1E4FBC870];
  *(void *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_cancellables) = v32;
  uint64_t v33 = a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionProvider;
  *(void *)(v33 + 32) = 0;
  *(_OWORD *)uint64_t v33 = 0u;
  *(_OWORD *)(v33 + 16) = 0u;
  uint64_t v34 = a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionSuspensionController;
  *(void *)(v34 + 32) = 0;
  *(_OWORD *)uint64_t v34 = 0u;
  *(_OWORD *)(v34 + 16) = 0u;
  uint64_t v35 = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_applicationLauncher;
  *(void *)(a12 + v35) = objc_msgSend(objc_allocWithZone((Class)CPApplicationLauncher), sel_init);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_id, v73, v21);
  int64_t v36 = v68;
  *(void *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity) = v68;
  *(void *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_members) = a3;
  uint64_t v37 = (void *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_localMember);
  uint64_t v38 = v70;
  *uint64_t v37 = a4;
  v37[1] = v38;
  outlined init with copy of UserNotificationCenter(v74, a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_service);
  unint64_t v39 = v69;
  *(void *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_serverBag) = v69;
  swift_beginAccess();
  *(void *)(v29 + 8) = &protocol witness table for BackgroundSessionManager;
  swift_unknownObjectWeakAssign();
  swift_beginAccess();
  uint64_t v70 = a4;
  uint64_t v40 = v55;
  swift_unknownObjectRetain();
  id v60 = v39;
  id v41 = v36;
  uint64_t v67 = a3;
  swift_bridgeObjectRetain();
  outlined assign with copy of IDSGroupSessionProviderProtocol?(v72, v33);
  swift_endAccess();
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  unint64_t v75 = 0;
  unint64_t v76 = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  unint64_t v75 = 0xD000000000000012;
  unint64_t v76 = 0x80000001B115F650;
  id v62 = v41;
  id v42 = objc_msgSend(v41, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  v43._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  id v44 = *(void (**)(uint64_t, void *))(v22 + 8);
  unint64_t v68 = (void *)(v22 + 8);
  uint64_t v69 = (void *)v21;
  uint64_t v57 = v44;
  v44((uint64_t)v24, (void *)v21);
  static DispatchQoS.unspecified.getter();
  unint64_t v75 = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, void (*)(char *, uint64_t, uint64_t, uint64_t)))(v63 + 104))(v61, *MEMORY[0x1E4FBCC58], v64);
  *(void *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_queue) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  id v45 = v66;
  *(void *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_featureFlags) = v66;
  uint64_t v46 = v40;
  *(void *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_presenceController) = v40;
  uint64_t v47 = type metadata accessor for TaskPriority();
  uint64_t v48 = (uint64_t)v65;
  uint64_t v64 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56);
  v64(v65, 1, 1, v47);
  uint64_t v49 = (void *)swift_allocObject();
  v49[2] = 0;
  v49[3] = 0;
  v49[4] = a12;
  id v50 = v45;
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC7Combine14AnyCancellableC_Tgm5(v48, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:), (uint64_t)v49);
  type metadata accessor for AnyCancellable();
  swift_allocObject();
  swift_retain();
  AnyCancellable.init(_:)();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  id v66 = v50;
  if (objc_msgSend(v50, sel_fastSyncPresenceSeparationEnabled))
  {

    swift_release();
    swift_unknownObjectRelease();

    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v46 + 112))(v67);
    v64((char *)v48, 1, 1, v47);
    uint64_t v51 = swift_allocObject();
    swift_weakInit();
    uint64_t v52 = (void *)swift_allocObject();
    v52[2] = 0;
    v52[3] = 0;
    v52[4] = v46;
    v52[5] = v51;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v48, (uint64_t)&async function pointer to partial apply for closure #3 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:), (uint64_t)v52);
    swift_allocObject();
    swift_retain();
    AnyCancellable.init(_:)();
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();

    swift_release();
    swift_unknownObjectRelease();

    swift_release();
    swift_release();
  }
  outlined destroy of UUID?(v72, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
  __swift_destroy_boxed_opaque_existential_1Tm(v74);
  v57(v73, v69);
  return a12;
}

uint64_t sub_1B0F8F580()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  swift_release();
  return MEMORY[0x1F4186498](v0, 116, 7);
}

uint64_t partial apply for closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:)()
{
  return closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:)(*(void **)(v0 + 16), *(char **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), (void *)(v0 + 56), *(void (**)(void *))(v0 + 96), *(void *)(v0 + 104), *(_DWORD *)(v0 + 112));
}

uint64_t sub_1B0F8F61C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return MEMORY[0x1F4186498](v0, v6 + 16, v5);
}

void partial apply for closure #1 in BackgroundSessionManager.leave(identifier:completion:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void **)(v0 + 16);
  uint64_t v4 = v0 + v2;
  uint64_t v5 = v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v6 = *(void (**)(void))v5;
  uint64_t v7 = *(void *)(v5 + 8);
  closure #1 in BackgroundSessionManager.leave(identifier:completion:)(v3, v4, v6, v7);
}

uint64_t sub_1B0F8F79C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, v6 + 8, v5);
}

void partial apply for closure #1 in BackgroundSessionManager.updateMembers(identifier:members:completion:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void **)(v0 + 16);
  uint64_t v5 = *(void *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v6 = *(void (**)(void))(v0 + v3);
  uint64_t v7 = *(void *)(v0 + v3 + 8);
  closure #1 in BackgroundSessionManager.updateMembers(identifier:members:completion:)(v4, v0 + v2, v6, v7, v5);
}

uint64_t sub_1B0F8F938()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in BackgroundSessionManager.sessionsDidUpdate()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in BackgroundSessionManager.sessionsDidUpdate()(a1, v4, v5, v7, v6);
}

void specialized Sequence.first(where:)(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for PresenceHostSession(0);
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type PresenceHostSession and conformance NSObject, (void (*)(uint64_t))type metadata accessor for PresenceHostSession);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v17;
    uint64_t v16 = v18;
    uint64_t v2 = v19;
    uint64_t v3 = v20;
    unint64_t v4 = v21;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v16 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  int64_t v15 = (unint64_t)(v2 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v4)
  {
    uint64_t v8 = (v4 - 1) & v4;
    unint64_t v9 = __clz(__rbit64(v4)) | (v3 << 6);
    uint64_t v10 = v3;
    goto LABEL_29;
  }
  int64_t v12 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v12 < v15)
    {
      unint64_t v13 = *(void *)(v16 + 8 * v12);
      uint64_t v10 = v3 + 1;
      if (v13) {
        goto LABEL_28;
      }
      uint64_t v10 = v3 + 2;
      if (v3 + 2 >= v15) {
        goto LABEL_33;
      }
      unint64_t v13 = *(void *)(v16 + 8 * v10);
      if (v13) {
        goto LABEL_28;
      }
      uint64_t v10 = v3 + 3;
      if (v3 + 3 >= v15) {
        goto LABEL_33;
      }
      unint64_t v13 = *(void *)(v16 + 8 * v10);
      if (v13) {
        goto LABEL_28;
      }
      uint64_t v10 = v3 + 4;
      if (v3 + 4 >= v15) {
        goto LABEL_33;
      }
      unint64_t v13 = *(void *)(v16 + 8 * v10);
      if (v13)
      {
LABEL_28:
        uint64_t v8 = (v13 - 1) & v13;
        unint64_t v9 = __clz(__rbit64(v13)) + (v10 << 6);
LABEL_29:
        id v11 = *(id *)(*(void *)(v1 + 48) + 8 * v9);
        if (v11)
        {
          do
          {
            if (static UUID.== infix(_:_:)()) {
              break;
            }

            uint64_t v3 = v10;
            unint64_t v4 = v8;
            if ((v1 & 0x8000000000000000) == 0) {
              goto LABEL_8;
            }
LABEL_10:
            if (!__CocoaSet.Iterator.next()()) {
              break;
            }
            type metadata accessor for PresenceHostSession(0);
            swift_unknownObjectRetain();
            swift_dynamicCast();
            id v11 = v22;
            swift_unknownObjectRelease();
            uint64_t v10 = v3;
            uint64_t v8 = v4;
          }
          while (v22);
        }
        goto LABEL_33;
      }
      uint64_t v10 = v3 + 5;
      if (v3 + 5 < v15)
      {
        unint64_t v13 = *(void *)(v16 + 8 * v10);
        if (!v13)
        {
          uint64_t v14 = v3 + 6;
          while (v15 != v14)
          {
            unint64_t v13 = *(void *)(v16 + 8 * v14++);
            if (v13)
            {
              uint64_t v10 = v14 - 1;
              goto LABEL_28;
            }
          }
          goto LABEL_33;
        }
        goto LABEL_28;
      }
    }
LABEL_33:
    outlined consume of [String : ()].Iterator._Variant();
    return;
  }
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  unsigned int v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;

  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type BackgroundSession and conformance BackgroundSession((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, (void (*)(uint64_t))type metadata accessor for ActivitySession);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v20;
    uint64_t v19 = v21;
    uint64_t v2 = v22;
    uint64_t v3 = v23;
    unint64_t v4 = v24;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v19 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  uint64_t v18 = (unint64_t)(v2 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v4)
  {
    uint64_t v8 = (v4 - 1) & v4;
    unint64_t v9 = __clz(__rbit64(v4)) | (v3 << 6);
    uint64_t v10 = v3;
    goto LABEL_29;
  }
  unint64_t v13 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v13 < v18)
    {
      uint64_t v14 = *(void *)(v19 + 8 * v13);
      uint64_t v10 = v3 + 1;
      if (v14) {
        goto LABEL_28;
      }
      uint64_t v10 = v3 + 2;
      if (v3 + 2 >= v18) {
        goto LABEL_33;
      }
      uint64_t v14 = *(void *)(v19 + 8 * v10);
      if (v14) {
        goto LABEL_28;
      }
      uint64_t v10 = v3 + 3;
      if (v3 + 3 >= v18) {
        goto LABEL_33;
      }
      uint64_t v14 = *(void *)(v19 + 8 * v10);
      if (v14) {
        goto LABEL_28;
      }
      uint64_t v10 = v3 + 4;
      if (v3 + 4 >= v18) {
        goto LABEL_33;
      }
      uint64_t v14 = *(void *)(v19 + 8 * v10);
      if (v14)
      {
LABEL_28:
        uint64_t v8 = (v14 - 1) & v14;
        unint64_t v9 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_29:
        int64_t v12 = *(id *)(*(void *)(v1 + 48) + 8 * v9);
        id v11 = v12;
        if (v12)
        {
          do
          {
            uint64_t v16 = (void *)(*(uint64_t (**)(void *))((*MEMORY[0x1E4FBC8C8] & *v11) + 0x2D0))(v12);
            uint64_t v17 = objc_msgSend(v16, sel_isSystemActivity);

            if (!v17) {
              break;
            }

            uint64_t v3 = v10;
            unint64_t v4 = v8;
            if ((v1 & 0x8000000000000000) == 0) {
              goto LABEL_8;
            }
LABEL_10:
            if (!__CocoaSet.Iterator.next()()) {
              break;
            }
            type metadata accessor for ActivitySession(0);
            swift_unknownObjectRetain();
            swift_dynamicCast();
            id v11 = v25;
            int64_t v12 = (void *)swift_unknownObjectRelease();
            uint64_t v10 = v3;
            uint64_t v8 = v4;
          }
          while (v25);
        }
        goto LABEL_33;
      }
      uint64_t v10 = v3 + 5;
      if (v3 + 5 < v18)
      {
        uint64_t v14 = *(void *)(v19 + 8 * v10);
        if (!v14)
        {
          int64_t v15 = v3 + 6;
          while (v18 != v15)
          {
            uint64_t v14 = *(void *)(v19 + 8 * v15++);
            if (v14)
            {
              uint64_t v10 = v15 - 1;
              goto LABEL_28;
            }
          }
          goto LABEL_33;
        }
        goto LABEL_28;
      }
    }
LABEL_33:
    outlined consume of [String : ()].Iterator._Variant();
    return;
  }
  __break(1u);
}

uint64_t specialized Sequence.first(where:)(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for BackgroundSession(0);
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2(&lazy protocol witness table cache variable for type BackgroundSession and conformance BackgroundSession, (void (*)(uint64_t))type metadata accessor for BackgroundSession);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v18;
    uint64_t v17 = v19;
    uint64_t v3 = v20;
    uint64_t v4 = v21;
    unint64_t v5 = v22;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v17 = a1 + 56;
    uint64_t v3 = ~v6;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v5 = v8 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v4 = 0;
  }
  int64_t v16 = (unint64_t)(v3 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v5)
  {
    uint64_t v9 = (v5 - 1) & v5;
    unint64_t v10 = __clz(__rbit64(v5)) | (v4 << 6);
    uint64_t v11 = v4;
    goto LABEL_29;
  }
  int64_t v13 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    if (v13 < v16)
    {
      unint64_t v14 = *(void *)(v17 + 8 * v13);
      uint64_t v11 = v4 + 1;
      if (v14) {
        goto LABEL_28;
      }
      uint64_t v11 = v4 + 2;
      if (v4 + 2 < v16)
      {
        unint64_t v14 = *(void *)(v17 + 8 * v11);
        if (v14) {
          goto LABEL_28;
        }
        uint64_t v11 = v4 + 3;
        if (v4 + 3 < v16)
        {
          unint64_t v14 = *(void *)(v17 + 8 * v11);
          if (v14) {
            goto LABEL_28;
          }
          uint64_t v11 = v4 + 4;
          if (v4 + 4 < v16)
          {
            unint64_t v14 = *(void *)(v17 + 8 * v11);
            if (v14) {
              goto LABEL_28;
            }
            uint64_t v11 = v4 + 5;
            if (v4 + 5 < v16)
            {
              unint64_t v14 = *(void *)(v17 + 8 * v11);
              if (!v14)
              {
                uint64_t v15 = v4 + 6;
                while (v16 != v15)
                {
                  unint64_t v14 = *(void *)(v17 + 8 * v15++);
                  if (v14)
                  {
                    uint64_t v11 = v15 - 1;
                    goto LABEL_28;
                  }
                }
                goto LABEL_33;
              }
LABEL_28:
              uint64_t v9 = (v14 - 1) & v14;
              unint64_t v10 = __clz(__rbit64(v14)) + (v11 << 6);
LABEL_29:
              uint64_t v12 = *(void *)(*(void *)(v1 + 48) + 8 * v10);
              swift_retain();
              if (v12)
              {
                do
                {
                  if (static UUID.== infix(_:_:)()) {
                    break;
                  }
                  uint64_t result = swift_release();
                  uint64_t v4 = v11;
                  unint64_t v5 = v9;
                  if ((v1 & 0x8000000000000000) == 0) {
                    goto LABEL_8;
                  }
LABEL_10:
                  if (!__CocoaSet.Iterator.next()()) {
                    goto LABEL_33;
                  }
                  type metadata accessor for BackgroundSession(0);
                  swift_unknownObjectRetain();
                  swift_dynamicCast();
                  uint64_t v12 = v23;
                  swift_unknownObjectRelease();
                  uint64_t v11 = v4;
                  uint64_t v9 = v5;
                }
                while (v23);
              }
              goto LABEL_34;
            }
          }
        }
      }
    }
LABEL_33:
    uint64_t v12 = 0;
LABEL_34:
    outlined consume of [String : ()].Iterator._Variant();
    return v12;
  }
  __break(1u);
  return result;
}

uint64_t specialized Set.subscript.getter(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    return *(void *)(*(void *)(a4 + 48) + 16 * result);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t BackgroundSessionManager.sessions.didset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  int64_t v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[0] = *(void *)&v3[OBJC_IVAR____TtC14CopresenceCore24BackgroundSessionManager_queue];
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v3;
  aBlock[4] = a2;
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = a3;
  uint64_t v15 = _Block_copy(aBlock);
  int64_t v16 = v3;
  static DispatchQoS.unspecified.getter();
  v18[1] = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release();
}

unint64_t outlined copy of BackgroundSession.State(unint64_t result)
{
  unint64_t v1 = result >> 62;
  if (!(result >> 62) || v1 == 2 || v1 == 1) {
    return swift_retain();
  }
  return result;
}

unint64_t outlined consume of BackgroundSession.State(unint64_t result)
{
  unint64_t v1 = result >> 62;
  if (!(result >> 62) || v1 == 2 || v1 == 1) {
    return swift_release();
  }
  return result;
}

uint64_t sub_1B0F90398()
{
  outlined consume of BackgroundSession.State(*(void *)(v0 + 24));
  swift_release();
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #1 in BackgroundSessionManager.backgroundSession(_:stateChanged:)()
{
  return closure #1 in BackgroundSessionManager.backgroundSession(_:stateChanged:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1B0F903EC()
{
  return objectdestroy_36Tm(MEMORY[0x1E4FBC8D0]);
}

uint64_t partial apply for closure #1 in BackgroundSessionManager.backgroundSession(_:didRejectKeyRecoveryRequest:)()
{
  return closure #1 in BackgroundSessionManager.backgroundSession(_:didRejectKeyRecoveryRequest:)(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1B0F9040C()
{
  swift_release();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #1 in BackgroundSessionManager.backgroundSession(_:didReceiveUpdatedUnknownParticipantList:)()
{
  return closure #1 in BackgroundSessionManager.backgroundSession(_:didReceiveUpdatedUnknownParticipantList:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1B0F904B8@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xA0))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B0F90514(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xA8);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t sub_1B0F90588@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xB8))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0F905E4(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xC0);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B0F90648@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xD0))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0F906A4(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xD8);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B0F90708(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xE8))();
}

uint64_t sub_1B0F9075C(uint64_t a1, void **a2)
{
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
  return (*(uint64_t (**)(unsigned char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xF0))(v4);
}

uint64_t dispatch thunk of BackGroundSessionManagerDelegate.didUpdateActivitySessions(backgroundSessionManager:activitySessions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of BackGroundSessionManagerDelegate.didRejectKeyRecoveryRequest(backgroundSessionManager:onSession:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of BackGroundSessionManagerDelegate.didReceiveUpdatedUnknownParticipantList(backgroundSessionManager:onSession:unknownParticipants:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

unsigned char *storeEnumTagSinglePayload for BackgroundSessionManagerError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B0F908D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BackgroundSessionManagerError()
{
  return &type metadata for BackgroundSessionManagerError;
}

uint64_t method lookup function for BackgroundSessionManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for BackgroundSessionManager);
}

uint64_t dispatch thunk of BackgroundSessionManager.delegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of BackgroundSessionManager.delegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of BackgroundSessionManager.delegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of BackgroundSessionManager.sessions.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of BackgroundSessionManager.sessions.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of BackgroundSessionManager.sessions.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of BackgroundSessionManager.presenceSessions.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of BackgroundSessionManager.presenceSessions.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of BackgroundSessionManager.presenceSessions.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of BackgroundSessionManager.mockIDSGroupSessionProvider.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of BackgroundSessionManager.mockIDSGroupSessionProvider.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of BackgroundSessionManager.mockIDSGroupSessionProvider.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of BackgroundSessionManager.__allocating_init(queue:featureFlags:serviceProvider:personalPresenceControllerProvider:presenceControllerProvider:sessionSuspensionControllerProvider:)()
{
  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t dispatch thunk of BackgroundSessionManager.createPresenceController(for:queue:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of BackgroundSessionManager.createPresenceController(for:isCrossAccount:queue:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of BackgroundSessionManager.createService(for:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of BackgroundSessionManager.leave(identifier:completion:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of BackgroundSessionManager.updateMembers(identifier:members:completion:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of BackgroundSessionManager.sessionsDidUpdate()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of BackgroundSessionManager.updateShare(_:activityID:)(uint64_t a1, uint64_t a2)
{
  unsigned int v6 = *(int **)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x148);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return v9(a1, a2);
}

uint64_t partial apply for closure #1 in closure #1 in BackgroundSessionManager.sessionsDidUpdate()(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in closure #1 in BackgroundSessionManager.sessionsDidUpdate()(a1, a2, v6);
}

uint64_t sub_1B0F90F6C()
{
  return objectdestroy_36Tm(MEMORY[0x1E4FBC898]);
}

uint64_t partial apply for closure #2 in closure #1 in BackgroundSessionManager.sessionsDidUpdate()()
{
  return closure #2 in closure #1 in BackgroundSessionManager.sessionsDidUpdate()(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in BackgroundSessionManager.sessionsDidUpdate()(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[2] = a1;
  v5[3] = v4;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in closure #1 in BackgroundSessionManager.sessionsDidUpdate(), v4, 0);
}

uint64_t sub_1B0F91040()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSo38TUConversationActivitySessionContainerC_TG5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSo38TUConversationActivitySessionContainerC_TG5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSo38TUConversationActivitySessionContainerC_TG5Tu);
  return v6(a1, v4);
}

uint64_t partial apply for closure #1 in closure #1 in BackgroundSessionManager.updateMembers(identifier:members:completion:)()
{
  return static UUID.== infix(_:_:)() & 1;
}

uint64_t sub_1B0F91174()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t partial apply for closure #2 in closure #1 in BackgroundSessionManager.updateMembers(identifier:members:completion:)()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  long long v4 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_OWORD *)(v2 + 16) = v3;
  *(_OWORD *)(v2 + 32) = v4;
  return MEMORY[0x1F4188298](closure #2 in closure #1 in BackgroundSessionManager.updateMembers(identifier:members:completion:), v3, 0);
}

uint64_t sub_1B0F91270()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for closure #2 in closure #1 in BackgroundSessionManager.leave(identifier:completion:)()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(void *)(v3 + 80) = v2;
  *(_OWORD *)(v3 + 64) = v4;
  return MEMORY[0x1F4188298](closure #2 in closure #1 in BackgroundSessionManager.leave(identifier:completion:), 0, 0);
}

uint64_t sub_1B0F9136C()
{
  swift_unknownObjectRelease();
  swift_release();

  swift_release();
  return MEMORY[0x1F4186498](v0, 80, 7);
}

uint64_t partial apply for closure #4 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:)()
{
  int v2 = *(_DWORD *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v0 + 32);
  long long v6 = *(_OWORD *)(v0 + 56);
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(void *)(v4 + 168) = v3;
  *(_OWORD *)(v4 + 152) = v6;
  *(_DWORD *)(v4 + 192) = v2;
  *(_OWORD *)(v4 + 136) = v5;
  return MEMORY[0x1F4188298](closure #4 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:), 0, 0);
}

uint64_t sub_1B0F91490()
{
  unint64_t v1 = *(void *)(v0 + 16);
  if ((~v1 & 0xF000000000000007) != 0) {
    outlined consume of BackgroundSession.State(v1);
  }
  return MEMORY[0x1F4186498](v0, 24, 7);
}

unint64_t partial apply for closure #2 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:)(unint64_t a1)
{
  return closure #2 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:)(a1, v1);
}

uint64_t sub_1B0F914DC()
{
  swift_unknownObjectRelease();

  swift_release();
  swift_release();
  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t partial apply for closure #3 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:)()
{
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(void *)(v4 + 40) = v3;
  *(void *)(v4 + 48) = v2;
  *(_OWORD *)(v4 + 24) = v5;
  return MEMORY[0x1F4188298](closure #3 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:), v2, 0);
}

unint64_t outlined consume of BackgroundSession.State?(unint64_t result)
{
  if ((~result & 0xF000000000000007) != 0) {
    return outlined consume of BackgroundSession.State(result);
  }
  return result;
}

unint64_t outlined copy of BackgroundSession.State?(unint64_t result)
{
  if ((~result & 0xF000000000000007) != 0) {
    return outlined copy of BackgroundSession.State(result);
  }
  return result;
}

uint64_t sub_1B0F91610()
{
  return objectdestroy_36Tm(MEMORY[0x1E4FBC8D0]);
}

uint64_t objectdestroy_36Tm(void (*a1)(void))
{
  a1(*(void *)(v1 + 24));
  return MEMORY[0x1F4186498](v1, 32, 7);
}

uint64_t partial apply for closure #1 in closure #4 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:)()
{
  return closure #1 in closure #4 in closure #2 in BackgroundSessionManager.begin(request:bundleIdentifier:processIdentifier:completion:)(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1B0F91680()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t outlined assign with copy of IDSGroupSessionProviderProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return closure #1 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)(a1, v4, v5, v6);
}

void partial apply for closure #2 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)()
{
}

uint64_t sub_1B0F917B8()
{
  swift_weakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B0F917F0()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #3 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #3 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)(a1, v4, v5, v7, v6);
}

void partial apply for closure #4 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)()
{
}

uint64_t sub_1B0F91900()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B0F91938()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PresenceHostSession.State, Never>>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_release();
  return MEMORY[0x1F4186498](v0, v6 + 8, v5);
}

uint64_t partial apply for closure #2 in closure #1 in BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PresenceHostSession.State, Never>>)
                 - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v9 = v1 + v5;
  uint64_t v10 = *(void *)(v1 + v6);
  uint64_t v11 = *(void *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *uint64_t v12 = v2;
  v12[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #2 in closure #1 in BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:)(a1, v7, v8, v9, v10, v11);
}

uint64_t sub_1B0F91B6C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #1 in closure #2 in closure #1 in BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:)()
{
  closure #1 in closure #2 in closure #1 in BackgroundSessionManager.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:)(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t partial apply for closure #2 in PresenceController.init<A>(dataSource:)()
{
  return closure #2 in PresenceController.init<A>(dataSource:)();
}

uint64_t sub_1B0F91BBC()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in BackgroundSessionManager.backgroundSessionDidUpdate(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 16)) + 0x140))();
}

uint64_t partial apply for closure #1 in closure #1 in BackgroundSessionManager.leave(identifier:completion:)()
{
  return partial apply for closure #1 in closure #1 in BackgroundSessionManager.updateMembers(identifier:members:completion:)() & 1;
}

uint64_t protocol witness for static XPCInterface.isConnectionEntitled(_:) in conformance ActivitySessionInterface()
{
  return specialized static XPCInterface.isConnectionEntitled(_:)() & 1;
}

uint64_t specialized static XPCInterface.isConnectionEntitled(_:)()
{
  char v0 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(4);
  if (v0 == 2) {
    char v0 = NSXPCConnection.isEntitledToUseGameCenter.getter();
  }
  char v1 = v0;
  char v2 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(3);
  if (v1 & 1) != 0 || (v2) {
    return 1;
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v3 = (unsigned char *)static NSXPCConnection.TestingOverrides.default;
  swift_beginAccess();
  if (*v3) {
    return 1;
  }
  char v5 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(5);
  if (v5 == 2) {
    return v3[1];
  }
  else {
    return v5 & 1;
  }
}

uint64_t static XPCInterface.isConnectionEntitled(_:)()
{
  char v0 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(4);
  if (v0 == 2) {
    char v0 = NSXPCConnection.isEntitledToUseGameCenter.getter();
  }
  char v1 = v0;
  char v2 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(3);
  if (v1 & 1) != 0 || (v2) {
    return 1;
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v3 = (unsigned char *)static NSXPCConnection.TestingOverrides.default;
  swift_beginAccess();
  if (*v3) {
    return 1;
  }
  char v5 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(5);
  if (v5 == 2) {
    return v3[1];
  }
  else {
    return v5 & 1;
  }
}

{
  return static XPCInterface.isConnectionEntitled(_:)() & 1;
}

uint64_t specialized NSXPCConnection.value<A>(_:forEntitlement:)(char a1)
{
  LOBYTE(v7[0]) = a1;
  unint64_t v2 = Entitlement.rawValue.getter();
  uint64_t v3 = (void *)MEMORY[0x1B3EA1B00](v2);
  swift_bridgeObjectRelease();
  id v4 = objc_msgSend(v1, sel_valueForEntitlement_, v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v6, v7);
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  if (swift_dynamicCast()) {
    return v6;
  }
  else {
    return 2;
  }
}

{
  void *v1;
  unint64_t v2;
  void *v3;
  id v4;
  long long v6;
  _OWORD v7[2];

  LOBYTE(v7[0]) = a1;
  unint64_t v2 = Entitlement.rawValue.getter();
  uint64_t v3 = (void *)MEMORY[0x1B3EA1B00](v2);
  swift_bridgeObjectRelease();
  id v4 = objc_msgSend(v1, sel_valueForEntitlement_, v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v6, v7);
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if (swift_dynamicCast()) {
    return v6;
  }
  else {
    return 0;
  }
}

{
  void *v1;
  unint64_t v2;
  void *v3;
  id v4;
  long long v6;
  _OWORD v7[2];

  LOBYTE(v7[0]) = a1;
  unint64_t v2 = Entitlement.rawValue.getter();
  uint64_t v3 = (void *)MEMORY[0x1B3EA1B00](v2);
  swift_bridgeObjectRelease();
  id v4 = objc_msgSend(v1, sel_valueForEntitlement_, v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v6, v7);
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  if (swift_dynamicCast()) {
    return v6;
  }
  else {
    return 0;
  }
}

{
  void *v1;
  unint64_t v2;
  void *v3;
  id v4;
  long long v6;
  _OWORD v7[2];

  LOBYTE(v7[0]) = a1;
  unint64_t v2 = Entitlement.rawValue.getter();
  uint64_t v3 = (void *)MEMORY[0x1B3EA1B00](v2);
  swift_bridgeObjectRelease();
  id v4 = objc_msgSend(v1, sel_valueForEntitlement_, v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v6, v7);
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  if (swift_dynamicCast()) {
    return v6;
  }
  else {
    return 0;
  }
}

uint64_t getEnumTagSinglePayload for XPCIdentity(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB)
  {
    unsigned int v2 = a2 + 5;
    if (a2 + 5 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 5;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 5;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1B0F922E4);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 5;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  if (v7 >= 4) {
    unsigned int v8 = v7 - 3;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 >= 3) {
    return v8 - 2;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for XPCIdentity(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 5;
  if (a3 + 5 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFB) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v7 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x1B0F923CCLL);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for XPCIdentity(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 4) {
    return v1 - 3;
  }
  else {
    return 0;
  }
}

unsigned char *destructiveInjectEnumTag for XPCIdentity(unsigned char *result, int a2)
{
  if (a2) {
    *uint64_t result = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCIdentity()
{
  return &type metadata for XPCIdentity;
}

uint64_t dispatch thunk of static XPCInterface.identity.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static XPCInterface.hostObjectInterface.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static XPCInterface.clientObjectInterface.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static XPCInterface.isConnectionEntitled(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t XPCHostConnection.clientObject.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unsigned int v7 = &v13[-v6];
  id v8 = objc_msgSend(*(id *)(v1 + direct field offset for XPCHostConnection.connection), sel_remoteObjectProxy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  int v9 = swift_dynamicCast();
  uint64_t v10 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);
  if (v9)
  {
    uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
    v10(v7, 0, 1, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v11 + 32))(a1, v7, AssociatedTypeWitness);
  }
  else
  {
    v10(v7, 1, 1, AssociatedTypeWitness);
    uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
    __break(1u);
  }
  return result;
}

uint64_t XPCHostConnection.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + direct field offset for XPCHostConnection.id;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

id XPCHostConnection.connection.getter()
{
  return *(id *)(v0 + direct field offset for XPCHostConnection.connection);
}

id XPCHostConnection.queue.getter()
{
  return *(id *)(v0 + direct field offset for XPCHostConnection.queue);
}

uint64_t XPCHostConnection.bundleIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + direct field offset for XPCHostConnection.bundleIdentifier);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t XPCHostConnection.isEntitledToUsePublicAPI.getter()
{
  return *(unsigned __int8 *)(v0 + direct field offset for XPCHostConnection.isEntitledToUsePublicAPI);
}

uint64_t XPCHostConnection.isEntitledToUsePrivateAPI.getter()
{
  return *(unsigned __int8 *)(v0 + direct field offset for XPCHostConnection.isEntitledToUsePrivateAPI);
}

uint64_t XPCHostConnection.isEntitledToAccessAllSessions.getter()
{
  return *(unsigned __int8 *)(v0 + direct field offset for XPCHostConnection.isEntitledToAccessAllSessions);
}

uint64_t XPCHostConnection.isEntitledToForWebFallback.getter()
{
  return *(unsigned __int8 *)(v0 + direct field offset for XPCHostConnection.isEntitledToForWebFallback);
}

uint64_t XPCHostConnection.isEntitledToBypassSharePlayRestriction.getter()
{
  return *(unsigned __int8 *)(v0 + direct field offset for XPCHostConnection.isEntitledToBypassSharePlayRestriction);
}

uint64_t XPCHostConnection.definedSystemActivityIdentifiers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t XPCHostConnection.isEntitledToAccessUnaliasedIdentifiers.getter()
{
  return *(unsigned __int8 *)(v0 + direct field offset for XPCHostConnection.isEntitledToAccessUnaliasedIdentifiers);
}

uint64_t XPCHostConnection.isEntitledToUseGameCenter.getter()
{
  return *(unsigned __int8 *)(v0 + direct field offset for XPCHostConnection.isEntitledToUseGameCenter);
}

uint64_t XPCHostConnection.isEntitledToProvideCustomEndpoint.getter()
{
  return *(unsigned __int8 *)(v0 + direct field offset for XPCHostConnection.isEntitledToProvideCustomEndpoint);
}

uint64_t XPCHostConnection.hasScheduledInvalidation.getter()
{
  return *(unsigned __int8 *)(v0 + direct field offset for XPCHostConnection.hasScheduledInvalidation);
}

uint64_t XPCHostConnection.hasScheduledInvalidation.setter(uint64_t result)
{
  *(unsigned char *)(v1 + direct field offset for XPCHostConnection.hasScheduledInvalidation) = result;
  return result;
}

id @objc XPCHostConnection.description.getter(void *a1)
{
  id v1 = a1;
  uint64_t v2 = XPCHostConnection.description.getter();
  uint64_t v4 = v3;

  uint64_t v5 = (void *)MEMORY[0x1B3EA1B00](v2, v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t XPCHostConnection.description.getter()
{
  swift_getObjectType();
  _StringGuts.grow(_:)(84);
  v1._countAndFlagsBits = 60;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 32;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  _print_unlocked<A, B>(_:_:)();
  v4._object = (void *)0x80000001B115F670;
  v4._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v4);
  uint64_t v5 = *(void *)(v0 + direct field offset for XPCHostConnection.bundleIdentifier);
  uint64_t v6 = *(void **)(v0 + direct field offset for XPCHostConnection.bundleIdentifier + 8);
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0xD00000000000001ALL;
  v8._object = (void *)0x80000001B115F690;
  String.append(_:)(v8);
  if (*(unsigned char *)(v0 + direct field offset for XPCHostConnection.isEntitledToUsePublicAPI)) {
    uint64_t v9 = 1702195828;
  }
  else {
    uint64_t v9 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + direct field offset for XPCHostConnection.isEntitledToUsePublicAPI)) {
    unint64_t v10 = 0xE400000000000000;
  }
  else {
    unint64_t v10 = 0xE500000000000000;
  }
  unint64_t v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0xD00000000000001BLL;
  v12._object = (void *)0x80000001B115F6B0;
  String.append(_:)(v12);
  if (*(unsigned char *)(v0 + direct field offset for XPCHostConnection.isEntitledToUsePrivateAPI)) {
    uint64_t v13 = 1702195828;
  }
  else {
    uint64_t v13 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + direct field offset for XPCHostConnection.isEntitledToUsePrivateAPI)) {
    unint64_t v14 = 0xE400000000000000;
  }
  else {
    unint64_t v14 = 0xE500000000000000;
  }
  unint64_t v15 = v14;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 62;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  return 0;
}

char *XPCHostConnection.__allocating_init(connection:queue:)(void *a1, void *a2)
{
  id v5 = objc_allocWithZone(v2);
  return XPCHostConnection.init(connection:queue:)(a1, a2);
}

char *XPCHostConnection.init(connection:queue:)(void *a1, void *a2)
{
  Swift::String v3 = v2;
  uint64_t v6 = *MEMORY[0x1E4FBC8C8] & *v3;
  Swift::String v7 = (char *)v3 + direct field offset for XPCHostConnection.id;
  Swift::String v8 = v3;
  uint64_t v86 = v7;
  UUID.init()();
  *((unsigned char *)v8 + direct field offset for XPCHostConnection.hasScheduledInvalidation) = 0;
  *(void *)((char *)v8 + direct field offset for XPCHostConnection.identifiersWithPendingCoalescingBlocks) = MEMORY[0x1E4FBC870];
  *(void *)((char *)v8
            + direct field offset for XPCHostConnection.blockToExecuteAfterPendingCoalescingBlocksByIdentifier) = MEMORY[0x1E4FBC868];
  uint64_t v84 = direct field offset for XPCHostConnection.connection;
  *(void *)((char *)v8 + direct field offset for XPCHostConnection.connection) = a1;
  uint64_t v85 = direct field offset for XPCHostConnection.queue;
  *(void *)((char *)v8 + direct field offset for XPCHostConnection.queue) = a2;
  uint64_t v9 = a1;
  id v10 = a2;
  uint64_t v11 = NSXPCConnection.bundleIdentifier.getter();
  if (!v12)
  {
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Log.host);
    uint64_t v24 = v9;
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    log = v25;
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 138412290;
      id aBlock = v24;
      uint64_t v29 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v28 = v24;

      _os_log_impl(&dword_1B0DF7000, log, v26, "Denying connection %@ because it does not have a valid bundle identifier.", v27, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v28, -1, -1);
      MEMORY[0x1B3EA39E0](v27, -1, -1);

LABEL_24:
      uint64_t v39 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t))(*(void *)(v39 - 8) + 8))(v86, v39);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for XPCHostConnection();
      swift_deallocPartialClassInstance();
      return 0;
    }
LABEL_23:

    goto LABEL_24;
  }
  uint64_t v13 = v11;
  uint64_t v14 = v12;
  uint64_t v15 = *(void *)(v6 + 80);
  uint64_t v16 = *(void *)(v6 + 88);
  if (((*(uint64_t (**)(NSObject *, uint64_t, uint64_t))(v16 + 48))(v9, v15, v16) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Log.host);
    uint64_t v24 = v9;
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    log = v31;
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v82 = v10;
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 138412290;
      id aBlock = v24;
      uint64_t v35 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v34 = v24;

      _os_log_impl(&dword_1B0DF7000, v31, v32, "Denying connection %@ because it does not have valid entitlements.", v33, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v34, -1, -1);
      MEMORY[0x1B3EA39E0](v33, -1, -1);

      goto LABEL_24;
    }
    goto LABEL_23;
  }
  uint64_t v17 = (void *)((char *)v8 + direct field offset for XPCHostConnection.bundleIdentifier);
  *uint64_t v17 = v13;
  v17[1] = v14;
  char v18 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(4);
  if (v18 == 2) {
    char v18 = NSXPCConnection.isEntitledToUseGameCenter.getter();
  }
  char v19 = v18;
  char v20 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(3);
  if (v19 & 1) != 0 || (v20)
  {
    char v22 = 1;
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v21 = (char *)static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    char v22 = *v21;
  }
  *((unsigned char *)v8 + direct field offset for XPCHostConnection.isEntitledToUsePublicAPI) = v22;
  char v36 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(5);
  if (v36 == 2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v37 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    char v38 = *(unsigned char *)(v37 + 1);
  }
  else
  {
    char v38 = v36 & 1;
  }
  *((unsigned char *)v8 + direct field offset for XPCHostConnection.isEntitledToUsePrivateAPI) = v38;
  char v41 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(6);
  if (v41 == 2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v42 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    char v43 = *(unsigned char *)(v42 + 24);
  }
  else
  {
    char v43 = v41 & 1;
  }
  *((unsigned char *)v8 + direct field offset for XPCHostConnection.isEntitledToAccessAllSessions) = v43;
  char v44 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(7);
  if (v44 == 2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v45 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    char v46 = *(unsigned char *)(v45 + 25);
  }
  else
  {
    char v46 = v44 & 1;
  }
  *((unsigned char *)v8 + direct field offset for XPCHostConnection.isEntitledToForWebFallback) = v46;
  uint64_t v47 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(8);
  if (!v47)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v47 = swift_bridgeObjectRetain();
  }
  *(void *)((char *)v8 + direct field offset for XPCHostConnection.definedSystemActivityIdentifiers) = v47;
  char v48 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(9);
  if (v48 == 2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v49 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    char v50 = *(unsigned char *)(v49 + 40);
  }
  else
  {
    char v50 = v48 & 1;
  }
  *((unsigned char *)v8 + direct field offset for XPCHostConnection.isEntitledToAccessUnaliasedIdentifiers) = v50;
  *((unsigned char *)v8 + direct field offset for XPCHostConnection.isEntitledToUseGameCenter) = NSXPCConnection.isEntitledToUseGameCenter.getter() & 1;
  char v51 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(11);
  uint64_t v83 = (char *)v10;
  if (v51 == 2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v52 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    char v53 = *(unsigned char *)(v52 + 42);
  }
  else
  {
    char v53 = v51 & 1;
  }
  *((unsigned char *)v8 + direct field offset for XPCHostConnection.isEntitledToProvideCustomEndpoint) = v53;
  os_log_t loga = v9;
  *((unsigned char *)v8 + direct field offset for XPCHostConnection.isEntitledToBypassSharePlayRestriction) = specialized NSXPCConnection.value<A>(_:forEntitlement:)(14) & 1;

  v95.receiver = v8;
  v95.super_class = (Class)type metadata accessor for XPCHostConnection();
  uint64_t v40 = (char *)objc_msgSendSuper2(&v95, sel_init);
  uint64_t v54 = direct field offset for XPCHostConnection.connection;
  uint64_t v55 = *(void **)&v40[direct field offset for XPCHostConnection.connection];
  uint64_t v56 = v40;
  objc_msgSend(v55, sel_setExportedObject_, v56);
  uint64_t v57 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 32);
  id v58 = v55;
  uint64_t v59 = (void *)v57(v15, v16);
  objc_msgSend(v58, sel_setExportedInterface_, v59);

  id v60 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 40);
  id v61 = *(id *)&v40[v54];
  id v62 = (void *)v60(v15, v16);
  objc_msgSend(v61, sel_setRemoteObjectInterface_, v62);

  uint64_t v63 = *(void **)&v40[v54];
  objc_msgSend(v63, sel__setQueue_, *(void *)&v56[direct field offset for XPCHostConnection.queue]);
  uint64_t v64 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v65 = (void *)swift_allocObject();
  v65[2] = v15;
  v65[3] = v16;
  v65[4] = v64;
  uint64_t v93 = partial apply for closure #1 in XPCHostConnection.init(connection:queue:);
  uint64_t v94 = v65;
  id aBlock = (id)MEMORY[0x1E4F143A8];
  uint64_t v90 = 1107296256;
  uint64_t v91 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v92 = &block_descriptor_13;
  id v66 = _Block_copy(&aBlock);
  id v67 = v63;
  swift_release();
  objc_msgSend(v67, sel_setInterruptionHandler_, v66);
  _Block_release(v66);

  unint64_t v68 = *(void **)&v40[v54];
  uint64_t v69 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v70 = (void *)swift_allocObject();
  v70[2] = v15;
  v70[3] = v16;
  v70[4] = v69;
  uint64_t v93 = partial apply for closure #2 in XPCHostConnection.init(connection:queue:);
  uint64_t v94 = v70;
  id aBlock = (id)MEMORY[0x1E4F143A8];
  uint64_t v90 = 1107296256;
  uint64_t v91 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v92 = &block_descriptor_10_0;
  id v71 = _Block_copy(&aBlock);
  id v72 = v68;
  swift_release();
  objc_msgSend(v72, sel_setInvalidationHandler_, v71);
  _Block_release(v71);

  objc_msgSend(*(id *)&v40[v54], sel_resume);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v73 = type metadata accessor for Logger();
  __swift_project_value_buffer(v73, (uint64_t)static Log.host);
  uint64_t v74 = v56;
  unint64_t v75 = Logger.logObject.getter();
  os_log_type_t v76 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v75, v76))
  {
    unint64_t v77 = (uint8_t *)swift_slowAlloc();
    uint64_t v78 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v77 = 138412290;
    id aBlock = v74;
    unint64_t v79 = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v78 = v40;

    _os_log_impl(&dword_1B0DF7000, v75, v76, "Created %@", v77, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v78, -1, -1);
    MEMORY[0x1B3EA39E0](v77, -1, -1);
    id v80 = v83;
  }
  else
  {

    id v80 = v74;
  }

  return v40;
}

void closure #1 in XPCHostConnection.init(connection:queue:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x1B3EA3B30](v1);
  if (v2)
  {
    Swift::String v3 = (void *)v2;
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.host);
    id v5 = v3;
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      Swift::String v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = (void *)swift_slowAlloc();
      *(_DWORD *)Swift::String v8 = 138412290;
      id v10 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v9 = v3;

      _os_log_impl(&dword_1B0DF7000, v6, v7, "Connection interrupted for host connection: %@", v8, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v9, -1, -1);
      MEMORY[0x1B3EA39E0](v8, -1, -1);
    }
    else
    {

      uint64_t v6 = v5;
    }

    objc_msgSend(*(id *)((char *)&v5->isa + direct field offset for XPCHostConnection.connection), sel_invalidate);
  }
}

void closure #2 in XPCHostConnection.init(connection:queue:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x1B3EA3B30](v1);
  if (v2)
  {
    Swift::String v3 = (void *)v2;
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.host);
    id v5 = v3;
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      os_log_type_t type = v7;
      uint64_t v8 = swift_slowAlloc();
      uint64_t v9 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 138412546;
      id v10 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v9 = v3;

      *(_WORD *)(v8 + 12) = 2112;
      uint64_t v13 = *(Class *)((char *)&v10->isa + direct field offset for XPCHostConnection.queue);
      id v11 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v9[1] = v13;

      _os_log_impl(&dword_1B0DF7000, v6, type, "Connection invalidated for host connection: %@ on queue = %@", (uint8_t *)v8, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v9, -1, -1);
      MEMORY[0x1B3EA39E0](v8, -1, -1);
    }
    else
    {

      uint64_t v6 = v5;
    }

    (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & (uint64_t)v5->isa) + 0x138))();
  }
}

Swift::Void __swiftcall XPCHostConnection.destroyConnection()()
{
  uint64_t v1 = *(void **)(v0 + direct field offset for XPCHostConnection.connection);
  objc_msgSend(v1, sel_setExportedObject_, 0);
  objc_msgSend(v1, sel_setInvalidationHandler_, 0);
  objc_msgSend(v1, sel_setInterruptionHandler_, 0);
  objc_msgSend(v1, sel_invalidate);
}

void XPCHostConnection.withMessageCoalescing(byIdentifier:block:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  id v5 = v4;
  id v10 = (uint64_t *)&v4[direct field offset for XPCHostConnection.identifiersWithPendingCoalescingBlocks];
  swift_beginAccess();
  uint64_t v11 = *v10;
  swift_bridgeObjectRetain();
  char v12 = specialized Set.contains(_:)(a1, a2, v11);
  swift_bridgeObjectRelease();
  if (v12)
  {
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = a3;
    *(void *)(v13 + 24) = a4;
    uint64_t v14 = (Swift::Int *)&v5[direct field offset for XPCHostConnection.blockToExecuteAfterPendingCoalescingBlocksByIdentifier];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v22 = *v14;
    *uint64_t v14 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)_sIg_Ieg_TRTA_0, v13, a1, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v14 = v22;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_beginAccess();
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v22, a1, a2);
    swift_endAccess();
    uint64_t v16 = swift_bridgeObjectRelease();
    a3(v16);
    uint64_t v17 = *(void **)&v5[direct field offset for XPCHostConnection.connection];
    char v18 = (void *)swift_allocObject();
    void v18[2] = v5;
    v18[3] = a1;
    v18[4] = a2;
    aBlock[4] = partial apply for closure #1 in XPCHostConnection.withMessageCoalescing(byIdentifier:block:);
    aBlock[5] = v18;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_16_0;
    char v19 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    char v20 = v5;
    swift_release();
    objc_msgSend(v17, sel_scheduleSendBarrierBlock_, v19);
    _Block_release(v19);
  }
}

uint64_t specialized Set.contains(_:)(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) != 0)
  {
    id v3 = a1;
    char v4 = __CocoaSet.contains(_:)();

    return v4 & 1;
  }
  if (!*(void *)(a2 + 16)
    || (Swift::Int v6 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40)),
        uint64_t v7 = -1 << *(unsigned char *)(a2 + 32),
        unint64_t v8 = v6 & ~v7,
        uint64_t v9 = a2 + 56,
        ((*(void *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0))
  {
LABEL_11:
    char v12 = 0;
    return v12 & 1;
  }
  type metadata accessor for ActivitySession(0);
  id v10 = *(id *)(*(void *)(a2 + 48) + 8 * v8);
  char v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
    uint64_t v13 = ~v7;
    unint64_t v14 = (v8 + 1) & v13;
    if ((*(void *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      do
      {
        id v15 = *(id *)(*(void *)(a2 + 48) + 8 * v14);
        char v12 = static NSObject.== infix(_:_:)();

        if (v12) {
          break;
        }
        unint64_t v14 = (v14 + 1) & v13;
      }
      while (((*(void *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
      return v12 & 1;
    }
    goto LABEL_11;
  }
  char v12 = 1;
  return v12 & 1;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      char v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t closure #1 in XPCHostConnection.withMessageCoalescing(byIdentifier:block:)(void *a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  specialized Set._Variant.remove(_:)(a2, a3);
  swift_endAccess();
  swift_bridgeObjectRelease();
  Swift::Int v6 = (void *)((char *)a1
                + direct field offset for XPCHostConnection.blockToExecuteAfterPendingCoalescingBlocksByIdentifier);
  uint64_t result = swift_beginAccess();
  uint64_t v8 = *v6;
  if (*(void *)(v8 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if (v10)
    {
      long long v13 = *(_OWORD *)(*(void *)(v8 + 56) + 16 * v9);
      swift_retain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = v13;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      uint64_t v12 = specialized Dictionary._Variant.removeValue(forKey:)(a2, a3);
      swift_endAccess();
      swift_bridgeObjectRelease();
      _sxRi_zRi0_zlyytIseghHr_SgWOe(v12);
      (*(void (**)(uint64_t, uint64_t, uint64_t (*)(), uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x140))(a2, a3, partial apply for thunk for @escaping @callee_guaranteed () -> (@out ()), v11);
      return swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void XPCHostConnection.scheduleInvalidation(_:)(uint64_t a1, uint64_t a2)
{
  if ((v2[direct field offset for XPCHostConnection.hasScheduledInvalidation] & 1) == 0)
  {
    v2[direct field offset for XPCHostConnection.hasScheduledInvalidation] = 1;
    id v5 = *(void **)&v2[direct field offset for XPCHostConnection.connection];
    Swift::Int v6 = (void *)swift_allocObject();
    v6[2] = v2;
    v6[3] = a1;
    v6[4] = a2;
    v9[4] = partial apply for closure #1 in XPCHostConnection.scheduleInvalidation(_:);
    v9[5] = v6;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1107296256;
    v9[2] = thunk for @escaping @callee_guaranteed () -> ();
    v9[3] = &block_descriptor_25;
    uint64_t v7 = _Block_copy(v9);
    uint64_t v8 = v2;
    swift_retain();
    swift_release();
    objc_msgSend(v5, sel_scheduleSendBarrierBlock_, v7);
    _Block_release(v7);
  }
}

void closure #1 in XPCHostConnection.scheduleInvalidation(_:)(unsigned char *a1, uint64_t (*a2)(void))
{
  a1[direct field offset for XPCHostConnection.hasScheduledInvalidation] = 0;
  if (a2())
  {
    id v3 = *(void **)&a1[direct field offset for XPCHostConnection.connection];
    objc_msgSend(v3, sel_invalidate);
  }
  else
  {
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.host);
    char v10 = a1;
    id v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 138412290;
      unint64_t v9 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v8 = a1;

      _os_log_impl(&dword_1B0DF7000, v5, v6, "No longer invalidating scheduled invalidation for client %@", v7, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v8, -1, -1);
      MEMORY[0x1B3EA39E0](v7, -1, -1);
    }
    else
    {
    }
  }
}

id XPCHostConnection.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void XPCHostConnection.init()()
{
}

void @objc XPCHostConnection.init()()
{
}

id XPCHostConnection.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for XPCHostConnection();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc XPCHostConnection.__ivar_destroyer(uint64_t a1)
{
  uint64_t v2 = a1 + direct field offset for XPCHostConnection.id;
  uint64_t v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Identifiable.id.getter in conformance XPCHostConnection<A>@<X0>(uint64_t a1@<X8>)
{
  return XPCHostConnection.id.getter(a1);
}

uint64_t XPCHostConnection.isInCallUI.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B1138A70;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v2;
  id v3 = (id)TUPreferredFaceTimeBundleIdentifier();
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  *(void *)(inited + 48) = v4;
  *(void *)(inited + 56) = v6;
  char v7 = specialized Sequence<>.contains(_:)(*(void *)(v0 + direct field offset for XPCHostConnection.bundleIdentifier), *(void *)(v0 + direct field offset for XPCHostConnection.bundleIdentifier + 8), (void *)inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v7 & 1;
}

uint64_t type metadata accessor for XPCHostConnection()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1B0F94974()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B0F949AC()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 40, 7);
}

void partial apply for closure #1 in XPCHostConnection.init(connection:queue:)()
{
  closure #1 in XPCHostConnection.init(connection:queue:)(*(void *)(v0 + 32));
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

void partial apply for closure #2 in XPCHostConnection.init(connection:queue:)()
{
  closure #2 in XPCHostConnection.init(connection:queue:)(*(void *)(v0 + 32));
}

uint64_t sub_1B0F94A04()
{
  return objectdestroy_12Tm(MEMORY[0x1E4FBC898]);
}

uint64_t partial apply for closure #1 in XPCHostConnection.withMessageCoalescing(byIdentifier:block:)()
{
  return closure #1 in XPCHostConnection.withMessageCoalescing(byIdentifier:block:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1B0F94A28()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B0F94A60()
{
  return objectdestroy_12Tm(MEMORY[0x1E4FBC8D0]);
}

uint64_t objectdestroy_12Tm(void (*a1)(void))
{
  a1(*(void *)(v1 + 32));
  return MEMORY[0x1F4186498](v1, 40, 7);
}

void partial apply for closure #1 in XPCHostConnection.scheduleInvalidation(_:)()
{
  closure #1 in XPCHostConnection.scheduleInvalidation(_:)(*(unsigned char **)(v0 + 16), *(uint64_t (**)(void))(v0 + 24));
}

void specialized XPCHostConnection.init()()
{
}

uint64_t type metadata completion function for XPCHostConnection()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F) {
    return swift_initClassMetadata2();
  }
  return result;
}

uint64_t method lookup function for XPCHostConnection(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for XPCHostConnection);
}

uint64_t dispatch thunk of XPCHostConnection.__allocating_init(connection:queue:)()
{
  return (*(uint64_t (**)(void))(v0 + 296))();
}

uint64_t dispatch thunk of XPCHostConnection.destroyConnection()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of XPCHostConnection.handleHostConnectionInvalidated()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of XPCHostConnection.withMessageCoalescing(byIdentifier:block:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of XPCHostConnection.scheduleInvalidation(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x148))();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@out ())()
{
  return thunk for @escaping @callee_guaranteed () -> (@out ())(*(uint64_t (**)(void))(v0 + 16));
}

BOOL static ActivityAuthorizationError.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void ActivityAuthorizationError.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int ActivityAuthorizationError.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

id ActivityAuthorizationManager.neighborhoodActivityConduit.getter()
{
  uint64_t v1 = OBJC_IVAR___CPActivityAuthorizationManager____lazy_storage___neighborhoodActivityConduit;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR___CPActivityAuthorizationManager____lazy_storage___neighborhoodActivityConduit);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR___CPActivityAuthorizationManager____lazy_storage___neighborhoodActivityConduit);
  }
  else
  {
    id v4 = objc_msgSend(self, sel_sharedInstance);
    id v5 = objc_msgSend(v4, sel_neighborhoodActivityConduit);

    uint64_t v6 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v5;
    id v3 = v5;

    uint64_t v2 = 0;
  }
  id v7 = v2;
  return v3;
}

id ActivityAuthorizationManager.queue.getter()
{
  return *(id *)(v0 + OBJC_IVAR___CPActivityAuthorizationManager_queue);
}

id ActivityAuthorizationManager.appPolicyManager.getter()
{
  return *(id *)(v0 + OBJC_IVAR___CPActivityAuthorizationManager_appPolicyManager);
}

uint64_t ActivityAuthorizationManager.audioRoutePolicyManager.getter()
{
  return swift_unknownObjectRetain();
}

id ActivityAuthorizationManager.__allocating_init(dataSource:notificationCenter:queue:appPolicyManager:audioRoutePolicyManager:featureFlags:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = *(void *)(a2 + 24);
  uint64_t v12 = *(void *)(a2 + 32);
  uint64_t v14 = __swift_mutable_project_boxed_opaque_existential_1(a2, v13);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v16 = swift_getObjectType();
  id v17 = specialized ActivityAuthorizationManager.__allocating_init(dataSource:notificationCenter:queue:appPolicyManager:audioRoutePolicyManager:featureFlags:)(a1, v14, a3, a4, a5, a6, v19, ObjectType, v13, v16, v12);
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  return v17;
}

id ActivityAuthorizationManager.init(dataSource:notificationCenter:queue:appPolicyManager:audioRoutePolicyManager:featureFlags:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = *(void *)(a2 + 24);
  uint64_t v12 = *(void *)(a2 + 32);
  uint64_t v14 = __swift_mutable_project_boxed_opaque_existential_1(a2, v13);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v17 + 16))(v16);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v19 = swift_getObjectType();
  id v20 = specialized ActivityAuthorizationManager.init(dataSource:notificationCenter:queue:appPolicyManager:audioRoutePolicyManager:featureFlags:)(a1, (uint64_t)v16, a3, a4, a5, a6, v22[1], ObjectType, v13, v19, v12);
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  return v20;
}

id ActivityAuthorizationManager.__allocating_init(dataSource:queue:appPolicyManager:)(void *a1, void *a2, void *a3)
{
  id v4 = v3;
  id v8 = objc_allocWithZone(v4);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v9 = one-time initialization token for shared;
  id v10 = (id)static IMUserNotificationCenter.shared;
  if (v9 != -1) {
    swift_once();
  }
  uint64_t v11 = (void *)static CPAudioRoutePolicyManager.shared;
  id v12 = objc_allocWithZone((Class)CPFeatureFlags);
  id v13 = v11;
  id v14 = objc_msgSend(v12, sel_init);
  id v15 = specialized ActivityAuthorizationManager.init(dataSource:notificationCenter:queue:appPolicyManager:audioRoutePolicyManager:featureFlags:)(a1, (uint64_t)v10, a2, a3, v13, v14, (char *)objc_allocWithZone(v4));
  swift_unknownObjectRelease();

  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v15;
}

id ActivityAuthorizationManager.init(dataSource:queue:appPolicyManager:)(void *a1, void *a2, void *a3)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v7 = one-time initialization token for shared;
  id v8 = (id)static IMUserNotificationCenter.shared;
  if (v7 != -1) {
    swift_once();
  }
  uint64_t v9 = (void *)static CPAudioRoutePolicyManager.shared;
  id v10 = objc_allocWithZone((Class)CPFeatureFlags);
  id v11 = v9;
  id v12 = objc_msgSend(v10, sel_init);
  id v13 = specialized ActivityAuthorizationManager.init(dataSource:notificationCenter:queue:appPolicyManager:audioRoutePolicyManager:featureFlags:)(a1, (uint64_t)v8, a2, a3, v11, v12, (char *)objc_allocWithZone(ObjectType));
  swift_unknownObjectRelease();

  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v13;
}

id ActivityAuthorizationManager.__allocating_init(dataSource:queue:)(void *a1, void *a2)
{
  id v3 = v2;
  id v6 = objc_allocWithZone(v3);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v7 = one-time initialization token for shared;
  id v8 = (id)static IMUserNotificationCenter.shared;
  if (v7 != -1) {
    swift_once();
  }
  uint64_t v9 = one-time initialization token for shared;
  id v10 = (id)static CPApplicationPolicyManager.shared;
  if (v9 != -1) {
    swift_once();
  }
  id v11 = (void *)static CPAudioRoutePolicyManager.shared;
  id v12 = objc_allocWithZone((Class)CPFeatureFlags);
  id v13 = v11;
  id v14 = objc_msgSend(v12, sel_init);
  id v15 = specialized ActivityAuthorizationManager.init(dataSource:notificationCenter:queue:appPolicyManager:audioRoutePolicyManager:featureFlags:)(a1, (uint64_t)v8, a2, v10, v13, v14, (char *)objc_allocWithZone(v3));
  swift_unknownObjectRelease();

  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v15;
}

id ActivityAuthorizationManager.init(dataSource:queue:)(void *a1, void *a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v5 = one-time initialization token for shared;
  id v6 = (id)static IMUserNotificationCenter.shared;
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v7 = one-time initialization token for shared;
  id v8 = (id)static CPApplicationPolicyManager.shared;
  if (v7 != -1) {
    swift_once();
  }
  uint64_t v9 = (void *)static CPAudioRoutePolicyManager.shared;
  id v10 = objc_allocWithZone((Class)CPFeatureFlags);
  id v11 = v9;
  id v12 = objc_msgSend(v10, sel_init);
  id v13 = specialized ActivityAuthorizationManager.init(dataSource:notificationCenter:queue:appPolicyManager:audioRoutePolicyManager:featureFlags:)(a1, (uint64_t)v6, a2, v8, v11, v12, (char *)objc_allocWithZone(ObjectType));
  swift_unknownObjectRelease();

  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v13;
}

void ActivityAuthorizationManager.requestAuthorizationForApplication(withBundleIdentifier:preparing:overrides:currentScreenShareAttributes:completionHandler:)(uint64_t a1, void *a2, char a3, void *a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t), uint64_t a7)
{
  id v8 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B113A080;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v16;
  *(void *)(inited + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 56) = v17;
  *(void *)(inited + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 72) = v18;
  uint64_t v19 = MEMORY[0x1B3EA3B30](&v8[OBJC_IVAR___CPActivityAuthorizationManager_dataSource]);
  if (!v19)
  {
    swift_setDeallocating();
    swift_arrayDestroy();
    a6(0, 0);
    return;
  }
  id v20 = (void *)v19;
  uint64_t v83 = a4;
  swift_getObjectType();
  if (!objc_msgSend(v20, sel_allActiveConversationParticipantsSupportSharePlay))
  {
    swift_setDeallocating();
    swift_arrayDestroy();
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Log.host);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      os_log_type_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v32 = 0;
      _os_log_impl(&dword_1B0DF7000, v30, v31, "At least one of the active participants is on an older SharePlay protocol version. Not allowing SharePlay", v32, 2u);
      MEMORY[0x1B3EA39E0](v32, -1, -1);
    }

    a6(0, 0);
    objc_msgSend(v20, sel_displaySharePlayUnableToStartAlert);
    goto LABEL_30;
  }
  uint64_t v82 = a6;
  char v21 = specialized Sequence<>.contains(_:)(a1, (uint64_t)a2, (void *)inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  if (v21)
  {
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Log.host);
    swift_bridgeObjectRetain_n();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      uint64_t v86 = v26;
      *(_DWORD *)uint64_t v25 = 136315138;
      v85[1] = (uint64_t)a2;
      swift_bridgeObjectRetain();
      uint64_t v27 = String.init<A>(reflecting:)();
      v85[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v23, v24, "Bypassing user authorization for activity started from %s", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v26, -1, -1);
      MEMORY[0x1B3EA39E0](v25, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v82(1, 0);
LABEL_30:
    swift_unknownObjectRelease();
    return;
  }
  CPConversationManagerDataSource.activeConversation.getter();
  uint64_t v34 = v82;
  if (!v33)
  {
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Log.host);
    swift_bridgeObjectRetain_n();
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      char v41 = (uint8_t *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      v85[0] = v42;
      *(_DWORD *)char v41 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v86 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, (unint64_t)a2, v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B0DF7000, v39, v40, "Not allowing activation from %s because there is no active conversation.", v41, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v42, -1, -1);
      MEMORY[0x1B3EA39E0](v41, -1, -1);

      v82(0, 0);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      v82(0, 0);
    }
    goto LABEL_30;
  }
  id v81 = v33;
  uint64_t v35 = *(void *)&v8[OBJC_IVAR___CPActivityAuthorizationManager_lock];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v35 + 16));
  swift_beginAccess();
  specialized Set._Variant.remove(_:)(a1, (uint64_t)a2);
  uint64_t v37 = v36;
  swift_endAccess();
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v35 + 16));
  if (v37 && (a3 & 1) == 0)
  {
    v82(1, 0);
LABEL_44:
    swift_unknownObjectRelease();

    return;
  }
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v35 + 16));
  char v43 = v8[OBJC_IVAR___CPActivityAuthorizationManager_isDisplayingAuthorizationRequest];
  v8[OBJC_IVAR___CPActivityAuthorizationManager_isDisplayingAuthorizationRequest] = 1;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v35 + 16));
  if (v43)
  {
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    __swift_project_value_buffer(v44, (uint64_t)static Log.host);
    swift_bridgeObjectRetain_n();
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      uint64_t v48 = swift_slowAlloc();
      v85[0] = v48;
      *(_DWORD *)uint64_t v47 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v86 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, (unint64_t)a2, v85);
      uint64_t v34 = v82;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B0DF7000, v45, v46, "Not allowing activation from %s because an authorization prompt is already being displayed", v47, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v48, -1, -1);
      MEMORY[0x1B3EA39E0](v47, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    lazy protocol witness table accessor for type ActivityAuthorizationError and conformance ActivityAuthorizationError();
    uint64_t v63 = (void *)swift_allocError();
    unsigned char *v64 = 3;
    v34(0, (uint64_t)v63);

    goto LABEL_44;
  }
  uint64_t v49 = swift_allocObject();
  swift_unknownObjectWeakInit();
  char v50 = (void *)swift_allocObject();
  v50[2] = v49;
  v50[3] = v82;
  unint64_t v79 = v50;
  v50[4] = a7;
  swift_retain_n();
  uint64_t v80 = v49;
  swift_retain();
  char v51 = v81;
  unsigned __int8 v52 = TUConversation.hasLocalActivitySession(forBundleIdentifier:)(a1, (uint64_t)a2);
  if (v83
    && *((unsigned char *)v83 + OBJC_IVAR___CPAuthorizationRequestOverrides_promptCondition)
    && (*((unsigned char *)v83 + OBJC_IVAR___CPAuthorizationRequestOverrides_promptCondition) == 1 || (v52 & 1) == 0))
  {
    unsigned __int8 v78 = v52;
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v65 = type metadata accessor for Logger();
    __swift_project_value_buffer(v65, (uint64_t)static Log.host);
    id v66 = v83;
    swift_bridgeObjectRetain_n();
    id v67 = v66;
    unint64_t v68 = Logger.logObject.getter();
    os_log_type_t v69 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v68, v69))
    {
      uint64_t v70 = swift_slowAlloc();
      uint64_t v77 = swift_slowAlloc();
      v85[0] = v77;
      *(_DWORD *)uint64_t v70 = 136315650;
      LOBYTE(v86) = v67[OBJC_IVAR___CPAuthorizationRequestOverrides_promptCondition];
      uint64_t v71 = String.init<A>(reflecting:)();
      uint64_t v86 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v72, v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v70 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v86 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, (unint64_t)a2, v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v70 + 22) = 1024;
      LODWORD(v86) = v78 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B0DF7000, v68, v69, "Prompting to start activity due to override %s; bundleID %s has existing session? %{BOOL}d",
        (uint8_t *)v70,
        0x1Cu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v77, -1, -1);
      MEMORY[0x1B3EA39E0](v70, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v73 = swift_allocObject();
    *(void *)(v73 + 16) = partial apply for closure #3 in ActivityAuthorizationManager.requestAuthorizationForApplication(withBundleIdentifier:preparing:overrides:currentScreenShareAttributes:completionHandler:);
    *(void *)(v73 + 24) = v79;
    *(void *)(v73 + 32) = v8;
    *(void *)(v73 + 40) = a1;
    *(void *)(v73 + 48) = a2;
    *(void *)(v73 + 56) = v81;
    *(unsigned char *)(v73 + 64) = a3 & 1;
    *(void *)(v73 + 72) = a5;
    *(void *)(v73 + 80) = v83;
    swift_unknownObjectRetain();
    uint64_t v74 = v67;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t v75 = v8;
    id v76 = v81;
    ActivityAuthorizationManager.deferAuthorizationRequestToUser(forApplicationWithBundleIdentifier:onConversation:preparing:overrides:completionHandler:)(a1, a2, v76, a3 & 1, v83, (uint64_t)partial apply for closure #1 in promptToStart #1 () in ActivityAuthorizationManager.requestAuthorizationForApplication(withBundleIdentifier:preparing:overrides:currentScreenShareAttributes:completionHandler:), v73);
    swift_unknownObjectRelease();

    swift_release();
    swift_release();
    goto LABEL_51;
  }
  if (((*(uint64_t (**)(uint64_t, void *))((*MEMORY[0x1E4FBC8C8] & **(void **)&v8[OBJC_IVAR___CPActivityAuthorizationManager_appPolicyManager])
                                                   + 0x150))(a1, a2) & 1) == 0|| !objc_msgSend(*(id *)&v8[OBJC_IVAR___CPActivityAuthorizationManager_audioRoutePolicyManager], sel_sharePlaySupported))
  {
    uint64_t v59 = swift_allocObject();
    *(void *)(v59 + 16) = partial apply for closure #3 in ActivityAuthorizationManager.requestAuthorizationForApplication(withBundleIdentifier:preparing:overrides:currentScreenShareAttributes:completionHandler:);
    *(void *)(v59 + 24) = v79;
    *(void *)(v59 + 32) = v8;
    *(void *)(v59 + 40) = a1;
    *(void *)(v59 + 48) = a2;
    *(void *)(v59 + 56) = v81;
    *(unsigned char *)(v59 + 64) = a3 & 1;
    *(void *)(v59 + 72) = a5;
    *(void *)(v59 + 80) = v83;
    swift_unknownObjectRetain();
    id v60 = v83;
    swift_bridgeObjectRetain();
    swift_retain();
    id v61 = v8;
    id v62 = v81;
    ActivityAuthorizationManager.deferAuthorizationRequestToUser(forApplicationWithBundleIdentifier:onConversation:preparing:overrides:completionHandler:)(a1, a2, v62, a3 & 1, v83, (uint64_t)partial apply for closure #1 in promptToStart #1 () in ActivityAuthorizationManager.requestAuthorizationForApplication(withBundleIdentifier:preparing:overrides:currentScreenShareAttributes:completionHandler:), v59);
    swift_unknownObjectRelease();

    swift_release();
    swift_release();
LABEL_51:
    swift_release();
    swift_release();
    return;
  }
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v53 = type metadata accessor for Logger();
  __swift_project_value_buffer(v53, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  uint64_t v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v54, v55))
  {
    uint64_t v56 = (uint8_t *)swift_slowAlloc();
    uint64_t v57 = swift_slowAlloc();
    v85[0] = v57;
    *(_DWORD *)uint64_t v56 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v86 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, (unint64_t)a2, v85);
    uint64_t v34 = v82;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v54, v55, "Skipping confirmation prompt as sharing is enabled for: %s", v56, 0xCu);
    swift_arrayDestroy();
    uint64_t v58 = v57;
    char v51 = v81;
    MEMORY[0x1B3EA39E0](v58, -1, -1);
    MEMORY[0x1B3EA39E0](v56, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_retain();
  swift_retain();
  specialized ActivityAuthorizationManager.confirmActivityAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:preparing:currentScreenShareAttributes:overrides:completionHandler:)(a1, a2, v51, a3 & 1, (uint64_t)v83, v8, v80, v34, a7);
  swift_unknownObjectRelease();

  swift_release();
  swift_release_n();
  swift_release_n();
}

void CPConversationManagerDataSource.activeConversation.getter()
{
  id v1 = objc_msgSend(v0, sel_conversationsByUUID);
  type metadata accessor for UUID();
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v3 = v2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(v2 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v8 = 0;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    id v14 = *(id *)(*(void *)(v2 + 56) + 8 * i);
    if (objc_msgSend(v14, sel_state) == (id)3)
    {
LABEL_26:
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }

    if (v6) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v11 >= v7) {
      goto LABEL_26;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v7) {
        goto LABEL_26;
      }
      unint64_t v12 = *(void *)(v3 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v7) {
          goto LABEL_26;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v7) {
            goto LABEL_26;
          }
          unint64_t v12 = *(void *)(v3 + 8 * v8);
          if (!v12)
          {
            int64_t v8 = v11 + 4;
            if (v11 + 4 >= v7) {
              goto LABEL_26;
            }
            unint64_t v12 = *(void *)(v3 + 8 * v8);
            if (!v12) {
              break;
            }
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v12 - 1) & v12;
  }
  int64_t v13 = v11 + 5;
  if (v13 >= v7) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v3 + 8 * v13);
  if (v12)
  {
    int64_t v8 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v8 >= v7) {
      goto LABEL_26;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_22;
    }
  }
LABEL_29:
  __break(1u);
}

uint64_t closure #3 in ActivityAuthorizationManager.requestAuthorizationForApplication(withBundleIdentifier:preparing:overrides:currentScreenShareAttributes:completionHandler:)(char a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  uint64_t v7 = a3 + 16;
  swift_beginAccess();
  uint64_t v8 = MEMORY[0x1B3EA3B30](v7);
  if (v8)
  {
    unint64_t v9 = (void *)v8;
    uint64_t v10 = *(void *)(v8 + OBJC_IVAR___CPActivityAuthorizationManager_lock);
    swift_retain();

    os_unfair_lock_lock(*(os_unfair_lock_t *)(v10 + 16));
    swift_beginAccess();
    int64_t v11 = (unsigned char *)MEMORY[0x1B3EA3B30](v7);
    if (v11)
    {
      v11[OBJC_IVAR___CPActivityAuthorizationManager_isDisplayingAuthorizationRequest] = 0;
    }
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 16));
    swift_release();
  }
  return a4(a1 & 1, a2);
}

uint64_t ActivityAuthorizationManager.deferAuthorizationRequestToUser(forApplicationWithBundleIdentifier:onConversation:preparing:overrides:completionHandler:)(uint64_t a1, void *a2, void *a3, char a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v65 = a6;
  uint64_t v66 = a7;
  uint64_t v63 = a5;
  uint64_t v13 = type metadata accessor for UUID();
  unint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v64 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  id v17 = a3;
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  int v20 = v19;
  BOOL v21 = os_log_type_enabled(v18, v19);
  uint64_t v61 = a1;
  if (v21)
  {
    uint64_t v22 = swift_slowAlloc();
    uint64_t v62 = v13;
    uint64_t v23 = v22;
    uint64_t v58 = (void *)swift_slowAlloc();
    uint64_t v59 = swift_slowAlloc();
    uint64_t v68 = v59;
    *(_DWORD *)uint64_t v23 = 136315394;
    unint64_t v60 = v14;
    swift_bridgeObjectRetain();
    uint64_t v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, (unint64_t)a2, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v23 + 12) = 2112;
    int v57 = v20;
    uint64_t v67 = (uint64_t)v17;
    char v24 = a4;
    uint64_t v25 = v8;
    id v26 = v17;
    unint64_t v14 = v60;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v27 = v58;
    void *v58 = v17;

    uint64_t v8 = v25;
    a4 = v24;
    _os_log_impl(&dword_1B0DF7000, v18, (os_log_type_t)v57, "Deferring activity authorization request to user for bundleIdentifier: %s on conversation: %@.", (uint8_t *)v23, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v27, -1, -1);
    uint64_t v28 = v59;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v28, -1, -1);
    uint64_t v29 = v23;
    uint64_t v13 = v62;
    MEMORY[0x1B3EA39E0](v29, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v30 = *(void **)&v8[OBJC_IVAR___CPActivityAuthorizationManager_audioRoutePolicyManager];
  if ((objc_msgSend(v30, sel_sharePlaySupported) & 1) != 0
    || (id v31 = objc_msgSend(v30, sel_pickedRoute)) == 0)
  {
    uint64_t v41 = v61;
    unint64_t v60 = specialized ActivityAuthorizationManager.authorizationRequestDisplayInformation(forApplicationWithBundleIdentifier:onNearbyDeviceHandle:preparing:overrides:)(v61, (uint64_t)a2, 0, a4 & 1, (uint64_t)v63);
  }
  else
  {
    os_log_type_t v32 = v31;
    id v33 = objc_msgSend(v31, sel_name);
    id v34 = v17;
    uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    char v36 = a4;
    unint64_t v37 = v14;
    uint64_t v39 = v38;

    char v40 = v36 & 1;
    uint64_t v41 = v61;
    id v17 = v34;
    unint64_t v60 = specialized ActivityAuthorizationManager.unsupportedAudioRouteDisplayInformation(forApplicationWithBundleIdentifier:onNearbyDeviceHandle:preparing:routeName:)(v61, (uint64_t)a2, v40, v35, v39);
    unint64_t v14 = v37;
    swift_bridgeObjectRelease();
  }
  uint64_t v42 = *(void *)&v8[OBJC_IVAR___CPActivityAuthorizationManager_notificationCenter + 32];
  uint64_t v62 = *(void *)&v8[OBJC_IVAR___CPActivityAuthorizationManager_notificationCenter + 24];
  uint64_t v63 = __swift_project_boxed_opaque_existential_1(&v8[OBJC_IVAR___CPActivityAuthorizationManager_notificationCenter], v62);
  id v43 = objc_msgSend(v17, sel_groupUUID);
  uint64_t v44 = v64;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  uint64_t v68 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v69 = v45;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v44, v13);
  v46._countAndFlagsBits = 46;
  v46._object = (void *)0xE100000000000000;
  String.append(_:)(v46);
  v47._countAndFlagsBits = v41;
  v47._object = a2;
  String.append(_:)(v47);
  uint64_t v48 = v68;
  uint64_t v49 = v69;
  char v50 = (void *)swift_allocObject();
  v50[2] = v8;
  v50[3] = v41;
  uint64_t v51 = v65;
  uint64_t v52 = v66;
  v50[4] = a2;
  v50[5] = v51;
  v50[6] = v52;
  uint64_t v53 = *(void (**)(uint64_t, uint64_t, uint64_t, void *, unint64_t, uint64_t, uint64_t (*)(uint64_t), void *, uint64_t, uint64_t))(v42 + 8);
  swift_bridgeObjectRetain();
  uint64_t v54 = v8;
  swift_retain();
  v53(v48, v49, v41, a2, v60, 1, partial apply for closure #1 in ActivityAuthorizationManager.deferAuthorizationRequestToUser(forApplicationWithBundleIdentifier:onConversation:preparing:overrides:completionHandler:), v50, v62, v42);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

id TUConversation.hasLocalActivitySession(forBundleIdentifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  id v6 = objc_msgSend(v3, sel_activitySessions);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
  lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject();
  uint64_t v7 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  id v8 = specialized Sequence.max(by:)(v7);
  swift_bridgeObjectRelease();
  if (v8)
  {
    id v9 = objc_msgSend(v8, sel_activity);
    id v10 = objc_msgSend(v9, sel_bundleIdentifier);

    if (v10)
    {
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;

      if (v11 == a1 && v13 == a2)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        id v16 = 0;
        if ((v15 & 1) == 0) {
          goto LABEL_13;
        }
      }
      id v16 = objc_msgSend(v8, sel_isLocallyInitiated);
    }
    else
    {
      id v16 = 0;
    }
LABEL_13:

    return v16;
  }
  return 0;
}

void ActivityAuthorizationManager.requestAuthorizationForApplicationLaunch(withActivity:completionHandler:)(void *a1, void (*a2)(void, void), uint64_t a3)
{
  uint64_t v4 = v3;
  id v8 = objc_msgSend(a1, sel_bundleIdentifier);
  if (!v8)
  {
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Log.host);
    id v19 = a1;
    int v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = a2;
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      char v24 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 138412290;
      uint64_t v32 = (uint64_t)v19;
      id v25 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *char v24 = v19;

      _os_log_impl(&dword_1B0DF7000, v20, v21, "Invalid bundleIdentifier for activity %@", v23, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v24, -1, -1);
      MEMORY[0x1B3EA39E0](v23, -1, -1);

      v22(0, 0);
      return;
    }

    goto LABEL_17;
  }
  id v9 = v8;
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  if (!MEMORY[0x1B3EA3B30](v4 + OBJC_IVAR___CPActivityAuthorizationManager_dataSource))
  {
    swift_bridgeObjectRelease();
LABEL_17:
    a2(0, 0);
    return;
  }
  swift_getObjectType();
  CPConversationManagerDataSource.activeConversation.getter();
  if (v13)
  {
    id v31 = v13;
    if (((*(uint64_t (**)(uint64_t, void *))((*MEMORY[0x1E4FBC8C8] & **(void **)(v4
                                                                                           + OBJC_IVAR___CPActivityAuthorizationManager_appPolicyManager))
                                                     + 0x150))(v10, v12) & 1) != 0&& objc_msgSend(*(id *)(v4 + OBJC_IVAR___CPActivityAuthorizationManager_audioRoutePolicyManager), sel_sharePlaySupported))
    {
      swift_bridgeObjectRelease();
      if (one-time initialization token for host != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      __swift_project_value_buffer(v14, (uint64_t)static Log.host);
      char v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        id v17 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v17 = 0;
        _os_log_impl(&dword_1B0DF7000, v15, v16, "Bypassing authorization since application is already authorized.", v17, 2u);
        MEMORY[0x1B3EA39E0](v17, -1, -1);
      }

      a2(1, 0);
    }
    else
    {
      ActivityAuthorizationManager.confirmActivityLaunchAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:withActivity:completionHandler:)(v10, v12, v31, a1, (uint64_t)a2, a3);
      swift_bridgeObjectRelease();
    }
    swift_unknownObjectRelease();
  }
  else
  {
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Log.host);
    swift_bridgeObjectRetain();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      uint64_t v32 = v30;
      *(_DWORD *)uint64_t v29 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, (unint64_t)v12, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B0DF7000, v27, v28, "Not allowing activation from %s because there is no active conversation.", v29, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v30, -1, -1);
      MEMORY[0x1B3EA39E0](v29, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    a2(0, 0);
    swift_unknownObjectRelease();
  }
}

uint64_t ActivityAuthorizationManager.confirmActivityLaunchAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:withActivity:completionHandler:)(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v31 = a6;
  uint64_t v29 = a4;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  char v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)&v7[OBJC_IVAR___CPActivityAuthorizationManager_notificationCenter + 32];
  uint64_t v30 = *(void *)&v7[OBJC_IVAR___CPActivityAuthorizationManager_notificationCenter + 24];
  uint64_t v32 = __swift_project_boxed_opaque_existential_1(&v7[OBJC_IVAR___CPActivityAuthorizationManager_notificationCenter], v30);
  id v17 = objc_msgSend(a3, sel_groupUUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v34 = v18;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v19._countAndFlagsBits = 46;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = a1;
  v20._object = a2;
  String.append(_:)(v20);
  uint64_t v21 = v34;
  uint64_t v28 = v33;
  unint64_t v22 = specialized static ActivityAuthorizationManager.notificationDisplayInformation(audioRoutePolicyManager:activity:conversation:)(*(void **)&v7[OBJC_IVAR___CPActivityAuthorizationManager_audioRoutePolicyManager], v29, a3);
  uint64_t v23 = (void *)swift_allocObject();
  _OWORD v23[2] = v7;
  v23[3] = a1;
  v23[4] = a2;
  v23[5] = a5;
  v23[6] = v31;
  char v24 = *(void (**)(uint64_t, uint64_t, uint64_t, void *, unint64_t, uint64_t, uint64_t (*)(uint64_t), void *, uint64_t, uint64_t))(v16 + 8);
  id v25 = v7;
  swift_bridgeObjectRetain();
  swift_retain();
  v24(v28, v21, a1, a2, v22, 1, partial apply for closure #1 in ActivityAuthorizationManager.confirmActivityLaunchAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:withActivity:completionHandler:), v23, v30, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

void closure #1 in ActivityAuthorizationManager.deferAuthorizationRequestToUser(forApplicationWithBundleIdentifier:onConversation:preparing:overrides:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t, void *))
{
  if (a1 == 2)
  {
    uint64_t v9 = 0;
    goto LABEL_5;
  }
  if (a1 == 1)
  {
    objc_msgSend(*(id *)(a2 + OBJC_IVAR___CPActivityAuthorizationManager_audioRoutePolicyManager), sel_switchToSpeakerRouteIfNecessary);
    v8._countAndFlagsBits = a3;
    v8._object = a4;
    ActivityAuthorizationManager.setAuthorization(_:for:)(1, v8);
    uint64_t v9 = 1;
LABEL_5:
    a5(v9, 0);
    return;
  }
  lazy protocol witness table accessor for type ActivityAuthorizationError and conformance ActivityAuthorizationError();
  uint64_t v10 = (void *)swift_allocError();
  *uint64_t v11 = 0;
  a5(0, v10);
}

Swift::Void __swiftcall ActivityAuthorizationManager.setAuthorization(_:for:)(Swift::Bool _, Swift::String a2)
{
  uint64_t v3 = v2;
  object = a2._object;
  uint64_t countAndFlagsBits = a2._countAndFlagsBits;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  Swift::String v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = v11;
    *(_DWORD *)uint64_t v10 = 67109378;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 8) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v8, v9, "Setting authorization: %{BOOL}d for identifier: %s", (uint8_t *)v10, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v11, -1, -1);
    MEMORY[0x1B3EA39E0](v10, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(Swift::Bool, uint64_t, void *))((*MEMORY[0x1E4FBC8C8] & **(void **)(v3
                                                                                             + OBJC_IVAR___CPActivityAuthorizationManager_appPolicyManager))
                                                       + 0x178))(_, countAndFlagsBits, object);
}

void closure #1 in ActivityAuthorizationManager.confirmActivityAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:preparing:currentScreenShareAttributes:overrides:completionHandler:)(uint64_t a1, uint64_t a2, Swift::String a3, char a4, void (*a5)(uint64_t, void *))
{
  if (a1)
  {
    lazy protocol witness table accessor for type ActivityAuthorizationError and conformance ActivityAuthorizationError();
    id v6 = (void *)swift_allocError();
    *uint64_t v7 = 1;
    a5(0, v6);
  }
  else
  {
    object = a3._object;
    Swift::Int countAndFlagsBits = a3._countAndFlagsBits;
    ActivityAuthorizationManager.setAuthorization(_:for:)(1, a3);
    if (a4)
    {
      uint64_t v12 = *(void *)(a2 + OBJC_IVAR___CPActivityAuthorizationManager_lock);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v12 + 16));
      swift_beginAccess();
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v13, countAndFlagsBits, (Swift::Int)object);
      swift_endAccess();
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 16));
    }
    a5(1, 0);
  }
}

void closure #1 in ActivityAuthorizationManager.confirmActivityLaunchAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:withActivity:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t, void *))
{
  if (a1)
  {
    lazy protocol witness table accessor for type ActivityAuthorizationError and conformance ActivityAuthorizationError();
    id v6 = (void *)swift_allocError();
    *uint64_t v7 = 0;
    a5(0, v6);
  }
  else
  {
    objc_msgSend(*(id *)(a2 + OBJC_IVAR___CPActivityAuthorizationManager_audioRoutePolicyManager), sel_switchToSpeakerRouteIfNecessary);
    v10._Swift::Int countAndFlagsBits = a3;
    v10._object = a4;
    ActivityAuthorizationManager.setAuthorization(_:for:)(1, v10);
    a5(1, 0);
  }
}

id ActivityAuthorizationManager.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void ActivityAuthorizationManager.init()()
{
}

id ActivityAuthorizationManager.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void ActivityAuthorizationManager.conversationManager(_:conversationChanged:)(uint64_t a1, void *a2)
{
}

id specialized Sequence.max(by:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v52 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v52 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v52);
  uint64_t v51 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  char v50 = (char *)&v42 - v7;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    a1 = v55;
    uint64_t v8 = v56;
    uint64_t v10 = v57;
    uint64_t v9 = v58;
    unint64_t v11 = v59;
    if (v55 < 0)
    {
      uint64_t v38 = v58;
      uint64_t v45 = v56;
      uint64_t v39 = __CocoaSet.Iterator.next()();
      if (!v39) {
        goto LABEL_58;
      }
      uint64_t v43 = v2;
      uint64_t v54 = v39;
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v15 = v60;
      swift_unknownObjectRelease();
      int v53 = 0;
      uint64_t v14 = v38;
      unint64_t v12 = v11;
      if (!v15) {
        goto LABEL_58;
      }
LABEL_6:
      uint64_t v47 = a1 & 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v48 = a1;
      uint64_t v42 = v10;
      int64_t v44 = (unint64_t)(v10 + 64) >> 6;
      uint64_t v49 = (void (**)(char *, uint64_t))(v4 + 8);
      uint64_t v46 = MEMORY[0x1E4FBC838] + 8;
      uint64_t v16 = v50;
      while (1)
      {
        if (v53)
        {
          if (v12)
          {
            uint64_t v17 = (v12 - 1) & v12;
            unint64_t v18 = __clz(__rbit64(v12)) | (v14 << 6);
            uint64_t v19 = v14;
          }
          else
          {
            int64_t v22 = v14 + 1;
            if (__OFADD__(v14, 1))
            {
              __break(1u);
LABEL_61:
              __break(1u);
              goto LABEL_58;
            }
            if (v22 >= v44) {
              goto LABEL_45;
            }
            unint64_t v23 = *(void *)(v45 + 8 * v22);
            uint64_t v19 = v14 + 1;
            if (!v23)
            {
              uint64_t v19 = v14 + 2;
              if (v14 + 2 >= v44) {
                goto LABEL_45;
              }
              unint64_t v23 = *(void *)(v45 + 8 * v19);
              if (!v23)
              {
                uint64_t v19 = v14 + 3;
                if (v14 + 3 >= v44) {
                  goto LABEL_45;
                }
                unint64_t v23 = *(void *)(v45 + 8 * v19);
                if (!v23)
                {
                  uint64_t v19 = v14 + 4;
                  if (v14 + 4 >= v44) {
                    goto LABEL_45;
                  }
                  unint64_t v23 = *(void *)(v45 + 8 * v19);
                  if (!v23)
                  {
                    uint64_t v19 = v14 + 5;
                    if (v14 + 5 >= v44) {
                      goto LABEL_45;
                    }
                    unint64_t v23 = *(void *)(v45 + 8 * v19);
                    if (!v23)
                    {
                      uint64_t v24 = v14 + 6;
                      while (v44 != v24)
                      {
                        unint64_t v23 = *(void *)(v45 + 8 * v24++);
                        if (v23)
                        {
                          uint64_t v19 = v24 - 1;
                          goto LABEL_28;
                        }
                      }
LABEL_45:
                      outlined consume of [String : ()].Iterator._Variant();
                      return v15;
                    }
                  }
                }
              }
            }
LABEL_28:
            uint64_t v17 = (v23 - 1) & v23;
            unint64_t v18 = __clz(__rbit64(v23)) + (v19 << 6);
          }
          id v21 = *(id *)(*(void *)(v48 + 48) + 8 * v18);
          if (!v21) {
            goto LABEL_45;
          }
        }
        else
        {
          uint64_t v20 = __CocoaSet.Iterator.next()();
          if (!v20) {
            goto LABEL_45;
          }
          uint64_t v54 = v20;
          type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
          swift_unknownObjectRetain();
          swift_dynamicCast();
          id v21 = v60;
          swift_unknownObjectRelease();
          uint64_t v19 = v14;
          uint64_t v17 = v12;
          if (!v21) {
            goto LABEL_45;
          }
        }
        id v25 = v15;
        id v26 = objc_msgSend(v15, sel_timestamp, v42);
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        id v27 = objc_msgSend(v21, sel_timestamp);
        uint64_t v28 = v51;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        LOBYTE(v27) = static Date.< infix(_:_:)();
        uint64_t v29 = *v49;
        uint64_t v30 = v28;
        uint64_t v31 = v52;
        (*v49)(v30, v52);
        v29(v16, v31);
        if (v27)
        {

          id v15 = v21;
          uint64_t v14 = v19;
          unint64_t v12 = v17;
        }
        else
        {

          uint64_t v14 = v19;
          unint64_t v12 = v17;
          id v15 = v25;
        }
      }
    }
    if (v59) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v32 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v8 = a1 + 56;
    uint64_t v10 = ~v32;
    uint64_t v33 = -v32;
    if (v33 < 64) {
      uint64_t v34 = ~(-1 << v33);
    }
    else {
      uint64_t v34 = -1;
    }
    unint64_t v11 = v34 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v9 = 0;
    if (v11)
    {
LABEL_4:
      uint64_t v45 = v8;
      uint64_t v43 = v2;
      unint64_t v12 = (v11 - 1) & v11;
      unint64_t v13 = __clz(__rbit64(v11)) | (v9 << 6);
      uint64_t v14 = v9;
LABEL_5:
      id v15 = *(id *)(*(void *)(a1 + 48) + 8 * v13);
      int v53 = 1;
      if (!v15) {
        goto LABEL_58;
      }
      goto LABEL_6;
    }
  }
  int64_t v35 = v9 + 1;
  if (__OFADD__(v9, 1)) {
    goto LABEL_61;
  }
  int64_t v36 = (unint64_t)(v10 + 64) >> 6;
  if (v35 < v36)
  {
    unint64_t v37 = *(void *)(v8 + 8 * v35);
    uint64_t v14 = v9 + 1;
    if (!v37)
    {
      uint64_t v14 = v9 + 2;
      if (v9 + 2 >= v36) {
        goto LABEL_58;
      }
      unint64_t v37 = *(void *)(v8 + 8 * v14);
      if (!v37)
      {
        uint64_t v14 = v9 + 3;
        if (v9 + 3 >= v36) {
          goto LABEL_58;
        }
        unint64_t v37 = *(void *)(v8 + 8 * v14);
        if (!v37)
        {
          uint64_t v14 = v9 + 4;
          if (v9 + 4 >= v36) {
            goto LABEL_58;
          }
          unint64_t v37 = *(void *)(v8 + 8 * v14);
          if (!v37)
          {
            uint64_t v14 = v9 + 5;
            if (v9 + 5 >= v36) {
              goto LABEL_58;
            }
            unint64_t v37 = *(void *)(v8 + 8 * v14);
            if (!v37)
            {
              uint64_t v40 = v9 + 6;
              do
              {
                if (v36 == v40) {
                  goto LABEL_58;
                }
                unint64_t v37 = *(void *)(v8 + 8 * v40++);
              }
              while (!v37);
              uint64_t v14 = v40 - 1;
            }
          }
        }
      }
    }
    uint64_t v45 = v8;
    uint64_t v43 = v2;
    unint64_t v12 = (v37 - 1) & v37;
    unint64_t v13 = __clz(__rbit64(v37)) + (v14 << 6);
    goto LABEL_5;
  }
LABEL_58:
  outlined consume of [String : ()].Iterator._Variant();
  return 0;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  uint64_t v50 = a1;
  uint64_t v51 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  uint64_t v52 = v8;
  uint64_t v53 = 0;
  uint64_t v54 = v11 & v9;
  uint64_t v55 = a2;
  uint64_t v56 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()(&v48);
  uint64_t v12 = *((void *)&v48 + 1);
  if (!*((void *)&v48 + 1)) {
    goto LABEL_27;
  }
  uint64_t v13 = v48;
  outlined init with take of Any(v49, v47);
  uint64_t v14 = *(void **)a5;
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v12);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  char v20 = v15;
  if (v14[3] >= v19)
  {
    if (a4)
    {
      if (v15) {
        goto LABEL_12;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if (v20) {
        goto LABEL_12;
      }
    }
LABEL_14:
    uint64_t v24 = *(void **)a5;
    *(void *)(*(void *)a5 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    id v25 = (uint64_t *)(v24[6] + 16 * v16);
    *id v25 = v13;
    v25[1] = v12;
    outlined init with take of Any(v47, (_OWORD *)(v24[7] + 32 * v16));
    uint64_t v26 = v24[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    _OWORD v24[2] = v28;
LABEL_16:
    specialized LazyMapSequence.Iterator.next()(&v48);
    for (uint64_t i = *((void *)&v48 + 1); *((void *)&v48 + 1); uint64_t i = *((void *)&v48 + 1))
    {
      uint64_t v31 = v48;
      outlined init with take of Any(v49, v47);
      uint64_t v32 = *(void **)a5;
      unint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(v31, i);
      uint64_t v35 = v32[2];
      BOOL v36 = (v33 & 1) == 0;
      uint64_t v37 = v35 + v36;
      if (__OFADD__(v35, v36)) {
        goto LABEL_28;
      }
      char v38 = v33;
      if (v32[3] < v37)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, 1);
        unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v31, i);
        if ((v38 & 1) != (v40 & 1)) {
          goto LABEL_30;
        }
        unint64_t v34 = v39;
      }
      if (v38)
      {
        outlined init with copy of Any((uint64_t)v47, (uint64_t)v46);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v47);
        swift_bridgeObjectRelease();
        uint64_t v30 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + 32 * v34);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v30);
        outlined init with take of Any(v46, v30);
      }
      else
      {
        uint64_t v41 = *(void **)a5;
        *(void *)(*(void *)a5 + 8 * (v34 >> 6) + 64) |= 1 << v34;
        uint64_t v42 = (uint64_t *)(v41[6] + 16 * v34);
        uint64_t *v42 = v31;
        v42[1] = i;
        outlined init with take of Any(v47, (_OWORD *)(v41[7] + 32 * v34));
        uint64_t v43 = v41[2];
        BOOL v27 = __OFADD__(v43, 1);
        uint64_t v44 = v43 + 1;
        if (v27) {
          goto LABEL_29;
        }
        v41[2] = v44;
      }
      specialized LazyMapSequence.Iterator.next()(&v48);
    }
LABEL_27:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [String : ()].Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a4 & 1);
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v12);
  if ((v20 & 1) == (v22 & 1))
  {
    unint64_t v16 = v21;
    if ((v20 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_12:
    outlined init with copy of Any((uint64_t)v47, (uint64_t)v46);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v47);
    swift_bridgeObjectRelease();
    unint64_t v23 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + 32 * v16);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
    outlined init with take of Any(v46, v23);
    goto LABEL_16;
  }
LABEL_30:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id specialized ActivityAuthorizationManager.init(dataSource:notificationCenter:queue:appPolicyManager:audioRoutePolicyManager:featureFlags:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v29[3] = a9;
  v29[4] = a11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v29);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a9 - 8) + 32))(boxed_opaque_existential_1, a2, a9);
  swift_unknownObjectWeakInit();
  *(void *)&a7[OBJC_IVAR___CPActivityAuthorizationManager____lazy_storage___neighborhoodActivityConduit] = 0;
  uint64_t v19 = OBJC_IVAR___CPActivityAuthorizationManager_lock;
  type metadata accessor for Lock();
  uint64_t v20 = swift_allocObject();
  unint64_t v21 = a7;
  char v22 = (_DWORD *)swift_slowAlloc();
  *(void *)(v20 + 16) = v22;
  *char v22 = 0;
  *(void *)&a7[v19] = v20;
  *(void *)&v21[OBJC_IVAR___CPActivityAuthorizationManager_preparedAuthorizedBundleIdentifiers] = MEMORY[0x1E4FBC870];
  v21[OBJC_IVAR___CPActivityAuthorizationManager_isDisplayingAuthorizationRequest] = 0;
  swift_unknownObjectWeakAssign();
  outlined init with copy of UserNotificationCenter((uint64_t)v29, (uint64_t)&v21[OBJC_IVAR___CPActivityAuthorizationManager_notificationCenter]);
  *(void *)&v21[OBJC_IVAR___CPActivityAuthorizationManager_queue] = a3;
  *(void *)&v21[OBJC_IVAR___CPActivityAuthorizationManager_appPolicyManager] = a4;
  *(void *)&v21[OBJC_IVAR___CPActivityAuthorizationManager_audioRoutePolicyManager] = a5;
  *(void *)&v21[OBJC_IVAR___CPActivityAuthorizationManager_featureFlags] = a6;
  id v23 = a3;
  id v24 = a4;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();

  v28.receiver = v21;
  v28.super_class = ObjectType;
  id v25 = objc_msgSendSuper2(&v28, sel_init);
  objc_msgSend(a1, sel_addObserver_queue_, v25, v23);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v29);
  return v25;
}

id specialized ActivityAuthorizationManager.__allocating_init(dataSource:notificationCenter:queue:appPolicyManager:audioRoutePolicyManager:featureFlags:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v23 = a6;
  uint64_t v24 = a8;
  uint64_t v22 = a5;
  uint64_t v15 = *(void *)(a9 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (char *)objc_allocWithZone(v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a2, a9);
  return specialized ActivityAuthorizationManager.init(dataSource:notificationCenter:queue:appPolicyManager:audioRoutePolicyManager:featureFlags:)(a1, (uint64_t)v17, a3, a4, v22, v23, v19, v24, a9, a10, a11);
}

id specialized ActivityAuthorizationManager.init(dataSource:notificationCenter:queue:appPolicyManager:audioRoutePolicyManager:featureFlags:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, char *a7)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v26[3] = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for IMUserNotificationCenter);
  v26[4] = &protocol witness table for IMUserNotificationCenter;
  v26[0] = a2;
  swift_unknownObjectWeakInit();
  *(void *)&a7[OBJC_IVAR___CPActivityAuthorizationManager____lazy_storage___neighborhoodActivityConduit] = 0;
  uint64_t v14 = OBJC_IVAR___CPActivityAuthorizationManager_lock;
  type metadata accessor for Lock();
  uint64_t v15 = swift_allocObject();
  uint64_t v16 = a7;
  uint64_t v17 = (_DWORD *)swift_slowAlloc();
  *(void *)(v15 + 16) = v17;
  *uint64_t v17 = 0;
  *(void *)&a7[v14] = v15;
  *(void *)&v16[OBJC_IVAR___CPActivityAuthorizationManager_preparedAuthorizedBundleIdentifiers] = MEMORY[0x1E4FBC870];
  v16[OBJC_IVAR___CPActivityAuthorizationManager_isDisplayingAuthorizationRequest] = 0;
  swift_unknownObjectWeakAssign();
  outlined init with copy of UserNotificationCenter((uint64_t)v26, (uint64_t)&v16[OBJC_IVAR___CPActivityAuthorizationManager_notificationCenter]);
  *(void *)&v16[OBJC_IVAR___CPActivityAuthorizationManager_queue] = a3;
  *(void *)&v16[OBJC_IVAR___CPActivityAuthorizationManager_appPolicyManager] = a4;
  *(void *)&v16[OBJC_IVAR___CPActivityAuthorizationManager_audioRoutePolicyManager] = a5;
  *(void *)&v16[OBJC_IVAR___CPActivityAuthorizationManager_featureFlags] = a6;
  id v18 = a3;
  id v19 = a4;
  id v20 = a5;
  id v21 = a6;

  v25.receiver = v16;
  v25.super_class = ObjectType;
  id v22 = objc_msgSendSuper2(&v25, sel_init);
  objc_msgSend(a1, sel_addObserver_queue_, v22, v18);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v26);
  return v22;
}

uint64_t sub_1B0F992FC()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #3 in ActivityAuthorizationManager.requestAuthorizationForApplication(withBundleIdentifier:preparing:overrides:currentScreenShareAttributes:completionHandler:)(char a1, uint64_t a2)
{
  return closure #3 in ActivityAuthorizationManager.requestAuthorizationForApplication(withBundleIdentifier:preparing:overrides:currentScreenShareAttributes:completionHandler:)(a1, a2, *(void *)(v2 + 16), *(uint64_t (**)(void, uint64_t))(v2 + 24));
}

unint64_t specialized ActivityAuthorizationManager.unsupportedAudioRouteDisplayInformation(forApplicationWithBundleIdentifier:onNearbyDeviceHandle:preparing:routeName:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for ConversationManagerHost();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v10 = self;
  uint64_t v71 = ObjCClassFromMetadata;
  id v11 = objc_msgSend(v10, sel_bundleForClass_, ObjCClassFromMetadata);
  v12._Swift::Int countAndFlagsBits = 0xD000000000000025;
  v73._object = (void *)0xE000000000000000;
  v12._object = (void *)0x80000001B115FC80;
  v13.value._Swift::Int countAndFlagsBits = 0x6E65736572706F43;
  v13.value._object = (void *)0xEE0065726F436563;
  v14._Swift::Int countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  v73._Swift::Int countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v12, v13, (NSBundle)v11, v14, v73);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B1138A80;
  *(void *)(v15 + 56) = MEMORY[0x1E4FBB1A0];
  unint64_t v16 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v15 + 64) = v16;
  *(void *)(v15 + 32) = a4;
  *(void *)(v15 + 40) = a5;
  swift_bridgeObjectRetain();
  uint64_t v17 = String.init(format:_:)();
  uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  objc_allocWithZone(MEMORY[0x1E4F223C8]);
  swift_bridgeObjectRetain();
  id v20 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(a1, a2, 1);
  if (v20)
  {
    uint64_t v69 = v20;
    id v28 = objc_msgSend(v20, sel_localizedName);
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v31 = v30;

    id v32 = objc_msgSend(v10, sel_bundleForClass_, v71);
    v33._Swift::Int countAndFlagsBits = 0xD000000000000029;
    v75._object = (void *)0xE000000000000000;
    v33._object = (void *)0x80000001B115FCE0;
    v34.value._Swift::Int countAndFlagsBits = 0x6E65736572706F43;
    v34.value._object = (void *)0xEE0065726F436563;
    v35._Swift::Int countAndFlagsBits = 0;
    v35._object = (void *)0xE000000000000000;
    v75._Swift::Int countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v33, v34, (NSBundle)v32, v35, v75);

    uint64_t v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_1B1138A80;
    *(void *)(v36 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v36 + 64) = v16;
    *(void *)(v36 + 32) = v29;
    *(void *)(v36 + 40) = v31;
    uint64_t v25 = String.init(format:_:)();
    uint64_t v27 = v37;
  }
  else
  {
    id v21 = objc_msgSend(v10, sel_bundleForClass_, ObjCClassFromMetadata);
    v22._Swift::Int countAndFlagsBits = 0xD000000000000026;
    v74._object = (void *)0xE000000000000000;
    v22._object = (void *)0x80000001B115FCB0;
    v23.value._Swift::Int countAndFlagsBits = 0x6E65736572706F43;
    v23.value._object = (void *)0xEE0065726F436563;
    v24._Swift::Int countAndFlagsBits = 0;
    v24._object = (void *)0xE000000000000000;
    v74._Swift::Int countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v22, v23, (NSBundle)v21, v24, v74);

    uint64_t v25 = String.init(format:_:)();
    uint64_t v27 = v26;
    uint64_t v69 = 0;
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B1138A70;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v39;
  uint64_t v40 = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 48) = v17;
  *(void *)(inited + 56) = v19;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v41;
  *(void *)(inited + 120) = v40;
  *(void *)(inited + 96) = v25;
  *(void *)(inited + 104) = v27;
  unint64_t v42 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  uint64_t v43 = swift_initStackObject();
  *(_OWORD *)(v43 + 16) = xmmword_1B113A080;
  *(void *)(v43 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v43 + 40) = v44;
  id v45 = objc_msgSend(v10, sel_bundleForClass_, v71);
  v76._object = (void *)0xE000000000000000;
  v46._Swift::Int countAndFlagsBits = 0x4C45434E4143;
  v46._object = (void *)0xE600000000000000;
  v47.value._Swift::Int countAndFlagsBits = 0x6E65736572706F43;
  v47.value._object = (void *)0xEE0065726F436563;
  v48._Swift::Int countAndFlagsBits = 0;
  v48._object = (void *)0xE000000000000000;
  v76._Swift::Int countAndFlagsBits = 0;
  Swift::String v49 = NSLocalizedString(_:tableName:bundle:value:comment:)(v46, v47, (NSBundle)v45, v48, v76);

  *(void *)(v43 + 72) = v40;
  *(Swift::String *)(v43 + 48) = v49;
  *(void *)(v43 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v43 + 88) = v50;
  id v51 = objc_msgSend(v10, sel_bundleForClass_, v71);
  v77._object = (void *)0xE000000000000000;
  v52._object = (void *)0x80000001B115FBD0;
  v52._Swift::Int countAndFlagsBits = 0xD000000000000011;
  v53.value._Swift::Int countAndFlagsBits = 0x6E65736572706F43;
  v53.value._object = (void *)0xEE0065726F436563;
  v54._Swift::Int countAndFlagsBits = 0;
  v54._object = (void *)0xE000000000000000;
  v77._Swift::Int countAndFlagsBits = 0;
  Swift::String v55 = NSLocalizedString(_:tableName:bundle:value:comment:)(v52, v53, (NSBundle)v51, v54, v77);

  *(Swift::String *)(v43 + 96) = v55;
  *(void *)(v43 + 120) = v40;
  *(void *)(v43 + 128) = 0xD000000000000022;
  *(void *)(v43 + 168) = MEMORY[0x1E4FBB808];
  *(void *)(v43 + 136) = 0x80000001B115B4C0;
  *(void *)(v43 + 144) = 1;
  unint64_t v56 = specialized Dictionary.init(dictionaryLiteral:)(v43);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v72 = v42;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v56, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v72);
  unint64_t v58 = v72;
  swift_bridgeObjectRelease();
  if (a3)
  {
    uint64_t v59 = swift_initStackObject();
    *(_OWORD *)(v59 + 16) = xmmword_1B1138A80;
    *(void *)(v59 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v59 + 40) = v60;
    id v61 = objc_msgSend(v10, sel_bundleForClass_, v71);
    v78._object = (void *)0xE000000000000000;
    v62._Swift::Int countAndFlagsBits = 0x4F465F5452415453;
    v62._object = (void *)0xEC000000454D5F52;
    v63.value._Swift::Int countAndFlagsBits = 0x6E65736572706F43;
    v63.value._object = (void *)0xEE0065726F436563;
    v64._Swift::Int countAndFlagsBits = 0;
    v64._object = (void *)0xE000000000000000;
    v78._Swift::Int countAndFlagsBits = 0;
    Swift::String v65 = NSLocalizedString(_:tableName:bundle:value:comment:)(v62, v63, (NSBundle)v61, v64, v78);

    *(void *)(v59 + 72) = MEMORY[0x1E4FBB1A0];
    *(Swift::String *)(v59 + 48) = v65;
    unint64_t v66 = specialized Dictionary.init(dictionaryLiteral:)(v59);
    char v67 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v72 = v58;
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v66, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v67, (uint64_t)&v72);
    unint64_t v58 = v72;

    swift_bridgeObjectRelease();
  }
  else
  {
  }
  return v58;
}

unint64_t specialized ActivityAuthorizationManager.authorizationRequestDisplayInformation(forApplicationWithBundleIdentifier:onNearbyDeviceHandle:preparing:overrides:)(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5)
{
  objc_allocWithZone(MEMORY[0x1E4F223C8]);
  swift_bridgeObjectRetain();
  id v9 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(a1, a2, 1);
  uint64_t v107 = v9;
  if (a5)
  {
    uint64_t v10 = *(void *)(a5 + OBJC_IVAR___CPAuthorizationRequestOverrides_title + 8);
    if (v10)
    {
      uint64_t v11 = *(void *)(a5 + OBJC_IVAR___CPAuthorizationRequestOverrides_title);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
  }
  if (v9)
  {
    id v12 = objc_msgSend(v9, sel_localizedName);
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;

    type metadata accessor for ConversationManagerHost();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v17 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
    v18._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v109._object = (void *)0xE000000000000000;
    v18._object = (void *)0x80000001B115FDA0;
    v19.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
    v19.value._object = (void *)0xEE0065726F436563;
    v20._uint64_t countAndFlagsBits = 0;
    v20._object = (void *)0xE000000000000000;
    v109._uint64_t countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v18, v19, (NSBundle)v17, v20, v109);

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_1B1138A80;
    *(void *)(v21 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v21 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v21 + 32) = v13;
    *(void *)(v21 + 40) = v15;
  }
  else
  {
    type metadata accessor for ConversationManagerHost();
    uint64_t v22 = swift_getObjCClassFromMetadata();
    id v23 = objc_msgSend(self, sel_bundleForClass_, v22);
    v24._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
    v110._object = (void *)0xE000000000000000;
    v24._object = (void *)0x80000001B115FD10;
    v25.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
    v25.value._object = (void *)0xEE0065726F436563;
    v26._uint64_t countAndFlagsBits = 0;
    v26._object = (void *)0xE000000000000000;
    v110._uint64_t countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v24, v25, (NSBundle)v23, v26, v110);
  }
  uint64_t v11 = String.init(format:_:)();
  uint64_t v10 = v27;
  swift_bridgeObjectRelease();
  if (a5)
  {
LABEL_8:
    uint64_t v28 = *(void *)(a5 + OBJC_IVAR___CPAuthorizationRequestOverrides_message + 8);
    if (v28)
    {
      uint64_t v104 = v11;
      uint64_t v105 = v10;
      uint64_t v29 = *(void *)(a5 + OBJC_IVAR___CPAuthorizationRequestOverrides_message);
      swift_bridgeObjectRetain();
      goto LABEL_20;
    }
    uint64_t v104 = v11;
    uint64_t v105 = v10;
    if (a3) {
      goto LABEL_11;
    }
    goto LABEL_14;
  }
  uint64_t v104 = v11;
  uint64_t v105 = v10;
  if (a3)
  {
LABEL_11:
    id v30 = a3;
    id v31 = objc_msgSend(v30, sel_name);
    if (v31)
    {
      id v32 = v31;
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v35 = v34;

      type metadata accessor for ConversationManagerHost();
      uint64_t v36 = swift_getObjCClassFromMetadata();
      id v37 = objc_msgSend(self, sel_bundleForClass_, v36);
      v38._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      v111._object = (void *)0xE000000000000000;
      v38._object = (void *)0x80000001B115FD80;
      v39.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
      v39.value._object = (void *)0xEE0065726F436563;
      v40._uint64_t countAndFlagsBits = 0;
      v40._object = (void *)0xE000000000000000;
      v111._uint64_t countAndFlagsBits = 0;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v38, v39, (NSBundle)v37, v40, v111);

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v41 = swift_allocObject();
      *(_OWORD *)(v41 + 16) = xmmword_1B1138A80;
      *(void *)(v41 + 56) = MEMORY[0x1E4FBB1A0];
      *(void *)(v41 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v41 + 32) = v33;
      *(void *)(v41 + 40) = v35;
    }
    else
    {
      type metadata accessor for ConversationManagerHost();
      uint64_t v54 = swift_getObjCClassFromMetadata();
      id v55 = objc_msgSend(self, sel_bundleForClass_, v54);
      v56._uint64_t countAndFlagsBits = 0xD000000000000025;
      v113._object = (void *)0xE000000000000000;
      v56._object = (void *)0x80000001B115FD50;
      v57.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
      v57.value._object = (void *)0xEE0065726F436563;
      v58._uint64_t countAndFlagsBits = 0;
      v58._object = (void *)0xE000000000000000;
      v113._uint64_t countAndFlagsBits = 0;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v56, v57, (NSBundle)v55, v58, v113);
    }
    uint64_t v29 = String.init(format:_:)();
    uint64_t v28 = v42;
    swift_bridgeObjectRelease();

    goto LABEL_20;
  }
LABEL_14:
  if (v9)
  {
    id v43 = objc_msgSend(v9, sel_localizedName);
    uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v46 = v45;

    type metadata accessor for ConversationManagerHost();
    uint64_t v47 = swift_getObjCClassFromMetadata();
    id v48 = objc_msgSend(self, sel_bundleForClass_, v47);
    v49._uint64_t countAndFlagsBits = 0xD000000000000015;
    v112._object = (void *)0xE000000000000000;
    v49._object = (void *)0x80000001B115FC10;
    v50.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
    v50.value._object = (void *)0xEE0065726F436563;
    v51._uint64_t countAndFlagsBits = 0;
    v51._object = (void *)0xE000000000000000;
    v112._uint64_t countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v49, v50, (NSBundle)v48, v51, v112);

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v52 = swift_allocObject();
    *(_OWORD *)(v52 + 16) = xmmword_1B1138A80;
    *(void *)(v52 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v52 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v52 + 32) = v44;
    *(void *)(v52 + 40) = v46;
  }
  else
  {
    type metadata accessor for ConversationManagerHost();
    uint64_t v59 = swift_getObjCClassFromMetadata();
    id v60 = objc_msgSend(self, sel_bundleForClass_, v59);
    v114._object = (void *)0xE000000000000000;
    v61._object = (void *)0x80000001B115FBF0;
    v61._uint64_t countAndFlagsBits = 0xD000000000000012;
    v62.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
    v62.value._object = (void *)0xEE0065726F436563;
    v63._uint64_t countAndFlagsBits = 0;
    v63._object = (void *)0xE000000000000000;
    v114._uint64_t countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v61, v62, (NSBundle)v60, v63, v114);
  }
  uint64_t v29 = String.init(format:_:)();
  uint64_t v28 = v53;
  swift_bridgeObjectRelease();
LABEL_20:
  type metadata accessor for ConversationManagerHost();
  uint64_t v64 = swift_getObjCClassFromMetadata();
  Swift::String v65 = self;
  id v66 = objc_msgSend(v65, sel_bundleForClass_, v64);
  v115._object = (void *)0xE000000000000000;
  v67._object = (void *)0x80000001B115FD30;
  v67._uint64_t countAndFlagsBits = 0xD000000000000012;
  v68.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v68.value._object = (void *)0xEE0065726F436563;
  v69._uint64_t countAndFlagsBits = 0;
  v69._object = (void *)0xE000000000000000;
  v115._uint64_t countAndFlagsBits = 0;
  Swift::String v70 = NSLocalizedString(_:tableName:bundle:value:comment:)(v67, v68, (NSBundle)v66, v69, v115);
  uint64_t countAndFlagsBits = v70._countAndFlagsBits;
  object = v70._object;

  if (a5)
  {
    Swift::String v73 = *(void **)(a5 + OBJC_IVAR___CPAuthorizationRequestOverrides_startForEveryone + 8);
    if (v73)
    {
      uint64_t countAndFlagsBits = *(void *)(a5 + OBJC_IVAR___CPAuthorizationRequestOverrides_startForEveryone);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      object = v73;
    }
  }
  id v74 = objc_msgSend(v65, sel_bundleForClass_, v64);
  v116._object = (void *)0xE000000000000000;
  v75._uint64_t countAndFlagsBits = 0x4F465F5452415453;
  v75._object = (void *)0xEC000000454D5F52;
  v76.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v76.value._object = (void *)0xEE0065726F436563;
  v77._uint64_t countAndFlagsBits = 0;
  v77._object = (void *)0xE000000000000000;
  v116._uint64_t countAndFlagsBits = 0;
  Swift::String v78 = NSLocalizedString(_:tableName:bundle:value:comment:)(v75, v76, (NSBundle)v74, v77, v116);
  uint64_t v103 = v78._countAndFlagsBits;
  unint64_t v79 = v78._object;

  if (a5)
  {
    uint64_t v80 = (uint64_t *)(a5 + OBJC_IVAR___CPAuthorizationRequestOverrides_startForMe);
    id v81 = *(void **)(a5 + OBJC_IVAR___CPAuthorizationRequestOverrides_startForMe + 8);
    if (v81)
    {
      uint64_t v103 = *v80;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      unint64_t v79 = v81;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B1138A70;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v83;
  uint64_t v84 = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 48) = v104;
  *(void *)(inited + 56) = v105;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v85;
  *(void *)(inited + 120) = v84;
  *(void *)(inited + 96) = v29;
  *(void *)(inited + 104) = v28;
  unint64_t v86 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  uint64_t v87 = swift_initStackObject();
  *(_OWORD *)(v87 + 16) = xmmword_1B113A080;
  *(void *)(v87 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v87 + 40) = v88;
  id v89 = objc_msgSend(v65, sel_bundleForClass_, v64);
  v117._object = (void *)0xE000000000000000;
  v90._uint64_t countAndFlagsBits = 0x4C45434E4143;
  v90._object = (void *)0xE600000000000000;
  v91.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v91.value._object = (void *)0xEE0065726F436563;
  v92._uint64_t countAndFlagsBits = 0;
  v92._object = (void *)0xE000000000000000;
  v117._uint64_t countAndFlagsBits = 0;
  Swift::String v93 = NSLocalizedString(_:tableName:bundle:value:comment:)(v90, v91, (NSBundle)v89, v92, v117);

  *(void *)(v87 + 72) = v84;
  *(Swift::String *)(v87 + 48) = v93;
  *(void *)(v87 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v87 + 88) = v94;
  *(void *)(v87 + 96) = countAndFlagsBits;
  *(void *)(v87 + 104) = object;
  *(void *)(v87 + 120) = v84;
  *(void *)(v87 + 128) = 0xD000000000000022;
  *(void *)(v87 + 168) = MEMORY[0x1E4FBB808];
  *(void *)(v87 + 136) = 0x80000001B115B4C0;
  *(void *)(v87 + 144) = 1;
  unint64_t v95 = specialized Dictionary.init(dictionaryLiteral:)(v87);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v108 = v86;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v95, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v108);
  unint64_t v97 = v108;
  swift_bridgeObjectRelease();
  if (a4)
  {
    uint64_t v98 = swift_initStackObject();
    *(_OWORD *)(v98 + 16) = xmmword_1B1138A80;
    *(void *)(v98 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v98 + 40) = v99;
    *(void *)(v98 + 72) = MEMORY[0x1E4FBB1A0];
    *(void *)(v98 + 48) = v103;
    *(void *)(v98 + 56) = v79;
    unint64_t v100 = specialized Dictionary.init(dictionaryLiteral:)(v98);
    char v101 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v108 = v97;
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v100, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v101, (uint64_t)&v108);
    unint64_t v97 = v108;
  }
  swift_bridgeObjectRelease();

  return v97;
}

void specialized closure #3 in ActivityAuthorizationManager.requestAuthorizationForApplication(withBundleIdentifier:preparing:overrides:currentScreenShareAttributes:completionHandler:)(char a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a3 + 16;
  swift_beginAccess();
  uint64_t v8 = MEMORY[0x1B3EA3B30](v7);
  if (v8)
  {
    id v9 = (void *)v8;
    uint64_t v10 = *(void *)(v8 + OBJC_IVAR___CPActivityAuthorizationManager_lock);
    swift_retain();

    os_unfair_lock_lock(*(os_unfair_lock_t *)(v10 + 16));
    swift_beginAccess();
    uint64_t v11 = (unsigned char *)MEMORY[0x1B3EA3B30](v7);
    if (v11)
    {
      v11[OBJC_IVAR___CPActivityAuthorizationManager_isDisplayingAuthorizationRequest] = 0;
    }
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 16));
    swift_release();
  }
  if (a2) {
    a2 = (void *)_convertErrorToNSError(_:)();
  }
  (*(void (**)(uint64_t, void, void *))(a4 + 16))(a4, a1 & 1, a2);
}

void specialized ActivityAuthorizationManager.confirmActivityAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:preparing:currentScreenShareAttributes:overrides:completionHandler:)(uint64_t a1, void *a2, void *a3, int a4, uint64_t a5, char *a6, uint64_t a7, const void *a8)
{
  LODWORD(v12) = a4;
  id v145 = a3;
  uint64_t v146 = a1;
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v144 = (char *)&v130 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a8;
  Swift::String v18 = (void *)swift_allocObject();
  void v18[2] = a7;
  v18[3] = thunk for @escaping @callee_unowned @convention(block) (@unowned ObjCBool, @unowned NSError?) -> ()partial apply;
  v18[4] = v17;
  if (a5 && (*(unsigned char *)(a5 + OBJC_IVAR___CPAuthorizationRequestOverrides_confirmReplacement) & 1) == 0)
  {
    _Block_copy(a8);
    _Block_copy(a8);
    _Block_copy(a8);
    uint64_t v37 = one-time initialization token for default;
    swift_retain();
    swift_retain();
    if (v37 != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Log.default);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v21, v39)) {
      goto LABEL_18;
    }
    char v23 = (char)v12;
    Swift::String v40 = a6;
    uint64_t v41 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v41 = 0;
    _os_log_impl(&dword_1B0DF7000, v21, v39, "Skipping prompt in confirmActivityAuthorizationIfNecessary, confirmReplacement override is set", v41, 2u);
    Swift::String_optional v25 = v41;
    a6 = v40;
    goto LABEL_17;
  }
  Swift::String_optional v19 = self;
  _Block_copy(a8);
  _Block_copy(a8);
  _Block_copy(a8);
  swift_retain();
  swift_retain();
  if (objc_msgSend(v19, sel_supportsMultipleActivitySessions))
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Log.default);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v21, v22)) {
      goto LABEL_18;
    }
    char v23 = (char)v12;
    Swift::String v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::String v24 = 0;
    _os_log_impl(&dword_1B0DF7000, v21, v22, "Skipping prompt in confirmActivityAuthorizationIfNecessary, multiple activities supported", v24, 2u);
    Swift::String_optional v25 = v24;
LABEL_17:
    LOBYTE(v12) = v23;
    MEMORY[0x1B3EA39E0](v25, -1, -1);
LABEL_18:

    uint64_t v42 = v146;
LABEL_19:
    v43._uint64_t countAndFlagsBits = v42;
    v43._object = a2;
    ActivityAuthorizationManager.setAuthorization(_:for:)(1, v43);
    if (v12)
    {
      uint64_t v44 = *(void *)&a6[OBJC_IVAR___CPActivityAuthorizationManager_lock];
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v44 + 16));
      swift_beginAccess();
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)((Swift::Int *)v148, v42, (Swift::Int)a2);
      swift_endAccess();
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v44 + 16));
    }
    _Block_copy(a8);
    specialized closure #3 in ActivityAuthorizationManager.requestAuthorizationForApplication(withBundleIdentifier:preparing:overrides:currentScreenShareAttributes:completionHandler:)(1, 0, a7, (uint64_t)a8);
    _Block_release(a8);
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_33;
  }
  uint64_t v141 = v15;
  int v142 = (int)v12;
  id v26 = objc_msgSend(v145, sel_activitySessions);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
  lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject();
  uint64_t v27 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  id v28 = specialized Sequence.max(by:)(v27);
  swift_bridgeObjectRelease();
  if (!v28)
  {
    LOBYTE(v12) = v142;
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    __swift_project_value_buffer(v45, (uint64_t)static Log.default);
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.default.getter();
    BOOL v48 = os_log_type_enabled(v46, v47);
    uint64_t v42 = v146;
    if (v48)
    {
      id v12 = a6;
      Swift::String v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v49 = 0;
      _os_log_impl(&dword_1B0DF7000, v46, v47, "Skipping prompt in confirmActivityAuthorizationIfNecessary, no representative activity session", v49, 2u);
      Swift::String_optional v50 = v49;
      a6 = v12;
      LOBYTE(v12) = v142;
      MEMORY[0x1B3EA39E0](v50, -1, -1);
    }

    goto LABEL_19;
  }
  uint64_t v137 = a2;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  __swift_project_value_buffer(v29, (uint64_t)static Log.default);
  id v30 = v28;
  id v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  BOOL v33 = os_log_type_enabled(v31, v32);
  id v143 = v30;
  unint64_t v139 = v18;
  uint64_t v140 = a7;
  uint64_t v138 = v17;
  unint64_t v136 = a6;
  uint64_t v135 = v14;
  if (v33)
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    uint64_t v35 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v34 = 138412290;
    v149._uint64_t countAndFlagsBits = (uint64_t)v143;
    id v36 = v143;
    id v30 = v143;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v35 = v28;

    _os_log_impl(&dword_1B0DF7000, v31, v32, "Prompting user to replace activity: %@", v34, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v35, -1, -1);
    MEMORY[0x1B3EA39E0](v34, -1, -1);
  }
  else
  {
  }
  unint64_t v51 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  id v52 = objc_msgSend(v30, sel_activity);
  id v53 = objc_msgSend(v52, sel_metadata);

  uint64_t v54 = MEMORY[0x1E4FBB1A0];
  unint64_t v131 = a8;
  if (v53 && (id v55 = objc_msgSend(v53, sel_title), v53, v55))
  {
    uint64_t v133 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v132 = v56;

    uint64_t v134 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v58 = v57;
    type metadata accessor for ConversationManagerHost();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v60 = self;
    id v61 = objc_msgSend(v60, sel_bundleForClass_, ObjCClassFromMetadata);
    v62._uint64_t countAndFlagsBits = 0xD000000000000015;
    v151._object = (void *)0xE000000000000000;
    v62._object = (void *)0x80000001B115FB30;
    v63.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
    v63.value._object = (void *)0xEE0065726F436563;
    v64._uint64_t countAndFlagsBits = 0;
    v64._object = (void *)0xE000000000000000;
    v151._uint64_t countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v62, v63, (NSBundle)v61, v64, v151);

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v65 = swift_allocObject();
    *(_OWORD *)(v65 + 16) = xmmword_1B1138A80;
    *(void *)(v65 + 56) = v54;
    *(void *)(v65 + 64) = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v66 = v132;
    *(void *)(v65 + 32) = v133;
    *(void *)(v65 + 40) = v66;
    uint64_t v67 = String.init(format:_:)();
    Swift::String v69 = v68;
    swift_bridgeObjectRelease();
    uint64_t v150 = v54;
    v149._uint64_t countAndFlagsBits = v67;
    v149._object = v69;
    outlined init with take of Any(&v149, v148);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v147 = v51;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v148, v134, v58, isUniquelyReferenced_nonNull_native);
    uint64_t v71 = v147;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v134 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v73 = v72;
    id v74 = objc_msgSend(v60, sel_bundleForClass_, ObjCClassFromMetadata);
    v75._uint64_t countAndFlagsBits = 0xD000000000000017;
    v152._object = (void *)0xE000000000000000;
    v75._object = (void *)0x80000001B115FB50;
    v76.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
    v76.value._object = (void *)0xEE0065726F436563;
    v77._uint64_t countAndFlagsBits = 0;
    v77._object = (void *)0xE000000000000000;
    v152._uint64_t countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v75, v76, (NSBundle)v74, v77, v152);

    uint64_t v78 = String.init(format:_:)();
    uint64_t v80 = v79;
    swift_bridgeObjectRelease();
    uint64_t v150 = v54;
    v149._uint64_t countAndFlagsBits = v78;
    v149._object = v80;
    outlined init with take of Any(&v149, v148);
    char v81 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v147 = v71;
    uint64_t v82 = v134;
  }
  else
  {
    uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v73 = v84;
    type metadata accessor for ConversationManagerHost();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v85 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
    v86._uint64_t countAndFlagsBits = 0xD000000000000016;
    v153._object = (void *)0xE000000000000000;
    v86._object = (void *)0x80000001B115FAF0;
    v87.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
    v87.value._object = (void *)0xEE0065726F436563;
    v88._uint64_t countAndFlagsBits = 0;
    v88._object = (void *)0xE000000000000000;
    v153._uint64_t countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v86, v87, (NSBundle)v85, v88, v153);

    uint64_t v89 = String.init(format:_:)();
    Swift::String_optional v91 = v90;
    swift_bridgeObjectRelease();
    uint64_t v150 = v54;
    v149._uint64_t countAndFlagsBits = v89;
    v149._object = v91;
    outlined init with take of Any(&v149, v148);
    char v81 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v147 = v51;
    uint64_t v82 = v83;
  }
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v148, v82, v73, v81);
  uint64_t v92 = v147;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v93 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v95 = v94;
  type metadata accessor for ConversationManagerHost();
  uint64_t v96 = self;
  id v97 = objc_msgSend(v96, sel_bundleForClass_, ObjCClassFromMetadata);
  v154._object = (void *)0xE000000000000000;
  v98._object = (void *)0x80000001B115FB10;
  v98._uint64_t countAndFlagsBits = 0xD000000000000010;
  v99.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v99.value._object = (void *)0xEE0065726F436563;
  v100._uint64_t countAndFlagsBits = 0;
  v100._object = (void *)0xE000000000000000;
  v154._uint64_t countAndFlagsBits = 0;
  Swift::String v101 = NSLocalizedString(_:tableName:bundle:value:comment:)(v98, v99, (NSBundle)v97, v100, v154);

  uint64_t v150 = v54;
  Swift::String v149 = v101;
  outlined init with take of Any(&v149, v148);
  char v102 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v147 = v92;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v148, v93, v95, v102);
  uint64_t v103 = v147;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v106 = v105;
  id v107 = objc_msgSend(v96, sel_bundleForClass_, ObjCClassFromMetadata);
  v155._object = (void *)0xE000000000000000;
  v108._uint64_t countAndFlagsBits = 0x4C45434E4143;
  v108._object = (void *)0xE600000000000000;
  v109.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v109.value._object = (void *)0xEE0065726F436563;
  v110._uint64_t countAndFlagsBits = 0;
  v110._object = (void *)0xE000000000000000;
  v155._uint64_t countAndFlagsBits = 0;
  Swift::String v111 = NSLocalizedString(_:tableName:bundle:value:comment:)(v108, v109, (NSBundle)v107, v110, v155);

  uint64_t v150 = v54;
  Swift::String v149 = v111;
  outlined init with take of Any(&v149, v148);
  char v112 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v147 = v103;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v148, v104, v106, v112);
  uint64_t v134 = v147;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Swift::String v113 = v136;
  uint64_t v114 = *(void *)&v136[OBJC_IVAR___CPActivityAuthorizationManager_notificationCenter + 32];
  uint64_t v132 = *(void *)&v136[OBJC_IVAR___CPActivityAuthorizationManager_notificationCenter + 24];
  uint64_t v133 = (uint64_t)__swift_project_boxed_opaque_existential_1(&v136[OBJC_IVAR___CPActivityAuthorizationManager_notificationCenter], v132);
  id v115 = objc_msgSend(v145, sel_groupUUID);
  Swift::String v116 = v144;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  uint64_t v117 = v135;
  v149._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  v149._object = v118;
  char v119 = *(void (**)(char *, uint64_t))(v141 + 8);
  v119(v116, v117);
  v120._uint64_t countAndFlagsBits = 46;
  v120._object = (void *)0xE100000000000000;
  String.append(_:)(v120);
  id v121 = objc_msgSend(v143, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v122._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v122);
  swift_bridgeObjectRelease();
  v119(v116, v117);
  Swift::String v123 = v149;
  uint64_t v124 = swift_allocObject();
  uint64_t v125 = v146;
  *(void *)(v124 + 16) = v113;
  *(void *)(v124 + 24) = v125;
  uint64_t v126 = v137;
  *(void *)(v124 + 32) = v137;
  *(unsigned char *)(v124 + 40) = v142 & 1;
  uint64_t v127 = v139;
  *(void *)(v124 + 48) = closure #3 in ActivityAuthorizationManager.requestAuthorizationForApplication(withBundleIdentifier:preparing:overrides:currentScreenShareAttributes:completionHandler:)partial apply;
  *(void *)(v124 + 56) = v127;
  int v128 = *(void (**)(uint64_t, void *, uint64_t, void *, uint64_t, uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v114 + 8);
  swift_bridgeObjectRetain();
  id v129 = v113;
  swift_retain();
  v128(v123._countAndFlagsBits, v123._object, v125, v126, v134, 1, partial apply for closure #1 in ActivityAuthorizationManager.confirmActivityAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:preparing:currentScreenShareAttributes:overrides:completionHandler:), v124, v132, v114);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  a8 = v131;
LABEL_33:
  _Block_release(a8);
  _Block_release(a8);
}

void specialized ActivityAuthorizationManager.requestAuthorizationForApplication(withBundleIdentifier:preparing:overrides:currentScreenShareAttributes:completionHandler:)(uint64_t a1, void *a2, char a3, void *a4, uint64_t a5, unsigned char *a6, void (**a7)(void, void, void))
{
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B113A080;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v15;
  *(void *)(inited + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 56) = v16;
  *(void *)(inited + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 72) = v17;
  uint64_t v18 = MEMORY[0x1B3EA3B30](&a6[OBJC_IVAR___CPActivityAuthorizationManager_dataSource]);
  if (!v18)
  {
    swift_setDeallocating();
    _Block_copy(a7);
    _Block_copy(a7);
    swift_arrayDestroy();
    a7[2](a7, 0, 0);
    swift_release();
    goto LABEL_21;
  }
  Swift::String_optional v19 = (void *)v18;
  uint64_t v89 = a4;
  swift_getObjectType();
  _Block_copy(a7);
  _Block_copy(a7);
  if ((objc_msgSend(v19, sel_allActiveConversationParticipantsSupportSharePlay) & 1) == 0)
  {
    swift_setDeallocating();
    swift_arrayDestroy();
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Log.host);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      id v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v31 = 0;
      _os_log_impl(&dword_1B0DF7000, v29, v30, "At least one of the active participants is on an older SharePlay protocol version. Not allowing SharePlay", v31, 2u);
      MEMORY[0x1B3EA39E0](v31, -1, -1);
    }

    a7[2](a7, 0, 0);
    objc_msgSend(v19, sel_displaySharePlayUnableToStartAlert);
    goto LABEL_20;
  }
  uint64_t v88 = v13;
  char v20 = specialized Sequence<>.contains(_:)(a1, (uint64_t)a2, (void *)inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  if (v20)
  {
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Log.host);
    swift_bridgeObjectRetain_n();
    os_log_type_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      Swift::String v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v93 = v25;
      *(_DWORD *)Swift::String v24 = 136315138;
      v92[1] = (uint64_t)a2;
      swift_bridgeObjectRetain();
      uint64_t v26 = String.init<A>(reflecting:)();
      v92[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v22, v23, "Bypassing user authorization for activity started from %s", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v25, -1, -1);
      MEMORY[0x1B3EA39E0](v24, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    a7[2](a7, 1, 0);
LABEL_20:
    swift_release();
    swift_unknownObjectRelease();
    goto LABEL_21;
  }
  CPConversationManagerDataSource.activeConversation.getter();
  if (!v32)
  {
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Log.host);
    swift_bridgeObjectRetain_n();
    os_log_type_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      uint64_t v42 = a1;
      uint64_t v43 = swift_slowAlloc();
      v92[0] = v43;
      *(_DWORD *)uint64_t v41 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, (unint64_t)a2, v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B0DF7000, v39, v40, "Not allowing activation from %s because there is no active conversation.", v41, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v43, -1, -1);
      MEMORY[0x1B3EA39E0](v41, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    a7[2](a7, 0, 0);
    goto LABEL_20;
  }
  Swift::String_optional v87 = v32;
  uint64_t v33 = a1;
  uint64_t v34 = *(void *)&a6[OBJC_IVAR___CPActivityAuthorizationManager_lock];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v34 + 16));
  swift_beginAccess();
  uint64_t v35 = v33;
  specialized Set._Variant.remove(_:)(v33, (uint64_t)a2);
  uint64_t v37 = v36;
  swift_endAccess();
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v34 + 16));
  if (v37 && (a3 & 1) == 0)
  {
    a7[2](a7, 1, 0);
LABEL_46:
    swift_release();
    swift_unknownObjectRelease();

    goto LABEL_21;
  }
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v34 + 16));
  int v44 = a6[OBJC_IVAR___CPActivityAuthorizationManager_isDisplayingAuthorizationRequest];
  a6[OBJC_IVAR___CPActivityAuthorizationManager_isDisplayingAuthorizationRequest] = 1;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v34 + 16));
  if (v44 == 1)
  {
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    __swift_project_value_buffer(v45, (uint64_t)static Log.host);
    swift_bridgeObjectRetain_n();
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v46, v47))
    {
      BOOL v48 = (uint8_t *)swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      v92[0] = v49;
      *(_DWORD *)BOOL v48 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, (unint64_t)a2, v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B0DF7000, v46, v47, "Not allowing activation from %s because an authorization prompt is already being displayed", v48, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v49, -1, -1);
      MEMORY[0x1B3EA39E0](v48, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    lazy protocol witness table accessor for type ActivityAuthorizationError and conformance ActivityAuthorizationError();
    Swift::String v69 = (void *)swift_allocError();
    unsigned char *v70 = 3;
    uint64_t v71 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))a7)[2](a7, 0, v71);

    goto LABEL_46;
  }
  uint64_t v50 = swift_allocObject();
  swift_unknownObjectWeakInit();
  unint64_t v51 = (void *)swift_allocObject();
  v51[2] = v50;
  v51[3] = thunk for @escaping @callee_unowned @convention(block) (@unowned ObjCBool, @unowned NSError?) -> ()partial apply;
  Swift::String v86 = v51;
  v51[4] = v88;
  swift_retain_n();
  uint64_t v85 = v50;
  swift_retain();
  uint64_t v52 = v33;
  unsigned __int8 v53 = TUConversation.hasLocalActivitySession(forBundleIdentifier:)(v33, (uint64_t)a2);
  if (v89
    && *((unsigned char *)v89 + OBJC_IVAR___CPAuthorizationRequestOverrides_promptCondition)
    && (*((unsigned char *)v89 + OBJC_IVAR___CPAuthorizationRequestOverrides_promptCondition) == 1 || (v53 & 1) == 0))
  {
    unsigned __int8 v82 = v53;
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v72 = type metadata accessor for Logger();
    __swift_project_value_buffer(v72, (uint64_t)static Log.host);
    swift_bridgeObjectRetain_n();
    id v73 = v89;
    id v74 = Logger.logObject.getter();
    os_log_type_t type = static os_log_type_t.default.getter();
    uint64_t v84 = v73;
    if (os_log_type_enabled(v74, type))
    {
      log = v74;
      uint64_t v75 = swift_slowAlloc();
      uint64_t v80 = swift_slowAlloc();
      v92[0] = v80;
      *(_DWORD *)uint64_t v75 = 136315650;
      LOBYTE(v93) = *((unsigned char *)v73 + OBJC_IVAR___CPAuthorizationRequestOverrides_promptCondition);
      uint64_t v76 = String.init<A>(reflecting:)();
      uint64_t v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v75 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, (unint64_t)a2, v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v75 + 22) = 1024;
      LODWORD(v93) = v82 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B0DF7000, log, type, "Prompting to start activity due to override %s; bundleID %s has existing session? %{BOOL}d",
        (uint8_t *)v75,
        0x1Cu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v80, -1, -1);
      MEMORY[0x1B3EA39E0](v75, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v83 = v35;
    uint64_t v60 = swift_allocObject();
    *(void *)(v60 + 16) = closure #3 in ActivityAuthorizationManager.requestAuthorizationForApplication(withBundleIdentifier:preparing:overrides:currentScreenShareAttributes:completionHandler:)partial apply;
    *(void *)(v60 + 24) = v86;
    *(void *)(v60 + 32) = a6;
    *(void *)(v60 + 40) = v35;
    *(void *)(v60 + 48) = a2;
    *(void *)(v60 + 56) = v87;
    *(unsigned char *)(v60 + 64) = a3 & 1;
    Swift::String v62 = v89;
    *(void *)(v60 + 72) = a5;
    *(void *)(v60 + 80) = v89;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    id v78 = v84;
    swift_retain();
    a6;
    id v64 = v87;
    uint64_t v65 = v83;
    uint64_t v66 = a2;
    uint64_t v67 = v64;
    char v68 = a3 & 1;
    goto LABEL_53;
  }
  if (((*(uint64_t (**)(uint64_t, void *))((*MEMORY[0x1E4FBC8C8] & **(void **)&a6[OBJC_IVAR___CPActivityAuthorizationManager_appPolicyManager])
                                                   + 0x150))(v33, a2) & 1) == 0|| !objc_msgSend(*(id *)&a6[OBJC_IVAR___CPActivityAuthorizationManager_audioRoutePolicyManager], sel_sharePlaySupported))
  {
    uint64_t v60 = swift_allocObject();
    *(void *)(v60 + 16) = closure #3 in ActivityAuthorizationManager.requestAuthorizationForApplication(withBundleIdentifier:preparing:overrides:currentScreenShareAttributes:completionHandler:)partial apply;
    *(void *)(v60 + 24) = v86;
    uint64_t v61 = v35;
    *(void *)(v60 + 32) = a6;
    *(void *)(v60 + 40) = v35;
    *(void *)(v60 + 48) = a2;
    *(void *)(v60 + 56) = v87;
    char v91 = a3 & 1;
    *(unsigned char *)(v60 + 64) = v91;
    Swift::String v62 = v89;
    *(void *)(v60 + 72) = a5;
    *(void *)(v60 + 80) = v89;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    id v63 = v89;
    swift_retain();
    a6;
    id v64 = v87;
    uint64_t v65 = v61;
    uint64_t v66 = a2;
    uint64_t v67 = v64;
    char v68 = v91;
LABEL_53:
    ActivityAuthorizationManager.deferAuthorizationRequestToUser(forApplicationWithBundleIdentifier:onConversation:preparing:overrides:completionHandler:)(v65, v66, v67, v68, v62, (uint64_t)partial apply for closure #1 in promptToStart #1 () in ActivityAuthorizationManager.requestAuthorizationForApplication(withBundleIdentifier:preparing:overrides:currentScreenShareAttributes:completionHandler:), v60);
    swift_unknownObjectRelease();

    swift_release_n();
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_21;
  }
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v54 = type metadata accessor for Logger();
  __swift_project_value_buffer(v54, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  id v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v55, v56))
  {
    uint64_t v57 = (uint8_t *)swift_slowAlloc();
    uint64_t v58 = swift_slowAlloc();
    v92[0] = v58;
    *(_DWORD *)uint64_t v57 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, (unint64_t)a2, v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v55, v56, "Skipping confirmation prompt as sharing is enabled for: %s", v57, 0xCu);
    swift_arrayDestroy();
    uint64_t v59 = v58;
    uint64_t v52 = v35;
    MEMORY[0x1B3EA39E0](v59, -1, -1);
    MEMORY[0x1B3EA39E0](v57, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  _Block_copy(a7);
  swift_retain();
  swift_retain();
  specialized ActivityAuthorizationManager.confirmActivityAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:preparing:currentScreenShareAttributes:overrides:completionHandler:)(v52, a2, v87, a3 & 1, (uint64_t)v89, a6, v85, a7);
  _Block_release(a7);
  swift_unknownObjectRelease();

  swift_release();
  swift_release();
  swift_release_n();
LABEL_21:
  _Block_release(a7);
}

void specialized ActivityAuthorizationManager.confirmActivityAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:preparing:currentScreenShareAttributes:overrides:completionHandler:)(uint64_t a1, void *a2, void *a3, int a4, uint64_t a5, char *a6, uint64_t a7, uint64_t (*a8)(void, uint64_t), uint64_t a9)
{
  LODWORD(v13) = a4;
  id v144 = a3;
  uint64_t v145 = a1;
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  id v143 = (char *)&v133 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = (void *)swift_allocObject();
  void v18[2] = a7;
  v18[3] = a8;
  v18[4] = a9;
  if (a5 && (*(unsigned char *)(a5 + OBJC_IVAR___CPAuthorizationRequestOverrides_confirmReplacement) & 1) == 0)
  {
    uint64_t v37 = one-time initialization token for default;
    swift_retain();
    swift_retain();
    if (v37 != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Log.default);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v21, v22)) {
      goto LABEL_18;
    }
    char v23 = (char)v13;
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    Swift::String v24 = "Skipping prompt in confirmActivityAuthorizationIfNecessary, confirmReplacement override is set";
    goto LABEL_17;
  }
  Swift::String_optional v19 = self;
  swift_retain();
  swift_retain();
  if (objc_msgSend(v19, sel_supportsMultipleActivitySessions))
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Log.default);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v21, v22)) {
      goto LABEL_18;
    }
    char v23 = (char)v13;
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    Swift::String v24 = "Skipping prompt in confirmActivityAuthorizationIfNecessary, multiple activities supported";
LABEL_17:
    _os_log_impl(&dword_1B0DF7000, v21, v22, v24, v13, 2u);
    os_log_type_t v39 = v13;
    LOBYTE(v13) = v23;
    MEMORY[0x1B3EA39E0](v39, -1, -1);
LABEL_18:

    uint64_t v40 = v145;
LABEL_19:
    v41._uint64_t countAndFlagsBits = v40;
    v41._object = a2;
    ActivityAuthorizationManager.setAuthorization(_:for:)(1, v41);
    if (v13)
    {
      uint64_t v42 = *(void *)&a6[OBJC_IVAR___CPActivityAuthorizationManager_lock];
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v42 + 16));
      swift_beginAccess();
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)((Swift::Int *)v147, v40, (Swift::Int)a2);
      swift_endAccess();
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v42 + 16));
    }
    closure #3 in ActivityAuthorizationManager.requestAuthorizationForApplication(withBundleIdentifier:preparing:overrides:currentScreenShareAttributes:completionHandler:)(1, 0, a7, a8);
    swift_release();
    return;
  }
  uint64_t v140 = v16;
  int v141 = (int)v13;
  id v25 = objc_msgSend(v144, sel_activitySessions);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
  lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject();
  uint64_t v26 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  id v27 = specialized Sequence.max(by:)(v26);
  swift_bridgeObjectRelease();
  if (!v27)
  {
    LOBYTE(v13) = v141;
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    __swift_project_value_buffer(v43, (uint64_t)static Log.default);
    int v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    BOOL v46 = os_log_type_enabled(v44, v45);
    uint64_t v40 = v145;
    if (v46)
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_1B0DF7000, v44, v45, "Skipping prompt in confirmActivityAuthorizationIfNecessary, no representative activity session", v13, 2u);
      os_log_type_t v47 = v13;
      LOBYTE(v13) = v141;
      MEMORY[0x1B3EA39E0](v47, -1, -1);
    }

    goto LABEL_19;
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  __swift_project_value_buffer(v28, (uint64_t)static Log.default);
  id v29 = v27;
  os_log_type_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  BOOL v32 = os_log_type_enabled(v30, v31);
  id v142 = v29;
  uint64_t v138 = a6;
  unint64_t v139 = a2;
  uint64_t v136 = v15;
  if (v32)
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    uint64_t v34 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v33 = 138412290;
    v148._uint64_t countAndFlagsBits = (uint64_t)v142;
    id v35 = v142;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v34 = v27;

    _os_log_impl(&dword_1B0DF7000, v30, v31, "Prompting user to replace activity: %@", v33, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    uint64_t v36 = v34;
    id v29 = v142;
    MEMORY[0x1B3EA39E0](v36, -1, -1);
    MEMORY[0x1B3EA39E0](v33, -1, -1);
  }
  else
  {
  }
  unint64_t v48 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  id v49 = objc_msgSend(v29, sel_activity);
  id v50 = objc_msgSend(v49, sel_metadata);

  uint64_t v137 = v18;
  if (v50 && (id v51 = objc_msgSend(v50, sel_title), v50, v51))
  {
    uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v134 = v53;

    uint64_t v135 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v55 = v54;
    type metadata accessor for ConversationManagerHost();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    uint64_t v57 = self;
    id v58 = objc_msgSend(v57, (SEL)&selRef_resetActivitySessionSceneAssociationsForBundleID_ + 5, ObjCClassFromMetadata);
    v59._uint64_t countAndFlagsBits = 0xD000000000000015;
    v150._object = (void *)0xE000000000000000;
    v59._object = (void *)0x80000001B115FB30;
    v60.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
    v60.value._object = (void *)0xEE0065726F436563;
    v61._uint64_t countAndFlagsBits = 0;
    v61._object = (void *)0xE000000000000000;
    v150._uint64_t countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v59, v60, (NSBundle)v58, v61, v150);

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v62 = swift_allocObject();
    *(_OWORD *)(v62 + 16) = xmmword_1B1138A80;
    uint64_t v63 = MEMORY[0x1E4FBB1A0];
    *(void *)(v62 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v62 + 64) = lazy protocol witness table accessor for type String and conformance String();
    id v64 = v134;
    *(void *)(v62 + 32) = v52;
    *(void *)(v62 + 40) = v64;
    uint64_t v65 = String.init(format:_:)();
    uint64_t v67 = v66;
    swift_bridgeObjectRelease();
    uint64_t v149 = v63;
    v148._uint64_t countAndFlagsBits = v65;
    v148._object = v67;
    outlined init with take of Any(&v148, v147);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v146 = v48;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v147, v135, v55, isUniquelyReferenced_nonNull_native);
    uint64_t v69 = v146;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v72 = v71;
    uint64_t v73 = ObjCClassFromMetadata;
    id v74 = objc_msgSend(v57, (SEL)&selRef_resetActivitySessionSceneAssociationsForBundleID_ + 5, ObjCClassFromMetadata);
    v75._uint64_t countAndFlagsBits = 0xD000000000000017;
    v151._object = (void *)0xE000000000000000;
    v75._object = (void *)0x80000001B115FB50;
    v76.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
    v76.value._object = (void *)0xEE0065726F436563;
    v77._uint64_t countAndFlagsBits = 0;
    v77._object = (void *)0xE000000000000000;
    v151._uint64_t countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v75, v76, (NSBundle)v74, v77, v151);

    uint64_t v78 = String.init(format:_:)();
    uint64_t v80 = v79;
    swift_bridgeObjectRelease();
    uint64_t v149 = v63;
    v148._uint64_t countAndFlagsBits = v78;
    v148._object = v80;
    char v81 = &selRef_isScreenEnabled;
    outlined init with take of Any(&v148, v147);
    char v82 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v146 = v69;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v147, v70, v72, v82);
    uint64_t v83 = v146;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v86 = v85;
    type metadata accessor for ConversationManagerHost();
    uint64_t v73 = swift_getObjCClassFromMetadata();
    id v87 = objc_msgSend(self, sel_bundleForClass_, v73);
    v88._uint64_t countAndFlagsBits = 0xD000000000000016;
    v152._object = (void *)0xE000000000000000;
    v88._object = (void *)0x80000001B115FAF0;
    v89.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
    v89.value._object = (void *)0xEE0065726F436563;
    v90._uint64_t countAndFlagsBits = 0;
    v90._object = (void *)0xE000000000000000;
    v152._uint64_t countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v88, v89, (NSBundle)v87, v90, v152);

    uint64_t v91 = String.init(format:_:)();
    uint64_t v93 = v92;
    swift_bridgeObjectRelease();
    uint64_t v149 = MEMORY[0x1E4FBB1A0];
    v148._uint64_t countAndFlagsBits = v91;
    v148._object = v93;
    outlined init with take of Any(&v148, v147);
    char v94 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v146 = v48;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v147, v84, v86, v94);
    uint64_t v83 = v146;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v81 = &selRef_isScreenEnabled;
  }
  uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v97 = v96;
  type metadata accessor for ConversationManagerHost();
  Swift::String v98 = self;
  id v99 = objc_msgSend(v98, v81[246], v73);
  v153._object = (void *)0xE000000000000000;
  v100._object = (void *)0x80000001B115FB10;
  v100._uint64_t countAndFlagsBits = 0xD000000000000010;
  v101.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v101.value._object = (void *)0xEE0065726F436563;
  v102._uint64_t countAndFlagsBits = 0;
  v102._object = (void *)0xE000000000000000;
  v153._uint64_t countAndFlagsBits = 0;
  Swift::String v103 = NSLocalizedString(_:tableName:bundle:value:comment:)(v100, v101, (NSBundle)v99, v102, v153);

  uint64_t v104 = MEMORY[0x1E4FBB1A0];
  uint64_t v149 = MEMORY[0x1E4FBB1A0];
  Swift::String v148 = v103;
  outlined init with take of Any(&v148, v147);
  char v105 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v146 = v83;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v147, v95, v97, v105);
  uint64_t v106 = v146;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v107 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v109 = v108;
  id v110 = objc_msgSend(v98, v81[246], v73);
  v154._object = (void *)0xE000000000000000;
  v111._uint64_t countAndFlagsBits = 0x4C45434E4143;
  v111._object = (void *)0xE600000000000000;
  v112.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v112.value._object = (void *)0xEE0065726F436563;
  v113._uint64_t countAndFlagsBits = 0;
  v113._object = (void *)0xE000000000000000;
  v154._uint64_t countAndFlagsBits = 0;
  Swift::String v114 = NSLocalizedString(_:tableName:bundle:value:comment:)(v111, v112, (NSBundle)v110, v113, v154);

  uint64_t v149 = v104;
  Swift::String v148 = v114;
  outlined init with take of Any(&v148, v147);
  char v115 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v146 = v106;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v147, v107, v109, v115);
  uint64_t v135 = v146;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Swift::String v116 = v138;
  uint64_t v117 = *(void *)&v138[OBJC_IVAR___CPActivityAuthorizationManager_notificationCenter + 32];
  uint64_t v133 = *(void *)&v138[OBJC_IVAR___CPActivityAuthorizationManager_notificationCenter + 24];
  uint64_t v134 = __swift_project_boxed_opaque_existential_1(&v138[OBJC_IVAR___CPActivityAuthorizationManager_notificationCenter], v133);
  id v118 = objc_msgSend(v144, sel_groupUUID);
  char v119 = v143;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  uint64_t v120 = v136;
  v148._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  v148._object = v121;
  Swift::String v122 = *(void (**)(char *, uint64_t))(v140 + 8);
  v122(v119, v120);
  v123._uint64_t countAndFlagsBits = 46;
  v123._object = (void *)0xE100000000000000;
  String.append(_:)(v123);
  id v124 = objc_msgSend(v142, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v125._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v125);
  swift_bridgeObjectRelease();
  v122(v119, v120);
  Swift::String v126 = v148;
  uint64_t v127 = swift_allocObject();
  uint64_t v128 = v145;
  *(void *)(v127 + 16) = v116;
  *(void *)(v127 + 24) = v128;
  id v129 = v139;
  *(void *)(v127 + 32) = v139;
  *(unsigned char *)(v127 + 40) = v141 & 1;
  uint64_t v130 = v137;
  *(void *)(v127 + 48) = closure #3 in ActivityAuthorizationManager.requestAuthorizationForApplication(withBundleIdentifier:preparing:overrides:currentScreenShareAttributes:completionHandler:)partial apply;
  *(void *)(v127 + 56) = v130;
  unint64_t v131 = *(void (**)(uint64_t, void *, uint64_t, void *, uint64_t, uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v117 + 8);
  swift_bridgeObjectRetain();
  id v132 = v116;
  swift_retain();
  v131(v126._countAndFlagsBits, v126._object, v128, v129, v135, 1, partial apply for closure #1 in ActivityAuthorizationManager.confirmActivityAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:preparing:currentScreenShareAttributes:overrides:completionHandler:), v127, v133, v117);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
}

unint64_t lazy protocol witness table accessor for type ActivityAuthorizationError and conformance ActivityAuthorizationError()
{
  unint64_t result = lazy protocol witness table cache variable for type ActivityAuthorizationError and conformance ActivityAuthorizationError;
  if (!lazy protocol witness table cache variable for type ActivityAuthorizationError and conformance ActivityAuthorizationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActivityAuthorizationError and conformance ActivityAuthorizationError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ActivityAuthorizationError and conformance ActivityAuthorizationError;
  if (!lazy protocol witness table cache variable for type ActivityAuthorizationError and conformance ActivityAuthorizationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActivityAuthorizationError and conformance ActivityAuthorizationError);
  }
  return result;
}

void specialized ActivityAuthorizationManager.confirmActivityAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:preparing:currentScreenShareAttributes:overrides:completionHandler:)(uint64_t a1, void *a2, void *a3, int a4, uint64_t a5, void (*a6)(uint64_t, void), uint64_t a7)
{
  uint64_t v8 = v7;
  id v130 = a3;
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v116 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a5 && *(unsigned char *)(a5 + OBJC_IVAR___CPAuthorizationRequestOverrides_confirmReplacement) != 1)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Log.default);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v20, v21)) {
      goto LABEL_22;
    }
    os_log_type_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v22 = 0;
    char v23 = "Skipping prompt in confirmActivityAuthorizationIfNecessary, confirmReplacement override is set";
    goto LABEL_21;
  }
  if (objc_msgSend(self, sel_supportsMultipleActivitySessions))
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Log.default);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v20, v21)) {
      goto LABEL_22;
    }
    os_log_type_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v22 = 0;
    char v23 = "Skipping prompt in confirmActivityAuthorizationIfNecessary, multiple activities supported";
LABEL_21:
    _os_log_impl(&dword_1B0DF7000, v20, v21, v23, v22, 2u);
    MEMORY[0x1B3EA39E0](v22, -1, -1);
LABEL_22:

    v38._uint64_t countAndFlagsBits = a1;
    v38._object = a2;
    ActivityAuthorizationManager.setAuthorization(_:for:)(1, v38);
    if (a4)
    {
      uint64_t v39 = *(void *)&v8[OBJC_IVAR___CPActivityAuthorizationManager_lock];
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v39 + 16));
      swift_beginAccess();
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)((Swift::Int *)v132, a1, (Swift::Int)a2);
      swift_endAccess();
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v39 + 16));
    }
    a6(1, 0);
    return;
  }
  uint64_t v127 = v16;
  uint64_t v128 = v15;
  id v24 = objc_msgSend(v130, sel_activitySessions);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
  lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject();
  uint64_t v25 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  id v26 = specialized Sequence.max(by:)(v25);
  swift_bridgeObjectRelease();
  if (!v26)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static Log.default);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v20, v21)) {
      goto LABEL_22;
    }
    os_log_type_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v22 = 0;
    char v23 = "Skipping prompt in confirmActivityAuthorizationIfNecessary, no representative activity session";
    goto LABEL_21;
  }
  uint64_t v126 = a7;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  __swift_project_value_buffer(v27, (uint64_t)static Log.default);
  id v28 = v26;
  id v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  BOOL v31 = os_log_type_enabled(v29, v30);
  id v129 = v28;
  id v124 = a2;
  Swift::String v125 = a6;
  Swift::String v122 = v8;
  uint64_t v123 = a1;
  int v121 = a4;
  if (v31)
  {
    BOOL v32 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = (void *)swift_slowAlloc();
    *(_DWORD *)BOOL v32 = 138412290;
    v133._uint64_t countAndFlagsBits = (uint64_t)v129;
    id v34 = v129;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v33 = v26;

    _os_log_impl(&dword_1B0DF7000, v29, v30, "Prompting user to replace activity: %@", v32, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v33, -1, -1);
    id v35 = v32;
    id v28 = v129;
    MEMORY[0x1B3EA39E0](v35, -1, -1);
  }
  else
  {
  }
  unint64_t v40 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  id v41 = objc_msgSend(v28, sel_activity);
  id v42 = objc_msgSend(v41, sel_metadata);

  uint64_t v43 = &selRef_isScreenEnabled;
  uint64_t v44 = MEMORY[0x1E4FBB1A0];
  uint64_t v120 = v18;
  if (v42 && (id v45 = objc_msgSend(v42, sel_title), v42, v45))
  {
    uint64_t v119 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v118 = v46;

    uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v49 = v48;
    type metadata accessor for ConversationManagerHost();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v51 = self;
    id v52 = objc_msgSend(v51, sel_bundleForClass_, ObjCClassFromMetadata);
    v53._uint64_t countAndFlagsBits = 0xD000000000000015;
    v135._object = (void *)0xE000000000000000;
    v53._object = (void *)0x80000001B115FB30;
    v54.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
    v54.value._object = (void *)0xEE0065726F436563;
    v55._uint64_t countAndFlagsBits = 0;
    v55._object = (void *)0xE000000000000000;
    v135._uint64_t countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v53, v54, (NSBundle)v52, v55, v135);

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v56 = swift_allocObject();
    *(_OWORD *)(v56 + 16) = xmmword_1B1138A80;
    *(void *)(v56 + 56) = v44;
    *(void *)(v56 + 64) = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v57 = v118;
    *(void *)(v56 + 32) = v119;
    *(void *)(v56 + 40) = v57;
    uint64_t v58 = String.init(format:_:)();
    Swift::String_optional v60 = v59;
    swift_bridgeObjectRelease();
    uint64_t v134 = v44;
    v133._uint64_t countAndFlagsBits = v58;
    v133._object = v60;
    outlined init with take of Any(&v133, v132);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v131 = v40;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v132, v47, v49, isUniquelyReferenced_nonNull_native);
    unint64_t v40 = v131;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v64 = v63;
    id v65 = objc_msgSend(v51, sel_bundleForClass_, ObjCClassFromMetadata);
    unint64_t v66 = 0xD000000000000017;
    unint64_t v115 = 0xE000000000000000;
    uint64_t v43 = &selRef_isScreenEnabled;
    uint64_t v67 = "REPLACE_CONTENT_MESSAGE";
  }
  else
  {
    uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v64 = v68;
    type metadata accessor for ConversationManagerHost();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v65 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
    unint64_t v66 = 0xD000000000000016;
    unint64_t v115 = 0xE000000000000000;
    uint64_t v67 = "REPLACE_ACTIVITY_TITLE";
  }
  unint64_t v69 = (unint64_t)(v67 - 32) | 0x8000000000000000;
  v70.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v70.value._object = (void *)0xEE0065726F436563;
  v71._uint64_t countAndFlagsBits = 0;
  v71._object = (void *)0xE000000000000000;
  uint64_t v72 = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v66, v70, (NSBundle)v65, v71, *(Swift::String *)(&v115 - 1));

  uint64_t v73 = String.init(format:_:)();
  Swift::String v75 = v74;
  swift_bridgeObjectRelease();
  uint64_t v134 = v44;
  v133._uint64_t countAndFlagsBits = v73;
  v133._object = v75;
  outlined init with take of Any(&v133, v132);
  char v76 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v131 = v40;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v132, v62, v64, v76);
  unint64_t v77 = v131;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v80 = v79;
  type metadata accessor for ConversationManagerHost();
  char v81 = self;
  id v82 = objc_msgSend(v81, v43[246], ObjCClassFromMetadata);
  v136._object = (void *)0xE000000000000000;
  v83._object = (void *)0x80000001B115FB10;
  v83._uint64_t countAndFlagsBits = 0xD000000000000010;
  v84.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v84.value._object = (void *)0xEE0065726F436563;
  v85._uint64_t countAndFlagsBits = 0;
  v85._object = (void *)0xE000000000000000;
  v136._uint64_t countAndFlagsBits = 0;
  Swift::String v86 = NSLocalizedString(_:tableName:bundle:value:comment:)(v83, v84, (NSBundle)v82, v85, v136);

  uint64_t v134 = v44;
  Swift::String v133 = v86;
  outlined init with take of Any(&v133, v132);
  char v87 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v131 = v77;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v132, v78, v80, v87);
  unint64_t v88 = v131;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v89 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v91 = v90;
  id v92 = objc_msgSend(v81, (SEL)v43 + 3877, ObjCClassFromMetadata);
  v137._object = (void *)0xE000000000000000;
  v93._uint64_t countAndFlagsBits = 0x4C45434E4143;
  v93._object = (void *)0xE600000000000000;
  v94.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v94.value._object = (void *)0xEE0065726F436563;
  v95._uint64_t countAndFlagsBits = 0;
  v95._object = (void *)0xE000000000000000;
  v137._uint64_t countAndFlagsBits = 0;
  Swift::String v96 = NSLocalizedString(_:tableName:bundle:value:comment:)(v93, v94, (NSBundle)v92, v95, v137);

  uint64_t v134 = v44;
  Swift::String v133 = v96;
  outlined init with take of Any(&v133, v132);
  char v97 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v131 = v88;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v132, v89, v91, v97);
  uint64_t v119 = v131;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Swift::String v98 = v122;
  uint64_t v99 = *(void *)&v122[OBJC_IVAR___CPActivityAuthorizationManager_notificationCenter + 32];
  uint64_t v117 = *(void *)&v122[OBJC_IVAR___CPActivityAuthorizationManager_notificationCenter + 24];
  id v118 = __swift_project_boxed_opaque_existential_1(&v122[OBJC_IVAR___CPActivityAuthorizationManager_notificationCenter], v117);
  id v100 = objc_msgSend(v130, sel_groupUUID);
  Swift::String_optional v101 = v120;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  uint64_t v102 = v128;
  v133._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  v133._object = v103;
  uint64_t v104 = *(void (**)(char *, uint64_t))(v127 + 8);
  v104(v101, v102);
  v105._uint64_t countAndFlagsBits = 46;
  v105._object = (void *)0xE100000000000000;
  String.append(_:)(v105);
  id v106 = objc_msgSend(v129, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v107._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v107);
  swift_bridgeObjectRelease();
  v104(v101, v102);
  Swift::String v108 = v133;
  uint64_t v109 = swift_allocObject();
  uint64_t v111 = v123;
  id v110 = v124;
  *(void *)(v109 + 16) = v98;
  *(void *)(v109 + 24) = v111;
  *(void *)(v109 + 32) = v110;
  *(unsigned char *)(v109 + 40) = v121 & 1;
  uint64_t v112 = v126;
  *(void *)(v109 + 48) = v125;
  *(void *)(v109 + 56) = v112;
  Swift::String v113 = *(void (**)(uint64_t, void *, uint64_t, void *, uint64_t, uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v99 + 8);
  id v114 = v98;
  swift_bridgeObjectRetain();
  swift_retain();
  v113(v108._countAndFlagsBits, v108._object, v111, v110, v119, 1, partial apply for closure #1 in ActivityAuthorizationManager.confirmActivityAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:preparing:currentScreenShareAttributes:overrides:completionHandler:), v109, v117, v99);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
}

unint64_t specialized static ActivityAuthorizationManager.notificationDisplayInformation(audioRoutePolicyManager:activity:conversation:)(void *a1, void *a2, void *a3)
{
  unint64_t v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  id v7 = objc_msgSend(a1, sel_pickedRoute);
  uint64_t v8 = MEMORY[0x1E4FBB1A0];
  unint64_t v126 = v6;
  id v127 = a1;
  if (v7)
  {
    id v9 = v7;
    if ((objc_msgSend(a1, sel_sharePlaySupported) & 1) == 0)
    {
      type metadata accessor for ConversationManagerHost();
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      id v45 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
      v133._object = (void *)0xE000000000000000;
      v46._object = (void *)0x80000001B115FC80;
      v46._uint64_t countAndFlagsBits = 0xD000000000000025;
      v47.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
      v47.value._object = (void *)0xEE0065726F436563;
      v48._uint64_t countAndFlagsBits = 0;
      v48._object = (void *)0xE000000000000000;
      v133._uint64_t countAndFlagsBits = 0;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v46, v47, (NSBundle)v45, v48, v133);

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v49 = swift_allocObject();
      *(_OWORD *)(v49 + 16) = xmmword_1B1138A80;
      id v50 = objc_msgSend(v9, sel_name);
      uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v52 = v8;
      uint64_t v54 = v53;

      uint64_t v28 = v52;
      *(void *)(v49 + 56) = v52;
      *(void *)(v49 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v49 + 32) = v51;
      *(void *)(v49 + 40) = v54;
      id v29 = &selRef_isScreenEnabled;
      os_log_type_t v30 = v127;
      uint64_t v31 = String.init(format:_:)();
      Swift::String v125 = v55;
      swift_bridgeObjectRelease();

      goto LABEL_10;
    }
  }
  id v10 = objc_msgSend(a2, sel_metadata);
  if (v10
    && (uint64_t v11 = v10, v12 = objc_msgSend(v10, sel_title), v11, v12))
  {
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;

    type metadata accessor for ConversationManagerHost();
    uint64_t v16 = swift_getObjCClassFromMetadata();
    id v17 = objc_msgSend(self, sel_bundleForClass_, v16);
    v18._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
    v131._object = (void *)0xE000000000000000;
    v18._object = (void *)0x80000001B115FC60;
    v19.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
    v19.value._object = (void *)0xEE0065726F436563;
    v20._uint64_t countAndFlagsBits = 0;
    v20._object = (void *)0xE000000000000000;
    v131._uint64_t countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v18, v19, (NSBundle)v17, v20, v131);

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_1B1138A70;
    *(void *)(v21 + 56) = v8;
    uint64_t v22 = v8;
    unint64_t v23 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v21 + 64) = v23;
    *(void *)(v21 + 32) = v13;
    *(void *)(v21 + 40) = v15;
    id v24 = objc_msgSend(a3, sel_displayName);
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v27 = v26;

    uint64_t v28 = v22;
    *(void *)(v21 + 96) = v22;
    *(void *)(v21 + 104) = v23;
    *(void *)(v21 + 72) = v25;
    *(void *)(v21 + 80) = v27;
    id v29 = &selRef_isScreenEnabled;
    os_log_type_t v30 = v127;
    uint64_t v31 = String.init(format:_:)();
    Swift::String v125 = v32;
  }
  else
  {
    type metadata accessor for ConversationManagerHost();
    uint64_t v33 = swift_getObjCClassFromMetadata();
    id v34 = objc_msgSend(self, sel_bundleForClass_, v33);
    v35._uint64_t countAndFlagsBits = 0xD000000000000023;
    v132._object = (void *)0xE000000000000000;
    v35._object = (void *)0x80000001B115FB70;
    v36.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
    v36.value._object = (void *)0xEE0065726F436563;
    v37._uint64_t countAndFlagsBits = 0;
    v37._object = (void *)0xE000000000000000;
    v132._uint64_t countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v35, v36, (NSBundle)v34, v37, v132);

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = xmmword_1B1138A80;
    id v39 = objc_msgSend(a3, sel_displayName);
    uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v42 = v41;

    uint64_t v28 = v8;
    *(void *)(v38 + 56) = v8;
    *(void *)(v38 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v38 + 32) = v40;
    *(void *)(v38 + 40) = v42;
    id v29 = &selRef_isScreenEnabled;
    os_log_type_t v30 = v127;
    uint64_t v31 = String.init(format:_:)();
    Swift::String v125 = v43;
  }
  swift_bridgeObjectRelease();
LABEL_10:
  if (([v30 v29[408]] & 1) != 0
    || (id v56 = objc_msgSend(a2, sel_localizedApplicationName)) == 0)
  {
    if (([v30 v29[408]] & 1) == 0)
    {
      type metadata accessor for ConversationManagerHost();
      uint64_t v79 = swift_getObjCClassFromMetadata();
      id v80 = objc_msgSend(self, sel_bundleForClass_, v79);
      v136._object = (void *)0xE000000000000000;
      v81._object = (void *)0x80000001B115FBA0;
      v81._uint64_t countAndFlagsBits = 0xD000000000000025;
      v82.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
      v82.value._object = (void *)0xEE0065726F436563;
      v83._uint64_t countAndFlagsBits = 0;
      v83._object = (void *)0xE000000000000000;
      v136._uint64_t countAndFlagsBits = 0;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v81, v82, (NSBundle)v80, v83, v136);

      uint64_t v84 = String.init(format:_:)();
      Swift::String v86 = v85;
      uint64_t v67 = v28;
      goto LABEL_20;
    }
    id v68 = objc_msgSend(a2, sel_localizedApplicationName);
    uint64_t v67 = v28;
    if (v68)
    {
      unint64_t v69 = v68;
      uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v72 = v71;

      type metadata accessor for ConversationManagerHost();
      uint64_t v73 = swift_getObjCClassFromMetadata();
      id v74 = objc_msgSend(self, sel_bundleForClass_, v73);
      v75._uint64_t countAndFlagsBits = 0xD000000000000015;
      v135._object = (void *)0xE000000000000000;
      v75._object = (void *)0x80000001B115FC10;
      v76.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
      v76.value._object = (void *)0xEE0065726F436563;
      v77._uint64_t countAndFlagsBits = 0;
      v77._object = (void *)0xE000000000000000;
      v135._uint64_t countAndFlagsBits = 0;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v75, v76, (NSBundle)v74, v77, v135);

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v78 = swift_allocObject();
      *(_OWORD *)(v78 + 16) = xmmword_1B1138A80;
      *(void *)(v78 + 56) = v28;
      *(void *)(v78 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v78 + 32) = v70;
      *(void *)(v78 + 40) = v72;
    }
    else
    {
      type metadata accessor for ConversationManagerHost();
      uint64_t v87 = swift_getObjCClassFromMetadata();
      id v88 = objc_msgSend(self, sel_bundleForClass_, v87);
      v89._uint64_t countAndFlagsBits = 0xD000000000000012;
      v137._object = (void *)0xE000000000000000;
      v89._object = (void *)0x80000001B115FBF0;
      v90.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
      v90.value._object = (void *)0xEE0065726F436563;
      v91._uint64_t countAndFlagsBits = 0;
      v91._object = (void *)0xE000000000000000;
      v137._uint64_t countAndFlagsBits = 0;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v89, v90, (NSBundle)v88, v91, v137);
    }
  }
  else
  {
    uint64_t v57 = v56;
    uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v60 = v59;

    type metadata accessor for ConversationManagerHost();
    uint64_t v61 = swift_getObjCClassFromMetadata();
    id v62 = objc_msgSend(self, sel_bundleForClass_, v61);
    v63._uint64_t countAndFlagsBits = 0xD000000000000028;
    v134._object = (void *)0xE000000000000000;
    v63._object = (void *)0x80000001B115FC30;
    v64.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
    v64.value._object = (void *)0xEE0065726F436563;
    v65._uint64_t countAndFlagsBits = 0;
    v65._object = (void *)0xE000000000000000;
    v134._uint64_t countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v63, v64, (NSBundle)v62, v65, v134);

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v66 = swift_allocObject();
    *(_OWORD *)(v66 + 16) = xmmword_1B1138A80;
    uint64_t v67 = v28;
    *(void *)(v66 + 56) = v28;
    *(void *)(v66 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v66 + 32) = v58;
    *(void *)(v66 + 40) = v60;
  }
  uint64_t v84 = String.init(format:_:)();
  Swift::String v86 = v92;
LABEL_20:
  swift_bridgeObjectRelease();
  uint64_t v93 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v95 = v94;
  uint64_t v130 = v67;
  v129._uint64_t countAndFlagsBits = v31;
  v129._object = v125;
  outlined init with take of Any(&v129, v128);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v128, v93, v95, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v97 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v99 = v98;
  uint64_t v130 = v67;
  v129._uint64_t countAndFlagsBits = v84;
  v129._object = v86;
  outlined init with take of Any(&v129, v128);
  char v100 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v128, v97, v99, v100);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v101 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v103 = v102;
  unsigned int v104 = objc_msgSend(v127, sel_sharePlaySupported);
  type metadata accessor for ConversationManagerHost();
  uint64_t v105 = swift_getObjCClassFromMetadata();
  id v106 = objc_msgSend(self, sel_bundleForClass_, v105);
  if (v104)
  {
    unint64_t v124 = 0xE000000000000000;
    unint64_t v107 = 0x4148535F4E494F4ALL;
    unint64_t v108 = 0xEE0059414C504552;
  }
  else
  {
    unint64_t v107 = 0xD000000000000011;
    unint64_t v124 = 0xE000000000000000;
    unint64_t v108 = 0x80000001B115FBD0;
  }
  v109.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v109.value._object = (void *)0xEE0065726F436563;
  v110._uint64_t countAndFlagsBits = 0;
  v110._object = (void *)0xE000000000000000;
  uint64_t v111 = 0;
  Swift::String v112 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v107, v109, (NSBundle)v106, v110, *(Swift::String *)(&v124 - 1));

  uint64_t v130 = v67;
  Swift::String v129 = v112;
  outlined init with take of Any(&v129, v128);
  char v113 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v128, v101, v103, v113);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v114 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v116 = v115;
  id v117 = objc_msgSend(self, sel_bundleForClass_, v105);
  v138._object = (void *)0xE000000000000000;
  v118._uint64_t countAndFlagsBits = 0x574F4E5F544F4ELL;
  v118._object = (void *)0xE700000000000000;
  v119.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
  v119.value._object = (void *)0xEE0065726F436563;
  v120._uint64_t countAndFlagsBits = 0;
  v120._object = (void *)0xE000000000000000;
  v138._uint64_t countAndFlagsBits = 0;
  Swift::String v121 = NSLocalizedString(_:tableName:bundle:value:comment:)(v118, v119, (NSBundle)v117, v120, v138);

  uint64_t v130 = v67;
  Swift::String v129 = v121;
  outlined init with take of Any(&v129, v128);
  char v122 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v128, v114, v116, v122);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v126;
}

void specialized ActivityAuthorizationManager.requestAuthorizationForApplicationLaunch(withActivity:completionHandler:)(void *a1, uint64_t a2, void (**a3)(void, void, void))
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a3;
  _Block_copy(a3);
  id v7 = objc_msgSend(a1, sel_bundleIdentifier);
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    if (MEMORY[0x1B3EA3B30](a2 + OBJC_IVAR___CPActivityAuthorizationManager_dataSource))
    {
      swift_getObjectType();
      CPConversationManagerDataSource.activeConversation.getter();
      if (v12)
      {
        id v29 = v12;
        if (((*(uint64_t (**)(uint64_t, void *))((*MEMORY[0x1E4FBC8C8] & **(void **)(a2
                                                                                               + OBJC_IVAR___CPActivityAuthorizationManager_appPolicyManager))
                                                         + 0x150))(v9, v11) & 1) != 0&& objc_msgSend(*(id *)(a2 + OBJC_IVAR___CPActivityAuthorizationManager_audioRoutePolicyManager), sel_sharePlaySupported))
        {
          swift_bridgeObjectRelease();
          if (one-time initialization token for host != -1) {
            swift_once();
          }
          uint64_t v13 = type metadata accessor for Logger();
          __swift_project_value_buffer(v13, (uint64_t)static Log.host);
          uint64_t v14 = Logger.logObject.getter();
          os_log_type_t v15 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v14, v15))
          {
            uint64_t v16 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v16 = 0;
            _os_log_impl(&dword_1B0DF7000, v14, v15, "Bypassing authorization since application is already authorized.", v16, 2u);
            MEMORY[0x1B3EA39E0](v16, -1, -1);
          }

          a3[2](a3, 1, 0);
          swift_release();
        }
        else
        {
          ActivityAuthorizationManager.confirmActivityLaunchAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:withActivity:completionHandler:)(v9, v11, v29, a1, (uint64_t)partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned ObjCBool, @unowned NSError?) -> (), v6);
          swift_release();
          swift_bridgeObjectRelease();
        }
        swift_unknownObjectRelease();
      }
      else
      {
        if (one-time initialization token for host != -1) {
          swift_once();
        }
        uint64_t v24 = type metadata accessor for Logger();
        __swift_project_value_buffer(v24, (uint64_t)static Log.host);
        swift_bridgeObjectRetain();
        uint64_t v25 = Logger.logObject.getter();
        os_log_type_t v26 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v25, v26))
        {
          uint64_t v27 = (uint8_t *)swift_slowAlloc();
          uint64_t v28 = swift_slowAlloc();
          uint64_t v30 = v28;
          *(_DWORD *)uint64_t v27 = 136315138;
          swift_bridgeObjectRetain();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, (unint64_t)v11, &v30);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B0DF7000, v25, v26, "Not allowing activation from %s because there is no active conversation.", v27, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v28, -1, -1);
          MEMORY[0x1B3EA39E0](v27, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        a3[2](a3, 0, 0);
        swift_release();
        swift_unknownObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      a3[2](a3, 0, 0);
      swift_release();
    }
  }
  else
  {
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Log.host);
    id v18 = a1;
    Swift::String_optional v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 138412290;
      uint64_t v30 = (uint64_t)v18;
      id v23 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v22 = v18;

      _os_log_impl(&dword_1B0DF7000, v19, v20, "Invalid bundleIdentifier for activity %@", v21, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v22, -1, -1);
      MEMORY[0x1B3EA39E0](v21, -1, -1);
    }
    else
    {
    }
    a3[2](a3, 0, 0);
    swift_release();
  }
}

void specialized ActivityAuthorizationManager.conversationManager(_:conversationChanged:)(void *a1)
{
  if (objc_msgSend(a1, sel_state) == (id)4)
  {
    uint64_t v2 = *(void *)(v1 + OBJC_IVAR___CPActivityAuthorizationManager_lock);
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v2 + 16));
    uint64_t v3 = (void *)(v1 + OBJC_IVAR___CPActivityAuthorizationManager_preparedAuthorizedBundleIdentifiers);
    swift_beginAccess();
    *uint64_t v3 = MEMORY[0x1E4FBC870];
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + 16));
  }
}

id sub_1B0F9F164@<X0>(void *a1@<X8>)
{
  id result = ActivityAuthorizationManager.neighborhoodActivityConduit.getter();
  *a1 = result;
  return result;
}

void sub_1B0F9F190(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___CPActivityAuthorizationManager____lazy_storage___neighborhoodActivityConduit);
  *(void *)(*a2 + OBJC_IVAR___CPActivityAuthorizationManager____lazy_storage___neighborhoodActivityConduit) = *a1;
  id v3 = v2;
}

unsigned char *storeEnumTagSinglePayload for ActivityAuthorizationError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *id result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B0F9F2ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ActivityAuthorizationError()
{
  return &type metadata for ActivityAuthorizationError;
}

uint64_t type metadata accessor for ActivityAuthorizationManager()
{
  return self;
}

uint64_t method lookup function for ActivityAuthorizationManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ActivityAuthorizationManager);
}

uint64_t dispatch thunk of ActivityAuthorizationManager.__allocating_init(dataSource:notificationCenter:queue:appPolicyManager:audioRoutePolicyManager:featureFlags:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t sub_1B0F9F334()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t objectdestroy_5Tm()
{
  swift_release();

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 88, 7);
}

void partial apply for closure #1 in promptToStart #1 () in ActivityAuthorizationManager.requestAuthorizationForApplication(withBundleIdentifier:preparing:overrides:currentScreenShareAttributes:completionHandler:)(char a1)
{
  uint64_t v2 = *(void (**)(uint64_t, void))(v1 + 16);
  if (a1) {
    specialized ActivityAuthorizationManager.confirmActivityAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:preparing:currentScreenShareAttributes:overrides:completionHandler:)(*(void *)(v1 + 40), *(void **)(v1 + 48), *(void **)(v1 + 56), *(unsigned __int8 *)(v1 + 64), *(void *)(v1 + 80), v2, *(void *)(v1 + 24));
  }
  else {
    ((void (*)(void))v2)(0);
  }
}

unint64_t lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject;
  if (!lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject)
  {
    type metadata accessor for TUConversationActivity(255, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject);
  }
  return result;
}

uint64_t partial apply for closure #1 in ActivityAuthorizationManager.confirmActivityLaunchAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:withActivity:completionHandler:)(uint64_t a1)
{
  return partial apply for closure #1 in ActivityAuthorizationManager.confirmActivityLaunchAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:withActivity:completionHandler:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))closure #1 in ActivityAuthorizationManager.confirmActivityLaunchAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:withActivity:completionHandler:));
}

uint64_t objectdestroy_2Tm_0()
{
  swift_release();
  swift_release();
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t objectdestroy_49Tm()
{
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for closure #1 in ActivityAuthorizationManager.deferAuthorizationRequestToUser(forApplicationWithBundleIdentifier:onConversation:preparing:overrides:completionHandler:)(uint64_t a1)
{
  return partial apply for closure #1 in ActivityAuthorizationManager.confirmActivityLaunchAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:withActivity:completionHandler:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))closure #1 in ActivityAuthorizationManager.deferAuthorizationRequestToUser(forApplicationWithBundleIdentifier:onConversation:preparing:overrides:completionHandler:));
}

uint64_t partial apply for closure #1 in ActivityAuthorizationManager.confirmActivityLaunchAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:withActivity:completionHandler:)(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

uint64_t objectdestroy_46Tm()
{
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x1F4186498](v0, 64, 7);
}

void partial apply for closure #1 in ActivityAuthorizationManager.confirmActivityAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:preparing:currentScreenShareAttributes:overrides:completionHandler:)(uint64_t a1)
{
  closure #1 in ActivityAuthorizationManager.confirmActivityAuthorizationIfNecessary(forApplicationWithBundleIdentifier:onConversation:preparing:currentScreenShareAttributes:overrides:completionHandler:)(a1, *(void *)(v1 + 16), *(Swift::String *)(v1 + 24), *(unsigned char *)(v1 + 40), *(void (**)(uint64_t, void *))(v1 + 48));
}

id BackgroundSessionManagerHost.queue.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore28BackgroundSessionManagerHost_queue);
}

uint64_t BackgroundSessionManagerHost.__allocating_init(listeners:featureFlags:)(unint64_t a1, void *a2)
{
  uint64_t v16 = a2;
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  unsigned int v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v7);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v8 - 8);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v17 = 0;
  unint64_t v18 = 0xE000000000000000;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  uint64_t v17 = MEMORY[0x1E4FBC860];
  _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4FBCC58], v3);
  uint64_t v9 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  id v10 = objc_allocWithZone(v15);
  uint64_t v11 = v16;
  specialized BackgroundSessionManagerHost.init(listeners:queue:featureFlags:)(a1, v9, v16);
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();

  return v13;
}

uint64_t BackgroundSessionManagerHost.__allocating_init(listeners:queue:featureFlags:)(unint64_t a1, void *a2, void *a3)
{
  id v7 = objc_allocWithZone(v3);
  specialized BackgroundSessionManagerHost.init(listeners:queue:featureFlags:)(a1, a2, a3);
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();

  return v9;
}

uint64_t BackgroundSessionManagerHost.init(listeners:queue:featureFlags:)(unint64_t a1, void *a2, void *a3)
{
  specialized BackgroundSessionManagerHost.init(listeners:queue:featureFlags:)(a1, a2, a3);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();

  return v6;
}

id BackgroundSessionManagerHost.__deallocating_deinit()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  unint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC14CopresenceCore28BackgroundSessionManagerHost_listeners];
  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id result = (id)swift_bridgeObjectRetain();
    if (v3) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    v8.receiver = v0;
    v8.super_class = ObjectType;
    return objc_msgSendSuper2(&v8, sel_dealloc);
  }
  swift_bridgeObjectRetain();
  id result = (id)_CocoaArrayWrapper.endIndex.getter();
  uint64_t v3 = (uint64_t)result;
  if (!result) {
    goto LABEL_10;
  }
LABEL_3:
  if (v3 >= 1)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      if ((v2 & 0xC000000000000001) != 0) {
        id v6 = (id)MEMORY[0x1B3EA25C0](i, v2);
      }
      else {
        id v6 = *(id *)(v2 + 8 * i + 32);
      }
      id v7 = v6;
      objc_msgSend(v6, sel_invalidate);
    }
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall BackgroundSessionManagerHost.resume()()
{
  unint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14CopresenceCore28BackgroundSessionManagerHost_listeners);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (!v2) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v2) {
      goto LABEL_10;
    }
  }
  if (v2 < 1)
  {
    __break(1u);
    return;
  }
  for (uint64_t i = 0; i != v2; ++i)
  {
    if ((v1 & 0xC000000000000001) != 0) {
      id v4 = (id)MEMORY[0x1B3EA25C0](i, v1);
    }
    else {
      id v4 = *(id *)(v1 + 8 * i + 32);
    }
    uint64_t v5 = v4;
    objc_msgSend(v4, sel_resume);
  }
LABEL_10:
  swift_bridgeObjectRelease();
}

uint64_t BackgroundSessionManagerHost.dataSource(for:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  objc_super v8 = (uint64_t *)(v3 + OBJC_IVAR____TtC14CopresenceCore28BackgroundSessionManagerHost_clientIdentifierToDataSourceMap);
  swift_beginAccess();
  uint64_t v9 = *v8;
  if (*(void *)(*v8 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if (v11)
    {
      outlined init with copy of UserNotificationCenter(*(void *)(v9 + 56) + 40 * v10, (uint64_t)&v20);
    }
    else
    {
      uint64_t v22 = 0;
      long long v20 = 0u;
      long long v21 = 0u;
    }
  }
  else
  {
    uint64_t v22 = 0;
    long long v20 = 0u;
    long long v21 = 0u;
    swift_bridgeObjectRetain();
  }
  outlined init with take of BackgroundSessionManagerDataSource?((uint64_t)&v20, (uint64_t)&v18);
  if (v19)
  {
    outlined init with take of BackgroundSessionManagerDataSource(&v18, (uint64_t)a3);
  }
  else
  {
    uint64_t v12 = type metadata accessor for BackgroundSessionManager();
    uint64_t v13 = *(void **)(v4 + OBJC_IVAR____TtC14CopresenceCore28BackgroundSessionManagerHost_queue);
    swift_bridgeObjectRetain();
    uint64_t v14 = (void *)BackgroundSessionManager.__allocating_init(clientIdentifier:queue:)(a1, a2, v13);
    Class v15 = *(void (**)(uint64_t, _UNKNOWN **))((*MEMORY[0x1E4FBC8C8] & *v14) + 0xA8);
    uint64_t v16 = swift_unknownObjectRetain();
    v15(v16, &protocol witness table for BackgroundSessionManagerHost);
    a3[3] = v12;
    a3[4] = &protocol witness table for BackgroundSessionManager;
    *a3 = v14;
    outlined destroy of BackgroundSessionManagerDataSource?((uint64_t)&v18);
  }
  swift_bridgeObjectRelease();
  swift_endAccess();
  outlined init with copy of UserNotificationCenter((uint64_t)a3, (uint64_t)&v20);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.setter((uint64_t)&v20, a1, a2);
  return swift_endAccess();
}

id BackgroundSessionManagerHost.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void BackgroundSessionManagerHost.init()()
{
}

Swift::Bool __swiftcall BackgroundSessionManagerHost.listener(_:shouldAcceptNewConnection:)(NSXPCListener _, NSXPCConnection shouldAcceptNewConnection)
{
  return specialized BackgroundSessionManagerHost.listener(_:shouldAcceptNewConnection:)(shouldAcceptNewConnection.super.isa);
}

uint64_t BackgroundSessionManagerHost.didUpdateActivitySessions(backgroundSessionManager:activitySessions:)(uint64_t a1, uint64_t a2)
{
  return specialized BackgroundSessionManagerHost.didUpdateActivitySessions(backgroundSessionManager:activitySessions:)(a2);
}

void closure #1 in BackgroundSessionManagerHost.didUpdateActivitySessions(backgroundSessionManager:activitySessions:)(uint64_t a1)
{
  id v1 = objc_msgSend(*(id *)(a1 + direct field offset for XPCHostConnection.connection), sel_remoteObjectProxy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BackgroundSessionManagerXPCHost);
  if (swift_dynamicCast())
  {
    type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for TUConversationActivitySessionContainer);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v3, sel_updateWithActivitySessions_, isa);
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t BackgroundSessionManagerHost.didRejectKeyRecoveryRequest(backgroundSessionManager:onSession:)(uint64_t a1, uint8_t *a2)
{
  return specialized BackgroundSessionManagerHost.didRejectKeyRecoveryRequest(backgroundSessionManager:onSession:)(a2);
}

void closure #1 in BackgroundSessionManagerHost.didRejectKeyRecoveryRequest(backgroundSessionManager:onSession:)(uint64_t a1)
{
  id v1 = objc_msgSend(*(id *)(a1 + direct field offset for XPCHostConnection.connection), sel_remoteObjectProxy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BackgroundSessionManagerXPCHost);
  if (swift_dynamicCast())
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v3, sel_sessionDidRejectKeyRecoveryRequestWithSessionID_, isa);
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t BackgroundSessionManagerHost.didReceiveUpdatedUnknownParticipantList(backgroundSessionManager:onSession:unknownParticipants:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized BackgroundSessionManagerHost.didReceiveUpdatedUnknownParticipantList(backgroundSessionManager:onSession:unknownParticipants:)(a2, a3);
}

void closure #1 in BackgroundSessionManagerHost.didReceiveUpdatedUnknownParticipantList(backgroundSessionManager:onSession:unknownParticipants:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = objc_msgSend(*(id *)(a1 + direct field offset for XPCHostConnection.connection), sel_remoteObjectProxy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BackgroundSessionManagerXPCHost);
  if (swift_dynamicCast())
  {
    uint64_t v22 = v23;
    v21.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
    if ((a3 & 0xC000000000000001) != 0)
    {
      uint64_t v5 = __CocoaSet.count.getter();
      unint64_t v6 = MEMORY[0x1E4FBC860];
      if (!v5) {
        goto LABEL_16;
      }
      uint64_t v7 = v5;
      unint64_t v28 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v24 = __CocoaSet.startIndex.getter();
      uint64_t v25 = v8;
      unsigned __int8 v26 = 1;
      if ((v7 & 0x8000000000000000) == 0) {
        goto LABEL_10;
      }
      __break(1u);
    }
    uint64_t v7 = *(void *)(a3 + 16);
    unint64_t v6 = MEMORY[0x1E4FBC860];
    if (v7)
    {
      unint64_t v28 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v24 = specialized _NativeSet.startIndex.getter(a3);
      uint64_t v25 = v9;
      unsigned __int8 v26 = v10 & 1;
      while (1)
      {
LABEL_10:
        while (1)
        {
          specialized Set.subscript.getter(v24, v25, v26, a3);
          uint64_t v17 = v16;
          id v18 = *(id *)&v16[OBJC_IVAR____TtC14CopresenceCore17AddressableMember_handle];

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          if ((a3 & 0xC000000000000001) != 0) {
            break;
          }
          uint64_t v11 = specialized _NativeSet.index(after:)(v24, v25, v26, a3);
          uint64_t v13 = v12;
          char v15 = v14;
          outlined consume of Set<AddressableMember>.Index._Variant(v24, v25, v26);
          uint64_t v24 = v11;
          uint64_t v25 = v13;
          unsigned __int8 v26 = v15 & 1;
          if (!--v7) {
            goto LABEL_15;
          }
        }
        if ((v26 & 1) == 0) {
          break;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<AddressableMember>.Index);
        uint64_t v19 = (void (*)(char *, void))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v19(v27, 0);
        if (!--v7)
        {
LABEL_15:
          outlined consume of Set<AddressableMember>.Index._Variant(v24, v25, v26);
          unint64_t v6 = v28;
          goto LABEL_16;
        }
      }
      __break(1u);
      goto LABEL_18;
    }
LABEL_16:
    specialized Set.init<A>(_:)(v6);
    swift_bridgeObjectRelease();
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    lazy protocol witness table accessor for type TUHandle and conformance NSObject();
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v22, sel_sessionDidReceiveUpdatedUnknownParticipantListWithSessionID_unknownParticipants_, v21.super.isa, isa);
    swift_unknownObjectRelease();

    return;
  }
LABEL_18:
  __break(1u);
}

uint64_t protocol witness for BackGroundSessionManagerDelegate.didUpdateActivitySessions(backgroundSessionManager:activitySessions:) in conformance BackgroundSessionManagerHost(uint64_t a1, uint64_t a2)
{
  return specialized BackgroundSessionManagerHost.didUpdateActivitySessions(backgroundSessionManager:activitySessions:)(a2);
}

uint64_t protocol witness for BackGroundSessionManagerDelegate.didRejectKeyRecoveryRequest(backgroundSessionManager:onSession:) in conformance BackgroundSessionManagerHost(uint64_t a1, uint8_t *a2)
{
  return specialized BackgroundSessionManagerHost.didRejectKeyRecoveryRequest(backgroundSessionManager:onSession:)(a2);
}

uint64_t protocol witness for BackGroundSessionManagerDelegate.didReceiveUpdatedUnknownParticipantList(backgroundSessionManager:onSession:unknownParticipants:) in conformance BackgroundSessionManagerHost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized BackgroundSessionManagerHost.didReceiveUpdatedUnknownParticipantList(backgroundSessionManager:onSession:unknownParticipants:)(a2, a3);
}

void specialized Sequence.forEach(_:)(uint64_t a1, void (*a2)(id))
{
  uint64_t v3 = v2;
  uint64_t v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for BackgroundSessionManagerHostConnection();
    _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_0(&lazy protocol witness table cache variable for type BackgroundSessionManagerHostConnection and conformance NSObject, (void (*)(uint64_t))type metadata accessor for BackgroundSessionManagerHostConnection);
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v21;
    uint64_t v20 = v22;
    uint64_t v6 = v23;
    int64_t v7 = v24;
    unint64_t v8 = v25;
  }
  else
  {
    uint64_t v9 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v20 = a1 + 56;
    uint64_t v6 = ~v9;
    uint64_t v10 = -v9;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v8 = v11 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v7 = 0;
  }
  int64_t v19 = (unint64_t)(v6 + 64) >> 6;
  while (1)
  {
    int64_t v15 = v7;
    if ((v5 & 0x8000000000000000) == 0) {
      break;
    }
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_33;
    }
    type metadata accessor for BackgroundSessionManagerHostConnection();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v14 = v26;
    swift_unknownObjectRelease();
    if (!v26) {
      goto LABEL_33;
    }
LABEL_10:
    a2(v14);

    if (v3) {
      goto LABEL_33;
    }
  }
  if (v8)
  {
    unint64_t v12 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v13 = v12 | (v7 << 6);
LABEL_9:
    id v14 = *(id *)(*(void *)(v5 + 48) + 8 * v13);
    if (!v14) {
      goto LABEL_33;
    }
    goto LABEL_10;
  }
  ++v7;
  if (!__OFADD__(v15, 1))
  {
    if (v7 >= v19) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v20 + 8 * v7);
    if (!v16)
    {
      int64_t v17 = v15 + 2;
      if (v15 + 2 >= v19) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v20 + 8 * v17);
      if (v16) {
        goto LABEL_22;
      }
      int64_t v17 = v15 + 3;
      if (v15 + 3 >= v19) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v20 + 8 * v17);
      if (v16) {
        goto LABEL_22;
      }
      int64_t v17 = v15 + 4;
      if (v15 + 4 >= v19) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v20 + 8 * v17);
      if (v16)
      {
LABEL_22:
        int64_t v7 = v17;
      }
      else
      {
        int64_t v7 = v15 + 5;
        if (v15 + 5 >= v19) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v20 + 8 * v7);
        if (!v16)
        {
          int64_t v18 = v15 + 6;
          while (v19 != v18)
          {
            unint64_t v16 = *(void *)(v20 + 8 * v18++);
            if (v16)
            {
              int64_t v7 = v18 - 1;
              goto LABEL_23;
            }
          }
LABEL_33:
          outlined consume of [String : ()].Iterator._Variant();
          return;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v16 - 1) & v16;
    unint64_t v13 = __clz(__rbit64(v16)) + (v7 << 6);
    goto LABEL_9;
  }
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  void *v26;

  uint64_t v3 = v2;
  uint64_t v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ConversationManagerHostConnection();
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type ConversationManagerHostConnection and conformance NSObject, (void (*)(uint64_t))type metadata accessor for ConversationManagerHostConnection);
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v21;
    uint64_t v20 = v22;
    uint64_t v6 = v23;
    int64_t v7 = v24;
    unint64_t v8 = v25;
  }
  else
  {
    uint64_t v9 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v20 = a1 + 56;
    uint64_t v6 = ~v9;
    uint64_t v10 = -v9;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v8 = v11 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v7 = 0;
  }
  int64_t v19 = (unint64_t)(v6 + 64) >> 6;
  while (1)
  {
    int64_t v15 = v7;
    if ((v5 & 0x8000000000000000) == 0) {
      break;
    }
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_33;
    }
    type metadata accessor for ConversationManagerHostConnection();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v14 = v26;
    swift_unknownObjectRelease();
    if (!v26) {
      goto LABEL_33;
    }
LABEL_10:
    a2(v14);

    if (v3) {
      goto LABEL_33;
    }
  }
  if (v8)
  {
    unint64_t v12 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v13 = v12 | (v7 << 6);
LABEL_9:
    id v14 = *(id *)(*(void *)(v5 + 48) + 8 * v13);
    if (!v14) {
      goto LABEL_33;
    }
    goto LABEL_10;
  }
  ++v7;
  if (!__OFADD__(v15, 1))
  {
    if (v7 >= v19) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v20 + 8 * v7);
    if (!v16)
    {
      int64_t v17 = v15 + 2;
      if (v15 + 2 >= v19) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v20 + 8 * v17);
      if (v16) {
        goto LABEL_22;
      }
      int64_t v17 = v15 + 3;
      if (v15 + 3 >= v19) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v20 + 8 * v17);
      if (v16) {
        goto LABEL_22;
      }
      int64_t v17 = v15 + 4;
      if (v15 + 4 >= v19) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v20 + 8 * v17);
      if (v16)
      {
LABEL_22:
        int64_t v7 = v17;
      }
      else
      {
        int64_t v7 = v15 + 5;
        if (v15 + 5 >= v19) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v20 + 8 * v7);
        if (!v16)
        {
          int64_t v18 = v15 + 6;
          while (v19 != v18)
          {
            unint64_t v16 = *(void *)(v20 + 8 * v18++);
            if (v16)
            {
              int64_t v7 = v18 - 1;
              goto LABEL_23;
            }
          }
LABEL_33:
          outlined consume of [String : ()].Iterator._Variant();
          return;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v16 - 1) & v16;
    unint64_t v13 = __clz(__rbit64(v16)) + (v7 << 6);
    goto LABEL_9;
  }
  __break(1u);
}

uint64_t specialized BackgroundSessionManagerHost.didUpdateActivitySessions(backgroundSessionManager:activitySessions:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  int64_t v7 = (uint64_t *)((char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v24 = v2;
    uint64_t v25 = a1;
    uint64_t v13 = v12;
    v26[0] = v12;
    uint64_t v23 = v4;
    *(_DWORD *)uint64_t v11 = 136315138;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TUConversationActivitySessionContainer]);
    uint64_t v14 = String.init<A>(reflecting:)();
    uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v26);
    uint64_t v4 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v9, v10, "BackgroundSessionManagerHost received didUpdateActivitySessions %s", v11, 0xCu);
    swift_arrayDestroy();
    uint64_t v16 = v13;
    uint64_t v2 = v24;
    MEMORY[0x1B3EA39E0](v16, -1, -1);
    MEMORY[0x1B3EA39E0](v11, -1, -1);
  }
  else
  {

    uint64_t v17 = swift_bridgeObjectRelease_n();
  }
  MEMORY[0x1F4188790](v17);
  *(&v22 - 2) = a1;
  int64_t v18 = *(void **)(v2 + OBJC_IVAR____TtC14CopresenceCore28BackgroundSessionManagerHost_queue);
  *int64_t v7 = v18;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4FBCBF0], v4);
  id v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if (v18)
  {
    swift_beginAccess();
    uint64_t v21 = swift_bridgeObjectRetain();
    specialized Sequence.forEach(_:)(v21, (void (*)(id))partial apply for closure #1 in BackgroundSessionManagerHost.didUpdateActivitySessions(backgroundSessionManager:activitySessions:));
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized BackgroundSessionManagerHost.didRejectKeyRecoveryRequest(backgroundSessionManager:onSession:)(uint8_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v29 = *(void *)(v4 - 8);
  uint64_t v30 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (uint8_t **)((char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  os_log_type_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.host);
  uint64_t v12 = *(void (**)(char *, uint8_t *, uint64_t))(v8 + 16);
  unint64_t v28 = a1;
  v12(v10, a1, v7);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    unint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    v32[0] = v16;
    uint64_t v27 = v1;
    *(_DWORD *)unint64_t v15 = 136315138;
    unsigned __int8 v26 = v15 + 4;
    _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v32);
    uint64_t v2 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    _os_log_impl(&dword_1B0DF7000, v13, v14, "BackgroundSessionManagerHost received didRejectKeyRecoveryRequest on %s", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v16, -1, -1);
    MEMORY[0x1B3EA39E0](v15, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }

  MEMORY[0x1F4188790](v19);
  uint64_t v20 = v29;
  *(&v26 - 2) = v28;
  uint64_t v21 = *(void **)(v2 + OBJC_IVAR____TtC14CopresenceCore28BackgroundSessionManagerHost_queue);
  *uint64_t v6 = v21;
  uint64_t v22 = v30;
  (*(void (**)(void *, void, uint64_t))(v20 + 104))(v6, *MEMORY[0x1E4FBCBF0], v30);
  id v23 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v20 + 8))(v6, v22);
  if (v21)
  {
    swift_beginAccess();
    uint64_t v25 = swift_bridgeObjectRetain();
    specialized Sequence.forEach(_:)(v25, (void (*)(id))partial apply for closure #1 in BackgroundSessionManagerHost.didRejectKeyRecoveryRequest(backgroundSessionManager:onSession:));
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized BackgroundSessionManagerHost.didReceiveUpdatedUnknownParticipantList(backgroundSessionManager:onSession:unknownParticipants:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v33 = a2;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v34 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (void *)((char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.host);
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v32 = a1;
  v13(v11, a1, v8);
  os_log_type_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v31 = v2;
    uint64_t v17 = (uint8_t *)v16;
    uint64_t v18 = swift_slowAlloc();
    v36[0] = v18;
    uint64_t v30 = v5;
    *(_DWORD *)uint64_t v17 = 136315138;
    v29[1] = v17 + 4;
    _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v36);
    uint64_t v5 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    _os_log_impl(&dword_1B0DF7000, v14, v15, "BackgroundSessionManagerHost received didReceiveUpdatedUnknownParticipantList on %s", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v18, -1, -1);
    uint64_t v21 = v17;
    uint64_t v3 = v31;
    MEMORY[0x1B3EA39E0](v21, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }

  MEMORY[0x1F4188790](v22);
  uint64_t v23 = v33;
  uint64_t v24 = v34;
  v29[-2] = v32;
  v29[-1] = v23;
  uint64_t v25 = *(void **)(v3 + OBJC_IVAR____TtC14CopresenceCore28BackgroundSessionManagerHost_queue);
  *uint64_t v7 = v25;
  (*(void (**)(void *, void, uint64_t))(v24 + 104))(v7, *MEMORY[0x1E4FBCBF0], v5);
  id v26 = v25;
  LOBYTE(v25) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v24 + 8))(v7, v5);
  if (v25)
  {
    swift_beginAccess();
    uint64_t v28 = swift_bridgeObjectRetain();
    specialized Sequence.forEach(_:)(v28, (void (*)(id))partial apply for closure #1 in BackgroundSessionManagerHost.didReceiveUpdatedUnknownParticipantList(backgroundSessionManager:onSession:unknownParticipants:));
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void specialized BackgroundSessionManagerHost.init(listeners:queue:featureFlags:)(unint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v9 = v4;
  if ((MEMORY[0x1E4FBC860] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860]);
  }
  else {
    uint64_t v10 = MEMORY[0x1E4FBC870];
  }
  *(void *)&v9[OBJC_IVAR____TtC14CopresenceCore28BackgroundSessionManagerHost_connections] = v10;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v21 >= 1) {
      goto LABEL_5;
    }
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (*(uint64_t *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) < 1) {
    goto LABEL_19;
  }
LABEL_5:
  *(void *)&v9[OBJC_IVAR____TtC14CopresenceCore28BackgroundSessionManagerHost_listeners] = a1;
  *(void *)&v9[OBJC_IVAR____TtC14CopresenceCore28BackgroundSessionManagerHost_queue] = a2;
  swift_bridgeObjectRetain();
  id v11 = a2;
  *(void *)&v9[OBJC_IVAR____TtC14CopresenceCore28BackgroundSessionManagerHost_clientIdentifierToDataSourceMap] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(void *)&v9[OBJC_IVAR____TtC14CopresenceCore28BackgroundSessionManagerHost_featureFlags] = a3;
  id v12 = a3;

  v22.receiver = v9;
  v22.super_class = ObjectType;
  id v13 = objc_msgSendSuper2(&v22, sel_init);
  os_log_type_t v14 = v13;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    id v17 = v14;
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15)
    {
LABEL_15:

      return;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v16 = v13;
    if (!v15) {
      goto LABEL_15;
    }
  }
  if (v15 >= 1)
  {
    for (uint64_t i = 0; i != v15; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v19 = (id)MEMORY[0x1B3EA25C0](i, a1);
      }
      else {
        id v19 = *(id *)(a1 + 8 * i + 32);
      }
      unint64_t v20 = v19;
      objc_msgSend(v19, sel_setDelegate_, v14);
    }
    goto LABEL_15;
  }
LABEL_20:
  __break(1u);
}

uint64_t specialized BackgroundSessionManagerHost.listener(_:shouldAcceptNewConnection:)(void *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.host);
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    v42[0] = v5;
    id v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v5;

    _os_log_impl(&dword_1B0DF7000, v6, v7, "Asked to accept new connection from %@", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v9, -1, -1);
    MEMORY[0x1B3EA39E0](v8, -1, -1);
  }
  else
  {
  }
  id v11 = *(void **)(v2 + OBJC_IVAR____TtC14CopresenceCore28BackgroundSessionManagerHost_featureFlags);
  if (objc_msgSend(v11, sel_sharePlayLiteEnabled))
  {
    uint64_t v12 = NSXPCConnection.stableAppIdentifier.getter();
    if (v13 || (uint64_t v12 = NSXPCConnection.bundleIdentifier.getter(), v13))
    {
      unint64_t v14 = v12;
      unint64_t v15 = v13;
      id v16 = *(void **)(v2 + OBJC_IVAR____TtC14CopresenceCore28BackgroundSessionManagerHost_queue);
      id v17 = v5;
      id v18 = v16;
      BackgroundSessionManagerHost.dataSource(for:)(v14, v15, v42);
      swift_bridgeObjectRelease();
      id v19 = objc_allocWithZone((Class)type metadata accessor for BackgroundSessionManagerHostConnection());
      unint64_t v20 = BackgroundSessionManagerHostConnection.init(connection:queue:dataSource:)(v17, v18, (uint64_t)v42);
      if (v20)
      {
        uint64_t v21 = v20;
        if (objc_msgSend(v11, sel_gameCenterFastSyncTransport))
        {
          if ((v21[direct field offset for XPCHostConnection.isEntitledToUsePrivateAPI] & 1) == 0
            && !v21[direct field offset for XPCHostConnection.isEntitledToUseGameCenter])
          {
            goto LABEL_13;
          }
        }
        else if ((v21[direct field offset for XPCHostConnection.isEntitledToUsePrivateAPI] & 1) == 0)
        {
LABEL_13:
          id v22 = v17;
          uint64_t v23 = Logger.logObject.getter();
          os_log_type_t v24 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v23, v24))
          {
            uint64_t v25 = (uint8_t *)swift_slowAlloc();
            id v26 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v25 = 138412290;
            v42[0] = v22;
            id v27 = v22;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *id v26 = v22;

            _os_log_impl(&dword_1B0DF7000, v23, v24, "BackgroundSessionManagerHost rejecting connection %@ because client is not entitled", v25, 0xCu);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x1B3EA39E0](v26, -1, -1);
            MEMORY[0x1B3EA39E0](v25, -1, -1);
          }
          else
          {
          }
          return 0;
        }
        swift_beginAccess();
        uint64_t v38 = v21;
        specialized Set._Variant.insert(_:)(&v41, v38);
        swift_endAccess();

        return 1;
      }
      id v28 = v17;
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v36))
      {
        Swift::String v37 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)Swift::String v37 = 67109120;
        LODWORD(v42[0]) = objc_msgSend(v28, sel_processIdentifier);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl(&dword_1B0DF7000, v29, v36, "BackgroundSessionManagerHost could not be created; rejecting connection from PID %d.",
          v37,
          8u);
        uint64_t v35 = v37;
        goto LABEL_20;
      }

LABEL_27:
      return 0;
    }
    id v28 = v5;
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 138412290;
      v42[0] = v28;
      id v40 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v32 = v28;

      uint64_t v34 = "BackgroundSessionManagerHost rejecting connection because a client identifier could not be derived: %@";
      goto LABEL_17;
    }
LABEL_26:

    goto LABEL_27;
  }
  id v28 = v5;
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v29, v30)) {
    goto LABEL_26;
  }
  uint64_t v31 = (uint8_t *)swift_slowAlloc();
  uint64_t v32 = (void *)swift_slowAlloc();
  *(_DWORD *)uint64_t v31 = 138412290;
  v42[0] = v28;
  id v33 = v28;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *uint64_t v32 = v28;

  uint64_t v34 = "BackgroundSessionManagerHost rejecting connection because flag is not enabled: %@";
LABEL_17:
  _os_log_impl(&dword_1B0DF7000, v29, v30, v34, v31, 0xCu);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  swift_arrayDestroy();
  MEMORY[0x1B3EA39E0](v32, -1, -1);
  uint64_t v35 = v31;
LABEL_20:
  MEMORY[0x1B3EA39E0](v35, -1, -1);

  return 0;
}

uint64_t type metadata accessor for BackgroundSessionManagerHost()
{
  return self;
}

uint64_t method lookup function for BackgroundSessionManagerHost(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for BackgroundSessionManagerHost);
}

uint64_t dispatch thunk of BackgroundSessionManagerHost.__allocating_init(listeners:queue:featureFlags:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

void partial apply for closure #1 in BackgroundSessionManagerHost.didReceiveUpdatedUnknownParticipantList(backgroundSessionManager:onSession:unknownParticipants:)(uint64_t a1)
{
  closure #1 in BackgroundSessionManagerHost.didReceiveUpdatedUnknownParticipantList(backgroundSessionManager:onSession:unknownParticipants:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void partial apply for closure #1 in BackgroundSessionManagerHost.didRejectKeyRecoveryRequest(backgroundSessionManager:onSession:)(uint64_t a1)
{
}

void partial apply for closure #1 in BackgroundSessionManagerHost.didUpdateActivitySessions(backgroundSessionManager:activitySessions:)(uint64_t a1)
{
}

uint64_t outlined init with take of BackgroundSessionManagerDataSource?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BackgroundSessionManagerDataSource?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of BackgroundSessionManagerDataSource?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BackgroundSessionManagerDataSource?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL ActivityListPresenceContext.isEmpty.getter(uint64_t a1)
{
  return *(void *)(a1 + 16) == 0;
}

uint64_t ActivityListPresenceContext.insert(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  id v10 = (char *)&v13 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  uint64_t v14 = *v2;
  swift_bridgeObjectRetain();
  specialized Set._Variant.insert(_:)((uint64_t)v10, v8);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  uint64_t v11 = v14;
  ActivityListPresenceContext.activityIDs.willset();
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = v11;
  return result;
}

uint64_t ActivityListPresenceContext.remove(_:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v1;
  swift_bridgeObjectRetain();
  specialized Set._Variant.remove(_:)(a1, (uint64_t)v5);
  outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for UUID?);
  uint64_t v6 = v9;
  ActivityListPresenceContext.activityIDs.willset();
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = v6;
  return result;
}

uint64_t specialized Sequence._copyContents(initializing:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v8 - 8);
  id v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v44 = *(void *)(v11 - 8);
  uint64_t result = MEMORY[0x1F4188790](v11);
  uint64_t v43 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = a4;
  uint64_t v15 = a4 + 56;
  uint64_t v14 = *(void *)(a4 + 56);
  uint64_t v37 = -1 << *(unsigned char *)(a4 + 32);
  if (-v37 < 64) {
    uint64_t v16 = ~(-1 << -(char)v37);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v14;
  if (!a2)
  {
    int64_t v18 = 0;
    a3 = 0;
LABEL_33:
    uint64_t v31 = ~v37;
    *a1 = v45;
    a1[1] = v15;
    a1[2] = v31;
    a1[3] = v18;
    a1[4] = v17;
    return a3;
  }
  if (!a3)
  {
    int64_t v18 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  uint64_t v39 = a3;
  int64_t v18 = 0;
  a3 = 0;
  uint64_t v41 = v44 + 16;
  uint64_t v42 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v44 + 56);
  uint64_t v40 = v44 + 48;
  uint64_t v38 = v44 + 32;
  int64_t v35 = (unint64_t)(63 - v37) >> 6;
  uint64_t v36 = v15;
  int64_t v33 = v35 - 1;
  uint64_t v34 = a1;
  id v19 = (void (**)(char *, char *, uint64_t))(v44 + 32);
  if (!v17) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v20 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  unint64_t v21 = v20 | (v18 << 6);
  while (1)
  {
    uint64_t v26 = v44;
    uint64_t v27 = *(void *)(v44 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v44 + 16))(v10, *(void *)(v45 + 48) + v27 * v21, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v10, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v10, 1, v11) == 1)
    {
      uint64_t v15 = v36;
LABEL_32:
      outlined destroy of UUID?((uint64_t)v10, &demangling cache variable for type metadata for UUID?);
      a1 = v34;
      goto LABEL_33;
    }
    int64_t v28 = v18;
    ++a3;
    uint64_t v29 = *v19;
    os_log_type_t v30 = v43;
    (*v19)(v43, v10, v11);
    uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v29)(a2, v30, v11);
    if (a3 == v39)
    {
      a3 = v39;
      a1 = v34;
      uint64_t v15 = v36;
      int64_t v18 = v28;
      goto LABEL_33;
    }
    a2 += v27;
    int64_t v18 = v28;
    if (v17) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    uint64_t v15 = v36;
    if (v22 >= v35) {
      goto LABEL_31;
    }
    unint64_t v23 = *(void *)(v36 + 8 * v22);
    if (!v23) {
      break;
    }
LABEL_21:
    unint64_t v17 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v22 << 6);
    int64_t v18 = v22;
  }
  int64_t v24 = v18 + 2;
  ++v18;
  if (v22 + 1 >= v35) {
    goto LABEL_31;
  }
  unint64_t v23 = *(void *)(v36 + 8 * v24);
  if (v23)
  {
    ++v22;
    goto LABEL_21;
  }
  int64_t v25 = v22 + 2;
  int64_t v18 = v22 + 1;
  if (v22 + 2 >= v35)
  {
LABEL_31:
    (*v42)(v10, 1, 1, v11);
    unint64_t v17 = 0;
    goto LABEL_32;
  }
  unint64_t v23 = *(void *)(v36 + 8 * v25);
  if (v23)
  {
    v22 += 2;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v22 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v22 >= v35)
    {
      int64_t v18 = v33;
      goto LABEL_31;
    }
    unint64_t v23 = *(void *)(v36 + 8 * v22);
    ++v25;
    if (v23) {
      goto LABEL_21;
    }
  }
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

CopresenceCore::EmptyPresenceContext_optional __swiftcall EmptyPresenceContext.init(dictionary:)(Swift::OpaquePointer dictionary)
{
  uint64_t v1 = *((void *)dictionary._rawValue + 2);
  swift_bridgeObjectRelease();
  return (CopresenceCore::EmptyPresenceContext_optional)(v1 != 0);
}

unint64_t EmptyPresenceContext.dictionaryRepresentation.getter()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
}

uint64_t static EmptyPresenceContext.== infix(_:_:)()
{
  return 1;
}

Swift::Int EmptyPresenceContext.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for DictionaryConvertible.init(dictionary:) in conformance EmptyPresenceContext@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

unint64_t protocol witness for DictionaryConvertible.dictionaryRepresentation.getter in conformance EmptyPresenceContext()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance EmptyPresenceContext()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance EmptyPresenceContext()
{
  return Hasher._finalize()();
}

void one-time initialization function for defaultValue()
{
  static ActivityListPresenceContext.defaultValue = MEMORY[0x1E4FBC870];
}

uint64_t *ActivityListPresenceContext.defaultValue.unsafeMutableAddressor()
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  return &static ActivityListPresenceContext.defaultValue;
}

uint64_t static ActivityListPresenceContext.defaultValue.getter()
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for ActivityListPresenceContext.activityIDs : ActivityListPresenceContext(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  swift_bridgeObjectRetain();
  ActivityListPresenceContext.activityIDs.willset();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t ActivityListPresenceContext.activityIDs.setter(uint64_t a1)
{
  ActivityListPresenceContext.activityIDs.willset();
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

void ActivityListPresenceContext.activityIDs.willset()
{
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Log.service);
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v8 = v4;
    *(_DWORD *)uint64_t v3 = 136315138;
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type AnyCancellable and conformance AnyCancellable((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    swift_bridgeObjectRetain();
    uint64_t v5 = Set.description.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v1, v2, "Updating activity list context to current activities: %s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v4, -1, -1);
    MEMORY[0x1B3EA39E0](v3, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t (*ActivityListPresenceContext.activityIDs.modify(void *a1))(uint64_t *a1, char a2)
{
  *a1 = *v1;
  a1[1] = v1;
  swift_bridgeObjectRetain();
  return ActivityListPresenceContext.activityIDs.modify;
}

uint64_t ActivityListPresenceContext.activityIDs.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)a1[1];
  if (a2)
  {
    swift_bridgeObjectRetain();
    ActivityListPresenceContext.activityIDs.willset();
    swift_bridgeObjectRelease();
    *uint64_t v3 = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    ActivityListPresenceContext.activityIDs.willset();
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v3 = v2;
  }
  return result;
}

uint64_t ActivityListPresenceContext.makeIterator()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = -1;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v2 = ~(-1 << -(char)v3);
  }
  uint64_t v4 = v2 & *(void *)(a1 + 56);
  *a2 = a1;
  a2[1] = a1 + 56;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Sequence.makeIterator() in conformance ActivityListPresenceContext@<X0>(void *a1@<X8>)
{
  ActivityListPresenceContext.makeIterator()(*v1, a1);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance ActivityListPresenceContext()
{
  return 0;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance ActivityListPresenceContext()
{
  uint64_t v1 = specialized _copySequenceToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance ActivityListPresenceContext(void *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3);
}

BOOL ActivityListPresenceContext.DictionaryKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ActivityListPresenceContext.DictionaryKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  return v3 != 0;
}

uint64_t ActivityListPresenceContext.DictionaryKeys.rawValue.getter()
{
  return 0x7974697669746361;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ActivityListPresenceContext.DictionaryKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ActivityListPresenceContext.DictionaryKeys()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ActivityListPresenceContext.DictionaryKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ActivityListPresenceContext.DictionaryKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance ActivityListPresenceContext.DictionaryKeys, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ActivityListPresenceContext.DictionaryKeys(void *a1@<X8>)
{
  *a1 = 0x7974697669746361;
  a1[1] = 0xEB00000000734449;
}

unint64_t ActivityListPresenceContext.dictionaryRepresentation.getter(uint64_t a1)
{
  uint64_t v37 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v37 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v37);
  uint64_t v36 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  int64_t v35 = (char *)&v28 - v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  uint64_t v7 = inited;
  *(_OWORD *)(inited + 16) = xmmword_1B1138A80;
  *(void *)(inited + 32) = 0x7974697669746361;
  *(void *)(inited + 40) = 0xEB00000000734449;
  int64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = MEMORY[0x1E4FBC860];
  if (v8)
  {
    uint64_t v29 = inited;
    uint64_t v38 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    unint64_t result = specialized Set.startIndex.getter(a1);
    uint64_t v11 = result;
    uint64_t v13 = v12;
    char v15 = v14 & 1;
    uint64_t v33 = a1;
    uint64_t v34 = a1 + 56;
    uint64_t v31 = v2 + 32;
    uint64_t v32 = v2 + 16;
    uint64_t v30 = v2 + 8;
    while ((v11 & 0x8000000000000000) == 0 && v11 < 1 << *(unsigned char *)(a1 + 32))
    {
      if (((*(void *)(v34 + (((unint64_t)v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
        goto LABEL_15;
      }
      if (*(_DWORD *)(a1 + 36) != v13) {
        goto LABEL_16;
      }
      uint64_t v16 = *(void *)(a1 + 48) + *(void *)(v2 + 72) * v11;
      unint64_t v17 = v35;
      uint64_t v18 = v37;
      (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v35, v16, v37);
      id v19 = v36;
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v36, v17, v18);
      uint64_t v20 = UUID.uuidString.getter();
      uint64_t v22 = v21;
      (*(void (**)(char *, uint64_t))(v2 + 8))(v19, v18);
      uint64_t v9 = v38;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1);
        uint64_t v9 = v38;
      }
      unint64_t v24 = *(void *)(v9 + 16);
      unint64_t v23 = *(void *)(v9 + 24);
      if (v24 >= v23 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
        uint64_t v9 = v38;
      }
      *(void *)(v9 + 16) = v24 + 1;
      uint64_t v25 = v9 + 16 * v24;
      *(void *)(v25 + 32) = v20;
      *(void *)(v25 + 40) = v22;
      a1 = v33;
      unint64_t result = specialized _NativeSet.index(after:)(v11, v13, v15 & 1, v33);
      uint64_t v11 = result;
      uint64_t v13 = v26;
      char v15 = v27 & 1;
      if (!--v8)
      {
        outlined consume of Set<AddressableMember>.Index._Variant(result, v26, v27 & 1);
        swift_bridgeObjectRelease();
        uint64_t v7 = v29;
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }
  else
  {
LABEL_13:
    *(void *)(v7 + 72) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    *(void *)(v7 + 48) = v9;
    return specialized Dictionary.init(dictionaryLiteral:)(v7);
  }
  return result;
}

uint64_t ActivityListPresenceContext.hash(into:)(long long *a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, a2);
  return swift_bridgeObjectRelease();
}

Swift::Int ActivityListPresenceContext.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v3, a1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for static PresenceContext.defaultValue.getter in conformance ActivityListPresenceContext@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static ActivityListPresenceContext.defaultValue;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for DictionaryConvertible.init(dictionary:) in conformance ActivityListPresenceContext@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized ActivityListPresenceContext.init(dictionary:)(a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for DictionaryConvertible.dictionaryRepresentation.getter in conformance ActivityListPresenceContext()
{
  return ActivityListPresenceContext.dictionaryRepresentation.getter(*v0);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ActivityListPresenceContext()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ActivityListPresenceContext(long long *a1)
{
  uint64_t v3 = *v1;
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v3);
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ActivityListPresenceContext()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ActivityListPresenceContext(uint64_t *a1, uint64_t *a2)
{
  return specialized static Set.== infix(_:_:)(*a1, *a2);
}

uint64_t specialized Set._Variant.insert(_:)(void *a1, void *a2)
{
  return specialized Set._Variant.insert(_:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant, 0x1E4FADB90, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<TUConversationParticipant>);
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession, 0x1E4FADB58, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<TUConversationActivitySession>);
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, (void (*)(void))type metadata accessor for PresenceHostSession, &demangling cache variable for type metadata for _SetStorage<PresenceHostSession>, (void (*)(void))type metadata accessor for PresenceHostSession, (void (*)(void))type metadata accessor for PresenceHostSession);
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, (void (*)(void))type metadata accessor for AddressableMember, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<AddressableMember>, (void (*)(void))type metadata accessor for AddressableMember, (void (*)(void))type metadata accessor for AddressableMember);
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, (void (*)(void))type metadata accessor for BackgroundSessionManagerHostConnection, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<BackgroundSessionManagerHostConnection>, (void (*)(void))type metadata accessor for BackgroundSessionManagerHostConnection, (void (*)(void))type metadata accessor for BackgroundSessionManagerHostConnection);
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for TUHandle, 0x1E4FADBD8, &demangling cache variable for type metadata for _SetStorage<TUHandle>);
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, (void (*)(void))type metadata accessor for ConversationManagerHostConnection, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<ConversationManagerHostConnection>, (void (*)(void))type metadata accessor for ConversationManagerHostConnection, (void (*)(void))type metadata accessor for ConversationManagerHostConnection);
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, (void (*)(void))type metadata accessor for ActivitySession, &demangling cache variable for type metadata for _SetStorage<ActivitySession>, (void (*)(void))type metadata accessor for ActivitySession, (void (*)(void))type metadata accessor for ActivitySession);
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v10 + 8 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for AnyCancellable();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v18;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v16 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    uint64_t v20 = v16;
    if (*(void *)(v16 + 24) <= *(void *)(v16 + 16))
    {
      swift_retain();
      specialized _NativeSet.resize(capacity:)();
      unint64_t v17 = v20;
    }
    else
    {
      unint64_t v17 = v16;
      swift_retain();
    }
    specialized _NativeSet._unsafeInsertNew(_:)(a2, v17);
    *uint64_t v3 = v17;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  type metadata accessor for AnyCancellable();
  lazy protocol witness table accessor for type AnyCancellable and conformance AnyCancellable(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x1E4F1AB18]);
  swift_bridgeObjectRetain();
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
  uint64_t v12 = v10 & ~v11;
  if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v19 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    char v15 = swift_retain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v15, v12, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v19;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  uint64_t v13 = ~v11;
  lazy protocol witness table accessor for type AnyCancellable and conformance AnyCancellable(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x1E4F1AB18]);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    uint64_t v12 = (v12 + 1) & v13;
    if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
      goto LABEL_11;
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v12);
  swift_retain();
  return 0;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void *v10;
  id v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  Swift::Int v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v21;
  uint64_t *v22;
  uint64_t v24;
  Swift::Int v25;
  uint64_t v26;

  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for BackgroundSession(0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v24;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v18 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    uint64_t v25 = v18;
    if (*(void *)(v18 + 24) <= *(void *)(v18 + 16))
    {
      swift_retain();
      specialized _NativeSet.resize(capacity:)();
      id v19 = v25;
    }
    else
    {
      id v19 = v18;
      swift_retain();
    }
    specialized _NativeSet._unsafeInsertNew(_:)(a2, v19);
    *uint64_t v3 = v19;
    swift_bridgeObjectRelease();
    *a1 = a2;
  }
  else
  {
    uint64_t v22 = v2;
    Hasher.init(_seed:)();
    uint64_t v10 = *(void **)(a2 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
    swift_bridgeObjectRetain();
    uint64_t v11 = v10;
    NSObject.hash(into:)();

    uint64_t v12 = Hasher._finalize()();
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    uint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for NSObject);
      swift_retain();
      char v15 = static NSObject.== infix(_:_:)();
      swift_release();
      if (v15)
      {
LABEL_12:
        swift_release();
        swift_bridgeObjectRelease();
        *a1 = *(void *)(*(void *)(*v22 + 48) + 8 * v14);
        swift_retain();
        return 0;
      }
      uint64_t v16 = ~v13;
      while (1)
      {
        uint64_t v14 = (v14 + 1) & v16;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        swift_retain();
        unint64_t v17 = static NSObject.== infix(_:_:)();
        swift_release();
        if (v17) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v26 = *v22;
    *uint64_t v22 = 0x8000000000000000;
    uint64_t v21 = swift_retain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v21, v14, isUniquelyReferenced_nonNull_native);
    *uint64_t v22 = v26;
    swift_bridgeObjectRelease();
    *a1 = a2;
  }
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  unint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  lazy protocol witness table accessor for type AnyCancellable and conformance AnyCancellable((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    uint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    unint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      uint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      lazy protocol witness table accessor for type AnyCancellable and conformance AnyCancellable((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(void *a1, void *a2, unint64_t *a3, uint64_t a4, uint64_t *a5)
{
  Swift::Int v8 = v5;
  uint64_t v11 = *v5;
  if ((*v5 & 0xC000000000000001) != 0)
  {
    if (v11 < 0) {
      uint64_t v12 = *v5;
    }
    else {
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v13 = a2;
    uint64_t v14 = __CocoaSet.member(for:)();

    if (v14)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for TUConversationActivity(0, a3);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v37;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v27 = specialized _NativeSet.init(_:capacity:)(v12, result + 1, a5, a3);
    uint64_t v38 = (void *)v27;
    unint64_t v28 = *(void *)(v27 + 16);
    if (*(void *)(v27 + 24) <= v28)
    {
      uint64_t v33 = v28 + 1;
      id v34 = v13;
      specialized _NativeSet.resize(capacity:)(v33, a5);
      uint64_t v29 = v38;
    }
    else
    {
      uint64_t v29 = (void *)v27;
      id v30 = v13;
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v13, v29);
    *Swift::Int v8 = (uint64_t)v29;
    swift_bridgeObjectRelease();
    *a1 = v13;
  }
  else
  {
    Swift::Int v16 = *(void *)(v11 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v17 = NSObject._rawHashValue(seed:)(v16);
    uint64_t v18 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v19 = v17 & ~v18;
    if ((*(void *)(v11 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19))
    {
      type metadata accessor for TUConversationActivity(0, a3);
      id v20 = *(id *)(*(void *)(v11 + 48) + 8 * v19);
      char v21 = static NSObject.== infix(_:_:)();

      if (v21)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v25 = *(void **)(*(void *)(*v8 + 48) + 8 * v19);
        *a1 = v25;
        id v26 = v25;
        return 0;
      }
      uint64_t v22 = ~v18;
      while (1)
      {
        unint64_t v19 = (v19 + 1) & v22;
        if (((*(void *)(v11 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
          break;
        }
        id v23 = *(id *)(*(void *)(v11 + 48) + 8 * v19);
        char v24 = static NSObject.== infix(_:_:)();

        if (v24) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v39 = *v8;
    *Swift::Int v8 = 0x8000000000000000;
    id v32 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v32, v19, isUniquelyReferenced_nonNull_native, a5, a3);
    *Swift::Int v8 = v39;
    swift_bridgeObjectRelease();
    *a1 = v32;
  }
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, Swift::UInt64 a2, Swift::UInt64 a3, Swift::UInt64 a4)
{
  uint64_t v9 = *v4;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    uint64_t v13 = ~v11;
    uint64_t v14 = *(void *)(v9 + 48);
    while (1)
    {
      Swift::Int v15 = (void *)(v14 + 24 * v12);
      if (*v15 == a2)
      {
        BOOL v16 = v15[1] == a3 && v15[2] == a4;
        if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
      }
      unint64_t v12 = (v12 + 1) & v13;
      if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v17 = *(void *)(*v4 + 48) + 24 * v12;
    uint64_t v18 = *(void *)(v17 + 16);
    *(_OWORD *)a1 = *(_OWORD *)v17;
    *(void *)(a1 + 16) = v18;
    swift_bridgeObjectRetain();
    return 0;
  }
  else
  {
LABEL_11:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v4;
    uint64_t *v4 = 0x8000000000000000;
    swift_bridgeObjectRetain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, a4, v12, isUniquelyReferenced_nonNull_native);
    uint64_t *v4 = v21;
    swift_bridgeObjectRelease();
    *(void *)a1 = a2;
    *(void *)(a1 + 8) = a3;
    uint64_t result = 1;
    *(void *)(a1 + 16) = a4;
  }
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(void *a1, void *a2, void (*a3)(void), uint64_t *a4, void (*a5)(void), void (*a6)(void))
{
  uint64_t v9 = v6;
  uint64_t v12 = *v6;
  if ((*v6 & 0xC000000000000001) != 0)
  {
    if (v12 < 0) {
      uint64_t v14 = *v6;
    }
    else {
      uint64_t v14 = v12 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v15 = a2;
    uint64_t v16 = __CocoaSet.member(for:)();

    if (v16)
    {
      swift_bridgeObjectRelease();

      a3(0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v40;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v30 = specialized _NativeSet.init(_:capacity:)(v14, result + 1, a4, a6);
    uint64_t v41 = (void *)v30;
    unint64_t v31 = *(void *)(v30 + 16);
    if (*(void *)(v30 + 24) <= v31)
    {
      uint64_t v36 = v31 + 1;
      id v37 = v15;
      specialized _NativeSet.resize(capacity:)(v36, a4);
      id v32 = v41;
    }
    else
    {
      id v32 = (void *)v30;
      id v33 = v15;
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v15, v32);
    *uint64_t v9 = (uint64_t)v32;
    swift_bridgeObjectRelease();
    *a1 = v15;
  }
  else
  {
    Swift::Int v19 = *(void *)(v12 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v20 = NSObject._rawHashValue(seed:)(v19);
    uint64_t v21 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v22 = v20 & ~v21;
    if ((*(void *)(v12 + 56 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v22))
    {
      a3(0);
      id v23 = *(id *)(*(void *)(v12 + 48) + 8 * v22);
      char v24 = static NSObject.== infix(_:_:)();

      if (v24)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        unint64_t v28 = *(void **)(*(void *)(*v9 + 48) + 8 * v22);
        *a1 = v28;
        id v29 = v28;
        return 0;
      }
      uint64_t v25 = ~v21;
      while (1)
      {
        unint64_t v22 = (v22 + 1) & v25;
        if (((*(void *)(v12 + 56 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v22) & 1) == 0) {
          break;
        }
        id v26 = *(id *)(*(void *)(v12 + 48) + 8 * v22);
        char v27 = static NSObject.== infix(_:_:)();

        if (v27) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v42 = *v9;
    *uint64_t v9 = 0x8000000000000000;
    id v35 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v35, v22, isUniquelyReferenced_nonNull_native, a4, a5);
    *uint64_t v9 = v42;
    swift_bridgeObjectRelease();
    *a1 = v35;
  }
  return 1;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(a3);
    uint64_t v6 = static _SetStorage.convert(_:capacity:)();
    uint64_t v19 = v6;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for TUConversationActivity(0, a4);
      do
      {
        swift_dynamicCast();
        uint64_t v6 = v19;
        unint64_t v13 = *(void *)(v19 + 16);
        if (*(void *)(v19 + 24) <= v13)
        {
          specialized _NativeSet.resize(capacity:)(v13 + 1, a3);
          uint64_t v6 = v19;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
        uint64_t v8 = v6 + 56;
        uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
        unint64_t v10 = result & ~v9;
        unint64_t v11 = v10 >> 6;
        if (((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6))) != 0)
        {
          unint64_t v12 = __clz(__rbit64((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6)))) | v10 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v14 = 0;
          unint64_t v15 = (unint64_t)(63 - v9) >> 6;
          do
          {
            if (++v11 == v15 && (v14 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v16 = v11 == v15;
            if (v11 == v15) {
              unint64_t v11 = 0;
            }
            v14 |= v16;
            uint64_t v17 = *(void *)(v8 + 8 * v11);
          }
          while (v17 == -1);
          unint64_t v12 = __clz(__rbit64(~v17)) + (v11 << 6);
        }
        *(void *)(v8 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
        *(void *)(*(void *)(v6 + 48) + 8 * v12) = v18;
        ++*(void *)(v6 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E4FBC870];
  }
  return v6;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  return specialized _NativeSet.init(_:capacity:)(a1, a2, &demangling cache variable for type metadata for _SetStorage<ActivitySession>, (void (*)(void))type metadata accessor for ActivitySession);
}

{
  return specialized _NativeSet.init(_:capacity:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<AddressableMember>, (void (*)(void))type metadata accessor for AddressableMember);
}

{
  return specialized _NativeSet.init(_:capacity:)(a1, a2, &demangling cache variable for type metadata for _SetStorage<PresenceHostSession>, (void (*)(void))type metadata accessor for PresenceHostSession);
}

{
  uint64_t v2;
  id v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<BackgroundSession>);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    unint64_t v15 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for BackgroundSession(0);
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v15;
        if (*(void *)(v15 + 24) <= *(void *)(v15 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          uint64_t v2 = v15;
        }
        Hasher.init(_seed:)();
        uint64_t v3 = *(id *)(v14 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
        NSObject.hash(into:)();

        Swift::Int result = Hasher._finalize()();
        uint64_t v5 = v2 + 56;
        uint64_t v6 = -1 << *(unsigned char *)(v2 + 32);
        uint64_t v7 = result & ~v6;
        uint64_t v8 = v7 >> 6;
        if (((-1 << v7) & ~*(void *)(v2 + 56 + 8 * (v7 >> 6))) != 0)
        {
          uint64_t v9 = __clz(__rbit64((-1 << v7) & ~*(void *)(v2 + 56 + 8 * (v7 >> 6)))) | v7 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          unint64_t v10 = 0;
          unint64_t v11 = (unint64_t)(63 - v6) >> 6;
          do
          {
            if (++v8 == v11 && (v10 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            unint64_t v12 = v8 == v11;
            if (v8 == v11) {
              uint64_t v8 = 0;
            }
            v10 |= v12;
            unint64_t v13 = *(void *)(v5 + 8 * v8);
          }
          while (v13 == -1);
          uint64_t v9 = __clz(__rbit64(~v13)) + (v8 << 6);
        }
        *(void *)(v5 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
        *(void *)(*(void *)(v2 + 48) + 8 * v9) = v14;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E4FBC870];
  }
  return v2;
}

{
  return specialized _NativeSet.init(_:capacity:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<ConversationManagerHostConnection>, (void (*)(void))type metadata accessor for ConversationManagerHostConnection);
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(void))
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(a3);
    uint64_t v6 = static _SetStorage.convert(_:capacity:)();
    uint64_t v19 = v6;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      a4(0);
      do
      {
        swift_dynamicCast();
        uint64_t v6 = v19;
        unint64_t v13 = *(void *)(v19 + 16);
        if (*(void *)(v19 + 24) <= v13)
        {
          specialized _NativeSet.resize(capacity:)(v13 + 1, a3);
          uint64_t v6 = v19;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
        uint64_t v8 = v6 + 56;
        uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
        unint64_t v10 = result & ~v9;
        unint64_t v11 = v10 >> 6;
        if (((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6))) != 0)
        {
          unint64_t v12 = __clz(__rbit64((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6)))) | v10 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v14 = 0;
          unint64_t v15 = (unint64_t)(63 - v9) >> 6;
          do
          {
            if (++v11 == v15 && (v14 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v16 = v11 == v15;
            if (v11 == v15) {
              unint64_t v11 = 0;
            }
            v14 |= v16;
            uint64_t v17 = *(void *)(v8 + 8 * v11);
          }
          while (v17 == -1);
          unint64_t v12 = __clz(__rbit64(~v17)) + (v11 << 6);
        }
        *(void *)(v8 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
        *(void *)(*(void *)(v6 + 48) + 8 * v12) = v18;
        ++*(void *)(v6 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E4FBC870];
  }
  return v6;
}

uint64_t specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for AnyCancellable();
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          uint64_t v2 = v14;
        }
        lazy protocol witness table accessor for type AnyCancellable and conformance AnyCancellable(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x1E4F1AB18]);
        uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E4FBC870];
  }
  return v2;
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1)
{
  return specialized _NativeSet.resize(capacity:)(a1, &demangling cache variable for type metadata for _SetStorage<ActivitySession>);
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt64>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    unint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    char v27 = v1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  *unint64_t v6 = v26;
                }
                uint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  char *v41;
  uint64_t v42;

  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v42 - 8);
  MEMORY[0x1F4188790](v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID>);
  int64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  unint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    id v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      unint64_t v9 = ~(-1 << v7);
    }
    else {
      unint64_t v9 = -1;
    }
    int64_t v10 = v9 & v8;
    id v35 = v0;
    uint64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    unint64_t v13 = 0;
    uint64_t v38 = v6;
    unint64_t v14 = v41;
    int64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        int64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        uint64_t v40 = v13;
        uint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        uint64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        unint64_t v21 = v13 + 1;
        if (!v20)
        {
          unint64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            unint64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              char v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                id v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *id v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  unint64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        int64_t v10 = (v20 - 1) & v20;
        uint64_t v40 = v21;
        uint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      unint64_t v23 = v4;
      BOOL v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      unint64_t v6 = v38;
      lazy protocol witness table accessor for type AnyCancellable and conformance AnyCancellable((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      char v27 = -1 << *(unsigned char *)(v6 + 32);
      uint64_t v28 = result & ~v27;
      id v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        Swift::Int v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          id v32 = v29 == v31;
          if (v29 == v31) {
            id v29 = 0;
          }
          v30 |= v32;
          id v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      unint64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  void *v27;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    char v27 = (void *)(v2 + 56);
    if (v5 < 64) {
      unint64_t v6 = ~(-1 << v5);
    }
    else {
      unint64_t v6 = -1;
    }
    uint64_t v7 = v6 & *(void *)(v2 + 56);
    uint64_t v26 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v12 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v13 = v12 | (v10 << 6);
      }
      else
      {
        unint64_t v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v26) {
          goto LABEL_33;
        }
        int64_t v15 = v27[v14];
        ++v10;
        if (!v15)
        {
          int64_t v10 = v14 + 1;
          if (v14 + 1 >= v26) {
            goto LABEL_33;
          }
          int64_t v15 = v27[v10];
          if (!v15)
          {
            int64_t v10 = v14 + 2;
            if (v14 + 2 >= v26) {
              goto LABEL_33;
            }
            int64_t v15 = v27[v10];
            if (!v15)
            {
              unint64_t v16 = v14 + 3;
              if (v16 >= v26)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v25 = 1 << *(unsigned char *)(v2 + 32);
                if (v25 > 63) {
                  bzero(v27, ((unint64_t)(v25 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v27 = -1 << v25;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              int64_t v15 = v27[v16];
              if (!v15)
              {
                while (1)
                {
                  int64_t v10 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v26) {
                    goto LABEL_33;
                  }
                  int64_t v15 = v27[v10];
                  ++v16;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v10 = v16;
            }
          }
        }
LABEL_23:
        uint64_t v7 = (v15 - 1) & v15;
        unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
      }
      int64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
      type metadata accessor for AnyCancellable();
      lazy protocol witness table accessor for type AnyCancellable and conformance AnyCancellable(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x1E4F1AB18]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v18 = -1 << *(unsigned char *)(v4 + 32);
      uint64_t v19 = result & ~v18;
      unint64_t v20 = v19 >> 6;
      if (((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6))) != 0)
      {
        uint64_t v11 = __clz(__rbit64((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v21 = 0;
        char v22 = (unint64_t)(63 - v18) >> 6;
        do
        {
          if (++v20 == v22 && (v21 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          unint64_t v23 = v20 == v22;
          if (v20 == v22) {
            unint64_t v20 = 0;
          }
          v21 |= v23;
          BOOL v24 = *(void *)(v8 + 8 * v20);
        }
        while (v24 == -1);
        uint64_t v11 = __clz(__rbit64(~v24)) + (v20 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<BackgroundSession>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    id v29 = v0;
    int64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    uint64_t v8 = v7 & *(void *)(v2 + 56);
    unint64_t v9 = (unint64_t)(v5 + 63) >> 6;
    int64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    unint64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        int64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        unint64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_33;
        }
        int64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          unint64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_33;
          }
          int64_t v17 = v6[v12];
          if (!v17)
          {
            unint64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_33;
            }
            int64_t v17 = v6[v12];
            if (!v17)
            {
              uint64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v29;
                uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
                if (v28 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v6 = -1 << v28;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              int64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  unint64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  int64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v12 = v18;
            }
          }
        }
LABEL_23:
        uint64_t v8 = (v17 - 1) & v17;
        int64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
      Hasher.init(_seed:)();
      unint64_t v20 = *(id *)(v19 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
      NSObject.hash(into:)();

      uint64_t result = Hasher._finalize()();
      unint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
      char v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        BOOL v24 = 0;
        uint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          char v27 = *(void *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    Swift::Int v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      unint64_t v6 = ~(-1 << v5);
    }
    else {
      unint64_t v6 = -1;
    }
    uint64_t v7 = v6 & *(void *)(v2 + 56);
    uint64_t v8 = (unint64_t)(v5 + 63) >> 6;
    unint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    uint64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        int64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        unint64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        int64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          uint64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          int64_t v17 = v30[v11];
          if (!v17)
          {
            uint64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            int64_t v17 = v30[v11];
            if (!v17)
            {
              uint64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                id v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *Swift::Int v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              int64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  uint64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  int64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v11 = v18;
            }
          }
        }
LABEL_23:
        uint64_t v7 = (v17 - 1) & v17;
        int64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      unint64_t v20 = *v19;
      unint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      char v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      BOOL v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v25 = 0;
        uint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          char v27 = v24 == v26;
          if (v24 == v26) {
            BOOL v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      NSObject *v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  Swift::UInt64 *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  Swift::UInt64 *v19;
  Swift::UInt64 v20;
  Swift::UInt64 v21;
  Swift::UInt64 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  void *v32;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<IDSGroupSessionProvider.Participant>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    id v32 = (void *)(v2 + 56);
    if (v5 < 64) {
      unint64_t v6 = ~(-1 << v5);
    }
    else {
      unint64_t v6 = -1;
    }
    uint64_t v7 = v6 & *(void *)(v2 + 56);
    unint64_t v31 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v14 = v13 | (v10 << 6);
      }
      else
      {
        int64_t v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v31) {
          goto LABEL_33;
        }
        unint64_t v16 = v32[v15];
        ++v10;
        if (!v16)
        {
          int64_t v10 = v15 + 1;
          if (v15 + 1 >= v31) {
            goto LABEL_33;
          }
          unint64_t v16 = v32[v10];
          if (!v16)
          {
            int64_t v10 = v15 + 2;
            if (v15 + 2 >= v31) {
              goto LABEL_33;
            }
            unint64_t v16 = v32[v10];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v31)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                Swift::Int v30 = 1 << *(unsigned char *)(v2 + 32);
                if (v30 > 63) {
                  bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *id v32 = -1 << v30;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v32[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v10 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v31) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v32[v10];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v10 = v17;
            }
          }
        }
LABEL_23:
        uint64_t v7 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
      }
      uint64_t v18 = v2;
      uint64_t v19 = (Swift::UInt64 *)(*(void *)(v2 + 48) + 24 * v14);
      unint64_t v20 = *v19;
      unint64_t v21 = v19[1];
      char v22 = v19[2];
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t result = Hasher._finalize()();
      unint64_t v23 = -1 << *(unsigned char *)(v4 + 32);
      BOOL v24 = result & ~v23;
      uint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v8 + 8 * (v24 >> 6))) != 0)
      {
        uint64_t v11 = __clz(__rbit64((-1 << v24) & ~*(void *)(v8 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v26 = 0;
        char v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v28 = v25 == v27;
          if (v25 == v27) {
            uint64_t v25 = 0;
          }
          v26 |= v28;
          id v29 = *(void *)(v8 + 8 * v25);
        }
        while (v29 == -1);
        uint64_t v11 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      unint64_t v12 = (Swift::UInt64 *)(*(void *)(v4 + 48) + 24 * v11);
      *unint64_t v12 = v20;
      v12[1] = v21;
      v12[2] = v22;
      ++*(void *)(v4 + 16);
      uint64_t v2 = v18;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    Swift::Int v30 = v2;
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v4 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }
      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v11) {
          goto LABEL_33;
        }
        unint64_t v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v11) {
            goto LABEL_33;
          }
          unint64_t v19 = v8[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v11) {
              goto LABEL_33;
            }
            unint64_t v19 = v8[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_33:
                swift_release();
                uint64_t v3 = v30;
                uint64_t v29 = 1 << *(unsigned char *)(v4 + 32);
                if (v29 > 63) {
                  bzero((void *)(v4 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v8 = -1 << v29;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_39;
                  }
                  if (v14 >= v11) {
                    goto LABEL_33;
                  }
                  unint64_t v19 = v8[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v14 = v20;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      uint64_t v21 = *(void *)(*(void *)(v4 + 48) + 8 * v17);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
      uint64_t v22 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v6 + 48) + 8 * v15) = v21;
      ++*(void *)(v6 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v6;
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AnyCancellable();
  lazy protocol witness table accessor for type AnyCancellable and conformance AnyCancellable(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x1E4F1AB18]);
  dispatch thunk of Hashable._rawHashValue(seed:)();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

{
  id v4;
  unint64_t result;

  Hasher.init(_seed:)();
  uint64_t v4 = *(id *)(a1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
  NSObject.hash(into:)();

  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, void *a2)
{
  NSObject._rawHashValue(seed:)(a2[5]);
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(void *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, unint64_t *a5)
{
  unint64_t v9 = *(void *)(*v5 + 16);
  unint64_t v10 = *(void *)(*v5 + 24);
  if (v10 > v9 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v11 = v9 + 1;
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)(v11, a4);
  }
  else
  {
    if (v10 > v9)
    {
      specialized _NativeSet.copy()(a4);
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v11, a4);
  }
  uint64_t v12 = *v5;
  Swift::Int v13 = NSObject._rawHashValue(seed:)(*(void *)(*v5 + 40));
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    type metadata accessor for TUConversationActivity(0, a5);
    id v15 = *(id *)(*(void *)(v12 + 48) + 8 * a2);
    char v16 = static NSObject.== infix(_:_:)();

    if (v16)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v14;
      while (1)
      {
        a2 = (a2 + 1) & v17;
        if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v12 + 48) + 8 * a2);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v20 + 48) + 8 * a2) = a1;
  uint64_t v21 = *(void *)(v20 + 16);
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v23;
  }
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      unint64_t result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  unint64_t result = static Hasher._hash(seed:_:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      unint64_t result = (uint64_t)specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  type metadata accessor for AnyCancellable();
  lazy protocol witness table accessor for type AnyCancellable and conformance AnyCancellable(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x1E4F1AB18]);
  unint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = ~v9;
    lazy protocol witness table accessor for type AnyCancellable and conformance AnyCancellable(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x1E4F1AB18]);
    do
    {
      unint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
      if (result) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v10;
    }
    while (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v11 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v11 + 48) + 8 * a2) = v5;
  uint64_t v12 = *(void *)(v11 + 16);
  uint64_t v13 = __OFADD__(v12, 1);
  BOOL v14 = v12 + 1;
  if (!v13)
  {
    *(void *)(v11 + 16) = v14;
    return result;
  }
  __break(1u);
LABEL_15:
  unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v12 = *v3;
  lazy protocol witness table accessor for type AnyCancellable and conformance AnyCancellable((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    char v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    uint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      lazy protocol witness table accessor for type AnyCancellable and conformance AnyCancellable((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, void (*a5)(void))
{
  unint64_t v9 = *(void *)(*v5 + 16);
  unint64_t v10 = *(void *)(*v5 + 24);
  if (v10 > v9 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v11 = v9 + 1;
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)(v11, a4);
  }
  else
  {
    if (v10 > v9)
    {
      specialized _NativeSet.copy()(a4);
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v11, a4);
  }
  uint64_t v12 = *v5;
  Swift::Int v13 = NSObject._rawHashValue(seed:)(*(void *)(*v5 + 40));
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    a5(0);
    id v15 = *(id *)(*(void *)(v12 + 48) + 8 * a2);
    char v16 = static NSObject.== infix(_:_:)();

    if (v16)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v14;
      while (1)
      {
        a2 = (a2 + 1) & v17;
        if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v12 + 48) + 8 * a2);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v20 + 48) + 8 * a2) = a1;
  uint64_t v21 = *(void *)(v20 + 16);
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v23;
  }
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, unint64_t a2, char a3)
{
  Swift::Int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<BackgroundSession>);
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  id v9 = *(id *)(v5 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
  NSObject.hash(into:)();

  uint64_t result = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    type metadata accessor for BackgroundSession(0);
    type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for NSObject);
    swift_retain();
    char v11 = static NSObject.== infix(_:_:)();
    uint64_t result = swift_release();
    if (v11)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        swift_retain();
        char v13 = static NSObject.== infix(_:_:)();
        uint64_t result = swift_release();
        if (v13) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v14 = *v18;
  *(void *)(*v18 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v14 + 48) + 8 * a2) = v5;
  uint64_t v15 = *(void *)(v14 + 16);
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    *(void *)(v14 + 16) = v17;
  }
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  Swift::Int v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        id v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::UInt64 a2, Swift::UInt64 a3, unint64_t a4, char a5)
{
  unint64_t v6 = v5;
  Swift::UInt64 v10 = result;
  unint64_t v11 = *(void *)(*v5 + 16);
  unint64_t v12 = *(void *)(*v5 + 24);
  if (v12 > v11 && (a5 & 1) != 0) {
    goto LABEL_18;
  }
  if (a5)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v12 > v11)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_18;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v13 = *v5;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v10);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t result = Hasher._finalize()();
  uint64_t v14 = -1 << *(unsigned char *)(v13 + 32);
  a4 = result & ~v14;
  uint64_t v15 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4))
  {
    uint64_t v16 = ~v14;
    uint64_t v17 = *(void *)(v13 + 48);
    while (1)
    {
      id v18 = (void *)(v17 + 24 * a4);
      if (*v18 == v10)
      {
        if (v18[1] == a2 && v18[2] == a3) {
          break;
        }
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if (result) {
          break;
        }
      }
      a4 = (a4 + 1) & v16;
      if (((*(void *)(v15 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4) & 1) == 0) {
        goto LABEL_18;
      }
    }
    uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
LABEL_18:
  uint64_t v20 = *v6;
  *(void *)(*v6 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  uint64_t v21 = (Swift::UInt64 *)(*(void *)(v20 + 48) + 24 * a4);
  *uint64_t v21 = v10;
  v21[1] = a2;
  v21[2] = a3;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

id specialized _NativeSet.copy()()
{
  return specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<ActivitySession>);
}

{
  return specialized _NativeSet.copy()((uint64_t *)&demangling cache variable for type metadata for _SetStorage<AddressableMember>);
}

{
  return specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<PresenceHostSession>);
}

{
  return specialized _NativeSet.copy()((uint64_t *)&demangling cache variable for type metadata for _SetStorage<ConversationManagerHostConnection>);
}

void *specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt64>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  Swift::Int v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID>);
  uint64_t v6 = *v0;
  unint64_t v7 = static _SetStorage.copy(original:)();
  Swift::Int v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_27:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v22 = v1;
  uint64_t result = (void *)(v7 + 56);
  uint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 56), 8 * v10);
  }
  BOOL v23 = v6 + 56;
  uint64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  unint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  int64_t v13 = -1;
  if (v12 < 64) {
    int64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 56);
  uint64_t v24 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      int64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v18 >= v24) {
      goto LABEL_25;
    }
    char v19 = *(void *)(v23 + 8 * v18);
    ++v11;
    if (!v19)
    {
      uint64_t v11 = v18 + 1;
      if (v18 + 1 >= v24) {
        goto LABEL_25;
      }
      char v19 = *(void *)(v23 + 8 * v11);
      if (!v19)
      {
        uint64_t v11 = v18 + 2;
        if (v18 + 2 >= v24) {
          goto LABEL_25;
        }
        char v19 = *(void *)(v23 + 8 * v11);
        if (!v19) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v14 = (v19 - 1) & v19;
    int64_t v16 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
  }
  uint64_t v20 = v18 + 3;
  if (v20 >= v24)
  {
LABEL_25:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v22;
    goto LABEL_27;
  }
  char v19 = *(void *)(v23 + 8 * v20);
  if (v19)
  {
    uint64_t v11 = v20;
    goto LABEL_24;
  }
  while (1)
  {
    uint64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v11 >= v24) {
      goto LABEL_25;
    }
    char v19 = *(void *)(v23 + 8 * v11);
    ++v20;
    if (v19) {
      goto LABEL_24;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

{
  return specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<BackgroundSession>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      uint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        uint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    int64_t v18 = v17[1];
    char v19 = (void *)(*(void *)(v4 + 48) + v16);
    *char v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<IDSGroupSessionProvider.Participant>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      uint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        uint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 24 * v15;
    unint64_t v17 = *(void *)(v2 + 48) + v16;
    int64_t v18 = *(void *)(v17 + 16);
    char v19 = *(void *)(v4 + 48) + v16;
    *(_OWORD *)char v19 = *(_OWORD *)v17;
    *(void *)(v19 + 16) = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()(uint64_t *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  uint64_t result = (void *)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    uint64_t result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v7 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v7 + 8 * v10);
        if (!v18) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(void *)(*(void *)(v5 + 48) + 8 * v16) = *(void *)(*(void *)(v3 + 48) + 8 * v16);
    uint64_t result = (void *)swift_retain();
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v7 + 8 * v19);
  if (v18)
  {
    int64_t v10 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id specialized _NativeSet.copy()(uint64_t *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (id)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v20 = *(void *)(v7 + 8 * v10);
      if (!v20)
      {
        int64_t v10 = v19 + 2;
        if (v19 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v20 = *(void *)(v7 + 8 * v10);
        if (!v20) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    unint64_t v18 = *(void **)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    id result = v18;
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v14) {
    goto LABEL_28;
  }
  unint64_t v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt64>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  BOOL v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (**v14)(unint64_t, char *, uint64_t);
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  int64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID>);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  unint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  int64_t v10 = *(void *)(v6 + 56);
  id v34 = v0;
  id v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  uint64_t v36 = (unint64_t)(v9 + 63) >> 6;
  id v37 = v3 + 16;
  unint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  unint64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      uint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    unint64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      unint64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        unint64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    uint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    unint64_t v23 = v6;
    BOOL v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    lazy protocol witness table accessor for type AnyCancellable and conformance AnyCancellable((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    BOOL v26 = -1 << *(unsigned char *)(v8 + 32);
    uint64_t v27 = result & ~v26;
    uint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      int64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v31 = v28 == v30;
        if (v28 == v30) {
          uint64_t v28 = 0;
        }
        v29 |= v31;
        id v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      int64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  char v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    unint64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    unint64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v25 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  uint64_t v7 = v6 & *(void *)(v2 + 56);
  BOOL v26 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    unint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v26) {
      goto LABEL_33;
    }
    int64_t v15 = *(void *)(v25 + 8 * v14);
    ++v10;
    if (!v15)
    {
      int64_t v10 = v14 + 1;
      if (v14 + 1 >= v26) {
        goto LABEL_33;
      }
      int64_t v15 = *(void *)(v25 + 8 * v10);
      if (!v15)
      {
        int64_t v10 = v14 + 2;
        if (v14 + 2 >= v26) {
          goto LABEL_33;
        }
        int64_t v15 = *(void *)(v25 + 8 * v10);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v7 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    int64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
    type metadata accessor for AnyCancellable();
    lazy protocol witness table accessor for type AnyCancellable and conformance AnyCancellable(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x1E4F1AB18]);
    swift_retain();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v18 = -1 << *(unsigned char *)(v4 + 32);
    uint64_t v19 = result & ~v18;
    unint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6))) != 0)
    {
      uint64_t v11 = __clz(__rbit64((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v21 = 0;
      char v22 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v22 && (v21 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        unint64_t v23 = v20 == v22;
        if (v20 == v22) {
          unint64_t v20 = 0;
        }
        v21 |= v23;
        BOOL v24 = *(void *)(v8 + 8 * v20);
      }
      while (v24 == -1);
      uint64_t v11 = __clz(__rbit64(~v24)) + (v20 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
    ++*(void *)(v4 + 16);
  }
  unint64_t v16 = v14 + 3;
  if (v16 >= v26)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  int64_t v15 = *(void *)(v25 + 8 * v16);
  if (v15)
  {
    int64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v26) {
      goto LABEL_33;
    }
    int64_t v15 = *(void *)(v25 + 8 * v10);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<BackgroundSession>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v29 = v0;
  int64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  uint64_t v8 = v7 & *(void *)(v2 + 56);
  unint64_t v9 = (unint64_t)(v5 + 63) >> 6;
  int64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  unint64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      int64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    unint64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9) {
      goto LABEL_33;
    }
    int64_t v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      unint64_t v12 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_33;
      }
      int64_t v17 = *(void *)(v6 + 8 * v12);
      if (!v17)
      {
        unint64_t v12 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_33;
        }
        int64_t v17 = *(void *)(v6 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v8 = (v17 - 1) & v17;
    int64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    Hasher.init(_seed:)();
    unint64_t v20 = *(void **)(v19 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
    swift_retain();
    unint64_t v21 = v20;
    NSObject.hash(into:)();

    uint64_t result = Hasher._finalize()();
    char v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    BOOL v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v25 = 0;
      BOOL v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v27 = v24 == v26;
        if (v24 == v26) {
          BOOL v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v10 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v13 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
    ++*(void *)(v4 + 16);
  }
  uint64_t v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v29;
    goto LABEL_35;
  }
  int64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    unint64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    unint64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    int64_t v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  uint64_t v8 = v7 & *(void *)(v2 + 56);
  uint64_t v29 = (unint64_t)(v5 + 63) >> 6;
  unint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  uint64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      int64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    unint64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    int64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      uint64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      int64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        uint64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        int64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v8 = (v17 - 1) & v17;
    int64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v20 = *v19;
    unint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    char v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    BOOL v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v25 = 0;
      BOOL v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v27 = v24 == v26;
        if (v24 == v26) {
          BOOL v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    NSObject *v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  uint64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  int64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    int64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  Swift::UInt64 *v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  Swift::UInt64 *v17;
  Swift::UInt64 v18;
  Swift::UInt64 v19;
  Swift::UInt64 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;

  uint64_t v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<IDSGroupSessionProvider.Participant>);
  uint64_t v2 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v0 = v3;
    return result;
  }
  uint64_t v4 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v28 = v1 + 56;
  if (v4 < 64) {
    int64_t v5 = ~(-1 << v4);
  }
  else {
    int64_t v5 = -1;
  }
  uint64_t v6 = v5 & *(void *)(v1 + 56);
  uint64_t v29 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v7 = v2 + 56;
  uint64_t result = swift_retain();
  unint64_t v9 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v13 = v12 | (v9 << 6);
      goto LABEL_24;
    }
    unint64_t v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v29) {
      goto LABEL_33;
    }
    int64_t v15 = *(void *)(v28 + 8 * v14);
    ++v9;
    if (!v15)
    {
      unint64_t v9 = v14 + 1;
      if (v14 + 1 >= v29) {
        goto LABEL_33;
      }
      int64_t v15 = *(void *)(v28 + 8 * v9);
      if (!v15)
      {
        unint64_t v9 = v14 + 2;
        if (v14 + 2 >= v29) {
          goto LABEL_33;
        }
        int64_t v15 = *(void *)(v28 + 8 * v9);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v6 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v9 << 6);
LABEL_24:
    int64_t v17 = (Swift::UInt64 *)(*(void *)(v1 + 48) + 24 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    unint64_t v20 = v17[2];
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    swift_bridgeObjectRetain_n();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    unint64_t v21 = -1 << *(unsigned char *)(v3 + 32);
    char v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v7 + 8 * (v22 >> 6))) != 0)
    {
      int64_t v10 = __clz(__rbit64((-1 << v22) & ~*(void *)(v7 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      BOOL v24 = 0;
      uint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v7 + 8 * v23);
      }
      while (v27 == -1);
      int64_t v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    uint64_t v11 = (Swift::UInt64 *)(*(void *)(v3 + 48) + 24 * v10);
    *uint64_t v11 = v18;
    v11[1] = v19;
    v11[2] = v20;
    ++*(void *)(v3 + 16);
  }
  unint64_t v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    goto LABEL_35;
  }
  int64_t v15 = *(void *)(v28 + 8 * v16);
  if (v15)
  {
    unint64_t v9 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    unint64_t v9 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v9 >= v29) {
      goto LABEL_33;
    }
    int64_t v15 = *(void *)(v28 + 8 * v9);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v3 = v6;
    return result;
  }
  uint64_t v30 = v2;
  uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v8 = v4 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1 << v7);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v4 + 56);
  int64_t v11 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v12 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v11) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v11) {
          goto LABEL_33;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    Swift::Int v21 = *(void *)(v6 + 40);
    id v22 = *(id *)(*(void *)(v4 + 48) + 8 * v17);
    uint64_t result = NSObject._rawHashValue(seed:)(v21);
    uint64_t v23 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(void *)(*(void *)(v6 + 48) + 8 * v15) = v22;
    ++*(void *)(v6 + 16);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v3 = v30;
    goto LABEL_35;
  }
  unint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    int64_t v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v14 >= v11) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  MEMORY[0x1F4188790](v5);
  Swift::String v55 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v47 = a1 + 56;
  uint64_t v9 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & v8;
  uint64_t v12 = *(unsigned __int8 *)(v6 + 80);
  unint64_t v13 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v14 = MEMORY[0x1E4FBC860] + ((v12 + 32) & ~v12);
  uint64_t v51 = v6 + 16;
  uint64_t v52 = v6;
  uint64_t v53 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  uint64_t v49 = (v12 + 32) & ~v12;
  uint64_t v50 = v6 + 48;
  uint64_t v54 = (uint64_t (**)(char *, char *, uint64_t))(v6 + 32);
  uint64_t v45 = v12 | 7;
  int64_t v46 = (unint64_t)(v9 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v16 = 0;
  int64_t v17 = 0;
  uint64_t v43 = v4;
  uint64_t v44 = a1;
  uint64_t v48 = v5;
  if (!v11) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v18 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (unint64_t i = v18 | (v17 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    uint64_t v23 = v52;
    uint64_t v24 = *(void *)(v52 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v52 + 16))(v4, *(void *)(a1 + 48) + v24 * i, v5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v4, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v4, 1, v5) == 1) {
      goto LABEL_43;
    }
    unint64_t v25 = *v54;
    uint64_t result = (*v54)(v55, v4, v5);
    if (!v16)
    {
      unint64_t v26 = *((void *)v13 + 3);
      if ((uint64_t)((v26 >> 1) + 0x4000000000000000) < 0) {
        goto LABEL_49;
      }
      unint64_t v27 = v13;
      int64_t v28 = v26 & 0xFFFFFFFFFFFFFFFELL;
      if (v28 <= 1) {
        uint64_t v29 = 1;
      }
      else {
        uint64_t v29 = v28;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>);
      uint64_t v30 = v49;
      unint64_t v13 = (char *)swift_allocObject();
      uint64_t result = _swift_stdlib_malloc_size(v13);
      if (!v24) {
        goto LABEL_50;
      }
      uint64_t v31 = result - v30;
      if (result - v30 == 0x8000000000000000 && v24 == -1) {
        goto LABEL_52;
      }
      uint64_t v33 = v31 / v24;
      *((void *)v13 + 2) = v29;
      *((void *)v13 + 3) = 2 * (v31 / v24);
      id v34 = &v13[v30];
      uint64_t v35 = *((void *)v27 + 3) >> 1;
      uint64_t v36 = v35 * v24;
      if (*((void *)v27 + 2))
      {
        if (v13 < v27 || v34 >= &v27[v49 + v36])
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v13 != v27)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        *((void *)v27 + 2) = 0;
      }
      uint64_t v14 = (uint64_t)&v34[v36];
      uint64_t v16 = (v33 & 0x7FFFFFFFFFFFFFFFLL) - v35;
      uint64_t result = swift_release();
      uint64_t v4 = v43;
      a1 = v44;
      uint64_t v5 = v48;
    }
    BOOL v38 = __OFSUB__(v16--, 1);
    if (v38)
    {
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    uint64_t result = v25((char *)v14, v55, v5);
    v14 += v24;
    if (v11) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v20 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      goto LABEL_48;
    }
    if (v20 >= v46) {
      goto LABEL_42;
    }
    unint64_t v21 = *(void *)(v47 + 8 * v20);
    ++v17;
    if (!v21)
    {
      int64_t v17 = v20 + 1;
      if (v20 + 1 >= v46) {
        goto LABEL_42;
      }
      unint64_t v21 = *(void *)(v47 + 8 * v17);
      if (!v21) {
        break;
      }
    }
LABEL_16:
    unint64_t v11 = (v21 - 1) & v21;
  }
  int64_t v22 = v20 + 2;
  if (v22 < v46)
  {
    unint64_t v21 = *(void *)(v47 + 8 * v22);
    if (!v21)
    {
      while (1)
      {
        int64_t v17 = v22 + 1;
        if (__OFADD__(v22, 1)) {
          goto LABEL_51;
        }
        if (v17 >= v46) {
          goto LABEL_42;
        }
        unint64_t v21 = *(void *)(v47 + 8 * v17);
        ++v22;
        if (v21) {
          goto LABEL_16;
        }
      }
    }
    int64_t v17 = v22;
    goto LABEL_16;
  }
LABEL_42:
  (*v53)(v4, 1, 1, v5);
LABEL_43:
  swift_release();
  uint64_t result = outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for UUID?);
  unint64_t v39 = *((void *)v13 + 3);
  if (v39 < 2) {
    return (uint64_t)v13;
  }
  unint64_t v40 = v39 >> 1;
  BOOL v38 = __OFSUB__(v40, v16);
  uint64_t v41 = v40 - v16;
  if (!v38)
  {
    *((void *)v13 + 2) = v41;
    return (uint64_t)v13;
  }
LABEL_53:
  __break(1u);
  return result;
}

void specialized Set.hash(into:)(long long *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *((void *)a1 + 8);
  long long v12 = a1[1];
  long long v36 = *a1;
  long long v37 = v12;
  long long v13 = a1[2];
  long long v14 = a1[3];
  int64_t v28 = a1;
  long long v38 = v13;
  long long v39 = v14;
  uint64_t v40 = v11;
  Swift::Int v15 = Hasher._finalize()();
  uint64_t v16 = *(void *)(a2 + 56);
  uint64_t v30 = a2 + 56;
  Swift::Int v31 = v15;
  uint64_t v17 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & v16;
  int64_t v29 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v33 = v5 + 16;
  id v34 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v32 = v5 + 48;
  uint64_t v35 = a2;
  swift_bridgeObjectRetain();
  Swift::UInt v20 = 0;
  int64_t v21 = 0;
  if (!v19) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v22 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  for (unint64_t i = v22 | (v21 << 6); ; unint64_t i = __clz(__rbit64(v25)) + (v21 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v10, *(void *)(v35 + 48) + *(void *)(v5 + 72) * i, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1) {
      goto LABEL_19;
    }
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    lazy protocol witness table accessor for type AnyCancellable and conformance AnyCancellable((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v27 = dispatch thunk of Hashable._rawHashValue(seed:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v20 ^= v27;
    if (v19) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v21++, 1)) {
      goto LABEL_21;
    }
    if (v21 >= v29) {
      goto LABEL_18;
    }
    unint64_t v25 = *(void *)(v30 + 8 * v21);
    if (!v25) {
      break;
    }
LABEL_14:
    unint64_t v19 = (v25 - 1) & v25;
  }
  int64_t v26 = v21 + 1;
  if (v21 + 1 >= v29)
  {
LABEL_18:
    (*v34)(v10, 1, 1, v4);
LABEL_19:
    swift_release();
    Hasher._combine(_:)(v20);
    return;
  }
  unint64_t v25 = *(void *)(v30 + 8 * v26);
  if (v25)
  {
    ++v21;
    goto LABEL_14;
  }
  while (1)
  {
    int64_t v21 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v21 >= v29) {
      goto LABEL_18;
    }
    unint64_t v25 = *(void *)(v30 + 8 * v21);
    ++v26;
    if (v25) {
      goto LABEL_14;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t specialized ActivityListPresenceContext.init(dictionary:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  int64_t v29 = (char *)v26 - v10;
  if (!*(void *)(a1 + 16)
    || (unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(0x7974697669746361, 0xEB00000000734449), (v12 & 1) == 0))
  {
    long long v31 = 0u;
    long long v32 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v11, (uint64_t)&v31);
  swift_bridgeObjectRelease();
  if (!*((void *)&v32 + 1))
  {
LABEL_16:
    outlined destroy of UUID?((uint64_t)&v31, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  uint64_t v13 = v30;
  uint64_t v14 = *(void *)(v30 + 16);
  if (v14)
  {
    Swift::Int v15 = (unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
    uint64_t v28 = v6;
    uint64_t v16 = (void (**)(char *, char *, uint64_t))(v6 + 32);
    swift_bridgeObjectRetain();
    v26[1] = v13;
    uint64_t v17 = v13 + 40;
    uint64_t v18 = MEMORY[0x1E4FBC860];
    uint64_t v27 = v9;
    do
    {
      swift_bridgeObjectRetain();
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      if ((*v15)(v4, 1, v5) == 1)
      {
        outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for UUID?);
      }
      else
      {
        unint64_t v19 = *v16;
        Swift::UInt v20 = v29;
        (*v16)(v29, v4, v5);
        v19(v9, v20, v5);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v18 + 16) + 1, 1, v18);
        }
        unint64_t v22 = *(void *)(v18 + 16);
        unint64_t v21 = *(void *)(v18 + 24);
        if (v22 >= v21 >> 1) {
          uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1, v18);
        }
        *(void *)(v18 + 16) = v22 + 1;
        unint64_t v23 = v18
            + ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))
            + *(void *)(v28 + 72) * v22;
        uint64_t v9 = v27;
        v19((char *)v23, v27, v5);
      }
      v17 += 16;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v18 = MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRelease();
  uint64_t v24 = specialized Set.init<A>(_:)(v18);
  swift_bridgeObjectRelease();
  return v24;
}

unint64_t instantiation function for generic protocol witness table for EmptyPresenceContext(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type EmptyPresenceContext and conformance EmptyPresenceContext();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in ActivityListPresenceContext(uint64_t a1)
{
  return MEMORY[0x1F4186618](a1, &opaque type descriptor for <<opaque return type of ActivityListPresenceContext.makeIterator()>>, 1);
}

unint64_t lazy protocol witness table accessor for type ActivityListPresenceContext.DictionaryKeys and conformance ActivityListPresenceContext.DictionaryKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ActivityListPresenceContext.DictionaryKeys and conformance ActivityListPresenceContext.DictionaryKeys;
  if (!lazy protocol witness table cache variable for type ActivityListPresenceContext.DictionaryKeys and conformance ActivityListPresenceContext.DictionaryKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActivityListPresenceContext.DictionaryKeys and conformance ActivityListPresenceContext.DictionaryKeys);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for ActivityListPresenceContext(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ActivityListPresenceContext and conformance ActivityListPresenceContext();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ActivityListPresenceContext and conformance ActivityListPresenceContext()
{
  unint64_t result = lazy protocol witness table cache variable for type ActivityListPresenceContext and conformance ActivityListPresenceContext;
  if (!lazy protocol witness table cache variable for type ActivityListPresenceContext and conformance ActivityListPresenceContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActivityListPresenceContext and conformance ActivityListPresenceContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ActivityListPresenceContext and conformance ActivityListPresenceContext;
  if (!lazy protocol witness table cache variable for type ActivityListPresenceContext and conformance ActivityListPresenceContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActivityListPresenceContext and conformance ActivityListPresenceContext);
  }
  return result;
}

uint64_t sub_1B0FAA1BC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t dispatch thunk of static PresenceContext.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

ValueMetadata *type metadata accessor for EmptyPresenceContext()
{
  return &type metadata for EmptyPresenceContext;
}

ValueMetadata *type metadata accessor for ActivityListPresenceContext()
{
  return &type metadata for ActivityListPresenceContext;
}

unsigned char *storeEnumTagSinglePayload for ActivityListPresenceContext.DictionaryKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B0FAA29CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ActivityListPresenceContext.DictionaryKeys()
{
  return &type metadata for ActivityListPresenceContext.DictionaryKeys;
}

unint64_t lazy protocol witness table accessor for type Set<UUID>.Iterator and conformance Set<A>.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type Set<UUID>.Iterator and conformance Set<A>.Iterator;
  if (!lazy protocol witness table cache variable for type Set<UUID>.Iterator and conformance Set<A>.Iterator)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<UUID>.Iterator);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Set<UUID>.Iterator and conformance Set<A>.Iterator);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AnyCancellable and conformance AnyCancellable(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed OS_nw_protocol_options) -> ()(uint64_t a1)
{
  unint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t DatagramEndpoint.participantEndpoint(topic:participantId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (v4[4])
  {
    uint64_t v9 = v4[2];
    unint64_t v10 = v4[3];
    uint64_t v13 = v4;
    uint64_t v11 = *v4;
    uint64_t v12 = v13[1];
    outlined copy of Data?(v9, v10);
    uint64_t v14 = (void *)MEMORY[0x1B3EA1B00](v11, v12);
    Swift::Int v15 = (void *)MEMORY[0x1B3EA1B00](a1, a2);
    if (v10 >> 60 == 15) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = v9;
    }
    if (v10 >> 60 == 15) {
      unint64_t v17 = 0xC000000000000000;
    }
    else {
      unint64_t v17 = v10;
    }
    uint64_t v18 = self;
    outlined copy of Data?(v9, v10);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v16, v17);
    id v20 = objc_msgSend(v18, sel_createEndpointForSessionIDAlias_topic_participantIDAlias_salt_, v14, v15, a3, isa);

    NWEndpoint.init(_:)();
    return outlined consume of Data?(v9, v10);
  }
  else
  {
    uint64_t v22 = type metadata accessor for NWEndpoint();
    unint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56);
    return v23(a4, 1, 1, v22);
  }
}

uint64_t PluginClient.doCreateQuicConnection()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWEndpoint?);
  MEMORY[0x1F4188790](v1 - 8);
  int v3 = (char *)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for NWEndpoint();
  uint64_t v39 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  long long v37 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v36 - v8;
  MEMORY[0x1F4188790](v7);
  long long v38 = (char *)&v36 - v10;
  uint64_t v11 = type metadata accessor for PluginEndpoint();
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (uint64_t *)((char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = type metadata accessor for PluginClient.Configuration(0);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = (uint64_t (*)(uint64_t))destructiveProjectEnumData for ActivitySession.Errors;
  uint64_t v45 = 0;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v41 = 1107296256;
  uint64_t v42 = thunk for @escaping @callee_guaranteed (@guaranteed OS_nw_protocol_options) -> ();
  uint64_t v43 = &block_descriptor_14;
  unint64_t v17 = _Block_copy(&aBlock);
  uint64_t v44 = partial apply for closure #2 in PluginClient.doCreateQuicConnection();
  uint64_t v45 = v0;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v41 = 1107296256;
  uint64_t v42 = thunk for @escaping @callee_guaranteed (@guaranteed OS_nw_protocol_options) -> ();
  uint64_t v43 = &block_descriptor_17_0;
  uint64_t v18 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  uint64_t quic_stream = nw_parameters_create_quic_stream();
  _Block_release(v18);
  _Block_release(v17);
  if (!quic_stream) {
    return 0;
  }
  (*(void (**)(void))(*(void *)v0 + 136))();
  outlined init with copy of PluginEndpoint((uint64_t)v16, (uint64_t)v13);
  outlined destroy of PluginClient.Configuration((uint64_t)v16, type metadata accessor for PluginClient.Configuration);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v21 = *v13;
    uint64_t v20 = v13[1];
    uint64_t v22 = v13[2];
    uint64_t v23 = v13[3];
    unint64_t v24 = v13[4];
    unint64_t v25 = self;
    if (v24 >> 60 == 15)
    {
      Class isa = (Class)MEMORY[0x1B3EA1B00](v21, v20);
      swift_bridgeObjectRelease();
      id v27 = objc_msgSend(v25, sel_augmentNetworkParametersForSession_participantID_parameters_, isa, v22, quic_stream);
    }
    else
    {
      outlined copy of Data._Representation(v23, v24);
      long long v31 = (void *)MEMORY[0x1B3EA1B00](v21, v20);
      swift_bridgeObjectRelease();
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      id v32 = objc_msgSend(v25, sel_augmentNetworkParametersForSessionAlias_participantIDAlias_salt_parameters_, v31, v22, isa, quic_stream);
      outlined consume of Data?(v23, v24);
    }
    swift_unknownObjectRetain();
    NWEndpoint.init(_:)();
    uint64_t v33 = v39;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v3, 1, v4) != 1)
    {
      id v34 = v37;
      (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v37, v3, v4);
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v38, v34, v4);
      type metadata accessor for NWParameters();
      swift_unknownObjectRetain();
      NWParameters.__allocating_init(_:)();
      type metadata accessor for NWConnection();
      swift_allocObject();
      uint64_t v30 = NWConnection.init(to:using:)();
      swift_unknownObjectRelease();
      outlined consume of Data?(v23, v24);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v4);
      return v30;
    }
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    outlined consume of Data?(v23, v24);
    outlined destroy of UUID?((uint64_t)v3, &demangling cache variable for type metadata for NWEndpoint?);
    return 0;
  }
  int64_t v29 = v38;
  uint64_t v28 = v39;
  (*(void (**)(char *, uint64_t *, uint64_t))(v39 + 32))(v38, v13, v4);
  (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v9, v29, v4);
  type metadata accessor for NWParameters();
  swift_unknownObjectRetain();
  NWParameters.__allocating_init(_:)();
  type metadata accessor for NWConnection();
  swift_allocObject();
  uint64_t v30 = NWConnection.init(to:using:)();
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v4);
  return v30;
}

uint64_t closure #2 in PluginClient.doCreateQuicConnection()(uint64_t a1, uint64_t a2)
{
  nw_quic_connection_set_initial_max_streams_bidirectional();
  nw_quic_connection_set_initial_max_streams_unidirectional();
  int v3 = nw_quic_connection_copy_sec_protocol_options();
  sec_protocol_options_add_tls_application_protocol(v3, "qrp-01");
  uint64_t v4 = swift_allocObject();
  swift_weakInit();
  v7[4] = partial apply for closure #1 in closure #2 in PluginClient.doCreateQuicConnection();
  v7[5] = v4;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1107296256;
  _OWORD v7[2] = thunk for @escaping @callee_guaranteed (@guaranteed OS_sec_protocol_metadata, @guaranteed OS_sec_trust, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ();
  v7[3] = &block_descriptor_23_0;
  uint64_t v5 = _Block_copy(v7);
  swift_release();
  sec_protocol_options_set_verify_block(v3, v5, *(dispatch_queue_t *)(a2 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_queue));
  _Block_release(v5);
  return swift_unknownObjectRelease();
}

void closure #1 in closure #2 in PluginClient.doCreateQuicConnection()(uint64_t a1, NSObject *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v7 = (int *)type metadata accessor for PluginClient.Configuration(0);
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v57 - v11;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v14 = Strong;
    uint64_t v15 = *(void (**)(void))(*(void *)Strong + 136);
    uint64_t v16 = *(void *)Strong + 136;
    v15();
    char v17 = v12[v7[7]];
    outlined destroy of PluginClient.Configuration((uint64_t)v12, type metadata accessor for PluginClient.Configuration);
    if (v17)
    {
      Swift::String v63 = a3;
      uint64_t v64 = a4;
      SecTrustRef v62 = sec_trust_copy_ref(a2);
      uint64_t v61 = MEMORY[0x1B3EA1B00](0x2065736E61707845, 0xEE006E6967756C50);
      v15();
      uint64_t v18 = &v12[v7[8]];
      uint64_t v19 = *(void *)v18;
      uint64_t v20 = *((void *)v18 + 1);
      swift_bridgeObjectRetain();
      outlined destroy of PluginClient.Configuration((uint64_t)v12, type metadata accessor for PluginClient.Configuration);
      uint64_t v21 = (void *)MEMORY[0x1B3EA1B00](v19, v20);
      uint64_t v22 = swift_bridgeObjectRelease();
      uint64_t v60 = v16;
      ((void (*)(uint64_t))v15)(v22);
      uint64_t v23 = v15;
      unint64_t v24 = &v10[v7[9]];
      uint64_t v25 = *(void *)v24;
      uint64_t v26 = *((void *)v24 + 1);
      swift_bridgeObjectRetain();
      outlined destroy of PluginClient.Configuration((uint64_t)v10, type metadata accessor for PluginClient.Configuration);
      id v27 = (void *)MEMORY[0x1B3EA1B00](v25, v26);
      swift_bridgeObjectRelease();
      uint64_t v28 = (void *)v61;
      AppleSSLPinned = (void *)SecPolicyCreateAppleSSLPinned();

      if (AppleSSLPinned)
      {
        uint64_t v30 = v62;
        SecTrustSetPolicies(v62, AppleSSLPinned);
        long long v31 = *(void **)(v14 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_queue);
        id v32 = (void *)swift_allocObject();
        uint64_t v33 = v63;
        uint64_t v34 = v64;
        v32[2] = v14;
        uint64_t v32[3] = v33;
        v32[4] = v34;
        aBlock[4] = (uint64_t)partial apply for closure #1 in closure #1 in closure #2 in PluginClient.doCreateQuicConnection();
        aBlock[5] = (uint64_t)v32;
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed SecTrustRef, @unowned Bool, @guaranteed CFErrorRef?) -> ();
        aBlock[3] = (uint64_t)&block_descriptor_32;
        uint64_t v35 = _Block_copy(aBlock);
        swift_retain();
        uint64_t v36 = v31;
        swift_retain();
        swift_release();
        SecTrustEvaluateAsyncWithError(v30, v36, v35);
        _Block_release(v35);
        swift_release();
      }
      else
      {
        if (one-time initialization token for log != -1) {
          swift_once();
        }
        uint64_t v41 = type metadata accessor for Logger();
        __swift_project_value_buffer(v41, (uint64_t)log);
        swift_retain();
        uint64_t v42 = Logger.logObject.getter();
        os_log_type_t v43 = static os_log_type_t.error.getter();
        int v44 = v43;
        if (os_log_type_enabled(v42, v43))
        {
          uint64_t v45 = swift_slowAlloc();
          uint64_t v46 = swift_slowAlloc();
          uint64_t v61 = v46;
          aBlock[0] = v46;
          *(_DWORD *)uint64_t v45 = 136315394;
          uint64_t v57 = v45 + 4;
          os_log_t v59 = v42;
          ((void (*)(uint64_t))v23)(v46);
          uint64_t v47 = (uint64_t *)&v12[v7[8]];
          int v58 = v44;
          uint64_t v48 = *v47;
          unint64_t v49 = v47[1];
          swift_bridgeObjectRetain();
          outlined destroy of PluginClient.Configuration((uint64_t)v12, type metadata accessor for PluginClient.Configuration);
          uint64_t v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v50 = swift_bridgeObjectRelease();
          *(_WORD *)(v45 + 12) = 2080;
          ((void (*)(uint64_t))v23)(v50);
          uint64_t v51 = (uint64_t *)&v12[v7[9]];
          uint64_t v52 = *v51;
          unint64_t v53 = v51[1];
          swift_bridgeObjectRetain();
          outlined destroy of PluginClient.Configuration((uint64_t)v12, type metadata accessor for PluginClient.Configuration);
          uint64_t v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_bridgeObjectRelease();
          os_log_t v54 = v59;
          _os_log_impl(&dword_1B0DF7000, v59, (os_log_type_t)v58, "Cannot create pinning policy, hostname=%s, leafMarkerOID=%s", (uint8_t *)v45, 0x16u);
          uint64_t v55 = v61;
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v55, -1, -1);
          MEMORY[0x1B3EA39E0](v45, -1, -1);
        }
        else
        {

          swift_release();
        }
        SecTrustRef v56 = v62;
        v63(0);
        swift_release();
      }
    }
    else
    {
      if (one-time initialization token for log != -1) {
        swift_once();
      }
      uint64_t v37 = type metadata accessor for Logger();
      __swift_project_value_buffer(v37, (uint64_t)log);
      long long v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v40 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v40 = 0;
        _os_log_impl(&dword_1B0DF7000, v38, v39, "Server cert validation disabled", v40, 2u);
        MEMORY[0x1B3EA39E0](v40, -1, -1);
      }

      a3(1);
      swift_release();
    }
  }
  else
  {
    ((void (*)(void))a3)();
  }
}

void closure #1 in closure #1 in closure #2 in PluginClient.doCreateQuicConnection()(uint64_t a1, char a2, void *a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  uint64_t v11 = type metadata accessor for PluginClient.Configuration(0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    uint64_t v14 = one-time initialization token for log;
    id v15 = a3;
    if (v14 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)log);
    id v17 = v15;
    swift_retain();
    id v18 = v17;
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    int v21 = v20;
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v45 = a5;
      uint64_t v23 = v22;
      uint64_t v42 = swift_slowAlloc();
      uint64_t v47 = v42;
      *(_DWORD *)uint64_t v23 = 136315650;
      uint64_t v39 = v23 + 4;
      unint64_t v24 = *(void (**)(void))(*(void *)a4 + 136);
      int v41 = v21;
      os_log_t v40 = v19;
      v24();
      uint64_t v25 = (uint64_t *)&v13[*(int *)(v11 + 32)];
      id v43 = v18;
      uint64_t v26 = *v25;
      unint64_t v27 = v25[1];
      swift_bridgeObjectRetain();
      uint64_t v44 = a6;
      outlined destroy of PluginClient.Configuration((uint64_t)v13, type metadata accessor for PluginClient.Configuration);
      uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v28 = swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2080;
      uint64_t v39 = v23 + 14;
      ((void (*)(uint64_t))v24)(v28);
      int64_t v29 = (uint64_t *)&v13[*(int *)(v11 + 36)];
      uint64_t v30 = *v29;
      unint64_t v31 = v29[1];
      swift_bridgeObjectRetain();
      outlined destroy of PluginClient.Configuration((uint64_t)v13, type metadata accessor for PluginClient.Configuration);
      uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      id v18 = v43;
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 22) = 2080;
      uint64_t v46 = (uint64_t)v18;
      type metadata accessor for CFErrorRef(0);
      id v32 = v18;
      uint64_t v33 = String.init<A>(reflecting:)();
      uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_t v35 = v40;
      _os_log_impl(&dword_1B0DF7000, v40, (os_log_type_t)v41, "Failed to validate trust, hostname=%s, leafMarkerOID=%s: %s", (uint8_t *)v23, 0x20u);
      uint64_t v36 = v42;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v36, -1, -1);
      uint64_t v37 = v23;
      a5 = v45;
      MEMORY[0x1B3EA39E0](v37, -1, -1);
    }
    else
    {

      swift_release();
    }
    a5(0);
  }
  else
  {
    a5(a2 & 1);
  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed SecTrustRef, @unowned Bool, @guaranteed CFErrorRef?) -> ()(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v7 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  swift_retain();
  id v9 = a2;
  id v8 = a4;
  v7(v9, a3, a4);
  swift_release();
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed OS_sec_protocol_metadata, @guaranteed OS_sec_trust, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, void *aBlock)
{
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(char), uint64_t))(a1 + 32);
  uint64_t v7 = _Block_copy(aBlock);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  swift_retain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v6(a2, a3, partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> (), v8);
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t PluginClient.createQuicConnection()()
{
  uint64_t v1 = type metadata accessor for PluginClient.Configuration(0);
  MEMORY[0x1F4188790](v1 - 8);
  int v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for PluginEndpoint();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)log);
  swift_retain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    uint64_t v17 = v11;
    (*(void (**)(void))(*(void *)v0 + 136))();
    outlined init with copy of PluginEndpoint((uint64_t)v3, (uint64_t)v6);
    outlined destroy of PluginClient.Configuration((uint64_t)v3, type metadata accessor for PluginClient.Configuration);
    uint64_t v12 = PluginEndpoint.description.getter();
    unint64_t v14 = v13;
    outlined destroy of PluginClient.Configuration((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for PluginEndpoint);
    uint64_t v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v8, v9, "Creating QUIC connection to %s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v11, -1, -1);
    MEMORY[0x1B3EA39E0](v10, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<NWConnection, PluginConnectError>);
  swift_allocObject();
  swift_retain();
  return Future.init(_:)();
}

uint64_t closure #1 in PluginClient.createQuicConnection()(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PluginClient.Configuration(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PluginEndpoint();
  MEMORY[0x1F4188790](v12 - 8);
  unint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (PluginClient.doCreateQuicConnection()())
  {
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v42 = a1;
    uint64_t v43 = a2;
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)log);
    swift_retain_n();
    swift_retain();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      uint64_t v45 = v41;
      *(_DWORD *)uint64_t v18 = 134218242;
      uint64_t v44 = NWConnection.identifier.getter();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v19 = swift_release();
      *(_WORD *)(v18 + 12) = 2080;
      (*(void (**)(uint64_t))(*(void *)a3 + 136))(v19);
      outlined init with copy of PluginEndpoint((uint64_t)v11, (uint64_t)v14);
      outlined destroy of PluginClient.Configuration((uint64_t)v11, type metadata accessor for PluginClient.Configuration);
      uint64_t v20 = PluginEndpoint.description.getter();
      unint64_t v22 = v21;
      outlined destroy of PluginClient.Configuration((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for PluginEndpoint);
      uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v16, v17, "QUIC connection C%llu created for endpoint: %s", (uint8_t *)v18, 0x16u);
      uint64_t v23 = v41;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v23, -1, -1);
      MEMORY[0x1B3EA39E0](v18, -1, -1);
    }
    else
    {

      swift_release_n();
      swift_release();
    }
    uint64_t v34 = swift_allocObject();
    swift_weakInit();
    os_log_t v35 = (void *)swift_allocObject();
    v35[2] = v34;
    void v35[3] = a3;
    uint64_t v36 = v43;
    v35[4] = v42;
    v35[5] = v36;
    swift_retain();
    swift_retain();
    swift_retain();
    outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?((uint64_t)partial apply for closure #1 in closure #1 in PluginClient.createQuicConnection());
    NWConnection.stateUpdateHandler.setter();
    swift_release();
    swift_release();
    if (*(void *)(a3 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_reporter))
    {
      uint64_t v37 = NWConnection.startDataTransferReport()();
      (*(void (**)(uint64_t))(*(void *)a3 + 216))(v37);
    }
    NWConnection.start(queue:)();
    return swift_release();
  }
  else
  {
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)log);
    swift_retain_n();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v43 = a2;
      uint64_t v28 = (uint8_t *)v27;
      uint64_t v29 = swift_slowAlloc();
      uint64_t v41 = v29;
      uint64_t v42 = a1;
      *(_DWORD *)uint64_t v28 = 136315138;
      uint64_t v45 = v29;
      os_log_t v40 = v28 + 4;
      (*(void (**)(uint64_t))(*(void *)a3 + 136))(v29);
      outlined init with copy of PluginEndpoint((uint64_t)v11, (uint64_t)v14);
      outlined destroy of PluginClient.Configuration((uint64_t)v11, type metadata accessor for PluginClient.Configuration);
      uint64_t v30 = PluginEndpoint.description.getter();
      unint64_t v32 = v31;
      outlined destroy of PluginClient.Configuration((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for PluginEndpoint);
      uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, &v45);
      a1 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v25, v26, "Failed to create NWConnection for QUIC connection to %s", v28, 0xCu);
      uint64_t v33 = v41;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v33, -1, -1);
      MEMORY[0x1B3EA39E0](v28, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    uint64_t v39 = type metadata accessor for NWError();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v8, 1, 3, v39);
    swift_storeEnumTagMultiPayload();
    a1(v8);
    return outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
  }
}

void closure #1 in closure #1 in PluginClient.createQuicConnection()(uint64_t a1, uint64_t a2, char *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v138 = a5;
  int v141 = a4;
  Swift::String v134 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v133 = (uint64_t)&v122 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  Swift::String v136 = (char *)&v122 - v10;
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v129 = (uint64_t)&v122 - v12;
  MEMORY[0x1F4188790](v11);
  os_log_t v130 = (os_log_t)((char *)&v122 - v13);
  uint64_t v14 = type metadata accessor for PluginClient.Configuration(0);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v128 = (uint64_t *)((char *)&v122 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = type metadata accessor for PluginEndpoint();
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)&v122 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for NWError();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v122 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x1F4188790](v21);
  os_log_type_t v26 = (char *)&v122 - v25;
  uint64_t v27 = MEMORY[0x1F4188790](v24);
  Swift::String v131 = (char *)&v122 - v28;
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  Swift::String v132 = (char *)&v122 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  Swift::String v137 = (void (*)(uint64_t *, char *, uint64_t))((char *)&v122 - v32);
  MEMORY[0x1F4188790](v31);
  Swift::String v135 = (char *)&v122 - v33;
  uint64_t v139 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
  MEMORY[0x1F4188790](v139);
  uint64_t v140 = (uint64_t *)((char *)&v122 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v35 = type metadata accessor for NWProtocolQUIC.Metadata.KeepAliveBehavior();
  uint64_t v126 = *(void *)(v35 - 8);
  uint64_t v127 = v35;
  MEMORY[0x1F4188790](v35);
  Swift::String v125 = (uint64_t *)((char *)&v122 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v37 = type metadata accessor for NWConnection.State();
  uint64_t v38 = *(void *)(v37 - 8);
  MEMORY[0x1F4188790](v37);
  os_log_t v40 = (char *)&v122 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v42 = Strong;
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v40, a1, v37);
    int v43 = (*(uint64_t (**)(char *, uint64_t))(v38 + 88))(v40, v37);
    if (v43 == *MEMORY[0x1E4F38A18])
    {
      uint64_t v127 = v42;
      (*(void (**)(char *, uint64_t))(v38 + 96))(v40, v37);
      uint64_t v44 = v20;
      Swift::String v134 = *(char **)(v20 + 32);
      ((void (*)(char *, char *, uint64_t))v134)(v26, v40, v19);
      if (one-time initialization token for log != -1) {
        swift_once();
      }
      uint64_t v45 = type metadata accessor for Logger();
      __swift_project_value_buffer(v45, (uint64_t)log);
      uint64_t v47 = (char *)(v20 + 16);
      uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
      v46(v23, v26, v19);
      swift_retain();
      uint64_t v48 = Logger.logObject.getter();
      int v49 = static os_log_type_t.default.getter();
      BOOL v50 = os_log_type_enabled(v48, (os_log_type_t)v49);
      Swift::String v137 = (void (*)(uint64_t *, char *, uint64_t))v46;
      if (v50)
      {
        LODWORD(v129) = v49;
        os_log_t v130 = v48;
        uint64_t v51 = swift_slowAlloc();
        Swift::String v135 = v47;
        uint64_t v52 = v51;
        uint64_t v128 = (uint64_t *)swift_slowAlloc();
        uint64_t v143 = (uint64_t)v128;
        *(_DWORD *)uint64_t v52 = 134218242;
        uint64_t v142 = NWConnection.identifier.getter();
        Swift::String v125 = &v143;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        *(_WORD *)(v52 + 12) = 2080;
        uint64_t v53 = (uint64_t)v136;
        v46(v136, v23, v19);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v44 + 56))(v53, 0, 1, v19);
        uint64_t v54 = v133;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v53, v133, &demangling cache variable for type metadata for NWError?);
        uint64_t v126 = v44;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v54, 1, v19) == 1)
        {
          uint64_t v55 = 7104878;
          unint64_t v56 = 0xE300000000000000;
          uint64_t v44 = v126;
        }
        else
        {
          Swift::String v91 = v132;
          ((void (*)(char *, uint64_t, uint64_t))v134)(v132, v54, v19);
          v46(v131, v91, v19);
          uint64_t v55 = String.init<A>(reflecting:)();
          unint64_t v56 = v92;
          uint64_t v44 = v126;
          (*(void (**)(char *, uint64_t))(v126 + 8))(v91, v19);
        }
        outlined destroy of UUID?((uint64_t)v136, &demangling cache variable for type metadata for NWError?);
        uint64_t v142 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, &v143);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        Swift::String v85 = *(void (**)(char *, uint64_t))(v44 + 8);
        v85(v23, v19);
        os_log_t v93 = v130;
        _os_log_impl(&dword_1B0DF7000, v130, (os_log_type_t)v129, "QUIC connection (C%llu)  in waiting state, error: %s", (uint8_t *)v52, 0x16u);
        uint64_t v94 = v128;
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v94, -1, -1);
        MEMORY[0x1B3EA39E0](v52, -1, -1);
      }
      else
      {
        swift_release();
        Swift::String v85 = *(void (**)(char *, uint64_t))(v44 + 8);
        v85(v23, v19);
      }
      uint64_t v95 = (uint64_t)v140;
      v137(v140, v26, v19);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v44 + 56))(v95, 0, 3, v19);
      swift_storeEnumTagMultiPayload();
      v141(v95);
      outlined destroy of UUID?(v95, &demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
      NWConnection.cancel()();
      swift_release();
      v85(v26, v19);
      return;
    }
    if (v43 == *MEMORY[0x1E4F38A08])
    {
      (*(void (**)(char *, uint64_t))(v38 + 96))(v40, v37);
      uint64_t v61 = v20;
      SecTrustRef v62 = v135;
      Swift::String v125 = *(uint64_t **)(v20 + 32);
      ((void (*)(char *, char *, uint64_t))v125)(v135, v40, v19);
      if (one-time initialization token for log != -1) {
        swift_once();
      }
      uint64_t v63 = type metadata accessor for Logger();
      __swift_project_value_buffer(v63, (uint64_t)log);
      uint64_t v64 = v20 + 16;
      Swift::String v65 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
      v65((char *)v137, v62, v19);
      uint64_t v66 = v134;
      swift_retain_n();
      swift_retain();
      uint64_t v67 = Logger.logObject.getter();
      LODWORD(v133) = static os_log_type_t.error.getter();
      BOOL v68 = os_log_type_enabled(v67, (os_log_type_t)v133);
      Swift::String v136 = (char *)v64;
      if (v68)
      {
        os_log_t v124 = v67;
        uint64_t v69 = swift_slowAlloc();
        uint64_t v126 = v61;
        uint64_t v70 = v69;
        uint64_t v123 = swift_slowAlloc();
        uint64_t v143 = v123;
        *(_DWORD *)uint64_t v70 = 134218498;
        uint64_t v142 = NWConnection.identifier.getter();
        char v122 = v65;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v127 = v42;
        uint64_t v71 = swift_release();
        *(_WORD *)(v70 + 12) = 2080;
        uint64_t v72 = (uint64_t)v128;
        (*(void (**)(uint64_t))(*(void *)v66 + 136))(v71);
        outlined init with copy of PluginEndpoint(v72, (uint64_t)v18);
        outlined destroy of PluginClient.Configuration(v72, type metadata accessor for PluginClient.Configuration);
        uint64_t v73 = PluginEndpoint.description.getter();
        unint64_t v75 = v74;
        outlined destroy of PluginClient.Configuration((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for PluginEndpoint);
        uint64_t v142 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v75, &v143);
        uint64_t v128 = &v143;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v70 + 22) = 2080;
        os_log_t v76 = v130;
        Swift::String v77 = (char *)v137;
        uint64_t v78 = (void (*)(uint64_t *, char *, uint64_t))v122;
        v122((char *)v130, (char *)v137, v19);
        uint64_t v79 = v126;
        (*(void (**)(os_log_t, void, uint64_t, uint64_t))(v126 + 56))(v76, 0, 1, v19);
        uint64_t v80 = v129;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v76, v129, &demangling cache variable for type metadata for NWError?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48))(v80, 1, v19) == 1)
        {
          Swift::String v81 = v78;
          uint64_t v82 = 7104878;
          unint64_t v83 = 0xE300000000000000;
          uint64_t v84 = v126;
        }
        else
        {
          uint64_t v98 = v132;
          ((void (*)(char *, uint64_t, uint64_t))v125)(v132, v80, v19);
          Swift::String v81 = v78;
          v78((uint64_t *)v131, v98, v19);
          uint64_t v82 = String.init<A>(reflecting:)();
          unint64_t v83 = v99;
          uint64_t v84 = v126;
          (*(void (**)(char *, uint64_t))(v126 + 8))(v98, v19);
        }
        outlined destroy of UUID?((uint64_t)v76, &demangling cache variable for type metadata for NWError?);
        uint64_t v142 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v82, v83, &v143);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        Swift::String v96 = *(void (**)(char *, uint64_t))(v84 + 8);
        v96(v77, v19);
        uint64_t v100 = v84;
        os_log_t v101 = v124;
        _os_log_impl(&dword_1B0DF7000, v124, (os_log_type_t)v133, "QUIC connection to (C%llu) %s failed, error: %s", (uint8_t *)v70, 0x20u);
        uint64_t v102 = v123;
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v102, -1, -1);
        MEMORY[0x1B3EA39E0](v70, -1, -1);

        uint64_t v61 = v100;
        SecTrustRef v62 = v135;
      }
      else
      {
        Swift::String v81 = (void (*)(uint64_t *, char *, uint64_t))v65;
        swift_release_n();
        swift_release();
        Swift::String v96 = *(void (**)(char *, uint64_t))(v61 + 8);
        v96((char *)v137, v19);
      }
      uint64_t v103 = (uint64_t)v140;
      v81(v140, v62, v19);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v61 + 56))(v103, 0, 3, v19);
      swift_storeEnumTagMultiPayload();
      v141(v103);
      outlined destroy of UUID?(v103, &demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
      NWConnection.cancel()();
      swift_release();
      v96(v62, v19);
      return;
    }
    if (v43 == *MEMORY[0x1E4F38A00])
    {
      if (one-time initialization token for log != -1) {
        swift_once();
      }
      uint64_t v86 = type metadata accessor for Logger();
      __swift_project_value_buffer(v86, (uint64_t)log);
      swift_retain();
      uint64_t v87 = Logger.logObject.getter();
      os_log_type_t v88 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v87, v88))
      {
        Swift::String v89 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)Swift::String v89 = 134217984;
        uint64_t v143 = NWConnection.identifier.getter();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        Swift::String_optional v90 = "QUIC connection (C%llu) in setup state";
LABEL_47:
        _os_log_impl(&dword_1B0DF7000, v87, v88, v90, v89, 0xCu);
        MEMORY[0x1B3EA39E0](v89, -1, -1);
        swift_release();

        return;
      }
      goto LABEL_48;
    }
    if (v43 == *MEMORY[0x1E4F38A38])
    {
      if (one-time initialization token for log != -1) {
        swift_once();
      }
      uint64_t v97 = type metadata accessor for Logger();
      __swift_project_value_buffer(v97, (uint64_t)log);
      swift_retain();
      uint64_t v87 = Logger.logObject.getter();
      os_log_type_t v88 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v87, v88))
      {
        Swift::String v89 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)Swift::String v89 = 134217984;
        uint64_t v143 = NWConnection.identifier.getter();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        Swift::String_optional v90 = "QUIC connection (C%llu) in preparing state";
        goto LABEL_47;
      }
LABEL_48:

      swift_release_n();
      return;
    }
    if (v43 == *MEMORY[0x1E4F389E8])
    {
      if (one-time initialization token for log != -1) {
        swift_once();
      }
      uint64_t v104 = type metadata accessor for Logger();
      __swift_project_value_buffer(v104, (uint64_t)log);
      swift_retain();
      uint64_t v105 = Logger.logObject.getter();
      os_log_type_t v106 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v105, v106))
      {
        unint64_t v107 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)unint64_t v107 = 134217984;
        uint64_t v143 = NWConnection.identifier.getter();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl(&dword_1B0DF7000, v105, v106, "QUIC connection (C%llu) in ready state", v107, 0xCu);
        MEMORY[0x1B3EA39E0](v107, -1, -1);
      }
      else
      {

        swift_release();
      }
      uint64_t v109 = *(void *)&v134[OBJC_IVAR____TtC14CopresenceCore12PluginClient_reporter];
      if (v109)
      {
        uint64_t v111 = *(void *)&v134[OBJC_IVAR____TtC14CopresenceCore12PluginClient_reporterTag];
        uint64_t v110 = *(void *)&v134[OBJC_IVAR____TtC14CopresenceCore12PluginClient_reporterTag + 8];
        Swift::String v112 = *(void **)(v109 + 16);
        char v113 = (void *)swift_allocObject();
        v113[2] = v109;
        v113[3] = v111;
        v113[4] = v110;
        swift_retain_n();
        swift_bridgeObjectRetain();
        id v114 = v112;
        NWConnection.requestEstablishmentReport(queue:completion:)();
        swift_release();

        swift_release();
      }
      type metadata accessor for NWProtocolQUIC();
      static NWProtocolQUIC.definition.getter();
      uint64_t v115 = NWConnection.metadata(definition:)();
      swift_release();
      if (v115)
      {
        type metadata accessor for NWProtocolQUIC.Metadata();
        if (swift_dynamicCastClass())
        {
          uint64_t v116 = v125;
          *Swift::String v125 = 10;
          (*(void (**)(uint64_t *, void, uint64_t))(v126 + 104))(v116, *MEMORY[0x1E4F38A78], v127);
          swift_retain();
          dispatch thunk of NWProtocolQUIC.Metadata.keepAlive.setter();
        }
        swift_release();
      }
      uint64_t v121 = (uint64_t)v140;
      *uint64_t v140 = v42;
      swift_storeEnumTagMultiPayload();
      swift_retain();
      v141(v121);
      swift_release();
      swift_release();
      outlined destroy of UUID?(v121, &demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
    }
    else
    {
      if (v43 == *MEMORY[0x1E4F38A30])
      {
        if (one-time initialization token for log != -1) {
          swift_once();
        }
        uint64_t v108 = type metadata accessor for Logger();
        __swift_project_value_buffer(v108, (uint64_t)log);
        swift_retain();
        uint64_t v87 = Logger.logObject.getter();
        os_log_type_t v88 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v87, v88))
        {
          Swift::String v89 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)Swift::String v89 = 134217984;
          uint64_t v143 = NWConnection.identifier.getter();
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          Swift::String_optional v90 = "QUIC connection (C%llu) in cancelled state";
          goto LABEL_47;
        }
        goto LABEL_48;
      }
      if (one-time initialization token for log != -1) {
        swift_once();
      }
      uint64_t v117 = type metadata accessor for Logger();
      __swift_project_value_buffer(v117, (uint64_t)log);
      swift_retain();
      Swift::String v118 = Logger.logObject.getter();
      os_log_type_t v119 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v118, v119))
      {
        Swift::String v120 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)Swift::String v120 = 134217984;
        uint64_t v143 = NWConnection.identifier.getter();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl(&dword_1B0DF7000, v118, v119, "QUIC connection (C%llu) in unknown state", v120, 0xCu);
        MEMORY[0x1B3EA39E0](v120, -1, -1);
        swift_release();
      }
      else
      {

        swift_release_n();
      }
      (*(void (**)(char *, uint64_t))(v38 + 8))(v40, v37);
    }
  }
  else
  {
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v57 = type metadata accessor for Logger();
    __swift_project_value_buffer(v57, (uint64_t)log);
    int v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v60 = 0;
      _os_log_impl(&dword_1B0DF7000, v58, v59, "QUIC connection deallocated when getting state update callback", v60, 2u);
      MEMORY[0x1B3EA39E0](v60, -1, -1);
    }
  }
}

uint64_t closure #1 in closure #1 in closure #1 in PluginClient.createQuicConnection()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NWConnection.EstablishmentReport?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for NWConnection.EstablishmentReport();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for NWConnection.EstablishmentReport?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1) {
    return outlined destroy of UUID?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for NWConnection.EstablishmentReport?);
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)a2 + 168))(v14, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t PluginClient.createQuicStream(quicConnection:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for PluginClient.Configuration(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for PluginEndpoint();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)log);
  swift_retain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v23 = a1;
    uint64_t v14 = (uint8_t *)v13;
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315138;
    uint64_t v25 = v15;
    (*(void (**)(void))(*(void *)v1 + 136))();
    outlined init with copy of PluginEndpoint((uint64_t)v6, (uint64_t)v9);
    outlined destroy of PluginClient.Configuration((uint64_t)v6, type metadata accessor for PluginClient.Configuration);
    uint64_t v16 = PluginEndpoint.description.getter();
    unint64_t v18 = v17;
    outlined destroy of PluginClient.Configuration((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for PluginEndpoint);
    uint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v11, v12, "Creating QUIC stream to %s", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v15, -1, -1);
    uint64_t v19 = v14;
    a1 = v23;
    MEMORY[0x1B3EA39E0](v19, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a1;
  *(void *)(v20 + 24) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<NWConnection, PluginConnectError>);
  swift_allocObject();
  swift_retain();
  swift_retain();
  return Future.init(_:)();
}

uint64_t closure #1 in PluginClient.createQuicStream(quicConnection:)(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v38 = a4;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
  MEMORY[0x1F4188790](v37);
  uint64_t v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for PluginClient.Configuration(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for PluginEndpoint();
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  NWConnection.parameters.getter();
  if (one-time initialization token for definition != -1) {
    swift_once();
  }
  type metadata accessor for NWProtocolFramer.Options();
  swift_allocObject();
  swift_retain();
  uint64_t v14 = NWProtocolFramer.Options.init(definition:)();
  NWParameters.defaultProtocolStack.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B1138AA0;
  *(void *)(v15 + 32) = v14;
  uint64_t v40 = v15;
  specialized Array._endMutation()();
  swift_retain();
  dispatch thunk of NWParameters.ProtocolStack.applicationProtocols.setter();
  swift_release();
  type metadata accessor for NWConnection();
  swift_retain();
  swift_retain();
  if (NWConnection.__allocating_init(connection:parameters:)())
  {
    uint64_t v16 = swift_allocObject();
    swift_weakInit();
    unint64_t v17 = (void *)swift_allocObject();
    _OWORD v17[2] = v16;
    void v17[3] = a1;
    uint64_t v17[4] = a2;
    swift_retain();
    swift_retain();
    outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?((uint64_t)partial apply for closure #1 in closure #1 in PluginClient.createQuicStream(quicConnection:));
    NWConnection.stateUpdateHandler.setter();
    swift_release();
    swift_release();
    NWConnection.start(queue:)();
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    uint64_t v36 = a1;
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)log);
    uint64_t v20 = v38;
    swift_retain_n();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v35 = a2;
      uint64_t v24 = (uint8_t *)v23;
      uint64_t v25 = swift_slowAlloc();
      uint64_t v34 = v25;
      *(_DWORD *)uint64_t v24 = 136315138;
      uint64_t v40 = v25;
      v32[1] = v24 + 4;
      uint64_t v33 = v24;
      (*(void (**)(void))(*(void *)v20 + 136))();
      outlined init with copy of PluginEndpoint((uint64_t)v10, (uint64_t)v13);
      outlined destroy of PluginClient.Configuration((uint64_t)v10, type metadata accessor for PluginClient.Configuration);
      uint64_t v26 = PluginEndpoint.description.getter();
      unint64_t v28 = v27;
      outlined destroy of PluginClient.Configuration((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for PluginEndpoint);
      uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      uint64_t v29 = v33;
      _os_log_impl(&dword_1B0DF7000, v21, v22, "Failed to create NWConnection for QUIC stream to %s", v33, 0xCu);
      uint64_t v30 = v34;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v30, -1, -1);
      MEMORY[0x1B3EA39E0](v29, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    uint64_t v31 = type metadata accessor for NWError();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v7, 2, 3, v31);
    swift_storeEnumTagMultiPayload();
    v36(v7);
    swift_release();
    swift_release();
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
  }
}

void closure #1 in closure #1 in PluginClient.createQuicStream(quicConnection:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v111 = a4;
  Swift::String v112 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v105 = (uint64_t **)((char *)&v97 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v97 - v9;
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v102 = (uint64_t **)((char *)&v97 - v12);
  MEMORY[0x1F4188790](v11);
  os_log_type_t v106 = (char *)&v97 - v13;
  uint64_t v14 = type metadata accessor for NWError();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  unint64_t v18 = (char *)&v97 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v97 - v20;
  uint64_t v22 = MEMORY[0x1F4188790](v19);
  uint64_t v103 = (char *)&v97 - v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v104 = (char *)&v97 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  unint64_t v107 = (char *)&v97 - v27;
  MEMORY[0x1F4188790](v26);
  uint64_t v108 = (void (*)(uint64_t *, char *, uint64_t))((char *)&v97 - v28);
  uint64_t v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
  MEMORY[0x1F4188790](v109);
  uint64_t v110 = (uint64_t *)((char *)&v97 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v30 = type metadata accessor for NWConnection.State();
  uint64_t v31 = *(void *)(v30 - 8);
  MEMORY[0x1F4188790](v30);
  uint64_t v33 = (char *)&v97 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return;
  }
  uint64_t v35 = Strong;
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v33, a1, v30);
  int v36 = (*(uint64_t (**)(char *, uint64_t))(v31 + 88))(v33, v30);
  if (v36 == *MEMORY[0x1E4F38A18])
  {
    os_log_type_t v106 = v10;
    (*(void (**)(char *, uint64_t))(v31 + 96))(v33, v30);
    uint64_t v37 = v15;
    uint64_t v102 = *(uint64_t ***)(v15 + 32);
    ((void (*)(char *, char *, uint64_t))v102)(v21, v33, v14);
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)log);
    uint64_t v40 = (void (*)(char *, char *, uint64_t))(v15 + 16);
    uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
    unint64_t v107 = v21;
    v39(v18, v21, v14);
    swift_retain();
    uint64_t v41 = Logger.logObject.getter();
    int v42 = static os_log_type_t.default.getter();
    BOOL v43 = os_log_type_enabled(v41, (os_log_type_t)v42);
    uint64_t v108 = (void (*)(uint64_t *, char *, uint64_t))v39;
    if (v43)
    {
      LODWORD(v99) = v42;
      uint64_t v44 = v37;
      uint64_t v45 = swift_slowAlloc();
      uint64_t v98 = swift_slowAlloc();
      uint64_t v114 = v98;
      *(_DWORD *)uint64_t v45 = 134218242;
      uint64_t v113 = NWConnection.identifier.getter();
      uint64_t v97 = &v114;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v101 = v35;
      swift_release();
      *(_WORD *)(v45 + 12) = 2080;
      uint64_t v46 = (uint64_t)v106;
      v39(v106, v18, v14);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v44 + 56))(v46, 0, 1, v14);
      uint64_t v47 = (void (*)(void, void, void))v105;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v46, (uint64_t)v105, &demangling cache variable for type metadata for NWError?);
      int v48 = (*(uint64_t (**)(void, uint64_t, uint64_t))(v44 + 48))(v47, 1, v14);
      uint64_t v100 = v40;
      if (v48 == 1)
      {
        uint64_t v49 = 7104878;
        unint64_t v50 = 0xE300000000000000;
      }
      else
      {
        uint64_t v71 = v104;
        ((void (*)(char *, void, uint64_t))v102)(v104, v47, v14);
        v39(v103, v71, v14);
        uint64_t v49 = String.init<A>(reflecting:)();
        unint64_t v50 = v72;
        (*(void (**)(char *, uint64_t))(v44 + 8))(v71, v14);
      }
      outlined destroy of UUID?((uint64_t)v106, &demangling cache variable for type metadata for NWError?);
      uint64_t v113 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, &v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      Swift::String v65 = *(void (**)(char *, uint64_t))(v44 + 8);
      v65(v18, v14);
      _os_log_impl(&dword_1B0DF7000, v41, (os_log_type_t)v99, "QUIC stream (C%llu) in waiting state, error: %s", (uint8_t *)v45, 0x16u);
      uint64_t v73 = v98;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v73, -1, -1);
      MEMORY[0x1B3EA39E0](v45, -1, -1);
    }
    else
    {
      swift_release();
      Swift::String v65 = *(void (**)(char *, uint64_t))(v37 + 8);
      v65(v18, v14);

      uint64_t v44 = v37;
    }
    unint64_t v74 = v107;
    uint64_t v75 = (uint64_t)v110;
    v108(v110, v107, v14);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v44 + 56))(v75, 0, 3, v14);
    swift_storeEnumTagMultiPayload();
    v112(v75);
    outlined destroy of UUID?(v75, &demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
    NWConnection.cancel()();
    swift_release();
    v65(v74, v14);
    return;
  }
  if (v36 == *MEMORY[0x1E4F38A08])
  {
    (*(void (**)(char *, uint64_t))(v31 + 96))(v33, v30);
    uint64_t v51 = (char *)v108;
    uint64_t v100 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v100((char *)v108, v33, v14);
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v52 = type metadata accessor for Logger();
    __swift_project_value_buffer(v52, (uint64_t)log);
    uint64_t v53 = v15;
    uint64_t v54 = *(uint64_t ***)(v15 + 16);
    uint64_t v55 = v107;
    ((void (*)(char *, char *, uint64_t))v54)(v107, v51, v14);
    swift_retain();
    unint64_t v56 = Logger.logObject.getter();
    int v57 = static os_log_type_t.error.getter();
    BOOL v58 = os_log_type_enabled(v56, (os_log_type_t)v57);
    uint64_t v105 = v54;
    if (v58)
    {
      LODWORD(v98) = v57;
      os_log_t v99 = v56;
      uint64_t v59 = swift_slowAlloc();
      uint64_t v97 = (uint64_t *)swift_slowAlloc();
      uint64_t v114 = (uint64_t)v97;
      *(_DWORD *)uint64_t v59 = 134218242;
      uint64_t v113 = NWConnection.identifier.getter();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v101 = v35;
      swift_release();
      *(_WORD *)(v59 + 12) = 2080;
      uint64_t v60 = (uint64_t)v106;
      ((void (*)(char *, char *, uint64_t))v54)(v106, v55, v14);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v53 + 56))(v60, 0, 1, v14);
      uint64_t v61 = v60;
      SecTrustRef v62 = (char *)v102;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v61, (uint64_t)v102, &demangling cache variable for type metadata for NWError?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v62, 1, v14) == 1)
      {
        uint64_t v63 = 7104878;
        unint64_t v64 = 0xE300000000000000;
      }
      else
      {
        uint64_t v78 = v104;
        v100(v104, v62, v14);
        ((void (*)(char *, char *, uint64_t))v54)(v103, v78, v14);
        uint64_t v63 = String.init<A>(reflecting:)();
        unint64_t v64 = v79;
        (*(void (**)(char *, uint64_t))(v53 + 8))(v78, v14);
      }
      outlined destroy of UUID?((uint64_t)v106, &demangling cache variable for type metadata for NWError?);
      uint64_t v113 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v64, &v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      os_log_t v76 = *(void (**)(char *, uint64_t))(v53 + 8);
      v76(v107, v14);
      os_log_t v80 = v99;
      _os_log_impl(&dword_1B0DF7000, v99, (os_log_type_t)v98, "QUIC stream (C%llu) failed, error: %s", (uint8_t *)v59, 0x16u);
      Swift::String v81 = v97;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v81, -1, -1);
      MEMORY[0x1B3EA39E0](v59, -1, -1);

      uint64_t v51 = (char *)v108;
    }
    else
    {
      swift_release();
      os_log_t v76 = *(void (**)(char *, uint64_t))(v53 + 8);
      v76(v55, v14);
    }
    uint64_t v82 = (uint64_t)v110;
    ((void (*)(uint64_t *, char *, uint64_t))v105)(v110, v51, v14);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v53 + 56))(v82, 0, 3, v14);
    swift_storeEnumTagMultiPayload();
    v112(v82);
    outlined destroy of UUID?(v82, &demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
    NWConnection.cancel()();
    swift_release();
    v76(v51, v14);
    return;
  }
  if (v36 == *MEMORY[0x1E4F38A00])
  {
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v66 = type metadata accessor for Logger();
    __swift_project_value_buffer(v66, (uint64_t)log);
    swift_retain();
    uint64_t v67 = Logger.logObject.getter();
    os_log_type_t v68 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v67, v68))
    {
      uint64_t v69 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v69 = 134217984;
      uint64_t v114 = NWConnection.identifier.getter();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      uint64_t v70 = "QUIC stream (C%llu) in setup state";
LABEL_42:
      _os_log_impl(&dword_1B0DF7000, v67, v68, v70, v69, 0xCu);
      MEMORY[0x1B3EA39E0](v69, -1, -1);
      swift_release();

      return;
    }
    goto LABEL_43;
  }
  if (v36 == *MEMORY[0x1E4F38A38])
  {
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v77 = type metadata accessor for Logger();
    __swift_project_value_buffer(v77, (uint64_t)log);
    swift_retain();
    uint64_t v67 = Logger.logObject.getter();
    os_log_type_t v68 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v67, v68))
    {
      uint64_t v69 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v69 = 134217984;
      uint64_t v114 = NWConnection.identifier.getter();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      uint64_t v70 = "QUIC stream (C%llu) in preparing state";
      goto LABEL_42;
    }
LABEL_43:

    swift_release_n();
    return;
  }
  if (v36 == *MEMORY[0x1E4F389E8])
  {
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v83 = type metadata accessor for Logger();
    __swift_project_value_buffer(v83, (uint64_t)log);
    swift_retain();
    uint64_t v84 = Logger.logObject.getter();
    os_log_type_t v85 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v84, v85))
    {
      uint64_t v86 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v86 = 134217984;
      uint64_t v114 = NWConnection.identifier.getter();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl(&dword_1B0DF7000, v84, v85, "QUIC stream (C%llu) in ready state", v86, 0xCu);
      MEMORY[0x1B3EA39E0](v86, -1, -1);
    }
    else
    {

      swift_release();
    }
    type metadata accessor for NWProtocolQUIC();
    static NWProtocolQUIC.definition.getter();
    uint64_t v88 = NWConnection.metadata(definition:)();
    swift_release();
    if (v88)
    {
      type metadata accessor for NWProtocolQUIC.Metadata();
      if (swift_dynamicCastClass())
      {
        swift_retain();
        Swift::String v89 = Logger.logObject.getter();
        os_log_type_t v90 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v89, v90))
        {
          Swift::String v91 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)Swift::String v91 = 134217984;
          uint64_t v114 = dispatch thunk of NWProtocolQUIC.Metadata.streamIdentifier.getter();
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          _os_log_impl(&dword_1B0DF7000, v89, v90, "QUIC stream identifier is %llu", v91, 0xCu);
          MEMORY[0x1B3EA39E0](v91, -1, -1);
          swift_release();
        }
        else
        {

          swift_release_n();
        }
      }
      else
      {
        swift_release();
      }
    }
    uint64_t v96 = (uint64_t)v110;
    *uint64_t v110 = v35;
    swift_storeEnumTagMultiPayload();
    swift_retain();
    v112(v96);
    swift_release();
    outlined destroy of UUID?(v96, &demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
  }
  else
  {
    if (v36 == *MEMORY[0x1E4F38A30])
    {
      if (one-time initialization token for log != -1) {
        swift_once();
      }
      uint64_t v87 = type metadata accessor for Logger();
      __swift_project_value_buffer(v87, (uint64_t)log);
      swift_retain();
      uint64_t v67 = Logger.logObject.getter();
      os_log_type_t v68 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v67, v68))
      {
        uint64_t v69 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v69 = 134217984;
        uint64_t v114 = NWConnection.identifier.getter();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        uint64_t v70 = "QUIC stream (C%llu) in cancelled state";
        goto LABEL_42;
      }
      goto LABEL_43;
    }
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v92 = type metadata accessor for Logger();
    __swift_project_value_buffer(v92, (uint64_t)log);
    swift_retain();
    os_log_t v93 = Logger.logObject.getter();
    os_log_type_t v94 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v93, v94))
    {
      uint64_t v95 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v95 = 134217984;
      uint64_t v114 = NWConnection.identifier.getter();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl(&dword_1B0DF7000, v93, v94, "QUIC stream (C%llu) in unknown state", v95, 0xCu);
      MEMORY[0x1B3EA39E0](v95, -1, -1);
      swift_release();
    }
    else
    {

      swift_release_n();
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v30);
  }
}

uint64_t partial apply for closure #1 in PluginClient.createQuicConnection()(void (*a1)(void), uint64_t a2)
{
  return closure #1 in PluginClient.createQuicConnection()(a1, a2, v2);
}

uint64_t outlined destroy of PluginClient.Configuration(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1B0FAF4F4()
{
  swift_release();
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in PluginClient.createQuicStream(quicConnection:)(void (*a1)(char *), uint64_t a2)
{
  return closure #1 in PluginClient.createQuicStream(quicConnection:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t *initializeBufferWithCopyOfBuffer for PluginConnectError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = type metadata accessor for NWError();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 3, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 3, v7);
    }
  }
  return a1;
}

uint64_t destroy for PluginConnectError(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NWError();
  uint64_t v5 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 3, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v2);
  }
  return result;
}

void *initializeWithCopy for PluginConnectError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NWError();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 3, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
  }
  return a1;
}

void *assignWithCopy for PluginConnectError(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NWError();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 3, v6);
  int v10 = v8(a2, 3, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
  return a1;
}

void *initializeWithTake for PluginConnectError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NWError();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 3, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
  }
  return a1;
}

void *assignWithTake for PluginConnectError(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NWError();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 3, v6);
  int v10 = v8(a2, 3, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for PluginConnectError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0FAFC74);
}

uint64_t sub_1B0FAFC74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NWError();
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 4) {
    return v5 - 3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PluginConnectError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0FAFCF4);
}

uint64_t sub_1B0FAFCF4(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 3);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = type metadata accessor for NWError();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(a1, v5, a3, v6);
}

uint64_t getEnumTag for PluginConnectError(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NWError();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);
  return v3(a1, 3, v2);
}

uint64_t destructiveInjectEnumTag for PluginConnectError(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NWError();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, 3, v4);
}

uint64_t type metadata accessor for PluginConnectError()
{
  uint64_t result = type metadata singleton initialization cache for PluginConnectError;
  if (!type metadata singleton initialization cache for PluginConnectError) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for PluginConnectError()
{
  uint64_t result = type metadata accessor for NWError();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t sub_1B0FAFF14()
{
  return objectdestroy_6Tm(MEMORY[0x1E4FBC8D0]);
}

void partial apply for closure #1 in closure #1 in PluginClient.createQuicStream(quicConnection:)(uint64_t a1)
{
  closure #1 in closure #1 in PluginClient.createQuicStream(quicConnection:)(a1, *(void *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1B0FAFF38()
{
  swift_release();
  swift_release();
  swift_release();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

void partial apply for closure #1 in closure #1 in PluginClient.createQuicConnection()(uint64_t a1)
{
  closure #1 in closure #1 in PluginClient.createQuicConnection()(a1, *(void *)(v1 + 16), *(char **)(v1 + 24), *(void (**)(uint64_t))(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1B0FAFF8C()
{
  return objectdestroy_6Tm(MEMORY[0x1E4FBC898]);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in PluginClient.createQuicConnection()(uint64_t a1)
{
  return closure #1 in closure #1 in closure #1 in PluginClient.createQuicConnection()(a1, v1[2], v1[3], v1[4]);
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

uint64_t partial apply for closure #2 in PluginClient.doCreateQuicConnection()(uint64_t a1)
{
  return closure #2 in PluginClient.doCreateQuicConnection()(a1, v1);
}

uint64_t sub_1B0FAFFC0()
{
  swift_weakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void partial apply for closure #1 in closure #2 in PluginClient.doCreateQuicConnection()(uint64_t a1, NSObject *a2, void (*a3)(void), uint64_t a4)
{
}

uint64_t sub_1B0FB0000()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()(char a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(v1 + 16) + 16))(*(void *)(v1 + 16), a1 & 1);
}

uint64_t sub_1B0FB0050()
{
  return objectdestroy_6Tm(MEMORY[0x1E4FBC8D0]);
}

uint64_t objectdestroy_6Tm(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 32));
  return MEMORY[0x1F4186498](v1, 40, 7);
}

void partial apply for closure #1 in closure #1 in closure #2 in PluginClient.doCreateQuicConnection()(uint64_t a1, char a2, void *a3)
{
  closure #1 in closure #1 in closure #2 in PluginClient.doCreateQuicConnection()(a1, a2, a3, *(void *)(v3 + 16), *(void (**)(void))(v3 + 24), *(void *)(v3 + 32));
}

id CPApplicationMonitor.appPolicyManager.getter()
{
  return *(id *)(v0 + OBJC_IVAR___CPApplicationMonitor_appPolicyManager);
}

uint64_t CPApplicationMonitor.applicationController.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of UserNotificationCenter(v1 + OBJC_IVAR___CPApplicationMonitor_applicationController, a1);
}

uint64_t key path setter for CPApplicationMonitor.appVisibilityMonitor : CPApplicationMonitor(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = (void *)(*a2 + OBJC_IVAR___CPApplicationMonitor_appVisibilityMonitor);
  swift_beginAccess();
  void *v4 = v2;
  v4[1] = v3;
  swift_unknownObjectRetain();
  return swift_unknownObjectRelease();
}

uint64_t CPApplicationMonitor.appVisibilityMonitor.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t CPApplicationMonitor.__allocating_init(applicationController:queue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  id v6 = objc_allocWithZone(v3);
  uint64_t ObjectType = swift_getObjectType();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v8 = (void *)static CPApplicationPolicyManager.shared;
  v11[3] = type metadata accessor for CPApplicationController();
  v11[4] = &protocol witness table for CPApplicationController;
  v11[0] = a1;
  uint64_t v9 = (*(uint64_t (**)(void *, void *, uint64_t))(ObjectType + 136))(v8, v11, a2);
  swift_deallocPartialClassInstance();
  return v9;
}

uint64_t CPApplicationMonitor.init(applicationController:queue:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v5 = (void *)static CPApplicationPolicyManager.shared;
  v8[3] = type metadata accessor for CPApplicationController();
  v8[4] = &protocol witness table for CPApplicationController;
  v8[0] = a1;
  uint64_t v6 = (*(uint64_t (**)(void *, void *, uint64_t))(ObjectType + 136))(v5, v8, a2);
  swift_deallocPartialClassInstance();
  return v6;
}

id CPApplicationMonitor.__allocating_init(applicationPolicyManager:applicationController:queue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (char *)objc_allocWithZone(v3);
  uint64_t v8 = &v7[OBJC_IVAR___CPApplicationMonitor_appVisibilityMonitor];
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  *(void *)&v7[OBJC_IVAR___CPApplicationMonitor_appPolicyManager] = a1;
  outlined init with copy of UserNotificationCenter(a2, (uint64_t)&v7[OBJC_IVAR___CPApplicationMonitor_applicationController]);
  *(void *)&v7[OBJC_IVAR___CPApplicationMonitor_queue] = a3;
  v11.receiver = v7;
  v11.super_class = v3;
  id v9 = objc_msgSendSuper2(&v11, sel_init);
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  return v9;
}

id CPApplicationMonitor.init(applicationPolicyManager:applicationController:queue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = &v3[OBJC_IVAR___CPApplicationMonitor_appVisibilityMonitor];
  *(void *)uint64_t v6 = 0;
  *((void *)v6 + 1) = 0;
  *(void *)&v3[OBJC_IVAR___CPApplicationMonitor_appPolicyManager] = a1;
  outlined init with copy of UserNotificationCenter(a2, (uint64_t)&v3[OBJC_IVAR___CPApplicationMonitor_applicationController]);
  *(void *)&v3[OBJC_IVAR___CPApplicationMonitor_queue] = a3;
  v9.receiver = v3;
  v9.super_class = (Class)type metadata accessor for CPApplicationMonitor();
  id v7 = objc_msgSendSuper2(&v9, sel_init);
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  return v7;
}

id CPApplicationMonitor.__deallocating_deinit()
{
  uint64_t v1 = &v0[OBJC_IVAR___CPApplicationMonitor_appVisibilityMonitor];
  swift_beginAccess();
  if (*(void *)v1)
  {
    uint64_t v2 = *((void *)v1 + 1);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v2 + 24);
    swift_unknownObjectRetain();
    v4(ObjectType, v2);
    swift_unknownObjectRelease();
  }
  v6.receiver = v0;
  v6.super_class = (Class)type metadata accessor for CPApplicationMonitor();
  return objc_msgSendSuper2(&v6, sel_dealloc);
}

Swift::Void __swiftcall CPApplicationMonitor.createAppVisibilityMonitorIfNecessary()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (uint64_t *)((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  objc_super v6 = *(void **)((char *)v1 + OBJC_IVAR___CPApplicationMonitor_queue);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FBCBF0], v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  objc_super v9 = *(uint64_t (**)(void *, uint64_t))(v3 + 8);
  uint64_t v8 = (void *)(v3 + 8);
  uint64_t v10 = v9(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v8 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v11 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70))(v10);
  swift_unknownObjectRelease();
  if (v11) {
    return;
  }
  if (one-time initialization token for default != -1) {
    goto LABEL_9;
  }
LABEL_4:
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.default);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_1B0DF7000, v13, v14, "Creating process monitor since conversation was joined", v15, 2u);
    MEMORY[0x1B3EA39E0](v15, -1, -1);
  }

  uint64_t v16 = (*(uint64_t (**)(void))((*v8 & *v1) + 0xA8))();
  uint64_t v18 = v17;
  uint64_t v19 = (void *)((char *)v1 + OBJC_IVAR___CPApplicationMonitor_appVisibilityMonitor);
  swift_beginAccess();
  *uint64_t v19 = v16;
  v19[1] = v18;
  swift_unknownObjectRelease();
}

uint64_t CPApplicationMonitor.createAppVisibilityMonitor()()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___CPApplicationMonitor_appPolicyManager);
  outlined init with copy of UserNotificationCenter(v0 + OBJC_IVAR___CPApplicationMonitor_applicationController, (uint64_t)v3);
  type metadata accessor for RunningBoardAppVisibilityMonitor();
  swift_allocObject();
  return RunningBoardAppVisibilityMonitor.init(appPolicyManager:applicationController:)(v1, (uint64_t)v3);
}

id CPApplicationMonitor.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void CPApplicationMonitor.init()()
{
}

uint64_t AppVisibilityMonitor.applicationType(forBundleIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a4 + 16))(v18, a3, a4);
  uint64_t v8 = v19;
  uint64_t v9 = v20;
  __swift_project_boxed_opaque_existential_1(v18, v19);
  char v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 8))(a1, a2, v8, v9);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
  if ((v10 & 1) == 0) {
    return 2;
  }
  uint64_t v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  uint64_t v12 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v11) + 0x98))();

  if (*(void *)(v12 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if (v14)
    {
      id v15 = *(id *)(*(void *)(v12 + 56) + 8 * v13);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unsigned __int8 v16 = objc_msgSend(v15, sel_BOOLValue);

      return (v16 & 1) != 0;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t type metadata accessor for CPApplicationMonitor()
{
  return self;
}

uint64_t specialized CPApplicationMonitor.conversationManager(_:conversationChanged:)(void *a1)
{
  uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: TUConversation));
  uint64_t v4 = MEMORY[0x1F4188790](v75);
  unint64_t v74 = (char *)v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v73 = (uint64_t)v66 - v7;
  MEMORY[0x1F4188790](v6);
  unint64_t v72 = (char *)v66 - v8;
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (void *)((char *)v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  os_log_type_t v68 = v1;
  unint64_t v13 = *(void **)&v1[OBJC_IVAR___CPApplicationMonitor_queue];
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E4FBCBF0], v9);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  unsigned __int8 v16 = *(void (**)(void *, uint64_t))(v10 + 8);
  id v15 = (uint64_t (*)(uint64_t))(v10 + 8);
  v16(v12, v9);
  if (v13)
  {
    id v67 = a1;
    id v17 = objc_msgSend(a1, sel_conversationsByUUID);
    uint64_t v18 = type metadata accessor for UUID();
    unint64_t v19 = type metadata accessor for TUConversation();
    v66[1] = lazy protocol witness table accessor for type UUID and conformance UUID();
    v66[2] = v19;
    uint64_t v20 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v21 = *(void *)(v20 + 64);
    uint64_t v69 = v20 + 64;
    uint64_t v22 = 1 << *(unsigned char *)(v20 + 32);
    uint64_t v23 = -1;
    if (v22 < 64) {
      uint64_t v23 = ~(-1 << v22);
    }
    unint64_t v24 = v23 & v21;
    os_log_t v76 = (uint64_t (*)(uint64_t))v18;
    uint64_t v77 = v20;
    int64_t v70 = (unint64_t)(v22 + 63) >> 6;
    uint64_t v71 = v18 - 8;
    swift_bridgeObjectRetain();
    int64_t v25 = 0;
    id v15 = v76;
    uint64_t v26 = v74;
    while (1)
    {
      if (v24)
      {
        unint64_t v27 = __clz(__rbit64(v24));
        v24 &= v24 - 1;
        int64_t v78 = v25;
        unint64_t v28 = v27 | (v25 << 6);
      }
      else
      {
        int64_t v41 = v25 + 1;
        if (__OFADD__(v25, 1))
        {
          __break(1u);
          break;
        }
        if (v41 >= v70)
        {
LABEL_28:
          swift_release();
          uint64_t v56 = swift_bridgeObjectRelease();
          uint64_t v2 = v68;
          id v15 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *(void *)v68) + 0x70);
          uint64_t v57 = v15(v56);
          uint64_t result = swift_unknownObjectRelease();
          if (!v57) {
            return result;
          }
          if (one-time initialization token for default == -1) {
            goto LABEL_30;
          }
          goto LABEL_40;
        }
        unint64_t v42 = *(void *)(v69 + 8 * v41);
        int64_t v43 = v25 + 1;
        if (!v42)
        {
          int64_t v43 = v25 + 2;
          if (v25 + 2 >= v70) {
            goto LABEL_28;
          }
          unint64_t v42 = *(void *)(v69 + 8 * v43);
          if (!v42)
          {
            int64_t v43 = v25 + 3;
            if (v25 + 3 >= v70) {
              goto LABEL_28;
            }
            unint64_t v42 = *(void *)(v69 + 8 * v43);
            if (!v42)
            {
              int64_t v43 = v25 + 4;
              if (v25 + 4 >= v70) {
                goto LABEL_28;
              }
              unint64_t v42 = *(void *)(v69 + 8 * v43);
              if (!v42)
              {
                int64_t v43 = v25 + 5;
                if (v25 + 5 >= v70) {
                  goto LABEL_28;
                }
                unint64_t v42 = *(void *)(v69 + 8 * v43);
                if (!v42)
                {
                  uint64_t v44 = v25 + 6;
                  if (v25 + 6 >= v70) {
                    goto LABEL_28;
                  }
                  unint64_t v42 = *(void *)(v69 + 8 * v44);
                  if (!v42)
                  {
                    while (1)
                    {
                      int64_t v43 = v44 + 1;
                      if (__OFADD__(v44, 1)) {
                        goto LABEL_39;
                      }
                      if (v43 >= v70) {
                        goto LABEL_28;
                      }
                      unint64_t v42 = *(void *)(v69 + 8 * v43);
                      ++v44;
                      if (v42) {
                        goto LABEL_25;
                      }
                    }
                  }
                  int64_t v43 = v25 + 6;
                }
              }
            }
          }
        }
LABEL_25:
        unint64_t v24 = (v42 - 1) & v42;
        int64_t v78 = v43;
        unint64_t v28 = __clz(__rbit64(v42)) + (v43 << 6);
      }
      uint64_t v29 = v77;
      uint64_t v30 = *((void *)v15 - 1);
      uint64_t v31 = v72;
      uint64_t v32 = v30;
      uint64_t v33 = *(void (**)(char *, unint64_t, uint64_t (*)(uint64_t)))(v30 + 16);
      v33(v72, *(void *)(v77 + 48) + *(void *)(v30 + 72) * v28, v15);
      uint64_t v2 = *(char **)(*(void *)(v29 + 56) + 8 * v28);
      uint64_t v34 = v75;
      *(void *)&v31[*(int *)(v75 + 48)] = v2;
      uint64_t v35 = (uint64_t)v31;
      uint64_t v36 = v73;
      outlined init with take of (key: UUID, value: TUConversation)(v35, v73);
      uint64_t v37 = *(int *)(v34 + 48);
      v33(v26, v36, v15);
      uint64_t v38 = *(void **)(v36 + v37);
      *(void *)&v26[v37] = v38;
      uint64_t v39 = v2;
      id v40 = objc_msgSend(v38, sel_state);
      (*(void (**)(char *, uint64_t (*)(uint64_t)))(v32 + 8))(v26, v15);
      outlined destroy of UUID?(v36, (uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: TUConversation));
      int64_t v25 = v78;
      if (v40 == (id)3)
      {
        swift_release();
        uint64_t v45 = swift_bridgeObjectRelease();
        uint64_t v46 = (void *)MEMORY[0x1E4FBC8C8];
        uint64_t v47 = v68;
        uint64_t v48 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *(void *)v68) + 0x90))(v45);
        uint64_t result = (*(uint64_t (**)(uint64_t))((*v46 & *(void *)v47) + 0x70))(v48);
        if (!result) {
          return result;
        }
        uint64_t v51 = v50;
        uint64_t ObjectType = swift_getObjectType();
        id v53 = objc_msgSend(v67, sel_conversationsByUUID);
        uint64_t v54 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v55 = specialized _copyCollectionToContiguousArray<A>(_:)(v54);
        swift_bridgeObjectRelease();
        (*(void (**)(void *, uint64_t, uint64_t))(v51 + 56))(v55, ObjectType, v51);
        swift_release();
        return swift_unknownObjectRelease();
      }
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  swift_once();
LABEL_30:
  uint64_t v58 = type metadata accessor for Logger();
  __swift_project_value_buffer(v58, (uint64_t)static Log.default);
  uint64_t v59 = Logger.logObject.getter();
  os_log_type_t v60 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v59, v60))
  {
    uint64_t v61 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v61 = 0;
    _os_log_impl(&dword_1B0DF7000, v59, v60, "Invalidating process monitor since no longer in active conversation", v61, 2u);
    MEMORY[0x1B3EA39E0](v61, -1, -1);
  }

  if (((uint64_t (*)(void))v15)())
  {
    uint64_t v63 = v62;
    uint64_t v64 = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v63 + 24))(v64, v63);
    swift_unknownObjectRelease();
  }
  Swift::String v65 = &v2[OBJC_IVAR___CPApplicationMonitor_appVisibilityMonitor];
  swift_beginAccess();
  *(void *)Swift::String v65 = 0;
  *((void *)v65 + 1) = 0;
  return swift_unknownObjectRelease();
}

uint64_t specialized AppVisibilityMonitor.shouldHandleAppVisibilityUpdate(forBundleIdentifier:)(uint64_t a1, unint64_t a2)
{
  id v4 = objc_allocWithZone(MEMORY[0x1E4F223C8]);
  swift_bridgeObjectRetain();
  uint64_t v5 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(a1, a2, 1);
  uint64_t v7 = v5;
  if (v5)
  {
    id v11 = [v5 appTags];
    uint64_t v12 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

    LOBYTE(v11) = specialized Sequence<>.contains(_:)(0x6E6564646968, 0xE600000000000000, v12);
    swift_bridgeObjectRelease();
    if (v11) {
      goto LABEL_9;
    }
    id v15 = [v7 compatibilityObject];
    id v16 = objc_msgSend(v15, sel_bundleType);

    if (v16)
    {
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v19 = v18;

      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (v19)
      {
        if (v17 == v20 && v19 == v21) {
          char v22 = 1;
        }
        else {
          char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
        }
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
    }
    else
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    char v22 = 0;
LABEL_21:
    swift_bridgeObjectRelease();

    char v13 = v22 ^ 1;
    return v13 & 1;
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v23 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v7, v8, "AppVisibilityMonitor: Unable to get application record for bundle identifier: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v10, -1, -1);
    MEMORY[0x1B3EA39E0](v9, -1, -1);
LABEL_9:

    goto LABEL_10;
  }

  swift_bridgeObjectRelease_n();
LABEL_10:
  char v13 = 0;
  return v13 & 1;
}

{
  id v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  void *v12;
  char v13;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  id v4 = objc_allocWithZone(MEMORY[0x1E4F223C8]);
  swift_bridgeObjectRetain();
  uint64_t v5 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(a1, a2, 1);
  uint64_t v7 = v5;
  if (v5)
  {
    id v11 = [v5 appTags];
    uint64_t v12 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

    LOBYTE(v11) = specialized Sequence<>.contains(_:)(0x6E6564646968, 0xE600000000000000, v12);
    swift_bridgeObjectRelease();
    if (v11) {
      goto LABEL_9;
    }
    id v15 = [v7 compatibilityObject];
    id v16 = objc_msgSend(v15, sel_bundleType);

    if (v16)
    {
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v19 = v18;

      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (v19)
      {
        if (v17 == v20 && v19 == v21) {
          char v22 = 1;
        }
        else {
          char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
        }
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
    }
    else
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    char v22 = 0;
LABEL_21:
    swift_bridgeObjectRelease();

    char v13 = v22 ^ 1;
    return v13 & 1;
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v23 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v7, v8, "AppVisibilityMonitor: Unable to get application record for bundle identifier: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v10, -1, -1);
    MEMORY[0x1B3EA39E0](v9, -1, -1);
LABEL_9:

    goto LABEL_10;
  }

  swift_bridgeObjectRelease_n();
LABEL_10:
  char v13 = 0;
  return v13 & 1;
}

void specialized AppVisibilityMonitor.handleAppVisibilityUpdate(forBundleIdentifier:applicationType:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1F4188790](v6 - 8);
  os_log_type_t v8 = &v36[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  char v13 = &v36[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v11);
  id v15 = &v36[-v14];
  id v16 = self;
  uint64_t v17 = (void *)MEMORY[0x1B3EA1B00](a1, a2);
  id v18 = objc_msgSend(v16, sel_faceTimeUpdateForegroundAppURLForBundleIdentifier_applicationType_, v17, a3);

  if (v18)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v19 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32);
    v19(v8, v13, v9);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
    {
      v19(v15, v8, v9);
      id v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F224A0]), sel_init);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1B1138A80;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v22;
      *(void *)(inited + 72) = MEMORY[0x1E4FBB390];
      *(unsigned char *)(inited + 48) = 1;
      specialized Dictionary.init(dictionaryLiteral:)(inited);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v20, sel_setFrontBoardOptions_, isa);

      id v24 = objc_msgSend(self, sel_defaultWorkspace);
      if (v24)
      {
        uint64_t v26 = v24;
        URL._bridgeToObjectiveC()(v25);
        unint64_t v28 = v27;
        objc_msgSend(v26, sel_openURL_configuration_completionHandler_, v27, v20, 0);

        (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v15, v9);
      }
      else
      {
        __break(1u);
      }
      return;
    }
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
  }
  outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for URL?);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  __swift_project_value_buffer(v29, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    uint64_t v38 = v33;
    *(_DWORD *)uint64_t v32 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v32 + 12) = 2080;
    uint64_t v37 = a3;
    type metadata accessor for CPApplicationType(0);
    uint64_t v34 = String.init<A>(reflecting:)();
    uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v30, v31, "AppVisibilityMonitor: Unable to create update foreground app URL for bundle identifier: %s with type: %s", (uint8_t *)v32, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v33, -1, -1);
    MEMORY[0x1B3EA39E0](v32, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

{
  uint64_t v6;
  uint64_t v7;
  unsigned char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned char *v13;
  uint64_t v14;
  unsigned char *v15;
  void *v16;
  void *v17;
  id v18;
  void (*v19)(unsigned char *, unsigned char *, uint64_t);
  id v20;
  uint64_t inited;
  uint64_t v22;
  Class isa;
  id v24;
  NSURL *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned char v36[80];
  uint64_t v37;
  uint64_t v38;

  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1F4188790](v6 - 8);
  os_log_type_t v8 = &v36[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  char v13 = &v36[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v11);
  id v15 = &v36[-v14];
  id v16 = self;
  uint64_t v17 = (void *)MEMORY[0x1B3EA1B00](a1, a2);
  id v18 = objc_msgSend(v16, sel_faceTimeUpdateForegroundAppURLForBundleIdentifier_applicationType_, v17, a3);

  if (v18)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v19 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32);
    v19(v8, v13, v9);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
    {
      v19(v15, v8, v9);
      id v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F224A0]), sel_init);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1B1138A80;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v22;
      *(void *)(inited + 72) = MEMORY[0x1E4FBB390];
      *(unsigned char *)(inited + 48) = 1;
      specialized Dictionary.init(dictionaryLiteral:)(inited);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v20, sel_setFrontBoardOptions_, isa);

      id v24 = objc_msgSend(self, sel_defaultWorkspace);
      if (v24)
      {
        uint64_t v26 = v24;
        URL._bridgeToObjectiveC()(v25);
        unint64_t v28 = v27;
        objc_msgSend(v26, sel_openURL_configuration_completionHandler_, v27, v20, 0);

        (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v15, v9);
      }
      else
      {
        __break(1u);
      }
      return;
    }
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
  }
  outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for URL?);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  __swift_project_value_buffer(v29, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    uint64_t v38 = v33;
    *(_DWORD *)uint64_t v32 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v32 + 12) = 2080;
    uint64_t v37 = a3;
    type metadata accessor for CPApplicationType(0);
    uint64_t v34 = String.init<A>(reflecting:)();
    uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v30, v31, "AppVisibilityMonitor: Unable to create update foreground app URL for bundle identifier: %s with type: %s", (uint8_t *)v32, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v33, -1, -1);
    MEMORY[0x1B3EA39E0](v32, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_1B0FB1CC8@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x70))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t method lookup function for CPApplicationMonitor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CPApplicationMonitor);
}

uint64_t dispatch thunk of CPApplicationMonitor.appVisibilityMonitor.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of CPApplicationMonitor.__allocating_init(applicationPolicyManager:applicationController:queue:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of CPApplicationMonitor.createAppVisibilityMonitorIfNecessary()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of CPApplicationMonitor.conversationManager(_:conversationChanged:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of CPApplicationMonitor.conversationManager(_:activityAuthorizationChangedForBundleIdentifier:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of CPApplicationMonitor.createAppVisibilityMonitor()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of AppVisibilityMonitor.appPolicyManager.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AppVisibilityMonitor.applicationController.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AppVisibilityMonitor.invalidate()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of AppVisibilityMonitor.shouldHandleAppVisibilityUpdate(forBundleIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of AppVisibilityMonitor.handleAppVisibilityUpdate(forBundleIdentifier:applicationType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t dispatch thunk of AppVisibilityMonitor.applicationType(forBundleIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of AppVisibilityMonitor.handleUpdatedConversations(conversations:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

unint64_t type metadata accessor for TUConversation()
{
  unint64_t result = lazy cache variable for type metadata for TUConversation;
  if (!lazy cache variable for type metadata for TUConversation)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
  }
  return result;
}

uint64_t outlined init with take of (key: UUID, value: TUConversation)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: TUConversation));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unsigned char *PluginRpcStatus.init(code:cause:errorMessage:)@<X0>(unsigned char *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(unsigned char *)a5 = *result;
  *(void *)(a5 + 8) = a2;
  *(void *)(a5 + 16) = a3;
  *(void *)(a5 + 24) = a4;
  return result;
}

uint64_t PluginRpcStatus.error.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 24);
  *(unsigned char *)a1 = *(unsigned char *)v1;
  long long v5 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 8) = v5;
  *(void *)(a1 + 24) = v2;
  type metadata accessor for PluginRpcError();
  swift_storeEnumTagMultiPayload();
  id v3 = (id)v5;
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for PluginRpcError()
{
  uint64_t result = type metadata singleton initialization cache for PluginRpcError;
  if (!type metadata singleton initialization cache for PluginRpcError) {
    return swift_getSingletonMetadata();
  }
  return result;
}

CopresenceCore::PluginRpcStatusCode_optional __swiftcall PluginRpcStatusCode.init(rawValue:)(Swift::UInt16 rawValue)
{
  char v2 = rawValue;
  if (rawValue >= 0x11u) {
    char v2 = 17;
  }
  *uint64_t v1 = v2;
  return (CopresenceCore::PluginRpcStatusCode_optional)rawValue;
}

uint64_t PluginRpcStatusCode.rawValue.getter()
{
  return *v0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PluginRpcStatusCode()
{
  Swift::UInt16 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PluginRpcStatusCode()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PluginRpcStatusCode()
{
  Swift::UInt16 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

CopresenceCore::PluginRpcStatusCode_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PluginRpcStatusCode(Swift::UInt16 *a1)
{
  return PluginRpcStatusCode.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PluginRpcStatusCode(_WORD *a1@<X8>)
{
  *a1 = *v1;
}

void PluginRpcStatus.code.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

void *PluginRpcStatus.cause.getter()
{
  Swift::UInt16 v1 = *(void **)(v0 + 8);
  id v2 = v1;
  return v1;
}

uint64_t PluginRpcStatus.errorMessage.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PluginRpcStatus.description.getter()
{
  uint64_t v1 = (void *)v0[1];
  uint64_t v2 = v0[2];
  id v3 = (void *)v0[3];
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 8236;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  if (v3) {
    uint64_t v6 = v2;
  }
  else {
    uint64_t v6 = 0xD000000000000010;
  }
  if (v3) {
    uint64_t v7 = v3;
  }
  else {
    uint64_t v7 = (void *)0x80000001B115FFB0;
  }
  swift_bridgeObjectRetain();
  v8._uint64_t countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 0x3A6573756163202CLL;
  v9._object = (void *)0xE900000000000020;
  String.append(_:)(v9);
  if (v1)
  {
    id v10 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v11 = String.init<A>(reflecting:)();
    unint64_t v13 = v12;
  }
  else
  {
    unint64_t v13 = 0xE400000000000000;
    uint64_t v11 = 1701736302;
  }
  unint64_t v14 = v13;
  String.append(_:)(*(Swift::String *)&v11);
  swift_bridgeObjectRelease();
  return 0x7461745320435052;
}

uint64_t PluginRpcDefinition.path.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PluginRpcDefinition.init(path:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

unint64_t lazy protocol witness table accessor for type PluginRpcStatusCode and conformance PluginRpcStatusCode()
{
  unint64_t result = lazy protocol witness table cache variable for type PluginRpcStatusCode and conformance PluginRpcStatusCode;
  if (!lazy protocol witness table cache variable for type PluginRpcStatusCode and conformance PluginRpcStatusCode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginRpcStatusCode and conformance PluginRpcStatusCode);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PluginRpcStatusCode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF0) {
    goto LABEL_17;
  }
  if (a2 + 16 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 16) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 16;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x11;
  int v8 = v6 - 17;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for PluginRpcStatusCode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 16 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 16) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEF)
  {
    unsigned int v6 = ((a2 - 240) >> 8) + 1;
    *unint64_t result = a2 + 16;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B0FB2528);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 16;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PluginRpcStatusCode()
{
  return &type metadata for PluginRpcStatusCode;
}

uint64_t destroy for PluginRpcStatus(uint64_t a1)
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PluginRpcStatus(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unsigned int v4 = *(void **)(a2 + 8);
  id v5 = v4;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PluginRpcStatus(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unsigned int v4 = *(void **)(a1 + 8);
  id v5 = *(void **)(a2 + 8);
  id v6 = v5;
  *(void *)(a1 + 8) = v5;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PluginRpcStatus(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unsigned int v4 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PluginRpcStatus(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PluginRpcStatus(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PluginRpcStatus()
{
  return &type metadata for PluginRpcStatus;
}

uint64_t *initializeBufferWithCopyOfBuffer for PluginRpcError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      id v6 = (void *)a2[1];
      id v7 = v6;
      uint64_t v9 = a2[2];
      uint64_t v8 = a2[3];
      a1[1] = (uint64_t)v6;
      a1[2] = v9;
      a1[3] = v8;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v11 = type metadata accessor for NWError();
      uint64_t v12 = *(void *)(v11 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v12 + 48))(a2, 3, v11))
      {
        uint64_t v13 = type metadata accessor for PluginConnectError();
        memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v12 + 16))(a1, a2, v11);
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v12 + 56))(a1, 0, 3, v11);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for PluginRpcError(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {

    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = type metadata accessor for NWError();
    uint64_t v5 = *(void *)(v3 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 3, v3);
    if (!result)
    {
      int v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
      return v4(a1, v3);
    }
  }
  return result;
}

void *initializeWithCopy for PluginRpcError(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    int v4 = (void *)a2[1];
    id v5 = v4;
    uint64_t v7 = a2[2];
    uint64_t v6 = a2[3];
    a1[1] = v4;
    a1[2] = v7;
    a1[3] = v6;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v8 = type metadata accessor for NWError();
    uint64_t v9 = *(void *)(v8 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(a2, 3, v8))
    {
      uint64_t v10 = type metadata accessor for PluginConnectError();
      memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 16))(a1, a2, v8);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 3, v8);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for PluginRpcError(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of PluginRpcError((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      int v4 = (void *)a2[1];
      id v5 = v4;
      a1[1] = v4;
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v6 = type metadata accessor for NWError();
      uint64_t v7 = *(void *)(v6 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 3, v6))
      {
        uint64_t v8 = type metadata accessor for PluginConnectError();
        memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of PluginRpcError(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PluginRpcError();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *initializeWithTake for PluginRpcError(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for NWError();
    uint64_t v7 = *(void *)(v6 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 3, v6))
    {
      uint64_t v8 = type metadata accessor for PluginConnectError();
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for PluginRpcError(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of PluginRpcError((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for NWError();
      uint64_t v7 = *(void *)(v6 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 3, v6))
      {
        uint64_t v8 = type metadata accessor for PluginConnectError();
        memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for PluginRpcError()
{
  uint64_t result = type metadata accessor for PluginConnectError();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t type metadata instantiation function for PluginRpcDefinition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 40);
}

uint64_t type metadata accessor for PluginRpcDefinition()
{
  return swift_getGenericMetadata();
}

uint64_t static TransparentTopicCryptorProvider.encryptionID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v2 - 8);
  int v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)();
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a1, v4, v5);
  }
  __break(1u);
  return result;
}

uint64_t TransparentTopicCryptorProvider.encryptionIDPublisher.getter()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = MEMORY[0x1F4188790](v1 - 8);
  (*(void (**)(uint64_t))(*(void *)v0 + 80))(v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<UUID, Never>);
  swift_allocObject();
  uint64_t v5 = CurrentValueSubject.init(_:)();
  lazy protocol witness table accessor for type CurrentValueSubject<UUID, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type CurrentValueSubject<UUID, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<UUID, Never>);
  uint64_t v3 = Publisher.eraseToAnyPublisher()();
  swift_release();
  return v3;
}

uint64_t TransparentTopicCryptorProvider.decryptionIDSet.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>);
  type metadata accessor for UUID();
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1B1138A80;
  (*(void (**)(void))(*(void *)v0 + 80))();
  return v1;
}

uint64_t TransparentTopicCryptorProvider.decryptionIDSetPublisher.getter()
{
  (*(void (**)(void))(*(void *)v0 + 96))();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<[UUID], Never>);
  swift_allocObject();
  CurrentValueSubject.init(_:)();
  lazy protocol witness table accessor for type CurrentValueSubject<UUID, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type CurrentValueSubject<[UUID], Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<[UUID], Never>);
  uint64_t v1 = Publisher.eraseToAnyPublisher()();
  swift_release();
  return v1;
}

uint64_t lazy protocol witness table accessor for type CurrentValueSubject<UUID, Never> and conformance CurrentValueSubject<A, B>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t TransparentTopicCryptorProvider.encrypt(data:seqNum:)(uint64_t a1, unint64_t a2)
{
  return a1;
}

uint64_t TransparentTopicCryptorProvider.decrypt(data:encryptionID:seqNum:)(uint64_t a1, unint64_t a2)
{
  return a1;
}

uint64_t TransparentTopicCryptorProvider.validEncryptionID(data:)(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  unint64_t v14 = (char *)&v19 - v13;
  outlined copy of Data._Representation(a1, a2);
  UUID.init(data:)(a1, a2, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v7);
    char v15 = 0;
  }
  else
  {
    uint64_t v16 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v14, v7, v8);
    (*(void (**)(uint64_t))(*(void *)v2 + 80))(v16);
    char v15 = static UUID.== infix(_:_:)();
    uint64_t v17 = *(void (**)(char *, uint64_t))(v9 + 8);
    v17(v12, v8);
    v17(v14, v8);
  }
  return v15 & 1;
}

uint64_t TransparentTopicCryptorProvider.deinit()
{
  return v0;
}

uint64_t TransparentTopicCryptorProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t TransparentTopicCryptorProvider.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t TransparentTopicCryptorProvider.init()()
{
  return v0;
}

uint64_t protocol witness for TopicCryptorProvider.encryptionID.getter in conformance TransparentTopicCryptorProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

uint64_t protocol witness for TopicCryptorProvider.encryptionIDPublisher.getter in conformance TransparentTopicCryptorProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

uint64_t protocol witness for TopicCryptorProvider.decryptionIDSet.getter in conformance TransparentTopicCryptorProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t protocol witness for TopicCryptorProvider.decryptionIDSetPublisher.getter in conformance TransparentTopicCryptorProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

uint64_t protocol witness for TopicCryptorProvider.validEncryptionID(data:) in conformance TransparentTopicCryptorProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))() & 1;
}

uint64_t protocol witness for TopicCryptorProvider.encrypt(data:seqNum:) in conformance TransparentTopicCryptorProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t protocol witness for TopicCryptorProvider.decrypt(data:encryptionID:seqNum:) in conformance TransparentTopicCryptorProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t protocol witness for TopicCryptorProvider.refreshEncryptionIDSet(participantIDs:) in conformance TransparentTopicCryptorProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

uint64_t type metadata accessor for TransparentTopicCryptorProvider()
{
  return self;
}

uint64_t method lookup function for TransparentTopicCryptorProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for TransparentTopicCryptorProvider);
}

uint64_t dispatch thunk of TransparentTopicCryptorProvider.encryptionID.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 80))();
}

uint64_t dispatch thunk of TransparentTopicCryptorProvider.encryptionIDPublisher.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of TransparentTopicCryptorProvider.decryptionIDSet.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of TransparentTopicCryptorProvider.decryptionIDSetPublisher.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of TransparentTopicCryptorProvider.encrypt(data:seqNum:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of TransparentTopicCryptorProvider.decrypt(data:encryptionID:seqNum:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of TransparentTopicCryptorProvider.validEncryptionID(data:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of TransparentTopicCryptorProvider.refreshEncryptionIDSet(participantIDs:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of TransparentTopicCryptorProvider.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

void *ABCReporter.__allocating_init(domain:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA8AF0]), sel_init);
  v8[3] = a1;
  v8[4] = a2;
  void v8[5] = a3;
  v8[6] = a4;
  return v8;
}

id ABCReporter.reporter.getter()
{
  return *(id *)(v0 + 16);
}

uint64_t ABCReporter.domain.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ABCReporter.type.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

void *ABCReporter.init(domain:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA8AF0]), sel_init);
  v4[3] = a1;
  v4[4] = a2;
  v4[5] = a3;
  v4[6] = a4;
  return v4;
}

Swift::OpaquePointer_optional __swiftcall ABCReporter.signature(subType:context:process:)(Swift::String subType, Swift::String context, Swift::String process)
{
  object = process._object;
  uint64_t countAndFlagsBits = process._countAndFlagsBits;
  uint64_t v6 = context._object;
  uint64_t v7 = context._countAndFlagsBits;
  uint64_t v8 = subType._object;
  uint64_t v9 = subType._countAndFlagsBits;
  uint64_t v10 = (void *)v3[2];
  uint64_t v11 = (void *)MEMORY[0x1B3EA1B00](v3[3], v3[4]);
  uint64_t v12 = (void *)MEMORY[0x1B3EA1B00](v3[5], v3[6]);
  uint64_t v13 = (void *)MEMORY[0x1B3EA1B00](v9, v8);
  unint64_t v14 = (void *)MEMORY[0x1B3EA1B00](v7, v6);
  char v15 = (void *)MEMORY[0x1B3EA1B00](countAndFlagsBits, object);
  id v16 = objc_msgSend(v10, sel_signatureWithDomain_type_subType_subtypeContext_detectedProcess_triggerThresholdValues_, v11, v12, v13, v14, v15, 0);

  if (v16)
  {
    static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();
  }
  id v18 = 0;
  result.value._rawValue = v18;
  result.is_nil = v17;
  return result;
}

uint64_t ABCReporter.report(with:duration:)(uint64_t a1, double a2)
{
  *(void *)(v3 + 40) = v2;
  *(double *)(v3 + 32) = a2;
  *(void *)(v3 + 24) = a1;
  return MEMORY[0x1F4188298](ABCReporter.report(with:duration:), 0, 0);
}

uint64_t ABCReporter.report(with:duration:)()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[3];
  int v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  v4[2] = v1;
  v4[3] = v3;
  v4[4] = v2;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[7] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
  *uint64_t v5 = v0;
  v5[1] = ABCReporter.report(with:duration:);
  return MEMORY[0x1F41880D8](v0 + 2, 0, 0, 0xD000000000000016, 0x80000001B115DCA0, partial apply for closure #1 in ABCReporter.report(with:duration:), v4, v6);
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x1F4188298](ABCReporter.report(with:duration:), 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

void closure #1 in ABCReporter.report(with:duration:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<[AnyHashable : Any], Never>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = *(void **)(a2 + 16);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v12 + v11, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = partial apply for closure #1 in closure #1 in ABCReporter.report(with:duration:);
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [AnyHashable : Any]?) -> ();
  aBlock[3] = &block_descriptor_15;
  uint64_t v13 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v9, sel_snapshotWithSignature_duration_event_payload_reply_, isa, 0, 0, v13, a3);
  _Block_release(v13);
}

uint64_t closure #1 in closure #1 in ABCReporter.report(with:duration:)()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t ABCReporter.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ABCReporter.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ABCReporterProtocol.init(domain:type:) in conformance ABCReporter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 104))();
  *a1 = result;
  return result;
}

uint64_t protocol witness for ABCReporterProtocol.signature(subType:context:process:) in conformance ABCReporter()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t protocol witness for ABCReporterProtocol.report(with:duration:) in conformance ABCReporter(uint64_t a1, double a2)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, __n128))(*(void *)(**(void **)v2 + 120)
                                               + **(int **)(**(void **)v2 + 120));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = dispatch thunk of ABCReporterProtocol.report(with:duration:);
  v7.n128_f64[0] = a2;
  return v9(a1, v7);
}

uint64_t Task<>.reportFailure(on:function:process:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v14 - 8);
  id v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
  outlined init with copy of UserNotificationCenter(a1, (uint64_t)v21);
  id v18 = (void *)swift_allocObject();
  void v18[2] = 0;
  void v18[3] = 0;
  v18[4] = a7;
  v18[5] = a6;
  v18[6] = a2;
  v18[7] = a3;
  v18[8] = a4;
  v18[9] = a5;
  outlined init with take of BackgroundSessionManagerDataSource(v21, (uint64_t)(v18 + 10));
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v16, (uint64_t)&async function pointer to partial apply for closure #1 in Task<>.reportFailure(on:function:process:), (uint64_t)v18);
  swift_release();
  outlined destroy of TaskPriority?((uint64_t)v16);
  return swift_retain();
}

uint64_t closure #1 in Task<>.reportFailure(on:function:process:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[17] = v12;
  v8[18] = v13;
  v8[15] = a7;
  v8[16] = a8;
  v8[13] = a5;
  v8[14] = a6;
  v8[12] = a4;
  v8[19] = *(void *)(v13 - 8);
  v8[20] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Date();
  v8[21] = v9;
  v8[22] = *(void *)(v9 - 8);
  v8[23] = swift_task_alloc();
  v8[24] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in Task<>.reportFailure(on:function:process:), 0, 0);
}

uint64_t closure #1 in Task<>.reportFailure(on:function:process:)()
{
  Date.init()();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[25] = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *uint64_t v1 = v0;
  v1[1] = closure #1 in Task<>.reportFailure(on:function:process:);
  uint64_t v3 = v0[20];
  uint64_t v4 = v0[18];
  uint64_t v5 = v0[12];
  uint64_t v6 = MEMORY[0x1E4FBC0F0];
  return MEMORY[0x1F4187D90](v3, v5, v4, v2, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 208) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = closure #1 in Task<>.reportFailure(on:function:process:);
  }
  else
  {
    (*(void (**)(void, void))(v2[19] + 8))(v2[20], v2[18]);
    uint64_t v3 = closure #1 in Task<>.reportFailure(on:function:process:);
  }
  return MEMORY[0x1F4188298](v3, 0, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[22] + 8))(v0[24], v0[21]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  void *v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  void *v19;
  uint64_t v20;

  uint64_t v19 = v0;
  swift_bridgeObjectRetain();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[31];
    uint64_t v17 = (void (*)(uint64_t, uint64_t))v0[28];
    uint64_t v4 = (void *)v0[26];
    uint64_t v15 = v0[21];
    id v16 = v0[24];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    id v18 = v6;
    v0[8] = v3;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
    __n128 v7 = String.init<A>(reflecting:)();
    v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v1, v2, "Received reporting response: %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v6, -1, -1);
    MEMORY[0x1B3EA39E0](v5, -1, -1);

    v17(v16, v15);
  }
  else
  {
    uint64_t v9 = (void (*)(uint64_t, uint64_t))v0[28];
    uint64_t v10 = (void *)v0[26];
    uint64_t v11 = v0[24];
    uint64_t v12 = v0[21];

    swift_bridgeObjectRelease_n();
    v9(v11, v12);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  BOOL v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t (*v36)(void);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  void *v46;
  __n128 v47;
  NSObject *v48;
  os_log_type_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  Swift::String v65 = v0;
  if (one-time initialization token for abcReporter != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 256) = __swift_project_value_buffer(v1, (uint64_t)static Log.abcReporter);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.error.getter();
  uint64_t v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = *(void *)(v0 + 112);
  if (v4)
  {
    uint64_t v6 = *(void *)(v0 + 104);
    __n128 v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v64 = v8;
    *(_DWORD *)__n128 v7 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v2, v3, "Detected failure on function %s. Reporting!", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v8, -1, -1);
    MEMORY[0x1B3EA39E0](v7, -1, -1);

    uint64_t v9 = *(void *)(v0 + 128);
    if (v9)
    {
LABEL_5:
      uint64_t v59 = *(id *)(v0 + 120);
      uint64_t v61 = v9;
      goto LABEL_9;
    }
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v9 = *(void *)(v0 + 128);
    if (v9) {
      goto LABEL_5;
    }
  }
  uint64_t v10 = objc_msgSend(self, sel_mainBundle);
  uint64_t v11 = objc_msgSend(v10, sel_bundleIdentifier);

  if (!v11)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v48 = Logger.logObject.getter();
    uint64_t v49 = static os_log_type_t.error.getter();
    uint64_t v50 = os_log_type_enabled(v48, v49);
    uint64_t v51 = *(void *)(v0 + 192);
    uint64_t v52 = *(void *)(v0 + 168);
    id v53 = *(void *)(v0 + 176);
    uint64_t v54 = *(void *)(v0 + 112);
    if (v50)
    {
      os_log_type_t v60 = *(id *)(v0 + 208);
      uint64_t v62 = *(void *)(v0 + 192);
      uint64_t v55 = *(void *)(v0 + 104);
      uint64_t v56 = swift_slowAlloc();
      uint64_t v57 = swift_slowAlloc();
      uint64_t v64 = v57;
      *(_DWORD *)uint64_t v56 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v54, &v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v56 + 12) = 2080;
      *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(7104878, 0xE300000000000000, &v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B0DF7000, v48, v49, "Can't report failure on function %s because of missing processName %s", (uint8_t *)v56, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v57, -1, -1);
      MEMORY[0x1B3EA39E0](v56, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v62, v52);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v51, v52);
    }
    goto LABEL_15;
  }
  uint64_t v59 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v61 = v12;

LABEL_9:
  uint64_t v13 = *(void **)(v0 + 136);
  uint64_t v15 = *(void *)(v0 + 104);
  uint64_t v14 = *(void *)(v0 + 112);
  id v16 = v13[3];
  uint64_t v17 = v13[4];
  uint64_t v58 = v13;
  __swift_project_boxed_opaque_existential_1(v13, v16);
  swift_getErrorValue();
  swift_bridgeObjectRetain();
  id v18 = Error.localizedDescription.getter();
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, id, uint64_t, uint64_t, uint64_t))(v17 + 16))(v15, v14, v18, v19, v59, v61, v16, v17);
  *(void *)(v0 + 216) = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v20)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v21 = Logger.logObject.getter();
    uint64_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      id v24 = swift_slowAlloc();
      uint64_t v64 = v24;
      *(_DWORD *)uint64_t v23 = 136315138;
      swift_bridgeObjectRetain();
      int64_t v25 = Dictionary.description.getter();
      unint64_t v27 = v26;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, &v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v21, v22, "Reporting signature %s", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v24, -1, -1);
      MEMORY[0x1B3EA39E0](v23, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v38 = *(void *)(v0 + 184);
    uint64_t v39 = *(void *)(v0 + 168);
    id v40 = *(void *)(v0 + 176);
    int64_t v41 = v58[3];
    unint64_t v42 = v58[4];
    __swift_project_boxed_opaque_existential_1(*(void **)(v0 + 136), v41);
    Date.init()();
    Date.timeIntervalSince(_:)();
    uint64_t v44 = v43;
    uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
    *(void *)(v0 + 224) = v45;
    *(void *)(v0 + 232) = (v40 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v45(v38, v39);
    uint64_t v63 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)(v42 + 24) + **(int **)(v42 + 24));
    uint64_t v46 = (void *)swift_task_alloc();
    *(void *)(v0 + 240) = v46;
    *uint64_t v46 = v0;
    v46[1] = closure #1 in Task<>.reportFailure(on:function:process:);
    v47.n128_u64[0] = v44;
    return v63(v20, v41, v42, v47);
  }
  unint64_t v28 = Logger.logObject.getter();
  uint64_t v29 = static os_log_type_t.error.getter();
  uint64_t v30 = os_log_type_enabled(v28, v29);
  os_log_type_t v31 = *(void **)(v0 + 208);
  uint64_t v32 = *(void *)(v0 + 192);
  uint64_t v33 = *(void *)(v0 + 168);
  uint64_t v34 = *(void *)(v0 + 176);
  if (v30)
  {
    unint64_t v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v35 = 0;
    _os_log_impl(&dword_1B0DF7000, v28, v29, "Failed to convert signature payload", v35, 2u);
    MEMORY[0x1B3EA39E0](v35, -1, -1);
  }

  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v32, v33);
LABEL_15:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v36 = *(uint64_t (**)(void))(v0 + 8);
  return v36();
}

uint64_t closure #1 in Task<>.reportFailure(on:function:process:)(uint64_t a1)
{
  *(void *)(*(void *)v1 + 248) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4188298](closure #1 in Task<>.reportFailure(on:function:process:), 0, 0);
}

uint64_t sub_1B0FB559C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 80);
  return MEMORY[0x1F4186498](v0, 120, 7);
}

uint64_t partial apply for closure #1 in Task<>.reportFailure(on:function:process:)(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[5];
  uint64_t v6 = v1[6];
  uint64_t v7 = v1[7];
  uint64_t v8 = v1[8];
  uint64_t v9 = v1[9];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return closure #1 in Task<>.reportFailure(on:function:process:)(a1, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t dispatch thunk of ABCReporterProtocol.init(domain:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t dispatch thunk of ABCReporterProtocol.signature(subType:context:process:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 16))();
}

uint64_t dispatch thunk of ABCReporterProtocol.report(with:duration:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)(a3 + 24) + **(int **)(a3 + 24));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = dispatch thunk of ABCReporterProtocol.report(with:duration:);
  v10.n128_f64[0] = a4;
  return v12(a1, a2, a3, v10);
}

uint64_t type metadata accessor for ABCReporter()
{
  return self;
}

uint64_t method lookup function for ABCReporter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ABCReporter);
}

uint64_t dispatch thunk of ABCReporter.__allocating_init(domain:type:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of ABCReporter.signature(subType:context:process:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of ABCReporter.report(with:duration:)(uint64_t a1, double a2)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, __n128))(*(void *)(*(void *)v2 + 120) + **(int **)(*(void *)v2 + 120));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = dispatch thunk of ApplicationLauncher.openApplicationOptions(for:options:);
  v7.n128_f64[0] = a2;
  return v9(a1, v7);
}

uint64_t sub_1B0FB59AC()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<[AnyHashable : Any], Never>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in ABCReporter.report(with:duration:)()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<[AnyHashable : Any], Never>);
  return closure #1 in closure #1 in ABCReporter.report(with:duration:)();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

uint64_t PegasusApplicationLaunchBehavior.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  type metadata accessor for PegasusApplicationLaunchBehavior.AuthorizationManager();
  uint64_t v1 = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v2 = MEMORY[0x1E4FBC868];
  *(void *)(v1 + 112) = MEMORY[0x1E4FBC868];
  *(void *)(v0 + 24) = v1;
  type metadata accessor for BackgroundApplicationLaunchBehavior.AssertionStore();
  uint64_t v3 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v3 + 112) = v2;
  *(void *)(v0 + 16) = v3;
  return v0;
}

uint64_t PegasusApplicationLaunchBehavior.AuthorizationManager.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v0 + 112) = MEMORY[0x1E4FBC868];
  return v0;
}

uint64_t PegasusApplicationLaunchBehavior.authorizationManager.getter()
{
  return swift_retain();
}

uint64_t PegasusApplicationLaunchBehavior.authorizationManager.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 24) = a1;
  return swift_release();
}

uint64_t (*PegasusApplicationLaunchBehavior.authorizationManager.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t PegasusApplicationLaunchBehavior.shouldHandleAppLaunch(for:options:)(void *a1, char a2)
{
  if ((a2 & 1) != 0
    && (id v2 = objc_msgSend(a1, sel_activity),
        id v3 = objc_msgSend(v2, sel_metadata),
        v2,
        v3))
  {
    id v4 = objc_msgSend(v3, sel_context);

    id v5 = objc_msgSend(v4, sel_typedIdentifier);
    uint64_t v6 = (void *)*MEMORY[0x1E4FADEA0];
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
    if (v7 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v9 == v10) {
      char v12 = 1;
    }
    else {
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    id v13 = v6;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v12 = 0;
  }
  return v12 & 1;
}

uint64_t PegasusApplicationLaunchBehavior.handleAppLaunch(for:options:launchProvider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PGBackgroundPIPAuthorizationState>.Iterator);
  v4[9] = v5;
  v4[10] = *(void *)(v5 - 8);
  v4[11] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PGBackgroundPIPAuthorizationState>?);
  v4[12] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PGBackgroundPIPAuthorizationState>);
  v4[13] = v6;
  v4[14] = *(void *)(v6 - 8);
  v4[15] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v4[16] = v7;
  v4[17] = *(void *)(v7 - 8);
  v4[18] = swift_task_alloc();
  return MEMORY[0x1F4188298](PegasusApplicationLaunchBehavior.handleAppLaunch(for:options:launchProvider:), 0, 0);
}

uint64_t PegasusApplicationLaunchBehavior.handleAppLaunch(for:options:launchProvider:)()
{
  id v1 = objc_msgSend(*(id *)(v0 + 40), sel_activity);
  id v2 = objc_msgSend(v1, sel_bundleIdentifier);

  if (v2)
  {
    uint64_t v4 = *(void *)(v0 + 136);
    uint64_t v3 = *(void *)(v0 + 144);
    uint64_t v5 = *(void *)(v0 + 128);
    uint64_t v6 = *(void *)(v0 + 64);
    uint64_t v7 = *(void **)(v0 + 40);
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;

    *(void *)(v0 + 152) = v8;
    *(void *)(v0 + 160) = v10;
    id v11 = objc_msgSend(v7, sel_UUID);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    *(void *)(v0 + 168) = UUID.uuidString.getter();
    *(void *)(v0 + 176) = v12;
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 184))(v13);
    *(void *)(v0 + 184) = v14;
    return MEMORY[0x1F4188298](PegasusApplicationLaunchBehavior.handleAppLaunch(for:options:launchProvider:), v14, 0);
  }
  else
  {
    lazy protocol witness table accessor for type ApplicationLauncher.LaunchError and conformance ApplicationLauncher.LaunchError();
    swift_allocError();
    *uint64_t v15 = 3;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
}

{
  uint64_t *v0;
  uint64_t v2;

  PegasusApplicationLaunchBehavior.AuthorizationManager.insertAuthorization(activitySessionIdentifier:appBundleIdentifier:)(v0[21], v0[22], v0[19], v0[20], v0[12]);
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x1F4188298](PegasusApplicationLaunchBehavior.handleAppLaunch(for:options:launchProvider:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned char *v4;
  uint64_t (*v5)(void);
  void *v7;
  uint64_t v8;
  uint64_t v9;

  id v1 = v0[13];
  id v2 = v0[14];
  uint64_t v3 = v0[12];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of AsyncStream<PGBackgroundPIPAuthorizationState>?(v3);
    lazy protocol witness table accessor for type ApplicationLauncher.LaunchError and conformance ApplicationLauncher.LaunchError();
    swift_allocError();
    void *v4 = 1;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[15], v3, v1);
    AsyncStream.makeAsyncIterator()();
    uint64_t v7 = (void *)swift_task_alloc();
    v0[24] = v7;
    *uint64_t v7 = v0;
    v7[1] = PegasusApplicationLaunchBehavior.handleAppLaunch(for:options:launchProvider:);
    uint64_t v8 = v0[9];
    return MEMORY[0x1F4187D58](v0 + 2, 0, 0, v8);
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x1F4188298](PegasusApplicationLaunchBehavior.handleAppLaunch(for:options:launchProvider:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned char *v25;
  void *v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29[2];
  uint64_t v30;
  uint64_t v31;

  uint64_t v30 = v0;
  id v1 = *(void *)(v0 + 16);
  if (*(unsigned char *)(v0 + 24))
  {
LABEL_2:
    uint64_t v3 = *(void *)(v0 + 112);
    id v2 = *(void *)(v0 + 120);
    uint64_t v4 = *(void *)(v0 + 104);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v5 = *(void *)(v0 + 88);
    uint64_t v7 = *(void *)(v0 + 72);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  id v11 = Logger.logObject.getter();
  uint64_t v12 = static os_log_type_t.info.getter();
  uint64_t v13 = os_log_type_enabled(v11, v12);
  uint64_t v14 = *(void *)(v0 + 176);
  if (v13)
  {
    uint64_t v15 = *(void *)(v0 + 168);
    id v16 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    v29[0] = v17;
    *(_DWORD *)id v16 = 136315394;
    *(void *)(v0 + 32) = v1;
    type metadata accessor for PGBackgroundPIPAuthorizationState(0);
    uint64_t v18 = String.init<A>(reflecting:)();
    *(void *)(v16 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v29);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v16 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v14, v29);
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v11, v12, "Got PGBackgroundPIPAuthorization authorization transitioned to state %s for session id %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v17, -1, -1);
    MEMORY[0x1B3EA39E0](v16, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  if ((unint64_t)(v1 - 4) < 2)
  {
    lazy protocol witness table accessor for type ApplicationLauncher.LaunchError and conformance ApplicationLauncher.LaunchError();
    id v24 = swift_allocError();
    *int64_t v25 = 1;
    swift_willThrow();
    *(void *)(v0 + 208) = v24;
    swift_bridgeObjectRelease();
    return MEMORY[0x1F4188298](PegasusApplicationLaunchBehavior.handleAppLaunch(for:options:launchProvider:), 0, 0);
  }
  else
  {
    if (v1 == 3) {
      goto LABEL_2;
    }
    if (v1 == 2)
    {
      unint64_t v28 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(**(void **)(v0 + 64) + 144)
                                                              + **(int **)(**(void **)(v0 + 64) + 144));
      uint64_t v20 = (void *)swift_task_alloc();
      *(void *)(v0 + 200) = v20;
      *uint64_t v20 = v0;
      v20[1] = PegasusApplicationLaunchBehavior.handleAppLaunch(for:options:launchProvider:);
      uint64_t v21 = *(void *)(v0 + 56);
      uint64_t v23 = *(void *)(v0 + 40);
      uint64_t v22 = *(void *)(v0 + 48);
      return v28(v23, v22, v21);
    }
    else
    {
      uint64_t v26 = (void *)swift_task_alloc();
      *(void *)(v0 + 192) = v26;
      *uint64_t v26 = v0;
      v26[1] = PegasusApplicationLaunchBehavior.handleAppLaunch(for:options:launchProvider:);
      unint64_t v27 = *(void *)(v0 + 72);
      return MEMORY[0x1F4187D58](v0 + 16, 0, 0, v27);
    }
  }
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;

  id v2 = (void *)*v1;
  uint64_t v3 = (void *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    v2[26] = v0;
    swift_bridgeObjectRelease();
    return MEMORY[0x1F4188298](PegasusApplicationLaunchBehavior.handleAppLaunch(for:options:launchProvider:), 0, 0);
  }
  else
  {
    uint64_t v4 = (void *)swift_task_alloc();
    v2[24] = v4;
    void *v4 = v3;
    v4[1] = PegasusApplicationLaunchBehavior.handleAppLaunch(for:options:launchProvider:);
    uint64_t v5 = v2[9];
    return MEMORY[0x1F4187D58](v2 + 2, 0, 0, v5);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  id v2 = v0[14];
  id v1 = v0[15];
  uint64_t v3 = v0[13];
  (*(void (**)(void, void))(v0[10] + 8))(v0[11], v0[9]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t PegasusApplicationLaunchBehavior.revokeBackgroundAuthorization(for:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  long long v3[4] = v2;
  v3[2] = a1;
  return MEMORY[0x1F4188298](PegasusApplicationLaunchBehavior.revokeBackgroundAuthorization(for:), 0, 0);
}

uint64_t PegasusApplicationLaunchBehavior.revokeBackgroundAuthorization(for:)()
{
  uint64_t v1 = (*(uint64_t (**)(void))(**(void **)(v0 + 32) + 88))();
  *(void *)(v0 + 40) = v1;
  return MEMORY[0x1F4188298](PegasusApplicationLaunchBehavior.revokeBackgroundAuthorization(for:), v1, 0);
}

{
  Swift::String *v0;
  uint64_t v2;

  BackgroundApplicationLaunchBehavior.AssertionStore.revokeBackgroundAuthorization(for:)(v0[1]);
  swift_release();
  return MEMORY[0x1F4188298](PegasusApplicationLaunchBehavior.revokeBackgroundAuthorization(for:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = (*(uint64_t (**)(void))(**(void **)(v0 + 32) + 184))();
  *(void *)(v0 + 48) = v1;
  return MEMORY[0x1F4188298](PegasusApplicationLaunchBehavior.revokeBackgroundAuthorization(for:), v1, 0);
}

{
  Swift::String *v0;
  uint64_t (*object)(void);
  uint64_t v3;

  PegasusApplicationLaunchBehavior.AuthorizationManager.revokeAuthorization(for:)(v0[1]);
  swift_release();
  object = (uint64_t (*)(void))v0->_object;
  return object();
}

uint64_t PegasusApplicationLaunchBehavior.authorizePiP(for:)(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PGBackgroundPIPAuthorizationState>.Iterator);
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PGBackgroundPIPAuthorizationState>?);
  v2[10] = swift_task_alloc();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PGBackgroundPIPAuthorizationState>);
  v2[11] = v4;
  v2[12] = *(void *)(v4 - 8);
  v2[13] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v2[14] = v5;
  v2[15] = *(void *)(v5 - 8);
  v2[16] = swift_task_alloc();
  return MEMORY[0x1F4188298](PegasusApplicationLaunchBehavior.authorizePiP(for:), 0, 0);
}

uint64_t PegasusApplicationLaunchBehavior.authorizePiP(for:)()
{
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v4 = *(void **)(v0 + 40);
  id v5 = objc_msgSend(v4, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  *(void *)(v0 + 136) = UUID.uuidString.getter();
  *(void *)(v0 + 144) = v6;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  id v7 = objc_msgSend(v4, sel_activity);
  id v8 = objc_msgSend(v7, sel_metadata);

  if (!v8) {
    goto LABEL_13;
  }
  id v9 = objc_msgSend(v8, sel_context);

  id v10 = objc_msgSend(v9, sel_typedIdentifier);
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;
  if (v11 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v13 == v14)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if ((v16 & 1) == 0) {
      goto LABEL_13;
    }
  }
  id v17 = objc_msgSend(*(id *)(v0 + 40), sel_activity);
  id v18 = objc_msgSend(v17, sel_bundleIdentifier);

  if (!v18)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type ApplicationLauncher.LaunchError and conformance ApplicationLauncher.LaunchError();
    swift_allocError();
    *id v24 = 3;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    int64_t v25 = *(uint64_t (**)(void))(v0 + 8);
    return v25();
  }
  uint64_t v19 = *(void *)(v0 + 48);
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;

  *(void *)(v0 + 152) = v20;
  *(void *)(v0 + 160) = v22;
  uint64_t v23 = (*(uint64_t (**)(void))(*(void *)v19 + 184))();
  *(void *)(v0 + 168) = v23;
  return MEMORY[0x1F4188298](PegasusApplicationLaunchBehavior.authorizePiP(for:), v23, 0);
}

{
  uint64_t *v0;
  uint64_t v2;

  PegasusApplicationLaunchBehavior.AuthorizationManager.insertAuthorization(activitySessionIdentifier:appBundleIdentifier:)(v0[17], v0[18], v0[19], v0[20], v0[10]);
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x1F4188298](PegasusApplicationLaunchBehavior.authorizePiP(for:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  void *v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v1 = v0[11];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[10];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of AsyncStream<PGBackgroundPIPAuthorizationState>?(v3);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[13], v3, v1);
    AsyncStream.makeAsyncIterator()();
    uint64_t v6 = (void *)swift_task_alloc();
    v0[22] = v6;
    *uint64_t v6 = v0;
    v6[1] = PegasusApplicationLaunchBehavior.authorizePiP(for:);
    id v7 = v0[7];
    return MEMORY[0x1F4187D58](v0 + 2, 0, 0, v7);
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x1F4188298](PegasusApplicationLaunchBehavior.authorizePiP(for:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned char *v18;
  uint64_t (*v19)(void);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v27;
  uint64_t v28;
  uint64_t v29[2];
  uint64_t v30;
  uint64_t v31;

  uint64_t v30 = v0;
  uint64_t v1 = *(void *)(v0 + 16);
  if (*(unsigned char *)(v0 + 24)) {
    goto LABEL_10;
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.info.getter();
  id v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = *(void *)(v0 + 144);
  if (v5)
  {
    id v7 = *(void *)(v0 + 136);
    id v8 = swift_slowAlloc();
    id v9 = swift_slowAlloc();
    v29[0] = v9;
    *(_DWORD *)id v8 = 136315394;
    *(void *)(v0 + 32) = v1;
    type metadata accessor for PGBackgroundPIPAuthorizationState(0);
    id v10 = String.init<A>(reflecting:)();
    *(void *)(v8 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v29);
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v8 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v6, v29);
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v3, v4, "Got PGBackgroundPIPAuthorization authorization transitioned to state %s for session id %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v9, -1, -1);
    MEMORY[0x1B3EA39E0](v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  if ((unint64_t)(v1 - 4) < 2)
  {
    uint64_t v13 = *(void *)(v0 + 96);
    uint64_t v12 = *(void *)(v0 + 104);
    uint64_t v14 = *(void *)(v0 + 88);
    char v16 = *(void *)(v0 + 64);
    uint64_t v15 = *(void *)(v0 + 72);
    id v17 = *(void *)(v0 + 56);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type ApplicationLauncher.LaunchError and conformance ApplicationLauncher.LaunchError();
    swift_allocError();
    *id v18 = 1;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
LABEL_11:
    return v19();
  }
  if (v1 == 2)
  {
LABEL_10:
    uint64_t v21 = *(void *)(v0 + 96);
    uint64_t v20 = *(void *)(v0 + 104);
    uint64_t v22 = *(void *)(v0 + 88);
    id v24 = *(void *)(v0 + 64);
    uint64_t v23 = *(void *)(v0 + 72);
    int64_t v25 = *(void *)(v0 + 56);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_11;
  }
  uint64_t v27 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v27;
  *uint64_t v27 = v0;
  v27[1] = PegasusApplicationLaunchBehavior.authorizePiP(for:);
  unint64_t v28 = *(void *)(v0 + 56);
  return MEMORY[0x1F4187D58](v0 + 16, 0, 0, v28);
}

uint64_t PegasusApplicationLaunchBehavior.init()()
{
  type metadata accessor for PegasusApplicationLaunchBehavior.AuthorizationManager();
  uint64_t v1 = swift_allocObject();
  swift_retain();
  swift_defaultActor_initialize();
  uint64_t v2 = MEMORY[0x1E4FBC868];
  *(void *)(v1 + 112) = MEMORY[0x1E4FBC868];
  *(void *)(v0 + 24) = v1;
  swift_release();
  type metadata accessor for BackgroundApplicationLaunchBehavior.AssertionStore();
  uint64_t v3 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v3 + 112) = v2;
  *(void *)(v0 + 16) = v3;
  return v0;
}

uint64_t type metadata accessor for PegasusApplicationLaunchBehavior.AuthorizationManager()
{
  return self;
}

uint64_t PegasusApplicationLaunchBehavior.__ivar_destroyer()
{
  return swift_release();
}

uint64_t PegasusApplicationLaunchBehavior.deinit()
{
  swift_release();
  swift_release();
  return v0;
}

uint64_t PegasusApplicationLaunchBehavior.__deallocating_deinit()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t key path setter for PegasusApplicationLaunchBehavior.AuthorizationManager.authorizations : PegasusApplicationLaunchBehavior.AuthorizationManager(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 112) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t PegasusApplicationLaunchBehavior.AuthorizationManager.authorizations.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PegasusApplicationLaunchBehavior.AuthorizationManager.authorizations.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 112) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*PegasusApplicationLaunchBehavior.AuthorizationManager.authorizations.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

uint64_t PegasusApplicationLaunchBehavior.AuthorizationManager.insertAuthorization(activitySessionIdentifier:appBundleIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v25 = a4;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PGBackgroundPIPAuthorizationState>.Continuation.BufferingPolicy);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_beginAccess();
  uint64_t v16 = *(void *)(v5 + 112);
  if (*(void *)(v16 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if (v18)
    {
      id v19 = *(id *)(*(void *)(v16 + 56) + 8 * v17);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (objc_msgSend(v19, sel_state) == (id)1 || objc_msgSend(v19, sel_state) == (id)2)
      {

LABEL_6:
        uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PGBackgroundPIPAuthorizationState>);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(a5, 1, 1, v20);
      }
      id v24 = objc_msgSend(v19, sel_state);

      if (v24 == (id)3) {
        goto LABEL_6;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v15 = swift_bridgeObjectRelease();
    }
  }
  MEMORY[0x1F4188790](v15);
  *(&v25 - 6) = a1;
  *(&v25 - 5) = a2;
  uint64_t v22 = v25;
  *(&v25 - 4) = a3;
  *(&v25 - 3) = v22;
  *(&v25 - 2) = v6;
  type metadata accessor for PGBackgroundPIPAuthorizationState(0);
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, *MEMORY[0x1E4FBD028], v11);
  AsyncStream.init(_:bufferingPolicy:_:)();
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PGBackgroundPIPAuthorizationState>);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(a5, 0, 1, v23);
}

void closure #1 in PegasusApplicationLaunchBehavior.AuthorizationManager.insertAuthorization(activitySessionIdentifier:appBundleIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v24 = a4;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PGBackgroundPIPAuthorizationState>.Continuation);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x1F4188790](v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v11);
  unint64_t v14 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v15 + v14, (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  id v16 = objc_allocWithZone(MEMORY[0x1E4F88560]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v17 = a2;
  char v18 = (void *)MEMORY[0x1B3EA1B00](a2, a3);
  swift_bridgeObjectRelease();
  id v19 = (void *)MEMORY[0x1B3EA1B00](v24, a5);
  swift_bridgeObjectRelease();
  aBlock[4] = partial apply for closure #1 in closure #1 in PegasusApplicationLaunchBehavior.AuthorizationManager.insertAuthorization(activitySessionIdentifier:appBundleIdentifier:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed PGBackgroundPIPAuthorization, @unowned PGBackgroundPIPAuthorizationState) -> ();
  aBlock[3] = &block_descriptor_16;
  uint64_t v20 = _Block_copy(aBlock);
  id v21 = objc_msgSend(v16, sel_initWithActivitySessionIdentifier_appBundleIdentifier_stateTransitionHandler_, v18, v19, v20);

  _Block_release(v20);
  swift_release();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  id v22 = v21;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v25 = *(void *)(a6 + 112);
  *(void *)(a6 + 112) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v22, v17, a3, isUniquelyReferenced_nonNull_native);
  *(void *)(a6 + 112) = v25;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
}

void closure #1 in closure #1 in PegasusApplicationLaunchBehavior.AuthorizationManager.insertAuthorization(activitySessionIdentifier:appBundleIdentifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PGBackgroundPIPAuthorizationState>.Continuation.YieldResult);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7[1] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PGBackgroundPIPAuthorizationState>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if ((a2 & 0xFFFFFFFFFFFFFFFELL) == 4) {
    AsyncStream.Continuation.finish()();
  }
}

Swift::Void __swiftcall PegasusApplicationLaunchBehavior.AuthorizationManager.revokeAuthorization(for:)(Swift::String a1)
{
  uint64_t v2 = v1;
  id object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  if (one-time initialization token for default == -1) {
    goto LABEL_2;
  }
  while (1)
  {
    swift_once();
LABEL_2:
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.default);
    swift_bridgeObjectRetain_n();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      id v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      v40[0] = v8;
      *(_DWORD *)id v7 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B0DF7000, v5, v6, "Request to remove PiP authorizations for %s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v8, -1, -1);
      MEMORY[0x1B3EA39E0](v7, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    id v9 = (uint64_t *)(v2 + 112);
    swift_beginAccess();
    uint64_t v2 = *(void *)(v2 + 112);
    uint64_t v35 = v2 + 64;
    uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v11 = -1;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    unint64_t v12 = v11 & *(void *)(v2 + 64);
    int64_t v36 = (unint64_t)(v10 + 63) >> 6;
    swift_bridgeObjectRetain();
    int64_t v13 = 0;
    id v37 = object;
    if (v12)
    {
      while (1)
      {
        unint64_t v14 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v15 = v14 | (v13 << 6);
LABEL_25:
        id v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
        uint64_t v20 = *v19;
        uint64_t v21 = v19[1];
        id v22 = *(void **)(*(void *)(v2 + 56) + 8 * v15);
        swift_bridgeObjectRetain();
        id v23 = v22;
        id object = objc_msgSend(v23, sel_appBundleIdentifier);
        uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v26 = v25;

        if (v24 == countAndFlagsBits && v26 == v37) {
          break;
        }
        char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v28)
        {
LABEL_33:
          objc_msgSend(v23, sel_revoke);
          swift_beginAccess();
          swift_bridgeObjectRetain();
          unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
          char v31 = v30;
          swift_bridgeObjectRelease();
          if (v31)
          {
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v33 = *v9;
            uint64_t v39 = *v9;
            *id v9 = 0x8000000000000000;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              specialized _NativeDictionary.copy()();
              uint64_t v33 = v39;
            }
            swift_bridgeObjectRelease();
            uint64_t v34 = *(void **)(*(void *)(v33 + 56) + 8 * v29);
            specialized _NativeDictionary._delete(at:)(v29, v33);
            *id v9 = v33;

            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          swift_endAccess();

          if (!v12) {
            goto LABEL_11;
          }
        }
        else
        {
          swift_bridgeObjectRelease();

          if (!v12) {
            goto LABEL_11;
          }
        }
      }
      swift_bridgeObjectRelease();
      goto LABEL_33;
    }
LABEL_11:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v16 >= v36) {
      break;
    }
    unint64_t v17 = *(void *)(v35 + 8 * v16);
    ++v13;
    if (v17) {
      goto LABEL_24;
    }
    int64_t v13 = v16 + 1;
    if (v16 + 1 >= v36) {
      break;
    }
    unint64_t v17 = *(void *)(v35 + 8 * v13);
    if (v17) {
      goto LABEL_24;
    }
    int64_t v13 = v16 + 2;
    if (v16 + 2 >= v36) {
      break;
    }
    unint64_t v17 = *(void *)(v35 + 8 * v13);
    if (v17) {
      goto LABEL_24;
    }
    int64_t v18 = v16 + 3;
    if (v18 >= v36) {
      break;
    }
    unint64_t v17 = *(void *)(v35 + 8 * v18);
    if (v17)
    {
      int64_t v13 = v18;
LABEL_24:
      unint64_t v12 = (v17 - 1) & v17;
      unint64_t v15 = __clz(__rbit64(v17)) + (v13 << 6);
      goto LABEL_25;
    }
    while (1)
    {
      int64_t v13 = v18 + 1;
      if (__OFADD__(v18, 1)) {
        break;
      }
      if (v13 >= v36) {
        goto LABEL_37;
      }
      unint64_t v17 = *(void *)(v35 + 8 * v13);
      ++v18;
      if (v17) {
        goto LABEL_24;
      }
    }
LABEL_39:
    __break(1u);
  }
LABEL_37:
  swift_release();
}

uint64_t PegasusApplicationLaunchBehavior.AuthorizationManager.deinit()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t PegasusApplicationLaunchBehavior.AuthorizationManager.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return MEMORY[0x1F4188210](v0);
}

uint64_t PegasusApplicationLaunchBehavior.AuthorizationManager.init()()
{
  swift_defaultActor_initialize();
  *(void *)(v0 + 112) = MEMORY[0x1E4FBC868];
  return v0;
}

uint64_t PegasusApplicationLaunchBehavior.AuthorizationManager.unownedExecutor.getter()
{
  return v0;
}

uint64_t protocol witness for Actor.unownedExecutor.getter in conformance PegasusApplicationLaunchBehavior.AuthorizationManager()
{
  return v0;
}

void thunk for @escaping @callee_guaranteed (@guaranteed PGBackgroundPIPAuthorization, @unowned PGBackgroundPIPAuthorizationState) -> ()(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t outlined destroy of AsyncStream<PGBackgroundPIPAuthorizationState>?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PGBackgroundPIPAuthorizationState>?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void partial apply for closure #1 in PegasusApplicationLaunchBehavior.AuthorizationManager.insertAuthorization(activitySessionIdentifier:appBundleIdentifier:)(uint64_t a1)
{
  closure #1 in PegasusApplicationLaunchBehavior.AuthorizationManager.insertAuthorization(activitySessionIdentifier:appBundleIdentifier:)(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        uint64_t v10 = (void *)(v9 + 8 * v6);
        uint64_t result = static Hasher._hash(seed:_:)();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            unint64_t v14 = (void *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              *unint64_t v14 = *v10;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            int64_t v16 = (void *)(v15 + 8 * v3);
            unint64_t v17 = (void *)(v15 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 1))
            {
              *int64_t v16 = *v17;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    int64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    int64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *int64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        uint64_t v10 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          unint64_t v12 = *(void *)(a2 + 48);
          int64_t v13 = (_OWORD *)(v12 + 16 * v3);
          unint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            void *v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          int64_t v16 = (_OWORD *)(v15 + 32 * v3);
          unint64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            uint64_t v9 = v17[1];
            *int64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    int64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    int64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *int64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        uint64_t v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          unint64_t v11 = *(void *)(a2 + 48);
          unint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          int64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *unint64_t v12 = *v13;
          }
          unint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          int64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    int64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    int64_t v18 = (-1 << result) - 1;
  }
  *unint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = __OFSUB__(v20, 1);
  BOOL v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        uint64_t v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          unint64_t v11 = *(void *)(a2 + 48);
          unint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          int64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *unint64_t v12 = *v13;
          }
          unint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          int64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    int64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    int64_t v18 = (-1 << result) - 1;
  }
  *unint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = __OFSUB__(v20, 1);
  BOOL v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  long long v10;
  Swift::Int v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  unint64_t v17;
  long long *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        unint64_t v11 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          int64_t v13 = *(void *)(a2 + 48);
          unint64_t v14 = (_OWORD *)(v13 + 16 * v3);
          uint64_t v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1) {
            *unint64_t v14 = *v15;
          }
          int64_t v16 = *(void *)(a2 + 56);
          unint64_t v17 = v16 + 40 * v3;
          int64_t v18 = (long long *)(v16 + 40 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v17 >= (unint64_t)v18 + 40))
          {
            uint64_t v9 = *v18;
            uint64_t v10 = v18[1];
            *(void *)(v17 + 32) = *((void *)v18 + 4);
            *(_OWORD *)unint64_t v17 = v9;
            *(_OWORD *)(v17 + 16) = v10;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *uint64_t v19 = v21 & v20;
  BOOL v22 = *(void *)(a2 + 16);
  uint64_t v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  long long *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(a2 + 48);
        unint64_t v11 = (void *)(v10 + 8 * v6);
        uint64_t result = static Hasher._hash(seed:_:)();
        unint64_t v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 >= v8 && v3 >= (uint64_t)v12)
          {
LABEL_16:
            uint64_t v15 = (void *)(v10 + 8 * v3);
            if (v3 != v6 || v15 >= v11 + 1) {
              *uint64_t v15 = *v11;
            }
            int64_t v16 = *(void *)(a2 + 56);
            unint64_t v17 = v16 + 24 * v3;
            int64_t v18 = (long long *)(v16 + 24 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v17 >= (unint64_t)v18 + 24))
            {
              uint64_t v9 = *v18;
              *(void *)(v17 + 16) = *((void *)v18 + 2);
              *(_OWORD *)unint64_t v17 = v9;
              int64_t v3 = v6;
            }
          }
        }
        else if (v12 >= v8 || v3 >= (uint64_t)v12)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *uint64_t v19 = v21 & v20;
  BOOL v22 = *(void *)(a2 + 16);
  uint64_t v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  void *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        uint64_t v10 = (void *)(v9 + 8 * v6);
        uint64_t result = static Hasher._hash(seed:_:)();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            unint64_t v14 = (void *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              *unint64_t v14 = *v10;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            int64_t v16 = (_OWORD *)(v15 + 16 * v3);
            unint64_t v17 = (_OWORD *)(v15 + 16 * v6);
            if (16 * v3 != 16 * v6 || (int64_t v3 = v6, v16 >= v17 + 1))
            {
              *int64_t v16 = *v17;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    int64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    int64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *int64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        uint64_t v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v10 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        unint64_t v11 = *(void *)(a2 + 48);
        unint64_t v12 = (_OWORD *)(v11 + 16 * v3);
        int64_t v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1) {
          *unint64_t v12 = *v13;
        }
        unint64_t v14 = *(void *)(a2 + 56);
        uint64_t v15 = *(void *)(*(void *)(type metadata accessor for Date() - 8) + 72);
        int64_t v16 = v15 * v3;
        uint64_t result = v14 + v15 * v3;
        unint64_t v17 = v15 * v6;
        int64_t v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          uint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v16 == v17) {
            goto LABEL_6;
          }
          uint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v10 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v10) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    BOOL v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    BOOL v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  uint64_t v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = MEMORY[0x1F4188790](v4);
  unint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v37 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v37;
    if ((*(void *)(v37 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v35 = (result + 1) & v11;
      unint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v34 = v14;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v36 = v13;
      int64_t v16 = (uint64_t (**)(char *, uint64_t))(v13 - 8);
      do
      {
        int64_t v17 = v15 * v10;
        v34(v8, *(void *)(a2 + 48) + v15 * v10, v4);
        lazy protocol witness table accessor for type UUID and conformance UUID();
        uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v16)(v8, v4);
        unint64_t v19 = v18 & v11;
        if (a1 >= (uint64_t)v35)
        {
          if (v19 >= v35 && a1 >= (uint64_t)v19)
          {
LABEL_17:
            uint64_t v22 = *(void *)(a2 + 48);
            unint64_t result = v22 + v15 * a1;
            unint64_t v23 = v22 + v17 + v15;
            if (v15 * a1 < v17 || result >= v23)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v17)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v25 = *(void *)(a2 + 56);
            id v26 = (void *)(v25 + 8 * a1);
            uint64_t v27 = (void *)(v25 + 8 * v10);
            uint64_t v12 = v37;
            if (a1 != v10 || (a1 = v10, v26 >= v27 + 1))
            {
              *id v26 = *v27;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v35 || a1 >= (uint64_t)v19)
        {
          goto LABEL_17;
        }
        uint64_t v12 = v37;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    char v28 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v29 = *v28;
    uint64_t v30 = (-1 << a1) - 1;
  }
  else
  {
    char v28 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v28;
    uint64_t v29 = (-1 << a1) - 1;
  }
  uint64_t *v28 = v30 & v29;
  uint64_t v31 = *(void *)(a2 + 16);
  BOOL v32 = __OFSUB__(v31, 1);
  uint64_t v33 = v31 - 1;
  if (v32)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v33;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  uint64_t (**v16)(char *, uint64_t);
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  void (*v34)(char *, unint64_t, uint64_t);
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;

  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = MEMORY[0x1F4188790](v4);
  unint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v37 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v37;
    if ((*(void *)(v37 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v35 = (result + 1) & v11;
      unint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v34 = v14;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v36 = v13;
      int64_t v16 = (uint64_t (**)(char *, uint64_t))(v13 - 8);
      do
      {
        int64_t v17 = v15 * v10;
        v34(v8, *(void *)(a2 + 48) + v15 * v10, v4);
        lazy protocol witness table accessor for type UUID and conformance UUID();
        uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v16)(v8, v4);
        unint64_t v19 = v18 & v11;
        if (a1 >= (uint64_t)v35)
        {
          if (v19 >= v35 && a1 >= (uint64_t)v19)
          {
LABEL_17:
            uint64_t v22 = *(void *)(a2 + 48);
            unint64_t result = v22 + v15 * a1;
            unint64_t v23 = v22 + v17 + v15;
            if (v15 * a1 < v17 || result >= v23)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v17)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v25 = *(void *)(a2 + 56);
            id v26 = (_OWORD *)(v25 + 16 * a1);
            uint64_t v27 = (_OWORD *)(v25 + 16 * v10);
            uint64_t v12 = v37;
            if (a1 != v10 || (a1 = v10, v26 >= v27 + 1))
            {
              *id v26 = *v27;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v35 || a1 >= (uint64_t)v19)
        {
          goto LABEL_17;
        }
        uint64_t v12 = v37;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    char v28 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v29 = *v28;
    uint64_t v30 = (-1 << a1) - 1;
  }
  else
  {
    char v28 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v28;
    uint64_t v29 = (-1 << a1) - 1;
  }
  uint64_t *v28 = v30 & v29;
  uint64_t v31 = *(void *)(a2 + 16);
  BOOL v32 = __OFSUB__(v31, 1);
  uint64_t v33 = v31 - 1;
  if (v32)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v33;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t a1, uint64_t a2)
{
  return specialized _NativeDictionary._delete(at:)(a1, a2, MEMORY[0x1E4F38980]);
}

{
  return specialized _NativeDictionary._delete(at:)(a1, a2, type metadata accessor for AttachmentLedger_AttachmentEncryption);
}

{
  return specialized _NativeDictionary._delete(at:)(a1, a2, MEMORY[0x1E4F27990]);
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2, uint64_t (*a3)(void))
{
  int64_t v4 = result;
  uint64_t v5 = a2 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v7 = (result + 1) & ~v6;
  if (((1 << v7) & *(void *)(a2 + 64 + 8 * (v7 >> 6))) != 0)
  {
    uint64_t v9 = ~v6;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v5 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
    {
      unint64_t v10 = (result + 1) & v9;
      do
      {
        uint64_t v11 = *(void *)(a2 + 48);
        uint64_t v12 = (void *)(v11 + 8 * v7);
        unint64_t result = static Hasher._hash(seed:_:)();
        unint64_t v13 = result & v9;
        if (v4 >= (uint64_t)v10)
        {
          if (v13 < v10 || v4 < (uint64_t)v13) {
            goto LABEL_6;
          }
        }
        else if (v13 < v10 && v4 < (uint64_t)v13)
        {
          goto LABEL_6;
        }
        int64_t v16 = (void *)(v11 + 8 * v4);
        if (v4 != v7 || v16 >= v12 + 1) {
          *int64_t v16 = *v12;
        }
        uint64_t v17 = *(void *)(a2 + 56);
        uint64_t v18 = *(void *)(*(void *)(a3(0) - 8) + 72);
        int64_t v19 = v18 * v4;
        unint64_t result = v17 + v18 * v4;
        int64_t v20 = v18 * v7;
        unint64_t v21 = v17 + v18 * v7 + v18;
        if (v19 < v20 || result >= v21)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v4 = v7;
          if (v19 == v20) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v4 = v7;
LABEL_6:
        unint64_t v7 = (v7 + 1) & v9;
      }
      while (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
    }
    unint64_t v23 = (uint64_t *)(v5 + 8 * ((unint64_t)v4 >> 6));
    uint64_t v24 = *v23;
    uint64_t v25 = (-1 << v4) - 1;
  }
  else
  {
    unint64_t v23 = (uint64_t *)(v5 + 8 * (result >> 6));
    uint64_t v25 = *v23;
    uint64_t v24 = (-1 << result) - 1;
  }
  *unint64_t v23 = v25 & v24;
  uint64_t v26 = *(void *)(a2 + 16);
  BOOL v27 = __OFSUB__(v26, 1);
  uint64_t v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_1B0FB9DCC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 184))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0FB9E18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 192);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1B0FB9E6C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  *a2 = *(void *)(v3 + 112);
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for PegasusApplicationLaunchBehavior()
{
  return self;
}

uint64_t method lookup function for PegasusApplicationLaunchBehavior(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PegasusApplicationLaunchBehavior);
}

uint64_t dispatch thunk of PegasusApplicationLaunchBehavior.authorizationManager.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of PegasusApplicationLaunchBehavior.authorizationManager.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of PegasusApplicationLaunchBehavior.authorizationManager.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of PegasusApplicationLaunchBehavior.authorizePiP(for:)(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 216) + **(int **)(*(void *)v1 + 216));
  int64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return v6(a1);
}

uint64_t method lookup function for PegasusApplicationLaunchBehavior.AuthorizationManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PegasusApplicationLaunchBehavior.AuthorizationManager);
}

uint64_t dispatch thunk of PegasusApplicationLaunchBehavior.AuthorizationManager.authorizations.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of PegasusApplicationLaunchBehavior.AuthorizationManager.authorizations.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of PegasusApplicationLaunchBehavior.AuthorizationManager.authorizations.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of PegasusApplicationLaunchBehavior.AuthorizationManager.insertAuthorization(activitySessionIdentifier:appBundleIdentifier:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of PegasusApplicationLaunchBehavior.AuthorizationManager.revokeAuthorization(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of PegasusApplicationLaunchBehavior.AuthorizationManager.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t sub_1B0FBA148()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PGBackgroundPIPAuthorizationState>.Continuation);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x1F4186498](v0, v5, v6);
}

void partial apply for closure #1 in closure #1 in PegasusApplicationLaunchBehavior.AuthorizationManager.insertAuthorization(activitySessionIdentifier:appBundleIdentifier:)(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PGBackgroundPIPAuthorizationState>.Continuation);
  closure #1 in closure #1 in PegasusApplicationLaunchBehavior.AuthorizationManager.insertAuthorization(activitySessionIdentifier:appBundleIdentifier:)(a1, a2);
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

uint64_t ActivitySessionClientConnection.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + direct field offset for ActivitySessionClientConnection.id;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t key path getter for ActivitySessionClientConnection.serverDisconnectedCallback : ActivitySessionClientConnection@<X0>(void *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = (uint64_t *)(*a1 + direct field offset for ActivitySessionClientConnection.serverDisconnectedCallback);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    uint64_t v7 = partial apply for thunk for @callee_guaranteed () -> ();
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v4);
}

uint64_t key path setter for ActivitySessionClientConnection.serverDisconnectedCallback : ActivitySessionClientConnection(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed () -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = (uint64_t *)(*a2 + direct field offset for ActivitySessionClientConnection.serverDisconnectedCallback);
  swift_beginAccess();
  uint64_t v8 = *v7;
  *uint64_t v7 = (uint64_t)v6;
  v7[1] = v5;
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v3);
  return _sxRi_zRi0_zlyytIseghHr_SgWOe(v8);
}

uint64_t ActivitySessionClientConnection.serverDisconnectedCallback.getter()
{
  return ActivitySessionClientConnection.serverDisconnectedCallback.getter(&direct field offset for ActivitySessionClientConnection.serverDisconnectedCallback, (void (*)(void, void))outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?);
}

uint64_t ActivitySessionClientConnection.serverDisconnectedCallback.setter(uint64_t a1, uint64_t a2)
{
  return ActivitySessionClientConnection.serverDisconnectedCallback.setter(a1, a2, &direct field offset for ActivitySessionClientConnection.serverDisconnectedCallback, (uint64_t (*)(uint64_t, uint64_t))_sxRi_zRi0_zlyytIseghHr_SgWOe);
}

uint64_t (*ActivitySessionClientConnection.serverDisconnectedCallback.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t key path getter for ActivitySessionClientConnection.setStateCallback : ActivitySessionClientConnection@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(*a1 + direct field offset for ActivitySessionClientConnection.setStateCallback);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    uint64_t v7 = partial apply for thunk for @escaping @callee_guaranteed (@unowned CPActivitySessionState, @guaranteed Error?) -> ();
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = v6;
  return outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v4);
}

uint64_t key path setter for ActivitySessionClientConnection.setStateCallback : ActivitySessionClientConnection(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CPActivitySessionState, @in_guaranteed Error?) -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = (uint64_t *)(*a2 + direct field offset for ActivitySessionClientConnection.setStateCallback);
  swift_beginAccess();
  uint64_t v8 = *v7;
  *uint64_t v7 = (uint64_t)v6;
  v7[1] = v5;
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v3);
  return _sxRi_zRi0_zlyytIseghHr_SgWOe(v8);
}

uint64_t ActivitySessionClientConnection.setStateCallback.getter()
{
  return ActivitySessionClientConnection.serverDisconnectedCallback.getter(&direct field offset for ActivitySessionClientConnection.setStateCallback, (void (*)(void, void))outlined copy of (@escaping @callee_guaranteed (@unowned CPActivitySessionState, @guaranteed Error?) -> ())?);
}

uint64_t ActivitySessionClientConnection.setStateCallback.setter(uint64_t a1, uint64_t a2)
{
  return ActivitySessionClientConnection.serverDisconnectedCallback.setter(a1, a2, &direct field offset for ActivitySessionClientConnection.setStateCallback, (uint64_t (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned CPActivitySessionState, @guaranteed Error?) -> ())?);
}

uint64_t (*ActivitySessionClientConnection.setStateCallback.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t key path getter for ActivitySessionClientConnection.setAssociatedSceneCallback : ActivitySessionClientConnection@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(*a1 + direct field offset for ActivitySessionClientConnection.setAssociatedSceneCallback);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    uint64_t v7 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String?) -> ();
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = v6;
  return outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v4);
}

uint64_t key path setter for ActivitySessionClientConnection.setAssociatedSceneCallback : ActivitySessionClientConnection(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed String?) -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = (uint64_t *)(*a2 + direct field offset for ActivitySessionClientConnection.setAssociatedSceneCallback);
  swift_beginAccess();
  uint64_t v8 = *v7;
  *uint64_t v7 = (uint64_t)v6;
  v7[1] = v5;
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v3);
  return _sxRi_zRi0_zlyytIseghHr_SgWOe(v8);
}

uint64_t ActivitySessionClientConnection.setAssociatedSceneCallback.getter()
{
  return ActivitySessionClientConnection.serverDisconnectedCallback.getter(&direct field offset for ActivitySessionClientConnection.setAssociatedSceneCallback, (void (*)(void, void))outlined copy of (@escaping @callee_guaranteed (@unowned CPActivitySessionState, @guaranteed Error?) -> ())?);
}

uint64_t ActivitySessionClientConnection.setAssociatedSceneCallback.setter(uint64_t a1, uint64_t a2)
{
  return ActivitySessionClientConnection.serverDisconnectedCallback.setter(a1, a2, &direct field offset for ActivitySessionClientConnection.setAssociatedSceneCallback, (uint64_t (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned CPActivitySessionState, @guaranteed Error?) -> ())?);
}

uint64_t (*ActivitySessionClientConnection.setAssociatedSceneCallback.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t key path getter for ActivitySessionClientConnection.setDataCryptorCallback : ActivitySessionClientConnection@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(*a1 + direct field offset for ActivitySessionClientConnection.setDataCryptorCallback);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    uint64_t v7 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed BMGroupActivitySessionEvent) -> ();
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = v6;
  return outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v4);
}

uint64_t key path setter for ActivitySessionClientConnection.setDataCryptorCallback : ActivitySessionClientConnection(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed BMGroupActivitySessionEvent) -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = (uint64_t *)(*a2 + direct field offset for ActivitySessionClientConnection.setDataCryptorCallback);
  swift_beginAccess();
  uint64_t v8 = *v7;
  *uint64_t v7 = (uint64_t)v6;
  v7[1] = v5;
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v3);
  return _sxRi_zRi0_zlyytIseghHr_SgWOe(v8);
}

uint64_t ActivitySessionClientConnection.setDataCryptorCallback.getter()
{
  return ActivitySessionClientConnection.serverDisconnectedCallback.getter(&direct field offset for ActivitySessionClientConnection.setDataCryptorCallback, (void (*)(void, void))outlined copy of (@escaping @callee_guaranteed (@unowned CPActivitySessionState, @guaranteed Error?) -> ())?);
}

uint64_t ActivitySessionClientConnection.setDataCryptorCallback.setter(uint64_t a1, uint64_t a2)
{
  return ActivitySessionClientConnection.serverDisconnectedCallback.setter(a1, a2, &direct field offset for ActivitySessionClientConnection.setDataCryptorCallback, (uint64_t (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned CPActivitySessionState, @guaranteed Error?) -> ())?);
}

uint64_t (*ActivitySessionClientConnection.setDataCryptorCallback.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t ActivitySessionClientConnection.setActivityPublisher.getter()
{
  return swift_retain();
}

uint64_t ActivitySessionClientConnection.setActivityPublisher.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + direct field offset for ActivitySessionClientConnection.setActivityPublisher);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_release();
}

uint64_t (*ActivitySessionClientConnection.setActivityPublisher.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

uint64_t key path getter for ActivitySessionClientConnection.receivedResourceCallback : ActivitySessionClientConnection@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(*a1 + direct field offset for ActivitySessionClientConnection.receivedResourceCallback);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    uint64_t v7 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed TUSandboxExtendedURL, @guaranteed Data, @unowned UInt64) -> ();
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = v6;
  return outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v4);
}

uint64_t key path setter for ActivitySessionClientConnection.receivedResourceCallback : ActivitySessionClientConnection(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed TUSandboxExtendedURL, @in_guaranteed Data, @in_guaranteed UInt64) -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = (uint64_t *)(*a2 + direct field offset for ActivitySessionClientConnection.receivedResourceCallback);
  swift_beginAccess();
  uint64_t v8 = *v7;
  *uint64_t v7 = (uint64_t)v6;
  v7[1] = v5;
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v3);
  return _sxRi_zRi0_zlyytIseghHr_SgWOe(v8);
}

uint64_t ActivitySessionClientConnection.receivedResourceCallback.getter()
{
  return ActivitySessionClientConnection.serverDisconnectedCallback.getter(&direct field offset for ActivitySessionClientConnection.receivedResourceCallback, (void (*)(void, void))outlined copy of (@escaping @callee_guaranteed (@unowned CPActivitySessionState, @guaranteed Error?) -> ())?);
}

uint64_t ActivitySessionClientConnection.serverDisconnectedCallback.getter(void *a1, void (*a2)(void, void))
{
  uint64_t v4 = (void *)(v2 + *a1);
  swift_beginAccess();
  uint64_t v5 = *v4;
  a2(*v4, v4[1]);
  return v5;
}

uint64_t ActivitySessionClientConnection.receivedResourceCallback.setter(uint64_t a1, uint64_t a2)
{
  return ActivitySessionClientConnection.serverDisconnectedCallback.setter(a1, a2, &direct field offset for ActivitySessionClientConnection.receivedResourceCallback, (uint64_t (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned CPActivitySessionState, @guaranteed Error?) -> ())?);
}

uint64_t ActivitySessionClientConnection.serverDisconnectedCallback.setter(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v8 = (uint64_t *)(v4 + *a3);
  swift_beginAccess();
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  *uint64_t v8 = a1;
  v8[1] = a2;
  return a4(v9, v10);
}

uint64_t (*ActivitySessionClientConnection.receivedResourceCallback.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t ActivitySessionClientConnection.shouldTranslateParticipantIDs.getter()
{
  uint64_t v1 = direct field offset for ActivitySessionClientConnection.$__lazy_storage_$_shouldTranslateParticipantIDs;
  int v2 = v0[direct field offset for ActivitySessionClientConnection.$__lazy_storage_$_shouldTranslateParticipantIDs];
  if (v2 == 2)
  {
    char v3 = closure #1 in ActivitySessionClientConnection.shouldTranslateParticipantIDs.getter(v0);
    v0[v1] = v3 & 1;
  }
  else
  {
    char v3 = v2 & 1;
  }
  return v3 & 1;
}

uint64_t ActivitySessionClientConnection.shouldTranslateParticipantIDs.setter(uint64_t result)
{
  *(unsigned char *)(v1 + direct field offset for ActivitySessionClientConnection.$__lazy_storage_$_shouldTranslateParticipantIDs) = result;
  return result;
}

uint64_t closure #1 in ActivitySessionClientConnection.shouldTranslateParticipantIDs.getter(void *a1)
{
  int v2 = self;
  id v3 = objc_msgSend(v2, sel_processInfo);
  char v4 = specialized NSProcessInfo.getEntitlementBoolValue(_:)(0xD00000000000001CLL, 0x80000001B115AB30);

  id v5 = objc_msgSend(v2, sel_processInfo);
  char v6 = specialized NSProcessInfo.getEntitlementBoolValue(_:)(0xD00000000000001FLL, 0x80000001B115AC30);

  if (v6 == 2)
  {
    int v7 = 0;
  }
  else
  {
    int v7 = v6 & 1;
    if (v4)
    {
      uint64_t v8 = 1;
      goto LABEL_6;
    }
  }
  id v9 = objc_msgSend(objc_allocWithZone((Class)CPFeatureFlags), sel_init);
  unsigned int v10 = objc_msgSend(v9, sel_gameCenterFastSyncTransport);

  uint64_t v8 = v10 & v7;
LABEL_6:
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.default);
  id v12 = a1;
  unint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    uint64_t v29 = v16;
    *(_DWORD *)uint64_t v15 = 67110146;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 8) = 2080;
    id v17 = objc_msgSend(self, sel_mainBundle);
    id v18 = objc_msgSend(v17, sel_bundleIdentifier);

    if (v18)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v19 = String.init<A>(reflecting:)();
      unint64_t v21 = v20;
    }
    else
    {
      unint64_t v21 = 0xE300000000000000;
      uint64_t v19 = 7104878;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 18) = 2080;
    uint64_t v22 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 28) = 2080;
    uint64_t v24 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 38) = 2080;
    uint64_t v26 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v13, v14, "[Translation] Translating=%{BOOL}d, bundleID=%s entitledToUsePrivateAPI=%s entitledToUseGameCenter=%s self=%s", (uint8_t *)v15, 0x30u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v16, -1, -1);
    MEMORY[0x1B3EA39E0](v15, -1, -1);

    return v8;
  }
  else
  {
  }
  return v8;
}

uint64_t (*ActivitySessionClientConnection.shouldTranslateParticipantIDs.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = ActivitySessionClientConnection.shouldTranslateParticipantIDs.getter() & 1;
  return ActivitySessionClientConnection.shouldTranslateParticipantIDs.modify;
}

uint64_t ActivitySessionClientConnection.shouldTranslateParticipantIDs.modify(uint64_t result)
{
  *(unsigned char *)(*(void *)result
           + direct field offset for ActivitySessionClientConnection.$__lazy_storage_$_shouldTranslateParticipantIDs) = *(unsigned char *)(result + 8);
  return result;
}

Swift::Void __swiftcall ActivitySessionClientConnection.handleServerDisconnect()()
{
  uint64_t v1 = (void (**)(uint64_t))(v0
                                     + direct field offset for ActivitySessionClientConnection.serverDisconnectedCallback);
  swift_beginAccess();
  int v2 = *v1;
  if (*v1)
  {
    uint64_t v3 = swift_retain();
    v2(v3);
    _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v2);
  }
}

uint64_t ActivitySessionClientConnection.requestParticipants(for:)(uint64_t a1)
{
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = 0;
  char v4 = (id *)(v3 + 16);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = MEMORY[0x1E4FBC870];
  dispatch_queue_t v14 = *(dispatch_queue_t *)&v1[direct field offset for XPCClient.queue];
  char v6 = (void *)swift_allocObject();
  v6[2] = v1;
  v6[3] = a1;
  v6[4] = v5;
  v6[5] = v3;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = partial apply for closure #1 in ActivitySessionClientConnection.requestParticipants(for:);
  *(void *)(v7 + 24) = v6;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v7;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_17;
  uint64_t v8 = _Block_copy(aBlock);
  id v9 = v1;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v14, v8);
  _Block_release(v8);
  uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    swift_beginAccess();
    if (*v4)
    {
      id v12 = *v4;
      swift_willThrow();
    }
    else
    {
      swift_beginAccess();
      uint64_t isEscapingClosureAtFileLocation = *(void *)(v5 + 16);
      swift_bridgeObjectRetain();
    }
    swift_release();
    swift_release();
    swift_release();
    return isEscapingClosureAtFileLocation;
  }
  return result;
}

uint64_t sub_1B0FBB668()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B0FBB6A0()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t closure #1 in ActivitySessionClientConnection.requestParticipants(for:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[2] = a2;
  v9[3] = a3;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a4;
  id v7 = a1;
  swift_retain();
  specialized XPCClient.withSynchronousHost<A>(body:errorHandler:)((void (*)(uint64_t *))partial apply for closure #1 in closure #1 in ActivitySessionClientConnection.requestParticipants(for:), (uint64_t)v9, (uint64_t)partial apply for closure #2 in closure #1 in ActivitySessionClientConnection.requestParticipants(for:), v6);
  return swift_release();
}

uint64_t sub_1B0FBB77C()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in ActivitySessionClientConnection.requestParticipants(for:)()
{
  return closure #1 in ActivitySessionClientConnection.requestParticipants(for:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1B0FBB7D8()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

void closure #1 in closure #1 in ActivitySessionClientConnection.requestParticipants(for:)(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  v9[4] = partial apply for closure #1 in closure #1 in closure #1 in ActivitySessionClientConnection.requestParticipants(for:);
  v9[5] = v7;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1107296256;
  v9[2] = thunk for @escaping @callee_guaranteed (@guaranteed Set<TUConversationParticipant>) -> ();
  v9[3] = &block_descriptor_60;
  uint64_t v8 = _Block_copy(v9);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  objc_msgSend(v5, sel_requestParticipantsFor_completion_, isa, v8);
  _Block_release(v8);
}

uint64_t closure #1 in closure #1 in closure #1 in ActivitySessionClientConnection.requestParticipants(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    v17[0] = v16;
    *(_DWORD *)uint64_t v8 = 136315394;
    type metadata accessor for TUConversationParticipant();
    lazy protocol witness table accessor for type TUConversationParticipant and conformance NSObject();
    swift_bridgeObjectRetain();
    uint64_t v9 = Set.description.getter();
    unint64_t v11 = v10;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v12 = Set.description.getter();
    unint64_t v14 = v13;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v6, v7, "[Translation] Received participants %s for participantIDs: %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v16, -1, -1);
    MEMORY[0x1B3EA39E0](v8, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  swift_beginAccess();
  *(void *)(a3 + 16) = a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed Set<TUConversationParticipant>) -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  type metadata accessor for TUConversationParticipant();
  lazy protocol witness table accessor for type TUConversationParticipant and conformance NSObject();
  uint64_t v2 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v1(v2);
  swift_release();
  return swift_bridgeObjectRelease();
}

id closure #2 in closure #1 in ActivitySessionClientConnection.requestParticipants(for:)(void *a1, void *a2, uint64_t a3)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.default);
  id v7 = a2;
  id v8 = a1;
  id v9 = v7;
  id v10 = a1;
  unint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    unint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    v23[0] = v21;
    *(_DWORD *)uint64_t v13 = 138412546;
    uint64_t v22 = a3;
    id v15 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v14 = v9;

    *(_WORD *)(v13 + 12) = 2080;
    id v16 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v17 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v23);
    a3 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v11, v12, "[Translation] %@ connection error %s while requesting participant info", (uint8_t *)v13, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v14, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v21, -1, -1);
    MEMORY[0x1B3EA39E0](v13, -1, -1);
  }
  else
  {
  }
  swift_beginAccess();
  uint64_t v19 = *(void **)(a3 + 16);
  *(void *)(a3 + 16) = a1;

  return a1;
}

uint64_t ActivitySessionClientConnection.setState(state:error:)(uint64_t a1, uint64_t a2)
{
  return ActivitySessionClientConnection.setState(state:error:)(a1, a2, &direct field offset for ActivitySessionClientConnection.setStateCallback, 10646, (uint64_t (*)(void, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned CPActivitySessionState, @guaranteed Error?) -> ())?);
}

void @objc ActivitySessionClientConnection.setState(state:error:)(char *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = &a1[direct field offset for ActivitySessionClientConnection.setStateCallback];
  swift_beginAccess();
  id v8 = *(void (**)(uint64_t, void *))v7;
  if (*(void *)v7)
  {
    id v9 = a1;
    id v10 = a4;
    outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?((uint64_t)v8);
    v8(a3, a4);
    _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v8);
  }
}

uint64_t ActivitySessionClientConnection.setDataCryptor(_:)(uint64_t a1)
{
  uint64_t v3 = (void (**)(uint64_t))(v1
                                     + direct field offset for ActivitySessionClientConnection.setDataCryptorCallback);
  uint64_t result = swift_beginAccess();
  uint64_t v5 = *v3;
  if (*v3)
  {
    swift_retain();
    v5(a1);
    return _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v5);
  }
  return result;
}

void @objc ActivitySessionClientConnection.setDataCryptor(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = &a1[direct field offset for ActivitySessionClientConnection.setDataCryptorCallback];
  swift_beginAccess();
  uint64_t v6 = *(void (**)(uint64_t))v5;
  if (*(void *)v5)
  {
    swift_unknownObjectRetain();
    id v7 = a1;
    outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?((uint64_t)v6);
    v6(a3);
    _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v6);
    swift_unknownObjectRelease();
  }
}

uint64_t ActivitySessionClientConnection.setActivity(activity:)()
{
  return swift_release();
}

uint64_t @objc ActivitySessionClientConnection.setActivity(activity:)(void *a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  id v5 = a3;
  id v6 = a1;
  swift_retain();
  PassthroughSubject.send(_:)();

  return swift_release();
}

Swift::Void __swiftcall ActivitySessionClientConnection.setAssociatedScene(sceneSessionIdentifier:)(Swift::String_optional sceneSessionIdentifier)
{
}

uint64_t ActivitySessionClientConnection.setState(state:error:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(void, uint64_t))
{
  uint64_t v9 = v5 + *a3;
  uint64_t result = swift_beginAccess();
  unint64_t v11 = *(void (**)(uint64_t, uint64_t))v9;
  if (*(void *)v9)
  {
    uint64_t v12 = *(void *)(v9 + 8);
    swift_retain();
    v11(a1, a2);
    return a5(v11, v12);
  }
  return result;
}

uint64_t @objc ActivitySessionClientConnection.setAssociatedScene(sceneSessionIdentifier:)(char *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  id v7 = &a1[direct field offset for ActivitySessionClientConnection.setAssociatedSceneCallback];
  swift_beginAccess();
  id v8 = *(void (**)(uint64_t, uint64_t))v7;
  if (*(void *)v7)
  {
    uint64_t v9 = a1;
    outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?((uint64_t)v8);
    v8(v4, v6);
    _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v8);
  }
  return swift_bridgeObjectRelease();
}

uint64_t ActivitySessionClientConnection.receivedResource(atURL:withMetadata:fromParticipantWithIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4
                                                                + direct field offset for ActivitySessionClientConnection.receivedResourceCallback);
  uint64_t result = swift_beginAccess();
  unint64_t v11 = *v9;
  if (*v9)
  {
    swift_retain();
    v11(a1, a2, a3, a4);
    return _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v11);
  }
  return result;
}

void @objc ActivitySessionClientConnection.receivedResource(atURL:withMetadata:fromParticipantWithIdentifier:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a1;
  uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v13 = v12;

  unint64_t v14 = &v10[direct field offset for ActivitySessionClientConnection.receivedResourceCallback];
  swift_beginAccess();
  id v15 = *(void (**)(id, uint64_t, unint64_t, uint64_t))v14;
  if (*(void *)v14)
  {
    swift_retain();
    v15(v8, v11, v13, a5);
    _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v15);
  }
  outlined consume of Data._Representation(v11, v13);
}

id ActivitySessionClientConnection.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id ActivitySessionClientConnection.init()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = v0;
  UUID.init()();
  uint64_t v3 = &v2[direct field offset for ActivitySessionClientConnection.serverDisconnectedCallback];
  *uint64_t v3 = 0;
  v3[1] = 0;
  uint64_t v4 = &v2[direct field offset for ActivitySessionClientConnection.setStateCallback];
  void *v4 = 0;
  v4[1] = 0;
  uint64_t v5 = &v2[direct field offset for ActivitySessionClientConnection.setAssociatedSceneCallback];
  *uint64_t v5 = 0;
  v5[1] = 0;
  uint64_t v6 = &v2[direct field offset for ActivitySessionClientConnection.setDataCryptorCallback];
  *uint64_t v6 = 0;
  v6[1] = 0;
  uint64_t v7 = direct field offset for ActivitySessionClientConnection.setActivityPublisher;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<TUConversationActivity, Never>);
  swift_allocObject();
  *(void *)&v2[v7] = PassthroughSubject.init()();
  id v8 = &v2[direct field offset for ActivitySessionClientConnection.receivedResourceCallback];
  *id v8 = 0;
  v8[1] = 0;
  v2[direct field offset for ActivitySessionClientConnection.$__lazy_storage_$_shouldTranslateParticipantIDs] = 2;

  v10.receiver = v2;
  v10.super_class = ObjectType;
  return objc_msgSendSuper2(&v10, sel_init);
}

id @objc ActivitySessionClientConnection.init()()
{
  return ActivitySessionClientConnection.init()();
}

uint64_t ActivitySessionClientConnection.__ivar_destroyer()
{
  uint64_t v1 = v0 + direct field offset for ActivitySessionClientConnection.id;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  _sxRi_zRi0_zlyytIseghHr_SgWOe(*(void *)(v0
                                          + direct field offset for ActivitySessionClientConnection.serverDisconnectedCallback));
  _sxRi_zRi0_zlyytIseghHr_SgWOe(*(void *)(v0 + direct field offset for ActivitySessionClientConnection.setStateCallback));
  _sxRi_zRi0_zlyytIseghHr_SgWOe(*(void *)(v0
                                          + direct field offset for ActivitySessionClientConnection.setAssociatedSceneCallback));
  _sxRi_zRi0_zlyytIseghHr_SgWOe(*(void *)(v0
                                          + direct field offset for ActivitySessionClientConnection.setDataCryptorCallback));
  swift_release();
  uint64_t v3 = *(void *)(v0 + direct field offset for ActivitySessionClientConnection.receivedResourceCallback);
  return _sxRi_zRi0_zlyytIseghHr_SgWOe(v3);
}

id ActivitySessionClientConnection.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1B0FBC760@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = ActivitySessionClientConnection.shouldTranslateParticipantIDs.getter();
  *a1 = result & 1;
  return result;
}

unsigned char *sub_1B0FBC790(unsigned char *result, void *a2)
{
  *(unsigned char *)(*a2
           + direct field offset for ActivitySessionClientConnection.$__lazy_storage_$_shouldTranslateParticipantIDs) = *result;
  return result;
}

uint64_t @objc ActivitySessionClientConnection.__ivar_destroyer(uint64_t a1)
{
  uint64_t v2 = a1 + direct field offset for ActivitySessionClientConnection.id;
  uint64_t v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  _sxRi_zRi0_zlyytIseghHr_SgWOe(*(void *)(a1
                                          + direct field offset for ActivitySessionClientConnection.serverDisconnectedCallback));
  _sxRi_zRi0_zlyytIseghHr_SgWOe(*(void *)(a1 + direct field offset for ActivitySessionClientConnection.setStateCallback));
  _sxRi_zRi0_zlyytIseghHr_SgWOe(*(void *)(a1
                                          + direct field offset for ActivitySessionClientConnection.setAssociatedSceneCallback));
  _sxRi_zRi0_zlyytIseghHr_SgWOe(*(void *)(a1
                                          + direct field offset for ActivitySessionClientConnection.setDataCryptorCallback));
  swift_release();
  uint64_t v4 = *(void *)(a1 + direct field offset for ActivitySessionClientConnection.receivedResourceCallback);
  return _sxRi_zRi0_zlyytIseghHr_SgWOe(v4);
}

uint64_t type metadata accessor for ActivitySessionClientConnection()
{
  uint64_t result = type metadata singleton initialization cache for ActivitySessionClientConnection;
  if (!type metadata singleton initialization cache for ActivitySessionClientConnection) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for ActivitySessionClientConnection()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t ObjC metadata update function for ActivitySessionClientConnection()
{
  return type metadata accessor for ActivitySessionClientConnection();
}

uint64_t sub_1B0FBC998()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed TUSandboxExtendedURL, @in_guaranteed Data, @in_guaranteed UInt64) -> (@out ())(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t *, void *, uint64_t *))(v4 + 16);
  v8[1] = a3;
  uint64_t v9 = a1;
  uint64_t v7 = a4;
  v8[0] = a2;
  return v5(&v9, v8, &v7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed TUSandboxExtendedURL, @guaranteed Data, @unowned UInt64) -> ()(void *a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void, void, void))(v3 + 16))(*a1, *a2, a2[1], *a3);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed String?) -> (@out ())(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t (**)(void *))(v2 + 16);
  v5[0] = a1;
  v5[1] = a2;
  return v3(v5);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String?) -> ()(void *a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 16))(*a1, a1[1]);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CPActivitySessionState, @in_guaranteed Error?) -> (@out ())(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t *, uint64_t *))(v2 + 16);
  uint64_t v5 = a2;
  uint64_t v6 = a1;
  return v3(&v6, &v5);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned CPActivitySessionState, @guaranteed Error?) -> ()(void *a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(v2 + 16))(*a1, *a2);
}

void partial apply for closure #1 in closure #1 in ActivitySessionClientConnection.requestParticipants(for:)(void **a1)
{
  closure #1 in closure #1 in ActivitySessionClientConnection.requestParticipants(for:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1B0FBCB40()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

id partial apply for closure #2 in closure #1 in ActivitySessionClientConnection.requestParticipants(for:)(void *a1)
{
  return closure #2 in closure #1 in ActivitySessionClientConnection.requestParticipants(for:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1B0FBCB88()
{
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in ActivitySessionClientConnection.requestParticipants(for:)(uint64_t a1)
{
  return closure #1 in closure #1 in closure #1 in ActivitySessionClientConnection.requestParticipants(for:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t type metadata accessor for TUConversationParticipant()
{
  unint64_t result = lazy cache variable for type metadata for TUConversationParticipant;
  if (!lazy cache variable for type metadata for TUConversationParticipant)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TUConversationParticipant and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type TUConversationParticipant and conformance NSObject;
  if (!lazy protocol witness table cache variable for type TUConversationParticipant and conformance NSObject)
  {
    type metadata accessor for TUConversationParticipant();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TUConversationParticipant and conformance NSObject);
  }
  return result;
}

unint64_t RTCReportingKeys.Keys.rawValue.getter(char a1)
{
  unint64_t result = 0x617275642D707271;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000012;
      break;
    case 2:
      unint64_t result = 0xD000000000000012;
      break;
    case 3:
      unint64_t result = 0xD000000000000013;
      break;
    case 4:
      unint64_t result = 0xD000000000000013;
      break;
    case 5:
      unint64_t result = 0xD000000000000015;
      break;
    case 6:
      unint64_t result = 0xD000000000000015;
      break;
    case 7:
    case 8:
      unint64_t result = 0xD000000000000010;
      break;
    case 9:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 10:
      unint64_t result = 0xD000000000000018;
      break;
    case 11:
      unint64_t result = 0xD000000000000024;
      break;
    case 12:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 13:
      unint64_t result = 0xD000000000000020;
      break;
    case 14:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 15:
      unint64_t result = 0xD000000000000020;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *Histogram.defaultPubSubInitializeAckLatencyBuckets.unsafeMutableAddressor()
{
  if (one-time initialization token for defaultPubSubInitializeAckLatencyBuckets != -1) {
    swift_once();
  }
  return &static Histogram.defaultPubSubInitializeAckLatencyBuckets;
}

uint64_t *Histogram.defaultAVCLatencyBuckets.unsafeMutableAddressor()
{
  if (one-time initialization token for defaultAVCLatencyBuckets != -1) {
    swift_once();
  }
  return &static Histogram.defaultAVCLatencyBuckets;
}

uint64_t Histogram.rtcRepresentation.getter()
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)v0 + 128);
  uint64_t v2 = v1();
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v7 = *(void *)(v2 + 8 * i + 32);
      uint64_t v8 = *(void *)(v1() + 16);
      swift_bridgeObjectRelease();
      if (i < v8 - 1)
      {
        if (v7)
        {
          v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          v11._id object = v5;
          v6._uint64_t countAndFlagsBits = 44;
          v6._id object = (void *)0xE100000000000000;
          String.append(_:)(v6);
          String.append(_:)(v11);
          swift_bridgeObjectRelease();
        }
        else
        {
          v9._uint64_t countAndFlagsBits = 44;
          v9._id object = (void *)0xE100000000000000;
          String.append(_:)(v9);
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RTCReportingKeys.Keys(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = RTCReportingKeys.Keys.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == RTCReportingKeys.Keys.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RTCReportingKeys.Keys()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  RTCReportingKeys.Keys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RTCReportingKeys.Keys()
{
  RTCReportingKeys.Keys.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RTCReportingKeys.Keys()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  RTCReportingKeys.Keys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance RTCReportingKeys.Keys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized RTCReportingKeys.Keys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance RTCReportingKeys.Keys@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = RTCReportingKeys.Keys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void one-time initialization function for defaultAVCLatencyBuckets()
{
  static Histogram.defaultAVCLatencyBuckets = (uint64_t)&outlined read-only object #0 of one-time initialization function for defaultAVCLatencyBuckets;
}

uint64_t static Histogram.defaultAVCLatencyBuckets.getter()
{
  return static Histogram.defaultAVCLatencyBuckets.getter(&one-time initialization token for defaultAVCLatencyBuckets);
}

void one-time initialization function for defaultPubSubInitializeAckLatencyBuckets()
{
  static Histogram.defaultPubSubInitializeAckLatencyBuckets = (uint64_t)&outlined read-only object #0 of one-time initialization function for defaultPubSubInitializeAckLatencyBuckets;
}

uint64_t static Histogram.defaultPubSubInitializeAckLatencyBuckets.getter()
{
  return static Histogram.defaultAVCLatencyBuckets.getter(&one-time initialization token for defaultPubSubInitializeAckLatencyBuckets);
}

uint64_t static Histogram.defaultAVCLatencyBuckets.getter(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }
  return swift_bridgeObjectRetain();
}

unint64_t specialized RTCReportingKeys.Keys.init(rawValue:)(Swift::String string)
{
  id object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._id object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of RTCReportingKeys.Keys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0x10) {
    return 16;
  }
  else {
    return v3;
  }
}

unint64_t lazy protocol witness table accessor for type RTCReportingKeys.Keys and conformance RTCReportingKeys.Keys()
{
  unint64_t result = lazy protocol witness table cache variable for type RTCReportingKeys.Keys and conformance RTCReportingKeys.Keys;
  if (!lazy protocol witness table cache variable for type RTCReportingKeys.Keys and conformance RTCReportingKeys.Keys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RTCReportingKeys.Keys and conformance RTCReportingKeys.Keys);
  }
  return result;
}

ValueMetadata *type metadata accessor for RTCReportingKeys()
{
  return &type metadata for RTCReportingKeys;
}

uint64_t getEnumTagSinglePayload for RTCReportingKeys.Keys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF1) {
    goto LABEL_17;
  }
  if (a2 + 15 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 15) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 15;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x10;
  int v8 = v6 - 16;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for RTCReportingKeys.Keys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 15 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 15) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF1) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF0)
  {
    unsigned int v6 = ((a2 - 241) >> 8) + 1;
    *unint64_t result = a2 + 15;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B0FBD544);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 15;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RTCReportingKeys.Keys()
{
  return &type metadata for RTCReportingKeys.Keys;
}

void one-time initialization function for ListenSystemEvents()
{
  static PluginPubSubServiceProvider.Rpc.ListenSystemEvents = 0xD00000000000001DLL;
  unk_1E9B74A48 = 0x80000001B11602D0;
}

uint64_t *PluginPubSubServiceProvider.Rpc.ListenSystemEvents.unsafeMutableAddressor()
{
  if (one-time initialization token for ListenSystemEvents != -1) {
    swift_once();
  }
  return &static PluginPubSubServiceProvider.Rpc.ListenSystemEvents;
}

void static PluginPubSubServiceProvider.Rpc.ListenSystemEvents.getter(void *a1@<X8>)
{
  *a1 = 0xD00000000000001DLL;
  a1[1] = 0x80000001B11602D0;
}

void one-time initialization function for Subscribe()
{
  static PluginPubSubServiceProvider.Rpc.Subscribe = 0xD000000000000014;
  unk_1E9B74A60 = 0x80000001B11602F0;
}

uint64_t *PluginPubSubServiceProvider.Rpc.Subscribe.unsafeMutableAddressor()
{
  if (one-time initialization token for Subscribe != -1) {
    swift_once();
  }
  return &static PluginPubSubServiceProvider.Rpc.Subscribe;
}

void static PluginPubSubServiceProvider.Rpc.Subscribe.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000014;
  a1[1] = 0x80000001B11602F0;
}

void one-time initialization function for Publish()
{
  static PluginPubSubServiceProvider.Rpc.Publish = 0xD000000000000012;
  unk_1E9B74A78 = 0x80000001B1160310;
}

uint64_t *PluginPubSubServiceProvider.Rpc.Publish.unsafeMutableAddressor()
{
  if (one-time initialization token for Publish != -1) {
    swift_once();
  }
  return &static PluginPubSubServiceProvider.Rpc.Publish;
}

void static PluginPubSubServiceProvider.Rpc.Publish.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000012;
  a1[1] = 0x80000001B1160310;
}

void one-time initialization function for CreateTopic()
{
  static PluginPubSubServiceProvider.Rpc.CreateTopic = 0xD000000000000016;
  *(void *)algn_1E9B74A90 = 0x80000001B1160330;
}

{
  static PluginAttachmentLedgerServiceProvider.Rpc.CreateTopic = 0xD00000000000002ELL;
  *(void *)algn_1E9B75010 = 0x80000001B1161FA0;
}

uint64_t *PluginPubSubServiceProvider.Rpc.CreateTopic.unsafeMutableAddressor()
{
  if (one-time initialization token for CreateTopic != -1) {
    swift_once();
  }
  return &static PluginPubSubServiceProvider.Rpc.CreateTopic;
}

void static PluginPubSubServiceProvider.Rpc.CreateTopic.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000016;
  a1[1] = 0x80000001B1160330;
}

void one-time initialization function for UpsertTopicMetadata()
{
  static PluginPubSubServiceProvider.Rpc.UpsertTopicMetadata = 0xD00000000000001ELL;
  unk_1E9B74AA8 = 0x80000001B1160350;
}

uint64_t *PluginPubSubServiceProvider.Rpc.UpsertTopicMetadata.unsafeMutableAddressor()
{
  if (one-time initialization token for UpsertTopicMetadata != -1) {
    swift_once();
  }
  return &static PluginPubSubServiceProvider.Rpc.UpsertTopicMetadata;
}

void static PluginPubSubServiceProvider.Rpc.UpsertTopicMetadata.getter(void *a1@<X8>)
{
  *a1 = 0xD00000000000001ELL;
  a1[1] = 0x80000001B1160350;
}

void one-time initialization function for FetchTopics()
{
  static PluginPubSubServiceProvider.Rpc.FetchTopics = 0xD000000000000016;
  unk_1E9B74AC0 = 0x80000001B1160370;
}

uint64_t *PluginPubSubServiceProvider.Rpc.FetchTopics.unsafeMutableAddressor()
{
  if (one-time initialization token for FetchTopics != -1) {
    swift_once();
  }
  return &static PluginPubSubServiceProvider.Rpc.FetchTopics;
}

void static PluginPubSubServiceProvider.Rpc.FetchTopics.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000016;
  a1[1] = 0x80000001B1160370;
}

void one-time initialization function for ListenTopicSubscribers()
{
  static PluginPubSubServiceProvider.Rpc.ListenTopicSubscribers = 0xD000000000000021;
  unk_1E9B74AD8 = 0x80000001B1160390;
}

uint64_t *PluginPubSubServiceProvider.Rpc.ListenTopicSubscribers.unsafeMutableAddressor()
{
  if (one-time initialization token for ListenTopicSubscribers != -1) {
    swift_once();
  }
  return &static PluginPubSubServiceProvider.Rpc.ListenTopicSubscribers;
}

void static PluginPubSubServiceProvider.Rpc.ListenTopicSubscribers.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000021;
  a1[1] = 0x80000001B1160390;
}

uint64_t PluginPubSubServiceProvider.__allocating_init(client:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t PluginPubSubServiceProvider.init(client:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

id PluginPubSubServiceProvider.queue.getter()
{
  return *(id *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC14CopresenceCore12PluginClient_queue);
}

Swift::Void __swiftcall PluginPubSubServiceProvider.close()()
{
  (*(void (**)(void))(**(void **)(v0 + 16) + 280))();
}

Swift::Void __swiftcall PluginPubSubServiceProvider.updateVirtualParticipant(_:localParticipantID:)(Swift::UInt64 _, Swift::UInt64 localParticipantID)
{
  (*(void (**)(Swift::UInt64, Swift::UInt64))(**(void **)(v2 + 16) + 248))(_, localParticipantID);
}

uint64_t PluginPubSubServiceProvider.localParticipantID.getter()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + 16) + 232))();
}

uint64_t PluginPubSubServiceProvider.listen()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)&v39 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for Google_Protobuf_Empty();
  MEMORY[0x1F4188790](v51);
  uint64_t v47 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Just<Google_Protobuf_Empty>);
  uint64_t v48 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v46 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  objc_super v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  unint64_t v12 = (char *)&v39 - v11;
  UUID.init()();
  if (one-time initialization token for pubsub != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Log.pubsub);
  unint64_t v14 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  uint64_t v49 = v12;
  uint64_t v45 = v14;
  v14(v10, v12, v6);
  id v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v42 = v6;
    unint64_t v18 = (uint8_t *)v17;
    uint64_t v19 = swift_slowAlloc();
    int64_t v41 = v2;
    uint64_t v20 = v19;
    v53[0] = v19;
    *(_DWORD *)unint64_t v18 = 136315138;
    uint64_t v40 = v7;
    uint64_t v21 = UUID.uuidString.getter();
    uint64_t v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v53);
    uint64_t v7 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v23 = *(void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v43 = (v7 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v44 = v23;
    v23(v10, v42);
    _os_log_impl(&dword_1B0DF7000, v15, v16, "Creating Listen RPC stream traceId=%s", v18, 0xCu);
    swift_arrayDestroy();
    uint64_t v24 = v20;
    uint64_t v2 = v41;
    MEMORY[0x1B3EA39E0](v24, -1, -1);
    unint64_t v25 = v18;
    uint64_t v6 = v42;
    MEMORY[0x1B3EA39E0](v25, -1, -1);
  }
  else
  {
    uint64_t v26 = *(void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v43 = (v7 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v44 = v26;
    v26(v10, v6);
  }

  Google_Protobuf_Empty.init()();
  unint64_t v27 = v46;
  uint64_t v28 = v51;
  Just.init(_:)();
  lazy protocol witness table accessor for type Just<Google_Protobuf_Empty> and conformance Just<A>(&lazy protocol witness table cache variable for type Just<Google_Protobuf_Empty> and conformance Just<A>, &demangling cache variable for type metadata for Just<Google_Protobuf_Empty>);
  uint64_t v29 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v27, v4);
  uint64_t v30 = v49;
  uint64_t v31 = *(void *)(v50 + 16);
  v53[0] = 0xD00000000000001DLL;
  v53[1] = 0x80000001B11602D0;
  v45(v2, v49, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v2, 0, 1, v6);
  BOOL v32 = *(uint64_t (**)(uint64_t *, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v31 + 272);
  uint64_t v33 = v6;
  uint64_t v34 = type metadata accessor for CP_SystemEvent(0);
  uint64_t v35 = lazy protocol witness table accessor for type Google_Protobuf_Empty and conformance Google_Protobuf_Empty(&lazy protocol witness table cache variable for type Google_Protobuf_Empty and conformance Google_Protobuf_Empty, MEMORY[0x1E4F70DA8]);
  uint64_t v36 = lazy protocol witness table accessor for type Google_Protobuf_Empty and conformance Google_Protobuf_Empty(&lazy protocol witness table cache variable for type CP_SystemEvent and conformance CP_SystemEvent, (void (*)(uint64_t))type metadata accessor for CP_SystemEvent);
  uint64_t v37 = v32(v53, v29, v2, v28, v34, v35, v36);
  swift_release();
  outlined destroy of UUID?((uint64_t)v2);
  swift_bridgeObjectRelease();
  v44(v30, v33);
  return v37;
}

uint64_t PluginPubSubServiceProvider.subscribe(input:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v40 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v39 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v34 - v10;
  UUID.init()();
  if (one-time initialization token for pubsub != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.pubsub);
  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v38(v9, v11, v5);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v34 = v1;
    os_log_type_t v16 = (uint8_t *)v15;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v35 = v11;
    uint64_t v18 = v17;
    v42[0] = v17;
    *(_DWORD *)os_log_type_t v16 = 136315138;
    uint64_t v36 = v5;
    uint64_t v19 = UUID.uuidString.getter();
    uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v42);
    uint64_t v5 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v37 = *(void (**)(char *, uint64_t))(v6 + 8);
    v37(v9, v5);
    _os_log_impl(&dword_1B0DF7000, v13, v14, "Creating Subscribe RPC stream traceId=%s", v16, 0xCu);
    swift_arrayDestroy();
    uint64_t v21 = v18;
    uint64_t v11 = v35;
    MEMORY[0x1B3EA39E0](v21, -1, -1);
    unint64_t v22 = v16;
    uint64_t v2 = v34;
    MEMORY[0x1B3EA39E0](v22, -1, -1);
  }
  else
  {
    uint64_t v37 = *(void (**)(char *, uint64_t))(v6 + 8);
    v37(v9, v5);
  }

  uint64_t v23 = *(void *)(v2 + 16);
  v42[0] = 0xD000000000000014;
  v42[1] = 0x80000001B11602F0;
  uint64_t v24 = (uint64_t)v39;
  v38(v39, v11, v5);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v24, 0, 1, v5);
  unint64_t v25 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v23
                                                                                                  + 272);
  uint64_t v26 = v11;
  uint64_t v27 = type metadata accessor for CP_SubscribeRequest(0);
  uint64_t v28 = v5;
  uint64_t v29 = type metadata accessor for CP_SubscribeResponse(0);
  uint64_t v30 = lazy protocol witness table accessor for type Google_Protobuf_Empty and conformance Google_Protobuf_Empty(&lazy protocol witness table cache variable for type CP_SubscribeRequest and conformance CP_SubscribeRequest, (void (*)(uint64_t))type metadata accessor for CP_SubscribeRequest);
  uint64_t v31 = lazy protocol witness table accessor for type Google_Protobuf_Empty and conformance Google_Protobuf_Empty(&lazy protocol witness table cache variable for type CP_SubscribeResponse and conformance CP_SubscribeResponse, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse);
  uint64_t v32 = v25(v42, v40, v24, v27, v29, v30, v31);
  outlined destroy of UUID?(v24);
  swift_bridgeObjectRelease();
  v37(v26, v28);
  return v32;
}

uint64_t PluginPubSubServiceProvider.publish(input:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v40 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v39 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v34 - v10;
  UUID.init()();
  if (one-time initialization token for pubsub != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.pubsub);
  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v38(v9, v11, v5);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v34 = v1;
    os_log_type_t v16 = (uint8_t *)v15;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v35 = v11;
    uint64_t v18 = v17;
    v42[0] = v17;
    *(_DWORD *)os_log_type_t v16 = 136315138;
    uint64_t v36 = v5;
    uint64_t v19 = UUID.uuidString.getter();
    uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v42);
    uint64_t v5 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v37 = *(void (**)(char *, uint64_t))(v6 + 8);
    v37(v9, v5);
    _os_log_impl(&dword_1B0DF7000, v13, v14, "Creating Publish RPC stream traceId=%s", v16, 0xCu);
    swift_arrayDestroy();
    uint64_t v21 = v18;
    uint64_t v11 = v35;
    MEMORY[0x1B3EA39E0](v21, -1, -1);
    unint64_t v22 = v16;
    uint64_t v2 = v34;
    MEMORY[0x1B3EA39E0](v22, -1, -1);
  }
  else
  {
    uint64_t v37 = *(void (**)(char *, uint64_t))(v6 + 8);
    v37(v9, v5);
  }

  uint64_t v23 = *(void *)(v2 + 16);
  v42[0] = 0xD000000000000012;
  v42[1] = 0x80000001B1160310;
  uint64_t v24 = (uint64_t)v39;
  v38(v39, v11, v5);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v24, 0, 1, v5);
  unint64_t v25 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v23
                                                                                                  + 272);
  uint64_t v26 = v11;
  uint64_t v27 = type metadata accessor for CP_PublishRequest(0);
  uint64_t v28 = v5;
  uint64_t v29 = type metadata accessor for CP_PublishResponse(0);
  uint64_t v30 = lazy protocol witness table accessor for type Google_Protobuf_Empty and conformance Google_Protobuf_Empty(&lazy protocol witness table cache variable for type CP_PublishRequest and conformance CP_PublishRequest, (void (*)(uint64_t))type metadata accessor for CP_PublishRequest);
  uint64_t v31 = lazy protocol witness table accessor for type Google_Protobuf_Empty and conformance Google_Protobuf_Empty(&lazy protocol witness table cache variable for type CP_PublishResponse and conformance CP_PublishResponse, (void (*)(uint64_t))type metadata accessor for CP_PublishResponse);
  uint64_t v32 = v25(v42, v40, v24, v27, v29, v30, v31);
  outlined destroy of UUID?(v24);
  swift_bridgeObjectRelease();
  v37(v26, v28);
  return v32;
}

uint64_t PluginPubSubServiceProvider.createTopic(input:)(uint64_t a1)
{
  uint64_t v49 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TopicRequest = type metadata accessor for CP_CreateTopicRequest(0);
  MEMORY[0x1F4188790](TopicRequest);
  uint64_t v47 = (uint64_t)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Just<CP_CreateTopicRequest>);
  uint64_t v48 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v46 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v40 - v12;
  UUID.init()();
  if (one-time initialization token for pubsub != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Log.pubsub);
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  uint64_t v50 = v13;
  uint64_t v45 = v15;
  v15(v11, v13, v7);
  os_log_type_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v42 = v7;
    uint64_t v19 = (uint8_t *)v18;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v41 = v3;
    uint64_t v21 = v20;
    v54[0] = v20;
    *(_DWORD *)uint64_t v19 = 136315138;
    uint64_t v40 = v5;
    uint64_t v22 = UUID.uuidString.getter();
    uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v54);
    uint64_t v5 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v24 = *(void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v43 = (v8 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v44 = v24;
    v24(v11, v42);
    _os_log_impl(&dword_1B0DF7000, v16, v17, "Creating CreateTopic RPC request traceId=%s", v19, 0xCu);
    swift_arrayDestroy();
    uint64_t v25 = v21;
    uint64_t v3 = v41;
    MEMORY[0x1B3EA39E0](v25, -1, -1);
    uint64_t v26 = v19;
    uint64_t v7 = v42;
    MEMORY[0x1B3EA39E0](v26, -1, -1);
  }
  else
  {
    uint64_t v27 = *(void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v43 = (v8 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v44 = v27;
    v27(v11, v7);
  }

  outlined init with copy of CP_CreateTopicRequest(v49, v47, type metadata accessor for CP_CreateTopicRequest);
  uint64_t v28 = v46;
  uint64_t v29 = TopicRequest;
  Just.init(_:)();
  lazy protocol witness table accessor for type Just<Google_Protobuf_Empty> and conformance Just<A>(&lazy protocol witness table cache variable for type Just<CP_CreateTopicRequest> and conformance Just<A>, &demangling cache variable for type metadata for Just<CP_CreateTopicRequest>);
  uint64_t v30 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v28, v5);
  uint64_t v31 = v50;
  uint64_t v32 = *(void *)(v51 + 16);
  v54[0] = 0xD000000000000016;
  v54[1] = 0x80000001B1160330;
  v45(v3, v50, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v3, 0, 1, v7);
  uint64_t v33 = *(uint64_t (**)(uint64_t *, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v32 + 272);
  uint64_t v34 = v7;
  uint64_t TopicResponse = type metadata accessor for CP_CreateTopicResponse(0);
  uint64_t v36 = lazy protocol witness table accessor for type Google_Protobuf_Empty and conformance Google_Protobuf_Empty(&lazy protocol witness table cache variable for type CP_CreateTopicRequest and conformance CP_CreateTopicRequest, (void (*)(uint64_t))type metadata accessor for CP_CreateTopicRequest);
  uint64_t v37 = lazy protocol witness table accessor for type Google_Protobuf_Empty and conformance Google_Protobuf_Empty(&lazy protocol witness table cache variable for type CP_CreateTopicResponse and conformance CP_CreateTopicResponse, (void (*)(uint64_t))type metadata accessor for CP_CreateTopicResponse);
  uint64_t v38 = v33(v54, v30, v3, v29, TopicResponse, v36, v37);
  swift_release();
  outlined destroy of UUID?((uint64_t)v3);
  swift_bridgeObjectRelease();
  v44(v31, v34);
  return v38;
}

uint64_t PluginPubSubServiceProvider.upsertTopicMetadata(input:)(uint64_t a1)
{
  uint64_t v49 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for CP_UpsertTopicMetadataRequest(0);
  MEMORY[0x1F4188790](v52);
  uint64_t v47 = (uint64_t)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Just<CP_UpsertTopicMetadataRequest>);
  uint64_t v48 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v46 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v40 - v12;
  UUID.init()();
  if (one-time initialization token for pubsub != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Log.pubsub);
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  uint64_t v50 = v13;
  uint64_t v45 = v15;
  v15(v11, v13, v7);
  os_log_type_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v42 = v7;
    uint64_t v19 = (uint8_t *)v18;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v41 = v3;
    uint64_t v21 = v20;
    v54[0] = v20;
    *(_DWORD *)uint64_t v19 = 136315138;
    uint64_t v40 = v5;
    uint64_t v22 = UUID.uuidString.getter();
    uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v54);
    uint64_t v5 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v24 = *(void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v43 = (v8 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v44 = v24;
    v24(v11, v42);
    _os_log_impl(&dword_1B0DF7000, v16, v17, "Creating UpsertTopicMetadata RPC request traceId=%s", v19, 0xCu);
    swift_arrayDestroy();
    uint64_t v25 = v21;
    uint64_t v3 = v41;
    MEMORY[0x1B3EA39E0](v25, -1, -1);
    uint64_t v26 = v19;
    uint64_t v7 = v42;
    MEMORY[0x1B3EA39E0](v26, -1, -1);
  }
  else
  {
    uint64_t v27 = *(void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v43 = (v8 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v44 = v27;
    v27(v11, v7);
  }

  outlined init with copy of CP_CreateTopicRequest(v49, v47, type metadata accessor for CP_UpsertTopicMetadataRequest);
  uint64_t v28 = v46;
  uint64_t v29 = v52;
  Just.init(_:)();
  lazy protocol witness table accessor for type Just<Google_Protobuf_Empty> and conformance Just<A>(&lazy protocol witness table cache variable for type Just<CP_UpsertTopicMetadataRequest> and conformance Just<A>, &demangling cache variable for type metadata for Just<CP_UpsertTopicMetadataRequest>);
  uint64_t v30 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v28, v5);
  uint64_t v31 = v50;
  uint64_t v32 = *(void *)(v51 + 16);
  v54[0] = 0xD00000000000001ELL;
  v54[1] = 0x80000001B1160350;
  v45(v3, v50, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v3, 0, 1, v7);
  uint64_t v33 = *(uint64_t (**)(uint64_t *, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v32 + 272);
  uint64_t v34 = v7;
  uint64_t v35 = type metadata accessor for CP_UpsertTopicMetadataResponse(0);
  uint64_t v36 = lazy protocol witness table accessor for type Google_Protobuf_Empty and conformance Google_Protobuf_Empty(&lazy protocol witness table cache variable for type CP_UpsertTopicMetadataRequest and conformance CP_UpsertTopicMetadataRequest, (void (*)(uint64_t))type metadata accessor for CP_UpsertTopicMetadataRequest);
  uint64_t v37 = lazy protocol witness table accessor for type Google_Protobuf_Empty and conformance Google_Protobuf_Empty(&lazy protocol witness table cache variable for type CP_UpsertTopicMetadataResponse and conformance CP_UpsertTopicMetadataResponse, (void (*)(uint64_t))type metadata accessor for CP_UpsertTopicMetadataResponse);
  uint64_t v38 = v33(v54, v30, v3, v29, v35, v36, v37);
  swift_release();
  outlined destroy of UUID?((uint64_t)v3);
  swift_bridgeObjectRelease();
  v44(v31, v34);
  return v38;
}

uint64_t PluginPubSubServiceProvider.fetchTopics()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)&v39 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TopicsRequest = type metadata accessor for CP_FetchTopicsRequest(0);
  MEMORY[0x1F4188790](TopicsRequest);
  uint64_t v47 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Just<CP_FetchTopicsRequest>);
  uint64_t v48 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v46 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v39 - v11;
  UUID.init()();
  if (one-time initialization token for pubsub != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Log.pubsub);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  uint64_t v49 = v12;
  uint64_t v45 = v14;
  v14(v10, v12, v6);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v42 = v6;
    uint64_t v18 = (uint8_t *)v17;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v41 = v2;
    uint64_t v20 = v19;
    v53[0] = v19;
    *(_DWORD *)uint64_t v18 = 136315138;
    uint64_t v40 = v7;
    uint64_t v21 = UUID.uuidString.getter();
    uint64_t v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v53);
    uint64_t v7 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v23 = *(void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v43 = (v7 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v44 = v23;
    v23(v10, v42);
    _os_log_impl(&dword_1B0DF7000, v15, v16, "Creating FetchTopics RPC request traceId=%s", v18, 0xCu);
    swift_arrayDestroy();
    uint64_t v24 = v20;
    uint64_t v2 = v41;
    MEMORY[0x1B3EA39E0](v24, -1, -1);
    uint64_t v25 = v18;
    uint64_t v6 = v42;
    MEMORY[0x1B3EA39E0](v25, -1, -1);
  }
  else
  {
    uint64_t v26 = *(void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v43 = (v7 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v44 = v26;
    v26(v10, v6);
  }

  UnknownStorage.init()();
  uint64_t v27 = v46;
  uint64_t v28 = TopicsRequest;
  Just.init(_:)();
  lazy protocol witness table accessor for type Just<Google_Protobuf_Empty> and conformance Just<A>(&lazy protocol witness table cache variable for type Just<CP_FetchTopicsRequest> and conformance Just<A>, &demangling cache variable for type metadata for Just<CP_FetchTopicsRequest>);
  uint64_t v29 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v27, v4);
  uint64_t v30 = v49;
  uint64_t v31 = *(void *)(v50 + 16);
  v53[0] = 0xD000000000000016;
  v53[1] = 0x80000001B1160370;
  v45(v2, v49, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v2, 0, 1, v6);
  uint64_t v32 = *(uint64_t (**)(uint64_t *, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v31 + 272);
  uint64_t v33 = v6;
  uint64_t TopicsResponse = type metadata accessor for CP_FetchTopicsResponse(0);
  uint64_t v35 = lazy protocol witness table accessor for type Google_Protobuf_Empty and conformance Google_Protobuf_Empty(&lazy protocol witness table cache variable for type CP_FetchTopicsRequest and conformance CP_FetchTopicsRequest, (void (*)(uint64_t))type metadata accessor for CP_FetchTopicsRequest);
  uint64_t v36 = lazy protocol witness table accessor for type Google_Protobuf_Empty and conformance Google_Protobuf_Empty(&lazy protocol witness table cache variable for type CP_FetchTopicsResponse and conformance CP_FetchTopicsResponse, (void (*)(uint64_t))type metadata accessor for CP_FetchTopicsResponse);
  uint64_t v37 = v32(v53, v29, v2, v28, TopicsResponse, v35, v36);
  swift_release();
  outlined destroy of UUID?((uint64_t)v2);
  swift_bridgeObjectRelease();
  v44(v30, v33);
  return v37;
}

uint64_t PluginPubSubServiceProvider.listenTopicSubscribers(input:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v40 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v39 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v34 - v10;
  UUID.init()();
  if (one-time initialization token for pubsub != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.pubsub);
  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v38(v9, v11, v5);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v34 = v1;
    os_log_type_t v16 = (uint8_t *)v15;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v35 = v11;
    uint64_t v18 = v17;
    v42[0] = v17;
    *(_DWORD *)os_log_type_t v16 = 136315138;
    uint64_t v36 = v5;
    uint64_t v19 = UUID.uuidString.getter();
    uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v42);
    uint64_t v5 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v37 = *(void (**)(char *, uint64_t))(v6 + 8);
    v37(v9, v5);
    _os_log_impl(&dword_1B0DF7000, v13, v14, "Creating ListenTopicSubscribers RPC stream traceId=%s", v16, 0xCu);
    swift_arrayDestroy();
    uint64_t v21 = v18;
    uint64_t v11 = v35;
    MEMORY[0x1B3EA39E0](v21, -1, -1);
    unint64_t v22 = v16;
    uint64_t v2 = v34;
    MEMORY[0x1B3EA39E0](v22, -1, -1);
  }
  else
  {
    uint64_t v37 = *(void (**)(char *, uint64_t))(v6 + 8);
    v37(v9, v5);
  }

  uint64_t v23 = *(void *)(v2 + 16);
  v42[0] = 0xD000000000000021;
  v42[1] = 0x80000001B1160390;
  uint64_t v24 = (uint64_t)v39;
  v38(v39, v11, v5);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v24, 0, 1, v5);
  uint64_t v25 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v23
                                                                                                  + 272);
  uint64_t v26 = v11;
  uint64_t v27 = type metadata accessor for CP_TopicSubscribersRequest(0);
  uint64_t v28 = v5;
  uint64_t v29 = type metadata accessor for CP_TopicSubscribers(0);
  uint64_t v30 = lazy protocol witness table accessor for type Google_Protobuf_Empty and conformance Google_Protobuf_Empty(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest and conformance CP_TopicSubscribersRequest, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribersRequest);
  uint64_t v31 = lazy protocol witness table accessor for type Google_Protobuf_Empty and conformance Google_Protobuf_Empty(&lazy protocol witness table cache variable for type CP_TopicSubscribers and conformance CP_TopicSubscribers, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribers);
  uint64_t v32 = v25(v42, v40, v24, v27, v29, v30, v31);
  outlined destroy of UUID?(v24);
  swift_bridgeObjectRelease();
  v37(v26, v28);
  return v32;
}

uint64_t PluginPubSubServiceProvider.deinit()
{
  swift_release();
  return v0;
}

uint64_t PluginPubSubServiceProvider.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for PubSubServiceProvider.queue.getter in conformance PluginPubSubServiceProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t protocol witness for PubSubServiceProvider.localParticipantID.getter in conformance PluginPubSubServiceProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t protocol witness for PubSubServiceProvider.close() in conformance PluginPubSubServiceProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

uint64_t protocol witness for PubSubServiceProvider.updateVirtualParticipant(_:localParticipantID:) in conformance PluginPubSubServiceProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t protocol witness for PubSubServiceProvider.listen() in conformance PluginPubSubServiceProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

uint64_t protocol witness for PubSubServiceProvider.subscribe(input:) in conformance PluginPubSubServiceProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

uint64_t protocol witness for PubSubServiceProvider.publish(input:) in conformance PluginPubSubServiceProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

uint64_t protocol witness for PubSubServiceProvider.createTopic(input:) in conformance PluginPubSubServiceProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t protocol witness for PubSubServiceProvider.upsertTopicMetadata(input:) in conformance PluginPubSubServiceProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160))();
}

uint64_t protocol witness for PubSubServiceProvider.fetchTopics() in conformance PluginPubSubServiceProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168))();
}

uint64_t protocol witness for PubSubServiceProvider.listenTopicSubscribers(input:) in conformance PluginPubSubServiceProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 176))();
}

uint64_t outlined init with copy of CP_CreateTopicRequest(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t lazy protocol witness table accessor for type Just<Google_Protobuf_Empty> and conformance Just<A>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Google_Protobuf_Empty and conformance Google_Protobuf_Empty(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t dispatch thunk of PubSubServiceProvider.queue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PubSubServiceProvider.localParticipantID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of PubSubServiceProvider.close()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of PubSubServiceProvider.updateVirtualParticipant(_:localParticipantID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of PubSubServiceProvider.listen()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of PubSubServiceProvider.subscribe(input:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of PubSubServiceProvider.publish(input:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of PubSubServiceProvider.createTopic(input:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of PubSubServiceProvider.upsertTopicMetadata(input:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of PubSubServiceProvider.fetchTopics()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of PubSubServiceProvider.listenTopicSubscribers(input:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t type metadata accessor for PluginPubSubServiceProvider()
{
  return self;
}

uint64_t method lookup function for PluginPubSubServiceProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PluginPubSubServiceProvider);
}

uint64_t dispatch thunk of PluginPubSubServiceProvider.__allocating_init(client:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of PluginPubSubServiceProvider.queue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of PluginPubSubServiceProvider.close()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of PluginPubSubServiceProvider.updateVirtualParticipant(_:localParticipantID:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of PluginPubSubServiceProvider.localParticipantID.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of PluginPubSubServiceProvider.listen()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of PluginPubSubServiceProvider.subscribe(input:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of PluginPubSubServiceProvider.publish(input:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of PluginPubSubServiceProvider.createTopic(input:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of PluginPubSubServiceProvider.upsertTopicMetadata(input:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of PluginPubSubServiceProvider.fetchTopics()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of PluginPubSubServiceProvider.listenTopicSubscribers(input:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

ValueMetadata *type metadata accessor for PluginPubSubServiceProvider.Rpc()
{
  return &type metadata for PluginPubSubServiceProvider.Rpc;
}

uint64_t DelegatesManager.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  DelegatesManager.init()();
  return v0;
}

uint64_t key path getter for Delegate.delegate : <A>Delegate<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Delegate();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  uint64_t v6 = MEMORY[0x1B3EA3B30](v8);
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v4);
  *a2 = v6;
  return result;
}

void Delegate.delegate.getter()
{
}

uint64_t Delegate.delegate.setter()
{
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*Delegate.delegate.modify(void *a1))()
{
  a1[1] = v1;
  *a1 = MEMORY[0x1B3EA3B30](v1);
  return Delegate.delegate.modify;
}

uint64_t Delegate.delegate.modify()
{
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

id Delegate.delegateQueue.getter()
{
  return *(id *)(v0 + 8);
}

BOOL Delegate.isValid.getter()
{
  uint64_t v1 = MEMORY[0x1B3EA3B30](v0);
  if (v1) {
    swift_unknownObjectRelease();
  }
  return v1 != 0;
}

uint64_t Delegate.perform(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t result = MEMORY[0x1B3EA3B30](v3);
  if (result)
  {
    uint64_t v9 = result;
    uint64_t v10 = *(NSObject **)(v4 + 8);
    uint64_t v11 = (void *)swift_allocObject();
    v11[2] = *(void *)(a3 + 16);
    v11[3] = a1;
    v11[4] = a2;
    void v11[5] = v9;
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = partial apply for closure #1 in Delegate.perform(_:);
    *(void *)(v12 + 24) = v11;
    v14[4] = partial apply for thunk for @callee_guaranteed () -> ();
    v14[5] = v12;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 1107296256;
    v14[2] = thunk for @escaping @callee_guaranteed () -> ();
    v14[3] = &block_descriptor_18;
    uint64_t v13 = _Block_copy(v14);
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    dispatch_sync(v10, v13);
    swift_unknownObjectRelease();
    _Block_release(v13);
    LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if (v9) {
      __break(1u);
    }
  }
  return result;
}

uint64_t Delegate.performAsync(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v19[0] - 8);
  MEMORY[0x1F4188790](v19[0]);
  os_log_type_t v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x1B3EA3B30](v4);
  if (result)
  {
    uint64_t v16 = result;
    uint64_t v17 = (void *)swift_allocObject();
    _OWORD v17[2] = *(void *)(a3 + 16);
    uint64_t v17[3] = a1;
    uint64_t v17[4] = a2;
    v17[5] = v16;
    aBlock[4] = partial apply for closure #1 in Delegate.perform(_:);
    aBlock[5] = v17;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_9_1;
    uint64_t v18 = _Block_copy(aBlock);
    swift_retain();
    swift_unknownObjectRetain();
    static DispatchQoS.unspecified.getter();
    v19[1] = MEMORY[0x1E4FBC860];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1B3EA2200](0, v14, v11, v18);
    _Block_release(v18);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    (*(void (**)(char *, void))(v12 + 8))(v14, v19[0]);
    return swift_release();
  }
  return result;
}

uint64_t Delegate.init(_:queue:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  uint64_t result = swift_unknownObjectRelease();
  *(void *)(a2 + 8) = a1;
  return result;
}

uint64_t DelegatesManager.delegates.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DelegatesManager.delegates.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*DelegatesManager.delegates.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

uint64_t DelegatesManager.lock.getter()
{
  return swift_retain();
}

Swift::Void __swiftcall DelegatesManager.prune()()
{
  uint64_t v1 = *(void *)(v0 + 24);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 16));
  closure #1 in DelegatesManager.prune()(v0);
  uint64_t v2 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_unlock(v2);
}

uint64_t closure #1 in DelegatesManager.prune()(uint64_t a1)
{
  (*(void (**)(void))(*(void *)a1 + 104))();
  type metadata accessor for Delegate();
  type metadata accessor for Array();
  swift_getWitnessTable();
  uint64_t v2 = _ArrayProtocol.filter(_:)();
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(v2);
}

uint64_t DelegatesManager.init()()
{
  type metadata accessor for Delegate();
  *(void *)(v0 + 16) = Array.init()();
  type metadata accessor for Lock();
  uint64_t v1 = swift_allocObject();
  uint64_t v2 = (_DWORD *)swift_slowAlloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = 0;
  *(void *)(v0 + 24) = v1;
  return v0;
}

uint64_t sub_1B0FC0EB8()
{
  swift_unknownObjectRelease();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_1B0FC0EF4()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t block_destroy_helper_16()
{
  return swift_release();
}

uint64_t sub_1B0FC0F0C()
{
  swift_release();
  swift_unknownObjectRelease();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in Delegate.perform(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 24))(*(void *)(v0 + 40));
}

uint64_t type metadata accessor for Delegate()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t DelegatesManager.perform(_:)()
{
  return DelegatesManager.perform(_:)();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t vars8;

  uint64_t v1 = v0[3];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 16));
  closure #1 in DelegatesManager.perform(_:)((uint64_t)v0);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 16));
  uint64_t v2 = *(uint64_t (**)(void))(*v0 + 128);
  return v2();
}

uint64_t DelegatesManager.performAsync(_:)()
{
  return DelegatesManager.perform(_:)();
}

uint64_t closure #1 in DelegatesManager.perform(_:)(uint64_t a1)
{
  return swift_bridgeObjectRelease();
}

void DelegatesManager.addDelegate(delegate:queue:)(uint64_t a1, void *a2)
{
  uint64_t v5 = *(void *)(v2 + 24);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v5 + 16));
  closure #1 in DelegatesManager.addDelegate(delegate:queue:)(v2, a1, a2);
  uint64_t v6 = *(os_unfair_lock_s **)(v5 + 16);
  os_unfair_lock_unlock(v6);
}

uint64_t closure #1 in DelegatesManager.addDelegate(delegate:queue:)(uint64_t a1, uint64_t a2, void *a3)
{
  swift_unknownObjectRetain();
  id v5 = a3;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  void v8[5] = v5;
  uint64_t v6 = (uint64_t (*)(void *, void))(*(uint64_t (**)(void *))(*(void *)a1 + 120))(v8);
  type metadata accessor for Delegate();
  type metadata accessor for Array();
  Array.append(_:)();
  return v6(v8, 0);
}

void DelegatesManager.removeDelegate(delegate:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 16));
  closure #1 in DelegatesManager.removeDelegate(delegate:)(v0);
  uint64_t v2 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_unlock(v2);
}

uint64_t closure #1 in DelegatesManager.removeDelegate(delegate:)(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)a1 + 120))(v3);
  type metadata accessor for Delegate();
  type metadata accessor for Array();
  swift_getWitnessTable();
  swift_getWitnessTable();
  RangeReplaceableCollection<>.removeAll(where:)();
  return v1(v3, 0);
}

uint64_t DelegatesManager.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t DelegatesManager.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1B0FC1484()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_1B0FC1494()
{
  return 8;
}

void *sub_1B0FC14A0(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1B0FC14AC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 104))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0FC14F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 112);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B0FC154C()
{
  return 8;
}

void destroy for Delegate(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  uint64_t v2 = *(void **)(a1 + 8);
}

uint64_t initializeWithCopy for Delegate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_unknownObjectWeakCopyInit();
  id v5 = *(void **)(a2 + 8);
  *(void *)(v4 + 8) = v5;
  id v6 = v5;
  return a1;
}

uint64_t assignWithCopy for Delegate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_unknownObjectWeakCopyAssign();
  id v5 = *(void **)(a2 + 8);
  id v6 = *(void **)(v4 + 8);
  *(void *)(v4 + 8) = v5;
  id v7 = v5;

  return a1;
}

uint64_t initializeWithTake for Delegate(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakTakeInit();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t assignWithTake for Delegate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_unknownObjectWeakTakeAssign();
  id v5 = *(void **)(v4 + 8);
  *(void *)(v4 + 8) = *(void *)(a2 + 8);

  return a1;
}

uint64_t type metadata completion function for DelegatesManager()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for DelegatesManager()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for DelegatesManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DelegatesManager);
}

uint64_t dispatch thunk of DelegatesManager.delegates.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of DelegatesManager.delegates.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of DelegatesManager.delegates.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of DelegatesManager.prune()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of DelegatesManager.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of DelegatesManager.perform(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of DelegatesManager.performAsync(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of DelegatesManager.addDelegate(delegate:queue:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of DelegatesManager.removeDelegate(delegate:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t partial apply for closure #1 in closure #1 in DelegatesManager.removeDelegate(delegate:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t result = MEMORY[0x1B3EA3B30]();
  if (result)
  {
    uint64_t v3 = result;
    swift_unknownObjectRelease();
    return v3 == v1;
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in DelegatesManager.performAsync(_:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in DelegatesManager.performAsync(_:)(a1, Delegate.performAsync(_:));
}

uint64_t partial apply for closure #1 in closure #1 in DelegatesManager.perform(_:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in DelegatesManager.performAsync(_:)(a1, Delegate.perform(_:));
}

uint64_t partial apply for closure #1 in closure #1 in DelegatesManager.performAsync(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(v2 + 24);
  uint64_t v5 = *(void *)(v2 + 32);
  uint64_t v6 = type metadata accessor for Delegate();
  return a2(v4, v5, v6);
}

BOOL partial apply for closure #1 in closure #1 in DelegatesManager.prune()()
{
  uint64_t v0 = MEMORY[0x1B3EA3B30]();
  if (v0) {
    swift_unknownObjectRelease();
  }
  return v0 != 0;
}

uint64_t DatagramClient.Configuration.endpoint.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  unint64_t v5 = *(void *)(v1 + 24);
  char v6 = *(unsigned char *)(v1 + 32);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  return outlined copy of DatagramEndpoint(v2, v3, v4, v5, v6);
}

uint64_t DatagramClient.Configuration.egressMessagePayloadMaxSizeBytes.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t DatagramClient.Configuration.establishChannelMaxAttempts.getter()
{
  return *(void *)(v0 + 48);
}

double DatagramClient.Configuration.establishChannelRetryInterval.getter()
{
  return *(double *)(v0 + 56);
}

uint64_t DatagramClient.Configuration.init(endpoint:establishChannelMaxAttempts:establishChannelRetryInterval:egressMessagePayloadMaxSizeBytes:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  char v5 = *(unsigned char *)(result + 32);
  long long v6 = *(_OWORD *)(result + 16);
  *(_OWORD *)a4 = *(_OWORD *)result;
  *(_OWORD *)(a4 + 16) = v6;
  *(unsigned char *)(a4 + 32) = v5;
  *(void *)(a4 + 40) = a3;
  *(void *)(a4 + 48) = a2;
  *(double *)(a4 + 56) = a5;
  return result;
}

uint64_t EgressMessage.datagram.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t EgressMessage.participantIDs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t EgressMessage.completion.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 40));
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v2);
  return v2;
}

uint64_t EgressMessage.init(datagram:participantIDs:completion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a6, a1, a5);
  uint64_t result = type metadata accessor for EgressMessage();
  *(void *)(a6 + *(int *)(result + 36)) = a2;
  uint64_t v11 = (void *)(a6 + *(int *)(result + 40));
  *uint64_t v11 = a3;
  v11[1] = a4;
  return result;
}

void EgressMessageError.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static EgressMessageError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int EgressMessageError.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t DatagramClient.State.description.getter(char a1)
{
  if (!a1) {
    return 0x7964616552;
  }
  if (a1 == 1) {
    return 0x676E69736F6C43;
  }
  return 0x6465736F6C43;
}

BOOL static DatagramClient.State.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void DatagramClient.State.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

BOOL static DatagramClient.State.< infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a1 < a2;
}

Swift::Int DatagramClient.State.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DatagramClient.State()
{
  uint64_t v1 = 0x676E69736F6C43;
  if (*v0 != 1) {
    uint64_t v1 = 0x6465736F6C43;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x7964616552;
  }
}

uint64_t DatagramClient.config.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  unint64_t v5 = *(void *)(v1 + 40);
  char v6 = *(unsigned char *)(v1 + 48);
  uint64_t v7 = *(void *)(v1 + 72);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v1 + 56);
  *(void *)(a1 + 56) = v7;
  return outlined copy of DatagramEndpoint(v2, v3, v4, v5, v6);
}

id DatagramClient.queue.getter()
{
  return *(id *)(v0 + 80);
}

uint64_t DatagramClient.state.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 88);
}

uint64_t DatagramClient.state.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 88) = a1;
  return result;
}

uint64_t (*DatagramClient.state.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

uint64_t DatagramClient.startDatagramChannelStream.getter()
{
  return swift_bridgeObjectRetain();
}

void DatagramClient.startDatagramChannelStream.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + 96);
  swift_beginAccess();
  uint64_t v4 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v5 = NSClassFromString(v4);

  if (v5
    || (char v6 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
        Class v7 = NSClassFromString(v6),
        v6,
        v7))
  {
    *uint64_t v3 = a1;
    swift_endAccess();
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void (*DatagramClient.startDatagramChannelStream.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  long long v3[4] = v1;
  swift_beginAccess();
  v3[3] = *(void *)(v1 + 96);
  swift_bridgeObjectRetain();
  return DatagramClient.startDatagramChannelStream.modify;
}

void DatagramClient.startDatagramChannelStream.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  if ((a2 & 1) == 0)
  {
    uint64_t v9 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
    Class v10 = NSClassFromString(v9);

    if (v10
      || (uint64_t v11 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL),
          Class v12 = NSClassFromString(v11),
          v11,
          v12))
    {
      *(void *)(v2[4] + 96) = v3;
      swift_endAccess();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
LABEL_12:
    __break(1u);
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = (NSString *)MEMORY[0x1B3EA1B00](0x50747365546E6553, 0xEC00000065626F72);
  Class v5 = NSClassFromString(v4);

  if (!v5)
  {
    char v6 = (NSString *)MEMORY[0x1B3EA1B00](0x7250747365544358, 0xEB0000000065626FLL);
    Class v7 = NSClassFromString(v6);

    if (!v7)
    {
      __break(1u);
      goto LABEL_12;
    }
  }
  uint64_t v8 = v2[4];
  swift_bridgeObjectRelease();
  *(void *)(v8 + 96) = v3;
  swift_bridgeObjectRelease();
  swift_endAccess();
LABEL_8:
  free(v2);
}

uint64_t key path getter for DatagramClient.datagramChannelStreams : DatagramClient@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 168))();
  *a2 = result;
  return result;
}

uint64_t key path setter for DatagramClient.datagramChannelStreams : DatagramClient(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 176);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t DatagramClient.datagramChannelStreams.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t DatagramClient.datagramChannelStreams.setter()
{
  return static Published.subscript.setter();
}

void (*DatagramClient.datagramChannelStreams.modify(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return ConversationManagerClient.activeSessionContainer.modify;
}

uint64_t key path setter for DatagramClient.$datagramChannelStreams : DatagramClient(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[String : AnyDatagramChannelStream]>.Publisher);
  MEMORY[0x1F4188790](v4);
  char v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 200))(v6);
}

uint64_t DatagramClient.$datagramChannelStreams.getter()
{
  return swift_endAccess();
}

uint64_t DatagramClient.$datagramChannelStreams.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[String : AnyDatagramChannelStream]>.Publisher);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[String : AnyDatagramChannelStream]>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*DatagramClient.$datagramChannelStreams.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[String : AnyDatagramChannelStream]>.Publisher);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  uint64_t v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC14CopresenceCore14DatagramClient__datagramChannelStreams;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[String : AnyDatagramChannelStream]>);
  Published.projectedValue.getter();
  swift_endAccess();
  return ActivitySession.$state.modify;
}

uint64_t DatagramClient.__allocating_init(config:queue:)(long long *a1, void *a2)
{
  uint64_t v4 = swift_allocObject();
  DatagramClient.init(config:queue:)(a1, a2);
  return v4;
}

uint64_t DatagramClient.init(config:queue:)(long long *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v46 = a2;
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v43 = *(void *)(v5 - 8);
  uint64_t v44 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v42 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v40);
  uint64_t v41 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v39 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[String : AnyDatagramChannelStream]>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v45 = *a1;
  uint64_t v14 = *((void *)a1 + 2);
  uint64_t v15 = *((void *)a1 + 3);
  char v16 = *((unsigned char *)a1 + 32);
  uint64_t v18 = *((void *)a1 + 5);
  uint64_t v17 = *((void *)a1 + 6);
  uint64_t v19 = MEMORY[0x1E4FBC868];
  uint64_t v20 = *((void *)a1 + 7);
  *(void *)(v3 + 96) = MEMORY[0x1E4FBC868];
  uint64_t v21 = v3 + OBJC_IVAR____TtC14CopresenceCore14DatagramClient__datagramChannelStreams;
  uint64_t v47 = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : AnyDatagramChannelStream]);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v21, v13, v10);
  unint64_t v22 = v46;
  *(_OWORD *)(v3 + 16) = v45;
  *(void *)(v3 + 32) = v14;
  *(void *)(v3 + 40) = v15;
  *(unsigned char *)(v3 + 48) = v16;
  *(void *)(v3 + 56) = v18;
  *(void *)(v3 + 64) = v17;
  *(void *)(v3 + 72) = v20;
  if (v22)
  {
    uint64_t v23 = (uint64_t)v22;
  }
  else
  {
    type metadata accessor for OS_dispatch_queue();
    static DispatchQoS.unspecified.getter();
    uint64_t v47 = MEMORY[0x1E4FBC860];
    _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x1E4FBCC10]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    (*(void (**)(char *, void, uint64_t))(v43 + 104))(v42, *MEMORY[0x1E4FBCC58], v44);
    uint64_t v23 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
    unint64_t v22 = 0;
  }
  *(void *)(v3 + 80) = v23;
  *(unsigned char *)(v3 + 88) = 0;
  uint64_t v24 = one-time initialization token for log;
  id v25 = v22;
  if (v24 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)log);
  swift_retain_n();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    uint64_t v54 = v30;
    *(_DWORD *)uint64_t v29 = 136315138;
    uint64_t v31 = *(void *)(v3 + 24);
    uint64_t v32 = *(void *)(v3 + 32);
    unint64_t v33 = *(void *)(v3 + 40);
    char v34 = *(unsigned char *)(v3 + 48);
    uint64_t v35 = *(void *)(v3 + 72);
    uint64_t v47 = *(void *)(v3 + 16);
    uint64_t v48 = v31;
    uint64_t v49 = v32;
    unint64_t v50 = v33;
    char v51 = v34;
    long long v52 = *(_OWORD *)(v3 + 56);
    uint64_t v53 = v35;
    outlined copy of DatagramEndpoint(v47, v31, v32, v33, v34);
    uint64_t v36 = String.init<A>(describing:)();
    uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B0DF7000, v27, v28, "DatagramClient init, config=%s", v29, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v30, -1, -1);
    MEMORY[0x1B3EA39E0](v29, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  return v3;
}

uint64_t DatagramClient.deinit()
{
  uint64_t v1 = type metadata accessor for DatagramChannelError(0);
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *))(*(void *)v0 + 240))(v3);
  outlined destroy of DatagramChannelError((uint64_t)v3, type metadata accessor for DatagramChannelError);
  outlined consume of DatagramEndpoint(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));

  swift_bridgeObjectRelease();
  uint64_t v4 = v0 + OBJC_IVAR____TtC14CopresenceCore14DatagramClient__datagramChannelStreams;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[String : AnyDatagramChannelStream]>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  return v0;
}

uint64_t DatagramClient.__deallocating_deinit()
{
  uint64_t v1 = type metadata accessor for DatagramChannelError(0);
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *))(*(void *)v0 + 240))(v3);
  outlined destroy of DatagramChannelError((uint64_t)v3, type metadata accessor for DatagramChannelError);
  outlined consume of DatagramEndpoint(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));

  swift_bridgeObjectRelease();
  uint64_t v4 = v0 + OBJC_IVAR____TtC14CopresenceCore14DatagramClient__datagramChannelStreams;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[String : AnyDatagramChannelStream]>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  return swift_deallocClassInstance();
}

uint64_t DatagramClient.channel<A, B>(definition:topic:input:inputBufferMaxQueueSize:traceId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(), void *a10)
{
  uint64_t v11 = v10;
  uint64_t v42 = a2;
  uint64_t v43 = a5;
  uint64_t v41 = a4;
  uint64_t v46 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v49 = *(void *)(v46 - 8);
  MEMORY[0x1F4188790](v46);
  long long v45 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  uint64_t v47 = *(void *)(v17 - 8);
  uint64_t v48 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v44 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v21 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long aBlock = a7;
  *((void *)&aBlock + 1) = a8;
  uint64_t v53 = a9;
  uint64_t v54 = a10;
  uint64_t v50 = type metadata accessor for DatagramChannelStream();
  uint64_t v23 = *(void *)(v11 + 24);
  uint64_t v24 = *(void *)(v11 + 32);
  unint64_t v25 = *(void *)(v11 + 40);
  char v26 = *(unsigned char *)(v11 + 48);
  uint64_t v27 = *(void *)(v11 + 72);
  *(void *)&long long aBlock = *(void *)(v11 + 16);
  uint64_t v22 = aBlock;
  *((void *)&aBlock + 1) = v23;
  uint64_t v53 = (uint64_t (*)())v24;
  uint64_t v54 = (void *)v25;
  LOBYTE(v55) = v26;
  long long v56 = *(_OWORD *)(v11 + 56);
  uint64_t v57 = v27;
  os_log_type_t v28 = *(void **)(v11 + 80);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a6, (uint64_t)v21, &demangling cache variable for type metadata for UUID?);
  uint64_t v29 = a3;
  swift_bridgeObjectRetain();
  uint64_t v30 = v41;
  swift_retain();
  outlined copy of DatagramEndpoint(v22, v23, v24, v25, v26);
  id v31 = v28;
  uint64_t v32 = v42;
  uint64_t v33 = DatagramChannelStream.__allocating_init(definition:topic:input:config:inputBufferMaxQueueSize:queue:traceId:)((uint64_t)v31, v42, v29, v30, &aBlock, v43, v31, (uint64_t)v21);
  char v34 = (void *)swift_allocObject();
  v34[2] = v11;
  void v34[3] = v33;
  v34[4] = v32;
  v34[5] = v29;
  uint64_t v55 = partial apply for closure #1 in DatagramClient.channel<A, B>(definition:topic:input:inputBufferMaxQueueSize:traceId:);
  *(void *)&long long v56 = v34;
  *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
  *((void *)&aBlock + 1) = 1107296256;
  uint64_t v53 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v54 = &block_descriptor_19;
  uint64_t v35 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v36 = v44;
  static DispatchQoS.unspecified.getter();
  uint64_t v51 = MEMORY[0x1E4FBC860];
  _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  unint64_t v37 = v45;
  uint64_t v38 = v46;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v36, v37, v35);
  _Block_release(v35);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v37, v38);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v36, v48);
  swift_release();
  *(void *)&long long aBlock = v33;
  swift_getWitnessTable();
  uint64_t v39 = Publisher.eraseToAnyPublisher()();
  swift_release();
  return v39;
}

uint64_t closure #1 in DatagramClient.channel<A, B>(definition:topic:input:inputBufferMaxQueueSize:traceId:)(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a2;
  uint64_t v77 = a2;
  uint64_t v75 = a3;
  uint64_t v76 = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Future<NWConnectionGroup, DatagramChannelConnectError>, OS_dispatch_queue>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.MapError<Publishers.ReceiveOn<Future<NWConnectionGroup, DatagramChannelConnectError>, OS_dispatch_queue>, DatagramChannelError>);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DatagramChannelError(0);
  uint64_t v19 = MEMORY[0x1F4188790](v18);
  unint64_t v74 = (char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned __int8 (**)(uint64_t))(*a1 + 120))(v19))
  {
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)log);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl(&dword_1B0DF7000, v22, v23, "DatagramClient already closed", v24, 2u);
      MEMORY[0x1B3EA39E0](v24, -1, -1);
    }

    uint64_t v25 = (uint64_t)v74;
    default argument 0 of DatagramChannelStream.close(error:)();
    (*(void (**)(uint64_t))(*v77 + 480))(v25);
    return outlined destroy of DatagramChannelError(v25, type metadata accessor for DatagramChannelError);
  }
  else
  {
    uint64_t v72 = v14;
    uint64_t v73 = v18;
    uint64_t v69 = v13;
    uint64_t v70 = v11;
    uint64_t v71 = v15;
    uint64_t v27 = *(uint64_t (**)(uint64_t))(*a1 + 168);
    uint64_t v28 = swift_bridgeObjectRetain();
    uint64_t v29 = v27(v28);
    uint64_t v30 = *(void *)(v29 + 16);
    id v31 = a1;
    uint64_t v67 = v10;
    os_log_type_t v68 = v17;
    if (v30)
    {
      uint64_t v32 = v75;
      unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v75, a4);
      unint64_t v34 = a4;
      if (v35)
      {
        uint64_t v36 = (uint64_t *)(*(void *)(v29 + 56) + 16 * v33);
        uint64_t v37 = *v36;
        uint64_t v65 = v36[1];
        uint64_t v66 = v37;
        swift_unknownObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v38 = (uint64_t)v9;
        if (one-time initialization token for log != -1) {
          swift_once();
        }
        uint64_t v39 = type metadata accessor for Logger();
        __swift_project_value_buffer(v39, (uint64_t)log);
        swift_bridgeObjectRetain_n();
        uint64_t v40 = Logger.logObject.getter();
        os_log_type_t v41 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v40, v41))
        {
          uint64_t v42 = (uint8_t *)swift_slowAlloc();
          v81[0] = swift_slowAlloc();
          uint64_t v43 = v81[0];
          *(_DWORD *)uint64_t v42 = 136315138;
          uint64_t v64 = v42 + 4;
          swift_bridgeObjectRetain();
          *(void *)&long long v78 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v34, v81);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B0DF7000, v40, v41, "Replacing existing channelStream for topic=%s", v42, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v43, -1, -1);
          MEMORY[0x1B3EA39E0](v42, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        uint64_t ObjectType = swift_getObjectType();
        uint64_t v45 = (uint64_t)v74;
        swift_storeEnumTagMultiPayload();
        (*(void (**)(uint64_t, uint64_t))(v65 + 64))(v45, ObjectType);
        swift_unknownObjectRelease();
        outlined destroy of DatagramChannelError(v45, type metadata accessor for DatagramChannelError);
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v38 = (uint64_t)v9;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v34 = a4;
      uint64_t v38 = (uint64_t)v9;
    }
    uint64_t v46 = *(uint64_t (**)(uint64_t *))(*v31 + 184);
    swift_bridgeObjectRetain();
    uint64_t v47 = (uint64_t)v77;
    swift_retain();
    uint64_t v48 = (void (*)(uint64_t *, void))v46(v81);
    uint64_t v50 = v49;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v80 = *v50;
    *uint64_t v50 = 0x8000000000000000;
    long long v52 = *(_OWORD *)(v76 + 96);
    long long v78 = *(_OWORD *)(v76 + 80);
    long long v79 = v52;
    uint64_t v53 = type metadata accessor for DatagramChannelStream();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v47, v75, v34, isUniquelyReferenced_nonNull_native, &v80, v53, (uint64_t)&protocol witness table for DatagramChannelStream<A, B>);
    *uint64_t v50 = v80;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v48(v81, 0);
    uint64_t v54 = swift_allocObject();
    *(void *)(v54 + 16) = v31;
    *(void *)(v54 + 24) = v47;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<NWConnectionGroup, DatagramChannelConnectError>);
    swift_allocObject();
    swift_retain();
    swift_retain();
    uint64_t v76 = Future.init(_:)();
    v81[0] = v76;
    *(void *)&long long v78 = v31[10];
    uint64_t v55 = (void *)v78;
    uint64_t v56 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v38, 1, 1, v56);
    type metadata accessor for OS_dispatch_queue();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Future<NWConnectionGroup, DatagramChannelConnectError> and conformance Future<A, B>, &demangling cache variable for type metadata for Future<NWConnectionGroup, DatagramChannelConnectError>);
    _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (void (*)(uint64_t))type metadata accessor for OS_dispatch_queue);
    id v57 = v55;
    uint64_t v58 = v69;
    Publisher.receive<A>(on:options:)();
    outlined destroy of UUID?(v38, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<Future<NWConnectionGroup, DatagramChannelConnectError>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<Future<NWConnectionGroup, DatagramChannelConnectError>, OS_dispatch_queue>);
    _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_1(&lazy protocol witness table cache variable for type DatagramChannelError and conformance DatagramChannelError, (void (*)(uint64_t))type metadata accessor for DatagramChannelError);
    uint64_t v59 = v67;
    os_log_type_t v60 = v68;
    Publisher.mapError<A>(_:)();
    (*(void (**)(char *, uint64_t))(v70 + 8))(v58, v59);
    uint64_t v61 = (void *)swift_allocObject();
    v61[2] = v47;
    v61[3] = v31;
    v61[4] = v75;
    v61[5] = v34;
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.MapError<Publishers.ReceiveOn<Future<NWConnectionGroup, DatagramChannelConnectError>, OS_dispatch_queue>, DatagramChannelError> and conformance Publishers.MapError<A, B>, &demangling cache variable for type metadata for Publishers.MapError<Publishers.ReceiveOn<Future<NWConnectionGroup, DatagramChannelConnectError>, OS_dispatch_queue>, DatagramChannelError>);
    swift_retain_n();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v62 = v72;
    uint64_t v63 = Publisher.sink(receiveCompletion:receiveValue:)();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v71 + 8))(v60, v62);
    (*(void (**)(uint64_t))(*(void *)v47 + 352))(v63);
    return swift_release();
  }
}

uint64_t closure #1 in closure #1 in DatagramClient.channel<A, B>(definition:topic:input:inputBufferMaxQueueSize:traceId:)(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for DatagramChannelStream();
  return specialized DatagramClient.createChannelGroup(channelStream:attempt:promise:)(a4, 1, a1, a2, a3, v8, (uint64_t)&protocol witness table for DatagramChannelStream<A, B>);
}

uint64_t closure #2 in closure #1 in DatagramClient.channel<A, B>(definition:topic:input:inputBufferMaxQueueSize:traceId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of DatagramChannelError(a1, a2, (uint64_t (*)(void))type metadata accessor for DatagramChannelConnectError);
  type metadata accessor for DatagramChannelError(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t closure #3 in closure #1 in DatagramClient.channel<A, B>(definition:topic:input:inputBufferMaxQueueSize:traceId:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<DatagramChannelError>);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Subscribers.Completion<DatagramChannelError>);
  uint64_t v5 = type metadata accessor for DatagramChannelError(0);
  int v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5);
  uint64_t result = outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for Subscribers.Completion<DatagramChannelError>);
  if (v6 != 1) {
    return PassthroughSubject.send(completion:)();
  }
  return result;
}

uint64_t closure #4 in closure #1 in DatagramClient.channel<A, B>(definition:topic:input:inputBufferMaxQueueSize:traceId:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for DatagramChannelError(0);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *a1;
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a3 + 120))(v11) == 1)
  {
    NWConnectionGroup.cancel()();
    default argument 0 of DatagramChannelStream.close(error:)();
    (*(void (**)(char *))(*(void *)a2 + 480))(v13);
    return outlined destroy of DatagramChannelError((uint64_t)v13, type metadata accessor for DatagramChannelError);
  }
  uint64_t v16 = *(uint64_t (**)(uint64_t))(*(void *)a3 + 144);
  uint64_t v17 = swift_bridgeObjectRetain();
  uint64_t v18 = v16(v17);
  if (!*(void *)(v18 + 16) || (unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a4, a5), (v20 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 472))(v14);
  }
  char v21 = *(unsigned char *)(*(void *)(v18 + 56) + v19);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v21) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 472))(v14);
  }
  return result;
}

Swift::Void __swiftcall DatagramClient.close()()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10[1] = *(void *)(v0 + 80);
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = partial apply for closure #1 in DatagramClient.close();
  aBlock[5] = v8;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_8_0;
  uint64_t v9 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v12 = MEMORY[0x1E4FBC860];
  _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v7, v4, v9);
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v11);
  swift_release();
  swift_release();
}

uint64_t closure #1 in DatagramClient.close()()
{
  uint64_t v0 = type metadata accessor for DatagramChannelError(0);
  MEMORY[0x1F4188790](v0);
  uint64_t v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = result;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *))(*(void *)v4 + 240))(v2);
    swift_release();
    return outlined destroy of DatagramChannelError((uint64_t)v2, type metadata accessor for DatagramChannelError);
  }
  return result;
}

uint64_t DatagramClient._close(error:)(NSObject *a1)
{
  os_log_t v88 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DatagramChannelError?);
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v76 - v6;
  uint64_t v8 = type metadata accessor for DatagramChannelError(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)&v76 - v14;
  uint64_t v16 = MEMORY[0x1F4188790](v13);
  uint64_t v18 = (char *)&v76 - v17;
  unint64_t v19 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 120);
  uint64_t v20 = *(void *)v1 + 120;
  uint64_t result = v19(v16);
  if (!(_BYTE)result)
  {
    uint64_t v85 = v20;
    uint64_t v86 = v18;
    long long v78 = v12;
    long long v79 = (uint64_t (*)(void))v5;
    Swift::String v81 = v7;
    *(void *)&long long v82 = v9;
    uint64_t v22 = (uint64_t)v88;
    uint64_t v83 = v15;
    uint64_t v84 = (unsigned __int8 (*)(void))v8;
    uint64_t v80 = v1;
    if (one-time initialization token for log != -1) {
LABEL_42:
    }
      swift_once();
    uint64_t v23 = type metadata accessor for Logger();
    uint64_t v24 = __swift_project_value_buffer(v23, (uint64_t)log);
    uint64_t v25 = (uint64_t)v86;
    outlined init with copy of DatagramChannelError(v22, (uint64_t)v86, type metadata accessor for DatagramChannelError);
    uint64_t v26 = v80;
    swift_retain_n();
    uint64_t v87 = v24;
    uint64_t v27 = Logger.logObject.getter();
    int v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, (os_log_type_t)v28))
    {
      uint64_t v29 = (unsigned __int8 (*)(uint64_t))v19;
      os_log_t v88 = v27;
      uint64_t v30 = swift_slowAlloc();
      uint64_t v76 = swift_slowAlloc();
      uint64_t v90 = v76;
      *(_DWORD *)uint64_t v30 = 136315650;
      uint64_t v31 = (uint64_t)v81;
      outlined init with copy of DatagramChannelError(v25, (uint64_t)v81, type metadata accessor for DatagramChannelError);
      uint64_t v32 = v82;
      unint64_t v33 = v84;
      (*(void (**)(uint64_t, void, uint64_t, unsigned __int8 (*)(void)))(v82 + 56))(v31, 0, 1, v84);
      unint64_t v34 = v79;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v31, (uint64_t)v79, &demangling cache variable for type metadata for DatagramChannelError?);
      int v35 = (*(uint64_t (**)(uint64_t (*)(void), uint64_t, unsigned __int8 (*)(void)))(v32 + 48))(v34, 1, v33);
      int v77 = v28;
      if (v35 == 1)
      {
        unint64_t v36 = 0xE300000000000000;
        uint64_t v37 = 7104878;
      }
      else
      {
        uint64_t v41 = (uint64_t)v83;
        outlined init with take of DatagramChannelError((uint64_t)v34, (uint64_t)v83, type metadata accessor for DatagramChannelError);
        outlined init with copy of DatagramChannelError(v41, (uint64_t)v78, type metadata accessor for DatagramChannelError);
        uint64_t v37 = String.init<A>(reflecting:)();
        unint64_t v36 = v42;
        outlined destroy of DatagramChannelError(v41, type metadata accessor for DatagramChannelError);
      }
      outlined destroy of UUID?(v31, &demangling cache variable for type metadata for DatagramChannelError?);
      uint64_t v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v36, &v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v43 = outlined destroy of DatagramChannelError(v25, type metadata accessor for DatagramChannelError);
      *(_WORD *)(v30 + 12) = 2048;
      uint64_t v44 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v80 + 168))(v43) + 16);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v89 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v45 = swift_release();
      *(_WORD *)(v30 + 22) = 2080;
      int v46 = v29(v45);
      if (v46)
      {
        uint64_t v39 = (uint64_t)v83;
        unint64_t v19 = (uint64_t (*)(uint64_t))v84;
        if (v46 == 1)
        {
          unint64_t v47 = 0xE700000000000000;
          uint64_t v48 = 0x676E69736F6C43;
        }
        else
        {
          unint64_t v47 = 0xE600000000000000;
          uint64_t v48 = 0x6465736F6C43;
        }
        uint64_t v38 = v80;
      }
      else
      {
        unint64_t v47 = 0xE500000000000000;
        uint64_t v48 = 0x7964616552;
        uint64_t v38 = v80;
        uint64_t v39 = (uint64_t)v83;
        unint64_t v19 = (uint64_t (*)(uint64_t))v84;
      }
      uint64_t v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v47, &v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      os_log_t v49 = v88;
      _os_log_impl(&dword_1B0DF7000, v88, (os_log_type_t)v77, "Closing, error=%s topic-count=%ld state=%s", (uint8_t *)v30, 0x20u);
      uint64_t v40 = MEMORY[0x1E4FBC840];
      uint64_t v50 = v76;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v50, -1, -1);
      MEMORY[0x1B3EA39E0](v30, -1, -1);
    }
    else
    {
      swift_release();
      outlined destroy of DatagramChannelError(v25, type metadata accessor for DatagramChannelError);

      swift_release_n();
      uint64_t v38 = v26;
      uint64_t v39 = (uint64_t)v83;
      unint64_t v19 = (uint64_t (*)(uint64_t))v84;
      uint64_t v40 = MEMORY[0x1E4FBC840];
    }
    uint64_t v51 = *(uint64_t (**)(void))(*(void *)v38 + 128);
    long long v78 = (char *)(*(void *)v38 + 128);
    long long v79 = v51;
    uint64_t v52 = v51(1);
    uint64_t v53 = (*(uint64_t (**)(uint64_t))(*(void *)v38 + 168))(v52);
    uint64_t v55 = 0;
    uint64_t v56 = *(void *)(v53 + 64);
    uint64_t v85 = v53 + 64;
    os_log_t v88 = (os_log_t)v53;
    uint64_t v57 = 1 << *(unsigned char *)(v53 + 32);
    uint64_t v58 = -1;
    if (v57 < 64) {
      uint64_t v58 = ~(-1 << v57);
    }
    uint64_t v22 = v58 & v56;
    uint64_t v86 = (char *)((unint64_t)(v57 + 63) >> 6);
    *(void *)&long long v54 = 136315138;
    long long v82 = v54;
    Swift::String v81 = (char *)(v40 + 8);
    while (1)
    {
      if (v22)
      {
        unint64_t v60 = __clz(__rbit64(v22));
        v22 &= v22 - 1;
        unint64_t v61 = v60 | (v55 << 6);
      }
      else
      {
        uint64_t v62 = v55 + 1;
        if (__OFADD__(v55, 1))
        {
          __break(1u);
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
        if (v62 >= (uint64_t)v86) {
          goto LABEL_38;
        }
        unint64_t v63 = *(void *)(v85 + 8 * v62);
        ++v55;
        if (!v63)
        {
          uint64_t v55 = v62 + 1;
          if (v62 + 1 >= (uint64_t)v86) {
            goto LABEL_38;
          }
          unint64_t v63 = *(void *)(v85 + 8 * v55);
          if (!v63)
          {
            uint64_t v55 = v62 + 2;
            if (v62 + 2 >= (uint64_t)v86) {
              goto LABEL_38;
            }
            unint64_t v63 = *(void *)(v85 + 8 * v55);
            if (!v63)
            {
              uint64_t v64 = v62 + 3;
              if (v64 >= (uint64_t)v86)
              {
LABEL_38:
                swift_release();
                return v79(2);
              }
              unint64_t v63 = *(void *)(v85 + 8 * v64);
              if (!v63)
              {
                while (1)
                {
                  uint64_t v55 = v64 + 1;
                  if (__OFADD__(v64, 1)) {
                    goto LABEL_41;
                  }
                  if (v55 >= (uint64_t)v86) {
                    goto LABEL_38;
                  }
                  unint64_t v63 = *(void *)(v85 + 8 * v55);
                  ++v64;
                  if (v63) {
                    goto LABEL_35;
                  }
                }
              }
              uint64_t v55 = v64;
            }
          }
        }
LABEL_35:
        uint64_t v22 = (v63 - 1) & v63;
        unint64_t v61 = __clz(__rbit64(v63)) + (v55 << 6);
      }
      uint64_t v65 = 16 * v61;
      uint64_t v66 = (uint64_t *)((char *)v88[6].isa + v65);
      uint64_t v68 = *v66;
      unint64_t v67 = v66[1];
      uint64_t v69 = *(void *)((char *)v88[7].isa + v65 + 8);
      swift_bridgeObjectRetain_n();
      swift_unknownObjectRetain();
      uint64_t v70 = Logger.logObject.getter();
      os_log_type_t v71 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v70, v71))
      {
        uint64_t v72 = swift_slowAlloc();
        uint64_t v73 = swift_slowAlloc();
        uint64_t v90 = v73;
        *(_DWORD *)uint64_t v72 = v82;
        swift_bridgeObjectRetain();
        *(void *)(v72 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v67, &v90);
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B0DF7000, v70, v71, "Closing datagram-channel stream, topic=%s", (uint8_t *)v72, 0xCu);
        swift_arrayDestroy();
        uint64_t v74 = v73;
        uint64_t v39 = (uint64_t)v83;
        MEMORY[0x1B3EA39E0](v74, -1, -1);
        uint64_t v75 = v72;
        unint64_t v19 = (uint64_t (*)(uint64_t))v84;
        MEMORY[0x1B3EA39E0](v75, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t ObjectType = swift_getObjectType();
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 64))(v39, ObjectType, v69);
      swift_unknownObjectRelease();
      outlined destroy of DatagramChannelError(v39, type metadata accessor for DatagramChannelError);
    }
  }
  return result;
}

id protocol witness for UnreliableMessengerServiceProvider.queue.getter in conformance DatagramClient()
{
  return *(id *)(*(void *)v0 + 80);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = (void *)*a5;
  unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    char v21 = (void *)*a5;
    if (v19)
    {
LABEL_8:
      uint64_t v22 = (void *)(v21[7] + 16 * v15);
      uint64_t result = swift_unknownObjectRelease();
      *uint64_t v22 = a1;
      v22[1] = a7;
      return result;
    }
    goto LABEL_11;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1);
  unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v19 & 1) != (v25 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v15 = v24;
  char v21 = (void *)*a5;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  v21[(v15 >> 6) + 8] |= 1 << v15;
  uint64_t v26 = (uint64_t *)(v21[6] + 16 * v15);
  *uint64_t v26 = a2;
  v26[1] = a3;
  uint64_t v27 = (void *)(v21[7] + 16 * v15);
  *uint64_t v27 = a1;
  v27[1] = a7;
  uint64_t v28 = v21[2];
  BOOL v29 = __OFADD__(v28, 1);
  uint64_t v30 = v28 + 1;
  if (v29)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  long long v21[2] = v30;
  return swift_bridgeObjectRetain();
}

uint64_t specialized static DatagramChannelError.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NWError();
  uint64_t v26 = *(void *)(v4 - 8);
  uint64_t v27 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DatagramChannelConnectError();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DatagramChannelError(0);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  unint64_t v15 = (char *)&v26 - v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DatagramChannelError, DatagramChannelError));
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  char v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = (uint64_t)&v19[*(int *)(v17 + 56)];
  outlined init with copy of DatagramChannelError(a1, (uint64_t)v19, type metadata accessor for DatagramChannelError);
  outlined init with copy of DatagramChannelError(a2, v20, type metadata accessor for DatagramChannelError);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with copy of DatagramChannelError((uint64_t)v19, (uint64_t)v13, type metadata accessor for DatagramChannelError);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v22 = v26;
        uint64_t v21 = v27;
        (*(void (**)(char *, uint64_t, uint64_t))(v26 + 32))(v6, v20, v27);
        char v23 = MEMORY[0x1B3EA16F0](v13, v6);
        unint64_t v24 = *(void (**)(char *, uint64_t))(v22 + 8);
        v24(v6, v21);
        v24(v13, v21);
        goto LABEL_15;
      }
      (*(void (**)(char *, uint64_t))(v26 + 8))(v13, v27);
      goto LABEL_13;
    case 2u:
      if (swift_getEnumCaseMultiPayload() != 2) {
        goto LABEL_13;
      }
      goto LABEL_11;
    case 3u:
      if (swift_getEnumCaseMultiPayload() != 3) {
        goto LABEL_13;
      }
      goto LABEL_11;
    case 4u:
      if (swift_getEnumCaseMultiPayload() != 4) {
        goto LABEL_13;
      }
LABEL_11:
      outlined destroy of DatagramChannelError((uint64_t)v19, type metadata accessor for DatagramChannelError);
      char v23 = 1;
      break;
    default:
      outlined init with copy of DatagramChannelError((uint64_t)v19, (uint64_t)v15, type metadata accessor for DatagramChannelError);
      if (swift_getEnumCaseMultiPayload())
      {
        outlined destroy of DatagramChannelError((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for DatagramChannelConnectError);
LABEL_13:
        outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for (DatagramChannelError, DatagramChannelError));
        char v23 = 0;
      }
      else
      {
        outlined init with take of DatagramChannelError(v20, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for DatagramChannelConnectError);
        char v23 = specialized static DatagramChannelConnectError.== infix(_:_:)((uint64_t)v15, (uint64_t)v9);
        outlined destroy of DatagramChannelError((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for DatagramChannelConnectError);
        outlined destroy of DatagramChannelError((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for DatagramChannelConnectError);
LABEL_15:
        outlined destroy of DatagramChannelError((uint64_t)v19, type metadata accessor for DatagramChannelError);
      }
      break;
  }
  return v23 & 1;
}

uint64_t type metadata accessor for EgressMessage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1B0FC53BC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 168))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0FC5408(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 176);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t type metadata accessor for DatagramChannelError(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for DatagramChannelError);
}

uint64_t partial apply for closure #1 in DatagramClient.channel<A, B>(definition:topic:input:inputBufferMaxQueueSize:traceId:)()
{
  return closure #1 in DatagramClient.channel<A, B>(definition:topic:input:inputBufferMaxQueueSize:traceId:)(*(void **)(v0 + 16), *(uint64_t **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t block_destroy_helper_17()
{
  return swift_release();
}

uint64_t _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B0FC54DC()
{
  swift_weakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in DatagramClient.close()()
{
  return closure #1 in DatagramClient.close()();
}

unint64_t lazy protocol witness table accessor for type DatagramClient.State and conformance DatagramClient.State()
{
  unint64_t result = lazy protocol witness table cache variable for type DatagramClient.State and conformance DatagramClient.State;
  if (!lazy protocol witness table cache variable for type DatagramClient.State and conformance DatagramClient.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DatagramClient.State and conformance DatagramClient.State);
  }
  return result;
}

uint64_t sub_1B0FC55CC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 120))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0FC5618(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 128))(*a1);
}

uint64_t sub_1B0FC5660@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 144))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0FC56AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 152);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B0FC5700(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 192))();
}

uint64_t *initializeBufferWithCopyOfBuffer for DatagramChannelError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v12 = type metadata accessor for NWError();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
LABEL_10:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v8 = type metadata accessor for NWError();
      uint64_t v9 = *(void *)(v8 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 2, v8))
      {
        uint64_t v10 = type metadata accessor for DatagramChannelConnectError();
        memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16))(a1, a2, v8);
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 2, v8);
      }
      goto LABEL_10;
    }
    memcpy(a1, a2, *(void *)(v6 + 64));
  }
  return a1;
}

uint64_t destroy for DatagramChannelError(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    uint64_t v4 = type metadata accessor for NWError();
    int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    uint64_t v6 = v4;
    uint64_t v7 = a1;
  }
  else
  {
    if (result) {
      return result;
    }
    uint64_t v3 = type metadata accessor for NWError();
    uint64_t v8 = *(void *)(v3 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(a1, 2, v3);
    if (result) {
      return result;
    }
    int v5 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    uint64_t v7 = a1;
    uint64_t v6 = v3;
  }
  return v5(v7, v6);
}

void *initializeWithCopy for DatagramChannelError(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v10 = type metadata accessor for NWError();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
LABEL_8:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v7 = type metadata accessor for NWError();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
    {
      uint64_t v9 = type metadata accessor for DatagramChannelConnectError();
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
    }
    goto LABEL_8;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

void *assignWithCopy for DatagramChannelError(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of DatagramChannelError((uint64_t)a1, type metadata accessor for DatagramChannelError);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = type metadata accessor for NWError();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
LABEL_9:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v7 = type metadata accessor for NWError();
      uint64_t v8 = *(void *)(v7 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
      {
        uint64_t v9 = type metadata accessor for DatagramChannelConnectError();
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(a1, a2, v7);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
      }
      goto LABEL_9;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *initializeWithTake for DatagramChannelError(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v10 = type metadata accessor for NWError();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
LABEL_8:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v7 = type metadata accessor for NWError();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
    {
      uint64_t v9 = type metadata accessor for DatagramChannelConnectError();
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a1, a2, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
    }
    goto LABEL_8;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

void *assignWithTake for DatagramChannelError(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of DatagramChannelError((uint64_t)a1, type metadata accessor for DatagramChannelError);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = type metadata accessor for NWError();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
LABEL_9:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v7 = type metadata accessor for NWError();
      uint64_t v8 = *(void *)(v7 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
      {
        uint64_t v9 = type metadata accessor for DatagramChannelConnectError();
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a1, a2, v7);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
      }
      goto LABEL_9;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t type metadata completion function for DatagramChannelError()
{
  uint64_t result = type metadata accessor for DatagramChannelConnectError();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for NWError();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t destroy for DatagramClient.Configuration(uint64_t a1)
{
  return outlined consume of DatagramEndpoint(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t initializeWithCopy for DatagramClient.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24);
  char v8 = *(unsigned char *)(a2 + 32);
  outlined copy of DatagramEndpoint(*(void *)a2, v5, v6, v7, v8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for DatagramClient.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24);
  char v8 = *(unsigned char *)(a2 + 32);
  outlined copy of DatagramEndpoint(*(void *)a2, v5, v6, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  unint64_t v12 = *(void *)(a1 + 24);
  char v13 = *(unsigned char *)(a1 + 32);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
  outlined consume of DatagramEndpoint(v9, v10, v11, v12, v13);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for DatagramClient.Configuration(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  unint64_t v8 = *(void *)(a1 + 24);
  char v9 = *(unsigned char *)(a1 + 32);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(unsigned char *)(a1 + 32) = v4;
  outlined consume of DatagramEndpoint(v5, v6, v7, v8, v9);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for DatagramClient.Configuration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DatagramClient.Configuration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DatagramClient.Configuration()
{
  return &type metadata for DatagramClient.Configuration;
}

uint64_t type metadata completion function for EgressMessage()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for EgressMessage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    uint64_t *v4 = *a2;
    int v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    long long v10 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v11 = *v10;
    unint64_t v12 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    char v13 = (unint64_t *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v14 = *v13;
    swift_bridgeObjectRetain();
    if (v14 < 0xFFFFFFFF)
    {
      *(_OWORD *)unint64_t v12 = *(_OWORD *)v13;
      return v4;
    }
    unint64_t v15 = v13[1];
    *(void *)unint64_t v12 = v14;
    *(void *)(v12 + 8) = v15;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for EgressMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  unint64_t v4 = ((a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8) + 15;
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(v4 & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for EgressMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = v6 + a1;
  unint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v7 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *v8;
  unint64_t v9 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  long long v10 = (unint64_t *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v11 = *v10;
  swift_bridgeObjectRetain();
  if (v11 < 0xFFFFFFFF)
  {
    *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
  }
  else
  {
    unint64_t v12 = v10[1];
    *(void *)unint64_t v9 = v11;
    *(void *)(v9 + 8) = v12;
    swift_retain();
  }
  return a1;
}

uint64_t assignWithCopy for EgressMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  *unint64_t v7 = *(void *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v10 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = *(void *)(v9 & 0xFFFFFFFFFFFFFFF8);
  if (*v10 < 0xFFFFFFFFuLL)
  {
    if (v12 >= 0xFFFFFFFF)
    {
      uint64_t v14 = *(void *)(v11 + 8);
      *long long v10 = v12;
      v10[1] = v14;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)long long v10 = *(_OWORD *)v11;
    return a1;
  }
  if (v12 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v13 = *(void *)(v11 + 8);
  *long long v10 = v12;
  v10[1] = v13;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for EgressMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v7 = *v8;
  unint64_t v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  long long v10 = (uint64_t *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = *v10;
  if ((unint64_t)*v10 < 0xFFFFFFFF)
  {
    *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
  }
  else
  {
    uint64_t v12 = v10[1];
    *(void *)unint64_t v9 = v11;
    *(void *)(v9 + 8) = v12;
  }
  return a1;
}

uint64_t assignWithTake for EgressMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v7 = *v8;
  swift_bridgeObjectRelease();
  unint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v10 = (unint64_t *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v11 = *v10;
  if (*v9 < 0xFFFFFFFFuLL)
  {
    if (v11 >= 0xFFFFFFFF)
    {
      unint64_t v13 = v10[1];
      *unint64_t v9 = v11;
      v9[1] = v13;
      return a1;
    }
LABEL_7:
    *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
    return a1;
  }
  if (v11 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  unint64_t v12 = v10[1];
  *unint64_t v9 = v11;
  v9[1] = v12;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for EgressMessage(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1B0FC6B50);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  if ((v17 + 1) >= 2) {
    return v17;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for EgressMessage(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFE)
            {
              char v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if (a2 > 0x7FFFFFFE)
              {
                *char v19 = 0;
                *(_DWORD *)char v19 = a2 - 0x7FFFFFFF;
              }
              else
              {
                *char v19 = a2;
              }
            }
            else
            {
              uint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v17 = ~v8 + a2;
    bzero(a1, ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x1B0FC6D64);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

unsigned char *storeEnumTagSinglePayload for EgressMessageError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B0FC6E58);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EgressMessageError()
{
  return &type metadata for EgressMessageError;
}

uint64_t type metadata accessor for DatagramChannelDefinition()
{
  return swift_getGenericMetadata();
}

uint64_t ObjC metadata update function for DatagramClient()
{
  return type metadata accessor for DatagramClient(0);
}

uint64_t type metadata accessor for DatagramClient(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for DatagramClient);
}

void type metadata completion function for DatagramClient()
{
  type metadata accessor for Published<[String : AnyDatagramChannelStream]>();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for DatagramClient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DatagramClient);
}

uint64_t dispatch thunk of DatagramClient.state.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of DatagramClient.state.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of DatagramClient.state.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of DatagramClient.startDatagramChannelStream.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of DatagramClient.startDatagramChannelStream.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of DatagramClient.startDatagramChannelStream.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of DatagramClient.datagramChannelStreams.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of DatagramClient.datagramChannelStreams.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of DatagramClient.datagramChannelStreams.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of DatagramClient.$datagramChannelStreams.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of DatagramClient.$datagramChannelStreams.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of DatagramClient.$datagramChannelStreams.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of DatagramClient.__allocating_init(config:queue:)()
{
  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of DatagramClient.channel<A, B>(definition:topic:input:inputBufferMaxQueueSize:traceId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of DatagramClient.close()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of DatagramClient._close(error:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

unsigned char *storeEnumTagSinglePayload for DatagramClient.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B0FC7308);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DatagramClient.State()
{
  return &type metadata for DatagramClient.State;
}

uint64_t sub_1B0FC7340()
{
  swift_release();
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in closure #1 in DatagramClient.channel<A, B>(definition:topic:input:inputBufferMaxQueueSize:traceId:)(void (*a1)(uint64_t), uint64_t a2)
{
  return closure #1 in closure #1 in DatagramClient.channel<A, B>(definition:topic:input:inputBufferMaxQueueSize:traceId:)(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24));
}

uint64_t partial apply for closure #3 in closure #1 in DatagramClient.channel<A, B>(definition:topic:input:inputBufferMaxQueueSize:traceId:)(uint64_t a1)
{
  return closure #3 in closure #1 in DatagramClient.channel<A, B>(definition:topic:input:inputBufferMaxQueueSize:traceId:)(a1);
}

uint64_t objectdestroyTm_4()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #4 in closure #1 in DatagramClient.channel<A, B>(definition:topic:input:inputBufferMaxQueueSize:traceId:)(uint64_t *a1)
{
  return closure #4 in closure #1 in DatagramClient.channel<A, B>(definition:topic:input:inputBufferMaxQueueSize:traceId:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t outlined init with copy of DatagramChannelError(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of DatagramChannelError(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of DatagramChannelError(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t CP_ResponseStatus.init()()
{
  return 0;
}

uint64_t CP_ResponseStatus.init(rawValue:)(uint64_t a1)
{
  return CP_ResponseStatus.init(rawValue:)(a1, (uint64_t (*)(void))specialized CP_ResponseStatus.init(rawValue:));
}

uint64_t CP_ResponseStatus.rawValue.getter(uint64_t result, char a2)
{
  if (a2) {
    return qword_1B1145ED0[result];
  }
  return result;
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance CP_ResponseStatus@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance CP_ResponseStatus((uint64_t (*)(void))specialized CP_ResponseStatus.init(rawValue:), a1);
}

uint64_t protocol witness for Enum.rawValue.getter in conformance CP_ResponseStatus()
{
  uint64_t result = *v0;
  if (*((unsigned char *)v0 + 8) == 1) {
    return qword_1B1145ED0[result];
  }
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CP_ResponseStatus@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance CP_ResponseStatus(a1, specialized CP_ResponseStatus.init(rawValue:), a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CP_ResponseStatus(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*((unsigned char *)v1 + 8) == 1) {
    uint64_t v2 = qword_1B1145ED0[v2];
  }
  *a1 = v2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_ResponseStatus(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CP_ResponseStatus and conformance CP_ResponseStatus();
  return MEMORY[0x1F4127160](a1, a2, v4);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CP_ResponseStatus(uint64_t a1, uint64_t a2)
{
  return specialized == infix<A>(_:_:)(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

uint64_t *CP_ResponseStatus.allCases.unsafeMutableAddressor()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  return &static CP_ResponseStatus.allCases;
}

uint64_t static CP_ResponseStatus.allCases.getter()
{
  return static AttachmentLedger_ResponseStatus.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static CP_ResponseStatus.allCases.setter(uint64_t a1)
{
  return static AttachmentLedger_ResponseStatus.allCases.setter(a1, &one-time initialization token for allCases, &static CP_ResponseStatus.allCases);
}

uint64_t (*static CP_ResponseStatus.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CP_ResponseStatus@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for allCases, &static CP_ResponseStatus.allCases, a1);
}

uint64_t (*CP_Record.topic.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*CP_Record.data.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_Record.seqNum.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CP_Record(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v6 + 36), (uint64_t)v5, &demangling cache variable for type metadata for CP_SequenceNumber?);
  uint64_t v7 = type metadata accessor for CP_SequenceNumber(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CP_SequenceNumber((uint64_t)v5, (uint64_t)a1, type metadata accessor for CP_SequenceNumber);
  }
  *a1 = 0;
  a1[1] = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_SequenceNumber?);
}

uint64_t key path getter for CP_Record.seqNum : CP_Record@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CP_Record(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v7 + 36), (uint64_t)v6, &demangling cache variable for type metadata for CP_SequenceNumber?);
  uint64_t v8 = type metadata accessor for CP_SequenceNumber(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of CP_SequenceNumber((uint64_t)v6, (uint64_t)a2, type metadata accessor for CP_SequenceNumber);
  }
  *a2 = 0;
  a2[1] = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_SequenceNumber?);
}

uint64_t key path setter for CP_Record.seqNum : CP_Record(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of CP_SequenceNumber(a1, (uint64_t)v7, type metadata accessor for CP_SequenceNumber);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for CP_Record(0) + 36);
  outlined destroy of UUID?(v8, &demangling cache variable for type metadata for CP_SequenceNumber?);
  outlined init with take of CP_SequenceNumber((uint64_t)v7, v8, type metadata accessor for CP_SequenceNumber);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t CP_Record.seqNum.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CP_Record(0) + 36);
  outlined destroy of UUID?(v3, &demangling cache variable for type metadata for CP_SequenceNumber?);
  outlined init with take of CP_SequenceNumber(a1, v3, type metadata accessor for CP_SequenceNumber);
  uint64_t v4 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

uint64_t CP_SequenceNumber.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  return UnknownStorage.init()();
}

void (*CP_Record.seqNum.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CP_SequenceNumber(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  long long v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CP_Record(0) + 36);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CP_SequenceNumber?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = 0;
    v10[1] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_SequenceNumber?);
  }
  else
  {
    outlined init with take of CP_SequenceNumber((uint64_t)v5, (uint64_t)v10, type metadata accessor for CP_SequenceNumber);
  }
  return CP_Record.seqNum.modify;
}

void CP_Record.seqNum.modify(uint64_t a1, char a2)
{
}

BOOL CP_Record.hasSeqNum.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CP_Record(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0 + *(int *)(v4 + 36), (uint64_t)v3, &demangling cache variable for type metadata for CP_SequenceNumber?);
  uint64_t v5 = type metadata accessor for CP_SequenceNumber(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of UUID?((uint64_t)v3, &demangling cache variable for type metadata for CP_SequenceNumber?);
  return v6;
}

Swift::Void __swiftcall CP_Record.clearSeqNum()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CP_Record(0) + 36);
  outlined destroy of UUID?(v1, &demangling cache variable for type metadata for CP_SequenceNumber?);
  uint64_t v2 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t (*CP_Record.destinationParticipantIds.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_Record.encryptionID.getter@<X0>(_OWORD *a1@<X8>)
{
  return CP_Record.encryptionID.getter(type metadata accessor for CP_Record, a1);
}

uint64_t CP_Record.encryptionID.setter(uint64_t a1)
{
  return CP_Record.encryptionID.setter(a1, type metadata accessor for CP_Record);
}

uint64_t CP_EncryptionID.init()@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_1B113B700;
  type metadata accessor for CP_EncryptionID(0);
  return UnknownStorage.init()();
}

void (*CP_Record.encryptionID.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CP_EncryptionID(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  long long v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CP_Record(0) + 40);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CP_EncryptionID?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = xmmword_1B113B700;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_EncryptionID?);
  }
  else
  {
    outlined init with take of CP_SequenceNumber((uint64_t)v5, (uint64_t)v10, type metadata accessor for CP_EncryptionID);
  }
  return CP_Record.encryptionID.modify;
}

void CP_Record.encryptionID.modify(uint64_t a1, char a2)
{
}

BOOL CP_Record.hasEncryptionID.getter()
{
  return CP_Record.hasEncryptionID.getter(type metadata accessor for CP_Record);
}

Swift::Void __swiftcall CP_Record.clearEncryptionID()()
{
}

uint64_t (*CP_Record.sentEpochMillis.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_Record.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CP_Record.unknownFields.getter(type metadata accessor for CP_Record, a1);
}

uint64_t CP_Record.unknownFields.setter(uint64_t a1)
{
  return CP_Record.unknownFields.setter(a1, type metadata accessor for CP_Record);
}

uint64_t (*CP_Record.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_Record.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(_OWORD *)(a1 + 16) = xmmword_1B113B700;
  *(void *)(a1 + 32) = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 40) = 0;
  uint64_t v2 = type metadata accessor for CP_Record(0);
  UnknownStorage.init()();
  uint64_t v3 = a1 + *(int *)(v2 + 36);
  uint64_t v4 = type metadata accessor for CP_SequenceNumber(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = a1 + *(int *)(v2 + 40);
  uint64_t v6 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, 1, 1, v6);
}

uint64_t CP_KeyValue.key.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CP_KeyValue.key.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*CP_KeyValue.key.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_KeyValue.dataValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  outlined copy of Data._Representation(v1, *(void *)(v0 + 24));
  return v1;
}

uint64_t CP_KeyValue.dataValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data._Representation(*(void *)(v2 + 16), *(void *)(v2 + 24));
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*CP_KeyValue.dataValue.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_KeyValue.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CP_KeyValue.unknownFields.getter(type metadata accessor for CP_KeyValue, a1);
}

uint64_t CP_KeyValue.unknownFields.setter(uint64_t a1)
{
  return CP_KeyValue.unknownFields.setter(a1, type metadata accessor for CP_KeyValue);
}

uint64_t (*CP_KeyValue.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_KeyValue.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(_OWORD *)(a1 + 16) = xmmword_1B113B700;
  type metadata accessor for CP_KeyValue(0);
  return UnknownStorage.init()();
}

uint64_t CP_SequenceNumber.publisherParticipantID.getter()
{
  return *(void *)v0;
}

uint64_t CP_SequenceNumber.publisherParticipantID.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*CP_SequenceNumber.publisherParticipantID.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SequenceNumber.seqNum.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t CP_SequenceNumber.seqNum.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*CP_SequenceNumber.seqNum.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SequenceNumber.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CP_KeyValue.unknownFields.getter(type metadata accessor for CP_SequenceNumber, a1);
}

uint64_t CP_KeyValue.unknownFields.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t CP_SequenceNumber.unknownFields.setter(uint64_t a1)
{
  return CP_KeyValue.unknownFields.setter(a1, type metadata accessor for CP_SequenceNumber);
}

uint64_t CP_KeyValue.unknownFields.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*CP_SequenceNumber.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_EncryptionID.uuid.getter()
{
  uint64_t v1 = *(void *)v0;
  outlined copy of Data._Representation(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t CP_EncryptionID.uuid.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data._Representation(*(void *)v2, *(void *)(v2 + 8));
  *(void *)uint64_t v2 = a1;
  *(void *)(v2 + 8) = a2;
  return result;
}

uint64_t (*CP_EncryptionID.uuid.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_EncryptionID.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CP_EncryptionID.unknownFields.getter(type metadata accessor for CP_EncryptionID, a1);
}

uint64_t CP_EncryptionID.unknownFields.setter(uint64_t a1)
{
  return CP_EncryptionID.unknownFields.setter(a1, type metadata accessor for CP_EncryptionID);
}

uint64_t (*CP_EncryptionID.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_TopicSubscribersRequest.operation.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, a1, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
}

uint64_t CP_TopicSubscribersRequest.operation.setter(uint64_t a1)
{
  return outlined assign with take of ActivitySession.DomainAssertionWrapper?(a1, v1, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
}

uint64_t (*CP_TopicSubscribersRequest.operation.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_TopicSubscribersRequest.topicTerminationAck.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  uint64_t v7 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
LABEL_5:
    *a1 = 0;
    a1[1] = 0xE000000000000000;
    type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0);
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of CP_SequenceNumber((uint64_t)v6, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
    goto LABEL_5;
  }
  return outlined init with take of CP_SequenceNumber((uint64_t)v6, (uint64_t)a1, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
}

uint64_t key path getter for CP_TopicSubscribersRequest.topicTerminationAck : CP_TopicSubscribersRequest@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v6, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  uint64_t v7 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
LABEL_5:
    *a2 = 0;
    a2[1] = 0xE000000000000000;
    type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0);
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of CP_SequenceNumber((uint64_t)v6, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
    goto LABEL_5;
  }
  return outlined init with take of CP_SequenceNumber((uint64_t)v6, (uint64_t)a2, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
}

uint64_t key path setter for CP_TopicSubscribersRequest.topicTerminationAck : CP_TopicSubscribersRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of CP_SequenceNumber(a1, (uint64_t)v6, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
  outlined destroy of UUID?(a2, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  outlined init with take of CP_SequenceNumber((uint64_t)v6, a2, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
  uint64_t v7 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t CP_TopicSubscribersRequest.topicTerminationAck.setter(uint64_t a1)
{
  return CP_TopicSubscribersRequest.topicTerminationAck.setter(a1, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
}

uint64_t CP_TopicSubscribersRequest.TopicTerminatedAck.init()@<X0>(void *a1@<X8>)
{
  return CP_TopicSubscribersRequest.TopicTerminatedAck.init()((void (*)(void))type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck, a1);
}

void (*CP_TopicSubscribersRequest.topicTerminationAck.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  void *v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  size_t v7 = *(void *)(*(void *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0) - 8) + 64);
  v4[2] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v4[3] = v8;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  uint64_t v9 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  v4[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of CP_SequenceNumber((uint64_t)v6, (uint64_t)v8, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
      return CP_TopicSubscribersRequest.topicTerminationAck.modify;
    }
    outlined destroy of CP_SequenceNumber((uint64_t)v6, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
  }
  *uint64_t v8 = 0;
  v8[1] = 0xE000000000000000;
  UnknownStorage.init()();
  return CP_TopicSubscribersRequest.topicTerminationAck.modify;
}

void CP_TopicSubscribersRequest.topicTerminationAck.modify(uint64_t **a1, char a2)
{
}

uint64_t CP_TopicSubscribersRequest.topicTerminationRequest.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  uint64_t v7 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return outlined init with take of CP_SequenceNumber((uint64_t)v6, a1, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
    }
    outlined destroy of CP_SequenceNumber((uint64_t)v6, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0);
  return UnknownStorage.init()();
}

uint64_t key path setter for CP_TopicSubscribersRequest.topicTerminationRequest : CP_TopicSubscribersRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of CP_SequenceNumber(a1, (uint64_t)v6, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
  outlined destroy of UUID?(a2, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  outlined init with take of CP_SequenceNumber((uint64_t)v6, a2, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
  uint64_t v7 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t CP_TopicSubscribersRequest.topicTerminationRequest.setter(uint64_t a1)
{
  return CP_TopicSubscribersRequest.topicTerminationAck.setter(a1, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
}

uint64_t CP_TopicSubscribersRequest.TopicTerminationRequest.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0);
  return UnknownStorage.init()();
}

void (*CP_TopicSubscribersRequest.topicTerminationRequest.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  void *v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  size_t v7 = *(void *)(*(void *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0) - 8)
                 + 64);
  v4[2] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v4[3] = v8;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  uint64_t v9 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  v4[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
LABEL_6:
    *uint64_t v8 = 0;
    v8[1] = 0xE000000000000000;
    void v8[2] = 0;
    *((unsigned char *)v8 + 24) = 1;
    UnknownStorage.init()();
    return CP_TopicSubscribersRequest.topicTerminationRequest.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of CP_SequenceNumber((uint64_t)v6, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
    goto LABEL_6;
  }
  outlined init with take of CP_SequenceNumber((uint64_t)v6, (uint64_t)v8, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
  return CP_TopicSubscribersRequest.topicTerminationRequest.modify;
}

void CP_TopicSubscribersRequest.topicTerminationRequest.modify(uint64_t **a1, char a2)
{
}

uint64_t CP_TopicSubscribersRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CP_EncryptionID.unknownFields.getter(type metadata accessor for CP_TopicSubscribersRequest, a1);
}

uint64_t CP_EncryptionID.unknownFields.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t CP_TopicSubscribersRequest.unknownFields.setter(uint64_t a1)
{
  return CP_EncryptionID.unknownFields.setter(a1, type metadata accessor for CP_TopicSubscribersRequest);
}

uint64_t CP_EncryptionID.unknownFields.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*CP_TopicSubscribersRequest.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t static CP_TopicSubscribersRequest.TopicTerminatedAck.== infix(_:_:)(char *a1, char *a2)
{
  return specialized static CP_TopicSubscribersRequest.TopicTerminatedAck.== infix(_:_:)(a1, a2, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck) & 1;
}

uint64_t (*CP_TopicSubscribersRequest.TopicTerminatedAck.topicName.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_TopicSubscribersRequest.TopicTerminatedAck.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CP_EncryptionID.unknownFields.getter(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck, a1);
}

uint64_t CP_TopicSubscribersRequest.TopicTerminatedAck.unknownFields.setter(uint64_t a1)
{
  return CP_EncryptionID.unknownFields.setter(a1, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
}

uint64_t (*CP_TopicSubscribersRequest.TopicTerminatedAck.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*CP_TopicSubscribersRequest.TopicTerminationRequest.topicName.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_TopicSubscribersRequest.TopicTerminationRequest.reason.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t CP_TopicSubscribersRequest.TopicTerminationRequest.reason.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = result;
  *(unsigned char *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*CP_TopicSubscribersRequest.TopicTerminationRequest.reason.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_TopicSubscribersRequest.TopicTerminationRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CP_KeyValue.unknownFields.getter(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest, a1);
}

uint64_t CP_TopicSubscribersRequest.TopicTerminationRequest.unknownFields.setter(uint64_t a1)
{
  return CP_KeyValue.unknownFields.setter(a1, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
}

uint64_t (*CP_TopicSubscribersRequest.TopicTerminationRequest.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_TopicSubscribersRequest.TopicTerminationRequest.Reason.init()()
{
  return 0;
}

BOOL CP_TopicSubscribersRequest.TopicTerminationRequest.Reason.rawValue.getter(BOOL result, char a2)
{
  if (a2) {
    return result;
  }
  return result;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CP_TopicSubscribersRequest.TopicTerminationRequest.Reason and conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason();
  return MEMORY[0x1F4127160](a1, a2, v4);
}

uint64_t CP_TopicSubscribersRequest.init()@<X0>(uint64_t a1@<X8>)
{
  return CP_TopicSubscribersRequest.init()(type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation, (void (*)(void))type metadata accessor for CP_TopicSubscribersRequest, a1);
}

uint64_t *CP_TopicSubscribersRequest.TopicTerminationRequest.Reason.allCases.unsafeMutableAddressor()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  return &static CP_TopicSubscribersRequest.TopicTerminationRequest.Reason.allCases;
}

uint64_t static CP_TopicSubscribersRequest.TopicTerminationRequest.Reason.allCases.getter()
{
  return static AttachmentLedger_ResponseStatus.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static CP_TopicSubscribersRequest.TopicTerminationRequest.Reason.allCases.setter(uint64_t a1)
{
  return static AttachmentLedger_ResponseStatus.allCases.setter(a1, &one-time initialization token for allCases, &static CP_TopicSubscribersRequest.TopicTerminationRequest.Reason.allCases);
}

uint64_t (*static CP_TopicSubscribersRequest.TopicTerminationRequest.Reason.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for allCases, &static CP_TopicSubscribersRequest.TopicTerminationRequest.Reason.allCases, a1);
}

uint64_t (*CP_TopicSubscribers.topic.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_TopicSubscribers.terminateTopic.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CP_TopicSubscribers.terminateTopic.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*CP_TopicSubscribers.terminateTopic.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_TopicSubscribers.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CP_KeyValue.unknownFields.getter(type metadata accessor for CP_TopicSubscribers, a1);
}

uint64_t CP_TopicSubscribers.unknownFields.setter(uint64_t a1)
{
  return CP_KeyValue.unknownFields.setter(a1, type metadata accessor for CP_TopicSubscribers);
}

uint64_t (*CP_TopicSubscribers.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*CP_TopicSubscribers.TopicSubscribersInfo.topic.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*CP_TopicSubscribers.TopicSubscribersInfo.subscriberParticipantIds.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_TopicSubscribers.TopicSubscribersInfo.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CP_KeyValue.unknownFields.getter(type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo, a1);
}

uint64_t CP_TopicSubscribers.TopicSubscribersInfo.unknownFields.setter(uint64_t a1)
{
  return CP_KeyValue.unknownFields.setter(a1, type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo);
}

uint64_t (*CP_TopicSubscribers.TopicSubscribersInfo.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_TopicSubscribers.TopicSubscribersInfo.init()@<X0>(void *a1@<X8>)
{
  return CP_TopicSubscribers.TopicSubscribersInfo.init()((void (*)(void))type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo, a1);
}

uint64_t (*CP_TopicSubscribers.TerminateTopic.topicName.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_TopicSubscribers.TerminateTopic.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CP_EncryptionID.unknownFields.getter(type metadata accessor for CP_TopicSubscribers.TerminateTopic, a1);
}

uint64_t CP_TopicSubscribers.TerminateTopic.unknownFields.setter(uint64_t a1)
{
  return CP_EncryptionID.unknownFields.setter(a1, type metadata accessor for CP_TopicSubscribers.TerminateTopic);
}

uint64_t (*CP_TopicSubscribers.TerminateTopic.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_TopicSubscribers.TerminateTopic.init()@<X0>(void *a1@<X8>)
{
  return CP_TopicSubscribersRequest.TopicTerminatedAck.init()((void (*)(void))type metadata accessor for CP_TopicSubscribers.TerminateTopic, a1);
}

uint64_t CP_TopicSubscribersRequest.TopicTerminatedAck.init()@<X0>(void (*a1)(void)@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  a1(0);
  return UnknownStorage.init()();
}

uint64_t CP_TopicSubscribers.init()@<X0>(void *a1@<X8>)
{
  return CP_TopicSubscribers.init()(MEMORY[0x1E4FBC860], (void (*)(void))type metadata accessor for CP_TopicSubscribers, a1);
}

uint64_t CP_SystemEvent.event.getter()
{
  uint64_t v1 = *(void *)v0;
  outlined copy of CP_SystemEvent.OneOf_Event?(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
  return v1;
}

uint64_t CP_SystemEvent.event.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = outlined consume of CP_SystemEvent.OneOf_Event?(*(void *)v3, *(void *)(v3 + 8), *(unsigned char *)(v3 + 16));
  *(void *)uint64_t v3 = a1;
  *(void *)(v3 + 8) = a2;
  *(unsigned char *)(v3 + 16) = a3;
  return result;
}

uint64_t (*CP_SystemEvent.event.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SystemEvent.topicCreated.getter()
{
  if (v0[2]) {
    return 0;
  }
  uint64_t v1 = *v0;
  outlined copy of CP_SystemEvent.OneOf_Event();
  return v1;
}

uint64_t CP_SystemEvent.topicCreated.setter(uint64_t a1, uint64_t a2)
{
  return CP_SystemEvent.topicCreated.setter(a1, a2, 0);
}

uint64_t (*CP_SystemEvent.topicCreated.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  if (v1[2])
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0xE000000000000000;
  }
  else
  {
    uint64_t v3 = *v1;
    unint64_t v4 = v1[1];
    outlined copy of CP_SystemEvent.OneOf_Event();
  }
  *a1 = v3;
  a1[1] = v4;
  return CP_SystemEvent.topicCreated.modify;
}

uint64_t CP_SystemEvent.topicCreated.modify(uint64_t *a1, char a2)
{
  return CP_SystemEvent.topicCreated.modify(a1, a2, 0);
}

uint64_t CP_SystemEvent.topicDestroyed.getter()
{
  int v1 = *((unsigned __int8 *)v0 + 16);
  if (v1 == 255 || (v1 & 1) == 0) {
    return 0;
  }
  uint64_t v3 = *v0;
  outlined copy of CP_SystemEvent.OneOf_Event();
  return v3;
}

uint64_t CP_SystemEvent.topicDestroyed.setter(uint64_t a1, uint64_t a2)
{
  return CP_SystemEvent.topicCreated.setter(a1, a2, 1);
}

uint64_t CP_SystemEvent.topicCreated.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = outlined consume of CP_SystemEvent.OneOf_Event?(*(void *)v3, *(void *)(v3 + 8), *(unsigned char *)(v3 + 16));
  *(void *)uint64_t v3 = a1;
  *(void *)(v3 + 8) = a2;
  *(unsigned char *)(v3 + 16) = a3;
  return result;
}

uint64_t (*CP_SystemEvent.topicDestroyed.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  int v3 = *((unsigned __int8 *)v1 + 16);
  if (v3 == 255 || (v3 & 1) == 0)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0xE000000000000000;
  }
  else
  {
    uint64_t v5 = *v1;
    unint64_t v6 = v1[1];
    outlined copy of CP_SystemEvent.OneOf_Event();
  }
  *a1 = v5;
  a1[1] = v6;
  return CP_SystemEvent.topicDestroyed.modify;
}

uint64_t CP_SystemEvent.topicDestroyed.modify(uint64_t *a1, char a2)
{
  return CP_SystemEvent.topicCreated.modify(a1, a2, 1);
}

uint64_t CP_SystemEvent.topicCreated.modify(uint64_t *a1, char a2, char a3)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = *a1;
  uint64_t v7 = *(void *)v5;
  uint64_t v8 = *(void *)(v5 + 8);
  unsigned __int8 v9 = *(unsigned char *)(v5 + 16);
  if (a2)
  {
    swift_bridgeObjectRetain();
    outlined consume of CP_SystemEvent.OneOf_Event?(v7, v8, v9);
    *(void *)uint64_t v5 = v6;
    *(void *)(v5 + 8) = v4;
    *(unsigned char *)(v5 + 16) = a3;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = outlined consume of CP_SystemEvent.OneOf_Event?(*(void *)v5, *(void *)(v5 + 8), *(unsigned char *)(v5 + 16));
    *(void *)uint64_t v5 = v6;
    *(void *)(v5 + 8) = v4;
    *(unsigned char *)(v5 + 16) = a3;
  }
  return result;
}

uint64_t CP_SystemEvent.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CP_EncryptionID.unknownFields.getter(type metadata accessor for CP_SystemEvent, a1);
}

uint64_t CP_SystemEvent.unknownFields.setter(uint64_t a1)
{
  return CP_EncryptionID.unknownFields.setter(a1, type metadata accessor for CP_SystemEvent);
}

uint64_t (*CP_SystemEvent.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t static CP_SystemEvent.OneOf_Event.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  return specialized static CP_SystemEvent.OneOf_Event.== infix(_:_:)(a1, a2, a3 & 1, a4, a5, a6 & 1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CP_SystemEvent.OneOf_Event(uint64_t a1, uint64_t a2)
{
  return specialized static CP_SystemEvent.OneOf_Event.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
}

uint64_t CP_SystemEvent.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = -1;
  type metadata accessor for CP_SystemEvent(0);
  return UnknownStorage.init()();
}

uint64_t CP_SubscribeRequest.operation.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, a1, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
}

uint64_t CP_SubscribeRequest.operation.setter(uint64_t a1)
{
  return outlined assign with take of ActivitySession.DomainAssertionWrapper?(a1, v1, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
}

uint64_t (*CP_SubscribeRequest.operation.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeRequest.initialize.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  uint64_t v7 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
LABEL_5:
    *a1 = 0;
    a1[1] = 0xE000000000000000;
    uint64_t v8 = MEMORY[0x1E4FBC860];
    a1[2] = MEMORY[0x1E4FBC860];
    a1[3] = v8;
    uint64_t v9 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
    a1[4] = 0;
    a1[5] = 0;
    UnknownStorage.init()();
    uint64_t v10 = (char *)a1 + *(int *)(v9 + 40);
    uint64_t v11 = type metadata accessor for CP_EncryptionID(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of CP_SequenceNumber((uint64_t)v6, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
    goto LABEL_5;
  }
  return outlined init with take of CP_SequenceNumber((uint64_t)v6, (uint64_t)a1, type metadata accessor for CP_SubscribeRequest.Initialize);
}

uint64_t key path setter for CP_SubscribeRequest.initialize : CP_SubscribeRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of CP_SequenceNumber(a1, (uint64_t)v6, type metadata accessor for CP_SubscribeRequest.Initialize);
  outlined destroy of UUID?(a2, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  outlined init with take of CP_SequenceNumber((uint64_t)v6, a2, type metadata accessor for CP_SubscribeRequest.Initialize);
  uint64_t v7 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t CP_SubscribeRequest.initialize.setter(uint64_t a1)
{
  return CP_TopicSubscribersRequest.topicTerminationAck.setter(a1, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?, type metadata accessor for CP_SubscribeRequest.Initialize, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
}

uint64_t CP_SubscribeRequest.Initialize.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  uint64_t v2 = MEMORY[0x1E4FBC860];
  a1[2] = MEMORY[0x1E4FBC860];
  a1[3] = v2;
  uint64_t v3 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
  a1[4] = 0;
  a1[5] = 0;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a1 + *(int *)(v3 + 40);
  uint64_t v5 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 1, 1, v5);
}

void (*CP_SubscribeRequest.initialize.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  void *v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  uint64_t v7 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
  size_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  v4[2] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v4[3] = v9;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  uint64_t v10 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  v4[4] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of CP_SequenceNumber((uint64_t)v6, (uint64_t)v9, type metadata accessor for CP_SubscribeRequest.Initialize);
      return CP_SubscribeRequest.initialize.modify;
    }
    outlined destroy of CP_SequenceNumber((uint64_t)v6, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
  }
  *uint64_t v9 = 0;
  v9[1] = 0xE000000000000000;
  uint64_t v12 = MEMORY[0x1E4FBC860];
  v9[2] = MEMORY[0x1E4FBC860];
  v9[3] = v12;
  v9[4] = 0;
  v9[5] = 0;
  UnknownStorage.init()();
  uint64_t v13 = (char *)v9 + *(int *)(v7 + 40);
  uint64_t v14 = type metadata accessor for CP_EncryptionID(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  return CP_SubscribeRequest.initialize.modify;
}

void CP_SubscribeRequest.initialize.modify(uint64_t **a1, char a2)
{
}

uint64_t CP_SubscribeRequest.recordAck.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  uint64_t v7 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return outlined init with take of CP_SequenceNumber((uint64_t)v6, (uint64_t)a1, type metadata accessor for CP_SubscribeRequest.RecordAck);
    }
    outlined destroy of CP_SequenceNumber((uint64_t)v6, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
  }
  *a1 = MEMORY[0x1E4FBC860];
  type metadata accessor for CP_SubscribeRequest.RecordAck(0);
  return UnknownStorage.init()();
}

uint64_t key path getter for CP_SubscribeRequest.recordAck : CP_SubscribeRequest@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  uint64_t v7 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return outlined init with take of CP_SequenceNumber((uint64_t)v6, (uint64_t)a2, type metadata accessor for CP_SubscribeRequest.RecordAck);
    }
    outlined destroy of CP_SequenceNumber((uint64_t)v6, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
  }
  *a2 = MEMORY[0x1E4FBC860];
  type metadata accessor for CP_SubscribeRequest.RecordAck(0);
  return UnknownStorage.init()();
}

uint64_t key path setter for CP_SubscribeRequest.recordAck : CP_SubscribeRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CP_SubscribeRequest.RecordAck(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of CP_SequenceNumber(a1, (uint64_t)v6, type metadata accessor for CP_SubscribeRequest.RecordAck);
  outlined destroy of UUID?(a2, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  outlined init with take of CP_SequenceNumber((uint64_t)v6, a2, type metadata accessor for CP_SubscribeRequest.RecordAck);
  uint64_t v7 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t CP_SubscribeRequest.recordAck.setter(uint64_t a1)
{
  return CP_TopicSubscribersRequest.topicTerminationAck.setter(a1, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?, type metadata accessor for CP_SubscribeRequest.RecordAck, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
}

uint64_t CP_SubscribeRequest.RecordAck.init()@<X0>(void *a1@<X8>)
{
  *a1 = MEMORY[0x1E4FBC860];
  type metadata accessor for CP_SubscribeRequest.RecordAck(0);
  return UnknownStorage.init()();
}

void (*CP_SubscribeRequest.recordAck.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  void *v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  size_t v7 = *(void *)(*(void *)(type metadata accessor for CP_SubscribeRequest.RecordAck(0) - 8) + 64);
  v4[2] = malloc(v7);
  size_t v8 = malloc(v7);
  v4[3] = v8;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  uint64_t v9 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  v4[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
LABEL_6:
    *size_t v8 = MEMORY[0x1E4FBC860];
    UnknownStorage.init()();
    return CP_SubscribeRequest.recordAck.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of CP_SequenceNumber((uint64_t)v6, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
    goto LABEL_6;
  }
  outlined init with take of CP_SequenceNumber((uint64_t)v6, (uint64_t)v8, type metadata accessor for CP_SubscribeRequest.RecordAck);
  return CP_SubscribeRequest.recordAck.modify;
}

void CP_SubscribeRequest.recordAck.modify(uint64_t **a1, char a2)
{
}

uint64_t CP_SubscribeRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CP_EncryptionID.unknownFields.getter(type metadata accessor for CP_SubscribeRequest, a1);
}

uint64_t CP_SubscribeRequest.unknownFields.setter(uint64_t a1)
{
  return CP_EncryptionID.unknownFields.setter(a1, type metadata accessor for CP_SubscribeRequest);
}

uint64_t (*CP_SubscribeRequest.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*CP_SubscribeRequest.Initialize.topic.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeRequest.Initialize.knownSeqNums.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CP_SubscribeRequest.Initialize.knownSeqNums.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*CP_SubscribeRequest.Initialize.knownSeqNums.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeRequest.Initialize.localEncryptionID.getter@<X0>(_OWORD *a1@<X8>)
{
  return CP_Record.encryptionID.getter(type metadata accessor for CP_SubscribeRequest.Initialize, a1);
}

uint64_t CP_Record.encryptionID.getter@<X0>(uint64_t (*a1)(void)@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  MEMORY[0x1F4188790](v5 - 8);
  size_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2 + *(int *)(v8 + 40), (uint64_t)v7, &demangling cache variable for type metadata for CP_EncryptionID?);
  uint64_t v9 = type metadata accessor for CP_EncryptionID(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v7, 1, v9) != 1) {
    return outlined init with take of CP_SequenceNumber((uint64_t)v7, (uint64_t)a2, type metadata accessor for CP_EncryptionID);
  }
  *a2 = xmmword_1B113B700;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for CP_EncryptionID?);
}

uint64_t key path getter for CP_Record.encryptionID : CP_Record@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, _OWORD *a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v9 + 40), (uint64_t)v8, &demangling cache variable for type metadata for CP_EncryptionID?);
  uint64_t v10 = type metadata accessor for CP_EncryptionID(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v8, 1, v10) != 1) {
    return outlined init with take of CP_SequenceNumber((uint64_t)v8, (uint64_t)a3, type metadata accessor for CP_EncryptionID);
  }
  *a3 = xmmword_1B113B700;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for CP_EncryptionID?);
}

uint64_t key path setter for CP_Record.encryptionID : CP_Record(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v8 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of CP_SequenceNumber(a1, (uint64_t)v11, type metadata accessor for CP_EncryptionID);
  uint64_t v12 = a2 + *(int *)(a5(0) + 40);
  outlined destroy of UUID?(v12, &demangling cache variable for type metadata for CP_EncryptionID?);
  outlined init with take of CP_SequenceNumber((uint64_t)v11, v12, type metadata accessor for CP_EncryptionID);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v12, 0, 1, v8);
}

uint64_t CP_SubscribeRequest.Initialize.localEncryptionID.setter(uint64_t a1)
{
  return CP_Record.encryptionID.setter(a1, type metadata accessor for CP_SubscribeRequest.Initialize);
}

uint64_t CP_Record.encryptionID.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 40);
  outlined destroy of UUID?(v4, &demangling cache variable for type metadata for CP_EncryptionID?);
  outlined init with take of CP_SequenceNumber(a1, v4, type metadata accessor for CP_EncryptionID);
  uint64_t v5 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 0, 1, v5);
}

void (*CP_SubscribeRequest.Initialize.localEncryptionID.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CP_EncryptionID(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  long long v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CP_SubscribeRequest.Initialize(0) + 40);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CP_EncryptionID?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = xmmword_1B113B700;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_EncryptionID?);
  }
  else
  {
    outlined init with take of CP_SequenceNumber((uint64_t)v5, (uint64_t)v10, type metadata accessor for CP_EncryptionID);
  }
  return CP_Record.encryptionID.modify;
}

BOOL CP_SubscribeRequest.Initialize.hasLocalEncryptionID.getter()
{
  return CP_Record.hasEncryptionID.getter(type metadata accessor for CP_SubscribeRequest.Initialize);
}

BOOL CP_Record.hasEncryptionID.getter(uint64_t (*a1)(void))
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = a1(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v6 + 40), (uint64_t)v5, &demangling cache variable for type metadata for CP_EncryptionID?);
  uint64_t v7 = type metadata accessor for CP_EncryptionID(0);
  BOOL v8 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1;
  outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_EncryptionID?);
  return v8;
}

Swift::Void __swiftcall CP_SubscribeRequest.Initialize.clearLocalEncryptionID()()
{
}

uint64_t CP_Record.clearEncryptionID()(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 40);
  outlined destroy of UUID?(v2, &demangling cache variable for type metadata for CP_EncryptionID?);
  uint64_t v3 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
  return v4(v2, 1, 1, v3);
}

uint64_t CP_SubscribeRequest.Initialize.knownEncryptionIds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CP_SubscribeRequest.Initialize.knownEncryptionIds.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*CP_SubscribeRequest.Initialize.knownEncryptionIds.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeRequest.Initialize.subscriberParticipantID.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t CP_SubscribeRequest.Initialize.subscriberParticipantID.setter(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t (*CP_SubscribeRequest.Initialize.subscriberParticipantID.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeRequest.Initialize.saltVerifiedSubscriberParticipantID.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t CP_SubscribeRequest.Initialize.saltVerifiedSubscriberParticipantID.setter(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t (*CP_SubscribeRequest.Initialize.saltVerifiedSubscriberParticipantID.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeRequest.Initialize.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CP_SubscribeRequest.Initialize(0) + 36);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t CP_SubscribeRequest.Initialize.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CP_SubscribeRequest.Initialize(0) + 36);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*CP_SubscribeRequest.Initialize.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeRequest.RecordAck.seqNumsAck.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CP_SubscribeRequest.RecordAck.seqNumsAck.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*CP_SubscribeRequest.RecordAck.seqNumsAck.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeRequest.RecordAck.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CP_EncryptionID.unknownFields.getter(type metadata accessor for CP_SubscribeRequest.RecordAck, a1);
}

uint64_t CP_SubscribeRequest.RecordAck.unknownFields.setter(uint64_t a1)
{
  return CP_EncryptionID.unknownFields.setter(a1, type metadata accessor for CP_SubscribeRequest.RecordAck);
}

uint64_t (*CP_SubscribeRequest.RecordAck.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeRequest.init()@<X0>(uint64_t a1@<X8>)
{
  return CP_TopicSubscribersRequest.init()(type metadata accessor for CP_SubscribeRequest.OneOf_Operation, (void (*)(void))type metadata accessor for CP_SubscribeRequest, a1);
}

uint64_t CP_TopicSubscribersRequest.init()@<X0>(uint64_t (*a1)(void)@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a3, 1, 1, v5);
  a2(0);
  return UnknownStorage.init()();
}

uint64_t CP_SubscribeResponse.operation.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, a1, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
}

uint64_t CP_SubscribeResponse.operation.setter(uint64_t a1)
{
  return outlined assign with take of ActivitySession.DomainAssertionWrapper?(a1, v1, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
}

uint64_t (*CP_SubscribeResponse.operation.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeResponse.initializeAck.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  uint64_t v7 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
LABEL_5:
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 1;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0xE000000000000000;
    uint64_t v8 = MEMORY[0x1E4FBC860];
    *(void *)(a1 + 32) = MEMORY[0x1E4FBC860];
    *(void *)(a1 + 40) = v8;
    *(void *)(a1 + 48) = v8;
    *(void *)(a1 + 56) = v8;
    uint64_t v9 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
    UnknownStorage.init()();
    uint64_t v10 = a1 + *(int *)(v9 + 44);
    uint64_t v11 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
    uint64_t v12 = a1 + *(int *)(v9 + 48);
    uint64_t v13 = type metadata accessor for CP_SequenceNumber(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  }
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of CP_SequenceNumber((uint64_t)v6, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
    goto LABEL_5;
  }
  return outlined init with take of CP_SequenceNumber((uint64_t)v6, a1, type metadata accessor for CP_SubscribeResponse.InitializeAck);
}

uint64_t key path setter for CP_SubscribeResponse.initializeAck : CP_SubscribeResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of CP_SequenceNumber(a1, (uint64_t)v6, type metadata accessor for CP_SubscribeResponse.InitializeAck);
  outlined destroy of UUID?(a2, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  outlined init with take of CP_SequenceNumber((uint64_t)v6, a2, type metadata accessor for CP_SubscribeResponse.InitializeAck);
  uint64_t v7 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t CP_SubscribeResponse.initializeAck.setter(uint64_t a1)
{
  return CP_TopicSubscribersRequest.topicTerminationAck.setter(a1, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?, type metadata accessor for CP_SubscribeResponse.InitializeAck, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
}

uint64_t CP_SubscribeResponse.InitializeAck.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  uint64_t v2 = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 32) = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 40) = v2;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  uint64_t v3 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
  UnknownStorage.init()();
  uint64_t v4 = a1 + *(int *)(v3 + 44);
  uint64_t v5 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a1 + *(int *)(v3 + 48);
  uint64_t v7 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

void (*CP_SubscribeResponse.initializeAck.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  void *v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  uint64_t v7 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
  size_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  v4[2] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v4[3] = v9;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  uint64_t v10 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  v4[4] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of CP_SequenceNumber((uint64_t)v6, (uint64_t)v9, type metadata accessor for CP_SubscribeResponse.InitializeAck);
      return CP_SubscribeResponse.initializeAck.modify;
    }
    outlined destroy of CP_SequenceNumber((uint64_t)v6, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
  }
  *(void *)uint64_t v9 = 0;
  v9[8] = 1;
  *((void *)v9 + 2) = 0;
  *((void *)v9 + 3) = 0xE000000000000000;
  uint64_t v12 = MEMORY[0x1E4FBC860];
  *((void *)v9 + 4) = MEMORY[0x1E4FBC860];
  *((void *)v9 + 5) = v12;
  *((void *)v9 + 6) = v12;
  *((void *)v9 + 7) = v12;
  UnknownStorage.init()();
  uint64_t v13 = &v9[*(int *)(v7 + 44)];
  uint64_t v14 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  uint64_t v15 = &v9[*(int *)(v7 + 48)];
  uint64_t v16 = type metadata accessor for CP_SequenceNumber(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  return CP_SubscribeResponse.initializeAck.modify;
}

void CP_SubscribeResponse.initializeAck.modify(uint64_t **a1, char a2)
{
}

uint64_t CP_SubscribeResponse.record.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  uint64_t v7 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return outlined init with take of CP_SequenceNumber((uint64_t)v6, a1, type metadata accessor for CP_Record);
    }
    outlined destroy of CP_SequenceNumber((uint64_t)v6, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(_OWORD *)(a1 + 16) = xmmword_1B113B700;
  *(void *)(a1 + 32) = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 40) = 0;
  uint64_t v9 = type metadata accessor for CP_Record(0);
  UnknownStorage.init()();
  uint64_t v10 = a1 + *(int *)(v9 + 36);
  uint64_t v11 = type metadata accessor for CP_SequenceNumber(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = a1 + *(int *)(v9 + 40);
  uint64_t v13 = type metadata accessor for CP_EncryptionID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
}

uint64_t key path setter for CP_SubscribeResponse.record : CP_SubscribeResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CP_Record(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of CP_SequenceNumber(a1, (uint64_t)v6, type metadata accessor for CP_Record);
  outlined destroy of UUID?(a2, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  outlined init with take of CP_SequenceNumber((uint64_t)v6, a2, type metadata accessor for CP_Record);
  uint64_t v7 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t CP_SubscribeResponse.record.setter(uint64_t a1)
{
  return CP_TopicSubscribersRequest.topicTerminationAck.setter(a1, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?, type metadata accessor for CP_Record, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
}

void (*CP_SubscribeResponse.record.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  void *v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  uint64_t v7 = type metadata accessor for CP_Record(0);
  size_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  v4[2] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v4[3] = v9;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  uint64_t v10 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  v4[4] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
LABEL_6:
    *uint64_t v9 = 0;
    v9[1] = 0xE000000000000000;
    *((_OWORD *)v9 + 1) = xmmword_1B113B700;
    v9[4] = MEMORY[0x1E4FBC860];
    v9[5] = 0;
    UnknownStorage.init()();
    uint64_t v12 = (char *)v9 + *(int *)(v7 + 36);
    uint64_t v13 = type metadata accessor for CP_SequenceNumber(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    uint64_t v14 = (char *)v9 + *(int *)(v7 + 40);
    uint64_t v15 = type metadata accessor for CP_EncryptionID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
    return CP_SubscribeResponse.record.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of CP_SequenceNumber((uint64_t)v6, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
    goto LABEL_6;
  }
  outlined init with take of CP_SequenceNumber((uint64_t)v6, (uint64_t)v9, type metadata accessor for CP_Record);
  return CP_SubscribeResponse.record.modify;
}

void CP_SubscribeResponse.record.modify(uint64_t **a1, char a2)
{
}

uint64_t CP_SubscribeResponse.topicUpdate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  uint64_t v7 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2) {
      return outlined init with take of CP_SequenceNumber((uint64_t)v6, a1, type metadata accessor for CP_SubscribeResponse.TopicUpdate);
    }
    outlined destroy of CP_SequenceNumber((uint64_t)v6, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
  }
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  type metadata accessor for CP_SubscribeResponse.TopicUpdate(0);
  return UnknownStorage.init()();
}

uint64_t key path setter for CP_SubscribeResponse.topicUpdate : CP_SubscribeResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CP_SubscribeResponse.TopicUpdate(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of CP_SequenceNumber(a1, (uint64_t)v6, type metadata accessor for CP_SubscribeResponse.TopicUpdate);
  outlined destroy of UUID?(a2, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  outlined init with take of CP_SequenceNumber((uint64_t)v6, a2, type metadata accessor for CP_SubscribeResponse.TopicUpdate);
  uint64_t v7 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t CP_SubscribeResponse.topicUpdate.setter(uint64_t a1)
{
  return CP_TopicSubscribersRequest.topicTerminationAck.setter(a1, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?, type metadata accessor for CP_SubscribeResponse.TopicUpdate, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
}

uint64_t CP_SubscribeResponse.TopicUpdate.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  type metadata accessor for CP_SubscribeResponse.TopicUpdate(0);
  return UnknownStorage.init()();
}

void (*CP_SubscribeResponse.topicUpdate.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  void *v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  size_t v7 = *(void *)(*(void *)(type metadata accessor for CP_SubscribeResponse.TopicUpdate(0) - 8) + 64);
  v4[2] = malloc(v7);
  size_t v8 = malloc(v7);
  v4[3] = v8;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  uint64_t v9 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  v4[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
LABEL_6:
    *(void *)size_t v8 = 0;
    uint64_t v11 = MEMORY[0x1E4FBC860];
    v8[8] = 1;
    *((void *)v8 + 2) = v11;
    *((void *)v8 + 3) = 0;
    v8[32] = 0;
    UnknownStorage.init()();
    return CP_SubscribeResponse.topicUpdate.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    outlined destroy of CP_SequenceNumber((uint64_t)v6, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
    goto LABEL_6;
  }
  outlined init with take of CP_SequenceNumber((uint64_t)v6, (uint64_t)v8, type metadata accessor for CP_SubscribeResponse.TopicUpdate);
  return CP_SubscribeResponse.topicUpdate.modify;
}

void CP_SubscribeResponse.topicUpdate.modify(uint64_t **a1, char a2)
{
}

uint64_t CP_SubscribeResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CP_EncryptionID.unknownFields.getter(type metadata accessor for CP_SubscribeResponse, a1);
}

uint64_t CP_SubscribeResponse.unknownFields.setter(uint64_t a1)
{
  return CP_EncryptionID.unknownFields.setter(a1, type metadata accessor for CP_SubscribeResponse);
}

uint64_t (*CP_SubscribeResponse.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*CP_SubscribeResponse.InitializeAck.status.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*CP_SubscribeResponse.InitializeAck.error.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeResponse.InitializeAck.otherSubscriberParticipantIds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CP_SubscribeResponse.InitializeAck.otherSubscriberParticipantIds.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 32) = a1;
  return result;
}

uint64_t (*CP_SubscribeResponse.InitializeAck.otherSubscriberParticipantIds.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeResponse.InitializeAck.metadata.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CP_SubscribeResponse.InitializeAck.metadata.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 40) = a1;
  return result;
}

uint64_t (*CP_SubscribeResponse.InitializeAck.metadata.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeResponse.InitializeAck.topicCatchupSummary.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v6 + 44), (uint64_t)v5, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  uint64_t v7 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CP_SequenceNumber((uint64_t)v5, (uint64_t)a1, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
  }
  uint64_t v8 = MEMORY[0x1E4FBC860];
  *a1 = 0;
  a1[1] = v8;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
}

uint64_t key path getter for CP_SubscribeResponse.InitializeAck.topicCatchupSummary : CP_SubscribeResponse.InitializeAck@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v7 + 44), (uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  uint64_t v8 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of CP_SequenceNumber((uint64_t)v6, (uint64_t)a2, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
  }
  uint64_t v9 = MEMORY[0x1E4FBC860];
  *a2 = 0;
  a2[1] = v9;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
}

uint64_t key path setter for CP_SubscribeResponse.InitializeAck.topicCatchupSummary : CP_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of CP_SequenceNumber(a1, (uint64_t)v7, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for CP_SubscribeResponse.InitializeAck(0) + 44);
  outlined destroy of UUID?(v8, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  outlined init with take of CP_SequenceNumber((uint64_t)v7, v8, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t CP_SubscribeResponse.InitializeAck.topicCatchupSummary.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CP_SubscribeResponse.InitializeAck(0) + 44);
  outlined destroy of UUID?(v3, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  outlined init with take of CP_SequenceNumber(a1, v3, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
  uint64_t v4 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

uint64_t CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.init()@<X0>(void *a1@<X8>)
{
  return CP_TopicSubscribers.init()(0, (void (*)(void))type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary, a1);
}

uint64_t CP_TopicSubscribers.init()@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X1>, void *a3@<X8>)
{
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *a3 = a1;
  a3[1] = v4;
  a2(0);
  return UnknownStorage.init()();
}

void (*CP_SubscribeResponse.InitializeAck.topicCatchupSummary.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  long long v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CP_SubscribeResponse.InitializeAck(0) + 44);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    uint64_t v12 = MEMORY[0x1E4FBC860];
    *uint64_t v10 = 0;
    v10[1] = v12;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  }
  else
  {
    outlined init with take of CP_SequenceNumber((uint64_t)v5, (uint64_t)v10, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
  }
  return CP_SubscribeResponse.InitializeAck.topicCatchupSummary.modify;
}

void CP_SubscribeResponse.InitializeAck.topicCatchupSummary.modify(uint64_t a1, char a2)
{
}

BOOL CP_SubscribeResponse.InitializeAck.hasTopicCatchupSummary.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0 + *(int *)(v4 + 44), (uint64_t)v3, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  uint64_t v5 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of UUID?((uint64_t)v3, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  return v6;
}

Swift::Void __swiftcall CP_SubscribeResponse.InitializeAck.clearTopicCatchupSummary()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CP_SubscribeResponse.InitializeAck(0) + 44);
  outlined destroy of UUID?(v1, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  uint64_t v2 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t CP_SubscribeResponse.InitializeAck.missingEncryptionIds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CP_SubscribeResponse.InitializeAck.missingEncryptionIds.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 48) = a1;
  return result;
}

uint64_t (*CP_SubscribeResponse.InitializeAck.missingEncryptionIds.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeResponse.InitializeAck.subscriberSeqNum.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v6 + 48), (uint64_t)v5, &demangling cache variable for type metadata for CP_SequenceNumber?);
  uint64_t v7 = type metadata accessor for CP_SequenceNumber(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CP_SequenceNumber((uint64_t)v5, (uint64_t)a1, type metadata accessor for CP_SequenceNumber);
  }
  *a1 = 0;
  a1[1] = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_SequenceNumber?);
}

uint64_t key path getter for CP_SubscribeResponse.InitializeAck.subscriberSeqNum : CP_SubscribeResponse.InitializeAck@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v7 + 48), (uint64_t)v6, &demangling cache variable for type metadata for CP_SequenceNumber?);
  uint64_t v8 = type metadata accessor for CP_SequenceNumber(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of CP_SequenceNumber((uint64_t)v6, (uint64_t)a2, type metadata accessor for CP_SequenceNumber);
  }
  *a2 = 0;
  a2[1] = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_SequenceNumber?);
}

uint64_t key path setter for CP_SubscribeResponse.InitializeAck.subscriberSeqNum : CP_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of CP_SequenceNumber(a1, (uint64_t)v7, type metadata accessor for CP_SequenceNumber);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for CP_SubscribeResponse.InitializeAck(0) + 48);
  outlined destroy of UUID?(v8, &demangling cache variable for type metadata for CP_SequenceNumber?);
  outlined init with take of CP_SequenceNumber((uint64_t)v7, v8, type metadata accessor for CP_SequenceNumber);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t CP_SubscribeResponse.InitializeAck.subscriberSeqNum.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CP_SubscribeResponse.InitializeAck(0) + 48);
  outlined destroy of UUID?(v3, &demangling cache variable for type metadata for CP_SequenceNumber?);
  outlined init with take of CP_SequenceNumber(a1, v3, type metadata accessor for CP_SequenceNumber);
  uint64_t v4 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

void (*CP_SubscribeResponse.InitializeAck.subscriberSeqNum.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CP_SequenceNumber(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  long long v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CP_SubscribeResponse.InitializeAck(0) + 48);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CP_SequenceNumber?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = 0;
    v10[1] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_SequenceNumber?);
  }
  else
  {
    outlined init with take of CP_SequenceNumber((uint64_t)v5, (uint64_t)v10, type metadata accessor for CP_SequenceNumber);
  }
  return CP_Record.seqNum.modify;
}

BOOL CP_SubscribeResponse.InitializeAck.hasSubscriberSeqNum.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0 + *(int *)(v4 + 48), (uint64_t)v3, &demangling cache variable for type metadata for CP_SequenceNumber?);
  uint64_t v5 = type metadata accessor for CP_SequenceNumber(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of UUID?((uint64_t)v3, &demangling cache variable for type metadata for CP_SequenceNumber?);
  return v6;
}

Swift::Void __swiftcall CP_SubscribeResponse.InitializeAck.clearSubscriberSeqNum()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CP_SubscribeResponse.InitializeAck(0) + 48);
  outlined destroy of UUID?(v1, &demangling cache variable for type metadata for CP_SequenceNumber?);
  uint64_t v2 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t CP_SubscribeResponse.InitializeAck.otherSaltVerifiedSubscriberParticipantIds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CP_SubscribeResponse.InitializeAck.otherSaltVerifiedSubscriberParticipantIds.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 56) = a1;
  return result;
}

uint64_t (*CP_SubscribeResponse.InitializeAck.otherSaltVerifiedSubscriberParticipantIds.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeResponse.InitializeAck.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CP_SubscribeResponse.InitializeAck(0) + 40);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t CP_SubscribeResponse.InitializeAck.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CP_SubscribeResponse.InitializeAck(0) + 40);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*CP_SubscribeResponse.InitializeAck.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.participantID.getter()
{
  return *(void *)v0;
}

uint64_t CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.participantID.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.participantID.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.seqNums.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CP_KeyValue.unknownFields.getter(type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary, a1);
}

uint64_t CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.unknownFields.setter(uint64_t a1)
{
  return CP_KeyValue.unknownFields.setter(a1, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
}

uint64_t (*CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeResponse.InitializeAck.MissingEncryptionID.participantID.getter()
{
  return *(void *)v0;
}

uint64_t CP_SubscribeResponse.InitializeAck.MissingEncryptionID.participantID.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*CP_SubscribeResponse.InitializeAck.MissingEncryptionID.participantID.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID.getter@<X0>(_OWORD *a1@<X8>)
{
  return CP_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID.getter(type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID, a1);
}

uint64_t CP_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID.setter(uint64_t a1)
{
  return CP_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID.setter(a1, type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
}

void (*CP_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CP_EncryptionID(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  long long v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CP_EncryptionID?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = xmmword_1B113B700;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_EncryptionID?);
  }
  else
  {
    outlined init with take of CP_SequenceNumber((uint64_t)v5, (uint64_t)v10, type metadata accessor for CP_EncryptionID);
  }
  return CP_Record.encryptionID.modify;
}

BOOL CP_SubscribeResponse.InitializeAck.MissingEncryptionID.hasEncryptionID.getter()
{
  return CP_SubscribeResponse.InitializeAck.MissingEncryptionID.hasEncryptionID.getter(type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
}

Swift::Void __swiftcall CP_SubscribeResponse.InitializeAck.MissingEncryptionID.clearEncryptionID()()
{
}

uint64_t CP_SubscribeResponse.InitializeAck.MissingEncryptionID.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CP_EncryptionID.unknownFields.getter(type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID, a1);
}

uint64_t CP_SubscribeResponse.InitializeAck.MissingEncryptionID.unknownFields.setter(uint64_t a1)
{
  return CP_EncryptionID.unknownFields.setter(a1, type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
}

uint64_t (*CP_SubscribeResponse.InitializeAck.MissingEncryptionID.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeResponse.InitializeAck.MissingEncryptionID.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  uint64_t v2 = type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
  UnknownStorage.init()();
  uint64_t v3 = (char *)a1 + *(int *)(v2 + 24);
  uint64_t v4 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v5 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 1, 1, v4);
}

uint64_t (*CP_SubscribeResponse.TopicUpdate.event.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*CP_SubscribeResponse.TopicUpdate.metadata.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeResponse.TopicUpdate.participantID.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t CP_SubscribeResponse.TopicUpdate.participantID.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t (*CP_SubscribeResponse.TopicUpdate.participantID.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeResponse.TopicUpdate.isSaltVerifiedID.getter()
{
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t CP_SubscribeResponse.TopicUpdate.isSaltVerifiedID.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 32) = result;
  return result;
}

uint64_t (*CP_SubscribeResponse.TopicUpdate.isSaltVerifiedID.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeResponse.TopicUpdate.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CP_Record.unknownFields.getter(type metadata accessor for CP_SubscribeResponse.TopicUpdate, a1);
}

uint64_t CP_Record.unknownFields.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t CP_SubscribeResponse.TopicUpdate.unknownFields.setter(uint64_t a1)
{
  return CP_Record.unknownFields.setter(a1, type metadata accessor for CP_SubscribeResponse.TopicUpdate);
}

uint64_t CP_Record.unknownFields.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*CP_SubscribeResponse.TopicUpdate.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_SubscribeResponse.TopicUpdate.UpdateEvent.init()()
{
  return 0;
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = result < 3;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result >= 3uLL;
  *(void *)a2 = *result;
  char v3 = !v2;
  *(unsigned char *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent(uint64_t a1, uint64_t a2)
{
  unint64_t updated = lazy protocol witness table accessor for type CP_SubscribeResponse.TopicUpdate.UpdateEvent and conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent();
  return MEMORY[0x1F4127160](a1, a2, updated);
}

uint64_t CP_SubscribeResponse.init()@<X0>(uint64_t a1@<X8>)
{
  return CP_TopicSubscribersRequest.init()(type metadata accessor for CP_SubscribeResponse.OneOf_Operation, (void (*)(void))type metadata accessor for CP_SubscribeResponse, a1);
}

uint64_t *CP_SubscribeResponse.TopicUpdate.UpdateEvent.allCases.unsafeMutableAddressor()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  return &static CP_SubscribeResponse.TopicUpdate.UpdateEvent.allCases;
}

uint64_t static CP_SubscribeResponse.TopicUpdate.UpdateEvent.allCases.getter()
{
  return static AttachmentLedger_ResponseStatus.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static CP_SubscribeResponse.TopicUpdate.UpdateEvent.allCases.setter(uint64_t a1)
{
  return static AttachmentLedger_ResponseStatus.allCases.setter(a1, &one-time initialization token for allCases, &static CP_SubscribeResponse.TopicUpdate.UpdateEvent.allCases);
}

uint64_t (*static CP_SubscribeResponse.TopicUpdate.UpdateEvent.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for allCases, &static CP_SubscribeResponse.TopicUpdate.UpdateEvent.allCases, a1);
}

uint64_t CP_PublishRequest.operation.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, a1, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
}

uint64_t CP_PublishRequest.operation.setter(uint64_t a1)
{
  return outlined assign with take of ActivitySession.DomainAssertionWrapper?(a1, v1, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
}

uint64_t (*CP_PublishRequest.operation.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_PublishRequest.record.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  uint64_t v7 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
LABEL_5:
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0xE000000000000000;
    *(_OWORD *)(a1 + 16) = xmmword_1B113B700;
    *(void *)(a1 + 32) = MEMORY[0x1E4FBC860];
    *(void *)(a1 + 40) = 0;
    uint64_t v8 = type metadata accessor for CP_Record(0);
    UnknownStorage.init()();
    uint64_t v9 = a1 + *(int *)(v8 + 36);
    uint64_t v10 = type metadata accessor for CP_SequenceNumber(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
    uint64_t v11 = a1 + *(int *)(v8 + 40);
    uint64_t v12 = type metadata accessor for CP_EncryptionID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of CP_SequenceNumber((uint64_t)v6, type metadata accessor for CP_PublishRequest.OneOf_Operation);
    goto LABEL_5;
  }
  return outlined init with take of CP_SequenceNumber((uint64_t)v6, a1, type metadata accessor for CP_Record);
}

uint64_t key path setter for CP_PublishRequest.record : CP_PublishRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CP_Record(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of CP_SequenceNumber(a1, (uint64_t)v6, type metadata accessor for CP_Record);
  outlined destroy of UUID?(a2, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  outlined init with take of CP_SequenceNumber((uint64_t)v6, a2, type metadata accessor for CP_Record);
  uint64_t v7 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t CP_PublishRequest.record.setter(uint64_t a1)
{
  return CP_TopicSubscribersRequest.topicTerminationAck.setter(a1, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?, type metadata accessor for CP_Record, type metadata accessor for CP_PublishRequest.OneOf_Operation);
}

void (*CP_PublishRequest.record.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  void *v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  uint64_t v7 = type metadata accessor for CP_Record(0);
  size_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  v4[2] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v4[3] = v9;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  uint64_t v10 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  v4[4] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of CP_SequenceNumber((uint64_t)v6, (uint64_t)v9, type metadata accessor for CP_Record);
      return CP_PublishRequest.record.modify;
    }
    outlined destroy of CP_SequenceNumber((uint64_t)v6, type metadata accessor for CP_PublishRequest.OneOf_Operation);
  }
  *uint64_t v9 = 0;
  v9[1] = 0xE000000000000000;
  *((_OWORD *)v9 + 1) = xmmword_1B113B700;
  v9[4] = MEMORY[0x1E4FBC860];
  v9[5] = 0;
  UnknownStorage.init()();
  uint64_t v12 = (char *)v9 + *(int *)(v7 + 36);
  uint64_t v13 = type metadata accessor for CP_SequenceNumber(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  uint64_t v14 = (char *)v9 + *(int *)(v7 + 40);
  uint64_t v15 = type metadata accessor for CP_EncryptionID(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  return CP_PublishRequest.record.modify;
}

void CP_PublishRequest.record.modify(uint64_t **a1, char a2)
{
}

uint64_t CP_PublishRequest.updatedEncryptionID.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  uint64_t v7 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return outlined init with take of CP_SequenceNumber((uint64_t)v6, (uint64_t)a1, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
    }
    outlined destroy of CP_SequenceNumber((uint64_t)v6, type metadata accessor for CP_PublishRequest.OneOf_Operation);
  }
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  uint64_t v9 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
  UnknownStorage.init()();
  uint64_t v10 = (char *)a1 + *(int *)(v9 + 24);
  uint64_t v11 = type metadata accessor for CP_EncryptionID(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
}

uint64_t key path setter for CP_PublishRequest.updatedEncryptionID : CP_PublishRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of CP_SequenceNumber(a1, (uint64_t)v6, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
  outlined destroy of UUID?(a2, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  outlined init with take of CP_SequenceNumber((uint64_t)v6, a2, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
  uint64_t v7 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t CP_PublishRequest.updatedEncryptionID.setter(uint64_t a1)
{
  return CP_TopicSubscribersRequest.topicTerminationAck.setter(a1, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID, type metadata accessor for CP_PublishRequest.OneOf_Operation);
}

uint64_t CP_TopicSubscribersRequest.topicTerminationAck.setter(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  outlined destroy of UUID?(v4, a2);
  outlined init with take of CP_SequenceNumber(a1, v4, a3);
  uint64_t v8 = a4(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v9 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
  return v9(v4, 0, 1, v8);
}

uint64_t CP_PublishRequest.UpdatedEncryptionID.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  uint64_t v2 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
  UnknownStorage.init()();
  char v3 = (char *)a1 + *(int *)(v2 + 24);
  uint64_t v4 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v5 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 1, 1, v4);
}

void (*CP_PublishRequest.updatedEncryptionID.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  void *v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  uint64_t v7 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
  size_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  v4[2] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v4[3] = v9;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  uint64_t v10 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  v4[4] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
LABEL_6:
    *uint64_t v9 = 0;
    v9[1] = 0xE000000000000000;
    UnknownStorage.init()();
    uint64_t v12 = (char *)v9 + *(int *)(v7 + 24);
    uint64_t v13 = type metadata accessor for CP_EncryptionID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    return CP_PublishRequest.updatedEncryptionID.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of CP_SequenceNumber((uint64_t)v6, type metadata accessor for CP_PublishRequest.OneOf_Operation);
    goto LABEL_6;
  }
  outlined init with take of CP_SequenceNumber((uint64_t)v6, (uint64_t)v9, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
  return CP_PublishRequest.updatedEncryptionID.modify;
}

void CP_PublishRequest.updatedEncryptionID.modify(uint64_t **a1, char a2)
{
}

void CP_TopicSubscribersRequest.topicTerminationAck.modify(uint64_t **a1, char a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t a5, uint64_t (*a6)(void))
{
  size_t v8 = *a1;
  uint64_t v9 = (*a1)[4];
  uint64_t v10 = (*a1)[5];
  uint64_t v11 = (void *)(*a1)[2];
  uint64_t v12 = (void *)(*a1)[3];
  uint64_t v14 = **a1;
  uint64_t v13 = (void *)(*a1)[1];
  if (a2)
  {
    outlined init with copy of CP_SequenceNumber((*a1)[3], (uint64_t)v11, a4);
    outlined destroy of UUID?(v14, a3);
    outlined init with take of CP_SequenceNumber((uint64_t)v11, v14, a4);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
    outlined destroy of CP_SequenceNumber((uint64_t)v12, a6);
  }
  else
  {
    outlined destroy of UUID?(**a1, a3);
    outlined init with take of CP_SequenceNumber((uint64_t)v12, v14, a4);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  free(v12);
  free(v11);
  free(v13);
  free(v8);
}

uint64_t CP_PublishRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CP_EncryptionID.unknownFields.getter(type metadata accessor for CP_PublishRequest, a1);
}

uint64_t CP_PublishRequest.unknownFields.setter(uint64_t a1)
{
  return CP_EncryptionID.unknownFields.setter(a1, type metadata accessor for CP_PublishRequest);
}

uint64_t (*CP_PublishRequest.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*CP_PublishRequest.UpdatedEncryptionID.topic.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_PublishRequest.UpdatedEncryptionID.encryptionID.getter@<X0>(_OWORD *a1@<X8>)
{
  return CP_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID.getter(type metadata accessor for CP_PublishRequest.UpdatedEncryptionID, a1);
}

uint64_t CP_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID.getter@<X0>(uint64_t (*a1)(void)@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2 + *(int *)(v8 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CP_EncryptionID?);
  uint64_t v9 = type metadata accessor for CP_EncryptionID(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v7, 1, v9) != 1) {
    return outlined init with take of CP_SequenceNumber((uint64_t)v7, (uint64_t)a2, type metadata accessor for CP_EncryptionID);
  }
  *a2 = xmmword_1B113B700;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for CP_EncryptionID?);
}

uint64_t key path getter for CP_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID : CP_SubscribeResponse.InitializeAck.MissingEncryptionID@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, _OWORD *a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v9 + 24), (uint64_t)v8, &demangling cache variable for type metadata for CP_EncryptionID?);
  uint64_t v10 = type metadata accessor for CP_EncryptionID(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v8, 1, v10) != 1) {
    return outlined init with take of CP_SequenceNumber((uint64_t)v8, (uint64_t)a3, type metadata accessor for CP_EncryptionID);
  }
  *a3 = xmmword_1B113B700;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for CP_EncryptionID?);
}

uint64_t key path setter for CP_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID : CP_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v8 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of CP_SequenceNumber(a1, (uint64_t)v11, type metadata accessor for CP_EncryptionID);
  uint64_t v12 = a2 + *(int *)(a5(0) + 24);
  outlined destroy of UUID?(v12, &demangling cache variable for type metadata for CP_EncryptionID?);
  outlined init with take of CP_SequenceNumber((uint64_t)v11, v12, type metadata accessor for CP_EncryptionID);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v12, 0, 1, v8);
}

uint64_t CP_PublishRequest.UpdatedEncryptionID.encryptionID.setter(uint64_t a1)
{
  return CP_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID.setter(a1, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
}

uint64_t CP_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 24);
  outlined destroy of UUID?(v4, &demangling cache variable for type metadata for CP_EncryptionID?);
  outlined init with take of CP_SequenceNumber(a1, v4, type metadata accessor for CP_EncryptionID);
  uint64_t v5 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 0, 1, v5);
}

void (*CP_PublishRequest.UpdatedEncryptionID.encryptionID.modify(void *a1))(uint64_t a1, char a2)
{
  char v3 = malloc(0x38uLL);
  *a1 = v3;
  *char v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CP_EncryptionID(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  long long v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CP_EncryptionID?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = xmmword_1B113B700;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_EncryptionID?);
  }
  else
  {
    outlined init with take of CP_SequenceNumber((uint64_t)v5, (uint64_t)v10, type metadata accessor for CP_EncryptionID);
  }
  return CP_Record.encryptionID.modify;
}

BOOL CP_PublishRequest.UpdatedEncryptionID.hasEncryptionID.getter()
{
  return CP_SubscribeResponse.InitializeAck.MissingEncryptionID.hasEncryptionID.getter(type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
}

BOOL CP_SubscribeResponse.InitializeAck.MissingEncryptionID.hasEncryptionID.getter(uint64_t (*a1)(void))
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = a1(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for CP_EncryptionID?);
  uint64_t v7 = type metadata accessor for CP_EncryptionID(0);
  BOOL v8 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1;
  outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_EncryptionID?);
  return v8;
}

Swift::Void __swiftcall CP_PublishRequest.UpdatedEncryptionID.clearEncryptionID()()
{
}

uint64_t CP_SubscribeResponse.InitializeAck.MissingEncryptionID.clearEncryptionID()(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 24);
  outlined destroy of UUID?(v2, &demangling cache variable for type metadata for CP_EncryptionID?);
  uint64_t v3 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
  return v4(v2, 1, 1, v3);
}

uint64_t CP_PublishRequest.UpdatedEncryptionID.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CP_EncryptionID.unknownFields.getter(type metadata accessor for CP_PublishRequest.UpdatedEncryptionID, a1);
}

uint64_t CP_PublishRequest.UpdatedEncryptionID.unknownFields.setter(uint64_t a1)
{
  return CP_EncryptionID.unknownFields.setter(a1, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
}

uint64_t (*CP_PublishRequest.UpdatedEncryptionID.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_PublishRequest.init()@<X0>(uint64_t a1@<X8>)
{
  return CP_TopicSubscribersRequest.init()(type metadata accessor for CP_PublishRequest.OneOf_Operation, (void (*)(void))type metadata accessor for CP_PublishRequest, a1);
}

uint64_t CP_PublishResponse.status.getter()
{
  return *(void *)v0;
}

uint64_t CP_PublishResponse.status.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*CP_PublishResponse.status.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_PublishResponse.error.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CP_PublishResponse.error.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*CP_PublishResponse.error.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_PublishResponse.seqNumAck.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CP_PublishResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for CP_SequenceNumber?);
  uint64_t v7 = type metadata accessor for CP_SequenceNumber(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CP_SequenceNumber((uint64_t)v5, (uint64_t)a1, type metadata accessor for CP_SequenceNumber);
  }
  *a1 = 0;
  a1[1] = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_SequenceNumber?);
}

uint64_t key path getter for CP_PublishResponse.seqNumAck : CP_PublishResponse@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CP_PublishResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v7 + 28), (uint64_t)v6, &demangling cache variable for type metadata for CP_SequenceNumber?);
  uint64_t v8 = type metadata accessor for CP_SequenceNumber(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of CP_SequenceNumber((uint64_t)v6, (uint64_t)a2, type metadata accessor for CP_SequenceNumber);
  }
  *a2 = 0;
  a2[1] = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_SequenceNumber?);
}

uint64_t CP_PublishResponse.seqNumAck.setter(uint64_t a1)
{
  return CP_PublishResponse.seqNumAck.setter(a1, type metadata accessor for CP_PublishResponse, &demangling cache variable for type metadata for CP_SequenceNumber?, type metadata accessor for CP_SequenceNumber, type metadata accessor for CP_SequenceNumber);
}

void (*CP_PublishResponse.seqNumAck.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CP_SequenceNumber(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  long long v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CP_PublishResponse(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CP_SequenceNumber?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = 0;
    v10[1] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_SequenceNumber?);
  }
  else
  {
    outlined init with take of CP_SequenceNumber((uint64_t)v5, (uint64_t)v10, type metadata accessor for CP_SequenceNumber);
  }
  return CP_Record.seqNum.modify;
}

BOOL CP_PublishResponse.hasSeqNumAck.getter()
{
  return CP_PublishResponse.hasSeqNumAck.getter(&demangling cache variable for type metadata for CP_SequenceNumber?, type metadata accessor for CP_PublishResponse, type metadata accessor for CP_SequenceNumber);
}

Swift::Void __swiftcall CP_PublishResponse.clearSeqNumAck()()
{
}

uint64_t CP_PublishResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CP_KeyValue.unknownFields.getter(type metadata accessor for CP_PublishResponse, a1);
}

uint64_t CP_PublishResponse.unknownFields.setter(uint64_t a1)
{
  return CP_KeyValue.unknownFields.setter(a1, type metadata accessor for CP_PublishResponse);
}

uint64_t (*CP_PublishResponse.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_PublishResponse.init()@<X0>(uint64_t a1@<X8>)
{
  return CP_PublishResponse.init()(type metadata accessor for CP_PublishResponse, type metadata accessor for CP_SequenceNumber, a1);
}

uint64_t (*CP_UpsertTopicMetadataRequest.topic.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*CP_UpsertTopicMetadataRequest.metadata.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_UpsertTopicMetadataRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CP_KeyValue.unknownFields.getter(type metadata accessor for CP_UpsertTopicMetadataRequest, a1);
}

uint64_t CP_UpsertTopicMetadataRequest.unknownFields.setter(uint64_t a1)
{
  return CP_KeyValue.unknownFields.setter(a1, type metadata accessor for CP_UpsertTopicMetadataRequest);
}

uint64_t (*CP_UpsertTopicMetadataRequest.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_UpsertTopicMetadataRequest.init()@<X0>(void *a1@<X8>)
{
  return CP_TopicSubscribers.TopicSubscribersInfo.init()((void (*)(void))type metadata accessor for CP_UpsertTopicMetadataRequest, a1);
}

uint64_t CP_TopicSubscribers.TopicSubscribersInfo.init()@<X0>(void (*a1)(void)@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  a2[2] = MEMORY[0x1E4FBC860];
  a1(0);
  return UnknownStorage.init()();
}

uint64_t (*CP_UpsertTopicMetadataResponse.status.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*CP_UpsertTopicMetadataResponse.error.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_UpsertTopicMetadataResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CP_KeyValue.unknownFields.getter(type metadata accessor for CP_UpsertTopicMetadataResponse, a1);
}

uint64_t CP_UpsertTopicMetadataResponse.unknownFields.setter(uint64_t a1)
{
  return CP_KeyValue.unknownFields.setter(a1, type metadata accessor for CP_UpsertTopicMetadataResponse);
}

uint64_t (*CP_UpsertTopicMetadataResponse.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_UpsertTopicMetadataResponse.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  type metadata accessor for CP_UpsertTopicMetadataResponse(0);
  return UnknownStorage.init()();
}

uint64_t (*CP_CreateTopicRequest.topic.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*CP_CreateTopicRequest.metadata.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_CreateTopicRequest.participantIdsalt.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CP_CreateTopicRequest.participantIdsalt.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return result;
}

uint64_t (*CP_CreateTopicRequest.participantIdsalt.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_CreateTopicRequest.topicCategory.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t CP_CreateTopicRequest.topicCategory.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 40) = result;
  *(unsigned char *)(v2 + 48) = a2 & 1;
  return result;
}

uint64_t (*CP_CreateTopicRequest.topicCategory.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_CreateTopicRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CP_Record.unknownFields.getter(type metadata accessor for CP_CreateTopicRequest, a1);
}

uint64_t CP_CreateTopicRequest.unknownFields.setter(uint64_t a1)
{
  return CP_Record.unknownFields.setter(a1, type metadata accessor for CP_CreateTopicRequest);
}

uint64_t (*CP_CreateTopicRequest.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_CreateTopicRequest.TopicCategory.init()()
{
  return 0;
}

uint64_t CP_CreateTopicRequest.TopicCategory.init(rawValue:)(uint64_t a1)
{
  return CP_ResponseStatus.init(rawValue:)(a1, (uint64_t (*)(void))specialized CP_CreateTopicRequest.TopicCategory.init(rawValue:));
}

uint64_t CP_ResponseStatus.init(rawValue:)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance CP_CreateTopicRequest.TopicCategory@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance CP_ResponseStatus((uint64_t (*)(void))specialized CP_CreateTopicRequest.TopicCategory.init(rawValue:), a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance CP_ResponseStatus@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t result = a1();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 9) = v5 & 1;
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CP_CreateTopicRequest.TopicCategory@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance CP_ResponseStatus(a1, (uint64_t (*)(void))specialized CP_CreateTopicRequest.TopicCategory.init(rawValue:), a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CP_ResponseStatus@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result = a2(*a1);
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 9) = v6 & 1;
  return result;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_CreateTopicRequest.TopicCategory(uint64_t a1, uint64_t a2)
{
  unint64_t Topic = lazy protocol witness table accessor for type CP_CreateTopicRequest.TopicCategory and conformance CP_CreateTopicRequest.TopicCategory();
  return MEMORY[0x1F4127160](a1, a2, Topic);
}

uint64_t CP_CreateTopicRequest.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0xE000000000000000;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 1;
  type metadata accessor for CP_CreateTopicRequest(0);
  return UnknownStorage.init()();
}

uint64_t *CP_CreateTopicRequest.TopicCategory.allCases.unsafeMutableAddressor()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  return &static CP_CreateTopicRequest.TopicCategory.allCases;
}

uint64_t static CP_CreateTopicRequest.TopicCategory.allCases.getter()
{
  return static AttachmentLedger_ResponseStatus.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static CP_CreateTopicRequest.TopicCategory.allCases.setter(uint64_t a1)
{
  return static AttachmentLedger_ResponseStatus.allCases.setter(a1, &one-time initialization token for allCases, &static CP_CreateTopicRequest.TopicCategory.allCases);
}

uint64_t (*static CP_CreateTopicRequest.TopicCategory.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CP_CreateTopicRequest.TopicCategory@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for allCases, &static CP_CreateTopicRequest.TopicCategory.allCases, a1);
}

uint64_t (*CP_CreateTopicResponse.status.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*CP_CreateTopicResponse.error.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_CreateTopicResponse.topicConfig.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
  MEMORY[0x1F4188790](v3 - 8);
  char v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TopicResponse = type metadata accessor for CP_CreateTopicResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(TopicResponse + 28), (uint64_t)v5, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
  uint64_t Topic = type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(Topic - 8) + 48))(v5, 1, Topic) != 1) {
    return outlined init with take of CP_SequenceNumber((uint64_t)v5, (uint64_t)a1, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
  }
  *(_OWORD *)((char *)a1 + 28) = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
}

uint64_t key path getter for CP_CreateTopicResponse.topicConfig : CP_CreateTopicResponse@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
  MEMORY[0x1F4188790](v4 - 8);
  char v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TopicResponse = type metadata accessor for CP_CreateTopicResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(TopicResponse + 28), (uint64_t)v6, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
  uint64_t Topic = type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(Topic - 8) + 48))(v6, 1, Topic) != 1) {
    return outlined init with take of CP_SequenceNumber((uint64_t)v6, (uint64_t)a2, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
  }
  *(_OWORD *)((char *)a2 + 28) = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
}

uint64_t key path setter for CP_PublishResponse.seqNumAck : CP_PublishResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void), uint64_t (*a7)(void), uint64_t *a8)
{
  uint64_t v13 = a5(0);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v19 - v15;
  outlined init with copy of CP_SequenceNumber(a1, (uint64_t)&v19 - v15, a6);
  uint64_t v17 = a2 + *(int *)(a7(0) + 28);
  outlined destroy of UUID?(v17, a8);
  outlined init with take of CP_SequenceNumber((uint64_t)v16, v17, a6);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v17, 0, 1, v13);
}

uint64_t CP_CreateTopicResponse.topicConfig.setter(uint64_t a1)
{
  return CP_PublishResponse.seqNumAck.setter(a1, type metadata accessor for CP_CreateTopicResponse, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
}

uint64_t CP_PublishResponse.seqNumAck.setter(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v10 = v5 + *(int *)(a2(0) + 28);
  outlined destroy of UUID?(v10, a3);
  outlined init with take of CP_SequenceNumber(a1, v10, a4);
  uint64_t v11 = a5(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  return v12(v10, 0, 1, v11);
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.init()@<X0>(_OWORD *a1@<X8>)
{
  *a1 = 0u;
  a1[1] = 0u;
  *(_OWORD *)((char *)a1 + 28) = 0u;
  return UnknownStorage.init()();
}

void (*CP_CreateTopicResponse.topicConfig.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t Topic = type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig(0);
  v3[2] = Topic;
  uint64_t v7 = *(void *)(Topic - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  long long v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CP_CreateTopicResponse(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, Topic) == 1)
  {
    *(_OWORD *)((char *)v10 + 28) = 0u;
    *uint64_t v10 = 0u;
    v10[1] = 0u;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
  }
  else
  {
    outlined init with take of CP_SequenceNumber((uint64_t)v5, (uint64_t)v10, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
  }
  return CP_CreateTopicResponse.topicConfig.modify;
}

void CP_CreateTopicResponse.topicConfig.modify(uint64_t a1, char a2)
{
}

void CP_Record.seqNum.modify(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = *(int *)(*(void *)a1 + 48);
  size_t v9 = *(void **)(*(void *)a1 + 32);
  uint64_t v10 = *(void **)(*(void *)a1 + 40);
  uint64_t v11 = *(void *)(*(void *)a1 + 16);
  uint64_t v12 = *(void *)(*(void *)a1 + 24);
  uint64_t v13 = *(void **)(*(void *)a1 + 8);
  uint64_t v14 = **(void **)a1 + v8;
  if (a2)
  {
    outlined init with copy of CP_SequenceNumber(*(void *)(*(void *)a1 + 40), (uint64_t)v9, a4);
    outlined destroy of UUID?(v14, a3);
    outlined init with take of CP_SequenceNumber((uint64_t)v9, v14, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v11);
    outlined destroy of CP_SequenceNumber((uint64_t)v10, a5);
  }
  else
  {
    outlined destroy of UUID?(**(void **)a1 + v8, a3);
    outlined init with take of CP_SequenceNumber((uint64_t)v10, v14, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v11);
  }
  free(v10);
  free(v9);
  free(v13);
  free(v7);
}

BOOL CP_CreateTopicResponse.hasTopicConfig.getter()
{
  return CP_PublishResponse.hasSeqNumAck.getter(&demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?, type metadata accessor for CP_CreateTopicResponse, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
}

BOOL CP_PublishResponse.hasSeqNumAck.getter(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x1F4188790](v7 - 8);
  size_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3 + *(int *)(v10 + 28), (uint64_t)v9, a1);
  uint64_t v11 = a3(0);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of UUID?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall CP_CreateTopicResponse.clearTopicConfig()()
{
}

uint64_t CP_PublishResponse.clearSeqNumAck()(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 28);
  outlined destroy of UUID?(v6, a2);
  uint64_t v7 = a3(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t CP_CreateTopicResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CP_KeyValue.unknownFields.getter(type metadata accessor for CP_CreateTopicResponse, a1);
}

uint64_t CP_CreateTopicResponse.unknownFields.setter(uint64_t a1)
{
  return CP_KeyValue.unknownFields.setter(a1, type metadata accessor for CP_CreateTopicResponse);
}

uint64_t (*CP_CreateTopicResponse.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.maxRecordDataSizeBytes.getter()
{
  return *(void *)v0;
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.maxRecordDataSizeBytes.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*CP_CreateTopicResponse.ClientTopicConfig.maxRecordDataSizeBytes.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*CP_CreateTopicResponse.ClientTopicConfig.maxPublishQueueSize.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.maxDecryptionQueueSize.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.maxDecryptionQueueSize.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*CP_CreateTopicResponse.ClientTopicConfig.maxDecryptionQueueSize.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.maxPrimaryRpcStreamTries.getter()
{
  return *(unsigned int *)(v0 + 24);
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.maxPrimaryRpcStreamTries.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*CP_CreateTopicResponse.ClientTopicConfig.maxPrimaryRpcStreamTries.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.retryPrimaryRpcStreamIntervalMillis.getter()
{
  return *(unsigned int *)(v0 + 28);
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.retryPrimaryRpcStreamIntervalMillis.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 28) = result;
  return result;
}

uint64_t (*CP_CreateTopicResponse.ClientTopicConfig.retryPrimaryRpcStreamIntervalMillis.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.maxRefreshDataCryptorTries.getter()
{
  return *(unsigned int *)(v0 + 32);
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.maxRefreshDataCryptorTries.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*CP_CreateTopicResponse.ClientTopicConfig.maxRefreshDataCryptorTries.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.refreshDataCryptorIntervalSeconds.getter()
{
  return *(unsigned int *)(v0 + 36);
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.refreshDataCryptorIntervalSeconds.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 36) = result;
  return result;
}

uint64_t (*CP_CreateTopicResponse.ClientTopicConfig.refreshDataCryptorIntervalSeconds.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.gracefulShutdownWindowSeconds.getter()
{
  return *(unsigned int *)(v0 + 40);
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.gracefulShutdownWindowSeconds.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 40) = result;
  return result;
}

uint64_t (*CP_CreateTopicResponse.ClientTopicConfig.gracefulShutdownWindowSeconds.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig(0) + 48);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig(0) + 48);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*CP_CreateTopicResponse.ClientTopicConfig.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_CreateTopicResponse.init()@<X0>(uint64_t a1@<X8>)
{
  return CP_PublishResponse.init()(type metadata accessor for CP_CreateTopicResponse, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig, a1);
}

uint64_t CP_PublishResponse.init()@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 8) = 1;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0xE000000000000000;
  uint64_t v5 = a1(0);
  UnknownStorage.init()();
  uint64_t v6 = a3 + *(int *)(v5 + 28);
  uint64_t v7 = a2(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t CP_FetchTopicsRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t CP_FetchTopicsRequest.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);
  return v4(v1, a1, v3);
}

uint64_t (*CP_FetchTopicsRequest.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*CP_FetchTopicsResponse.status.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*CP_FetchTopicsResponse.error.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*CP_FetchTopicsResponse.topics.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_FetchTopicsResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CP_FetchTopicsResponse(0) + 28);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t CP_FetchTopicsResponse.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CP_FetchTopicsResponse(0) + 28);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*CP_FetchTopicsResponse.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CP_FetchTopicsResponse.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(void *)(a1 + 32) = MEMORY[0x1E4FBC860];
  type metadata accessor for CP_FetchTopicsResponse(0);
  return UnknownStorage.init()();
}

uint64_t CP_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_ResponseStatus._protobuf_nameMap);
}

uint64_t static CP_ResponseStatus._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_ResponseStatus._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_ResponseStatus@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_ResponseStatus._protobuf_nameMap, a1);
}

const char *CP_Record.protoMessageName.unsafeMutableAddressor()
{
  return "cp.Record";
}

uint64_t static CP_Record.protoMessageName.getter()
{
  return 0x726F6365522E7063;
}

uint64_t CP_Record._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_Record._protobuf_nameMap);
}

uint64_t static CP_Record._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_Record._protobuf_nameMap, a1);
}

uint64_t CP_Record.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 2:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
        case 3:
          closure #3 in CP_Record.decodeMessage<A>(decoder:)();
          break;
        case 4:
          dispatch thunk of Decoder.decodeRepeatedFixed64Field(value:)();
          break;
        case 5:
          closure #5 in CP_Record.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(void))type metadata accessor for CP_Record);
          break;
        case 6:
          dispatch thunk of Decoder.decodeSingularFixed64Field(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #3 in CP_Record.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t CP_Record.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v8 = v3[1];
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0) {
    uint64_t v9 = *v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    uint64_t v11 = v3[2];
    unint64_t v12 = v3[3];
    switch(v12 >> 62)
    {
      case 1uLL:
        if ((int)v11 != v11 >> 32) {
          goto LABEL_11;
        }
        goto LABEL_12;
      case 2uLL:
        if (*(void *)(v11 + 16) != *(void *)(v11 + 24)) {
          goto LABEL_11;
        }
        goto LABEL_12;
      case 3uLL:
        goto LABEL_12;
      default:
        if ((v12 & 0xFF000000000000) == 0) {
          goto LABEL_12;
        }
LABEL_11:
        uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
        if (!v4)
        {
LABEL_12:
          uint64_t result = closure #1 in CP_Record.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
          if (!v4)
          {
            if (*(void *)(v3[4] + 16)) {
              dispatch thunk of Visitor.visitPackedFixed64Field(value:fieldNumber:)();
            }
            closure #2 in CP_Record.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3, type metadata accessor for CP_Record, 5);
            if (v3[5]) {
              dispatch thunk of Visitor.visitSingularFixed64Field(value:fieldNumber:)();
            }
            type metadata accessor for CP_Record(0);
            uint64_t result = UnknownStorage.traverse<A>(visitor:)();
          }
        }
        break;
    }
  }
  return result;
}

uint64_t closure #1 in CP_Record.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CP_Record(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v12 + 36), (uint64_t)v7, &demangling cache variable for type metadata for CP_SequenceNumber?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for CP_SequenceNumber?);
  }
  outlined init with take of CP_SequenceNumber((uint64_t)v7, (uint64_t)v11, type metadata accessor for CP_SequenceNumber);
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, (void (*)(uint64_t))type metadata accessor for CP_SequenceNumber);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CP_SequenceNumber((uint64_t)v11, type metadata accessor for CP_SequenceNumber);
}

Swift::Int CP_Record.hashValue.getter()
{
  return CP_Record.hashValue.getter((void (*)(void))type metadata accessor for CP_Record, &lazy protocol witness table cache variable for type CP_Record and conformance CP_Record, (void (*)(uint64_t))type metadata accessor for CP_Record);
}

uint64_t protocol witness for Message.init() in conformance CP_Record@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0xE000000000000000;
  *(_OWORD *)(a2 + 16) = xmmword_1B113B700;
  *(void *)(a2 + 32) = MEMORY[0x1E4FBC860];
  *(void *)(a2 + 40) = 0;
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 36);
  uint64_t v5 = type metadata accessor for CP_SequenceNumber(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a2 + *(int *)(a1 + 40);
  uint64_t v7 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_Record()
{
  return 0x726F6365522E7063;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_Record(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_Record.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_Record(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_Record.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_Record(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_Record and conformance CP_Record, (void (*)(uint64_t))type metadata accessor for CP_Record);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_Record@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_Record._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_Record()
{
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_Record and conformance CP_Record, (void (*)(uint64_t))type metadata accessor for CP_Record);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_Record(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_Record and conformance CP_Record, (void (*)(uint64_t))type metadata accessor for CP_Record);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

const char *CP_KeyValue.protoMessageName.unsafeMutableAddressor()
{
  return "cp.KeyValue";
}

uint64_t static CP_KeyValue.protoMessageName.getter()
{
  return 0x615679654B2E7063;
}

uint64_t CP_KeyValue._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_KeyValue._protobuf_nameMap);
}

uint64_t static CP_KeyValue._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_KeyValue._protobuf_nameMap, a1);
}

uint64_t CP_KeyValue.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CP_KeyValue.traverse<A>(visitor:)()
{
  unint64_t v2 = v0[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    uint64_t v5 = v0[2];
    unint64_t v6 = v0[3];
    switch(v6 >> 62)
    {
      case 1uLL:
        if ((int)v5 != v5 >> 32) {
          goto LABEL_11;
        }
        goto LABEL_12;
      case 2uLL:
        if (*(void *)(v5 + 16) != *(void *)(v5 + 24)) {
          goto LABEL_11;
        }
        goto LABEL_12;
      case 3uLL:
        goto LABEL_12;
      default:
        if ((v6 & 0xFF000000000000) == 0) {
          goto LABEL_12;
        }
LABEL_11:
        uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
        if (!v1)
        {
LABEL_12:
          type metadata accessor for CP_KeyValue(0);
          uint64_t result = UnknownStorage.traverse<A>(visitor:)();
        }
        break;
    }
  }
  return result;
}

Swift::Int CP_KeyValue.hashValue.getter()
{
  return CP_Record.hashValue.getter((void (*)(void))type metadata accessor for CP_KeyValue, &lazy protocol witness table cache variable for type CP_KeyValue and conformance CP_KeyValue, (void (*)(uint64_t))type metadata accessor for CP_KeyValue);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_KeyValue()
{
  return 0x615679654B2E7063;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_KeyValue()
{
  return CP_KeyValue.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_KeyValue()
{
  return CP_KeyValue.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_KeyValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_KeyValue and conformance CP_KeyValue, (void (*)(uint64_t))type metadata accessor for CP_KeyValue);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_KeyValue@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_KeyValue._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_KeyValue()
{
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_KeyValue and conformance CP_KeyValue, (void (*)(uint64_t))type metadata accessor for CP_KeyValue);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_KeyValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_KeyValue and conformance CP_KeyValue, (void (*)(uint64_t))type metadata accessor for CP_KeyValue);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

void *CP_SequenceNumber.protoMessageName.unsafeMutableAddressor()
{
  return &static CP_SequenceNumber.protoMessageName;
}

unint64_t static CP_SequenceNumber.protoMessageName.getter()
{
  return 0xD000000000000011;
}

uint64_t CP_SequenceNumber._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SequenceNumber._protobuf_nameMap);
}

uint64_t static CP_SequenceNumber._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SequenceNumber._protobuf_nameMap, a1);
}

uint64_t CP_SequenceNumber.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularFixed64Field(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CP_SequenceNumber.traverse<A>(visitor:)()
{
  if (!*v0 || (uint64_t result = dispatch thunk of Visitor.visitSingularFixed64Field(value:fieldNumber:)(), !v1))
  {
    if (!v0[1] || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for CP_SequenceNumber(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int CP_SequenceNumber.hashValue.getter()
{
  return CP_Record.hashValue.getter((void (*)(void))type metadata accessor for CP_SequenceNumber, &lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, (void (*)(uint64_t))type metadata accessor for CP_SequenceNumber);
}

uint64_t protocol witness for Message.init() in conformance CP_SequenceNumber@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_SequenceNumber()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_SequenceNumber()
{
  return CP_SequenceNumber.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_SequenceNumber()
{
  return CP_SequenceNumber.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_SequenceNumber(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, (void (*)(uint64_t))type metadata accessor for CP_SequenceNumber);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_SequenceNumber@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SequenceNumber._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_SequenceNumber()
{
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, (void (*)(uint64_t))type metadata accessor for CP_SequenceNumber);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_SequenceNumber(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, (void (*)(uint64_t))type metadata accessor for CP_SequenceNumber);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

void *CP_EncryptionID.protoMessageName.unsafeMutableAddressor()
{
  return &static CP_EncryptionID.protoMessageName;
}

uint64_t static CP_EncryptionID.protoMessageName.getter()
{
  return 0x7972636E452E7063;
}

uint64_t CP_EncryptionID._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_EncryptionID._protobuf_nameMap);
}

uint64_t static CP_EncryptionID._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_EncryptionID._protobuf_nameMap, a1);
}

uint64_t CP_EncryptionID.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_EncryptionID.decodeMessage<A>(decoder:)(a1, a2, a3, MEMORY[0x1E4F70EB8]);
}

uint64_t CP_EncryptionID.traverse<A>(visitor:)()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
      if (!v1)
      {
LABEL_8:
        type metadata accessor for CP_EncryptionID(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
      return result;
  }
}

Swift::Int CP_EncryptionID.hashValue.getter()
{
  return CP_Record.hashValue.getter((void (*)(void))type metadata accessor for CP_EncryptionID, &lazy protocol witness table cache variable for type CP_EncryptionID and conformance CP_EncryptionID, (void (*)(uint64_t))type metadata accessor for CP_EncryptionID);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_EncryptionID()
{
  return 0x7972636E452E7063;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_EncryptionID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_EncryptionID.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_EncryptionID()
{
  return CP_EncryptionID.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_EncryptionID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_EncryptionID and conformance CP_EncryptionID, (void (*)(uint64_t))type metadata accessor for CP_EncryptionID);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_EncryptionID@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_EncryptionID._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_EncryptionID()
{
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_EncryptionID and conformance CP_EncryptionID, (void (*)(uint64_t))type metadata accessor for CP_EncryptionID);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_EncryptionID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_EncryptionID and conformance CP_EncryptionID, (void (*)(uint64_t))type metadata accessor for CP_EncryptionID);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

void *CP_TopicSubscribersRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static CP_TopicSubscribersRequest.protoMessageName;
}

unint64_t static CP_TopicSubscribersRequest.protoMessageName.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t CP_TopicSubscribersRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribersRequest._protobuf_nameMap);
}

uint64_t static CP_TopicSubscribersRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribersRequest._protobuf_nameMap, a1);
}

uint64_t CP_TopicSubscribersRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_TopicSubscribersRequest.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in CP_TopicSubscribersRequest.decodeMessage<A>(decoder:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in CP_TopicSubscribersRequest.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in CP_TopicSubscribersRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.TopicTerminatedAck?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  unint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  char v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  uint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
    uint64_t v29 = v13;
    uint64_t v30 = v46;
  }
  else
  {
    uint64_t v38 = v27;
    uint64_t v31 = (uint64_t)v44;
    outlined init with take of CP_SequenceNumber((uint64_t)v12, (uint64_t)v19, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
    outlined init with take of CP_SequenceNumber((uint64_t)v19, (uint64_t)v17, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of CP_SequenceNumber((uint64_t)v17, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
      uint64_t v30 = v46;
    }
    else
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.TopicTerminatedAck?);
      outlined init with take of CP_SequenceNumber((uint64_t)v17, v31, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
      outlined init with take of CP_SequenceNumber(v31, (uint64_t)v24, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
      uint64_t v30 = v46;
      v38(v24, 0, 1, v46);
    }
  }
  uint64_t v32 = v45;
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminatedAck and conformance CP_TopicSubscribersRequest.TopicTerminatedAck, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.TopicTerminatedAck?);
  }
  uint64_t v34 = v42;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, v42, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.TopicTerminatedAck?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.TopicTerminatedAck?);
    return outlined destroy of UUID?(v34, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.TopicTerminatedAck?);
  }
  else
  {
    uint64_t v35 = v41;
    outlined init with take of CP_SequenceNumber(v34, v41, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.TopicTerminatedAck?);
    uint64_t v36 = v40;
    outlined destroy of UUID?(v40, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
    outlined init with take of CP_SequenceNumber(v35, v36, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t closure #2 in CP_TopicSubscribersRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.TopicTerminationRequest?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  unint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  char v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  uint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
    uint64_t v29 = v13;
  }
  else
  {
    uint64_t v38 = v27;
    uint64_t v30 = (uint64_t)v44;
    outlined init with take of CP_SequenceNumber((uint64_t)v12, (uint64_t)v19, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
    outlined init with take of CP_SequenceNumber((uint64_t)v19, (uint64_t)v17, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.TopicTerminationRequest?);
      outlined init with take of CP_SequenceNumber((uint64_t)v17, v30, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
      outlined init with take of CP_SequenceNumber(v30, (uint64_t)v24, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
      uint64_t v31 = v46;
      v38(v24, 0, 1, v46);
      goto LABEL_7;
    }
    outlined destroy of CP_SequenceNumber((uint64_t)v17, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
  }
  uint64_t v31 = v46;
LABEL_7:
  uint64_t v32 = v45;
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest and conformance CP_TopicSubscribersRequest.TopicTerminationRequest, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.TopicTerminationRequest?);
  }
  uint64_t v34 = v42;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, v42, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.TopicTerminationRequest?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v31) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.TopicTerminationRequest?);
    return outlined destroy of UUID?(v34, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.TopicTerminationRequest?);
  }
  else
  {
    uint64_t v35 = v41;
    outlined init with take of CP_SequenceNumber(v34, v41, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.TopicTerminationRequest?);
    uint64_t v36 = v40;
    outlined destroy of UUID?(v40, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
    outlined init with take of CP_SequenceNumber(v35, v36, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t CP_TopicSubscribersRequest.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0, (uint64_t)v4, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  uint64_t v5 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5) == 1) {
    goto LABEL_6;
  }
  if (swift_getEnumCaseMultiPayload() == 1) {
    closure #2 in CP_TopicSubscribersRequest.traverse<A>(visitor:)(v0);
  }
  else {
    closure #1 in CP_TopicSubscribersRequest.traverse<A>(visitor:)(v0);
  }
  uint64_t result = outlined destroy of CP_SequenceNumber((uint64_t)v4, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
  if (!v1)
  {
LABEL_6:
    type metadata accessor for CP_TopicSubscribersRequest(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CP_TopicSubscribersRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  uint64_t v8 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with take of CP_SequenceNumber((uint64_t)v4, (uint64_t)v7, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
    lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminatedAck and conformance CP_TopicSubscribersRequest.TopicTerminatedAck, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of CP_SequenceNumber((uint64_t)v7, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
  }
  uint64_t result = outlined destroy of CP_SequenceNumber((uint64_t)v4, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
  __break(1u);
  return result;
}

uint64_t closure #2 in CP_TopicSubscribersRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  uint64_t v8 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of CP_SequenceNumber((uint64_t)v4, (uint64_t)v7, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
    lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest and conformance CP_TopicSubscribersRequest.TopicTerminationRequest, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of CP_SequenceNumber((uint64_t)v7, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
  }
  uint64_t result = outlined destroy of CP_SequenceNumber((uint64_t)v4, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
  __break(1u);
  return result;
}

Swift::Int CP_TopicSubscribersRequest.hashValue.getter()
{
  return CP_Record.hashValue.getter((void (*)(void))type metadata accessor for CP_TopicSubscribersRequest, &lazy protocol witness table cache variable for type CP_TopicSubscribersRequest and conformance CP_TopicSubscribersRequest, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribersRequest);
}

uint64_t protocol witness for Message.init() in conformance CP_TopicSubscribersRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Message.init() in conformance CP_TopicSubscribersRequest(type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation, a1);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_TopicSubscribersRequest()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_TopicSubscribersRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_TopicSubscribersRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_TopicSubscribersRequest()
{
  return CP_TopicSubscribersRequest.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_TopicSubscribersRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest and conformance CP_TopicSubscribersRequest, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribersRequest);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_TopicSubscribersRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribersRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_TopicSubscribersRequest()
{
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest and conformance CP_TopicSubscribersRequest, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribersRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_TopicSubscribersRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest and conformance CP_TopicSubscribersRequest, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribersRequest);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t *CP_TopicSubscribersRequest.TopicTerminatedAck.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static CP_TopicSubscribersRequest.TopicTerminatedAck.protoMessageName;
}

uint64_t static CP_TopicSubscribersRequest.TopicTerminatedAck.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static CP_TopicSubscribersRequest.TopicTerminatedAck.protoMessageName);
}

uint64_t CP_TopicSubscribersRequest.TopicTerminatedAck._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribersRequest.TopicTerminatedAck._protobuf_nameMap);
}

uint64_t static CP_TopicSubscribersRequest.TopicTerminatedAck._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribersRequest.TopicTerminatedAck._protobuf_nameMap, a1);
}

uint64_t CP_TopicSubscribersRequest.TopicTerminatedAck.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_EncryptionID.decodeMessage<A>(decoder:)(a1, a2, a3, MEMORY[0x1E4F70F10]);
}

uint64_t CP_TopicSubscribersRequest.TopicTerminatedAck.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_TopicSubscribersRequest.TopicTerminatedAck.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
}

Swift::Int CP_TopicSubscribersRequest.TopicTerminatedAck.hashValue.getter()
{
  return CP_Record.hashValue.getter((void (*)(void))type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck, &lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminatedAck and conformance CP_TopicSubscribersRequest.TopicTerminatedAck, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_TopicSubscribersRequest.TopicTerminatedAck(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static CP_TopicSubscribersRequest.TopicTerminatedAck.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_TopicSubscribersRequest.TopicTerminatedAck(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_TopicSubscribers.TerminateTopic.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_TopicSubscribersRequest.TopicTerminatedAck(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_TopicSubscribersRequest.TopicTerminatedAck.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_TopicSubscribersRequest.TopicTerminatedAck(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminatedAck and conformance CP_TopicSubscribersRequest.TopicTerminatedAck, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_TopicSubscribersRequest.TopicTerminatedAck@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribersRequest.TopicTerminatedAck._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_TopicSubscribersRequest.TopicTerminatedAck()
{
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminatedAck and conformance CP_TopicSubscribersRequest.TopicTerminatedAck, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_TopicSubscribersRequest.TopicTerminatedAck(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminatedAck and conformance CP_TopicSubscribersRequest.TopicTerminatedAck, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CP_TopicSubscribersRequest.TopicTerminatedAck(char *a1, char *a2)
{
  return specialized static CP_TopicSubscribersRequest.TopicTerminatedAck.== infix(_:_:)(a1, a2, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck) & 1;
}

uint64_t *CP_TopicSubscribersRequest.TopicTerminationRequest.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static CP_TopicSubscribersRequest.TopicTerminationRequest.protoMessageName;
}

uint64_t static CP_TopicSubscribersRequest.TopicTerminationRequest.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static CP_TopicSubscribersRequest.TopicTerminationRequest.protoMessageName);
}

uint64_t CP_TopicSubscribersRequest.TopicTerminationRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribersRequest.TopicTerminationRequest._protobuf_nameMap);
}

uint64_t static CP_TopicSubscribersRequest.TopicTerminationRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribersRequest.TopicTerminationRequest._protobuf_nameMap, a1);
}

uint64_t CP_TopicSubscribersRequest.TopicTerminationRequest.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        lazy protocol witness table accessor for type CP_TopicSubscribersRequest.TopicTerminationRequest.Reason and conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CP_TopicSubscribersRequest.TopicTerminationRequest.traverse<A>(visitor:)()
{
  unint64_t v2 = v0[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (!v0[2]
      || (lazy protocol witness table accessor for type CP_TopicSubscribersRequest.TopicTerminationRequest.Reason and conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason(),
          uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
          !v1))
    {
      type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int CP_TopicSubscribersRequest.TopicTerminationRequest.hashValue.getter()
{
  return CP_Record.hashValue.getter((void (*)(void))type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest, &lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest and conformance CP_TopicSubscribersRequest.TopicTerminationRequest, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
}

uint64_t protocol witness for Message.init() in conformance CP_TopicSubscribersRequest.TopicTerminationRequest@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_TopicSubscribersRequest.TopicTerminationRequest(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static CP_TopicSubscribersRequest.TopicTerminationRequest.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_TopicSubscribersRequest.TopicTerminationRequest()
{
  return CP_TopicSubscribersRequest.TopicTerminationRequest.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_TopicSubscribersRequest.TopicTerminationRequest()
{
  return CP_TopicSubscribersRequest.TopicTerminationRequest.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_TopicSubscribersRequest.TopicTerminationRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest and conformance CP_TopicSubscribersRequest.TopicTerminationRequest, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_TopicSubscribersRequest.TopicTerminationRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribersRequest.TopicTerminationRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_TopicSubscribersRequest.TopicTerminationRequest()
{
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest and conformance CP_TopicSubscribersRequest.TopicTerminationRequest, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_TopicSubscribersRequest.TopicTerminationRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest and conformance CP_TopicSubscribersRequest.TopicTerminationRequest, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t CP_TopicSubscribersRequest.TopicTerminationRequest.Reason._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribersRequest.TopicTerminationRequest.Reason._protobuf_nameMap);
}

uint64_t static CP_TopicSubscribersRequest.TopicTerminationRequest.Reason._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribersRequest.TopicTerminationRequest.Reason._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribersRequest.TopicTerminationRequest.Reason._protobuf_nameMap, a1);
}

void *CP_TopicSubscribers.protoMessageName.unsafeMutableAddressor()
{
  return &static CP_TopicSubscribers.protoMessageName;
}

unint64_t static CP_TopicSubscribers.protoMessageName.getter()
{
  return 0xD000000000000013;
}

uint64_t CP_TopicSubscribers._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribers._protobuf_nameMap);
}

uint64_t static CP_TopicSubscribers._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribers._protobuf_nameMap, a1);
}

uint64_t CP_TopicSubscribers.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 2) {
        break;
      }
      if (result == 1)
      {
        type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo(0);
        lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribers.TopicSubscribersInfo and conformance CP_TopicSubscribers.TopicSubscribersInfo, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo);
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CP_TopicSubscribers.TerminateTopic(0);
    lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribers.TerminateTopic and conformance CP_TopicSubscribers.TerminateTopic, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribers.TerminateTopic);
LABEL_5:
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
    goto LABEL_6;
  }
  return result;
}

uint64_t CP_TopicSubscribers.traverse<A>(visitor:)()
{
  if (!*(void *)(*v0 + 16)
    || (type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo(0),
        lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribers.TopicSubscribersInfo and conformance CP_TopicSubscribers.TopicSubscribersInfo, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    if (!*(void *)(v0[1] + 16)
      || (type metadata accessor for CP_TopicSubscribers.TerminateTopic(0),
          lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribers.TerminateTopic and conformance CP_TopicSubscribers.TerminateTopic, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribers.TerminateTopic), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for CP_TopicSubscribers(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int CP_TopicSubscribers.hashValue.getter()
{
  return CP_Record.hashValue.getter((void (*)(void))type metadata accessor for CP_TopicSubscribers, &lazy protocol witness table cache variable for type CP_TopicSubscribers and conformance CP_TopicSubscribers, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribers);
}

uint64_t protocol witness for Message.init() in conformance CP_TopicSubscribers@<X0>(void *a1@<X8>)
{
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *a1 = MEMORY[0x1E4FBC860];
  a1[1] = v1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_TopicSubscribers()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_TopicSubscribers()
{
  return CP_TopicSubscribers.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_TopicSubscribers()
{
  return CP_TopicSubscribers.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_TopicSubscribers(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribers and conformance CP_TopicSubscribers, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribers);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_TopicSubscribers@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribers._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_TopicSubscribers()
{
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribers and conformance CP_TopicSubscribers, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribers);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_TopicSubscribers(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribers and conformance CP_TopicSubscribers, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribers);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t *CP_TopicSubscribers.TopicSubscribersInfo.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static CP_TopicSubscribers.TopicSubscribersInfo.protoMessageName;
}

uint64_t static CP_TopicSubscribers.TopicSubscribersInfo.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static CP_TopicSubscribers.TopicSubscribersInfo.protoMessageName);
}

uint64_t CP_TopicSubscribers.TopicSubscribersInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribers.TopicSubscribersInfo._protobuf_nameMap);
}

uint64_t static CP_TopicSubscribers.TopicSubscribersInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribers.TopicSubscribersInfo._protobuf_nameMap, a1);
}

uint64_t CP_TopicSubscribers.TopicSubscribersInfo.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeRepeatedFixed64Field(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CP_TopicSubscribers.TopicSubscribersInfo.traverse<A>(visitor:)()
{
  unint64_t v2 = v0[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (!*(void *)(v0[2] + 16)
      || (uint64_t result = dispatch thunk of Visitor.visitPackedFixed64Field(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t static CP_TopicSubscribers.TopicSubscribersInfo.== infix(_:_:)(char *a1, char *a2)
{
  return specialized static CP_UpsertTopicMetadataRequest.== infix(_:_:)(a1, a2, (uint64_t (*)(void, void))specialized static Array<A>.== infix(_:_:), type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo) & 1;
}

Swift::Int CP_TopicSubscribers.TopicSubscribersInfo.hashValue.getter()
{
  return CP_Record.hashValue.getter((void (*)(void))type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo, &lazy protocol witness table cache variable for type CP_TopicSubscribers.TopicSubscribersInfo and conformance CP_TopicSubscribers.TopicSubscribersInfo, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_TopicSubscribers.TopicSubscribersInfo(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static CP_TopicSubscribers.TopicSubscribersInfo.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_TopicSubscribers.TopicSubscribersInfo()
{
  return CP_TopicSubscribers.TopicSubscribersInfo.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_TopicSubscribers.TopicSubscribersInfo()
{
  return CP_TopicSubscribers.TopicSubscribersInfo.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_TopicSubscribers.TopicSubscribersInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribers.TopicSubscribersInfo and conformance CP_TopicSubscribers.TopicSubscribersInfo, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_TopicSubscribers.TopicSubscribersInfo@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribers.TopicSubscribersInfo._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_TopicSubscribers.TopicSubscribersInfo()
{
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribers.TopicSubscribersInfo and conformance CP_TopicSubscribers.TopicSubscribersInfo, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_TopicSubscribers.TopicSubscribersInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribers.TopicSubscribersInfo and conformance CP_TopicSubscribers.TopicSubscribersInfo, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CP_TopicSubscribers.TopicSubscribersInfo(char *a1, char *a2)
{
  return specialized static CP_UpsertTopicMetadataRequest.== infix(_:_:)(a1, a2, (uint64_t (*)(void, void))specialized static Array<A>.== infix(_:_:), type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo) & 1;
}

uint64_t *CP_TopicSubscribers.TerminateTopic.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static CP_TopicSubscribers.TerminateTopic.protoMessageName;
}

uint64_t static CP_TopicSubscribers.TerminateTopic.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static CP_TopicSubscribers.TerminateTopic.protoMessageName);
}

uint64_t CP_TopicSubscribers.TerminateTopic._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribers.TerminateTopic._protobuf_nameMap);
}

uint64_t static CP_TopicSubscribers.TerminateTopic._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribers.TerminateTopic._protobuf_nameMap, a1);
}

uint64_t CP_TopicSubscribers.TerminateTopic.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_EncryptionID.decodeMessage<A>(decoder:)(a1, a2, a3, MEMORY[0x1E4F70F10]);
}

uint64_t CP_EncryptionID.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v5 || (v10 & 1) != 0) {
      break;
    }
    if (result == 1) {
      a4(v4, a2, a3);
    }
  }
  return result;
}

uint64_t CP_TopicSubscribers.TerminateTopic.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_TopicSubscribersRequest.TopicTerminatedAck.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for CP_TopicSubscribers.TerminateTopic);
}

uint64_t CP_TopicSubscribersRequest.TopicTerminatedAck.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  unint64_t v7 = v4[1];
  uint64_t v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0) {
    uint64_t v8 = *v4 & 0xFFFFFFFFFFFFLL;
  }
  if (!v8 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v5))
  {
    a4(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static CP_TopicSubscribers.TerminateTopic.== infix(_:_:)(char *a1, char *a2)
{
  return specialized static CP_TopicSubscribersRequest.TopicTerminatedAck.== infix(_:_:)(a1, a2, type metadata accessor for CP_TopicSubscribers.TerminateTopic) & 1;
}

Swift::Int CP_TopicSubscribers.TerminateTopic.hashValue.getter()
{
  return CP_Record.hashValue.getter((void (*)(void))type metadata accessor for CP_TopicSubscribers.TerminateTopic, &lazy protocol witness table cache variable for type CP_TopicSubscribers.TerminateTopic and conformance CP_TopicSubscribers.TerminateTopic, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribers.TerminateTopic);
}

uint64_t protocol witness for Message.init() in conformance CP_TopicSubscribers.TerminateTopic@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_TopicSubscribers.TerminateTopic(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static CP_TopicSubscribers.TerminateTopic.protoMessageName);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_TopicSubscribers.TerminateTopic(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_TopicSubscribers.TerminateTopic.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_TopicSubscribers.TerminateTopic(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribers.TerminateTopic and conformance CP_TopicSubscribers.TerminateTopic, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribers.TerminateTopic);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_TopicSubscribers.TerminateTopic@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_TopicSubscribers.TerminateTopic._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_TopicSubscribers.TerminateTopic()
{
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribers.TerminateTopic and conformance CP_TopicSubscribers.TerminateTopic, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribers.TerminateTopic);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_TopicSubscribers.TerminateTopic(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribers.TerminateTopic and conformance CP_TopicSubscribers.TerminateTopic, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribers.TerminateTopic);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CP_TopicSubscribers.TerminateTopic(char *a1, char *a2)
{
  return specialized static CP_TopicSubscribersRequest.TopicTerminatedAck.== infix(_:_:)(a1, a2, type metadata accessor for CP_TopicSubscribers.TerminateTopic) & 1;
}

const char *CP_SystemEvent.protoMessageName.unsafeMutableAddressor()
{
  return "cp.SystemEvent";
}

uint64_t static CP_SystemEvent.protoMessageName.getter()
{
  return 0x65747379532E7063;
}

uint64_t CP_SystemEvent._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SystemEvent._protobuf_nameMap);
}

uint64_t static CP_SystemEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SystemEvent._protobuf_nameMap, a1);
}

uint64_t CP_SystemEvent.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      closure #1 in CP_SystemEvent.decodeMessage<A>(decoder:)();
    }
    else if (result == 1)
    {
      closure #1 in CP_SystemEvent.decodeMessage<A>(decoder:)();
    }
  }
  return result;
}

uint64_t closure #1 in CP_SystemEvent.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.decodeSingularStringField(value:)();
  if (v0) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t CP_SystemEvent.traverse<A>(visitor:)()
{
  int v2 = *(unsigned __int8 *)(v0 + 16);
  if (v2 != 255)
  {
    if (v2)
    {
      uint64_t result = closure #2 in CP_SystemEvent.traverse<A>(visitor:)(v0);
      if (v1) {
        return result;
      }
    }
    else
    {
      uint64_t result = closure #1 in CP_SystemEvent.traverse<A>(visitor:)(v0);
      if (v1) {
        return result;
      }
    }
  }
  type metadata accessor for CP_SystemEvent(0);
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #1 in CP_SystemEvent.traverse<A>(visitor:)(uint64_t result)
{
  if ((*(unsigned char *)(result + 16) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  }
  __break(1u);
  return result;
}

uint64_t closure #2 in CP_SystemEvent.traverse<A>(visitor:)(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 16);
  if (v1 != 255 && (v1 & 1) != 0) {
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  }
  __break(1u);
  return result;
}

Swift::Int CP_SystemEvent.hashValue.getter()
{
  return CP_Record.hashValue.getter((void (*)(void))type metadata accessor for CP_SystemEvent, &lazy protocol witness table cache variable for type CP_SystemEvent and conformance CP_SystemEvent, (void (*)(uint64_t))type metadata accessor for CP_SystemEvent);
}

uint64_t protocol witness for Message.init() in conformance CP_SystemEvent@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = -1;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_SystemEvent()
{
  return 0x65747379532E7063;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_SystemEvent()
{
  return CP_SystemEvent.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_SystemEvent()
{
  return CP_SystemEvent.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_SystemEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SystemEvent and conformance CP_SystemEvent, (void (*)(uint64_t))type metadata accessor for CP_SystemEvent);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_SystemEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SystemEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_SystemEvent()
{
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SystemEvent and conformance CP_SystemEvent, (void (*)(uint64_t))type metadata accessor for CP_SystemEvent);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_SystemEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SystemEvent and conformance CP_SystemEvent, (void (*)(uint64_t))type metadata accessor for CP_SystemEvent);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

void *CP_SubscribeRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static CP_SubscribeRequest.protoMessageName;
}

unint64_t static CP_SubscribeRequest.protoMessageName.getter()
{
  return 0xD000000000000013;
}

uint64_t CP_SubscribeRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeRequest._protobuf_nameMap);
}

uint64_t static CP_SubscribeRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeRequest._protobuf_nameMap, a1);
}

uint64_t CP_SubscribeRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_TopicSubscribersRequest.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in CP_SubscribeRequest.decodeMessage<A>(decoder:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in CP_SubscribeRequest.decodeMessage<A>(decoder:));
}

uint64_t CP_TopicSubscribersRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = v5;
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v6 || (v14 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      a5(v9, a1, a2, a3);
    }
    else if (result == 1)
    {
      a4(v9, a1, a2, a3);
    }
  }
  return result;
}

uint64_t closure #1 in CP_SubscribeRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeRequest.Initialize?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  unint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  char v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  uint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
    uint64_t v29 = v13;
    uint64_t v30 = v46;
  }
  else
  {
    uint64_t v38 = v27;
    uint64_t v31 = (uint64_t)v44;
    outlined init with take of CP_SequenceNumber((uint64_t)v12, (uint64_t)v19, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
    outlined init with take of CP_SequenceNumber((uint64_t)v19, (uint64_t)v17, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of CP_SequenceNumber((uint64_t)v17, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
      uint64_t v30 = v46;
    }
    else
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_SubscribeRequest.Initialize?);
      outlined init with take of CP_SequenceNumber((uint64_t)v17, v31, type metadata accessor for CP_SubscribeRequest.Initialize);
      outlined init with take of CP_SequenceNumber(v31, (uint64_t)v24, type metadata accessor for CP_SubscribeRequest.Initialize);
      uint64_t v30 = v46;
      v38(v24, 0, 1, v46);
    }
  }
  uint64_t v32 = v45;
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeRequest.Initialize and conformance CP_SubscribeRequest.Initialize, (void (*)(uint64_t))type metadata accessor for CP_SubscribeRequest.Initialize);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_SubscribeRequest.Initialize?);
  }
  uint64_t v34 = v42;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, v42, &demangling cache variable for type metadata for CP_SubscribeRequest.Initialize?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_SubscribeRequest.Initialize?);
    return outlined destroy of UUID?(v34, &demangling cache variable for type metadata for CP_SubscribeRequest.Initialize?);
  }
  else
  {
    uint64_t v35 = v41;
    outlined init with take of CP_SequenceNumber(v34, v41, type metadata accessor for CP_SubscribeRequest.Initialize);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_SubscribeRequest.Initialize?);
    uint64_t v36 = v40;
    outlined destroy of UUID?(v40, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
    outlined init with take of CP_SequenceNumber(v35, v36, type metadata accessor for CP_SubscribeRequest.Initialize);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t closure #2 in CP_SubscribeRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for CP_SubscribeRequest.RecordAck(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeRequest.RecordAck?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  unint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  char v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  uint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
    uint64_t v29 = v13;
  }
  else
  {
    uint64_t v38 = v27;
    uint64_t v30 = (uint64_t)v44;
    outlined init with take of CP_SequenceNumber((uint64_t)v12, (uint64_t)v19, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
    outlined init with take of CP_SequenceNumber((uint64_t)v19, (uint64_t)v17, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_SubscribeRequest.RecordAck?);
      outlined init with take of CP_SequenceNumber((uint64_t)v17, v30, type metadata accessor for CP_SubscribeRequest.RecordAck);
      outlined init with take of CP_SequenceNumber(v30, (uint64_t)v24, type metadata accessor for CP_SubscribeRequest.RecordAck);
      uint64_t v31 = v46;
      v38(v24, 0, 1, v46);
      goto LABEL_7;
    }
    outlined destroy of CP_SequenceNumber((uint64_t)v17, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
  }
  uint64_t v31 = v46;
LABEL_7:
  uint64_t v32 = v45;
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeRequest.RecordAck and conformance CP_SubscribeRequest.RecordAck, (void (*)(uint64_t))type metadata accessor for CP_SubscribeRequest.RecordAck);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_SubscribeRequest.RecordAck?);
  }
  uint64_t v34 = v42;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, v42, &demangling cache variable for type metadata for CP_SubscribeRequest.RecordAck?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v31) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_SubscribeRequest.RecordAck?);
    return outlined destroy of UUID?(v34, &demangling cache variable for type metadata for CP_SubscribeRequest.RecordAck?);
  }
  else
  {
    uint64_t v35 = v41;
    outlined init with take of CP_SequenceNumber(v34, v41, type metadata accessor for CP_SubscribeRequest.RecordAck);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_SubscribeRequest.RecordAck?);
    uint64_t v36 = v40;
    outlined destroy of UUID?(v40, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
    outlined init with take of CP_SequenceNumber(v35, v36, type metadata accessor for CP_SubscribeRequest.RecordAck);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t CP_SubscribeRequest.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0, (uint64_t)v4, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  uint64_t v5 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5) == 1) {
    goto LABEL_6;
  }
  if (swift_getEnumCaseMultiPayload() == 1) {
    closure #2 in CP_SubscribeRequest.traverse<A>(visitor:)(v0);
  }
  else {
    closure #1 in CP_SubscribeRequest.traverse<A>(visitor:)(v0);
  }
  uint64_t result = outlined destroy of CP_SequenceNumber((uint64_t)v4, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
  if (!v1)
  {
LABEL_6:
    type metadata accessor for CP_SubscribeRequest(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CP_SubscribeRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  uint64_t v8 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with take of CP_SequenceNumber((uint64_t)v4, (uint64_t)v7, type metadata accessor for CP_SubscribeRequest.Initialize);
    lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeRequest.Initialize and conformance CP_SubscribeRequest.Initialize, (void (*)(uint64_t))type metadata accessor for CP_SubscribeRequest.Initialize);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of CP_SequenceNumber((uint64_t)v7, type metadata accessor for CP_SubscribeRequest.Initialize);
  }
  uint64_t result = outlined destroy of CP_SequenceNumber((uint64_t)v4, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
  __break(1u);
  return result;
}

uint64_t closure #2 in CP_SubscribeRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CP_SubscribeRequest.RecordAck(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  uint64_t v8 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of CP_SequenceNumber((uint64_t)v4, (uint64_t)v7, type metadata accessor for CP_SubscribeRequest.RecordAck);
    lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeRequest.RecordAck and conformance CP_SubscribeRequest.RecordAck, (void (*)(uint64_t))type metadata accessor for CP_SubscribeRequest.RecordAck);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of CP_SequenceNumber((uint64_t)v7, type metadata accessor for CP_SubscribeRequest.RecordAck);
  }
  uint64_t result = outlined destroy of CP_SequenceNumber((uint64_t)v4, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
  __break(1u);
  return result;
}

Swift::Int CP_SubscribeRequest.hashValue.getter()
{
  return CP_Record.hashValue.getter((void (*)(void))type metadata accessor for CP_SubscribeRequest, &lazy protocol witness table cache variable for type CP_SubscribeRequest and conformance CP_SubscribeRequest, (void (*)(uint64_t))type metadata accessor for CP_SubscribeRequest);
}

uint64_t protocol witness for Message.init() in conformance CP_SubscribeRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Message.init() in conformance CP_TopicSubscribersRequest(type metadata accessor for CP_SubscribeRequest.OneOf_Operation, a1);
}

uint64_t protocol witness for Message.init() in conformance CP_TopicSubscribersRequest@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(a2, 1, 1, v3);
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_SubscribeRequest()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_SubscribeRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_SubscribeRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_SubscribeRequest()
{
  return CP_SubscribeRequest.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_SubscribeRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeRequest and conformance CP_SubscribeRequest, (void (*)(uint64_t))type metadata accessor for CP_SubscribeRequest);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_SubscribeRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_SubscribeRequest()
{
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeRequest and conformance CP_SubscribeRequest, (void (*)(uint64_t))type metadata accessor for CP_SubscribeRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_SubscribeRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeRequest and conformance CP_SubscribeRequest, (void (*)(uint64_t))type metadata accessor for CP_SubscribeRequest);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t *CP_SubscribeRequest.Initialize.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static CP_SubscribeRequest.Initialize.protoMessageName;
}

uint64_t static CP_SubscribeRequest.Initialize.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static CP_SubscribeRequest.Initialize.protoMessageName);
}

uint64_t CP_SubscribeRequest.Initialize._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeRequest.Initialize._protobuf_nameMap);
}

uint64_t static CP_SubscribeRequest.Initialize._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeRequest.Initialize._protobuf_nameMap, a1);
}

uint64_t CP_SubscribeRequest.Initialize.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v11 = v4;
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          uint64_t v12 = v11;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_6;
        case 2:
          type metadata accessor for CP_SequenceNumber(0);
          lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, (void (*)(uint64_t))type metadata accessor for CP_SequenceNumber);
          goto LABEL_5;
        case 3:
          uint64_t v12 = v11;
          closure #5 in CP_Record.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(void))type metadata accessor for CP_SubscribeRequest.Initialize);
          goto LABEL_6;
        case 4:
          type metadata accessor for CP_EncryptionID(0);
          lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_EncryptionID and conformance CP_EncryptionID, (void (*)(uint64_t))type metadata accessor for CP_EncryptionID);
LABEL_5:
          uint64_t v12 = v11;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_6;
        case 5:
        case 6:
          uint64_t v12 = v11;
          dispatch thunk of Decoder.decodeSingularFixed64Field(value:)();
LABEL_6:
          uint64_t v11 = v12;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #5 in CP_Record.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t CP_SubscribeRequest.Initialize.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  unint64_t v9 = v5[1];
  uint64_t v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0) {
    uint64_t v10 = *v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v10 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    if (!*(void *)(v5[2] + 16)
      || (type metadata accessor for CP_SequenceNumber(0),
          lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, (void (*)(uint64_t))type metadata accessor for CP_SequenceNumber), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v4))
    {
      uint64_t result = closure #2 in CP_Record.traverse<A>(visitor:)((uint64_t)v5, a1, a2, a3, type metadata accessor for CP_SubscribeRequest.Initialize, 3);
      if (!v4)
      {
        if (*(void *)(v5[3] + 16))
        {
          type metadata accessor for CP_EncryptionID(0);
          lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_EncryptionID and conformance CP_EncryptionID, (void (*)(uint64_t))type metadata accessor for CP_EncryptionID);
          dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
        }
        if (v5[4]) {
          dispatch thunk of Visitor.visitSingularFixed64Field(value:fieldNumber:)();
        }
        if (v5[5]) {
          dispatch thunk of Visitor.visitSingularFixed64Field(value:fieldNumber:)();
        }
        type metadata accessor for CP_SubscribeRequest.Initialize(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t closure #2 in CP_Record.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6)
{
  v17[0] = a6;
  v17[1] = a3;
  uint64_t v17[3] = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = a5(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v15 + 40), (uint64_t)v10, &demangling cache variable for type metadata for CP_EncryptionID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1) {
    return outlined destroy of UUID?((uint64_t)v10, &demangling cache variable for type metadata for CP_EncryptionID?);
  }
  outlined init with take of CP_SequenceNumber((uint64_t)v10, (uint64_t)v14, type metadata accessor for CP_EncryptionID);
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_EncryptionID and conformance CP_EncryptionID, (void (*)(uint64_t))type metadata accessor for CP_EncryptionID);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CP_SequenceNumber((uint64_t)v14, type metadata accessor for CP_EncryptionID);
}

Swift::Int CP_SubscribeRequest.Initialize.hashValue.getter()
{
  return CP_Record.hashValue.getter((void (*)(void))type metadata accessor for CP_SubscribeRequest.Initialize, &lazy protocol witness table cache variable for type CP_SubscribeRequest.Initialize and conformance CP_SubscribeRequest.Initialize, (void (*)(uint64_t))type metadata accessor for CP_SubscribeRequest.Initialize);
}

uint64_t protocol witness for Message.init() in conformance CP_SubscribeRequest.Initialize@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  uint64_t v4 = MEMORY[0x1E4FBC860];
  a2[2] = MEMORY[0x1E4FBC860];
  a2[3] = v4;
  a2[4] = 0;
  a2[5] = 0;
  UnknownStorage.init()();
  uint64_t v5 = (char *)a2 + *(int *)(a1 + 40);
  uint64_t v6 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, 1, 1, v6);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_SubscribeRequest.Initialize(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static CP_SubscribeRequest.Initialize.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_SubscribeRequest.Initialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_SubscribeRequest.Initialize.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_SubscribeRequest.Initialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_SubscribeRequest.Initialize.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_SubscribeRequest.Initialize(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeRequest.Initialize and conformance CP_SubscribeRequest.Initialize, (void (*)(uint64_t))type metadata accessor for CP_SubscribeRequest.Initialize);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_SubscribeRequest.Initialize@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeRequest.Initialize._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_SubscribeRequest.Initialize()
{
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeRequest.Initialize and conformance CP_SubscribeRequest.Initialize, (void (*)(uint64_t))type metadata accessor for CP_SubscribeRequest.Initialize);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_SubscribeRequest.Initialize(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeRequest.Initialize and conformance CP_SubscribeRequest.Initialize, (void (*)(uint64_t))type metadata accessor for CP_SubscribeRequest.Initialize);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t *CP_SubscribeRequest.RecordAck.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static CP_SubscribeRequest.RecordAck.protoMessageName;
}

uint64_t static CP_SubscribeRequest.RecordAck.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static CP_SubscribeRequest.RecordAck.protoMessageName);
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v8 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  unint64_t v9 = (*(unsigned __int8 *)(*(void *)v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v8 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1B1138A80;
  unint64_t v11 = v10 + v9 + v8[14];
  *(void *)(v10 + v9) = 1;
  *(void *)unint64_t v11 = a3;
  *(void *)(v11 + 8) = a4;
  *(unsigned char *)(v11 + 16) = 2;
  uint64_t v12 = *MEMORY[0x1E4F70FB8];
  uint64_t v13 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104))(v11, v12, v13);
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t CP_SubscribeRequest.RecordAck._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeRequest.RecordAck._protobuf_nameMap);
}

uint64_t static CP_SubscribeRequest.RecordAck._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeRequest.RecordAck._protobuf_nameMap, a1);
}

uint64_t CP_SubscribeRequest.RecordAck.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 1)
      {
        type metadata accessor for CP_SequenceNumber(0);
        lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, (void (*)(uint64_t))type metadata accessor for CP_SequenceNumber);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CP_SubscribeRequest.RecordAck.traverse<A>(visitor:)()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for CP_SequenceNumber(0),
        lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, (void (*)(uint64_t))type metadata accessor for CP_SequenceNumber), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for CP_SubscribeRequest.RecordAck(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CP_SubscribeRequest.RecordAck.hashValue.getter()
{
  return CP_Record.hashValue.getter((void (*)(void))type metadata accessor for CP_SubscribeRequest.RecordAck, &lazy protocol witness table cache variable for type CP_SubscribeRequest.RecordAck and conformance CP_SubscribeRequest.RecordAck, (void (*)(uint64_t))type metadata accessor for CP_SubscribeRequest.RecordAck);
}

uint64_t protocol witness for Message.init() in conformance CP_SubscribeRequest.RecordAck@<X0>(void *a1@<X8>)
{
  *a1 = MEMORY[0x1E4FBC860];
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_SubscribeRequest.RecordAck(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static CP_SubscribeRequest.RecordAck.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_SubscribeRequest.RecordAck()
{
  return CP_SubscribeRequest.RecordAck.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_SubscribeRequest.RecordAck()
{
  return CP_SubscribeRequest.RecordAck.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_SubscribeRequest.RecordAck(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeRequest.RecordAck and conformance CP_SubscribeRequest.RecordAck, (void (*)(uint64_t))type metadata accessor for CP_SubscribeRequest.RecordAck);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_SubscribeRequest.RecordAck@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeRequest.RecordAck._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_SubscribeRequest.RecordAck()
{
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeRequest.RecordAck and conformance CP_SubscribeRequest.RecordAck, (void (*)(uint64_t))type metadata accessor for CP_SubscribeRequest.RecordAck);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_SubscribeRequest.RecordAck(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeRequest.RecordAck and conformance CP_SubscribeRequest.RecordAck, (void (*)(uint64_t))type metadata accessor for CP_SubscribeRequest.RecordAck);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

void *CP_SubscribeResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static CP_SubscribeResponse.protoMessageName;
}

unint64_t static CP_SubscribeResponse.protoMessageName.getter()
{
  return 0xD000000000000014;
}

uint64_t CP_SubscribeResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeResponse._protobuf_nameMap);
}

uint64_t static CP_SubscribeResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeResponse._protobuf_nameMap, a1);
}

uint64_t CP_SubscribeResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v10 & 1) != 0) {
      break;
    }
    switch(result)
    {
      case 3:
        closure #3 in CP_SubscribeResponse.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
      case 2:
        closure #2 in CP_SubscribeResponse.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
      case 1:
        closure #1 in CP_SubscribeResponse.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
    }
  }
  return result;
}

uint64_t closure #1 in CP_SubscribeResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  unint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  char v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  uint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
    uint64_t v29 = v13;
    uint64_t v30 = v46;
  }
  else
  {
    uint64_t v38 = v27;
    uint64_t v31 = (uint64_t)v44;
    outlined init with take of CP_SequenceNumber((uint64_t)v12, (uint64_t)v19, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
    outlined init with take of CP_SequenceNumber((uint64_t)v19, (uint64_t)v17, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload())
    {
      outlined destroy of CP_SequenceNumber((uint64_t)v17, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
      uint64_t v30 = v46;
    }
    else
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck?);
      outlined init with take of CP_SequenceNumber((uint64_t)v17, v31, type metadata accessor for CP_SubscribeResponse.InitializeAck);
      outlined init with take of CP_SequenceNumber(v31, (uint64_t)v24, type metadata accessor for CP_SubscribeResponse.InitializeAck);
      uint64_t v30 = v46;
      v38(v24, 0, 1, v46);
    }
  }
  uint64_t v32 = v45;
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck and conformance CP_SubscribeResponse.InitializeAck, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.InitializeAck);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck?);
  }
  uint64_t v34 = v42;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, v42, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck?);
    return outlined destroy of UUID?(v34, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck?);
  }
  else
  {
    uint64_t v35 = v41;
    outlined init with take of CP_SequenceNumber(v34, v41, type metadata accessor for CP_SubscribeResponse.InitializeAck);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck?);
    uint64_t v36 = v40;
    outlined destroy of UUID?(v40, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
    outlined init with take of CP_SequenceNumber(v35, v36, type metadata accessor for CP_SubscribeResponse.InitializeAck);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t closure #2 in CP_SubscribeResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for CP_Record(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_Record?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  unint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  char v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  uint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
    uint64_t v29 = v13;
  }
  else
  {
    uint64_t v38 = v27;
    uint64_t v30 = (uint64_t)v44;
    outlined init with take of CP_SequenceNumber((uint64_t)v12, (uint64_t)v19, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
    outlined init with take of CP_SequenceNumber((uint64_t)v19, (uint64_t)v17, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_Record?);
      outlined init with take of CP_SequenceNumber((uint64_t)v17, v30, type metadata accessor for CP_Record);
      outlined init with take of CP_SequenceNumber(v30, (uint64_t)v24, type metadata accessor for CP_Record);
      uint64_t v31 = v46;
      v38(v24, 0, 1, v46);
      goto LABEL_7;
    }
    outlined destroy of CP_SequenceNumber((uint64_t)v17, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
  }
  uint64_t v31 = v46;
LABEL_7:
  uint64_t v32 = v45;
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_Record and conformance CP_Record, (void (*)(uint64_t))type metadata accessor for CP_Record);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_Record?);
  }
  uint64_t v34 = v42;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, v42, &demangling cache variable for type metadata for CP_Record?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v31) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_Record?);
    return outlined destroy of UUID?(v34, &demangling cache variable for type metadata for CP_Record?);
  }
  else
  {
    uint64_t v35 = v41;
    outlined init with take of CP_SequenceNumber(v34, v41, type metadata accessor for CP_Record);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_Record?);
    uint64_t v36 = v40;
    outlined destroy of UUID?(v40, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
    outlined init with take of CP_SequenceNumber(v35, v36, type metadata accessor for CP_Record);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t closure #3 in CP_SubscribeResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for CP_SubscribeResponse.TopicUpdate(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.TopicUpdate?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  unint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  char v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  uint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
    uint64_t v29 = v13;
  }
  else
  {
    uint64_t v38 = v27;
    uint64_t v30 = (uint64_t)v44;
    outlined init with take of CP_SequenceNumber((uint64_t)v12, (uint64_t)v19, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
    outlined init with take of CP_SequenceNumber((uint64_t)v19, (uint64_t)v17, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_SubscribeResponse.TopicUpdate?);
      outlined init with take of CP_SequenceNumber((uint64_t)v17, v30, type metadata accessor for CP_SubscribeResponse.TopicUpdate);
      outlined init with take of CP_SequenceNumber(v30, (uint64_t)v24, type metadata accessor for CP_SubscribeResponse.TopicUpdate);
      uint64_t v31 = v46;
      v38(v24, 0, 1, v46);
      goto LABEL_7;
    }
    outlined destroy of CP_SequenceNumber((uint64_t)v17, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
  }
  uint64_t v31 = v46;
LABEL_7:
  uint64_t v32 = v45;
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate and conformance CP_SubscribeResponse.TopicUpdate, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.TopicUpdate);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_SubscribeResponse.TopicUpdate?);
  }
  uint64_t v34 = v42;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, v42, &demangling cache variable for type metadata for CP_SubscribeResponse.TopicUpdate?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v31) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_SubscribeResponse.TopicUpdate?);
    return outlined destroy of UUID?(v34, &demangling cache variable for type metadata for CP_SubscribeResponse.TopicUpdate?);
  }
  else
  {
    uint64_t v35 = v41;
    outlined init with take of CP_SequenceNumber(v34, v41, type metadata accessor for CP_SubscribeResponse.TopicUpdate);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_SubscribeResponse.TopicUpdate?);
    uint64_t v36 = v40;
    outlined destroy of UUID?(v40, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
    outlined init with take of CP_SequenceNumber(v35, v36, type metadata accessor for CP_SubscribeResponse.TopicUpdate);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t CP_SubscribeResponse.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0, (uint64_t)v4, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  uint64_t v5 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5) == 1) {
    goto LABEL_8;
  }
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1) {
      closure #2 in CP_SubscribeResponse.traverse<A>(visitor:)(v0);
    }
    else {
      closure #3 in CP_SubscribeResponse.traverse<A>(visitor:)(v0);
    }
  }
  else
  {
    closure #1 in CP_SubscribeResponse.traverse<A>(visitor:)(v0);
  }
  uint64_t result = outlined destroy of CP_SequenceNumber((uint64_t)v4, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
  if (!v1)
  {
LABEL_8:
    type metadata accessor for CP_SubscribeResponse(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CP_SubscribeResponse.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  uint64_t v8 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
    __break(1u);
  }
  else if (!swift_getEnumCaseMultiPayload())
  {
    outlined init with take of CP_SequenceNumber((uint64_t)v4, (uint64_t)v7, type metadata accessor for CP_SubscribeResponse.InitializeAck);
    lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck and conformance CP_SubscribeResponse.InitializeAck, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.InitializeAck);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of CP_SequenceNumber((uint64_t)v7, type metadata accessor for CP_SubscribeResponse.InitializeAck);
  }
  uint64_t result = outlined destroy of CP_SequenceNumber((uint64_t)v4, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
  __break(1u);
  return result;
}

uint64_t closure #2 in CP_SubscribeResponse.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CP_Record(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  uint64_t v8 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of CP_SequenceNumber((uint64_t)v4, (uint64_t)v7, type metadata accessor for CP_Record);
    lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_Record and conformance CP_Record, (void (*)(uint64_t))type metadata accessor for CP_Record);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of CP_SequenceNumber((uint64_t)v7, type metadata accessor for CP_Record);
  }
  uint64_t result = outlined destroy of CP_SequenceNumber((uint64_t)v4, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
  __break(1u);
  return result;
}

uint64_t closure #3 in CP_SubscribeResponse.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CP_SubscribeResponse.TopicUpdate(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  uint64_t v8 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 2)
  {
    outlined init with take of CP_SequenceNumber((uint64_t)v4, (uint64_t)v7, type metadata accessor for CP_SubscribeResponse.TopicUpdate);
    lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate and conformance CP_SubscribeResponse.TopicUpdate, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.TopicUpdate);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of CP_SequenceNumber((uint64_t)v7, type metadata accessor for CP_SubscribeResponse.TopicUpdate);
  }
  uint64_t result = outlined destroy of CP_SequenceNumber((uint64_t)v4, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
  __break(1u);
  return result;
}

Swift::Int CP_SubscribeResponse.hashValue.getter()
{
  return CP_Record.hashValue.getter((void (*)(void))type metadata accessor for CP_SubscribeResponse, &lazy protocol witness table cache variable for type CP_SubscribeResponse and conformance CP_SubscribeResponse, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse);
}

uint64_t protocol witness for Message.init() in conformance CP_SubscribeResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Message.init() in conformance CP_TopicSubscribersRequest(type metadata accessor for CP_SubscribeResponse.OneOf_Operation, a1);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_SubscribeResponse()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_SubscribeResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_SubscribeResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_SubscribeResponse()
{
  return CP_SubscribeResponse.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_SubscribeResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse and conformance CP_SubscribeResponse, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_SubscribeResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_SubscribeResponse()
{
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse and conformance CP_SubscribeResponse, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_SubscribeResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse and conformance CP_SubscribeResponse, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t *CP_SubscribeResponse.InitializeAck.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static CP_SubscribeResponse.InitializeAck.protoMessageName;
}

uint64_t static CP_SubscribeResponse.InitializeAck.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static CP_SubscribeResponse.InitializeAck.protoMessageName);
}

uint64_t CP_SubscribeResponse.InitializeAck._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeResponse.InitializeAck._protobuf_nameMap);
}

uint64_t static CP_SubscribeResponse.InitializeAck._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeResponse.InitializeAck._protobuf_nameMap, a1);
}

uint64_t CP_SubscribeResponse.InitializeAck.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type CP_ResponseStatus and conformance CP_ResponseStatus();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_13;
        case 2:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_13;
        case 3:
        case 8:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedFixed64Field(value:)();
          goto LABEL_13;
        case 4:
          type metadata accessor for CP_KeyValue(0);
          lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_KeyValue and conformance CP_KeyValue, (void (*)(uint64_t))type metadata accessor for CP_KeyValue);
          goto LABEL_10;
        case 5:
          uint64_t v4 = v3;
          closure #5 in CP_SubscribeResponse.InitializeAck.decodeMessage<A>(decoder:)();
          goto LABEL_13;
        case 6:
          type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
          lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance CP_SubscribeResponse.InitializeAck.MissingEncryptionID, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
LABEL_10:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_13;
        case 7:
          uint64_t v4 = v3;
          closure #7 in CP_SubscribeResponse.InitializeAck.decodeMessage<A>(decoder:)();
LABEL_13:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #5 in CP_SubscribeResponse.InitializeAck.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #7 in CP_SubscribeResponse.InitializeAck.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t CP_SubscribeResponse.InitializeAck.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  if (!*v5
    || (lazy protocol witness table accessor for type CP_ResponseStatus and conformance CP_ResponseStatus(),
        uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v4))
  {
    unint64_t v10 = v5[3];
    uint64_t v11 = HIBYTE(v10) & 0xF;
    if ((v10 & 0x2000000000000000) == 0) {
      uint64_t v11 = v5[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v11 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
    {
      if (!*(void *)(v5[4] + 16)
        || (uint64_t result = dispatch thunk of Visitor.visitPackedFixed64Field(value:fieldNumber:)(), !v4))
      {
        if (!*(void *)(v5[5] + 16)
          || (type metadata accessor for CP_KeyValue(0),
              lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_KeyValue and conformance CP_KeyValue, (void (*)(uint64_t))type metadata accessor for CP_KeyValue), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v4))
        {
          uint64_t result = closure #1 in CP_SubscribeResponse.InitializeAck.traverse<A>(visitor:)((uint64_t)v5, a1, a2, a3);
          if (!v4)
          {
            if (*(void *)(v5[6] + 16))
            {
              type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
              lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance CP_SubscribeResponse.InitializeAck.MissingEncryptionID, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
              dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
            }
            closure #2 in CP_SubscribeResponse.InitializeAck.traverse<A>(visitor:)((uint64_t)v5, a1, a2, a3);
            if (*(void *)(v5[7] + 16)) {
              dispatch thunk of Visitor.visitPackedFixed64Field(value:fieldNumber:)();
            }
            type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
    }
  }
  return result;
}

uint64_t closure #1 in CP_SubscribeResponse.InitializeAck.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v12 + 44), (uint64_t)v7, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  }
  outlined init with take of CP_SequenceNumber((uint64_t)v7, (uint64_t)v11, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.TopicCatchupSummary and conformance CP_SubscribeResponse.InitializeAck.TopicCatchupSummary, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CP_SequenceNumber((uint64_t)v11, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
}

uint64_t closure #2 in CP_SubscribeResponse.InitializeAck.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v12 + 48), (uint64_t)v7, &demangling cache variable for type metadata for CP_SequenceNumber?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for CP_SequenceNumber?);
  }
  outlined init with take of CP_SequenceNumber((uint64_t)v7, (uint64_t)v11, type metadata accessor for CP_SequenceNumber);
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, (void (*)(uint64_t))type metadata accessor for CP_SequenceNumber);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CP_SequenceNumber((uint64_t)v11, type metadata accessor for CP_SequenceNumber);
}

Swift::Int CP_SubscribeResponse.InitializeAck.hashValue.getter()
{
  return CP_Record.hashValue.getter((void (*)(void))type metadata accessor for CP_SubscribeResponse.InitializeAck, &lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck and conformance CP_SubscribeResponse.InitializeAck, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.InitializeAck);
}

uint64_t protocol witness for Message.init() in conformance CP_SubscribeResponse.InitializeAck@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0xE000000000000000;
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *(void *)(a2 + 32) = MEMORY[0x1E4FBC860];
  *(void *)(a2 + 40) = v4;
  *(void *)(a2 + 48) = v4;
  *(void *)(a2 + 56) = v4;
  UnknownStorage.init()();
  uint64_t v5 = a2 + *(int *)(a1 + 44);
  uint64_t v6 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = a2 + *(int *)(a1 + 48);
  uint64_t v8 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
  return v9(v7, 1, 1, v8);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static CP_SubscribeResponse.InitializeAck.protoMessageName);
}

uint64_t protocol witness for Message.unknownFields.getter in conformance CP_SubscribeResponse.InitializeAck@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance CP_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance CP_SubscribeResponse.InitializeAck())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_SubscribeResponse.InitializeAck()
{
  return CP_SubscribeResponse.InitializeAck.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_SubscribeResponse.InitializeAck.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck and conformance CP_SubscribeResponse.InitializeAck, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.InitializeAck);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_SubscribeResponse.InitializeAck@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeResponse.InitializeAck._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_SubscribeResponse.InitializeAck()
{
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck and conformance CP_SubscribeResponse.InitializeAck, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.InitializeAck);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck and conformance CP_SubscribeResponse.InitializeAck, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.InitializeAck);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

void one-time initialization function for protoMessageName(uint64_t a1)
{
}

{
  one-time initialization function for protoMessageName(a1, (void *)0x80000001B115EC80, &static CP_SubscribeResponse.InitializeAck.MissingEncryptionID.protoMessageName, &qword_1E9B74D58);
}

uint64_t *CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.protoMessageName;
}

uint64_t static CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.protoMessageName);
}

uint64_t CP_SubscribeResponse.InitializeAck.TopicCatchupSummary._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeResponse.InitializeAck.TopicCatchupSummary._protobuf_nameMap);
}

uint64_t static CP_SubscribeResponse.InitializeAck.TopicCatchupSummary._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeResponse.InitializeAck.TopicCatchupSummary._protobuf_nameMap, a1);
}

uint64_t CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CP_SequenceNumber(0);
        lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, (void (*)(uint64_t))type metadata accessor for CP_SequenceNumber);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularFixed64Field(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.traverse<A>(visitor:)()
{
  if (!*v0 || (uint64_t result = dispatch thunk of Visitor.visitSingularFixed64Field(value:fieldNumber:)(), !v1))
  {
    if (!*(void *)(v0[1] + 16)
      || (type metadata accessor for CP_SequenceNumber(0),
          lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, (void (*)(uint64_t))type metadata accessor for CP_SequenceNumber), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.hashValue.getter()
{
  return CP_Record.hashValue.getter((void (*)(void))type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary, &lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.TopicCatchupSummary and conformance CP_SubscribeResponse.InitializeAck.TopicCatchupSummary, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
}

uint64_t protocol witness for Message.init() in conformance CP_SubscribeResponse.InitializeAck.TopicCatchupSummary@<X0>(void *a1@<X8>)
{
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *a1 = 0;
  a1[1] = v1;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_SubscribeResponse.InitializeAck.TopicCatchupSummary()
{
  return CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_SubscribeResponse.InitializeAck.TopicCatchupSummary()
{
  return CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.TopicCatchupSummary and conformance CP_SubscribeResponse.InitializeAck.TopicCatchupSummary, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_SubscribeResponse.InitializeAck.TopicCatchupSummary@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeResponse.InitializeAck.TopicCatchupSummary._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_SubscribeResponse.InitializeAck.TopicCatchupSummary()
{
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.TopicCatchupSummary and conformance CP_SubscribeResponse.InitializeAck.TopicCatchupSummary, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.TopicCatchupSummary and conformance CP_SubscribeResponse.InitializeAck.TopicCatchupSummary, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

void one-time initialization function for protoMessageName(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  uint64_t v8 = static CP_SubscribeResponse.InitializeAck.protoMessageName;
  uint64_t v9 = *(void *)algn_1E9B74D08;
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = 0xD000000000000014;
  v7._id object = a2;
  String.append(_:)(v7);
  *a3 = v8;
  *a4 = v9;
}

uint64_t *CP_SubscribeResponse.InitializeAck.MissingEncryptionID.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static CP_SubscribeResponse.InitializeAck.MissingEncryptionID.protoMessageName;
}

uint64_t static CP_SubscribeResponse.InitializeAck.MissingEncryptionID.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static CP_SubscribeResponse.InitializeAck.MissingEncryptionID.protoMessageName);
}

uint64_t CP_SubscribeResponse.InitializeAck.MissingEncryptionID._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeResponse.InitializeAck.MissingEncryptionID._protobuf_nameMap);
}

uint64_t static CP_SubscribeResponse.InitializeAck.MissingEncryptionID._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeResponse.InitializeAck.MissingEncryptionID._protobuf_nameMap, a1);
}

uint64_t CP_SubscribeResponse.InitializeAck.MissingEncryptionID.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v10 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      closure #2 in CP_SubscribeResponse.InitializeAck.MissingEncryptionID.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(void))type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
    }
    else if (result == 1)
    {
      dispatch thunk of Decoder.decodeSingularFixed64Field(value:)();
    }
  }
  return result;
}

uint64_t CP_SubscribeResponse.InitializeAck.MissingEncryptionID.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularFixed64Field(value:fieldNumber:)(), !v4))
  {
    uint64_t result = closure #1 in CP_SubscribeResponse.InitializeAck.MissingEncryptionID.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3, type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
    if (!v4)
    {
      type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int CP_SubscribeResponse.InitializeAck.MissingEncryptionID.hashValue.getter()
{
  return CP_Record.hashValue.getter((void (*)(void))type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID, &lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance CP_SubscribeResponse.InitializeAck.MissingEncryptionID, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
}

uint64_t protocol witness for Message.init() in conformance CP_SubscribeResponse.InitializeAck.MissingEncryptionID@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 1, 1, v5);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static CP_SubscribeResponse.InitializeAck.MissingEncryptionID.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_SubscribeResponse.InitializeAck.MissingEncryptionID.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_SubscribeResponse.InitializeAck.MissingEncryptionID.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance CP_SubscribeResponse.InitializeAck.MissingEncryptionID, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_SubscribeResponse.InitializeAck.MissingEncryptionID@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeResponse.InitializeAck.MissingEncryptionID._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_SubscribeResponse.InitializeAck.MissingEncryptionID()
{
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance CP_SubscribeResponse.InitializeAck.MissingEncryptionID, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance CP_SubscribeResponse.InitializeAck.MissingEncryptionID, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t *CP_SubscribeResponse.TopicUpdate.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static CP_SubscribeResponse.TopicUpdate.protoMessageName;
}

uint64_t static CP_SubscribeResponse.TopicUpdate.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static CP_SubscribeResponse.TopicUpdate.protoMessageName);
}

uint64_t CP_SubscribeResponse.TopicUpdate._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeResponse.TopicUpdate._protobuf_nameMap);
}

uint64_t static CP_SubscribeResponse.TopicUpdate._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeResponse.TopicUpdate._protobuf_nameMap, a1);
}

uint64_t CP_SubscribeResponse.TopicUpdate.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type CP_SubscribeResponse.TopicUpdate.UpdateEvent and conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for CP_KeyValue(0);
          lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_KeyValue and conformance CP_KeyValue, (void (*)(uint64_t))type metadata accessor for CP_KeyValue);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularFixed64Field(value:)();
          goto LABEL_5;
        case 4:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CP_SubscribeResponse.TopicUpdate.traverse<A>(visitor:)()
{
  if (!*(void *)v0
    || (lazy protocol witness table accessor for type CP_SubscribeResponse.TopicUpdate.UpdateEvent and conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent(),
        uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    if (!*(void *)(*(void *)(v0 + 16) + 16)
      || (type metadata accessor for CP_KeyValue(0),
          lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_KeyValue and conformance CP_KeyValue, (void (*)(uint64_t))type metadata accessor for CP_KeyValue), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      if (!*(void *)(v0 + 24)
        || (uint64_t result = dispatch thunk of Visitor.visitSingularFixed64Field(value:fieldNumber:)(), !v1))
      {
        if (*(unsigned char *)(v0 + 32) != 1
          || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
        {
          type metadata accessor for CP_SubscribeResponse.TopicUpdate(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

Swift::Int CP_SubscribeResponse.TopicUpdate.hashValue.getter()
{
  return CP_Record.hashValue.getter((void (*)(void))type metadata accessor for CP_SubscribeResponse.TopicUpdate, &lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate and conformance CP_SubscribeResponse.TopicUpdate, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.TopicUpdate);
}

uint64_t protocol witness for Message.init() in conformance CP_SubscribeResponse.TopicUpdate@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = v1;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static CP_SubscribeResponse.TopicUpdate.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_SubscribeResponse.TopicUpdate()
{
  return CP_SubscribeResponse.TopicUpdate.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_SubscribeResponse.TopicUpdate()
{
  return CP_SubscribeResponse.TopicUpdate.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate and conformance CP_SubscribeResponse.TopicUpdate, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.TopicUpdate);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_SubscribeResponse.TopicUpdate@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeResponse.TopicUpdate._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_SubscribeResponse.TopicUpdate()
{
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate and conformance CP_SubscribeResponse.TopicUpdate, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.TopicUpdate);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate and conformance CP_SubscribeResponse.TopicUpdate, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.TopicUpdate);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t CP_SubscribeResponse.TopicUpdate.UpdateEvent._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeResponse.TopicUpdate.UpdateEvent._protobuf_nameMap);
}

uint64_t static CP_SubscribeResponse.TopicUpdate.UpdateEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeResponse.TopicUpdate.UpdateEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_SubscribeResponse.TopicUpdate.UpdateEvent._protobuf_nameMap, a1);
}

void *CP_PublishRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static CP_PublishRequest.protoMessageName;
}

unint64_t static CP_PublishRequest.protoMessageName.getter()
{
  return 0xD000000000000011;
}

uint64_t CP_PublishRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_PublishRequest._protobuf_nameMap);
}

uint64_t static CP_PublishRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_PublishRequest._protobuf_nameMap, a1);
}

uint64_t CP_PublishRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_TopicSubscribersRequest.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in CP_PublishRequest.decodeMessage<A>(decoder:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in CP_PublishRequest.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in CP_PublishRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for CP_Record(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_Record?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  unint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  char v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  uint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
    uint64_t v29 = v13;
    uint64_t v30 = v46;
  }
  else
  {
    uint64_t v38 = v27;
    uint64_t v31 = (uint64_t)v44;
    outlined init with take of CP_SequenceNumber((uint64_t)v12, (uint64_t)v19, type metadata accessor for CP_PublishRequest.OneOf_Operation);
    outlined init with take of CP_SequenceNumber((uint64_t)v19, (uint64_t)v17, type metadata accessor for CP_PublishRequest.OneOf_Operation);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of CP_SequenceNumber((uint64_t)v17, type metadata accessor for CP_PublishRequest.OneOf_Operation);
      uint64_t v30 = v46;
    }
    else
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_Record?);
      outlined init with take of CP_SequenceNumber((uint64_t)v17, v31, type metadata accessor for CP_Record);
      outlined init with take of CP_SequenceNumber(v31, (uint64_t)v24, type metadata accessor for CP_Record);
      uint64_t v30 = v46;
      v38(v24, 0, 1, v46);
    }
  }
  uint64_t v32 = v45;
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_Record and conformance CP_Record, (void (*)(uint64_t))type metadata accessor for CP_Record);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_Record?);
  }
  uint64_t v34 = v42;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, v42, &demangling cache variable for type metadata for CP_Record?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_Record?);
    return outlined destroy of UUID?(v34, &demangling cache variable for type metadata for CP_Record?);
  }
  else
  {
    uint64_t v35 = v41;
    outlined init with take of CP_SequenceNumber(v34, v41, type metadata accessor for CP_Record);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_Record?);
    uint64_t v36 = v40;
    outlined destroy of UUID?(v40, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
    outlined init with take of CP_SequenceNumber(v35, v36, type metadata accessor for CP_Record);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t closure #2 in CP_PublishRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_PublishRequest.UpdatedEncryptionID?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  unint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  char v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  uint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
    uint64_t v29 = v13;
  }
  else
  {
    uint64_t v38 = v27;
    uint64_t v30 = (uint64_t)v44;
    outlined init with take of CP_SequenceNumber((uint64_t)v12, (uint64_t)v19, type metadata accessor for CP_PublishRequest.OneOf_Operation);
    outlined init with take of CP_SequenceNumber((uint64_t)v19, (uint64_t)v17, type metadata accessor for CP_PublishRequest.OneOf_Operation);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_PublishRequest.UpdatedEncryptionID?);
      outlined init with take of CP_SequenceNumber((uint64_t)v17, v30, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
      outlined init with take of CP_SequenceNumber(v30, (uint64_t)v24, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
      uint64_t v31 = v46;
      v38(v24, 0, 1, v46);
      goto LABEL_7;
    }
    outlined destroy of CP_SequenceNumber((uint64_t)v17, type metadata accessor for CP_PublishRequest.OneOf_Operation);
  }
  uint64_t v31 = v46;
LABEL_7:
  uint64_t v32 = v45;
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_PublishRequest.UpdatedEncryptionID and conformance CP_PublishRequest.UpdatedEncryptionID, (void (*)(uint64_t))type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_PublishRequest.UpdatedEncryptionID?);
  }
  uint64_t v34 = v42;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, v42, &demangling cache variable for type metadata for CP_PublishRequest.UpdatedEncryptionID?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v31) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_PublishRequest.UpdatedEncryptionID?);
    return outlined destroy of UUID?(v34, &demangling cache variable for type metadata for CP_PublishRequest.UpdatedEncryptionID?);
  }
  else
  {
    uint64_t v35 = v41;
    outlined init with take of CP_SequenceNumber(v34, v41, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for CP_PublishRequest.UpdatedEncryptionID?);
    uint64_t v36 = v40;
    outlined destroy of UUID?(v40, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
    outlined init with take of CP_SequenceNumber(v35, v36, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t CP_PublishRequest.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0, (uint64_t)v4, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  uint64_t v5 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5) == 1) {
    goto LABEL_6;
  }
  if (swift_getEnumCaseMultiPayload() == 1) {
    closure #2 in CP_PublishRequest.traverse<A>(visitor:)(v0);
  }
  else {
    closure #1 in CP_PublishRequest.traverse<A>(visitor:)(v0);
  }
  uint64_t result = outlined destroy of CP_SequenceNumber((uint64_t)v4, type metadata accessor for CP_PublishRequest.OneOf_Operation);
  if (!v1)
  {
LABEL_6:
    type metadata accessor for CP_PublishRequest(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CP_PublishRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CP_Record(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  uint64_t v8 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with take of CP_SequenceNumber((uint64_t)v4, (uint64_t)v7, type metadata accessor for CP_Record);
    lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_Record and conformance CP_Record, (void (*)(uint64_t))type metadata accessor for CP_Record);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of CP_SequenceNumber((uint64_t)v7, type metadata accessor for CP_Record);
  }
  uint64_t result = outlined destroy of CP_SequenceNumber((uint64_t)v4, type metadata accessor for CP_PublishRequest.OneOf_Operation);
  __break(1u);
  return result;
}

uint64_t closure #2 in CP_PublishRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  uint64_t v8 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of CP_SequenceNumber((uint64_t)v4, (uint64_t)v7, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
    lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_PublishRequest.UpdatedEncryptionID and conformance CP_PublishRequest.UpdatedEncryptionID, (void (*)(uint64_t))type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of CP_SequenceNumber((uint64_t)v7, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
  }
  uint64_t result = outlined destroy of CP_SequenceNumber((uint64_t)v4, type metadata accessor for CP_PublishRequest.OneOf_Operation);
  __break(1u);
  return result;
}

Swift::Int CP_PublishRequest.hashValue.getter()
{
  return CP_Record.hashValue.getter((void (*)(void))type metadata accessor for CP_PublishRequest, &lazy protocol witness table cache variable for type CP_PublishRequest and conformance CP_PublishRequest, (void (*)(uint64_t))type metadata accessor for CP_PublishRequest);
}

uint64_t protocol witness for Message.init() in conformance CP_PublishRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Message.init() in conformance CP_TopicSubscribersRequest(type metadata accessor for CP_PublishRequest.OneOf_Operation, a1);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_PublishRequest()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_PublishRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_PublishRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_PublishRequest()
{
  return CP_PublishRequest.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_PublishRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_PublishRequest and conformance CP_PublishRequest, (void (*)(uint64_t))type metadata accessor for CP_PublishRequest);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_PublishRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_PublishRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_PublishRequest()
{
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_PublishRequest and conformance CP_PublishRequest, (void (*)(uint64_t))type metadata accessor for CP_PublishRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_PublishRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_PublishRequest and conformance CP_PublishRequest, (void (*)(uint64_t))type metadata accessor for CP_PublishRequest);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t *CP_PublishRequest.UpdatedEncryptionID.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static CP_PublishRequest.UpdatedEncryptionID.protoMessageName;
}

uint64_t static CP_PublishRequest.UpdatedEncryptionID.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static CP_PublishRequest.UpdatedEncryptionID.protoMessageName);
}

uint64_t CP_PublishRequest.UpdatedEncryptionID._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_PublishRequest.UpdatedEncryptionID._protobuf_nameMap);
}

uint64_t static CP_PublishRequest.UpdatedEncryptionID._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_PublishRequest.UpdatedEncryptionID._protobuf_nameMap, a1);
}

uint64_t CP_PublishRequest.UpdatedEncryptionID.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v10 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      closure #2 in CP_SubscribeResponse.InitializeAck.MissingEncryptionID.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(void))type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
    }
    else if (result == 1)
    {
      dispatch thunk of Decoder.decodeSingularStringField(value:)();
    }
  }
  return result;
}

uint64_t closure #2 in CP_SubscribeResponse.InitializeAck.MissingEncryptionID.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t CP_PublishRequest.UpdatedEncryptionID.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v8 = v3[1];
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0) {
    uint64_t v9 = *v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    uint64_t result = closure #1 in CP_SubscribeResponse.InitializeAck.MissingEncryptionID.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
    if (!v4)
    {
      type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in CP_SubscribeResponse.InitializeAck.MissingEncryptionID.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  v16[3] = a4;
  v16[1] = a3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a5(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v14 + 24), (uint64_t)v9, &demangling cache variable for type metadata for CP_EncryptionID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1) {
    return outlined destroy of UUID?((uint64_t)v9, &demangling cache variable for type metadata for CP_EncryptionID?);
  }
  outlined init with take of CP_SequenceNumber((uint64_t)v9, (uint64_t)v13, type metadata accessor for CP_EncryptionID);
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_EncryptionID and conformance CP_EncryptionID, (void (*)(uint64_t))type metadata accessor for CP_EncryptionID);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CP_SequenceNumber((uint64_t)v13, type metadata accessor for CP_EncryptionID);
}

Swift::Int CP_PublishRequest.UpdatedEncryptionID.hashValue.getter()
{
  return CP_Record.hashValue.getter((void (*)(void))type metadata accessor for CP_PublishRequest.UpdatedEncryptionID, &lazy protocol witness table cache variable for type CP_PublishRequest.UpdatedEncryptionID and conformance CP_PublishRequest.UpdatedEncryptionID, (void (*)(uint64_t))type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
}

uint64_t protocol witness for Message.init() in conformance CP_PublishRequest.UpdatedEncryptionID@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 1, 1, v5);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_PublishRequest.UpdatedEncryptionID(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static CP_PublishRequest.UpdatedEncryptionID.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_PublishRequest.UpdatedEncryptionID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_PublishRequest.UpdatedEncryptionID.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_PublishRequest.UpdatedEncryptionID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_PublishRequest.UpdatedEncryptionID.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_PublishRequest.UpdatedEncryptionID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_PublishRequest.UpdatedEncryptionID and conformance CP_PublishRequest.UpdatedEncryptionID, (void (*)(uint64_t))type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_PublishRequest.UpdatedEncryptionID@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_PublishRequest.UpdatedEncryptionID._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_PublishRequest.UpdatedEncryptionID()
{
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_PublishRequest.UpdatedEncryptionID and conformance CP_PublishRequest.UpdatedEncryptionID, (void (*)(uint64_t))type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_PublishRequest.UpdatedEncryptionID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_PublishRequest.UpdatedEncryptionID and conformance CP_PublishRequest.UpdatedEncryptionID, (void (*)(uint64_t))type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

void *CP_PublishResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static CP_PublishResponse.protoMessageName;
}

unint64_t static CP_PublishResponse.protoMessageName.getter()
{
  return 0xD000000000000012;
}

uint64_t CP_PublishResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_PublishResponse._protobuf_nameMap);
}

uint64_t static CP_PublishResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_PublishResponse._protobuf_nameMap, a1);
}

uint64_t CP_PublishResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_PublishResponse.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #3 in CP_PublishResponse.decodeMessage<A>(decoder:));
}

uint64_t closure #3 in CP_PublishResponse.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t CP_PublishResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_PublishResponse.traverse<A>(visitor:)(a1, a2, a3, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))closure #1 in CP_PublishResponse.traverse<A>(visitor:), (void (*)(void))type metadata accessor for CP_PublishResponse);
}

uint64_t closure #1 in CP_PublishResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CP_PublishResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for CP_SequenceNumber?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for CP_SequenceNumber?);
  }
  outlined init with take of CP_SequenceNumber((uint64_t)v7, (uint64_t)v11, type metadata accessor for CP_SequenceNumber);
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, (void (*)(uint64_t))type metadata accessor for CP_SequenceNumber);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CP_SequenceNumber((uint64_t)v11, type metadata accessor for CP_SequenceNumber);
}

Swift::Int CP_PublishResponse.hashValue.getter()
{
  return CP_Record.hashValue.getter((void (*)(void))type metadata accessor for CP_PublishResponse, &lazy protocol witness table cache variable for type CP_PublishResponse and conformance CP_PublishResponse, (void (*)(uint64_t))type metadata accessor for CP_PublishResponse);
}

uint64_t protocol witness for Message.init() in conformance CP_PublishResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CP_PublishResponse(a1, type metadata accessor for CP_SequenceNumber, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_PublishResponse()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_PublishResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_PublishResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_PublishResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_PublishResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_PublishResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_PublishResponse and conformance CP_PublishResponse, (void (*)(uint64_t))type metadata accessor for CP_PublishResponse);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_PublishResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_PublishResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_PublishResponse()
{
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_PublishResponse and conformance CP_PublishResponse, (void (*)(uint64_t))type metadata accessor for CP_PublishResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_PublishResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_PublishResponse and conformance CP_PublishResponse, (void (*)(uint64_t))type metadata accessor for CP_PublishResponse);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

void *CP_UpsertTopicMetadataRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static CP_UpsertTopicMetadataRequest.protoMessageName;
}

unint64_t static CP_UpsertTopicMetadataRequest.protoMessageName.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t CP_UpsertTopicMetadataRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_UpsertTopicMetadataRequest._protobuf_nameMap);
}

uint64_t static CP_UpsertTopicMetadataRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_UpsertTopicMetadataRequest._protobuf_nameMap, a1);
}

uint64_t CP_UpsertTopicMetadataRequest.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CP_KeyValue(0);
        lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_KeyValue and conformance CP_KeyValue, (void (*)(uint64_t))type metadata accessor for CP_KeyValue);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CP_UpsertTopicMetadataRequest.traverse<A>(visitor:)()
{
  unint64_t v2 = v0[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (!*(void *)(v0[2] + 16)
      || (type metadata accessor for CP_KeyValue(0),
          lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_KeyValue and conformance CP_KeyValue, (void (*)(uint64_t))type metadata accessor for CP_KeyValue), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for CP_UpsertTopicMetadataRequest(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t static CP_UpsertTopicMetadataRequest.== infix(_:_:)(char *a1, char *a2)
{
  return specialized static CP_UpsertTopicMetadataRequest.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for CP_UpsertTopicMetadataRequest) & 1;
}

Swift::Int CP_UpsertTopicMetadataRequest.hashValue.getter()
{
  return CP_Record.hashValue.getter((void (*)(void))type metadata accessor for CP_UpsertTopicMetadataRequest, &lazy protocol witness table cache variable for type CP_UpsertTopicMetadataRequest and conformance CP_UpsertTopicMetadataRequest, (void (*)(uint64_t))type metadata accessor for CP_UpsertTopicMetadataRequest);
}

uint64_t protocol witness for Message.init() in conformance CP_TopicSubscribers.TopicSubscribersInfo@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = MEMORY[0x1E4FBC860];
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_UpsertTopicMetadataRequest()
{
  return 0xD00000000000001DLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_UpsertTopicMetadataRequest()
{
  return CP_UpsertTopicMetadataRequest.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_UpsertTopicMetadataRequest()
{
  return CP_UpsertTopicMetadataRequest.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_UpsertTopicMetadataRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_UpsertTopicMetadataRequest and conformance CP_UpsertTopicMetadataRequest, (void (*)(uint64_t))type metadata accessor for CP_UpsertTopicMetadataRequest);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_UpsertTopicMetadataRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_UpsertTopicMetadataRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_UpsertTopicMetadataRequest()
{
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_UpsertTopicMetadataRequest and conformance CP_UpsertTopicMetadataRequest, (void (*)(uint64_t))type metadata accessor for CP_UpsertTopicMetadataRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_UpsertTopicMetadataRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_UpsertTopicMetadataRequest and conformance CP_UpsertTopicMetadataRequest, (void (*)(uint64_t))type metadata accessor for CP_UpsertTopicMetadataRequest);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CP_UpsertTopicMetadataRequest(char *a1, char *a2)
{
  return specialized static CP_UpsertTopicMetadataRequest.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for CP_UpsertTopicMetadataRequest) & 1;
}

void *CP_UpsertTopicMetadataResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static CP_UpsertTopicMetadataResponse.protoMessageName;
}

unint64_t static CP_UpsertTopicMetadataResponse.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t CP_UpsertTopicMetadataResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_UpsertTopicMetadataResponse._protobuf_nameMap);
}

uint64_t static CP_UpsertTopicMetadataResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_UpsertTopicMetadataResponse._protobuf_nameMap, a1);
}

uint64_t CP_UpsertTopicMetadataResponse.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      else if (result == 1)
      {
        lazy protocol witness table accessor for type CP_ResponseStatus and conformance CP_ResponseStatus();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CP_UpsertTopicMetadataResponse.traverse<A>(visitor:)()
{
  if (!*v0
    || (lazy protocol witness table accessor for type CP_ResponseStatus and conformance CP_ResponseStatus(),
        uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    unint64_t v3 = v0[3];
    uint64_t v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0) {
      uint64_t v4 = v0[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v4 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for CP_UpsertTopicMetadataResponse(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int CP_UpsertTopicMetadataResponse.hashValue.getter()
{
  return CP_Record.hashValue.getter((void (*)(void))type metadata accessor for CP_UpsertTopicMetadataResponse, &lazy protocol witness table cache variable for type CP_UpsertTopicMetadataResponse and conformance CP_UpsertTopicMetadataResponse, (void (*)(uint64_t))type metadata accessor for CP_UpsertTopicMetadataResponse);
}

uint64_t protocol witness for Message.init() in conformance CP_UpsertTopicMetadataResponse@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_UpsertTopicMetadataResponse()
{
  return 0xD00000000000001ELL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_UpsertTopicMetadataResponse()
{
  return CP_UpsertTopicMetadataResponse.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_UpsertTopicMetadataResponse()
{
  return CP_UpsertTopicMetadataResponse.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_UpsertTopicMetadataResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_UpsertTopicMetadataResponse and conformance CP_UpsertTopicMetadataResponse, (void (*)(uint64_t))type metadata accessor for CP_UpsertTopicMetadataResponse);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_UpsertTopicMetadataResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_UpsertTopicMetadataResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_UpsertTopicMetadataResponse()
{
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_UpsertTopicMetadataResponse and conformance CP_UpsertTopicMetadataResponse, (void (*)(uint64_t))type metadata accessor for CP_UpsertTopicMetadataResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_UpsertTopicMetadataResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_UpsertTopicMetadataResponse and conformance CP_UpsertTopicMetadataResponse, (void (*)(uint64_t))type metadata accessor for CP_UpsertTopicMetadataResponse);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

void *CP_CreateTopicRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static CP_CreateTopicRequest.protoMessageName;
}

unint64_t static CP_CreateTopicRequest.protoMessageName.getter()
{
  return 0xD000000000000015;
}

uint64_t CP_CreateTopicRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_CreateTopicRequest._protobuf_nameMap);
}

uint64_t static CP_CreateTopicRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_CreateTopicRequest._protobuf_nameMap, a1);
}

uint64_t CP_CreateTopicRequest.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 3:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for CP_KeyValue(0);
          lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_KeyValue and conformance CP_KeyValue, (void (*)(uint64_t))type metadata accessor for CP_KeyValue);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 4:
          lazy protocol witness table accessor for type CP_CreateTopicRequest.TopicCategory and conformance CP_CreateTopicRequest.TopicCategory();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CP_CreateTopicRequest.traverse<A>(visitor:)()
{
  unint64_t v2 = v0[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (!*(void *)(v0[2] + 16)
      || (type metadata accessor for CP_KeyValue(0),
          lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_KeyValue and conformance CP_KeyValue, (void (*)(uint64_t))type metadata accessor for CP_KeyValue), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      unint64_t v5 = v0[4];
      uint64_t v6 = HIBYTE(v5) & 0xF;
      if ((v5 & 0x2000000000000000) == 0) {
        uint64_t v6 = v0[3] & 0xFFFFFFFFFFFFLL;
      }
      if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
      {
        if (!v0[5]
          || (lazy protocol witness table accessor for type CP_CreateTopicRequest.TopicCategory and conformance CP_CreateTopicRequest.TopicCategory(),
              uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
              !v1))
        {
          type metadata accessor for CP_CreateTopicRequest(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

Swift::Int CP_CreateTopicRequest.hashValue.getter()
{
  return CP_Record.hashValue.getter((void (*)(void))type metadata accessor for CP_CreateTopicRequest, &lazy protocol witness table cache variable for type CP_CreateTopicRequest and conformance CP_CreateTopicRequest, (void (*)(uint64_t))type metadata accessor for CP_CreateTopicRequest);
}

uint64_t protocol witness for Message.init() in conformance CP_CreateTopicRequest@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0xE000000000000000;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_CreateTopicRequest()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_CreateTopicRequest()
{
  return CP_CreateTopicRequest.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_CreateTopicRequest()
{
  return CP_CreateTopicRequest.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_CreateTopicRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_CreateTopicRequest and conformance CP_CreateTopicRequest, (void (*)(uint64_t))type metadata accessor for CP_CreateTopicRequest);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_CreateTopicRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_CreateTopicRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_CreateTopicRequest()
{
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_CreateTopicRequest and conformance CP_CreateTopicRequest, (void (*)(uint64_t))type metadata accessor for CP_CreateTopicRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_CreateTopicRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_CreateTopicRequest and conformance CP_CreateTopicRequest, (void (*)(uint64_t))type metadata accessor for CP_CreateTopicRequest);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t CP_CreateTopicRequest.TopicCategory._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_CreateTopicRequest.TopicCategory._protobuf_nameMap);
}

uint64_t static CP_CreateTopicRequest.TopicCategory._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_CreateTopicRequest.TopicCategory._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_CreateTopicRequest.TopicCategory@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_CreateTopicRequest.TopicCategory._protobuf_nameMap, a1);
}

void *CP_CreateTopicResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static CP_CreateTopicResponse.protoMessageName;
}

unint64_t static CP_CreateTopicResponse.protoMessageName.getter()
{
  return 0xD000000000000016;
}

uint64_t CP_CreateTopicResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_CreateTopicResponse._protobuf_nameMap);
}

uint64_t static CP_CreateTopicResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_CreateTopicResponse._protobuf_nameMap, a1);
}

uint64_t CP_CreateTopicResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_PublishResponse.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #3 in CP_CreateTopicResponse.decodeMessage<A>(decoder:));
}

uint64_t CP_PublishResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = v4;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v13 = v5;
  if (!v5)
  {
    while (1)
    {
      if (v12) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v14 = v13;
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        lazy protocol witness table accessor for type CP_ResponseStatus and conformance CP_ResponseStatus();
        uint64_t v14 = v13;
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    uint64_t v14 = v13;
    a4(a1, v7, a2, a3);
LABEL_5:
    uint64_t v13 = v14;
    goto LABEL_6;
  }
  return result;
}

uint64_t closure #3 in CP_CreateTopicResponse.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t CP_CreateTopicResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_PublishResponse.traverse<A>(visitor:)(a1, a2, a3, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))closure #1 in CP_CreateTopicResponse.traverse<A>(visitor:), (void (*)(void))type metadata accessor for CP_CreateTopicResponse);
}

uint64_t CP_PublishResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, uint64_t, uint64_t), void (*a5)(void))
{
  if (!*v5
    || (lazy protocol witness table accessor for type CP_ResponseStatus and conformance CP_ResponseStatus(),
        uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v6))
  {
    unint64_t v13 = v5[3];
    uint64_t v14 = HIBYTE(v13) & 0xF;
    if ((v13 & 0x2000000000000000) == 0) {
      uint64_t v14 = v5[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v14 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v6))
    {
      uint64_t result = a4(v5, a1, a2, a3);
      if (!v6)
      {
        a5(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t closure #1 in CP_CreateTopicResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Topic = type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig(0);
  uint64_t v9 = *(void *)(Topic - 8);
  MEMORY[0x1F4188790](Topic);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TopicResponse = type metadata accessor for CP_CreateTopicResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(TopicResponse + 28), (uint64_t)v7, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, Topic) == 1) {
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
  }
  outlined init with take of CP_SequenceNumber((uint64_t)v7, (uint64_t)v11, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_CreateTopicResponse.ClientTopicConfig and conformance CP_CreateTopicResponse.ClientTopicConfig, (void (*)(uint64_t))type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CP_SequenceNumber((uint64_t)v11, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
}

Swift::Int CP_CreateTopicResponse.hashValue.getter()
{
  return CP_Record.hashValue.getter((void (*)(void))type metadata accessor for CP_CreateTopicResponse, &lazy protocol witness table cache variable for type CP_CreateTopicResponse and conformance CP_CreateTopicResponse, (void (*)(uint64_t))type metadata accessor for CP_CreateTopicResponse);
}

uint64_t protocol witness for Message.init() in conformance CP_CreateTopicResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CP_PublishResponse(a1, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig, a2);
}

uint64_t protocol witness for Message.init() in conformance CP_PublishResponse@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X2>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 8) = 1;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0xE000000000000000;
  UnknownStorage.init()();
  uint64_t v6 = a3 + *(int *)(a1 + 28);
  uint64_t v7 = a2(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_CreateTopicResponse()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_CreateTopicResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_CreateTopicResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_CreateTopicResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CP_CreateTopicResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_CreateTopicResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_CreateTopicResponse and conformance CP_CreateTopicResponse, (void (*)(uint64_t))type metadata accessor for CP_CreateTopicResponse);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_CreateTopicResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_CreateTopicResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_CreateTopicResponse()
{
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_CreateTopicResponse and conformance CP_CreateTopicResponse, (void (*)(uint64_t))type metadata accessor for CP_CreateTopicResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_CreateTopicResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_CreateTopicResponse and conformance CP_CreateTopicResponse, (void (*)(uint64_t))type metadata accessor for CP_CreateTopicResponse);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t *CP_CreateTopicResponse.ClientTopicConfig.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static CP_CreateTopicResponse.ClientTopicConfig.protoMessageName;
}

uint64_t static CP_CreateTopicResponse.ClientTopicConfig.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static CP_CreateTopicResponse.ClientTopicConfig.protoMessageName);
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_CreateTopicResponse.ClientTopicConfig._protobuf_nameMap);
}

uint64_t static CP_CreateTopicResponse.ClientTopicConfig._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_CreateTopicResponse.ClientTopicConfig._protobuf_nameMap, a1);
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CP_CreateTopicResponse.ClientTopicConfig.traverse<A>(visitor:)()
{
  if (!*(void *)v0 || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
  {
    if (!*(void *)(v0 + 8)
      || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
    {
      if (!*(void *)(v0 + 16)
        || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
      {
        if (!*(_DWORD *)(v0 + 24)
          || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
        {
          if (!*(_DWORD *)(v0 + 28)
            || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
          {
            if (!*(_DWORD *)(v0 + 32)
              || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
            {
              if (!*(_DWORD *)(v0 + 36)
                || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
              {
                if (!*(_DWORD *)(v0 + 40)
                  || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
                {
                  type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig(0);
                  return UnknownStorage.traverse<A>(visitor:)();
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

Swift::Int CP_CreateTopicResponse.ClientTopicConfig.hashValue.getter()
{
  return CP_Record.hashValue.getter((void (*)(void))type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig, &lazy protocol witness table cache variable for type CP_CreateTopicResponse.ClientTopicConfig and conformance CP_CreateTopicResponse.ClientTopicConfig, (void (*)(uint64_t))type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
}

uint64_t protocol witness for Message.init() in conformance CP_CreateTopicResponse.ClientTopicConfig@<X0>(_OWORD *a1@<X8>)
{
  *(_OWORD *)((char *)a1 + 28) = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static CP_CreateTopicResponse.ClientTopicConfig.protoMessageName);
}

uint64_t protocol witness for Message.unknownFields.getter in conformance CP_CreateTopicResponse.ClientTopicConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 48);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance CP_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 48);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance CP_CreateTopicResponse.ClientTopicConfig())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_CreateTopicResponse.ClientTopicConfig()
{
  return CP_CreateTopicResponse.ClientTopicConfig.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_CreateTopicResponse.ClientTopicConfig()
{
  return CP_CreateTopicResponse.ClientTopicConfig.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_CreateTopicResponse.ClientTopicConfig and conformance CP_CreateTopicResponse.ClientTopicConfig, (void (*)(uint64_t))type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_CreateTopicResponse.ClientTopicConfig@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_CreateTopicResponse.ClientTopicConfig._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_CreateTopicResponse.ClientTopicConfig()
{
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_CreateTopicResponse.ClientTopicConfig and conformance CP_CreateTopicResponse.ClientTopicConfig, (void (*)(uint64_t))type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_CreateTopicResponse.ClientTopicConfig and conformance CP_CreateTopicResponse.ClientTopicConfig, (void (*)(uint64_t))type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

void *CP_FetchTopicsRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static CP_FetchTopicsRequest.protoMessageName;
}

unint64_t static CP_FetchTopicsRequest.protoMessageName.getter()
{
  return 0xD000000000000015;
}

uint64_t CP_FetchTopicsRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_FetchTopicsRequest._protobuf_nameMap);
}

uint64_t static CP_FetchTopicsRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_FetchTopicsRequest._protobuf_nameMap, a1);
}

uint64_t CP_FetchTopicsRequest.decodeMessage<A>(decoder:)()
{
  do
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  while (!v0 && (v2 & 1) == 0);
  return result;
}

uint64_t CP_FetchTopicsRequest.traverse<A>(visitor:)()
{
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t static CP_FetchTopicsRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v14 - v9;
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v14 - v9, a1, v4);
  v11(v8, a2, v4);
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)();
  char v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  v12(v10, v4);
  return a2 & 1;
}

Swift::Int CP_FetchTopicsRequest.hashValue.getter()
{
  return CP_Record.hashValue.getter((void (*)(void))type metadata accessor for CP_FetchTopicsRequest, &lazy protocol witness table cache variable for type CP_FetchTopicsRequest and conformance CP_FetchTopicsRequest, (void (*)(uint64_t))type metadata accessor for CP_FetchTopicsRequest);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_FetchTopicsRequest()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance CP_FetchTopicsRequest@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance CP_FetchTopicsRequest(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);
  return v4(v1, a1, v3);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_FetchTopicsRequest()
{
  return CP_FetchTopicsRequest.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_FetchTopicsRequest()
{
  return CP_FetchTopicsRequest.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_FetchTopicsRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_FetchTopicsRequest and conformance CP_FetchTopicsRequest, (void (*)(uint64_t))type metadata accessor for CP_FetchTopicsRequest);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_FetchTopicsRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_FetchTopicsRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_FetchTopicsRequest()
{
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_FetchTopicsRequest and conformance CP_FetchTopicsRequest, (void (*)(uint64_t))type metadata accessor for CP_FetchTopicsRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_FetchTopicsRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_FetchTopicsRequest and conformance CP_FetchTopicsRequest, (void (*)(uint64_t))type metadata accessor for CP_FetchTopicsRequest);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CP_FetchTopicsRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v14 - v9;
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v14 - v9, a1, v4);
  v11(v8, a2, v4);
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)();
  char v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  v12(v10, v4);
  return a2 & 1;
}

void *CP_FetchTopicsResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static CP_FetchTopicsResponse.protoMessageName;
}

unint64_t static CP_FetchTopicsResponse.protoMessageName.getter()
{
  return 0xD000000000000016;
}

uint64_t CP_FetchTopicsResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_FetchTopicsResponse._protobuf_nameMap);
}

uint64_t static CP_FetchTopicsResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_FetchTopicsResponse._protobuf_nameMap, a1);
}

uint64_t CP_FetchTopicsResponse.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        lazy protocol witness table accessor for type CP_ResponseStatus and conformance CP_ResponseStatus();
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeRepeatedStringField(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t CP_FetchTopicsResponse.traverse<A>(visitor:)()
{
  if (!*v0
    || (lazy protocol witness table accessor for type CP_ResponseStatus and conformance CP_ResponseStatus(),
        uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    unint64_t v3 = v0[3];
    uint64_t v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0) {
      uint64_t v4 = v0[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v4 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      if (!*(void *)(v0[4] + 16)
        || (uint64_t result = dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for CP_FetchTopicsResponse(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

Swift::Int CP_FetchTopicsResponse.hashValue.getter()
{
  return CP_Record.hashValue.getter((void (*)(void))type metadata accessor for CP_FetchTopicsResponse, &lazy protocol witness table cache variable for type CP_FetchTopicsResponse and conformance CP_FetchTopicsResponse, (void (*)(uint64_t))type metadata accessor for CP_FetchTopicsResponse);
}

Swift::Int CP_Record.hashValue.getter(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.init() in conformance CP_FetchTopicsResponse@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(void *)(a1 + 32) = MEMORY[0x1E4FBC860];
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance CP_FetchTopicsResponse()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CP_FetchTopicsResponse()
{
  return CP_FetchTopicsResponse.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CP_FetchTopicsResponse()
{
  return CP_FetchTopicsResponse.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CP_FetchTopicsResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_FetchTopicsResponse and conformance CP_FetchTopicsResponse, (void (*)(uint64_t))type metadata accessor for CP_FetchTopicsResponse);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CP_FetchTopicsResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CP_FetchTopicsResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CP_FetchTopicsResponse()
{
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_FetchTopicsResponse and conformance CP_FetchTopicsResponse, (void (*)(uint64_t))type metadata accessor for CP_FetchTopicsResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CP_FetchTopicsResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_FetchTopicsResponse and conformance CP_FetchTopicsResponse, (void (*)(uint64_t))type metadata accessor for CP_FetchTopicsResponse);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t specialized static CP_SystemEvent.OneOf_Event.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a3)
  {
    if ((a6 & 1) == 0) {
      return 0;
    }
  }
  else if (a6)
  {
    return 0;
  }
  if (a1 == a4 && a2 == a5) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t specialized static CP_UpsertTopicMetadataResponse.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *a1;
  if (*((unsigned char *)a1 + 8) == 1) {
    uint64_t v11 = qword_1B1145ED0[v11];
  }
  uint64_t v12 = *a2;
  if (*((unsigned char *)a2 + 8))
  {
    switch(v12)
    {
      case 1:
        if (v11 == 1) {
          goto LABEL_8;
        }
        goto LABEL_6;
      case 2:
        if (v11 == 3) {
          goto LABEL_8;
        }
        goto LABEL_6;
      case 3:
        if (v11 == 4) {
          goto LABEL_8;
        }
        goto LABEL_6;
      case 4:
        if (v11 == 5) {
          goto LABEL_8;
        }
        goto LABEL_6;
      case 5:
        if (v11 == 6) {
          goto LABEL_8;
        }
        goto LABEL_6;
      case 6:
        if (v11 == 7) {
          goto LABEL_8;
        }
        goto LABEL_6;
      case 7:
        if (v11 == 8) {
          goto LABEL_8;
        }
        goto LABEL_6;
      case 8:
        if (v11 == 1000) {
          goto LABEL_8;
        }
        goto LABEL_6;
      default:
        if (v11) {
          goto LABEL_6;
        }
        goto LABEL_8;
    }
  }
  if (v11 == v12)
  {
LABEL_8:
    if (a1[2] == a2[2] && a1[3] == a2[3] || (char v13 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      uint64_t v14 = type metadata accessor for CP_UpsertTopicMetadataResponse(0);
      uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v15(v10, (char *)a1 + *(int *)(v14 + 24), v4);
      v15(v8, (char *)a2 + *(int *)(v14 + 24), v4);
      lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
      v16(v8, v4);
      v16(v10, v4);
    }
  }
  else
  {
LABEL_6:
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static CP_TopicSubscribersRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v42 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v41 = (char *)&v37 - v7;
  uint64_t v8 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v38 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CP_TopicSubscribersRequest.OneOf_Operation?, CP_TopicSubscribersRequest.OneOf_Operation?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v37 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v37 - v22;
  uint64_t v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)&v37 - v22, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  uint64_t v40 = a2;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a2, (uint64_t)v21, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  uint64_t v24 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, v24, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  char v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v25((uint64_t)v14, 1, v8) != 1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
    if (v25(v24, 1, v8) != 1)
    {
      uint64_t v26 = v38;
      outlined init with take of CP_SequenceNumber(v24, v38, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
      char v27 = specialized static CP_TopicSubscribersRequest.OneOf_Operation.== infix(_:_:)((uint64_t)v18, v26);
      outlined destroy of CP_SequenceNumber(v26, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
      outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
      outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
      outlined destroy of CP_SequenceNumber((uint64_t)v18, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
      outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
      if (v27) {
        goto LABEL_8;
      }
LABEL_9:
      char v34 = 0;
      return v34 & 1;
    }
    outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
    outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
    outlined destroy of CP_SequenceNumber((uint64_t)v18, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
LABEL_6:
    outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for (CP_TopicSubscribersRequest.OneOf_Operation?, CP_TopicSubscribersRequest.OneOf_Operation?));
    goto LABEL_9;
  }
  outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  if (v25(v24, 1, v8) != 1) {
    goto LABEL_6;
  }
  outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
LABEL_8:
  uint64_t v28 = type metadata accessor for CP_TopicSubscribersRequest(0);
  uint64_t v30 = v43;
  uint64_t v29 = v44;
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  uint64_t v32 = v41;
  v31(v41, v39 + *(int *)(v28 + 20), v44);
  unint64_t v33 = v42;
  v31(v42, v40 + *(int *)(v28 + 20), v29);
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v35 = *(void (**)(char *, uint64_t))(v30 + 8);
  v35(v33, v29);
  v35(v32, v29);
  return v34 & 1;
}

uint64_t specialized static CP_TopicSubscribersRequest.OneOf_Operation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = a2;
  uint64_t v3 = type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (uint64_t *)((char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (uint64_t *)((char *)&v25 - v13);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CP_TopicSubscribersRequest.OneOf_Operation, CP_TopicSubscribersRequest.OneOf_Operation));
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (uint64_t)&v18[*(int *)(v16 + 56)];
  outlined init with copy of CP_SequenceNumber(a1, (uint64_t)v18, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
  outlined init with copy of CP_SequenceNumber(v26, v19, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with copy of CP_SequenceNumber((uint64_t)v18, (uint64_t)v14, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of CP_SequenceNumber(v19, (uint64_t)v8, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
      BOOL v23 = *v14 == *v8 && v14[1] == v8[1];
      if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        if (dispatch thunk of static Equatable.== infix(_:_:)())
        {
          outlined destroy of CP_SequenceNumber((uint64_t)v8, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
          outlined destroy of CP_SequenceNumber((uint64_t)v14, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
          outlined destroy of CP_SequenceNumber((uint64_t)v18, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
          char v20 = 1;
          return v20 & 1;
        }
      }
      outlined destroy of CP_SequenceNumber((uint64_t)v8, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
      outlined destroy of CP_SequenceNumber((uint64_t)v14, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
      outlined destroy of CP_SequenceNumber((uint64_t)v18, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
LABEL_16:
      char v20 = 0;
      return v20 & 1;
    }
    uint64_t v21 = type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck;
    uint64_t v22 = (uint64_t)v14;
LABEL_7:
    outlined destroy of CP_SequenceNumber(v22, v21);
    outlined destroy of UUID?((uint64_t)v18, &demangling cache variable for type metadata for (CP_TopicSubscribersRequest.OneOf_Operation, CP_TopicSubscribersRequest.OneOf_Operation));
    goto LABEL_16;
  }
  outlined init with copy of CP_SequenceNumber((uint64_t)v18, (uint64_t)v12, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v21 = type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest;
    uint64_t v22 = (uint64_t)v12;
    goto LABEL_7;
  }
  outlined init with take of CP_SequenceNumber(v19, (uint64_t)v5, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
  char v20 = specialized static CP_TopicSubscribersRequest.TopicTerminationRequest.== infix(_:_:)((uint64_t)v12, (uint64_t)v5);
  outlined destroy of CP_SequenceNumber((uint64_t)v5, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
  outlined destroy of CP_SequenceNumber((uint64_t)v12, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
  outlined destroy of CP_SequenceNumber((uint64_t)v18, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
  return v20 & 1;
}

uint64_t specialized static CP_TopicSubscribersRequest.TopicTerminationRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v19 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v13 = *(void *)(a1 + 16);
    uint64_t v14 = *(void *)(a2 + 16);
    if (*(unsigned char *)(a1 + 24)) {
      uint64_t v13 = v13 != 0;
    }
    if (*(unsigned char *)(a2 + 24) == 1)
    {
      if (v14)
      {
        if (v13 != 1)
        {
LABEL_11:
          char v12 = 0;
          return v12 & 1;
        }
      }
      else if (v13)
      {
        goto LABEL_11;
      }
    }
    else if (v13 != v14)
    {
      goto LABEL_11;
    }
    uint64_t v15 = type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0);
    uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v16(v10, a1 + *(int *)(v15 + 24), v4);
    v16(v8, a2 + *(int *)(v15 + 24), v4);
    lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
  }
  return v12 & 1;
}

uint64_t specialized static CP_FetchTopicsResponse.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *a1;
  if (*((unsigned char *)a1 + 8) == 1) {
    uint64_t v11 = qword_1B1145ED0[v11];
  }
  uint64_t v12 = *a2;
  if (*((unsigned char *)a2 + 8))
  {
    switch(v12)
    {
      case 1:
        if (v11 == 1) {
          goto LABEL_8;
        }
        goto LABEL_28;
      case 2:
        if (v11 == 3) {
          goto LABEL_8;
        }
        goto LABEL_28;
      case 3:
        if (v11 == 4) {
          goto LABEL_8;
        }
        goto LABEL_28;
      case 4:
        if (v11 == 5) {
          goto LABEL_8;
        }
        goto LABEL_28;
      case 5:
        if (v11 == 6) {
          goto LABEL_8;
        }
        goto LABEL_28;
      case 6:
        if (v11 == 7) {
          goto LABEL_8;
        }
        goto LABEL_28;
      case 7:
        if (v11 == 8) {
          goto LABEL_8;
        }
        goto LABEL_28;
      case 8:
        if (v11 != 1000) {
          goto LABEL_28;
        }
        goto LABEL_8;
      default:
        if (!v11) {
          goto LABEL_8;
        }
        goto LABEL_28;
    }
  }
  if (v11 != v12) {
    goto LABEL_28;
  }
LABEL_8:
  if (a1[2] == a2[2] && a1[3] == a2[3] || (char v13 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (specialized static Array<A>.== infix(_:_:)((void *)a1[4], (void *)a2[4]))
    {
      uint64_t TopicsResponse = type metadata accessor for CP_FetchTopicsResponse(0);
      uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v15(v10, (char *)a1 + *(int *)(TopicsResponse + 28), v4);
      v15(v8, (char *)a2 + *(int *)(TopicsResponse + 28), v4);
      lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
      v16(v8, v4);
      v16(v10, v4);
      return v13 & 1;
    }
LABEL_28:
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static CP_CreateTopicResponse.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v50 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v49 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v48 = (char *)&v43 - v7;
  uint64_t Topic = type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig(0);
  uint64_t v9 = *(void *)(Topic - 8);
  MEMORY[0x1F4188790](Topic);
  uint64_t v47 = (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CP_CreateTopicResponse.ClientTopicConfig?, CP_CreateTopicResponse.ClientTopicConfig?));
  MEMORY[0x1F4188790](v11);
  char v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  char v20 = (char *)&v43 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v43 - v21;
  uint64_t v23 = *a1;
  if (*((unsigned char *)a1 + 8) == 1) {
    uint64_t v23 = qword_1B1145ED0[v23];
  }
  uint64_t v24 = *a2;
  if (*((unsigned char *)a2 + 8))
  {
    switch(v24)
    {
      case 1:
        if (v23 != 1) {
          goto LABEL_34;
        }
        goto LABEL_8;
      case 2:
        if (v23 != 3) {
          goto LABEL_34;
        }
        goto LABEL_8;
      case 3:
        if (v23 != 4) {
          goto LABEL_34;
        }
        goto LABEL_8;
      case 4:
        if (v23 != 5) {
          goto LABEL_34;
        }
        goto LABEL_8;
      case 5:
        if (v23 != 6) {
          goto LABEL_34;
        }
        goto LABEL_8;
      case 6:
        if (v23 != 7) {
          goto LABEL_34;
        }
        goto LABEL_8;
      case 7:
        if (v23 != 8) {
          goto LABEL_34;
        }
        goto LABEL_8;
      case 8:
        if (v23 != 1000) {
          goto LABEL_34;
        }
        goto LABEL_8;
      default:
        if (!v23) {
          goto LABEL_8;
        }
        goto LABEL_34;
    }
  }
  if (v23 != v24) {
    goto LABEL_34;
  }
LABEL_8:
  uint64_t v46 = v4;
  if (a1[2] == a2[2] && a1[3] == a2[3] || (char v25 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v45 = v17;
    uint64_t v26 = v9;
    uint64_t TopicResponse = type metadata accessor for CP_CreateTopicResponse(0);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a1 + *(int *)(TopicResponse + 28), (uint64_t)v22, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
    uint64_t v44 = TopicResponse;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a2 + *(int *)(TopicResponse + 28), (uint64_t)v20, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
    uint64_t v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v20, v28, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
    uint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
    if (v29((uint64_t)v13, 1, Topic) == 1)
    {
      outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
      outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
      if (v29(v28, 1, Topic) == 1)
      {
        outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
LABEL_18:
        uint64_t v33 = v44;
        uint64_t v34 = (uint64_t)a1 + *(int *)(v44 + 24);
        uint64_t v35 = v50;
        uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
        uint64_t v37 = v48;
        uint64_t v38 = v46;
        v36(v48, v34, v46);
        uint64_t v39 = (uint64_t)a2 + *(int *)(v33 + 24);
        uint64_t v40 = v49;
        v36(v49, v39, v38);
        lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v41 = *(void (**)(char *, uint64_t))(v35 + 8);
        v41(v40, v38);
        v41(v37, v38);
        return v25 & 1;
      }
    }
    else
    {
      uint64_t v30 = (uint64_t)v45;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v13, (uint64_t)v45, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
      if (v29(v28, 1, Topic) != 1)
      {
        uint64_t v31 = v47;
        outlined init with take of CP_SequenceNumber(v28, v47, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
        char v32 = specialized static CP_CreateTopicResponse.ClientTopicConfig.== infix(_:_:)(v30, v31);
        outlined destroy of CP_SequenceNumber(v31, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
        outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
        outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
        outlined destroy of CP_SequenceNumber(v30, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
        outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
        if (v32) {
          goto LABEL_18;
        }
LABEL_34:
        char v25 = 0;
        return v25 & 1;
      }
      outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
      outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
      outlined destroy of CP_SequenceNumber(v30, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
    }
    outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for (CP_CreateTopicResponse.ClientTopicConfig?, CP_CreateTopicResponse.ClientTopicConfig?));
    goto LABEL_34;
  }
  return v25 & 1;
}

uint64_t specialized static CP_CreateTopicResponse.ClientTopicConfig.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v16 - v9;
  if (*(void *)a1 == *(void *)a2
    && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    && *(void *)(a1 + 16) == *(void *)(a2 + 16)
    && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
    && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
    && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
    && *(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 36)
    && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40))
  {
    uint64_t Topic = type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig(0);
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v12(v10, a1 + *(int *)(Topic + 48), v4);
    v12(v8, a2 + *(int *)(Topic + 48), v4);
    lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static CP_CreateTopicRequest.== infix(_:_:)(char *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v19 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *(void *)(a2 + 8);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if ((specialized static Array<A>.== infix(_:_:)(*((void *)a1 + 2), *(void *)(a2 + 16)) & 1) == 0)
    {
LABEL_13:
      char v12 = 0;
      return v12 & 1;
    }
    if (*((void *)a1 + 3) == *(void *)(a2 + 24) && *((void *)a1 + 4) == *(void *)(a2 + 32)
      || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      uint64_t v13 = *((void *)a1 + 5);
      uint64_t v14 = *(void *)(a2 + 40);
      if (*(unsigned char *)(a2 + 48) == 1)
      {
        switch(v14)
        {
          case 1:
            if (v13 == 1) {
              goto LABEL_15;
            }
            goto LABEL_13;
          case 2:
            if (v13 == 2) {
              goto LABEL_15;
            }
            goto LABEL_13;
          case 3:
            if (v13 == 3) {
              goto LABEL_15;
            }
            goto LABEL_13;
          case 4:
            if (v13 == 4) {
              goto LABEL_15;
            }
            goto LABEL_13;
          default:
            if (v13) {
              goto LABEL_13;
            }
            goto LABEL_15;
        }
      }
      if (v13 == v14)
      {
LABEL_15:
        uint64_t TopicRequest = type metadata accessor for CP_CreateTopicRequest(0);
        uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
        v16(v10, &a1[*(int *)(TopicRequest + 32)], v4);
        v16(v8, (char *)(a2 + *(int *)(TopicRequest + 32)), v4);
        lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
        v17(v8, v4);
        v17(v10, v4);
        return v12 & 1;
      }
      goto LABEL_13;
    }
  }
  return v12 & 1;
}

uint64_t specialized static CP_SubscribeResponse.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v42 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v41 = (char *)&v37 - v7;
  uint64_t v8 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v38 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CP_SubscribeResponse.OneOf_Operation?, CP_SubscribeResponse.OneOf_Operation?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v37 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v37 - v22;
  uint64_t v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)&v37 - v22, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  uint64_t v40 = a2;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a2, (uint64_t)v21, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  uint64_t v24 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, v24, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  char v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v25((uint64_t)v14, 1, v8) != 1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
    if (v25(v24, 1, v8) != 1)
    {
      uint64_t v26 = v38;
      outlined init with take of CP_SequenceNumber(v24, v38, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
      char v27 = specialized static CP_SubscribeResponse.OneOf_Operation.== infix(_:_:)((uint64_t)v18, v26);
      outlined destroy of CP_SequenceNumber(v26, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
      outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
      outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
      outlined destroy of CP_SequenceNumber((uint64_t)v18, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
      outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
      if (v27) {
        goto LABEL_8;
      }
LABEL_9:
      char v34 = 0;
      return v34 & 1;
    }
    outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
    outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
    outlined destroy of CP_SequenceNumber((uint64_t)v18, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
LABEL_6:
    outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for (CP_SubscribeResponse.OneOf_Operation?, CP_SubscribeResponse.OneOf_Operation?));
    goto LABEL_9;
  }
  outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  if (v25(v24, 1, v8) != 1) {
    goto LABEL_6;
  }
  outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
LABEL_8:
  uint64_t v28 = type metadata accessor for CP_SubscribeResponse(0);
  uint64_t v30 = v43;
  uint64_t v29 = v44;
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  char v32 = v41;
  v31(v41, v39 + *(int *)(v28 + 20), v44);
  uint64_t v33 = v42;
  v31(v42, v40 + *(int *)(v28 + 20), v29);
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v35 = *(void (**)(char *, uint64_t))(v30 + 8);
  v35(v33, v29);
  v35(v32, v29);
  return v34 & 1;
}

uint64_t specialized static CP_SubscribeResponse.OneOf_Operation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v35 = a2;
  uint64_t v3 = type metadata accessor for CP_SubscribeResponse.TopicUpdate(0);
  MEMORY[0x1F4188790](v3 - 8);
  char v34 = (uint64_t *)((char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for CP_Record(0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (uint64_t **)((char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (uint64_t *)((char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (uint64_t *)((char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v17 = (uint64_t **)((char *)&v34 - v16);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (uint64_t *)((char *)&v34 - v18);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CP_SubscribeResponse.OneOf_Operation, CP_SubscribeResponse.OneOf_Operation));
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v23 = (char *)&v34 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = (uint64_t)&v23[*(int *)(v21 + 56)];
  outlined init with copy of CP_SequenceNumber(a1, (uint64_t)v23, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
  outlined init with copy of CP_SequenceNumber(v35, v24, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with copy of CP_SequenceNumber((uint64_t)v23, (uint64_t)v17, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        outlined init with take of CP_SequenceNumber(v24, (uint64_t)v7, type metadata accessor for CP_Record);
        char v26 = specialized static CP_Record.== infix(_:_:)(v17, v7);
        char v27 = type metadata accessor for CP_Record;
        outlined destroy of CP_SequenceNumber((uint64_t)v7, type metadata accessor for CP_Record);
        uint64_t v28 = (uint64_t)v17;
LABEL_9:
        char v32 = v27;
LABEL_14:
        outlined destroy of CP_SequenceNumber(v28, v32);
        outlined destroy of CP_SequenceNumber((uint64_t)v23, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
        return v26 & 1;
      }
      uint64_t v29 = type metadata accessor for CP_Record;
      uint64_t v30 = (uint64_t)v17;
    }
    else
    {
      outlined init with copy of CP_SequenceNumber((uint64_t)v23, (uint64_t)v14, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v31 = v34;
        outlined init with take of CP_SequenceNumber(v24, (uint64_t)v34, type metadata accessor for CP_SubscribeResponse.TopicUpdate);
        char v26 = specialized static CP_SubscribeResponse.TopicUpdate.== infix(_:_:)(v14, v31);
        char v27 = type metadata accessor for CP_SubscribeResponse.TopicUpdate;
        outlined destroy of CP_SequenceNumber((uint64_t)v31, type metadata accessor for CP_SubscribeResponse.TopicUpdate);
        uint64_t v28 = (uint64_t)v14;
        goto LABEL_9;
      }
      uint64_t v29 = type metadata accessor for CP_SubscribeResponse.TopicUpdate;
      uint64_t v30 = (uint64_t)v14;
    }
  }
  else
  {
    outlined init with copy of CP_SequenceNumber((uint64_t)v23, (uint64_t)v19, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of CP_SequenceNumber(v24, (uint64_t)v10, type metadata accessor for CP_SubscribeResponse.InitializeAck);
      char v26 = specialized static CP_SubscribeResponse.InitializeAck.== infix(_:_:)(v19, v10);
      outlined destroy of CP_SequenceNumber((uint64_t)v10, type metadata accessor for CP_SubscribeResponse.InitializeAck);
      uint64_t v28 = (uint64_t)v19;
      char v32 = type metadata accessor for CP_SubscribeResponse.InitializeAck;
      goto LABEL_14;
    }
    uint64_t v29 = type metadata accessor for CP_SubscribeResponse.InitializeAck;
    uint64_t v30 = (uint64_t)v19;
  }
  outlined destroy of CP_SequenceNumber(v30, v29);
  outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for (CP_SubscribeResponse.OneOf_Operation, CP_SubscribeResponse.OneOf_Operation));
  char v26 = 0;
  return v26 & 1;
}

uint64_t specialized static CP_SubscribeResponse.InitializeAck.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v64 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  unint64_t v63 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v62 = (char *)&v58 - v7;
  uint64_t v71 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v68 = *(void *)(v71 - 8);
  MEMORY[0x1F4188790](v71);
  uint64_t v65 = (uint64_t *)((char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CP_SequenceNumber?, CP_SequenceNumber?));
  MEMORY[0x1F4188790](v67);
  uint64_t v72 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v66 = (uint64_t *)((char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v69 = (char *)&v58 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v70 = (char *)&v58 - v15;
  uint64_t v16 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  uint64_t v73 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (uint64_t *)((char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?, CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?));
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  uint64_t v23 = MEMORY[0x1F4188790](v22 - 8);
  char v25 = (uint64_t *)((char *)&v58 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v26 = MEMORY[0x1F4188790](v23);
  uint64_t v28 = (char *)&v58 - v27;
  MEMORY[0x1F4188790](v26);
  uint64_t v30 = (char *)&v58 - v29;
  uint64_t v31 = *a1;
  if (*((unsigned char *)a1 + 8) == 1) {
    uint64_t v31 = qword_1B1145ED0[v31];
  }
  uint64_t v32 = *a2;
  if (*((unsigned char *)a2 + 8))
  {
    switch(v32)
    {
      case 1:
        if (v31 != 1) {
          goto LABEL_49;
        }
        goto LABEL_8;
      case 2:
        if (v31 != 3) {
          goto LABEL_49;
        }
        goto LABEL_8;
      case 3:
        if (v31 != 4) {
          goto LABEL_49;
        }
        goto LABEL_8;
      case 4:
        if (v31 != 5) {
          goto LABEL_49;
        }
        goto LABEL_8;
      case 5:
        if (v31 != 6) {
          goto LABEL_49;
        }
        goto LABEL_8;
      case 6:
        if (v31 != 7) {
          goto LABEL_49;
        }
        goto LABEL_8;
      case 7:
        if (v31 != 8) {
          goto LABEL_49;
        }
        goto LABEL_8;
      case 8:
        if (v31 != 1000) {
          goto LABEL_49;
        }
        goto LABEL_8;
      default:
        if (!v31) {
          goto LABEL_8;
        }
        goto LABEL_49;
    }
  }
  if (v31 != v32) {
    goto LABEL_49;
  }
LABEL_8:
  uint64_t v61 = v4;
  if (a1[2] == a2[2] && a1[3] == a2[3] || (char v33 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (!specialized static Array<A>.== infix(_:_:)((void *)a1[4], (void *)a2[4])
      || (specialized static Array<A>.== infix(_:_:)(a1[5], a2[5]) & 1) == 0)
    {
      goto LABEL_49;
    }
    uint64_t v34 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a1 + *(int *)(v34 + 44), (uint64_t)v30, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
    uint64_t v59 = v34;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a2 + *(int *)(v34 + 44), (uint64_t)v28, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
    uint64_t v35 = (uint64_t)&v21[*(int *)(v19 + 48)];
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v30, (uint64_t)v21, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
    uint64_t v60 = v35;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v28, v35, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
    uint64_t v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48);
    if (v36((uint64_t)v21, 1, v16) == 1)
    {
      outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
      outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
      if (v36(v60, 1, v16) == 1)
      {
        outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
        goto LABEL_16;
      }
    }
    else
    {
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, (uint64_t)v25, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
      if (v36(v60, 1, v16) != 1)
      {
        outlined init with take of CP_SequenceNumber(v60, (uint64_t)v18, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
        if (*v25 != *v18 || (specialized static Array<A>.== infix(_:_:)(v25[1], v18[1]) & 1) == 0)
        {
          uint64_t v53 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary;
          outlined destroy of CP_SequenceNumber((uint64_t)v18, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
          long long v54 = &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?;
          goto LABEL_47;
        }
        lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v52 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of CP_SequenceNumber((uint64_t)v18, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
        outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
        outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
        outlined destroy of CP_SequenceNumber((uint64_t)v25, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
        outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
        if ((v52 & 1) == 0) {
          goto LABEL_49;
        }
LABEL_16:
        if ((specialized static Array<A>.== infix(_:_:)(a1[6], a2[6]) & 1) == 0) {
          goto LABEL_49;
        }
        uint64_t v37 = v59;
        uint64_t v30 = v70;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a1 + *(int *)(v59 + 48), (uint64_t)v70, &demangling cache variable for type metadata for CP_SequenceNumber?);
        uint64_t v28 = v69;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a2 + *(int *)(v37 + 48), (uint64_t)v69, &demangling cache variable for type metadata for CP_SequenceNumber?);
        uint64_t v21 = v72;
        uint64_t v38 = (uint64_t)&v72[*(int *)(v67 + 48)];
        outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v30, (uint64_t)v72, &demangling cache variable for type metadata for CP_SequenceNumber?);
        outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v28, v38, &demangling cache variable for type metadata for CP_SequenceNumber?);
        uint64_t v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
        uint64_t v40 = v71;
        if (v39((uint64_t)v21, 1, v71) == 1)
        {
          outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for CP_SequenceNumber?);
          outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for CP_SequenceNumber?);
          if (v39(v38, 1, v40) == 1)
          {
            outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for CP_SequenceNumber?);
LABEL_20:
            if (specialized static Array<A>.== infix(_:_:)((void *)a1[7], (void *)a2[7]))
            {
              uint64_t v41 = v59;
              uint64_t v42 = (uint64_t)a1 + *(int *)(v59 + 40);
              uint64_t v43 = v64;
              uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v64 + 16);
              uint64_t v45 = v61;
              uint64_t v46 = v62;
              v44(v62, v42, v61);
              uint64_t v47 = (uint64_t)a2 + *(int *)(v41 + 40);
              uint64_t v48 = v63;
              v44(v63, v47, v45);
              lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
              char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
              uint64_t v49 = *(void (**)(char *, uint64_t))(v43 + 8);
              v49(v48, v45);
              v49(v46, v45);
              return v33 & 1;
            }
LABEL_49:
            char v33 = 0;
            return v33 & 1;
          }
          goto LABEL_53;
        }
        char v25 = v66;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, (uint64_t)v66, &demangling cache variable for type metadata for CP_SequenceNumber?);
        if (v39(v38, 1, v40) == 1)
        {
          outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for CP_SequenceNumber?);
          outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for CP_SequenceNumber?);
          outlined destroy of CP_SequenceNumber((uint64_t)v25, type metadata accessor for CP_SequenceNumber);
LABEL_53:
          uint64_t v50 = &demangling cache variable for type metadata for (CP_SequenceNumber?, CP_SequenceNumber?);
          goto LABEL_41;
        }
        uint64_t v56 = v65;
        outlined init with take of CP_SequenceNumber(v38, (uint64_t)v65, type metadata accessor for CP_SequenceNumber);
        if (*v25 == *v56 && v25[1] == v56[1])
        {
          lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
          char v57 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of CP_SequenceNumber((uint64_t)v56, type metadata accessor for CP_SequenceNumber);
          outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for CP_SequenceNumber?);
          outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for CP_SequenceNumber?);
          outlined destroy of CP_SequenceNumber((uint64_t)v25, type metadata accessor for CP_SequenceNumber);
          outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for CP_SequenceNumber?);
          if ((v57 & 1) == 0) {
            goto LABEL_49;
          }
          goto LABEL_20;
        }
        uint64_t v53 = type metadata accessor for CP_SequenceNumber;
        outlined destroy of CP_SequenceNumber((uint64_t)v56, type metadata accessor for CP_SequenceNumber);
        long long v54 = &demangling cache variable for type metadata for CP_SequenceNumber?;
LABEL_47:
        outlined destroy of UUID?((uint64_t)v28, v54);
        outlined destroy of UUID?((uint64_t)v30, v54);
        outlined destroy of CP_SequenceNumber((uint64_t)v25, v53);
        uint64_t v51 = (uint64_t)v21;
        uint64_t v50 = v54;
        goto LABEL_48;
      }
      outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
      outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
      outlined destroy of CP_SequenceNumber((uint64_t)v25, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
    }
    uint64_t v50 = &demangling cache variable for type metadata for (CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?, CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
LABEL_41:
    uint64_t v51 = (uint64_t)v21;
LABEL_48:
    outlined destroy of UUID?(v51, v50);
    goto LABEL_49;
  }
  return v33 & 1;
}

uint64_t specialized static CP_SubscribeResponse.InitializeAck.TopicCatchupSummary.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v16 - v9;
  if (*(void *)a1 == *(void *)a2
    && (specialized static Array<A>.== infix(_:_:)(*((void *)a1 + 1), *((void *)a2 + 1)) & 1) != 0)
  {
    uint64_t v11 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, &a1[*(int *)(v11 + 24)], v4);
    v12(v8, &a2[*(int *)(v11 + 24)], v4);
    lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static CP_SubscribeResponse.InitializeAck.MissingEncryptionID.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v51 = *(void *)(v4 - 8);
  uint64_t v52 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v50 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v45 - v7;
  uint64_t v9 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v53 = v9;
  uint64_t v54 = v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CP_EncryptionID?, CP_EncryptionID?));
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v45 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v23 = (char *)&v45 - v22;
  if (*(void *)a1 != *(void *)a2) {
    goto LABEL_13;
  }
  uint64_t v46 = v12;
  uint64_t v48 = v8;
  uint64_t v49 = v21;
  uint64_t v24 = type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
  char v25 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&a1[*(int *)(v24 + 24)], (uint64_t)v23, &demangling cache variable for type metadata for CP_EncryptionID?);
  uint64_t v26 = a2;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&a2[*(int *)(v24 + 24)], (uint64_t)v20, &demangling cache variable for type metadata for CP_EncryptionID?);
  uint64_t v27 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v23, (uint64_t)v15, &demangling cache variable for type metadata for CP_EncryptionID?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v20, v27, &demangling cache variable for type metadata for CP_EncryptionID?);
  uint64_t v28 = v53;
  uint64_t v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
  int v30 = v29(v15, 1, v53);
  uint64_t v47 = v26;
  if (v30 != 1)
  {
    uint64_t v33 = v49;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v15, v49, &demangling cache variable for type metadata for CP_EncryptionID?);
    if (v29((char *)v27, 1, v28) != 1)
    {
      uint64_t v31 = v24;
      uint64_t v36 = (uint64_t)v46;
      outlined init with take of CP_SequenceNumber(v27, (uint64_t)v46, type metadata accessor for CP_EncryptionID);
      if (specialized static Data.== infix(_:_:)(*(void *)v33, *(void *)(v33 + 8), *(void *)v36, *(void *)(v36 + 8)))
      {
        lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        uint64_t v32 = v52;
        char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of CP_SequenceNumber(v36, type metadata accessor for CP_EncryptionID);
        outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for CP_EncryptionID?);
        outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for CP_EncryptionID?);
        outlined destroy of CP_SequenceNumber(v49, type metadata accessor for CP_EncryptionID);
        outlined destroy of UUID?((uint64_t)v15, &demangling cache variable for type metadata for CP_EncryptionID?);
        if (v37) {
          goto LABEL_10;
        }
LABEL_13:
        char v42 = 0;
        return v42 & 1;
      }
      outlined destroy of CP_SequenceNumber(v36, type metadata accessor for CP_EncryptionID);
      outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for CP_EncryptionID?);
      outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for CP_EncryptionID?);
      outlined destroy of CP_SequenceNumber(v33, type metadata accessor for CP_EncryptionID);
      uint64_t v35 = (uint64_t)v15;
      uint64_t v34 = &demangling cache variable for type metadata for CP_EncryptionID?;
LABEL_12:
      outlined destroy of UUID?(v35, v34);
      goto LABEL_13;
    }
    outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for CP_EncryptionID?);
    outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for CP_EncryptionID?);
    outlined destroy of CP_SequenceNumber(v33, type metadata accessor for CP_EncryptionID);
LABEL_7:
    uint64_t v34 = &demangling cache variable for type metadata for (CP_EncryptionID?, CP_EncryptionID?);
    uint64_t v35 = (uint64_t)v15;
    goto LABEL_12;
  }
  outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for CP_EncryptionID?);
  outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for CP_EncryptionID?);
  if (v29((char *)v27, 1, v28) != 1) {
    goto LABEL_7;
  }
  uint64_t v31 = v24;
  outlined destroy of UUID?((uint64_t)v15, &demangling cache variable for type metadata for CP_EncryptionID?);
  uint64_t v32 = v52;
LABEL_10:
  uint64_t v38 = v51;
  uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
  uint64_t v40 = v48;
  v39(v48, &v25[*(int *)(v31 + 20)], v32);
  uint64_t v41 = v50;
  v39(v50, &v47[*(int *)(v31 + 20)], v32);
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v42 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v43 = *(void (**)(char *, uint64_t))(v38 + 8);
  v43(v41, v32);
  v43(v40, v32);
  return v42 & 1;
}

uint64_t specialized static CP_SubscribeResponse.TopicUpdate.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *a1;
  uint64_t v12 = *a2;
  if (*((unsigned char *)a2 + 8) == 1)
  {
    if (v12)
    {
      if (v12 == 1)
      {
        if (v11 != 1) {
          goto LABEL_14;
        }
      }
      else if (v11 != 2)
      {
        goto LABEL_14;
      }
    }
    else if (v11)
    {
      goto LABEL_14;
    }
  }
  else if (v11 != v12)
  {
    goto LABEL_14;
  }
  if ((specialized static Array<A>.== infix(_:_:)(a1[2], a2[2]) & 1) != 0
    && a1[3] == a2[3]
    && *((unsigned __int8 *)a1 + 32) == *((unsigned __int8 *)a2 + 32))
  {
    uint64_t v15 = type metadata accessor for CP_SubscribeResponse.TopicUpdate(0);
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v16(v10, (char *)a1 + *(int *)(v15 + 32), v4);
    v16(v8, (char *)a2 + *(int *)(v15 + 32), v4);
    lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
    return v13 & 1;
  }
LABEL_14:
  char v13 = 0;
  return v13 & 1;
}

uint64_t specialized static CP_TopicSubscribers.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v16 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) != 0
    && (specialized static Array<A>.== infix(_:_:)(a1[1], a2[1]) & 1) != 0)
  {
    uint64_t v11 = type metadata accessor for CP_TopicSubscribers(0);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, (char *)a1 + *(int *)(v11 + 24), v4);
    v12(v8, (char *)a2 + *(int *)(v11 + 24), v4);
    lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static CP_UpsertTopicMetadataRequest.== infix(_:_:)(char *a1, char *a2, uint64_t (*a3)(void, void), uint64_t (*a4)(void))
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v21 - v13;
  BOOL v15 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  if (v15 || (char v16 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (a3(*((void *)a1 + 2), *((void *)a2 + 2)))
    {
      uint64_t v17 = a4(0);
      uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
      v18(v14, &a1[*(int *)(v17 + 24)], v8);
      v18(v12, &a2[*(int *)(v17 + 24)], v8);
      lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v19 = *(void (**)(char *, uint64_t))(v9 + 8);
      v19(v12, v8);
      v19(v14, v8);
    }
    else
    {
      char v16 = 0;
    }
  }
  return v16 & 1;
}

uint64_t specialized static CP_TopicSubscribersRequest.TopicTerminatedAck.== infix(_:_:)(char *a1, char *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v19 - v11;
  BOOL v13 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  if (v13 || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v15 = a3(0);
    char v16 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v16(v12, &a1[*(int *)(v15 + 20)], v6);
    v16(v10, &a2[*(int *)(v15 + 20)], v6);
    lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v17 = *(void (**)(char *, uint64_t))(v7 + 8);
    v17(v10, v6);
    v17(v12, v6);
  }
  return v14 & 1;
}

uint64_t specialized static CP_SubscribeRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  char v42 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v41 = (char *)&v37 - v7;
  uint64_t v8 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v38 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CP_SubscribeRequest.OneOf_Operation?, CP_SubscribeRequest.OneOf_Operation?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  char v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v37 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v37 - v22;
  uint64_t v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)&v37 - v22, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  uint64_t v40 = a2;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a2, (uint64_t)v21, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  uint64_t v24 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, v24, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  char v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v25((uint64_t)v14, 1, v8) != 1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
    if (v25(v24, 1, v8) != 1)
    {
      uint64_t v26 = v38;
      outlined init with take of CP_SequenceNumber(v24, v38, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
      char v27 = specialized static CP_SubscribeRequest.OneOf_Operation.== infix(_:_:)((uint64_t)v18, v26);
      outlined destroy of CP_SequenceNumber(v26, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
      outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
      outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
      outlined destroy of CP_SequenceNumber((uint64_t)v18, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
      outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
      if (v27) {
        goto LABEL_8;
      }
LABEL_9:
      char v34 = 0;
      return v34 & 1;
    }
    outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
    outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
    outlined destroy of CP_SequenceNumber((uint64_t)v18, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
LABEL_6:
    outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for (CP_SubscribeRequest.OneOf_Operation?, CP_SubscribeRequest.OneOf_Operation?));
    goto LABEL_9;
  }
  outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  if (v25(v24, 1, v8) != 1) {
    goto LABEL_6;
  }
  outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
LABEL_8:
  uint64_t v28 = type metadata accessor for CP_SubscribeRequest(0);
  uint64_t v30 = v43;
  uint64_t v29 = v44;
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  uint64_t v32 = v41;
  v31(v41, v39 + *(int *)(v28 + 20), v44);
  uint64_t v33 = v42;
  v31(v42, v40 + *(int *)(v28 + 20), v29);
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v35 = *(void (**)(char *, uint64_t))(v30 + 8);
  v35(v33, v29);
  v35(v32, v29);
  return v34 & 1;
}

uint64_t specialized static CP_SubscribeRequest.RecordAck.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v16 - v9;
  if (specialized static Array<A>.== infix(_:_:)(*a1, *a2))
  {
    uint64_t v11 = type metadata accessor for CP_SubscribeRequest.RecordAck(0);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, (char *)a1 + *(int *)(v11 + 20), v4);
    v12(v8, (char *)a2 + *(int *)(v11 + 20), v4);
    lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    char v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static CP_SubscribeRequest.OneOf_Operation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = a2;
  uint64_t v3 = type metadata accessor for CP_SubscribeRequest.RecordAck(0);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (uint64_t *)((char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (uint64_t *)((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (uint64_t *)((char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v10);
  char v14 = (uint64_t *)((char *)&v24 - v13);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CP_SubscribeRequest.OneOf_Operation, CP_SubscribeRequest.OneOf_Operation));
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (uint64_t)&v18[*(int *)(v16 + 56)];
  outlined init with copy of CP_SequenceNumber(a1, (uint64_t)v18, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
  outlined init with copy of CP_SequenceNumber(v25, v19, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with copy of CP_SequenceNumber((uint64_t)v18, (uint64_t)v14, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of CP_SequenceNumber(v19, (uint64_t)v8, type metadata accessor for CP_SubscribeRequest.Initialize);
      char v20 = specialized static CP_SubscribeRequest.Initialize.== infix(_:_:)(v14, v8);
      outlined destroy of CP_SequenceNumber((uint64_t)v8, type metadata accessor for CP_SubscribeRequest.Initialize);
      outlined destroy of CP_SequenceNumber((uint64_t)v14, type metadata accessor for CP_SubscribeRequest.Initialize);
      outlined destroy of CP_SequenceNumber((uint64_t)v18, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
      return v20 & 1;
    }
    uint64_t v21 = type metadata accessor for CP_SubscribeRequest.Initialize;
    uint64_t v22 = (uint64_t)v14;
    goto LABEL_9;
  }
  outlined init with copy of CP_SequenceNumber((uint64_t)v18, (uint64_t)v12, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v21 = type metadata accessor for CP_SubscribeRequest.RecordAck;
    uint64_t v22 = (uint64_t)v12;
LABEL_9:
    outlined destroy of CP_SequenceNumber(v22, v21);
    outlined destroy of UUID?((uint64_t)v18, &demangling cache variable for type metadata for (CP_SubscribeRequest.OneOf_Operation, CP_SubscribeRequest.OneOf_Operation));
LABEL_12:
    char v20 = 0;
    return v20 & 1;
  }
  outlined init with take of CP_SequenceNumber(v19, (uint64_t)v5, type metadata accessor for CP_SubscribeRequest.RecordAck);
  if ((specialized static Array<A>.== infix(_:_:)(*v12, *v5) & 1) == 0
    || (type metadata accessor for UnknownStorage(),
        lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]), (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0))
  {
    outlined destroy of CP_SequenceNumber((uint64_t)v5, type metadata accessor for CP_SubscribeRequest.RecordAck);
    outlined destroy of CP_SequenceNumber((uint64_t)v12, type metadata accessor for CP_SubscribeRequest.RecordAck);
    outlined destroy of CP_SequenceNumber((uint64_t)v18, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
    goto LABEL_12;
  }
  outlined destroy of CP_SequenceNumber((uint64_t)v5, type metadata accessor for CP_SubscribeRequest.RecordAck);
  outlined destroy of CP_SequenceNumber((uint64_t)v12, type metadata accessor for CP_SubscribeRequest.RecordAck);
  outlined destroy of CP_SequenceNumber((uint64_t)v18, type metadata accessor for CP_SubscribeRequest.OneOf_Operation);
  char v20 = 1;
  return v20 & 1;
}

uint64_t specialized static CP_SubscribeRequest.Initialize.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v47 = *(void *)(v4 - 8);
  uint64_t v48 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v46 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v45 = (char *)&v42 - v7;
  uint64_t v8 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v49 = (uint64_t)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CP_EncryptionID?, CP_EncryptionID?));
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  char v20 = (char *)&v42 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v42 - v21;
  if (*a1 == *a2 && a1[1] == a2[1] || (char v23 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if ((specialized static Array<A>.== infix(_:_:)(a1[2], a2[2]) & 1) == 0) {
      goto LABEL_16;
    }
    uint64_t v44 = v17;
    uint64_t v24 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a1 + *(int *)(v24 + 40), (uint64_t)v22, &demangling cache variable for type metadata for CP_EncryptionID?);
    uint64_t v43 = v24;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a2 + *(int *)(v24 + 40), (uint64_t)v20, &demangling cache variable for type metadata for CP_EncryptionID?);
    uint64_t v25 = (uint64_t)&v13[*(int *)(v11 + 48)];
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for CP_EncryptionID?);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v20, v25, &demangling cache variable for type metadata for CP_EncryptionID?);
    uint64_t v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v26((uint64_t)v13, 1, v8) == 1)
    {
      outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for CP_EncryptionID?);
      outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for CP_EncryptionID?);
      if (v26(v25, 1, v8) == 1)
      {
        outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for CP_EncryptionID?);
LABEL_8:
        if ((specialized static Array<A>.== infix(_:_:)(a1[3], a2[3]) & 1) != 0 && a1[4] == a2[4] && a1[5] == a2[5])
        {
          uint64_t v27 = v43;
          uint64_t v28 = (char *)a1 + *(int *)(v43 + 36);
          uint64_t v30 = v47;
          uint64_t v29 = v48;
          uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
          uint64_t v32 = v45;
          v31(v45, v28, v48);
          uint64_t v33 = (char *)a2 + *(int *)(v27 + 36);
          char v34 = v46;
          v31(v46, v33, v29);
          lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v35 = *(void (**)(char *, uint64_t))(v30 + 8);
          v35(v34, v29);
          v35(v32, v29);
          return v23 & 1;
        }
LABEL_16:
        char v23 = 0;
        return v23 & 1;
      }
    }
    else
    {
      uint64_t v36 = (uint64_t)v44;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v13, (uint64_t)v44, &demangling cache variable for type metadata for CP_EncryptionID?);
      if (v26(v25, 1, v8) != 1)
      {
        uint64_t v40 = v49;
        outlined init with take of CP_SequenceNumber(v25, v49, type metadata accessor for CP_EncryptionID);
        if (specialized static Data.== infix(_:_:)(*(void *)v36, *(void *)(v36 + 8), *(void *)v40, *(void *)(v40 + 8)))
        {
          lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
          char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of CP_SequenceNumber(v40, type metadata accessor for CP_EncryptionID);
          outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for CP_EncryptionID?);
          outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for CP_EncryptionID?);
          outlined destroy of CP_SequenceNumber(v36, type metadata accessor for CP_EncryptionID);
          outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for CP_EncryptionID?);
          if ((v41 & 1) == 0) {
            goto LABEL_16;
          }
          goto LABEL_8;
        }
        outlined destroy of CP_SequenceNumber(v40, type metadata accessor for CP_EncryptionID);
        outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for CP_EncryptionID?);
        outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for CP_EncryptionID?);
        outlined destroy of CP_SequenceNumber(v36, type metadata accessor for CP_EncryptionID);
        uint64_t v38 = (uint64_t)v13;
        uint64_t v37 = &demangling cache variable for type metadata for CP_EncryptionID?;
LABEL_15:
        outlined destroy of UUID?(v38, v37);
        goto LABEL_16;
      }
      outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for CP_EncryptionID?);
      outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for CP_EncryptionID?);
      outlined destroy of CP_SequenceNumber(v36, type metadata accessor for CP_EncryptionID);
    }
    uint64_t v37 = &demangling cache variable for type metadata for (CP_EncryptionID?, CP_EncryptionID?);
    uint64_t v38 = (uint64_t)v13;
    goto LABEL_15;
  }
  return v23 & 1;
}

uint64_t specialized static CP_PublishResponse.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v51 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v50 = (char *)&v44 - v8;
  uint64_t v9 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v49 = (uint64_t *)((char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CP_SequenceNumber?, CP_SequenceNumber?));
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v44 - v18;
  MEMORY[0x1F4188790](v17);
  uint64_t v22 = (char *)&v44 - v21;
  uint64_t v23 = *a1;
  if (*((unsigned char *)a1 + 8) == 1) {
    uint64_t v23 = qword_1B1145ED0[v23];
  }
  uint64_t v24 = *a2;
  if (*((unsigned char *)a2 + 8))
  {
    switch(v24)
    {
      case 1:
        if (v23 != 1) {
          goto LABEL_24;
        }
        goto LABEL_8;
      case 2:
        if (v23 != 3) {
          goto LABEL_24;
        }
        goto LABEL_8;
      case 3:
        if (v23 != 4) {
          goto LABEL_24;
        }
        goto LABEL_8;
      case 4:
        if (v23 != 5) {
          goto LABEL_24;
        }
        goto LABEL_8;
      case 5:
        if (v23 != 6) {
          goto LABEL_24;
        }
        goto LABEL_8;
      case 6:
        if (v23 != 7) {
          goto LABEL_24;
        }
        goto LABEL_8;
      case 7:
        if (v23 != 8) {
          goto LABEL_24;
        }
        goto LABEL_8;
      case 8:
        if (v23 != 1000) {
          goto LABEL_24;
        }
        goto LABEL_8;
      default:
        if (!v23) {
          goto LABEL_8;
        }
        goto LABEL_24;
    }
  }
  if (v23 != v24) {
    goto LABEL_24;
  }
LABEL_8:
  uint64_t v47 = v5;
  uint64_t v48 = (void *)v20;
  if (a1[2] == a2[2] && a1[3] == a2[3] || (char v25 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v46 = v4;
    uint64_t v26 = type metadata accessor for CP_PublishResponse(0);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a1 + *(int *)(v26 + 28), (uint64_t)v22, &demangling cache variable for type metadata for CP_SequenceNumber?);
    uint64_t v45 = v26;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a2 + *(int *)(v26 + 28), (uint64_t)v19, &demangling cache variable for type metadata for CP_SequenceNumber?);
    uint64_t v27 = (uint64_t)&v14[*(int *)(v12 + 48)];
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v22, (uint64_t)v14, &demangling cache variable for type metadata for CP_SequenceNumber?);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v19, v27, &demangling cache variable for type metadata for CP_SequenceNumber?);
    uint64_t v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    if (v28((uint64_t)v14, 1, v9) == 1)
    {
      outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for CP_SequenceNumber?);
      outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for CP_SequenceNumber?);
      if (v28(v27, 1, v9) == 1)
      {
        outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for CP_SequenceNumber?);
        uint64_t v29 = v46;
LABEL_14:
        uint64_t v30 = v45;
        uint64_t v31 = (uint64_t)a1 + *(int *)(v45 + 24);
        uint64_t v32 = v47;
        uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v47 + 16);
        char v34 = v50;
        v33(v50, v31, v29);
        uint64_t v35 = (uint64_t)a2 + *(int *)(v30 + 24);
        uint64_t v36 = v51;
        v33(v51, v35, v29);
        lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v37 = *(void (**)(char *, uint64_t))(v32 + 8);
        v37(v36, v29);
        v37(v34, v29);
        return v25 & 1;
      }
    }
    else
    {
      uint64_t v38 = v48;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v14, (uint64_t)v48, &demangling cache variable for type metadata for CP_SequenceNumber?);
      if (v28(v27, 1, v9) != 1)
      {
        char v41 = v49;
        outlined init with take of CP_SequenceNumber(v27, (uint64_t)v49, type metadata accessor for CP_SequenceNumber);
        if (*v38 == *v41 && v38[1] == v41[1])
        {
          lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
          uint64_t v29 = v46;
          char v42 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of CP_SequenceNumber((uint64_t)v41, type metadata accessor for CP_SequenceNumber);
          outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for CP_SequenceNumber?);
          outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for CP_SequenceNumber?);
          outlined destroy of CP_SequenceNumber((uint64_t)v38, type metadata accessor for CP_SequenceNumber);
          outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for CP_SequenceNumber?);
          if (v42) {
            goto LABEL_14;
          }
LABEL_24:
          char v25 = 0;
          return v25 & 1;
        }
        outlined destroy of CP_SequenceNumber((uint64_t)v41, type metadata accessor for CP_SequenceNumber);
        outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for CP_SequenceNumber?);
        outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for CP_SequenceNumber?);
        outlined destroy of CP_SequenceNumber((uint64_t)v38, type metadata accessor for CP_SequenceNumber);
        uint64_t v40 = (uint64_t)v14;
        uint64_t v39 = &demangling cache variable for type metadata for CP_SequenceNumber?;
LABEL_23:
        outlined destroy of UUID?(v40, v39);
        goto LABEL_24;
      }
      outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for CP_SequenceNumber?);
      outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for CP_SequenceNumber?);
      outlined destroy of CP_SequenceNumber((uint64_t)v38, type metadata accessor for CP_SequenceNumber);
    }
    uint64_t v39 = &demangling cache variable for type metadata for (CP_SequenceNumber?, CP_SequenceNumber?);
    uint64_t v40 = (uint64_t)v14;
    goto LABEL_23;
  }
  return v25 & 1;
}

uint64_t specialized static CP_SequenceNumber.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v16 - v9;
  if (*(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1))
  {
    uint64_t v11 = type metadata accessor for CP_SequenceNumber(0);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, &a1[*(int *)(v11 + 24)], v4);
    v12(v8, &a2[*(int *)(v11 + 24)], v4);
    lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static CP_PublishRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  char v42 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  char v41 = (char *)&v37 - v7;
  uint64_t v8 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v38 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CP_PublishRequest.OneOf_Operation?, CP_PublishRequest.OneOf_Operation?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v37 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v37 - v22;
  uint64_t v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)&v37 - v22, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  uint64_t v40 = a2;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a2, (uint64_t)v21, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  uint64_t v24 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, v24, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  char v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v25((uint64_t)v14, 1, v8) != 1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
    if (v25(v24, 1, v8) != 1)
    {
      uint64_t v26 = v38;
      outlined init with take of CP_SequenceNumber(v24, v38, type metadata accessor for CP_PublishRequest.OneOf_Operation);
      char v27 = specialized static CP_PublishRequest.OneOf_Operation.== infix(_:_:)((uint64_t)v18, v26);
      outlined destroy of CP_SequenceNumber(v26, type metadata accessor for CP_PublishRequest.OneOf_Operation);
      outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
      outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
      outlined destroy of CP_SequenceNumber((uint64_t)v18, type metadata accessor for CP_PublishRequest.OneOf_Operation);
      outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
      if (v27) {
        goto LABEL_8;
      }
LABEL_9:
      char v34 = 0;
      return v34 & 1;
    }
    outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
    outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
    outlined destroy of CP_SequenceNumber((uint64_t)v18, type metadata accessor for CP_PublishRequest.OneOf_Operation);
LABEL_6:
    outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for (CP_PublishRequest.OneOf_Operation?, CP_PublishRequest.OneOf_Operation?));
    goto LABEL_9;
  }
  outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  if (v25(v24, 1, v8) != 1) {
    goto LABEL_6;
  }
  outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
LABEL_8:
  uint64_t v28 = type metadata accessor for CP_PublishRequest(0);
  uint64_t v30 = v43;
  uint64_t v29 = v44;
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  uint64_t v32 = v41;
  v31(v41, v39 + *(int *)(v28 + 20), v44);
  uint64_t v33 = v42;
  v31(v42, v40 + *(int *)(v28 + 20), v29);
  lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v35 = *(void (**)(char *, uint64_t))(v30 + 8);
  v35(v33, v29);
  v35(v32, v29);
  return v34 & 1;
}

uint64_t specialized static CP_PublishRequest.UpdatedEncryptionID.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v45 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v44 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v43 = (char *)&v40 - v7;
  uint64_t v8 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v42 = (uint64_t)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CP_EncryptionID?, CP_EncryptionID?));
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  uint64_t v20 = (char *)&v40 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v40 - v21;
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *((void *)a1 + 1);
  uint64_t v46 = a1;
  uint64_t v47 = a2;
  if (v23 == *(void *)a2 && v24 == *((void *)a2 + 1)
    || (char v25 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v41 = v4;
    uint64_t v26 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v46[*(int *)(v26 + 24)], (uint64_t)v22, &demangling cache variable for type metadata for CP_EncryptionID?);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v47[*(int *)(v26 + 24)], (uint64_t)v20, &demangling cache variable for type metadata for CP_EncryptionID?);
    uint64_t v27 = (uint64_t)&v13[*(int *)(v11 + 48)];
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for CP_EncryptionID?);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v20, v27, &demangling cache variable for type metadata for CP_EncryptionID?);
    uint64_t v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v28((uint64_t)v13, 1, v8) == 1)
    {
      outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for CP_EncryptionID?);
      outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for CP_EncryptionID?);
      if (v28(v27, 1, v8) == 1)
      {
        outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for CP_EncryptionID?);
LABEL_12:
        uint64_t v33 = v45;
        char v34 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
        uint64_t v35 = v43;
        uint64_t v36 = v41;
        v34(v43, &v46[*(int *)(v26 + 20)], v41);
        uint64_t v37 = v44;
        v34(v44, &v47[*(int *)(v26 + 20)], v36);
        lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v38 = *(void (**)(char *, uint64_t))(v33 + 8);
        v38(v37, v36);
        v38(v35, v36);
        return v25 & 1;
      }
    }
    else
    {
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for CP_EncryptionID?);
      if (v28(v27, 1, v8) != 1)
      {
        uint64_t v31 = v42;
        outlined init with take of CP_SequenceNumber(v27, v42, type metadata accessor for CP_EncryptionID);
        if (specialized static Data.== infix(_:_:)(*(void *)v17, *((void *)v17 + 1), *(void *)v31, *(void *)(v31 + 8)))
        {
          lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
          char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of CP_SequenceNumber(v31, type metadata accessor for CP_EncryptionID);
          outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for CP_EncryptionID?);
          outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for CP_EncryptionID?);
          outlined destroy of CP_SequenceNumber((uint64_t)v17, type metadata accessor for CP_EncryptionID);
          outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for CP_EncryptionID?);
          if (v32) {
            goto LABEL_12;
          }
LABEL_15:
          char v25 = 0;
          return v25 & 1;
        }
        outlined destroy of CP_SequenceNumber(v31, type metadata accessor for CP_EncryptionID);
        outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for CP_EncryptionID?);
        outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for CP_EncryptionID?);
        outlined destroy of CP_SequenceNumber((uint64_t)v17, type metadata accessor for CP_EncryptionID);
        uint64_t v30 = (uint64_t)v13;
        uint64_t v29 = &demangling cache variable for type metadata for CP_EncryptionID?;
LABEL_14:
        outlined destroy of UUID?(v30, v29);
        goto LABEL_15;
      }
      outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for CP_EncryptionID?);
      outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for CP_EncryptionID?);
      outlined destroy of CP_SequenceNumber((uint64_t)v17, type metadata accessor for CP_EncryptionID);
    }
    uint64_t v29 = &demangling cache variable for type metadata for (CP_EncryptionID?, CP_EncryptionID?);
    uint64_t v30 = (uint64_t)v13;
    goto LABEL_14;
  }
  return v25 & 1;
}

uint64_t specialized static CP_Record.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v71 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v70 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v69 = (char *)&v65 - v7;
  uint64_t v77 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v74 = *(void *)(v77 - 8);
  MEMORY[0x1F4188790](v77);
  uint64_t v72 = (uint64_t)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CP_EncryptionID?, CP_EncryptionID?));
  MEMORY[0x1F4188790](v9);
  long long v78 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v73 = (uint64_t)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v75 = (char *)&v65 - v15;
  MEMORY[0x1F4188790](v14);
  uint64_t v76 = (char *)&v65 - v16;
  uint64_t v17 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  long long v79 = (uint64_t *)((char *)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CP_SequenceNumber?, CP_SequenceNumber?));
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  uint64_t v24 = MEMORY[0x1F4188790](v23 - 8);
  uint64_t v80 = (uint64_t)&v65 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v28 = (char *)&v65 - v27;
  MEMORY[0x1F4188790](v26);
  uint64_t v30 = (char *)&v65 - v29;
  uint64_t v31 = *a1;
  uint64_t v32 = a1[1];
  Swift::String v81 = a1;
  long long v82 = a2;
  if (v31 == *a2 && v32 == a2[1] || (char v33 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v35 = v81;
    char v34 = v82;
    if ((specialized static Data.== infix(_:_:)(v81[2], v81[3], v82[2], v82[3]) & 1) == 0) {
      goto LABEL_23;
    }
    uint64_t v66 = v9;
    uint64_t v68 = v4;
    uint64_t v36 = type metadata accessor for CP_Record(0);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v35 + *(int *)(v36 + 36), (uint64_t)v30, &demangling cache variable for type metadata for CP_SequenceNumber?);
    uint64_t v67 = v36;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v34 + *(int *)(v36 + 36), (uint64_t)v28, &demangling cache variable for type metadata for CP_SequenceNumber?);
    uint64_t v37 = (uint64_t)&v22[*(int *)(v20 + 48)];
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v30, (uint64_t)v22, &demangling cache variable for type metadata for CP_SequenceNumber?);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v28, v37, &demangling cache variable for type metadata for CP_SequenceNumber?);
    uint64_t v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
    if (v38((uint64_t)v22, 1, v17) == 1)
    {
      outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for CP_SequenceNumber?);
      outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for CP_SequenceNumber?);
      if (v38(v37, 1, v17) == 1)
      {
        outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for CP_SequenceNumber?);
        uint64_t v39 = v68;
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v46 = v80;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v22, v80, &demangling cache variable for type metadata for CP_SequenceNumber?);
      if (v38(v37, 1, v17) != 1)
      {
        uint64_t v49 = v79;
        outlined init with take of CP_SequenceNumber(v37, (uint64_t)v79, type metadata accessor for CP_SequenceNumber);
        if (*(void *)v46 != *v49 || *(void *)(v46 + 8) != v49[1])
        {
          uint64_t v51 = type metadata accessor for CP_SequenceNumber;
          outlined destroy of CP_SequenceNumber((uint64_t)v49, type metadata accessor for CP_SequenceNumber);
          uint64_t v52 = &demangling cache variable for type metadata for CP_SequenceNumber?;
          goto LABEL_21;
        }
        lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        uint64_t v39 = v68;
        char v50 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of CP_SequenceNumber((uint64_t)v49, type metadata accessor for CP_SequenceNumber);
        outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for CP_SequenceNumber?);
        outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for CP_SequenceNumber?);
        outlined destroy of CP_SequenceNumber(v46, type metadata accessor for CP_SequenceNumber);
        outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for CP_SequenceNumber?);
        if ((v50 & 1) == 0) {
          goto LABEL_23;
        }
LABEL_8:
        uint64_t v41 = v81;
        uint64_t v40 = v82;
        if (!specialized static Array<A>.== infix(_:_:)((void *)v81[4], (void *)v82[4])) {
          goto LABEL_23;
        }
        uint64_t v42 = v67;
        uint64_t v30 = v76;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v41 + *(int *)(v67 + 40), (uint64_t)v76, &demangling cache variable for type metadata for CP_EncryptionID?);
        uint64_t v28 = v75;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v40 + *(int *)(v42 + 40), (uint64_t)v75, &demangling cache variable for type metadata for CP_EncryptionID?);
        uint64_t v22 = v78;
        uint64_t v43 = (uint64_t)&v78[*(int *)(v66 + 48)];
        outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v30, (uint64_t)v78, &demangling cache variable for type metadata for CP_EncryptionID?);
        outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v28, v43, &demangling cache variable for type metadata for CP_EncryptionID?);
        uint64_t v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48);
        uint64_t v45 = v77;
        if (v44((uint64_t)v22, 1, v77) == 1)
        {
          outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for CP_EncryptionID?);
          outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for CP_EncryptionID?);
          if (v44(v43, 1, v45) == 1)
          {
            outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for CP_EncryptionID?);
            goto LABEL_30;
          }
          goto LABEL_27;
        }
        uint64_t v46 = v73;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v22, v73, &demangling cache variable for type metadata for CP_EncryptionID?);
        if (v44(v43, 1, v45) == 1)
        {
          outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for CP_EncryptionID?);
          outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for CP_EncryptionID?);
          outlined destroy of CP_SequenceNumber(v46, type metadata accessor for CP_EncryptionID);
LABEL_27:
          uint64_t v47 = &demangling cache variable for type metadata for (CP_EncryptionID?, CP_EncryptionID?);
          goto LABEL_15;
        }
        uint64_t v54 = v72;
        outlined init with take of CP_SequenceNumber(v43, v72, type metadata accessor for CP_EncryptionID);
        if (specialized static Data.== infix(_:_:)(*(void *)v46, *(void *)(v46 + 8), *(void *)v54, *(void *)(v54 + 8)))
        {
          lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
          char v55 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of CP_SequenceNumber(v54, type metadata accessor for CP_EncryptionID);
          outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for CP_EncryptionID?);
          outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for CP_EncryptionID?);
          outlined destroy of CP_SequenceNumber(v46, type metadata accessor for CP_EncryptionID);
          outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for CP_EncryptionID?);
          if (v55)
          {
LABEL_30:
            uint64_t v56 = v82;
            if (v41[5] == v82[5])
            {
              uint64_t v57 = v67;
              uint64_t v58 = (uint64_t)v41 + *(int *)(v67 + 32);
              uint64_t v59 = v71;
              uint64_t v60 = *(void (**)(char *, uint64_t, uint64_t))(v71 + 16);
              uint64_t v61 = v69;
              v60(v69, v58, v39);
              uint64_t v62 = (uint64_t)v56 + *(int *)(v57 + 32);
              unint64_t v63 = v70;
              v60(v70, v62, v39);
              lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
              char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
              uint64_t v64 = *(void (**)(char *, uint64_t))(v59 + 8);
              v64(v63, v39);
              v64(v61, v39);
              return v33 & 1;
            }
          }
LABEL_23:
          char v33 = 0;
          return v33 & 1;
        }
        uint64_t v51 = type metadata accessor for CP_EncryptionID;
        outlined destroy of CP_SequenceNumber(v54, type metadata accessor for CP_EncryptionID);
        uint64_t v52 = &demangling cache variable for type metadata for CP_EncryptionID?;
LABEL_21:
        outlined destroy of UUID?((uint64_t)v28, v52);
        outlined destroy of UUID?((uint64_t)v30, v52);
        outlined destroy of CP_SequenceNumber(v46, v51);
        uint64_t v48 = (uint64_t)v22;
        uint64_t v47 = v52;
        goto LABEL_22;
      }
      outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for CP_SequenceNumber?);
      outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for CP_SequenceNumber?);
      outlined destroy of CP_SequenceNumber(v46, type metadata accessor for CP_SequenceNumber);
    }
    uint64_t v47 = &demangling cache variable for type metadata for (CP_SequenceNumber?, CP_SequenceNumber?);
LABEL_15:
    uint64_t v48 = (uint64_t)v22;
LABEL_22:
    outlined destroy of UUID?(v48, v47);
    goto LABEL_23;
  }
  return v33 & 1;
}

uint64_t specialized static CP_PublishRequest.OneOf_Operation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CP_Record(0);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (uint64_t *)((char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (uint64_t *)((char *)&v27 - v14);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CP_PublishRequest.OneOf_Operation, CP_PublishRequest.OneOf_Operation));
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = (uint64_t)&v19[*(int *)(v17 + 56)];
  outlined init with copy of CP_SequenceNumber(a1, (uint64_t)v19, type metadata accessor for CP_PublishRequest.OneOf_Operation);
  outlined init with copy of CP_SequenceNumber(a2, v20, type metadata accessor for CP_PublishRequest.OneOf_Operation);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with copy of CP_SequenceNumber((uint64_t)v19, (uint64_t)v13, type metadata accessor for CP_PublishRequest.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined init with take of CP_SequenceNumber(v20, (uint64_t)v6, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
      char v21 = specialized static CP_PublishRequest.UpdatedEncryptionID.== infix(_:_:)(v13, v6);
      outlined destroy of CP_SequenceNumber((uint64_t)v6, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
      uint64_t v22 = (uint64_t)v13;
      uint64_t v23 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID;
LABEL_9:
      outlined destroy of CP_SequenceNumber(v22, v23);
      outlined destroy of CP_SequenceNumber((uint64_t)v19, type metadata accessor for CP_PublishRequest.OneOf_Operation);
      return v21 & 1;
    }
    uint64_t v24 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID;
    uint64_t v25 = (uint64_t)v13;
  }
  else
  {
    outlined init with copy of CP_SequenceNumber((uint64_t)v19, (uint64_t)v15, type metadata accessor for CP_PublishRequest.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of CP_SequenceNumber(v20, (uint64_t)v9, type metadata accessor for CP_Record);
      char v21 = specialized static CP_Record.== infix(_:_:)(v15, v9);
      outlined destroy of CP_SequenceNumber((uint64_t)v9, type metadata accessor for CP_Record);
      uint64_t v22 = (uint64_t)v15;
      uint64_t v23 = type metadata accessor for CP_Record;
      goto LABEL_9;
    }
    uint64_t v24 = type metadata accessor for CP_Record;
    uint64_t v25 = (uint64_t)v15;
  }
  outlined destroy of CP_SequenceNumber(v25, v24);
  outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for (CP_PublishRequest.OneOf_Operation, CP_PublishRequest.OneOf_Operation));
  char v21 = 0;
  return v21 & 1;
}

uint64_t specialized static CP_EncryptionID.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v16 - v9;
  if (specialized static Data.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)))
  {
    uint64_t v11 = type metadata accessor for CP_EncryptionID(0);
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v12(v10, a1 + *(int *)(v11 + 20), v4);
    v12(v8, a2 + *(int *)(v11 + 20), v4);
    lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static CP_SystemEvent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v18 - v9;
  int v11 = *(unsigned __int8 *)(a1 + 16);
  int v12 = *(unsigned __int8 *)(a2 + 16);
  if (v11 == 255)
  {
    if (v12 == 255)
    {
LABEL_13:
      uint64_t v14 = type metadata accessor for CP_SystemEvent(0);
      uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v15(v10, a1 + *(int *)(v14 + 20), v4);
      v15(v8, a2 + *(int *)(v14 + 20), v4);
      lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
      v16(v8, v4);
      v16(v10, v4);
      return v13 & 1;
    }
    goto LABEL_5;
  }
  if (v12 == 255)
  {
LABEL_5:
    char v13 = 0;
    return v13 & 1;
  }
  if (v11)
  {
    if ((v12 & 1) == 0) {
      goto LABEL_5;
    }
  }
  else if (v12)
  {
    goto LABEL_5;
  }
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)) {
    goto LABEL_13;
  }
  char v13 = 0;
  if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
    goto LABEL_13;
  }
  return v13 & 1;
}

uint64_t specialized static CP_KeyValue.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v17 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (specialized static Data.== infix(_:_:)(*((void *)a1 + 2), *((void *)a1 + 3), *((void *)a2 + 2), *((void *)a2 + 3)))
    {
      uint64_t v13 = type metadata accessor for CP_KeyValue(0);
      uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v14(v10, &a1[*(int *)(v13 + 24)], v4);
      v14(v8, &a2[*(int *)(v13 + 24)], v4);
      lazy protocol witness table accessor for type CP_Record and conformance CP_Record((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
      v15(v8, v4);
      v15(v10, v4);
    }
    else
    {
      char v12 = 0;
    }
  }
  return v12 & 1;
}

uint64_t specialized CP_ResponseStatus.init(rawValue:)(uint64_t result)
{
  switch(result)
  {
    case 0:
    case 2:
      return result;
    case 1:
      uint64_t result = 1;
      break;
    case 3:
      uint64_t result = 2;
      break;
    case 4:
      uint64_t result = 3;
      break;
    case 5:
      uint64_t result = 4;
      break;
    case 6:
      uint64_t result = 5;
      break;
    case 7:
      uint64_t result = 6;
      break;
    case 8:
      uint64_t result = 7;
      break;
    default:
      if (result == 1000) {
        uint64_t result = 8;
      }
      break;
  }
  return result;
}

uint64_t type metadata accessor for CP_Record(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_Record);
}

uint64_t type metadata accessor for CP_SequenceNumber(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_SequenceNumber);
}

uint64_t type metadata accessor for CP_EncryptionID(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_EncryptionID);
}

uint64_t outlined init with take of CP_SequenceNumber(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of CP_SequenceNumber(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of CP_SequenceNumber(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for CP_KeyValue(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_KeyValue);
}

uint64_t type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_TopicSubscribersRequest.OneOf_Operation);
}

uint64_t type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_TopicSubscribersRequest.TopicTerminatedAck);
}

uint64_t type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_TopicSubscribersRequest.TopicTerminationRequest);
}

uint64_t type metadata accessor for CP_TopicSubscribersRequest(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_TopicSubscribersRequest);
}

uint64_t type metadata accessor for CP_TopicSubscribers(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_TopicSubscribers);
}

uint64_t type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_TopicSubscribers.TopicSubscribersInfo);
}

uint64_t type metadata accessor for CP_TopicSubscribers.TerminateTopic(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_TopicSubscribers.TerminateTopic);
}

uint64_t outlined copy of CP_SystemEvent.OneOf_Event?(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return outlined copy of CP_SystemEvent.OneOf_Event();
  }
  return result;
}

uint64_t outlined copy of CP_SystemEvent.OneOf_Event()
{
  return swift_bridgeObjectRetain();
}

uint64_t outlined consume of CP_SystemEvent.OneOf_Event?(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return outlined consume of CP_SystemEvent.OneOf_Event();
  }
  return result;
}

uint64_t outlined consume of CP_SystemEvent.OneOf_Event()
{
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for CP_SystemEvent(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_SystemEvent);
}

uint64_t type metadata accessor for CP_SubscribeRequest.OneOf_Operation(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_SubscribeRequest.OneOf_Operation);
}

uint64_t type metadata accessor for CP_SubscribeRequest.Initialize(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_SubscribeRequest.Initialize);
}

uint64_t type metadata accessor for CP_SubscribeRequest.RecordAck(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_SubscribeRequest.RecordAck);
}

uint64_t type metadata accessor for CP_SubscribeRequest(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_SubscribeRequest);
}

uint64_t type metadata accessor for CP_SubscribeResponse.OneOf_Operation(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_SubscribeResponse.OneOf_Operation);
}

uint64_t type metadata accessor for CP_SubscribeResponse.InitializeAck(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_SubscribeResponse.InitializeAck);
}

uint64_t type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
}

uint64_t type metadata accessor for CP_SubscribeResponse.TopicUpdate(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_SubscribeResponse.TopicUpdate);
}

uint64_t type metadata accessor for CP_SubscribeResponse(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_SubscribeResponse);
}

uint64_t type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
}

uint64_t type metadata accessor for CP_PublishRequest.OneOf_Operation(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_PublishRequest.OneOf_Operation);
}

uint64_t type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_PublishRequest.UpdatedEncryptionID);
}

uint64_t type metadata accessor for CP_PublishRequest(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_PublishRequest);
}

uint64_t type metadata accessor for CP_PublishResponse(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_PublishResponse);
}

uint64_t type metadata accessor for CP_UpsertTopicMetadataRequest(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_UpsertTopicMetadataRequest);
}

uint64_t type metadata accessor for CP_UpsertTopicMetadataResponse(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_UpsertTopicMetadataResponse);
}

uint64_t type metadata accessor for CP_CreateTopicRequest(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_CreateTopicRequest);
}

uint64_t type metadata accessor for CP_CreateTopicResponse(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_CreateTopicResponse);
}

uint64_t type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_CreateTopicResponse.ClientTopicConfig);
}

uint64_t type metadata accessor for CP_FetchTopicsResponse(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_FetchTopicsResponse);
}

uint64_t lazy protocol witness table accessor for type CP_Record and conformance CP_Record(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CP_TopicSubscribersRequest.TopicTerminationRequest.Reason and conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason()
{
  unint64_t result = lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest.Reason and conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason;
  if (!lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest.Reason and conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest.Reason and conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest.Reason and conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason;
  if (!lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest.Reason and conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest.Reason and conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest.Reason and conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason;
  if (!lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest.Reason and conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest.Reason and conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest.Reason and conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason;
  if (!lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest.Reason and conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest.Reason and conformance CP_TopicSubscribersRequest.TopicTerminationRequest.Reason);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CP_ResponseStatus and conformance CP_ResponseStatus()
{
  unint64_t result = lazy protocol witness table cache variable for type CP_ResponseStatus and conformance CP_ResponseStatus;
  if (!lazy protocol witness table cache variable for type CP_ResponseStatus and conformance CP_ResponseStatus)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CP_ResponseStatus and conformance CP_ResponseStatus);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CP_ResponseStatus and conformance CP_ResponseStatus;
  if (!lazy protocol witness table cache variable for type CP_ResponseStatus and conformance CP_ResponseStatus)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CP_ResponseStatus and conformance CP_ResponseStatus);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CP_ResponseStatus and conformance CP_ResponseStatus;
  if (!lazy protocol witness table cache variable for type CP_ResponseStatus and conformance CP_ResponseStatus)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CP_ResponseStatus and conformance CP_ResponseStatus);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CP_ResponseStatus and conformance CP_ResponseStatus;
  if (!lazy protocol witness table cache variable for type CP_ResponseStatus and conformance CP_ResponseStatus)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CP_ResponseStatus and conformance CP_ResponseStatus);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CP_SubscribeResponse.TopicUpdate.UpdateEvent and conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent()
{
  unint64_t result = lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate.UpdateEvent and conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent;
  if (!lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate.UpdateEvent and conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate.UpdateEvent and conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate.UpdateEvent and conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent;
  if (!lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate.UpdateEvent and conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate.UpdateEvent and conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate.UpdateEvent and conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent;
  if (!lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate.UpdateEvent and conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate.UpdateEvent and conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate.UpdateEvent and conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent;
  if (!lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate.UpdateEvent and conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate.UpdateEvent and conformance CP_SubscribeResponse.TopicUpdate.UpdateEvent);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CP_CreateTopicRequest.TopicCategory and conformance CP_CreateTopicRequest.TopicCategory()
{
  unint64_t result = lazy protocol witness table cache variable for type CP_CreateTopicRequest.TopicCategory and conformance CP_CreateTopicRequest.TopicCategory;
  if (!lazy protocol witness table cache variable for type CP_CreateTopicRequest.TopicCategory and conformance CP_CreateTopicRequest.TopicCategory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CP_CreateTopicRequest.TopicCategory and conformance CP_CreateTopicRequest.TopicCategory);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CP_CreateTopicRequest.TopicCategory and conformance CP_CreateTopicRequest.TopicCategory;
  if (!lazy protocol witness table cache variable for type CP_CreateTopicRequest.TopicCategory and conformance CP_CreateTopicRequest.TopicCategory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CP_CreateTopicRequest.TopicCategory and conformance CP_CreateTopicRequest.TopicCategory);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CP_CreateTopicRequest.TopicCategory and conformance CP_CreateTopicRequest.TopicCategory;
  if (!lazy protocol witness table cache variable for type CP_CreateTopicRequest.TopicCategory and conformance CP_CreateTopicRequest.TopicCategory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CP_CreateTopicRequest.TopicCategory and conformance CP_CreateTopicRequest.TopicCategory);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CP_CreateTopicRequest.TopicCategory and conformance CP_CreateTopicRequest.TopicCategory;
  if (!lazy protocol witness table cache variable for type CP_CreateTopicRequest.TopicCategory and conformance CP_CreateTopicRequest.TopicCategory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CP_CreateTopicRequest.TopicCategory and conformance CP_CreateTopicRequest.TopicCategory);
  }
  return result;
}

uint64_t type metadata accessor for CP_FetchTopicsRequest(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for CP_FetchTopicsRequest);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CP_ResponseStatus()
{
  return lazy protocol witness table accessor for type [AttachmentLedger_ResponseStatus] and conformance [A](&lazy protocol witness table cache variable for type [CP_ResponseStatus] and conformance [A], &demangling cache variable for type metadata for [CP_ResponseStatus]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CP_TopicSubscribersRequest.TopicTerminationRequest.Reason()
{
  return lazy protocol witness table accessor for type [AttachmentLedger_ResponseStatus] and conformance [A](&lazy protocol witness table cache variable for type [CP_TopicSubscribersRequest.TopicTerminationRequest.Reason] and conformance [A], &demangling cache variable for type metadata for [CP_TopicSubscribersRequest.TopicTerminationRequest.Reason]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CP_SubscribeResponse.TopicUpdate.UpdateEvent()
{
  return lazy protocol witness table accessor for type [AttachmentLedger_ResponseStatus] and conformance [A](&lazy protocol witness table cache variable for type [CP_SubscribeResponse.TopicUpdate.UpdateEvent] and conformance [A], &demangling cache variable for type metadata for [CP_SubscribeResponse.TopicUpdate.UpdateEvent]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CP_CreateTopicRequest.TopicCategory()
{
  return lazy protocol witness table accessor for type [AttachmentLedger_ResponseStatus] and conformance [A](&lazy protocol witness table cache variable for type [CP_CreateTopicRequest.TopicCategory] and conformance [A], &demangling cache variable for type metadata for [CP_CreateTopicRequest.TopicCategory]);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_Record()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_Record and conformance CP_Record, (void (*)(uint64_t))type metadata accessor for CP_Record);
}

uint64_t base witness table accessor for Message in CP_Record()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_Record and conformance CP_Record, (void (*)(uint64_t))type metadata accessor for CP_Record);
}

uint64_t base witness table accessor for Hashable in CP_Record()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_Record and conformance CP_Record, (void (*)(uint64_t))type metadata accessor for CP_Record);
}

uint64_t base witness table accessor for Equatable in CP_Record()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_Record and conformance CP_Record, (void (*)(uint64_t))type metadata accessor for CP_Record);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_KeyValue()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_KeyValue and conformance CP_KeyValue, (void (*)(uint64_t))type metadata accessor for CP_KeyValue);
}

uint64_t base witness table accessor for Message in CP_KeyValue()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_KeyValue and conformance CP_KeyValue, (void (*)(uint64_t))type metadata accessor for CP_KeyValue);
}

uint64_t base witness table accessor for Hashable in CP_KeyValue()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_KeyValue and conformance CP_KeyValue, (void (*)(uint64_t))type metadata accessor for CP_KeyValue);
}

uint64_t base witness table accessor for Equatable in CP_KeyValue()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_KeyValue and conformance CP_KeyValue, (void (*)(uint64_t))type metadata accessor for CP_KeyValue);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_SequenceNumber()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, (void (*)(uint64_t))type metadata accessor for CP_SequenceNumber);
}

uint64_t base witness table accessor for Message in CP_SequenceNumber()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, (void (*)(uint64_t))type metadata accessor for CP_SequenceNumber);
}

uint64_t base witness table accessor for Hashable in CP_SequenceNumber()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, (void (*)(uint64_t))type metadata accessor for CP_SequenceNumber);
}

uint64_t base witness table accessor for Equatable in CP_SequenceNumber()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, (void (*)(uint64_t))type metadata accessor for CP_SequenceNumber);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_EncryptionID()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_EncryptionID and conformance CP_EncryptionID, (void (*)(uint64_t))type metadata accessor for CP_EncryptionID);
}

uint64_t base witness table accessor for Message in CP_EncryptionID()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_EncryptionID and conformance CP_EncryptionID, (void (*)(uint64_t))type metadata accessor for CP_EncryptionID);
}

uint64_t base witness table accessor for Hashable in CP_EncryptionID()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_EncryptionID and conformance CP_EncryptionID, (void (*)(uint64_t))type metadata accessor for CP_EncryptionID);
}

uint64_t base witness table accessor for Equatable in CP_EncryptionID()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_EncryptionID and conformance CP_EncryptionID, (void (*)(uint64_t))type metadata accessor for CP_EncryptionID);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_TopicSubscribersRequest()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest and conformance CP_TopicSubscribersRequest, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribersRequest);
}

uint64_t base witness table accessor for Message in CP_TopicSubscribersRequest()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest and conformance CP_TopicSubscribersRequest, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribersRequest);
}

uint64_t base witness table accessor for Hashable in CP_TopicSubscribersRequest()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest and conformance CP_TopicSubscribersRequest, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribersRequest);
}

uint64_t base witness table accessor for Equatable in CP_TopicSubscribersRequest()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest and conformance CP_TopicSubscribersRequest, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribersRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_TopicSubscribersRequest.TopicTerminatedAck()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminatedAck and conformance CP_TopicSubscribersRequest.TopicTerminatedAck, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
}

uint64_t base witness table accessor for Message in CP_TopicSubscribersRequest.TopicTerminatedAck()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminatedAck and conformance CP_TopicSubscribersRequest.TopicTerminatedAck, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
}

uint64_t base witness table accessor for Hashable in CP_TopicSubscribersRequest.TopicTerminatedAck()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminatedAck and conformance CP_TopicSubscribersRequest.TopicTerminatedAck, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
}

uint64_t base witness table accessor for Equatable in CP_TopicSubscribersRequest.TopicTerminatedAck()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminatedAck and conformance CP_TopicSubscribersRequest.TopicTerminatedAck, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_TopicSubscribersRequest.TopicTerminationRequest()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest and conformance CP_TopicSubscribersRequest.TopicTerminationRequest, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
}

uint64_t base witness table accessor for Message in CP_TopicSubscribersRequest.TopicTerminationRequest()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest and conformance CP_TopicSubscribersRequest.TopicTerminationRequest, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
}

uint64_t base witness table accessor for Hashable in CP_TopicSubscribersRequest.TopicTerminationRequest()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest and conformance CP_TopicSubscribersRequest.TopicTerminationRequest, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
}

uint64_t base witness table accessor for Equatable in CP_TopicSubscribersRequest.TopicTerminationRequest()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest and conformance CP_TopicSubscribersRequest.TopicTerminationRequest, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_TopicSubscribers()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribers and conformance CP_TopicSubscribers, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribers);
}

uint64_t base witness table accessor for Message in CP_TopicSubscribers()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribers and conformance CP_TopicSubscribers, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribers);
}

uint64_t base witness table accessor for Hashable in CP_TopicSubscribers()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribers and conformance CP_TopicSubscribers, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribers);
}

uint64_t base witness table accessor for Equatable in CP_TopicSubscribers()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribers and conformance CP_TopicSubscribers, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribers);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_TopicSubscribers.TopicSubscribersInfo()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribers.TopicSubscribersInfo and conformance CP_TopicSubscribers.TopicSubscribersInfo, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo);
}

uint64_t base witness table accessor for Message in CP_TopicSubscribers.TopicSubscribersInfo()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribers.TopicSubscribersInfo and conformance CP_TopicSubscribers.TopicSubscribersInfo, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo);
}

uint64_t base witness table accessor for Hashable in CP_TopicSubscribers.TopicSubscribersInfo()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribers.TopicSubscribersInfo and conformance CP_TopicSubscribers.TopicSubscribersInfo, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo);
}

uint64_t base witness table accessor for Equatable in CP_TopicSubscribers.TopicSubscribersInfo()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribers.TopicSubscribersInfo and conformance CP_TopicSubscribers.TopicSubscribersInfo, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_TopicSubscribers.TerminateTopic()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribers.TerminateTopic and conformance CP_TopicSubscribers.TerminateTopic, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribers.TerminateTopic);
}

uint64_t base witness table accessor for Message in CP_TopicSubscribers.TerminateTopic()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribers.TerminateTopic and conformance CP_TopicSubscribers.TerminateTopic, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribers.TerminateTopic);
}

uint64_t base witness table accessor for Hashable in CP_TopicSubscribers.TerminateTopic()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribers.TerminateTopic and conformance CP_TopicSubscribers.TerminateTopic, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribers.TerminateTopic);
}

uint64_t base witness table accessor for Equatable in CP_TopicSubscribers.TerminateTopic()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_TopicSubscribers.TerminateTopic and conformance CP_TopicSubscribers.TerminateTopic, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribers.TerminateTopic);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_SystemEvent()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SystemEvent and conformance CP_SystemEvent, (void (*)(uint64_t))type metadata accessor for CP_SystemEvent);
}

uint64_t base witness table accessor for Message in CP_SystemEvent()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SystemEvent and conformance CP_SystemEvent, (void (*)(uint64_t))type metadata accessor for CP_SystemEvent);
}

uint64_t base witness table accessor for Hashable in CP_SystemEvent()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SystemEvent and conformance CP_SystemEvent, (void (*)(uint64_t))type metadata accessor for CP_SystemEvent);
}

uint64_t base witness table accessor for Equatable in CP_SystemEvent()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SystemEvent and conformance CP_SystemEvent, (void (*)(uint64_t))type metadata accessor for CP_SystemEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_SubscribeRequest()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeRequest and conformance CP_SubscribeRequest, (void (*)(uint64_t))type metadata accessor for CP_SubscribeRequest);
}

uint64_t base witness table accessor for Message in CP_SubscribeRequest()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeRequest and conformance CP_SubscribeRequest, (void (*)(uint64_t))type metadata accessor for CP_SubscribeRequest);
}

uint64_t base witness table accessor for Hashable in CP_SubscribeRequest()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeRequest and conformance CP_SubscribeRequest, (void (*)(uint64_t))type metadata accessor for CP_SubscribeRequest);
}

uint64_t base witness table accessor for Equatable in CP_SubscribeRequest()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeRequest and conformance CP_SubscribeRequest, (void (*)(uint64_t))type metadata accessor for CP_SubscribeRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_SubscribeRequest.Initialize()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeRequest.Initialize and conformance CP_SubscribeRequest.Initialize, (void (*)(uint64_t))type metadata accessor for CP_SubscribeRequest.Initialize);
}

uint64_t base witness table accessor for Message in CP_SubscribeRequest.Initialize()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeRequest.Initialize and conformance CP_SubscribeRequest.Initialize, (void (*)(uint64_t))type metadata accessor for CP_SubscribeRequest.Initialize);
}

uint64_t base witness table accessor for Hashable in CP_SubscribeRequest.Initialize()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeRequest.Initialize and conformance CP_SubscribeRequest.Initialize, (void (*)(uint64_t))type metadata accessor for CP_SubscribeRequest.Initialize);
}

uint64_t base witness table accessor for Equatable in CP_SubscribeRequest.Initialize()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeRequest.Initialize and conformance CP_SubscribeRequest.Initialize, (void (*)(uint64_t))type metadata accessor for CP_SubscribeRequest.Initialize);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_SubscribeRequest.RecordAck()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeRequest.RecordAck and conformance CP_SubscribeRequest.RecordAck, (void (*)(uint64_t))type metadata accessor for CP_SubscribeRequest.RecordAck);
}

uint64_t base witness table accessor for Message in CP_SubscribeRequest.RecordAck()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeRequest.RecordAck and conformance CP_SubscribeRequest.RecordAck, (void (*)(uint64_t))type metadata accessor for CP_SubscribeRequest.RecordAck);
}

uint64_t base witness table accessor for Hashable in CP_SubscribeRequest.RecordAck()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeRequest.RecordAck and conformance CP_SubscribeRequest.RecordAck, (void (*)(uint64_t))type metadata accessor for CP_SubscribeRequest.RecordAck);
}

uint64_t base witness table accessor for Equatable in CP_SubscribeRequest.RecordAck()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeRequest.RecordAck and conformance CP_SubscribeRequest.RecordAck, (void (*)(uint64_t))type metadata accessor for CP_SubscribeRequest.RecordAck);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_SubscribeResponse()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse and conformance CP_SubscribeResponse, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse);
}

uint64_t base witness table accessor for Message in CP_SubscribeResponse()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse and conformance CP_SubscribeResponse, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse);
}

uint64_t base witness table accessor for Hashable in CP_SubscribeResponse()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse and conformance CP_SubscribeResponse, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse);
}

uint64_t base witness table accessor for Equatable in CP_SubscribeResponse()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse and conformance CP_SubscribeResponse, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_SubscribeResponse.InitializeAck()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck and conformance CP_SubscribeResponse.InitializeAck, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.InitializeAck);
}

uint64_t base witness table accessor for Message in CP_SubscribeResponse.InitializeAck()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck and conformance CP_SubscribeResponse.InitializeAck, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.InitializeAck);
}

uint64_t base witness table accessor for Hashable in CP_SubscribeResponse.InitializeAck()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck and conformance CP_SubscribeResponse.InitializeAck, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.InitializeAck);
}

uint64_t base witness table accessor for Equatable in CP_SubscribeResponse.InitializeAck()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck and conformance CP_SubscribeResponse.InitializeAck, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.InitializeAck);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_SubscribeResponse.InitializeAck.TopicCatchupSummary()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.TopicCatchupSummary and conformance CP_SubscribeResponse.InitializeAck.TopicCatchupSummary, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
}

uint64_t base witness table accessor for Message in CP_SubscribeResponse.InitializeAck.TopicCatchupSummary()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.TopicCatchupSummary and conformance CP_SubscribeResponse.InitializeAck.TopicCatchupSummary, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
}

uint64_t base witness table accessor for Hashable in CP_SubscribeResponse.InitializeAck.TopicCatchupSummary()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.TopicCatchupSummary and conformance CP_SubscribeResponse.InitializeAck.TopicCatchupSummary, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
}

uint64_t base witness table accessor for Equatable in CP_SubscribeResponse.InitializeAck.TopicCatchupSummary()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.TopicCatchupSummary and conformance CP_SubscribeResponse.InitializeAck.TopicCatchupSummary, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_SubscribeResponse.InitializeAck.MissingEncryptionID()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance CP_SubscribeResponse.InitializeAck.MissingEncryptionID, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
}

uint64_t base witness table accessor for Message in CP_SubscribeResponse.InitializeAck.MissingEncryptionID()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance CP_SubscribeResponse.InitializeAck.MissingEncryptionID, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
}

uint64_t base witness table accessor for Hashable in CP_SubscribeResponse.InitializeAck.MissingEncryptionID()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance CP_SubscribeResponse.InitializeAck.MissingEncryptionID, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
}

uint64_t base witness table accessor for Equatable in CP_SubscribeResponse.InitializeAck.MissingEncryptionID()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance CP_SubscribeResponse.InitializeAck.MissingEncryptionID, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_SubscribeResponse.TopicUpdate()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate and conformance CP_SubscribeResponse.TopicUpdate, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.TopicUpdate);
}

uint64_t base witness table accessor for Message in CP_SubscribeResponse.TopicUpdate()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate and conformance CP_SubscribeResponse.TopicUpdate, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.TopicUpdate);
}

uint64_t base witness table accessor for Hashable in CP_SubscribeResponse.TopicUpdate()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate and conformance CP_SubscribeResponse.TopicUpdate, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.TopicUpdate);
}

uint64_t base witness table accessor for Equatable in CP_SubscribeResponse.TopicUpdate()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate and conformance CP_SubscribeResponse.TopicUpdate, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.TopicUpdate);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_PublishRequest()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_PublishRequest and conformance CP_PublishRequest, (void (*)(uint64_t))type metadata accessor for CP_PublishRequest);
}

uint64_t base witness table accessor for Message in CP_PublishRequest()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_PublishRequest and conformance CP_PublishRequest, (void (*)(uint64_t))type metadata accessor for CP_PublishRequest);
}

uint64_t base witness table accessor for Hashable in CP_PublishRequest()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_PublishRequest and conformance CP_PublishRequest, (void (*)(uint64_t))type metadata accessor for CP_PublishRequest);
}

uint64_t base witness table accessor for Equatable in CP_PublishRequest()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_PublishRequest and conformance CP_PublishRequest, (void (*)(uint64_t))type metadata accessor for CP_PublishRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_PublishRequest.UpdatedEncryptionID()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_PublishRequest.UpdatedEncryptionID and conformance CP_PublishRequest.UpdatedEncryptionID, (void (*)(uint64_t))type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
}

uint64_t base witness table accessor for Message in CP_PublishRequest.UpdatedEncryptionID()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_PublishRequest.UpdatedEncryptionID and conformance CP_PublishRequest.UpdatedEncryptionID, (void (*)(uint64_t))type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
}

uint64_t base witness table accessor for Hashable in CP_PublishRequest.UpdatedEncryptionID()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_PublishRequest.UpdatedEncryptionID and conformance CP_PublishRequest.UpdatedEncryptionID, (void (*)(uint64_t))type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
}

uint64_t base witness table accessor for Equatable in CP_PublishRequest.UpdatedEncryptionID()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_PublishRequest.UpdatedEncryptionID and conformance CP_PublishRequest.UpdatedEncryptionID, (void (*)(uint64_t))type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_PublishResponse()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_PublishResponse and conformance CP_PublishResponse, (void (*)(uint64_t))type metadata accessor for CP_PublishResponse);
}

uint64_t base witness table accessor for Message in CP_PublishResponse()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_PublishResponse and conformance CP_PublishResponse, (void (*)(uint64_t))type metadata accessor for CP_PublishResponse);
}

uint64_t base witness table accessor for Hashable in CP_PublishResponse()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_PublishResponse and conformance CP_PublishResponse, (void (*)(uint64_t))type metadata accessor for CP_PublishResponse);
}

uint64_t base witness table accessor for Equatable in CP_PublishResponse()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_PublishResponse and conformance CP_PublishResponse, (void (*)(uint64_t))type metadata accessor for CP_PublishResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_UpsertTopicMetadataRequest()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_UpsertTopicMetadataRequest and conformance CP_UpsertTopicMetadataRequest, (void (*)(uint64_t))type metadata accessor for CP_UpsertTopicMetadataRequest);
}

uint64_t base witness table accessor for Message in CP_UpsertTopicMetadataRequest()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_UpsertTopicMetadataRequest and conformance CP_UpsertTopicMetadataRequest, (void (*)(uint64_t))type metadata accessor for CP_UpsertTopicMetadataRequest);
}

uint64_t base witness table accessor for Hashable in CP_UpsertTopicMetadataRequest()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_UpsertTopicMetadataRequest and conformance CP_UpsertTopicMetadataRequest, (void (*)(uint64_t))type metadata accessor for CP_UpsertTopicMetadataRequest);
}

uint64_t base witness table accessor for Equatable in CP_UpsertTopicMetadataRequest()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_UpsertTopicMetadataRequest and conformance CP_UpsertTopicMetadataRequest, (void (*)(uint64_t))type metadata accessor for CP_UpsertTopicMetadataRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_UpsertTopicMetadataResponse()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_UpsertTopicMetadataResponse and conformance CP_UpsertTopicMetadataResponse, (void (*)(uint64_t))type metadata accessor for CP_UpsertTopicMetadataResponse);
}

uint64_t base witness table accessor for Message in CP_UpsertTopicMetadataResponse()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_UpsertTopicMetadataResponse and conformance CP_UpsertTopicMetadataResponse, (void (*)(uint64_t))type metadata accessor for CP_UpsertTopicMetadataResponse);
}

uint64_t base witness table accessor for Hashable in CP_UpsertTopicMetadataResponse()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_UpsertTopicMetadataResponse and conformance CP_UpsertTopicMetadataResponse, (void (*)(uint64_t))type metadata accessor for CP_UpsertTopicMetadataResponse);
}

uint64_t base witness table accessor for Equatable in CP_UpsertTopicMetadataResponse()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_UpsertTopicMetadataResponse and conformance CP_UpsertTopicMetadataResponse, (void (*)(uint64_t))type metadata accessor for CP_UpsertTopicMetadataResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_CreateTopicRequest()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_CreateTopicRequest and conformance CP_CreateTopicRequest, (void (*)(uint64_t))type metadata accessor for CP_CreateTopicRequest);
}

uint64_t base witness table accessor for Message in CP_CreateTopicRequest()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_CreateTopicRequest and conformance CP_CreateTopicRequest, (void (*)(uint64_t))type metadata accessor for CP_CreateTopicRequest);
}

uint64_t base witness table accessor for Hashable in CP_CreateTopicRequest()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_CreateTopicRequest and conformance CP_CreateTopicRequest, (void (*)(uint64_t))type metadata accessor for CP_CreateTopicRequest);
}

uint64_t base witness table accessor for Equatable in CP_CreateTopicRequest()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_CreateTopicRequest and conformance CP_CreateTopicRequest, (void (*)(uint64_t))type metadata accessor for CP_CreateTopicRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_CreateTopicResponse()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_CreateTopicResponse and conformance CP_CreateTopicResponse, (void (*)(uint64_t))type metadata accessor for CP_CreateTopicResponse);
}

uint64_t base witness table accessor for Message in CP_CreateTopicResponse()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_CreateTopicResponse and conformance CP_CreateTopicResponse, (void (*)(uint64_t))type metadata accessor for CP_CreateTopicResponse);
}

uint64_t base witness table accessor for Hashable in CP_CreateTopicResponse()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_CreateTopicResponse and conformance CP_CreateTopicResponse, (void (*)(uint64_t))type metadata accessor for CP_CreateTopicResponse);
}

uint64_t base witness table accessor for Equatable in CP_CreateTopicResponse()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_CreateTopicResponse and conformance CP_CreateTopicResponse, (void (*)(uint64_t))type metadata accessor for CP_CreateTopicResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_CreateTopicResponse.ClientTopicConfig()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_CreateTopicResponse.ClientTopicConfig and conformance CP_CreateTopicResponse.ClientTopicConfig, (void (*)(uint64_t))type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
}

uint64_t base witness table accessor for Message in CP_CreateTopicResponse.ClientTopicConfig()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_CreateTopicResponse.ClientTopicConfig and conformance CP_CreateTopicResponse.ClientTopicConfig, (void (*)(uint64_t))type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
}

uint64_t base witness table accessor for Hashable in CP_CreateTopicResponse.ClientTopicConfig()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_CreateTopicResponse.ClientTopicConfig and conformance CP_CreateTopicResponse.ClientTopicConfig, (void (*)(uint64_t))type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
}

uint64_t base witness table accessor for Equatable in CP_CreateTopicResponse.ClientTopicConfig()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_CreateTopicResponse.ClientTopicConfig and conformance CP_CreateTopicResponse.ClientTopicConfig, (void (*)(uint64_t))type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_FetchTopicsRequest()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_FetchTopicsRequest and conformance CP_FetchTopicsRequest, (void (*)(uint64_t))type metadata accessor for CP_FetchTopicsRequest);
}

uint64_t base witness table accessor for Message in CP_FetchTopicsRequest()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_FetchTopicsRequest and conformance CP_FetchTopicsRequest, (void (*)(uint64_t))type metadata accessor for CP_FetchTopicsRequest);
}

uint64_t base witness table accessor for Hashable in CP_FetchTopicsRequest()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_FetchTopicsRequest and conformance CP_FetchTopicsRequest, (void (*)(uint64_t))type metadata accessor for CP_FetchTopicsRequest);
}

uint64_t base witness table accessor for Equatable in CP_FetchTopicsRequest()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_FetchTopicsRequest and conformance CP_FetchTopicsRequest, (void (*)(uint64_t))type metadata accessor for CP_FetchTopicsRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CP_FetchTopicsResponse()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_FetchTopicsResponse and conformance CP_FetchTopicsResponse, (void (*)(uint64_t))type metadata accessor for CP_FetchTopicsResponse);
}

uint64_t base witness table accessor for Message in CP_FetchTopicsResponse()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_FetchTopicsResponse and conformance CP_FetchTopicsResponse, (void (*)(uint64_t))type metadata accessor for CP_FetchTopicsResponse);
}

uint64_t base witness table accessor for Hashable in CP_FetchTopicsResponse()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_FetchTopicsResponse and conformance CP_FetchTopicsResponse, (void (*)(uint64_t))type metadata accessor for CP_FetchTopicsResponse);
}

uint64_t base witness table accessor for Equatable in CP_FetchTopicsResponse()
{
  return lazy protocol witness table accessor for type CP_Record and conformance CP_Record(&lazy protocol witness table cache variable for type CP_FetchTopicsResponse and conformance CP_FetchTopicsResponse, (void (*)(uint64_t))type metadata accessor for CP_FetchTopicsResponse);
}

uint64_t sub_1B0FEF4E4@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return key path getter for CP_Record.encryptionID : CP_Record(a1, type metadata accessor for CP_Record, a2);
}

uint64_t sub_1B0FEF510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CP_Record.encryptionID : CP_Record(a1, a2, a3, a4, type metadata accessor for CP_Record);
}

uint64_t sub_1B0FEF544@<X0>(uint64_t a1@<X8>)
{
  return CP_TopicSubscribersRequest.topicTerminationRequest.getter(a1);
}

uint64_t sub_1B0FEF56C@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(result + 16))
  {
    uint64_t v4 = 0;
    unint64_t v3 = 0xE000000000000000;
  }
  else
  {
    uint64_t v4 = *(void *)result;
    unint64_t v3 = *(void *)(result + 8);
    unint64_t result = outlined copy of CP_SystemEvent.OneOf_Event();
  }
  *a2 = v4;
  a2[1] = v3;
  return result;
}

uint64_t sub_1B0FEF5C0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_19Tm(a1, a2, a3, a4, 0);
}

uint64_t sub_1B0FEF5C8@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  int v3 = *(unsigned __int8 *)(result + 16);
  if (v3 == 255 || (v3 & 1) == 0)
  {
    uint64_t v6 = 0;
    unint64_t v5 = 0xE000000000000000;
  }
  else
  {
    uint64_t v6 = *(void *)result;
    unint64_t v5 = *(void *)(result + 8);
    unint64_t result = outlined copy of CP_SystemEvent.OneOf_Event();
  }
  *a2 = v6;
  a2[1] = v5;
  return result;
}

uint64_t sub_1B0FEF628(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_19Tm(a1, a2, a3, a4, 1);
}

uint64_t keypath_set_19Tm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v9 = *(void *)a2;
  uint64_t v10 = *(void *)(a2 + 8);
  unsigned __int8 v11 = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  uint64_t result = outlined consume of CP_SystemEvent.OneOf_Event?(v9, v10, v11);
  *(void *)a2 = v8;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = a5;
  return result;
}

uint64_t sub_1B0FEF698@<X0>(void *a1@<X8>)
{
  return CP_SubscribeRequest.initialize.getter(a1);
}

uint64_t sub_1B0FEF6C8@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return key path getter for CP_Record.encryptionID : CP_Record(a1, type metadata accessor for CP_SubscribeRequest.Initialize, a2);
}

uint64_t sub_1B0FEF6F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CP_Record.encryptionID : CP_Record(a1, a2, a3, a4, type metadata accessor for CP_SubscribeRequest.Initialize);
}

uint64_t sub_1B0FEF720@<X0>(uint64_t a1@<X8>)
{
  return CP_SubscribeResponse.initializeAck.getter(a1);
}

uint64_t sub_1B0FEF748@<X0>(uint64_t a1@<X8>)
{
  return CP_SubscribeResponse.record.getter(a1);
}

uint64_t sub_1B0FEF770@<X0>(uint64_t a1@<X8>)
{
  return CP_SubscribeResponse.topicUpdate.getter(a1);
}

uint64_t sub_1B0FEF7A8@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return key path getter for CP_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID : CP_SubscribeResponse.InitializeAck.MissingEncryptionID(a1, type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID, a2);
}

uint64_t sub_1B0FEF7D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CP_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID : CP_SubscribeResponse.InitializeAck.MissingEncryptionID(a1, a2, a3, a4, type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
}

uint64_t sub_1B0FEF800@<X0>(uint64_t a1@<X8>)
{
  return CP_PublishRequest.record.getter(a1);
}

uint64_t sub_1B0FEF828@<X0>(void *a1@<X8>)
{
  return CP_PublishRequest.updatedEncryptionID.getter(a1);
}

uint64_t sub_1B0FEF850@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return key path getter for CP_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID : CP_SubscribeResponse.InitializeAck.MissingEncryptionID(a1, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID, a2);
}

uint64_t sub_1B0FEF87C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CP_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID : CP_SubscribeResponse.InitializeAck.MissingEncryptionID(a1, a2, a3, a4, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
}

uint64_t sub_1B0FEF8AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CP_PublishResponse.seqNumAck : CP_PublishResponse(a1, a2, a3, a4, type metadata accessor for CP_SequenceNumber, type metadata accessor for CP_SequenceNumber, type metadata accessor for CP_PublishResponse, &demangling cache variable for type metadata for CP_SequenceNumber?);
}

uint64_t sub_1B0FEF90C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CP_PublishResponse.seqNumAck : CP_PublishResponse(a1, a2, a3, a4, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig, type metadata accessor for CP_CreateTopicResponse, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
}

ValueMetadata *type metadata accessor for CP_ResponseStatus()
{
  return &type metadata for CP_ResponseStatus;
}

uint64_t *initializeBufferWithCopyOfBuffer for CP_Record(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[2];
    unint64_t v9 = a2[3];
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v8, v9);
    a1[2] = v8;
    a1[3] = v9;
    uint64_t v10 = a2[5];
    a1[4] = a2[4];
    a1[5] = v10;
    uint64_t v11 = a3[8];
    char v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for UnknownStorage();
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    v15(v12, v13, v14);
    uint64_t v16 = a3[9];
    uint64_t v17 = (_OWORD *)((char *)a1 + v16);
    uint64_t v18 = (_OWORD *)((char *)a2 + v16);
    uint64_t v19 = type metadata accessor for CP_SequenceNumber(0);
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      *uint64_t v17 = *v18;
      v15((char *)v17 + *(int *)(v19 + 24), (char *)v18 + *(int *)(v19 + 24), v14);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    uint64_t v23 = a3[10];
    uint64_t v24 = (uint64_t *)((char *)a1 + v23);
    uint64_t v25 = (uint64_t *)((char *)a2 + v23);
    uint64_t v26 = type metadata accessor for CP_EncryptionID(0);
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      uint64_t v29 = *v25;
      unint64_t v30 = v25[1];
      outlined copy of Data._Representation(*v25, v30);
      *uint64_t v24 = v29;
      v24[1] = v30;
      v15((char *)v24 + *(int *)(v26 + 20), (char *)v25 + *(int *)(v26 + 20), v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
  }
  return a1;
}

uint64_t destroy for CP_Record(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(void *)(a1 + 16), *(void *)(a1 + 24));
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[8];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  char v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v12(v4, v5);
  uint64_t v6 = a1 + a2[9];
  uint64_t v7 = type metadata accessor for CP_SequenceNumber(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7)) {
    v12(v6 + *(int *)(v7 + 24), v5);
  }
  uint64_t v8 = a1 + a2[10];
  uint64_t v9 = type metadata accessor for CP_EncryptionID(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
  if (!result)
  {
    outlined consume of Data._Representation(*(void *)v8, *(void *)(v8 + 8));
    uint64_t v11 = v8 + *(int *)(v9 + 20);
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v5);
  }
  return result;
}

void *initializeWithCopy for CP_Record(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[2];
  unint64_t v8 = a2[3];
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v7, v8);
  a1[2] = v7;
  a1[3] = v8;
  uint64_t v9 = a2[5];
  a1[4] = a2[4];
  a1[5] = v9;
  uint64_t v10 = a3[8];
  uint64_t v11 = (char *)a1 + v10;
  char v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
  swift_bridgeObjectRetain();
  v14(v11, v12, v13);
  uint64_t v15 = a3[9];
  uint64_t v16 = (_OWORD *)((char *)a1 + v15);
  uint64_t v17 = (_OWORD *)((char *)a2 + v15);
  uint64_t v18 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    *uint64_t v16 = *v17;
    v14((char *)v16 + *(int *)(v18 + 24), (char *)v17 + *(int *)(v18 + 24), v13);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  uint64_t v21 = a3[10];
  uint64_t v22 = (void *)((char *)a1 + v21);
  uint64_t v23 = (void *)((char *)a2 + v21);
  uint64_t v24 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    uint64_t v27 = *v23;
    unint64_t v28 = v23[1];
    outlined copy of Data._Representation(*v23, v28);
    *uint64_t v22 = v27;
    v22[1] = v28;
    v14((char *)v22 + *(int *)(v24 + 20), (char *)v23 + *(int *)(v24 + 20), v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  return a1;
}

void *assignWithCopy for CP_Record(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  outlined copy of Data._Representation(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  a1[2] = v6;
  a1[3] = v7;
  outlined consume of Data._Representation(v8, v9);
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  uint64_t v10 = *(int *)(a3 + 32);
  uint64_t v11 = (char *)a1 + v10;
  char v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  uint64_t v40 = *(void *)(v13 - 8);
  uint64_t v41 = v13;
  uint64_t v39 = *(void (**)(char *, char *))(v40 + 24);
  v39(v11, v12);
  uint64_t v42 = a3;
  uint64_t v14 = *(int *)(a3 + 36);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      *(void *)uint64_t v15 = *(void *)v16;
      *((void *)v15 + 1) = *((void *)v16 + 1);
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(&v15[*(int *)(v17 + 24)], &v16[*(int *)(v17 + 24)], v41);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    outlined destroy of CP_SequenceNumber((uint64_t)v15, type metadata accessor for CP_SequenceNumber);
LABEL_6:
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v15 = *(void *)v16;
  *((void *)v15 + 1) = *((void *)v16 + 1);
  ((void (*)(char *, char *, uint64_t))v39)(&v15[*(int *)(v17 + 24)], &v16[*(int *)(v17 + 24)], v41);
LABEL_7:
  uint64_t v23 = *(int *)(v42 + 40);
  uint64_t v24 = (void *)((char *)a1 + v23);
  uint64_t v25 = (void *)((char *)a2 + v23);
  uint64_t v26 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v27 = *(void *)(v26 - 8);
  unint64_t v28 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v27 + 48);
  int v29 = v28(v24, 1, v26);
  int v30 = v28(v25, 1, v26);
  if (!v29)
  {
    if (!v30)
    {
      uint64_t v35 = *v25;
      unint64_t v36 = v25[1];
      outlined copy of Data._Representation(*v25, v36);
      uint64_t v37 = *v24;
      unint64_t v38 = v24[1];
      *uint64_t v24 = v35;
      v24[1] = v36;
      outlined consume of Data._Representation(v37, v38);
      ((void (*)(char *, char *, uint64_t))v39)((char *)v24 + *(int *)(v26 + 20), (char *)v25 + *(int *)(v26 + 20), v41);
      return a1;
    }
    outlined destroy of CP_SequenceNumber((uint64_t)v24, type metadata accessor for CP_EncryptionID);
    goto LABEL_12;
  }
  if (v30)
  {
LABEL_12:
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
    memcpy(v24, v25, *(void *)(*(void *)(v33 - 8) + 64));
    return a1;
  }
  uint64_t v31 = *v25;
  unint64_t v32 = v25[1];
  outlined copy of Data._Representation(*v25, v32);
  *uint64_t v24 = v31;
  v24[1] = v32;
  (*(void (**)(char *, char *, uint64_t))(v40 + 16))((char *)v24 + *(int *)(v26 + 20), (char *)v25 + *(int *)(v26 + 20), v41);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  return a1;
}

_OWORD *initializeWithTake for CP_Record(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = a3[8];
  uint64_t v8 = (char *)a1 + v7;
  unint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  uint64_t v12 = a3[9];
  uint64_t v13 = (_OWORD *)((char *)a1 + v12);
  uint64_t v14 = (_OWORD *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    _OWORD *v13 = *v14;
    v11((char *)v13 + *(int *)(v15 + 24), (char *)v14 + *(int *)(v15 + 24), v10);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v18 = a3[10];
  uint64_t v19 = (_OWORD *)((char *)a1 + v18);
  int v20 = (_OWORD *)((char *)a2 + v18);
  uint64_t v21 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    *uint64_t v19 = *v20;
    v11((char *)v19 + *(int *)(v21 + 20), (char *)v20 + *(int *)(v21 + 20), v10);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  return a1;
}

void *assignWithTake for CP_Record(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a1[2];
  unint64_t v8 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  outlined consume of Data._Representation(v7, v8);
  a1[4] = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  a1[5] = *(void *)(a2 + 40);
  uint64_t v9 = *(int *)(a3 + 32);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage();
  uint64_t v35 = *(void *)(v12 - 8);
  uint64_t v36 = v12;
  char v34 = *(void (**)(char *, uint64_t))(v35 + 40);
  v34(v10, v11);
  uint64_t v37 = a3;
  uint64_t v13 = *(int *)(a3 + 36);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)(a2 + v13);
  uint64_t v16 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  int v19 = v18(v14, 1, v16);
  int v20 = v18(v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(&v14[*(int *)(v16 + 24)], &v15[*(int *)(v16 + 24)], v36);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v20)
  {
    outlined destroy of CP_SequenceNumber((uint64_t)v14, type metadata accessor for CP_SequenceNumber);
LABEL_6:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
    memcpy(v14, v15, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  ((void (*)(char *, char *, uint64_t))v34)(&v14[*(int *)(v16 + 24)], &v15[*(int *)(v16 + 24)], v36);
LABEL_7:
  uint64_t v22 = *(int *)(v37 + 40);
  uint64_t v23 = (void *)((char *)a1 + v22);
  uint64_t v24 = (uint64_t *)(a2 + v22);
  uint64_t v25 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v26 + 48);
  int v28 = v27(v23, 1, v25);
  int v29 = v27(v24, 1, v25);
  if (!v28)
  {
    if (!v29)
    {
      uint64_t v32 = *v23;
      unint64_t v33 = v23[1];
      *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
      outlined consume of Data._Representation(v32, v33);
      ((void (*)(char *, char *, uint64_t))v34)((char *)v23 + *(int *)(v25 + 20), (char *)v24 + *(int *)(v25 + 20), v36);
      return a1;
    }
    outlined destroy of CP_SequenceNumber((uint64_t)v23, type metadata accessor for CP_EncryptionID);
    goto LABEL_12;
  }
  if (v29)
  {
LABEL_12:
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
    memcpy(v23, v24, *(void *)(*(void *)(v30 - 8) + 64));
    return a1;
  }
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))((char *)v23 + *(int *)(v25 + 20), (char *)v24 + *(int *)(v25 + 20), v36);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_Record(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0FF0ACC);
}

uint64_t sub_1B0FF0ACC(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[8];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v13(a1 + v11, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[9];
    goto LABEL_9;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a3[10];
  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for CP_Record(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0FF0C60);
}

uint64_t sub_1B0FF0C60(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
    return result;
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[8];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[9];
    goto LABEL_7;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = v5 + a4[10];
  return v15(v17, a2, a2, v16);
}

void type metadata completion function for CP_Record()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CP_SequenceNumber?(319, &lazy cache variable for type metadata for CP_SequenceNumber?, (void (*)(uint64_t))type metadata accessor for CP_SequenceNumber);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CP_SequenceNumber?(319, &lazy cache variable for type metadata for CP_EncryptionID?, (void (*)(uint64_t))type metadata accessor for CP_EncryptionID);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void type metadata accessor for CP_SequenceNumber?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t getEnumTagSinglePayload for CP_KeyValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_140Tm_1);
}

uint64_t storeEnumTagSinglePayload for CP_KeyValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_141Tm_1);
}

uint64_t type metadata completion function for CP_KeyValue()
{
  return type metadata completion function for AttachmentLedger_MMCSMetadata.BlobData();
}

uint64_t *initializeBufferWithCopyOfBuffer for CP_SequenceNumber(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *int v3 = *a2;
    int v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v5 = *(int *)(a3 + 24);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

_OWORD *initializeWithCopy for CP_SequenceNumber(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

void *assignWithCopy for CP_SequenceNumber(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_OWORD *assignWithTake for CP_SequenceNumber(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_SequenceNumber(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0FF1244);
}

uint64_t sub_1B0FF1244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
  return v6(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for CP_SequenceNumber(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0FF12C8);
}

uint64_t sub_1B0FF12C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 24);
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, a2, a2, v6);
}

uint64_t type metadata completion function for CP_SequenceNumber()
{
  return type metadata completion function for AttachmentLedger_MMCSMetadata.BlobData();
}

uint64_t getEnumTagSinglePayload for CP_EncryptionID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0FF1364);
}

uint64_t sub_1B0FF1364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CP_EncryptionID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0FF1434);
}

void *sub_1B0FF1434(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for CP_EncryptionID()
{
  return type metadata completion function for CP_EncryptionID();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CP_TopicSubscribersRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      if (EnumCaseMultiPayload == 1)
      {
        a1[2] = a2[2];
        *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
        uint64_t v13 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0) + 24);
      }
      else
      {
        uint64_t v13 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0) + 20);
      }
      uint64_t v22 = (char *)a1 + v13;
      uint64_t v14 = (char *)a2 + v13;
      uint64_t v15 = type metadata accessor for UnknownStorage();
      uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
      swift_bridgeObjectRetain();
      v16(v22, v14, v15);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v17 = *(int *)(a3 + 20);
    uint64_t v18 = (char *)a1 + v17;
    int v19 = (char *)a2 + v17;
    uint64_t v20 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
  }
  return a1;
}

uint64_t destroy for CP_TopicSubscribersRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4))
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    swift_bridgeObjectRelease();
    if (EnumCaseMultiPayload == 1) {
      uint64_t v6 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0) + 24);
    }
    else {
      uint64_t v6 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0) + 20);
    }
    uint64_t v7 = a1 + v6;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  uint64_t v9 = a1 + *(int *)(a2 + 20);
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
  return v11(v9, v10);
}

void *initializeWithCopy for CP_TopicSubscribersRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    if (EnumCaseMultiPayload == 1)
    {
      a1[2] = a2[2];
      *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
      uint64_t v11 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0) + 24);
    }
    else
    {
      uint64_t v11 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0) + 20);
    }
    uint64_t v20 = (char *)a1 + v11;
    uint64_t v12 = (char *)a2 + v11;
    uint64_t v13 = type metadata accessor for UnknownStorage();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    v14(v20, v12, v13);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v15 = *(int *)(a3 + 20);
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

uint64_t assignWithCopy for CP_TopicSubscribersRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v12 = *(void *)(a2 + 16);
        *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
        *(void *)(a1 + 16) = v12;
        uint64_t v13 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0) + 24);
      }
      else
      {
        uint64_t v13 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0) + 20);
      }
      uint64_t v30 = a1 + v13;
      uint64_t v14 = a2 + v13;
      uint64_t v15 = type metadata accessor for UnknownStorage();
      uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16);
      swift_bridgeObjectRetain();
      v16(v30, v14, v15);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_14;
    }
LABEL_7:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_14;
  }
  if (v10)
  {
    outlined destroy of CP_SequenceNumber(a1, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of CP_SequenceNumber(a1, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
    int v18 = swift_getEnumCaseMultiPayload();
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    if (v18 == 1)
    {
      uint64_t v19 = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *(void *)(a1 + 16) = v19;
      uint64_t v20 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0) + 24);
    }
    else
    {
      uint64_t v20 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0) + 20);
    }
    uint64_t v21 = a1 + v20;
    uint64_t v22 = a2 + v20;
    uint64_t v23 = type metadata accessor for UnknownStorage();
    uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16);
    swift_bridgeObjectRetain();
    v24(v21, v22, v23);
    swift_storeEnumTagMultiPayload();
  }
LABEL_14:
  uint64_t v25 = *(int *)(a3 + 20);
  uint64_t v26 = a1 + v25;
  uint64_t v27 = a2 + v25;
  uint64_t v28 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 24))(v26, v27, v28);
  return a1;
}

_OWORD *initializeWithTake for CP_TopicSubscribersRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      *((void *)a1 + 2) = *((void *)a2 + 2);
      *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
      uint64_t v10 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0) + 24);
    }
    else
    {
      uint64_t v10 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0) + 20);
    }
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v14 = *(int *)(a3 + 20);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
  return a1;
}

uint64_t assignWithTake for CP_TopicSubscribersRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      *(_OWORD *)a1 = *(_OWORD *)a2;
      if (EnumCaseMultiPayload == 1)
      {
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
        uint64_t v12 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0) + 24);
      }
      else
      {
        uint64_t v12 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0) + 20);
      }
      uint64_t v13 = a1 + v12;
      uint64_t v14 = a2 + v12;
      uint64_t v15 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_14;
    }
LABEL_7:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_14;
  }
  if (v10)
  {
    outlined destroy of CP_SequenceNumber(a1, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of CP_SequenceNumber(a1, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
    int v17 = swift_getEnumCaseMultiPayload();
    *(_OWORD *)a1 = *(_OWORD *)a2;
    if (v17 == 1)
    {
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      uint64_t v18 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0) + 24);
    }
    else
    {
      uint64_t v18 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0) + 20);
    }
    uint64_t v19 = a1 + v18;
    uint64_t v20 = a2 + v18;
    uint64_t v21 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
    swift_storeEnumTagMultiPayload();
  }
LABEL_14:
  uint64_t v22 = *(int *)(a3 + 20);
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  uint64_t v25 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 40))(v23, v24, v25);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_TopicSubscribersRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0FF24E0);
}

uint64_t sub_1B0FF24E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_149Tm(a1, a2, a3, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
}

uint64_t storeEnumTagSinglePayload for CP_TopicSubscribersRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0FF2500);
}

uint64_t sub_1B0FF2500(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_150Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
}

void type metadata completion function for CP_TopicSubscribersRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t initializeBufferWithCopyOfBuffer for CP_TopicSubscribersRequest.OneOf_Operation(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *(void *)a1 = *a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    if (EnumCaseMultiPayload == 1)
    {
      *(void *)(a1 + 16) = a2[2];
      *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
      uint64_t v8 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0) + 24);
    }
    else
    {
      uint64_t v8 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0) + 20);
    }
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for CP_TopicSubscribersRequest.OneOf_Operation(uint64_t a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  swift_bridgeObjectRelease();
  if (EnumCaseMultiPayload == 1) {
    uint64_t v3 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0) + 24);
  }
  else {
    uint64_t v3 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0) + 20);
  }
  uint64_t v4 = a1 + v3;
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t initializeWithCopy for CP_TopicSubscribersRequest.OneOf_Operation(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    uint64_t v6 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0) + 24);
  }
  else
  {
    uint64_t v6 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0) + 20);
  }
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for CP_TopicSubscribersRequest.OneOf_Operation(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of CP_SequenceNumber(a1, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v5 = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *(void *)(a1 + 16) = v5;
      uint64_t v6 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0) + 24);
    }
    else
    {
      uint64_t v6 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0) + 20);
    }
    uint64_t v7 = a1 + v6;
    uint64_t v8 = a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for CP_TopicSubscribersRequest.OneOf_Operation(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    uint64_t v5 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0) + 24);
  }
  else
  {
    uint64_t v5 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0) + 20);
  }
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for CP_TopicSubscribersRequest.OneOf_Operation(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of CP_SequenceNumber(a1, type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *(_OWORD *)a1 = *(_OWORD *)a2;
    if (EnumCaseMultiPayload == 1)
    {
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      uint64_t v5 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0) + 24);
    }
    else
    {
      uint64_t v5 = *(int *)(type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0) + 20);
    }
    uint64_t v6 = a1 + v5;
    uint64_t v7 = a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for CP_TopicSubscribersRequest.OneOf_Operation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for CP_TopicSubscribersRequest.OneOf_Operation(a1, a2, a3, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck, type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
}

uint64_t getEnumTagSinglePayload for CP_TopicSubscribersRequest.TopicTerminatedAck(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_68Tm);
}

uint64_t storeEnumTagSinglePayload for CP_TopicSubscribersRequest.TopicTerminatedAck(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_69Tm);
}

uint64_t type metadata completion function for CP_TopicSubscribersRequest.TopicTerminatedAck()
{
  return type metadata completion function for CP_EncryptionID();
}

void *initializeBufferWithCopyOfBuffer for CP_TopicSubscribersRequest.TopicTerminationRequest(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = a2[2];
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t initializeWithCopy for CP_TopicSubscribersRequest.TopicTerminationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for CP_TopicSubscribersRequest.TopicTerminationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for CP_TopicSubscribersRequest.TopicTerminationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for CP_TopicSubscribersRequest.TopicTerminationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_TopicSubscribersRequest.TopicTerminationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_140Tm_2);
}

uint64_t storeEnumTagSinglePayload for CP_TopicSubscribersRequest.TopicTerminationRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_141Tm_2);
}

uint64_t type metadata completion function for CP_TopicSubscribersRequest.TopicTerminationRequest()
{
  return type metadata completion function for AttachmentLedger_MMCSMetadata.BlobData();
}

ValueMetadata *type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest.Reason()
{
  return &type metadata for CP_TopicSubscribersRequest.TopicTerminationRequest.Reason;
}

uint64_t *initializeBufferWithCopyOfBuffer for CP_TopicSubscribers(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    a1[1] = a2[1];
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for CP_TopicSubscribers(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for CP_TopicSubscribers(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *assignWithCopy for CP_TopicSubscribers(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *assignWithTake for CP_TopicSubscribers(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_TopicSubscribers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0FF3418);
}

uint64_t sub_1B0FF3418(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CP_TopicSubscribers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0FF34DC);
}

void *sub_1B0FF34DC(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for CP_TopicSubscribers()
{
  return type metadata completion function for AttachmentLedger_MMCSMetadata.BlobData();
}

uint64_t getEnumTagSinglePayload for CP_TopicSubscribers.TopicSubscribersInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_140Tm_3);
}

uint64_t storeEnumTagSinglePayload for CP_TopicSubscribers.TopicSubscribersInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_141Tm_3);
}

uint64_t type metadata completion function for CP_TopicSubscribers.TopicSubscribersInfo()
{
  return type metadata completion function for AttachmentLedger_MMCSMetadata.BlobData();
}

uint64_t *initializeBufferWithCopyOfBuffer for CP_TopicSubscribersRequest.TopicTerminatedAck(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *int v3 = *a2;
    int v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for CP_TopicSubscribersRequest.TopicTerminatedAck(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for CP_TopicSubscribersRequest.TopicTerminatedAck(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *assignWithCopy for CP_TopicSubscribersRequest.TopicTerminatedAck(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *assignWithTake for CP_TopicSubscribersRequest.TopicTerminatedAck(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for CP_TopicSubscribers.TerminateTopic(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0FF392C);
}

uint64_t __swift_get_extra_inhabitant_index_68Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CP_TopicSubscribers.TerminateTopic(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0FF39F4);
}

uint64_t __swift_store_extra_inhabitant_index_69Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CP_SystemEvent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = v8 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    int v7 = *((unsigned __int8 *)a2 + 16);
    if (v7 == 255)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    }
    else
    {
      char v9 = v7 & 1;
      uint64_t v10 = *a2;
      uint64_t v11 = a2[1];
      outlined copy of CP_SystemEvent.OneOf_Event();
      *(void *)uint64_t v4 = v10;
      *(void *)(v4 + 8) = v11;
      *(unsigned char *)(v4 + 16) = v9;
    }
    uint64_t v12 = *(int *)(a3 + 20);
    uint64_t v13 = v4 + v12;
    uint64_t v14 = (uint64_t)a2 + v12;
    uint64_t v15 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return v4;
}